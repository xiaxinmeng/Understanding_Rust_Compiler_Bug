{"sha": "3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNzhhNmUzZTBkYmU1YWQyYWU3MTJlYzVjOTRhMzc5Mjc0NWYyNmM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-06-15T16:20:59Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-06-15T16:21:23Z"}, "message": "Somewhat handle variables in the derefed type, and add another test", "tree": {"sha": "a6f46e5b38ab632474dd6f87734d9ddfa8b83757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f46e5b38ab632474dd6f87734d9ddfa8b83757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c", "html_url": "https://github.com/rust-lang/rust/commit/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca5ed2307c6dd8396f58460652c77a6a63704e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5ed2307c6dd8396f58460652c77a6a63704e0b", "html_url": "https://github.com/rust-lang/rust/commit/ca5ed2307c6dd8396f58460652c77a6a63704e0b"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "4ed19f860d22f18d22993f83e11e1b72f742b571", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c", "patch": "@@ -474,6 +474,17 @@ impl Ty {\n             _ => None,\n         }\n     }\n+\n+    /// Shifts up `Ty::Bound` vars by `n`.\n+    pub fn shift_bound_vars(self, n: i32) -> Ty {\n+        self.fold(&mut |ty| match ty {\n+            Ty::Bound(idx) => {\n+                assert!(idx as i32 >= -n);\n+                Ty::Bound((idx as i32 + n) as u32)\n+            }\n+            ty => ty,\n+        })\n+    }\n }\n \n impl HirDisplay for &Ty {"}, {"sha": "11f4894893bf7140b2cf7b279424c21da7e61512", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c", "patch": "@@ -5,7 +5,7 @@\n \n use std::iter::successors;\n \n-use log::info;\n+use log::{info, warn};\n \n use crate::{HirDatabase, Name, Resolver};\n use super::{traits::Solution, Ty, Canonical};\n@@ -43,15 +43,13 @@ fn deref_by_trait(\n     let target = deref_trait.associated_type_by_name(db, Name::target())?;\n \n     // FIXME we should check that Deref has no type parameters, because we assume it below\n-\n     // FIXME make the Canonical handling nicer\n-    // TODO shift inference variables in ty\n \n     let projection = super::traits::ProjectionPredicate {\n         ty: Ty::Bound(0),\n         projection_ty: super::ProjectionTy {\n             associated_ty: target,\n-            parameters: vec![ty.value.clone()].into(),\n+            parameters: vec![ty.value.clone().shift_bound_vars(1)].into(),\n         },\n     };\n \n@@ -61,10 +59,26 @@ fn deref_by_trait(\n \n     match &solution {\n         Solution::Unique(vars) => {\n+            // FIXME: vars may contain solutions for any inference variables\n+            // that happened to be inside ty. To correctly handle these, we\n+            // would have to pass the solution up to the inference context, but\n+            // that requires a larger refactoring (especially if the deref\n+            // happens during method resolution). So for the moment, we just\n+            // check that we're not in the situation we're we would actually\n+            // need to handle the values of the additional variables, i.e.\n+            // they're just being 'passed through'. In the 'standard' case where\n+            // we have `impl<T> Deref for Foo<T> { Target = T }`, that should be\n+            // the case.\n+            for i in 1..vars.0.num_vars {\n+                if vars.0.value[i] != Ty::Bound((i - 1) as u32) {\n+                    warn!(\"complex solution for derefing {:?}: {:?}, ignoring\", ty, solution);\n+                    return None;\n+                }\n+            }\n             Some(Canonical { value: vars.0.value[0].clone(), num_vars: vars.0.num_vars })\n         }\n         Solution::Ambig(_) => {\n-            info!(\"Ambiguous solution for deref: {:?}\", solution);\n+            info!(\"Ambiguous solution for derefing {:?}: {:?}\", ty, solution);\n             None\n         }\n     }"}, {"sha": "059a73900b1e6c5edb3b6e0125c7724d65e63bad", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=3e78a6e3e0dbe5ad2ae712ec5c94a3792745f26c", "patch": "@@ -2766,6 +2766,37 @@ fn test(s: Arc<S>) {\n     assert_eq!(t, \"(S, u128)\");\n }\n \n+#[test]\n+fn deref_trait_with_inference_var() {\n+    // std::env::set_var(\"RUST_BACKTRACE\", \"1\");\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+#[lang = \"deref\"]\n+trait Deref {\n+    type Target;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+struct Arc<T>;\n+fn new_arc<T>() -> Arc<T> {}\n+impl<T> Deref for Arc<T> {\n+    type Target = T;\n+}\n+\n+struct S;\n+fn foo(a: Arc<S>) {}\n+\n+fn test() {\n+    let a = new_arc();\n+    let b = (*a)<|>;\n+    foo(a);\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"S\");\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}]}