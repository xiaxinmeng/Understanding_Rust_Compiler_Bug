{"sha": "163adf2860d0a5d9eff0e401e314de9383ff56a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2M2FkZjI4NjBkMGE1ZDllZmYwZTQwMWUzMTRkZTkzODNmZjU2YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-31T14:06:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-31T14:06:14Z"}, "message": "Auto merge of #53699 - oli-obk:promotion_stability_hole, r=nikomatsakis\n\nFix promotion stability hole in old borrowck\n\nr? @nikomatsakis\n\nI screwed up the promotion stability checks. Big time. They were basically nonexistant. We had tests for it. I also screwed up said tests. This is in stable already :(\n\nBasically stability checks of promotion only worked if you tried to use a const fn defined in the same crate.\n\ncc @eddyb", "tree": {"sha": "cb7b1eab552db16564fac146b4ee3cb1e4487525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb7b1eab552db16564fac146b4ee3cb1e4487525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/163adf2860d0a5d9eff0e401e314de9383ff56a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/163adf2860d0a5d9eff0e401e314de9383ff56a1", "html_url": "https://github.com/rust-lang/rust/commit/163adf2860d0a5d9eff0e401e314de9383ff56a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/163adf2860d0a5d9eff0e401e314de9383ff56a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2afca36672a85248f4da3e8db8cdfac198ad4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2afca36672a85248f4da3e8db8cdfac198ad4ad", "html_url": "https://github.com/rust-lang/rust/commit/c2afca36672a85248f4da3e8db8cdfac198ad4ad"}, {"sha": "2d2b69d4998ea71674d292af223bcacae8a5df4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2b69d4998ea71674d292af223bcacae8a5df4a", "html_url": "https://github.com/rust-lang/rust/commit/2d2b69d4998ea71674d292af223bcacae8a5df4a"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "a3bca6de6c2d7b4dc9797406fff6cc99ad7f8196", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -127,6 +127,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n            mir: &'a Mir<'tcx>,\n            mode: Mode)\n            -> Qualifier<'a, 'tcx, 'tcx> {\n+        assert!(def_id.is_local());\n         let mut rpo = traversal::reverse_postorder(mir);\n         let temps = promote_consts::collect_temps(mir, &mut rpo);\n         rpo.reset();\n@@ -927,9 +928,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             .iter()\n                             .any(|&(ref sym, _)| sym == feature_name) &&\n \n-                        // this doesn't come from a crate with the feature-gate enabled,\n-                        self.def_id.is_local() &&\n-\n                         // this doesn't come from a macro that has #[allow_internal_unstable]\n                         !self.span.allows_unstable()\n                     {"}, {"sha": "677255daa289a6f3516a3a3290fd551bd96d6bb6", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -189,9 +189,6 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n                     .iter()\n                     .any(|&(ref sym, _)| sym == feature_name) ||\n \n-                    // this comes from a crate with the feature-gate enabled,\n-                    !def_id.is_local() ||\n-\n                     // this comes from a macro that has #[allow_internal_unstable]\n                     span.allows_unstable();\n             if !stable_check {"}, {"sha": "18c6b52fa7c212908b407dcb3e2a613df3e97966", "filename": "src/test/ui/consts/const-eval/auxiliary/stability.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Crate that exports a const fn. Used for testing cross-crate.\n+\n+#![crate_type=\"rlib\"]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#![feature(rustc_const_unstable, const_fn)]\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature=\"foo\")]\n+pub const fn foo() -> u32 { 42 }"}, {"sha": "ed3e38486baf628a045b33d3709c250044c4d5dd", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -11,6 +11,7 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     //~^ does not live long enough\n LL | }\n    | - temporary value only lives until here\n    |"}, {"sha": "623e99480a70a752c17d2c26eae70c861b13643c", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -31,4 +31,5 @@ fn a() {\n fn main() {\n     let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n+    //~^ does not live long enough\n }"}, {"sha": "b9856d37b0ee1a846a47345f9bec08c6bed2dd07", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -21,12 +21,23 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |     let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n    |                            ^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn.rs:33:26\n+   |\n LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     //~^ does not live long enough\n LL | }\n    | - temporary value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "4c8f2f47d1e8dce593cc47e062c087cc95ba18fc", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn_cross_crate.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -0,0 +1,13 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:19:29\n+   |\n+LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n+   |                             ^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "81be5d4fe1a382ff425749188bf20b8bd4726743", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn_cross_crate.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.rs?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:stability.rs\n+\n+extern crate stability;\n+\n+use stability::foo;\n+\n+fn main() {\n+    let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+    let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n+}"}, {"sha": "cea36a0fa36beb5510a31e34e215cbd7b80a9ac6", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn_cross_crate.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/163adf2860d0a5d9eff0e401e314de9383ff56a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.stderr?ref=163adf2860d0a5d9eff0e401e314de9383ff56a1", "patch": "@@ -0,0 +1,24 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:18:28\n+   |\n+LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+   |                            ^^^^^ temporary value does not live long enough\n+LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:19:29\n+   |\n+LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n+   |                             ^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}