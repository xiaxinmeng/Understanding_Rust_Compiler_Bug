{"sha": "2a6022949077176bfff9f72282dc52e51a175cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjAyMjk0OTA3NzE3NmJmZmY5ZjcyMjgyZGM1MmU1MWExNzVjYjc=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-01T23:20:14Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-02T21:27:59Z"}, "message": "rustdoc: Clean up handling of lifetime bounds\n\nPreviously, rustdoc recorded lifetime bounds by rendering them into the\nname of the lifetime parameter. Now, it leaves the name as the actual\nname and instead records lifetime bounds in an `outlives` list, similar\nto how type parameter bounds are recorded.", "tree": {"sha": "ad452a1811e398b05793faf43e3d29789f06643a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad452a1811e398b05793faf43e3d29789f06643a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a6022949077176bfff9f72282dc52e51a175cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6022949077176bfff9f72282dc52e51a175cb7", "html_url": "https://github.com/rust-lang/rust/commit/2a6022949077176bfff9f72282dc52e51a175cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a6022949077176bfff9f72282dc52e51a175cb7/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50171c310cd15e1b2d3723766ce64e2e4d6696fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/50171c310cd15e1b2d3723766ce64e2e4d6696fc", "html_url": "https://github.com/rust-lang/rust/commit/50171c310cd15e1b2d3723766ce64e2e4d6696fc"}], "stats": {"total": 86, "additions": 51, "deletions": 35}, "files": [{"sha": "58f7f34c7d4cf88360d3380cf17ed427577ed719", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=2a6022949077176bfff9f72282dc52e51a175cb7", "patch": "@@ -331,9 +331,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 match br {\n                     // We only care about named late bound regions, as we need to add them\n                     // to the 'for<>' section\n-                    ty::BrNamed(_, name) => {\n-                        Some(GenericParamDef { name, kind: GenericParamDefKind::Lifetime })\n-                    }\n+                    ty::BrNamed(_, name) => Some(GenericParamDef {\n+                        name,\n+                        kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n+                    }),\n                     _ => None,\n                 }\n             })\n@@ -659,7 +660,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         bounds.insert(0, GenericBound::maybe_sized(self.cx));\n                     }\n                 }\n-                GenericParamDefKind::Lifetime => {}\n+                GenericParamDefKind::Lifetime { .. } => {}\n                 GenericParamDefKind::Const { ref mut default, .. } => {\n                     // We never want something like `impl<const N: usize = 10>`\n                     default.take();"}, {"sha": "bb22da00576a6c768bac84adb9526fcbe796b6df", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a6022949077176bfff9f72282dc52e51a175cb7", "patch": "@@ -199,9 +199,10 @@ impl Clean<GenericBound> for (ty::PolyTraitRef<'_>, &[TypeBinding]) {\n             .collect_referenced_late_bound_regions(&poly_trait_ref)\n             .into_iter()\n             .filter_map(|br| match br {\n-                ty::BrNamed(_, name) => {\n-                    Some(GenericParamDef { name, kind: GenericParamDefKind::Lifetime })\n-                }\n+                ty::BrNamed(_, name) => Some(GenericParamDef {\n+                    name,\n+                    kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n+                }),\n                 _ => None,\n             })\n             .collect();\n@@ -412,7 +413,9 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n impl Clean<GenericParamDef> for ty::GenericParamDef {\n     fn clean(&self, cx: &mut DocContext<'_>) -> GenericParamDef {\n         let (name, kind) = match self.kind {\n-            ty::GenericParamDefKind::Lifetime => (self.name, GenericParamDefKind::Lifetime),\n+            ty::GenericParamDefKind::Lifetime => {\n+                (self.name, GenericParamDefKind::Lifetime { outlives: vec![] })\n+            }\n             ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n                 let default = if has_default {\n                     let mut default = cx.tcx.type_of(self.def_id).clean(cx);\n@@ -462,21 +465,15 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> GenericParamDef {\n         let (name, kind) = match self.kind {\n             hir::GenericParamKind::Lifetime { .. } => {\n-                let name = if !self.bounds.is_empty() {\n-                    let mut bounds = self.bounds.iter().map(|bound| match bound {\n-                        hir::GenericBound::Outlives(lt) => lt,\n+                let outlives = self\n+                    .bounds\n+                    .iter()\n+                    .map(|bound| match bound {\n+                        hir::GenericBound::Outlives(lt) => lt.clean(cx),\n                         _ => panic!(),\n-                    });\n-                    let name = bounds.next().expect(\"no more bounds\").name.ident();\n-                    let mut s = format!(\"{}: {}\", self.name.ident(), name);\n-                    for bound in bounds {\n-                        s.push_str(&format!(\" + {}\", bound.name.ident()));\n-                    }\n-                    Symbol::intern(&s)\n-                } else {\n-                    self.name.ident().name\n-                };\n-                (name, GenericParamDefKind::Lifetime)\n+                    })\n+                    .collect();\n+                (self.name.ident().name, GenericParamDefKind::Lifetime { outlives })\n             }\n             hir::GenericParamKind::Type { ref default, synthetic } => (\n                 self.name.ident().name,\n@@ -536,7 +533,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n             .map(|param| {\n                 let param: GenericParamDef = param.clean(cx);\n                 match param.kind {\n-                    GenericParamDefKind::Lifetime => unreachable!(),\n+                    GenericParamDefKind::Lifetime { .. } => unreachable!(),\n                     GenericParamDefKind::Type { did, ref bounds, .. } => {\n                         cx.impl_trait_bounds.insert(did.into(), bounds.clone());\n                     }\n@@ -569,7 +566,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n                     {\n                         for param in &mut generics.params {\n                             match param.kind {\n-                                GenericParamDefKind::Lifetime => {}\n+                                GenericParamDefKind::Lifetime { .. } => {}\n                                 GenericParamDefKind::Type { bounds: ref mut ty_bounds, .. } => {\n                                     if &param.name == name {\n                                         mem::swap(bounds, ty_bounds);"}, {"sha": "d1820793d58829000deab1500e313b4ef5c007bd", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2a6022949077176bfff9f72282dc52e51a175cb7", "patch": "@@ -1231,7 +1231,9 @@ impl WherePredicate {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum GenericParamDefKind {\n-    Lifetime,\n+    Lifetime {\n+        outlives: Vec<Lifetime>,\n+    },\n     Type {\n         did: DefId,\n         bounds: Vec<GenericBound>,\n@@ -1257,7 +1259,7 @@ impl GenericParamDefKind {\n         match self {\n             GenericParamDefKind::Type { default, .. } => default.clone(),\n             GenericParamDefKind::Const { ty, .. } => Some(ty.clone()),\n-            GenericParamDefKind::Lifetime => None,\n+            GenericParamDefKind::Lifetime { .. } => None,\n         }\n     }\n }\n@@ -1271,7 +1273,7 @@ crate struct GenericParamDef {\n impl GenericParamDef {\n     crate fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n-            GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => false,\n+            GenericParamDefKind::Lifetime { .. } | GenericParamDefKind::Const { .. } => false,\n             GenericParamDefKind::Type { ref synthetic, .. } => synthetic.is_some(),\n         }\n     }"}, {"sha": "ea0458034899c54b2db6ff4368c8b7ba506a1c56", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2a6022949077176bfff9f72282dc52e51a175cb7", "patch": "@@ -155,9 +155,23 @@ impl clean::GenericParamDef {\n         &'a self,\n         cx: &'a Context<'tcx>,\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        display_fn(move |f| match self.kind {\n-            clean::GenericParamDefKind::Lifetime => write!(f, \"{}\", self.name),\n-            clean::GenericParamDefKind::Type { ref bounds, ref default, .. } => {\n+        display_fn(move |f| match &self.kind {\n+            clean::GenericParamDefKind::Lifetime { outlives } => {\n+                write!(f, \"{}\", self.name)?;\n+\n+                if !outlives.is_empty() {\n+                    f.write_str(\": \")?;\n+                    for (i, lt) in outlives.iter().enumerate() {\n+                        if i != 0 {\n+                            f.write_str(\" + \")?;\n+                        }\n+                        write!(f, \"{}\", lt.print())?;\n+                    }\n+                }\n+\n+                Ok(())\n+            }\n+            clean::GenericParamDefKind::Type { bounds, default, .. } => {\n                 f.write_str(&*self.name.as_str())?;\n \n                 if !bounds.is_empty() {\n@@ -178,7 +192,7 @@ impl clean::GenericParamDef {\n \n                 Ok(())\n             }\n-            clean::GenericParamDefKind::Const { ref ty, ref default, .. } => {\n+            clean::GenericParamDefKind::Const { ty, default, .. } => {\n                 if f.alternate() {\n                     write!(f, \"const {}: {:#}\", self.name, ty.print(cx))?;\n                 } else {"}, {"sha": "6f35e2e310641bb0edae3e64056a2d90e84e9ec5", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=2a6022949077176bfff9f72282dc52e51a175cb7", "patch": "@@ -326,7 +326,9 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n     fn from_tcx(kind: clean::GenericParamDefKind, tcx: TyCtxt<'_>) -> Self {\n         use clean::GenericParamDefKind::*;\n         match kind {\n-            Lifetime => GenericParamDefKind::Lifetime,\n+            Lifetime { outlives } => GenericParamDefKind::Lifetime {\n+                outlives: outlives.into_iter().map(|lt| lt.0.to_string()).collect(),\n+            },\n             Type { did: _, bounds, default, synthetic: _ } => GenericParamDefKind::Type {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                 default: default.map(|x| x.into_tcx(tcx)),"}, {"sha": "5089cc30a1e398cb907aa45f6e585b0eed81572e", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=2a6022949077176bfff9f72282dc52e51a175cb7", "patch": "@@ -234,7 +234,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 6,\n+            format_version: 7,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "37cdc94441df7974d7cf1f0a68755835772c5629", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=2a6022949077176bfff9f72282dc52e51a175cb7", "patch": "@@ -323,7 +323,7 @@ pub struct GenericParamDef {\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericParamDefKind {\n-    Lifetime,\n+    Lifetime { outlives: Vec<String> },\n     Type { bounds: Vec<GenericBound>, default: Option<Type> },\n     Const { ty: Type, default: Option<String> },\n }"}, {"sha": "9e64317ec203f9adc259366fac0427a8d99b2630", "filename": "src/test/rustdoc-json/structs/with_primitives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6022949077176bfff9f72282dc52e51a175cb7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs?ref=2a6022949077176bfff9f72282dc52e51a175cb7", "patch": "@@ -1,7 +1,7 @@\n // @has with_primitives.json \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n // @has - \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n // @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n-// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind\" \\\"lifetime\\\"\n+// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind.lifetime.outlives\" []\n // @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.struct_type\" \\\"plain\\\"\n // @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.fields_stripped\" true\n pub struct WithPrimitives<'a> {"}]}