{"sha": "a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NWJiMTM1NWRkNWZiOTVmNmQ2NmU2Y2Q2YjE0YjZhZTgwNTFmNzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-22T16:09:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T16:09:37Z"}, "message": "Merge #4571\n\n4571: KISS SourceChange r=matklad a=matklad\n\nThe idea behind requiring the label is a noble one, but we are not\r\nreally using it consistently anyway, and it should be easy to retrofit\r\nlater, should we need it.\r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d4b33d1360afd4dbcbd479f0691bed7c98de2895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4b33d1360afd4dbcbd479f0691bed7c98de2895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex/lBCRBK7hj4Ov3rIwAAdHIIAHwtEbdMd550Bx0aLIdzoshh\ngaSWk7gndGj9eBL/4f19TAD/CmayuSbd1uk2aS7HYWs7tW//3XeQ0c0lfjNbaHyV\nnmAJ9tSHzLldvDIeuCgXVmh8JS3VqWxas7qkmlBU/ff2DAUCKkkDZyQ6c9MGAV6Y\niF3m9nv2hwzN8KxCP9QugHbPha8dnRARz9FYJBMyzujOPaOSa8GHqOzVOxiA7Slg\nBoKRX4Q8D5jEVnTPF/4uXIEj8qrX9YWDNW8fOb1JWCTzjgczbZEX+VI0Ysv5yMbf\nMdQwIpQj6XM1BM78dYWyIwOU4KBIzMoiwFrF1k8osMNr7IxZ3JLIKRsijVoVdcs=\n=dLhY\n-----END PGP SIGNATURE-----\n", "payload": "tree d4b33d1360afd4dbcbd479f0691bed7c98de2895\nparent 2a36a2a3cc016de61a5df3165037ed689f36c423\nparent 2c04aad2d2a52ce52d6ea6452faf8d1788f0c83f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590163777 +0000\ncommitter GitHub <noreply@github.com> 1590163777 +0000\n\nMerge #4571\n\n4571: KISS SourceChange r=matklad a=matklad\n\nThe idea behind requiring the label is a noble one, but we are not\r\nreally using it consistently anyway, and it should be easy to retrofit\r\nlater, should we need it.\r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "html_url": "https://github.com/rust-lang/rust/commit/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a36a2a3cc016de61a5df3165037ed689f36c423", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a36a2a3cc016de61a5df3165037ed689f36c423", "html_url": "https://github.com/rust-lang/rust/commit/2a36a2a3cc016de61a5df3165037ed689f36c423"}, {"sha": "2c04aad2d2a52ce52d6ea6452faf8d1788f0c83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c04aad2d2a52ce52d6ea6452faf8d1788f0c83f", "html_url": "https://github.com/rust-lang/rust/commit/2c04aad2d2a52ce52d6ea6452faf8d1788f0c83f"}], "stats": {"total": 265, "additions": 112, "deletions": 153}, "files": [{"sha": "5b1a4680b43907488d4415ccb5094656edcdb455", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "patch": "@@ -5,7 +5,7 @@ use hir::Semantics;\n use ra_db::{FileId, FileRange};\n use ra_fmt::{leading_indent, reindent};\n use ra_ide_db::{\n-    source_change::{SingleFileChange, SourceChange},\n+    source_change::{SourceChange, SourceFileEdit},\n     RootDatabase,\n };\n use ra_syntax::{\n@@ -150,11 +150,10 @@ impl Assists {\n         self.add_impl(label, f)\n     }\n     fn add_impl(&mut self, label: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n-        let change_label = label.label.clone();\n         let source_change = if self.resolve {\n             let mut builder = AssistBuilder::new(self.file);\n             f(&mut builder);\n-            Some(builder.finish(change_label))\n+            Some(builder.finish())\n         } else {\n             None\n         };\n@@ -246,9 +245,10 @@ impl AssistBuilder {\n         &mut self.edit\n     }\n \n-    fn finish(self, change_label: String) -> SourceChange {\n+    fn finish(self) -> SourceChange {\n         let edit = self.edit.finish();\n-        let mut res = SingleFileChange { label: change_label, edit }.into_source_change(self.file);\n+        let source_file_edit = SourceFileEdit { file_id: self.file, edit };\n+        let mut res: SourceChange = source_file_edit.into();\n         if self.is_snippet {\n             res.is_snippet = true;\n         }"}, {"sha": "3d83c0f71c5e47e9708d4e2e80219d0f2647415e", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 52, "deletions": 49, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "patch": "@@ -21,7 +21,7 @@ use ra_syntax::{\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n-use crate::{Diagnostic, FileId, FileSystemEdit, SourceChange, SourceFileEdit};\n+use crate::{Diagnostic, FileId, FileSystemEdit, Fix, SourceChange, SourceFileEdit};\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {\n@@ -63,8 +63,8 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             .parent()\n             .unwrap_or_else(|| RelativePath::new(\"\"))\n             .join(&d.candidate);\n-        let create_file = FileSystemEdit::CreateFile { source_root, path };\n-        let fix = SourceChange::file_system_edit(\"Create module\", create_file);\n+        let fix =\n+            Fix::new(\"Create module\", FileSystemEdit::CreateFile { source_root, path }.into());\n         res.borrow_mut().push(Diagnostic {\n             range: sema.diagnostics_range(d).range,\n             message: d.message(),\n@@ -88,14 +88,12 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n                 field_list = field_list.append_field(&field);\n             }\n \n-            let mut builder = TextEditBuilder::default();\n-            algo::diff(&d.ast(db).syntax(), &field_list.syntax()).into_text_edit(&mut builder);\n-\n-            Some(SourceChange::source_file_edit_from(\n-                \"Fill struct fields\",\n-                file_id,\n-                builder.finish(),\n-            ))\n+            let edit = {\n+                let mut builder = TextEditBuilder::default();\n+                algo::diff(&d.ast(db).syntax(), &field_list.syntax()).into_text_edit(&mut builder);\n+                builder.finish()\n+            };\n+            Some(Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()))\n         };\n \n         res.borrow_mut().push(Diagnostic {\n@@ -117,7 +115,8 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let node = d.ast(db);\n         let replacement = format!(\"Ok({})\", node.syntax());\n         let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n-        let fix = SourceChange::source_file_edit_from(\"Wrap with ok\", file_id, edit);\n+        let source_change = SourceChange::source_file_edit_from(file_id, edit);\n+        let fix = Fix::new(\"Wrap with ok\", source_change);\n         res.borrow_mut().push(Diagnostic {\n             range: sema.diagnostics_range(d).range,\n             message: d.message(),\n@@ -154,9 +153,9 @@ fn check_unnecessary_braces_in_use_statement(\n             range,\n             message: \"Unnecessary braces in use statement\".to_string(),\n             severity: Severity::WeakWarning,\n-            fix: Some(SourceChange::source_file_edit(\n+            fix: Some(Fix::new(\n                 \"Remove unnecessary braces\",\n-                SourceFileEdit { file_id, edit },\n+                SourceFileEdit { file_id, edit }.into(),\n             )),\n         });\n     }\n@@ -198,9 +197,9 @@ fn check_struct_shorthand_initialization(\n                     range: record_field.syntax().text_range(),\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n-                    fix: Some(SourceChange::source_file_edit(\n+                    fix: Some(Fix::new(\n                         \"Use struct shorthand initialization\",\n-                        SourceFileEdit { file_id, edit },\n+                        SourceFileEdit { file_id, edit }.into(),\n                     )),\n                 });\n             }\n@@ -240,7 +239,7 @@ mod tests {\n         let diagnostic =\n             diagnostics.pop().unwrap_or_else(|| panic!(\"no diagnostics for:\\n{}\\n\", before));\n         let mut fix = diagnostic.fix.unwrap();\n-        let edit = fix.source_file_edits.pop().unwrap().edit;\n+        let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let actual = {\n             let mut actual = before.to_string();\n             edit.apply(&mut actual);\n@@ -258,7 +257,7 @@ mod tests {\n         let (analysis, file_position) = analysis_and_position(fixture);\n         let diagnostic = analysis.diagnostics(file_position.file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n-        let edit = fix.source_file_edits.pop().unwrap().edit;\n+        let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n         let actual = {\n             let mut actual = target_file_contents.to_string();\n@@ -295,7 +294,7 @@ mod tests {\n         let (analysis, file_id) = single_file(before);\n         let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n-        let edit = fix.source_file_edits.pop().unwrap().edit;\n+        let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let actual = {\n             let mut actual = before.to_string();\n             edit.apply(&mut actual);\n@@ -616,22 +615,24 @@ mod tests {\n             Diagnostic {\n                 message: \"unresolved module\",\n                 range: 0..8,\n+                severity: Error,\n                 fix: Some(\n-                    SourceChange {\n+                    Fix {\n                         label: \"Create module\",\n-                        source_file_edits: [],\n-                        file_system_edits: [\n-                            CreateFile {\n-                                source_root: SourceRootId(\n-                                    0,\n-                                ),\n-                                path: \"foo.rs\",\n-                            },\n-                        ],\n-                        is_snippet: false,\n+                        source_change: SourceChange {\n+                            source_file_edits: [],\n+                            file_system_edits: [\n+                                CreateFile {\n+                                    source_root: SourceRootId(\n+                                        0,\n+                                    ),\n+                                    path: \"foo.rs\",\n+                                },\n+                            ],\n+                            is_snippet: false,\n+                        },\n                     },\n                 ),\n-                severity: Error,\n             },\n         ]\n         \"###);\n@@ -665,29 +666,31 @@ mod tests {\n             Diagnostic {\n                 message: \"Missing structure fields:\\n- b\",\n                 range: 224..233,\n+                severity: Error,\n                 fix: Some(\n-                    SourceChange {\n+                    Fix {\n                         label: \"Fill struct fields\",\n-                        source_file_edits: [\n-                            SourceFileEdit {\n-                                file_id: FileId(\n-                                    1,\n-                                ),\n-                                edit: TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"{a:42, b: ()}\",\n-                                            delete: 3..9,\n-                                        },\n-                                    ],\n+                        source_change: SourceChange {\n+                            source_file_edits: [\n+                                SourceFileEdit {\n+                                    file_id: FileId(\n+                                        1,\n+                                    ),\n+                                    edit: TextEdit {\n+                                        indels: [\n+                                            Indel {\n+                                                insert: \"{a:42, b: ()}\",\n+                                                delete: 3..9,\n+                                            },\n+                                        ],\n+                                    },\n                                 },\n-                            },\n-                        ],\n-                        file_system_edits: [],\n-                        is_snippet: false,\n+                            ],\n+                            file_system_edits: [],\n+                            is_snippet: false,\n+                        },\n                     },\n                 ),\n-                severity: Error,\n             },\n         ]\n         \"###);"}, {"sha": "5ac002d82f0c3db93cd6684dfacf1f1615b987f9", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "patch": "@@ -97,8 +97,22 @@ pub type Cancelable<T> = Result<T, Canceled>;\n pub struct Diagnostic {\n     pub message: String,\n     pub range: TextRange,\n-    pub fix: Option<SourceChange>,\n     pub severity: Severity,\n+    pub fix: Option<Fix>,\n+}\n+\n+#[derive(Debug)]\n+pub struct Fix {\n+    pub label: String,\n+    pub source_change: SourceChange,\n+}\n+\n+impl Fix {\n+    pub fn new(label: impl Into<String>, source_change: SourceChange) -> Self {\n+        let label = label.into();\n+        assert!(label.starts_with(char::is_uppercase) && !label.ends_with('.'));\n+        Self { label, source_change }\n+    }\n }\n \n /// Info associated with a text range.\n@@ -493,7 +507,7 @@ impl Analysis {\n     ) -> Cancelable<Result<SourceChange, SsrError>> {\n         self.with_db(|db| {\n             let edits = ssr::parse_search_replace(query, parse_only, db)?;\n-            Ok(SourceChange::source_file_edits(\"Structural Search Replace\", edits))\n+            Ok(SourceChange::source_file_edits(edits))\n         })\n     }\n "}, {"sha": "28c6349b1b4e436f9051f69691b5e803b4edb694", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "patch": "@@ -128,7 +128,7 @@ fn rename_mod(\n         source_file_edits.extend(ref_edits);\n     }\n \n-    Some(SourceChange::from_edits(\"Rename\", source_file_edits, file_system_edits))\n+    Some(SourceChange::from_edits(source_file_edits, file_system_edits))\n }\n \n fn rename_to_self(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<SourceChange>> {\n@@ -171,7 +171,7 @@ fn rename_to_self(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo\n         ),\n     });\n \n-    Some(RangeInfo::new(range, SourceChange::source_file_edits(\"Rename\", edits)))\n+    Some(RangeInfo::new(range, SourceChange::source_file_edits(edits)))\n }\n \n fn text_edit_from_self_param(\n@@ -234,7 +234,7 @@ fn rename_self_to_param(\n     let range = ast::SelfParam::cast(self_token.parent())\n         .map_or(self_token.text_range(), |p| p.syntax().text_range());\n \n-    Some(RangeInfo::new(range, SourceChange::source_file_edits(\"Rename\", edits)))\n+    Some(RangeInfo::new(range, SourceChange::source_file_edits(edits)))\n }\n \n fn rename_reference(\n@@ -253,7 +253,7 @@ fn rename_reference(\n         return None;\n     }\n \n-    Some(RangeInfo::new(range, SourceChange::source_file_edits(\"Rename\", edit)))\n+    Some(RangeInfo::new(range, SourceChange::source_file_edits(edit)))\n }\n \n #[cfg(test)]\n@@ -642,7 +642,6 @@ mod tests {\n             RangeInfo {\n                 range: 4..7,\n                 info: SourceChange {\n-                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId(\n@@ -694,7 +693,6 @@ mod tests {\n             RangeInfo {\n                 range: 4..7,\n                 info: SourceChange {\n-                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId(\n@@ -777,7 +775,6 @@ mod tests {\n             RangeInfo {\n                 range: 8..11,\n                 info: SourceChange {\n-                    label: \"Rename\",\n                     source_file_edits: [\n                         SourceFileEdit {\n                             file_id: FileId("}, {"sha": "39bb3b3579c050e148e6e0a1a763627f0cf0cd38", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "patch": "@@ -17,7 +17,7 @@ mod on_enter;\n \n use ra_db::{FilePosition, SourceDatabase};\n use ra_fmt::leading_indent;\n-use ra_ide_db::{source_change::SingleFileChange, RootDatabase};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstToken},\n@@ -40,15 +40,11 @@ pub(crate) fn on_char_typed(\n     assert!(TRIGGER_CHARS.contains(char_typed));\n     let file = &db.parse(position.file_id).tree();\n     assert_eq!(file.syntax().text().char_at(position.offset), Some(char_typed));\n-    let single_file_change = on_char_typed_inner(file, position.offset, char_typed)?;\n-    Some(single_file_change.into_source_change(position.file_id))\n+    let text_edit = on_char_typed_inner(file, position.offset, char_typed)?;\n+    Some(SourceChange::source_file_edit_from(position.file_id, text_edit))\n }\n \n-fn on_char_typed_inner(\n-    file: &SourceFile,\n-    offset: TextSize,\n-    char_typed: char,\n-) -> Option<SingleFileChange> {\n+fn on_char_typed_inner(file: &SourceFile, offset: TextSize, char_typed: char) -> Option<TextEdit> {\n     assert!(TRIGGER_CHARS.contains(char_typed));\n     match char_typed {\n         '.' => on_dot_typed(file, offset),\n@@ -61,7 +57,7 @@ fn on_char_typed_inner(\n /// Returns an edit which should be applied after `=` was typed. Primarily,\n /// this works when adding `let =`.\n // FIXME: use a snippet completion instead of this hack here.\n-fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<SingleFileChange> {\n+fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     assert_eq!(file.syntax().text().char_at(offset), Some('='));\n     let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n     if let_stmt.semicolon_token().is_some() {\n@@ -79,14 +75,11 @@ fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<SingleFileChange>\n         return None;\n     }\n     let offset = let_stmt.syntax().text_range().end();\n-    Some(SingleFileChange {\n-        label: \"add semicolon\".to_string(),\n-        edit: TextEdit::insert(offset, \";\".to_string()),\n-    })\n+    Some(TextEdit::insert(offset, \";\".to_string()))\n }\n \n /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n-fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<SingleFileChange> {\n+fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     assert_eq!(file.syntax().text().char_at(offset), Some('.'));\n     let whitespace =\n         file.syntax().token_at_offset(offset).left_biased().and_then(ast::Whitespace::cast)?;\n@@ -107,14 +100,11 @@ fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<SingleFileChange>\n         return None;\n     }\n \n-    Some(SingleFileChange {\n-        label: \"reindent dot\".to_string(),\n-        edit: TextEdit::replace(TextRange::new(offset - current_indent_len, offset), target_indent),\n-    })\n+    Some(TextEdit::replace(TextRange::new(offset - current_indent_len, offset), target_indent))\n }\n \n /// Adds a space after an arrow when `fn foo() { ... }` is turned into `fn foo() -> { ... }`\n-fn on_arrow_typed(file: &SourceFile, offset: TextSize) -> Option<SingleFileChange> {\n+fn on_arrow_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     let file_text = file.syntax().text();\n     assert_eq!(file_text.char_at(offset), Some('>'));\n     let after_arrow = offset + TextSize::of('>');\n@@ -125,10 +115,7 @@ fn on_arrow_typed(file: &SourceFile, offset: TextSize) -> Option<SingleFileChang\n         return None;\n     }\n \n-    Some(SingleFileChange {\n-        label: \"add space after return type\".to_string(),\n-        edit: TextEdit::insert(after_arrow, \" \".to_string()),\n-    })\n+    Some(TextEdit::insert(after_arrow, \" \".to_string()))\n }\n \n #[cfg(test)]\n@@ -144,7 +131,7 @@ mod tests {\n         edit.apply(&mut before);\n         let parse = SourceFile::parse(&before);\n         on_char_typed_inner(&parse.tree(), offset, char_typed).map(|it| {\n-            it.edit.apply(&mut before);\n+            it.apply(&mut before);\n             before.to_string()\n         })\n     }"}, {"sha": "e7d64b4f68c2fb68e6d261e0467186007874fad6", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "patch": "@@ -41,10 +41,7 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n     let inserted = format!(\"\\n{}{} $0\", indent, prefix);\n     let edit = TextEdit::insert(position.offset, inserted);\n \n-    let mut res = SourceChange::source_file_edit(\n-        \"On enter\",\n-        SourceFileEdit { edit, file_id: position.file_id },\n-    );\n+    let mut res = SourceChange::from(SourceFileEdit { edit, file_id: position.file_id });\n     res.is_snippet = true;\n     Some(res)\n }"}, {"sha": "e713f4b7e80c63d2db022285e02be164a623d393", "filename": "crates/ra_ide_db/src/source_change.rs", "status": "modified", "additions": 20, "deletions": 59, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs?ref=a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "patch": "@@ -8,8 +8,6 @@ use ra_text_edit::TextEdit;\n \n #[derive(Debug, Clone)]\n pub struct SourceChange {\n-    /// For display in the undo log in the editor\n-    pub label: String,\n     pub source_file_edits: Vec<SourceFileEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n     pub is_snippet: bool,\n@@ -18,63 +16,22 @@ pub struct SourceChange {\n impl SourceChange {\n     /// Creates a new SourceChange with the given label\n     /// from the edits.\n-    pub fn from_edits<L: Into<String>>(\n-        label: L,\n+    pub fn from_edits(\n         source_file_edits: Vec<SourceFileEdit>,\n         file_system_edits: Vec<FileSystemEdit>,\n     ) -> Self {\n-        SourceChange {\n-            label: label.into(),\n-            source_file_edits,\n-            file_system_edits,\n-            is_snippet: false,\n-        }\n+        SourceChange { source_file_edits, file_system_edits, is_snippet: false }\n     }\n \n     /// Creates a new SourceChange with the given label,\n     /// containing only the given `SourceFileEdits`.\n-    pub fn source_file_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n-        let label = label.into();\n-        assert!(label.starts_with(char::is_uppercase));\n-        SourceChange {\n-            label: label,\n-            source_file_edits: edits,\n-            file_system_edits: vec![],\n-            is_snippet: false,\n-        }\n-    }\n-\n-    /// Creates a new SourceChange with the given label,\n-    /// containing only the given `FileSystemEdits`.\n-    pub(crate) fn file_system_edits<L: Into<String>>(label: L, edits: Vec<FileSystemEdit>) -> Self {\n-        SourceChange {\n-            label: label.into(),\n-            source_file_edits: vec![],\n-            file_system_edits: edits,\n-            is_snippet: false,\n-        }\n-    }\n-\n-    /// Creates a new SourceChange with the given label,\n-    /// containing only a single `SourceFileEdit`.\n-    pub fn source_file_edit<L: Into<String>>(label: L, edit: SourceFileEdit) -> Self {\n-        SourceChange::source_file_edits(label, vec![edit])\n-    }\n-\n-    /// Creates a new SourceChange with the given label\n-    /// from the given `FileId` and `TextEdit`\n-    pub fn source_file_edit_from<L: Into<String>>(\n-        label: L,\n-        file_id: FileId,\n-        edit: TextEdit,\n-    ) -> Self {\n-        SourceChange::source_file_edit(label, SourceFileEdit { file_id, edit })\n+    pub fn source_file_edits(edits: Vec<SourceFileEdit>) -> Self {\n+        SourceChange { source_file_edits: edits, file_system_edits: vec![], is_snippet: false }\n     }\n-\n     /// Creates a new SourceChange with the given label\n     /// from the given `FileId` and `TextEdit`\n-    pub fn file_system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n-        SourceChange::file_system_edits(label, vec![edit])\n+    pub fn source_file_edit_from(file_id: FileId, edit: TextEdit) -> Self {\n+        SourceFileEdit { file_id, edit }.into()\n     }\n }\n \n@@ -84,23 +41,27 @@ pub struct SourceFileEdit {\n     pub edit: TextEdit,\n }\n \n+impl From<SourceFileEdit> for SourceChange {\n+    fn from(edit: SourceFileEdit) -> SourceChange {\n+        SourceChange {\n+            source_file_edits: vec![edit],\n+            file_system_edits: Vec::new(),\n+            is_snippet: false,\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub enum FileSystemEdit {\n     CreateFile { source_root: SourceRootId, path: RelativePathBuf },\n     MoveFile { src: FileId, dst_source_root: SourceRootId, dst_path: RelativePathBuf },\n }\n \n-pub struct SingleFileChange {\n-    pub label: String,\n-    pub edit: TextEdit,\n-}\n-\n-impl SingleFileChange {\n-    pub fn into_source_change(self, file_id: FileId) -> SourceChange {\n+impl From<FileSystemEdit> for SourceChange {\n+    fn from(edit: FileSystemEdit) -> SourceChange {\n         SourceChange {\n-            label: self.label,\n-            source_file_edits: vec![SourceFileEdit { file_id, edit: self.edit }],\n-            file_system_edits: Vec::new(),\n+            source_file_edits: Vec::new(),\n+            file_system_edits: vec![edit],\n             is_snippet: false,\n         }\n     }"}, {"sha": "a9703e1d6f9d66fb3b7e8486f4b1c73add36c3ee", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=a95bb1355dd5fb95f6d66e6cd6b14b6ae8051f77", "patch": "@@ -731,9 +731,9 @@ pub fn handle_code_action(\n         .filter(|(diag_range, _fix)| diag_range.intersect(range).is_some())\n         .map(|(_range, fix)| fix);\n \n-    for source_edit in fixes_from_diagnostics {\n-        let title = source_edit.label.clone();\n-        let edit = to_proto::snippet_workspace_edit(&world, source_edit)?;\n+    for fix in fixes_from_diagnostics {\n+        let title = fix.label;\n+        let edit = to_proto::snippet_workspace_edit(&world, fix.source_change)?;\n         let action =\n             lsp_ext::CodeAction { title, group: None, kind: None, edit: Some(edit), command: None };\n         res.push(action);"}]}