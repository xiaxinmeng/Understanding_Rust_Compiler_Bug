{"sha": "a61c1759c7297f09955409fffaa162c7a21f89a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MWMxNzU5YzcyOTdmMDk5NTU0MDlmZmZhYTE2MmM3YTIxZjg5YTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-22T20:05:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T20:42:53Z"}, "message": "allow dumping intermediate IR with -Z dump-mir", "tree": {"sha": "0bfdfb2c995776940c34b04acc61da90275cd10a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bfdfb2c995776940c34b04acc61da90275cd10a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61c1759c7297f09955409fffaa162c7a21f89a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61c1759c7297f09955409fffaa162c7a21f89a7", "html_url": "https://github.com/rust-lang/rust/commit/a61c1759c7297f09955409fffaa162c7a21f89a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61c1759c7297f09955409fffaa162c7a21f89a7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d93989cf5dd479a097a4d58984a482920982aa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d93989cf5dd479a097a4d58984a482920982aa5", "html_url": "https://github.com/rust-lang/rust/commit/0d93989cf5dd479a097a4d58984a482920982aa5"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "bf532d9ccf9ed3263aedc2e79c78de71e500e1ef", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a61c1759c7297f09955409fffaa162c7a21f89a7", "patch": "@@ -663,6 +663,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"print the result of the translation item collection pass\"),\n     mir_opt_level: Option<usize> = (None, parse_opt_uint,\n           \"set the MIR optimization level (0-3)\"),\n+    dump_mir: Option<String> = (None, parse_opt_string,\n+          \"dump MIR state at various points in translation\"),\n     orbit: bool = (false, parse_bool,\n           \"get MIR where it belongs - everywhere; most importantly, in orbit\"),\n }"}, {"sha": "2da2a15cbd70917a20d94b253187ddd0ec523219", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=a61c1759c7297f09955409fffaa162c7a21f89a7", "patch": "@@ -173,6 +173,18 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n     builder.cfg.terminate(END_BLOCK, arg_scope_id, span,\n                           TerminatorKind::Return);\n \n+    assert!(\n+        builder.cfg.basic_blocks\n+                   .iter()\n+                   .enumerate()\n+                   .all(|(index, block)| {\n+                       if block.terminator.is_none() {\n+                           panic!(\"no terminator on block {:?} in {:?}\",\n+                               index, argument_extent)\n+                       }\n+                       true\n+                   }));\n+\n     MirPlusPlus {\n         mir: Mir {\n             basic_blocks: builder.cfg.basic_blocks,"}, {"sha": "242d2506c82f172886cec4c1dc7e4ee765c63528", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=a61c1759c7297f09955409fffaa162c7a21f89a7", "patch": "@@ -22,6 +22,7 @@ extern crate rustc_front;\n use build::{self, MirPlusPlus};\n use rustc::dep_graph::DepNode;\n use rustc::mir::repr::Mir;\n+use pretty;\n use hair::cx::Cx;\n \n use rustc::mir::mir_map::MirMap;\n@@ -182,7 +183,7 @@ fn build_mir<'a,'tcx:'a>(cx: Cx<'a,'tcx>,\n     let parameter_scope =\n         cx.tcx().region_maps.lookup_code_extent(\n             CodeExtentData::ParameterScope { fn_id: fn_id, body_id: body.id });\n-    let MirPlusPlus { mut mir, scope_auxiliary: _ } =\n+    let MirPlusPlus { mut mir, scope_auxiliary } =\n         build::construct(cx,\n                          span,\n                          implicit_arg_tys,\n@@ -201,6 +202,13 @@ fn build_mir<'a,'tcx:'a>(cx: Cx<'a,'tcx>,\n         _ => {}\n     }\n \n+    pretty::dump_mir(cx.tcx(),\n+                     \"mir_map\",\n+                     &0,\n+                     fn_id,\n+                     &mir,\n+                     Some(&scope_auxiliary));\n+\n     Ok(mir)\n }\n "}, {"sha": "d8cfd8a88cf9b43bb8feb4f97945e5baf62e9d48", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=a61c1759c7297f09955409fffaa162c7a21f89a7", "patch": "@@ -12,12 +12,63 @@ use build::{Location, ScopeAuxiliary};\n use rustc::mir::repr::*;\n use rustc::middle::ty::{self, TyCtxt};\n use rustc_data_structures::fnv::FnvHashMap;\n+use std::fmt::Display;\n+use std::fs;\n use std::io::{self, Write};\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n \n const INDENT: &'static str = \"    \";\n \n+/// If the session is properly configured, dumps a human-readable\n+/// representation of the mir into:\n+///\n+/// ```\n+/// rustc.node<node_id>.<pass_name>.<disambiguator>\n+/// ```\n+///\n+/// Output from this function is controlled by passing `-Z dump-mir=<filter>`,\n+/// where `<filter>` takes the following forms:\n+///\n+/// - `all` -- dump MIR for all fns, all passes, all everything\n+/// - `substring1&substring2,...` -- `&`-separated list of substrings\n+///   that can appear in the pass-name or the `item_path_str` for the given\n+///   node-id. If any one of the substrings match, the data is dumped out.\n+pub fn dump_mir<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n+                          pass_name: &str,\n+                          disambiguator: &Display,\n+                          node_id: NodeId,\n+                          mir: &Mir<'tcx>,\n+                          auxiliary: Option<&Vec<ScopeAuxiliary>>) {\n+    let filters = match tcx.sess.opts.debugging_opts.dump_mir {\n+        None => return,\n+        Some(ref filters) => filters,\n+    };\n+    let node_path = tcx.item_path_str(tcx.map.local_def_id(node_id));\n+    let is_matched =\n+        filters.split(\"&\")\n+               .any(|filter| {\n+                   filter == \"all\" ||\n+                       pass_name.contains(filter) ||\n+                       node_path.contains(filter)\n+               });\n+    if !is_matched {\n+        return;\n+    }\n+\n+    let file_name = format!(\"rustc.node{}.{}.{}.mir\",\n+                            node_id, pass_name, disambiguator);\n+    let _ = fs::File::create(&file_name).and_then(|mut file| {\n+        try!(writeln!(file, \"// MIR for `{}`\", node_path));\n+        try!(writeln!(file, \"// node_id = {}\", node_id));\n+        try!(writeln!(file, \"// pass_name = {}\", pass_name));\n+        try!(writeln!(file, \"// disambiguator = {}\", disambiguator));\n+        try!(writeln!(file, \"\"));\n+        try!(write_mir_fn(tcx, node_id, mir, &mut file, auxiliary));\n+        Ok(())\n+    });\n+}\n+\n /// Write out a human-readable textual representation for the given MIR.\n pub fn write_mir_pretty<'a, 'tcx, I>(tcx: &TyCtxt<'tcx>,\n                                      iter: I,\n@@ -117,7 +168,7 @@ fn write_basic_block(tcx: &TyCtxt,\n     // Terminator at the bottom.\n     writeln!(w, \"{0}{0}{1:?}; // {2}\",\n              INDENT,\n-             data.terminator(),\n+             data.terminator().kind,\n              comment(tcx, data.terminator().scope, data.terminator().span))?;\n \n     writeln!(w, \"{}}}\", INDENT)"}, {"sha": "d1f9a5bd259aa025d4e6fe582202a9b853bce0f2", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61c1759c7297f09955409fffaa162c7a21f89a7/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=a61c1759c7297f09955409fffaa162c7a21f89a7", "patch": "@@ -30,6 +30,7 @@ impl SimplifyCfg {\n             let mut seen: Vec<BasicBlock> = Vec::with_capacity(8);\n \n             while mir.basic_block_data(target).statements.is_empty() {\n+                debug!(\"final_target: target={:?}\", target);\n                 match mir.basic_block_data(target).terminator().kind {\n                     TerminatorKind::Goto { target: next } => {\n                         if seen.contains(&next) {\n@@ -51,6 +52,8 @@ impl SimplifyCfg {\n             let mut terminator = mir.basic_block_data_mut(bb).terminator.take()\n                                     .expect(\"invalid terminator state\");\n \n+            debug!(\"remove_goto_chains: bb={:?} terminator={:?}\", bb, terminator);\n+\n             for target in terminator.successors_mut() {\n                 let new_target = match final_target(mir, *target) {\n                     Some(new_target) => new_target,"}]}