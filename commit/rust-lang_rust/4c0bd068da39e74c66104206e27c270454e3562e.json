{"sha": "4c0bd068da39e74c66104206e27c270454e3562e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMGJkMDY4ZGEzOWU3NGM2NjEwNDIwNmUyN2MyNzA0NTRlMzU2MmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-05T13:38:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-05T13:38:39Z"}, "message": "Merge #2474\n\n2474: Move `ModuleSource`, create `ModuleOrigin` r=matklad a=ice1000\n\nAs title. This comes right after #2473 \n\nCo-authored-by: ice1000 <ice1000kotlin@foxmail.com>", "tree": {"sha": "25e6c7005e04c3a63344f23a003614409cfda4c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25e6c7005e04c3a63344f23a003614409cfda4c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0bd068da39e74c66104206e27c270454e3562e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6QhfCRBK7hj4Ov3rIwAAdHIIAJAwXlnTBRDNnT6joNsQ152m\nTSIDntRI84XgZsTBmFj16AsotTcl43j2JmQJBOdnEhsdXOciSz7A/gabwSIG5MUK\nUaVdtxDGOe+7MdjR1LLrZoq4O1NcOW4/OOc4OL5oJL76TD118hjWkFTzuYVv2qG2\nSt8uG3ZEzSgzis9TE4zkiFWZT4KtGbP9EAOMyE3PIb2Qn/Lbs1dAWzHfKNQVi9Rz\nuUaVQU7cSpgOMv2YAbqYjmnQDDLPFGrFHxb67HNiSUIOyjOeuNMg5yDIA1yFzUd7\nlecgiCTra75x35oqmEitgflQ7bgq/dYF9jxf3GsS3B51d2nDR/FSkCIYfS1TcwQ=\n=dE7Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 25e6c7005e04c3a63344f23a003614409cfda4c9\nparent ace661bb10dbfd596a444c235f80fa43a2845239\nparent d15f300268fa955f8e9c04d51ca1dc528766f742\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1575553119 +0000\ncommitter GitHub <noreply@github.com> 1575553119 +0000\n\nMerge #2474\n\n2474: Move `ModuleSource`, create `ModuleOrigin` r=matklad a=ice1000\n\nAs title. This comes right after #2473 \n\nCo-authored-by: ice1000 <ice1000kotlin@foxmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0bd068da39e74c66104206e27c270454e3562e", "html_url": "https://github.com/rust-lang/rust/commit/4c0bd068da39e74c66104206e27c270454e3562e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0bd068da39e74c66104206e27c270454e3562e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace661bb10dbfd596a444c235f80fa43a2845239", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace661bb10dbfd596a444c235f80fa43a2845239", "html_url": "https://github.com/rust-lang/rust/commit/ace661bb10dbfd596a444c235f80fa43a2845239"}, {"sha": "d15f300268fa955f8e9c04d51ca1dc528766f742", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15f300268fa955f8e9c04d51ca1dc528766f742", "html_url": "https://github.com/rust-lang/rust/commit/d15f300268fa955f8e9c04d51ca1dc528766f742"}], "stats": {"total": 285, "additions": 149, "deletions": 136}, "files": [{"sha": "7706399ae5bd62ee2b8bf5e531810cd9ed3f758a", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 61, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -11,6 +11,7 @@ use hir_def::{\n     builtin_type::BuiltinType,\n     docs::Documentation,\n     expr::{BindingAnnotation, Pat, PatId},\n+    nameres::ModuleSource,\n     per_ns::PerNs,\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n@@ -21,11 +22,11 @@ use hir_def::{\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n     name::{self, AsName},\n-    AstId, MacroDefId,\n+    MacroDefId,\n };\n use hir_ty::expr::ExprValidator;\n-use ra_db::{CrateId, Edition, FileId, FilePosition};\n-use ra_syntax::{ast, AstNode, SyntaxNode};\n+use ra_db::{CrateId, Edition};\n+use ra_syntax::ast;\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n@@ -79,64 +80,6 @@ impl Crate {\n     }\n }\n \n-pub enum ModuleSource {\n-    SourceFile(ast::SourceFile),\n-    Module(ast::Module),\n-}\n-\n-impl ModuleSource {\n-    pub fn new(\n-        db: &impl DefDatabase,\n-        file_id: Option<FileId>,\n-        decl_id: Option<AstId<ast::Module>>,\n-    ) -> ModuleSource {\n-        match (file_id, decl_id) {\n-            (Some(file_id), _) => {\n-                let source_file = db.parse(file_id).tree();\n-                ModuleSource::SourceFile(source_file)\n-            }\n-            (None, Some(item_id)) => {\n-                let module = item_id.to_node(db);\n-                assert!(module.item_list().is_some(), \"expected inline module\");\n-                ModuleSource::Module(module)\n-            }\n-            (None, None) => panic!(),\n-        }\n-    }\n-\n-    // FIXME: this methods do not belong here\n-    pub fn from_position(db: &impl DefDatabase, position: FilePosition) -> ModuleSource {\n-        let parse = db.parse(position.file_id);\n-        match &ra_syntax::algo::find_node_at_offset::<ast::Module>(\n-            parse.tree().syntax(),\n-            position.offset,\n-        ) {\n-            Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n-            _ => {\n-                let source_file = parse.tree();\n-                ModuleSource::SourceFile(source_file)\n-            }\n-        }\n-    }\n-\n-    pub fn from_child_node(db: &impl DefDatabase, child: InFile<&SyntaxNode>) -> ModuleSource {\n-        if let Some(m) =\n-            child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n-        {\n-            ModuleSource::Module(m)\n-        } else {\n-            let file_id = child.file_id.original_file(db);\n-            let source_file = db.parse(file_id).tree();\n-            ModuleSource::SourceFile(source_file)\n-        }\n-    }\n-\n-    pub fn from_file_id(db: &impl DefDatabase, file_id: FileId) -> ModuleSource {\n-        let source_file = db.parse(file_id).tree();\n-        ModuleSource::SourceFile(source_file)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Module {\n     pub(crate) id: ModuleId,"}, {"sha": "d9bccd902fcdeafb5c78ae971fbf7102a8ef1d46", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -2,14 +2,15 @@\n \n use either::Either;\n use hir_def::{\n+    nameres::ModuleSource,\n     src::{HasChildSource, HasSource as _},\n     AstItemDef, Lookup, VariantId,\n };\n use ra_syntax::ast;\n \n use crate::{\n     db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, Import, MacroDef,\n-    Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Module, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::InFile;\n@@ -25,11 +26,7 @@ impl Module {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n     pub fn definition_source(self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let src = def_map[self.id.local_id].definition_source(db);\n-        src.map(|it| match it {\n-            Either::Left(it) => ModuleSource::SourceFile(it),\n-            Either::Right(it) => ModuleSource::Module(it),\n-        })\n+        def_map[self.id.local_id].definition_source(db)\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`."}, {"sha": "18d87f6d70ce1ff5b3d767f4dcb9091cc129de97", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::{AstItemDef, LocationCtx, ModuleId};\n+use hir_def::{nameres::ModuleSource, AstItemDef, LocationCtx, ModuleId};\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n@@ -10,8 +10,8 @@ use ra_syntax::{\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     AssocItem, Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasSource, ImplBlock,\n-    InFile, Local, MacroDef, Module, ModuleDef, ModuleSource, Static, Struct, StructField, Trait,\n-    TypeAlias, Union, VariantDef,\n+    InFile, Local, MacroDef, Module, ModuleDef, Static, Struct, StructField, Trait, TypeAlias,\n+    Union, VariantDef,\n };\n \n pub trait FromSource: Sized {\n@@ -235,11 +235,10 @@ impl Module {\n                 let src_parent = InFile { file_id: src.file_id, value: parent_declaration };\n                 Module::from_declaration(db, src_parent)\n             }\n-            _ => {\n-                let src_parent = InFile {\n-                    file_id: src.file_id,\n-                    value: ModuleSource::new(db, Some(src.file_id.original_file(db)), None),\n-                };\n+            None => {\n+                let source_file = db.parse(src.file_id.original_file(db)).tree();\n+                let src_parent =\n+                    InFile { file_id: src.file_id, value: ModuleSource::SourceFile(source_file) };\n                 Module::from_definition(db, src_parent)\n             }\n         }?;"}, {"sha": "f12e4ca3f2cc40ae2031f3e836a180b3e6a537ad", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -43,8 +43,8 @@ pub use crate::{\n     code_model::{\n         src::HasSource, Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency,\n         DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, GenericParam,\n-        HasAttrs, ImplBlock, Import, Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef,\n-        Static, Struct, StructField, Trait, Type, TypeAlias, Union, VariantDef,\n+        HasAttrs, ImplBlock, Import, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n+        StructField, Trait, Type, TypeAlias, Union, VariantDef,\n     },\n     from_source::FromSource,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n@@ -59,6 +59,7 @@ pub use hir_def::{\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n+    nameres::ModuleSource,\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };"}, {"sha": "db0451059e82b9e4ada0dffe8710d95ace9e52e2", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -14,6 +14,7 @@ use hir_def::{\n         BodySourceMap,\n     },\n     expr::{ExprId, PatId},\n+    nameres::ModuleSource,\n     path::known,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n     AssocItemId, DefWithBodyId,\n@@ -46,7 +47,7 @@ fn try_get_resolver_for_node(db: &impl HirDatabase, node: InFile<&SyntaxNode>) -\n                 Some(crate::Module::from_declaration(db, src)?.id.resolver(db))\n             },\n              ast::SourceFile(it) => {\n-                let src = node.with_value(crate::ModuleSource::SourceFile(it));\n+                let src = node.with_value(ModuleSource::SourceFile(it));\n                 Some(crate::Module::from_definition(db, src)?.id.resolver(db))\n             },\n             ast::StructDef(it) => {"}, {"sha": "bd237a7b3bb4d244e0f714daac9f71d62fbb78de", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 109, "deletions": 23, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -57,15 +57,17 @@ mod tests;\n \n use std::sync::Arc;\n \n-use either::Either;\n use hir_expand::{\n     ast_id_map::FileAstId, diagnostics::DiagnosticSink, name::Name, InFile, MacroDefId,\n };\n use once_cell::sync::Lazy;\n use ra_arena::Arena;\n-use ra_db::{CrateId, Edition, FileId};\n+use ra_db::{CrateId, Edition, FileId, FilePosition};\n use ra_prof::profile;\n-use ra_syntax::ast;\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    SyntaxNode,\n+};\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -100,19 +102,76 @@ impl std::ops::Index<LocalModuleId> for CrateDefMap {\n     }\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n+pub enum ModuleOrigin {\n+    CrateRoot {\n+        definition: FileId,\n+    },\n+    /// Note that non-inline modules, by definition, live inside non-macro file.\n+    File {\n+        declaration: AstId<ast::Module>,\n+        definition: FileId,\n+    },\n+    Inline {\n+        definition: AstId<ast::Module>,\n+    },\n+}\n+\n+impl Default for ModuleOrigin {\n+    fn default() -> Self {\n+        ModuleOrigin::CrateRoot { definition: FileId(0) }\n+    }\n+}\n+\n+impl ModuleOrigin {\n+    pub(crate) fn not_sure_file(file: Option<FileId>, declaration: AstId<ast::Module>) -> Self {\n+        match file {\n+            None => ModuleOrigin::Inline { definition: declaration },\n+            Some(definition) => ModuleOrigin::File { declaration, definition },\n+        }\n+    }\n+\n+    fn declaration(&self) -> Option<AstId<ast::Module>> {\n+        match self {\n+            ModuleOrigin::File { declaration: module, .. }\n+            | ModuleOrigin::Inline { definition: module, .. } => Some(*module),\n+            ModuleOrigin::CrateRoot { .. } => None,\n+        }\n+    }\n+\n+    pub fn file_id(&self) -> Option<FileId> {\n+        match self {\n+            ModuleOrigin::File { definition, .. } | ModuleOrigin::CrateRoot { definition } => {\n+                Some(*definition)\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    /// Returns a node which defines this module.\n+    /// That is, a file or a `mod foo {}` with items.\n+    fn definition_source(&self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n+        match self {\n+            ModuleOrigin::File { definition, .. } | ModuleOrigin::CrateRoot { definition } => {\n+                let file_id = *definition;\n+                let sf = db.parse(file_id).tree();\n+                return InFile::new(file_id.into(), ModuleSource::SourceFile(sf));\n+            }\n+            ModuleOrigin::Inline { definition } => {\n+                InFile::new(definition.file_id, ModuleSource::Module(definition.to_node(db)))\n+            }\n+        }\n+    }\n+}\n+\n #[derive(Default, Debug, PartialEq, Eq)]\n pub struct ModuleData {\n     pub parent: Option<LocalModuleId>,\n     pub children: FxHashMap<Name, LocalModuleId>,\n     pub scope: ModuleScope,\n \n-    //  FIXME: these can't be both null, we need a three-state enum here.\n-    /// None for root\n-    pub declaration: Option<AstId<ast::Module>>,\n-    /// None for inline modules.\n-    ///\n-    /// Note that non-inline modules, by definition, live inside non-macro file.\n-    pub definition: Option<FileId>,\n+    /// Where does this module come from?\n+    pub origin: ModuleOrigin,\n \n     pub impls: Vec<ImplId>,\n }\n@@ -262,7 +321,7 @@ impl CrateDefMap {\n     pub fn modules_for_file(&self, file_id: FileId) -> impl Iterator<Item = LocalModuleId> + '_ {\n         self.modules\n             .iter()\n-            .filter(move |(_id, data)| data.definition == Some(file_id))\n+            .filter(move |(_id, data)| data.origin.file_id() == Some(file_id))\n             .map(|(id, _data)| id)\n     }\n \n@@ -281,27 +340,54 @@ impl CrateDefMap {\n \n impl ModuleData {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(\n-        &self,\n-        db: &impl DefDatabase,\n-    ) -> InFile<Either<ast::SourceFile, ast::Module>> {\n-        if let Some(file_id) = self.definition {\n-            let sf = db.parse(file_id).tree();\n-            return InFile::new(file_id.into(), Either::Left(sf));\n-        }\n-        let decl = self.declaration.unwrap();\n-        InFile::new(decl.file_id, Either::Right(decl.to_node(db)))\n+    pub fn definition_source(&self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n+        self.origin.definition_source(db)\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n-    /// `None` for the crate root.\n+    /// `None` for the crate root or block.\n     pub fn declaration_source(&self, db: &impl DefDatabase) -> Option<InFile<ast::Module>> {\n-        let decl = self.declaration?;\n+        let decl = self.origin.declaration()?;\n         let value = decl.to_node(db);\n         Some(InFile { file_id: decl.file_id, value })\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ModuleSource {\n+    SourceFile(ast::SourceFile),\n+    Module(ast::Module),\n+}\n+\n+impl ModuleSource {\n+    // FIXME: this methods do not belong here\n+    pub fn from_position(db: &impl DefDatabase, position: FilePosition) -> ModuleSource {\n+        let parse = db.parse(position.file_id);\n+        match &ra_syntax::algo::find_node_at_offset::<ast::Module>(\n+            parse.tree().syntax(),\n+            position.offset,\n+        ) {\n+            Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n+            _ => {\n+                let source_file = parse.tree();\n+                ModuleSource::SourceFile(source_file)\n+            }\n+        }\n+    }\n+\n+    pub fn from_child_node(db: &impl DefDatabase, child: InFile<&SyntaxNode>) -> ModuleSource {\n+        if let Some(m) =\n+            child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n+        {\n+            ModuleSource::Module(m)\n+        } else {\n+            let file_id = child.file_id.original_file(db);\n+            let source_file = db.parse(file_id).tree();\n+            ModuleSource::SourceFile(source_file)\n+        }\n+    }\n+}\n+\n mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n     use ra_db::RelativePathBuf;"}, {"sha": "9d948d4f43ef5747d2c4c92cbbcd2a2c499b9faf", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     db::DefDatabase,\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n-        raw, BuiltinShadowMode, CrateDefMap, ModuleData, Resolution, ResolveMode,\n+        raw, BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, Resolution, ResolveMode,\n     },\n     path::{Path, PathKind},\n     per_ns::PerNs,\n@@ -131,7 +131,7 @@ where\n         let file_id = crate_graph.crate_root(self.def_map.krate);\n         let raw_items = self.db.raw_items(file_id.into());\n         let module_id = self.def_map.root;\n-        self.def_map.modules[module_id].definition = Some(file_id);\n+        self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n         ModCollector {\n             def_collector: &mut *self,\n             module_id,\n@@ -669,8 +669,7 @@ where\n         let modules = &mut self.def_collector.def_map.modules;\n         let res = modules.alloc(ModuleData::default());\n         modules[res].parent = Some(self.module_id);\n-        modules[res].declaration = Some(declaration);\n-        modules[res].definition = definition;\n+        modules[res].origin = ModuleOrigin::not_sure_file(definition, declaration);\n         modules[res].scope.legacy_macros = modules[self.module_id].scope.legacy_macros.clone();\n         modules[self.module_id].children.insert(name.clone(), res);\n         let resolution = Resolution {"}, {"sha": "476f6df52a9aa6e1ed48943d50b4a5b945a59bea", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -74,7 +74,7 @@ impl TestDB {\n         for &krate in self.relevant_crates(file_id).iter() {\n             let crate_def_map = self.crate_def_map(krate);\n             for (local_id, data) in crate_def_map.modules.iter() {\n-                if data.definition == Some(file_id) {\n+                if data.origin.file_id() == Some(file_id) {\n                     return ModuleId { krate, local_id };\n                 }\n             }"}, {"sha": "add11fbc36a106ba049a728fb2b691c9fd7d4111", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -231,34 +231,20 @@ impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.definition_source(db);\n         let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-        match &src.value {\n-            ModuleSource::SourceFile(node) => {\n-                let frange = original_range(db, src.with_value(node.syntax()));\n-\n-                NavigationTarget::from_syntax(\n-                    frange.file_id,\n-                    name,\n-                    None,\n-                    frange.range,\n-                    node.syntax().kind(),\n-                    None,\n-                    None,\n-                )\n-            }\n-            ModuleSource::Module(node) => {\n-                let frange = original_range(db, src.with_value(node.syntax()));\n-\n-                NavigationTarget::from_syntax(\n-                    frange.file_id,\n-                    name,\n-                    None,\n-                    frange.range,\n-                    node.syntax().kind(),\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n-        }\n+        let syntax = match &src.value {\n+            ModuleSource::SourceFile(node) => node.syntax(),\n+            ModuleSource::Module(node) => node.syntax(),\n+        };\n+        let frange = original_range(db, src.with_value(syntax));\n+        NavigationTarget::from_syntax(\n+            frange.file_id,\n+            name,\n+            None,\n+            frange.range,\n+            syntax.kind(),\n+            None,\n+            None,\n+        )\n     }\n }\n "}, {"sha": "aef3fa3df01fcb417a598dc2c3bfbb8df202cd2e", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0bd068da39e74c66104206e27c270454e3562e/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=4c0bd068da39e74c66104206e27c270454e3562e", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_db::{CrateId, FileId, FilePosition};\n+use ra_db::{CrateId, FileId, FilePosition, SourceDatabase};\n \n use crate::{db::RootDatabase, NavigationTarget};\n \n@@ -21,7 +21,8 @@ pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<Na\n \n /// Returns `Vec` for the same reason as `parent_module`\n pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n-    let src = hir::ModuleSource::from_file_id(db, file_id);\n+    let source_file = db.parse(file_id).tree();\n+    let src = hir::ModuleSource::SourceFile(source_file);\n     let module =\n         match hir::Module::from_definition(db, hir::InFile { file_id: file_id.into(), value: src })\n         {"}]}