{"sha": "95ae67b0b0ae28a5b420322be18c5db9ecccfb0c", "node_id": "C_kwDOAAsO6NoAKDk1YWU2N2IwYjBhZTI4YTViNDIwMzIyYmUxOGM1ZGI5ZWNjY2ZiMGM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T14:37:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T14:37:43Z"}, "message": "Simplify type alias rendering, remove constructor structs", "tree": {"sha": "799d23fafc1ca4959354c059224110562a5d4a4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/799d23fafc1ca4959354c059224110562a5d4a4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95ae67b0b0ae28a5b420322be18c5db9ecccfb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95ae67b0b0ae28a5b420322be18c5db9ecccfb0c", "html_url": "https://github.com/rust-lang/rust/commit/95ae67b0b0ae28a5b420322be18c5db9ecccfb0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95ae67b0b0ae28a5b420322be18c5db9ecccfb0c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97f7865c563c92b4a9618053c499d30dc5edb5c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/97f7865c563c92b4a9618053c499d30dc5edb5c9", "html_url": "https://github.com/rust-lang/rust/commit/97f7865c563c92b4a9618053c499d30dc5edb5c9"}], "stats": {"total": 78, "additions": 30, "deletions": 48}, "files": [{"sha": "5df21fb36cddea4b842ebeeff18fb2c1d0290924", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/95ae67b0b0ae28a5b420322be18c5db9ecccfb0c/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ae67b0b0ae28a5b420322be18c5db9ecccfb0c/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=95ae67b0b0ae28a5b420322be18c5db9ecccfb0c", "patch": "@@ -2,10 +2,7 @@\n \n use hir::{AsAssocItem, HasSource};\n use ide_db::SymbolKind;\n-use syntax::{\n-    ast::{HasName, TypeAlias},\n-    display::type_label,\n-};\n+use syntax::{ast::HasName, display::type_label};\n \n use crate::{item::CompletionItem, render::RenderContext};\n \n@@ -14,61 +11,46 @@ pub(crate) fn render_type_alias(\n     type_alias: hir::TypeAlias,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_type_alias\");\n-    TypeAliasRender::new(ctx, type_alias)?.render(false)\n+    render(ctx, type_alias, false)\n }\n \n pub(crate) fn render_type_alias_with_eq(\n     ctx: RenderContext<'_>,\n     type_alias: hir::TypeAlias,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_type_alias_with_eq\");\n-    TypeAliasRender::new(ctx, type_alias)?.render(true)\n+    render(ctx, type_alias, true)\n }\n \n-#[derive(Debug)]\n-struct TypeAliasRender<'a> {\n-    ctx: RenderContext<'a>,\n+fn render(\n+    ctx: RenderContext<'_>,\n     type_alias: hir::TypeAlias,\n-    ast_node: TypeAlias,\n-}\n-\n-impl<'a> TypeAliasRender<'a> {\n-    fn new(ctx: RenderContext<'a>, type_alias: hir::TypeAlias) -> Option<TypeAliasRender<'a>> {\n-        let ast_node = type_alias.source(ctx.db())?.value;\n-        Some(TypeAliasRender { ctx, type_alias, ast_node })\n-    }\n-\n-    fn render(self, with_eq: bool) -> Option<CompletionItem> {\n-        let name = self.ast_node.name().map(|name| {\n-            if with_eq {\n-                format!(\"{} = \", name.text())\n-            } else {\n-                name.text().to_string()\n-            }\n-        })?;\n-        let detail = self.detail();\n-\n-        let mut item =\n-            CompletionItem::new(SymbolKind::TypeAlias, self.ctx.source_range(), name.clone());\n-        item.set_documentation(self.ctx.docs(self.type_alias))\n-            .set_deprecated(\n-                self.ctx.is_deprecated(self.type_alias)\n-                    || self.ctx.is_deprecated_assoc_item(self.type_alias),\n-            )\n-            .detail(detail);\n-\n-        let db = self.ctx.db();\n-        if let Some(actm) = self.type_alias.as_assoc_item(db) {\n-            if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n-                item.trait_name(trt.name(db).to_smol_str());\n-                item.insert_text(name);\n-            }\n+    with_eq: bool,\n+) -> Option<CompletionItem> {\n+    let db = ctx.db();\n+\n+    // FIXME: This parses the file!\n+    let ast_node = type_alias.source(db)?.value;\n+    let name = ast_node.name().map(|name| {\n+        if with_eq {\n+            format!(\"{} = \", name.text())\n+        } else {\n+            name.text().to_string()\n+        }\n+    })?;\n+    let detail = type_label(&ast_node);\n+\n+    let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), name.clone());\n+    item.set_documentation(ctx.docs(type_alias))\n+        .set_deprecated(ctx.is_deprecated(type_alias) || ctx.is_deprecated_assoc_item(type_alias))\n+        .detail(detail);\n+\n+    if let Some(actm) = type_alias.as_assoc_item(db) {\n+        if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n+            item.trait_name(trt.name(db).to_smol_str());\n+            item.insert_text(name);\n         }\n-\n-        Some(item.build())\n     }\n \n-    fn detail(&self) -> String {\n-        type_label(&self.ast_node)\n-    }\n+    Some(item.build())\n }"}]}