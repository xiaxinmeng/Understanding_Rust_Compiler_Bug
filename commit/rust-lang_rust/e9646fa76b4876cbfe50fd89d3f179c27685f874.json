{"sha": "e9646fa76b4876cbfe50fd89d3f179c27685f874", "node_id": "C_kwDOAAsO6NoAKGU5NjQ2ZmE3NmI0ODc2Y2JmZTUwZmQ4OWQzZjE3OWMyNzY4NWY4NzQ", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-24T12:48:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-24T12:48:09Z"}, "message": "Remove unused return values from resume and cleanup_ret\n\nGiven that these instructions are diverging, not every codegen backend\nmay be able to produce a return value for them.", "tree": {"sha": "7a66daa39250dcbfbf1325d13c9f62376d8f33b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a66daa39250dcbfbf1325d13c9f62376d8f33b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9646fa76b4876cbfe50fd89d3f179c27685f874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9646fa76b4876cbfe50fd89d3f179c27685f874", "html_url": "https://github.com/rust-lang/rust/commit/e9646fa76b4876cbfe50fd89d3f179c27685f874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9646fa76b4876cbfe50fd89d3f179c27685f874/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "url": "https://api.github.com/repos/rust-lang/rust/commits/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "html_url": "https://github.com/rust-lang/rust/commit/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "d3fdfccd8a5d2fa1b5363b1c387ff9ca101761fb", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9646fa76b4876cbfe50fd89d3f179c27685f874/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9646fa76b4876cbfe50fd89d3f179c27685f874/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=e9646fa76b4876cbfe50fd89d3f179c27685f874", "patch": "@@ -1275,15 +1275,15 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn resume(&mut self, _exn: RValue<'gcc>) -> RValue<'gcc> {\n+    fn resume(&mut self, _exn: RValue<'gcc>) {\n         unimplemented!();\n     }\n \n     fn cleanup_pad(&mut self, _parent: Option<RValue<'gcc>>, _args: &[RValue<'gcc>]) -> Funclet {\n         unimplemented!();\n     }\n \n-    fn cleanup_ret(&mut self, _funclet: &Funclet, _unwind: Option<Block<'gcc>>) -> RValue<'gcc> {\n+    fn cleanup_ret(&mut self, _funclet: &Funclet, _unwind: Option<Block<'gcc>>) {\n         unimplemented!();\n     }\n "}, {"sha": "7d62e5e8d417c68f501e827ac8b3bcb43be723f8", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9646fa76b4876cbfe50fd89d3f179c27685f874/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9646fa76b4876cbfe50fd89d3f179c27685f874/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=e9646fa76b4876cbfe50fd89d3f179c27685f874", "patch": "@@ -983,8 +983,10 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn resume(&mut self, exn: &'ll Value) -> &'ll Value {\n-        unsafe { llvm::LLVMBuildResume(self.llbuilder, exn) }\n+    fn resume(&mut self, exn: &'ll Value) {\n+        unsafe {\n+            llvm::LLVMBuildResume(self.llbuilder, exn);\n+        }\n     }\n \n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n@@ -1001,14 +1003,11 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         Funclet::new(ret.expect(\"LLVM does not have support for cleanuppad\"))\n     }\n \n-    fn cleanup_ret(\n-        &mut self,\n-        funclet: &Funclet<'ll>,\n-        unwind: Option<&'ll BasicBlock>,\n-    ) -> &'ll Value {\n-        let ret =\n-            unsafe { llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind) };\n-        ret.expect(\"LLVM does not have support for cleanupret\")\n+    fn cleanup_ret(&mut self, funclet: &Funclet<'ll>, unwind: Option<&'ll BasicBlock>) {\n+        unsafe {\n+            llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind)\n+                .expect(\"LLVM does not have support for cleanupret\");\n+        }\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {"}, {"sha": "f10d7c01df0061e2bd4e01f3143d2698f56549d5", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9646fa76b4876cbfe50fd89d3f179c27685f874/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9646fa76b4876cbfe50fd89d3f179c27685f874/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=e9646fa76b4876cbfe50fd89d3f179c27685f874", "patch": "@@ -431,15 +431,11 @@ pub trait BuilderMethods<'a, 'tcx>:\n         num_clauses: usize,\n     ) -> Self::Value;\n     fn set_cleanup(&mut self, landing_pad: Self::Value);\n-    fn resume(&mut self, exn: Self::Value) -> Self::Value;\n+    fn resume(&mut self, exn: Self::Value);\n \n     // These are used only by msvc\n     fn cleanup_pad(&mut self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Funclet;\n-    fn cleanup_ret(\n-        &mut self,\n-        funclet: &Self::Funclet,\n-        unwind: Option<Self::BasicBlock>,\n-    ) -> Self::Value;\n+    fn cleanup_ret(&mut self, funclet: &Self::Funclet, unwind: Option<Self::BasicBlock>);\n     fn catch_pad(&mut self, parent: Self::Value, args: &[Self::Value]) -> Self::Funclet;\n     fn catch_switch(\n         &mut self,"}]}