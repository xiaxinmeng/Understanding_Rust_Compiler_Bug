{"sha": "38bb0b173e370fccc35c7bc02e29525c9d82c767", "node_id": "C_kwDOAAsO6NoAKDM4YmIwYjE3M2UzNzBmY2NjMzVjN2JjMDJlMjk1MjVjOWQ4MmM3Njc", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2022-07-20T14:33:57Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2022-08-05T01:43:39Z"}, "message": "Move `rfold` logic into `iter_rfold`", "tree": {"sha": "95ba2a9228dbecf53d4c4bc6803878625945f4a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ba2a9228dbecf53d4c4bc6803878625945f4a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38bb0b173e370fccc35c7bc02e29525c9d82c767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38bb0b173e370fccc35c7bc02e29525c9d82c767", "html_url": "https://github.com/rust-lang/rust/commit/38bb0b173e370fccc35c7bc02e29525c9d82c767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38bb0b173e370fccc35c7bc02e29525c9d82c767/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f7004920c9ae9179873039b4101f31f8c40f3db", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7004920c9ae9179873039b4101f31f8c40f3db", "html_url": "https://github.com/rust-lang/rust/commit/3f7004920c9ae9179873039b4101f31f8c40f3db"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "307016c269099cf7d4d74981711e8fbe79763059", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/38bb0b173e370fccc35c7bc02e29525c9d82c767/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bb0b173e370fccc35c7bc02e29525c9d82c767/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=38bb0b173e370fccc35c7bc02e29525c9d82c767", "patch": "@@ -393,6 +393,35 @@ impl<I, U> FlattenCompat<I, U>\n where\n     I: DoubleEndedIterator<Item: IntoIterator<IntoIter = U>>,\n {\n+    /// Folds the inner iterators into an accumulator by applying an operation, starting form the\n+    /// back.\n+    ///\n+    /// Folds over the inner iterators, not over their elements. Is used by the `rfold` method.\n+    #[inline]\n+    fn iter_rfold<Acc, Fold>(self, mut acc: Acc, mut fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, U) -> Acc,\n+    {\n+        #[inline]\n+        fn flatten<T: IntoIterator, Acc>(\n+            fold: &mut impl FnMut(Acc, T::IntoIter) -> Acc,\n+        ) -> impl FnMut(Acc, T) -> Acc + '_ {\n+            move |acc, iter| fold(acc, iter.into_iter())\n+        }\n+\n+        if let Some(iter) = self.backiter {\n+            acc = fold(acc, iter);\n+        }\n+\n+        acc = self.iter.rfold(acc, flatten(&mut fold));\n+\n+        if let Some(iter) = self.frontiter {\n+            acc = fold(acc, iter);\n+        }\n+\n+        acc\n+    }\n+\n     /// Folds over the inner iterators in reverse order as long as the given function returns\n     /// successfully, always storing the most recent inner iterator in `self.backiter`.\n     ///\n@@ -579,31 +608,18 @@ where\n     }\n \n     #[inline]\n-    fn rfold<Acc, Fold>(self, mut init: Acc, mut fold: Fold) -> Acc\n+    fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         #[inline]\n-        fn flatten<T: IntoIterator, Acc>(\n-            fold: &mut impl FnMut(Acc, T::Item) -> Acc,\n-        ) -> impl FnMut(Acc, T) -> Acc + '_\n-        where\n-            T::IntoIter: DoubleEndedIterator,\n-        {\n-            move |acc, x| x.into_iter().rfold(acc, &mut *fold)\n-        }\n-\n-        if let Some(back) = self.backiter {\n-            init = back.rfold(init, &mut fold);\n-        }\n-\n-        init = self.iter.rfold(init, flatten(&mut fold));\n-\n-        if let Some(front) = self.frontiter {\n-            init = front.rfold(init, &mut fold);\n+        fn flatten<U: DoubleEndedIterator, Acc>(\n+            mut fold: impl FnMut(Acc, U::Item) -> Acc,\n+        ) -> impl FnMut(Acc, U) -> Acc {\n+            move |acc, iter| iter.rfold(acc, &mut fold)\n         }\n \n-        init\n+        self.iter_rfold(init, flatten(fold))\n     }\n \n     #[inline]"}]}