{"sha": "686964f0f5c5f620b5cd91772048d75235437df7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4Njk2NGYwZjVjNWY2MjBiNWNkOTE3NzIwNDhkNzUyMzU0MzdkZjc=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-09-07T16:00:01Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:12Z"}, "message": "Add `set_passcred` and `passcred` methods to `UnixStream` and `UnixDatagram`", "tree": {"sha": "df742d99af0bf41aaad352abb264e82643710195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df742d99af0bf41aaad352abb264e82643710195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686964f0f5c5f620b5cd91772048d75235437df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686964f0f5c5f620b5cd91772048d75235437df7", "html_url": "https://github.com/rust-lang/rust/commit/686964f0f5c5f620b5cd91772048d75235437df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686964f0f5c5f620b5cd91772048d75235437df7/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c5fdda7c76d57b07d85054400ca14bf3849023", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c5fdda7c76d57b07d85054400ca14bf3849023", "html_url": "https://github.com/rust-lang/rust/commit/19c5fdda7c76d57b07d85054400ca14bf3849023"}], "stats": {"total": 142, "additions": 131, "deletions": 11}, "files": [{"sha": "e5309e54e7950e2606738d89e41dde09575f3474", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/686964f0f5c5f620b5cd91772048d75235437df7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686964f0f5c5f620b5cd91772048d75235437df7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=686964f0f5c5f620b5cd91772048d75235437df7", "patch": "@@ -735,6 +735,66 @@ impl UnixDatagram {\n         self.0.set_nonblocking(nonblocking)\n     }\n \n+    /// Moves the socket to pass unix credentials as control message in [`SocketAncillary`].\n+    ///\n+    /// Set the socket option `SO_PASSCRED`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(unix_socket_ancillary_data)]\n+    /// use std::os::unix::net::UnixDatagram;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_passcred(true).expect(\"set_passcred function failed\");\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"dragonfly\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_env = \"uclibc\",\n+    ))]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n+        self.0.set_passcred(passcred)\n+    }\n+\n+    /// Get the current value of the socket for passing unix credentials in [`SocketAncillary`].\n+    /// This value can be change by [`set_passcred`].\n+    ///\n+    /// Get the socket option `SO_PASSCRED`.\n+    ///\n+    /// [`set_passcred`]: UnixDatagram::set_passcred\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"dragonfly\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_env = \"uclibc\",\n+    ))]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn passcred(&self) -> io::Result<bool> {\n+        self.0.passcred()\n+    }\n+\n     /// Returns the value of the `SO_ERROR` option.\n     ///\n     /// # Examples"}, {"sha": "68e8429dd3b2685abac50f27487665ddd1a15156", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/686964f0f5c5f620b5cd91772048d75235437df7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686964f0f5c5f620b5cd91772048d75235437df7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=686964f0f5c5f620b5cd91772048d75235437df7", "patch": "@@ -366,6 +366,66 @@ impl UnixStream {\n         self.0.set_nonblocking(nonblocking)\n     }\n \n+    /// Moves the socket to pass unix credentials as control message in [`SocketAncillary`].\n+    ///\n+    /// Set the socket option `SO_PASSCRED`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(unix_socket_ancillary_data)]\n+    /// use std::os::unix::net::UnixStream;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_passcred(true).expect(\"Couldn't set passcred\");\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"dragonfly\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_env = \"uclibc\",\n+    ))]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n+        self.0.set_passcred(passcred)\n+    }\n+\n+    /// Get the current value of the socket for passing unix credentials in [`SocketAncillary`].\n+    /// This value can be change by [`set_passcred`].\n+    ///\n+    /// Get the socket option `SO_PASSCRED`.\n+    ///\n+    /// [`set_passcred`]: UnixStream::set_passcred\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"dragonfly\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_env = \"uclibc\",\n+    ))]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn passcred(&self) -> io::Result<bool> {\n+        self.0.passcred()\n+    }\n+\n     /// Returns the value of the `SO_ERROR` option.\n     ///\n     /// # Examples"}, {"sha": "db6a972e7d2dc6d465a38e6358d742efb7e43161", "filename": "library/std/src/sys/unix/ext/net/tests.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/686964f0f5c5f620b5cd91772048d75235437df7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686964f0f5c5f620b5cd91772048d75235437df7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftests.rs?ref=686964f0f5c5f620b5cd91772048d75235437df7", "patch": "@@ -2,7 +2,6 @@ use super::*;\n use crate::io::prelude::*;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n use crate::iter::FromIterator;\n-use crate::mem;\n use crate::sys::unix::ext::io::AsRawFd;\n use crate::sys_common::io::test::tmpdir;\n use crate::thread;\n@@ -513,16 +512,7 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n     let bsock1 = or_panic!(UnixDatagram::bind(&path1));\n     let bsock2 = or_panic!(UnixDatagram::bind(&path2));\n \n-    unsafe {\n-        let optval: libc::c_int = 1;\n-        libc::setsockopt(\n-            bsock2.as_raw_fd(),\n-            libc::SOL_SOCKET,\n-            libc::SO_PASSCRED,\n-            &optval as *const _ as *const _,\n-            mem::size_of::<libc::c_int>() as u32,\n-        );\n-    }\n+    or_panic!(bsock2.set_passcred(true));\n \n     let mut buf1 = [1; 8];\n     let mut bufs_send = &mut [IoSliceMut::new(&mut buf1[..])][..];"}, {"sha": "c01d2fa5f23e24a18bc00b1c01491d33cc534894", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/686964f0f5c5f620b5cd91772048d75235437df7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686964f0f5c5f620b5cd91772048d75235437df7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=686964f0f5c5f620b5cd91772048d75235437df7", "patch": "@@ -323,6 +323,16 @@ impl Socket {\n         Ok(raw != 0)\n     }\n \n+    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n+        let boolean: libc::c_int = if passcred { 1 } else { 0 };\n+        setsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED, boolean)\n+    }\n+\n+    pub fn passcred(&self) -> io::Result<bool> {\n+        let passcred: libc::c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED)?;\n+        Ok(passcred != 0)\n+    }\n+\n     #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;"}]}