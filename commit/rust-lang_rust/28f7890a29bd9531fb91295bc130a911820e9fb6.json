{"sha": "28f7890a29bd9531fb91295bc130a911820e9fb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Zjc4OTBhMjliZDk1MzFmYjkxMjk1YmMxMzBhOTExODIwZTlmYjY=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-06-22T02:21:18Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-28T21:13:46Z"}, "message": "Add char array without ref Pattern impl", "tree": {"sha": "d73324b1f60930ac277cf4ce644a96253ab4af75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73324b1f60930ac277cf4ce644a96253ab4af75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f7890a29bd9531fb91295bc130a911820e9fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f7890a29bd9531fb91295bc130a911820e9fb6", "html_url": "https://github.com/rust-lang/rust/commit/28f7890a29bd9531fb91295bc130a911820e9fb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f7890a29bd9531fb91295bc130a911820e9fb6/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e4f2128e259194eabbb2feea3fa0470a3b3445f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4f2128e259194eabbb2feea3fa0470a3b3445f", "html_url": "https://github.com/rust-lang/rust/commit/5e4f2128e259194eabbb2feea3fa0470a3b3445f"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "031fb8e8b21fb8f853c859faf75b11ff801a438a", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/28f7890a29bd9531fb91295bc130a911820e9fb6/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7890a29bd9531fb91295bc130a911820e9fb6/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=28f7890a29bd9531fb91295bc130a911820e9fb6", "patch": "@@ -608,6 +608,13 @@ where\n     }\n }\n \n+impl<const N: usize> MultiCharEq for [char; N] {\n+    #[inline]\n+    fn matches(&mut self, c: char) -> bool {\n+        self.iter().any(|&m| m == c)\n+    }\n+}\n+\n impl<const N: usize> MultiCharEq for &[char; N] {\n     #[inline]\n     fn matches(&mut self, c: char) -> bool {\n@@ -768,10 +775,36 @@ macro_rules! searcher_methods {\n \n /// Associated type for `<[char; N] as Pattern<'a>>::Searcher`.\n #[derive(Clone, Debug)]\n-pub struct CharArraySearcher<'a, 'b, const N: usize>(\n+pub struct CharArraySearcher<'a, const N: usize>(\n+    <MultiCharEqPattern<[char; N]> as Pattern<'a>>::Searcher,\n+);\n+\n+/// Associated type for `<&[char; N] as Pattern<'a>>::Searcher`.\n+#[derive(Clone, Debug)]\n+pub struct CharArrayRefSearcher<'a, 'b, const N: usize>(\n     <MultiCharEqPattern<&'b [char; N]> as Pattern<'a>>::Searcher,\n );\n \n+/// Searches for chars that are equal to any of the [`char`]s in the array.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(['l', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(['l', 'l']), Some(2));\n+/// ```\n+impl<'a, const N: usize> Pattern<'a> for [char; N] {\n+    pattern_methods!(CharArraySearcher<'a, N>, MultiCharEqPattern, CharArraySearcher);\n+}\n+\n+unsafe impl<'a, const N: usize> Searcher<'a> for CharArraySearcher<'a, N> {\n+    searcher_methods!(forward);\n+}\n+\n+unsafe impl<'a, const N: usize> ReverseSearcher<'a> for CharArraySearcher<'a, N> {\n+    searcher_methods!(reverse);\n+}\n+\n /// Searches for chars that are equal to any of the [`char`]s in the array.\n ///\n /// # Examples\n@@ -781,14 +814,14 @@ pub struct CharArraySearcher<'a, 'b, const N: usize>(\n /// assert_eq!(\"Hello world\".find(&['l', 'l']), Some(2));\n /// ```\n impl<'a, 'b, const N: usize> Pattern<'a> for &'b [char; N] {\n-    pattern_methods!(CharArraySearcher<'a, 'b, N>, MultiCharEqPattern, CharArraySearcher);\n+    pattern_methods!(CharArrayRefSearcher<'a, 'b, N>, MultiCharEqPattern, CharArrayRefSearcher);\n }\n \n-unsafe impl<'a, 'b, const N: usize> Searcher<'a> for CharArraySearcher<'a, 'b, N> {\n+unsafe impl<'a, 'b, const N: usize> Searcher<'a> for CharArrayRefSearcher<'a, 'b, N> {\n     searcher_methods!(forward);\n }\n \n-unsafe impl<'a, 'b, const N: usize> ReverseSearcher<'a> for CharArraySearcher<'a, 'b, N> {\n+unsafe impl<'a, 'b, const N: usize> ReverseSearcher<'a> for CharArrayRefSearcher<'a, 'b, N> {\n     searcher_methods!(reverse);\n }\n "}]}