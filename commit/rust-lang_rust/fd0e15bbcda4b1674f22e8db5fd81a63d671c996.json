{"sha": "fd0e15bbcda4b1674f22e8db5fd81a63d671c996", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMGUxNWJiY2RhNGIxNjc0ZjIyZThkYjVmZDgxYTYzZDY3MWM5OTY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-20T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-19T23:18:44Z"}, "message": "Make std::sync::Arc compatible with ThreadSanitizer\n\nThe memory fences used previously in Arc implementation are not properly\nunderstood by ThreadSanitizer as synchronization primitives. This had\nunfortunate effect where running any non-trivial program compiled with\n`-Z sanitizer=thread` would result in numerous false positives.\n\nReplace acquire fences with acquire loads when using ThreadSanitizer to\naddress the issue.", "tree": {"sha": "cfa5e209839d407fefde566dc52da3889dba5e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa5e209839d407fefde566dc52da3889dba5e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd0e15bbcda4b1674f22e8db5fd81a63d671c996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0e15bbcda4b1674f22e8db5fd81a63d671c996", "html_url": "https://github.com/rust-lang/rust/commit/fd0e15bbcda4b1674f22e8db5fd81a63d671c996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd0e15bbcda4b1674f22e8db5fd81a63d671c996/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c675c476c18b1a11041193f2f59d695b126bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c675c476c18b1a11041193f2f59d695b126bc8", "html_url": "https://github.com/rust-lang/rust/commit/f4c675c476c18b1a11041193f2f59d695b126bc8"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "d877ac6ac5c7944558007b37c3fe317af5999f2d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd0e15bbcda4b1674f22e8db5fd81a63d671c996/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0e15bbcda4b1674f22e8db5fd81a63d671c996/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=fd0e15bbcda4b1674f22e8db5fd81a63d671c996", "patch": "@@ -80,6 +80,7 @@\n #![feature(box_into_raw_non_null)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![feature(const_generic_impls_guard)]"}, {"sha": "d9b54fb0b177ad05a81cc06c52fec3186fc06303", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd0e15bbcda4b1674f22e8db5fd81a63d671c996/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0e15bbcda4b1674f22e8db5fd81a63d671c996/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=fd0e15bbcda4b1674f22e8db5fd81a63d671c996", "patch": "@@ -40,6 +40,23 @@ mod tests;\n /// necessarily) at _exactly_ `MAX_REFCOUNT + 1` references.\n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n \n+#[cfg(not(sanitize = \"thread\"))]\n+macro_rules! acquire {\n+    ($x:expr) => {\n+        atomic::fence(Acquire)\n+    };\n+}\n+\n+// ThreadSanitizer does not support memory fences. To avoid false positive\n+// reports in Arc / Weak implementation use atomic loads for synchronization\n+// instead.\n+#[cfg(sanitize = \"thread\")]\n+macro_rules! acquire {\n+    ($x:expr) => {\n+        $x.load(Acquire)\n+    };\n+}\n+\n /// A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically\n /// Reference Counted'.\n ///\n@@ -402,7 +419,7 @@ impl<T> Arc<T> {\n             return Err(this);\n         }\n \n-        atomic::fence(Acquire);\n+        acquire!(this.inner().strong);\n \n         unsafe {\n             let elem = ptr::read(&this.ptr.as_ref().data);\n@@ -739,7 +756,7 @@ impl<T: ?Sized> Arc<T> {\n         ptr::drop_in_place(&mut self.ptr.as_mut().data);\n \n         if self.inner().weak.fetch_sub(1, Release) == 1 {\n-            atomic::fence(Acquire);\n+            acquire!(self.inner().weak);\n             Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()))\n         }\n     }\n@@ -1243,7 +1260,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n         //\n         // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n         // [2]: (https://github.com/rust-lang/rust/pull/41714)\n-        atomic::fence(Acquire);\n+        acquire!(self.inner().strong);\n \n         unsafe {\n             self.drop_slow();\n@@ -1701,7 +1718,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n         let inner = if let Some(inner) = self.inner() { inner } else { return };\n \n         if inner.weak.fetch_sub(1, Release) == 1 {\n-            atomic::fence(Acquire);\n+            acquire!(inner.weak);\n             unsafe { Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref())) }\n         }\n     }"}]}