{"sha": "57eedd906688d6cfa332bd40bca5234043e7293e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZWVkZDkwNjY4OGQ2Y2ZhMzMyYmQ0MGJjYTUyMzQwNDNlNzI5M2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-23T11:12:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-23T11:12:45Z"}, "message": "Merge #8936 #8939\n\n8936: fix: Improve nightly downloads with better local state management r=matklad a=SomeoneToIgnore\n\nWhen any nightly is downloaded, we store its GitHub release id in the local cache and never invalidate that cache.\r\n\r\nDue to this, it was possible to do the following sequence:\r\n* have the nightly locally\r\n* downgrade the extension to any stable version\r\n* observe that despite the `\"rust-analyzer.updates.channel\": \"nightly\",` setting, no nightly updates are happening\r\n* on the next day, the actual update happens (given the new nightly is released)\r\n\r\nSince it's impossible to install nightly version directly through the VSCode marketplace, any fiddling with dev version results in the same situation: one have to wait for the next nightly release to happen in order to restore the nightly.\r\n\r\nThis PR \r\n* invalidates the cache eagerly during bootstrap if the current plugin is not nightly\r\n* enforces the release id check for nightly versions only\r\n* fixes the `ctx.globalStoragePath` deprecated API usage\r\n\r\nHopefully, it also helps mysterious non-updated plugins that we encounter from time to time, but hard to tell for sure.\n\n8939: internal: disable debug symbols due to failing windows build r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ec24c448fb866396aa345641a9eb819f0d34c0ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec24c448fb866396aa345641a9eb819f0d34c0ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57eedd906688d6cfa332bd40bca5234043e7293e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqjitCRBK7hj4Ov3rIwAAppQIAJ3zjDqy89RHC7tpea8nzBTs\nuRujD8ZajWh68sXCgA5s4uijMat21i73koVBSCY5hVbtb7yClldfj2k0BuSVipBg\n8PDodPR+p3AkVU9Mgelp2oHetiC2c5iqsRqSHjGHUXUdEkFJHcI+Wzv0R+UBs9ok\n61nrMZgi3nIFH0XxXyEh9Leo20DenHZSAric+Sxxq1PGh45oTgT7wydCdJEZdIrV\nbIiyWZuUQf+Fcl9F3T3fgIgRNrNtGHkbXYyNnE2l0GBt2VC0cNP19MxNUfQDRR5l\nHBC1qD6quGl01EFZcJxAbz33j0hxvPhQzjadoL78hzZlrAevf4nwMUk+naU+J0Q=\n=o3XU\n-----END PGP SIGNATURE-----\n", "payload": "tree ec24c448fb866396aa345641a9eb819f0d34c0ad\nparent 0ec4ce1e9bceb2d7b0833de2ab59e2cd583e01ec\nparent daedcc2b77187486fde13a2813809b06b2385ac0\nparent 9f9c4bf3de79ea22bd122574654d5f9f2066c3f9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621768365 +0000\ncommitter GitHub <noreply@github.com> 1621768365 +0000\n\nMerge #8936 #8939\n\n8936: fix: Improve nightly downloads with better local state management r=matklad a=SomeoneToIgnore\n\nWhen any nightly is downloaded, we store its GitHub release id in the local cache and never invalidate that cache.\r\n\r\nDue to this, it was possible to do the following sequence:\r\n* have the nightly locally\r\n* downgrade the extension to any stable version\r\n* observe that despite the `\"rust-analyzer.updates.channel\": \"nightly\",` setting, no nightly updates are happening\r\n* on the next day, the actual update happens (given the new nightly is released)\r\n\r\nSince it's impossible to install nightly version directly through the VSCode marketplace, any fiddling with dev version results in the same situation: one have to wait for the next nightly release to happen in order to restore the nightly.\r\n\r\nThis PR \r\n* invalidates the cache eagerly during bootstrap if the current plugin is not nightly\r\n* enforces the release id check for nightly versions only\r\n* fixes the `ctx.globalStoragePath` deprecated API usage\r\n\r\nHopefully, it also helps mysterious non-updated plugins that we encounter from time to time, but hard to tell for sure.\n\n8939: internal: disable debug symbols due to failing windows build r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57eedd906688d6cfa332bd40bca5234043e7293e", "html_url": "https://github.com/rust-lang/rust/commit/57eedd906688d6cfa332bd40bca5234043e7293e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57eedd906688d6cfa332bd40bca5234043e7293e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec4ce1e9bceb2d7b0833de2ab59e2cd583e01ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4ce1e9bceb2d7b0833de2ab59e2cd583e01ec", "html_url": "https://github.com/rust-lang/rust/commit/0ec4ce1e9bceb2d7b0833de2ab59e2cd583e01ec"}, {"sha": "daedcc2b77187486fde13a2813809b06b2385ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/daedcc2b77187486fde13a2813809b06b2385ac0", "html_url": "https://github.com/rust-lang/rust/commit/daedcc2b77187486fde13a2813809b06b2385ac0"}, {"sha": "9f9c4bf3de79ea22bd122574654d5f9f2066c3f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9c4bf3de79ea22bd122574654d5f9f2066c3f9", "html_url": "https://github.com/rust-lang/rust/commit/9f9c4bf3de79ea22bd122574654d5f9f2066c3f9"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "fbb7a556a86e8abfd2e16e274a5cbc68016e8ee7", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57eedd906688d6cfa332bd40bca5234043e7293e/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/57eedd906688d6cfa332bd40bca5234043e7293e/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=57eedd906688d6cfa332bd40bca5234043e7293e", "patch": "@@ -4,7 +4,7 @@ import { log } from \"./util\";\n \n export type UpdatesChannel = \"stable\" | \"nightly\";\n \n-export const NIGHTLY_TAG = \"nightly\";\n+const NIGHTLY_TAG = \"nightly\";\n \n export type RunnableEnvCfg = undefined | Record<string, string> | { mask?: string; env: Record<string, string> }[];\n \n@@ -34,7 +34,7 @@ export class Config {\n     readonly globalStoragePath: string;\n \n     constructor(ctx: vscode.ExtensionContext) {\n-        this.globalStoragePath = ctx.globalStoragePath;\n+        this.globalStoragePath = ctx.globalStorageUri.path;\n         vscode.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, ctx.subscriptions);\n         this.refreshLogging();\n     }\n@@ -170,4 +170,8 @@ export class Config {\n             gotoTypeDef: this.get<boolean>(\"hoverActions.gotoTypeDef\"),\n         };\n     }\n+\n+    get currentExtensionIsNightly() {\n+        return this.package.releaseTag === NIGHTLY_TAG;\n+    }\n }"}, {"sha": "aaedc243143bd37590786e3df034ac9501c7ffb0", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/57eedd906688d6cfa332bd40bca5234043e7293e/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/57eedd906688d6cfa332bd40bca5234043e7293e/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=57eedd906688d6cfa332bd40bca5234043e7293e", "patch": "@@ -6,7 +6,7 @@ import { promises as fs, PathLike } from \"fs\";\n import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n import { Ctx } from './ctx';\n-import { Config, NIGHTLY_TAG } from './config';\n+import { Config } from './config';\n import { log, assert, isValidExecutable } from './util';\n import { PersistentState } from './persistent_state';\n import { fetchRelease, download } from './net';\n@@ -156,16 +156,18 @@ export async function deactivate() {\n async function bootstrap(config: Config, state: PersistentState): Promise<string> {\n     await fs.mkdir(config.globalStoragePath, { recursive: true });\n \n+    if (!config.currentExtensionIsNightly) {\n+        await state.updateNightlyReleaseId(undefined);\n+    }\n     await bootstrapExtension(config, state);\n     const path = await bootstrapServer(config, state);\n-\n     return path;\n }\n \n async function bootstrapExtension(config: Config, state: PersistentState): Promise<void> {\n     if (config.package.releaseTag === null) return;\n     if (config.channel === \"stable\") {\n-        if (config.package.releaseTag === NIGHTLY_TAG) {\n+        if (config.currentExtensionIsNightly) {\n             void vscode.window.showWarningMessage(\n                 `You are running a nightly version of rust-analyzer extension. ` +\n                 `To switch to stable, uninstall the extension and re-install it from the marketplace`\n@@ -176,36 +178,43 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     if (serverPath(config)) return;\n \n     const now = Date.now();\n-    if (config.package.releaseTag === NIGHTLY_TAG) {\n+    const isInitialNightlyDownload = state.nightlyReleaseId === undefined;\n+    if (config.currentExtensionIsNightly) {\n         // Check if we should poll github api for the new nightly version\n         // if we haven't done it during the past hour\n         const lastCheck = state.lastCheck;\n \n         const anHour = 60 * 60 * 1000;\n-        const shouldCheckForNewNightly = state.releaseId === undefined || (now - (lastCheck ?? 0)) > anHour;\n+        const shouldCheckForNewNightly = isInitialNightlyDownload || (now - (lastCheck ?? 0)) > anHour;\n \n         if (!shouldCheckForNewNightly) return;\n     }\n \n-    const release = await downloadWithRetryDialog(state, async () => {\n+    const latestNightlyRelease = await downloadWithRetryDialog(state, async () => {\n         return await fetchRelease(\"nightly\", state.githubToken, config.httpProxy);\n     }).catch(async (e) => {\n         log.error(e);\n-        if (state.releaseId === undefined) { // Show error only for the initial download\n-            await vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly ${e}`);\n+        if (isInitialNightlyDownload) {\n+            await vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly: ${e}`);\n         }\n-        return undefined;\n+        return;\n     });\n-    if (release === undefined || release.id === state.releaseId) return;\n+    if (latestNightlyRelease === undefined) {\n+        if (isInitialNightlyDownload) {\n+            await vscode.window.showErrorMessage(\"Failed to download rust-analyzer nightly: empty release contents returned\");\n+        }\n+        return;\n+    }\n+    if (config.currentExtensionIsNightly && latestNightlyRelease.id === state.nightlyReleaseId) return;\n \n     const userResponse = await vscode.window.showInformationMessage(\n         \"New version of rust-analyzer (nightly) is available (requires reload).\",\n         \"Update\"\n     );\n     if (userResponse !== \"Update\") return;\n \n-    const artifact = release.assets.find(artifact => artifact.name === \"rust-analyzer.vsix\");\n-    assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n+    const artifact = latestNightlyRelease.assets.find(artifact => artifact.name === \"rust-analyzer.vsix\");\n+    assert(!!artifact, `Bad release: ${JSON.stringify(latestNightlyRelease)}`);\n \n     const dest = path.join(config.globalStoragePath, \"rust-analyzer.vsix\");\n \n@@ -221,7 +230,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", vscode.Uri.file(dest));\n     await fs.unlink(dest);\n \n-    await state.updateReleaseId(release.id);\n+    await state.updateNightlyReleaseId(latestNightlyRelease.id);\n     await state.updateLastCheck(now);\n     await vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n }"}, {"sha": "dd2aeecca3545ecfd13e656eb84716d66fc552f1", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57eedd906688d6cfa332bd40bca5234043e7293e/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/57eedd906688d6cfa332bd40bca5234043e7293e/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=57eedd906688d6cfa332bd40bca5234043e7293e", "patch": "@@ -3,8 +3,8 @@ import { log } from './util';\n \n export class PersistentState {\n     constructor(private readonly globalState: vscode.Memento) {\n-        const { lastCheck, releaseId, serverVersion } = this;\n-        log.info(\"PersistentState:\", { lastCheck, releaseId, serverVersion });\n+        const { lastCheck, nightlyReleaseId, serverVersion } = this;\n+        log.info(\"PersistentState:\", { lastCheck, nightlyReleaseId, serverVersion });\n     }\n \n     /**\n@@ -21,10 +21,10 @@ export class PersistentState {\n      * Release id of the *nightly* extension.\n      * Used to check if we should update.\n      */\n-    get releaseId(): number | undefined {\n+    get nightlyReleaseId(): number | undefined {\n         return this.globalState.get(\"releaseId\");\n     }\n-    async updateReleaseId(value: number) {\n+    async updateNightlyReleaseId(value: number | undefined) {\n         await this.globalState.update(\"releaseId\", value);\n     }\n "}, {"sha": "270719de7661a7d3301b1e1ffaa47745d3cf10da", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57eedd906688d6cfa332bd40bca5234043e7293e/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57eedd906688d6cfa332bd40bca5234043e7293e/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=57eedd906688d6cfa332bd40bca5234043e7293e", "patch": "@@ -67,7 +67,12 @@ fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n fn dist_server(release_channel: &str) -> Result<()> {\n     let _e = pushenv(\"RUST_ANALYZER_CHANNEL\", release_channel);\n     let _e = pushenv(\"CARGO_PROFILE_RELEASE_LTO\", \"true\");\n-    let _e = pushenv(\"CARGO_PROFILE_RELEASE_DEBUG\", \"1\");\n+\n+    // We want do enable debug symbols, but this causes our windows CI to fail:\n+    // https://github.com/rust-lang/rust/issues/85598\n+    //\n+    // let _e = pushenv(\"CARGO_PROFILE_RELEASE_DEBUG\", \"1\");\n+\n     let target = get_target();\n     if target.contains(\"-linux-gnu\") || target.contains(\"-linux-musl\") {\n         env::set_var(\"CC\", \"clang\");"}]}