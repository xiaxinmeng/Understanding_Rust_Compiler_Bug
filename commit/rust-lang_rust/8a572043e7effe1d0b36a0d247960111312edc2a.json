{"sha": "8a572043e7effe1d0b36a0d247960111312edc2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTcyMDQzZTdlZmZlMWQwYjM2YTBkMjQ3OTYwMTExMzEyZWRjMmE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-25T16:03:13Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-25T16:03:13Z"}, "message": "Merge #242\n\n242: Codify Arena pattern r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bb44eaedf546e20a8b29b9b421fb0c3accc1ce74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb44eaedf546e20a8b29b9b421fb0c3accc1ce74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a572043e7effe1d0b36a0d247960111312edc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a572043e7effe1d0b36a0d247960111312edc2a", "html_url": "https://github.com/rust-lang/rust/commit/8a572043e7effe1d0b36a0d247960111312edc2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a572043e7effe1d0b36a0d247960111312edc2a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "8f5fb8341314e94b1d91afa50ca895f78180f948", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5fb8341314e94b1d91afa50ca895f78180f948", "html_url": "https://github.com/rust-lang/rust/commit/8f5fb8341314e94b1d91afa50ca895f78180f948"}, {"sha": "b6fcd462781826795e6ab32a69cd332496b537c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fcd462781826795e6ab32a69cd332496b537c2", "html_url": "https://github.com/rust-lang/rust/commit/b6fcd462781826795e6ab32a69cd332496b537c2"}], "stats": {"total": 223, "additions": 145, "deletions": 78}, "files": [{"sha": "98ed892749459736400df40589b2cc34915f7ee4", "filename": "crates/ra_analysis/src/arena.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Farena.rs?ref=8a572043e7effe1d0b36a0d247960111312edc2a", "patch": "@@ -0,0 +1,96 @@\n+//! A simple id-based arena, similar to https://github.com/fitzgen/id-arena.\n+//! We use our own version for more compact id's and to allow inherent impls\n+//! on Ids.\n+\n+use std::{\n+    fmt,\n+    ops::{Index, IndexMut},\n+    hash::{Hash, Hasher},\n+    marker::PhantomData,\n+};\n+\n+pub(crate) struct Id<T> {\n+    idx: u32,\n+    _ty: PhantomData<fn() -> T>,\n+}\n+\n+impl<T> fmt::Debug for Id<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Id\").field(&self.idx).finish()\n+    }\n+}\n+impl<T> Copy for Id<T> {}\n+impl<T> Clone for Id<T> {\n+    fn clone(&self) -> Id<T> {\n+        *self\n+    }\n+}\n+\n+impl<T> PartialEq for Id<T> {\n+    fn eq(&self, other: &Id<T>) -> bool {\n+        self.idx == other.idx\n+    }\n+}\n+\n+impl<T> Eq for Id<T> {}\n+\n+impl<T> Hash for Id<T> {\n+    fn hash<H: Hasher>(&self, h: &mut H) {\n+        self.idx.hash(h);\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub(crate) struct Arena<T> {\n+    data: Vec<T>,\n+}\n+\n+impl<T> Default for Arena<T> {\n+    fn default() -> Arena<T> {\n+        Arena { data: Vec::new() }\n+    }\n+}\n+\n+impl<T> Arena<T> {\n+    pub(crate) fn push(&mut self, value: T) -> Id<T> {\n+        let id = self.data.len() as u32;\n+        self.data.push(value);\n+        Id {\n+            idx: id as u32,\n+            _ty: PhantomData,\n+        }\n+    }\n+\n+    pub(crate) fn keys<'a>(&'a self) -> impl Iterator<Item = Id<T>> + 'a {\n+        (0..(self.data.len() as u32)).into_iter().map(|idx| Id {\n+            idx,\n+            _ty: PhantomData,\n+        })\n+    }\n+\n+    pub(crate) fn items<'a>(&'a self) -> impl Iterator<Item = (Id<T>, &T)> + 'a {\n+        self.data.iter().enumerate().map(|(idx, item)| {\n+            let idx = idx as u32;\n+            (\n+                Id {\n+                    idx,\n+                    _ty: PhantomData,\n+                },\n+                item,\n+            )\n+        })\n+    }\n+}\n+\n+impl<T> Index<Id<T>> for Arena<T> {\n+    type Output = T;\n+    fn index(&self, id: Id<T>) -> &T {\n+        &self.data[id.idx as usize]\n+    }\n+}\n+\n+impl<T> IndexMut<Id<T>> for Arena<T> {\n+    fn index_mut(&mut self, id: Id<T>) -> &mut T {\n+        &mut self.data[id.idx as usize]\n+    }\n+}"}, {"sha": "6b56f99acb22c34bad441b320dd6f8b774caedb3", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=8a572043e7effe1d0b36a0d247960111312edc2a", "patch": "@@ -1,5 +1,5 @@\n use std::sync::Arc;\n-\n+#[cfg(test)]\n use parking_lot::Mutex;\n use ra_editor::LineIndex;\n use ra_syntax::{SourceFileNode, SyntaxNode};\n@@ -33,6 +33,7 @@ impl salsa::Database for RootDatabase {\n         &self.runtime\n     }\n \n+    #[allow(unused)]\n     fn salsa_event(&self, event: impl Fn() -> salsa::Event<RootDatabase>) {\n         #[cfg(test)]\n         {"}, {"sha": "54d7fa45686ab23dd32fdda74f4310983915b414", "filename": "crates/ra_analysis/src/descriptors/function/scope.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs?ref=8a572043e7effe1d0b36a0d247960111312edc2a", "patch": "@@ -6,15 +6,17 @@ use ra_syntax::{\n     AstNode, SmolStr, SyntaxNodeRef,\n };\n \n-use crate::syntax_ptr::LocalSyntaxPtr;\n+use crate::{\n+    syntax_ptr::LocalSyntaxPtr,\n+    arena::{Arena, Id},\n+};\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n-pub(crate) struct ScopeId(u32);\n+pub(crate) type ScopeId = Id<ScopeData>;\n \n #[derive(Debug, PartialEq, Eq)]\n pub struct FnScopes {\n     pub(crate) self_param: Option<LocalSyntaxPtr>,\n-    scopes: Vec<ScopeData>,\n+    scopes: Arena<ScopeData>,\n     scope_for: FxHashMap<LocalSyntaxPtr, ScopeId>,\n }\n \n@@ -25,7 +27,7 @@ pub struct ScopeEntry {\n }\n \n #[derive(Debug, PartialEq, Eq)]\n-struct ScopeData {\n+pub(crate) struct ScopeData {\n     parent: Option<ScopeId>,\n     entries: Vec<ScopeEntry>,\n }\n@@ -37,7 +39,7 @@ impl FnScopes {\n                 .param_list()\n                 .and_then(|it| it.self_param())\n                 .map(|it| LocalSyntaxPtr::new(it.syntax())),\n-            scopes: Vec::new(),\n+            scopes: Arena::default(),\n             scope_for: FxHashMap::default(),\n         };\n         let root = scopes.root_scope();\n@@ -48,34 +50,32 @@ impl FnScopes {\n         scopes\n     }\n     pub(crate) fn entries(&self, scope: ScopeId) -> &[ScopeEntry] {\n-        &self.get(scope).entries\n+        &self.scopes[scope].entries\n     }\n     pub fn scope_chain<'a>(&'a self, node: SyntaxNodeRef) -> impl Iterator<Item = ScopeId> + 'a {\n-        generate(self.scope_for(node), move |&scope| self.get(scope).parent)\n+        generate(self.scope_for(node), move |&scope| {\n+            self.scopes[scope].parent\n+        })\n     }\n     fn root_scope(&mut self) -> ScopeId {\n-        let res = ScopeId(self.scopes.len() as u32);\n         self.scopes.push(ScopeData {\n             parent: None,\n             entries: vec![],\n-        });\n-        res\n+        })\n     }\n     fn new_scope(&mut self, parent: ScopeId) -> ScopeId {\n-        let res = ScopeId(self.scopes.len() as u32);\n         self.scopes.push(ScopeData {\n             parent: Some(parent),\n             entries: vec![],\n-        });\n-        res\n+        })\n     }\n     fn add_bindings(&mut self, scope: ScopeId, pat: ast::Pat) {\n         let entries = pat\n             .syntax()\n             .descendants()\n             .filter_map(ast::BindPat::cast)\n             .filter_map(ScopeEntry::new);\n-        self.get_mut(scope).entries.extend(entries);\n+        self.scopes[scope].entries.extend(entries);\n     }\n     fn add_params_bindings(&mut self, scope: ScopeId, params: Option<ast::ParamList>) {\n         params\n@@ -93,12 +93,6 @@ impl FnScopes {\n             .filter_map(|it| self.scope_for.get(&it).map(|&scope| scope))\n             .next()\n     }\n-    fn get(&self, scope: ScopeId) -> &ScopeData {\n-        &self.scopes[scope.0 as usize]\n-    }\n-    fn get_mut(&mut self, scope: ScopeId) -> &mut ScopeData {\n-        &mut self.scopes[scope.0 as usize]\n-    }\n }\n \n impl ScopeEntry {"}, {"sha": "80892acb746a26958cd8a055b486311c3a2288d3", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=8a572043e7effe1d0b36a0d247960111312edc2a", "patch": "@@ -94,10 +94,7 @@ fn create_module_tree<'a>(\n     db: &impl DescriptorDatabase,\n     source_root: SourceRootId,\n ) -> Cancelable<ModuleTree> {\n-    let mut tree = ModuleTree {\n-        mods: Vec::new(),\n-        links: Vec::new(),\n-    };\n+    let mut tree = ModuleTree::default();\n \n     let mut roots = FxHashMap::default();\n     let mut visited = FxHashSet::default();\n@@ -154,7 +151,7 @@ fn build_subtree(\n                     .into_iter()\n                     .map(|file_id| match roots.remove(&file_id) {\n                         Some(module_id) => {\n-                            tree.module_mut(module_id).parent = Some(link);\n+                            tree.mods[module_id].parent = Some(link);\n                             Ok(module_id)\n                         }\n                         None => build_subtree(\n@@ -184,8 +181,8 @@ fn build_subtree(\n             }\n         };\n \n-        tree.link_mut(link).points_to = points_to;\n-        tree.link_mut(link).problem = problem;\n+        tree.links[link].points_to = points_to;\n+        tree.links[link].problem = problem;\n     }\n     Ok(id)\n }"}, {"sha": "54ff95b66bd9c7997672d1fcdf8f6600d06b088f", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 27, "deletions": 49, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=8a572043e7effe1d0b36a0d247960111312edc2a", "patch": "@@ -15,7 +15,8 @@ use relative_path::RelativePathBuf;\n use crate::{\n     db::SyntaxDatabase, syntax_ptr::SyntaxPtr, FileId, FilePosition, Cancelable,\n     descriptors::{Path, PathKind, DescriptorDatabase},\n-    input::SourceRootId\n+    input::SourceRootId,\n+    arena::{Arena, Id},\n };\n \n pub(crate) use self::nameres::ModuleScope;\n@@ -157,26 +158,22 @@ impl ModuleDescriptor {\n /// Module encapsulate the logic of transitioning from the fuzzy world of files\n /// (which can have multiple parents) to the precise world of modules (which\n /// always have one parent).\n-#[derive(Debug, PartialEq, Eq, Hash)]\n+#[derive(Default, Debug, PartialEq, Eq)]\n pub(crate) struct ModuleTree {\n-    mods: Vec<ModuleData>,\n-    links: Vec<LinkData>,\n+    mods: Arena<ModuleData>,\n+    links: Arena<LinkData>,\n }\n \n impl ModuleTree {\n     fn modules<'a>(&'a self) -> impl Iterator<Item = ModuleId> + 'a {\n-        self.mods\n-            .iter()\n-            .enumerate()\n-            .map(|(idx, _)| ModuleId(idx as u32))\n+        self.mods.keys()\n     }\n \n     fn modules_for_source(&self, source: ModuleSource) -> Vec<ModuleId> {\n         self.mods\n-            .iter()\n-            .enumerate()\n+            .items()\n             .filter(|(_idx, it)| it.source == source)\n-            .map(|(idx, _)| ModuleId(idx as u32))\n+            .map(|(idx, _)| idx)\n             .collect()\n     }\n \n@@ -201,11 +198,8 @@ enum ModuleSourceNode {\n     Module(ast::ModuleNode),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n-pub(crate) struct ModuleId(u32);\n-\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n-struct LinkId(u32);\n+pub(crate) type ModuleId = Id<ModuleData>;\n+type LinkId = Id<LinkData>;\n \n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub enum Problem {\n@@ -220,42 +214,41 @@ pub enum Problem {\n \n impl ModuleId {\n     fn source(self, tree: &ModuleTree) -> ModuleSource {\n-        tree.module(self).source\n+        tree.mods[self].source\n     }\n     fn parent_link(self, tree: &ModuleTree) -> Option<LinkId> {\n-        tree.module(self).parent\n+        tree.mods[self].parent\n     }\n     fn parent(self, tree: &ModuleTree) -> Option<ModuleId> {\n         let link = self.parent_link(tree)?;\n-        Some(tree.link(link).owner)\n+        Some(tree.links[link].owner)\n     }\n     fn crate_root(self, tree: &ModuleTree) -> ModuleId {\n         generate(Some(self), move |it| it.parent(tree))\n             .last()\n             .unwrap()\n     }\n     fn child(self, tree: &ModuleTree, name: &str) -> Option<ModuleId> {\n-        let link = tree\n-            .module(self)\n+        let link = tree.mods[self]\n             .children\n             .iter()\n-            .map(|&it| tree.link(it))\n+            .map(|&it| &tree.links[it])\n             .find(|it| it.name == name)?;\n         Some(*link.points_to.first()?)\n     }\n     fn children<'a>(self, tree: &'a ModuleTree) -> impl Iterator<Item = (SmolStr, ModuleId)> + 'a {\n-        tree.module(self).children.iter().filter_map(move |&it| {\n-            let link = tree.link(it);\n+        tree.mods[self].children.iter().filter_map(move |&it| {\n+            let link = &tree.links[it];\n             let module = *link.points_to.first()?;\n             Some((link.name.clone(), module))\n         })\n     }\n     fn problems(self, tree: &ModuleTree, db: &impl SyntaxDatabase) -> Vec<(SyntaxNode, Problem)> {\n-        tree.module(self)\n+        tree.mods[self]\n             .children\n             .iter()\n             .filter_map(|&it| {\n-                let p = tree.link(it).problem.clone()?;\n+                let p = tree.links[it].problem.clone()?;\n                 let s = it.bind_source(tree, db);\n                 let s = s.borrowed().name().unwrap().syntax().owned();\n                 Some((s, p))\n@@ -266,17 +259,17 @@ impl ModuleId {\n \n impl LinkId {\n     fn owner(self, tree: &ModuleTree) -> ModuleId {\n-        tree.link(self).owner\n+        tree.links[self].owner\n     }\n     fn name(self, tree: &ModuleTree) -> SmolStr {\n-        tree.link(self).name.clone()\n+        tree.links[self].name.clone()\n     }\n     fn bind_source<'a>(self, tree: &ModuleTree, db: &impl SyntaxDatabase) -> ast::ModuleNode {\n         let owner = self.owner(tree);\n         match owner.source(tree).resolve(db) {\n             ModuleSourceNode::SourceFile(root) => {\n                 let ast = imp::modules(root.borrowed())\n-                    .find(|(name, _)| name == &tree.link(self).name)\n+                    .find(|(name, _)| name == &tree.links[self].name)\n                     .unwrap()\n                     .1;\n                 ast.owned()\n@@ -287,7 +280,7 @@ impl LinkId {\n }\n \n #[derive(Debug, PartialEq, Eq, Hash)]\n-struct ModuleData {\n+pub(crate) struct ModuleData {\n     source: ModuleSource,\n     parent: Option<LinkId>,\n     children: Vec<LinkId>,\n@@ -339,28 +332,13 @@ struct LinkData {\n }\n \n impl ModuleTree {\n-    fn module(&self, id: ModuleId) -> &ModuleData {\n-        &self.mods[id.0 as usize]\n-    }\n-    fn module_mut(&mut self, id: ModuleId) -> &mut ModuleData {\n-        &mut self.mods[id.0 as usize]\n-    }\n-    fn link(&self, id: LinkId) -> &LinkData {\n-        &self.links[id.0 as usize]\n-    }\n-    fn link_mut(&mut self, id: LinkId) -> &mut LinkData {\n-        &mut self.links[id.0 as usize]\n-    }\n-\n     fn push_mod(&mut self, data: ModuleData) -> ModuleId {\n-        let id = ModuleId(self.mods.len() as u32);\n-        self.mods.push(data);\n-        id\n+        self.mods.push(data)\n     }\n     fn push_link(&mut self, data: LinkData) -> LinkId {\n-        let id = LinkId(self.links.len() as u32);\n-        self.mods[data.owner.0 as usize].children.push(id);\n-        self.links.push(data);\n+        let owner = data.owner;\n+        let id = self.links.push(data);\n+        self.mods[owner].children.push(id);\n         id\n     }\n }"}, {"sha": "cedbd1fc8d9f2a0973724d7eaa282a025d2c0e7a", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a572043e7effe1d0b36a0d247960111312edc2a/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=8a572043e7effe1d0b36a0d247960111312edc2a", "patch": "@@ -9,6 +9,7 @@ extern crate relative_path;\n extern crate rustc_hash;\n extern crate salsa;\n \n+mod arena;\n mod db;\n mod loc2id;\n mod input;"}]}