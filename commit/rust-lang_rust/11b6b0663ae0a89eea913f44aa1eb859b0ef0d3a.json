{"sha": "11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjZiMDY2M2FlMGE4OWVlYTkxM2Y0NGFhMWViODU5YjBlZjBkM2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-25T22:22:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:00Z"}, "message": "rework `MirPass` API to be stateless and extract helper fns", "tree": {"sha": "c5e207568d583d81f98e3e182e700bad32dadb5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5e207568d583d81f98e3e182e700bad32dadb5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "html_url": "https://github.com/rust-lang/rust/commit/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "html_url": "https://github.com/rust-lang/rust/commit/0e5e2f36345fbf44c72c60fda0929aceba5d74dd"}], "stats": {"total": 156, "additions": 74, "deletions": 82}, "files": [{"sha": "37113cee4a5ac91664013167a46642572ba310b8", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 44, "deletions": 26, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -10,7 +10,7 @@\n \n use dep_graph::DepNode;\n use hir;\n-use hir::def_id::LOCAL_CRATE;\n+use hir::def_id::{DefId, LOCAL_CRATE};\n use hir::map::DefPathData;\n use mir::{Mir, Promoted};\n use ty::TyCtxt;\n@@ -88,14 +88,14 @@ pub trait Pass {\n /// A pass which inspects the whole Mir map.\n pub trait MirMapPass<'tcx>: Pass {\n     fn run_pass<'a>(\n-        &mut self,\n+        &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         hooks: &mut [Box<for<'s> MirPassHook<'s>>]);\n }\n \n pub trait MirPassHook<'tcx>: Pass {\n     fn on_mir_pass<'a>(\n-        &mut self,\n+        &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         src: MirSource,\n         mir: &Mir<'tcx>,\n@@ -106,40 +106,58 @@ pub trait MirPassHook<'tcx>: Pass {\n \n /// A pass which inspects Mir of functions in isolation.\n pub trait MirPass<'tcx>: Pass {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     src: MirSource, mir: &mut Mir<'tcx>);\n }\n \n impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n-    fn run_pass<'a>(&mut self,\n+    fn run_pass<'a>(&self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     hooks: &mut [Box<for<'s> MirPassHook<'s>>])\n     {\n         for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n-            let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-            let mir = &mut tcx.mir(def_id).borrow_mut();\n-            tcx.dep_graph.write(DepNode::Mir(def_id));\n+            run_hooks(tcx, hooks, self, false);\n+            run_map_pass_task(tcx, self, def_id);\n+            run_hooks(tcx, hooks, self, false);\n+        }\n+    }\n+}\n \n-            let id = tcx.hir.as_local_node_id(def_id).unwrap();\n-            let src = MirSource::from_node(tcx, id);\n+fn run_map_pass_task<'a, 'tcx, T: MirPass<'tcx>>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                 pass: &T,\n+                                                 def_id: DefId) {\n+    let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n+    let mir = &mut tcx.mir(def_id).borrow_mut();\n+    let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n+    let source = MirSource::from_node(tcx, id);\n+    MirPass::run_pass(pass, tcx, source, mir);\n+\n+    for (i, mir) in mir.promoted.iter_enumerated_mut() {\n+        let source = MirSource::Promoted(id, i);\n+        MirPass::run_pass(pass, tcx, source, mir);\n+    }\n+}\n \n-            for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, src, mir, self, false);\n-            }\n-            MirPass::run_pass(self, tcx, src, mir);\n-            for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, src, mir, self, true);\n-            }\n+/// Invokes `hooks` on all the MIR that exists. This is read-only, so\n+/// new new tasks need to be created.\n+pub fn run_hooks<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                           hooks: &mut [Box<for<'s> MirPassHook<'s>>],\n+                           pass: &Pass,\n+                           is_after: bool)\n+{\n+    for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n+        let mir = tcx.item_mir(def_id);\n+        let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n+\n+        let source = MirSource::from_node(tcx, id);\n+        for hook in &mut *hooks {\n+            hook.on_mir_pass(tcx, source, &mir, pass, is_after);\n+        }\n \n-            for (i, mir) in mir.promoted.iter_enumerated_mut() {\n-                let src = MirSource::Promoted(id, i);\n-                for hook in &mut *hooks {\n-                    hook.on_mir_pass(tcx, src, mir, self, false);\n-                }\n-                MirPass::run_pass(self, tcx, src, mir);\n-                for hook in &mut *hooks {\n-                    hook.on_mir_pass(tcx, src, mir, self, true);\n-                }\n+        for (i, mir) in mir.promoted.iter_enumerated() {\n+            let source = MirSource::Promoted(id, i);\n+            for hook in &mut *hooks {\n+                hook.on_mir_pass(tcx, source, &mir, pass, false);\n             }\n         }\n     }"}, {"sha": "106d8fe952d4f4e87264a810988416ca2940fd65", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -33,7 +33,7 @@ use std::u32;\n pub struct ElaborateDrops;\n \n impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     src: MirSource, mir: &mut Mir<'tcx>)\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);"}, {"sha": "5d6bc235761cf6609ffff8336fad52b36f9c35f0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -1056,7 +1056,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // No lifetime analysis based on borrowing can be done from here on out.\n         passes.push_pass(box mir::transform::inline::Inline);\n-        passes.push_pass(box mir::transform::instcombine::InstCombine::new());\n+        passes.push_pass(box mir::transform::instcombine::InstCombine);\n         passes.push_pass(box mir::transform::deaggregator::Deaggregator);\n         passes.push_pass(box mir::transform::copy_prop::CopyPropagation);\n "}, {"sha": "9e67beb86e65ce6b725b132af3154be230867127", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -36,7 +36,7 @@ pub struct AddCallGuards;\n  */\n \n impl<'tcx> MirPass<'tcx> for AddCallGuards {\n-    fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n+    fn run_pass<'a>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n         add_call_guards(mir);\n     }\n }"}, {"sha": "b7cacfe12960d409fcc3345283cea977cf3dc04c", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -41,7 +41,7 @@ pub struct CopyPropagation;\n impl Pass for CopyPropagation {}\n \n impl<'tcx> MirPass<'tcx> for CopyPropagation {\n-    fn run_pass<'a>(&mut self,\n+    fn run_pass<'a>(&self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     source: MirSource,\n                     mir: &mut Mir<'tcx>) {"}, {"sha": "6d91e6fa55b62a3c8e84d894a305304778083fd6", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -18,7 +18,7 @@ pub struct Deaggregator;\n impl Pass for Deaggregator {}\n \n impl<'tcx> MirPass<'tcx> for Deaggregator {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     source: MirSource, mir: &mut Mir<'tcx>) {\n         let node_id = source.item_id();\n         let node_path = tcx.item_path_str(tcx.hir.local_def_id(node_id));"}, {"sha": "4c6754b88b623fcd9d01aeb849ee6d7dadc78580", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -23,7 +23,7 @@ use util as mir_util;\n pub struct Marker<'a>(pub &'a str);\n \n impl<'b, 'tcx> MirPass<'tcx> for Marker<'b> {\n-    fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn run_pass<'a>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     _src: MirSource, _mir: &mut Mir<'tcx>)\n     {}\n }\n@@ -52,7 +52,7 @@ pub struct DumpMir;\n \n impl<'tcx> MirPassHook<'tcx> for DumpMir {\n     fn on_mir_pass<'a>(\n-        &mut self,\n+        &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         src: MirSource,\n         mir: &Mir<'tcx>,"}, {"sha": "05e056ed0be21c40f744ee1799eb0b6d6ee51782", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -72,7 +72,7 @@ pub struct EraseRegions;\n impl Pass for EraseRegions {}\n \n impl<'tcx> MirPass<'tcx> for EraseRegions {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     _: MirSource, mir: &mut Mir<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_mir(mir);\n     }"}, {"sha": "b11a3c805f9cc9dfea383646b5f91e9447280755", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::graph;\n \n use rustc::dep_graph::DepNode;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirMapPass, MirPassHook, MirSource, Pass};\n+use rustc::mir::transform::{self, MirMapPass, MirPassHook, MirSource, Pass};\n use rustc::mir::visit::*;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -44,7 +44,7 @@ pub struct Inline;\n \n impl<'tcx> MirMapPass<'tcx> for Inline {\n     fn run_pass<'a>(\n-        &mut self,\n+        &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         hooks: &mut [Box<for<'s> MirPassHook<'s>>]) {\n \n@@ -58,33 +58,13 @@ impl<'tcx> MirMapPass<'tcx> for Inline {\n             tcx: tcx,\n         };\n \n-        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n-            let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-            let mir = &tcx.item_mir(def_id);\n-\n-            let id = tcx.hir.as_local_node_id(def_id).unwrap();\n-            let src = MirSource::from_node(tcx, id);\n-\n-            for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, src, mir, self, false);\n-            }\n-        }\n+        transform::run_hooks(tcx, hooks, self, false);\n \n         for scc in callgraph.scc_iter() {\n             inliner.inline_scc(&callgraph, &scc);\n         }\n \n-        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n-            let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-            let mir = &tcx.item_mir(def_id);\n-\n-            let id = tcx.hir.as_local_node_id(def_id).unwrap();\n-            let src = MirSource::from_node(tcx, id);\n-\n-            for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, src, mir, self, true);\n-            }\n-        }\n+        transform::run_hooks(tcx, hooks, self, true);\n     }\n }\n "}, {"sha": "89ac0762fbf59e8e8fb5be5710cbb036c1ec8fb9", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -18,22 +18,12 @@ use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n \n-pub struct InstCombine {\n-    optimizations: OptimizationList,\n-}\n-\n-impl InstCombine {\n-    pub fn new() -> InstCombine {\n-        InstCombine {\n-            optimizations: OptimizationList::default(),\n-        }\n-    }\n-}\n+pub struct InstCombine;\n \n impl Pass for InstCombine {}\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n-    fn run_pass<'a>(&mut self,\n+    fn run_pass<'a>(&self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     _: MirSource,\n                     mir: &mut Mir<'tcx>) {\n@@ -45,18 +35,22 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n         // First, find optimization opportunities. This is done in a pre-pass to keep the MIR\n         // read-only so that we can do global analyses on the MIR in the process (e.g.\n         // `Lvalue::ty()`).\n-        {\n+        let optimizations = {\n             let mut optimization_finder = OptimizationFinder::new(mir, tcx);\n             optimization_finder.visit_mir(mir);\n-            self.optimizations = optimization_finder.optimizations\n-        }\n+            optimization_finder.optimizations\n+        };\n \n         // Then carry out those optimizations.\n-        MutVisitor::visit_mir(&mut *self, mir);\n+        MutVisitor::visit_mir(&mut InstCombineVisitor { optimizations }, mir);\n     }\n }\n \n-impl<'tcx> MutVisitor<'tcx> for InstCombine {\n+pub struct InstCombineVisitor {\n+    optimizations: OptimizationList,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor {\n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n         if self.optimizations.and_stars.remove(&location) {\n             debug!(\"Replacing `&*`: {:?}\", rvalue);"}, {"sha": "264b2ea4bb923db048da1d4e963f28bd99e9d86d", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -49,7 +49,7 @@ pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx\n }\n \n impl<'tcx> MirPass<'tcx> for NoLandingPads {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     _: MirSource, mir: &mut Mir<'tcx>) {\n         no_landing_pads(tcx, mir)\n     }"}, {"sha": "e0948b75f27ba5035cbefc8e7e84906d06a0c9fb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -942,7 +942,7 @@ pub struct QualifyAndPromoteConstants;\n impl Pass for QualifyAndPromoteConstants {}\n \n impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n-    fn run_pass<'a>(&mut self,\n+    fn run_pass<'a>(&self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     hooks: &mut [Box<for<'s> MirPassHook<'s>>])\n     {\n@@ -971,7 +971,7 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n }\n \n impl<'tcx> QualifyAndPromoteConstants {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     src: MirSource, mir: &mut Mir<'tcx>) {\n         let id = src.item_id();\n         let def_id = tcx.hir.local_def_id(id);"}, {"sha": "0881585ddfe7462c5ac36f13c2713e65233858d1", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -62,7 +62,7 @@ pub fn simplify_cfg(mir: &mut Mir) {\n }\n \n impl<'l, 'tcx> MirPass<'tcx> for SimplifyCfg<'l> {\n-    fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n+    fn run_pass<'a>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, mir);\n         simplify_cfg(mir);\n     }\n@@ -320,7 +320,7 @@ impl Pass for SimplifyLocals {\n }\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n-    fn run_pass<'a>(&mut self, _: TyCtxt<'a, 'tcx, 'tcx>, _: MirSource, mir: &mut Mir<'tcx>) {\n+    fn run_pass<'a>(&self, _: TyCtxt<'a, 'tcx, 'tcx>, _: MirSource, mir: &mut Mir<'tcx>) {\n         let mut marker = DeclMarker { locals: BitVector::new(mir.local_decls.len()) };\n         marker.visit_mir(mir);\n         // Return pointer and arguments are always live"}, {"sha": "b16ee65e918c587900c7e1ad87e4f92ed9968d64", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -26,7 +26,7 @@ impl<'a> SimplifyBranches<'a> {\n }\n \n impl<'l, 'tcx> MirPass<'tcx> for SimplifyBranches<'l> {\n-    fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n+    fn run_pass<'a>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n         for block in mir.basic_blocks_mut() {\n             let terminator = block.terminator_mut();\n             terminator.kind = match terminator.kind {"}, {"sha": "02e34fd7998ce4fbb211a50028eaf002af59516c", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "patch": "@@ -738,7 +738,7 @@ impl TypeckMir {\n }\n \n impl<'tcx> MirPass<'tcx> for TypeckMir {\n-    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     src: MirSource, mir: &mut Mir<'tcx>) {\n         let item_id = src.item_id();\n         let def_id = tcx.hir.local_def_id(item_id);"}]}