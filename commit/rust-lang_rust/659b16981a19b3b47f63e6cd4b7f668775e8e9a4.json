{"sha": "659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OWIxNjk4MWExOWIzYjQ3ZjYzZTZjZDRiN2Y2Njg3NzVlOGU5YTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-25T06:08:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-25T06:08:30Z"}, "message": "Merge #5046\n\n5046: Fix progress reporting for flycheck r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0ff97656e30c9b1fe3c4bb96b0171f33890c11ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff97656e30c9b1fe3c4bb96b0171f33890c11ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9D9eCRBK7hj4Ov3rIwAAdHIIAFG1d/DN/WbkeO6L7h3diS2o\nOTk6rV4J4XaTKbnfASK7koqFlGwfAdmKTRs61XbdlIOxSkhzJ7tGbJvHOTOqWzMi\nph5kuB19IA0Z0KPCz6pwp1JFxb+ffvlTE3nzj3Gn5yxp4xh61C25d8DOvY7CLY/t\nhEzHk1IyAlLKMa1g8iq2jptX6VthsVoMXZRdGFBzotK1GPNZguwTFIJQtGrNJOZZ\nIevZXfYHuRTmwYO+iMMRYp00jg7JQP6w5ygGNHp28HzTgJqAo328e6tdDyqunPvw\nMjXokTdRxy6eEol5lgfDr3D0TiZ4w0s3hbMdA4Vc6GWbFXydCW3zErVY0n9tO5U=\n=dqwi\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ff97656e30c9b1fe3c4bb96b0171f33890c11ee\nparent 78e94e4570f09c8cbe1f8c6802df9b112ca37f08\nparent 874a5f80c74851aa142a196be49b73f55bd1c619\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593065310 +0000\ncommitter GitHub <noreply@github.com> 1593065310 +0000\n\nMerge #5046\n\n5046: Fix progress reporting for flycheck r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "html_url": "https://github.com/rust-lang/rust/commit/659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e94e4570f09c8cbe1f8c6802df9b112ca37f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e94e4570f09c8cbe1f8c6802df9b112ca37f08", "html_url": "https://github.com/rust-lang/rust/commit/78e94e4570f09c8cbe1f8c6802df9b112ca37f08"}, {"sha": "874a5f80c74851aa142a196be49b73f55bd1c619", "url": "https://api.github.com/repos/rust-lang/rust/commits/874a5f80c74851aa142a196be49b73f55bd1c619", "html_url": "https://github.com/rust-lang/rust/commit/874a5f80c74851aa142a196be49b73f55bd1c619"}], "stats": {"total": 354, "additions": 134, "deletions": 220}, "files": [{"sha": "0e2ee8698c0e05ea21accc468ba1b182bbc9a1ac", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "patch": "@@ -3,6 +3,7 @@\n //! LSP diagnostics based on the output of the command.\n \n use std::{\n+    fmt,\n     io::{self, BufReader},\n     path::PathBuf,\n     process::{Command, Stdio},\n@@ -31,6 +32,17 @@ pub enum FlycheckConfig {\n     },\n }\n \n+impl fmt::Display for FlycheckConfig {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            FlycheckConfig::CargoCommand { command, .. } => write!(f, \"cargo {}\", command),\n+            FlycheckConfig::CustomCommand { command, args } => {\n+                write!(f, \"{} {}\", command, args.join(\" \"))\n+            }\n+        }\n+    }\n+}\n+\n /// Flycheck wraps the shared state and communication machinery used for\n /// running `cargo check` (or other compatible command) and providing\n /// diagnostics based on the output."}, {"sha": "64d4e2787ae3c9a03381fc61480fe0e95a2c60f7", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "patch": "@@ -29,7 +29,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n fn create_flycheck(workspaces: &[ProjectWorkspace], config: &FlycheckConfig) -> Option<Flycheck> {\n     // FIXME: Figure out the multi-workspace situation\n-    workspaces.iter().find_map(|w| match w {\n+    workspaces.iter().find_map(move |w| match w {\n         ProjectWorkspace::Cargo { cargo, .. } => {\n             let cargo_project_root = cargo.workspace_root().to_path_buf();\n             Some(Flycheck::new(config.clone(), cargo_project_root.into()))"}, {"sha": "794286672699ba968c83152045828380b89009aa", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "patch": "@@ -29,16 +29,14 @@ mod markdown;\n mod diagnostics;\n mod line_endings;\n mod request_metrics;\n+mod lsp_utils;\n pub mod lsp_ext;\n pub mod config;\n \n use serde::de::DeserializeOwned;\n \n pub type Result<T, E = Box<dyn std::error::Error + Send + Sync>> = std::result::Result<T, E>;\n-pub use crate::{\n-    caps::server_capabilities,\n-    main_loop::{main_loop, show_message},\n-};\n+pub use crate::{caps::server_capabilities, lsp_utils::show_message, main_loop::main_loop};\n use std::fmt;\n \n pub fn from_json<T: DeserializeOwned>(what: &'static str, json: serde_json::Value) -> Result<T> {"}, {"sha": "078f8778ea8b66a721cddfc40243be2769c4f2ed", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "patch": "@@ -0,0 +1,44 @@\n+//! Utilities for LSP-related boilerplate code.\n+use std::error::Error;\n+\n+use crossbeam_channel::Sender;\n+use lsp_server::{Message, Notification};\n+use ra_db::Canceled;\n+use serde::{de::DeserializeOwned, Serialize};\n+\n+pub fn show_message(\n+    typ: lsp_types::MessageType,\n+    message: impl Into<String>,\n+    sender: &Sender<Message>,\n+) {\n+    let message = message.into();\n+    let params = lsp_types::ShowMessageParams { typ, message };\n+    let not = notification_new::<lsp_types::notification::ShowMessage>(params);\n+    sender.send(not.into()).unwrap();\n+}\n+\n+pub(crate) fn is_canceled(e: &(dyn Error + 'static)) -> bool {\n+    e.downcast_ref::<Canceled>().is_some()\n+}\n+\n+pub(crate) fn notification_is<N: lsp_types::notification::Notification>(\n+    notification: &Notification,\n+) -> bool {\n+    notification.method == N::METHOD\n+}\n+\n+pub(crate) fn notification_cast<N>(notification: Notification) -> Result<N::Params, Notification>\n+where\n+    N: lsp_types::notification::Notification,\n+    N::Params: DeserializeOwned,\n+{\n+    notification.extract(N::METHOD)\n+}\n+\n+pub(crate) fn notification_new<N>(params: N::Params) -> Notification\n+where\n+    N: lsp_types::notification::Notification,\n+    N::Params: Serialize,\n+{\n+    Notification::new(N::METHOD.to_string(), params)\n+}"}, {"sha": "03569086a7eda33f62b3a4392439d4d7f46053cd", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 75, "deletions": 112, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "patch": "@@ -25,6 +25,7 @@ use crate::{\n     from_proto,\n     global_state::{file_id_to_url, GlobalState, GlobalStateSnapshot, Status},\n     handlers, lsp_ext,\n+    lsp_utils::{is_canceled, notification_cast, notification_is, notification_new, show_message},\n     request_metrics::RequestMetrics,\n     LspError, Result,\n };\n@@ -138,7 +139,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n                 recv(global_state.flycheck.as_ref().map_or(&never(), |it| &it.task_recv)) -> task => match task {\n                     Ok(task) => Event::CheckWatcher(task),\n                     Err(RecvError) => return Err(\"check watcher died\".into()),\n-                }\n+                },\n             };\n             if let Event::Msg(Message::Request(req)) = &event {\n                 if connection.handle_shutdown(&req)? {\n@@ -168,7 +169,6 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n #[derive(Debug)]\n enum Task {\n     Respond(Response),\n-    Notify(Notification),\n     Diagnostic(DiagnosticTask),\n }\n \n@@ -193,11 +193,6 @@ impl fmt::Debug for Event {\n                     return debug_verbose_not(not, f);\n                 }\n             }\n-            Event::Task(Task::Notify(not)) => {\n-                if notification_is::<lsp_types::notification::PublishDiagnostics>(not) {\n-                    return debug_verbose_not(not, f);\n-                }\n-            }\n             Event::Task(Task::Respond(resp)) => {\n                 return f\n                     .debug_struct(\"Response\")\n@@ -254,14 +249,29 @@ fn loop_turn(\n                 }\n             }\n             vfs::loader::Message::Progress { n_total, n_done } => {\n-                if n_done == n_total {\n+                let state = if n_done == 0 {\n+                    ProgressState::Start\n+                } else if n_done < n_total {\n+                    ProgressState::Report\n+                } else {\n+                    assert_eq!(n_done, n_total);\n                     global_state.status = Status::Ready;\n                     became_ready = true;\n-                }\n-                report_progress(global_state, &connection.sender, n_done, n_total, \"roots scanned\")\n+                    ProgressState::End\n+                };\n+                report_progress(\n+                    global_state,\n+                    &connection.sender,\n+                    \"roots scanned\",\n+                    state,\n+                    Some(format!(\"{}/{}\", n_done, n_total)),\n+                    Some(percentage(n_done, n_total)),\n+                )\n             }\n         },\n-        Event::CheckWatcher(task) => on_check_task(task, global_state, task_sender)?,\n+        Event::CheckWatcher(task) => {\n+            on_check_task(task, global_state, task_sender, &connection.sender)?\n+        }\n         Event::Msg(msg) => match msg {\n             Message::Request(req) => {\n                 on_request(global_state, pool, task_sender, &connection.sender, loop_start, req)?\n@@ -335,9 +345,6 @@ fn on_task(task: Task, msg_sender: &Sender<Message>, global_state: &mut GlobalSt\n                 msg_sender.send(response.into()).unwrap();\n             }\n         }\n-        Task::Notify(n) => {\n-            msg_sender.send(n.into()).unwrap();\n-        }\n         Task::Diagnostic(task) => on_diagnostic_task(task, msg_sender, global_state),\n     }\n }\n@@ -589,6 +596,7 @@ fn on_check_task(\n     task: CheckTask,\n     global_state: &mut GlobalState,\n     task_sender: &Sender<Task>,\n+    msg_sender: &Sender<Message>,\n ) -> Result<()> {\n     match task {\n         CheckTask::ClearDiagnostics => {\n@@ -620,39 +628,13 @@ fn on_check_task(\n         }\n \n         CheckTask::Status(status) => {\n-            if global_state.config.client_caps.work_done_progress {\n-                let progress = match status {\n-                    ra_flycheck::Status::Being => {\n-                        lsp_types::WorkDoneProgress::Begin(lsp_types::WorkDoneProgressBegin {\n-                            title: \"Running `cargo check`\".to_string(),\n-                            cancellable: Some(false),\n-                            message: None,\n-                            percentage: None,\n-                        })\n-                    }\n-                    ra_flycheck::Status::Progress(target) => {\n-                        lsp_types::WorkDoneProgress::Report(lsp_types::WorkDoneProgressReport {\n-                            cancellable: Some(false),\n-                            message: Some(target),\n-                            percentage: None,\n-                        })\n-                    }\n-                    ra_flycheck::Status::End => {\n-                        lsp_types::WorkDoneProgress::End(lsp_types::WorkDoneProgressEnd {\n-                            message: None,\n-                        })\n-                    }\n-                };\n+            let (state, message) = match status {\n+                ra_flycheck::Status::Being => (ProgressState::Start, None),\n+                ra_flycheck::Status::Progress(target) => (ProgressState::Report, Some(target)),\n+                ra_flycheck::Status::End => (ProgressState::End, None),\n+            };\n \n-                let params = lsp_types::ProgressParams {\n-                    token: lsp_types::ProgressToken::String(\n-                        \"rustAnalyzer/cargoWatcher\".to_string(),\n-                    ),\n-                    value: lsp_types::ProgressParamsValue::WorkDone(progress),\n-                };\n-                let not = notification_new::<lsp_types::notification::Progress>(params);\n-                task_sender.send(Task::Notify(not)).unwrap();\n-            }\n+            report_progress(global_state, msg_sender, \"cargo check\", state, message, None);\n         }\n     };\n \n@@ -671,39 +653,55 @@ fn on_diagnostic_task(task: DiagnosticTask, msg_sender: &Sender<Message>, state:\n     }\n }\n \n+#[derive(Eq, PartialEq)]\n+enum ProgressState {\n+    Start,\n+    Report,\n+    End,\n+}\n+\n+fn percentage(done: usize, total: usize) -> f64 {\n+    (done as f64 / total.max(1) as f64) * 100.0\n+}\n+\n fn report_progress(\n     global_state: &mut GlobalState,\n     sender: &Sender<Message>,\n-    done: usize,\n-    total: usize,\n-    message: &str,\n+    title: &str,\n+    state: ProgressState,\n+    message: Option<String>,\n+    percentage: Option<f64>,\n ) {\n-    let token = lsp_types::ProgressToken::String(format!(\"rustAnalyzer/{}\", message));\n-    let message = Some(format!(\"{}/{} {}\", done, total, message));\n-    let percentage = Some(100.0 * done as f64 / total.max(1) as f64);\n-    let work_done_progress = if done == 0 {\n-        let work_done_progress_create = global_state.req_queue.outgoing.register(\n-            lsp_types::request::WorkDoneProgressCreate::METHOD.to_string(),\n-            lsp_types::WorkDoneProgressCreateParams { token: token.clone() },\n-            DO_NOTHING,\n-        );\n-        sender.send(work_done_progress_create.into()).unwrap();\n-\n-        lsp_types::WorkDoneProgress::Begin(lsp_types::WorkDoneProgressBegin {\n-            title: \"rust-analyzer\".into(),\n-            cancellable: None,\n-            message,\n-            percentage,\n-        })\n-    } else if done < total {\n-        lsp_types::WorkDoneProgress::Report(lsp_types::WorkDoneProgressReport {\n-            cancellable: None,\n-            message,\n-            percentage,\n-        })\n-    } else {\n-        assert!(done == total);\n-        lsp_types::WorkDoneProgress::End(lsp_types::WorkDoneProgressEnd { message })\n+    if !global_state.config.client_caps.work_done_progress {\n+        return;\n+    }\n+    let token = lsp_types::ProgressToken::String(format!(\"rustAnalyzer/{}\", title));\n+    let work_done_progress = match state {\n+        ProgressState::Start => {\n+            let work_done_progress_create = global_state.req_queue.outgoing.register(\n+                lsp_types::request::WorkDoneProgressCreate::METHOD.to_string(),\n+                lsp_types::WorkDoneProgressCreateParams { token: token.clone() },\n+                DO_NOTHING,\n+            );\n+            sender.send(work_done_progress_create.into()).unwrap();\n+\n+            lsp_types::WorkDoneProgress::Begin(lsp_types::WorkDoneProgressBegin {\n+                title: title.into(),\n+                cancellable: None,\n+                message,\n+                percentage,\n+            })\n+        }\n+        ProgressState::Report => {\n+            lsp_types::WorkDoneProgress::Report(lsp_types::WorkDoneProgressReport {\n+                cancellable: None,\n+                message,\n+                percentage,\n+            })\n+        }\n+        ProgressState::End => {\n+            lsp_types::WorkDoneProgress::End(lsp_types::WorkDoneProgressEnd { message })\n+        }\n     };\n     let notification =\n         notification_new::<lsp_types::notification::Progress>(lsp_types::ProgressParams {\n@@ -826,7 +824,7 @@ where\n         Err(e) => match e.downcast::<LspError>() {\n             Ok(lsp_error) => Response::new_err(id, lsp_error.code, lsp_error.message),\n             Err(e) => {\n-                if is_canceled(&e) {\n+                if is_canceled(&*e) {\n                     Response::new_err(\n                         id,\n                         ErrorCode::ContentModified as i32,\n@@ -853,7 +851,7 @@ fn update_file_notifications_on_threadpool(\n             for file_id in subscriptions {\n                 match handlers::publish_diagnostics(&world, file_id) {\n                     Err(e) => {\n-                        if !is_canceled(&e) {\n+                        if !is_canceled(&*e) {\n                             log::error!(\"failed to compute diagnostics: {:?}\", e);\n                         }\n                     }\n@@ -866,41 +864,6 @@ fn update_file_notifications_on_threadpool(\n     }\n }\n \n-pub fn show_message(\n-    typ: lsp_types::MessageType,\n-    message: impl Into<String>,\n-    sender: &Sender<Message>,\n-) {\n-    let message = message.into();\n-    let params = lsp_types::ShowMessageParams { typ, message };\n-    let not = notification_new::<lsp_types::notification::ShowMessage>(params);\n-    sender.send(not.into()).unwrap();\n-}\n-\n-fn is_canceled(e: &Box<dyn std::error::Error + Send + Sync>) -> bool {\n-    e.downcast_ref::<Canceled>().is_some()\n-}\n-\n-fn notification_is<N: lsp_types::notification::Notification>(notification: &Notification) -> bool {\n-    notification.method == N::METHOD\n-}\n-\n-fn notification_cast<N>(notification: Notification) -> std::result::Result<N::Params, Notification>\n-where\n-    N: lsp_types::notification::Notification,\n-    N::Params: DeserializeOwned,\n-{\n-    notification.extract(N::METHOD)\n-}\n-\n-fn notification_new<N>(params: N::Params) -> Notification\n-where\n-    N: lsp_types::notification::Notification,\n-    N::Params: Serialize,\n-{\n-    Notification::new(N::METHOD.to_string(), params)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use lsp_types::{Position, Range, TextDocumentContentChangeEvent};"}, {"sha": "cdb63b46f92f04b7d493b005783d6d14a14316de", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/659b16981a19b3b47f63e6cd4b7f668775e8e9a4/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "patch": "@@ -5,7 +5,6 @@ import { promises as fs, PathLike } from \"fs\";\n \n import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n-import { activateStatusDisplay } from './status_display';\n import { Ctx } from './ctx';\n import { Config, NIGHTLY_TAG } from './config';\n import { log, assert, isValidExecutable } from './util';\n@@ -117,8 +116,6 @@ export async function activate(context: vscode.ExtensionContext) {\n \n     ctx.pushCleanup(activateTaskProvider(workspaceFolder));\n \n-    activateStatusDisplay(ctx);\n-\n     activateInlayHints(ctx);\n \n     vscode.workspace.onDidChangeConfiguration("}, {"sha": "f9cadc8a2258c0834f3fa6a74a5efb935bcecdaf", "filename": "editors/code/src/status_display.ts", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/78e94e4570f09c8cbe1f8c6802df9b112ca37f08/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/78e94e4570f09c8cbe1f8c6802df9b112ca37f08/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=78e94e4570f09c8cbe1f8c6802df9b112ca37f08", "patch": "@@ -1,100 +0,0 @@\n-import * as vscode from 'vscode';\n-\n-import { WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressReport, WorkDoneProgressEnd, Disposable } from 'vscode-languageclient';\n-\n-import { Ctx } from './ctx';\n-\n-const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n-\n-export function activateStatusDisplay(ctx: Ctx) {\n-    const statusDisplay = new StatusDisplay(ctx.config.checkOnSave.command);\n-    ctx.pushCleanup(statusDisplay);\n-    const client = ctx.client;\n-    if (client != null) {\n-        ctx.pushCleanup(client.onProgress(\n-            WorkDoneProgress.type,\n-            'rustAnalyzer/cargoWatcher',\n-            params => statusDisplay.handleProgressNotification(params)\n-        ));\n-    }\n-}\n-\n-class StatusDisplay implements Disposable {\n-    packageName?: string;\n-\n-    private i: number = 0;\n-    private statusBarItem: vscode.StatusBarItem;\n-    private command: string;\n-    private timer?: NodeJS.Timeout;\n-\n-    constructor(command: string) {\n-        this.statusBarItem = vscode.window.createStatusBarItem(\n-            vscode.StatusBarAlignment.Left,\n-            10,\n-        );\n-        this.command = command;\n-        this.statusBarItem.hide();\n-    }\n-\n-    show() {\n-        this.packageName = undefined;\n-\n-        this.timer =\n-            this.timer ||\n-            setInterval(() => {\n-                this.tick();\n-                this.refreshLabel();\n-            }, 300);\n-\n-        this.statusBarItem.show();\n-    }\n-\n-    hide() {\n-        if (this.timer) {\n-            clearInterval(this.timer);\n-            this.timer = undefined;\n-        }\n-\n-        this.statusBarItem.hide();\n-    }\n-\n-    dispose() {\n-        if (this.timer) {\n-            clearInterval(this.timer);\n-            this.timer = undefined;\n-        }\n-\n-        this.statusBarItem.dispose();\n-    }\n-\n-    refreshLabel() {\n-        if (this.packageName) {\n-            this.statusBarItem.text = `${spinnerFrames[this.i]} cargo ${this.command} [${this.packageName}]`;\n-        } else {\n-            this.statusBarItem.text = `${spinnerFrames[this.i]} cargo ${this.command}`;\n-        }\n-    }\n-\n-    handleProgressNotification(params: WorkDoneProgressBegin | WorkDoneProgressReport | WorkDoneProgressEnd) {\n-        switch (params.kind) {\n-            case 'begin':\n-                this.show();\n-                break;\n-\n-            case 'report':\n-                if (params.message) {\n-                    this.packageName = params.message;\n-                    this.refreshLabel();\n-                }\n-                break;\n-\n-            case 'end':\n-                this.hide();\n-                break;\n-        }\n-    }\n-\n-    private tick() {\n-        this.i = (this.i + 1) % spinnerFrames.length;\n-    }\n-}"}]}