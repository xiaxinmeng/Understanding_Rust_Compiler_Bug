{"sha": "dd1525a021a6639a7976129abe525ad00defff59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMTUyNWEwMjFhNjYzOWE3OTc2MTI5YWJlNTI1YWQwMGRlZmZmNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T23:47:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T23:47:56Z"}, "message": "Auto merge of #86015 - jyn514:revert-revert, r=Mark-Simulacrum\n\nMove LLVM submodule updates back to native.rs\n\nTime to find more bugs!\n\nThe first commit is a straight revert of https://github.com/rust-lang/rust/pull/85647, the second is a fix for https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/x.2Epy.20always.20updates.20LLVM.20submodule/near/240113320 and https://github.com/rust-lang/rust/pull/82653#issuecomment-846755631. I haven't been able to replicate https://github.com/rust-lang/rust/pull/82653#issuecomment-849013698.", "tree": {"sha": "f7c8f4e1195a780c9317e28b48da8d22263c5ead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c8f4e1195a780c9317e28b48da8d22263c5ead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd1525a021a6639a7976129abe525ad00defff59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1525a021a6639a7976129abe525ad00defff59", "html_url": "https://github.com/rust-lang/rust/commit/dd1525a021a6639a7976129abe525ad00defff59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd1525a021a6639a7976129abe525ad00defff59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127", "html_url": "https://github.com/rust-lang/rust/commit/e6b4c252ea33e9f80ab8b8d7b3f6393e54166127"}, {"sha": "73a40ac1a0bf9e7adfe69a886727d64bc69fec05", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a40ac1a0bf9e7adfe69a886727d64bc69fec05", "html_url": "https://github.com/rust-lang/rust/commit/73a40ac1a0bf9e7adfe69a886727d64bc69fec05"}], "stats": {"total": 104, "additions": 91, "deletions": 13}, "files": [{"sha": "9b122bf491411eb975e4578856219cbafae6b9b5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd1525a021a6639a7976129abe525ad00defff59/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/dd1525a021a6639a7976129abe525ad00defff59/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=dd1525a021a6639a7976129abe525ad00defff59", "patch": "@@ -993,28 +993,20 @@ def update_submodules(self):\n         ).decode(default_encoding).splitlines()]\n         filtered_submodules = []\n         submodules_names = []\n-        llvm_checked_out = os.path.exists(os.path.join(self.rust_root, \"src/llvm-project/.git\"))\n-        external_llvm_provided = self.get_toml('llvm-config') or self.downloading_llvm()\n-        llvm_needed = not self.get_toml('codegen-backends', 'rust') \\\n-            or \"llvm\" in self.get_toml('codegen-backends', 'rust')\n         for module in submodules:\n+            # This is handled by native::Llvm in rustbuild, not here\n             if module.endswith(\"llvm-project\"):\n-                # Don't sync the llvm-project submodule if an external LLVM was\n-                # provided, if we are downloading LLVM or if the LLVM backend is\n-                # not being built. Also, if the submodule has been initialized\n-                # already, sync it anyways so that it doesn't mess up contributor\n-                # pull requests.\n-                if external_llvm_provided or not llvm_needed:\n-                    if self.get_toml('lld') != 'true' and not llvm_checked_out:\n-                        continue\n+                continue\n             check = self.check_submodule(module, slow_submodules)\n             filtered_submodules.append((module, check))\n             submodules_names.append(module)\n         recorded = subprocess.Popen([\"git\", \"ls-tree\", \"HEAD\"] + submodules_names,\n                                     cwd=self.rust_root, stdout=subprocess.PIPE)\n         recorded = recorded.communicate()[0].decode(default_encoding).strip().splitlines()\n+        # { filename: hash }\n         recorded_submodules = {}\n         for data in recorded:\n+            # [mode, kind, hash, filename]\n             data = data.split()\n             recorded_submodules[data[3]] = data[2]\n         for module in filtered_submodules:"}, {"sha": "8e8c27b0d0dc9952311449d85d179ac6685768ed", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd1525a021a6639a7976129abe525ad00defff59/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1525a021a6639a7976129abe525ad00defff59/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dd1525a021a6639a7976129abe525ad00defff59", "patch": "@@ -483,6 +483,12 @@ impl Build {\n             job::setup(self);\n         }\n \n+        // If the LLVM submodule has been initialized already, sync it unconditionally. This avoids\n+        // contributors checking in a submodule change by accident.\n+        if self.in_tree_llvm_info.is_git() {\n+            native::update_llvm_submodule(self);\n+        }\n+\n         if let Subcommand::Format { check, paths } = &self.config.cmd {\n             return format::format(self, *check, &paths);\n         }"}, {"sha": "375f5d727f06a22f2505c28f146f943a0861a250", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/dd1525a021a6639a7976129abe525ad00defff59/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1525a021a6639a7976129abe525ad00defff59/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=dd1525a021a6639a7976129abe525ad00defff59", "patch": "@@ -21,7 +21,7 @@ use build_helper::{output, t};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::util::{self, exe};\n-use crate::GitRepo;\n+use crate::{Build, GitRepo};\n use build_helper::up_to_date;\n \n pub struct Meta {\n@@ -91,6 +91,82 @@ pub fn prebuilt_llvm_config(\n     Err(Meta { stamp, build_llvm_config, out_dir, root: root.into() })\n }\n \n+// modified from `check_submodule` and `update_submodule` in bootstrap.py\n+pub(crate) fn update_llvm_submodule(build: &Build) {\n+    let llvm_project = &Path::new(\"src\").join(\"llvm-project\");\n+\n+    fn dir_is_empty(dir: &Path) -> bool {\n+        t!(std::fs::read_dir(dir)).next().is_none()\n+    }\n+\n+    // NOTE: The check for the empty directory is here because when running x.py\n+    // the first time, the llvm submodule won't be checked out. Check it out\n+    // now so we can build it.\n+    if !build.in_tree_llvm_info.is_git() && !dir_is_empty(&build.config.src.join(llvm_project)) {\n+        return;\n+    }\n+\n+    // check_submodule\n+    if build.config.fast_submodules {\n+        let checked_out_hash = output(\n+            Command::new(\"git\")\n+                .args(&[\"rev-parse\", \"HEAD\"])\n+                .current_dir(build.config.src.join(llvm_project)),\n+        );\n+        // update_submodules\n+        let recorded = output(\n+            Command::new(\"git\")\n+                .args(&[\"ls-tree\", \"HEAD\"])\n+                .arg(llvm_project)\n+                .current_dir(&build.config.src),\n+        );\n+        let actual_hash = recorded\n+            .split_whitespace()\n+            .nth(2)\n+            .unwrap_or_else(|| panic!(\"unexpected output `{}`\", recorded));\n+\n+        // update_submodule\n+        if actual_hash == checked_out_hash.trim_end() {\n+            // already checked out\n+            return;\n+        }\n+    }\n+\n+    println!(\"Updating submodule {}\", llvm_project.display());\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"submodule\", \"-q\", \"sync\"])\n+            .arg(llvm_project)\n+            .current_dir(&build.config.src),\n+    );\n+\n+    // Try passing `--progress` to start, then run git again without if that fails.\n+    let update = |progress: bool| {\n+        let mut git = Command::new(\"git\");\n+        git.args(&[\"submodule\", \"update\", \"--init\", \"--recursive\"]);\n+        if progress {\n+            git.arg(\"--progress\");\n+        }\n+        git.arg(llvm_project).current_dir(&build.config.src);\n+        git\n+    };\n+    // NOTE: doesn't use `try_run` because this shouldn't print an error if it fails.\n+    if !update(true).status().map_or(false, |status| status.success()) {\n+        build.run(&mut update(false));\n+    }\n+\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"reset\", \"-q\", \"--hard\"])\n+            .current_dir(build.config.src.join(llvm_project)),\n+    );\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"clean\", \"-qdfx\"])\n+            .current_dir(build.config.src.join(llvm_project)),\n+    );\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: TargetSelection,\n@@ -128,6 +204,9 @@ impl Step for Llvm {\n                 Err(m) => m,\n             };\n \n+        if !builder.config.dry_run {\n+            update_llvm_submodule(builder);\n+        }\n         if builder.config.llvm_link_shared\n             && (target.contains(\"windows\") || target.contains(\"apple-darwin\"))\n         {"}, {"sha": "b1ec072f3f8aae7da31f1d171b770bf097948197", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd1525a021a6639a7976129abe525ad00defff59/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1525a021a6639a7976129abe525ad00defff59/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=dd1525a021a6639a7976129abe525ad00defff59", "patch": "@@ -130,6 +130,7 @@ pub fn make(host: &str) -> PathBuf {\n     }\n }\n \n+#[track_caller]\n pub fn output(cmd: &mut Command) -> String {\n     let output = match cmd.stderr(Stdio::inherit()).output() {\n         Ok(status) => status,"}]}