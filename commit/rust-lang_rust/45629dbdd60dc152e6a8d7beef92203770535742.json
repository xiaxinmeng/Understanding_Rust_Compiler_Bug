{"sha": "45629dbdd60dc152e6a8d7beef92203770535742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NjI5ZGJkZDYwZGMxNTJlNmE4ZDdiZWVmOTIyMDM3NzA1MzU3NDI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-04-08T21:49:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-08T21:49:39Z"}, "message": "Merge pull request #2609 from csmoe/update_rustc_syntax\n\nupdate rustc_ap_syntax", "tree": {"sha": "597b6a16d970dd6c71b4b2d84bfc07616f41d159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/597b6a16d970dd6c71b4b2d84bfc07616f41d159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45629dbdd60dc152e6a8d7beef92203770535742", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJayo5zCRBK7hj4Ov3rIwAAdHIIAHJp6pvS+EyPDDtwSRMQ7qdw\nUtYMQZXk3wIDRBoT3CKbmw+ke1Xh7B+xyY3RIvb1Z7pD7RB124L8qjJnxT2SyKr0\nWNU+n5/bb/fMtSeuuqbWXOWB1F5wS9Zv6gldGmrYDgunFQrVM/V1CI0tnN5Pi9UT\nC1Uu4ilhnW2FUQCiLRIm4cqaVgK8A3T6YQ5NZjcyOQCgtRWFR6cjxVqC+NRa1rPe\naN0dKKoFlHGqAvrNwZiM2YJjtsbat/AY900m86G9lG8JtLffu5JGrVpzwzEG4Mk8\nraaFvOrXseq+AA6nVk11CSJ/OVF82EdN450IZbvOw2pwAi8YjDJYUiagfs83ciQ=\n=hNOy\n-----END PGP SIGNATURE-----\n", "payload": "tree 597b6a16d970dd6c71b4b2d84bfc07616f41d159\nparent edcc7b69ebe7f13223bd0e44f766a050df859eaa\nparent 84d36597671982900dc10f4d1940d40b290106eb\nauthor Nick Cameron <nrc@ncameron.org> 1523224179 +1200\ncommitter GitHub <noreply@github.com> 1523224179 +1200\n\nMerge pull request #2609 from csmoe/update_rustc_syntax\n\nupdate rustc_ap_syntax"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45629dbdd60dc152e6a8d7beef92203770535742", "html_url": "https://github.com/rust-lang/rust/commit/45629dbdd60dc152e6a8d7beef92203770535742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45629dbdd60dc152e6a8d7beef92203770535742/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edcc7b69ebe7f13223bd0e44f766a050df859eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/edcc7b69ebe7f13223bd0e44f766a050df859eaa", "html_url": "https://github.com/rust-lang/rust/commit/edcc7b69ebe7f13223bd0e44f766a050df859eaa"}, {"sha": "84d36597671982900dc10f4d1940d40b290106eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/84d36597671982900dc10f4d1940d40b290106eb", "html_url": "https://github.com/rust-lang/rust/commit/84d36597671982900dc10f4d1940d40b290106eb"}], "stats": {"total": 117, "additions": 62, "deletions": 55}, "files": [{"sha": "357e80e140397e6973158d1eaf9f903ee8cac099", "filename": "Cargo.lock", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -312,7 +312,7 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"89.0.0\"\n+version = \"91.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -321,61 +321,61 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"89.0.0\"\n+version = \"91.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"89.0.0\"\n+version = \"91.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"89.0.0\"\n+version = \"91.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"89.0.0\"\n+version = \"91.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"89.0.0\"\n+version = \"91.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -400,7 +400,7 @@ dependencies = [\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -665,12 +665,12 @@ dependencies = [\n \"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\n \"checksum regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aec3f58d903a7d2a9dc2bf0e41a746f4530e0cab6b615494e058f67a3ef947fb\"\n \"checksum regex-syntax 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2550876c31dc914696a6c2e01cbce8afba79a93c8ae979d2fe051c0230b3756\"\n-\"checksum rustc-ap-rustc_cratesio_shim 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a78bda69468474cd71e758ae38e6941e85f836024621134f302d1186c0e8dc24\"\n-\"checksum rustc-ap-rustc_data_structures 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7f5888f20a213def17eae391dc1ccc35d45bdafb55a50f6ede64366309928adf\"\n-\"checksum rustc-ap-rustc_errors 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ec73f8e6d50d8354f8c73a8933c7247c1da0c83c165e43a6453586ece2f1fc44\"\n-\"checksum rustc-ap-serialize 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc4c01e2e699c5218cd6a4259d0b361f260300c74b48389a968868e902c7dbc5\"\n-\"checksum rustc-ap-syntax 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb3954b2f98d9c05ea0cbe8d4d72352552ed20f22de7083c04576cdd6f8b432f\"\n-\"checksum rustc-ap-syntax_pos 89.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6efc72a1191597fbaf780158b2bad3922820557606607a26d8088852fc416f5\"\n+\"checksum rustc-ap-rustc_cratesio_shim 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0dd7571780b3232786f538b4e72f4a8d7fcffbb4a951d3861e18142d3cf2f0ac\"\n+\"checksum rustc-ap-rustc_data_structures 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ae9ebbcbe26ea53eb0f3162c109892cd69ebb5efc986f3a21bce4891adf628f\"\n+\"checksum rustc-ap-rustc_errors 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c8385e5cf62344a4c6b2446723da0a82dad7ec97b2988b6494a197f231fc4b9\"\n+\"checksum rustc-ap-serialize 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d08a7e3ce1d87fda88fdf51bdfec5886f42bfd93ce7fcf1d69fcd0a23d1ab4ea\"\n+\"checksum rustc-ap-syntax 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06b7a6da9b99e9a2e31f9325216dc5d477eb5d9bd88c7bb05b5e97e88d06d675\"\n+\"checksum rustc-ap-syntax_pos 91.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"582d30a1308f6598b3636bc244efacd8551c825ed6be2aa594257fbf772d1161\"\n \"checksum rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11fb43a206a04116ffd7cfcf9bcb941f8eb6cc7ff667272246b0a1c74259a3cb\"\n \"checksum scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8674d439c964889e2476f474a3bf198cc9e199e77499960893bac5de7e9218a4\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\""}, {"sha": "ee5b1ebc99a727653beec00457c7e697a35bfeea", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -46,7 +46,7 @@ env_logger = \"0.5\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.5.1\"\n-rustc-ap-syntax = \"89.0.0\"\n+rustc-ap-syntax = \"91.0.0\"\n \n [dev-dependencies]\n lazy_static = \"1.0.0\""}, {"sha": "e17b89e5c9e7280d7d5ee8b54ee0c4ef885dae79", "filename": "src/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -200,9 +200,9 @@ fn allow_mixed_tactic_for_nested_metaitem_list(list: &[ast::NestedMetaItem]) ->\n impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         Some(match self.node {\n-            ast::MetaItemKind::Word => String::from(&*self.name.as_str()),\n+            ast::MetaItemKind::Word => String::from(&*self.ident.name.as_str()),\n             ast::MetaItemKind::List(ref list) => {\n-                let name = self.name.as_str();\n+                let name = self.ident.name.as_str();\n                 let item_shape = match context.config.indent_style() {\n                     IndentStyle::Block => shape\n                         .block_indent(context.config.tab_spaces())\n@@ -259,7 +259,7 @@ impl Rewrite for ast::MetaItem {\n                 }\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n-                let name = self.name.as_str();\n+                let name = self.ident.name.as_str();\n                 // 3 = ` = `\n                 let lit_shape = shape.shrink_left(name.len() + 3)?;\n                 // `rewrite_literal` returns `None` when `literal` exceeds max"}, {"sha": "15ecd6034f31ffc3f905fc051bd27c514b29060d", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -438,9 +438,9 @@ fn rewrite_chain_subexpr(\n                 },\n                 _ => &[],\n             };\n-            rewrite_method_call(segment.identifier, types, expressions, span, context, shape)\n+            rewrite_method_call(segment.ident, types, expressions, span, context, shape)\n         }\n-        ast::ExprKind::Field(_, ref field) => rewrite_element(format!(\".{}\", field.node)),\n+        ast::ExprKind::Field(_, ref field) => rewrite_element(format!(\".{}\", field.name)),\n         ast::ExprKind::TupField(ref expr, ref field) => {\n             let space = match expr.node {\n                 ast::ExprKind::TupField(..) => \" \","}, {"sha": "b738d4ccb163060e6db02a82a1504d9d82f81346", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -173,7 +173,13 @@ pub fn format_expr(\n         },\n         ast::ExprKind::Closure(capture, movability, ref fn_decl, ref body, _) => {\n             closures::rewrite_closure(\n-                capture, movability, fn_decl, body, expr.span, context, shape,\n+                capture,\n+                movability,\n+                fn_decl,\n+                body,\n+                expr.span,\n+                context,\n+                shape,\n             )\n         }\n         ast::ExprKind::Try(..)\n@@ -928,7 +934,8 @@ impl<'a> ControlFlow<'a> {\n \n         // `for event in event`\n         // Do not include label in the span.\n-        let lo = self.label.map_or(self.span.lo(), |label| label.span.hi());\n+        let lo = self.label\n+            .map_or(self.span.lo(), |label| label.ident.span.hi());\n         let between_kwd_cond = mk_sp(\n             context\n                 .snippet_provider\n@@ -1702,7 +1709,7 @@ pub fn rewrite_field(\n     if !attrs_str.is_empty() {\n         attrs_str.push_str(&shape.indent.to_string_with_newline(context.config));\n     };\n-    let name = field.ident.node.to_string();\n+    let name = &field.ident.name.to_string();\n     if field.is_shorthand {\n         Some(attrs_str + &name)\n     } else {"}, {"sha": "a66bcbd3e94e7ea89b33dc0e9b87185ed0ccbadd", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -28,7 +28,7 @@ use std::borrow::Cow;\n /// Returns a name imported by a `use` declaration. e.g. returns `Ordering`\n /// for `std::cmp::Ordering` and `self` for `std::cmp::self`.\n pub fn path_to_imported_ident(path: &ast::Path) -> ast::Ident {\n-    path.segments.last().unwrap().identifier\n+    path.segments.last().unwrap().ident\n }\n \n impl<'a> FmtVisitor<'a> {\n@@ -129,7 +129,7 @@ impl UseSegment {\n     }\n \n     fn from_path_segment(path_seg: &ast::PathSegment) -> Option<UseSegment> {\n-        let name = path_seg.identifier.name.as_str();\n+        let name = path_seg.ident.name.as_str();\n         if name == \"{{root}}\" {\n             return None;\n         }"}, {"sha": "6d474a3ccd600148157f9f5414f51202749eac9b", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -562,10 +562,10 @@ impl<'a> FmtVisitor<'a> {\n             )?,\n             ast::VariantData::Unit(..) => {\n                 if let Some(ref expr) = field.node.disr_expr {\n-                    let lhs = format!(\"{} =\", field.node.name);\n+                    let lhs = format!(\"{} =\", field.node.ident.name);\n                     rewrite_assign_rhs(&context, lhs, &**expr, shape)?\n                 } else {\n-                    field.node.name.to_string()\n+                    field.node.ident.name.to_string()\n                 }\n             }\n         };\n@@ -893,7 +893,7 @@ impl<'a> StructParts<'a> {\n     fn from_variant(variant: &'a ast::Variant) -> Self {\n         StructParts {\n             prefix: \"\",\n-            ident: variant.node.name,\n+            ident: variant.node.ident,\n             vis: &DEFAULT_VISIBILITY,\n             def: &variant.node.data,\n             generics: None,\n@@ -1794,7 +1794,7 @@ pub fn span_hi_for_arg(context: &RewriteContext, arg: &ast::Arg) -> BytePos {\n \n pub fn is_named_arg(arg: &ast::Arg) -> bool {\n     if let ast::PatKind::Ident(_, ident, _) = arg.pat.node {\n-        ident.node != symbol::keywords::Invalid.ident()\n+        ident != symbol::keywords::Invalid.ident()\n     } else {\n         true\n     }\n@@ -2263,7 +2263,7 @@ fn rewrite_args(\n \n fn arg_has_pattern(arg: &ast::Arg) -> bool {\n     if let ast::PatKind::Ident(_, ident, _) = arg.pat.node {\n-        ident.node != symbol::keywords::Invalid.ident()\n+        ident != symbol::keywords::Invalid.ident()\n     } else {\n         true\n     }"}, {"sha": "9cf033e9693ab90dbea42a2b82f74f3d6276cb35", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -117,7 +117,7 @@ fn parse_macro_arg(parser: &mut Parser) -> Option<MacroArg> {\n fn rewrite_macro_name(path: &ast::Path, extra_ident: Option<ast::Ident>) -> String {\n     let name = if path.segments.len() == 1 {\n         // Avoid using pretty-printer in the common case.\n-        format!(\"{}!\", path.segments[0].identifier)\n+        format!(\"{}!\", path.segments[0].ident)\n     } else {\n         format!(\"{}!\", path)\n     };"}, {"sha": "243b85e4267281e31504ceaab85fd004f59227b4", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -71,7 +71,7 @@ impl Rewrite for Pat {\n                     BindingMode::ByValue(mutability) => (\"\", mutability),\n                 };\n                 let mut_infix = format_mutability(mutability);\n-                let id_str = ident.node.to_string();\n+                let id_str = ident.name.to_string();\n                 let sub_pat = match *sub_pat {\n                     Some(ref p) => {\n                         // 3 - ` @ `."}, {"sha": "237624ab8fef89025236d882a0a49fb5f88f7513", "filename": "src/spanned.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -146,15 +146,15 @@ impl Spanned for ast::TyParam {\n     fn span(&self) -> Span {\n         // Note that ty.span is the span for ty.ident, not the whole item.\n         let lo = if self.attrs.is_empty() {\n-            self.span.lo()\n+            self.ident.span.lo()\n         } else {\n             self.attrs[0].span.lo()\n         };\n         if let Some(ref def) = self.default {\n             return mk_sp(lo, def.span.hi());\n         }\n         if self.bounds.is_empty() {\n-            return mk_sp(lo, self.span.hi());\n+            return mk_sp(lo, self.ident.span.hi());\n         }\n         let hi = self.bounds[self.bounds.len() - 1].span().hi();\n         mk_sp(lo, hi)\n@@ -165,19 +165,19 @@ impl Spanned for ast::TyParamBound {\n     fn span(&self) -> Span {\n         match *self {\n             ast::TyParamBound::TraitTyParamBound(ref ptr, _) => ptr.span,\n-            ast::TyParamBound::RegionTyParamBound(ref l) => l.span,\n+            ast::TyParamBound::RegionTyParamBound(ref l) => l.ident.span,\n         }\n     }\n }\n \n impl Spanned for ast::LifetimeDef {\n     fn span(&self) -> Span {\n         let hi = if self.bounds.is_empty() {\n-            self.lifetime.span.hi()\n+            self.lifetime.ident.span.hi()\n         } else {\n-            self.bounds[self.bounds.len() - 1].span.hi()\n+            self.bounds[self.bounds.len() - 1].ident.span.hi()\n         };\n-        mk_sp(self.lifetime.span.lo(), hi)\n+        mk_sp(self.lifetime.ident.span.lo(), hi)\n     }\n }\n "}, {"sha": "0c0cad8244b7083668858609946f4c27db2de764", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -119,7 +119,7 @@ where\n \n     for segment in iter {\n         // Indicates a global path, shouldn't be rendered.\n-        if segment.identifier.name == keywords::CrateRoot.name() {\n+        if segment.ident.name == keywords::CrateRoot.name() {\n             continue;\n         }\n         if first {\n@@ -155,7 +155,7 @@ enum SegmentParam<'a> {\n impl<'a> Spanned for SegmentParam<'a> {\n     fn span(&self) -> Span {\n         match *self {\n-            SegmentParam::LifeTime(lt) => lt.span,\n+            SegmentParam::LifeTime(lt) => lt.ident.span,\n             SegmentParam::Type(ty) => ty.span,\n             SegmentParam::Binding(binding) => binding.span,\n         }\n@@ -215,7 +215,7 @@ fn rewrite_segment(\n     shape: Shape,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n-    result.push_str(&segment.identifier.name.as_str());\n+    result.push_str(&segment.ident.name.as_str());\n \n     let ident_len = result.len();\n     let shape = if context.use_block_indent() {"}, {"sha": "dae57882a35d2efba06de9ca72fac0a7155963a3", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -42,7 +42,7 @@ pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n         VisibilityKind::Crate(CrateSugar::JustCrate) => Cow::from(\"crate \"),\n         VisibilityKind::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n-            let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.to_string());\n+            let mut segments_iter = segments.iter().map(|seg| seg.ident.name.to_string());\n             if path.is_global() {\n                 segments_iter\n                     .next()\n@@ -190,9 +190,9 @@ pub fn last_line_extendable(s: &str) -> bool {\n #[inline]\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.node {\n-        MetaItemKind::Word => meta_item.name == SKIP_ANNOTATION,\n+        MetaItemKind::Word => meta_item.ident.name == SKIP_ANNOTATION,\n         MetaItemKind::List(ref l) => {\n-            meta_item.name == \"cfg_attr\" && l.len() == 2 && is_skip_nested(&l[1])\n+            meta_item.ident.name == \"cfg_attr\" && l.len() == 2 && is_skip_nested(&l[1])\n         }\n         _ => false,\n     }"}, {"sha": "6cdaaafeb36116ef2b557b92645937f98f3bbb8c", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45629dbdd60dc152e6a8d7beef92203770535742/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=45629dbdd60dc152e6a8d7beef92203770535742", "patch": "@@ -88,7 +88,7 @@ impl AlignedItem for ast::Field {\n \n     fn rewrite_prefix(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let attrs_str = self.attrs.rewrite(context, shape)?;\n-        let name = &self.ident.node.to_string();\n+        let name = &self.ident.name.to_string();\n         let missing_span = if self.attrs.is_empty() {\n             mk_sp(self.span.lo(), self.span.lo())\n         } else {"}]}