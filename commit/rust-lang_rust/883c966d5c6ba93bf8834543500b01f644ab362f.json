{"sha": "883c966d5c6ba93bf8834543500b01f644ab362f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4M2M5NjZkNWM2YmE5M2JmODgzNDU0MzUwMGIwMWY2NDRhYjM2MmY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-19T02:59:48Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-21T07:23:59Z"}, "message": "vec: replace `position` with `iter().position_`", "tree": {"sha": "9d4d22407fddfe40d3a452249886146a0ab003d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d4d22407fddfe40d3a452249886146a0ab003d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883c966d5c6ba93bf8834543500b01f644ab362f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883c966d5c6ba93bf8834543500b01f644ab362f", "html_url": "https://github.com/rust-lang/rust/commit/883c966d5c6ba93bf8834543500b01f644ab362f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883c966d5c6ba93bf8834543500b01f644ab362f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c74524e2c5a2a81ce4cbe2c50a507c0be9f24e", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c74524e2c5a2a81ce4cbe2c50a507c0be9f24e", "html_url": "https://github.com/rust-lang/rust/commit/49c74524e2c5a2a81ce4cbe2c50a507c0be9f24e"}], "stats": {"total": 67, "additions": 13, "deletions": 54}, "files": [{"sha": "5980bd7c9e4774a9b989af2007b94d5b170122e4", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=883c966d5c6ba93bf8834543500b01f644ab362f", "patch": "@@ -177,7 +177,7 @@ fn name_str(nm: &Name) -> ~str {\n }\n \n fn find_opt(opts: &[Opt], nm: Name) -> Option<uint> {\n-    vec::position(opts, |opt| opt.name == nm)\n+    opts.iter().position_(|opt| opt.name == nm)\n }\n \n /**"}, {"sha": "0bbccd4df4a0b7d1471f808ab7948e414ece6291", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=883c966d5c6ba93bf8834543500b01f644ab362f", "patch": "@@ -950,7 +950,7 @@ impl serialize::Decoder for Decoder {\n             }\n             ref json => fail!(\"invalid variant: %?\", *json),\n         };\n-        let idx = match vec::position(names, |n| str::eq_slice(*n, name)) {\n+        let idx = match names.iter().position_(|n| str::eq_slice(*n, name)) {\n             Some(idx) => idx,\n             None => fail!(\"Unknown variant name: %?\", name),\n         };"}, {"sha": "e9a0d42f29b989c6129dd88024996d8ac03caaa4", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=883c966d5c6ba93bf8834543500b01f644ab362f", "patch": "@@ -468,8 +468,7 @@ pub fn add_clean_free(cx: block, ptr: ValueRef, heap: heap) {\n pub fn revoke_clean(cx: block, val: ValueRef) {\n     do in_scope_cx(cx) |scope_info| {\n         let scope_info = &mut *scope_info; // FIXME(#5074) workaround borrowck\n-        let cleanup_pos = vec::position(\n-            scope_info.cleanups,\n+        let cleanup_pos = scope_info.cleanups.iter().position_(\n             |cu| match *cu {\n                 clean_temp(v, _, _) if v == val => true,\n                 _ => false"}, {"sha": "d1467edd94d59f4e9794f8ac4c99daa7d2326d05", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=883c966d5c6ba93bf8834543500b01f644ab362f", "patch": "@@ -1152,8 +1152,7 @@ fn trans_rec_or_struct(bcx: block,\n         let mut need_base = vec::from_elem(field_tys.len(), true);\n \n         let numbered_fields = do fields.map |field| {\n-            let opt_pos = vec::position(field_tys, |field_ty|\n-                                        field_ty.ident == field.node.ident);\n+            let opt_pos = field_tys.iter().position_(|field_ty| field_ty.ident == field.node.ident);\n             match opt_pos {\n                 Some(i) => {\n                     need_base[i] = false;"}, {"sha": "2340ffc76b3884d2a480379fb03437ad930498d4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=883c966d5c6ba93bf8834543500b01f644ab362f", "patch": "@@ -3372,7 +3372,7 @@ pub fn field_idx_strict(tcx: ty::ctxt, id: ast::ident, fields: &[field])\n }\n \n pub fn method_idx(id: ast::ident, meths: &[@Method]) -> Option<uint> {\n-    vec::position(meths, |m| m.ident == id)\n+    meths.iter().position_(|m| m.ident == id)\n }\n \n /// Returns a vector containing the indices of all type parameters that appear"}, {"sha": "2b7f7d0f77c68779c0aad4aa8dcca5d0b1d50281", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=883c966d5c6ba93bf8834543500b01f644ab362f", "patch": "@@ -420,7 +420,7 @@ impl<'self> LookupContext<'self> {\n \n         let tcx = self.tcx();\n         let ms = ty::trait_methods(tcx, did);\n-        let index = match vec::position(*ms, |m| m.ident == self.m_name) {\n+        let index = match ms.iter().position_(|m| m.ident == self.m_name) {\n             Some(i) => i,\n             None => { return; } // no method with the right name\n         };\n@@ -474,7 +474,7 @@ impl<'self> LookupContext<'self> {\n         // First, try self methods\n         let mut method_info: Option<MethodInfo> = None;\n         let methods = ty::trait_methods(tcx, did);\n-        match vec::position(*methods, |m| m.ident == self.m_name) {\n+        match methods.iter().position_(|m| m.ident == self.m_name) {\n             Some(i) => {\n                 method_info = Some(MethodInfo {\n                     method_ty: methods[i],\n@@ -489,8 +489,7 @@ impl<'self> LookupContext<'self> {\n             for ty::trait_supertraits(tcx, did).each() |trait_ref| {\n                 let supertrait_methods =\n                     ty::trait_methods(tcx, trait_ref.def_id);\n-                match vec::position(*supertrait_methods,\n-                                    |m| m.ident == self.m_name) {\n+                match supertrait_methods.iter().position_(|m| m.ident == self.m_name) {\n                     Some(i) => {\n                         method_info = Some(MethodInfo {\n                             method_ty: supertrait_methods[i],"}, {"sha": "394066f1d4cf0909f7d14320dc0f9e6f1a985b75", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=883c966d5c6ba93bf8834543500b01f644ab362f", "patch": "@@ -22,7 +22,7 @@ use iter::{FromIter, Times};\n use num::{Zero, One};\n use option::{Option, Some, None};\n use ops::{Add, Mul};\n-use cmp::{Ord, Eq};\n+use cmp::Ord;\n use clone::Clone;\n \n /// An interface for dealing with \"external iterators\". These types of iterators"}, {"sha": "ce5662c6d4b3997d3b5784ffc7f77d673e7872b9", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883c966d5c6ba93bf8834543500b01f644ab362f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=883c966d5c6ba93bf8834543500b01f644ab362f", "patch": "@@ -19,7 +19,7 @@ use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n use old_iter::BaseIter;\n use old_iter;\n-use iterator::{Iterator};\n+use iterator::{Iterator, IteratorUtil};\n use iter::FromIter;\n use kinds::Copy;\n use libc;\n@@ -1107,18 +1107,7 @@ pub fn rfind_between<T:Copy>(v: &[T],\n \n /// Find the first index containing a matching value\n pub fn position_elem<T:Eq>(v: &[T], x: &T) -> Option<uint> {\n-    position(v, |y| *x == *y)\n-}\n-\n-/**\n- * Find the first index matching some predicate\n- *\n- * Apply function `f` to each element of `v`.  When function `f` returns true\n- * then an option containing the index is returned. If `f` matches no elements\n- * then none is returned.\n- */\n-pub fn position<T>(v: &[T], f: &fn(t: &T) -> bool) -> Option<uint> {\n-    position_between(v, 0u, v.len(), f)\n+    v.iter().position_(|y| *x == *y)\n }\n \n /**\n@@ -3146,18 +3135,6 @@ mod tests {\n         assert!(position_elem(v1, &4).is_none());\n     }\n \n-    #[test]\n-    fn test_position() {\n-        fn less_than_three(i: &int) -> bool { *i < 3 }\n-        fn is_eighteen(i: &int) -> bool { *i == 18 }\n-\n-        assert!(position([], less_than_three).is_none());\n-\n-        let v1 = ~[5, 4, 3, 2, 1];\n-        assert_eq!(position(v1, less_than_three), Some(3u));\n-        assert!(position(v1, is_eighteen).is_none());\n-    }\n-\n     #[test]\n     fn test_position_between() {\n         assert!(position_between([], 0u, 0u, f).is_none());\n@@ -3234,8 +3211,8 @@ mod tests {\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n         let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert_eq!(position(v, f), Some(1u));\n-        assert!(position(v, g).is_none());\n+        assert_eq!(rposition(v, f), Some(3u));\n+        assert!(rposition(v, g).is_none());\n     }\n \n     #[test]\n@@ -3877,21 +3854,6 @@ mod tests {\n         };\n     }\n \n-    #[test]\n-    #[ignore(windows)]\n-    #[should_fail]\n-    fn test_position_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n-        let mut i = 0;\n-        do position(v) |_elt| {\n-            if i == 2 {\n-                fail!()\n-            }\n-            i += 0;\n-            false\n-        };\n-    }\n-\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]"}]}