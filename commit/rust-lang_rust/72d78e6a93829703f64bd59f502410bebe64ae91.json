{"sha": "72d78e6a93829703f64bd59f502410bebe64ae91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZDc4ZTZhOTM4Mjk3MDNmNjRiZDU5ZjUwMjQxMGJlYmU2NGFlOTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-24T22:18:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-24T22:19:59Z"}, "message": "rt: Factor out type param construction into from_tydesc and from_obj_shape. (The latter is unimplemented at the moment.)", "tree": {"sha": "8e06727a5acf867cc825dc2ddc144cd5fd041c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e06727a5acf867cc825dc2ddc144cd5fd041c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d78e6a93829703f64bd59f502410bebe64ae91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d78e6a93829703f64bd59f502410bebe64ae91", "html_url": "https://github.com/rust-lang/rust/commit/72d78e6a93829703f64bd59f502410bebe64ae91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d78e6a93829703f64bd59f502410bebe64ae91/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dc1d7ee57bed7f0bd54e0369633fc09e200bbd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc1d7ee57bed7f0bd54e0369633fc09e200bbd6", "html_url": "https://github.com/rust-lang/rust/commit/0dc1d7ee57bed7f0bd54e0369633fc09e200bbd6"}], "stats": {"total": 81, "additions": 50, "deletions": 31}, "files": [{"sha": "19cf4f55f724bb4d154f3948c5de8c14c49415ba", "filename": "src/rt/rust_gc.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d78e6a93829703f64bd59f502410bebe64ae91/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72d78e6a93829703f64bd59f502410bebe64ae91/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=72d78e6a93829703f64bd59f502410bebe64ae91", "patch": "@@ -119,8 +119,8 @@ gc::mark(std::vector<root> &roots) {\n         DPRINT(\"root: %p\\n\", ri->data);\n \n         shape::arena arena;\n-        shape::type_param *params = shape::type_param::make(ri->tydesc,\n-                                                            arena);\n+        shape::type_param *params = shape::type_param::from_tydesc(ri->tydesc,\n+                                                                   arena);\n         shape::log log(task, ri->tydesc->shape, params,\n                        ri->tydesc->shape_tables, ri->data, std::cerr);\n         log.walk(true);"}, {"sha": "8e99c41ea02c79bcedc9b9c6080e33bcd5472228", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72d78e6a93829703f64bd59f502410bebe64ae91/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72d78e6a93829703f64bd59f502410bebe64ae91/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=72d78e6a93829703f64bd59f502410bebe64ae91", "patch": "@@ -17,23 +17,37 @@ namespace shape {\n \n using namespace shape;\n \n-// Forward declarations\n-\n-struct rust_obj;\n-struct size_align;\n-struct type_param;\n-\n-\n // Constants\n \n const uint8_t CMP_EQ = 0u;\n const uint8_t CMP_LT = 1u;\n const uint8_t CMP_LE = 2u;\n \n-}   // end namespace shape\n \n+// Type parameters\n+\n+type_param *\n+type_param::make(const type_desc **tydescs, unsigned n_tydescs,\n+                 arena &arena) {\n+    if (!n_tydescs)\n+        return NULL;\n+\n+    type_param *ptrs = arena.alloc<type_param>(n_tydescs);\n+    for (uint32_t i = 0; i < n_tydescs; i++) {\n+        const type_desc *subtydesc = tydescs[i];\n+        ptrs[i].shape = subtydesc->shape;\n+        ptrs[i].tables = subtydesc->shape_tables;\n+        ptrs[i].params = from_tydesc(subtydesc, arena);\n+    }\n+    return ptrs;\n+}\n+\n+type_param *\n+type_param::from_obj_shape(const uint8_t *sp, arena &arena) {\n+    // TODO\n+    abort();\n+}\n \n-namespace shape {\n \n // A shape printer, useful for debugging\n \n@@ -469,7 +483,7 @@ upcall_cmp_type(int8_t *result, rust_task *task, type_desc *tydesc,\n                 const type_desc **subtydescs, uint8_t *data_0,\n                 uint8_t *data_1, uint8_t cmp_type) {\n     shape::arena arena;\n-    shape::type_param *params = shape::type_param::make(tydesc, arena);\n+    shape::type_param *params = shape::type_param::from_tydesc(tydesc, arena);\n     shape::cmp cmp(task, tydesc->shape, params, tydesc->shape_tables, data_0,\n                    data_1);\n     cmp.walk(true);\n@@ -488,7 +502,7 @@ upcall_log_type(rust_task *task, type_desc *tydesc, uint8_t *data,\n         return;     // TODO: Don't evaluate at all?\n \n     shape::arena arena;\n-    shape::type_param *params = shape::type_param::make(tydesc, arena);\n+    shape::type_param *params = shape::type_param::from_tydesc(tydesc, arena);\n \n     std::stringstream ss;\n     shape::log log(task, tydesc->shape, params, tydesc->shape_tables, data,"}, {"sha": "e735bfa3d1b43951ad65b47d609269f3836279d3", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/72d78e6a93829703f64bd59f502410bebe64ae91/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/72d78e6a93829703f64bd59f502410bebe64ae91/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=72d78e6a93829703f64bd59f502410bebe64ae91", "patch": "@@ -51,7 +51,7 @@ const uint8_t SHAPE_VAR = 21u;\n \n struct rust_obj;\n struct size_align;\n-struct type_param;\n+class type_param;\n \n \n // Arenas; these functions must execute very quickly, so we use an arena\n@@ -215,10 +215,18 @@ struct rust_obj {\n \n // Type parameters\n \n-struct type_param {\n+class type_param {\n+private:\n+    static type_param *make(const type_desc **tydescs, unsigned n_tydescs,\n+                            arena &arena);\n+\n+public:\n     const uint8_t *shape;\n     const rust_shape_tables *tables;\n-    const struct type_param *params;    // subparameters\n+    const type_param *params;   // subparameters\n+\n+    // Creates type parameters from an object shape description.\n+    static type_param *from_obj_shape(const uint8_t *sp, arena &arena);\n \n     template<typename T>\n     inline void set(ctxt<T> *cx) {\n@@ -227,19 +235,10 @@ struct type_param {\n         params = cx->params;\n     }\n \n-    static type_param *make(const type_desc *tydesc, arena &arena) {\n-        uint32_t n_params = tydesc->n_params;\n-        if (!n_params)\n-            return NULL;\n-\n-        type_param *ptrs = arena.alloc<type_param>(n_params);\n-        for (uint32_t i = 0; i < n_params; i++) {\n-            const type_desc *subtydesc = tydesc->first_param[i];\n-            ptrs[i].shape = subtydesc->shape;\n-            ptrs[i].tables = subtydesc->shape_tables;\n-            ptrs[i].params = make(subtydesc, arena);\n-        }\n-        return ptrs;\n+    // Creates type parameters from a type descriptor.\n+    static inline type_param *from_tydesc(const type_desc *tydesc,\n+                                          arena &arena) {\n+        return make(tydesc->first_param, tydesc->n_params, arena);\n     }\n };\n \n@@ -483,6 +482,7 @@ class print : public ctxt<print> {\n     }\n };\n \n+\n //\n // Size-of (which also computes alignment). Be warned: this is an expensive\n // operation.\n@@ -892,12 +892,17 @@ data<T,U>::walk_obj_contents(bool align, ptr &dp) {\n     uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n     type_desc *subtydesc =\n         *reinterpret_cast<type_desc **>(box_ptr + sizeof(void *));\n-    ptr obj_closure_dp(box_ptr + sizeof(void *));\n+    ptr obj_closure_dp(*box_ptr + sizeof(void *));\n \n+    // FIXME: Should be type_param::from_obj_shape() below.\n     arena arena;\n-    type_param *params = type_param::make(subtydesc, arena);\n+    type_param *params = type_param::from_tydesc(subtydesc, arena);\n     T sub(*static_cast<T *>(this), subtydesc->shape, params,\n           subtydesc->shape_tables, obj_closure_dp);\n+\n+    print print(sub);\n+    print.walk(false);\n+\n     sub.walk(true);\n }\n "}]}