{"sha": "493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "node_id": "C_kwDOAAsO6NoAKDQ5M2NmMGM2NDM4ZDFiNTVhZTNlYmYyZDQwN2ZjNWU1ZThlNTY5OGU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-17T07:38:12Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-17T12:46:48Z"}, "message": "Bless ui tests", "tree": {"sha": "56e6face262799e9aa6cbeb0f89704b0a01b4a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56e6face262799e9aa6cbeb0f89704b0a01b4a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmG8hrgACgkQbQF6ltjm\nwvmKsg/7Bvm039WjjdWmX8uNh0z+HpnEN5/oawGA/NKs9ozDaOGMF545XLdf0Mo8\nTw45D6ddelz0+r/68/5ct86NkkyJz7DTWUCqDpu97aWTpTK0nLvMAigEvMjyiaLf\nR7tX8jzRJ22J6PZIGu968rjbBvCXAY/BF5ImZt/1S64ReDaNsJnK2LpMp0PIsMZx\nbrqw+85GFNSvI1vZqgyTTdKFaU2yzQk0NoBocZNBr/kJAR3rmJKtbjsTVWrau9HU\nCXXNUsE7Ni2y2bq0nGRDDITrnxMAvg6CzzFv1UE/fICbM8IqJs2vG33oBx/6NLaF\nBZJYUn9LXw72YVlsyXuvL9Ad4T3LpUUzfPB2/cIXZVp1h404SK7bR/TPRBHhvHYC\nKE10lSf98zYIxka4QYhoBNNbXkmrO02BKHfDpPRE1lohwisBMg6jEMo3lXPnfd6p\n3hOc5wKXInCRcPfKj7phcd3YOCbPblMdIW1IzkJwooTnPF36+Nq3/5yfXyT7P9XB\nsmfgDgifNDx2xPpq510s9nsDi9/oxt/9LXdxV7tHmlQtQQAnpRx0dwNpyY1GhFxi\nszCG+aXOzfi6VJiB1TZCNUq1udtlN81LYEgQAPeoxf7PdG0p010yptgZRIkEhPPG\nCDeo+WmHUCx0mgzJyDUoRih5ZXc/xdlaqol8Jx8/NqQ5HpYVTJI=\n=4pxA\n-----END PGP SIGNATURE-----", "payload": "tree 56e6face262799e9aa6cbeb0f89704b0a01b4a7c\nparent 2f555dec4a5e3eeaea31d991c0220c4260b794e5\nauthor Deadbeef <ent3rm4n@gmail.com> 1639726692 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1639745208 +0800\n\nBless ui tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "html_url": "https://github.com/rust-lang/rust/commit/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f555dec4a5e3eeaea31d991c0220c4260b794e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f555dec4a5e3eeaea31d991c0220c4260b794e5", "html_url": "https://github.com/rust-lang/rust/commit/2f555dec4a5e3eeaea31d991c0220c4260b794e5"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "7ffe3c1ef954ab6378d2c072698f6189be11a194", "filename": "src/test/ui/closures/closure-expected.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr?ref=493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "patch": "@@ -11,8 +11,8 @@ LL |     let y = x.or_else(4);\n note: required by a bound in `Option::<T>::or_else`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn or_else<F: FnOnce() -> Option<T>>(self, f: F) -> Option<T> {\n-   |                       ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::or_else`\n+LL |         F: ~const FnOnce() -> Option<T>,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::or_else`\n \n error: aborting due to previous error\n "}, {"sha": "883348eb98c708a100de973996c79043f4ca19d9", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "patch": "@@ -10,8 +10,8 @@ LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n-   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n+LL |         F: ~const FnOnce(T) -> U,\n+   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "9db9cfc7ff0244c8bc81bc09da01b2cc6cc86c22", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "patch": "@@ -23,8 +23,8 @@ LL | |     });\n note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn and_then<U, F: FnOnce(T) -> Option<U>>(self, f: F) -> Option<U> {\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::and_then`\n+LL |         F: ~const FnOnce(T) -> Option<U>,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::and_then`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d596b4a69f34a89c1c352dab236708feb6da91a4", "filename": "src/test/ui/issues/issue-47706-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr?ref=493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "patch": "@@ -11,8 +11,8 @@ LL |         None::<()>.map(Self::f);\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n-   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n+LL |         F: ~const FnOnce(T) -> U,\n+   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "0b4f84a330a548f3b2b371ca18f8d5f46c49e0b2", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "patch": "@@ -12,8 +12,8 @@ LL |         self.foo.map(Foo::new)\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n-   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n+LL |         F: ~const FnOnce(T) -> U,\n+   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9"}, {"sha": "3c9d0f72abe0c0f643e2c8c63555dd2de8873ce8", "filename": "src/test/ui/suggestions/as-ref-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr?ref=493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "patch": "@@ -11,8 +11,8 @@ LL |     let _y = foo;\n note: this function takes ownership of the receiver `self`, which moves `foo`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n-   |                                      ^^^^\n+LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n+   |                            ^^^^\n help: consider calling `.as_ref()` to borrow the type's contents\n    |\n LL |     let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));"}]}