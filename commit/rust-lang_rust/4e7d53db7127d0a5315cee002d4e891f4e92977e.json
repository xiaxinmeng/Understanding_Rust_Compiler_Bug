{"sha": "4e7d53db7127d0a5315cee002d4e891f4e92977e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlN2Q1M2RiNzEyN2QwYTUzMTVjZWUwMDJkNGU4OTFmNGU5Mjk3N2U=", "commit": {"author": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2018-12-24T15:52:03Z"}, "committer": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2018-12-24T15:52:03Z"}, "message": "Search codegen backends based on target libdir instead of sysroot.\n\nFixes cases with custom libdir when it consists of two or more parts.", "tree": {"sha": "dc8b71036499e06becbc1ed25145df4158322601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8b71036499e06becbc1ed25145df4158322601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e7d53db7127d0a5315cee002d4e891f4e92977e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQTv7q0NRmbSXocCXjKPunSz54tGdwUCXCEA6QAKCRCPunSz54tG\nd8CfAP9RF3wNtNBaRMTt5dnDFaJiJQWzPXlUVCtIa1IwCtI+eQEAuNHb6nn/R8IZ\naQxUUUfDYl42yNKsBcXk1hX6E68XzCU=\n=twCV\n-----END PGP SIGNATURE-----", "payload": "tree dc8b71036499e06becbc1ed25145df4158322601\nparent 94bf2c15eb3d072e92855a605783a29920df9e46\nauthor O01eg <o01eg@yandex.ru> 1545666723 +0300\ncommitter O01eg <o01eg@yandex.ru> 1545666723 +0300\n\nSearch codegen backends based on target libdir instead of sysroot.\n\nFixes cases with custom libdir when it consists of two or more parts.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d53db7127d0a5315cee002d4e891f4e92977e", "html_url": "https://github.com/rust-lang/rust/commit/4e7d53db7127d0a5315cee002d4e891f4e92977e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d53db7127d0a5315cee002d4e891f4e92977e/comments", "author": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94bf2c15eb3d072e92855a605783a29920df9e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/94bf2c15eb3d072e92855a605783a29920df9e46", "html_url": "https://github.com/rust-lang/rust/commit/94bf2c15eb3d072e92855a605783a29920df9e46"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "8c72869eb1259ca8eb4289adc01c6e8d86eb653b", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d53db7127d0a5315cee002d4e891f4e92977e/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d53db7127d0a5315cee002d4e891f4e92977e/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=4e7d53db7127d0a5315cee002d4e891f4e92977e", "patch": "@@ -124,6 +124,13 @@ pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n     sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }\n \n+pub fn target_lib_path(target_triple: &str) -> PathBuf {\n+    let mut p = PathBuf::from(RUST_LIB_DIR);\n+    p.push(target_triple);\n+    p.push(\"lib\");\n+    p\n+}\n+\n pub fn get_or_default_sysroot() -> PathBuf {\n     // Follow symlinks.  If the resolved path is relative, make it absolute.\n     fn canonicalize(path: Option<PathBuf>) -> Option<PathBuf> {"}, {"sha": "0f7e0eeaa8723ddd9d80af395425ed9818e884c4", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d53db7127d0a5315cee002d4e891f4e92977e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d53db7127d0a5315cee002d4e891f4e92977e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4e7d53db7127d0a5315cee002d4e891f4e92977e", "patch": "@@ -294,37 +294,35 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n     }\n \n     let target = session::config::host_triple();\n-    let mut sysroot_candidates = vec![filesearch::get_or_default_sysroot()];\n+    // get target libdir path based on executable binary path\n+    let sysroot = filesearch::get_or_default_sysroot();\n+    let mut libdir_candidates = vec![filesearch::make_target_lib_path(&sysroot, &target)];\n     let path = current_dll_path()\n         .and_then(|s| s.canonicalize().ok());\n     if let Some(dll) = path {\n-        // use `parent` twice to chop off the file name and then also the\n-        // directory containing the dll which should be either `lib` or `bin`.\n-        if let Some(path) = dll.parent().and_then(|p| p.parent()) {\n+        // use `parent` once to chop off the file name\n+        if let Some(path) = dll.parent() {\n             // The original `path` pointed at the `rustc_driver` crate's dll.\n             // Now that dll should only be in one of two locations. The first is\n-            // in the compiler's libdir, for example `$sysroot/lib/*.dll`. The\n+            // in the compiler's libdir, for example `$sysroot/$libdir/*.dll`. The\n             // other is the target's libdir, for example\n-            // `$sysroot/lib/rustlib/$target/lib/*.dll`.\n+            // `$sysroot/$libdir/rustlib/$target/lib/*.dll`.\n             //\n             // We don't know which, so let's assume that if our `path` above\n-            // ends in `$target` we *could* be in the target libdir, and always\n-            // assume that we may be in the main libdir.\n-            sysroot_candidates.push(path.to_owned());\n-\n-            if path.ends_with(target) {\n-                sysroot_candidates.extend(path.parent() // chop off `$target`\n-                    .and_then(|p| p.parent())           // chop off `rustlib`\n-                    .and_then(|p| p.parent())           // chop off `lib`\n-                    .map(|s| s.to_owned()));\n+            // doesn't end in `$target` we *could* be in the main libdir, and always\n+            // assume that we may be in the target libdir.\n+            libdir_candidates.push(path.to_owned());\n+\n+            if !path.parent().map_or(false, |p| p.ends_with(target)) {\n+                libdir_candidates.push(path.join(filesearch::target_lib_path(target)));\n             }\n         }\n     }\n \n-    let sysroot = sysroot_candidates.iter()\n-        .map(|sysroot| {\n-            let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n-            sysroot.join(libdir).with_file_name(\n+    let sysroot = libdir_candidates.iter()\n+        .map(|libdir| {\n+            debug!(\"Trying target libdir: {}\", libdir.display());\n+            libdir.with_file_name(\n                 option_env!(\"CFG_CODEGEN_BACKENDS_DIR\").unwrap_or(\"codegen-backends\"))\n         })\n         .filter(|f| {\n@@ -333,12 +331,12 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n         })\n         .next();\n     let sysroot = sysroot.unwrap_or_else(|| {\n-        let candidates = sysroot_candidates.iter()\n+        let candidates = libdir_candidates.iter()\n             .map(|p| p.display().to_string())\n             .collect::<Vec<_>>()\n             .join(\"\\n* \");\n         let err = format!(\"failed to find a `codegen-backends` folder \\\n-                           in the sysroot candidates:\\n* {}\", candidates);\n+                           in the libdir candidates:\\n* {}\", candidates);\n         early_error(ErrorOutputType::default(), &err);\n     });\n     info!(\"probing {} for a codegen backend\", sysroot.display());"}]}