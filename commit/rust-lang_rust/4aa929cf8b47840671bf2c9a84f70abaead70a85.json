{"sha": "4aa929cf8b47840671bf2c9a84f70abaead70a85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYTkyOWNmOGI0Nzg0MDY3MWJmMmM5YTg0ZjcwYWJhZWFkNzBhODU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-12T19:16:25Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Move witnesses inside push_wild_constructor", "tree": {"sha": "5e20ddbdd5e22729d27e8087f0caeea597457e8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e20ddbdd5e22729d27e8087f0caeea597457e8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa929cf8b47840671bf2c9a84f70abaead70a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa929cf8b47840671bf2c9a84f70abaead70a85", "html_url": "https://github.com/rust-lang/rust/commit/4aa929cf8b47840671bf2c9a84f70abaead70a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa929cf8b47840671bf2c9a84f70abaead70a85/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d", "html_url": "https://github.com/rust-lang/rust/commit/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d"}], "stats": {"total": 90, "additions": 41, "deletions": 49}, "files": [{"sha": "065fbeda15360bf489b3f211d20a848667d59af2", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 41, "deletions": 49, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4aa929cf8b47840671bf2c9a84f70abaead70a85/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa929cf8b47840671bf2c9a84f70abaead70a85/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=4aa929cf8b47840671bf2c9a84f70abaead70a85", "patch": "@@ -351,15 +351,38 @@ impl<'tcx> Witness<'tcx> {\n         ty: Ty<'tcx>)\n         -> Self\n     {\n-        let sub_pattern_tys = constructor_sub_pattern_tys(cx, ctor, ty);\n-        self.0.extend(sub_pattern_tys.into_iter().map(|ty| {\n-            Pattern {\n-                ty,\n-                span: DUMMY_SP,\n-                kind: box PatternKind::Wild,\n+        // If we've been trying to exhaustively match over the domain of values for a type,\n+        // then we can construct witnesses directly corresponding to the missing ranges of values,\n+        // giving far more precise diagnostics.\n+        // `ConstantValue` and `ConstantRange` only occur in practice when doing exhaustive value\n+        // matching (exhaustive_integer_patterns).\n+        match ctor {\n+            ConstantValue(value) => {\n+                Witness(vec![Pattern {\n+                    ty,\n+                    span: DUMMY_SP,\n+                    kind: box PatternKind::Constant { value },\n+                }])\n+            }\n+            ConstantRange(lo, hi, end) => {\n+                Witness(vec![Pattern {\n+                    ty,\n+                    span: DUMMY_SP,\n+                    kind: box PatternKind::Range { lo, hi, end: *end },\n+                }])\n             }\n-        }));\n-        self.apply_constructor(cx, ctor, ty)\n+            _ => {\n+                let sub_pattern_tys = constructor_sub_pattern_tys(cx, ctor, ty);\n+                self.0.extend(sub_pattern_tys.into_iter().map(|ty| {\n+                    Pattern {\n+                        ty,\n+                        span: DUMMY_SP,\n+                        kind: box PatternKind::Wild,\n+                    }\n+                }));\n+                self.apply_constructor(cx, ctor, ty)\n+            }\n+        }\n     }\n \n \n@@ -976,7 +999,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                     // `used_ctors` is empty.\n                     let new_witnesses = if is_non_exhaustive || used_ctors.is_empty() {\n                         // All constructors are unused. Add wild patterns\n-                        // rather than each individual constructor\n+                        // rather than each individual constructor.\n                         pats.into_iter().map(|mut witness| {\n                             witness.0.push(Pattern {\n                                 ty: pcx.ty,\n@@ -986,46 +1009,15 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                             witness\n                         }).collect()\n                     } else {\n-                        if consider_value_constructors {\n-                            // If we've been trying to exhaustively match\n-                            // over the domain of values for a type,\n-                            // then we can provide better diagnostics\n-                            // regarding which values were missing.\n-                            missing_ctors.into_iter().map(|ctor| {\n-                                match ctor {\n-                                    // A constant range of length 1 is simply\n-                                    // a constant value.\n-                                    ConstantValue(value) => {\n-                                        Witness(vec![Pattern {\n-                                            ty: pcx.ty,\n-                                            span: DUMMY_SP,\n-                                            kind: box PatternKind::Constant { value },\n-                                        }])\n-                                    }\n-                                    // We always report missing intervals\n-                                    // in terms of inclusive ranges.\n-                                    ConstantRange(lo, hi, end) => {\n-                                        Witness(vec![Pattern {\n-                                            ty: pcx.ty,\n-                                            span: DUMMY_SP,\n-                                            kind: box PatternKind::Range { lo, hi, end },\n-                                        }])\n-                                    },\n-                                    _ => bug!(\"`ranges_subtract_pattern` should only produce \\\n-                                               `ConstantRange`s\"),\n-                                }\n-                            }).collect()\n-                        } else {\n-                            pats.into_iter().flat_map(|witness| {\n-                                missing_ctors.iter().map(move |ctor| {\n-                                    // Extends the witness with a \"wild\" version of this\n-                                    // constructor, that matches everything that can be built with\n-                                    // it. For example, if `ctor` is a `Constructor::Variant` for\n-                                    // `Option::Some`, this pushes the witness for `Some(_)`.\n-                                    witness.clone().push_wild_constructor(cx, ctor, pcx.ty)\n-                                })\n-                            }).collect()\n-                        }\n+                        pats.into_iter().flat_map(|witness| {\n+                            missing_ctors.iter().map(move |ctor| {\n+                                // Extends the witness with a \"wild\" version of this\n+                                // constructor, that matches everything that can be built with\n+                                // it. For example, if `ctor` is a `Constructor::Variant` for\n+                                // `Option::Some`, this pushes the witness for `Some(_)`.\n+                                witness.clone().push_wild_constructor(cx, ctor, pcx.ty)\n+                            })\n+                        }).collect()\n                     };\n                     UsefulWithWitness(new_witnesses)\n                 }"}]}