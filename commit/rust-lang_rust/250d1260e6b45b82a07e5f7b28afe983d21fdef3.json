{"sha": "250d1260e6b45b82a07e5f7b28afe983d21fdef3", "node_id": "C_kwDOAAsO6NoAKDI1MGQxMjYwZTZiNDViODJhMDdlNWY3YjI4YWZlOTgzZDIxZmRlZjM", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-10-02T11:00:36Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-10-03T04:36:40Z"}, "message": "Add `deref_into_dyn_supertrait` lint.", "tree": {"sha": "45a8ec93090603d50e41fe05332d26f70cabf8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a8ec93090603d50e41fe05332d26f70cabf8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250d1260e6b45b82a07e5f7b28afe983d21fdef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250d1260e6b45b82a07e5f7b28afe983d21fdef3", "html_url": "https://github.com/rust-lang/rust/commit/250d1260e6b45b82a07e5f7b28afe983d21fdef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250d1260e6b45b82a07e5f7b28afe983d21fdef3/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e1211081239be62a5d0bb3bbcb29a9f14621c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1211081239be62a5d0bb3bbcb29a9f14621c81", "html_url": "https://github.com/rust-lang/rust/commit/6e1211081239be62a5d0bb3bbcb29a9f14621c81"}], "stats": {"total": 169, "additions": 168, "deletions": 1}, "files": [{"sha": "44dabad28ee7b093caa166dcc1533ec93425a711", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/250d1260e6b45b82a07e5f7b28afe983d21fdef3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/250d1260e6b45b82a07e5f7b28afe983d21fdef3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=250d1260e6b45b82a07e5f7b28afe983d21fdef3", "patch": "@@ -4457,6 +4457,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n+ \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_parse_format\","}, {"sha": "afe71fa45582baa895670de9061d559f3951083f", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/250d1260e6b45b82a07e5f7b28afe983d21fdef3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250d1260e6b45b82a07e5f7b28afe983d21fdef3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=250d1260e6b45b82a07e5f7b28afe983d21fdef3", "patch": "@@ -3050,6 +3050,7 @@ declare_lint_pass! {\n         BREAK_WITH_LABEL_AND_LOOP,\n         UNUSED_ATTRIBUTES,\n         NON_EXHAUSTIVE_OMITTED_PATTERNS,\n+        DEREF_INTO_DYN_SUPERTRAIT,\n     ]\n }\n \n@@ -3511,3 +3512,48 @@ declare_lint! {\n     Allow,\n     \"detect when patterns of types marked `non_exhaustive` are missed\",\n }\n+\n+declare_lint! {\n+    /// The `deref_into_dyn_supertrait` lint is output whenever there is a use of the\n+    /// `Deref` implementation with a `dyn SuperTrait` type as `Output`.\n+    ///\n+    /// These implementations will become shadowed when the `trait_upcasting` feature is stablized.\n+    /// The `deref` functions will no longer be called implicitly, so there might be behavior change.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(deref_into_dyn_supertrait)]\n+    /// #![allow(dead_code)]\n+    ///\n+    /// use core::ops::Deref;\n+    ///\n+    /// trait A {}\n+    /// trait B: A {}\n+    /// impl<'a> Deref for dyn 'a + B {\n+    ///     type Target = dyn A;\n+    ///     fn deref(&self) -> &Self::Target {\n+    ///         todo!()\n+    ///     }\n+    /// }\n+    ///\n+    /// fn take_a(_: &dyn A) { }\n+    ///\n+    /// fn take_b(b: &dyn B) {\n+    ///     take_a(b);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The dyn upcasting coercion feature adds new coercion rules, taking priority\n+    /// over certain other coercion rules, which will cause some behavior change.\n+    pub DEREF_INTO_DYN_SUPERTRAIT,\n+    Warn,\n+    \"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n+    };\n+}"}, {"sha": "27cd5c2acace4a8913cacbc3191b436f1402f63f", "filename": "compiler/rustc_trait_selection/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/250d1260e6b45b82a07e5f7b28afe983d21fdef3/compiler%2Frustc_trait_selection%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/250d1260e6b45b82a07e5f7b28afe983d21fdef3/compiler%2Frustc_trait_selection%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2FCargo.toml?ref=250d1260e6b45b82a07e5f7b28afe983d21fdef3", "patch": "@@ -17,6 +17,7 @@ rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n+rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "f3706aa6e71aab4bb639373a6ee9c3fcdb73eb5a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/250d1260e6b45b82a07e5f7b28afe983d21fdef3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250d1260e6b45b82a07e5f7b28afe983d21fdef3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=250d1260e6b45b82a07e5f7b28afe983d21fdef3", "patch": "@@ -6,12 +6,17 @@\n //!\n //! [rustc dev guide]:https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+use rustc_infer::traits::TraitEngine;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n+use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_target::spec::abi::Abi;\n \n+use crate::traits;\n use crate::traits::coherence::Conflict;\n+use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{util, SelectionResult};\n use crate::traits::{Overflow, Unimplemented};\n \n@@ -672,6 +677,55 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         })\n     }\n \n+    /// Temporary migration for #89190\n+    fn need_migrate_deref_output_trait_object(\n+        &mut self,\n+        ty: Ty<'tcx>,\n+        cause: &traits::ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Option<(Ty<'tcx>, DefId)> {\n+        let tcx = self.tcx();\n+        if tcx.features().trait_upcasting {\n+            return None;\n+        }\n+\n+        // <ty as Deref>\n+        let trait_ref = ty::TraitRef {\n+            def_id: tcx.lang_items().deref_trait()?,\n+            substs: tcx.mk_substs_trait(ty, &[]),\n+        };\n+\n+        let obligation = traits::Obligation::new(\n+            cause.clone(),\n+            param_env,\n+            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n+        );\n+        if !self.infcx.predicate_may_hold(&obligation) {\n+            return None;\n+        }\n+\n+        let mut fulfillcx = traits::FulfillmentContext::new_in_snapshot();\n+        let normalized_ty = fulfillcx.normalize_projection_type(\n+            &self.infcx,\n+            param_env,\n+            ty::ProjectionTy {\n+                item_def_id: tcx.lang_items().deref_target()?,\n+                substs: trait_ref.substs,\n+            },\n+            cause.clone(),\n+        );\n+\n+        let data = if let ty::Dynamic(ref data, ..) = normalized_ty.kind() {\n+            data\n+        } else {\n+            return None;\n+        };\n+\n+        let def_id = data.principal_def_id()?;\n+\n+        return Some((normalized_ty, def_id));\n+    }\n+\n     /// Searches for unsizing that might apply to `obligation`.\n     fn assemble_candidates_for_unsizing(\n         &mut self,\n@@ -732,6 +786,30 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let principal_a = data_a.principal().unwrap();\n                         let target_trait_did = principal_def_id_b.unwrap();\n                         let source_trait_ref = principal_a.with_self_ty(self.tcx(), source);\n+                        if let Some((deref_output_ty, deref_output_trait_did)) = self\n+                            .need_migrate_deref_output_trait_object(\n+                                source,\n+                                &obligation.cause,\n+                                obligation.param_env,\n+                            )\n+                        {\n+                            if deref_output_trait_did == target_trait_did {\n+                                self.tcx().struct_span_lint_hir(\n+                                    DEREF_INTO_DYN_SUPERTRAIT,\n+                                    obligation.cause.body_id,\n+                                    obligation.cause.span,\n+                                    |lint| {\n+                                        lint.build(&format!(\n+                                            \"`{}` implements `Deref` with supertrait `{}` as output\",\n+                                            source,\n+                                            deref_output_ty\n+                                        )).emit();\n+                                    },\n+                                );\n+                                return;\n+                            }\n+                        }\n+\n                         for (idx, upcast_trait_ref) in\n                             util::supertraits(self.tcx(), source_trait_ref).enumerate()\n                         {"}, {"sha": "c6725101858eb39464458ffc1ad0f8f670d9cfd5", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/250d1260e6b45b82a07e5f7b28afe983d21fdef3/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250d1260e6b45b82a07e5f7b28afe983d21fdef3/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs?ref=250d1260e6b45b82a07e5f7b28afe983d21fdef3", "patch": "@@ -0,0 +1,25 @@\n+#![deny(deref_into_dyn_supertrait)]\n+\n+extern crate core;\n+\n+use core::ops::Deref;\n+\n+// issue 89190\n+trait A {}\n+trait B: A {}\n+impl<'a> Deref for dyn 'a + B {\n+    type Target = dyn A;\n+    fn deref(&self) -> &Self::Target {\n+        todo!()\n+    }\n+}\n+\n+fn take_a(_: &dyn A) {}\n+\n+fn whoops(b: &dyn B) {\n+    take_a(b)\n+    //~^ ERROR `dyn B` implements `Deref` with supertrait `(dyn A + 'static)` as output\n+    //~^^ WARN this was previously accepted by the compiler but is being phased out;\n+}\n+\n+fn main() {}"}, {"sha": "35af9112a27fc4ccce329f9f4be134342e38599f", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/250d1260e6b45b82a07e5f7b28afe983d21fdef3/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/250d1260e6b45b82a07e5f7b28afe983d21fdef3/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr?ref=250d1260e6b45b82a07e5f7b28afe983d21fdef3", "patch": "@@ -0,0 +1,16 @@\n+error: `dyn B` implements `Deref` with supertrait `(dyn A + 'static)` as output\n+  --> $DIR/migrate-lint-deny.rs:20:12\n+   |\n+LL |     take_a(b)\n+   |            ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/migrate-lint-deny.rs:1:9\n+   |\n+LL | #![deny(deref_into_dyn_supertrait)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #89460 <https://github.com/rust-lang/rust/issues/89460>\n+\n+error: aborting due to previous error\n+"}]}