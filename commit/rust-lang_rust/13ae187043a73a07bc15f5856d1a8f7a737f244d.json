{"sha": "13ae187043a73a07bc15f5856d1a8f7a737f244d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYWUxODcwNDNhNzNhMDdiYzE1ZjU4NTZkMWE4ZjdhNzM3ZjI0NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-10T02:54:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-10T02:54:14Z"}, "message": "Auto merge of #44822 - frewsxcv:frewsxcv-eprintln, r=Kimundi\n\nMigrate to eprint/eprintln macros where appropriate.\n\nNone", "tree": {"sha": "dc7ec854191982310f19f373f4a5588ebc4ad90b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7ec854191982310f19f373f4a5588ebc4ad90b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ae187043a73a07bc15f5856d1a8f7a737f244d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ae187043a73a07bc15f5856d1a8f7a737f244d", "html_url": "https://github.com/rust-lang/rust/commit/13ae187043a73a07bc15f5856d1a8f7a737f244d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ae187043a73a07bc15f5856d1a8f7a737f244d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692b94ae25e0ae7d74cf15a5800e10a16239dab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/692b94ae25e0ae7d74cf15a5800e10a16239dab1", "html_url": "https://github.com/rust-lang/rust/commit/692b94ae25e0ae7d74cf15a5800e10a16239dab1"}, {"sha": "8ef54478157adb980598104af0ce571cb6637931", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef54478157adb980598104af0ce571cb6637931", "html_url": "https://github.com/rust-lang/rust/commit/8ef54478157adb980598104af0ce571cb6637931"}], "stats": {"total": 94, "additions": 30, "deletions": 64}, "files": [{"sha": "54a3dbafe272aac09a7e8a0af2c84d143b4be412", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -31,8 +31,6 @@ extern crate bootstrap;\n \n use std::env;\n use std::ffi::OsString;\n-use std::io;\n-use std::io::prelude::*;\n use std::str::FromStr;\n use std::path::PathBuf;\n use std::process::{Command, ExitStatus};\n@@ -270,7 +268,7 @@ fn main() {\n     }\n \n     if verbose > 1 {\n-        writeln!(&mut io::stderr(), \"rustc command: {:?}\", cmd).unwrap();\n+        eprintln!(\"rustc command: {:?}\", cmd);\n     }\n \n     // Actually run the compiler!"}, {"sha": "cd21060aff652ad343a08bb35fa22c1dc31d2d87", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -1238,7 +1238,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                              errors::Level::Note);\n             }\n \n-            writeln!(io::stderr(), \"{}\", str::from_utf8(&data.lock().unwrap()).unwrap()).unwrap();\n+            eprintln!(\"{}\", str::from_utf8(&data.lock().unwrap()).unwrap());\n         }\n \n         exit_on_err();"}, {"sha": "2f7bd5e39a14927aad28c8988b82ae497e66680f", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -10,7 +10,6 @@\n \n use std::fs::File;\n use std::io::prelude::*;\n-use std::io;\n use std::path::Path;\n use std::str;\n use html::markdown::{Markdown, RenderType};\n@@ -70,17 +69,13 @@ pub fn load_string<P: AsRef<Path>>(file_path: P) -> Result<String, LoadStringErr\n     let result = File::open(file_path)\n                       .and_then(|mut f| f.read_to_end(&mut contents));\n     if let Err(e) = result {\n-        let _ = writeln!(&mut io::stderr(),\n-                         \"error reading `{}`: {}\",\n-                         file_path.display(), e);\n+        eprintln!(\"error reading `{}`: {}\", file_path.display(), e);\n         return Err(LoadStringError::ReadFail);\n     }\n     match str::from_utf8(&contents) {\n         Ok(s) => Ok(s.to_string()),\n         Err(_) => {\n-            let _ = writeln!(&mut io::stderr(),\n-                             \"error reading `{}`: not UTF-8\",\n-                             file_path.display());\n+            eprintln!(\"error reading `{}`: not UTF-8\", file_path.display());\n             Err(LoadStringError::BadUtf8)\n         }\n     }"}, {"sha": "484285e91f6e9093564c7b85b06f1fa1d3a225c1", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -11,7 +11,6 @@\n use std::default::Default;\n use std::fs::File;\n use std::io::prelude::*;\n-use std::io;\n use std::path::{PathBuf, Path};\n \n use getopts;\n@@ -75,20 +74,15 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n \n     let mut out = match File::create(&output) {\n         Err(e) => {\n-            let _ = writeln!(&mut io::stderr(),\n-                             \"rustdoc: {}: {}\",\n-                             output.display(), e);\n+            eprintln!(\"rustdoc: {}: {}\", output.display(), e);\n             return 4;\n         }\n         Ok(f) => f\n     };\n \n     let (metadata, text) = extract_leading_metadata(&input_str);\n     if metadata.is_empty() {\n-        let _ = writeln!(\n-            &mut io::stderr(),\n-            \"rustdoc: invalid markdown file: no initial lines starting with `# ` or `%`\"\n-        );\n+        eprintln!(\"rustdoc: invalid markdown file: no initial lines starting with `# ` or `%`\");\n         return 5;\n     }\n     let title = metadata[0];\n@@ -138,9 +132,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n \n     match err {\n         Err(e) => {\n-            let _ = writeln!(&mut io::stderr(),\n-                             \"rustdoc: cannot write to `{}`: {}\",\n-                             output.display(), e);\n+            eprintln!(\"rustdoc: cannot write to `{}`: {}\", output.display(), e);\n             6\n         }\n         Ok(_) => 0"}, {"sha": "09565dd7664c2f98872634231a5dbca9f867b679", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -495,11 +495,10 @@ impl Collector {\n                 found = entry.remove_item(&test).is_some();\n             }\n             if !found {\n-                let _ = writeln!(&mut io::stderr(),\n-                                 \"WARNING: {} Code block is not currently run as a test, but will \\\n-                                  in future versions of rustdoc. Please ensure this code block is \\\n-                                  a runnable test, or use the `ignore` directive.\",\n-                                 name);\n+                eprintln!(\"WARNING: {} Code block is not currently run as a test, but will \\\n+                           in future versions of rustdoc. Please ensure this code block is \\\n+                           a runnable test, or use the `ignore` directive.\",\n+                          name);\n                 return\n             }\n         }"}, {"sha": "c506768b18b19bb6d6aa385e8d678173476e3fb8", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -1083,8 +1083,6 @@ impl Child {\n /// function and compute the exit code from its return value:\n ///\n /// ```\n-/// use std::io::{self, Write};\n-///\n /// fn run_app() -> Result<(), ()> {\n ///     // Application logic here\n ///     Ok(())\n@@ -1094,7 +1092,7 @@ impl Child {\n ///     ::std::process::exit(match run_app() {\n ///        Ok(_) => 0,\n ///        Err(err) => {\n-///            writeln!(io::stderr(), \"error: {:?}\", err).unwrap();\n+///            eprintln!(\"error: {:?}\", err);\n ///            1\n ///        }\n ///     });"}, {"sha": "51191dd7087e483e3f9ae7eabdfe067bbfc83a72", "filename": "src/test/run-fail/mir_drop_panics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -10,15 +10,14 @@\n \n // error-pattern:panic 1\n // error-pattern:drop 2\n-use std::io::{self, Write};\n \n struct Droppable(u32);\n impl Drop for Droppable {\n     fn drop(&mut self) {\n         if self.0 == 1 {\n             panic!(\"panic 1\");\n         } else {\n-            write!(io::stderr(), \"drop {}\", self.0);\n+            eprint!(\"drop {}\", self.0);\n         }\n     }\n }"}, {"sha": "69f934272b75cd72a8ffe701ddbdc324ae6b7a98", "filename": "src/test/run-fail/mir_dynamic_drops_1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -9,18 +9,17 @@\n // except according to those terms.\n // error-pattern:drop 1\n // error-pattern:drop 2\n-use std::io::{self, Write};\n \n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);\n impl<'a> Drop for Droppable<'a> {\n     fn drop(&mut self) {\n         if *self.0 {\n-            writeln!(io::stderr(), \"{} dropped twice\", self.1);\n+            eprintln!(\"{} dropped twice\", self.1);\n             ::std::process::exit(1);\n         }\n-        writeln!(io::stderr(), \"drop {}\", self.1);\n+        eprintln!(\"drop {}\", self.1);\n         *self.0 = true;\n     }\n }"}, {"sha": "d2fe50401ab8de4a6da8dc44169f13dac44fe103", "filename": "src/test/run-fail/mir_dynamic_drops_2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -9,18 +9,17 @@\n // except according to those terms.\n \n // error-pattern:drop 1\n-use std::io::{self, Write};\n \n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);\n impl<'a> Drop for Droppable<'a> {\n     fn drop(&mut self) {\n         if *self.0 {\n-            writeln!(io::stderr(), \"{} dropped twice\", self.1);\n+            eprintln!(\"{} dropped twice\", self.1);\n             ::std::process::exit(1);\n         }\n-        writeln!(io::stderr(), \"drop {}\", self.1);\n+        eprintln!(\"drop {}\", self.1);\n         *self.0 = true;\n     }\n }"}, {"sha": "ecc35ee9b2409545c814ab498e730ab9b03556be", "filename": "src/test/run-fail/mir_dynamic_drops_3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -12,18 +12,17 @@\n // error-pattern:drop 3\n // error-pattern:drop 2\n // error-pattern:drop 1\n-use std::io::{self, Write};\n \n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);\n impl<'a> Drop for Droppable<'a> {\n     fn drop(&mut self) {\n         if *self.0 {\n-            writeln!(io::stderr(), \"{} dropped twice\", self.1);\n+            eprintln!(\"{} dropped twice\", self.1);\n             ::std::process::exit(1);\n         }\n-        writeln!(io::stderr(), \"drop {}\", self.1);\n+        eprintln!(\"drop {}\", self.1);\n         *self.0 = true;\n     }\n }"}, {"sha": "9c851eb7346bb295bedfc10fc41fb88980d52cfd", "filename": "src/test/run-fail/mir_trans_calls_converging_drops.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -12,17 +12,15 @@\n // error-pattern:0 dropped\n // error-pattern:exit\n \n-use std::io::{self, Write};\n-\n struct Droppable(u8);\n impl Drop for Droppable {\n     fn drop(&mut self) {\n-        write!(io::stderr(), \"{} dropped\\n\", self.0);\n+        eprintln!(\"{} dropped\", self.0);\n     }\n }\n \n fn converging_fn() {\n-    write!(io::stderr(), \"converging_fn called\\n\");\n+    eprintln!(\"converging_fn called\");\n }\n \n fn mir(d: Droppable) {"}, {"sha": "6f10521155648a8e83fe5f34caa721d34e9191ed", "filename": "src/test/run-fail/mir_trans_calls_converging_drops_2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -12,18 +12,16 @@\n // error-pattern:dropped\n // error-pattern:exit\n \n-use std::io::{self, Write};\n-\n struct Droppable;\n impl Drop for Droppable {\n     fn drop(&mut self) {\n-        write!(io::stderr(), \"dropped\\n\");\n+        eprintln!(\"dropped\");\n     }\n }\n \n // return value of this function is copied into the return slot\n fn complex() -> u64 {\n-    write!(io::stderr(), \"complex called\\n\");\n+    eprintln!(\"complex called\");\n     42\n }\n "}, {"sha": "f8fbe8f79cc622bd8068a4c00d2e056354019898", "filename": "src/test/run-fail/mir_trans_calls_diverging_drops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -11,12 +11,10 @@\n // error-pattern:diverging_fn called\n // error-pattern:0 dropped\n \n-use std::io::{self, Write};\n-\n struct Droppable(u8);\n impl Drop for Droppable {\n     fn drop(&mut self) {\n-        write!(io::stderr(), \"{} dropped\", self.0);\n+        eprintln!(\"{} dropped\", self.0);\n     }\n }\n "}, {"sha": "68f1c4ed0bceddc17d52ac9b413d64c95fb1bc96", "filename": "src/test/run-fail/panic-set-handler.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -13,11 +13,10 @@\n #![feature(panic_handler)]\n \n use std::panic;\n-use std::io::{self, Write};\n \n fn main() {\n     panic::set_hook(Box::new(|i| {\n-        write!(io::stderr(), \"greetings from the panic handler\");\n+        eprint!(\"greetings from the panic handler\");\n     }));\n     panic!(\"foobar\");\n }"}, {"sha": "072139a8c9b802c8fe653c82ef1a0f06cade2537", "filename": "src/test/run-fail/panic-set-unset-handler.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -13,11 +13,10 @@\n #![feature(panic_handler)]\n \n use std::panic;\n-use std::io::{self, Write};\n \n fn main() {\n     panic::set_hook(Box::new(|i| {\n-        write!(io::stderr(), \"greetings from the panic handler\");\n+        eprint!(\"greetings from the panic handler\");\n     }));\n     panic::take_hook();\n     panic!(\"foobar\");"}, {"sha": "f9233026a1e6e2628a841faf01aec2f14c5607ce", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -19,8 +19,6 @@\n // ignore-pretty issue #37195\n // ignore-emscripten spawning processes is not supported\n \n-use std::io;\n-use std::io::prelude::*;\n use std::env;\n \n #[path = \"backtrace-debuginfo-aux.rs\"] mod aux;\n@@ -163,7 +161,7 @@ fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 {\n         let case = args[1].parse().unwrap();\n-        writeln!(&mut io::stderr(), \"test case {}\", case).unwrap();\n+        eprintln!(\"test case {}\", case);\n         outer(case, pos!());\n         println!(\"done.\");\n     } else {"}, {"sha": "c316ec467620a468d138785d74faf5108c8cabd7", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -33,10 +33,9 @@ macro_rules! t {\n \n macro_rules! tidy_error {\n     ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n-        use std::io::Write;\n         *$bad = true;\n-        write!(::std::io::stderr(), \"tidy error: \").expect(\"could not write to stderr\");\n-        writeln!(::std::io::stderr(), $fmt, $($arg)*).expect(\"could not write to stderr\");\n+        eprint!(\"tidy error: \");\n+        eprintln!($fmt, $($arg)*);\n     });\n }\n "}, {"sha": "f6640c902bcb47e798debf9e23518d4256669514", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ae187043a73a07bc15f5856d1a8f7a737f244d/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=13ae187043a73a07bc15f5856d1a8f7a737f244d", "patch": "@@ -22,7 +22,6 @@ use tidy::*;\n use std::process;\n use std::path::PathBuf;\n use std::env;\n-use std::io::{self, Write};\n \n fn main() {\n     let path = env::args_os().skip(1).next().expect(\"need an argument\");\n@@ -44,7 +43,7 @@ fn main() {\n     }\n \n     if bad {\n-        writeln!(io::stderr(), \"some tidy checks failed\").expect(\"could not write to stderr\");\n+        eprintln!(\"some tidy checks failed\");\n         process::exit(1);\n     }\n }"}]}