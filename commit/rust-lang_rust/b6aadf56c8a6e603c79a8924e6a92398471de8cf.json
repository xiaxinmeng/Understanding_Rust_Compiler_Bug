{"sha": "b6aadf56c8a6e603c79a8924e6a92398471de8cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YWFkZjU2YzhhNmU2MDNjNzlhODkyNGU2YTkyMzk4NDcxZGU4Y2Y=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-27T20:03:04Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-27T20:35:17Z"}, "message": "In resolve, check for duplicate pattern-bound vars\n\nCloses #3038", "tree": {"sha": "e5e3dd0bd80b520fae6620cdbe76954247b69ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e3dd0bd80b520fae6620cdbe76954247b69ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6aadf56c8a6e603c79a8924e6a92398471de8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6aadf56c8a6e603c79a8924e6a92398471de8cf", "html_url": "https://github.com/rust-lang/rust/commit/b6aadf56c8a6e603c79a8924e6a92398471de8cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6aadf56c8a6e603c79a8924e6a92398471de8cf/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "url": "https://api.github.com/repos/rust-lang/rust/commits/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535", "html_url": "https://github.com/rust-lang/rust/commit/300f54ebc0aaecb05cf4b7efd5bc17d326ec9535"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "f4794bd39e478bbbee4387fa049038e8504efbb1", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b6aadf56c8a6e603c79a8924e6a92398471de8cf/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6aadf56c8a6e603c79a8924e6a92398471de8cf/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=b6aadf56c8a6e603c79a8924e6a92398471de8cf", "patch": "@@ -32,7 +32,7 @@ import syntax::ast::{required, provided};\n import syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n import syntax::ast_util::{walk_pat};\n import syntax::attr::{attr_metas, contains_name};\n-import syntax::print::pprust::path_to_str;\n+import syntax::print::pprust::{pat_to_str, path_to_str};\n import syntax::codemap::span;\n import syntax::visit::{default_visitor, fk_method, mk_vt, visit_block};\n import syntax::visit::{visit_crate, visit_expr, visit_expr_opt, visit_fn};\n@@ -3658,9 +3658,12 @@ class Resolver {\n     fn resolve_pattern(pattern: @pat,\n                        mode: PatternBindingMode,\n                        mutability: Mutability,\n-                       bindings_list: option<hashmap<Atom,()>>,\n+                       // Maps idents to the node ID for the (outermost)\n+                       // pattern that binds them\n+                       bindings_list: option<hashmap<Atom,node_id>>,\n                        visitor: ResolveVisitor) {\n \n+        let pat_id = pattern.id;\n         do walk_pat(pattern) |pattern| {\n             alt pattern.node {\n                 pat_ident(path, _)\n@@ -3705,19 +3708,18 @@ class Resolver {\n \n                             let is_mutable = mutability == Mutable;\n \n-                            let mut def;\n-                            alt mode {\n+                            let def = alt mode {\n                                 RefutableMode {\n                                     // For pattern arms, we must use\n                                     // `def_binding` definitions.\n \n-                                    def = def_binding(pattern.id);\n+                                    def_binding(pattern.id)\n                                 }\n                                 IrrefutableMode {\n                                     // But for locals, we use `def_local`.\n-                                    def = def_local(pattern.id, is_mutable);\n+                                    def_local(pattern.id, is_mutable)\n                                 }\n-                            }\n+                            };\n \n                             // Record the definition so that later passes\n                             // will be able to distinguish variants from\n@@ -3737,10 +3739,19 @@ class Resolver {\n                                     let last_rib = (*self.value_ribs).last();\n                                     last_rib.bindings.insert(atom,\n                                                              dl_def(def));\n-                                    bindings_list.insert(atom, ());\n+                                    bindings_list.insert(atom, pat_id);\n                                 }\n-                                some(_) {\n-                                    // Do nothing.\n+                                some(b) {\n+                                  if b.find(atom) == some(pat_id) {\n+                                      // Then this is a duplicate variable\n+                                      // in the same disjunct, which is an\n+                                      // error\n+                                     self.session.span_err(pattern.span,\n+                                       #fmt(\"Identifier %s is bound more \\\n+                                             than once in the same pattern\",\n+                                            path_to_str(path)));\n+                                  }\n+                                  // Not bound in the same pattern: do nothing\n                                 }\n                                 none {\n                                     let last_rib = (*self.value_ribs).last();"}, {"sha": "0728dca2e8b3f8c56623298379f81be36b1659e4", "filename": "src/test/compile-fail/issue-3038.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b6aadf56c8a6e603c79a8924e6a92398471de8cf/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6aadf56c8a6e603c79a8924e6a92398471de8cf/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=b6aadf56c8a6e603c79a8924e6a92398471de8cf", "patch": "@@ -0,0 +1,25 @@\n+enum f { g(int, int) }\n+\n+enum h { i(j, k) }\n+\n+enum j { l(int, int) }\n+enum k { m(int, int) }\n+\n+fn main()\n+{\n+\n+    let _z = alt g(1, 2) {\n+      g(x, x) { log(debug, x + x); }\n+      //~^ ERROR Identifier x is bound more than once in the same pattern\n+    };\n+\n+    let _z = alt i(l(1, 2), m(3, 4)) {\n+      i(l(x, _), m(_, x))  //~ ERROR Identifier x is bound more than once in the same pattern\n+        { log(error, x + x); }\n+    };\n+\n+    let _z = alt (1, 2) {\n+        (x, x) { x } //~ ERROR Identifier x is bound more than once in the same pattern\n+    };\n+\n+}"}]}