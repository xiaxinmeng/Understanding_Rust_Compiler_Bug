{"sha": "101e1822c3e54e63996c8aaa014d55716f3937eb", "node_id": "C_kwDOAAsO6NoAKDEwMWUxODIyYzNlNTRlNjM5OTZjOGFhYTAxNGQ1NTcxNmYzOTM3ZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T03:37:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T03:37:07Z"}, "message": "Auto merge of #104418 - matthiaskrgr:rollup-y4i6xjc, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #101967 (Move `unix_socket_abstract` feature API to `SocketAddrExt`.)\n - #102470 (Stabilize const char convert)\n - #104223 (Recover from function pointer types with generic parameter list)\n - #104229 (Don't print full paths in overlap errors)\n - #104294 (Don't ICE with inline const errors during MIR build)\n - #104332 (Fixed some `_i32` notation in `maybe_uninit`\u2019s doc)\n - #104349 (fix some typos in comments)\n - #104350 (Fix x finding Python on Windows)\n - #104356 (interpret: make check_mplace public)\n - #104364 (rustdoc: Resolve doc links in external traits having local impls)\n - #104378 (Bump chalk to v0.87)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4221eb50b20ad8cb84e1320b3e21cd80bad30813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4221eb50b20ad8cb84e1320b3e21cd80bad30813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101e1822c3e54e63996c8aaa014d55716f3937eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101e1822c3e54e63996c8aaa014d55716f3937eb", "html_url": "https://github.com/rust-lang/rust/commit/101e1822c3e54e63996c8aaa014d55716f3937eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101e1822c3e54e63996c8aaa014d55716f3937eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dedfb9c2140dcc770054b1515d6099e42d35004d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dedfb9c2140dcc770054b1515d6099e42d35004d", "html_url": "https://github.com/rust-lang/rust/commit/dedfb9c2140dcc770054b1515d6099e42d35004d"}, {"sha": "c3890976937e1e6d7c5e892ebbef4a8676d4baec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3890976937e1e6d7c5e892ebbef4a8676d4baec", "html_url": "https://github.com/rust-lang/rust/commit/c3890976937e1e6d7c5e892ebbef4a8676d4baec"}], "stats": {"total": 1066, "additions": 647, "deletions": 419}, "files": [{"sha": "9f64aa44314db553a78cacab3826a95a45e66f22", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -502,9 +502,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.80.0\"\n+version = \"0.87.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d0001adf0cf12361e08b65e1898ea138f8f77d8f5177cbf29b6b3b3532252bd6\"\n+checksum = \"d552b2fa341f5fc35c6b917b1d289d3c3a34d0b74e579390ea6192d6152a8cdb\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -514,9 +514,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.80.0\"\n+version = \"0.87.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c44ee96f2d67cb5193d1503f185db1abad9933a1c6e6b4169c176f90baecd393\"\n+checksum = \"7e54ac43048cb31c470d7b3e3acd409090ef4a5abddfe02455187aebc3d6879f\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -527,9 +527,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.80.0\"\n+version = \"0.87.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"92d8a95548f23618fda86426e4304e563ec2bb7ba0216139f0748d63c107b5f1\"\n+checksum = \"43aa55deff4e7fbdb09fa014543372f2c95a06835ac487b9ce57b5099b950838\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-derive\",\n@@ -538,9 +538,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.80.0\"\n+version = \"0.87.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f37f492dacfafe2e21319b80827da2779932909bb392f0cc86b2bd5c07c1b4e1\"\n+checksum = \"61213deefc36ba265ad01c4d997e18bcddf7922862a4594a47ca4575afb3dab4\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\","}, {"sha": "f0a83b7a02689d4607e545b325e8a0ae803878e3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -376,7 +376,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Read an immediate from a place, asserting that that is possible with the given layout.\n     ///\n-    /// If this suceeds, the `ImmTy` is never `Uninit`.\n+    /// If this succeeds, the `ImmTy` is never `Uninit`.\n     #[inline(always)]\n     pub fn read_immediate(\n         &self,"}, {"sha": "29d2312612ea9fb8fa5d5dc7e5de03b54baa5320", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -316,8 +316,7 @@ where\n         Ok(MPlaceTy { mplace, layout, align })\n     }\n \n-    /// Take an operand, representing a pointer, and dereference it to a place -- that\n-    /// will always be a MemPlace.  Lives in `place.rs` because it creates a place.\n+    /// Take an operand, representing a pointer, and dereference it to a place.\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn deref_operand(\n         &self,\n@@ -331,7 +330,7 @@ where\n         }\n \n         let mplace = self.ref_to_mplace(&val)?;\n-        self.check_mplace_access(mplace, CheckInAllocMsg::DerefTest)?;\n+        self.check_mplace(mplace)?;\n         Ok(mplace)\n     }\n \n@@ -358,17 +357,18 @@ where\n     }\n \n     /// Check if this mplace is dereferenceable and sufficiently aligned.\n-    fn check_mplace_access(\n-        &self,\n-        mplace: MPlaceTy<'tcx, M::Provenance>,\n-        msg: CheckInAllocMsg,\n-    ) -> InterpResult<'tcx> {\n+    pub fn check_mplace(&self, mplace: MPlaceTy<'tcx, M::Provenance>) -> InterpResult<'tcx> {\n         let (size, align) = self\n             .size_and_align_of_mplace(&mplace)?\n             .unwrap_or((mplace.layout.size, mplace.layout.align.abi));\n         assert!(mplace.align <= align, \"dynamic alignment less strict than static one?\");\n         let align = M::enforce_alignment(self).then_some(align);\n-        self.check_ptr_access_align(mplace.ptr, size, align.unwrap_or(Align::ONE), msg)?;\n+        self.check_ptr_access_align(\n+            mplace.ptr,\n+            size,\n+            align.unwrap_or(Align::ONE),\n+            CheckInAllocMsg::DerefTest,\n+        )?;\n         Ok(())\n     }\n "}, {"sha": "815e8f4d3567e6beee5c908fa23e3a8f7c672eb6", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -375,3 +375,12 @@ parser_async_move_order_incorrect = the order of `move` and `async` is incorrect\n \n parser_double_colon_in_bound = expected `:` followed by trait or lifetime\n     .suggestion = use single colon\n+\n+parser_fn_ptr_with_generics = function pointer types may not have generic parameters\n+    .suggestion = consider moving the lifetime {$arity ->\n+        [one] parameter\n+        *[other] parameters\n+    } to {$for_param_list_exists ->\n+        [true] the\n+        *[false] a\n+    } `for` parameter list"}, {"sha": "170d4341ae71b4a3356a12a7c6d03b60d9021f4f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1254,6 +1254,10 @@ impl HandlerInner {\n         }\n \n         if diagnostic.has_future_breakage() {\n+            // Future breakages aren't emitted if they're Level::Allowed,\n+            // but they still need to be constructed and stashed below,\n+            // so they'll trigger the good-path bug check.\n+            self.suppressed_expected_diag = true;\n             self.future_breakage_diagnostics.push(diagnostic.clone());\n         }\n "}, {"sha": "5e17d8a021e96cf82fe1089ab864c33221a5cf1f", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -333,7 +333,7 @@ fn expand_macro<'cx>(\n     assert!(try_success_result.is_err(), \"Macro matching returned a success on the second try\");\n \n     if let Some(result) = tracker.result {\n-        // An irrecoverable error occured and has been emitted.\n+        // An irrecoverable error occurred and has been emitted.\n         return result;\n     }\n "}, {"sha": "01477265f6175529dc07027e19467841c1ff72cd", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -147,7 +147,7 @@ pub enum AttributeDuplicates {\n     FutureWarnPreceding,\n }\n \n-/// A conveniece macro to deal with `$($expr)?`.\n+/// A convenience macro to deal with `$($expr)?`.\n macro_rules! or_default {\n     ($default:expr,) => {\n         $default"}, {"sha": "8d3acee48884d11aeced9a66eb442c4338176986", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -35,7 +35,7 @@ struct ClosureSignatures<'tcx> {\n     bound_sig: ty::PolyFnSig<'tcx>,\n     /// The signature within the function body.\n     /// This mostly differs in the sense that lifetimes are now early bound and any\n-    /// opaque types from the signature expectation are overriden in case there are\n+    /// opaque types from the signature expectation are overridden in case there are\n     /// explicit hidden types written by the user in the closure signature.\n     liberated_sig: ty::FnSig<'tcx>,\n }"}, {"sha": "3e2efb7d3610d23a54afdef59b37a1ce543ffd5d", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -360,7 +360,7 @@ fn lint_int_literal<'tcx>(\n         }\n \n         if lint_overflowing_range_endpoint(cx, lit, v, max, e, t.name_str()) {\n-            // The overflowing literal lint was emited by `lint_overflowing_range_endpoint`.\n+            // The overflowing literal lint was emitted by `lint_overflowing_range_endpoint`.\n             return;\n         }\n \n@@ -429,7 +429,7 @@ fn lint_uint_literal<'tcx>(\n             }\n         }\n         if lint_overflowing_range_endpoint(cx, lit, lit_val, max, e, t.name_str()) {\n-            // The overflowing literal lint was emited by `lint_overflowing_range_endpoint`.\n+            // The overflowing literal lint was emitted by `lint_overflowing_range_endpoint`.\n             return;\n         }\n         if let Some(repr_str) = get_bin_hex_repr(cx, lit) {"}, {"sha": "5f6e498dbeaa23bb0c8811f4be9d9605955c5edd", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -8,7 +8,7 @@ doctest = false\n \n [dependencies]\n bitflags = \"1.2.1\"\n-chalk-ir = \"0.80.0\"\n+chalk-ir = \"0.87.0\"\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n polonius-engine = \"0.13.0\""}, {"sha": "4781651071d38a6207e873b8573576af6a5936e7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1541,7 +1541,7 @@ impl<'tcx> Place<'tcx> {\n     /// If MirPhase >= Derefered and if projection contains Deref,\n     /// It's guaranteed to be in the first place\n     pub fn has_deref(&self) -> bool {\n-        // To make sure this is not accidently used in wrong mir phase\n+        // To make sure this is not accidentally used in wrong mir phase\n         debug_assert!(\n             self.projection.is_empty() || !self.projection[1..].contains(&PlaceElem::Deref)\n         );"}, {"sha": "fed943169dfb542b2b2913270df4bc4bd4599da9", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -85,7 +85,7 @@ pub enum MirPhase {\n     ///\n     /// Also note that the lint pass which reports eg `200_u8 + 200_u8` as an error is run as a part\n     /// of analysis to runtime MIR lowering. To ensure lints are reported reliably, this means that\n-    /// transformations which may supress such errors should not run on analysis MIR.\n+    /// transformations which may suppress such errors should not run on analysis MIR.\n     Runtime(RuntimePhase),\n }\n "}, {"sha": "db05592ed0ea5fa27a24a8b0f1bce32545c5987a", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     else_block: Some(else_block),\n                 } => {\n                     // When lowering the statement `let <pat> = <expr> else { <else> };`,\n-                    // the `<else>` block is nested in the parent scope enclosing this statment.\n+                    // the `<else>` block is nested in the parent scope enclosing this statement.\n                     // That scope is usually either the enclosing block scope,\n                     // or the remainder scope of the last statement.\n                     // This is to make sure that temporaries instantiated in `<expr>` are dropped"}, {"sha": "80b532aec6c1a8a5c51ec1d3a41628987abfbb3d", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -577,6 +577,9 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     self.errors.push(PatternError::ConstParamInPattern(span));\n                     return PatKind::Wild;\n                 }\n+                ConstKind::Error(_) => {\n+                    return PatKind::Wild;\n+                }\n                 _ => bug!(\"Expected ConstKind::Param\"),\n             },\n             mir::ConstantKind::Val(_, _) => self.const_to_pat(value, id, span, false).kind,"}, {"sha": "a39398950a53352545dbc3916c1c2dc6eb11559f", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1280,3 +1280,24 @@ pub(crate) struct DoubleColonInBound {\n     #[suggestion(code = \": \", applicability = \"machine-applicable\")]\n     pub between: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parser_fn_ptr_with_generics)]\n+pub(crate) struct FnPtrWithGenerics {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sugg: Option<FnPtrWithGenericsSugg>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(suggestion, applicability = \"maybe-incorrect\")]\n+pub(crate) struct FnPtrWithGenericsSugg {\n+    #[suggestion_part(code = \"{snippet}\")]\n+    pub left: Span,\n+    pub snippet: String,\n+    #[suggestion_part(code = \"\")]\n+    pub right: Span,\n+    pub arity: usize,\n+    pub for_param_list_exists: bool,\n+}"}, {"sha": "c78479b098ba000453afc83c2c27754d47af80aa", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -3,6 +3,7 @@\n #![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n+#![feature(iter_intersperse)]\n #![feature(let_chains)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "d6854f0702518dac028e26b78483dbbf46c3560e", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,5 +1,6 @@\n use super::{Parser, PathStyle, TokenType};\n \n+use crate::errors::{FnPtrWithGenerics, FnPtrWithGenericsSugg};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n \n use rustc_ast::ptr::P;\n@@ -270,14 +271,19 @@ impl<'a> Parser<'a> {\n             TyKind::Infer\n         } else if self.check_fn_front_matter(false, Case::Sensitive) {\n             // Function pointer type\n-            self.parse_ty_bare_fn(lo, Vec::new(), recover_return_sign)?\n+            self.parse_ty_bare_fn(lo, Vec::new(), None, recover_return_sign)?\n         } else if self.check_keyword(kw::For) {\n             // Function pointer type or bound list (trait object type) starting with a poly-trait.\n             //   `for<'lt> [unsafe] [extern \"ABI\"] fn (&'lt S) -> T`\n             //   `for<'lt> Trait1<'lt> + Trait2 + 'a`\n             let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n             if self.check_fn_front_matter(false, Case::Sensitive) {\n-                self.parse_ty_bare_fn(lo, lifetime_defs, recover_return_sign)?\n+                self.parse_ty_bare_fn(\n+                    lo,\n+                    lifetime_defs,\n+                    Some(self.prev_token.span.shrink_to_lo()),\n+                    recover_return_sign,\n+                )?\n             } else {\n                 let path = self.parse_path(PathStyle::Type)?;\n                 let parse_plus = allow_plus == AllowPlus::Yes && self.check_plus();\n@@ -519,7 +525,8 @@ impl<'a> Parser<'a> {\n     fn parse_ty_bare_fn(\n         &mut self,\n         lo: Span,\n-        params: Vec<GenericParam>,\n+        mut params: Vec<GenericParam>,\n+        param_insertion_point: Option<Span>,\n         recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, TyKind> {\n         let inherited_vis = rustc_ast::Visibility {\n@@ -530,6 +537,9 @@ impl<'a> Parser<'a> {\n         let span_start = self.token.span;\n         let ast::FnHeader { ext, unsafety, constness, asyncness } =\n             self.parse_fn_front_matter(&inherited_vis)?;\n+        if self.may_recover() && self.token.kind == TokenKind::Lt {\n+            self.recover_fn_ptr_with_generics(lo, &mut params, param_insertion_point)?;\n+        }\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {\n@@ -545,6 +555,48 @@ impl<'a> Parser<'a> {\n         Ok(TyKind::BareFn(P(BareFnTy { ext, unsafety, generic_params: params, decl, decl_span })))\n     }\n \n+    /// Recover from function pointer types with a generic parameter list (e.g. `fn<'a>(&'a str)`).\n+    fn recover_fn_ptr_with_generics(\n+        &mut self,\n+        lo: Span,\n+        params: &mut Vec<GenericParam>,\n+        param_insertion_point: Option<Span>,\n+    ) -> PResult<'a, ()> {\n+        let generics = self.parse_generics()?;\n+        let arity = generics.params.len();\n+\n+        let mut lifetimes: Vec<_> = generics\n+            .params\n+            .into_iter()\n+            .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime))\n+            .collect();\n+\n+        let sugg = if !lifetimes.is_empty() {\n+            let snippet =\n+                lifetimes.iter().map(|param| param.ident.as_str()).intersperse(\", \").collect();\n+\n+            let (left, snippet) = if let Some(span) = param_insertion_point {\n+                (span, if params.is_empty() { snippet } else { format!(\", {snippet}\") })\n+            } else {\n+                (lo.shrink_to_lo(), format!(\"for<{snippet}> \"))\n+            };\n+\n+            Some(FnPtrWithGenericsSugg {\n+                left,\n+                snippet,\n+                right: generics.span,\n+                arity,\n+                for_param_list_exists: param_insertion_point.is_some(),\n+            })\n+        } else {\n+            None\n+        };\n+\n+        self.sess.emit_err(FnPtrWithGenerics { span: generics.span, sugg });\n+        params.append(&mut lifetimes);\n+        Ok(())\n+    }\n+\n     /// Emit an error for the given bad function pointer qualifier.\n     fn error_fn_ptr_bad_qualifier(&self, span: Span, qual_span: Span, qual: &str) {\n         self.struct_span_err(span, &format!(\"an `fn` pointer type cannot be `{}`\", qual))"}, {"sha": "82dcc7efb1bafce5082b07f045342b366ae07bb6", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -72,7 +72,7 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n                 update(node_id);\n                 if let ImportKind::Single { additional_ids: (id1, id2), .. } = import.kind {\n                     // In theory all the single import IDs have individual visibilities and\n-                    // effective visibilities, but in practice these IDs go straigth to HIR\n+                    // effective visibilities, but in practice these IDs go straight to HIR\n                     // where all their few uses assume that their (effective) visibility\n                     // applies to the whole syntactic `use` item. So they all get the same\n                     // value which is the maximum of all bindings. Maybe HIR for imports"}, {"sha": "9ca3588fff4510e4c2d43c3e16ae17a9cd0144fe", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1932,6 +1932,11 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// For rustdoc.\n+    pub fn get_partial_res(&self, node_id: NodeId) -> Option<PartialRes> {\n+        self.partial_res_map.get(&node_id).copied()\n+    }\n+\n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n     #[inline]\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {"}, {"sha": "664592b02a12443cc34ebbd6b94f90498de57728", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -114,7 +114,7 @@ pub enum Lld {\n /// relevant now.\n ///\n /// The second goal is to keep the number of flavors to the minimum if possible.\n-/// LLD somewhat forces our hand here because that linker is self-sufficent only if its executable\n+/// LLD somewhat forces our hand here because that linker is self-sufficient only if its executable\n /// (`argv[0]`) is named in specific way, otherwise it doesn't work and requires a\n /// `-flavor LLD_FLAVOR` argument to choose which logic to use. Our shipped `rust-lld` in\n /// particular is not named in such specific way, so it needs the flavor option, so we make our"}, {"sha": "19f404cb5b78821894ca5b810ade1f1a92ede472", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -58,10 +58,10 @@ pub struct NoValueInOnUnimplemented {\n     pub span: Span,\n }\n \n-pub struct NegativePositiveConflict<'a> {\n+pub struct NegativePositiveConflict<'tcx> {\n     pub impl_span: Span,\n-    pub trait_desc: &'a str,\n-    pub self_desc: &'a Option<String>,\n+    pub trait_desc: ty::TraitRef<'tcx>,\n+    pub self_ty: Option<Ty<'tcx>>,\n     pub negative_impl_span: Result<Span, Symbol>,\n     pub positive_impl_span: Result<Span, Symbol>,\n }\n@@ -73,10 +73,10 @@ impl IntoDiagnostic<'_> for NegativePositiveConflict<'_> {\n         handler: &Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = handler.struct_err(fluent::trait_selection_negative_positive_conflict);\n-        diag.set_arg(\"trait_desc\", self.trait_desc);\n+        diag.set_arg(\"trait_desc\", self.trait_desc.print_only_trait_path().to_string());\n         diag.set_arg(\n             \"self_desc\",\n-            self.self_desc.clone().map_or_else(|| String::from(\"none\"), |ty| ty),\n+            self.self_ty.map_or_else(|| \"none\".to_string(), |ty| ty.to_string()),\n         );\n         diag.set_span(self.impl_span);\n         diag.code(rustc_errors::error_code!(E0751));"}, {"sha": "3cf2959a9ffc5e7d24c6219d413c05b7dcf5ad28", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -64,13 +64,13 @@ pub fn add_placeholder_note(err: &mut Diagnostic) {\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, returns `None`.\n #[instrument(skip(tcx, skip_leak_check), level = \"debug\")]\n-pub fn overlapping_impls(\n-    tcx: TyCtxt<'_>,\n+pub fn overlapping_impls<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     skip_leak_check: SkipLeakCheck,\n     overlap_mode: OverlapMode,\n-) -> Option<OverlapResult<'_>> {\n+) -> Option<OverlapResult<'tcx>> {\n     // Before doing expensive operations like entering an inference context, do\n     // a quick check via fast_reject to tell if the impl headers could possibly\n     // unify."}, {"sha": "7cc12eff20e8bb15d2f4ddc99f2bcf21311e39bb", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -19,9 +19,9 @@ use crate::traits::engine::TraitEngineExt as _;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause};\n use rustc_data_structures::fx::FxIndexSet;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, EmissionGuarantee};\n+use rustc_errors::{error_code, DelayDm, Diagnostic};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::{self, ImplSubject, TyCtxt};\n+use rustc_middle::ty::{self, ImplSubject, Ty, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n@@ -32,10 +32,10 @@ use super::SelectionContext;\n \n /// Information pertinent to an overlapping impl error.\n #[derive(Debug)]\n-pub struct OverlapError {\n+pub struct OverlapError<'tcx> {\n     pub with_impl: DefId,\n-    pub trait_desc: String,\n-    pub self_desc: Option<String>,\n+    pub trait_ref: ty::TraitRef<'tcx>,\n+    pub self_ty: Option<Ty<'tcx>>,\n     pub intercrate_ambiguity_causes: FxIndexSet<IntercrateAmbiguityCause>,\n     pub involves_placeholder: bool,\n }\n@@ -275,9 +275,9 @@ pub(super) fn specialization_graph_provider(\n // it negatively impacts perf.\n #[cold]\n #[inline(never)]\n-fn report_overlap_conflict(\n-    tcx: TyCtxt<'_>,\n-    overlap: OverlapError,\n+fn report_overlap_conflict<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    overlap: OverlapError<'tcx>,\n     impl_def_id: LocalDefId,\n     used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n     sg: &mut specialization_graph::Graph,\n@@ -313,27 +313,27 @@ fn report_overlap_conflict(\n     }\n }\n \n-fn report_negative_positive_conflict(\n-    tcx: TyCtxt<'_>,\n-    overlap: &OverlapError,\n+fn report_negative_positive_conflict<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    overlap: &OverlapError<'tcx>,\n     local_impl_def_id: LocalDefId,\n     negative_impl_def_id: DefId,\n     positive_impl_def_id: DefId,\n     sg: &mut specialization_graph::Graph,\n ) {\n     let mut err = tcx.sess.create_err(NegativePositiveConflict {\n         impl_span: tcx.def_span(local_impl_def_id),\n-        trait_desc: &overlap.trait_desc,\n-        self_desc: &overlap.self_desc,\n+        trait_desc: overlap.trait_ref,\n+        self_ty: overlap.self_ty,\n         negative_impl_span: tcx.span_of_impl(negative_impl_def_id),\n         positive_impl_span: tcx.span_of_impl(positive_impl_def_id),\n     });\n     sg.has_errored = Some(err.emit());\n }\n \n-fn report_conflicting_impls(\n-    tcx: TyCtxt<'_>,\n-    overlap: OverlapError,\n+fn report_conflicting_impls<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    overlap: OverlapError<'tcx>,\n     impl_def_id: LocalDefId,\n     used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n     sg: &mut specialization_graph::Graph,\n@@ -343,12 +343,12 @@ fn report_conflicting_impls(\n     // Work to be done after we've built the DiagnosticBuilder. We have to define it\n     // now because the struct_lint methods don't return back the DiagnosticBuilder\n     // that's passed in.\n-    fn decorate<'a, 'b, G: EmissionGuarantee>(\n-        tcx: TyCtxt<'_>,\n-        overlap: OverlapError,\n+    fn decorate<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        overlap: &OverlapError<'tcx>,\n         impl_span: Span,\n-        err: &'b mut DiagnosticBuilder<'a, G>,\n-    ) -> &'b mut DiagnosticBuilder<'a, G> {\n+        err: &mut Diagnostic,\n+    ) {\n         match tcx.span_of_impl(overlap.with_impl) {\n             Ok(span) => {\n                 err.span_label(span, \"first implementation here\");\n@@ -357,7 +357,7 @@ fn report_conflicting_impls(\n                     impl_span,\n                     format!(\n                         \"conflicting implementation{}\",\n-                        overlap.self_desc.map_or_else(String::new, |ty| format!(\" for `{}`\", ty))\n+                        overlap.self_ty.map_or_else(String::new, |ty| format!(\" for `{}`\", ty))\n                     ),\n                 );\n             }\n@@ -379,26 +379,28 @@ fn report_conflicting_impls(\n         if overlap.involves_placeholder {\n             coherence::add_placeholder_note(err);\n         }\n-        err\n     }\n \n-    let msg = format!(\n-        \"conflicting implementations of trait `{}`{}{}\",\n-        overlap.trait_desc,\n-        overlap.self_desc.as_deref().map_or_else(String::new, |ty| format!(\" for type `{ty}`\")),\n-        match used_to_be_allowed {\n-            Some(FutureCompatOverlapErrorKind::Issue33140) => \": (E0119)\",\n-            _ => \"\",\n-        }\n-    );\n+    let msg = DelayDm(|| {\n+        format!(\n+            \"conflicting implementations of trait `{}`{}{}\",\n+            overlap.trait_ref.print_only_trait_path(),\n+            overlap.self_ty.map_or_else(String::new, |ty| format!(\" for type `{ty}`\")),\n+            match used_to_be_allowed {\n+                Some(FutureCompatOverlapErrorKind::Issue33140) => \": (E0119)\",\n+                _ => \"\",\n+            }\n+        )\n+    });\n \n     match used_to_be_allowed {\n         None => {\n             let reported = if overlap.with_impl.is_local()\n                 || tcx.orphan_check_impl(impl_def_id).is_ok()\n             {\n-                let mut err = struct_span_err!(tcx.sess, impl_span, E0119, \"{msg}\",);\n-                decorate(tcx, overlap, impl_span, &mut err);\n+                let mut err = tcx.sess.struct_span_err(impl_span, msg);\n+                err.code(error_code!(E0119));\n+                decorate(tcx, &overlap, impl_span, &mut err);\n                 Some(err.emit())\n             } else {\n                 Some(tcx.sess.delay_span_bug(impl_span, \"impl should have failed the orphan check\"))\n@@ -415,7 +417,10 @@ fn report_conflicting_impls(\n                 tcx.hir().local_def_id_to_hir_id(impl_def_id),\n                 impl_span,\n                 msg,\n-                |err| decorate(tcx, overlap, impl_span, err),\n+                |err| {\n+                    decorate(tcx, &overlap, impl_span, err);\n+                    err\n+                },\n             );\n         }\n     };"}, {"sha": "4546c9533930013b0e7cc5a557230968b1dc8767", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -3,7 +3,6 @@ use super::OverlapError;\n use crate::traits;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n \n pub use rustc_middle::traits::specialization_graph::*;\n@@ -15,15 +14,15 @@ pub enum FutureCompatOverlapErrorKind {\n }\n \n #[derive(Debug)]\n-pub struct FutureCompatOverlapError {\n-    pub error: OverlapError,\n+pub struct FutureCompatOverlapError<'tcx> {\n+    pub error: OverlapError<'tcx>,\n     pub kind: FutureCompatOverlapErrorKind,\n }\n \n /// The result of attempting to insert an impl into a group of children.\n-enum Inserted {\n+enum Inserted<'tcx> {\n     /// The impl was inserted as a new child in this group of children.\n-    BecameNewSibling(Option<FutureCompatOverlapError>),\n+    BecameNewSibling(Option<FutureCompatOverlapError<'tcx>>),\n \n     /// The impl should replace existing impls [X1, ..], because the impl specializes X1, X2, etc.\n     ReplaceChildren(Vec<DefId>),\n@@ -42,12 +41,12 @@ trait ChildrenExt<'tcx> {\n         impl_def_id: DefId,\n         simplified_self: Option<SimplifiedType>,\n         overlap_mode: OverlapMode,\n-    ) -> Result<Inserted, OverlapError>;\n+    ) -> Result<Inserted<'tcx>, OverlapError<'tcx>>;\n }\n \n-impl ChildrenExt<'_> for Children {\n+impl<'tcx> ChildrenExt<'tcx> for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n-    fn insert_blindly(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n+    fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n         {\n@@ -62,7 +61,7 @@ impl ChildrenExt<'_> for Children {\n     /// Removes an impl from this set of children. Used when replacing\n     /// an impl with a parent. The impl must be present in the list of\n     /// children already.\n-    fn remove_existing(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n+    fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let vec: &mut Vec<DefId>;\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n@@ -82,11 +81,11 @@ impl ChildrenExt<'_> for Children {\n     /// specialization relationships.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'_>,\n+        tcx: TyCtxt<'tcx>,\n         impl_def_id: DefId,\n         simplified_self: Option<SimplifiedType>,\n         overlap_mode: OverlapMode,\n-    ) -> Result<Inserted, OverlapError> {\n+    ) -> Result<Inserted<'tcx>, OverlapError<'tcx>> {\n         let mut last_lint = None;\n         let mut replace_children = Vec::new();\n \n@@ -103,30 +102,23 @@ impl ChildrenExt<'_> for Children {\n                 impl_def_id, simplified_self, possible_sibling,\n             );\n \n-            let create_overlap_error = |overlap: traits::coherence::OverlapResult<'_>| {\n+            let create_overlap_error = |overlap: traits::coherence::OverlapResult<'tcx>| {\n                 let trait_ref = overlap.impl_header.trait_ref.unwrap();\n                 let self_ty = trait_ref.self_ty();\n \n-                // FIXME: should postpone string formatting until we decide to actually emit.\n-                with_no_trimmed_paths!({\n-                    OverlapError {\n-                        with_impl: possible_sibling,\n-                        trait_desc: trait_ref.print_only_trait_path().to_string(),\n-                        // Only report the `Self` type if it has at least\n-                        // some outer concrete shell; otherwise, it's\n-                        // not adding much information.\n-                        self_desc: if self_ty.has_concrete_skeleton() {\n-                            Some(self_ty.to_string())\n-                        } else {\n-                            None\n-                        },\n-                        intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n-                        involves_placeholder: overlap.involves_placeholder,\n-                    }\n-                })\n+                OverlapError {\n+                    with_impl: possible_sibling,\n+                    trait_ref,\n+                    // Only report the `Self` type if it has at least\n+                    // some outer concrete shell; otherwise, it's\n+                    // not adding much information.\n+                    self_ty: if self_ty.has_concrete_skeleton() { Some(self_ty) } else { None },\n+                    intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n+                    involves_placeholder: overlap.involves_placeholder,\n+                }\n             };\n \n-            let report_overlap_error = |overlap: traits::coherence::OverlapResult<'_>,\n+            let report_overlap_error = |overlap: traits::coherence::OverlapResult<'tcx>,\n                                         last_lint: &mut _| {\n                 // Found overlap, but no specialization; error out or report future-compat warning.\n \n@@ -255,31 +247,31 @@ where\n     }\n }\n \n-pub trait GraphExt {\n+pub trait GraphExt<'tcx> {\n     /// Insert a local impl into the specialization graph. If an existing impl\n     /// conflicts with it (has overlap, but neither specializes the other),\n     /// information about the area of overlap is returned in the `Err`.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'_>,\n+        tcx: TyCtxt<'tcx>,\n         impl_def_id: DefId,\n         overlap_mode: OverlapMode,\n-    ) -> Result<Option<FutureCompatOverlapError>, OverlapError>;\n+    ) -> Result<Option<FutureCompatOverlapError<'tcx>>, OverlapError<'tcx>>;\n \n     /// Insert cached metadata mapping from a child impl back to its parent.\n-    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'_>, parent: DefId, child: DefId);\n+    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId);\n }\n \n-impl GraphExt for Graph {\n+impl<'tcx> GraphExt<'tcx> for Graph {\n     /// Insert a local impl into the specialization graph. If an existing impl\n     /// conflicts with it (has overlap, but neither specializes the other),\n     /// information about the area of overlap is returned in the `Err`.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'_>,\n+        tcx: TyCtxt<'tcx>,\n         impl_def_id: DefId,\n         overlap_mode: OverlapMode,\n-    ) -> Result<Option<FutureCompatOverlapError>, OverlapError> {\n+    ) -> Result<Option<FutureCompatOverlapError<'tcx>>, OverlapError<'tcx>> {\n         assert!(impl_def_id.is_local());\n \n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n@@ -376,7 +368,7 @@ impl GraphExt for Graph {\n     }\n \n     /// Insert cached metadata mapping from a child impl back to its parent.\n-    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'_>, parent: DefId, child: DefId) {\n+    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId) {\n         if self.parent.insert(child, parent).is_some() {\n             bug!(\n                 \"When recording an impl from the crate store, information about its parent \\"}, {"sha": "9474e6df5677b9e4500eedaee7500d861eb569ea", "filename": "compiler/rustc_traits/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2FCargo.toml?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -12,9 +12,9 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.80.0\"\n-chalk-engine = \"0.80.0\"\n-chalk-solve = \"0.80.0\"\n+chalk-ir = \"0.87.0\"\n+chalk-engine = \"0.87.0\"\n+chalk-solve = \"0.87.0\"\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "d15707e5ceddb694b16f2fc4aee5d90bbca99d7d", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -142,6 +142,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             Some(CoerceUnsized)\n         } else if lang_items.dispatch_from_dyn_trait() == Some(def_id) {\n             Some(DispatchFromDyn)\n+        } else if lang_items.tuple_trait() == Some(def_id) {\n+            Some(Tuple)\n         } else {\n             None\n         };\n@@ -570,6 +572,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             CoerceUnsized => lang_items.coerce_unsized_trait(),\n             DiscriminantKind => lang_items.discriminant_kind_trait(),\n             DispatchFromDyn => lang_items.dispatch_from_dyn_trait(),\n+            Tuple => lang_items.tuple_trait(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }"}, {"sha": "25cedefa26127b70d40f8be46b74877f57d4411c", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -507,9 +507,6 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                 name: ty::BoundRegionKind::BrAnon(p.idx as u32, None),\n             }),\n             chalk_ir::LifetimeData::Static => return interner.tcx.lifetimes.re_static,\n-            chalk_ir::LifetimeData::Empty(_) => {\n-                bug!(\"Chalk should not have been passed an empty lifetime.\")\n-            }\n             chalk_ir::LifetimeData::Erased => return interner.tcx.lifetimes.re_erased,\n             chalk_ir::LifetimeData::Phantom(void, _) => match *void {},\n         };"}, {"sha": "f1a51a550f5792216c8d723818e1a5f7ec38fd2c", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -18,7 +18,6 @@ pub(super) const fn from_u32(i: u32) -> Option<char> {\n }\n \n /// Converts a `u32` to a `char`, ignoring validity. See [`char::from_u32_unchecked`].\n-#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n #[inline]\n #[must_use]\n pub(super) const unsafe fn from_u32_unchecked(i: u32) -> char {"}, {"sha": "c05b68e30bc90c88d2f78746ab8e99e0d9b44563", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -140,7 +140,7 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n-    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     #[inline]\n     pub const fn from_u32(i: u32) -> Option<char> {\n@@ -183,7 +183,7 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n-    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+    #[rustc_const_unstable(feature = \"const_char_from_u32_unchecked\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n     pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n@@ -241,7 +241,7 @@ impl char {\n     /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n-    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     #[inline]\n     pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n@@ -338,7 +338,7 @@ impl char {\n     /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]"}, {"sha": "55552376280ab045a5ecbf0bfa64c3a72b298aae", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -110,7 +110,7 @@ pub fn decode_utf16<I: IntoIterator<Item = u16>>(iter: I) -> DecodeUtf16<I::Into\n \n /// Converts a `u32` to a `char`. Use [`char::from_u32`] instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+#[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n #[must_use]\n #[inline]\n pub const fn from_u32(i: u32) -> Option<char> {\n@@ -120,7 +120,7 @@ pub const fn from_u32(i: u32) -> Option<char> {\n /// Converts a `u32` to a `char`, ignoring validity. Use [`char::from_u32_unchecked`].\n /// instead.\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n-#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+#[rustc_const_unstable(feature = \"const_char_from_u32_unchecked\", issue = \"89259\")]\n #[must_use]\n #[inline]\n pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n@@ -130,7 +130,7 @@ pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n \n /// Converts a digit in the given radix to a `char`. Use [`char::from_digit`] instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+#[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n #[must_use]\n #[inline]\n pub const fn from_digit(num: u32, radix: u32) -> Option<char> {"}, {"sha": "2d12805270f93bed274ee92d93cc32b48cf19fb5", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -104,7 +104,7 @@\n #![feature(const_black_box)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n-#![feature(const_char_convert)]\n+#![feature(const_char_from_u32_unchecked)]\n #![feature(const_clone)]\n #![feature(const_cmp)]\n #![feature(const_discriminant)]"}, {"sha": "3f491836551dc25e07cc4cd15a15402001b69506", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1172,7 +1172,7 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit_as_bytes, maybe_uninit_slice)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let val = 0x12345678i32;\n+    /// let val = 0x12345678_i32;\n     /// let uninit = MaybeUninit::new(val);\n     /// let uninit_bytes = uninit.as_bytes();\n     /// let bytes = unsafe { MaybeUninit::slice_assume_init_ref(uninit_bytes) };\n@@ -1198,7 +1198,7 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit_as_bytes)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let val = 0x12345678i32;\n+    /// let val = 0x12345678_i32;\n     /// let mut uninit = MaybeUninit::new(val);\n     /// let uninit_bytes = uninit.as_bytes_mut();\n     /// if cfg!(target_endian = \"little\") {"}, {"sha": "7cecd1bbfaa95bf360b839c5dbfb2ae0584c40b2", "filename": "library/std/src/os/android/net.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,9 @@\n-//! Linux and Android-specific definitions for socket options.\n+//! Android-specific networking functionality.\n \n #![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n-pub use crate::os::net::tcp::TcpStreamExt;\n+\n+#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n+\n+#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+pub use crate::os::net::linux_ext::tcp::TcpStreamExt;"}, {"sha": "94081c8dd31c50773dec4d5dc160c5c945170928", "filename": "library/std/src/os/linux/net.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,9 @@\n-//! Linux and Android-specific definitions for socket options.\n+//! Linux-specific networking functionality.\n \n #![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n-pub use crate::os::net::tcp::TcpStreamExt;\n+\n+#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n+\n+#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+pub use crate::os::net::linux_ext::tcp::TcpStreamExt;"}, {"sha": "df3fc8e6a3b660cfa61f85ccc38fff7501a95f9c", "filename": "library/std/src/os/net/linux_ext/addr.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -0,0 +1,64 @@\n+//! Linux and Android-specific extensions to socket addresses.\n+\n+use crate::os::unix::net::SocketAddr;\n+use crate::sealed::Sealed;\n+\n+/// Platform-specific extensions to [`SocketAddr`].\n+#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+pub trait SocketAddrExt: Sealed {\n+    /// Creates a Unix socket address in the abstract namespace.\n+    ///\n+    /// The abstract namespace is a Linux-specific extension that allows Unix\n+    /// sockets to be bound without creating an entry in the filesystem.\n+    /// Abstract sockets are unaffected by filesystem layout or permissions,\n+    /// and no cleanup is necessary when the socket is closed.\n+    ///\n+    /// An abstract socket address name may contain any bytes, including zero.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns an error if the name is longer than `SUN_LEN - 1`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(unix_socket_abstract)]\n+    /// use std::os::unix::net::{UnixListener, SocketAddr};\n+    /// use std::os::linux::net::SocketAddrExt;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let addr = SocketAddr::from_abstract_name(b\"hidden\")?;\n+    ///     let listener = match UnixListener::bind_addr(&addr) {\n+    ///         Ok(sock) => sock,\n+    ///         Err(err) => {\n+    ///             println!(\"Couldn't bind: {err:?}\");\n+    ///             return Err(err);\n+    ///         }\n+    ///     };\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    fn from_abstract_name<N>(name: &N) -> crate::io::Result<SocketAddr>\n+    where\n+        N: AsRef<[u8]>;\n+\n+    /// Returns the contents of this address if it is in the abstract namespace.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(unix_socket_abstract)]\n+    /// use std::os::unix::net::{UnixListener, SocketAddr};\n+    /// use std::os::linux::net::SocketAddrExt;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let name = b\"hidden\";\n+    ///     let name_addr = SocketAddr::from_abstract_name(name)?;\n+    ///     let socket = UnixListener::bind_addr(&name_addr)?;\n+    ///     let local_addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(local_addr.as_abstract_name(), Some(&name[..]));\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    fn as_abstract_name(&self) -> Option<&[u8]>;\n+}"}, {"sha": "318ebacfd7a08d774d6e2a01f86807df45fde3de", "filename": "library/std/src/os/net/linux_ext/mod.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -0,0 +1,12 @@\n+//! Linux and Android-specific networking functionality.\n+\n+#![doc(cfg(any(target_os = \"linux\", target_os = \"android\")))]\n+\n+#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+pub(crate) mod addr;\n+\n+#[unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+pub(crate) mod tcp;\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "5e9ee65a4152e4ff6d38848facd984365084228c", "filename": "library/std/src/os/net/linux_ext/tcp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Ftcp.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "previous_filename": "library/std/src/os/net/tcp.rs"}, {"sha": "2db4deed03630197c897eca5fd4c5e53611ea4a2", "filename": "library/std/src/os/net/linux_ext/tests.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Ftests.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,9 +1,8 @@\n-#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n #[test]\n fn quickack() {\n     use crate::{\n         net::{test::next_test_ip4, TcpListener, TcpStream},\n-        os::net::tcp::TcpStreamExt,\n+        os::net::linux_ext::tcp::TcpStreamExt,\n     };\n \n     macro_rules! t {", "previous_filename": "library/std/src/os/net/tests.rs"}, {"sha": "5ec267c41e97ca77a5e3a920b30c918633e2fd77", "filename": "library/std/src/os/net/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Fmod.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,7 +1,4 @@\n-//! Linux and Android-specific definitions for socket options.\n+//! OS-specific networking functionality.\n \n-#![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n-#![doc(cfg(any(target_os = \"linux\", target_os = \"android\",)))]\n-pub mod tcp;\n-#[cfg(test)]\n-mod tests;\n+#[cfg(any(target_os = \"linux\", target_os = \"android\", doc))]\n+pub(super) mod linux_ext;"}, {"sha": "81ac829d21bc81164006a02f55a81a32b0ad35c7", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 25, "deletions": 68, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,6 +1,9 @@\n use crate::ffi::OsStr;\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n+use crate::os::net::linux_ext;\n use crate::os::unix::ffi::OsStrExt;\n use crate::path::Path;\n+use crate::sealed::Sealed;\n use crate::sys::cvt;\n use crate::{fmt, io, mem, ptr};\n \n@@ -224,31 +227,6 @@ impl SocketAddr {\n         if let AddressKind::Pathname(path) = self.address() { Some(path) } else { None }\n     }\n \n-    /// Returns the contents of this address if it is an abstract namespace\n-    /// without the leading null byte.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n-    /// use std::os::unix::net::{UnixListener, SocketAddr};\n-    ///\n-    /// fn main() -> std::io::Result<()> {\n-    ///     let namespace = b\"hidden\";\n-    ///     let namespace_addr = SocketAddr::from_abstract_namespace(&namespace[..])?;\n-    ///     let socket = UnixListener::bind_addr(&namespace_addr)?;\n-    ///     let local_addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    ///     assert_eq!(local_addr.as_abstract_namespace(), Some(&namespace[..]));\n-    ///     Ok(())\n-    /// }\n-    /// ```\n-    #[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n-    pub fn as_abstract_namespace(&self) -> Option<&[u8]> {\n-        if let AddressKind::Abstract(name) = self.address() { Some(name) } else { None }\n-    }\n-\n     fn address(&self) -> AddressKind<'_> {\n         let len = self.len as usize - sun_path_offset(&self.addr);\n         let path = unsafe { mem::transmute::<&[libc::c_char], &[u8]>(&self.addr.sun_path) };\n@@ -265,62 +243,41 @@ impl SocketAddr {\n             AddressKind::Pathname(OsStr::from_bytes(&path[..len - 1]).as_ref())\n         }\n     }\n+}\n \n-    /// Creates an abstract domain socket address from a namespace\n-    ///\n-    /// An abstract address does not create a file unlike traditional path-based\n-    /// Unix sockets. The advantage of this is that the address will disappear when\n-    /// the socket bound to it is closed, so no filesystem clean up is required.\n-    ///\n-    /// The leading null byte for the abstract namespace is automatically added.\n-    ///\n-    /// This is a Linux-specific extension. See more at [`unix(7)`].\n-    ///\n-    /// [`unix(7)`]: https://man7.org/linux/man-pages/man7/unix.7.html\n-    ///\n-    /// # Errors\n-    ///\n-    /// This will return an error if the given namespace is too long\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n-    /// use std::os::unix::net::{UnixListener, SocketAddr};\n-    ///\n-    /// fn main() -> std::io::Result<()> {\n-    ///     let addr = SocketAddr::from_abstract_namespace(b\"hidden\")?;\n-    ///     let listener = match UnixListener::bind_addr(&addr) {\n-    ///         Ok(sock) => sock,\n-    ///         Err(err) => {\n-    ///             println!(\"Couldn't bind: {err:?}\");\n-    ///             return Err(err);\n-    ///         }\n-    ///     };\n-    ///     Ok(())\n-    /// }\n-    /// ```\n-    #[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n-    pub fn from_abstract_namespace(namespace: &[u8]) -> io::Result<SocketAddr> {\n+#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+impl Sealed for SocketAddr {}\n+\n+#[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n+#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+impl linux_ext::addr::SocketAddrExt for SocketAddr {\n+    fn as_abstract_name(&self) -> Option<&[u8]> {\n+        if let AddressKind::Abstract(name) = self.address() { Some(name) } else { None }\n+    }\n+\n+    fn from_abstract_name<N>(name: &N) -> crate::io::Result<Self>\n+    where\n+        N: AsRef<[u8]>,\n+    {\n+        let name = name.as_ref();\n         unsafe {\n             let mut addr: libc::sockaddr_un = mem::zeroed();\n             addr.sun_family = libc::AF_UNIX as libc::sa_family_t;\n \n-            if namespace.len() + 1 > addr.sun_path.len() {\n+            if name.len() + 1 > addr.sun_path.len() {\n                 return Err(io::const_io_error!(\n                     io::ErrorKind::InvalidInput,\n-                    \"namespace must be shorter than SUN_LEN\",\n+                    \"abstract socket name must be shorter than SUN_LEN\",\n                 ));\n             }\n \n             crate::ptr::copy_nonoverlapping(\n-                namespace.as_ptr(),\n+                name.as_ptr(),\n                 addr.sun_path.as_mut_ptr().add(1) as *mut u8,\n-                namespace.len(),\n+                name.len(),\n             );\n-            let len = (sun_path_offset(&addr) + 1 + namespace.len()) as libc::socklen_t;\n+            let len = (sun_path_offset(&addr) + 1 + name.len()) as libc::socklen_t;\n             SocketAddr::from_parts(addr, len)\n         }\n     }"}, {"sha": "37fcfa8446b0e00ebcb8b6a530bce8f1b854107f", "filename": "library/std/src/os/unix/net/tests.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -7,6 +7,12 @@ use crate::sys_common::io::test::tmpdir;\n use crate::thread;\n use crate::time::Duration;\n \n+#[cfg(target_os = \"android\")]\n+use crate::os::android::net::SocketAddrExt;\n+\n+#[cfg(target_os = \"linux\")]\n+use crate::os::linux::net::SocketAddrExt;\n+\n macro_rules! or_panic {\n     ($e:expr) => {\n         match $e {\n@@ -404,7 +410,7 @@ fn test_abstract_stream_connect() {\n     let msg1 = b\"hello\";\n     let msg2 = b\"world\";\n \n-    let socket_addr = or_panic!(SocketAddr::from_abstract_namespace(b\"namespace\"));\n+    let socket_addr = or_panic!(SocketAddr::from_abstract_name(b\"name\"));\n     let listener = or_panic!(UnixListener::bind_addr(&socket_addr));\n \n     let thread = thread::spawn(move || {\n@@ -418,7 +424,7 @@ fn test_abstract_stream_connect() {\n     let mut stream = or_panic!(UnixStream::connect_addr(&socket_addr));\n \n     let peer = or_panic!(stream.peer_addr());\n-    assert_eq!(peer.as_abstract_namespace().unwrap(), b\"namespace\");\n+    assert_eq!(peer.as_abstract_name().unwrap(), b\"name\");\n \n     or_panic!(stream.write_all(msg1));\n     let mut buf = vec![];\n@@ -432,7 +438,7 @@ fn test_abstract_stream_connect() {\n #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n #[test]\n fn test_abstract_stream_iter() {\n-    let addr = or_panic!(SocketAddr::from_abstract_namespace(b\"hidden\"));\n+    let addr = or_panic!(SocketAddr::from_abstract_name(b\"hidden\"));\n     let listener = or_panic!(UnixListener::bind_addr(&addr));\n \n     let thread = thread::spawn(move || {\n@@ -454,13 +460,13 @@ fn test_abstract_stream_iter() {\n #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n #[test]\n fn test_abstract_datagram_bind_send_to_addr() {\n-    let addr1 = or_panic!(SocketAddr::from_abstract_namespace(b\"ns1\"));\n+    let addr1 = or_panic!(SocketAddr::from_abstract_name(b\"ns1\"));\n     let sock1 = or_panic!(UnixDatagram::bind_addr(&addr1));\n \n     let local = or_panic!(sock1.local_addr());\n-    assert_eq!(local.as_abstract_namespace().unwrap(), b\"ns1\");\n+    assert_eq!(local.as_abstract_name().unwrap(), b\"ns1\");\n \n-    let addr2 = or_panic!(SocketAddr::from_abstract_namespace(b\"ns2\"));\n+    let addr2 = or_panic!(SocketAddr::from_abstract_name(b\"ns2\"));\n     let sock2 = or_panic!(UnixDatagram::bind_addr(&addr2));\n \n     let msg = b\"hello world\";\n@@ -469,13 +475,13 @@ fn test_abstract_datagram_bind_send_to_addr() {\n     let (len, addr) = or_panic!(sock2.recv_from(&mut buf));\n     assert_eq!(msg, &buf[..]);\n     assert_eq!(len, 11);\n-    assert_eq!(addr.as_abstract_namespace().unwrap(), b\"ns1\");\n+    assert_eq!(addr.as_abstract_name().unwrap(), b\"ns1\");\n }\n \n #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n #[test]\n fn test_abstract_datagram_connect_addr() {\n-    let addr1 = or_panic!(SocketAddr::from_abstract_namespace(b\"ns3\"));\n+    let addr1 = or_panic!(SocketAddr::from_abstract_name(b\"ns3\"));\n     let bsock1 = or_panic!(UnixDatagram::bind_addr(&addr1));\n \n     let sock = or_panic!(UnixDatagram::unbound());\n@@ -489,7 +495,7 @@ fn test_abstract_datagram_connect_addr() {\n     assert_eq!(addr.is_unnamed(), true);\n     assert_eq!(msg, &buf[..]);\n \n-    let addr2 = or_panic!(SocketAddr::from_abstract_namespace(b\"ns4\"));\n+    let addr2 = or_panic!(SocketAddr::from_abstract_name(b\"ns4\"));\n     let bsock2 = or_panic!(UnixDatagram::bind_addr(&addr2));\n \n     or_panic!(sock.connect_addr(&addr2));\n@@ -499,8 +505,8 @@ fn test_abstract_datagram_connect_addr() {\n \n #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n #[test]\n-fn test_abstract_namespace_too_long() {\n-    match SocketAddr::from_abstract_namespace(\n+fn test_abstract_name_too_long() {\n+    match SocketAddr::from_abstract_name(\n         b\"abcdefghijklmnopqrstuvwxyzabcdefghijklmn\\\n         opqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi\\\n         jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\",\n@@ -513,11 +519,11 @@ fn test_abstract_namespace_too_long() {\n \n #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n #[test]\n-fn test_abstract_namespace_no_pathname_and_not_unnamed() {\n-    let namespace = b\"local\";\n-    let addr = or_panic!(SocketAddr::from_abstract_namespace(&namespace[..]));\n+fn test_abstract_no_pathname_and_not_unnamed() {\n+    let name = b\"local\";\n+    let addr = or_panic!(SocketAddr::from_abstract_name(name));\n     assert_eq!(addr.as_pathname(), None);\n-    assert_eq!(addr.as_abstract_namespace(), Some(&namespace[..]));\n+    assert_eq!(addr.as_abstract_name(), Some(&name[..]));\n     assert_eq!(addr.is_unnamed(), false);\n }\n "}, {"sha": "acfbd072121a13491fe2845d1f06361bc27ac2bf", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -674,7 +674,7 @@ impl FromWithTcx<clean::Variant> for Variant {\n impl FromWithTcx<clean::Discriminant> for Discriminant {\n     fn from_tcx(disr: clean::Discriminant, tcx: TyCtxt<'_>) -> Self {\n         Discriminant {\n-            // expr is only none if going throught the inlineing path, which gets\n+            // expr is only none if going through the inlineing path, which gets\n             // `rustc_middle` types, not `rustc_hir`, but because JSON never inlines\n             // the expr is always some.\n             expr: disr.expr(tcx).unwrap(),"}, {"sha": "beb70540091388322329b433c7400984a59ebbcc", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -277,7 +277,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n         let e = ExternalCrate { crate_num: LOCAL_CRATE };\n \n-        // FIXME(adotinthevoid): Remove this, as it's not consistant with not\n+        // FIXME(adotinthevoid): Remove this, as it's not consistent with not\n         // inlining foreign items.\n         let foreign_trait_items = self.get_trait_items();\n         let mut index = (*self.index).clone().into_inner();"}, {"sha": "1b373cfe5bb793d590e239717525608d594a9bec", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -354,7 +354,14 @@ impl Visitor<'_> for EarlyDocLinkResolver<'_, '_> {\n             self.parent_scope.module = old_module;\n         } else {\n             match &item.kind {\n-                ItemKind::Impl(box ast::Impl { of_trait: Some(..), .. }) => {\n+                ItemKind::Impl(box ast::Impl { of_trait: Some(trait_ref), .. }) => {\n+                    if let Some(partial_res) = self.resolver.get_partial_res(trait_ref.ref_id)\n+                        && let Some(res) = partial_res.full_res()\n+                        && let Some(trait_def_id) = res.opt_def_id()\n+                        && !trait_def_id.is_local()\n+                        && self.visited_mods.insert(trait_def_id) {\n+                        self.resolve_doc_links_extern_impl(trait_def_id, false);\n+                    }\n                     self.all_trait_impls.push(self.resolver.local_def_id(item.id).to_def_id());\n                 }\n                 ItemKind::MacroDef(macro_def) if macro_def.macro_rules => {"}, {"sha": "817b3e484194f74947063208eaef4b006a807b05", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -53,7 +53,7 @@ pub struct ItemSummary {\n     /// `[\"std\", \"io\", \"lazy\", \"Lazy\"]` for `std::io::lazy::Lazy`).\n     ///\n     /// Note that items can appear in multiple paths, and the one chosen is implementation\n-    /// defined. Currenty, this is the full path to where the item was defined. Eg\n+    /// defined. Currently, this is the full path to where the item was defined. Eg\n     /// [`String`] is currently `[\"alloc\", \"string\", \"String\"]` and [`HashMap`] is\n     /// `[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]`, but this is subject to change.\n     pub path: Vec<String>,\n@@ -351,7 +351,7 @@ pub enum Variant {\n     /// A variant with unnamed fields.\n     ///\n     /// Unlike most of json, `#[doc(hidden)]` fields will be given as `None`\n-    /// instead of being ommited, because order matters.\n+    /// instead of being omitted, because order matters.\n     ///\n     /// ```rust\n     /// enum Demo {"}, {"sha": "9ce36740d60d9c917f04a69f64755e5f69e64eeb", "filename": "src/test/rustdoc/intra-doc/issue-104145.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-104145.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-104145.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-104145.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -0,0 +1,14 @@\n+// Doc links in `Trait`'s methods are resolved because it has a local impl.\n+\n+// aux-build:issue-103463-aux.rs\n+\n+extern crate issue_103463_aux;\n+use issue_103463_aux::Trait;\n+\n+pub struct LocalType;\n+\n+impl Trait for LocalType {\n+    fn method() {}\n+}\n+\n+fn main() {}"}, {"sha": "568e2e30c418ca7c91ca3b714c1f42717c0712f4", "filename": "src/test/ui/chalkify/closure.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,5 +1,3 @@\n-// known-bug: unknown\n-// FIXME(chalk): Chalk needs support for the Tuple trait\n // compile-flags: -Z chalk\n \n fn main() -> () {\n@@ -26,7 +24,7 @@ fn main() -> () {\n     let mut c = b;\n \n     c();\n-    b(); // FIXME: reenable when this is fixed ~ ERROR\n+    b(); //~ ERROR\n \n     // FIXME(chalk): this doesn't quite work\n     /*"}, {"sha": "a33c0ba0d37c900e57f51169f0015b668bbd1b40", "filename": "src/test/ui/chalkify/closure.stderr", "status": "modified", "additions": 15, "deletions": 73, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,80 +1,22 @@\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:7:5\n-   |\n-LL |     t();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:13:5\n-   |\n-LL |     b();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:17:5\n-   |\n-LL |     c();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:18:5\n+error[E0382]: borrow of moved value: `b`\n+  --> $DIR/closure.rs:27:5\n    |\n+LL |     let mut c = b;\n+   |                 - value moved here\n+...\n LL |     b();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:24:5\n-   |\n-LL |     b();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:28:5\n-   |\n-LL |     c();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:29:5\n+   |     ^ value borrowed here after move\n    |\n-LL |     b(); // FIXME: reenable when this is fixed ~ ERROR\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n+note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `a` out of its environment\n+  --> $DIR/closure.rs:20:9\n    |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+LL |         a = 1;\n+   |         ^\n+help: consider mutably borrowing `b`\n    |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n+LL |     let mut c = &mut b;\n+   |                 ++++\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "d56abc42bf540c048951ac55830e97e3c50bf309", "filename": "src/test/ui/chalkify/trait-objects.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,5 +1,4 @@\n-// known-bug: unknown\n-// FIXME(chalk): Chalk needs support for the Tuple trait\n+// check-pass\n // compile-flags: -Z chalk\n \n use std::fmt::Display;"}, {"sha": "422d39742eb552c3be5bb82da23b193fc778a877", "filename": "src/test/ui/chalkify/trait-objects.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dedfb9c2140dcc770054b1515d6099e42d35004d/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dedfb9c2140dcc770054b1515d6099e42d35004d/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr?ref=dedfb9c2140dcc770054b1515d6099e42d35004d", "patch": "@@ -1,32 +0,0 @@\n-error: the type `&dyn Fn(i32) -> _` is not well-formed (chalk)\n-  --> $DIR/trait-objects.rs:11:12\n-   |\n-LL |     let f: &dyn Fn(i32) -> _ = &|x| x + x;\n-   |            ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `(i32,)` is not a tuple\n-  --> $DIR/trait-objects.rs:12:5\n-   |\n-LL |     f(2);\n-   |     ^^^^ the trait `Tuple` is not implemented for `(i32,)`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() where (i32,): Tuple {\n-   |           +++++++++++++++++++\n-\n-error[E0277]: expected a `Fn<(i32,)>` closure, found `dyn Fn(i32) -> i32`\n-  --> $DIR/trait-objects.rs:12:5\n-   |\n-LL |     f(2);\n-   |     ^^^^ expected an `Fn<(i32,)>` closure, found `dyn Fn(i32) -> i32`\n-   |\n-   = help: the trait `Fn<(i32,)>` is not implemented for `dyn Fn(i32) -> i32`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() where dyn Fn(i32) -> i32: Fn<(i32,)> {\n-   |           ++++++++++++++++++++++++++++++++++++\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "4d7872598b1e772240c21f250596f8a6b92ab176", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`\n+error[E0119]: conflicting implementations of trait `GoMut` for type `MyThingy`\n   --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:15:1\n    |\n LL | impl GoMut for MyThingy {"}, {"sha": "2463f38a92251a6c837b00bc0649022946c6c4b7", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0751]: found both positive and negative implementation of trait `Send` for type `TestType<_>`:\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:11:1\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n@@ -7,7 +7,7 @@ LL |\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`\n+error[E0119]: conflicting implementations of trait `Send` for type `TestType<_>`\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}"}, {"sha": "d40ffc48a29f9fd1e2e371eda681bf9662615b13", "filename": "src/test/ui/coherence/coherence-impls-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -9,7 +9,7 @@ LL | impl Copy for i32 {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`\n+error[E0119]: conflicting implementations of trait `Copy` for type `&NotSync`\n   --> $DIR/coherence-impls-copy.rs:28:1\n    |\n LL | impl Copy for &'static NotSync {}"}, {"sha": "cd398426704cbbbaa63ba0cf0a600c714d19d882", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,10 +1,10 @@\n-error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`\n+error[E0119]: conflicting implementations of trait `Sweet` for type `Box<_>`\n   --> $DIR/coherence-overlap-issue-23516.rs:8:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here\n LL | impl<U:Sugar> Sweet for Box<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Box<_>`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n "}, {"sha": "94d242eaac431535afb552a361385f0047fd6476", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `Option<_>`\n   --> $DIR/coherence-projection-conflict-ty-param.rs:10:1\n    |\n LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n    | ---------------------------------------- first implementation here\n LL |\n LL | impl<T, U> Foo<T> for Option<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Option<_>`\n \n error: aborting due to previous error\n "}, {"sha": "89615f0fbc63b79da7af14f60d75a5be2f38d746", "filename": "src/test/ui/coherence/coherence-wasm-bindgen.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,11 +1,11 @@\n-error: conflicting implementations of trait `IntoWasmAbi` for type `&dyn std::ops::Fn(&_) -> _`\n+error: conflicting implementations of trait `IntoWasmAbi` for type `&dyn Fn(&_) -> _`\n   --> $DIR/coherence-wasm-bindgen.rs:28:1\n    |\n LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)\n    | ------------------------------------------------------------ first implementation here\n ...\n LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn for<'x> Fn(&'x A) -> R + 'b)\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&dyn std::ops::Fn(&_) -> _`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&dyn Fn(&_) -> _`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>"}, {"sha": "93486fa5f36050d40712fb40c5a4e8b8540c04e2", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFundamentalStruct<(MyType,)>`\n   --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:16:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyFundamentalStruct<(MyType,)>`\n    |\n    = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n "}, {"sha": "7432733b932a46bc61ecd43e837f69cf2a78b2ce", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyStruct<MyType>`\n   --> $DIR/coherence_copy_like_err_struct.rs:19:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }\n    | ---------------------------------- first implementation here\n ...\n LL | impl MyTrait for lib::MyStruct<MyType> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyStruct<MyType>`\n    |\n    = note: upstream crates may add a new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n "}, {"sha": "4ddd712b27c88b346f9f7f1a39ec1d4eaba4feb8", "filename": "src/test/ui/coherence/inter-crate-ambiguity-causes-notes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Finter-crate-ambiguity-causes-notes.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::From<()>` for type `S`\n+error[E0119]: conflicting implementations of trait `From<()>` for type `S`\n   --> $DIR/inter-crate-ambiguity-causes-notes.rs:9:1\n    |\n LL | impl From<()> for S {"}, {"sha": "4d2d8fb1303ce0fe877794a915417844c424b6f4", "filename": "src/test/ui/consts/invalid-inline-const-in-match-arm.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -0,0 +1,9 @@\n+#![allow(incomplete_features)]\n+#![feature(inline_const_pat)]\n+\n+fn main() {\n+    match () {\n+        const { (|| {})() } => {}\n+        //~^ ERROR cannot call non-const closure in constants\n+    }\n+}"}, {"sha": "ab594c921f91aca78df0fdda17132e2f45abea37", "filename": "src/test/ui/consts/invalid-inline-const-in-match-arm.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -0,0 +1,12 @@\n+error[E0015]: cannot call non-const closure in constants\n+  --> $DIR/invalid-inline-const-in-match-arm.rs:6:17\n+   |\n+LL |         const { (|| {})() } => {}\n+   |                 ^^^^^^^^^\n+   |\n+   = note: closures need an RFC before allowed to be called in constants\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "ef888a1c2871eacb2f1311396c1bc370606b1bc4", "filename": "src/test/ui/error-codes/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`\n+error[E0119]: conflicting implementations of trait `AsRef<Q>` for type `Box<Q>`\n   --> $DIR/conflict-with-std.rs:5:1\n    |\n LL | impl AsRef<Q> for Box<Q> {\n@@ -8,7 +8,7 @@ LL | impl AsRef<Q> for Box<Q> {\n            - impl<T, A> AsRef<T> for Box<T, A>\n              where A: Allocator, T: ?Sized;\n \n-error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`\n+error[E0119]: conflicting implementations of trait `From<S>` for type `S`\n   --> $DIR/conflict-with-std.rs:12:1\n    |\n LL | impl From<S> for S {\n@@ -17,7 +17,7 @@ LL | impl From<S> for S {\n    = note: conflicting implementation in crate `core`:\n            - impl<T> From<T> for T;\n \n-error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`\n+error[E0119]: conflicting implementations of trait `TryFrom<X>` for type `X`\n   --> $DIR/conflict-with-std.rs:19:1\n    |\n LL | impl TryFrom<X> for X {"}, {"sha": "1b2d64282e1e2e5f3e7e4e5c36ccf1fb56a8745c", "filename": "src/test/ui/error-codes/e0119/issue-23563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`\n+error[E0119]: conflicting implementations of trait `LolFrom<&[_]>` for type `LocalType<_>`\n   --> $DIR/issue-23563.rs:13:1\n    |\n LL | impl<'a, T> LolFrom<&'a [T]> for LocalType<T> {"}, {"sha": "9b3345c23bb2317e11721bcd90e2f45eba8dacc0", "filename": "src/test/ui/error-codes/e0119/issue-27403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`\n+error[E0119]: conflicting implementations of trait `Into<_>` for type `GenX<_>`\n   --> $DIR/issue-27403.rs:5:1\n    |\n LL | impl<S> Into<S> for GenX<S> {"}, {"sha": "99367e808419fa530aa47f28658c3e09332402f5", "filename": "src/test/ui/error-codes/e0119/so-37347311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`\n+error[E0119]: conflicting implementations of trait `From<MyError<_>>` for type `MyError<_>`\n   --> $DIR/so-37347311.rs:11:1\n    |\n LL | impl<S: Storage> From<S::Error> for MyError<S> {"}, {"sha": "960259080f739fc1022d6a42da345d28fb990d50", "filename": "src/test/ui/issues/issue-28568.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `MyStruct`\n+error[E0119]: conflicting implementations of trait `Drop` for type `MyStruct`\n   --> $DIR/issue-28568.rs:7:1\n    |\n LL | impl Drop for MyStruct {"}, {"sha": "57adc8ad5efc6f2c8e545eb35af1ede3c671d70c", "filename": "src/test/ui/issues/issue-43355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`\n+error[E0119]: conflicting implementations of trait `Trait1<Box<_>>` for type `A`\n   --> $DIR/issue-43355.rs:13:1\n    |\n LL | impl<X, T> Trait1<X> for T where T: Trait2<X> {"}, {"sha": "cbdc10bd2e1ea0ca74d4e9a7bfc63919e5e50df3", "filename": "src/test/ui/issues/issue-48728.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fissues%2Fissue-48728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fissues%2Fissue-48728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #48728, an ICE that occurred computing\n // coherence \"help\" information.\n \n-#[derive(Clone)] //~ ERROR conflicting implementations of trait `std::clone::Clone`\n+#[derive(Clone)] //~ ERROR conflicting implementations of trait `Clone`\n struct Node<T: ?Sized>(Box<T>);\n \n impl<T: Clone + ?Sized> Clone for Node<[T]> {"}, {"sha": "0bb46724f61661c7c3beea5a4461fcdab304bd45", "filename": "src/test/ui/issues/issue-48728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::clone::Clone` for type `Node<[_]>`\n+error[E0119]: conflicting implementations of trait `Clone` for type `Node<[_]>`\n   --> $DIR/issue-48728.rs:4:10\n    |\n LL | #[derive(Clone)]"}, {"sha": "553ab3869b338bf0ec89b9c82abf8b11241ff2e7", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,79 +1,79 @@\n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:5:1\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n LL |\n LL | impl Foo for dyn Send + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n    = note: `#[deny(order_dependent_trait_objects)]` on by default\n \n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n LL |\n LL | impl Foo for dyn Sync + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:15:1\n    |\n LL | impl Foo for dyn Sync + Send {}\n    | ---------------------------- first implementation here\n ...\n LL | impl Foo for dyn Send + Sync + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: aborting due to 3 previous errors\n \n Future incompatibility report: Future breakage diagnostic:\n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:5:1\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n LL |\n LL | impl Foo for dyn Send + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n    = note: `#[deny(order_dependent_trait_objects)]` on by default\n \n Future breakage diagnostic:\n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n LL |\n LL | impl Foo for dyn Sync + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n    = note: `#[deny(order_dependent_trait_objects)]` on by default\n \n Future breakage diagnostic:\n-error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+error: conflicting implementations of trait `Foo` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:15:1\n    |\n LL | impl Foo for dyn Sync + Send {}\n    | ---------------------------- first implementation here\n ...\n LL | impl Foo for dyn Send + Sync + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>"}, {"sha": "31de418be5f70c92c7eee114f51bc41268588bf4", "filename": "src/test/ui/parser/recover-fn-ptr-with-generics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -0,0 +1,31 @@\n+fn main() {\n+    type Predicate = fn<'a>(&'a str) -> bool;\n+    //~^ ERROR function pointer types may not have generic parameters\n+\n+    type Identity = fn<T>(T) -> T;\n+    //~^ ERROR function pointer types may not have generic parameters\n+    //~| ERROR cannot find type `T` in this scope\n+    //~| ERROR cannot find type `T` in this scope\n+\n+    let _: fn<const N: usize, 'e, Q, 'f>();\n+    //~^ ERROR function pointer types may not have generic parameters\n+\n+    let _: for<'outer> fn<'inner>();\n+    //~^ ERROR function pointer types may not have generic parameters\n+\n+    let _: for<> fn<'r>();\n+    //~^ ERROR function pointer types may not have generic parameters\n+\n+    type Hmm = fn<>();\n+    //~^ ERROR function pointer types may not have generic parameters\n+\n+    let _: extern fn<'a: 'static>();\n+    //~^ ERROR function pointer types may not have generic parameters\n+    //~| ERROR lifetime bounds cannot be used in this context\n+\n+    let _: for<'any> extern \"C\" fn<'u>();\n+    //~^ ERROR function pointer types may not have generic parameters\n+\n+    type QuiteBroken = fn<const>();\n+    //~^ ERROR expected identifier, found `>`\n+}"}, {"sha": "1da9c18571b9ea712b6dfe840f35bca6837ad5f5", "filename": "src/test/ui/parser/recover-fn-ptr-with-generics.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-fn-ptr-with-generics.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -0,0 +1,111 @@\n+error: function pointer types may not have generic parameters\n+  --> $DIR/recover-fn-ptr-with-generics.rs:2:24\n+   |\n+LL |     type Predicate = fn<'a>(&'a str) -> bool;\n+   |                        ^^^^\n+   |\n+help: consider moving the lifetime parameter to a `for` parameter list\n+   |\n+LL -     type Predicate = fn<'a>(&'a str) -> bool;\n+LL +     type Predicate = for<'a> fn(&'a str) -> bool;\n+   |\n+\n+error: function pointer types may not have generic parameters\n+  --> $DIR/recover-fn-ptr-with-generics.rs:5:23\n+   |\n+LL |     type Identity = fn<T>(T) -> T;\n+   |                       ^^^\n+\n+error: function pointer types may not have generic parameters\n+  --> $DIR/recover-fn-ptr-with-generics.rs:10:14\n+   |\n+LL |     let _: fn<const N: usize, 'e, Q, 'f>();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider moving the lifetime parameters to a `for` parameter list\n+   |\n+LL -     let _: fn<const N: usize, 'e, Q, 'f>();\n+LL +     let _: for<'e, 'f> fn();\n+   |\n+\n+error: function pointer types may not have generic parameters\n+  --> $DIR/recover-fn-ptr-with-generics.rs:13:26\n+   |\n+LL |     let _: for<'outer> fn<'inner>();\n+   |                          ^^^^^^^^\n+   |\n+help: consider moving the lifetime parameter to the `for` parameter list\n+   |\n+LL -     let _: for<'outer> fn<'inner>();\n+LL +     let _: for<'outer, 'inner> fn();\n+   |\n+\n+error: function pointer types may not have generic parameters\n+  --> $DIR/recover-fn-ptr-with-generics.rs:16:20\n+   |\n+LL |     let _: for<> fn<'r>();\n+   |                    ^^^^\n+   |\n+help: consider moving the lifetime parameter to the `for` parameter list\n+   |\n+LL -     let _: for<> fn<'r>();\n+LL +     let _: for<'r> fn();\n+   |\n+\n+error: function pointer types may not have generic parameters\n+  --> $DIR/recover-fn-ptr-with-generics.rs:19:18\n+   |\n+LL |     type Hmm = fn<>();\n+   |                  ^^\n+\n+error: function pointer types may not have generic parameters\n+  --> $DIR/recover-fn-ptr-with-generics.rs:22:21\n+   |\n+LL |     let _: extern fn<'a: 'static>();\n+   |                     ^^^^^^^^^^^^^\n+   |\n+help: consider moving the lifetime parameter to a `for` parameter list\n+   |\n+LL -     let _: extern fn<'a: 'static>();\n+LL +     let _: for<'a> extern fn();\n+   |\n+\n+error: function pointer types may not have generic parameters\n+  --> $DIR/recover-fn-ptr-with-generics.rs:26:35\n+   |\n+LL |     let _: for<'any> extern \"C\" fn<'u>();\n+   |                                   ^^^^\n+   |\n+help: consider moving the lifetime parameter to the `for` parameter list\n+   |\n+LL -     let _: for<'any> extern \"C\" fn<'u>();\n+LL +     let _: for<'any, 'u> extern \"C\" fn();\n+   |\n+\n+error: expected identifier, found `>`\n+  --> $DIR/recover-fn-ptr-with-generics.rs:29:32\n+   |\n+LL |     type QuiteBroken = fn<const>();\n+   |                                ^ expected identifier\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/recover-fn-ptr-with-generics.rs:22:26\n+   |\n+LL |     let _: extern fn<'a: 'static>();\n+   |                          ^^^^^^^\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/recover-fn-ptr-with-generics.rs:5:27\n+   |\n+LL |     type Identity = fn<T>(T) -> T;\n+   |                           ^ not found in this scope\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/recover-fn-ptr-with-generics.rs:5:33\n+   |\n+LL |     type Identity = fn<T>(T) -> T;\n+   |                                 ^ not found in this scope\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "36a09add4d3bbb9da95edc55c988b47dadd2ac1c", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -10,7 +10,7 @@ LL | impl const std::ops::Add for i32 {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0119]: conflicting implementations of trait `std::ops::Add` for type `Int`\n+error[E0119]: conflicting implementations of trait `Add` for type `Int`\n   --> $DIR/const-and-non-const-impl.rs:22:1\n    |\n LL | impl std::ops::Add for Int {"}, {"sha": "1fe4869ff548d25827cba8550b80a2abc73b84a2", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0751]: found both positive and negative implementation of trait `Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1\n    |\n LL | unsafe impl<T: Clone> Send for TestType<T> {}"}, {"sha": "098bf4a70ab48d099bf45cce4f311fb89fde2228", "filename": "src/test/ui/specialization/specialization-overlap.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -8,13 +8,13 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0119]: conflicting implementations of trait `Foo` for type `std::vec::Vec<_>`\n+error[E0119]: conflicting implementations of trait `Foo` for type `Vec<_>`\n   --> $DIR/specialization-overlap.rs:5:1\n    |\n LL | impl<T: Clone> Foo for T {}\n    | ------------------------ first implementation here\n LL | impl<T> Foo for Vec<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::vec::Vec<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Vec<_>`\n \n error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`\n   --> $DIR/specialization-overlap.rs:9:1"}, {"sha": "80a502c6335e268ef0cf96c6b9d8acd507c4e1fb", "filename": "src/test/ui/traits/issue-33140-hack-boundaries.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,34 +1,34 @@\n-error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:18:1\n    |\n LL | impl Trait1 for dyn Send {}\n    | ------------------------ first implementation here\n LL | impl Trait1 for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n \n-error[E0751]: found both positive and negative implementation of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n+error[E0751]: found both positive and negative implementation of trait `Trait2` for type `(dyn Send + 'static)`:\n   --> $DIR/issue-33140-hack-boundaries.rs:25:1\n    |\n LL | impl Trait2 for dyn Send {}\n    | ------------------------ positive implementation here\n LL | impl !Trait2 for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0119]: conflicting implementations of trait `Trait3<(dyn std::marker::Sync + 'static)>` for type `(dyn std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait3<(dyn Sync + 'static)>` for type `(dyn Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:32:1\n    |\n LL | impl Trait3<dyn Sync> for dyn Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait3<dyn Sync> for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:39:1\n    |\n LL | impl<T: ?Sized> Trait4a for T {}\n    | ----------------------------- first implementation here\n LL | impl Trait4a for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n \n error[E0119]: conflicting implementations of trait `Trait4b` for type `()`\n   --> $DIR/issue-33140-hack-boundaries.rs:46:1\n@@ -38,42 +38,42 @@ LL | impl Trait4b for () {}\n LL | impl Trait4b for () {}\n    | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n \n-error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:53:1\n    |\n LL | impl Trait4c for dyn Trait1 + Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait4c for dyn Trait1 + Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Trait1 + std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Trait1 + Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn std::marker::Send`\n+error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn Send`\n   --> $DIR/issue-33140-hack-boundaries.rs:60:1\n    |\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n    | ---------------------------------- first implementation here\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `dyn std::marker::Send`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `dyn Send`\n \n-error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn std::marker::Send + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:67:1\n    |\n LL | impl Trait5 for dyn Send {}\n    | ------------------------ first implementation here\n LL | impl Trait5 for dyn Send where u32: Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n \n error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`.\n Future incompatibility report: Future breakage diagnostic:\n-warning: conflicting implementations of trait `Trait0` for type `(dyn std::marker::Send + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait0` for type `(dyn Send + 'static)`: (E0119)\n   --> $DIR/issue-33140-hack-boundaries.rs:10:1\n    |\n LL | impl Trait0 for dyn Send {}\n    | ------------------------ first implementation here\n LL | impl Trait0 for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>"}, {"sha": "d31281f7256e05be8586164de7978bffb0d7393f", "filename": "src/test/ui/traits/issue-33140.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,20 +1,20 @@\n-error[E0119]: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`\n   --> $DIR/issue-33140.rs:9:1\n    |\n LL | impl Trait for dyn Send + Sync {\n    | ------------------------------ first implementation here\n ...\n LL | impl Trait for dyn Sync + Send {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn Send + Sync + 'static)`\n   --> $DIR/issue-33140.rs:22:1\n    |\n LL | impl Trait2 for dyn Send + Sync {\n    | ------------------------------- first implementation here\n ...\n LL | impl Trait2 for dyn Sync + Send + Sync {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n \n error[E0592]: duplicate definitions with name `abc`\n   --> $DIR/issue-33140.rs:29:5"}, {"sha": "a87acb1fb09769768e66f98798ee56cd8e55bcda", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0751]: found both positive and negative implementation of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n+error[E0751]: found both positive and negative implementation of trait `Clone` for type `&mut MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-clone.rs:7:1\n    |\n LL | impl<'a> Clone for &'a mut MyType<'a> {"}, {"sha": "9185e8f8430bf57ef77bf51e3accea15e29c53a8", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0751]: found both positive and negative implementation of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n+error[E0751]: found both positive and negative implementation of trait `DerefMut` for type `&MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-derefmut.rs:12:1\n    |\n LL | impl<'a> DerefMut for &'a MyType<'a> {"}, {"sha": "525401f9d69ece487e4be2bfcdfcafd621cc3289", "filename": "src/test/ui/traits/object/issue-33140-traitobject-crate.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,10 +1,10 @@\n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:86:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n    | ------------------------------------------------------ first implementation here\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n@@ -14,40 +14,40 @@ note: the lint level is defined here\n LL | #![warn(order_dependent_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:89:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n    | ------------------------------------------------------------- first implementation here\n ...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:93:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n    | ------------------------------------------------------ first implementation here\n ...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n warning: 3 warnings emitted\n \n Future incompatibility report: Future breakage diagnostic:\n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:86:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n    | ------------------------------------------------------ first implementation here\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n@@ -58,14 +58,14 @@ LL | #![warn(order_dependent_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Future breakage diagnostic:\n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:89:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n    | ------------------------------------------------------------- first implementation here\n ...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n@@ -76,14 +76,14 @@ LL | #![warn(order_dependent_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Future breakage diagnostic:\n-warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+warning: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:93:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n    | ------------------------------------------------------ first implementation here\n ...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>"}, {"sha": "e24ed695dc55cc1e3523d32e61de22aab65dd5b2", "filename": "src/test/ui/traits/overlap-not-permitted-for-builtin-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `MyStruct`\n+error[E0119]: conflicting implementations of trait `Send` for type `MyStruct`\n   --> $DIR/overlap-not-permitted-for-builtin-trait.rs:7:1\n    |\n LL | impl !Send for MyStruct {}"}, {"sha": "02c364dabf960cbc72b10e2edd0ca52bb2f45dc6", "filename": "src/tools/x/src/main.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101e1822c3e54e63996c8aaa014d55716f3937eb/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=101e1822c3e54e63996c8aaa014d55716f3937eb", "patch": "@@ -8,7 +8,8 @@\n //! `x.py`, in that order of preference.\n \n use std::{\n-    env, io,\n+    env::{self, consts::EXE_EXTENSION},\n+    io,\n     process::{self, Command, ExitStatus},\n };\n \n@@ -27,12 +28,12 @@ fn python() -> &'static str {\n \n     for dir in env::split_paths(&val) {\n         // `python` should always take precedence over python2 / python3 if it exists\n-        if dir.join(PYTHON).exists() {\n+        if dir.join(PYTHON).with_extension(EXE_EXTENSION).exists() {\n             return PYTHON;\n         }\n \n-        python2 |= dir.join(PYTHON2).exists();\n-        python3 |= dir.join(PYTHON3).exists();\n+        python2 |= dir.join(PYTHON2).with_extension(EXE_EXTENSION).exists();\n+        python3 |= dir.join(PYTHON3).with_extension(EXE_EXTENSION).exists();\n     }\n \n     // try 3 before 2"}]}