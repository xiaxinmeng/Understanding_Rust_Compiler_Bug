{"sha": "2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYzViMDg0YTBmZGJkMDhlY2M4NzNiZTMzYmFmZDA4ZDRmYWYyNzM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-27T19:32:04Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T13:31:56Z"}, "message": "Clarify meaning of Build.cargo, Build.rustc.\n\nRename Build.{cargo, rustc} to {initial_cargo, initial_rustc}.", "tree": {"sha": "9da7f6f297cb62649ad0d4d4cf92ad28d5d4e1bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da7f6f297cb62649ad0d4d4cf92ad28d5d4e1bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "html_url": "https://github.com/rust-lang/rust/commit/2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "743af95d4be6423a4123aa81bf587756d006ed9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/743af95d4be6423a4123aa81bf587756d006ed9c", "html_url": "https://github.com/rust-lang/rust/commit/743af95d4be6423a4123aa81bf587756d006ed9c"}], "stats": {"total": 91, "additions": 50, "deletions": 41}, "files": [{"sha": "04ae7e1e0092104fe86676f640b6acf843fd5351", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "patch": "@@ -109,7 +109,7 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let _time = util::timeit();\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n     build.prepare_tool_cmd(&compiler, &mut cmd);\n-    try_run(build, cmd.arg(&build.cargo)\n+    try_run(build, cmd.arg(&build.initial_cargo)\n                       .arg(&out_dir)\n                       .env(\"RUSTC\", build.compiler_path(&compiler))\n                       .env(\"RUSTDOC\", build.rustdoc(&compiler)));\n@@ -654,7 +654,7 @@ pub fn distcheck(build: &Build) {\n     build.run(&mut cmd);\n \n     let toml = dir.join(\"rust-src/lib/rustlib/src/rust/src/libstd/Cargo.toml\");\n-    build.run(Command::new(&build.cargo)\n+    build.run(Command::new(&build.initial_cargo)\n                      .arg(\"generate-lockfile\")\n                      .arg(\"--manifest-path\")\n                      .arg(&toml)\n@@ -663,12 +663,12 @@ pub fn distcheck(build: &Build) {\n \n /// Test the build system itself\n pub fn bootstrap(build: &Build) {\n-    let mut cmd = Command::new(&build.cargo);\n+    let mut cmd = Command::new(&build.initial_cargo);\n     cmd.arg(\"test\")\n        .current_dir(build.src.join(\"src/bootstrap\"))\n        .env(\"CARGO_TARGET_DIR\", build.out.join(\"bootstrap\"))\n        .env(\"RUSTC_BOOTSTRAP\", \"1\")\n-       .env(\"RUSTC\", &build.rustc);\n+       .env(\"RUSTC\", &build.initial_rustc);\n     if build.flags.cmd.no_fail_fast() {\n         cmd.arg(\"--no-fail-fast\");\n     }"}, {"sha": "34628852ab3773a2ff50bc051d77231bfd96b438", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "patch": "@@ -81,8 +81,6 @@ pub struct Config {\n     pub build: String,\n     pub host: Vec<String>,\n     pub target: Vec<String>,\n-    pub rustc: Option<PathBuf>,\n-    pub cargo: Option<PathBuf>,\n     pub local_rebuild: bool,\n \n     // dist misc\n@@ -114,6 +112,12 @@ pub struct Config {\n     pub python: Option<PathBuf>,\n     pub configure_args: Vec<String>,\n     pub openssl_static: bool,\n+\n+\n+    // These are either the stage0 downloaded binaries or the locally installed ones.\n+    pub initial_cargo: PathBuf,\n+    pub initial_rustc: PathBuf,\n+\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -308,8 +312,6 @@ impl Config {\n                 config.target.push(target.clone());\n             }\n         }\n-        config.rustc = build.rustc.map(PathBuf::from);\n-        config.cargo = build.cargo.map(PathBuf::from);\n         config.nodejs = build.nodejs.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n@@ -411,6 +413,18 @@ impl Config {\n             set(&mut config.rust_dist_src, t.src_tarball);\n         }\n \n+        let cwd = t!(env::current_dir());\n+        let out = cwd.join(\"build\");\n+\n+        let stage0_root = out.join(&config.build).join(\"stage0/bin\");\n+        config.initial_rustc = match build.rustc {\n+            Some(s) => PathBuf::from(s),\n+            None => stage0_root.join(exe(\"rustc\", &config.build)),\n+        };\n+        config.initial_cargo = match build.cargo {\n+            Some(s) => PathBuf::from(s),\n+            None => stage0_root.join(exe(\"cargo\", &config.build)),\n+        };\n \n         // compat with `./configure` while we're still using that\n         if fs::metadata(\"config.mk\").is_ok() {\n@@ -610,8 +624,8 @@ impl Config {\n                 }\n                 \"CFG_LOCAL_RUST_ROOT\" if value.len() > 0 => {\n                     let path = parse_configure_path(value);\n-                    self.rustc = Some(push_exe_path(path.clone(), &[\"bin\", \"rustc\"]));\n-                    self.cargo = Some(push_exe_path(path, &[\"bin\", \"cargo\"]));\n+                    self.initial_rustc = push_exe_path(path.clone(), &[\"bin\", \"rustc\"]);\n+                    self.initial_cargo = push_exe_path(path, &[\"bin\", \"cargo\"]);\n                 }\n                 \"CFG_PYTHON\" if value.len() > 0 => {\n                     let path = parse_configure_path(value);"}, {"sha": "c91d6f0b77cbd69bbdfc8cf22c838b5f71552240", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "patch": "@@ -626,23 +626,23 @@ pub fn plain_source_tarball(build: &Build) {\n     if build.src_is_git {\n         // Get cargo-vendor installed, if it isn't already.\n         let mut has_cargo_vendor = false;\n-        let mut cmd = Command::new(&build.cargo);\n+        let mut cmd = Command::new(&build.initial_cargo);\n         for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n             has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n         }\n         if !has_cargo_vendor {\n-            let mut cmd = Command::new(&build.cargo);\n+            let mut cmd = Command::new(&build.initial_cargo);\n             cmd.arg(\"install\")\n                .arg(\"--force\")\n                .arg(\"--debug\")\n                .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n                .arg(\"cargo-vendor\")\n-               .env(\"RUSTC\", &build.rustc);\n+               .env(\"RUSTC\", &build.initial_rustc);\n             build.run(&mut cmd);\n         }\n \n         // Vendor all Cargo dependencies\n-        let mut cmd = Command::new(&build.cargo);\n+        let mut cmd = Command::new(&build.initial_cargo);\n         cmd.arg(\"vendor\")\n            .current_dir(&plain_dst_src.join(\"src\"));\n         build.run(&mut cmd);"}, {"sha": "4541b6623c493a829e0d225c12acd7f49c3c3bce", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "patch": "@@ -35,7 +35,7 @@ pub struct Flags {\n     pub host: Vec<String>,\n     pub target: Vec<String>,\n     pub config: Option<PathBuf>,\n-    pub src: Option<PathBuf>,\n+    pub src: PathBuf,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n@@ -319,6 +319,11 @@ Arguments:\n             stage = Some(1);\n         }\n \n+        let cwd = t!(env::current_dir());\n+        let src = matches.opt_str(\"src\").map(PathBuf::from)\n+            .or_else(|| env::var_os(\"SRC\").map(PathBuf::from))\n+            .unwrap_or(cwd);\n+\n         Flags {\n             verbose: matches.opt_count(\"verbose\"),\n             stage: stage,\n@@ -330,7 +335,7 @@ Arguments:\n             host: split(matches.opt_strs(\"host\")),\n             target: split(matches.opt_strs(\"target\")),\n             config: cfg_file,\n-            src: matches.opt_str(\"src\").map(PathBuf::from),\n+            src: src,\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n             cmd: cmd,\n             incremental: matches.opt_present(\"incremental\"),"}, {"sha": "bb82e711d7bf0ae78e462932719395fa2584134d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "patch": "@@ -161,15 +161,17 @@ pub struct Build {\n     flags: Flags,\n \n     // Derived properties from the above two configurations\n-    cargo: PathBuf,\n-    rustc: PathBuf,\n     src: PathBuf,\n     out: PathBuf,\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n     rls_info: channel::GitInfo,\n     local_rebuild: bool,\n \n+    // Stage 0 (downloaded) compiler and cargo or their local rust equivalents.\n+    initial_rustc: PathBuf,\n+    initial_cargo: PathBuf,\n+\n     // Probed tools at runtime\n     lldb_version: Option<String>,\n     lldb_python_dir: Option<String>,\n@@ -224,22 +226,9 @@ impl Build {\n     /// By default all build output will be placed in the current directory.\n     pub fn new(flags: Flags, config: Config) -> Build {\n         let cwd = t!(env::current_dir());\n-        let src = flags.src.clone().or_else(|| {\n-            env::var_os(\"SRC\").map(|x| x.into())\n-        }).unwrap_or(cwd.clone());\n+        let src = flags.src.clone();\n         let out = cwd.join(\"build\");\n \n-        let stage0_root = out.join(&config.build).join(\"stage0/bin\");\n-        let rustc = match config.rustc {\n-            Some(ref s) => PathBuf::from(s),\n-            None => stage0_root.join(exe(\"rustc\", &config.build)),\n-        };\n-        let cargo = match config.cargo {\n-            Some(ref s) => PathBuf::from(s),\n-            None => stage0_root.join(exe(\"cargo\", &config.build)),\n-        };\n-        let local_rebuild = config.local_rebuild;\n-\n         let is_sudo = match env::var_os(\"SUDO_USER\") {\n             Some(sudo_user) => {\n                 match env::var_os(\"USER\") {\n@@ -255,17 +244,18 @@ impl Build {\n         let src_is_git = src.join(\".git\").exists();\n \n         Build {\n+            initial_rustc: config.initial_rustc.clone(),\n+            initial_cargo: config.initial_cargo.clone(),\n+            local_rebuild: config.local_rebuild,\n+\n             flags: flags,\n             config: config,\n-            cargo: cargo,\n-            rustc: rustc,\n             src: src,\n             out: out,\n \n             rust_info: rust_info,\n             cargo_info: cargo_info,\n             rls_info: rls_info,\n-            local_rebuild: local_rebuild,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             crates: HashMap::new(),\n@@ -294,7 +284,7 @@ impl Build {\n         sanity::check(self);\n         // If local-rust is the same major.minor as the current version, then force a local-rebuild\n         let local_version_verbose = output(\n-            Command::new(&self.rustc).arg(\"--version\").arg(\"--verbose\"));\n+            Command::new(&self.initial_rustc).arg(\"--version\").arg(\"--verbose\"));\n         let local_release = local_version_verbose\n             .lines().filter(|x| x.starts_with(\"release:\"))\n             .next().unwrap().trim_left_matches(\"release:\").trim();\n@@ -336,7 +326,7 @@ impl Build {\n              mode: Mode,\n              target: &str,\n              cmd: &str) -> Command {\n-        let mut cargo = Command::new(&self.cargo);\n+        let mut cargo = Command::new(&self.initial_cargo);\n         let out_dir = self.stage_out(compiler, mode);\n         cargo.env(\"CARGO_TARGET_DIR\", out_dir)\n              .arg(cmd)\n@@ -420,7 +410,7 @@ impl Build {\n         // library up and running, so we can use the normal compiler to compile\n         // build scripts in that situation.\n         if mode == Mode::Libstd {\n-            cargo.env(\"RUSTC_SNAPSHOT\", &self.rustc)\n+            cargo.env(\"RUSTC_SNAPSHOT\", &self.initial_rustc)\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());\n         } else {\n             cargo.env(\"RUSTC_SNAPSHOT\", self.compiler_path(compiler))\n@@ -500,7 +490,7 @@ impl Build {\n     /// Get a path to the compiler specified.\n     fn compiler_path(&self, compiler: &Compiler) -> PathBuf {\n         if compiler.is_snapshot(self) {\n-            self.rustc.clone()\n+            self.initial_rustc.clone()\n         } else {\n             self.sysroot(compiler).join(\"bin\").join(exe(\"rustc\", compiler.host))\n         }\n@@ -758,7 +748,7 @@ impl Build {\n \n     /// Returns the libdir of the snapshot compiler.\n     fn rustc_snapshot_libdir(&self) -> PathBuf {\n-        self.rustc.parent().unwrap().parent().unwrap()\n+        self.initial_rustc.parent().unwrap().parent().unwrap()\n             .join(libdir(&self.config.build))\n     }\n "}, {"sha": "9326bb7129afa7f59d50d8d72360fc3eaea2271f", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc5b084a0fdbd08ecc873be33bafd08d4faf273/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=2cc5b084a0fdbd08ecc873be33bafd08d4faf273", "patch": "@@ -56,7 +56,7 @@ fn build_krate(build: &mut Build, krate: &str) {\n     // of packages we're going to have to know what `-p` arguments to pass it\n     // to know what crates to test. Here we run `cargo metadata` to learn about\n     // the dependency graph and what `-p` arguments there are.\n-    let mut cargo = Command::new(&build.cargo);\n+    let mut cargo = Command::new(&build.initial_cargo);\n     cargo.arg(\"metadata\")\n          .arg(\"--format-version\").arg(\"1\")\n          .arg(\"--manifest-path\").arg(build.src.join(krate).join(\"Cargo.toml\"));"}]}