{"sha": "5af318bd563345c0205dfd1060e90c0368054dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjMxOGJkNTYzMzQ1YzAyMDVkZmQxMDYwZTkwYzAzNjgwNTRkYzY=", "commit": {"author": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-05-27T13:51:44Z"}, "committer": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-07-25T19:30:08Z"}, "message": "rustc: codegen: Build import library for all windows targets\n\nSo far it is assumed that using a DLL as a -l parameter argument is ok,\nbut the assumption doesn't hold when compiling the native code with\nllvm.\nIn which case, an import library is required, so let's build one\nThis also requires the cargo counterpart to add the import library in\nthe stamp files, at least when compiling libstd. Otherwise, the files\ndon't get uplifted", "tree": {"sha": "585494d6139a78031f0fa59b7ffcdaa0bd858a5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/585494d6139a78031f0fa59b7ffcdaa0bd858a5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af318bd563345c0205dfd1060e90c0368054dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af318bd563345c0205dfd1060e90c0368054dc6", "html_url": "https://github.com/rust-lang/rust/commit/5af318bd563345c0205dfd1060e90c0368054dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af318bd563345c0205dfd1060e90c0368054dc6/comments", "author": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c", "html_url": "https://github.com/rust-lang/rust/commit/eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "60138e701bdbb539cb2bfb38dd76b0e6c3ec7549", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5af318bd563345c0205dfd1060e90c0368054dc6/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af318bd563345c0205dfd1060e90c0368054dc6/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5af318bd563345c0205dfd1060e90c0368054dc6", "patch": "@@ -1126,6 +1126,7 @@ pub fn run_cargo(builder: &Builder<'_>,\n             // Skip files like executables\n             if !filename.ends_with(\".rlib\") &&\n                !filename.ends_with(\".lib\") &&\n+               !filename.ends_with(\".a\") &&\n                !is_dylib(&filename) &&\n                !(is_check && filename.ends_with(\".rmeta\")) {\n                 continue;"}, {"sha": "cb8870d0be90cb234d7ed53d3c75e41a04d8ca5c", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5af318bd563345c0205dfd1060e90c0368054dc6/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af318bd563345c0205dfd1060e90c0368054dc6/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=5af318bd563345c0205dfd1060e90c0368054dc6", "patch": "@@ -368,6 +368,26 @@ impl<'a> Linker for GccLinker<'a> {\n             }\n         } else {\n             self.cmd.arg(\"-shared\");\n+            if self.sess.target.target.options.is_like_windows {\n+                // The output filename already contains `dll_suffix` so\n+                // the resulting import library will have a name in the\n+                // form of libfoo.dll.a\n+                let implib_name = out_filename\n+                    .file_name()\n+                    .and_then(|file| file.to_str())\n+                    .map(|file| format!(\"{}{}{}\",\n+                         self.sess.target.target.options.staticlib_prefix,\n+                         file,\n+                         self.sess.target.target.options.staticlib_suffix));\n+                if let Some(implib_name) = implib_name {\n+                    let implib = out_filename\n+                        .parent()\n+                        .map(|dir| dir.join(&implib_name));\n+                    if let Some(implib) = implib {\n+                        self.linker_arg(&format!(\"--out-implib,{}\", (*implib).to_str().unwrap()));\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "ffd3e6da25633a65bdea0cb0ec2dbdff6c685709", "filename": "src/test/run-make-fulldeps/output-type-permutations/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af318bd563345c0205dfd1060e90c0368054dc6/src%2Ftest%2Frun-make-fulldeps%2Foutput-type-permutations%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5af318bd563345c0205dfd1060e90c0368054dc6/src%2Ftest%2Frun-make-fulldeps%2Foutput-type-permutations%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Foutput-type-permutations%2FMakefile?ref=5af318bd563345c0205dfd1060e90c0368054dc6", "patch": "@@ -5,7 +5,7 @@ all:\n \t$(call REMOVE_RLIBS,bar)\n \t$(call REMOVE_DYLIBS,bar)\n \trm $(call STATICLIB,bar)\n-\trm -f $(TMPDIR)/bar.{dll.exp,dll.lib,pdb}\n+\trm -f $(TMPDIR)/{lib,}bar.{dll.exp,dll.lib,pdb,dll.a}\n \t# Check that $(TMPDIR) is empty.\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n@@ -78,8 +78,8 @@ all:\n \trm $(TMPDIR)/$(call BIN,foo)\n \t$(RUSTC) foo.rs --crate-type=dylib --emit=link=$(TMPDIR)/$(call BIN,foo)\n \trm $(TMPDIR)/$(call BIN,foo)\n-\trm -f $(TMPDIR)/foo.{dll.exp,dll.lib,pdb}\n-\t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n+\trm -f $(TMPDIR)/{lib,}foo.{dll.exp,dll.lib,pdb,dll.a,exe.lib}\n+\t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ] || (ls -1 $(TMPDIR) && exit 1)\n \n \t$(RUSTC) foo.rs --crate-type=staticlib -o $(TMPDIR)/foo\n \trm $(TMPDIR)/foo"}]}