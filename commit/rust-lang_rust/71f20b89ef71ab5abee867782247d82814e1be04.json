{"sha": "71f20b89ef71ab5abee867782247d82814e1be04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjIwYjg5ZWY3MWFiNWFiZWU4Njc3ODIyNDdkODI4MTRlMWJlMDQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-27T21:28:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-27T21:28:40Z"}, "message": "Rollup merge of #66718 - VirrageS:use_comma, r=Centril\n\nRefactor `parse_enum_item` to use `parse_delim_comma_seq`\n\nFollowup after https://github.com/rust-lang/rust/pull/66641\n\nSome errors got more verbose but I think they make sense with the help message.", "tree": {"sha": "c733508e502ad96e3ffd0399999bef938ad424b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c733508e502ad96e3ffd0399999bef938ad424b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f20b89ef71ab5abee867782247d82814e1be04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3uqJCRBK7hj4Ov3rIwAAdHIIAEzfSjeW76nwcXfPNlEC3AbR\ncJ9SvEtQlYC8m2vKLrgdYRAj4tS+j0bfwjq4wb1Iu/prh5wPr1ji/kDZf/I8Kxx0\nCqaE9+RXqPg7HH6FCdakkzvInrTQfT0O+J1GkYxEkDCBOI4lQMJ2vCF/Cym4DSKZ\nDMHQoHVe6ST//OliZqKbRYezvu96U5uxJn7xJP25jpssHP/OZ67NDdszuGRGuZWT\n5dt4ANnAb4b7YupkJ0TSAruQDzd64O/5Gk5QQpsTzwajE0HozaqnVZOAwEEPdLcZ\nma40D1ipzi2RR3KDtpw6qECaIvY4vk4ULiXgTCWZchPRmNetnh6G+GJFc2UB4EQ=\n=yyuk\n-----END PGP SIGNATURE-----\n", "payload": "tree c733508e502ad96e3ffd0399999bef938ad424b2\nparent ddb616df907acfcd6ff3339738f9f5d072967490\nparent 5c34a11324b060b0492eb390c7e9b2abc9eb61a4\nauthor Tyler Mandry <tmandry@gmail.com> 1574890120 -0600\ncommitter GitHub <noreply@github.com> 1574890120 -0600\n\nRollup merge of #66718 - VirrageS:use_comma, r=Centril\n\nRefactor `parse_enum_item` to use `parse_delim_comma_seq`\n\nFollowup after https://github.com/rust-lang/rust/pull/66641\n\nSome errors got more verbose but I think they make sense with the help message.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f20b89ef71ab5abee867782247d82814e1be04", "html_url": "https://github.com/rust-lang/rust/commit/71f20b89ef71ab5abee867782247d82814e1be04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f20b89ef71ab5abee867782247d82814e1be04/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddb616df907acfcd6ff3339738f9f5d072967490", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb616df907acfcd6ff3339738f9f5d072967490", "html_url": "https://github.com/rust-lang/rust/commit/ddb616df907acfcd6ff3339738f9f5d072967490"}, {"sha": "5c34a11324b060b0492eb390c7e9b2abc9eb61a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c34a11324b060b0492eb390c7e9b2abc9eb61a4", "html_url": "https://github.com/rust-lang/rust/commit/5c34a11324b060b0492eb390c7e9b2abc9eb61a4"}], "stats": {"total": 216, "additions": 124, "deletions": 92}, "files": [{"sha": "c613d361d39a85d229748716b515a460f6f6e485", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 47, "deletions": 68, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -7,7 +7,7 @@ use syntax::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, An\n use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n-use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, VariantData, StructField};\n+use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, Variant, VariantData, StructField};\n use syntax::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n use syntax::print::pprust;\n use syntax::ptr::P;\n@@ -1329,85 +1329,65 @@ impl<'a> Parser<'a> {\n         let id = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n         generics.where_clause = self.parse_where_clause()?;\n-        self.expect(&token::OpenDelim(token::Brace))?;\n \n-        let enum_definition = self.parse_enum_def(&generics).map_err(|e| {\n+        let (variants, _) = self.parse_delim_comma_seq(\n+            token::Brace,\n+            |p| p.parse_enum_item(),\n+        ).map_err(|e| {\n             self.recover_stmt();\n-            self.eat(&token::CloseDelim(token::Brace));\n             e\n         })?;\n+\n+        let enum_definition = EnumDef {\n+            variants: variants.into_iter().filter_map(|v| v).collect(),\n+        };\n         Ok((id, ItemKind::Enum(enum_definition, generics), None))\n     }\n \n-    /// Parses the part of an enum declaration following the `{`.\n-    fn parse_enum_def(&mut self, _generics: &Generics) -> PResult<'a, EnumDef> {\n-        let mut variants = Vec::new();\n-        // FIXME: Consider using `parse_delim_comma_seq`.\n-        // We could then remove eating comma in `recover_nested_adt_item`.\n-        while self.token != token::CloseDelim(token::Brace) {\n-            let variant_attrs = self.parse_outer_attributes()?;\n-            let vlo = self.token.span;\n-\n-            let vis = self.parse_visibility(FollowedByType::No)?;\n-            if !self.recover_nested_adt_item(kw::Enum)? {\n-                // Item already parsed, we need to skip this variant.\n-                continue\n-            }\n-            let ident = self.parse_ident()?;\n+    fn parse_enum_item(&mut self) -> PResult<'a, Option<Variant>> {\n+        let variant_attrs = self.parse_outer_attributes()?;\n+        let vlo = self.token.span;\n \n-            let struct_def = if self.check(&token::OpenDelim(token::Brace)) {\n-                // Parse a struct variant.\n-                let (fields, recovered) = self.parse_record_struct_body()?;\n-                VariantData::Struct(fields, recovered)\n-            } else if self.check(&token::OpenDelim(token::Paren)) {\n-                VariantData::Tuple(\n-                    self.parse_tuple_struct_body()?,\n-                    DUMMY_NODE_ID,\n-                )\n-            } else {\n-                VariantData::Unit(DUMMY_NODE_ID)\n-            };\n+        let vis = self.parse_visibility(FollowedByType::No)?;\n+        if !self.recover_nested_adt_item(kw::Enum)? {\n+            return Ok(None)\n+        }\n+        let ident = self.parse_ident()?;\n \n-            let disr_expr = if self.eat(&token::Eq) {\n-                Some(AnonConst {\n-                    id: DUMMY_NODE_ID,\n-                    value: self.parse_expr()?,\n-                })\n-            } else {\n-                None\n-            };\n+        let struct_def = if self.check(&token::OpenDelim(token::Brace)) {\n+            // Parse a struct variant.\n+            let (fields, recovered) = self.parse_record_struct_body()?;\n+            VariantData::Struct(fields, recovered)\n+        } else if self.check(&token::OpenDelim(token::Paren)) {\n+            VariantData::Tuple(\n+                self.parse_tuple_struct_body()?,\n+                DUMMY_NODE_ID,\n+            )\n+        } else {\n+            VariantData::Unit(DUMMY_NODE_ID)\n+        };\n \n-            let vr = ast::Variant {\n-                ident,\n-                vis,\n+        let disr_expr = if self.eat(&token::Eq) {\n+            Some(AnonConst {\n                 id: DUMMY_NODE_ID,\n-                attrs: variant_attrs,\n-                data: struct_def,\n-                disr_expr,\n-                span: vlo.to(self.prev_span),\n-                is_placeholder: false,\n-            };\n-            variants.push(vr);\n+                value: self.parse_expr()?,\n+            })\n+        } else {\n+            None\n+        };\n \n-            if !self.eat(&token::Comma) {\n-                if self.token.is_ident() && !self.token.is_reserved_ident() {\n-                    let sp = self.sess.source_map().next_point(self.prev_span);\n-                    self.struct_span_err(sp, \"missing comma\")\n-                        .span_suggestion_short(\n-                            sp,\n-                            \"missing comma\",\n-                            \",\".to_owned(),\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .emit();\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-        self.expect(&token::CloseDelim(token::Brace))?;\n+        let vr = ast::Variant {\n+            ident,\n+            vis,\n+            id: DUMMY_NODE_ID,\n+            attrs: variant_attrs,\n+            data: struct_def,\n+            disr_expr,\n+            span: vlo.to(self.prev_span),\n+            is_placeholder: false,\n+        };\n \n-        Ok(ast::EnumDef { variants })\n+        Ok(Some(vr))\n     }\n \n     /// Parses `struct Foo { ... }`.\n@@ -1764,7 +1744,6 @@ impl<'a> Parser<'a> {\n             let kw_token = self.token.clone();\n             let kw_str = pprust::token_to_string(&kw_token);\n             let item = self.parse_item()?;\n-            self.eat(&token::Comma);\n \n             self.struct_span_err(\n                 kw_token.span,"}, {"sha": "ea7673767d07e811e76077eff81625edae754093", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -805,21 +805,39 @@ impl<'a> Parser<'a> {\n                             recovered = true;\n                             break;\n                         }\n-                        Err(mut e) => {\n+                        Err(mut expect_err) => {\n+                            let sp = self.sess.source_map().next_point(self.prev_span);\n+                            let token_str = pprust::token_kind_to_string(t);\n+\n                             // Attempt to keep parsing if it was a similar separator.\n                             if let Some(ref tokens) = t.similar_tokens() {\n                                 if tokens.contains(&self.token.kind) {\n                                     self.bump();\n                                 }\n                             }\n-                            e.emit();\n+\n                             // Attempt to keep parsing if it was an omitted separator.\n                             match f(self) {\n                                 Ok(t) => {\n+                                    // Parsed successfully, therefore most probably the code only\n+                                    // misses a separator.\n+                                    expect_err\n+                                        .span_suggestion_short(\n+                                            sp,\n+                                            &format!(\"missing `{}`\", token_str),\n+                                            token_str,\n+                                            Applicability::MaybeIncorrect,\n+                                        )\n+                                        .emit();\n+\n                                     v.push(t);\n                                     continue;\n                                 },\n                                 Err(mut e) => {\n+                                    // Parsing failed, therefore it must be something more serious\n+                                    // than just a missing separator.\n+                                    expect_err.emit();\n+\n                                     e.cancel();\n                                     break;\n                                 }"}, {"sha": "2e1d484e05a5a4d8fa670382efda5fee6b1531a4", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -2,7 +2,10 @@ error: expected one of `)` or `,`, found `label`\n   --> $DIR/expected-comma-found-token.rs:9:5\n    |\n LL |     message=\"the message\"\n-   |                          - expected one of `)` or `,`\n+   |                          -\n+   |                          |\n+   |                          expected one of `)` or `,`\n+   |                          help: missing `,`\n LL |     label=\"the label\"\n    |     ^^^^^ unexpected token\n "}, {"sha": "fe9603cb57f1f094905a57f57ec4179dece68ffb", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -2,7 +2,10 @@ error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-6.rs:5:19\n    |\n LL |     let Test(&desc[..]) = x;\n-   |                   ^ expected one of `)`, `,`, `@`, or `|`\n+   |                   ^\n+   |                   |\n+   |                   expected one of `)`, `,`, `@`, or `|`\n+   |                   help: missing `,`\n \n error[E0658]: subslice patterns are unstable\n   --> $DIR/pat-lt-bracket-6.rs:5:20"}, {"sha": "004dcfb2a7b2d0a9ce63225583cf611a968d4ecf", "filename": "src/test/ui/parser/pat-lt-bracket-7.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -2,7 +2,10 @@ error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-7.rs:5:16\n    |\n LL |     for Thing(x[]) in foo {}\n-   |                ^ expected one of `)`, `,`, `@`, or `|`\n+   |                ^\n+   |                |\n+   |                expected one of `)`, `,`, `@`, or `|`\n+   |                help: missing `,`\n \n error[E0308]: mismatched types\n   --> $DIR/pat-lt-bracket-7.rs:9:30"}, {"sha": "08dd939e2c023f7f3290a796d02f4bc9e005b1cb", "filename": "src/test/ui/parser/recover-enum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum.rs?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n     enum Test {\n-        Very\n-        //~^ ERROR missing comma\n-        Bad(usize)\n-        //~^ ERROR missing comma\n-        Stuff { a: usize }\n-        //~^ ERROR missing comma\n+        Very //~ HELP missing `,`\n+        Bad(usize) //~ HELP missing `,`\n+        //~^ ERROR expected one of `(`, `,`, `=`, `{`, or `}`, found `Bad`\n+        Stuff { a: usize } //~ HELP missing `,`\n+        //~^ ERROR expected one of `,`, `=`, or `}`, found `Stuff`\n         Here\n+        //~^ ERROR expected one of `,`, `=`, or `}`, found `Here`\n     }\n }"}, {"sha": "a2b650e4f4eb7ca23d98d19a226fb8a8b90fd8ca", "filename": "src/test/ui/parser/recover-enum.stderr", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum.stderr?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -1,20 +1,37 @@\n-error: missing comma\n-  --> $DIR/recover-enum.rs:3:13\n+error: expected one of `(`, `,`, `=`, `{`, or `}`, found `Bad`\n+  --> $DIR/recover-enum.rs:4:9\n    |\n LL |         Very\n-   |             ^ help: missing comma\n+   |             -\n+   |             |\n+   |             expected one of `(`, `,`, `=`, `{`, or `}`\n+   |             help: missing `,`\n+LL |         Bad(usize)\n+   |         ^^^ unexpected token\n \n-error: missing comma\n-  --> $DIR/recover-enum.rs:5:19\n+error: expected one of `,`, `=`, or `}`, found `Stuff`\n+  --> $DIR/recover-enum.rs:6:9\n    |\n LL |         Bad(usize)\n-   |                   ^ help: missing comma\n+   |                   -\n+   |                   |\n+   |                   expected one of `,`, `=`, or `}`\n+   |                   help: missing `,`\n+LL |\n+LL |         Stuff { a: usize }\n+   |         ^^^^^ unexpected token\n \n-error: missing comma\n-  --> $DIR/recover-enum.rs:7:27\n+error: expected one of `,`, `=`, or `}`, found `Here`\n+  --> $DIR/recover-enum.rs:8:9\n    |\n LL |         Stuff { a: usize }\n-   |                           ^ help: missing comma\n+   |                           -\n+   |                           |\n+   |                           expected one of `,`, `=`, or `}`\n+   |                           help: missing `,`\n+LL |\n+LL |         Here\n+   |         ^^^^ unexpected token\n \n error: aborting due to 3 previous errors\n "}, {"sha": "35a2fe79d5e66e380eaf1f833ae1465308058d28", "filename": "src/test/ui/similar-tokens.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.stderr?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -2,7 +2,10 @@ error: expected one of `,`, `::`, `as`, or `}`, found `.`\n   --> $DIR/similar-tokens.rs:7:10\n    |\n LL | use x::{A. B};\n-   |          ^ expected one of `,`, `::`, `as`, or `}`\n+   |          ^\n+   |          |\n+   |          expected one of `,`, `::`, `as`, or `}`\n+   |          help: missing `,`\n \n error: aborting due to previous error\n "}, {"sha": "bfa0b32fd458ae0063871d32b819b2b02586343f", "filename": "src/test/ui/tuple/tuple-struct-fields/test.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest.stderr?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -2,7 +2,9 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test.rs:4:26\n    |\n LL |     struct S2(pub((foo)) ());\n-   |                          ^ expected one of `)` or `,`\n+   |                         -^ expected one of `)` or `,`\n+   |                         |\n+   |                         help: missing `,`\n \n error[E0412]: cannot find type `foo` in this scope\n   --> $DIR/test.rs:4:20"}, {"sha": "d924c351439bd91749108bc8634598674eee7789", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -2,7 +2,9 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test2.rs:5:26\n    |\n LL |         struct S3(pub $t ());\n-   |                          ^ expected one of `)` or `,`\n+   |                         -^ expected one of `)` or `,`\n+   |                         |\n+   |                         help: missing `,`\n ...\n LL |     define_struct! { (foo) }\n    |     ------------------------ in this macro invocation"}, {"sha": "50cac6c179e31a29fa9f8fd22cbcac3e5f7262a3", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f20b89ef71ab5abee867782247d82814e1be04/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr?ref=71f20b89ef71ab5abee867782247d82814e1be04", "patch": "@@ -2,7 +2,9 @@ error: expected one of `)` or `,`, found `(`\n   --> $DIR/test3.rs:5:27\n    |\n LL |         struct S3(pub($t) ());\n-   |                           ^ expected one of `)` or `,`\n+   |                          -^ expected one of `)` or `,`\n+   |                          |\n+   |                          help: missing `,`\n ...\n LL |     define_struct! { foo }\n    |     ---------------------- in this macro invocation"}]}