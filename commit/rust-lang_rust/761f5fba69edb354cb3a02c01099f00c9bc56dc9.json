{"sha": "761f5fba69edb354cb3a02c01099f00c9bc56dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MWY1ZmJhNjllZGIzNTRjYjNhMDJjMDEwOTlmMDBjOWJjNTZkYzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-18T00:40:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-24T22:46:01Z"}, "message": "std::rt: Optimize TLS use in change_task_context", "tree": {"sha": "2a330bc5d2a665a3e06db3ba4af571127ac2ae68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a330bc5d2a665a3e06db3ba4af571127ac2ae68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/761f5fba69edb354cb3a02c01099f00c9bc56dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/761f5fba69edb354cb3a02c01099f00c9bc56dc9", "html_url": "https://github.com/rust-lang/rust/commit/761f5fba69edb354cb3a02c01099f00c9bc56dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/761f5fba69edb354cb3a02c01099f00c9bc56dc9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5402786f94feac14adc337055eb0ca6c307b4f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/5402786f94feac14adc337055eb0ca6c307b4f67", "html_url": "https://github.com/rust-lang/rust/commit/5402786f94feac14adc337055eb0ca6c307b4f67"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "18b7394700f356d241e3b9ba9b0a197777623f14", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/761f5fba69edb354cb3a02c01099f00c9bc56dc9/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761f5fba69edb354cb3a02c01099f00c9bc56dc9/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=761f5fba69edb354cb3a02c01099f00c9bc56dc9", "patch": "@@ -21,6 +21,7 @@ pub trait Local {\n     fn take() -> ~Self;\n     fn exists() -> bool;\n     fn borrow<T>(f: &fn(&mut Self) -> T) -> T;\n+    unsafe fn unsafe_take() -> ~Self;\n     unsafe fn unsafe_borrow() -> *mut Self;\n     unsafe fn try_unsafe_borrow() -> Option<*mut Self>;\n }\n@@ -46,6 +47,8 @@ impl Local for Task {\n         }\n     }\n     #[inline]\n+    unsafe fn unsafe_take() -> ~Task { local_ptr::unsafe_take() }\n+    #[inline]\n     unsafe fn unsafe_borrow() -> *mut Task { local_ptr::unsafe_borrow() }\n     #[inline]\n     unsafe fn try_unsafe_borrow() -> Option<*mut Task> {\n@@ -89,6 +92,7 @@ impl Local for Scheduler {\n             }\n         }\n     }\n+    unsafe fn unsafe_take() -> ~Scheduler { rtabort!(\"unimpl\") }\n     unsafe fn unsafe_borrow() -> *mut Scheduler {\n         match (*Local::unsafe_borrow::<Task>()).sched {\n             Some(~ref mut sched) => {\n@@ -122,6 +126,7 @@ impl Local for IoFactoryObject {\n     fn take() -> ~IoFactoryObject { rtabort!(\"unimpl\") }\n     fn exists() -> bool { rtabort!(\"unimpl\") }\n     fn borrow<T>(_f: &fn(&mut IoFactoryObject) -> T) -> T { rtabort!(\"unimpl\") }\n+    unsafe fn unsafe_take() -> ~IoFactoryObject { rtabort!(\"unimpl\") }\n     unsafe fn unsafe_borrow() -> *mut IoFactoryObject {\n         let sched = Local::unsafe_borrow::<Scheduler>();\n         let io: *mut IoFactoryObject = (*sched).event_loop.io().unwrap();"}, {"sha": "3125a1da937b6c554107fce79ed16db24848e7a9", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/761f5fba69edb354cb3a02c01099f00c9bc56dc9/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761f5fba69edb354cb3a02c01099f00c9bc56dc9/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=761f5fba69edb354cb3a02c01099f00c9bc56dc9", "patch": "@@ -64,6 +64,23 @@ pub unsafe fn take<T>() -> ~T {\n     return ptr;\n }\n \n+/// Take ownership of a pointer from thread-local storage.\n+///\n+/// # Safety note\n+///\n+/// Does not validate the pointer type.\n+/// Leaves the old pointer in TLS for speed.\n+#[inline]\n+pub unsafe fn unsafe_take<T>() -> ~T {\n+    let key = tls_key();\n+    let void_ptr: *mut c_void = tls::get(key);\n+    if void_ptr.is_null() {\n+        rtabort!(\"thread-local pointer is null. bogus!\");\n+    }\n+    let ptr: ~T = cast::transmute(void_ptr);\n+    return ptr;\n+}\n+\n /// Check whether there is a thread-local pointer installed.\n pub fn exists() -> bool {\n     unsafe {"}, {"sha": "b161864a74fdffd37b4588dcdf9ada30e4e3b51a", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/761f5fba69edb354cb3a02c01099f00c9bc56dc9/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761f5fba69edb354cb3a02c01099f00c9bc56dc9/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=761f5fba69edb354cb3a02c01099f00c9bc56dc9", "patch": "@@ -505,7 +505,9 @@ impl Scheduler {\n         let mut this = self;\n \n         // The current task is grabbed from TLS, not taken as an input.\n-        let current_task: ~Task = Local::take::<Task>();\n+        // Doing an unsafe_take to avoid writing back a null pointer -\n+        // We're going to call `put` later to do that.\n+        let current_task: ~Task = unsafe { Local::unsafe_take::<Task>() };\n \n         // Check that the task is not in an atomically() section (e.g.,\n         // holding a pthread mutex, which could deadlock the scheduler)."}]}