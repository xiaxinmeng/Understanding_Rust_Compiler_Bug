{"sha": "f05cbc98f8402f3146f96ebde63148427b3322f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNWNiYzk4Zjg0MDJmMzE0NmY5NmViZGU2MzE0ODQyN2IzMzIyZjE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-24T07:58:49Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-24T07:58:49Z"}, "message": "HIR: rename find_by_hir_id to find", "tree": {"sha": "10cdbd41b8dbea79892312ca4dd6260d36d54f91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10cdbd41b8dbea79892312ca4dd6260d36d54f91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05cbc98f8402f3146f96ebde63148427b3322f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05cbc98f8402f3146f96ebde63148427b3322f1", "html_url": "https://github.com/rust-lang/rust/commit/f05cbc98f8402f3146f96ebde63148427b3322f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05cbc98f8402f3146f96ebde63148427b3322f1/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a", "html_url": "https://github.com/rust-lang/rust/commit/90de9edce576d03bd6e7e5d294fa44d8d1ef8a5a"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "3d591c9a1c6bdafb28167b0c04587c4abdc44226", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -292,7 +292,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n-        let node = if let Some(node) = self.find_by_hir_id(hir_id) {\n+        let node = if let Some(node) = self.find(hir_id) {\n             node\n         } else {\n             return None\n@@ -347,7 +347,7 @@ impl<'hir> Map<'hir> {\n                 if variant_data.ctor_hir_id().is_none() {\n                     return None;\n                 }\n-                let ctor_of = match self.find_by_hir_id(self.get_parent_node(hir_id)) {\n+                let ctor_of = match self.find(self.get_parent_node(hir_id)) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n@@ -563,7 +563,7 @@ impl<'hir> Map<'hir> {\n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n     pub fn get(&self, id: HirId) -> Node<'hir> {\n         // read recorded by `find`\n-        self.find_by_hir_id(id).unwrap_or_else(||\n+        self.find(id).unwrap_or_else(||\n             bug!(\"couldn't find hir id {} in the HIR map\", id))\n     }\n \n@@ -595,7 +595,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n-    pub fn find_by_hir_id(&self, hir_id: HirId) -> Option<Node<'hir>> {\n+    pub fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {\n         let result = self.find_entry(hir_id).and_then(|entry| {\n             if let Node::Crate = entry.node {\n                 None\n@@ -634,11 +634,11 @@ impl<'hir> Map<'hir> {\n     /// Check if the node is an argument. An argument is a local variable whose\n     /// immediate parent is an item or a closure.\n     pub fn is_argument(&self, id: HirId) -> bool {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::Binding(_)) => (),\n             _ => return false,\n         }\n-        match self.find_by_hir_id(self.get_parent_node(id)) {\n+        match self.find(self.get_parent_node(id)) {\n             Some(Node::Item(_)) |\n             Some(Node::TraitItem(_)) |\n             Some(Node::ImplItem(_)) => true,\n@@ -859,28 +859,28 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn expect_item(&self, id: HirId) -> &'hir Item {\n-        match self.find_by_hir_id(id) { // read recorded by `find`\n+        match self.find(id) { // read recorded by `find`\n             Some(Node::Item(item)) => item,\n             _ => bug!(\"expected item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_impl_item(&self, id: HirId) -> &'hir ImplItem {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::ImplItem(item)) => item,\n             _ => bug!(\"expected impl item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_trait_item(&self, id: HirId) -> &'hir TraitItem {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::TraitItem(item)) => item,\n             _ => bug!(\"expected trait item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_variant_data(&self, id: HirId) -> &'hir VariantData {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::Item(i)) => {\n                 match i.node {\n                     ItemKind::Struct(ref struct_def, _) |\n@@ -895,21 +895,21 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn expect_variant(&self, id: HirId) -> &'hir Variant {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::Variant(variant)) => variant,\n             _ => bug!(\"expected variant, found {}\", self.node_to_string(id)),\n         }\n     }\n \n     pub fn expect_foreign_item(&self, id: HirId) -> &'hir ForeignItem {\n-        match self.find_by_hir_id(id) {\n+        match self.find(id) {\n             Some(Node::ForeignItem(item)) => item,\n             _ => bug!(\"expected foreign item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_expr(&self, id: HirId) -> &'hir Expr {\n-        match self.find_by_hir_id(id) { // read recorded by find\n+        match self.find(id) { // read recorded by find\n             Some(Node::Expr(expr)) => expr,\n             _ => bug!(\"expected expr, found {}\", self.node_to_string(id))\n         }\n@@ -1015,7 +1015,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Pat(pat)) => pat.span,\n             Some(Node::Arm(arm)) => arm.span,\n             Some(Node::Block(block)) => block.span,\n-            Some(Node::Ctor(..)) => match self.find_by_hir_id(\n+            Some(Node::Ctor(..)) => match self.find(\n                 self.get_parent_node(hir_id))\n             {\n                 Some(Node::Item(item)) => item.span,\n@@ -1087,7 +1087,7 @@ impl<'a> NodesMatchingSuffix<'a> {\n         // chain, then returns `None`.\n         fn find_first_mod_parent<'a>(map: &'a Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n             loop {\n-                if let Node::Item(item) = map.find_by_hir_id(id)? {\n+                if let Node::Item(item) = map.find(id)? {\n                     if item_is_mod(&item) {\n                         return Some((id, item.ident.name))\n                     }\n@@ -1260,7 +1260,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         })\n     };\n \n-    match map.find_by_hir_id(id) {\n+    match map.find(id) {\n         Some(Node::Item(item)) => {\n             let item_str = match item.node {\n                 ItemKind::ExternCrate(..) => \"extern crate\","}, {"sha": "65225163a25a47111160a511f6c8374e2686d92b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     )\n                 };\n                 let span = scope.span(self, region_scope_tree);\n-                let tag = match self.hir().find_by_hir_id(scope.hir_id(region_scope_tree)) {\n+                let tag = match self.hir().find(scope.hir_id(region_scope_tree)) {\n                     Some(Node::Block(_)) => \"block\",\n                     Some(Node::Expr(expr)) => match expr.node {\n                         hir::ExprKind::Call(..) => \"call\",\n@@ -182,7 +182,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let scope = region.free_region_binding_scope(self);\n         let node = self.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n-        let tag = match self.hir().find_by_hir_id(node) {\n+        let tag = match self.hir().find(node) {\n             Some(Node::Block(_)) | Some(Node::Expr(_)) => \"body\",\n             Some(Node::Item(it)) => Self::item_scope_tag(&it),\n             Some(Node::TraitItem(it)) => Self::trait_item_scope_tag(&it),"}, {"sha": "6b6dbd43167fa3fadad4d89583a6a48a770295f6", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -777,7 +777,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                                 .local_def_id_from_hir_id(opaque_parent_hir_id)\n                         };\n                         let (in_definition_scope, origin) =\n-                            match tcx.hir().find_by_hir_id(opaque_hir_id)\n+                            match tcx.hir().find(opaque_hir_id)\n                         {\n                             Some(Node::Item(item)) => match item.node {\n                                 // Anonymous `impl Trait`"}, {"sha": "e02ee8943603a6372cc113f9687c0d0b5d75cb1e", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -27,7 +27,7 @@ use syntax_pos;\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n fn should_explore<'tcx>(tcx: TyCtxt<'tcx>, hir_id: hir::HirId) -> bool {\n-    match tcx.hir().find_by_hir_id(hir_id) {\n+    match tcx.hir().find(hir_id) {\n         Some(Node::Item(..)) |\n         Some(Node::ImplItem(..)) |\n         Some(Node::ForeignItem(..)) |\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             // tuple struct constructor function\n             let id = self.struct_constructors.get(&id).cloned().unwrap_or(id);\n \n-            if let Some(node) = self.tcx.hir().find_by_hir_id(id) {\n+            if let Some(node) = self.tcx.hir().find(id) {\n                 self.live_symbols.insert(id);\n                 self.visit_node(node);\n             }"}, {"sha": "bea10e914d0383ddbff1ede985472e644cbe231a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -369,7 +369,7 @@ fn visit_fn<'tcx>(\n     // Don't run unused pass for #[derive()]\n     if let FnKind::Method(..) = fk {\n         let parent = ir.tcx.hir().get_parent_item(id);\n-        if let Some(Node::Item(i)) = ir.tcx.hir().find_by_hir_id(parent) {\n+        if let Some(Node::Item(i)) = ir.tcx.hir().find(parent) {\n             if i.attrs.iter().any(|a| a.check_name(sym::automatically_derived)) {\n                 return;\n             }"}, {"sha": "d607c35f8762bb746f1f07f00f83835279a15600", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -53,7 +53,7 @@ fn method_might_be_inlined<'tcx>(\n         return true\n     }\n     if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_src) {\n-        match tcx.hir().find_by_hir_id(impl_hir_id) {\n+        match tcx.hir().find(impl_hir_id) {\n             Some(Node::Item(item)) =>\n                 item_might_be_inlined(tcx, &item, codegen_fn_attrs),\n             Some(..) | None =>\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             None => { return false; }\n         };\n \n-        match self.tcx.hir().find_by_hir_id(hir_id) {\n+        match self.tcx.hir().find(hir_id) {\n             Some(Node::Item(item)) => {\n                 match item.node {\n                     hir::ItemKind::Fn(..) =>\n@@ -205,7 +205,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 continue\n             }\n \n-            if let Some(ref item) = self.tcx.hir().find_by_hir_id(search_item) {\n+            if let Some(ref item) = self.tcx.hir().find(search_item) {\n                 self.propagate_node(item, search_item);\n             }\n         }"}, {"sha": "412346bab257e6b4b7c25906291ed58fe0d649cc", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -1489,7 +1489,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n         if let Node::Lifetime(hir_lifetime) = self.tcx.hir().get(lifetime.hir_id) {\n-            if let Some(parent) = self.tcx.hir().find_by_hir_id(\n+            if let Some(parent) = self.tcx.hir().find(\n                 self.tcx.hir().get_parent_item(hir_lifetime.hir_id))\n             {\n                 match parent {"}, {"sha": "f54575ff8fc1dcb87047c2bf8482a55537afec47", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -939,7 +939,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) {\n         if let &ObligationCauseCode::VariableType(hir_id) = code {\n             let parent_node = self.tcx.hir().get_parent_node(hir_id);\n-            if let Some(Node::Local(ref local)) = self.tcx.hir().find_by_hir_id(parent_node) {\n+            if let Some(Node::Local(ref local)) = self.tcx.hir().find(parent_node) {\n                 if let Some(ref expr) = local.init {\n                     if let hir::ExprKind::Index(_, _) = expr.node {\n                         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n@@ -1014,7 +1014,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) {\n         let hir = self.tcx.hir();\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n-        let node = hir.find_by_hir_id(parent_node);\n+        let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n             node: hir::ItemKind::Fn(decl, _, _, body_id),\n             .."}, {"sha": "4710d611d99df0a3b2bc63cfa274aeddc443ff59", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -1589,7 +1589,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let hir_id = self.hir()\n             .as_local_hir_id(suitable_region_binding_scope)\n             .unwrap();\n-        let is_impl_item = match self.hir().find_by_hir_id(hir_id) {\n+        let is_impl_item = match self.hir().find(hir_id) {\n             Some(Node::Item(..)) | Some(Node::TraitItem(..)) => false,\n             Some(Node::ImplItem(..)) => {\n                 self.is_bound_region_in_impl_item(suitable_region_binding_scope)"}, {"sha": "3c7f19f7fbf4fb0d772e3462cacde24be6841a5d", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -1022,7 +1022,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n \n                 if let ty::ReScope(scope) = *super_scope {\n                     let hir_id = scope.hir_id(&self.region_scope_tree);\n-                    match self.tcx.hir().find_by_hir_id(hir_id) {\n+                    match self.tcx.hir().find(hir_id) {\n                         Some(Node::Stmt(_)) => {\n                             if *sub_scope != ty::ReStatic {\n                                 db.note(\"consider using a `let` binding to increase its lifetime\");"}, {"sha": "87f7f2fdb48b2c0e7f29d333d7e373ea1f2ca7ed", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -908,7 +908,7 @@ fn print_with_analysis<'tcx>(\n                 nodeid.expect(\"`pretty flowgraph=..` needs NodeId (int) or unique path \\\n                                 suffix (b::c::d)\");\n             let hir_id = tcx.hir().node_to_hir_id(nodeid);\n-            let node = tcx.hir().find_by_hir_id(hir_id).unwrap_or_else(|| {\n+            let node = tcx.hir().find(hir_id).unwrap_or_else(|| {\n                 tcx.sess.fatal(&format!(\"--pretty flowgraph couldn't find id: {}\", nodeid))\n             });\n "}, {"sha": "12719c3b9d303bc627101f861ce8c53a79b34e4a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();\n                 if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(real_trait) {\n-                    match cx.tcx.hir().find_by_hir_id(hir_id) {\n+                    match cx.tcx.hir().find(hir_id) {\n                         Some(Node::Item(item)) => {\n                             if let hir::VisibilityKind::Inherited = item.vis.node {\n                                 for impl_item_ref in impl_item_refs {"}, {"sha": "92c2e4e01f7608226b84248aad3b57cce985fb43", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -304,7 +304,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n                 let upvar_hir_id = self.upvars[upvar_index.index()].var_hir_id;\n-                if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find_by_hir_id(upvar_hir_id)\n+                if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find(upvar_hir_id)\n                 {\n                     if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated,\n@@ -633,7 +633,7 @@ fn annotate_struct_field(\n             let field = def.all_fields().nth(field.index())?;\n             // Use the HIR types to construct the diagnostic message.\n             let hir_id = tcx.hir().as_local_hir_id(field.did)?;\n-            let node = tcx.hir().find_by_hir_id(hir_id)?;\n+            let node = tcx.hir().find(hir_id)?;\n             // Now we're dealing with the actual struct that we're going to suggest a change to,\n             // we can expect a field that is an immutable reference to a type.\n             if let hir::Node::Field(field) = node {"}, {"sha": "311b6aa0c14de263d213649707a13957d5008a39", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -562,7 +562,7 @@ where\n                 by_ref,\n             };\n             let mut mutability = Mutability::Not;\n-            if let Some(Node::Binding(pat)) = tcx_hir.find_by_hir_id(var_hir_id) {\n+            if let Some(Node::Binding(pat)) = tcx_hir.find(var_hir_id) {\n                 if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n                     debuginfo.debug_name = ident.name;\n                     if let Some(&bm) = hir.tables.pat_binding_modes().get(pat.hir_id) {"}, {"sha": "24df3549be48136c9d8a4e481b0c0364765a75c9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -577,7 +577,7 @@ fn is_enclosed(\n         } else if let Some(Node::Item(&hir::Item {\n             node: hir::ItemKind::Fn(_, header, _, _),\n             ..\n-        })) = tcx.hir().find_by_hir_id(parent_id) {\n+        })) = tcx.hir().find(parent_id) {\n             match header.unsafety {\n                 hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n                 hir::Unsafety::Normal => None,"}, {"sha": "ed0a78b46527659bd7aea3eff19f639f50f74681", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 };\n \n                 if loop_id != hir::DUMMY_HIR_ID {\n-                    if let Node::Block(_) = self.hir_map.find_by_hir_id(loop_id).unwrap() {\n+                    if let Node::Block(_) = self.hir_map.find(loop_id).unwrap() {\n                         return\n                     }\n                 }\n@@ -155,7 +155,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n \n                 match destination.target_id {\n                     Ok(loop_id) => {\n-                        if let Node::Block(block) = self.hir_map.find_by_hir_id(loop_id).unwrap() {\n+                        if let Node::Block(block) = self.hir_map.find(loop_id).unwrap() {\n                             struct_span_err!(self.sess, e.span, E0696,\n                                             \"`continue` pointing to a labeled block\")\n                                 .span_label(e.span,"}, {"sha": "3e98200e5327466e5d7cdf8ea5988cf4c8785f94", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -1233,7 +1233,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         if let Some(hir_id) = self.tcx.hir().as_local_hir_id(did) {\n             // .. and it corresponds to a private type in the AST (this returns\n             // `None` for type parameters).\n-            match self.tcx.hir().find_by_hir_id(hir_id) {\n+            match self.tcx.hir().find(hir_id) {\n                 Some(Node::Item(ref item)) => !item.vis.node.is_pub(),\n                 Some(_) | None => false,\n             }"}, {"sha": "19ed9e214073c1618e76294ec9e0ffa424586b95", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -412,7 +412,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                             let mut attrs = vec![];\n                             let hir_id = self.tcx.hir().node_to_hir_id(id);\n                             if let Some(Node::ImplItem(item)) =\n-                                self.tcx.hir().find_by_hir_id(hir_id)\n+                                self.tcx.hir().find(hir_id)\n                             {\n                                 docs = self.docs_for_attrs(&item.attrs);\n                                 attrs = item.attrs.to_vec();\n@@ -456,7 +456,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                         let mut attrs = vec![];\n                         let hir_id = self.tcx.hir().node_to_hir_id(id);\n \n-                        if let Some(Node::TraitItem(item)) = self.tcx.hir().find_by_hir_id(hir_id) {\n+                        if let Some(Node::TraitItem(item)) = self.tcx.hir().find(hir_id) {\n                             docs = self.docs_for_attrs(&item.attrs);\n                             attrs = item.attrs.to_vec();\n                         }\n@@ -526,7 +526,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         match expr.node {\n             ast::ExprKind::Field(ref sub_ex, ident) => {\n                 let sub_ex_hir_id = self.tcx.hir().node_to_hir_id(sub_ex.id);\n-                let hir_node = match self.tcx.hir().find_by_hir_id(sub_ex_hir_id) {\n+                let hir_node = match self.tcx.hir().find(sub_ex_hir_id) {\n                     Some(Node::Expr(expr)) => expr,\n                     _ => {\n                         debug!("}, {"sha": "c469d3516e2d48a64b361d15c6249dec908cf177", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -241,12 +241,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     hir_id,\n                     node: hir::ExprKind::Closure(_, decl, ..),\n                     ..\n-                })) = self.tcx.hir().find_by_hir_id(parent) {\n+                })) = self.tcx.hir().find(parent) {\n                     let parent = self.tcx.hir().get_parent_node(*hir_id);\n                     if let (Some(Node::Expr(hir::Expr {\n                         node: hir::ExprKind::MethodCall(path, span, expr),\n                         ..\n-                    })), 1) = (self.tcx.hir().find_by_hir_id(parent), decl.inputs.len()) {\n+                    })), 1) = (self.tcx.hir().find(parent), decl.inputs.len()) {\n                         let self_ty = self.tables.borrow().node_type(expr[0].hir_id);\n                         let self_ty = format!(\"{:?}\", self_ty);\n                         let name = path.ident.as_str();\n@@ -277,7 +277,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> bool {\n         let cm = self.sess().source_map();\n         let parent_id = self.tcx.hir().get_parent_node(hir_id);\n-        if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {\n+        if let Some(parent) = self.tcx.hir().find(parent_id) {\n             // Account for fields\n             if let Node::Expr(hir::Expr {\n                 node: hir::ExprKind::Struct(_, fields, ..), ..\n@@ -421,7 +421,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(hir::Node::Expr(hir::Expr {\n                             node: hir::ExprKind::Assign(left_expr, _),\n                             ..\n-                        })) = self.tcx.hir().find_by_hir_id(\n+                        })) = self.tcx.hir().find(\n                             self.tcx.hir().get_parent_node(expr.hir_id),\n                         ) {\n                             if mutability == hir::Mutability::MutMutable {\n@@ -551,7 +551,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Some(hir::Node::Expr(hir::Expr {\n             node: hir::ExprKind::Struct(_, fields, _),\n             ..\n-        })) = self.tcx.hir().find_by_hir_id(self.tcx.hir().get_parent_node(expr.hir_id)) {\n+        })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id)) {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n             for field in fields {\n                 if field.expr.hir_id == expr.hir_id && field.is_shorthand {"}, {"sha": "7e781eeec56a98b3a8a0d887fc632e0948f12755", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -95,7 +95,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx>) {\n             // below it'll cause a panic because `def_id` is actually bogus at this\n             // point in time otherwise.\n             if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n-                if tcx.hir().find_by_hir_id(id).is_none() {\n+                if tcx.hir().find(id).is_none() {\n                     return false;\n                 }\n             }"}, {"sha": "42deeaf31f4279d71ee1e85f9abb866876b63961", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -52,7 +52,7 @@ fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     } else {\n         // Destructors only work on nominal types.\n         if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_did) {\n-            if let Some(Node::Item(item)) = tcx.hir().find_by_hir_id(impl_hir_id) {\n+            if let Some(Node::Item(item)) = tcx.hir().find(impl_hir_id) {\n                 let span = match item.node {\n                     ItemKind::Impl(.., ref ty, _) => ty.span,\n                     _ => item.span,"}, {"sha": "3bca41ca7e40d499bad738b88f00b7cf53c09483", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05cbc98f8402f3146f96ebde63148427b3322f1/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f05cbc98f8402f3146f96ebde63148427b3322f1", "patch": "@@ -182,7 +182,7 @@ fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, main_def_id: DefId) {\n     let main_t = tcx.type_of(main_def_id);\n     match main_t.sty {\n         ty::FnDef(..) => {\n-            if let Some(Node::Item(it)) = tcx.hir().find_by_hir_id(main_id) {\n+            if let Some(Node::Item(it)) = tcx.hir().find(main_id) {\n                 if let hir::ItemKind::Fn(.., ref generics, _) = it.node {\n                     let mut error = false;\n                     if !generics.params.is_empty() {\n@@ -247,7 +247,7 @@ fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, start_def_id: DefId) {\n     let start_t = tcx.type_of(start_def_id);\n     match start_t.sty {\n         ty::FnDef(..) => {\n-            if let Some(Node::Item(it)) = tcx.hir().find_by_hir_id(start_id) {\n+            if let Some(Node::Item(it)) = tcx.hir().find(start_id) {\n                 if let hir::ItemKind::Fn(.., ref generics, _) = it.node {\n                     let mut error = false;\n                     if !generics.params.is_empty() {"}]}