{"sha": "d55577255434d1a9969b74cc4ac5dff4c04d6054", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NTU3NzI1NTQzNGQxYTk5NjliNzRjYzRhYzVkZmY0YzA0ZDYwNTQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2015-01-02T13:26:55Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T17:07:04Z"}, "message": "rustdoc: fix rendering of associated types", "tree": {"sha": "60dc5497b14be3aa05a2ac251143c9ff112c9229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60dc5497b14be3aa05a2ac251143c9ff112c9229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d55577255434d1a9969b74cc4ac5dff4c04d6054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d55577255434d1a9969b74cc4ac5dff4c04d6054", "html_url": "https://github.com/rust-lang/rust/commit/d55577255434d1a9969b74cc4ac5dff4c04d6054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d55577255434d1a9969b74cc4ac5dff4c04d6054/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc5ecaf76589a83e40136e31d211246204767465", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5ecaf76589a83e40136e31d211246204767465", "html_url": "https://github.com/rust-lang/rust/commit/cc5ecaf76589a83e40136e31d211246204767465"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "e95b8d3d8ab24f181746c26509eadcbf3c00b798", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d55577255434d1a9969b74cc4ac5dff4c04d6054/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55577255434d1a9969b74cc4ac5dff4c04d6054/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d55577255434d1a9969b74cc4ac5dff4c04d6054", "patch": "@@ -1811,6 +1811,18 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     Ok(())\n }\n \n+fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n+              typ: &clean::TyParam) -> fmt::Result {\n+    try!(write!(w, \"type {}\", it.name.as_ref().unwrap()));\n+    if typ.bounds.len() > 0 {\n+        try!(write!(w, \": {}\", TyParamBounds(&*typ.bounds)))\n+    }\n+    if let Some(ref default) = typ.default {\n+        try!(write!(w, \" = {}\", default));\n+    }\n+    Ok(())\n+}\n+\n fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n     fn method(w: &mut fmt::Formatter, it: &clean::Item, unsafety: ast::Unsafety,\n            g: &clean::Generics, selfty: &clean::SelfTy,\n@@ -1827,17 +1839,6 @@ fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n                decl = Method(selfty, d),\n                where_clause = WhereClause(g))\n     }\n-    fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n-                  typ: &clean::TyParam) -> fmt::Result {\n-        try!(write!(w, \"type {}\", it.name.as_ref().unwrap()));\n-        if typ.bounds.len() > 0 {\n-            try!(write!(w, \": {}\", TyParamBounds(&*typ.bounds)))\n-        }\n-        if let Some(ref default) = typ.default {\n-            try!(write!(w, \" = {}\", default));\n-        }\n-        Ok(())\n-    }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n             method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n@@ -2122,6 +2123,15 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n                 try!(write!(w, \"type {} = {}\", name, tydef.type_));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n+            clean::AssociatedTypeItem(ref typaram) => {\n+                let name = item.name.as_ref().unwrap();\n+                try!(write!(w, \"<h4 id='assoc_type.{}' class='{}'>{}<code>\",\n+                            *name,\n+                            shortty(item),\n+                            ConciseStability(&item.stability)));\n+                try!(assoc_type(w, item, typaram));\n+                try!(write!(w, \"</code></h4>\\n\"));\n+            }\n             _ => panic!(\"can't make docs for trait item with name {}\", item.name)\n         }\n         match item.doc_value() {"}]}