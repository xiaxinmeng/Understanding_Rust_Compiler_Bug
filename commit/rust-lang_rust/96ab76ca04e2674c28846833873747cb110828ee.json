{"sha": "96ab76ca04e2674c28846833873747cb110828ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YWI3NmNhMDRlMjY3NGMyODg0NjgzMzg3Mzc0N2NiMTEwODI4ZWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-03T18:14:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-03T18:14:12Z"}, "message": "Merge #7138\n\n7138: Support assignment to FieldExpr for extract_assignment assist r=matklad a=Jesse-Bakker\n\n\n\nCo-authored-by: Jesse Bakker <github@jessebakker.com>", "tree": {"sha": "535750333d08ddd02fee4b430d794909b8239a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535750333d08ddd02fee4b430d794909b8239a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ab76ca04e2674c28846833873747cb110828ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8gl0CRBK7hj4Ov3rIwAAdHIIAIBuhkUFEpFt+xcyz7MzJAl8\nYZsTpz7YT1xLbcQATSilbB+j7FQRAuTlVH/LxgUTJB8DdZ/2tLmG6Tby7OIb2895\nbJyx2wXH0n9dlznFDYIyj4lV9EUwwG+q4RmaMioXT1pHk208O3D7xGdwIFkc2GMc\nSoPEzjGOumzj3W+MTgz2tHfDBo+DKLLahVsukP2oSCY/F6srn5IxHN9jsqQJNTsv\nNNUCrHxy/N7dAFoTnrA8+r4yPpo0ZmevpkrqTQ89OXHiy6qcxEVdZIkKNQ27Cgaz\nN3SNpq7gQWNSwZW351k/6Icz0M9G6igvO/MYB6Nfbmtfq+xj3FQYXS6CzAlMntQ=\n=SkBm\n-----END PGP SIGNATURE-----\n", "payload": "tree 535750333d08ddd02fee4b430d794909b8239a65\nparent 41454eb1ebc87c0f35d247bfb600e775abe022f4\nparent ba4c42af02d3fb37869e74d34dfd14a605e15c8e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609697652 +0000\ncommitter GitHub <noreply@github.com> 1609697652 +0000\n\nMerge #7138\n\n7138: Support assignment to FieldExpr for extract_assignment assist r=matklad a=Jesse-Bakker\n\n\n\nCo-authored-by: Jesse Bakker <github@jessebakker.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ab76ca04e2674c28846833873747cb110828ee", "html_url": "https://github.com/rust-lang/rust/commit/96ab76ca04e2674c28846833873747cb110828ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ab76ca04e2674c28846833873747cb110828ee/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41454eb1ebc87c0f35d247bfb600e775abe022f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/41454eb1ebc87c0f35d247bfb600e775abe022f4", "html_url": "https://github.com/rust-lang/rust/commit/41454eb1ebc87c0f35d247bfb600e775abe022f4"}, {"sha": "ba4c42af02d3fb37869e74d34dfd14a605e15c8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba4c42af02d3fb37869e74d34dfd14a605e15c8e", "html_url": "https://github.com/rust-lang/rust/commit/ba4c42af02d3fb37869e74d34dfd14a605e15c8e"}], "stats": {"total": 103, "additions": 89, "deletions": 14}, "files": [{"sha": "ae99598c00e18f2e6e7a44ccd8de21b30b7d4999", "filename": "crates/assists/src/handlers/extract_assignment.rs", "status": "modified", "additions": 89, "deletions": 14, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/96ab76ca04e2674c28846833873747cb110828ee/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ab76ca04e2674c28846833873747cb110828ee/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs?ref=96ab76ca04e2674c28846833873747cb110828ee", "patch": "@@ -1,4 +1,3 @@\n-use hir::AsName;\n use syntax::{\n     ast::{self, edit::AstNodeEdit, make},\n     AstNode,\n@@ -38,15 +37,23 @@ use crate::{\n // }\n // ```\n pub(crate) fn extract_assigment(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let name = ctx.find_node_at_offset::<ast::NameRef>()?.as_name();\n+    let assign_expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n+    let name_expr = if assign_expr.op_kind()? == ast::BinOp::Assignment {\n+        assign_expr.lhs()?\n+    } else {\n+        return None;\n+    };\n \n     let (old_stmt, new_stmt) = if let Some(if_expr) = ctx.find_node_at_offset::<ast::IfExpr>() {\n         (\n             ast::Expr::cast(if_expr.syntax().to_owned())?,\n-            exprify_if(&if_expr, &name)?.indent(if_expr.indent_level()),\n+            exprify_if(&if_expr, &ctx.sema, &name_expr)?.indent(if_expr.indent_level()),\n         )\n     } else if let Some(match_expr) = ctx.find_node_at_offset::<ast::MatchExpr>() {\n-        (ast::Expr::cast(match_expr.syntax().to_owned())?, exprify_match(&match_expr, &name)?)\n+        (\n+            ast::Expr::cast(match_expr.syntax().to_owned())?,\n+            exprify_match(&match_expr, &ctx.sema, &name_expr)?,\n+        )\n     } else {\n         return None;\n     };\n@@ -58,18 +65,22 @@ pub(crate) fn extract_assigment(acc: &mut Assists, ctx: &AssistContext) -> Optio\n         \"Extract assignment\",\n         old_stmt.syntax().text_range(),\n         move |edit| {\n-            edit.replace(old_stmt.syntax().text_range(), format!(\"{} = {};\", name, expr_stmt));\n+            edit.replace(old_stmt.syntax().text_range(), format!(\"{} = {};\", name_expr, expr_stmt));\n         },\n     )\n }\n \n-fn exprify_match(match_expr: &ast::MatchExpr, name: &hir::Name) -> Option<ast::Expr> {\n+fn exprify_match(\n+    match_expr: &ast::MatchExpr,\n+    sema: &hir::Semantics<ide_db::RootDatabase>,\n+    name: &ast::Expr,\n+) -> Option<ast::Expr> {\n     let new_arm_list = match_expr\n         .match_arm_list()?\n         .arms()\n         .map(|arm| {\n             if let ast::Expr::BlockExpr(block) = arm.expr()? {\n-                let new_block = exprify_block(&block, name)?.indent(block.indent_level());\n+                let new_block = exprify_block(&block, sema, name)?.indent(block.indent_level());\n                 Some(arm.replace_descendant(block, new_block))\n             } else {\n                 None\n@@ -82,21 +93,31 @@ fn exprify_match(match_expr: &ast::MatchExpr, name: &hir::Name) -> Option<ast::E\n     Some(make::expr_match(match_expr.expr()?, new_arm_list))\n }\n \n-fn exprify_if(statement: &ast::IfExpr, name: &hir::Name) -> Option<ast::Expr> {\n-    let then_branch = exprify_block(&statement.then_branch()?, name)?;\n+fn exprify_if(\n+    statement: &ast::IfExpr,\n+    sema: &hir::Semantics<ide_db::RootDatabase>,\n+    name: &ast::Expr,\n+) -> Option<ast::Expr> {\n+    let then_branch = exprify_block(&statement.then_branch()?, sema, name)?;\n     let else_branch = match statement.else_branch()? {\n-        ast::ElseBranch::Block(ref block) => ast::ElseBranch::Block(exprify_block(block, name)?),\n+        ast::ElseBranch::Block(ref block) => {\n+            ast::ElseBranch::Block(exprify_block(block, sema, name)?)\n+        }\n         ast::ElseBranch::IfExpr(expr) => {\n             mark::hit!(test_extract_assigment_chained_if);\n             ast::ElseBranch::IfExpr(ast::IfExpr::cast(\n-                exprify_if(&expr, name)?.syntax().to_owned(),\n+                exprify_if(&expr, sema, name)?.syntax().to_owned(),\n             )?)\n         }\n     };\n     Some(make::expr_if(statement.condition()?, then_branch, Some(else_branch)))\n }\n \n-fn exprify_block(block: &ast::BlockExpr, name: &hir::Name) -> Option<ast::BlockExpr> {\n+fn exprify_block(\n+    block: &ast::BlockExpr,\n+    sema: &hir::Semantics<ide_db::RootDatabase>,\n+    name: &ast::Expr,\n+) -> Option<ast::BlockExpr> {\n     if block.expr().is_some() {\n         return None;\n     }\n@@ -106,8 +127,7 @@ fn exprify_block(block: &ast::BlockExpr, name: &hir::Name) -> Option<ast::BlockE\n \n     if let ast::Stmt::ExprStmt(stmt) = stmt {\n         if let ast::Expr::BinExpr(expr) = stmt.expr()? {\n-            if expr.op_kind()? == ast::BinOp::Assignment\n-                && &expr.lhs()?.name_ref()?.as_name() == name\n+            if expr.op_kind()? == ast::BinOp::Assignment && is_equivalent(sema, &expr.lhs()?, name)\n             {\n                 // The last statement in the block is an assignment to the name we want\n                 return Some(make::block_expr(stmts, Some(expr.rhs()?)));\n@@ -117,6 +137,29 @@ fn exprify_block(block: &ast::BlockExpr, name: &hir::Name) -> Option<ast::BlockE\n     None\n }\n \n+fn is_equivalent(\n+    sema: &hir::Semantics<ide_db::RootDatabase>,\n+    expr0: &ast::Expr,\n+    expr1: &ast::Expr,\n+) -> bool {\n+    match (expr0, expr1) {\n+        (ast::Expr::FieldExpr(field_expr0), ast::Expr::FieldExpr(field_expr1)) => {\n+            mark::hit!(test_extract_assignment_field_assignment);\n+            sema.resolve_field(field_expr0) == sema.resolve_field(field_expr1)\n+        }\n+        (ast::Expr::PathExpr(path0), ast::Expr::PathExpr(path1)) => {\n+            let path0 = path0.path();\n+            let path1 = path1.path();\n+            if let (Some(path0), Some(path1)) = (path0, path1) {\n+                sema.resolve_path(&path0) == sema.resolve_path(&path1)\n+            } else {\n+                false\n+            }\n+        }\n+        _ => false,\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -319,6 +362,38 @@ fn foo() {\n         },\n         3 => {},\n     }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_extract_assignment_field_assignment() {\n+        mark::check!(test_extract_assignment_field_assignment);\n+        check_assist(\n+            extract_assigment,\n+            r#\"\n+struct A(usize);\n+\n+fn foo() {\n+    let mut a = A(1);\n+\n+    if true {\n+        <|>a.0 = 2;\n+    } else {\n+        a.0 = 3;\n+    }\n+}\"#,\n+            r#\"\n+struct A(usize);\n+\n+fn foo() {\n+    let mut a = A(1);\n+\n+    a.0 = if true {\n+        2\n+    } else {\n+        3\n+    };\n }\"#,\n         )\n     }"}]}