{"sha": "bb37b600b35ce60ff948ac46b3994dd699008bdb", "node_id": "C_kwDOAAsO6NoAKGJiMzdiNjAwYjM1Y2U2MGZmOTQ4YWM0NmIzOTk0ZGQ2OTkwMDhiZGI", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-04T22:55:06Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-10T20:18:38Z"}, "message": "Migrate `document_item_info` to templates", "tree": {"sha": "e249e2e99f6023f0653d04494502790ba69afe9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e249e2e99f6023f0653d04494502790ba69afe9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb37b600b35ce60ff948ac46b3994dd699008bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb37b600b35ce60ff948ac46b3994dd699008bdb", "html_url": "https://github.com/rust-lang/rust/commit/bb37b600b35ce60ff948ac46b3994dd699008bdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb37b600b35ce60ff948ac46b3994dd699008bdb/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f2657d1101b50f9b71ae460b762d330cc8426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f2657d1101b50f9b71ae460b762d330cc8426b", "html_url": "https://github.com/rust-lang/rust/commit/39f2657d1101b50f9b71ae460b762d330cc8426b"}], "stats": {"total": 127, "additions": 84, "deletions": 43}, "files": [{"sha": "ed02538fc783c39c72f3a82886d81e8b76fb0bba", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 54, "deletions": 43, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/bb37b600b35ce60ff948ac46b3994dd699008bdb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb37b600b35ce60ff948ac46b3994dd699008bdb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=bb37b600b35ce60ff948ac46b3994dd699008bdb", "patch": "@@ -46,6 +46,7 @@ use std::rc::Rc;\n use std::str;\n use std::string::ToString;\n \n+use askama::Template;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -417,7 +418,7 @@ fn document(\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n-    document_item_info(w, cx, item, parent);\n+    document_item_info(cx, item, parent).render_into(w).unwrap();\n     if parent.is_none() {\n         document_full_collapsible(w, item, cx, heading_offset);\n     } else {\n@@ -459,7 +460,7 @@ fn document_short(\n     parent: &clean::Item,\n     show_def_docs: bool,\n ) {\n-    document_item_info(w, cx, item, Some(parent));\n+    document_item_info(cx, item, Some(parent)).render_into(w).unwrap();\n     if !show_def_docs {\n         return;\n     }\n@@ -531,25 +532,23 @@ fn document_full_inner(\n     }\n }\n \n+#[derive(Template)]\n+#[template(path = \"item_info.html\")]\n+struct ItemInfo {\n+    items: Vec<ShortItemInfo>,\n+}\n /// Add extra information about an item such as:\n ///\n /// * Stability\n /// * Deprecated\n /// * Required features (through the `doc_cfg` feature)\n fn document_item_info(\n-    w: &mut Buffer,\n     cx: &mut Context<'_>,\n     item: &clean::Item,\n     parent: Option<&clean::Item>,\n-) {\n-    let item_infos = short_item_info(item, cx, parent);\n-    if !item_infos.is_empty() {\n-        w.write_str(\"<span class=\\\"item-info\\\">\");\n-        for info in item_infos {\n-            w.write_str(&info);\n-        }\n-        w.write_str(\"</span>\");\n-    }\n+) -> ItemInfo {\n+    let items = short_item_info(item, cx, parent);\n+    ItemInfo { items }\n }\n \n fn portability(item: &clean::Item, parent: Option<&clean::Item>) -> Option<String> {\n@@ -567,7 +566,25 @@ fn portability(item: &clean::Item, parent: Option<&clean::Item>) -> Option<Strin\n         cfg\n     );\n \n-    Some(format!(\"<div class=\\\"stab portability\\\">{}</div>\", cfg?.render_long_html()))\n+    Some(cfg?.render_long_html())\n+}\n+\n+#[derive(Template)]\n+#[template(path = \"short_item_info.html\")]\n+enum ShortItemInfo {\n+    /// A message describing the deprecation of this item\n+    Deprecation {\n+        message: String,\n+    },\n+    /// The feature corresponding to an unstable item, and optionally\n+    /// a tracking issue URL and number.\n+    Unstable {\n+        feature: String,\n+        tracking: Option<(String, u32)>,\n+    },\n+    Portability {\n+        message: String,\n+    },\n }\n \n /// Render the stability, deprecation and portability information that is displayed at the top of\n@@ -576,7 +593,7 @@ fn short_item_info(\n     item: &clean::Item,\n     cx: &mut Context<'_>,\n     parent: Option<&clean::Item>,\n-) -> Vec<String> {\n+) -> Vec<ShortItemInfo> {\n     let mut extra_info = vec![];\n \n     if let Some(depr @ Deprecation { note, since, is_since_rustc_version: _, suggestion: _ }) =\n@@ -602,15 +619,10 @@ fn short_item_info(\n         if let Some(note) = note {\n             let note = note.as_str();\n             let html = MarkdownItemInfo(note, &mut cx.id_map);\n-            message.push_str(&format!(\": {}\", html.into_string()));\n+            message.push_str(\": \");\n+            message.push_str(&html.into_string());\n         }\n-        extra_info.push(format!(\n-            \"<div class=\\\"stab deprecated\\\">\\\n-                 <span class=\\\"emoji\\\">\ud83d\udc4e</span>\\\n-                 <span>{}</span>\\\n-             </div>\",\n-            message,\n-        ));\n+        extra_info.push(ShortItemInfo::Deprecation { message });\n     }\n \n     // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n@@ -621,26 +633,17 @@ fn short_item_info(\n         .filter(|stab| stab.feature != sym::rustc_private)\n         .map(|stab| (stab.level, stab.feature))\n     {\n-        let mut message = \"<span class=\\\"emoji\\\">\ud83d\udd2c</span>\\\n-             <span>This is a nightly-only experimental API.\"\n-            .to_owned();\n-\n-        let mut feature = format!(\"<code>{}</code>\", Escape(feature.as_str()));\n-        if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, issue) {\n-            feature.push_str(&format!(\n-                \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n-                url = url,\n-                issue = issue\n-            ));\n-        }\n-\n-        message.push_str(&format!(\" ({})</span>\", feature));\n-\n-        extra_info.push(format!(\"<div class=\\\"stab unstable\\\">{}</div>\", message));\n+        let tracking = if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, issue)\n+        {\n+            Some((url.clone(), issue.get()))\n+        } else {\n+            None\n+        };\n+        extra_info.push(ShortItemInfo::Unstable { feature: feature.to_string(), tracking });\n     }\n \n-    if let Some(portability) = portability(item, parent) {\n-        extra_info.push(portability);\n+    if let Some(message) = portability(item, parent) {\n+        extra_info.push(ShortItemInfo::Portability { message });\n     }\n \n     extra_info\n@@ -1472,7 +1475,9 @@ fn render_impl(\n                         // We need the stability of the item from the trait\n                         // because impls can't have a stability.\n                         if item.doc_value().is_some() {\n-                            document_item_info(&mut info_buffer, cx, it, Some(parent));\n+                            document_item_info(cx, it, Some(parent))\n+                                .render_into(&mut info_buffer)\n+                                .unwrap();\n                             document_full(&mut doc_buffer, item, cx, HeadingOffset::H5);\n                             short_documented = false;\n                         } else {\n@@ -1489,7 +1494,9 @@ fn render_impl(\n                         }\n                     }\n                 } else {\n-                    document_item_info(&mut info_buffer, cx, item, Some(parent));\n+                    document_item_info(cx, item, Some(parent))\n+                        .render_into(&mut info_buffer)\n+                        .unwrap();\n                     if rendering_params.show_def_docs {\n                         document_full(&mut doc_buffer, item, cx, HeadingOffset::H5);\n                         short_documented = false;\n@@ -1862,7 +1869,11 @@ pub(crate) fn render_impl_summary(\n     let is_trait = inner_impl.trait_.is_some();\n     if is_trait {\n         if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-            write!(w, \"<span class=\\\"item-info\\\">{}</span>\", portability);\n+            write!(\n+                w,\n+                \"<span class=\\\"item-info\\\"><div class=\\\"stab portability\\\">{}</div></span>\",\n+                portability\n+            );\n         }\n     }\n "}, {"sha": "d2ea9bdae9c65c0bc59cefdd3d861199469c4eee", "filename": "src/librustdoc/html/templates/item_info.html", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb37b600b35ce60ff948ac46b3994dd699008bdb/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_info.html", "raw_url": "https://github.com/rust-lang/rust/raw/bb37b600b35ce60ff948ac46b3994dd699008bdb/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_info.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_info.html?ref=bb37b600b35ce60ff948ac46b3994dd699008bdb", "patch": "@@ -0,0 +1,7 @@\n+{% if !items.is_empty() %}\n+    <span class=\"item-info\"> {# #}\n+        {% for item in items %}\n+            {{item|safe}} {# #}\n+        {% endfor %}\n+    </span>\n+{% endif %}"}, {"sha": "e3125af0e47ea25097a6be36bf6beae3f43c8d4d", "filename": "src/librustdoc/html/templates/short_item_info.html", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb37b600b35ce60ff948ac46b3994dd699008bdb/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fshort_item_info.html", "raw_url": "https://github.com/rust-lang/rust/raw/bb37b600b35ce60ff948ac46b3994dd699008bdb/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fshort_item_info.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fshort_item_info.html?ref=bb37b600b35ce60ff948ac46b3994dd699008bdb", "patch": "@@ -0,0 +1,23 @@\n+{% match self %}\n+    {% when Self::Deprecation with { message } %}\n+        <div class=\"stab deprecated\"> {# #}\n+            <span class=\"emoji\">\ud83d\udc4e</span> {# #}\n+            <span>{{message}}</span> {# #}\n+        </div> {# #}\n+    {% when Self::Unstable with { feature, tracking } %}\n+        <div class=\"stab unstable\"> {# #}\n+            <span class=\"emoji\">\ud83d\udd2c</span> {# #}\n+            <span> {# #}\n+                This is a nightly-only experimental API. ({# #}\n+                <code>{{feature}}</code> {# #}\n+                {% match tracking %}\n+                    {% when Some with ((url, num)) %}\n+                        &nbsp;<a href=\"{{url}}{{num}}\">#{{num}}</a> {# #}\n+                    {% when None %}\n+                {% endmatch %}\n+                ) {# #}\n+            </span> {# #}\n+        </div> {# #}\n+    {% when Self::Portability with { message } %}\n+        <div class=\"stab portability\">{{message|safe}}</div> {# #}\n+{% endmatch %}"}]}