{"sha": "5aa732a364651010de8f8c5c7bada11e1da7fce1", "node_id": "C_kwDOAAsO6NoAKDVhYTczMmEzNjQ2NTEwMTBkZThmOGM1YzdiYWRhMTFlMWRhN2ZjZTE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-24T23:27:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-10-02T15:31:42Z"}, "message": "resolve: Cache module loading for all foreign modules\n\nIt was previously cached for modules loaded from `fn get_module`, but not for modules loaded from `fn build_reduced_graph_for_external_crate_res`.\nThis also makes all foreign modules use their real parent, span and expansion instead of possibly a parent/span/expansion of their reexport.\n\nAn ICE happening on attempt to decode expansions for foreign enums and traits is avoided.\n\nAlso local enums and traits are now added to the module map.", "tree": {"sha": "66516d4d365e4994fc2c492f222d5e65f492b748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66516d4d365e4994fc2c492f222d5e65f492b748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa732a364651010de8f8c5c7bada11e1da7fce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa732a364651010de8f8c5c7bada11e1da7fce1", "html_url": "https://github.com/rust-lang/rust/commit/5aa732a364651010de8f8c5c7bada11e1da7fce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa732a364651010de8f8c5c7bada11e1da7fce1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27661eb33c74cb514dba059b47d86b6582ac1c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27661eb33c74cb514dba059b47d86b6582ac1c2", "html_url": "https://github.com/rust-lang/rust/commit/b27661eb33c74cb514dba059b47d86b6582ac1c2"}], "stats": {"total": 100, "additions": 71, "deletions": 29}, "files": [{"sha": "a9497ca984854ab1abde4bc364f0f63936c4ba01", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -127,7 +127,6 @@ impl<'a> Resolver<'a> {\n     /// If `def_id` refers to a module (in resolver's sense, i.e. a module item, crate root, enum,\n     /// or trait), then this function returns that module's resolver representation, otherwise it\n     /// returns `None`.\n-    /// FIXME: `Module`s for local enums and traits are not currently found.\n     crate fn get_module(&mut self, def_id: DefId) -> Option<Module<'a>> {\n         if let module @ Some(..) = self.module_map.get(&def_id) {\n             return module.copied();\n@@ -146,17 +145,21 @@ impl<'a> Resolver<'a> {\n                     } else {\n                         def_key.disambiguated_data.data.get_opt_name().expect(\"module without name\")\n                     };\n+                    let expn_id = if def_kind == DefKind::Mod {\n+                        self.cstore().module_expansion_untracked(def_id, &self.session)\n+                    } else {\n+                        // FIXME: Parent expansions for enums and traits are not kept in metadata.\n+                        ExpnId::root()\n+                    };\n \n-                    let module = self.arenas.new_module(\n+                    Some(self.new_module(\n                         parent,\n                         ModuleKind::Def(def_kind, def_id, name),\n-                        self.cstore().module_expansion_untracked(def_id, &self.session),\n+                        expn_id,\n                         self.cstore().get_span_untracked(def_id, &self.session),\n                         // FIXME: Account for `#[no_implicit_prelude]` attributes.\n                         parent.map_or(false, |module| module.no_implicit_prelude),\n-                    );\n-                    self.module_map.insert(def_id, module);\n-                    Some(module)\n+                    ))\n                 }\n                 _ => None,\n             }\n@@ -759,7 +762,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::Mod(..) => {\n-                let module = self.r.arenas.new_module(\n+                let module = self.r.new_module(\n                     Some(parent),\n                     ModuleKind::Def(DefKind::Mod, def_id, ident.name),\n                     expansion.to_expn_id(),\n@@ -768,7 +771,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         || self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude),\n                 );\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n-                self.r.module_map.insert(def_id, module);\n \n                 // Descend into the module.\n                 self.parent_scope.module = module;\n@@ -799,7 +801,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::Enum(_, _) => {\n-                let module = self.r.arenas.new_module(\n+                let module = self.r.new_module(\n                     Some(parent),\n                     ModuleKind::Def(DefKind::Enum, def_id, ident.name),\n                     expansion.to_expn_id(),\n@@ -873,7 +875,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n             ItemKind::Trait(..) => {\n                 // Add all the items within to a new module.\n-                let module = self.r.arenas.new_module(\n+                let module = self.r.new_module(\n                     Some(parent),\n                     ModuleKind::Def(DefKind::Trait, def_id, ident.name),\n                     expansion.to_expn_id(),\n@@ -916,7 +918,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let parent = self.parent_scope.module;\n         let expansion = self.parent_scope.expansion;\n         if self.block_needs_anonymous_module(block) {\n-            let module = self.r.arenas.new_module(\n+            let module = self.r.new_module(\n                 Some(parent),\n                 ModuleKind::Block(block.id),\n                 expansion.to_expn_id(),\n@@ -936,15 +938,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions.\n         match res {\n-            Res::Def(kind @ (DefKind::Mod | DefKind::Enum | DefKind::Trait), def_id) => {\n-                let module = self.r.arenas.new_module(\n-                    Some(parent),\n-                    ModuleKind::Def(kind, def_id, ident.name),\n-                    expansion.to_expn_id(),\n-                    span,\n-                    // FIXME: Account for `#[no_implicit_prelude]` attributes.\n-                    parent.no_implicit_prelude,\n-                );\n+            Res::Def(DefKind::Mod | DefKind::Enum | DefKind::Trait, def_id) => {\n+                let module = self.r.expect_module(def_id);\n                 self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));\n             }\n             Res::Def("}, {"sha": "7d61df59cf7de9433338d354e721a1625cd456dc", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -1071,12 +1071,17 @@ impl<'a> ResolverArenas<'a> {\n         expn_id: ExpnId,\n         span: Span,\n         no_implicit_prelude: bool,\n+        module_map: &mut FxHashMap<DefId, Module<'a>>,\n     ) -> Module<'a> {\n         let module =\n             self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));\n-        if module.def_id().map_or(true, |def_id| def_id.is_local()) {\n+        let def_id = module.def_id();\n+        if def_id.map_or(true, |def_id| def_id.is_local()) {\n             self.local_modules.borrow_mut().push(module);\n         }\n+        if let Some(def_id) = def_id {\n+            module_map.insert(def_id, module);\n+        }\n         module\n     }\n     fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {\n@@ -1276,22 +1281,23 @@ impl<'a> Resolver<'a> {\n         arenas: &'a ResolverArenas<'a>,\n     ) -> Resolver<'a> {\n         let root_def_id = CRATE_DEF_ID.to_def_id();\n+        let mut module_map = FxHashMap::default();\n         let graph_root = arenas.new_module(\n             None,\n             ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n             ExpnId::root(),\n             krate.span,\n             session.contains_name(&krate.attrs, sym::no_implicit_prelude),\n+            &mut module_map,\n         );\n         let empty_module = arenas.new_module(\n             None,\n             ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n             ExpnId::root(),\n             DUMMY_SP,\n             true,\n+            &mut FxHashMap::default(),\n         );\n-        let mut module_map = FxHashMap::default();\n-        module_map.insert(root_def_id, graph_root);\n \n         let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);\n         let root = definitions.get_root_def();\n@@ -1434,6 +1440,18 @@ impl<'a> Resolver<'a> {\n         resolver\n     }\n \n+    fn new_module(\n+        &mut self,\n+        parent: Option<Module<'a>>,\n+        kind: ModuleKind,\n+        expn_id: ExpnId,\n+        span: Span,\n+        no_implicit_prelude: bool,\n+    ) -> Module<'a> {\n+        let module_map = &mut self.module_map;\n+        self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)\n+    }\n+\n     fn create_stable_hashing_context(&self) -> ExpandHasher<'_, 'a> {\n         ExpandHasher {\n             source_map: CachingSourceMapView::new(self.session.source_map()),"}, {"sha": "cab747c2c059149c8fb657ff8eaca4e7ad8b82a7", "filename": "src/test/ui/macros/auxiliary/macro-def-site-super.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fmacro-def-site-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fmacro-def-site-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fmacro-def-site-super.rs?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -0,0 +1,13 @@\n+#![feature(decl_macro)]\n+\n+mod inner1 {\n+    pub struct Struct {}\n+\n+    pub mod inner2 {\n+        pub macro mac() {\n+            super::Struct\n+        }\n+    }\n+}\n+\n+pub use inner1::inner2 as public;"}, {"sha": "716a8ced5bb7427f69ba0a343086a0a14a10256e", "filename": "src/test/ui/macros/macro-def-site-super.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fmacros%2Fmacro-def-site-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fmacros%2Fmacro-def-site-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-def-site-super.rs?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -0,0 +1,10 @@\n+// `super` in a `macro` refers to the parent module of the macro itself and not its reexport.\n+\n+// check-pass\n+// aux-build:macro-def-site-super.rs\n+\n+extern crate macro_def_site_super;\n+\n+type A = macro_def_site_super::public::mac!();\n+\n+fn main() {}"}, {"sha": "62968ea54e0aa289eb3de58809d2febbfd819ba8", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -4,6 +4,7 @@\n // compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene -Z trim-diagnostic-paths=no\n // check-pass\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// normalize-stdout-test \"expn\\d{3,}\" -> \"expnNNN\"\n //\n // We don't care about symbol ids, so we set them all to 0\n // in the stdout"}, {"sha": "7f7a1009c909a6a751d846e4c5ef5bed08d9c704", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -1,5 +1,5 @@\n Def site: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5)\n-Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:23:37: 23:43 (#4) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:23:43: 23:45 (#4) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:23:43: 23:45 (#4) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:23:45: 23:50 (#4) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:23:50: 23:51 (#4) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:23:51: 23:53 (#4) }]\n+Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:24:37: 24:43 (#4) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:24:43: 24:45 (#4) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:43: 24:45 (#4) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:24:45: 24:50 (#4) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:50: 24:51 (#4) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:24:51: 24:53 (#4) }]\n Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }]\n #![feature /* 0#0 */(prelude_import)]\n // aux-build:make-macro.rs\n@@ -8,6 +8,7 @@ Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro\n // compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene -Z trim-diagnostic-paths=no\n // check-pass\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// normalize-stdout-test \"expn\\d{3,}\" -> \"expnNNN\"\n //\n // We don't care about symbol ids, so we set them all to 0\n // in the stdout\n@@ -48,6 +49,7 @@ crate0::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt:\n crate0::{{expn2}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n crate0::{{expn3}}: parent: crate0::{{expn2}}, call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n crate0::{{expn4}}: parent: crate0::{{expn3}}, call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n+crate1::{{expnNNN}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"include\")\n crate2::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n \n SyntaxContexts:"}, {"sha": "fa52a975bca85bd03e8a9184f637a0d32d31be1c", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -4,6 +4,7 @@\n // compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene\n // compile-flags: -Z trim-diagnostic-paths=no\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// normalize-stdout-test \"expn\\d{3,}\" -> \"expnNNN\"\n // aux-build:test-macros.rs\n \n #![feature(decl_macro)]"}, {"sha": "078038638137327b44fa10c59ecf8ff5262c31af", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -6,19 +6,19 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"struct\",\n-                span: $DIR/nonterminal-token-hygiene.rs:30:5: 30:11 (#5),\n+                span: $DIR/nonterminal-token-hygiene.rs:31:5: 31:11 (#5),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: $DIR/nonterminal-token-hygiene.rs:30:12: 30:13 (#5),\n+                span: $DIR/nonterminal-token-hygiene.rs:31:12: 31:13 (#5),\n             },\n             Punct {\n                 ch: ';',\n                 spacing: Alone,\n-                span: $DIR/nonterminal-token-hygiene.rs:30:13: 30:14 (#5),\n+                span: $DIR/nonterminal-token-hygiene.rs:31:13: 31:14 (#5),\n             },\n         ],\n-        span: $DIR/nonterminal-token-hygiene.rs:20:27: 20:32 (#6),\n+        span: $DIR/nonterminal-token-hygiene.rs:21:27: 21:32 (#6),\n     },\n ]\n #![feature /* 0#0 */(prelude_import)]\n@@ -29,6 +29,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n // compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene\n // compile-flags: -Z trim-diagnostic-paths=no\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// normalize-stdout-test \"expn\\d{3,}\" -> \"expnNNN\"\n // aux-build:test-macros.rs\n \n #![feature /* 0#0 */(decl_macro)]\n@@ -72,6 +73,7 @@ crate0::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt:\n crate0::{{expn2}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"outer\")\n crate0::{{expn3}}: parent: crate0::{{expn2}}, call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro(Bang, \"inner\")\n crate0::{{expn4}}: parent: crate0::{{expn3}}, call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"print_bang\")\n+crate1::{{expnNNN}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"include\")\n crate2::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n \n SyntaxContexts:"}, {"sha": "14523afbdac05f75baf12a9077ecafb4d3f469da", "filename": "src/test/ui/use/use-from-trait-xc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa732a364651010de8f8c5c7bada11e1da7fce1/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr?ref=5aa732a364651010de8f8c5c7bada11e1da7fce1", "patch": "@@ -38,7 +38,7 @@ error[E0432]: unresolved import `use_from_trait_xc::Baz::new`\n   --> $DIR/use-from-trait-xc.rs:23:5\n    |\n LL | use use_from_trait_xc::Baz::new as baznew;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `new` in `Baz`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `new` in `sub::Baz`\n \n error[E0603]: struct `Foo` is private\n   --> $DIR/use-from-trait-xc.rs:14:24"}]}