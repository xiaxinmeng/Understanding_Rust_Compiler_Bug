{"sha": "f4e8ac21cd1d38dc190d463220dc25af22d1d614", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZThhYzIxY2QxZDM4ZGMxOTBkNDYzMjIwZGMyNWFmMjJkMWQ2MTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-27T07:45:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-27T07:45:39Z"}, "message": "auto merge of #5135 : brson/rust/start, r=pcwalton\n\nr?\r\n\r\n#3406\r\n\r\nPretty straightforward. I'm using opaque pointers instead trying to get trans and core to agree on the types of the main function and crate map. One oddity is that this required changing the order of the `-lrustrt` argument to the linker in order to resolve `upcall_new_stack`. Linkers are mysterious.", "tree": {"sha": "9c5bdfd7ed68223f8a2596ace6572350411e511b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c5bdfd7ed68223f8a2596ace6572350411e511b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e8ac21cd1d38dc190d463220dc25af22d1d614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e8ac21cd1d38dc190d463220dc25af22d1d614", "html_url": "https://github.com/rust-lang/rust/commit/f4e8ac21cd1d38dc190d463220dc25af22d1d614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e8ac21cd1d38dc190d463220dc25af22d1d614/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3dbd07979e02bdb4868ba02e468e7d5715af0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3dbd07979e02bdb4868ba02e468e7d5715af0a2", "html_url": "https://github.com/rust-lang/rust/commit/a3dbd07979e02bdb4868ba02e468e7d5715af0a2"}, {"sha": "f4327230fa348283f4b9c81aed76cd0759983965", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4327230fa348283f4b9c81aed76cd0759983965", "html_url": "https://github.com/rust-lang/rust/commit/f4327230fa348283f4b9c81aed76cd0759983965"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "c3e4f925c4014180b827427be2b3a20c5b8404e3", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4e8ac21cd1d38dc190d463220dc25af22d1d614/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e8ac21cd1d38dc190d463220dc25af22d1d614/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=f4e8ac21cd1d38dc190d463220dc25af22d1d614", "patch": "@@ -11,7 +11,7 @@\n //! Runtime calls emitted by the compiler.\n \n use cast::transmute;\n-use libc::{c_char, c_uchar, c_void, size_t, uintptr_t};\n+use libc::{c_char, c_uchar, c_void, size_t, uintptr_t, c_int};\n use managed::raw::BoxRepr;\n use str;\n use sys;\n@@ -121,6 +121,21 @@ pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n     str::raw::from_buf_len(ptr, len)\n }\n \n+#[lang=\"start\"]\n+pub fn start(main: *u8, argc: int, argv: *c_char,\n+             crate_map: *u8) -> int {\n+\n+    extern {\n+        fn rust_start(main: *c_void, argc: c_int, argv: *c_char,\n+                      crate_map: *c_void) -> c_int;\n+    }\n+\n+    unsafe {\n+        return rust_start(main as *c_void, argc as c_int, argv,\n+                          crate_map as *c_void) as int;\n+    }\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "8db27bd675d6eb13c2aa90b3befb0b325bb58531", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4e8ac21cd1d38dc190d463220dc25af22d1d614/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e8ac21cd1d38dc190d463220dc25af22d1d614/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=f4e8ac21cd1d38dc190d463220dc25af22d1d614", "patch": "@@ -838,9 +838,6 @@ pub fn link_binary(sess: Session,\n         }\n     }\n \n-    // Always want the runtime linked in\n-    cc_args.push(~\"-lrustrt\");\n-\n     // On linux librt and libdl are an indirect dependencies via rustrt,\n     // and binutils 2.22+ won't add them automatically\n     if sess.targ_cfg.os == session::os_linux {\n@@ -880,6 +877,9 @@ pub fn link_binary(sess: Session,\n     cc_args.push(~\"-lmorestack\");\n     }\n \n+    // Always want the runtime linked in\n+    cc_args.push(~\"-lrustrt\");\n+\n     // FIXME (#2397): At some point we want to rpath our guesses as to where\n     // extern libraries might live, based on the addl_lib_search_paths\n     cc_args.push_all(rpath::get_rpath_flags(sess, &output));"}, {"sha": "84871f7496472b7dd02f5ae839a8b01b172e1aa0", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4e8ac21cd1d38dc190d463220dc25af22d1d614/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e8ac21cd1d38dc190d463220dc25af22d1d614/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=f4e8ac21cd1d38dc190d463220dc25af22d1d614", "patch": "@@ -75,16 +75,18 @@ pub enum LangItem {\n     ReturnToMutFnLangItem,      // 31\n     CheckNotBorrowedFnLangItem, // 32\n     StrDupUniqFnLangItem,       // 33\n+\n+    StartFnLangItem,            // 34\n }\n \n pub struct LanguageItems {\n-    items: [ Option<def_id> * 34 ]\n+    items: [ Option<def_id> * 35 ]\n }\n \n pub impl LanguageItems {\n     static pub fn new(&self) -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..34 ]\n+            items: [ None, ..35 ]\n         }\n     }\n \n@@ -136,6 +138,8 @@ pub impl LanguageItems {\n             32 => \"check_not_borrowed\",\n             33 => \"strdup_uniq\",\n \n+            34 => \"start\",\n+\n             _ => \"???\"\n         }\n     }\n@@ -248,6 +252,9 @@ pub impl LanguageItems {\n     pub fn strdup_uniq_fn(&const self) -> def_id {\n         self.items[StrDupUniqFnLangItem as uint].get()\n     }\n+    pub fn start_fn(&const self) -> def_id {\n+        self.items[StartFnLangItem as uint].get()\n+    }\n }\n \n fn LanguageItemCollector(crate: @crate,\n@@ -296,6 +303,7 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(@~\"check_not_borrowed\",\n                      CheckNotBorrowedFnLangItem as uint);\n     item_refs.insert(@~\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n+    item_refs.insert(@~\"start\", StartFnLangItem as uint);\n \n     LanguageItemCollector {\n         crate: crate,"}, {"sha": "53555dc9ff855709ee3ed2efbe5de562cd6164da", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f4e8ac21cd1d38dc190d463220dc25af22d1d614/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e8ac21cd1d38dc190d463220dc25af22d1d614/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f4e8ac21cd1d38dc190d463220dc25af22d1d614", "patch": "@@ -2267,7 +2267,7 @@ pub fn create_main_wrapper(ccx: @CrateContext,\n         fn main_name() -> ~str { return ~\"WinMain@16\"; }\n         #[cfg(unix)]\n         fn main_name() -> ~str { return ~\"main\"; }\n-        let llfty = T_fn(~[ccx.int_type, ccx.int_type], ccx.int_type);\n+        let llfty = T_fn(~[ccx.int_type, T_ptr(T_i8())], ccx.int_type);\n \n         // FIXME #4404 android JNI hacks\n         let llfn = if *ccx.sess.building_library {\n@@ -2285,33 +2285,50 @@ pub fn create_main_wrapper(ccx: @CrateContext,\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n         }\n         let crate_map = ccx.crate_map;\n-        let start_ty = T_fn(~[val_ty(rust_main), ccx.int_type, ccx.int_type,\n-                             val_ty(crate_map)], ccx.int_type);\n-        let start = decl_cdecl_fn(ccx.llmod, ~\"rust_start\", start_ty);\n+        let start_def_id = ccx.tcx.lang_items.start_fn();\n+        let start_fn = if start_def_id.crate == ast::local_crate {\n+            ccx.sess.bug(~\"start lang item is never in the local crate\")\n+        } else {\n+            let start_fn_type = csearch::get_type(ccx.tcx,\n+                                                  start_def_id).ty;\n+            trans_external_path(ccx, start_def_id, start_fn_type)\n+        };\n+\n+        let retptr = unsafe {\n+            llvm::LLVMBuildAlloca(bld, ccx.int_type, noname())\n+        };\n \n         let args = unsafe {\n+            let opaque_rust_main = llvm::LLVMBuildPointerCast(\n+                bld, rust_main, T_ptr(T_i8()), noname());\n+            let opaque_crate_map = llvm::LLVMBuildPointerCast(\n+                bld, crate_map, T_ptr(T_i8()), noname());\n+\n             if *ccx.sess.building_library {\n                 ~[\n-                    rust_main,\n+                    retptr,\n+                    C_null(T_opaque_box_ptr(ccx)),\n+                    opaque_rust_main,\n                     llvm::LLVMConstInt(T_i32(), 0u as c_ulonglong, False),\n                     llvm::LLVMConstInt(T_i32(), 0u as c_ulonglong, False),\n-                    crate_map\n+                    opaque_crate_map\n                 ]\n             } else {\n                 ~[\n-                    rust_main,\n+                    retptr,\n+                    C_null(T_opaque_box_ptr(ccx)),\n+                    opaque_rust_main,\n                     llvm::LLVMGetParam(llfn, 0 as c_uint),\n                     llvm::LLVMGetParam(llfn, 1 as c_uint),\n-                    crate_map\n+                    opaque_crate_map\n                 ]\n             }\n         };\n \n-        let result = unsafe {\n-            llvm::LLVMBuildCall(bld, start, vec::raw::to_ptr(args),\n-                                args.len() as c_uint, noname())\n-        };\n         unsafe {\n+            llvm::LLVMBuildCall(bld, start_fn, vec::raw::to_ptr(args),\n+                                args.len() as c_uint, noname());\n+            let result = llvm::LLVMBuildLoad(bld, retptr, noname());\n             llvm::LLVMBuildRet(bld, result);\n         }\n     }"}]}