{"sha": "fdddd832240efc0f1966c90aab75ad24a5d12fac", "node_id": "C_kwDOAAsO6NoAKGZkZGRkODMyMjQwZWZjMGYxOTY2YzkwYWFiNzVhZDI0YTVkMTJmYWM", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-21T11:13:24Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-21T11:13:25Z"}, "message": "Assert that sysroot ABI version matches exactly\n\nOtherwise, fall back to the multi ABI scheme, except in testing, where\nit becomes a hard error.\n\nThis should make it possible to use a rustup-provided rust-analyzer with\nproc macro dylibs compiled by older rustcs, and it'll also catch changes\nto the format of `rustc --version` or the `.rustc` section that would\nmake them impossible to compare for equality.", "tree": {"sha": "3bc23bd76d881d1b0ac2327fc5301a7fee0627c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc23bd76d881d1b0ac2327fc5301a7fee0627c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdddd832240efc0f1966c90aab75ad24a5d12fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdddd832240efc0f1966c90aab75ad24a5d12fac", "html_url": "https://github.com/rust-lang/rust/commit/fdddd832240efc0f1966c90aab75ad24a5d12fac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdddd832240efc0f1966c90aab75ad24a5d12fac/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "480f55533473e1438774ccaac677b10f8a1bd211", "url": "https://api.github.com/repos/rust-lang/rust/commits/480f55533473e1438774ccaac677b10f8a1bd211", "html_url": "https://github.com/rust-lang/rust/commit/480f55533473e1438774ccaac677b10f8a1bd211"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "d7010e825aa9fddb7b35ec7c0f34cc677114de4f", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=fdddd832240efc0f1966c90aab75ad24a5d12fac", "patch": "@@ -26,7 +26,7 @@ use crate::{\n     process::ProcMacroProcessSrv,\n };\n \n-pub use version::{read_dylib_info, RustCInfo};\n+pub use version::{read_dylib_info, read_version, RustCInfo};\n \n #[derive(Copy, Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n pub enum ProcMacroKind {"}, {"sha": "8cef971f3325537514f071bb8785b3170884fb8a", "filename": "crates/proc-macro-api/src/version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fversion.rs?ref=fdddd832240efc0f1966c90aab75ad24a5d12fac", "patch": "@@ -102,7 +102,7 @@ fn read_section<'a>(dylib_binary: &'a [u8], section_name: &str) -> io::Result<&'\n /// * [some more bytes that we don't really care but about still there] :-)\n /// Check this issue for more about the bytes layout:\n /// <https://github.com/rust-lang/rust-analyzer/issues/6174>\n-fn read_version(dylib_path: &AbsPath) -> io::Result<String> {\n+pub fn read_version(dylib_path: &AbsPath) -> io::Result<String> {\n     let dylib_file = File::open(dylib_path)?;\n     let dylib_mmaped = unsafe { Mmap::map(&dylib_file) }?;\n "}, {"sha": "e3e4b9d87ba3540cde91a5f39d4c0181990fd20d", "filename": "crates/proc-macro-srv/build.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-srv%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-srv%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fbuild.rs?ref=fdddd832240efc0f1966c90aab75ad24a5d12fac", "patch": "@@ -0,0 +1,25 @@\n+use std::{env, fs::File, io::Write, path::PathBuf, process::Command};\n+\n+fn main() {\n+    // Determine rustc version `proc-macro-srv` (and thus the sysroot ABI) is\n+    // build with and make it accessible at runtime for ABI selection.\n+\n+    let mut path = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n+    path.push(\"rustc_version.rs\");\n+    let mut f = File::create(&path).unwrap();\n+\n+    let rustc = env::var(\"RUSTC\").expect(\"proc-macro-srv's build script expects RUSTC to be set\");\n+    let output = Command::new(rustc).arg(\"--version\").output().expect(\"rustc --version must run\");\n+    let version_string = std::str::from_utf8(&output.stdout[..])\n+        .expect(\"rustc --version output must be UTF-8\")\n+        .trim();\n+\n+    write!(\n+        f,\n+        \"\n+    #[allow(dead_code)]\n+    pub(crate) const RUSTC_VERSION_STRING: &str = {version_string:?};\n+    \"\n+    )\n+    .unwrap();\n+}"}, {"sha": "a59da0f6b10bbdd9ed0ff79260f2861d4312ad26", "filename": "crates/proc-macro-srv/src/abis/mod.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs?ref=fdddd832240efc0f1966c90aab75ad24a5d12fac", "patch": "@@ -29,6 +29,9 @@ mod abi_1_64;\n #[cfg(feature = \"sysroot-abi\")]\n mod abi_sysroot;\n \n+// see `build.rs`\n+include!(concat!(env!(\"OUT_DIR\"), \"/rustc_version.rs\"));\n+\n // Used by `test/utils.rs`\n #[cfg(test)]\n pub(crate) use abi_1_64::TokenStream as TestTokenStream;\n@@ -74,13 +77,37 @@ impl Abi {\n         lib: &Library,\n         symbol_name: String,\n         info: RustCInfo,\n+        #[cfg_attr(not(feature = \"sysroot-abi\"), allow(unused_variables))] version_string: String,\n     ) -> Result<Abi, LoadProcMacroDylibError> {\n-        // Gated behind an env var for now to avoid a change in behavior for\n-        // rustup-installed rust-analyzer\n+        // the sysroot ABI relies on `extern proc_macro` with unstable features,\n+        // instead of a snapshot of the proc macro bridge's source code. it's only\n+        // enabled if we have an exact version match.\n         #[cfg(feature = \"sysroot-abi\")]\n-        if std::env::var(\"PROC_MACRO_SRV_SYSROOT_ABI\").is_ok() {\n-            let inner = unsafe { Abi_Sysroot::from_lib(lib, symbol_name) }?;\n-            return Ok(Abi::AbiSysroot(inner));\n+        {\n+            if version_string == RUSTC_VERSION_STRING {\n+                let inner = unsafe { Abi_Sysroot::from_lib(lib, symbol_name) }?;\n+                return Ok(Abi::AbiSysroot(inner));\n+            }\n+\n+            // if we reached this point, versions didn't match. in testing, we\n+            // want that to panic - this could mean that the format of `rustc\n+            // --version` no longer matches the format of the version string\n+            // stored in the `.rustc` section, and we want to catch that in-tree\n+            // with `x.py test`\n+            #[cfg(test)]\n+            {\n+                let allow_mismatch = std::env::var(\"PROC_MACRO_SRV_ALLOW_SYSROOT_MISMATCH\");\n+                if let Ok(\"1\") = allow_mismatch.as_deref() {\n+                    // only used by rust-analyzer developers, when working on the\n+                    // sysroot ABI from the rust-analyzer repository - which should\n+                    // only happen pre-subtree. this can be removed later.\n+                } else {\n+                    panic!(\n+                        \"sysroot ABI mismatch: dylib rustc version (read from .rustc section): {:?} != proc-macro-srv version (read from 'rustc --version'): {:?}\",\n+                        version_string, RUSTC_VERSION_STRING\n+                    );\n+                }\n+            }\n         }\n \n         // FIXME: this should use exclusive ranges when they're stable"}, {"sha": "6439fb2130bce46101f5eccc9212df8dda21f69d", "filename": "crates/proc-macro-srv/src/dylib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdddd832240efc0f1966c90aab75ad24a5d12fac/crates%2Fproc-macro-srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fdylib.rs?ref=fdddd832240efc0f1966c90aab75ad24a5d12fac", "patch": "@@ -12,7 +12,7 @@ use libloading::Library;\n use memmap2::Mmap;\n use object::Object;\n use paths::AbsPath;\n-use proc_macro_api::{read_dylib_info, ProcMacroKind};\n+use proc_macro_api::{read_dylib_info, read_version, ProcMacroKind};\n \n use super::abis::Abi;\n \n@@ -122,9 +122,10 @@ impl ProcMacroLibraryLibloading {\n             invalid_data_err(format!(\"expected an absolute path, got {}\", file.display()))\n         })?;\n         let version_info = read_dylib_info(abs_file)?;\n+        let version_string = read_version(abs_file)?;\n \n         let lib = load_library(file).map_err(invalid_data_err)?;\n-        let abi = Abi::from_lib(&lib, symbol_name, version_info)?;\n+        let abi = Abi::from_lib(&lib, symbol_name, version_info, version_string)?;\n         Ok(ProcMacroLibraryLibloading { _lib: lib, abi })\n     }\n }"}]}