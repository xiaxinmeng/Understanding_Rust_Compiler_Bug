{"sha": "25124a84de3e586bc07588943fc53835e03763b8", "node_id": "C_kwDOAAsO6NoAKDI1MTI0YTg0ZGUzZTU4NmJjMDc1ODg5NDNmYzUzODM1ZTAzNzYzYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T14:12:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T14:12:11Z"}, "message": "Auto merge of #14490 - Veykril:crategraph-dedup, r=Veykril\n\ninternal: Switch crate graph to use an Arena instead of a hashmap", "tree": {"sha": "3489b8b1a934266135a1f5fb61d74ce392a1eebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3489b8b1a934266135a1f5fb61d74ce392a1eebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25124a84de3e586bc07588943fc53835e03763b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25124a84de3e586bc07588943fc53835e03763b8", "html_url": "https://github.com/rust-lang/rust/commit/25124a84de3e586bc07588943fc53835e03763b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25124a84de3e586bc07588943fc53835e03763b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ca52e2a91e8ebfd24ace81936caac3fbe15463", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ca52e2a91e8ebfd24ace81936caac3fbe15463", "html_url": "https://github.com/rust-lang/rust/commit/a1ca52e2a91e8ebfd24ace81936caac3fbe15463"}, {"sha": "7f0fbf7f9d5d2810bcfe3d4166c7171eb28f560f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0fbf7f9d5d2810bcfe3d4166c7171eb28f560f", "html_url": "https://github.com/rust-lang/rust/commit/7f0fbf7f9d5d2810bcfe3d4166c7171eb28f560f"}], "stats": {"total": 3054, "additions": 1480, "deletions": 1574}, "files": [{"sha": "de050fd78d455e350925a37774c78f185d4aea1b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -87,6 +87,7 @@ name = \"base-db\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg\",\n+ \"la-arena\",\n  \"profile\",\n  \"rustc-hash\",\n  \"salsa\","}, {"sha": "c2d021c223857dac172ea139fdf414cdf839eef2", "filename": "crates/base-db/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fbase-db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fbase-db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2FCargo.toml?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -15,6 +15,8 @@ doctest = false\n salsa = \"0.17.0-pre.2\"\n rustc-hash = \"1.1.0\"\n \n+la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n+\n # local deps\n cfg.workspace = true\n profile.workspace = true"}, {"sha": "c4ada9c765395f322017948a2b3459f7efacbf63", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 40, "deletions": 44, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -9,8 +9,8 @@\n use std::{fmt, mem, ops, panic::RefUnwindSafe, str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;\n-use rustc_hash::FxHashMap;\n-use stdx::hash::{NoHashHashMap, NoHashHashSet};\n+use la_arena::{Arena, Idx, RawIdx};\n+use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::SmolStr;\n use tt::token_id::Subtree;\n use vfs::{file_set::FileSet, AbsPathBuf, AnchoredPath, FileId, VfsPath};\n@@ -84,17 +84,22 @@ impl SourceRoot {\n ///\n /// `CrateGraph` is `!Serialize` by design, see\n /// <https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/architecture.md#serialization>\n-#[derive(Debug, Clone, Default /* Serialize, Deserialize */)]\n+#[derive(Clone, Default)]\n pub struct CrateGraph {\n-    arena: NoHashHashMap<CrateId, CrateData>,\n+    arena: Arena<CrateData>,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct CrateId(pub u32);\n+impl fmt::Debug for CrateGraph {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_map()\n+            .entries(self.arena.iter().map(|(id, data)| (u32::from(id.into_raw()), data)))\n+            .finish()\n+    }\n+}\n \n-impl stdx::hash::NoHashHashable for CrateId {}\n+pub type CrateId = Idx<CrateData>;\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct CrateName(SmolStr);\n \n impl CrateName {\n@@ -182,7 +187,7 @@ impl fmt::Display for LangCrateOrigin {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct CrateDisplayName {\n     // The name we use to display various paths (with `_`).\n     crate_name: CrateName,\n@@ -261,7 +266,7 @@ pub struct ProcMacro {\n     pub expander: Arc<dyn ProcMacroExpander>,\n }\n \n-#[derive(Debug, Copy, Clone)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum ReleaseChannel {\n     Stable,\n     Beta,\n@@ -287,7 +292,7 @@ impl ReleaseChannel {\n     }\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n pub struct CrateData {\n     pub root_file_id: FileId,\n     pub edition: Edition,\n@@ -327,7 +332,7 @@ pub struct Env {\n     entries: FxHashMap<String, String>,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Dependency {\n     pub crate_id: CrateId,\n     pub name: CrateName,\n@@ -378,10 +383,7 @@ impl CrateGraph {\n             is_proc_macro,\n             channel,\n         };\n-        let crate_id = CrateId(self.arena.len() as u32);\n-        let prev = self.arena.insert(crate_id, data);\n-        assert!(prev.is_none());\n-        crate_id\n+        self.arena.alloc(data)\n     }\n \n     pub fn add_dep(\n@@ -394,14 +396,14 @@ impl CrateGraph {\n         // Check if adding a dep from `from` to `to` creates a cycle. To figure\n         // that out, look for a  path in the *opposite* direction, from `to` to\n         // `from`.\n-        if let Some(path) = self.find_path(&mut NoHashHashSet::default(), dep.crate_id, from) {\n+        if let Some(path) = self.find_path(&mut FxHashSet::default(), dep.crate_id, from) {\n             let path = path.into_iter().map(|it| (it, self[it].display_name.clone())).collect();\n             let err = CyclicDependenciesError { path };\n             assert!(err.from().0 == from && err.to().0 == dep.crate_id);\n             return Err(err);\n         }\n \n-        self.arena.get_mut(&from).unwrap().add_dep(dep);\n+        self.arena[from].add_dep(dep);\n         Ok(())\n     }\n \n@@ -410,14 +412,14 @@ impl CrateGraph {\n     }\n \n     pub fn iter(&self) -> impl Iterator<Item = CrateId> + '_ {\n-        self.arena.keys().copied()\n+        self.arena.iter().map(|(idx, _)| idx)\n     }\n \n     /// Returns an iterator over all transitive dependencies of the given crate,\n     /// including the crate itself.\n     pub fn transitive_deps(&self, of: CrateId) -> impl Iterator<Item = CrateId> {\n         let mut worklist = vec![of];\n-        let mut deps = NoHashHashSet::default();\n+        let mut deps = FxHashSet::default();\n \n         while let Some(krate) = worklist.pop() {\n             if !deps.insert(krate) {\n@@ -434,11 +436,11 @@ impl CrateGraph {\n     /// including the crate itself.\n     pub fn transitive_rev_deps(&self, of: CrateId) -> impl Iterator<Item = CrateId> {\n         let mut worklist = vec![of];\n-        let mut rev_deps = NoHashHashSet::default();\n+        let mut rev_deps = FxHashSet::default();\n         rev_deps.insert(of);\n \n-        let mut inverted_graph = NoHashHashMap::<_, Vec<_>>::default();\n-        self.arena.iter().for_each(|(&krate, data)| {\n+        let mut inverted_graph = FxHashMap::<_, Vec<_>>::default();\n+        self.arena.iter().for_each(|(krate, data)| {\n             data.dependencies\n                 .iter()\n                 .for_each(|dep| inverted_graph.entry(dep.crate_id).or_default().push(krate))\n@@ -461,17 +463,17 @@ impl CrateGraph {\n     /// come before the crate itself).\n     pub fn crates_in_topological_order(&self) -> Vec<CrateId> {\n         let mut res = Vec::new();\n-        let mut visited = NoHashHashSet::default();\n+        let mut visited = FxHashSet::default();\n \n-        for krate in self.arena.keys().copied() {\n+        for krate in self.iter() {\n             go(self, &mut visited, &mut res, krate);\n         }\n \n         return res;\n \n         fn go(\n             graph: &CrateGraph,\n-            visited: &mut NoHashHashSet<CrateId>,\n+            visited: &mut FxHashSet<CrateId>,\n             res: &mut Vec<CrateId>,\n             source: CrateId,\n         ) {\n@@ -487,7 +489,7 @@ impl CrateGraph {\n \n     // FIXME: this only finds one crate with the given root; we could have multiple\n     pub fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n-        let (&crate_id, _) =\n+        let (crate_id, _) =\n             self.arena.iter().find(|(_crate_id, data)| data.root_file_id == file_id)?;\n         Some(crate_id)\n     }\n@@ -499,24 +501,26 @@ impl CrateGraph {\n     /// amount.\n     pub fn extend(&mut self, other: CrateGraph, proc_macros: &mut ProcMacroPaths) -> u32 {\n         let start = self.arena.len() as u32;\n-        self.arena.extend(other.arena.into_iter().map(|(id, mut data)| {\n-            let new_id = id.shift(start);\n+        self.arena.extend(other.arena.into_iter().map(|(_, mut data)| {\n             for dep in &mut data.dependencies {\n-                dep.crate_id = dep.crate_id.shift(start);\n+                dep.crate_id =\n+                    CrateId::from_raw(RawIdx::from(u32::from(dep.crate_id.into_raw()) + start));\n             }\n-            (new_id, data)\n+            data\n         }));\n \n         *proc_macros = mem::take(proc_macros)\n             .into_iter()\n-            .map(|(id, macros)| (id.shift(start), macros))\n+            .map(|(id, macros)| {\n+                (CrateId::from_raw(RawIdx::from(u32::from(id.into_raw()) + start)), macros)\n+            })\n             .collect();\n         start\n     }\n \n     fn find_path(\n         &self,\n-        visited: &mut NoHashHashSet<CrateId>,\n+        visited: &mut FxHashSet<CrateId>,\n         from: CrateId,\n         to: CrateId,\n     ) -> Option<Vec<CrateId>> {\n@@ -546,10 +550,8 @@ impl CrateGraph {\n         let std = self.hacky_find_crate(\"std\");\n         match (cfg_if, std) {\n             (Some(cfg_if), Some(std)) => {\n-                self.arena.get_mut(&cfg_if).unwrap().dependencies.clear();\n-                self.arena\n-                    .get_mut(&std)\n-                    .unwrap()\n+                self.arena[cfg_if].dependencies.clear();\n+                self.arena[std]\n                     .dependencies\n                     .push(Dependency::new(CrateName::new(\"cfg_if\").unwrap(), cfg_if));\n                 true\n@@ -566,13 +568,7 @@ impl CrateGraph {\n impl ops::Index<CrateId> for CrateGraph {\n     type Output = CrateData;\n     fn index(&self, crate_id: CrateId) -> &CrateData {\n-        &self.arena[&crate_id]\n-    }\n-}\n-\n-impl CrateId {\n-    fn shift(self, amount: u32) -> CrateId {\n-        CrateId(self.0 + amount)\n+        &self.arena[crate_id]\n     }\n }\n "}, {"sha": "faddf19e34a7b587e324dfb8b89207812ec4ce79", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -8,7 +8,7 @@ pub mod fixture;\n \n use std::{panic, sync::Arc};\n \n-use stdx::hash::NoHashHashSet;\n+use rustc_hash::FxHashSet;\n use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n \n pub use crate::{\n@@ -59,7 +59,7 @@ pub trait FileLoader {\n     /// Text of the file.\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId>;\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>>;\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -99,10 +99,10 @@ pub trait SourceDatabaseExt: SourceDatabase {\n     #[salsa::input]\n     fn source_root(&self, id: SourceRootId) -> Arc<SourceRoot>;\n \n-    fn source_root_crates(&self, id: SourceRootId) -> Arc<NoHashHashSet<CrateId>>;\n+    fn source_root_crates(&self, id: SourceRootId) -> Arc<FxHashSet<CrateId>>;\n }\n \n-fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<NoHashHashSet<CrateId>> {\n+fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<FxHashSet<CrateId>> {\n     let graph = db.crate_graph();\n     let res = graph\n         .iter()\n@@ -128,7 +128,7 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         source_root.resolve_path(path)\n     }\n \n-    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         let _p = profile::span(\"relevant_crates\");\n         let source_root = self.0.file_source_root(file_id);\n         self.0.source_root_crates(source_root)"}, {"sha": "2899ca4337d209cc669cc5fa164e269b80eee4dd", "filename": "crates/hir-def/src/body/tests/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fhir-def%2Fsrc%2Fbody%2Ftests%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fhir-def%2Fsrc%2Fbody%2Ftests%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Ftests%2Fblock.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -148,8 +148,8 @@ fn f() {\n }\n     \"#,\n         expect![[r#\"\n-            BlockId(1) in ModuleId { krate: CrateId(0), block: Some(BlockId(0)), local_id: Idx::<ModuleData>(1) }\n-            BlockId(0) in ModuleId { krate: CrateId(0), block: None, local_id: Idx::<ModuleData>(0) }\n+            BlockId(1) in ModuleId { krate: Idx::<CrateData>(0), block: Some(BlockId(0)), local_id: Idx::<ModuleData>(1) }\n+            BlockId(0) in ModuleId { krate: Idx::<CrateData>(0), block: None, local_id: Idx::<ModuleData>(0) }\n             crate scope\n         \"#]],\n     );"}, {"sha": "5f3b2a72949fab03e6d49d7a9a31c6046a041578", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -11,7 +11,7 @@ use base_db::{\n     Upcast,\n };\n use hir_expand::{db::ExpandDatabase, InFile};\n-use stdx::hash::NoHashHashSet;\n+use rustc_hash::FxHashSet;\n use syntax::{algo, ast, AstNode};\n \n use crate::{\n@@ -77,7 +77,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "b994ddf15f0e36f77c9c41d19451724e9046ec97", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -11,7 +11,8 @@ use base_db::{\n };\n use hir_def::{db::DefDatabase, ModuleId};\n use hir_expand::db::ExpandDatabase;\n-use stdx::hash::{NoHashHashMap, NoHashHashSet};\n+use rustc_hash::FxHashSet;\n+use stdx::hash::NoHashHashMap;\n use syntax::TextRange;\n use test_utils::extract_annotations;\n \n@@ -81,7 +82,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "11b2a5e1c2ef364dc7b8e37cd83797e548d85b6e", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -53,7 +53,6 @@ use hir::{\n     db::{DefDatabase, ExpandDatabase, HirDatabase},\n     symbols::FileSymbolKind,\n };\n-use stdx::hash::NoHashHashSet;\n \n use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n pub use rustc_hash::{FxHashMap, FxHashSet, FxHasher};\n@@ -120,7 +119,7 @@ impl FileLoader for RootDatabase {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "7bda07ace2db0f37756041748e6a0bde1614a445", "filename": "crates/ide-db/src/test_data/test_symbol_index_collection.txt", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -2,9 +2,7 @@\n     (\n         Module {\n             id: ModuleId {\n-                krate: CrateId(\n-                    0,\n-                ),\n+                krate: Idx::<CrateData>(0),\n                 block: None,\n                 local_id: Idx::<ModuleData>(0),\n             },\n@@ -381,9 +379,7 @@\n     (\n         Module {\n             id: ModuleId {\n-                krate: CrateId(\n-                    0,\n-                ),\n+                krate: Idx::<CrateData>(0),\n                 block: None,\n                 local_id: Idx::<ModuleData>(1),\n             },\n@@ -412,9 +408,7 @@\n     (\n         Module {\n             id: ModuleId {\n-                krate: CrateId(\n-                    0,\n-                ),\n+                krate: Idx::<CrateData>(0),\n                 block: None,\n                 local_id: Idx::<ModuleData>(2),\n             },"}, {"sha": "296270036002b906a8ec950621291a11bdca9486", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -12,9 +12,8 @@ use ide_db::{\n         salsa::{Database, ParallelDatabase, Snapshot},\n         Cancelled, CrateGraph, CrateId, SourceDatabase, SourceDatabaseExt,\n     },\n-    FxIndexMap,\n+    FxHashSet, FxIndexMap,\n };\n-use stdx::hash::NoHashHashSet;\n \n use crate::RootDatabase;\n \n@@ -142,7 +141,7 @@ pub(crate) fn parallel_prime_caches(\n     }\n }\n \n-fn compute_crates_to_prime(db: &RootDatabase, graph: &CrateGraph) -> NoHashHashSet<CrateId> {\n+fn compute_crates_to_prime(db: &RootDatabase, graph: &CrateGraph) -> FxHashSet<CrateId> {\n     // We're only interested in the workspace crates and the `ImportMap`s of their direct\n     // dependencies, though in practice the latter also compute the `DefMap`s.\n     // We don't prime transitive dependencies because they're generally not visible in"}, {"sha": "711f7e3f876f4c2087277b2f941ecf1a4db1e7af", "filename": "crates/ide/src/view_crate_graph.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fide%2Fsrc%2Fview_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fide%2Fsrc%2Fview_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fview_crate_graph.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -3,9 +3,8 @@ use std::sync::Arc;\n use dot::{Id, LabelText};\n use ide_db::{\n     base_db::{CrateGraph, CrateId, Dependency, SourceDatabase, SourceDatabaseExt},\n-    RootDatabase,\n+    FxHashSet, RootDatabase,\n };\n-use stdx::hash::NoHashHashSet;\n \n // Feature: View Crate Graph\n //\n@@ -42,7 +41,7 @@ pub(crate) fn view_crate_graph(db: &RootDatabase, full: bool) -> Result<String,\n \n struct DotCrateGraph {\n     graph: Arc<CrateGraph>,\n-    crates_to_render: NoHashHashSet<CrateId>,\n+    crates_to_render: FxHashSet<CrateId>,\n }\n \n type Edge<'a> = (CrateId, &'a Dependency);\n@@ -80,7 +79,7 @@ impl<'a> dot::Labeller<'a, CrateId, Edge<'a>> for DotCrateGraph {\n     }\n \n     fn node_id(&'a self, n: &CrateId) -> Id<'a> {\n-        Id::new(format!(\"_{}\", n.0)).unwrap()\n+        Id::new(format!(\"_{}\", u32::from(n.into_raw()))).unwrap()\n     }\n \n     fn node_shape(&'a self, _node: &CrateId) -> Option<LabelText<'a>> {"}, {"sha": "4dc24c4d567ff65a7f8f5b1e2c2b86e72bbf0936", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -52,6 +52,7 @@\n use std::path::PathBuf;\n \n use base_db::{CrateDisplayName, CrateId, CrateName, Dependency, Edition};\n+use la_arena::RawIdx;\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n use serde::{de, Deserialize};\n@@ -135,7 +136,10 @@ impl ProjectJson {\n                             .deps\n                             .into_iter()\n                             .map(|dep_data| {\n-                                Dependency::new(dep_data.name, CrateId(dep_data.krate as u32))\n+                                Dependency::new(\n+                                    dep_data.name,\n+                                    CrateId::from_raw(RawIdx::from(dep_data.krate as u32)),\n+                                )\n                             })\n                             .collect::<Vec<_>>(),\n                         cfg: crate_data.cfg,\n@@ -162,7 +166,10 @@ impl ProjectJson {\n \n     /// Returns an iterator over the crates in the project.\n     pub fn crates(&self) -> impl Iterator<Item = (CrateId, &Crate)> + '_ {\n-        self.crates.iter().enumerate().map(|(idx, krate)| (CrateId(idx as u32), krate))\n+        self.crates\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, krate)| (CrateId::from_raw(RawIdx::from(idx as u32)), krate))\n     }\n \n     /// Returns the path to the project's root folder."}, {"sha": "3e5234afc810f5e24f50a1179ec693e569168ccd", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 1361, "deletions": 1495, "changes": 2856, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=25124a84de3e586bc07588943fc53835e03763b8"}, {"sha": "c8e83a687e02b442c955ae32284206ed00d92470", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -13,7 +13,7 @@ use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::{FxHashMap, FxHashSet};\n use semver::Version;\n-use stdx::{always, hash::NoHashHashMap};\n+use stdx::always;\n \n use crate::{\n     build_scripts::BuildScriptOutput,\n@@ -732,7 +732,7 @@ fn project_json_to_crate_graph(\n     });\n \n     let mut cfg_cache: FxHashMap<&str, Vec<CfgFlag>> = FxHashMap::default();\n-    let crates: NoHashHashMap<CrateId, CrateId> = project\n+    let crates: FxHashMap<CrateId, CrateId> = project\n         .crates()\n         .filter_map(|(crate_id, krate)| Some((crate_id, krate, load(&krate.root_module)?)))\n         .map("}, {"sha": "07608a41857fb22ee34116e11614af5d035b08d0", "filename": "lib/la-arena/src/lib.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/25124a84de3e586bc07588943fc53835e03763b8/lib%2Fla-arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25124a84de3e586bc07588943fc53835e03763b8/lib%2Fla-arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Flib.rs?ref=25124a84de3e586bc07588943fc53835e03763b8", "patch": "@@ -4,8 +4,9 @@\n #![warn(missing_docs)]\n \n use std::{\n-    fmt,\n+    cmp, fmt,\n     hash::{Hash, Hasher},\n+    iter::Enumerate,\n     marker::PhantomData,\n     ops::{Index, IndexMut, Range, RangeInclusive},\n };\n@@ -47,6 +48,18 @@ pub struct Idx<T> {\n     _ty: PhantomData<fn() -> T>,\n }\n \n+impl<T> Ord for Idx<T> {\n+    fn cmp(&self, other: &Self) -> cmp::Ordering {\n+        self.raw.cmp(&other.raw)\n+    }\n+}\n+\n+impl<T> PartialOrd for Idx<T> {\n+    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n+        self.raw.partial_cmp(&other.raw)\n+    }\n+}\n+\n impl<T> Clone for Idx<T> {\n     fn clone(&self) -> Self {\n         *self\n@@ -335,7 +348,7 @@ impl<T> Arena<T> {\n     /// assert_eq!(iterator.next(), Some(&40));\n     /// assert_eq!(iterator.next(), Some(&60));\n     /// ```\n-    pub fn values(&mut self) -> impl Iterator<Item = &T> + ExactSizeIterator + DoubleEndedIterator {\n+    pub fn values(&self) -> impl Iterator<Item = &T> + ExactSizeIterator + DoubleEndedIterator {\n         self.data.iter()\n     }\n \n@@ -410,3 +423,32 @@ impl<T> FromIterator<T> for Arena<T> {\n         Arena { data: Vec::from_iter(iter) }\n     }\n }\n+\n+/// An iterator over the arena\u2019s elements.\n+pub struct IntoIter<T>(Enumerate<<Vec<T> as IntoIterator>::IntoIter>);\n+\n+impl<T> Iterator for IntoIter<T> {\n+    type Item = (Idx<T>, T);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.0.next().map(|(idx, value)| (Idx::from_raw(RawIdx(idx as u32)), value))\n+    }\n+}\n+\n+impl<T> IntoIterator for Arena<T> {\n+    type Item = (Idx<T>, T);\n+\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        IntoIter(self.data.into_iter().enumerate())\n+    }\n+}\n+\n+impl<T> Extend<T> for Arena<T> {\n+    fn extend<II: IntoIterator<Item = T>>(&mut self, iter: II) {\n+        for t in iter {\n+            self.alloc(t);\n+        }\n+    }\n+}"}]}