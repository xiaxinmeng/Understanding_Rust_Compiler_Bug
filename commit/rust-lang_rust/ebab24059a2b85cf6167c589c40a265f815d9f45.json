{"sha": "ebab24059a2b85cf6167c589c40a265f815d9f45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYWIyNDA1OWEyYjg1Y2Y2MTY3YzU4OWM0MGEyNjVmODE1ZDlmNDU=", "commit": {"author": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-01-26T14:15:10Z"}, "committer": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-01-31T15:57:28Z"}, "message": "Apply several fixes for Illumos support", "tree": {"sha": "45743743244ea0ac23f8bbc9518265d7adce155a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45743743244ea0ac23f8bbc9518265d7adce155a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebab24059a2b85cf6167c589c40a265f815d9f45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJWri7oAAoJED7qN4oOp1ja3PAH/00M2tmLPFx1EZEhTZMv9M9R\nWT5N+7kDMIk/7O1lglgImfb8L9SlYlF5/AXZMAv+I496ZKfxJfylLOOUphJrp4PO\neR+pN4nQT/Le1z9+8OHC78bg7/lCnHMnwClo8lP9jbOlRNzthtJXSmjWMuFFqh8B\nRVBRgbqX+pBBIGW322Y3FSIwE61Tt0jCLBy7iEf4BLPltw4drzV1x46XFDuzbphB\nGaryn08rufkTEIj6uR1vEpd+jmNniY98Kgt0uMJTGtzFUBJmS8rVyBkPcxVlPIoV\ngaQiLOY+p2cNRmnAMh/sc2OjoK2HZnQDV1aroS0btcDx3U49hiRb1dFQkCsTt2c=\n=K9tJ\n-----END PGP SIGNATURE-----", "payload": "tree 45743743244ea0ac23f8bbc9518265d7adce155a\nparent f189d7a6937c063f9592136a39c836b17c008a93\nauthor Nikita Baksalyar <nikita.baksalyar@gmail.com> 1453817710 +0300\ncommitter Nikita Baksalyar <nikita.baksalyar@gmail.com> 1454255848 +0300\n\nApply several fixes for Illumos support\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebab24059a2b85cf6167c589c40a265f815d9f45", "html_url": "https://github.com/rust-lang/rust/commit/ebab24059a2b85cf6167c589c40a265f815d9f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebab24059a2b85cf6167c589c40a265f815d9f45/comments", "author": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f189d7a6937c063f9592136a39c836b17c008a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/f189d7a6937c063f9592136a39c836b17c008a93", "html_url": "https://github.com/rust-lang/rust/commit/f189d7a6937c063f9592136a39c836b17c008a93"}], "stats": {"total": 123, "additions": 79, "deletions": 44}, "files": [{"sha": "27e0234a7dee326c6f307051436e40dd3950cbb6", "filename": "configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebab24059a2b85cf6167c589c40a265f815d9f45/configure", "raw_url": "https://github.com/rust-lang/rust/raw/ebab24059a2b85cf6167c589c40a265f815d9f45/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=ebab24059a2b85cf6167c589c40a265f815d9f45", "patch": "@@ -1,12 +1,12 @@\n #!/bin/sh\n \n-# /bin/sh on Solaris is not a POSIX compatible shell, but /usr/bin/ksh is.\n+# /bin/sh on Solaris is not a POSIX compatible shell, but /usr/bin/bash is.\n if [ `uname -s` = 'SunOS' -a \"${POSIX_SHELL}\" != \"true\" ]; then\n     POSIX_SHELL=\"true\"\n     export POSIX_SHELL\n-    exec /usr/bin/bash $0 \"$@\"\n+    exec /usr/bin/env bash $0 \"$@\"\n fi\n-unset POSIX_SHELL # clear it so if we invoke other scripts, they run as ksh as well\n+unset POSIX_SHELL # clear it so if we invoke other scripts, they run as bash as well\n \n msg() {\n     echo \"configure: $*\""}, {"sha": "233f9a20c1f2ba6e974dde9c2e64a5626bef7740", "filename": "src/librustc_back/target/x86_64_sun_solaris.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebab24059a2b85cf6167c589c40a265f815d9f45/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebab24059a2b85cf6167c589c40a265f815d9f45/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs?ref=ebab24059a2b85cf6167c589c40a265f815d9f45", "patch": "@@ -13,8 +13,6 @@ use target::Target;\n pub fn target() -> Target {\n     let mut base = super::sunos_base::opts();\n     base.pre_link_args.push(\"-m64\".to_string());\n-    base.pre_link_args.push(\"-lsocket\".to_string());\n-    base.pre_link_args.push(\"-lposix4\".to_string());\n \n     Target {\n         llvm_target: \"x86_64-pc-solaris2.11\".to_string(),"}, {"sha": "f119b1d9f9ac1537939ddaf738ea494f658f6eb4", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 64, "deletions": 35, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/ebab24059a2b85cf6167c589c40a265f815d9f45/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebab24059a2b85cf6167c589c40a265f815d9f45/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=ebab24059a2b85cf6167c589c40a265f815d9f45", "patch": "@@ -84,38 +84,6 @@ mod cmath {\n     }\n }\n \n-#[cfg(not(target_os = \"sunos\"))]\n-macro_rules! log_wrapper {\n-    ($num:ident, $f:ident) => (\n-        unsafe { intrinsics::$f($num) }\n-    )\n-}\n-\n-// Illumos requires a wrapper around log, log2, and log10 functions\n-// because of non-standard behavior (e.g. log(-n) returns -Inf instead\n-// of expected NaN).\n-#[cfg(target_os = \"sunos\")]\n-macro_rules! log_wrapper {\n-    ($num:ident, $f:ident) => (\n-        if $num.is_finite() {\n-            if $num > 0.0 {\n-                return unsafe { intrinsics::$f($num) }\n-            }\n-            return if $num == 0.0 {\n-                NEG_INFINITY // log(0) = -Inf\n-            } else {\n-                NAN // log(-ve) = NaN\n-            }\n-        } else if $num.is_nan() {\n-            $num // log(NaN) = NaN\n-        } else if $num > 0.0 {\n-            $num // log(Inf) = Inf\n-        } else {\n-            return NAN // log(-Inf) = NaN\n-        }\n-    )\n-}\n-\n #[cfg(not(test))]\n #[lang = \"f64\"]\n impl f64 {\n@@ -543,7 +511,28 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f64 {\n-        log_wrapper!(self, logf64)\n+        if !cfg!(target_os = \"sunos\") {\n+            unsafe { intrinsics::logf64(self) }\n+        } else {\n+            // Illumos requires a wrapper around log, log2, and log10 functions\n+            // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n+            // of expected NaN).\n+            if self.is_finite() {\n+                if self > 0.0 {\n+                    unsafe { intrinsics::logf64(self) }\n+                } else if self == 0.0 {\n+                    NEG_INFINITY // log(0) = -Inf\n+                } else {\n+                    NAN // log(-n) = NaN\n+                }\n+            } else if self.is_nan() {\n+                self // log(NaN) = NaN\n+            } else if self > 0.0 {\n+                self // log(Inf) = Inf\n+            } else {\n+                NAN // log(-Inf) = NaN\n+            }\n+        }\n     }\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n@@ -578,7 +567,27 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log2(self) -> f64 {\n-        log_wrapper!(self, log2f64)\n+        if !cfg!(target_os = \"sunos\") {\n+            unsafe { intrinsics::log2f64(self) }\n+        } else {\n+            // Illumos requires a wrapper around the log2 function because of\n+            // its non-standard behavior\n+            if self.is_finite() {\n+                if self > 0.0 {\n+                    unsafe { intrinsics::log2f64(self) }\n+                } else if self == 0.0 {\n+                    NEG_INFINITY // log2(0) = -Inf\n+                } else {\n+                    NAN // log2(-n) = NaN\n+                }\n+            } else if self.is_nan() {\n+                self // log2(NaN) = NaN\n+            } else if self > 0.0 {\n+                self // log2(Inf) = Inf\n+            } else {\n+                NAN // log2(-Inf) = NaN\n+            }\n+        }\n     }\n \n     /// Returns the base 10 logarithm of the number.\n@@ -594,7 +603,27 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f64 {\n-        log_wrapper!(self, log10f64)\n+        if !cfg!(target_os = \"sunos\") {\n+            unsafe { intrinsics::log10f64(self) }\n+        } else {\n+            // Illumos requires a wrapper around the log10 function because of\n+            // its non-standard behavior.\n+            if self.is_finite() {\n+                if self > 0.0 {\n+                    unsafe { intrinsics::log10f64(self) }\n+                } else if self == 0.0 {\n+                    NEG_INFINITY // log10(0) = -Inf\n+                } else {\n+                    NAN // log10(-n) = NaN\n+                }\n+            } else if self.is_nan() {\n+                self // log10(NaN) = NaN\n+            } else if self > 0.0 {\n+                self // log10(Inf) = Inf\n+            } else {\n+                NAN // log10(-Inf) = NaN\n+            }\n+        }\n     }\n \n     /// Converts radians to degrees."}, {"sha": "f5853cdaf3d65723c19e88360cf06e7cf8a89972", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebab24059a2b85cf6167c589c40a265f815d9f45/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebab24059a2b85cf6167c589c40a265f815d9f45/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=ebab24059a2b85cf6167c589c40a265f815d9f45", "patch": "@@ -39,6 +39,12 @@ extern {}\n #[link(name = \"pthread\")]\n extern {}\n \n+#[cfg(target_os = \"sunos\")]\n+#[link(name = \"socket\")]\n+#[link(name = \"posix4\")]\n+#[link(name = \"pthread\")]\n+extern {}\n+\n // For PNaCl targets, nacl_io is a Pepper wrapper for some IO functions\n // missing (ie always error) in Newlib.\n #[cfg(all(target_os = \"nacl\", not(test)))]"}, {"sha": "e6883a11adab00e1a82fb13766cc3cd7c0da15c2", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebab24059a2b85cf6167c589c40a265f815d9f45/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebab24059a2b85cf6167c589c40a265f815d9f45/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=ebab24059a2b85cf6167c589c40a265f815d9f45", "patch": "@@ -269,12 +269,14 @@ pub fn current_exe() -> io::Result<PathBuf> {\n             Err(io::Error::last_os_error())\n         } else {\n             let filename = CStr::from_ptr(path).to_bytes();\n+            let path = PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename));\n+\n+            // Prepend a current working directory to the path if\n+            // it doesn't contain an absolute pathname.\n             if filename[0] == b'/' {\n-                Ok(PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename)))\n+                Ok(path)\n             } else {\n-                // Prepend current working directory to the path if\n-                // it doesn't contain an absolute pathname.\n-                return getcwd().map(|cwd| cwd.join(<OsStr as OsStrExt>::from_bytes(filename)))\n+                getcwd().map(|cwd| cwd.join(path))\n             }\n         }\n     }"}]}