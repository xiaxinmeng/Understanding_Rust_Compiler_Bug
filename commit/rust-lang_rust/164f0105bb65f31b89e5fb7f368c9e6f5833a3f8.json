{"sha": "164f0105bb65f31b89e5fb7f368c9e6f5833a3f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NGYwMTA1YmI2NWYzMWI4OWU1ZmI3ZjM2OGM5ZTZmNTgzM2EzZjg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-25T20:19:19Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-20T10:37:15Z"}, "message": "Add safe_suggestion attribute", "tree": {"sha": "c398440b210bd52fbfc2ffe6f98760fff9422450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c398440b210bd52fbfc2ffe6f98760fff9422450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8", "html_url": "https://github.com/rust-lang/rust/commit/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601bbf26a89f178374278030d7821e2cc77437f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/601bbf26a89f178374278030d7821e2cc77437f7", "html_url": "https://github.com/rust-lang/rust/commit/601bbf26a89f178374278030d7821e2cc77437f7"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "673a717b5f8e963f2c044a5a24ffb8ca015acb15", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=164f0105bb65f31b89e5fb7f368c9e6f5833a3f8", "patch": "@@ -28,6 +28,7 @@\n \n #![cfg_attr(test, allow(deprecated))] // rand\n #![cfg_attr(not(stage0), deny(warnings))]\n+#![cfg_attr(not(stage0), feature(safe_suggestion))]\n \n #![feature(alloc)]\n #![feature(allow_internal_unstable)]"}, {"sha": "a5017d5d7010f01aa74173da96080467ac05bfd3", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=164f0105bb65f31b89e5fb7f368c9e6f5833a3f8", "patch": "@@ -1231,6 +1231,7 @@ impl String {\n     /// assert_eq!(a.len(), 3);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(stage0), safe_suggestion)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.vec.len()"}, {"sha": "98cbd742b1092fcb8be6b14d6c944426adb72675", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=164f0105bb65f31b89e5fb7f368c9e6f5833a3f8", "patch": "@@ -587,19 +587,29 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // look for expected with found id\n                 self.tcx.populate_inherent_implementations_for_type_if_necessary(found);\n                 if let Some(impl_infos) = self.tcx.inherent_impls.borrow().get(&found) {\n-                    let mut methods = Vec::new();\n+                    let mut methods: Vec<(Option<ast::Attribute>, DefId, ImplOrTraitItem<'tcx>)> = Vec::new();\n                     for impl_ in impl_infos {\n                         methods.append(&mut self.tcx\n                                                 .impl_or_trait_items(*impl_)\n                                                 .iter()\n-                                                .map(|&did| self.tcx.impl_or_trait_item(did))\n-                                                .filter(|x| {\n+                                                .map(|&did| (None, did, self.tcx.impl_or_trait_item(did)))\n+                                                .filter(|&(_, _, ref x)| {\n                                                     self.matches_return_type(x, &expected_ty)\n                                                 })\n                                                 .collect());\n                     }\n-                    for method in methods {\n-                        println!(\"==> {:?}\", method.name());\n+                    let safe_suggestions: Vec<_> = methods.iter()\n+                                                  .map(|&(_, ref id, ref x)| (self.find_attr(*id, \"safe_suggestion\"), id, x))\n+                                                  .filter(|&(ref res, _, _)| res.is_some())\n+                                                  .collect();\n+                    if safe_suggestions.len() > 0 {\n+                        for (_, _, method) in safe_suggestions {\n+                            println!(\"safe ==> {:?}\", method.name());\n+                        }\n+                    } else {\n+                        for &(_, _, ref method) in methods.iter() {\n+                            println!(\"not safe ==> {:?}\", method.name());\n+                        }\n                     }\n                 }\n             }\n@@ -615,6 +625,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.note_and_explain_type_err(diag, terr, span);\n     }\n \n+    fn find_attr(&self, def_id: DefId, attr_name: &str) -> Option<ast::Attribute> {\n+        for item in self.tcx.get_attrs(def_id).iter() {\n+            if item.check_name(attr_name) {\n+                return Some(item.clone());\n+            }\n+        }\n+        None\n+    }\n+\n     pub fn report_and_explain_type_error(&self,\n                                          trace: TypeTrace<'tcx>,\n                                          terr: &TypeError<'tcx>)"}, {"sha": "dbb31b0e56cd1b7e001355651725dec0ed82add1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/164f0105bb65f31b89e5fb7f368c9e6f5833a3f8/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=164f0105bb65f31b89e5fb7f368c9e6f5833a3f8", "patch": "@@ -304,6 +304,7 @@ declare_features! (\n     // Allows using `Self` and associated types in struct expressions and patterns.\n     (active, more_struct_aliases, \"1.14.0\", Some(37544)),\n \n+\n     // Allows #[link(..., cfg(..))]\n     (active, link_cfg, \"1.14.0\", Some(37406)),\n \n@@ -314,6 +315,9 @@ declare_features! (\n \n     // Allows #[target_feature(...)]\n     (active, target_feature, \"1.15.0\", None),\n+\n+    // Allow safe suggestions for potential type conversions.\n+    (active, safe_suggestion, \"1.0.0\", Some(37384)),\n );\n \n declare_features! (\n@@ -648,6 +652,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                    \"internal implementation detail\",\n                                                    cfg_fn!(rustc_attrs))),\n \n+    (\"safe_suggestion\", Whitelisted, Gated(\"safe_suggestion\",\n+                                           \"the `#[safe_suggestion]` attribute \\\n+                                            is an experimental feature\",\n+                                           cfg_fn!(safe_suggestion))),\n+\n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\"doc\", Whitelisted, Ungated),\n "}]}