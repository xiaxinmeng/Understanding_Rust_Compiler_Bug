{"sha": "fd4ac0e26c77bbf63d29025830bb18b01e2319bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNGFjMGUyNmM3N2JiZjYzZDI5MDI1ODMwYmIxOGIwMWUyMzE5YmQ=", "commit": {"author": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2019-04-14T23:33:10Z"}, "committer": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2019-04-14T23:33:10Z"}, "message": "Hasher: replace unsafe trasmute with to_ne_bytes\n\nSpead the knowledge of `to_ne_bytes` functions existence.", "tree": {"sha": "356976594d70cf3f667b08054af14f290e33de5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356976594d70cf3f667b08054af14f290e33de5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd4ac0e26c77bbf63d29025830bb18b01e2319bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4ac0e26c77bbf63d29025830bb18b01e2319bd", "html_url": "https://github.com/rust-lang/rust/commit/fd4ac0e26c77bbf63d29025830bb18b01e2319bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd4ac0e26c77bbf63d29025830bb18b01e2319bd/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa99abeb262307d5e9aa11a792312fd620b7f89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa99abeb262307d5e9aa11a792312fd620b7f89a", "html_url": "https://github.com/rust-lang/rust/commit/aa99abeb262307d5e9aa11a792312fd620b7f89a"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "973d41c14492e88f37bbe01b679e5d7834ef4b57", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd4ac0e26c77bbf63d29025830bb18b01e2319bd/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4ac0e26c77bbf63d29025830bb18b01e2319bd/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=fd4ac0e26c77bbf63d29025830bb18b01e2319bd", "patch": "@@ -83,7 +83,6 @@\n \n use fmt;\n use marker;\n-use mem;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n@@ -282,34 +281,31 @@ pub trait Hasher {\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u16(&mut self, i: u16) {\n-        self.write(&unsafe { mem::transmute::<_, [u8; 2]>(i) })\n+        self.write(&i.to_ne_bytes())\n     }\n     /// Writes a single `u32` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u32(&mut self, i: u32) {\n-        self.write(&unsafe { mem::transmute::<_, [u8; 4]>(i) })\n+        self.write(&i.to_ne_bytes())\n     }\n     /// Writes a single `u64` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u64(&mut self, i: u64) {\n-        self.write(&unsafe { mem::transmute::<_, [u8; 8]>(i) })\n+        self.write(&i.to_ne_bytes())\n     }\n     /// Writes a single `u128` into this hasher.\n     #[inline]\n     #[stable(feature = \"i128\", since = \"1.26.0\")]\n     fn write_u128(&mut self, i: u128) {\n-        self.write(&unsafe { mem::transmute::<_, [u8; 16]>(i) })\n+        self.write(&i.to_ne_bytes())\n     }\n     /// Writes a single `usize` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_usize(&mut self, i: usize) {\n-        let bytes = unsafe {\n-            ::slice::from_raw_parts(&i as *const usize as *const u8, mem::size_of::<usize>())\n-        };\n-        self.write(bytes);\n+        self.write(&i.to_ne_bytes())\n     }\n \n     /// Writes a single `i8` into this hasher.\n@@ -322,31 +318,31 @@ pub trait Hasher {\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i16(&mut self, i: i16) {\n-        self.write_u16(i as u16)\n+        self.write(&i.to_ne_bytes())\n     }\n     /// Writes a single `i32` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i32(&mut self, i: i32) {\n-        self.write_u32(i as u32)\n+        self.write(&i.to_ne_bytes())\n     }\n     /// Writes a single `i64` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_i64(&mut self, i: i64) {\n-        self.write_u64(i as u64)\n+        self.write(&i.to_ne_bytes())\n     }\n     /// Writes a single `i128` into this hasher.\n     #[inline]\n     #[stable(feature = \"i128\", since = \"1.26.0\")]\n     fn write_i128(&mut self, i: i128) {\n-        self.write_u128(i as u128)\n+        self.write(&i.to_ne_bytes())\n     }\n     /// Writes a single `isize` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_isize(&mut self, i: isize) {\n-        self.write_usize(i as usize)\n+        self.write(&i.to_ne_bytes())\n     }\n }\n "}]}