{"sha": "c94fea092e0a8f38855e2ed9a57704cd4ca85a38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NGZlYTA5MmUwYThmMzg4NTVlMmVkOWE1NzcwNGNkNGNhODVhMzg=", "commit": {"author": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-09-28T02:35:04Z"}, "committer": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-09-28T02:35:04Z"}, "message": "Move `get_slice_bytes` to `rustc::mir::interpret` so it can be reused.", "tree": {"sha": "f41554d10b5fc6242856c836307926c21fd8942e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f41554d10b5fc6242856c836307926c21fd8942e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c94fea092e0a8f38855e2ed9a57704cd4ca85a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c94fea092e0a8f38855e2ed9a57704cd4ca85a38", "html_url": "https://github.com/rust-lang/rust/commit/c94fea092e0a8f38855e2ed9a57704cd4ca85a38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875fa72f9e8ff3c6fd955bc5ed0de0c9b72da400", "url": "https://api.github.com/repos/rust-lang/rust/commits/875fa72f9e8ff3c6fd955bc5ed0de0c9b72da400", "html_url": "https://github.com/rust-lang/rust/commit/875fa72f9e8ff3c6fd955bc5ed0de0c9b72da400"}], "stats": {"total": 68, "additions": 26, "deletions": 42}, "files": [{"sha": "e925d7429fff446f269d00b145b082a09aef63c3", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=c94fea092e0a8f38855e2ed9a57704cd4ca85a38", "patch": "@@ -101,7 +101,7 @@ pub use self::error::{\n     InvalidProgramInfo, ResourceExhaustionInfo, UndefinedBehaviorInfo,\n };\n \n-pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue};\n+pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue, get_slice_bytes};\n \n pub use self::allocation::{Allocation, AllocationExtra, Relocations, UndefMask};\n "}, {"sha": "32f45cd9d472035ab601b8abc78a4b85396acbdd", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=c94fea092e0a8f38855e2ed9a57704cd4ca85a38", "patch": "@@ -611,3 +611,18 @@ impl_stable_hash_for!(enum crate::mir::interpret::ScalarMaybeUndef {\n     Scalar(v),\n     Undef\n });\n+\n+/// Gets the bytes of a constant slice value.\n+pub fn get_slice_bytes<'tcx>(cx: &impl HasDataLayout, val: ConstValue<'tcx>) -> &'tcx [u8] {\n+    if let ConstValue::Slice { data, start, end } = val {\n+        let len = end - start;\n+        data.get_bytes(\n+            cx,\n+            // invent a pointer, only the offset is relevant anyway\n+            Pointer::new(AllocId(0), Size::from_bytes(start as u64)),\n+            Size::from_bytes(len as u64),\n+        ).unwrap_or_else(|err| bug!(\"const slice is invalid: {:?}\", err))\n+    } else {\n+        bug!(\"expected const slice, but found another const value\");\n+    }\n+}"}, {"sha": "3bd61e345543692978bb9ca03d6082d1063e30fd", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=c94fea092e0a8f38855e2ed9a57704cd4ca85a38", "patch": "@@ -6,9 +6,9 @@\n \n use crate::hir::def_id::DefId;\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use crate::ty::{self, layout::Size, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::mir::interpret::{AllocId, ConstValue, Pointer, Scalar};\n+use crate::mir::interpret::{ConstValue, get_slice_bytes, Scalar};\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n@@ -585,22 +585,8 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         // saying that we're not handling it intentionally.\n \n         (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n-            fn get_slice_bytes<'tcx>(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>) -> &'tcx [u8] {\n-                if let ConstValue::Slice { data, start, end } = val {\n-                    let len = end - start;\n-                    data.get_bytes(\n-                        &tcx,\n-                        // invent a pointer, only the offset is relevant anyway\n-                        Pointer::new(AllocId(0), Size::from_bytes(start as u64)),\n-                        Size::from_bytes(len as u64),\n-                    ).unwrap_or_else(|err| bug!(\"const slice is invalid: {:?}\", err))\n-                } else {\n-                    unreachable!();\n-                }\n-            }\n-\n-            let a_bytes = get_slice_bytes(tcx, a_val);\n-            let b_bytes = get_slice_bytes(tcx, b_val);\n+            let a_bytes = get_slice_bytes(&tcx, a_val);\n+            let b_bytes = get_slice_bytes(&tcx, b_val);\n             if a_bytes == b_bytes {\n                 Ok(tcx.mk_const(ty::Const {\n                     val: a_val,"}, {"sha": "fcdf2719ab627ce55a5a7a66933ba3a74227c6aa", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94fea092e0a8f38855e2ed9a57704cd4ca85a38/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=c94fea092e0a8f38855e2ed9a57704cd4ca85a38", "patch": "@@ -13,12 +13,12 @@ use crate::hair::constant::*;\n use rustc::lint;\n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n-use rustc::mir::interpret::{GlobalId, ConstValue, sign_extend, AllocId, Pointer};\n+use rustc::mir::interpret::{GlobalId, ConstValue, get_slice_bytes, sign_extend};\n use rustc::traits::{ObligationCause, PredicateObligation};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, UserType, DefIdTree};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n use rustc::ty::subst::{SubstsRef, GenericArg};\n-use rustc::ty::layout::{VariantIdx, Size};\n+use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, RangeEnd};\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -1526,27 +1526,10 @@ pub fn compare_const_vals<'tcx>(\n \n     if let ty::Str = ty.kind {\n         match (a.val, b.val) {\n-            (\n-                ConstValue::Slice { data: alloc_a, start: offset_a, end: end_a },\n-                ConstValue::Slice { data: alloc_b, start: offset_b, end: end_b },\n-            ) => {\n-                let len_a = end_a - offset_a;\n-                let len_b = end_b - offset_b;\n-                let a = alloc_a.get_bytes(\n-                    &tcx,\n-                    // invent a pointer, only the offset is relevant anyway\n-                    Pointer::new(AllocId(0), Size::from_bytes(offset_a as u64)),\n-                    Size::from_bytes(len_a as u64),\n-                );\n-                let b = alloc_b.get_bytes(\n-                    &tcx,\n-                    // invent a pointer, only the offset is relevant anyway\n-                    Pointer::new(AllocId(0), Size::from_bytes(offset_b as u64)),\n-                    Size::from_bytes(len_b as u64),\n-                );\n-                if let (Ok(a), Ok(b)) = (a, b) {\n-                    return from_bool(a == b);\n-                }\n+            (ConstValue::Slice { .. }, ConstValue::Slice { .. }) => {\n+                let a_bytes = get_slice_bytes(&tcx, a.val);\n+                let b_bytes = get_slice_bytes(&tcx, b.val);\n+                return from_bool(a_bytes == b_bytes);\n             }\n             _ => (),\n         }"}]}