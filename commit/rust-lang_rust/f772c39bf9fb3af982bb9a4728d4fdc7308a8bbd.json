{"sha": "f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NzJjMzliZjlmYjNhZjk4MmJiOWE0NzI4ZDRmZGM3MzA4YThiYmQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-18T22:36:16Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-25T17:28:09Z"}, "message": "Include generator locals as field names in debuginfo", "tree": {"sha": "c6c2e1c6d29079911a4d8a48b71fba1fedac43ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6c2e1c6d29079911a4d8a48b71fba1fedac43ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "html_url": "https://github.com/rust-lang/rust/commit/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2e17d1152d46314b332ecaf11b80786386b919", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2e17d1152d46314b332ecaf11b80786386b919", "html_url": "https://github.com/rust-lang/rust/commit/6e2e17d1152d46314b332ecaf11b80786386b919"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "2f05a37986d2c89fdc15735232795aecd970414f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "patch": "@@ -2997,7 +2997,7 @@ pub struct UnsafetyCheckResult {\n /// The layout of generator state\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct GeneratorLayout<'tcx> {\n-    pub variant_fields: Vec<Vec<LocalDecl<'tcx>>>,\n+    pub variant_fields: IndexVec<VariantIdx, Vec<LocalDecl<'tcx>>>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "54d15e527c9c61d997f24a53f0fcc7adf303877d", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "patch": "@@ -23,6 +23,7 @@ use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ich::NodeIdHashingMode;\n use rustc::mir::Field;\n+use rustc::mir::GeneratorLayout;\n use rustc::mir::interpret::truncate;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::ty::Instance;\n@@ -1291,7 +1292,10 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n         let variant_info_for = |index: VariantIdx| {\n             match &self.enum_type.sty {\n                 ty::Adt(adt, _) => VariantInfo::Adt(&adt.variants[index]),\n-                ty::Generator(_, substs, _) => VariantInfo::Generator(*substs, index),\n+                ty::Generator(def_id, substs, _) => {\n+                    let generator_layout = cx.tcx.generator_layout(*def_id);\n+                    VariantInfo::Generator(*substs, generator_layout, index)\n+                }\n                 _ => bug!(),\n             }\n         };\n@@ -1567,22 +1571,22 @@ enum EnumDiscriminantInfo<'ll> {\n #[derive(Copy, Clone)]\n enum VariantInfo<'tcx> {\n     Adt(&'tcx ty::VariantDef),\n-    Generator(ty::GeneratorSubsts<'tcx>, VariantIdx),\n+    Generator(ty::GeneratorSubsts<'tcx>, &'tcx GeneratorLayout<'tcx>, VariantIdx),\n }\n \n impl<'tcx> VariantInfo<'tcx> {\n     fn map_struct_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n         match self {\n             VariantInfo::Adt(variant) => f(&variant.ident.as_str()),\n-            VariantInfo::Generator(substs, variant_index) =>\n+            VariantInfo::Generator(substs, _, variant_index) =>\n                 substs.map_variant_name(*variant_index, f),\n         }\n     }\n \n     fn variant_name(&self) -> String {\n         match self {\n             VariantInfo::Adt(variant) => variant.ident.to_string(),\n-            VariantInfo::Generator(_, variant_index) => {\n+            VariantInfo::Generator(_, _, variant_index) => {\n                 // Since GDB currently prints out the raw discriminant along\n                 // with every variant, make each variant name be just the value\n                 // of the discriminant. The struct name for the variant includes\n@@ -1593,11 +1597,16 @@ impl<'tcx> VariantInfo<'tcx> {\n     }\n \n     fn field_name(&self, i: usize) -> String {\n-        match self {\n+        let field_name = match self {\n             VariantInfo::Adt(variant) if variant.ctor_kind != CtorKind::Fn =>\n-                variant.fields[i].ident.to_string(),\n-            _ => format!(\"__{}\", i),\n-        }\n+                Some(variant.fields[i].ident.to_string()),\n+            VariantInfo::Generator(_, generator_layout, variant_index) => {\n+                let variant_decls = &generator_layout.variant_fields[*variant_index];\n+                variant_decls[i].name.map(|name| name.to_string())\n+            }\n+            _ => None,\n+        };\n+        field_name.unwrap_or_else(|| format!(\"__{}\", i))\n     }\n }\n "}, {"sha": "682c213f33244d158460a804bc7af70da110ba39", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=f772c39bf9fb3af982bb9a4728d4fdc7308a8bbd", "patch": "@@ -10,16 +10,16 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 0, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 ([...]), 4: generator_objects::main::generator::variant#4 ([...])}}\n+// gdb-check:$1 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 0, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 {[...]}, 4: generator_objects::main::generator::variant#4 {[...]}}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 3, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 (6, 7), 4: generator_objects::main::generator::variant#4 ([...])}}\n+// gdb-check:$2 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 3, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 {c: 6, d: 7}, 4: generator_objects::main::generator::variant#4 {[...]}}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 4, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 ([...]), 4: generator_objects::main::generator::variant#4 (7, 8)}}\n+// gdb-check:$3 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 4, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 {[...]}, 4: generator_objects::main::generator::variant#4 {c: 7, d: 8}}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 1, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 ([...]), 4: generator_objects::main::generator::variant#4 ([...])}}\n+// gdb-check:$4 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 1, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 {[...]}, 4: generator_objects::main::generator::variant#4 {[...]}}}\n \n // === LLDB TESTS ==================================================================================\n "}]}