{"sha": "1a95590faf2a81e7b7bae697c2209ba7607f0336", "node_id": "C_kwDOAAsO6NoAKDFhOTU1OTBmYWYyYTgxZTdiN2JhZTY5N2MyMjA5YmE3NjA3ZjAzMzY", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-06T02:18:44Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-06T02:18:44Z"}, "message": "Fix #8507", "tree": {"sha": "812a4365e70a0b8b8c49278f9b3bd740d509150b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/812a4365e70a0b8b8c49278f9b3bd740d509150b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a95590faf2a81e7b7bae697c2209ba7607f0336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a95590faf2a81e7b7bae697c2209ba7607f0336", "html_url": "https://github.com/rust-lang/rust/commit/1a95590faf2a81e7b7bae697c2209ba7607f0336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a95590faf2a81e7b7bae697c2209ba7607f0336/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce841fe73b1476f6d4ac1495f88a567c501d01a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce841fe73b1476f6d4ac1495f88a567c501d01a8", "html_url": "https://github.com/rust-lang/rust/commit/ce841fe73b1476f6d4ac1495f88a567c501d01a8"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "1555758fc4ad825b6b013a7bb1014544123f6804", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a95590faf2a81e7b7bae697c2209ba7607f0336/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a95590faf2a81e7b7bae697c2209ba7607f0336/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=1a95590faf2a81e7b7bae697c2209ba7607f0336", "patch": "@@ -2,7 +2,9 @@ use super::implicit_clone::is_clone_like;\n use super::unnecessary_iter_cloned::{self, is_into_iter};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs};\n+use clippy_utils::ty::{\n+    contains_ty, get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs,\n+};\n use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind};\n@@ -260,6 +262,12 @@ fn check_other_call_arg<'tcx>(\n         // `Target = T`.\n         if n_refs > 0 || is_copy(cx, receiver_ty) || trait_predicate.def_id() != deref_trait_id;\n         let n_refs = max(n_refs, if is_copy(cx, receiver_ty) { 0 } else { 1 });\n+        // If the trait is `AsRef` and the input type variable `T` occurs in the output type, then\n+        // `T` must not be instantiated with a reference\n+        // (https://github.com/rust-lang/rust-clippy/issues/8507).\n+        if (n_refs == 0 && !receiver_ty.is_ref())\n+            || trait_predicate.def_id() != as_ref_trait_id\n+            || !contains_ty(fn_sig.output(), input);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n             span_lint_and_sugg("}, {"sha": "38ba41ac54ecb2ca7814f135f1525b44d66a825a", "filename": "tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1a95590faf2a81e7b7bae697c2209ba7607f0336/tests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1a95590faf2a81e7b7bae697c2209ba7607f0336/tests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.fixed?ref=1a95590faf2a81e7b7bae697c2209ba7607f0336", "patch": "@@ -212,3 +212,51 @@ fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::E\n }\n \n fn require_string(_: &String) {}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/8507\n+mod issue_8507 {\n+    #![allow(dead_code)]\n+\n+    struct Opaque<P>(P);\n+\n+    pub trait Abstracted {}\n+\n+    impl<P> Abstracted for Opaque<P> {}\n+\n+    fn build<P>(p: P) -> Opaque<P>\n+    where\n+        P: AsRef<str>,\n+    {\n+        Opaque(p)\n+    }\n+\n+    // Should not lint.\n+    fn test_str(s: &str) -> Box<dyn Abstracted> {\n+        Box::new(build(s.to_string()))\n+    }\n+\n+    // Should not lint.\n+    fn test_x(x: super::X) -> Box<dyn Abstracted> {\n+        Box::new(build(x))\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    struct Y(&'static str);\n+\n+    impl AsRef<str> for Y {\n+        fn as_ref(&self) -> &str {\n+            self.0\n+        }\n+    }\n+\n+    impl ToString for Y {\n+        fn to_string(&self) -> String {\n+            self.0.to_string()\n+        }\n+    }\n+\n+    // Should lint because Y is copy.\n+    fn test_y(y: Y) -> Box<dyn Abstracted> {\n+        Box::new(build(y))\n+    }\n+}"}, {"sha": "15fb7ee83e3d100a50cfa13dfd54cf12afcd7cd0", "filename": "tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1a95590faf2a81e7b7bae697c2209ba7607f0336/tests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a95590faf2a81e7b7bae697c2209ba7607f0336/tests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.rs?ref=1a95590faf2a81e7b7bae697c2209ba7607f0336", "patch": "@@ -212,3 +212,51 @@ fn get_file_path(_file_type: &FileType) -> Result<std::path::PathBuf, std::io::E\n }\n \n fn require_string(_: &String) {}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/8507\n+mod issue_8507 {\n+    #![allow(dead_code)]\n+\n+    struct Opaque<P>(P);\n+\n+    pub trait Abstracted {}\n+\n+    impl<P> Abstracted for Opaque<P> {}\n+\n+    fn build<P>(p: P) -> Opaque<P>\n+    where\n+        P: AsRef<str>,\n+    {\n+        Opaque(p)\n+    }\n+\n+    // Should not lint.\n+    fn test_str(s: &str) -> Box<dyn Abstracted> {\n+        Box::new(build(s.to_string()))\n+    }\n+\n+    // Should not lint.\n+    fn test_x(x: super::X) -> Box<dyn Abstracted> {\n+        Box::new(build(x))\n+    }\n+\n+    #[derive(Clone, Copy)]\n+    struct Y(&'static str);\n+\n+    impl AsRef<str> for Y {\n+        fn as_ref(&self) -> &str {\n+            self.0\n+        }\n+    }\n+\n+    impl ToString for Y {\n+        fn to_string(&self) -> String {\n+            self.0.to_string()\n+        }\n+    }\n+\n+    // Should lint because Y is copy.\n+    fn test_y(y: Y) -> Box<dyn Abstracted> {\n+        Box::new(build(y.to_string()))\n+    }\n+}"}, {"sha": "c53ce32be775706f91d4ce47b2e4b5bd4220abd9", "filename": "tests/ui/unnecessary_to_owned.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a95590faf2a81e7b7bae697c2209ba7607f0336/tests%2Fui%2Funnecessary_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a95590faf2a81e7b7bae697c2209ba7607f0336/tests%2Fui%2Funnecessary_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.stderr?ref=1a95590faf2a81e7b7bae697c2209ba7607f0336", "patch": "@@ -491,5 +491,11 @@ LL -         let path = match get_file_path(&t) {\n LL +         let path = match get_file_path(t) {\n    | \n \n-error: aborting due to 76 previous errors\n+error: unnecessary use of `to_string`\n+  --> $DIR/unnecessary_to_owned.rs:260:24\n+   |\n+LL |         Box::new(build(y.to_string()))\n+   |                        ^^^^^^^^^^^^^ help: use: `y`\n+\n+error: aborting due to 77 previous errors\n "}]}