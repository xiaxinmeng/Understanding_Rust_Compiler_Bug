{"sha": "3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzA0MDdmYjM5YmFhNmYwMDQ4ZmYzMGM1ZjhmOWNjOGViYTI2OWM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-27T07:02:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-01T19:20:42Z"}, "message": "Remove the `dep-info-no-analysis` test and fix other fallout.", "tree": {"sha": "95aa98a757560eb6a7526b88f3984b70a44ac114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95aa98a757560eb6a7526b88f3984b70a44ac114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "html_url": "https://github.com/rust-lang/rust/commit/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c52968af8c8eca855ec1455156f61839fba27b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/c52968af8c8eca855ec1455156f61839fba27b12", "html_url": "https://github.com/rust-lang/rust/commit/c52968af8c8eca855ec1455156f61839fba27b12"}], "stats": {"total": 94, "additions": 21, "deletions": 73}, "files": [{"sha": "c147a534e5ea72632f9e2da866d6daa638e4ea29", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "patch": "@@ -26,7 +26,6 @@ use rustc::traits::ProjectionMode;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::infer::{self, InferOk, InferResult, TypeOrigin};\n use rustc_metadata::cstore::CStore;\n-use rustc_metadata::creader::read_local_crates;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n use std::rc::Rc;\n@@ -116,19 +115,11 @@ fn test_env<F>(source_string: &str,\n         input: source_string.to_string(),\n     };\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input).unwrap();\n-    let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, \"test\", None)\n-                    .expect(\"phase 2 aborted\");\n-\n-    let krate = driver::assign_node_ids(&sess, krate);\n-    let mut defs = hir_map::collect_definitions(&krate);\n-    read_local_crates(&sess, &cstore, &defs, &krate, \"test_crate\", &dep_graph);\n+    let driver::ExpansionResult { defs, resolutions, mut hir_forest, .. } =\n+        driver::phase_2_configure_and_expand(&sess, &cstore, krate, \"test\", None, MakeGlobMap::No)\n+            .expect(\"phase 2 aborted\");\n     let _ignore = dep_graph.in_ignore();\n \n-    let (_, resolutions, mut hir_forest) = {\n-        driver::lower_and_resolve(&sess, \"test-crate\", &mut defs, &krate,\n-                                  &sess.dep_graph, MakeGlobMap::No)\n-    };\n-\n     let arenas = ty::CtxtArenas::new();\n     let ast_map = hir_map::map_crate(&mut hir_forest, defs);\n "}, {"sha": "73e0a529a45c6a60135c04d8786b44331693d7e0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "patch": "@@ -21,7 +21,6 @@ use rustc::lint;\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n-use rustc_metadata::creader::read_local_crates;\n \n use syntax::{ast, codemap, errors};\n use syntax::errors::emitter::ColorConfig;\n@@ -146,21 +145,12 @@ pub fn run_core(search_paths: SearchPaths,\n \n     let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n \n-    let name = link::find_crate_name(Some(&sess), &krate.attrs,\n-                                     &input);\n+    let name = link::find_crate_name(Some(&sess), &krate.attrs, &input);\n \n-    let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, &name, None)\n-                    .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n-\n-    let krate = driver::assign_node_ids(&sess, krate);\n-\n-    let mut defs = hir_map::collect_definitions(&krate);\n-    read_local_crates(&sess, &cstore, &defs, &krate, &name, &dep_graph);\n-\n-    // Lower ast -> hir and resolve.\n-    let (analysis, resolutions, mut hir_forest) = {\n-        driver::lower_and_resolve(&sess, &name, &mut defs, &krate,\n-                                  &sess.dep_graph, resolve::MakeGlobMap::No)\n+    let driver::ExpansionResult { defs, analysis, resolutions, mut hir_forest, .. } = {\n+        let make_glob_map = resolve::MakeGlobMap::No;\n+        driver::phase_2_configure_and_expand(&sess, &cstore, krate, &name, None, make_glob_map)\n+            .expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n     };\n \n     let arenas = ty::CtxtArenas::new();"}, {"sha": "f0ca89097f701f6f98f6ab114f44e6413c3f23ef", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "patch": "@@ -28,11 +28,12 @@ use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n use rustc::session::config::{get_unstable_features_setting, OutputType};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n-use rustc::hir::lowering::{lower_crate, DummyResolver};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{driver, Compilation};\n+use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n+use rustc_resolve::MakeGlobMap;\n use syntax::codemap::CodeMap;\n use syntax::errors;\n use syntax::errors::emitter::ColorConfig;\n@@ -93,21 +94,16 @@ pub fn run(input: &str,\n     let mut cfg = config::build_configuration(&sess);\n     cfg.extend(config::parse_cfgspecs(cfgs.clone()));\n     let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n-    let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate,\n-                                                     \"rustdoc-test\", None)\n-        .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n-    let krate = driver::assign_node_ids(&sess, krate);\n-    let dep_graph = DepGraph::new(false);\n-    let defs = hir_map::collect_definitions(&krate);\n-\n-    let mut dummy_resolver = DummyResolver;\n-    let krate = lower_crate(&sess, &krate, &sess, &mut dummy_resolver);\n-\n-    let opts = scrape_test_config(&krate);\n+    let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n+        let make_glob_map = MakeGlobMap::No;\n+        phase_2_configure_and_expand(&sess, &cstore, krate, \"rustdoc-test\", None, make_glob_map)\n+            .expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n+    };\n \n+    let dep_graph = DepGraph::new(false);\n+    let opts = scrape_test_config(hir_forest.krate());\n     let _ignore = dep_graph.in_ignore();\n-    let mut forest = hir_map::Forest::new(krate, &dep_graph);\n-    let map = hir_map::map_crate(&mut forest, defs);\n+    let map = hir_map::map_crate(&mut hir_forest, defs);\n \n     let ctx = core::DocContext {\n         map: &map,"}, {"sha": "5d2cfadfd020a76d8da90ad2f79742ba8b5cb416", "filename": "src/test/run-make/dep-info-no-analysis/Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c52968af8c8eca855ec1455156f61839fba27b12/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c52968af8c8eca855ec1455156f61839fba27b12/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile?ref=c52968af8c8eca855ec1455156f61839fba27b12", "patch": "@@ -1,6 +0,0 @@\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) -o $(TMPDIR)/input.dd -Z no-analysis --emit dep-info input.rs\n-\tsed -i'.bak' 's/^.*input.dd/input.dd/g' $(TMPDIR)/input.dd\n-\tdiff -u $(TMPDIR)/input.dd input.dd"}, {"sha": "f2c8676515b8ad2c73f634f5397b9c3fda24d3a0", "filename": "src/test/run-make/dep-info-no-analysis/input.dd", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c52968af8c8eca855ec1455156f61839fba27b12/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd", "raw_url": "https://github.com/rust-lang/rust/raw/c52968af8c8eca855ec1455156f61839fba27b12/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd?ref=c52968af8c8eca855ec1455156f61839fba27b12", "patch": "@@ -1,3 +0,0 @@\n-input.dd: input.rs\n-\n-input.rs:"}, {"sha": "523b0f0670ce4eadc19fe8d8800f7f46f495bcb5", "filename": "src/test/run-make/dep-info-no-analysis/input.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c52968af8c8eca855ec1455156f61839fba27b12/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52968af8c8eca855ec1455156f61839fba27b12/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs?ref=c52968af8c8eca855ec1455156f61839fba27b12", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Tests that dep info can be emitted without resolving external crates.\n-extern crate not_there;\n-\n-fn main() {}"}, {"sha": "8a7959212f54adb97b4e0b9ebd96fa8ad43da400", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "patch": "@@ -238,15 +238,9 @@ fn compile_program(input: &str, sysroot: PathBuf)\n \n         let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n \n-        let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, &id, None)\n-            .expect(\"phase_2 returned `None`\");\n-\n-        let krate = driver::assign_node_ids(&sess, krate);\n-        let mut defs = ast_map::collect_definitions(&krate);\n-        read_local_crates(&sess, &cstore, &defs, &krate, &id, &dep_graph);\n-        let (analysis, resolutions, mut hir_forest) = {\n-            driver::lower_and_resolve(&sess, &id, &mut defs, &krate,\n-                                      &sess.dep_graph, MakeGlobMap::No)\n+        let driver::ExpansionResult { defs, analysis, resolutions, mut hir_forest, .. } = {\n+            driver::phase_2_configure_and_expand(&sess, &cstore, krate, &id, None, MakeGlobMap::No)\n+                .expect(\"phase_2 returned `None`\")\n         };\n \n         let arenas = ty::CtxtArenas::new();"}]}