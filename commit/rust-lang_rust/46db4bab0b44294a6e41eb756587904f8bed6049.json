{"sha": "46db4bab0b44294a6e41eb756587904f8bed6049", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZGI0YmFiMGI0NDI5NGE2ZTQxZWI3NTY1ODc5MDRmOGJlZDYwNDk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-02-23T14:44:01Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-02-23T14:46:20Z"}, "message": "Skip emitting closure diagnostic when closure_kind_origins has no entry\n\nFixes #82438\n\nThis map is not guarnateed to have an entry for a closure.", "tree": {"sha": "a00bb52d1f44f6c2fdd96cbd700637a5c48573a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a00bb52d1f44f6c2fdd96cbd700637a5c48573a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46db4bab0b44294a6e41eb756587904f8bed6049", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmA1FVwACgkQtAh+UQ6Y\nsWS/kw//UV/eVFK8pwghIZoEQRwf48glqDqiVtdZVwj7W8C9FzU+QxMDY8oVHTgo\nyccdbkbmPRonBep7D6PmHcYieMV8gaYZ0Lx8nl3RIKNUWFOULL9udM72JFQvBFj+\n/p3sZYqZ93QNzwNDWu4LHz4/be1DS5YFpeBK4naolOVXpE+DZD88uJa6WDmIPSpI\nW+dwSFIjQRuZ42wfKcYidAH1LQAspIFYpR4aXfRd1nJ/JEv6xuJp0Gk4AQ7/3CWO\nFPvB6oXlouHrm/QCg4AyVIggHx8/QaJcE3bSJ4T8BVUrDwa1MPwJUVhfVyg1+gIy\nBtajscZ6EUnXzY+nLzuNtEjodc0OajawFOT3YmQWsAEJpw/FDg7v91L3tMXXwrMt\n4idzeNxpIxaEDKDixNs5R22SFVrho66TeVEsIPBR2d5CsP+E4XKIxWa+lmkt5CfM\nmbTcQSQeQJ/+4yr7I7PT2wn+z66nJ/lKcNKMA15bRiJoOTSjjy67UYsk+UuuSDs7\nVZFmGW/IC4JezmW5uR1D3En3EA0gIEyGG1J++UdY+8aZvpFaTeapjFYclzKROaQH\nuquDISoGyt6+jeuMx7ShWhCvnVHUmWps6F5g2Jk133hurVVoPsURhFfnGimlmoj7\n+DMlIteNUGvQtgThYNZJus8mnn1Gz7ju669ZoujLkbMkslt7qEY=\n=+ipT\n-----END PGP SIGNATURE-----", "payload": "tree a00bb52d1f44f6c2fdd96cbd700637a5c48573a5\nparent 446d4533e89db04f9568be4199e56b5fce0d176d\nauthor Aaron Hill <aa1ronham@gmail.com> 1614091441 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1614091580 -0500\n\nSkip emitting closure diagnostic when closure_kind_origins has no entry\n\nFixes #82438\n\nThis map is not guarnateed to have an entry for a closure.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46db4bab0b44294a6e41eb756587904f8bed6049", "html_url": "https://github.com/rust-lang/rust/commit/46db4bab0b44294a6e41eb756587904f8bed6049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46db4bab0b44294a6e41eb756587904f8bed6049/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446d4533e89db04f9568be4199e56b5fce0d176d", "url": "https://api.github.com/repos/rust-lang/rust/commits/446d4533e89db04f9568be4199e56b5fce0d176d", "html_url": "https://github.com/rust-lang/rust/commit/446d4533e89db04f9568be4199e56b5fce0d176d"}], "stats": {"total": 91, "additions": 66, "deletions": 25}, "files": [{"sha": "2f40a90fb5516f8099d8168273efad29e0e2c102", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/46db4bab0b44294a6e41eb756587904f8bed6049/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46db4bab0b44294a6e41eb756587904f8bed6049/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=46db4bab0b44294a6e41eb756587904f8bed6049", "patch": "@@ -513,32 +513,33 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let id = id.expect_local();\n         let tables = tcx.typeck(id);\n         let hir_id = tcx.hir().local_def_id_to_hir_id(id);\n-        let (span, place) = &tables.closure_kind_origins()[hir_id];\n-        let reason = if let PlaceBase::Upvar(upvar_id) = place.base {\n-            let upvar = ty::place_to_string_for_capture(tcx, place);\n-            match tables.upvar_capture(upvar_id) {\n-                ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n-                    kind: ty::BorrowKind::MutBorrow | ty::BorrowKind::UniqueImmBorrow,\n-                    ..\n-                }) => {\n-                    format!(\"mutable borrow of `{}`\", upvar)\n-                }\n-                ty::UpvarCapture::ByValue(_) => {\n-                    format!(\"possible mutation of `{}`\", upvar)\n+        if let Some((span, place)) = tables.closure_kind_origins().get(hir_id) {\n+            let reason = if let PlaceBase::Upvar(upvar_id) = place.base {\n+                let upvar = ty::place_to_string_for_capture(tcx, place);\n+                match tables.upvar_capture(upvar_id) {\n+                    ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n+                        kind: ty::BorrowKind::MutBorrow | ty::BorrowKind::UniqueImmBorrow,\n+                        ..\n+                    }) => {\n+                        format!(\"mutable borrow of `{}`\", upvar)\n+                    }\n+                    ty::UpvarCapture::ByValue(_) => {\n+                        format!(\"possible mutation of `{}`\", upvar)\n+                    }\n+                    val => bug!(\"upvar `{}` borrowed, but not mutably: {:?}\", upvar, val),\n                 }\n-                val => bug!(\"upvar `{}` borrowed, but not mutably: {:?}\", upvar, val),\n-            }\n-        } else {\n-            bug!(\"not an upvar\")\n-        };\n-        err.span_label(\n-            *span,\n-            format!(\n-                \"calling `{}` requires mutable binding due to {}\",\n-                self.describe_place(the_place_err).unwrap(),\n-                reason\n-            ),\n-        );\n+            } else {\n+                bug!(\"not an upvar\")\n+            };\n+            err.span_label(\n+                *span,\n+                format!(\n+                    \"calling `{}` requires mutable binding due to {}\",\n+                    self.describe_place(the_place_err).unwrap(),\n+                    reason\n+                ),\n+            );\n+        }\n     }\n \n     // Attempt to search similar mutable associated items for suggestion."}, {"sha": "5d88e1e77d4509c341e3fb97469e44668835d0b0", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/46db4bab0b44294a6e41eb756587904f8bed6049/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46db4bab0b44294a6e41eb756587904f8bed6049/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs?ref=46db4bab0b44294a6e41eb756587904f8bed6049", "patch": "@@ -0,0 +1,28 @@\n+use std::error::Error;\n+struct A {\n+}\n+\n+impl A {\n+    pub fn new() -> A {\n+        A {\n+        }\n+    }\n+\n+    pub fn f<'a>(\n+        &'a self,\n+        team_name: &'a str,\n+        c: &'a mut dyn FnMut(String, String, u64, u64)\n+    ) -> Result<(), Box<dyn Error>> {\n+        Ok(())\n+    }\n+}\n+\n+\n+fn main() {\n+    let A = A::new();\n+    let participant_name = \"A\";\n+\n+    let c = |a, b, c, d| {};\n+\n+    A.f(participant_name, &mut c); //~ ERROR cannot borrow\n+}"}, {"sha": "06e2b5d0c1bce97fde162a4cebaa85dd3a849828", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46db4bab0b44294a6e41eb756587904f8bed6049/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46db4bab0b44294a6e41eb756587904f8bed6049/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr?ref=46db4bab0b44294a6e41eb756587904f8bed6049", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow `c` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-82438-mut-without-upvar.rs:27:27\n+   |\n+LL |     let c = |a, b, c, d| {};\n+   |         - help: consider changing this to be mutable: `mut c`\n+LL | \n+LL |     A.f(participant_name, &mut c);\n+   |                           ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}]}