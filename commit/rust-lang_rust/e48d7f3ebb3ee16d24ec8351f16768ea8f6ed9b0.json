{"sha": "e48d7f3ebb3ee16d24ec8351f16768ea8f6ed9b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OGQ3ZjNlYmIzZWUxNmQyNGVjODM1MWYxNjc2OGVhOGY2ZWQ5YjA=", "commit": {"author": {"name": "David Lukes", "email": "dafydd.lukes@gmail.com", "date": "2018-02-26T11:31:09Z"}, "committer": {"name": "David Lukes", "email": "dafydd.lukes@gmail.com", "date": "2018-03-05T12:13:55Z"}, "message": "Account for possibly empty license_template_path\n\nDon't attempt to load license_template if the path wasn't specified.", "tree": {"sha": "3a34a768da6879f93771b846d87829cc603f81b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a34a768da6879f93771b846d87829cc603f81b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e48d7f3ebb3ee16d24ec8351f16768ea8f6ed9b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e48d7f3ebb3ee16d24ec8351f16768ea8f6ed9b0", "html_url": "https://github.com/rust-lang/rust/commit/e48d7f3ebb3ee16d24ec8351f16768ea8f6ed9b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e48d7f3ebb3ee16d24ec8351f16768ea8f6ed9b0/comments", "author": {"login": "dlukes", "id": 2734517, "node_id": "MDQ6VXNlcjI3MzQ1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlukes", "html_url": "https://github.com/dlukes", "followers_url": "https://api.github.com/users/dlukes/followers", "following_url": "https://api.github.com/users/dlukes/following{/other_user}", "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions", "organizations_url": "https://api.github.com/users/dlukes/orgs", "repos_url": "https://api.github.com/users/dlukes/repos", "events_url": "https://api.github.com/users/dlukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dlukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlukes", "id": 2734517, "node_id": "MDQ6VXNlcjI3MzQ1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlukes", "html_url": "https://github.com/dlukes", "followers_url": "https://api.github.com/users/dlukes/followers", "following_url": "https://api.github.com/users/dlukes/following{/other_user}", "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions", "organizations_url": "https://api.github.com/users/dlukes/orgs", "repos_url": "https://api.github.com/users/dlukes/repos", "events_url": "https://api.github.com/users/dlukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dlukes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ead81205cc1f3597a3f7ecdde993d81f0d859e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/ead81205cc1f3597a3f7ecdde993d81f0d859e03", "html_url": "https://github.com/rust-lang/rust/commit/ead81205cc1f3597a3f7ecdde993d81f0d859e03"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "e6e5c5ef540d74e5693ff50feb0ae93338f46265", "filename": "src/config/config_type.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e48d7f3ebb3ee16d24ec8351f16768ea8f6ed9b0/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48d7f3ebb3ee16d24ec8351f16768ea8f6ed9b0/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=e48d7f3ebb3ee16d24ec8351f16768ea8f6ed9b0", "patch": "@@ -392,35 +392,37 @@ macro_rules! create_config {\n             }\n \n             fn set_license_template(&mut self) {\n-                let license_template_path = self.license_template_path();\n-                let mut license_template_file = match File::open(&license_template_path) {\n-                    Ok(file) => file,\n-                    Err(e) => {\n-                        eprintln!(\"Warning: unable to open license template file {:?}: {}\",\n-                                  license_template_path, e);\n-                        return;\n-                    }\n-                };\n-                let mut license_template_str = String::new();\n-                if let Err(e) = license_template_file.read_to_string(&mut license_template_str) {\n-                    eprintln!(\"Warning: unable to read from license template file {:?}: {}\",\n-                              license_template_path, e);\n-                    return;\n-                };\n-                let license_template_parsed = match parse_license_template(&license_template_str) {\n-                    Ok(string) => string,\n-                    Err(e) => {\n-                        eprintln!(\"Warning: unable to parse license template file {:?}: {}\",\n-                                  license_template_path, e);\n-                        return;\n-                    }\n-                };\n-                self.license_template = match Regex::new(&license_template_parsed) {\n-                    Ok(re) => Some(re),\n-                    Err(e) => {\n-                        eprintln!(\"Warning: regex syntax error in placeholder, unable to compile \\\n-                                   license template from file {:?}: {}\", license_template_path, e);\n+                if self.was_set().license_template_path() {\n+                    let license_template_path = self.license_template_path();\n+                    let mut license_template_file = match File::open(&license_template_path) {\n+                        Ok(file) => file,\n+                        Err(e) => {\n+                            eprintln!(\"Warning: unable to open license template file {:?}: {}\",\n+                                    license_template_path, e);\n+                            return;\n+                        }\n+                    };\n+                    let mut license_template_str = String::new();\n+                    if let Err(e) = license_template_file.read_to_string(&mut license_template_str) {\n+                        eprintln!(\"Warning: unable to read from license template file {:?}: {}\",\n+                                license_template_path, e);\n                         return;\n+                    };\n+                    let license_template_parsed = match parse_license_template(&license_template_str) {\n+                        Ok(string) => string,\n+                        Err(e) => {\n+                            eprintln!(\"Warning: unable to parse license template file {:?}: {}\",\n+                                    license_template_path, e);\n+                            return;\n+                        }\n+                    };\n+                    self.license_template = match Regex::new(&license_template_parsed) {\n+                        Ok(re) => Some(re),\n+                        Err(e) => {\n+                            eprintln!(\"Warning: regex syntax error in placeholder, unable to compile \\\n+                                    license template from file {:?}: {}\", license_template_path, e);\n+                            return;\n+                        }\n                     }\n                 }\n             }"}]}