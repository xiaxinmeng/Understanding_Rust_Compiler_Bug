{"sha": "a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYWViNmU3YWQ3Mzg1ODExYTRiYjc1NTc3NTEzMzM5YzlhOWVkOTE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-24T17:04:53Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-24T21:05:12Z"}, "message": "Make the closure_1 test work", "tree": {"sha": "6e818506cbf3ecd50a055536b95d99a70a60c261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e818506cbf3ecd50a055536b95d99a70a60c261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "html_url": "https://github.com/rust-lang/rust/commit/a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0aeb6e7ad7385811a4bb75577513339c9a9ed91/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b06faad26fdb1485c542970374ff8bbcb0e01c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b06faad26fdb1485c542970374ff8bbcb0e01c4", "html_url": "https://github.com/rust-lang/rust/commit/3b06faad26fdb1485c542970374ff8bbcb0e01c4"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "4784fad8518aa86ef9afe039a7606ee6bd3eb178", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0aeb6e7ad7385811a4bb75577513339c9a9ed91/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0aeb6e7ad7385811a4bb75577513339c9a9ed91/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "patch": "@@ -909,6 +909,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     sig_ty,\n                 );\n \n+                // Eagerly try to relate the closure type with the expected\n+                // type, otherwise we often won't have enough information to\n+                // infer the body.\n+                self.coerce(&closure_ty, &expected.ty);\n+\n                 self.infer_expr(*body, &Expectation::has_type(ret_ty));\n                 closure_ty\n             }"}, {"sha": "112b3d73f7c66d583c458b1dde6ffad6f628b4ba", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a0aeb6e7ad7385811a4bb75577513339c9a9ed91/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0aeb6e7ad7385811a4bb75577513339c9a9ed91/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "patch": "@@ -3800,13 +3800,13 @@ fn test<T: Trait<Type = u32>>(x: T, y: impl Trait<Type = i64>) {\n     [296; 299) 'get': fn get<T>(T) -> <T as Trait>::Type\n     [296; 302) 'get(x)': {unknown}\n     [300; 301) 'x': T\n-    [308; 312) 'get2': fn get2<{unknown}, S<{unknown}>>(T) -> U\n+    [308; 312) 'get2': fn get2<{unknown}, T>(T) -> U\n     [308; 315) 'get2(x)': {unknown}\n     [313; 314) 'x': T\n     [321; 324) 'get': fn get<impl Trait<Type = i64>>(T) -> <T as Trait>::Type\n     [321; 327) 'get(y)': {unknown}\n     [325; 326) 'y': impl Trait<Type = i64>\n-    [333; 337) 'get2': fn get2<{unknown}, S<{unknown}>>(T) -> U\n+    [333; 337) 'get2': fn get2<{unknown}, impl Trait<Type = i64>>(T) -> U\n     [333; 340) 'get2(y)': {unknown}\n     [338; 339) 'y': impl Trait<Type = i64>\n     [346; 349) 'get': fn get<S<u64>>(T) -> <T as Trait>::Type\n@@ -3997,7 +3997,7 @@ trait FnOnce<Args> {\n \n enum Option<T> { Some(T), None }\n impl<T> Option<T> {\n-    fn map<U, F: FnOnce(T) -> U>(self, f: F) -> U {}\n+    fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {}\n }\n \n fn test() {\n@@ -4010,30 +4010,30 @@ fn test() {\n         @r###\"\n     [148; 152) 'self': Option<T>\n     [154; 155) 'f': F\n-    [165; 167) '{}': ()\n-    [181; 300) '{     ... 1); }': ()\n-    [191; 192) 'x': Option<u32>\n-    [195; 207) 'Option::Some': Some<u32>(T) -> Option<T>\n-    [195; 213) 'Option...(1u32)': Option<u32>\n-    [208; 212) '1u32': u32\n-    [219; 220) 'x': Option<u32>\n-    [219; 235) 'x.map(...v + 1)': {unknown}\n-    [225; 234) '|v| v + 1': |u32| -> i32\n-    [226; 227) 'v': u32\n-    [229; 230) 'v': u32\n-    [229; 234) 'v + 1': i32\n-    [233; 234) '1': i32\n-    [241; 242) 'x': Option<u32>\n-    [241; 257) 'x.map(... 1u64)': {unknown}\n-    [247; 256) '|_v| 1u64': |u32| -> u64\n-    [248; 250) '_v': u32\n-    [252; 256) '1u64': u64\n-    [267; 268) 'y': Option<i64>\n-    [284; 285) 'x': Option<u32>\n-    [284; 297) 'x.map(|_v| 1)': Option<i64>\n-    [290; 296) '|_v| 1': |u32| -> i32\n-    [291; 293) '_v': u32\n-    [295; 296) '1': i32\n+    [173; 175) '{}': ()\n+    [189; 308) '{     ... 1); }': ()\n+    [199; 200) 'x': Option<u32>\n+    [203; 215) 'Option::Some': Some<u32>(T) -> Option<T>\n+    [203; 221) 'Option...(1u32)': Option<u32>\n+    [216; 220) '1u32': u32\n+    [227; 228) 'x': Option<u32>\n+    [227; 243) 'x.map(...v + 1)': Option<u32>\n+    [233; 242) '|v| v + 1': |u32| -> u32\n+    [234; 235) 'v': u32\n+    [237; 238) 'v': u32\n+    [237; 242) 'v + 1': u32\n+    [241; 242) '1': u32\n+    [249; 250) 'x': Option<u32>\n+    [249; 265) 'x.map(... 1u64)': Option<u64>\n+    [255; 264) '|_v| 1u64': |u32| -> u64\n+    [256; 258) '_v': u32\n+    [260; 264) '1u64': u64\n+    [275; 276) 'y': Option<i64>\n+    [292; 293) 'x': Option<u32>\n+    [292; 305) 'x.map(|_v| 1)': Option<i64>\n+    [298; 304) '|_v| 1': |u32| -> i64\n+    [299; 301) '_v': u32\n+    [303; 304) '1': i64\n     \"###\n     );\n }"}, {"sha": "d11dab29403cb5f50122bfab659bb273ab96ab68", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0aeb6e7ad7385811a4bb75577513339c9a9ed91/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0aeb6e7ad7385811a4bb75577513339c9a9ed91/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "patch": "@@ -173,6 +173,14 @@ pub(crate) fn trait_solve_query(\n ) -> Option<Solution> {\n     let _p = profile(\"trait_solve_query\");\n     debug!(\"trait_solve_query({})\", goal.value.value.display(db));\n+\n+    if let Obligation::Projection(pred) = &goal.value.value {\n+        if let Ty::Bound(_) = &pred.projection_ty.parameters[0] {\n+            // Hack: don't ask Chalk to normalize with an unknown self type, it'll say that's impossible\n+            return Some(Solution::Ambig(Guidance::Unknown));\n+        }\n+    }\n+\n     let canonical = goal.to_chalk(db).cast();\n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)"}]}