{"sha": "bc72ce66a18fdd153aa719937a0a5028642110c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNzJjZTY2YTE4ZmRkMTUzYWE3MTk5MzdhMGE1MDI4NjQyMTEwYzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-17T23:28:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Add test cases to pprust-expr-roundtrip.", "tree": {"sha": "f7a1857c54ae5049c2336bea93d60929bd0e3980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7a1857c54ae5049c2336bea93d60929bd0e3980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc72ce66a18fdd153aa719937a0a5028642110c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc72ce66a18fdd153aa719937a0a5028642110c6", "html_url": "https://github.com/rust-lang/rust/commit/bc72ce66a18fdd153aa719937a0a5028642110c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc72ce66a18fdd153aa719937a0a5028642110c6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "851066f57e19b645e2dd33392ee7f822cbb2e374", "url": "https://api.github.com/repos/rust-lang/rust/commits/851066f57e19b645e2dd33392ee7f822cbb2e374", "html_url": "https://github.com/rust-lang/rust/commit/851066f57e19b645e2dd33392ee7f822cbb2e374"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "5716e6d45a0b613652ab0d025d2139df625c7636", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bc72ce66a18fdd153aa719937a0a5028642110c6/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc72ce66a18fdd153aa719937a0a5028642110c6/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=bc72ce66a18fdd153aa719937a0a5028642110c6", "patch": "@@ -68,7 +68,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n \n     let mut g = |e| f(expr(e));\n \n-    for kind in 0 .. 16 {\n+    for kind in 0..=19 {\n         match kind {\n             0 => iter_exprs(depth - 1, &mut |e| g(ExprKind::Box(e))),\n             1 => iter_exprs(depth - 1, &mut |e| g(ExprKind::Call(e, vec![]))),\n@@ -79,25 +79,26 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::MethodCall(\n                             seg.clone(), vec![make_x(), e])));\n             },\n-            3 => {\n-                let op = Spanned { span: DUMMY_SP, node: BinOpKind::Add };\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Binary(op, e, make_x())));\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Binary(op, make_x(), e)));\n-            },\n-            4 => {\n-                let op = Spanned { span: DUMMY_SP, node: BinOpKind::Mul };\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Binary(op, e, make_x())));\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Binary(op, make_x(), e)));\n-            },\n-            5 => {\n-                let op = Spanned { span: DUMMY_SP, node: BinOpKind::Shl };\n+            3..=8 => {\n+                let op = Spanned {\n+                    span: DUMMY_SP,\n+                    node: match kind {\n+                        3 => BinOpKind::Add,\n+                        4 => BinOpKind::Mul,\n+                        5 => BinOpKind::Shl,\n+                        6 => BinOpKind::And,\n+                        7 => BinOpKind::Or,\n+                        8 => BinOpKind::Lt,\n+                        _ => unreachable!(),\n+                    }\n+                };\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Binary(op, e, make_x())));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Binary(op, make_x(), e)));\n             },\n-            6 => {\n+            9 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Unary(UnOp::Deref, e)));\n             },\n-            7 => {\n+            10 => {\n                 let block = P(Block {\n                     stmts: Vec::new(),\n                     id: DUMMY_NODE_ID,\n@@ -106,7 +107,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::If(e, block.clone(), None)));\n             },\n-            8 => {\n+            11 => {\n                 let decl = P(FnDecl {\n                     inputs: vec![],\n                     output: FunctionRetTy::Default(DUMMY_SP),\n@@ -120,33 +121,41 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                                           e,\n                                           DUMMY_SP)));\n             },\n-            9 => {\n+            12 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(e, make_x())));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(make_x(), e)));\n             },\n-            10 => {\n+            13 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Field(e, Ident::from_str(\"f\"))));\n             },\n-            11 => {\n+            14 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Range(\n                             Some(e), Some(make_x()), RangeLimits::HalfOpen)));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Range(\n                             Some(make_x()), Some(e), RangeLimits::HalfOpen)));\n             },\n-            12 => {\n+            15 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::AddrOf(Mutability::Immutable, e)));\n             },\n-            13 => {\n+            16 => {\n                 g(ExprKind::Ret(None));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Ret(Some(e))));\n             },\n-            14 => {\n+            17 => {\n                 let path = Path::from_ident(Ident::from_str(\"S\"));\n                 g(ExprKind::Struct(path, vec![], Some(make_x())));\n             },\n-            15 => {\n+            18 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Try(e)));\n             },\n+            19 => {\n+                let ps = vec![P(Pat {\n+                    id: DUMMY_NODE_ID,\n+                    node: PatKind::Wild,\n+                    span: DUMMY_SP,\n+                })];\n+                iter_exprs(depth - 1, &mut |e| g(ExprKind::Let(ps.clone(), e)))\n+            },\n             _ => panic!(\"bad counter value in iter_exprs\"),\n         }\n     }"}]}