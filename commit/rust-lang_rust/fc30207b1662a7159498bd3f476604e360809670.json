{"sha": "fc30207b1662a7159498bd3f476604e360809670", "node_id": "C_kwDOAAsO6NoAKGZjMzAyMDdiMTY2MmE3MTU5NDk4YmQzZjQ3NjYwNGUzNjA4MDk2NzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-15T15:12:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-15T15:12:43Z"}, "message": "Rollup merge of #108291 - chenyukang:yukang/fix-benchmarks, r=workingjubilee\n\nFix more benchmark test with black_box\n\nFollow up fix for https://github.com/rust-lang/rust/issues/107590", "tree": {"sha": "0b912c2f7208aa0dfd23dc7362dcce108369cacc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b912c2f7208aa0dfd23dc7362dcce108369cacc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc30207b1662a7159498bd3f476604e360809670", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkYkvrCRBK7hj4Ov3rIwAARvIIAAfmyd9eIVwDuRXcHNoiqmuK\nyKfxjSkCD45yIPHEsVK5vqMUceFlD2L24YTNbp3VaqEmtZdPBoGdmeT+HZTVIoG2\nskYtL2dM7VbAgqkpqzPbb2o+lBPv3zrQRH6IO7GzFpjYOtNDAPpFQ5NDzIGqRbAm\nP632n2EyVbBYhUsQUWJS6AXiCqCD3ls1PnWYg6YybUEQM24F8cZfJeweTvnwcYhT\nw1u3lDCEwcB9U53OlFx1C4wyV3WnHvKgCs8pd1TP1xA5TUpz5/FahCR5XzcFH3Hr\ndOf8F5I2rDxgEjkEn5/P6fNIIe9CqPXqBm6Mv5mkgC+UlwsLiTUduc4Gc2IHSIs=\n=orZ9\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b912c2f7208aa0dfd23dc7362dcce108369cacc\nparent 2913ad6db0f72fed5139253faed73200c7af3535\nparent 62cfd8a123e2ee78fab6ca35ae8bffded28ab620\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684163563 +0200\ncommitter GitHub <noreply@github.com> 1684163563 +0200\n\nRollup merge of #108291 - chenyukang:yukang/fix-benchmarks, r=workingjubilee\n\nFix more benchmark test with black_box\n\nFollow up fix for https://github.com/rust-lang/rust/issues/107590\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc30207b1662a7159498bd3f476604e360809670", "html_url": "https://github.com/rust-lang/rust/commit/fc30207b1662a7159498bd3f476604e360809670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc30207b1662a7159498bd3f476604e360809670/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2913ad6db0f72fed5139253faed73200c7af3535", "url": "https://api.github.com/repos/rust-lang/rust/commits/2913ad6db0f72fed5139253faed73200c7af3535", "html_url": "https://github.com/rust-lang/rust/commit/2913ad6db0f72fed5139253faed73200c7af3535"}, {"sha": "62cfd8a123e2ee78fab6ca35ae8bffded28ab620", "url": "https://api.github.com/repos/rust-lang/rust/commits/62cfd8a123e2ee78fab6ca35ae8bffded28ab620", "html_url": "https://github.com/rust-lang/rust/commit/62cfd8a123e2ee78fab6ca35ae8bffded28ab620"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "d1cdb12e50f8cfeba0e28799b02a0531fdb4ebfb", "filename": "library/core/benches/fmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc30207b1662a7159498bd3f476604e360809670/library%2Fcore%2Fbenches%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30207b1662a7159498bd3f476604e360809670/library%2Fcore%2Fbenches%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Ffmt.rs?ref=fc30207b1662a7159498bd3f476604e360809670", "patch": "@@ -1,13 +1,13 @@\n use std::fmt::{self, Write as FmtWrite};\n use std::io::{self, Write as IoWrite};\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n #[bench]\n fn write_vec_value(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = Vec::new();\n         for _ in 0..1000 {\n-            mem.write_all(\"abc\".as_bytes()).unwrap();\n+            mem.write_all(black_box(\"abc\").as_bytes()).unwrap();\n         }\n     });\n }\n@@ -18,7 +18,7 @@ fn write_vec_ref(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            wr.write_all(\"abc\".as_bytes()).unwrap();\n+            wr.write_all(black_box(\"abc\").as_bytes()).unwrap();\n         }\n     });\n }\n@@ -29,7 +29,7 @@ fn write_vec_macro1(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -40,7 +40,7 @@ fn write_vec_macro2(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{}\", \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -51,7 +51,7 @@ fn write_vec_macro_debug(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"\u2603\")).unwrap();\n         }\n     });\n }\n@@ -61,7 +61,7 @@ fn write_str_value(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = String::new();\n         for _ in 0..1000 {\n-            mem.write_str(\"abc\").unwrap();\n+            mem.write_str(black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -72,7 +72,7 @@ fn write_str_ref(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            wr.write_str(\"abc\").unwrap();\n+            wr.write_str(black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -82,7 +82,7 @@ fn write_str_macro1(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = String::new();\n         for _ in 0..1000 {\n-            write!(mem, \"abc\").unwrap();\n+            write!(mem, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -93,7 +93,7 @@ fn write_str_macro2(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{}\", \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -104,7 +104,7 @@ fn write_str_macro_debug(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"\u2603\")).unwrap();\n         }\n     });\n }\n@@ -115,7 +115,7 @@ fn write_str_macro_debug_ascii(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"Hello, World!\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"Hello, World!\")).unwrap();\n         }\n     });\n }"}, {"sha": "fb4a786b27e3d969cc7cb8fe9cf6d32629ed18c6", "filename": "library/core/benches/num/dec2flt/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc30207b1662a7159498bd3f476604e360809670/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30207b1662a7159498bd3f476604e360809670/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs?ref=fc30207b1662a7159498bd3f476604e360809670", "patch": "@@ -1,57 +1,57 @@\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n #[bench]\n fn bench_0(b: &mut Bencher) {\n-    b.iter(|| \"0.0\".parse::<f64>());\n+    b.iter(|| black_box(\"0.0\").parse::<f64>());\n }\n \n #[bench]\n fn bench_42(b: &mut Bencher) {\n-    b.iter(|| \"42\".parse::<f64>());\n+    b.iter(|| black_box(\"42\").parse::<f64>());\n }\n \n #[bench]\n fn bench_huge_int(b: &mut Bencher) {\n     // 2^128 - 1\n-    b.iter(|| \"170141183460469231731687303715884105727\".parse::<f64>());\n+    b.iter(|| black_box(\"170141183460469231731687303715884105727\").parse::<f64>());\n }\n \n #[bench]\n fn bench_short_decimal(b: &mut Bencher) {\n-    b.iter(|| \"1234.5678\".parse::<f64>());\n+    b.iter(|| black_box(\"1234.5678\").parse::<f64>());\n }\n \n #[bench]\n fn bench_pi_long(b: &mut Bencher) {\n-    b.iter(|| \"3.14159265358979323846264338327950288\".parse::<f64>());\n+    b.iter(|| black_box(\"3.14159265358979323846264338327950288\").parse::<f64>());\n }\n \n #[bench]\n fn bench_pi_short(b: &mut Bencher) {\n-    b.iter(|| \"3.141592653589793\".parse::<f64>())\n+    b.iter(|| black_box(\"3.141592653589793\").parse::<f64>())\n }\n \n #[bench]\n fn bench_1e150(b: &mut Bencher) {\n-    b.iter(|| \"1e150\".parse::<f64>());\n+    b.iter(|| black_box(\"1e150\").parse::<f64>());\n }\n \n #[bench]\n fn bench_long_decimal_and_exp(b: &mut Bencher) {\n-    b.iter(|| \"727501488517303786137132964064381141071e-123\".parse::<f64>());\n+    b.iter(|| black_box(\"727501488517303786137132964064381141071e-123\").parse::<f64>());\n }\n \n #[bench]\n fn bench_min_subnormal(b: &mut Bencher) {\n-    b.iter(|| \"5e-324\".parse::<f64>());\n+    b.iter(|| black_box(\"5e-324\").parse::<f64>());\n }\n \n #[bench]\n fn bench_min_normal(b: &mut Bencher) {\n-    b.iter(|| \"2.2250738585072014e-308\".parse::<f64>());\n+    b.iter(|| black_box(\"2.2250738585072014e-308\").parse::<f64>());\n }\n \n #[bench]\n fn bench_max(b: &mut Bencher) {\n-    b.iter(|| \"1.7976931348623157e308\".parse::<f64>());\n+    b.iter(|| black_box(\"1.7976931348623157e308\").parse::<f64>());\n }"}, {"sha": "1a330ef5fe546fe7c14efbcde03bb6a847d05fb1", "filename": "library/core/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc30207b1662a7159498bd3f476604e360809670/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30207b1662a7159498bd3f476604e360809670/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=fc30207b1662a7159498bd3f476604e360809670", "patch": "@@ -7,7 +7,7 @@ use core::num::flt2dec::MAX_SIG_DIGITS;\n use core::num::flt2dec::{decode, DecodableFloat, Decoded, FullDecoded};\n use std::io::Write;\n use std::vec::Vec;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n@@ -22,7 +22,7 @@ fn bench_small_shortest(b: &mut Bencher) {\n \n     b.iter(|| {\n         buf.clear();\n-        write!(&mut buf, \"{}\", 3.1415926f64).unwrap()\n+        write!(black_box(&mut buf), \"{}\", black_box(3.1415926f64)).unwrap()\n     });\n }\n \n@@ -32,6 +32,6 @@ fn bench_big_shortest(b: &mut Bencher) {\n \n     b.iter(|| {\n         buf.clear();\n-        write!(&mut buf, \"{}\", f64::MAX).unwrap()\n+        write!(black_box(&mut buf), \"{}\", black_box(f64::MAX)).unwrap()\n     });\n }"}, {"sha": "b97014d9bf9f2fd312ffec0d02edfcbfcdd91c78", "filename": "library/core/benches/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc30207b1662a7159498bd3f476604e360809670/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30207b1662a7159498bd3f476604e360809670/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs?ref=fc30207b1662a7159498bd3f476604e360809670", "patch": "@@ -3,7 +3,7 @@ mod flt2dec;\n mod int_log;\n \n use std::str::FromStr;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n const ASCII_NUMBERS: [&str; 19] = [\n     \"0\",\n@@ -36,7 +36,7 @@ macro_rules! from_str_bench {\n                     .iter()\n                     .cycle()\n                     .take(5_000)\n-                    .filter_map(|s| <$t>::from_str(s).ok())\n+                    .filter_map(|s| <$t>::from_str(black_box(s)).ok())\n                     .max()\n             })\n         }\n@@ -52,7 +52,7 @@ macro_rules! from_str_radix_bench {\n                     .iter()\n                     .cycle()\n                     .take(5_000)\n-                    .filter_map(|s| <$t>::from_str_radix(s, $radix).ok())\n+                    .filter_map(|s| <$t>::from_str_radix(black_box(s), $radix).ok())\n                     .max()\n             })\n         }"}]}