{"sha": "7f59c21dff7bf56b466a23c54746be0773b37d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTljMjFkZmY3YmY1NmI0NjZhMjNjNTQ3NDZiZTA3NzNiMzdkMGI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-27T02:34:54Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-27T05:22:02Z"}, "message": "Rollup merge of #31930 - miqid:doc, r=steveklabnik\n\nHello.\n\nI've added links for items inside of some stable methods for consistency with existing ones that already have them. Also includes minor formatting fixes.\n\nr? @steveklabnik", "tree": {"sha": "f618d77bde465265f2d65b576960ea2fe35a52a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f618d77bde465265f2d65b576960ea2fe35a52a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f59c21dff7bf56b466a23c54746be0773b37d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f59c21dff7bf56b466a23c54746be0773b37d0b", "html_url": "https://github.com/rust-lang/rust/commit/7f59c21dff7bf56b466a23c54746be0773b37d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f59c21dff7bf56b466a23c54746be0773b37d0b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543c6a37c012e1bc4f2c64df541a2782a91021ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/543c6a37c012e1bc4f2c64df541a2782a91021ac", "html_url": "https://github.com/rust-lang/rust/commit/543c6a37c012e1bc4f2c64df541a2782a91021ac"}, {"sha": "d41d3a5b9873034a973efcec70a838f3bfd6066e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d41d3a5b9873034a973efcec70a838f3bfd6066e", "html_url": "https://github.com/rust-lang/rust/commit/d41d3a5b9873034a973efcec70a838f3bfd6066e"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "5f3df398f16ba4802a32a32ae6b53ec9469fc7ac", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7f59c21dff7bf56b466a23c54746be0773b37d0b/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f59c21dff7bf56b466a23c54746be0773b37d0b/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7f59c21dff7bf56b466a23c54746be0773b37d0b", "patch": "@@ -267,9 +267,11 @@ impl str {\n     /// Converts a string slice to a raw pointer.\n     ///\n     /// As string slices are a slice of bytes, the raw pointer points to a\n-    /// `u8`. This pointer will be pointing to the first byte of the string\n+    /// [`u8`]. This pointer will be pointing to the first byte of the string\n     /// slice.\n     ///\n+    /// [`u8`]: primitive.u8.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -661,7 +663,7 @@ impl str {\n     /// assert_eq!(None, chars.next());\n     /// ```\n     ///\n-    /// Remember, `char`s may not match your human intuition about characters:\n+    /// Remember, [`char`]s may not match your human intuition about characters:\n     ///\n     /// ```\n     /// let y = \"y\u0306\";\n@@ -678,16 +680,18 @@ impl str {\n     pub fn chars(&self) -> Chars {\n         core_str::StrExt::chars(self)\n     }\n-    /// Returns an iterator over the `char`s of a string slice, and their\n+    /// Returns an iterator over the [`char`]s of a string slice, and their\n     /// positions.\n     ///\n     /// As a string slice consists of valid UTF-8, we can iterate through a\n-    /// string slice by `char`. This method returns an iterator of both\n-    /// these `char`s, as well as their byte positions.\n+    /// string slice by [`char`]. This method returns an iterator of both\n+    /// these [`char`]s, as well as their byte positions.\n     ///\n-    /// The iterator yields tuples. The position is first, the `char` is\n+    /// The iterator yields tuples. The position is first, the [`char`] is\n     /// second.\n     ///\n+    /// [`char`]: primitive.char.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -711,7 +715,7 @@ impl str {\n     /// assert_eq!(None, char_indices.next());\n     /// ```\n     ///\n-    /// Remember, `char`s may not match your human intuition about characters:\n+    /// Remember, [`char`]s may not match your human intuition about characters:\n     ///\n     /// ```\n     /// let y = \"y\u0306\";\n@@ -918,12 +922,13 @@ impl str {\n     /// Returns the byte index of the first character of this string slice that\n     /// matches the pattern.\n     ///\n-    /// Returns `None` if the pattern doesn't match.\n+    /// Returns [`None`] if the pattern doesn't match.\n     ///\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n     /// [`char`]: primitive.char.html\n+    /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -962,12 +967,13 @@ impl str {\n     /// Returns the byte index of the last character of this string slice that\n     /// matches the pattern.\n     ///\n-    /// Returns `None` if the pattern doesn't match.\n+    /// Returns [`None`] if the pattern doesn't match.\n     ///\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n     /// [`char`]: primitive.char.html\n+    /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -1187,14 +1193,18 @@ impl str {\n     /// An iterator over substrings of `self`, separated by characters\n     /// matched by a pattern and yielded in reverse order.\n     ///\n-    /// The pattern can be a simple `&str`, `char`, or a closure that\n+    /// The pattern can be a simple `&str`, [`char`], or a closure that\n     /// determines the split.\n     /// Additional libraries might provide more complex patterns like\n     /// regular expressions.\n     ///\n-    /// Equivalent to `split`, except that the trailing substring is\n+    /// [`char`]: primitive.char.html\n+    ///\n+    /// Equivalent to [`split()`], except that the trailing substring is\n     /// skipped if empty.\n     ///\n+    /// [`split()`]: #method.split\n+    ///\n     /// This method can be used for string data that is _terminated_,\n     /// rather than _separated_ by a pattern.\n     ///\n@@ -1457,7 +1467,7 @@ impl str {\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n-    /// search, and it will be a `[DoubleEndedIterator]` if a forward/reverse\n+    /// search, and it will be a [`DoubleEndedIterator`] if a forward/reverse\n     /// search yields the same elements.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n@@ -1694,9 +1704,11 @@ impl str {\n     ///\n     /// # Errors\n     ///\n-    /// Will return `Err` if it's not possible to parse this string slice into\n+    /// Will return [`Err`] if it's not possible to parse this string slice into\n     /// the desired type.\n     ///\n+    /// [`Err`]: str/trait.FromStr.html#associatedtype.Err\n+    ///\n     /// # Example\n     ///\n     /// Basic usage\n@@ -1707,7 +1719,7 @@ impl str {\n     /// assert_eq!(4, four);\n     /// ```\n     ///\n-    /// Using the 'turbofish' instead of annotationg `four`:\n+    /// Using the 'turbofish' instead of annotating `four`:\n     ///\n     /// ```\n     /// let four = \"4\".parse::<u32>();\n@@ -1765,11 +1777,13 @@ impl str {\n         result\n     }\n \n-    /// Returns the lowercase equivalent of this string slice, as a new `String`.\n+    /// Returns the lowercase equivalent of this string slice, as a new [`String`].\n     ///\n     /// 'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n     /// `Lowercase`.\n     ///\n+    /// [`String`]: string/struct.String.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1839,11 +1853,13 @@ impl str {\n         }\n     }\n \n-    /// Returns the uppercase equivalent of this string slice, as a new `String`.\n+    /// Returns the uppercase equivalent of this string slice, as a new [`String`].\n     ///\n     /// 'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n     /// `Uppercase`.\n     ///\n+    /// [`String`]: string/struct.String.html\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1884,7 +1900,9 @@ impl str {\n         self.chars().flat_map(|c| c.escape_unicode()).collect()\n     }\n \n-    /// Converts a `Box<str>` into a `String` without copying or allocating.\n+    /// Converts a `Box<str>` into a [`String`] without copying or allocating.\n+    ///\n+    /// [`String`]: string/struct.String.html\n     ///\n     /// # Examples\n     ///"}]}