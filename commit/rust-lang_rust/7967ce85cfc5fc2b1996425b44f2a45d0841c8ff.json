{"sha": "7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NjdjZTg1Y2ZjNWZjMmIxOTk2NDI1YjQ0ZjJhNDVkMDg0MWM4ZmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-07T12:27:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-07T12:27:17Z"}, "message": "Merge #7184\n\n7184: Changes Cursor Marker To $0 r=matklad a=kevaundray\n\n\n\nCo-authored-by: Kevaundray Wedderburn <kevtheappdev@gmail.com>", "tree": {"sha": "4495b9de7ea6c8e9dd9fd347d42517e9dee511fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4495b9de7ea6c8e9dd9fd347d42517e9dee511fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9v4lCRBK7hj4Ov3rIwAAdHIIAKGaKXUrckS31cw02WnVGexH\n8R527PTrpug42/Y96XPtsg+1GhTHjwq1r3lsjspHyh9jlympy/9SDiFNFDRLsS33\nzj+DnupCtQNIuPLiFhh8wvPmHr8s4RUU6J7nBRVYjP/COAEprWDYT0v6n78XxFEW\n3jcXaVTOl280fWDlHZO2qL2i+zGQy6eZzWO7OOjm6PV9fEMkvjz01DI7sr+04nUv\n2eEHQkn3cBPAOjdzJmcMbKeSzq8Indu/ZIvxthtYvsiA7WCyDKhLDhYb4mUZYxKc\nH9GkRGbDqdlpw2tayGv20KZohHTVU6okIlBJz02HsnGZN/Wx5eQKfQs25UuC4YU=\n=s+Ce\n-----END PGP SIGNATURE-----\n", "payload": "tree 4495b9de7ea6c8e9dd9fd347d42517e9dee511fa\nparent c3e9fb183bc287d83b97b776edc87c54d18d1a73\nparent 72b9a4fbd3c12f3250b9157a1d44230e04ec8b22\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610022437 +0000\ncommitter GitHub <noreply@github.com> 1610022437 +0000\n\nMerge #7184\n\n7184: Changes Cursor Marker To $0 r=matklad a=kevaundray\n\n\n\nCo-authored-by: Kevaundray Wedderburn <kevtheappdev@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "html_url": "https://github.com/rust-lang/rust/commit/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3e9fb183bc287d83b97b776edc87c54d18d1a73", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e9fb183bc287d83b97b776edc87c54d18d1a73", "html_url": "https://github.com/rust-lang/rust/commit/c3e9fb183bc287d83b97b776edc87c54d18d1a73"}, {"sha": "72b9a4fbd3c12f3250b9157a1d44230e04ec8b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b9a4fbd3c12f3250b9157a1d44230e04ec8b22", "html_url": "https://github.com/rust-lang/rust/commit/72b9a4fbd3c12f3250b9157a1d44230e04ec8b22"}], "stats": {"total": 3510, "additions": 1745, "deletions": 1765}, "files": [{"sha": "cb1548cef78c32ddb6aa18062ef7e16cadd05451", "filename": "crates/assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -12,7 +12,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // fn main() {\n-//     let x<|> = 92;\n+//     let x$0 = 92;\n // }\n // ```\n // ->\n@@ -81,21 +81,17 @@ mod tests {\n \n     #[test]\n     fn add_explicit_type_target() {\n-        check_assist_target(add_explicit_type, \"fn f() { let a<|> = 1; }\", \"a\");\n+        check_assist_target(add_explicit_type, \"fn f() { let a$0 = 1; }\", \"a\");\n     }\n \n     #[test]\n     fn add_explicit_type_works_for_simple_expr() {\n-        check_assist(add_explicit_type, \"fn f() { let a<|> = 1; }\", \"fn f() { let a: i32 = 1; }\");\n+        check_assist(add_explicit_type, \"fn f() { let a$0 = 1; }\", \"fn f() { let a: i32 = 1; }\");\n     }\n \n     #[test]\n     fn add_explicit_type_works_for_underscore() {\n-        check_assist(\n-            add_explicit_type,\n-            \"fn f() { let a<|>: _ = 1; }\",\n-            \"fn f() { let a: i32 = 1; }\",\n-        );\n+        check_assist(add_explicit_type, \"fn f() { let a$0: _ = 1; }\", \"fn f() { let a: i32 = 1; }\");\n     }\n \n     #[test]\n@@ -109,7 +105,7 @@ mod tests {\n             }\n \n             fn f() {\n-                let a<|>: Option<_> = Option::Some(1);\n+                let a$0: Option<_> = Option::Some(1);\n             }\"#,\n             r#\"\n             enum Option<T> {\n@@ -127,7 +123,7 @@ mod tests {\n     fn add_explicit_type_works_for_macro_call() {\n         check_assist(\n             add_explicit_type,\n-            r\"macro_rules! v { () => {0u64} } fn f() { let a<|> = v!(); }\",\n+            r\"macro_rules! v { () => {0u64} } fn f() { let a$0 = v!(); }\",\n             r\"macro_rules! v { () => {0u64} } fn f() { let a: u64 = v!(); }\",\n         );\n     }\n@@ -136,39 +132,39 @@ mod tests {\n     fn add_explicit_type_works_for_macro_call_recursive() {\n         check_assist(\n             add_explicit_type,\n-            r#\"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a<|> = v!(); }\"#,\n+            r#\"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a$0 = v!(); }\"#,\n             r#\"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a: u64 = v!(); }\"#,\n         );\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_ty_not_inferred() {\n-        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|> = None; }\");\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a$0 = None; }\");\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_ty_already_specified() {\n-        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|>: i32 = 1; }\");\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a$0: i32 = 1; }\");\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_specified_ty_is_tuple() {\n-        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|>: (i32, i32) = (3, 4); }\");\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a$0: (i32, i32) = (3, 4); }\");\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_cursor_after_equals() {\n         check_assist_not_applicable(\n             add_explicit_type,\n-            \"fn f() {let a =<|> match 1 {2 => 3, 3 => 5};}\",\n+            \"fn f() {let a =$0 match 1 {2 => 3, 3 => 5};}\",\n         )\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_cursor_before_let() {\n         check_assist_not_applicable(\n             add_explicit_type,\n-            \"fn f() <|>{let a = match 1 {2 => 3, 3 => 5};}\",\n+            \"fn f() $0{let a = match 1 {2 => 3, 3 => 5};}\",\n         )\n     }\n \n@@ -178,7 +174,7 @@ mod tests {\n             add_explicit_type,\n             r#\"\n fn main() {\n-    let multiply_by_two<|> = |i| i * 3;\n+    let multiply_by_two$0 = |i| i * 3;\n     let six = multiply_by_two(2);\n }\"#,\n         )\n@@ -195,7 +191,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let test<|> = Test { t: 23u8, k: 33 };\n+    let test$0 = Test { t: 23u8, k: 33 };\n }\"#,\n             r#\"\n struct Test<K, T = u8> {"}, {"sha": "63cea754dae4fb44bae7b5eb7480024e4285c053", "filename": "crates/assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -20,7 +20,7 @@ use crate::{\n //     fn bar(&self) {}\n // }\n //\n-// impl Trait<u32> for () {<|>\n+// impl Trait<u32> for () {$0\n //\n // }\n // ```\n@@ -63,7 +63,7 @@ pub(crate) fn add_missing_impl_members(acc: &mut Assists, ctx: &AssistContext) -\n //\n // impl Trait for () {\n //     type X = ();\n-//     fn foo(&self) {}<|>\n+//     fn foo(&self) {}$0\n //\n // }\n // ```\n@@ -166,7 +166,7 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-<|>\n+$0\n }\"#,\n             r#\"\n trait Foo {\n@@ -214,7 +214,7 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-<|>\n+$0\n }\"#,\n             r#\"\n trait Foo {\n@@ -242,7 +242,7 @@ impl Foo for S {\n             r#\"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S { <|> }\"#,\n+impl Foo for S { $0 }\"#,\n             r#\"\n trait Foo { fn foo(&self); }\n struct S;\n@@ -261,7 +261,7 @@ impl Foo for S {\n             r#\"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S<|>\"#,\n+impl Foo for S$0\"#,\n             r#\"\n trait Foo { fn foo(&self); }\n struct S;\n@@ -280,7 +280,7 @@ impl Foo for S {\n             r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n-impl Foo<u32> for S { <|> }\"#,\n+impl Foo<u32> for S { $0 }\"#,\n             r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n@@ -299,7 +299,7 @@ impl Foo<u32> for S {\n             r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n-impl<U> Foo<U> for S { <|> }\"#,\n+impl<U> Foo<U> for S { $0 }\"#,\n             r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n@@ -318,7 +318,7 @@ impl<U> Foo<U> for S {\n             r#\"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S {}<|>\"#,\n+impl Foo for S {}$0\"#,\n             r#\"\n trait Foo { fn foo(&self); }\n struct S;\n@@ -340,7 +340,7 @@ mod foo {\n     trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\"#,\n+impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar;\n@@ -370,7 +370,7 @@ mod foo {\n use foo::bar;\n \n struct S;\n-impl bar::Foo for S { <|> }\"#,\n+impl bar::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub mod bar {\n@@ -400,7 +400,7 @@ mod foo {\n     trait Foo { fn foo(&self, bar: Bar<u32>); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\"#,\n+impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n@@ -425,7 +425,7 @@ mod foo {\n     trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n }\n struct S;\n-impl foo::Foo<u32> for S { <|> }\"#,\n+impl foo::Foo<u32> for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n@@ -452,7 +452,7 @@ mod foo {\n }\n struct Param;\n struct S;\n-impl foo::Foo<Param> for S { <|> }\"#,\n+impl foo::Foo<Param> for S { $0 }\"#,\n             r#\"\n mod foo {\n     trait Foo<T> { fn foo(&self, bar: T); }\n@@ -479,7 +479,7 @@ mod foo {\n     trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\"#,\n+impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n@@ -506,7 +506,7 @@ mod foo {\n     trait Foo { fn foo(&self, bar: Bar<Baz>); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\"#,\n+impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n@@ -532,7 +532,7 @@ mod foo {\n     trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\"#,\n+impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub trait Fn<Args> { type Output; }\n@@ -554,7 +554,7 @@ impl foo::Foo for S {\n             r#\"\n trait Foo;\n struct S;\n-impl Foo for S { <|> }\"#,\n+impl Foo for S { $0 }\"#,\n         )\n     }\n \n@@ -568,7 +568,7 @@ trait Foo {\n     fn valid(some: u32) -> bool { false }\n }\n struct S;\n-impl Foo for S { <|> }\"#,\n+impl Foo for S { $0 }\"#,\n         )\n     }\n \n@@ -586,7 +586,7 @@ trait Foo {\n     fn foo(&self);\n }\n struct S;\n-impl Foo for S {}<|>\"#,\n+impl Foo for S {}$0\"#,\n             r#\"\n #[doc(alias = \"test alias\")]\n trait Foo {\n@@ -621,7 +621,7 @@ trait Foo {\n     fn foo(some: u32) -> bool;\n }\n struct S;\n-impl Foo for S { <|> }\"#,\n+impl Foo for S { $0 }\"#,\n             r#\"\n trait Foo {\n     type Output;\n@@ -648,7 +648,7 @@ trait Foo<T = Self> {\n }\n \n struct S;\n-impl Foo for S { <|> }\"#,\n+impl Foo for S { $0 }\"#,\n             r#\"\n trait Foo<T = Self> {\n     fn bar(&self, other: &T);\n@@ -673,7 +673,7 @@ trait Foo<T1, T2 = Self> {\n }\n \n struct S<T>;\n-impl Foo<T> for S<T> { <|> }\"#,\n+impl Foo<T> for S<T> { $0 }\"#,\n             r#\"\n trait Foo<T1, T2 = Self> {\n     fn bar(&self, this: &T1, that: &T2);\n@@ -697,7 +697,7 @@ trait Tr {\n     type Ty: Copy + 'static;\n }\n \n-impl Tr for ()<|> {\n+impl Tr for ()$0 {\n }\"#,\n             r#\"\n trait Tr {\n@@ -719,7 +719,7 @@ trait Tr {\n     fn foo();\n }\n \n-impl Tr for ()<|> {\n+impl Tr for ()$0 {\n     +++\n }\"#,\n             r#\"\n@@ -745,7 +745,7 @@ trait Tr {\n     fn foo();\n }\n \n-impl Tr for ()<|> {\n+impl Tr for ()$0 {\n     // very important\n }\"#,\n             r#\"\n@@ -771,7 +771,7 @@ trait Test {\n     fn foo(&self, x: crate)\n }\n impl Test for () {\n-    <|>\n+    $0\n }\n \"#,\n             r#\"\n@@ -796,7 +796,7 @@ trait Foo<BAR> {\n     fn foo(&self, bar: BAR);\n }\n impl Foo for () {\n-    <|>\n+    $0\n }\n \"#,\n             r#\""}, {"sha": "8e9ea4fadc095a953f287eb361f5da492caada03", "filename": "crates/assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -14,7 +14,7 @@ use crate::{\n // ```\n // fn make<T>() -> T { todo!() }\n // fn main() {\n-//     let x = make<|>();\n+//     let x = make$0();\n // }\n // ```\n // ->\n@@ -77,7 +77,7 @@ mod tests {\n             r#\"\n fn make<T>() -> T {}\n fn main() {\n-    make<|>();\n+    make$0();\n }\n \"#,\n             r#\"\n@@ -97,7 +97,7 @@ fn main() {\n             r#\"\n fn make<T>() -> T {}\n fn main() {\n-    make()<|>;\n+    make()$0;\n }\n \"#,\n             r#\"\n@@ -119,7 +119,7 @@ impl S {\n     fn make<T>(&self) -> T {}\n }\n fn main() {\n-    S.make<|>();\n+    S.make$0();\n }\n \"#,\n             r#\"\n@@ -142,7 +142,7 @@ fn main() {\n             r#\"\n fn make<T>() -> T {}\n fn main() {\n-    make<|>::<()>();\n+    make$0::<()>();\n }\n \"#,\n         );\n@@ -156,7 +156,7 @@ fn main() {\n             r#\"\n fn make() -> () {}\n fn main() {\n-    make<|>();\n+    make$0();\n }\n \"#,\n         );"}, {"sha": "ed4d114559ccaf5ca3a250ce725cf307ef543d6d", "filename": "crates/assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -12,7 +12,7 @@ use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKin\n //\n // ```\n // fn main() {\n-//     if x != 4 ||<|> !y {}\n+//     if x != 4 ||$0 !y {}\n // }\n // ```\n // ->\n@@ -68,26 +68,26 @@ mod tests {\n \n     #[test]\n     fn demorgan_turns_and_into_or() {\n-        check_assist(apply_demorgan, \"fn f() { !x &&<|> !x }\", \"fn f() { !(x || x) }\")\n+        check_assist(apply_demorgan, \"fn f() { !x &&$0 !x }\", \"fn f() { !(x || x) }\")\n     }\n \n     #[test]\n     fn demorgan_turns_or_into_and() {\n-        check_assist(apply_demorgan, \"fn f() { !x ||<|> !x }\", \"fn f() { !(x && x) }\")\n+        check_assist(apply_demorgan, \"fn f() { !x ||$0 !x }\", \"fn f() { !(x && x) }\")\n     }\n \n     #[test]\n     fn demorgan_removes_inequality() {\n-        check_assist(apply_demorgan, \"fn f() { x != x ||<|> !x }\", \"fn f() { !(x == x && x) }\")\n+        check_assist(apply_demorgan, \"fn f() { x != x ||$0 !x }\", \"fn f() { !(x == x && x) }\")\n     }\n \n     #[test]\n     fn demorgan_general_case() {\n-        check_assist(apply_demorgan, \"fn f() { x ||<|> x }\", \"fn f() { !(!x && !x) }\")\n+        check_assist(apply_demorgan, \"fn f() { x ||$0 x }\", \"fn f() { !(!x && !x) }\")\n     }\n \n     #[test]\n     fn demorgan_doesnt_apply_with_cursor_not_on_op() {\n-        check_assist_not_applicable(apply_demorgan, \"fn f() { <|> !x || !x }\")\n+        check_assist_not_applicable(apply_demorgan, \"fn f() { $0 !x || !x }\")\n     }\n }"}, {"sha": "55620f0f39d6425cce574ec7dc634c2930cb70a3", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -70,7 +70,7 @@ use crate::{\n //\n // ```\n // fn main() {\n-//     let map = HashMap<|>::new();\n+//     let map = HashMap$0::new();\n // }\n // # pub mod std { pub mod collections { pub struct HashMap { } } }\n // ```\n@@ -151,7 +151,7 @@ mod tests {\n \n             use std::fmt;\n \n-            <|>Formatter\n+            $0Formatter\n             \",\n             r\"\n             mod std {\n@@ -172,7 +172,7 @@ mod tests {\n         check_assist(\n             auto_import,\n             r\"\n-            <|>PubStruct\n+            $0PubStruct\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -198,7 +198,7 @@ mod tests {\n             macro_rules! foo {\n                 ($i:ident) => { fn foo(a: $i) {} }\n             }\n-            foo!(Pub<|>Struct);\n+            foo!(Pub$0Struct);\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -227,7 +227,7 @@ mod tests {\n             use PubMod::PubStruct1;\n \n             struct Test {\n-                test: Pub<|>Struct2<u8>,\n+                test: Pub$0Struct2<u8>,\n             }\n \n             pub mod PubMod {\n@@ -259,7 +259,7 @@ mod tests {\n         check_assist(\n             auto_import,\n             r\"\n-            PubSt<|>ruct\n+            PubSt$0ruct\n \n             pub mod PubMod1 {\n                 pub struct PubStruct;\n@@ -296,7 +296,7 @@ mod tests {\n             r\"\n             use PubMod::PubStruct;\n \n-            PubStruct<|>\n+            PubStruct$0\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -310,7 +310,7 @@ mod tests {\n         check_assist_not_applicable(\n             auto_import,\n             r\"\n-            PrivateStruct<|>\n+            PrivateStruct$0\n \n             pub mod PubMod {\n                 struct PrivateStruct;\n@@ -324,7 +324,7 @@ mod tests {\n         check_assist_not_applicable(\n             auto_import,\n             \"\n-            PubStruct<|>\",\n+            PubStruct$0\",\n         );\n     }\n \n@@ -333,7 +333,7 @@ mod tests {\n         check_assist_not_applicable(\n             auto_import,\n             r\"\n-            use PubStruct<|>;\n+            use PubStruct$0;\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -346,7 +346,7 @@ mod tests {\n         check_assist(\n             auto_import,\n             r\"\n-            test_function<|>\n+            test_function$0\n \n             pub mod PubMod {\n                 pub fn test_function() {};\n@@ -377,7 +377,7 @@ macro_rules! foo {\n \n //- /main.rs crate:main deps:crate_with_macro\n fn main() {\n-    foo<|>\n+    foo$0\n }\n \",\n             r\"use crate_with_macro::foo;\n@@ -395,7 +395,7 @@ fn main() {\n             auto_import,\n             r\"\n             struct AssistInfo {\n-                group_label: Option<<|>GroupLabel>,\n+                group_label: Option<$0GroupLabel>,\n             }\n \n             mod m { pub struct GroupLabel; }\n@@ -419,7 +419,7 @@ fn main() {\n \n             use mod1::mod2;\n             fn main() {\n-                mod2::mod3::TestStruct<|>\n+                mod2::mod3::TestStruct$0\n             }\n             \",\n         );\n@@ -436,7 +436,7 @@ fn main() {\n \n             use test_mod::test_function;\n             fn main() {\n-                test_function<|>\n+                test_function$0\n             }\n             \",\n         );\n@@ -455,7 +455,7 @@ fn main() {\n             }\n \n             fn main() {\n-                TestStruct::test_function<|>\n+                TestStruct::test_function$0\n             }\n             \",\n             r\"\n@@ -488,7 +488,7 @@ fn main() {\n             }\n \n             fn main() {\n-                TestStruct::TEST_CONST<|>\n+                TestStruct::TEST_CONST$0\n             }\n             \",\n             r\"\n@@ -524,7 +524,7 @@ fn main() {\n             }\n \n             fn main() {\n-                test_mod::TestStruct::test_function<|>\n+                test_mod::TestStruct::test_function$0\n             }\n             \",\n             r\"\n@@ -573,7 +573,7 @@ fn main() {\n \n             use test_mod::TestTrait2;\n             fn main() {\n-                test_mod::TestEnum::test_function<|>;\n+                test_mod::TestEnum::test_function$0;\n             }\n             \",\n         )\n@@ -595,7 +595,7 @@ fn main() {\n             }\n \n             fn main() {\n-                test_mod::TestStruct::TEST_CONST<|>\n+                test_mod::TestStruct::TEST_CONST$0\n             }\n             \",\n             r\"\n@@ -644,7 +644,7 @@ fn main() {\n \n             use test_mod::TestTrait2;\n             fn main() {\n-                test_mod::TestEnum::TEST_CONST<|>;\n+                test_mod::TestEnum::TEST_CONST$0;\n             }\n             \",\n         )\n@@ -667,7 +667,7 @@ fn main() {\n \n             fn main() {\n                 let test_struct = test_mod::TestStruct {};\n-                test_struct.test_meth<|>od()\n+                test_struct.test_meth$0od()\n             }\n             \",\n             r\"\n@@ -699,7 +699,7 @@ fn main() {\n             //- /main.rs crate:main deps:dep\n             fn main() {\n                 let test_struct = dep::test_mod::TestStruct {};\n-                test_struct.test_meth<|>od()\n+                test_struct.test_meth$0od()\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -730,7 +730,7 @@ fn main() {\n             r\"\n             //- /main.rs crate:main deps:dep\n             fn main() {\n-                dep::test_mod::TestStruct::test_func<|>tion\n+                dep::test_mod::TestStruct::test_func$0tion\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -760,7 +760,7 @@ fn main() {\n             r\"\n             //- /main.rs crate:main deps:dep\n             fn main() {\n-                dep::test_mod::TestStruct::CONST<|>\n+                dep::test_mod::TestStruct::CONST$0\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -791,7 +791,7 @@ fn main() {\n             //- /main.rs crate:main deps:dep\n             fn main() {\n                 let test_struct = dep::test_mod::TestStruct {};\n-                test_struct.test_func<|>tion()\n+                test_struct.test_func$0tion()\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -815,7 +815,7 @@ fn main() {\n             //- /main.rs crate:main deps:dep\n             fn main() {\n                 let test_struct = dep::test_mod::TestStruct {};\n-                test_struct.test_meth<|>od()\n+                test_struct.test_meth$0od()\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -858,7 +858,7 @@ fn main() {\n             use test_mod::TestTrait2;\n             fn main() {\n                 let one = test_mod::TestEnum::One;\n-                one.test<|>_method();\n+                one.test$0_method();\n             }\n             \",\n         )\n@@ -874,7 +874,7 @@ pub struct Struct;\n \n //- /main.rs crate:main deps:dep\n fn main() {\n-    Struct<|>\n+    Struct$0\n }\n \",\n             r\"use dep::Struct;\n@@ -902,7 +902,7 @@ pub fn panic_fmt() {}\n //- /main.rs crate:main deps:dep\n struct S;\n \n-impl f<|>mt::Display for S {}\n+impl f$0mt::Display for S {}\n \",\n             r\"use dep::fmt;\n \n@@ -930,7 +930,7 @@ mac!();\n \n //- /main.rs crate:main deps:dep\n fn main() {\n-    Cheese<|>;\n+    Cheese$0;\n }\n \",\n             r\"use dep::Cheese;\n@@ -954,7 +954,7 @@ pub struct fmt;\n \n //- /main.rs crate:main deps:dep\n fn main() {\n-    FMT<|>;\n+    FMT$0;\n }\n \",\n             r\"use dep::FMT;"}, {"sha": "ac8c44124fe9d6ed1f223e619f4e728632d9e854", "filename": "crates/assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -13,7 +13,7 @@ use crate::{utils::vis_offset, AssistContext, AssistId, AssistKind, Assists};\n // Adds or changes existing visibility specifier.\n //\n // ```\n-// <|>fn frobnicate() {}\n+// $0fn frobnicate() {}\n // ```\n // ->\n // ```\n@@ -118,57 +118,57 @@ mod tests {\n \n     #[test]\n     fn change_visibility_adds_pub_crate_to_items() {\n-        check_assist(change_visibility, \"<|>fn foo() {}\", \"pub(crate) fn foo() {}\");\n-        check_assist(change_visibility, \"f<|>n foo() {}\", \"pub(crate) fn foo() {}\");\n-        check_assist(change_visibility, \"<|>struct Foo {}\", \"pub(crate) struct Foo {}\");\n-        check_assist(change_visibility, \"<|>mod foo {}\", \"pub(crate) mod foo {}\");\n-        check_assist(change_visibility, \"<|>trait Foo {}\", \"pub(crate) trait Foo {}\");\n-        check_assist(change_visibility, \"m<|>od {}\", \"pub(crate) mod {}\");\n-        check_assist(change_visibility, \"unsafe f<|>n foo() {}\", \"pub(crate) unsafe fn foo() {}\");\n+        check_assist(change_visibility, \"$0fn foo() {}\", \"pub(crate) fn foo() {}\");\n+        check_assist(change_visibility, \"f$0n foo() {}\", \"pub(crate) fn foo() {}\");\n+        check_assist(change_visibility, \"$0struct Foo {}\", \"pub(crate) struct Foo {}\");\n+        check_assist(change_visibility, \"$0mod foo {}\", \"pub(crate) mod foo {}\");\n+        check_assist(change_visibility, \"$0trait Foo {}\", \"pub(crate) trait Foo {}\");\n+        check_assist(change_visibility, \"m$0od {}\", \"pub(crate) mod {}\");\n+        check_assist(change_visibility, \"unsafe f$0n foo() {}\", \"pub(crate) unsafe fn foo() {}\");\n     }\n \n     #[test]\n     fn change_visibility_works_with_struct_fields() {\n         check_assist(\n             change_visibility,\n-            r\"struct S { <|>field: u32 }\",\n+            r\"struct S { $0field: u32 }\",\n             r\"struct S { pub(crate) field: u32 }\",\n         );\n-        check_assist(change_visibility, r\"struct S ( <|>u32 )\", r\"struct S ( pub(crate) u32 )\");\n+        check_assist(change_visibility, r\"struct S ( $0u32 )\", r\"struct S ( pub(crate) u32 )\");\n     }\n \n     #[test]\n     fn change_visibility_field_false_positive() {\n         mark::check!(change_visibility_field_false_positive);\n         check_assist_not_applicable(\n             change_visibility,\n-            r\"struct S { field: [(); { let <|>x = ();}] }\",\n+            r\"struct S { field: [(); { let $0x = ();}] }\",\n         )\n     }\n \n     #[test]\n     fn change_visibility_pub_to_pub_crate() {\n-        check_assist(change_visibility, \"<|>pub fn foo() {}\", \"pub(crate) fn foo() {}\")\n+        check_assist(change_visibility, \"$0pub fn foo() {}\", \"pub(crate) fn foo() {}\")\n     }\n \n     #[test]\n     fn change_visibility_pub_crate_to_pub() {\n-        check_assist(change_visibility, \"<|>pub(crate) fn foo() {}\", \"pub fn foo() {}\")\n+        check_assist(change_visibility, \"$0pub(crate) fn foo() {}\", \"pub fn foo() {}\")\n     }\n \n     #[test]\n     fn change_visibility_const() {\n-        check_assist(change_visibility, \"<|>const FOO = 3u8;\", \"pub(crate) const FOO = 3u8;\");\n+        check_assist(change_visibility, \"$0const FOO = 3u8;\", \"pub(crate) const FOO = 3u8;\");\n     }\n \n     #[test]\n     fn change_visibility_static() {\n-        check_assist(change_visibility, \"<|>static FOO = 3u8;\", \"pub(crate) static FOO = 3u8;\");\n+        check_assist(change_visibility, \"$0static FOO = 3u8;\", \"pub(crate) static FOO = 3u8;\");\n     }\n \n     #[test]\n     fn change_visibility_type_alias() {\n-        check_assist(change_visibility, \"<|>type T = ();\", \"pub(crate) type T = ();\");\n+        check_assist(change_visibility, \"$0type T = ();\", \"pub(crate) type T = ();\");\n     }\n \n     #[test]\n@@ -181,7 +181,7 @@ mod tests {\n             // comments\n \n             #[derive(Debug)]\n-            <|>struct Foo;\n+            $0struct Foo;\n             \",\n             r\"\n             /// docs\n@@ -199,14 +199,14 @@ mod tests {\n         check_assist_not_applicable(\n             change_visibility,\n             r\"mod foo { pub enum Foo {Foo1} }\n-              fn main() { foo::Foo::Foo1<|> } \",\n+              fn main() { foo::Foo::Foo1$0 } \",\n         );\n     }\n \n     #[test]\n     fn change_visibility_target() {\n-        check_assist_target(change_visibility, \"<|>fn foo() {}\", \"fn\");\n-        check_assist_target(change_visibility, \"pub(crate)<|> fn foo() {}\", \"pub(crate)\");\n-        check_assist_target(change_visibility, \"struct S { <|>field: u32 }\", \"field\");\n+        check_assist_target(change_visibility, \"$0fn foo() {}\", \"fn\");\n+        check_assist_target(change_visibility, \"pub(crate)$0 fn foo() {}\", \"pub(crate)\");\n+        check_assist_target(change_visibility, \"struct S { $0field: u32 }\", \"field\");\n     }\n }"}, {"sha": "a8a819cfcc4d80dd0721017c4622d6dc444505f4", "filename": "crates/assists/src/handlers/convert_integer_literal.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -7,7 +7,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n // Converts the base of integer literals to other bases.\n //\n // ```\n-// const _: i32 = 10<|>;\n+// const _: i32 = 10$0;\n // ```\n // ->\n // ```\n@@ -65,47 +65,47 @@ mod tests {\n \n     #[test]\n     fn binary_target() {\n-        check_assist_target(convert_integer_literal, \"const _: i32 = 0b1010<|>;\", \"0b1010\");\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0b1010$0;\", \"0b1010\");\n     }\n \n     #[test]\n     fn octal_target() {\n-        check_assist_target(convert_integer_literal, \"const _: i32 = 0o12<|>;\", \"0o12\");\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0o12$0;\", \"0o12\");\n     }\n \n     #[test]\n     fn decimal_target() {\n-        check_assist_target(convert_integer_literal, \"const _: i32 = 10<|>;\", \"10\");\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 10$0;\", \"10\");\n     }\n \n     #[test]\n     fn hexadecimal_target() {\n-        check_assist_target(convert_integer_literal, \"const _: i32 = 0xA<|>;\", \"0xA\");\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0xA$0;\", \"0xA\");\n     }\n \n     #[test]\n     fn binary_target_with_underscores() {\n-        check_assist_target(convert_integer_literal, \"const _: i32 = 0b10_10<|>;\", \"0b10_10\");\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0b10_10$0;\", \"0b10_10\");\n     }\n \n     #[test]\n     fn octal_target_with_underscores() {\n-        check_assist_target(convert_integer_literal, \"const _: i32 = 0o1_2<|>;\", \"0o1_2\");\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0o1_2$0;\", \"0o1_2\");\n     }\n \n     #[test]\n     fn decimal_target_with_underscores() {\n-        check_assist_target(convert_integer_literal, \"const _: i32 = 1_0<|>;\", \"1_0\");\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 1_0$0;\", \"1_0\");\n     }\n \n     #[test]\n     fn hexadecimal_target_with_underscores() {\n-        check_assist_target(convert_integer_literal, \"const _: i32 = 0x_A<|>;\", \"0x_A\");\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0x_A$0;\", \"0x_A\");\n     }\n \n     #[test]\n     fn convert_decimal_integer() {\n-        let before = \"const _: i32 = 1000<|>;\";\n+        let before = \"const _: i32 = 1000$0;\";\n \n         check_assist_by_label(\n             convert_integer_literal,\n@@ -131,7 +131,7 @@ mod tests {\n \n     #[test]\n     fn convert_hexadecimal_integer() {\n-        let before = \"const _: i32 = 0xFF<|>;\";\n+        let before = \"const _: i32 = 0xFF$0;\";\n \n         check_assist_by_label(\n             convert_integer_literal,\n@@ -157,7 +157,7 @@ mod tests {\n \n     #[test]\n     fn convert_binary_integer() {\n-        let before = \"const _: i32 = 0b11111111<|>;\";\n+        let before = \"const _: i32 = 0b11111111$0;\";\n \n         check_assist_by_label(\n             convert_integer_literal,\n@@ -183,7 +183,7 @@ mod tests {\n \n     #[test]\n     fn convert_octal_integer() {\n-        let before = \"const _: i32 = 0o377<|>;\";\n+        let before = \"const _: i32 = 0o377$0;\";\n \n         check_assist_by_label(\n             convert_integer_literal,\n@@ -209,7 +209,7 @@ mod tests {\n \n     #[test]\n     fn convert_integer_with_underscores() {\n-        let before = \"const _: i32 = 1_00_0<|>;\";\n+        let before = \"const _: i32 = 1_00_0$0;\";\n \n         check_assist_by_label(\n             convert_integer_literal,\n@@ -235,7 +235,7 @@ mod tests {\n \n     #[test]\n     fn convert_integer_with_suffix() {\n-        let before = \"const _: i32 = 1000i32<|>;\";\n+        let before = \"const _: i32 = 1000i32$0;\";\n \n         check_assist_by_label(\n             convert_integer_literal,\n@@ -262,7 +262,7 @@ mod tests {\n     #[test]\n     fn convert_overflowing_literal() {\n         let before = \"const _: i32 =\n-            111111111111111111111111111111111111111111111111111111111111111111111111<|>;\";\n+            111111111111111111111111111111111111111111111111111111111111111111111111$0;\";\n         check_assist_not_applicable(convert_integer_literal, before);\n     }\n }"}, {"sha": "8bbbb7ed5db02b49d9e780ad2550bb59f40c1046", "filename": "crates/assists/src/handlers/early_return.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -24,7 +24,7 @@ use crate::{\n //\n // ```\n // fn main() {\n-//     <|>if cond {\n+//     $0if cond {\n //         foo();\n //         bar();\n //     }\n@@ -200,7 +200,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 bar();\n-                if<|> true {\n+                if$0 true {\n                     foo();\n \n                     //comment\n@@ -230,7 +230,7 @@ mod tests {\n             r#\"\n             fn main(n: Option<String>) {\n                 bar();\n-                if<|> let Some(n) = n {\n+                if$0 let Some(n) = n {\n                     foo(n);\n \n                     //comment\n@@ -260,7 +260,7 @@ mod tests {\n             convert_to_guarded_return,\n             r#\"\n             fn main() {\n-                if<|> let Ok(x) = Err(92) {\n+                if$0 let Ok(x) = Err(92) {\n                     foo(x);\n                 }\n             }\n@@ -284,7 +284,7 @@ mod tests {\n             r#\"\n             fn main(n: Option<String>) {\n                 bar();\n-                if<|> let Ok(n) = n {\n+                if$0 let Ok(n) = n {\n                     foo(n);\n \n                     //comment\n@@ -315,7 +315,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 while true {\n-                    if<|> true {\n+                    if$0 true {\n                         foo();\n                         bar();\n                     }\n@@ -343,7 +343,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 while true {\n-                    if<|> let Some(n) = n {\n+                    if$0 let Some(n) = n {\n                         foo(n);\n                         bar();\n                     }\n@@ -372,7 +372,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 loop {\n-                    if<|> true {\n+                    if$0 true {\n                         foo();\n                         bar();\n                     }\n@@ -400,7 +400,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 loop {\n-                    if<|> let Some(n) = n {\n+                    if$0 let Some(n) = n {\n                         foo(n);\n                         bar();\n                     }\n@@ -428,7 +428,7 @@ mod tests {\n             convert_to_guarded_return,\n             r#\"\n             fn main() {\n-                if<|> true {\n+                if$0 true {\n                     return;\n                 }\n             }\n@@ -443,7 +443,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 loop {\n-                    if<|> true {\n+                    if$0 true {\n                         continue;\n                     }\n                 }\n@@ -458,7 +458,7 @@ mod tests {\n             convert_to_guarded_return,\n             r#\"\n             fn main() {\n-                if<|> true {\n+                if$0 true {\n                     return\n                 }\n             }\n@@ -472,7 +472,7 @@ mod tests {\n             convert_to_guarded_return,\n             r#\"\n             fn main() {\n-                if<|> true {\n+                if$0 true {\n                     foo();\n                 } else {\n                     bar()\n@@ -488,7 +488,7 @@ mod tests {\n             convert_to_guarded_return,\n             r#\"\n             fn main() {\n-                if<|> true {\n+                if$0 true {\n                     foo();\n                 }\n                 bar();\n@@ -504,7 +504,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 if false {\n-                    if<|> true {\n+                    if$0 true {\n                         foo();\n                     }\n                 }"}, {"sha": "5fe617ba48ca6d91eb14957658fa94350f03dd2d", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -25,7 +25,7 @@ use crate::{\n //     pub struct Baz;\n // }\n //\n-// use foo::*<|>;\n+// use foo::*$0;\n //\n // fn qux(bar: Bar, baz: Baz) {}\n // ```\n@@ -201,7 +201,7 @@ fn is_mod_visible_from(ctx: &AssistContext, module: Module, from: Module) -> boo\n // }\n //\n // \u2193 ---------------\n-// use foo::*<|>;\n+// use foo::*$0;\n // use baz::Baz;\n // \u2191 ---------------\n fn find_imported_defs(ctx: &AssistContext, star: SyntaxToken) -> Option<Vec<Def>> {\n@@ -303,7 +303,7 @@ mod foo {\n     pub fn f() {}\n }\n \n-use foo::*<|>;\n+use foo::*$0;\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -340,7 +340,7 @@ mod foo {\n     pub fn f() {}\n }\n \n-use foo::{*<|>, f};\n+use foo::{*$0, f};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -378,7 +378,7 @@ mod foo {\n }\n \n use foo::Bar;\n-use foo::{*<|>, f};\n+use foo::{*$0, f};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -422,7 +422,7 @@ mod foo {\n     }\n }\n \n-use foo::{bar::{*<|>, f}, baz::*};\n+use foo::{bar::{*$0, f}, baz::*};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -470,7 +470,7 @@ mod foo {\n     }\n }\n \n-use foo::{bar::{Bar, Baz, f}, baz::*<|>};\n+use foo::{bar::{Bar, Baz, f}, baz::*$0};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -529,7 +529,7 @@ mod foo {\n \n use foo::{\n     bar::{*, f},\n-    baz::{g, qux::*<|>}\n+    baz::{g, qux::*$0}\n };\n \n fn qux(bar: Bar, baz: Baz) {\n@@ -605,7 +605,7 @@ mod foo {\n \n use foo::{\n     bar::{*, f},\n-    baz::{g, qux::{h, q::*<|>}}\n+    baz::{g, qux::{h, q::*$0}}\n };\n \n fn qux(bar: Bar, baz: Baz) {\n@@ -681,7 +681,7 @@ mod foo {\n \n use foo::{\n     bar::{*, f},\n-    baz::{g, qux::{q::j, *<|>}}\n+    baz::{g, qux::{q::j, *$0}}\n };\n \n fn qux(bar: Bar, baz: Baz) {\n@@ -747,7 +747,7 @@ fn qux(bar: Bar, baz: Baz) {\n         // pub fn baz() {}\n \n         // //- /main.rs crate:main deps:foo\n-        // use foo::*<|>;\n+        // use foo::*$0;\n \n         // fn main() {\n         //     bar!();\n@@ -777,7 +777,7 @@ pub trait Tr {\n impl Tr for () {}\n \n //- /main.rs crate:main deps:foo\n-use foo::*<|>;\n+use foo::*$0;\n \n fn main() {\n     ().method();\n@@ -807,7 +807,7 @@ pub trait Tr2 {\n impl Tr2 for () {}\n \n //- /main.rs crate:main deps:foo\n-use foo::*<|>;\n+use foo::*$0;\n \n fn main() {\n     ().method();\n@@ -834,7 +834,7 @@ mod foo {\n     }\n }\n \n-use foo::bar::*<|>;\n+use foo::bar::*$0;\n \n fn baz(bar: Bar) {}\n \",\n@@ -851,7 +851,7 @@ mod foo {\n     }\n }\n \n-use foo::bar::baz::*<|>;\n+use foo::bar::baz::*$0;\n \n fn qux(baz: Baz) {}\n \",\n@@ -869,7 +869,7 @@ fn qux(baz: Baz) {}\n         pub struct Qux;\n     }\n \n-    use foo::Bar<|>;\n+    use foo::Bar$0;\n \n     fn qux(bar: Bar, baz: Baz) {}\n     \",\n@@ -885,7 +885,7 @@ mod foo {\n     pub struct Bar;\n }\n \n-use foo::{*<|>};\n+use foo::{*$0};\n \n struct Baz {\n     bar: Bar"}, {"sha": "40028fc01863f5957381e68025a0b49b0e2785b3", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -21,7 +21,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Extracts a struct from enum variant.\n //\n // ```\n-// enum A { <|>One(u32, u32) }\n+// enum A { $0One(u32, u32) }\n // ```\n // ->\n // ```\n@@ -251,7 +251,7 @@ mod tests {\n     fn test_extract_struct_several_fields_tuple() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            \"enum A { <|>One(u32, u32) }\",\n+            \"enum A { $0One(u32, u32) }\",\n             r#\"struct One(pub u32, pub u32);\n \n enum A { One(One) }\"#,\n@@ -262,7 +262,7 @@ enum A { One(One) }\"#,\n     fn test_extract_struct_several_fields_named() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            \"enum A { <|>One { foo: u32, bar: u32 } }\",\n+            \"enum A { $0One { foo: u32, bar: u32 } }\",\n             r#\"struct One{ pub foo: u32, pub bar: u32 }\n \n enum A { One(One) }\"#,\n@@ -273,7 +273,7 @@ enum A { One(One) }\"#,\n     fn test_extract_struct_one_field_named() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            \"enum A { <|>One { foo: u32 } }\",\n+            \"enum A { $0One { foo: u32 } }\",\n             r#\"struct One{ pub foo: u32 }\n \n enum A { One(One) }\"#,\n@@ -285,7 +285,7 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\"const One: () = ();\n-enum A { <|>One(u32, u32) }\"#,\n+enum A { $0One(u32, u32) }\"#,\n             r#\"const One: () = ();\n struct One(pub u32, pub u32);\n \n@@ -297,7 +297,7 @@ enum A { One(One) }\"#,\n     fn test_extract_struct_pub_visibility() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            \"pub enum A { <|>One(u32, u32) }\",\n+            \"pub enum A { $0One(u32, u32) }\",\n             r#\"pub struct One(pub u32, pub u32);\n \n pub enum A { One(One) }\"#,\n@@ -319,7 +319,7 @@ pub enum A { One(One) }\"#,\n         }\n \n         pub enum MyEnum {\n-            <|>MyField(u8, u8),\n+            $0MyField(u8, u8),\n         }\n     }\n }\n@@ -361,7 +361,7 @@ fn another_fn() {\n             extract_struct_from_enum_variant,\n             r#\"\n enum E {\n-    <|>V { i: i32, j: i32 }\n+    $0V { i: i32, j: i32 }\n }\n \n fn f() {\n@@ -389,7 +389,7 @@ fn f() {\n             r#\"\n //- /main.rs\n enum E {\n-    <|>V(i32, i32)\n+    $0V(i32, i32)\n }\n mod foo;\n \n@@ -424,7 +424,7 @@ fn f() {\n             r#\"\n //- /main.rs\n enum E {\n-    <|>V { i: i32, j: i32 }\n+    $0V { i: i32, j: i32 }\n }\n mod foo;\n \n@@ -457,7 +457,7 @@ fn f() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\"\n-enum A { <|>One { a: u32, b: u32 } }\n+enum A { $0One { a: u32, b: u32 } }\n \n struct B(A);\n \n@@ -487,29 +487,29 @@ fn foo() {\n \n     #[test]\n     fn test_extract_enum_not_applicable_for_element_with_no_fields() {\n-        check_not_applicable(\"enum A { <|>One }\");\n+        check_not_applicable(\"enum A { $0One }\");\n     }\n \n     #[test]\n     fn test_extract_enum_not_applicable_if_struct_exists() {\n         check_not_applicable(\n             r#\"struct One;\n-        enum A { <|>One(u8, u32) }\"#,\n+        enum A { $0One(u8, u32) }\"#,\n         );\n     }\n \n     #[test]\n     fn test_extract_not_applicable_one_field() {\n-        check_not_applicable(r\"enum A { <|>One(u32) }\");\n+        check_not_applicable(r\"enum A { $0One(u32) }\");\n     }\n \n     #[test]\n     fn test_extract_not_applicable_no_field_tuple() {\n-        check_not_applicable(r\"enum A { <|>None() }\");\n+        check_not_applicable(r\"enum A { $0None() }\");\n     }\n \n     #[test]\n     fn test_extract_not_applicable_no_field_named() {\n-        check_not_applicable(r\"enum A { <|>None {} }\");\n+        check_not_applicable(r\"enum A { $0None {} }\");\n     }\n }"}, {"sha": "98f3dc6ca06202181f246be70ad41ec481278a78", "filename": "crates/assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -16,7 +16,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // fn main() {\n-//     <|>(1 + 2)<|> * 4;\n+//     $0(1 + 2)$0 * 4;\n // }\n // ```\n // ->\n@@ -187,7 +187,7 @@ mod tests {\n             extract_variable,\n             r#\"\n fn foo() {\n-    foo(<|>1 + 1<|>);\n+    foo($01 + 1$0);\n }\"#,\n             r#\"\n fn foo() {\n@@ -200,7 +200,7 @@ fn foo() {\n     #[test]\n     fn extract_var_in_comment_is_not_applicable() {\n         mark::check!(extract_var_in_comment_is_not_applicable);\n-        check_assist_not_applicable(extract_variable, \"fn main() { 1 + /* <|>comment<|> */ 1; }\");\n+        check_assist_not_applicable(extract_variable, \"fn main() { 1 + /* $0comment$0 */ 1; }\");\n     }\n \n     #[test]\n@@ -210,7 +210,7 @@ fn foo() {\n             extract_variable,\n             r#\"\n fn foo() {\n-    <|>1 + 1<|>;\n+    $01 + 1$0;\n }\"#,\n             r#\"\n fn foo() {\n@@ -221,7 +221,7 @@ fn foo() {\n             extract_variable,\n             \"\n fn foo() {\n-    <|>{ let x = 0; x }<|>\n+    $0{ let x = 0; x }$0\n     something_else();\n }\",\n             \"\n@@ -238,7 +238,7 @@ fn foo() {\n             extract_variable,\n             \"\n fn foo() {\n-    <|>1<|> + 1;\n+    $01$0 + 1;\n }\",\n             \"\n fn foo() {\n@@ -255,7 +255,7 @@ fn foo() {\n             extract_variable,\n             r#\"\n fn foo() {\n-    bar(<|>1 + 1<|>)\n+    bar($01 + 1$0)\n }\n \"#,\n             r#\"\n@@ -269,7 +269,7 @@ fn foo() {\n             extract_variable,\n             r#\"\n fn foo() {\n-    <|>bar(1 + 1)<|>\n+    $0bar(1 + 1)$0\n }\n \"#,\n             r#\"\n@@ -289,7 +289,7 @@ fn foo() {\n fn main() {\n     let x = true;\n     let tuple = match x {\n-        true => (<|>2 + 2<|>, true)\n+        true => ($02 + 2$0, true)\n         _ => (0, false)\n     };\n }\n@@ -316,7 +316,7 @@ fn main() {\n     let tuple = match x {\n         true => {\n             let y = 1;\n-            (<|>2 + y<|>, true)\n+            ($02 + y$0, true)\n         }\n         _ => (0, false)\n     };\n@@ -344,7 +344,7 @@ fn main() {\n             extract_variable,\n             \"\n fn main() {\n-    let lambda = |x: u32| <|>x * 2<|>;\n+    let lambda = |x: u32| $0x * 2$0;\n }\n \",\n             \"\n@@ -361,7 +361,7 @@ fn main() {\n             extract_variable,\n             \"\n fn main() {\n-    let lambda = |x: u32| { <|>x * 2<|> };\n+    let lambda = |x: u32| { $0x * 2$0 };\n }\n \",\n             \"\n@@ -378,7 +378,7 @@ fn main() {\n             extract_variable,\n             \"\n fn main() {\n-    let o = <|>Some(true)<|>;\n+    let o = $0Some(true)$0;\n }\n \",\n             \"\n@@ -396,7 +396,7 @@ fn main() {\n             extract_variable,\n             \"\n fn main() {\n-    let v = <|>bar.foo()<|>;\n+    let v = $0bar.foo()$0;\n }\n \",\n             \"\n@@ -414,7 +414,7 @@ fn main() {\n             extract_variable,\n             \"\n fn foo() -> u32 {\n-    <|>return 2 + 2<|>;\n+    $0return 2 + 2$0;\n }\n \",\n             \"\n@@ -434,7 +434,7 @@ fn foo() -> u32 {\n fn foo() -> u32 {\n \n \n-    <|>return 2 + 2<|>;\n+    $0return 2 + 2$0;\n }\n \",\n             \"\n@@ -452,7 +452,7 @@ fn foo() -> u32 {\n             \"\n fn foo() -> u32 {\n \n-        <|>return 2 + 2<|>;\n+        $0return 2 + 2$0;\n }\n \",\n             \"\n@@ -473,7 +473,7 @@ fn foo() -> u32 {\n     // bar\n \n \n-    <|>return 2 + 2<|>;\n+    $0return 2 + 2$0;\n }\n \",\n             \"\n@@ -497,7 +497,7 @@ fn foo() -> u32 {\n             \"\n fn main() {\n     let result = loop {\n-        <|>break 2 + 2<|>;\n+        $0break 2 + 2$0;\n     };\n }\n \",\n@@ -518,7 +518,7 @@ fn main() {\n             extract_variable,\n             \"\n fn main() {\n-    let v = <|>0f32 as u32<|>;\n+    let v = $00f32 as u32$0;\n }\n \",\n             \"\n@@ -540,7 +540,7 @@ struct S {\n }\n \n fn main() {\n-    S { foo: <|>1 + 1<|> }\n+    S { foo: $01 + 1$0 }\n }\n \"#,\n             r#\"\n@@ -558,26 +558,26 @@ fn main() {\n \n     #[test]\n     fn test_extract_var_for_return_not_applicable() {\n-        check_assist_not_applicable(extract_variable, \"fn foo() { <|>return<|>; } \");\n+        check_assist_not_applicable(extract_variable, \"fn foo() { $0return$0; } \");\n     }\n \n     #[test]\n     fn test_extract_var_for_break_not_applicable() {\n-        check_assist_not_applicable(extract_variable, \"fn main() { loop { <|>break<|>; }; }\");\n+        check_assist_not_applicable(extract_variable, \"fn main() { loop { $0break$0; }; }\");\n     }\n \n     // FIXME: This is not quite correct, but good enough(tm) for the sorting heuristic\n     #[test]\n     fn extract_var_target() {\n-        check_assist_target(extract_variable, \"fn foo() -> u32 { <|>return 2 + 2<|>; }\", \"2 + 2\");\n+        check_assist_target(extract_variable, \"fn foo() -> u32 { $0return 2 + 2$0; }\", \"2 + 2\");\n \n         check_assist_target(\n             extract_variable,\n             \"\n fn main() {\n     let x = true;\n     let tuple = match x {\n-        true => (<|>2 + 2<|>, true)\n+        true => ($02 + 2$0, true)\n         _ => (0, false)\n     };\n }"}, {"sha": "da47187e42dd4164da0076931c1083c1f86a868a", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -21,7 +21,7 @@ use crate::{\n //\n // fn handle(action: Action) {\n //     match action {\n-//         <|>\n+//         $0\n //     }\n // }\n // ```\n@@ -231,7 +231,7 @@ mod tests {\n                 Cs(i32, Option<i32>),\n             }\n             fn main() {\n-                match A::As<|> {\n+                match A::As$0 {\n                     A::As,\n                     A::Bs{x,y:Some(_)} => {}\n                     A::Cs(_, Some(_)) => {}\n@@ -249,7 +249,7 @@ mod tests {\n             fill_match_arms,\n             r#\"\n             fn main() {\n-                match (0, false)<|> {\n+                match (0, false)$0 {\n                 }\n             }\n             \"#,\n@@ -267,7 +267,7 @@ mod tests {\n                 Cs(i32, Option<i32>),\n             }\n             fn main() {\n-                match A::As<|> {\n+                match A::As$0 {\n                     A::Bs { x, y: Some(_) } => {}\n                     A::Cs(_, Some(_)) => {}\n                 }\n@@ -297,7 +297,7 @@ mod tests {\n             r#\"\n enum A { As, Bs, Cs(Option<i32>) }\n fn main() {\n-    match A::As<|> {\n+    match A::As$0 {\n         A::Cs(_) | A::Bs => {}\n     }\n }\n@@ -322,7 +322,7 @@ fn main() {\n enum A { As, Bs, Cs, Ds(String), Es(B) }\n enum B { Xs, Ys }\n fn main() {\n-    match A::As<|> {\n+    match A::As$0 {\n         A::Bs if 0 < 1 => {}\n         A::Ds(_value) => { let x = 1; }\n         A::Es(B::Xs) => (),\n@@ -352,7 +352,7 @@ fn main() {\n             r#\"\n enum A { As, Bs, Cs(Option<i32>) }\n fn main() {\n-    match A::As<|> {\n+    match A::As$0 {\n         A::As(_) => {}\n         a @ A::Bs(_) => {}\n     }\n@@ -380,7 +380,7 @@ enum A { As, Bs, Cs(String), Ds(String, String), Es { x: usize, y: usize } }\n \n fn main() {\n     let a = A::As;\n-    match a<|> {}\n+    match a$0 {}\n }\n \"#,\n             r#\"\n@@ -411,7 +411,7 @@ fn main() {\n             fn main() {\n                 let a = A::One;\n                 let b = B::One;\n-                match (a<|>, b) {}\n+                match (a$0, b) {}\n             }\n             \"#,\n             r#\"\n@@ -443,7 +443,7 @@ fn main() {\n             fn main() {\n                 let a = A::One;\n                 let b = B::One;\n-                match (&a<|>, &b) {}\n+                match (&a$0, &b) {}\n             }\n             \"#,\n             r#\"\n@@ -475,7 +475,7 @@ fn main() {\n             fn main() {\n                 let a = A::One;\n                 let b = B::One;\n-                match (a<|>, b) {\n+                match (a$0, b) {\n                     (A::Two, B::One) => {}\n                 }\n             }\n@@ -494,7 +494,7 @@ fn main() {\n             fn main() {\n                 let a = A::One;\n                 let b = B::One;\n-                match (a<|>, b) {\n+                match (a$0, b) {\n                     (A::Two, B::One) => {}\n                     (A::One, B::One) => {}\n                     (A::One, B::Two) => {}\n@@ -517,7 +517,7 @@ fn main() {\n \n             fn main() {\n                 let a = A::One;\n-                match (a<|>, ) {\n+                match (a$0, ) {\n                 }\n             }\n             \"#,\n@@ -532,7 +532,7 @@ fn main() {\n             enum A { As }\n \n             fn foo(a: &A) {\n-                match a<|> {\n+                match a$0 {\n                 }\n             }\n             \"#,\n@@ -555,7 +555,7 @@ fn main() {\n             }\n \n             fn foo(a: &mut A) {\n-                match a<|> {\n+                match a$0 {\n                 }\n             }\n             \"#,\n@@ -581,7 +581,7 @@ fn main() {\n             enum E { X, Y }\n \n             fn main() {\n-                match E::X<|> {}\n+                match E::X$0 {}\n             }\n             \"#,\n             \"match E::X {}\",\n@@ -597,7 +597,7 @@ fn main() {\n \n             fn main() {\n                 match E::X {\n-                    <|>_ => {}\n+                    $0_ => {}\n                 }\n             }\n             \"#,\n@@ -624,7 +624,7 @@ fn main() {\n \n             fn main() {\n                 match X {\n-                    <|>\n+                    $0\n                 }\n             }\n             \"#,\n@@ -650,7 +650,7 @@ fn main() {\n             enum A { One, Two }\n             fn foo(a: A) {\n                 match a {\n-                    // foo bar baz<|>\n+                    // foo bar baz$0\n                     A::One => {}\n                     // This is where the rest should be\n                 }\n@@ -678,7 +678,7 @@ fn main() {\n             enum A { One, Two }\n             fn foo(a: A) {\n                 match a {\n-                    // foo bar baz<|>\n+                    // foo bar baz$0\n                 }\n             }\n             \"#,\n@@ -702,7 +702,7 @@ fn main() {\n             r#\"\n             enum A { One, Two, }\n             fn foo(a: A) {\n-                match a<|> {\n+                match a$0 {\n                     _ => (),\n                 }\n             }\n@@ -724,7 +724,7 @@ fn main() {\n         mark::check!(option_order);\n         let before = r#\"\n fn foo(opt: Option<i32>) {\n-    match opt<|> {\n+    match opt$0 {\n     }\n }\n \"#;"}, {"sha": "6c7824e551018c91d3bca64f830e5253babde39b", "filename": "crates/assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -18,7 +18,7 @@ use crate::{utils::vis_offset, AssistContext, AssistId, AssistKind, Assists};\n //     fn frobnicate() {}\n // }\n // fn main() {\n-//     m::frobnicate<|>() {}\n+//     m::frobnicate$0() {}\n // }\n // ```\n // ->\n@@ -218,14 +218,14 @@ mod tests {\n         check_assist(\n             fix_visibility,\n             r\"mod foo { fn foo() {} }\n-              fn main() { foo::foo<|>() } \",\n+              fn main() { foo::foo$0() } \",\n             r\"mod foo { $0pub(crate) fn foo() {} }\n               fn main() { foo::foo() } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub fn foo() {} }\n-              fn main() { foo::foo<|>() } \",\n+              fn main() { foo::foo$0() } \",\n         )\n     }\n \n@@ -234,38 +234,38 @@ mod tests {\n         check_assist(\n             fix_visibility,\n             r\"mod foo { struct Foo; }\n-              fn main() { foo::Foo<|> } \",\n+              fn main() { foo::Foo$0 } \",\n             r\"mod foo { $0pub(crate) struct Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub struct Foo; }\n-              fn main() { foo::Foo<|> } \",\n+              fn main() { foo::Foo$0 } \",\n         );\n         check_assist(\n             fix_visibility,\n             r\"mod foo { enum Foo; }\n-              fn main() { foo::Foo<|> } \",\n+              fn main() { foo::Foo$0 } \",\n             r\"mod foo { $0pub(crate) enum Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub enum Foo; }\n-              fn main() { foo::Foo<|> } \",\n+              fn main() { foo::Foo$0 } \",\n         );\n         check_assist(\n             fix_visibility,\n             r\"mod foo { union Foo; }\n-              fn main() { foo::Foo<|> } \",\n+              fn main() { foo::Foo$0 } \",\n             r\"mod foo { $0pub(crate) union Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub union Foo; }\n-              fn main() { foo::Foo<|> } \",\n+              fn main() { foo::Foo$0 } \",\n         );\n     }\n \n@@ -276,7 +276,7 @@ mod tests {\n             r\"\n //- /main.rs\n mod foo;\n-fn main() { foo::Foo<|> }\n+fn main() { foo::Foo$0 }\n \n //- /foo.rs\n struct Foo;\n@@ -291,7 +291,7 @@ struct Foo;\n         check_assist(\n             fix_visibility,\n             r\"mod foo { pub struct Foo { bar: (), } }\n-              fn main() { foo::Foo { <|>bar: () }; } \",\n+              fn main() { foo::Foo { $0bar: () }; } \",\n             r\"mod foo { pub struct Foo { $0pub(crate) bar: (), } }\n               fn main() { foo::Foo { bar: () }; } \",\n         );\n@@ -300,7 +300,7 @@ struct Foo;\n             r\"\n //- /lib.rs\n mod foo;\n-fn main() { foo::Foo { <|>bar: () }; }\n+fn main() { foo::Foo { $0bar: () }; }\n //- /foo.rs\n pub struct Foo { bar: () }\n \",\n@@ -310,14 +310,14 @@ pub struct Foo { bar: () }\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub struct Foo { pub bar: (), } }\n-              fn main() { foo::Foo { <|>bar: () }; } \",\n+              fn main() { foo::Foo { $0bar: () }; } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"\n //- /lib.rs\n mod foo;\n-fn main() { foo::Foo { <|>bar: () }; }\n+fn main() { foo::Foo { $0bar: () }; }\n //- /foo.rs\n pub struct Foo { pub bar: () }\n \",\n@@ -331,29 +331,29 @@ pub struct Foo { pub bar: () }\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub enum Foo { Bar { bar: () } } }\n-              fn main() { foo::Foo::Bar { <|>bar: () }; } \",\n+              fn main() { foo::Foo::Bar { $0bar: () }; } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"\n //- /lib.rs\n mod foo;\n-fn main() { foo::Foo::Bar { <|>bar: () }; }\n+fn main() { foo::Foo::Bar { $0bar: () }; }\n //- /foo.rs\n pub enum Foo { Bar { bar: () } }\n \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub struct Foo { pub bar: (), } }\n-              fn main() { foo::Foo { <|>bar: () }; } \",\n+              fn main() { foo::Foo { $0bar: () }; } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"\n //- /lib.rs\n mod foo;\n-fn main() { foo::Foo { <|>bar: () }; }\n+fn main() { foo::Foo { $0bar: () }; }\n //- /foo.rs\n pub struct Foo { pub bar: () }\n \",\n@@ -367,7 +367,7 @@ pub struct Foo { pub bar: () }\n         check_assist(\n             fix_visibility,\n             r\"mod foo { pub union Foo { bar: (), } }\n-              fn main() { foo::Foo { <|>bar: () }; } \",\n+              fn main() { foo::Foo { $0bar: () }; } \",\n             r\"mod foo { pub union Foo { $0pub(crate) bar: (), } }\n               fn main() { foo::Foo { bar: () }; } \",\n         );\n@@ -376,7 +376,7 @@ pub struct Foo { pub bar: () }\n             r\"\n //- /lib.rs\n mod foo;\n-fn main() { foo::Foo { <|>bar: () }; }\n+fn main() { foo::Foo { $0bar: () }; }\n //- /foo.rs\n pub union Foo { bar: () }\n \",\n@@ -386,14 +386,14 @@ pub union Foo { bar: () }\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub union Foo { pub bar: (), } }\n-              fn main() { foo::Foo { <|>bar: () }; } \",\n+              fn main() { foo::Foo { $0bar: () }; } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"\n //- /lib.rs\n mod foo;\n-fn main() { foo::Foo { <|>bar: () }; }\n+fn main() { foo::Foo { $0bar: () }; }\n //- /foo.rs\n pub union Foo { pub bar: () }\n \",\n@@ -405,14 +405,14 @@ pub union Foo { pub bar: () }\n         check_assist(\n             fix_visibility,\n             r\"mod foo { const FOO: () = (); }\n-              fn main() { foo::FOO<|> } \",\n+              fn main() { foo::FOO$0 } \",\n             r\"mod foo { $0pub(crate) const FOO: () = (); }\n               fn main() { foo::FOO } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub const FOO: () = (); }\n-              fn main() { foo::FOO<|> } \",\n+              fn main() { foo::FOO$0 } \",\n         );\n     }\n \n@@ -421,14 +421,14 @@ pub union Foo { pub bar: () }\n         check_assist(\n             fix_visibility,\n             r\"mod foo { static FOO: () = (); }\n-              fn main() { foo::FOO<|> } \",\n+              fn main() { foo::FOO$0 } \",\n             r\"mod foo { $0pub(crate) static FOO: () = (); }\n               fn main() { foo::FOO } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub static FOO: () = (); }\n-              fn main() { foo::FOO<|> } \",\n+              fn main() { foo::FOO$0 } \",\n         );\n     }\n \n@@ -437,14 +437,14 @@ pub union Foo { pub bar: () }\n         check_assist(\n             fix_visibility,\n             r\"mod foo { trait Foo { fn foo(&self) {} } }\n-              fn main() { let x: &dyn foo::<|>Foo; } \",\n+              fn main() { let x: &dyn foo::$0Foo; } \",\n             r\"mod foo { $0pub(crate) trait Foo { fn foo(&self) {} } }\n               fn main() { let x: &dyn foo::Foo; } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub trait Foo { fn foo(&self) {} } }\n-              fn main() { let x: &dyn foo::Foo<|>; } \",\n+              fn main() { let x: &dyn foo::Foo$0; } \",\n         );\n     }\n \n@@ -453,14 +453,14 @@ pub union Foo { pub bar: () }\n         check_assist(\n             fix_visibility,\n             r\"mod foo { type Foo = (); }\n-              fn main() { let x: foo::Foo<|>; } \",\n+              fn main() { let x: foo::Foo$0; } \",\n             r\"mod foo { $0pub(crate) type Foo = (); }\n               fn main() { let x: foo::Foo; } \",\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub type Foo = (); }\n-              fn main() { let x: foo::Foo<|>; } \",\n+              fn main() { let x: foo::Foo$0; } \",\n         );\n     }\n \n@@ -469,7 +469,7 @@ pub union Foo { pub bar: () }\n         check_assist(\n             fix_visibility,\n             r\"mod foo { mod bar { fn bar() {} } }\n-              fn main() { foo::bar<|>::bar(); } \",\n+              fn main() { foo::bar$0::bar(); } \",\n             r\"mod foo { $0pub(crate) mod bar { fn bar() {} } }\n               fn main() { foo::bar::bar(); } \",\n         );\n@@ -479,7 +479,7 @@ pub union Foo { pub bar: () }\n             r\"\n //- /main.rs\n mod foo;\n-fn main() { foo::bar<|>::baz(); }\n+fn main() { foo::bar$0::baz(); }\n \n //- /foo.rs\n mod bar {\n@@ -495,7 +495,7 @@ mod bar {\n         check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub mod bar { pub fn bar() {} } }\n-              fn main() { foo::bar<|>::bar(); } \",\n+              fn main() { foo::bar$0::bar(); } \",\n         );\n     }\n \n@@ -506,7 +506,7 @@ mod bar {\n             r\"\n //- /main.rs\n mod foo;\n-fn main() { foo::bar<|>::baz(); }\n+fn main() { foo::bar$0::baz(); }\n \n //- /foo.rs\n mod bar;\n@@ -525,7 +525,7 @@ pub fn baz() {}\n             r\"\n //- /main.rs\n mod foo;\n-fn main() { foo::bar<|>>::baz(); }\n+fn main() { foo::bar$0>::baz(); }\n \n //- /foo.rs\n mod bar {\n@@ -545,7 +545,7 @@ mod bar {\n             fix_visibility,\n             r\"\n //- /main.rs crate:a deps:foo\n-foo::Bar<|>\n+foo::Bar$0\n //- /lib.rs crate:foo\n struct Bar;\n \",\n@@ -560,7 +560,7 @@ struct Bar;\n             fix_visibility,\n             r\"\n //- /main.rs crate:a deps:foo\n-foo::Bar<|>\n+foo::Bar$0\n //- /lib.rs crate:foo\n pub(crate) struct Bar;\n \",\n@@ -572,7 +572,7 @@ pub(crate) struct Bar;\n             r\"\n //- /main.rs crate:a deps:foo\n fn main() {\n-    foo::Foo { <|>bar: () };\n+    foo::Foo { $0bar: () };\n }\n //- /lib.rs crate:foo\n pub struct Foo { pub(crate) bar: () }\n@@ -593,7 +593,7 @@ pub struct Foo { pub(crate) bar: () }\n                 use bar::Baz;\n                 mod bar { pub(super) struct Baz; }\n             }\n-            foo::Baz<|>\n+            foo::Baz$0\n             \",\n             r\"\n             mod foo {"}, {"sha": "209e5d43c246f7b5e80bb669fba140984716e655", "filename": "crates/assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -8,7 +8,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // fn main() {\n-//     let _ = 90 +<|> 2;\n+//     let _ = 90 +$0 2;\n // }\n // ```\n // ->\n@@ -77,42 +77,34 @@ mod tests {\n \n     #[test]\n     fn flip_binexpr_target_is_the_op() {\n-        check_assist_target(flip_binexpr, \"fn f() { let res = 1 ==<|> 2; }\", \"==\")\n+        check_assist_target(flip_binexpr, \"fn f() { let res = 1 ==$0 2; }\", \"==\")\n     }\n \n     #[test]\n     fn flip_binexpr_not_applicable_for_assignment() {\n-        check_assist_not_applicable(flip_binexpr, \"fn f() { let mut _x = 1; _x +=<|> 2 }\")\n+        check_assist_not_applicable(flip_binexpr, \"fn f() { let mut _x = 1; _x +=$0 2 }\")\n     }\n \n     #[test]\n     fn flip_binexpr_works_for_eq() {\n-        check_assist(\n-            flip_binexpr,\n-            \"fn f() { let res = 1 ==<|> 2; }\",\n-            \"fn f() { let res = 2 == 1; }\",\n-        )\n+        check_assist(flip_binexpr, \"fn f() { let res = 1 ==$0 2; }\", \"fn f() { let res = 2 == 1; }\")\n     }\n \n     #[test]\n     fn flip_binexpr_works_for_gt() {\n-        check_assist(flip_binexpr, \"fn f() { let res = 1 ><|> 2; }\", \"fn f() { let res = 2 < 1; }\")\n+        check_assist(flip_binexpr, \"fn f() { let res = 1 >$0 2; }\", \"fn f() { let res = 2 < 1; }\")\n     }\n \n     #[test]\n     fn flip_binexpr_works_for_lteq() {\n-        check_assist(\n-            flip_binexpr,\n-            \"fn f() { let res = 1 <=<|> 2; }\",\n-            \"fn f() { let res = 2 >= 1; }\",\n-        )\n+        check_assist(flip_binexpr, \"fn f() { let res = 1 <=$0 2; }\", \"fn f() { let res = 2 >= 1; }\")\n     }\n \n     #[test]\n     fn flip_binexpr_works_for_complex_expr() {\n         check_assist(\n             flip_binexpr,\n-            \"fn f() { let res = (1 + 1) ==<|> (2 + 2); }\",\n+            \"fn f() { let res = (1 + 1) ==$0 (2 + 2); }\",\n             \"fn f() { let res = (2 + 2) == (1 + 1); }\",\n         )\n     }\n@@ -125,7 +117,7 @@ mod tests {\n             fn dyn_eq(&self, other: &dyn Diagnostic) -> bool {\n                 match other.downcast_ref::<Self>() {\n                     None => false,\n-                    Some(it) => it ==<|> self,\n+                    Some(it) => it ==$0 self,\n                 }\n             }\n             \"#,"}, {"sha": "a48b0e450a7b7834b7e04e80d4319ced0a369641", "filename": "crates/assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -8,7 +8,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // fn main() {\n-//     ((1, 2),<|> (3, 4));\n+//     ((1, 2),$0 (3, 4));\n // }\n // ```\n // ->\n@@ -49,14 +49,14 @@ mod tests {\n     fn flip_comma_works_for_function_parameters() {\n         check_assist(\n             flip_comma,\n-            \"fn foo(x: i32,<|> y: Result<(), ()>) {}\",\n+            \"fn foo(x: i32,$0 y: Result<(), ()>) {}\",\n             \"fn foo(y: Result<(), ()>, x: i32) {}\",\n         )\n     }\n \n     #[test]\n     fn flip_comma_target() {\n-        check_assist_target(flip_comma, \"fn foo(x: i32,<|> y: Result<(), ()>) {}\", \",\")\n+        check_assist_target(flip_comma, \"fn foo(x: i32,$0 y: Result<(), ()>) {}\", \",\")\n     }\n \n     #[test]\n@@ -68,15 +68,15 @@ mod tests {\n         check_assist_target(\n             flip_comma,\n             \"pub enum Test { \\\n-             A,<|> \\\n+             A,$0 \\\n              }\",\n             \",\",\n         );\n \n         check_assist_target(\n             flip_comma,\n             \"pub struct Test { \\\n-             foo: usize,<|> \\\n+             foo: usize,$0 \\\n              }\",\n             \",\",\n         );"}, {"sha": "d419d263e274f59e80b61729a7e5f31cc7b412be", "filename": "crates/assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -11,7 +11,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Flips two trait bounds.\n //\n // ```\n-// fn foo<T: Clone +<|> Copy>() { }\n+// fn foo<T: Clone +$0 Copy>() { }\n // ```\n // ->\n // ```\n@@ -52,19 +52,19 @@ mod tests {\n \n     #[test]\n     fn flip_trait_bound_assist_available() {\n-        check_assist_target(flip_trait_bound, \"struct S<T> where T: A <|>+ B + C { }\", \"+\")\n+        check_assist_target(flip_trait_bound, \"struct S<T> where T: A $0+ B + C { }\", \"+\")\n     }\n \n     #[test]\n     fn flip_trait_bound_not_applicable_for_single_trait_bound() {\n-        check_assist_not_applicable(flip_trait_bound, \"struct S<T> where T: <|>A { }\")\n+        check_assist_not_applicable(flip_trait_bound, \"struct S<T> where T: $0A { }\")\n     }\n \n     #[test]\n     fn flip_trait_bound_works_for_struct() {\n         check_assist(\n             flip_trait_bound,\n-            \"struct S<T> where T: A <|>+ B { }\",\n+            \"struct S<T> where T: A $0+ B { }\",\n             \"struct S<T> where T: B + A { }\",\n         )\n     }\n@@ -73,21 +73,21 @@ mod tests {\n     fn flip_trait_bound_works_for_trait_impl() {\n         check_assist(\n             flip_trait_bound,\n-            \"impl X for S<T> where T: A +<|> B { }\",\n+            \"impl X for S<T> where T: A +$0 B { }\",\n             \"impl X for S<T> where T: B + A { }\",\n         )\n     }\n \n     #[test]\n     fn flip_trait_bound_works_for_fn() {\n-        check_assist(flip_trait_bound, \"fn f<T: A <|>+ B>(t: T) { }\", \"fn f<T: B + A>(t: T) { }\")\n+        check_assist(flip_trait_bound, \"fn f<T: A $0+ B>(t: T) { }\", \"fn f<T: B + A>(t: T) { }\")\n     }\n \n     #[test]\n     fn flip_trait_bound_works_for_fn_where_clause() {\n         check_assist(\n             flip_trait_bound,\n-            \"fn f<T>(t: T) where T: A +<|> B { }\",\n+            \"fn f<T>(t: T) where T: A +$0 B { }\",\n             \"fn f<T>(t: T) where T: B + A { }\",\n         )\n     }\n@@ -96,7 +96,7 @@ mod tests {\n     fn flip_trait_bound_works_for_lifetime() {\n         check_assist(\n             flip_trait_bound,\n-            \"fn f<T>(t: T) where T: A <|>+ 'static { }\",\n+            \"fn f<T>(t: T) where T: A $0+ 'static { }\",\n             \"fn f<T>(t: T) where T: 'static + A { }\",\n         )\n     }\n@@ -105,7 +105,7 @@ mod tests {\n     fn flip_trait_bound_works_for_complex_bounds() {\n         check_assist(\n             flip_trait_bound,\n-            \"struct S<T> where T: A<T> <|>+ b_mod::B<T> + C<T> { }\",\n+            \"struct S<T> where T: A<T> $0+ b_mod::B<T> + C<T> { }\",\n             \"struct S<T> where T: b_mod::B<T> + A<T> + C<T> { }\",\n         )\n     }\n@@ -114,7 +114,7 @@ mod tests {\n     fn flip_trait_bound_works_for_long_bounds() {\n         check_assist(\n             flip_trait_bound,\n-            \"struct S<T> where T: A + B + C + D + E + F +<|> G + H + I + J { }\",\n+            \"struct S<T> where T: A + B + C + D + E + F +$0 G + H + I + J { }\",\n             \"struct S<T> where T: A + B + C + D + E + G + F + H + I + J { }\",\n         )\n     }"}, {"sha": "6a2ab9596fe4dcb8305c0532ffa485001f35f522", "filename": "crates/assists/src/handlers/generate_default_from_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -12,7 +12,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n // enum Version {\n //  Undefined,\n-//  Minor<|>,\n+//  Minor$0,\n //  Major,\n // }\n // ```\n@@ -108,7 +108,7 @@ mod tests {\n             r#\"\n enum Variant {\n     Undefined,\n-    Minor<|>,\n+    Minor$0,\n     Major,\n }\"#,\n             r#\"enum Variant {\n@@ -132,7 +132,7 @@ impl Default for Variant {\n             r#\"\n enum Variant {\n     Undefined,\n-    Minor<|>,\n+    Minor$0,\n     Major,\n }\n \n@@ -151,7 +151,7 @@ impl Default for Variant {\n             r#\"\n enum Variant {\n     Undefined,\n-    Minor(u32)<|>,\n+    Minor(u32)$0,\n     Major,\n }\"#,\n         );\n@@ -161,7 +161,7 @@ enum Variant {\n     fn test_generate_default_from_variant_with_one_variant() {\n         check_assist(\n             generate_default_from_enum_variant,\n-            r#\"enum Variant { Undefi<|>ned }\"#,\n+            r#\"enum Variant { Undefi$0ned }\"#,\n             r#\"\n enum Variant { Undefined }\n "}, {"sha": "f876b76841532a91dd87ec93f49606569dd2e7b9", "filename": "crates/assists/src/handlers/generate_derive.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -13,7 +13,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n // struct Point {\n //     x: u32,\n-//     y: u32,<|>\n+//     y: u32,$0\n // }\n // ```\n // ->\n@@ -76,12 +76,12 @@ mod tests {\n     fn add_derive_new() {\n         check_assist(\n             generate_derive,\n-            \"struct Foo { a: i32, <|>}\",\n+            \"struct Foo { a: i32, $0}\",\n             \"#[derive($0)]\\nstruct Foo { a: i32, }\",\n         );\n         check_assist(\n             generate_derive,\n-            \"struct Foo { <|> a: i32, }\",\n+            \"struct Foo { $0 a: i32, }\",\n             \"#[derive($0)]\\nstruct Foo {  a: i32, }\",\n         );\n     }\n@@ -90,7 +90,7 @@ mod tests {\n     fn add_derive_existing() {\n         check_assist(\n             generate_derive,\n-            \"#[derive(Clone)]\\nstruct Foo { a: i32<|>, }\",\n+            \"#[derive(Clone)]\\nstruct Foo { a: i32$0, }\",\n             \"#[derive(Clone$0)]\\nstruct Foo { a: i32, }\",\n         );\n     }\n@@ -102,7 +102,7 @@ mod tests {\n             \"\n /// `Foo` is a pretty important struct.\n /// It does stuff.\n-struct Foo { a: i32<|>, }\n+struct Foo { a: i32$0, }\n             \",\n             \"\n /// `Foo` is a pretty important struct.\n@@ -121,7 +121,7 @@ struct Foo { a: i32, }\n struct SomeThingIrrelevant;\n /// `Foo` is a pretty important struct.\n /// It does stuff.\n-struct Foo { a: i32<|>, }\n+struct Foo { a: i32$0, }\n struct EvenMoreIrrelevant;\n             \",\n             \"/// `Foo` is a pretty important struct."}, {"sha": "d9af6ab1178f37cd503bcdd984b356de3e415367", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -10,7 +10,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Adds a From impl for an enum variant with one tuple field.\n //\n // ```\n-// enum A { <|>One(u32) }\n+// enum A { $0One(u32) }\n // ```\n // ->\n // ```\n@@ -101,7 +101,7 @@ mod tests {\n     fn test_generate_from_impl_for_enum() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            \"enum A { <|>One(u32) }\",\n+            \"enum A { $0One(u32) }\",\n             r#\"enum A { One(u32) }\n \n impl From<u32> for A {\n@@ -116,7 +116,7 @@ impl From<u32> for A {\n     fn test_generate_from_impl_for_enum_complicated_path() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            r#\"enum A { <|>One(foo::bar::baz::Boo) }\"#,\n+            r#\"enum A { $0One(foo::bar::baz::Boo) }\"#,\n             r#\"enum A { One(foo::bar::baz::Boo) }\n \n impl From<foo::bar::baz::Boo> for A {\n@@ -135,25 +135,25 @@ impl From<foo::bar::baz::Boo> for A {\n \n     #[test]\n     fn test_add_from_impl_no_element() {\n-        check_not_applicable(\"enum A { <|>One }\");\n+        check_not_applicable(\"enum A { $0One }\");\n     }\n \n     #[test]\n     fn test_add_from_impl_more_than_one_element_in_tuple() {\n-        check_not_applicable(\"enum A { <|>One(u32, String) }\");\n+        check_not_applicable(\"enum A { $0One(u32, String) }\");\n     }\n \n     #[test]\n     fn test_add_from_impl_struct_variant() {\n-        check_not_applicable(\"enum A { <|>One { x: u32 } }\");\n+        check_not_applicable(\"enum A { $0One { x: u32 } }\");\n     }\n \n     #[test]\n     fn test_add_from_impl_already_exists() {\n         mark::check!(test_add_from_impl_already_exists);\n         check_not_applicable(\n             r#\"\n-enum A { <|>One(u32), }\n+enum A { $0One(u32), }\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n@@ -168,7 +168,7 @@ impl From<u32> for A {\n     fn test_add_from_impl_different_variant_impl_exists() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            r#\"enum A { <|>One(u32), Two(String), }\n+            r#\"enum A { $0One(u32), Two(String), }\n \n impl From<String> for A {\n     fn from(v: String) -> Self {"}, {"sha": "06ac85f670e0ec544b485dd487490a9c858d303c", "filename": "crates/assists/src/handlers/generate_function.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -23,7 +23,7 @@ use crate::{\n // struct Baz;\n // fn baz() -> Baz { Baz }\n // fn foo() {\n-//     bar<|>(\"\", baz());\n+//     bar$0(\"\", baz());\n // }\n //\n // ```\n@@ -342,7 +342,7 @@ mod tests {\n             generate_function,\n             r\"\n fn foo() {\n-    bar<|>();\n+    bar$0();\n }\n \",\n             r\"\n@@ -366,7 +366,7 @@ fn bar() ${0:-> ()} {\n             r\"\n impl Foo {\n     fn foo() {\n-        bar<|>();\n+        bar$0();\n     }\n }\n \",\n@@ -391,7 +391,7 @@ fn bar() ${0:-> ()} {\n             generate_function,\n             r\"\n fn foo1() {\n-    bar<|>();\n+    bar$0();\n }\n \n fn foo2() {}\n@@ -417,7 +417,7 @@ fn foo2() {}\n             r\"\n mod baz {\n     fn foo() {\n-        bar<|>();\n+        bar$0();\n     }\n }\n \",\n@@ -443,7 +443,7 @@ mod baz {\n struct Baz;\n fn baz() -> Baz { todo!() }\n fn foo() {\n-    bar<|>(baz());\n+    bar$0(baz());\n }\n \",\n             r\"\n@@ -468,7 +468,7 @@ fn bar(baz: Baz) ${0:-> ()} {\n struct Baz;\n impl Baz {\n     fn foo(&self) -> Baz {\n-        ba<|>r(self.baz())\n+        ba$0r(self.baz())\n     }\n     fn baz(&self) -> Baz {\n         Baz\n@@ -499,7 +499,7 @@ fn bar(baz: Baz) ${0:-> ()} {\n             generate_function,\n             r#\"\n fn foo() {\n-    <|>bar(\"bar\")\n+    $0bar(\"bar\")\n }\n \"#,\n             r#\"\n@@ -520,7 +520,7 @@ fn bar(arg: &str) ${0:-> ()} {\n             generate_function,\n             r#\"\n fn foo() {\n-    <|>bar('x')\n+    $0bar('x')\n }\n \"#,\n             r#\"\n@@ -541,7 +541,7 @@ fn bar(arg: char) ${0:-> ()} {\n             generate_function,\n             r\"\n fn foo() {\n-    <|>bar(42)\n+    $0bar(42)\n }\n \",\n             r\"\n@@ -562,7 +562,7 @@ fn bar(arg: i32) ${0:-> ()} {\n             generate_function,\n             r\"\n fn foo() {\n-    <|>bar(42 as u8)\n+    $0bar(42 as u8)\n }\n \",\n             r\"\n@@ -586,7 +586,7 @@ fn bar(arg: u8) ${0:-> ()} {\n             r\"\n fn foo() {\n     let x = 42;\n-    bar<|>(x as u8)\n+    bar$0(x as u8)\n }\n \",\n             r\"\n@@ -609,7 +609,7 @@ fn bar(x: u8) ${0:-> ()} {\n             r\"\n fn foo() {\n     let worble = ();\n-    <|>bar(worble)\n+    $0bar(worble)\n }\n \",\n             r\"\n@@ -635,7 +635,7 @@ fn foo() -> impl Foo {\n     todo!()\n }\n fn baz() {\n-    <|>bar(foo())\n+    $0bar(foo())\n }\n \",\n             r\"\n@@ -663,7 +663,7 @@ struct Baz;\n fn baz() -> Baz { todo!() }\n \n fn foo() {\n-    bar<|>(&baz())\n+    bar$0(&baz())\n }\n \",\n             r\"\n@@ -691,7 +691,7 @@ mod Baz {\n     pub fn baz() -> Bof { Bof }\n }\n fn foo() {\n-    <|>bar(Baz::baz())\n+    $0bar(Baz::baz())\n }\n \",\n             r\"\n@@ -718,7 +718,7 @@ fn bar(baz: Baz::Bof) ${0:-> ()} {\n             generate_function,\n             r\"\n fn foo<T>(t: T) {\n-    <|>bar(t)\n+    $0bar(t)\n }\n \",\n             r\"\n@@ -745,7 +745,7 @@ impl Baz {\n     fn new() -> Self { Baz }\n }\n fn foo() {\n-    <|>bar(Baz::new);\n+    $0bar(Baz::new);\n }\n \",\n             r\"\n@@ -773,7 +773,7 @@ fn bar(arg: fn() -> Baz) ${0:-> ()} {\n             r\"\n fn foo() {\n     let closure = |x: i64| x - 1;\n-    <|>bar(closure)\n+    $0bar(closure)\n }\n \",\n             r\"\n@@ -795,7 +795,7 @@ fn bar(closure: impl Fn(i64) -> i64) ${0:-> ()} {\n             generate_function,\n             r\"\n fn foo() {\n-    <|>bar(baz)\n+    $0bar(baz)\n }\n \",\n             r\"\n@@ -818,7 +818,7 @@ fn bar(baz: ()) ${0:-> ()} {\n struct Baz;\n fn baz() -> Baz { Baz }\n fn foo() {\n-    <|>bar(baz(), baz())\n+    $0bar(baz(), baz())\n }\n \",\n             r\"\n@@ -843,7 +843,7 @@ fn bar(baz_1: Baz, baz_2: Baz) ${0:-> ()} {\n struct Baz;\n fn baz() -> Baz { Baz }\n fn foo() {\n-    <|>bar(baz(), baz(), \"foo\", \"bar\")\n+    $0bar(baz(), baz(), \"foo\", \"bar\")\n }\n \"#,\n             r#\"\n@@ -868,7 +868,7 @@ fn bar(baz_1: Baz, baz_2: Baz, arg_1: &str, arg_2: &str) ${0:-> ()} {\n mod bar {}\n \n fn foo() {\n-    bar::my_fn<|>()\n+    bar::my_fn$0()\n }\n \",\n             r\"\n@@ -899,7 +899,7 @@ mod foo {\n fn bar() {\n     use foo::Foo;\n     let foo = Foo;\n-    baz<|>(foo)\n+    baz$0(foo)\n }\n \",\n             \"\n@@ -929,7 +929,7 @@ mod bar {\n }\n \n fn foo() {\n-    bar::my_fn<|>()\n+    bar::my_fn$0()\n }\n \",\n             r\"\n@@ -958,7 +958,7 @@ mod bar {\n }\n \n fn foo() {\n-    bar::baz::my_fn<|>()\n+    bar::baz::my_fn$0()\n }\n \",\n             r\"\n@@ -986,7 +986,7 @@ fn foo() {\n mod foo;\n \n fn main() {\n-    foo::bar<|>()\n+    foo::bar$0()\n }\n //- /foo.rs\n \",\n@@ -1005,7 +1005,7 @@ pub(crate) fn bar() ${0:-> ()} {\n             generate_function,\n             r\"\n fn foo() {\n-    bar<|>();\n+    bar$0();\n }\n \n fn bar() {}\n@@ -1022,7 +1022,7 @@ fn bar() {}\n             generate_function,\n             r\"\n fn foo() {\n-    bar(b<|>az);\n+    bar(b$0az);\n }\n \n fn bar(baz: ()) {}\n@@ -1039,7 +1039,7 @@ fn bar(baz: ()) {}\n struct Foo;\n impl Foo {\n     fn foo(&self) {\n-        self.bar()<|>;\n+        self.bar()$0;\n     }\n }\n         \","}, {"sha": "9af45192b66a11494754181989d2e515806c72bb", "filename": "crates/assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -10,7 +10,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // struct Ctx<T: Clone> {\n-//     data: T,<|>\n+//     data: T,$0\n // }\n // ```\n // ->\n@@ -87,24 +87,24 @@ mod tests {\n     fn test_add_impl() {\n         check_assist(\n             generate_impl,\n-            \"struct Foo {<|>}\\n\",\n+            \"struct Foo {$0}\\n\",\n             \"struct Foo {}\\n\\nimpl Foo {\\n    $0\\n}\\n\",\n         );\n         check_assist(\n             generate_impl,\n-            \"struct Foo<T: Clone> {<|>}\",\n+            \"struct Foo<T: Clone> {$0}\",\n             \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n    $0\\n}\",\n         );\n         check_assist(\n             generate_impl,\n-            \"struct Foo<'a, T: Foo<'a>> {<|>}\",\n+            \"struct Foo<'a, T: Foo<'a>> {$0}\",\n             \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n    $0\\n}\",\n         );\n         check_assist(\n             generate_impl,\n             r#\"\n             #[cfg(feature = \"foo\")]\n-            struct Foo<'a, T: Foo<'a>> {<|>}\"#,\n+            struct Foo<'a, T: Foo<'a>> {$0}\"#,\n             r#\"\n             #[cfg(feature = \"foo\")]\n             struct Foo<'a, T: Foo<'a>> {}\n@@ -119,7 +119,7 @@ mod tests {\n             generate_impl,\n             r#\"\n             #[cfg(not(feature = \"foo\"))]\n-            struct Foo<'a, T: Foo<'a>> {<|>}\"#,\n+            struct Foo<'a, T: Foo<'a>> {$0}\"#,\n             r#\"\n             #[cfg(not(feature = \"foo\"))]\n             struct Foo<'a, T: Foo<'a>> {}\n@@ -138,7 +138,7 @@ mod tests {\n             \"\n struct SomeThingIrrelevant;\n /// Has a lifetime parameter\n-struct Foo<'a, T: Foo<'a>> {<|>}\n+struct Foo<'a, T: Foo<'a>> {$0}\n struct EvenMoreIrrelevant;\n \",\n             \"/// Has a lifetime parameter"}, {"sha": "5c52b2bc83c3fdff00bf544034c69bda4eab7627", "filename": "crates/assists/src/handlers/generate_new.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -14,7 +14,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // struct Ctx<T: Clone> {\n-//      data: T,<|>\n+//      data: T,$0\n // }\n // ```\n // ->\n@@ -182,7 +182,7 @@ mod tests {\n         // Check output of generation\n         check_assist(\n             generate_new,\n-\"struct Foo {<|>}\",\n+\"struct Foo {$0}\",\n \"struct Foo {}\n \n impl Foo {\n@@ -192,7 +192,7 @@ impl Foo {\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo<T: Clone> {<|>}\",\n+\"struct Foo<T: Clone> {$0}\",\n \"struct Foo<T: Clone> {}\n \n impl<T: Clone> Foo<T> {\n@@ -202,7 +202,7 @@ impl<T: Clone> Foo<T> {\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo<'a, T: Foo<'a>> {<|>}\",\n+\"struct Foo<'a, T: Foo<'a>> {$0}\",\n \"struct Foo<'a, T: Foo<'a>> {}\n \n impl<'a, T: Foo<'a>> Foo<'a, T> {\n@@ -212,7 +212,7 @@ impl<'a, T: Foo<'a>> Foo<'a, T> {\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo { baz: String <|>}\",\n+\"struct Foo { baz: String $0}\",\n \"struct Foo { baz: String }\n \n impl Foo {\n@@ -222,7 +222,7 @@ impl Foo {\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo { baz: String, qux: Vec<i32> <|>}\",\n+\"struct Foo { baz: String, qux: Vec<i32> $0}\",\n \"struct Foo { baz: String, qux: Vec<i32> }\n \n impl Foo {\n@@ -234,7 +234,7 @@ impl Foo {\n         // Check that visibility modifiers don't get brought in for fields\n         check_assist(\n             generate_new,\n-\"struct Foo { pub baz: String, pub qux: Vec<i32> <|>}\",\n+\"struct Foo { pub baz: String, pub qux: Vec<i32> $0}\",\n \"struct Foo { pub baz: String, pub qux: Vec<i32> }\n \n impl Foo {\n@@ -246,7 +246,7 @@ impl Foo {\n         // Check that it reuses existing impls\n         check_assist(\n             generate_new,\n-\"struct Foo {<|>}\n+\"struct Foo {$0}\n \n impl Foo {}\n \",\n@@ -259,7 +259,7 @@ impl Foo {\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo {<|>}\n+\"struct Foo {$0}\n \n impl Foo {\n     fn qux(&self) {}\n@@ -277,7 +277,7 @@ impl Foo {\n \n         check_assist(\n             generate_new,\n-\"struct Foo {<|>}\n+\"struct Foo {$0}\n \n impl Foo {\n     fn qux(&self) {}\n@@ -302,7 +302,7 @@ impl Foo {\n         // Check visibility of new fn based on struct\n         check_assist(\n             generate_new,\n-\"pub struct Foo {<|>}\",\n+\"pub struct Foo {$0}\",\n \"pub struct Foo {}\n \n impl Foo {\n@@ -312,7 +312,7 @@ impl Foo {\n         );\n         check_assist(\n             generate_new,\n-\"pub(crate) struct Foo {<|>}\",\n+\"pub(crate) struct Foo {$0}\",\n \"pub(crate) struct Foo {}\n \n impl Foo {\n@@ -327,7 +327,7 @@ impl Foo {\n         check_assist_not_applicable(\n             generate_new,\n             \"\n-struct Foo {<|>}\n+struct Foo {$0}\n \n impl Foo {\n     fn new() -> Self {\n@@ -339,7 +339,7 @@ impl Foo {\n         check_assist_not_applicable(\n             generate_new,\n             \"\n-struct Foo {<|>}\n+struct Foo {$0}\n \n impl Foo {\n     fn New() -> Self {\n@@ -356,7 +356,7 @@ impl Foo {\n             \"\n struct SomeThingIrrelevant;\n /// Has a lifetime parameter\n-struct Foo<'a, T: Foo<'a>> {<|>}\n+struct Foo<'a, T: Foo<'a>> {$0}\n struct EvenMoreIrrelevant;\n \",\n             \"/// Has a lifetime parameter\n@@ -381,7 +381,7 @@ impl<N: AstNode> AstId<N> {\n }\n \n pub struct Source<T> {\n-    pub file_id: HirFileId,<|>\n+    pub file_id: HirFileId,$0\n     pub ast: T,\n }\n "}, {"sha": "5279af1f328ed4b5aa2924aa2ea0b81acc53cd34", "filename": "crates/assists/src/handlers/infer_function_return_type.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -10,7 +10,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // type specified. This assists is useable in a functions or closures tail expression or return type position.\n //\n // ```\n-// fn foo() { 4<|>2i32 }\n+// fn foo() { 4$02i32 }\n // ```\n // ->\n // ```\n@@ -131,7 +131,7 @@ mod tests {\n         mark::check!(existing_infer_ret_type);\n         check_assist(\n             infer_function_return_type,\n-            r#\"fn foo() -> <|>_ {\n+            r#\"fn foo() -> $0_ {\n     45\n }\"#,\n             r#\"fn foo() -> i32 {\n@@ -146,7 +146,7 @@ mod tests {\n         check_assist(\n             infer_function_return_type,\n             r#\"fn foo() {\n-    || -> _ {<|>45};\n+    || -> _ {$045};\n }\"#,\n             r#\"fn foo() {\n     || -> i32 {45};\n@@ -159,7 +159,7 @@ mod tests {\n         mark::check!(cursor_in_ret_position);\n         check_assist(\n             infer_function_return_type,\n-            r#\"fn foo() <|>{\n+            r#\"fn foo() $0{\n     45\n }\"#,\n             r#\"fn foo() -> i32 {\n@@ -174,7 +174,7 @@ mod tests {\n         check_assist(\n             infer_function_return_type,\n             r#\"fn foo() {\n-    || <|>45\n+    || $045\n }\"#,\n             r#\"fn foo() {\n     || -> i32 {45}\n@@ -188,7 +188,7 @@ mod tests {\n         check_assist(\n             infer_function_return_type,\n             r#\"fn foo() {\n-    45<|>\n+    45$0\n }\"#,\n             r#\"fn foo() -> i32 {\n     45\n@@ -202,7 +202,7 @@ mod tests {\n             infer_function_return_type,\n             r#\"fn foo() {\n     if true {\n-        3<|>\n+        3$0\n     } else {\n         5\n     }\n@@ -223,7 +223,7 @@ mod tests {\n         check_assist_not_applicable(\n             infer_function_return_type,\n             r#\"fn foo() -> i32 {\n-    ( 45<|> + 32 ) * 123\n+    ( 45$0 + 32 ) * 123\n }\"#,\n         );\n     }\n@@ -233,7 +233,7 @@ mod tests {\n         check_assist_not_applicable(\n             infer_function_return_type,\n             r#\"fn foo() {\n-    let x = <|>3;\n+    let x = $03;\n     ( 45 + 32 ) * 123\n }\"#,\n         );\n@@ -244,7 +244,7 @@ mod tests {\n         check_assist_not_applicable(\n             infer_function_return_type,\n             r#\"fn foo() {\n-    (<|>)\n+    ($0)\n }\"#,\n         );\n     }\n@@ -256,7 +256,7 @@ mod tests {\n             infer_function_return_type,\n             r#\"fn foo() {\n     |x: i32| {\n-        x<|>\n+        x$0\n     };\n }\"#,\n             r#\"fn foo() {\n@@ -272,7 +272,7 @@ mod tests {\n         check_assist(\n             infer_function_return_type,\n             r#\"fn foo() {\n-    |x: i32| { x<|> };\n+    |x: i32| { x$0 };\n }\"#,\n             r#\"fn foo() {\n     |x: i32| -> i32 { x };\n@@ -286,7 +286,7 @@ mod tests {\n         check_assist(\n             infer_function_return_type,\n             r#\"fn foo() {\n-    |x: i32| x<|>;\n+    |x: i32| x$0;\n }\"#,\n             r#\"fn foo() {\n     |x: i32| -> i32 {x};\n@@ -301,7 +301,7 @@ mod tests {\n             r#\"fn foo() {\n     || {\n         if true {\n-            3<|>\n+            3$0\n         } else {\n             5\n         }\n@@ -325,7 +325,7 @@ mod tests {\n         check_assist_not_applicable(\n             infer_function_return_type,\n             r#\"fn foo() {\n-    || -> i32 { 3<|> }\n+    || -> i32 { 3$0 }\n }\"#,\n         );\n     }\n@@ -336,7 +336,7 @@ mod tests {\n             infer_function_return_type,\n             r#\"fn foo() {\n     || -> i32 {\n-        let x = 3<|>;\n+        let x = 3$0;\n         6\n     }\n }\"#,"}, {"sha": "6ec99b09b7a85d611b4aba525c84e53acc241464", "filename": "crates/assists/src/handlers/inline_function.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -18,7 +18,7 @@ use crate::{\n // ```\n // fn add(a: u32, b: u32) -> u32 { a + b }\n // fn main() {\n-//     let x = add<|>(1, 2);\n+//     let x = add$0(1, 2);\n // }\n // ```\n // ->\n@@ -104,7 +104,7 @@ mod tests {\n             r#\"\n fn foo() { println!(\"Hello, World!\"); }\n fn main() {\n-    fo<|>o();\n+    fo$0o();\n }\n \"#,\n             r#\"\n@@ -125,7 +125,7 @@ fn main() {\n             r#\"\n fn foo(name: String) { println!(\"Hello, {}!\", name); }\n fn main() {\n-    foo<|>(String::from(\"Michael\"));\n+    foo$0(String::from(\"Michael\"));\n }\n \"#,\n             r#\"\n@@ -148,7 +148,7 @@ fn main() {\n struct Foo;\n impl Foo { fn bar(&self) {} }\n \n-fn main() { Foo.bar<|>(); }\n+fn main() { Foo.bar$0(); }\n \",\n         );\n     }\n@@ -160,7 +160,7 @@ fn main() { Foo.bar<|>(); }\n             inline_function,\n             r#\"\n fn add(a: u32, b: u32) -> u32 { a + b }\n-fn main() { let x = add<|>(42); }\n+fn main() { let x = add$0(42); }\n \"#,\n         );\n     }\n@@ -177,7 +177,7 @@ fn foo(a: u32, b: u32) -> u32 {\n }\n \n fn main() {\n-    let x = foo<|>(1, 2);\n+    let x = foo$0(1, 2);\n }\n \"#,\n             r#\""}, {"sha": "d559be9cbcefcc727caa4b99d008afdc98b72beb", "filename": "crates/assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -16,7 +16,7 @@ use crate::{\n //\n // ```\n // fn main() {\n-//     let x<|> = 1 + 2;\n+//     let x$0 = 1 + 2;\n //     x * 4;\n // }\n // ```\n@@ -146,7 +146,7 @@ mod tests {\n             r\"\n fn bar(a: usize) {}\n fn foo() {\n-    let a<|> = 1;\n+    let a$0 = 1;\n     a + 1;\n     if a > 10 {\n     }\n@@ -180,7 +180,7 @@ fn foo() {\n             r\"\n fn bar(a: usize) {}\n fn foo() {\n-    let a<|> = 1 + 1;\n+    let a$0 = 1 + 1;\n     a + 1;\n     if a > 10 {\n     }\n@@ -214,7 +214,7 @@ fn foo() {\n             r\"\n fn bar(a: usize) {}\n fn foo() {\n-    let a<|> = bar(1);\n+    let a$0 = bar(1);\n     a + 1;\n     if a > 10 {\n     }\n@@ -248,7 +248,7 @@ fn foo() {\n             r\"\n fn bar(a: usize): usize { a }\n fn foo() {\n-    let a<|> = bar(1) as u64;\n+    let a$0 = bar(1) as u64;\n     a + 1;\n     if a > 10 {\n     }\n@@ -281,7 +281,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = { 10 + 1 };\n+    let a$0 = { 10 + 1 };\n     a + 1;\n     if a > 10 {\n     }\n@@ -313,7 +313,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = ( 10 + 1 );\n+    let a$0 = ( 10 + 1 );\n     a + 1;\n     if a > 10 {\n     }\n@@ -346,7 +346,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let mut a<|> = 1 + 1;\n+    let mut a$0 = 1 + 1;\n     a + 1;\n }\",\n         );\n@@ -358,7 +358,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = bar(10 + 1);\n+    let a$0 = bar(10 + 1);\n     let b = a * 10;\n     let c = a as usize;\n }\",\n@@ -377,7 +377,7 @@ fn foo() {\n             r\"\n fn foo() {\n     let x = vec![1, 2, 3];\n-    let a<|> = x[0];\n+    let a$0 = x[0];\n     let b = a * 10;\n     let c = a as usize;\n }\",\n@@ -397,7 +397,7 @@ fn foo() {\n             r\"\n fn foo() {\n     let bar = vec![1];\n-    let a<|> = bar.len();\n+    let a$0 = bar.len();\n     let b = a * 10;\n     let c = a as usize;\n }\",\n@@ -421,7 +421,7 @@ struct Bar {\n \n fn foo() {\n     let bar = Bar { foo: 1 };\n-    let a<|> = bar.foo;\n+    let a$0 = bar.foo;\n     let b = a * 10;\n     let c = a as usize;\n }\",\n@@ -445,7 +445,7 @@ fn foo() {\n             r\"\n fn foo() -> Option<usize> {\n     let bar = Some(1);\n-    let a<|> = bar?;\n+    let a$0 = bar?;\n     let b = a * 10;\n     let c = a as usize;\n     None\n@@ -467,7 +467,7 @@ fn foo() -> Option<usize> {\n             r\"\n fn foo() {\n     let bar = 10;\n-    let a<|> = &bar;\n+    let a$0 = &bar;\n     let b = a * 10;\n }\",\n             r\"\n@@ -484,7 +484,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = (10, 20);\n+    let a$0 = (10, 20);\n     let b = a[0];\n }\",\n             r\"\n@@ -500,7 +500,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = [1, 2, 3];\n+    let a$0 = [1, 2, 3];\n     let b = a.len();\n }\",\n             r\"\n@@ -516,7 +516,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = (10 + 20);\n+    let a$0 = (10 + 20);\n     let b = a * 10;\n     let c = a as usize;\n }\",\n@@ -535,7 +535,7 @@ fn foo() {\n             r\"\n fn foo() {\n     let d = 10;\n-    let a<|> = d;\n+    let a$0 = d;\n     let b = a * 10;\n     let c = a as usize;\n }\",\n@@ -554,7 +554,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = { 10 };\n+    let a$0 = { 10 };\n     let b = a * 10;\n     let c = a as usize;\n }\",\n@@ -572,7 +572,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = 10 + 20;\n+    let a$0 = 10 + 20;\n     let b = a * 10;\n     let c = (a, 20);\n     let d = [a, 10];\n@@ -594,7 +594,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = vec![10, 20];\n+    let a$0 = vec![10, 20];\n     for i in a {}\n }\",\n             r\"\n@@ -610,7 +610,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = 1 > 0;\n+    let a$0 = 1 > 0;\n     while a {}\n }\",\n             r\"\n@@ -626,7 +626,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = 1 + 1;\n+    let a$0 = 1 + 1;\n     loop {\n         break a;\n     }\n@@ -646,7 +646,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = 1 > 0;\n+    let a$0 = 1 > 0;\n     return a;\n }\",\n             r\"\n@@ -662,7 +662,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let a<|> = 1 > 0;\n+    let a$0 = 1 > 0;\n     match a {}\n }\",\n             r\"\n@@ -680,7 +680,7 @@ fn foo() {\n             r\"\n struct S { foo: i32}\n fn main() {\n-    let <|>foo = 92;\n+    let $0foo = 92;\n     S { foo }\n }\n \",\n@@ -700,7 +700,7 @@ fn main() {\n             inline_local_variable,\n             r\"\n fn foo() {\n-    let <|>a = 0;\n+    let $0a = 0;\n }\n             \",\n         )\n@@ -713,7 +713,7 @@ fn foo() {\n             inline_local_variable,\n             r\"\n fn main() {\n-    let x = <|>1 + 2;\n+    let x = $01 + 2;\n     x * 4;\n }\n \","}, {"sha": "3f5f44d69162ac243f0e846bd4e4c5cbe237b994", "filename": "crates/assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -14,7 +14,7 @@ static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n // Change an anonymous lifetime to a named lifetime.\n //\n // ```\n-// impl Cursor<'_<|>> {\n+// impl Cursor<'_$0> {\n //     fn node(self) -> &SyntaxNode {\n //         match self {\n //             Cursor::Replace(node) | Cursor::Before(node) => node,\n@@ -33,7 +33,7 @@ static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n // }\n // ```\n // FIXME: How can we handle renaming any one of multiple anonymous lifetimes?\n-// FIXME: should also add support for the case fun(f: &Foo) -> &<|>Foo\n+// FIXME: should also add support for the case fun(f: &Foo) -> &$0Foo\n pub(crate) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let lifetime =\n         ctx.find_node_at_offset::<ast::Lifetime>().filter(|lifetime| lifetime.text() == \"'_\")?;\n@@ -150,7 +150,7 @@ mod tests {\n     fn test_example_case() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"impl Cursor<'_<|>> {\n+            r#\"impl Cursor<'_$0> {\n                 fn node(self) -> &SyntaxNode {\n                     match self {\n                         Cursor::Replace(node) | Cursor::Before(node) => node,\n@@ -171,7 +171,7 @@ mod tests {\n     fn test_example_case_simplified() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"impl Cursor<'_<|>> {\"#,\n+            r#\"impl Cursor<'_$0> {\"#,\n             r#\"impl<'a> Cursor<'a> {\"#,\n         );\n     }\n@@ -180,7 +180,7 @@ mod tests {\n     fn test_example_case_cursor_after_tick() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"impl Cursor<'<|>_> {\"#,\n+            r#\"impl Cursor<'$0_> {\"#,\n             r#\"impl<'a> Cursor<'a> {\"#,\n         );\n     }\n@@ -189,7 +189,7 @@ mod tests {\n     fn test_impl_with_other_type_param() {\n         check_assist(\n             introduce_named_lifetime,\n-            \"impl<I> fmt::Display for SepByBuilder<'_<|>, I>\n+            \"impl<I> fmt::Display for SepByBuilder<'_$0, I>\n         where\n             I: Iterator,\n             I::Item: fmt::Display,\n@@ -206,28 +206,28 @@ mod tests {\n     fn test_example_case_cursor_before_tick() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"impl Cursor<<|>'_> {\"#,\n+            r#\"impl Cursor<$0'_> {\"#,\n             r#\"impl<'a> Cursor<'a> {\"#,\n         );\n     }\n \n     #[test]\n     fn test_not_applicable_cursor_position() {\n-        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor<'_><|> {\"#);\n-        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor<|><'_> {\"#);\n+        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor<'_>$0 {\"#);\n+        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor$0<'_> {\"#);\n     }\n \n     #[test]\n     fn test_not_applicable_lifetime_already_name() {\n-        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor<'a<|>> {\"#);\n-        check_assist_not_applicable(introduce_named_lifetime, r#\"fn my_fun<'a>() -> X<'a<|>>\"#);\n+        check_assist_not_applicable(introduce_named_lifetime, r#\"impl Cursor<'a$0> {\"#);\n+        check_assist_not_applicable(introduce_named_lifetime, r#\"fn my_fun<'a>() -> X<'a$0>\"#);\n     }\n \n     #[test]\n     fn test_with_type_parameter() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"impl<T> Cursor<T, '_<|>>\"#,\n+            r#\"impl<T> Cursor<T, '_$0>\"#,\n             r#\"impl<T, 'a> Cursor<T, 'a>\"#,\n         );\n     }\n@@ -236,7 +236,7 @@ mod tests {\n     fn test_with_existing_lifetime_name_conflict() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"impl<'a, 'b> Cursor<'a, 'b, '_<|>>\"#,\n+            r#\"impl<'a, 'b> Cursor<'a, 'b, '_$0>\"#,\n             r#\"impl<'a, 'b, 'c> Cursor<'a, 'b, 'c>\"#,\n         );\n     }\n@@ -245,7 +245,7 @@ mod tests {\n     fn test_function_return_value_anon_lifetime_param() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"fn my_fun() -> X<'_<|>>\"#,\n+            r#\"fn my_fun() -> X<'_$0>\"#,\n             r#\"fn my_fun<'a>() -> X<'a>\"#,\n         );\n     }\n@@ -254,7 +254,7 @@ mod tests {\n     fn test_function_return_value_anon_reference_lifetime() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"fn my_fun() -> &'_<|> X\"#,\n+            r#\"fn my_fun() -> &'_$0 X\"#,\n             r#\"fn my_fun<'a>() -> &'a X\"#,\n         );\n     }\n@@ -263,7 +263,7 @@ mod tests {\n     fn test_function_param_anon_lifetime() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"fn my_fun(x: X<'_<|>>)\"#,\n+            r#\"fn my_fun(x: X<'_$0>)\"#,\n             r#\"fn my_fun<'a>(x: X<'a>)\"#,\n         );\n     }\n@@ -272,7 +272,7 @@ mod tests {\n     fn test_function_add_lifetime_to_params() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"fn my_fun(f: &Foo) -> X<'_<|>>\"#,\n+            r#\"fn my_fun(f: &Foo) -> X<'_$0>\"#,\n             r#\"fn my_fun<'a>(f: &'a Foo) -> X<'a>\"#,\n         );\n     }\n@@ -281,7 +281,7 @@ mod tests {\n     fn test_function_add_lifetime_to_params_in_presence_of_other_lifetime() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"fn my_fun<'other>(f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n+            r#\"fn my_fun<'other>(f: &Foo, b: &'other Bar) -> X<'_$0>\"#,\n             r#\"fn my_fun<'other, 'a>(f: &'a Foo, b: &'other Bar) -> X<'a>\"#,\n         );\n     }\n@@ -291,15 +291,15 @@ mod tests {\n         // this is not permitted under lifetime elision rules\n         check_assist_not_applicable(\n             introduce_named_lifetime,\n-            r#\"fn my_fun(f: &Foo, b: &Bar) -> X<'_<|>>\"#,\n+            r#\"fn my_fun(f: &Foo, b: &Bar) -> X<'_$0>\"#,\n         );\n     }\n \n     #[test]\n     fn test_function_add_lifetime_to_self_ref_param() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"fn my_fun<'other>(&self, f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n+            r#\"fn my_fun<'other>(&self, f: &Foo, b: &'other Bar) -> X<'_$0>\"#,\n             r#\"fn my_fun<'other, 'a>(&'a self, f: &Foo, b: &'other Bar) -> X<'a>\"#,\n         );\n     }\n@@ -308,7 +308,7 @@ mod tests {\n     fn test_function_add_lifetime_to_param_with_non_ref_self() {\n         check_assist(\n             introduce_named_lifetime,\n-            r#\"fn my_fun<'other>(self, f: &Foo, b: &'other Bar) -> X<'_<|>>\"#,\n+            r#\"fn my_fun<'other>(self, f: &Foo, b: &'other Bar) -> X<'_$0>\"#,\n             r#\"fn my_fun<'other, 'a>(self, f: &'a Foo, b: &'other Bar) -> X<'a>\"#,\n         );\n     }"}, {"sha": "5b69dafd4b9aa2cc92612086a574c8c2e5ce8666", "filename": "crates/assists/src/handlers/invert_if.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -18,7 +18,7 @@ use crate::{\n //\n // ```\n // fn main() {\n-//     if<|> !y { A } else { B }\n+//     if$0 !y { A } else { B }\n // }\n // ```\n // ->\n@@ -72,7 +72,7 @@ mod tests {\n     fn invert_if_composite_condition() {\n         check_assist(\n             invert_if,\n-            \"fn f() { i<|>f x == 3 || x == 4 || x == 5 { 1 } else { 3 * 2 } }\",\n+            \"fn f() { i$0f x == 3 || x == 4 || x == 5 { 1 } else { 3 * 2 } }\",\n             \"fn f() { if !(x == 3 || x == 4 || x == 5) { 3 * 2 } else { 1 } }\",\n         )\n     }\n@@ -81,7 +81,7 @@ mod tests {\n     fn invert_if_remove_not_parentheses() {\n         check_assist(\n             invert_if,\n-            \"fn f() { i<|>f !(x == 3 || x == 4 || x == 5) { 3 * 2 } else { 1 } }\",\n+            \"fn f() { i$0f !(x == 3 || x == 4 || x == 5) { 3 * 2 } else { 1 } }\",\n             \"fn f() { if x == 3 || x == 4 || x == 5 { 1 } else { 3 * 2 } }\",\n         )\n     }\n@@ -90,7 +90,7 @@ mod tests {\n     fn invert_if_remove_inequality() {\n         check_assist(\n             invert_if,\n-            \"fn f() { i<|>f x != 3 { 1 } else { 3 + 2 } }\",\n+            \"fn f() { i$0f x != 3 { 1 } else { 3 + 2 } }\",\n             \"fn f() { if x == 3 { 3 + 2 } else { 1 } }\",\n         )\n     }\n@@ -99,7 +99,7 @@ mod tests {\n     fn invert_if_remove_not() {\n         check_assist(\n             invert_if,\n-            \"fn f() { <|>if !cond { 3 * 2 } else { 1 } }\",\n+            \"fn f() { $0if !cond { 3 * 2 } else { 1 } }\",\n             \"fn f() { if cond { 1 } else { 3 * 2 } }\",\n         )\n     }\n@@ -108,29 +108,29 @@ mod tests {\n     fn invert_if_general_case() {\n         check_assist(\n             invert_if,\n-            \"fn f() { i<|>f cond { 3 * 2 } else { 1 } }\",\n+            \"fn f() { i$0f cond { 3 * 2 } else { 1 } }\",\n             \"fn f() { if !cond { 1 } else { 3 * 2 } }\",\n         )\n     }\n \n     #[test]\n     fn invert_if_doesnt_apply_with_cursor_not_on_if() {\n-        check_assist_not_applicable(invert_if, \"fn f() { if !<|>cond { 3 * 2 } else { 1 } }\")\n+        check_assist_not_applicable(invert_if, \"fn f() { if !$0cond { 3 * 2 } else { 1 } }\")\n     }\n \n     #[test]\n     fn invert_if_doesnt_apply_with_if_let() {\n         check_assist_not_applicable(\n             invert_if,\n-            \"fn f() { i<|>f let Some(_) = Some(1) { 1 } else { 0 } }\",\n+            \"fn f() { i$0f let Some(_) = Some(1) { 1 } else { 0 } }\",\n         )\n     }\n \n     #[test]\n     fn invert_if_option_case() {\n         check_assist(\n             invert_if,\n-            \"fn f() { if<|> doc_style.is_some() { Class::DocComment } else { Class::Comment } }\",\n+            \"fn f() { if$0 doc_style.is_some() { Class::DocComment } else { Class::Comment } }\",\n             \"fn f() { if doc_style.is_none() { Class::Comment } else { Class::DocComment } }\",\n         )\n     }\n@@ -139,7 +139,7 @@ mod tests {\n     fn invert_if_result_case() {\n         check_assist(\n             invert_if,\n-            \"fn f() { i<|>f doc_style.is_err() { Class::Err } else { Class::Ok } }\",\n+            \"fn f() { i$0f doc_style.is_err() { Class::Err } else { Class::Ok } }\",\n             \"fn f() { if doc_style.is_ok() { Class::Ok } else { Class::Err } }\",\n         )\n     }"}, {"sha": "7bd7e1e3697fa703c16cb7de843505dc37d7a124", "filename": "crates/assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -15,7 +15,7 @@ use crate::{\n // Merges two imports with a common prefix.\n //\n // ```\n-// use std::<|>fmt::Formatter;\n+// use std::$0fmt::Formatter;\n // use std::io;\n // ```\n // ->\n@@ -75,7 +75,7 @@ mod tests {\n         check_assist(\n             merge_imports,\n             r\"\n-use std::fmt<|>::{Display, Debug};\n+use std::fmt$0::{Display, Debug};\n use std::fmt::{Display, Debug};\n \",\n             r\"\n@@ -89,7 +89,7 @@ use std::fmt::{Debug, Display};\n         check_assist(\n             merge_imports,\n             r\"\n-use std::fmt<|>::Debug;\n+use std::fmt$0::Debug;\n use std::fmt::Display;\n \",\n             r\"\n@@ -104,7 +104,7 @@ use std::fmt::{Debug, Display};\n             merge_imports,\n             r\"\n use std::fmt::Debug;\n-use std::fmt<|>::Display;\n+use std::fmt$0::Display;\n \",\n             r\"\n use std::fmt::{Debug, Display};\n@@ -117,7 +117,7 @@ use std::fmt::{Debug, Display};\n         check_assist(\n             merge_imports,\n             r\"\n-use std::fmt<|>;\n+use std::fmt$0;\n use std::fmt::Display;\n \",\n             r\"\n@@ -131,7 +131,7 @@ use std::fmt::{self, Display};\n         check_assist(\n             merge_imports,\n             r\"\n-use std::{fmt, <|>fmt::Display};\n+use std::{fmt, $0fmt::Display};\n \",\n             r\"\n use std::{fmt::{self, Display}};\n@@ -144,7 +144,7 @@ use std::{fmt::{self, Display}};\n         check_assist_not_applicable(\n             merge_imports,\n             r\"\n-pub use std::fmt<|>::Debug;\n+pub use std::fmt$0::Debug;\n use std::fmt::Display;\n \",\n         );\n@@ -155,7 +155,7 @@ use std::fmt::Display;\n         check_assist_not_applicable(\n             merge_imports,\n             r\"\n-use std::fmt<|>::Debug;\n+use std::fmt$0::Debug;\n pub use std::fmt::Display;\n \",\n         );\n@@ -166,7 +166,7 @@ pub use std::fmt::Display;\n         check_assist_not_applicable(\n             merge_imports,\n             r\"\n-pub(crate) use std::fmt<|>::Debug;\n+pub(crate) use std::fmt$0::Debug;\n pub use std::fmt::Display;\n \",\n         );\n@@ -177,7 +177,7 @@ pub use std::fmt::Display;\n         check_assist_not_applicable(\n             merge_imports,\n             r\"\n-pub use std::fmt<|>::Debug;\n+pub use std::fmt$0::Debug;\n pub(crate) use std::fmt::Display;\n \",\n         );\n@@ -188,7 +188,7 @@ pub(crate) use std::fmt::Display;\n         check_assist(\n             merge_imports,\n             r\"\n-pub use std::fmt<|>::Debug;\n+pub use std::fmt$0::Debug;\n pub use std::fmt::Display;\n \",\n             r\"\n@@ -202,7 +202,7 @@ pub use std::fmt::{Debug, Display};\n         check_assist(\n             merge_imports,\n             r\"\n-pub(crate) use std::fmt<|>::Debug;\n+pub(crate) use std::fmt$0::Debug;\n pub(crate) use std::fmt::Display;\n \",\n             r\"\n@@ -216,7 +216,7 @@ pub(crate) use std::fmt::{Debug, Display};\n         check_assist(\n             merge_imports,\n             r\"\n-use std::{fmt<|>::Debug, fmt::Display};\n+use std::{fmt$0::Debug, fmt::Display};\n \",\n             r\"\n use std::{fmt::{Debug, Display}};\n@@ -229,7 +229,7 @@ use std::{fmt::{Debug, Display}};\n         check_assist(\n             merge_imports,\n             r\"\n-use std::{fmt::Debug, fmt<|>::Display};\n+use std::{fmt::Debug, fmt$0::Display};\n \",\n             r\"\n use std::{fmt::{Debug, Display}};\n@@ -242,7 +242,7 @@ use std::{fmt::{Debug, Display}};\n         check_assist(\n             merge_imports,\n             r\"\n-use std<|>::cell::*;\n+use std$0::cell::*;\n use std::str;\n \",\n             r\"\n@@ -256,7 +256,7 @@ use std::{cell::*, str};\n         check_assist(\n             merge_imports,\n             r\"\n-use std<|>::cell::*;\n+use std$0::cell::*;\n use std::str::*;\n \",\n             r\"\n@@ -270,7 +270,7 @@ use std::{cell::*, str::*};\n         check_assist(\n             merge_imports,\n             r\"\n-use foo<|>::bar;\n+use foo$0::bar;\n use foo::baz;\n \n /// Doc comment\n@@ -289,7 +289,7 @@ use foo::{bar, baz};\n             merge_imports,\n             r\"\n use {\n-    foo<|>::bar,\n+    foo$0::bar,\n     foo::baz,\n };\n \",\n@@ -304,7 +304,7 @@ use {\n             r\"\n use {\n     foo::baz,\n-    foo<|>::bar,\n+    foo$0::bar,\n };\n \",\n             r\"\n@@ -321,7 +321,7 @@ use {\n             merge_imports,\n             r\"\n use foo::bar::baz;\n-use foo::<|>{\n+use foo::$0{\n     FooBar,\n };\n \",\n@@ -336,7 +336,7 @@ use foo::{FooBar, bar::baz};\n         check_assist_not_applicable(\n             merge_imports,\n             r\"\n-use std::<|>\n+use std::$0\n fn main() {}\",\n         );\n     }"}, {"sha": "9bf076cb9a49f6ce9967fe33c1875c7eab5d42b4", "filename": "crates/assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -17,7 +17,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, TextRange};\n //\n // fn handle(action: Action) {\n //     match action {\n-//         <|>Action::Move(..) => foo(),\n+//         $0Action::Move(..) => foo(),\n //         Action::Stop => foo(),\n //     }\n // }\n@@ -106,7 +106,7 @@ mod tests {\n             fn main() {\n                 let x = X::A;\n                 let y = match x {\n-                    X::A => { 1i32<|> }\n+                    X::A => { 1i32$0 }\n                     X::B => { 1i32 }\n                     X::C => { 2i32 }\n                 }\n@@ -138,7 +138,7 @@ mod tests {\n             fn main() {\n                 let x = X::A;\n                 let y = match x {\n-                    X::A | X::B => {<|> 1i32 },\n+                    X::A | X::B => {$0 1i32 },\n                     X::C | X::D => { 1i32 },\n                     X::E => { 2i32 },\n                 }\n@@ -171,7 +171,7 @@ mod tests {\n                 let x = X::A;\n                 let y = match x {\n                     X::A => { 1i32 },\n-                    X::B => { 2i<|>32 },\n+                    X::B => { 2i$032 },\n                     _ => { 2i32 }\n                 }\n             }\n@@ -200,7 +200,7 @@ mod tests {\n \n             fn main() {\n                 match X::A {\n-                    X::A<|> => 92,\n+                    X::A$0 => 92,\n                     X::B => 92,\n                     X::C => 92,\n                     X::D => 62,\n@@ -237,7 +237,7 @@ mod tests {\n             fn main() {\n                 let x = X::A;\n                 let y = match x {\n-                    X::A(a) if a > 5 => { <|>1i32 },\n+                    X::A(a) if a > 5 => { $01i32 },\n                     X::B => { 1i32 },\n                     X::C => { 2i32 }\n                 }"}, {"sha": "cf260c6f83c1902573ffd384728382b0b9f43b06", "filename": "crates/assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -12,7 +12,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Moves inline type bounds to a where clause.\n //\n // ```\n-// fn apply<T, U, <|>F: FnOnce(T) -> U>(f: F, x: T) -> U {\n+// fn apply<T, U, $0F: FnOnce(T) -> U>(f: F, x: T) -> U {\n //     f(x)\n // }\n // ```\n@@ -103,7 +103,7 @@ mod tests {\n         check_assist(\n             move_bounds_to_where_clause,\n             r#\"\n-            fn foo<T: u32, <|>F: FnOnce(T) -> T>() {}\n+            fn foo<T: u32, $0F: FnOnce(T) -> T>() {}\n             \"#,\n             r#\"\n             fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n@@ -116,7 +116,7 @@ mod tests {\n         check_assist(\n             move_bounds_to_where_clause,\n             r#\"\n-            impl<U: u32, <|>T> A<U, T> {}\n+            impl<U: u32, $0T> A<U, T> {}\n             \"#,\n             r#\"\n             impl<U, T> A<U, T> where U: u32 {}\n@@ -129,7 +129,7 @@ mod tests {\n         check_assist(\n             move_bounds_to_where_clause,\n             r#\"\n-            struct A<<|>T: Iterator<Item = u32>> {}\n+            struct A<$0T: Iterator<Item = u32>> {}\n             \"#,\n             r#\"\n             struct A<T> where T: Iterator<Item = u32> {}\n@@ -142,7 +142,7 @@ mod tests {\n         check_assist(\n             move_bounds_to_where_clause,\n             r#\"\n-            struct Pair<<|>T: u32>(T, T);\n+            struct Pair<$0T: u32>(T, T);\n             \"#,\n             r#\"\n             struct Pair<T>(T, T) where T: u32;"}, {"sha": "3f22302a9740d184b3233c217f6047cb7bacb761", "filename": "crates/assists/src/handlers/move_guard.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -14,7 +14,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // fn handle(action: Action) {\n //     match action {\n-//         Action::Move { distance } <|>if distance > 10 => foo(),\n+//         Action::Move { distance } $0if distance > 10 => foo(),\n //         _ => (),\n //     }\n // }\n@@ -74,7 +74,7 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n //\n // fn handle(action: Action) {\n //     match action {\n-//         Action::Move { distance } => <|>if distance > 10 { foo() },\n+//         Action::Move { distance } => $0if distance > 10 { foo() },\n //         _ => (),\n //     }\n // }\n@@ -158,7 +158,7 @@ mod tests {\n             r#\"\n fn main() {\n     match 92 {\n-        x <|>if x > 10 => false,\n+        x $0if x > 10 => false,\n         _ => true\n     }\n }\n@@ -174,7 +174,7 @@ fn main() {\n             r#\"\n fn main() {\n     match 92 {\n-        x <|>if x > 10 => false,\n+        x $0if x > 10 => false,\n         _ => true\n     }\n }\n@@ -199,7 +199,7 @@ fn main() {\n             r#\"\n fn main() {\n     match 92 {\n-        <|>x @ 4 | x @ 5    if x > 5 => true,\n+        $0x @ 4 | x @ 5    if x > 5 => true,\n         _ => false\n     }\n }\n@@ -224,7 +224,7 @@ fn main() {\n             r#\"\n fn main() {\n     match 92 {\n-        x => if x > 10 { <|>false },\n+        x => if x > 10 { $0false },\n         _ => true\n     }\n }\n@@ -248,7 +248,7 @@ fn main() {\n fn main() {\n     match 92 {\n         x => {\n-            <|>if x > 10 {\n+            $0if x > 10 {\n                 false\n             }\n         },\n@@ -274,7 +274,7 @@ fn main() {\n             r#\"\n fn main() {\n     match 92 {\n-        x => if let 62 = x { <|>false },\n+        x => if let 62 = x { $0false },\n         _ => true\n     }\n }\n@@ -289,7 +289,7 @@ fn main() {\n             r#\"\n fn main() {\n     match 92 {\n-        x => if x > 10 { <|> },\n+        x => if x > 10 { $0 },\n         _ => true\n     }\n }\n@@ -313,7 +313,7 @@ fn main() {\n fn main() {\n     match 92 {\n         x => if x > 10 {\n-            92;<|>\n+            92;$0\n             false\n         },\n         _ => true\n@@ -343,7 +343,7 @@ fn main() {\n     match 92 {\n         x => {\n             if x > 10 {\n-                92;<|>\n+                92;$0\n                 false\n             }\n         }"}, {"sha": "9d8579f471ee471074093940aef94ff331afc208", "filename": "crates/assists/src/handlers/move_module_to_file.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -13,7 +13,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Moves inline module's contents to a separate file.\n //\n // ```\n-// mod <|>foo {\n+// mod $0foo {\n //     fn t() {}\n // }\n // ```\n@@ -78,7 +78,7 @@ mod tests {\n         check_assist(\n             move_module_to_file,\n             r#\"\n-mod <|>tests {\n+mod $0tests {\n     #[test] fn t() {}\n }\n \"#,\n@@ -99,7 +99,7 @@ mod tests;\n //- /main.rs\n mod submod;\n //- /submod.rs\n-<|>mod inner {\n+$0mod inner {\n     fn f() {}\n }\n fn g() {}\n@@ -122,7 +122,7 @@ fn f() {}\n //- /main.rs\n mod submodule;\n //- /submodule/mod.rs\n-mod inner<|> {\n+mod inner$0 {\n     fn f() {}\n }\n fn g() {}\n@@ -140,6 +140,6 @@ fn f() {}\n     #[test]\n     fn available_before_curly() {\n         mark::check!(available_before_curly);\n-        check_assist_not_applicable(move_module_to_file, r#\"mod m { <|> }\"#);\n+        check_assist_not_applicable(move_module_to_file, r#\"mod m { $0 }\"#);\n     }\n }"}, {"sha": "13e1cb754695049e95adcb32abd19ac102ddf80d", "filename": "crates/assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -18,7 +18,7 @@ use crate::{\n //     let mut foo = 6;\n //\n //     if true {\n-//         <|>foo = 5;\n+//         $0foo = 5;\n //     } else {\n //         foo = 4;\n //     }\n@@ -175,7 +175,7 @@ fn foo() {\n     let mut a = 1;\n \n     if true {\n-        <|>a = 2;\n+        $0a = 2;\n     } else {\n         a = 3;\n     }\n@@ -203,7 +203,7 @@ fn foo() {\n \n     match 1 {\n         1 => {\n-            <|>a = 2;\n+            $0a = 2;\n         },\n         2 => {\n             a = 3;\n@@ -241,7 +241,7 @@ fn foo() {\n     let mut a = 1;\n \n     if true {\n-        <|>a = 2;\n+        $0a = 2;\n         b = a;\n     } else {\n         a = 3;\n@@ -260,7 +260,7 @@ fn foo() {\n     let mut a = 1;\n \n     if true {\n-        <|>a = 2;\n+        $0a = 2;\n     } else if false {\n         a = 3;\n     } else {\n@@ -292,7 +292,7 @@ fn foo() {\n \n     if true {\n         let b = 2;\n-        <|>a = 2;\n+        $0a = 2;\n     } else {\n         let b = 3;\n         a = 3;\n@@ -322,7 +322,7 @@ fn foo() {\n     let mut a = 1;\n \n     let b = if true {\n-        <|>a = 2\n+        $0a = 2\n     } else {\n         a = 3\n     };\n@@ -339,7 +339,7 @@ fn foo() {\n     let mut a = 1;\n \n     if true {\n-        <|>a = 2;\n+        $0a = 2;\n     } else {}\n }\"#,\n         )\n@@ -355,7 +355,7 @@ fn foo() {\n \n     match 1 {\n         1 => {\n-            <|>a = 2;\n+            $0a = 2;\n         },\n         2 => {\n             a = 3;\n@@ -378,7 +378,7 @@ fn foo() {\n     let mut a = A(1);\n \n     if true {\n-        <|>a.0 = 2;\n+        $0a.0 = 2;\n     } else {\n         a.0 = 3;\n     }"}, {"sha": "f7fbf37f4d5068d7d2ded072eda2006a78da5353", "filename": "crates/assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -22,7 +22,7 @@ use crate::{\n //\n // ```\n // fn main() {\n-//     let map = HashMap<|>::new();\n+//     let map = HashMap$0::new();\n // }\n // # pub mod std { pub mod collections { pub struct HashMap { } } }\n // ```\n@@ -221,7 +221,7 @@ mod tests {\n \n             use std::fmt;\n \n-            <|>Formatter\n+            $0Formatter\n             \",\n             r\"\n             mod std {\n@@ -242,7 +242,7 @@ mod tests {\n         check_assist(\n             qualify_path,\n             r\"\n-            <|>PubStruct\n+            $0PubStruct\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -266,7 +266,7 @@ mod tests {\n             macro_rules! foo {\n                 ($i:ident) => { fn foo(a: $i) {} }\n             }\n-            foo!(Pub<|>Struct);\n+            foo!(Pub$0Struct);\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -290,7 +290,7 @@ mod tests {\n         check_assist(\n             qualify_path,\n             r\"\n-            PubSt<|>ruct\n+            PubSt$0ruct\n \n             pub mod PubMod1 {\n                 pub struct PubStruct;\n@@ -325,7 +325,7 @@ mod tests {\n             r\"\n             use PubMod::PubStruct;\n \n-            PubStruct<|>\n+            PubStruct$0\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -339,7 +339,7 @@ mod tests {\n         check_assist_not_applicable(\n             qualify_path,\n             r\"\n-            PrivateStruct<|>\n+            PrivateStruct$0\n \n             pub mod PubMod {\n                 struct PrivateStruct;\n@@ -353,7 +353,7 @@ mod tests {\n         check_assist_not_applicable(\n             qualify_path,\n             \"\n-            PubStruct<|>\",\n+            PubStruct$0\",\n         );\n     }\n \n@@ -362,7 +362,7 @@ mod tests {\n         check_assist_not_applicable(\n             qualify_path,\n             r\"\n-            use PubStruct<|>;\n+            use PubStruct$0;\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -375,7 +375,7 @@ mod tests {\n         check_assist(\n             qualify_path,\n             r\"\n-            test_function<|>\n+            test_function$0\n \n             pub mod PubMod {\n                 pub fn test_function() {};\n@@ -404,7 +404,7 @@ macro_rules! foo {\n \n //- /main.rs crate:main deps:crate_with_macro\n fn main() {\n-    foo<|>\n+    foo$0\n }\n \",\n             r\"\n@@ -421,7 +421,7 @@ fn main() {\n             qualify_path,\n             r\"\n             struct AssistInfo {\n-                group_label: Option<<|>GroupLabel>,\n+                group_label: Option<$0GroupLabel>,\n             }\n \n             mod m { pub struct GroupLabel; }\n@@ -445,7 +445,7 @@ fn main() {\n \n             use mod1::mod2;\n             fn main() {\n-                mod2::mod3::TestStruct<|>\n+                mod2::mod3::TestStruct$0\n             }\n             \",\n         );\n@@ -462,7 +462,7 @@ fn main() {\n \n             use test_mod::test_function;\n             fn main() {\n-                test_function<|>\n+                test_function$0\n             }\n             \",\n         );\n@@ -481,7 +481,7 @@ fn main() {\n             }\n \n             fn main() {\n-                TestStruct::test_function<|>\n+                TestStruct::test_function$0\n             }\n             \",\n             r\"\n@@ -513,7 +513,7 @@ fn main() {\n             }\n \n             fn main() {\n-                TestStruct::TEST_CONST<|>\n+                TestStruct::TEST_CONST$0\n             }\n             \",\n             r\"\n@@ -547,7 +547,7 @@ fn main() {\n             }\n \n             fn main() {\n-                test_mod::TestStruct::test_function<|>\n+                test_mod::TestStruct::test_function$0\n             }\n             \",\n             r\"\n@@ -594,7 +594,7 @@ fn main() {\n \n             use test_mod::TestTrait2;\n             fn main() {\n-                test_mod::TestEnum::test_function<|>;\n+                test_mod::TestEnum::test_function$0;\n             }\n             \",\n         )\n@@ -617,7 +617,7 @@ fn main() {\n             }\n \n             fn main() {\n-                test_mod::TestStruct::TEST_CONST<|>\n+                test_mod::TestStruct::TEST_CONST$0\n             }\n             \",\n             r\"\n@@ -664,7 +664,7 @@ fn main() {\n \n             use test_mod::TestTrait2;\n             fn main() {\n-                test_mod::TestEnum::TEST_CONST<|>;\n+                test_mod::TestEnum::TEST_CONST$0;\n             }\n             \",\n         )\n@@ -688,7 +688,7 @@ fn main() {\n \n             fn main() {\n                 let test_struct = test_mod::TestStruct {};\n-                test_struct.test_meth<|>od()\n+                test_struct.test_meth$0od()\n             }\n             \",\n             r\"\n@@ -727,7 +727,7 @@ fn main() {\n \n             fn main() {\n                 let test_struct = test_mod::TestStruct {};\n-                test_struct.test_meth<|>od(42)\n+                test_struct.test_meth$0od(42)\n             }\n             \",\n             r\"\n@@ -766,7 +766,7 @@ fn main() {\n \n             fn main() {\n                 let test_struct = test_mod::TestStruct {};\n-                test_struct.test_meth<|>od()\n+                test_struct.test_meth$0od()\n             }\n             \",\n             r\"\n@@ -796,7 +796,7 @@ fn main() {\n             //- /main.rs crate:main deps:dep\n             fn main() {\n                 let test_struct = dep::test_mod::TestStruct {};\n-                test_struct.test_meth<|>od()\n+                test_struct.test_meth$0od()\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -825,7 +825,7 @@ fn main() {\n             r\"\n             //- /main.rs crate:main deps:dep\n             fn main() {\n-                dep::test_mod::TestStruct::test_func<|>tion\n+                dep::test_mod::TestStruct::test_func$0tion\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -853,7 +853,7 @@ fn main() {\n             r\"\n             //- /main.rs crate:main deps:dep\n             fn main() {\n-                dep::test_mod::TestStruct::CONST<|>\n+                dep::test_mod::TestStruct::CONST$0\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -882,7 +882,7 @@ fn main() {\n             //- /main.rs crate:main deps:dep\n             fn main() {\n                 let test_struct = dep::test_mod::TestStruct {};\n-                test_struct.test_func<|>tion()\n+                test_struct.test_func$0tion()\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -906,7 +906,7 @@ fn main() {\n             //- /main.rs crate:main deps:dep\n             fn main() {\n                 let test_struct = dep::test_mod::TestStruct {};\n-                test_struct.test_meth<|>od()\n+                test_struct.test_meth$0od()\n             }\n             //- /dep.rs crate:dep\n             pub mod test_mod {\n@@ -949,7 +949,7 @@ fn main() {\n             use test_mod::TestTrait2;\n             fn main() {\n                 let one = test_mod::TestEnum::One;\n-                one.test<|>_method();\n+                one.test$0_method();\n             }\n             \",\n         )\n@@ -965,7 +965,7 @@ pub struct Struct;\n \n //- /main.rs crate:main deps:dep\n fn main() {\n-    Struct<|>\n+    Struct$0\n }\n \",\n             r\"\n@@ -992,7 +992,7 @@ pub fn panic_fmt() {}\n //- /main.rs crate:main deps:dep\n struct S;\n \n-impl f<|>mt::Display for S {}\n+impl f$0mt::Display for S {}\n \",\n             r\"\n struct S;\n@@ -1019,7 +1019,7 @@ mac!();\n \n //- /main.rs crate:main deps:dep\n fn main() {\n-    Cheese<|>;\n+    Cheese$0;\n }\n \",\n             r\"\n@@ -1042,7 +1042,7 @@ pub struct fmt;\n \n //- /main.rs crate:main deps:dep\n fn main() {\n-    FMT<|>;\n+    FMT$0;\n }\n \",\n             r\"\n@@ -1062,7 +1062,7 @@ fn main() {\n pub mod generic { pub struct Thing<'a, T>(&'a T); }\n \n //- /main.rs crate:main deps:dep\n-fn foo() -> Thin<|>g<'static, ()> {}\n+fn foo() -> Thin$0g<'static, ()> {}\n \n fn main() {}\n \",\n@@ -1083,7 +1083,7 @@ fn main() {}\n pub mod generic { pub struct Thing<'a, T>(&'a T); }\n \n //- /main.rs crate:main deps:dep\n-fn foo() -> Thin<|>g::<'static, ()> {}\n+fn foo() -> Thin$0g::<'static, ()> {}\n \n fn main() {}\n \",\n@@ -1108,7 +1108,7 @@ fn main() {}\n             }\n \n             fn main() {\n-                TestStruct::<()>::TEST_CONST<|>\n+                TestStruct::<()>::TEST_CONST$0\n             }\n             \",\n             r\"\n@@ -1142,7 +1142,7 @@ fn main() {}\n             }\n \n             fn main() {\n-                test_mod::TestStruct::<()>::TEST_CONST<|>\n+                test_mod::TestStruct::<()>::TEST_CONST$0\n             }\n             \",\n             r\"\n@@ -1180,7 +1180,7 @@ fn main() {}\n \n             fn main() {\n                 let test_struct = test_mod::TestStruct {};\n-                test_struct.test_meth<|>od::<()>()\n+                test_struct.test_meth$0od::<()>()\n             }\n             \",\n             r\""}, {"sha": "be963f1626c9dbf91b60ae6cb6355c4445ec4eba", "filename": "crates/assists/src/handlers/raw_string.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -11,7 +11,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // fn main() {\n-//     \"Hello,<|> World!\";\n+//     \"Hello,$0 World!\";\n // }\n // ```\n // ->\n@@ -53,7 +53,7 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<\n //\n // ```\n // fn main() {\n-//     r#\"Hello,<|> \"World!\"\"#;\n+//     r#\"Hello,$0 \"World!\"\"#;\n // }\n // ```\n // ->\n@@ -95,7 +95,7 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n //\n // ```\n // fn main() {\n-//     r#\"Hello,<|> World!\"#;\n+//     r#\"Hello,$0 World!\"#;\n // }\n // ```\n // ->\n@@ -123,7 +123,7 @@ pub(crate) fn add_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n //\n // ```\n // fn main() {\n-//     r#\"Hello,<|> World!\"#;\n+//     r#\"Hello,$0 World!\"#;\n // }\n // ```\n // ->\n@@ -194,7 +194,7 @@ mod tests {\n             make_raw_string,\n             r#\"\n             fn f() {\n-                let s = <|>\"random\\nstring\";\n+                let s = $0\"random\\nstring\";\n             }\n             \"#,\n             r#\"\"random\\nstring\"\"#,\n@@ -207,7 +207,7 @@ mod tests {\n             make_raw_string,\n             r#\"\n fn f() {\n-    let s = <|>\"random\\nstring\";\n+    let s = $0\"random\\nstring\";\n }\n \"#,\n             r##\"\n@@ -225,7 +225,7 @@ string\"#;\n             make_raw_string,\n             r#\"\n             fn f() {\n-                format!(<|>\"x = {}\", 92)\n+                format!($0\"x = {}\", 92)\n             }\n             \"#,\n             r##\"\n@@ -242,7 +242,7 @@ string\"#;\n             make_raw_string,\n             r###\"\n fn f() {\n-    let s = <|>\"#random##\\nstring\";\n+    let s = $0\"#random##\\nstring\";\n }\n \"###,\n             r####\"\n@@ -260,7 +260,7 @@ string\"#;\n             make_raw_string,\n             r###\"\n fn f() {\n-    let s = <|>\"#random\\\"##\\nstring\";\n+    let s = $0\"#random\\\"##\\nstring\";\n }\n \"###,\n             r####\"\n@@ -278,7 +278,7 @@ string\"###;\n             make_raw_string,\n             r#\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = $0\"random string\";\n             }\n             \"#,\n             r##\"\n@@ -295,7 +295,7 @@ string\"###;\n             make_raw_string,\n             r#\"\n             fn f() {\n-                let s = \"foo<|>\n+                let s = \"foo$0\n             }\n             \"#,\n         )\n@@ -307,7 +307,7 @@ string\"###;\n             make_usual_string,\n             r#\"\n             fn main() {\n-                let s = r#\"bar<|>\n+                let s = r#\"bar$0\n             }\n             \"#,\n         )\n@@ -319,7 +319,7 @@ string\"###;\n             add_hash,\n             r#\"\n             fn f() {\n-                let s = <|>r\"random string\";\n+                let s = $0r\"random string\";\n             }\n             \"#,\n             r#\"r\"random string\"\"#,\n@@ -332,7 +332,7 @@ string\"###;\n             add_hash,\n             r#\"\n             fn f() {\n-                let s = <|>r\"random string\";\n+                let s = $0r\"random string\";\n             }\n             \"#,\n             r##\"\n@@ -349,7 +349,7 @@ string\"###;\n             add_hash,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random\"string\"#;\n+                let s = $0r#\"random\"string\"#;\n             }\n             \"##,\n             r###\"\n@@ -366,7 +366,7 @@ string\"###;\n             add_hash,\n             r#\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = $0\"random string\";\n             }\n             \"#,\n         );\n@@ -378,7 +378,7 @@ string\"###;\n             remove_hash,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random string\"#;\n+                let s = $0r#\"random string\"#;\n             }\n             \"##,\n             r##\"r#\"random string\"#\"##,\n@@ -389,7 +389,7 @@ string\"###;\n     fn remove_hash_works() {\n         check_assist(\n             remove_hash,\n-            r##\"fn f() { let s = <|>r#\"random string\"#; }\"##,\n+            r##\"fn f() { let s = $0r#\"random string\"#; }\"##,\n             r#\"fn f() { let s = r\"random string\"; }\"#,\n         )\n     }\n@@ -401,7 +401,7 @@ string\"###;\n             remove_hash,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random\"str\"ing\"#;\n+                let s = $0r#\"random\"str\"ing\"#;\n             }\n             \"##,\n         )\n@@ -413,7 +413,7 @@ string\"###;\n             remove_hash,\n             r###\"\n             fn f() {\n-                let s = <|>r##\"random string\"##;\n+                let s = $0r##\"random string\"##;\n             }\n             \"###,\n             r##\"\n@@ -426,12 +426,12 @@ string\"###;\n \n     #[test]\n     fn remove_hash_doesnt_work() {\n-        check_assist_not_applicable(remove_hash, r#\"fn f() { let s = <|>\"random string\"; }\"#);\n+        check_assist_not_applicable(remove_hash, r#\"fn f() { let s = $0\"random string\"; }\"#);\n     }\n \n     #[test]\n     fn remove_hash_no_hash_doesnt_work() {\n-        check_assist_not_applicable(remove_hash, r#\"fn f() { let s = <|>r\"random string\"; }\"#);\n+        check_assist_not_applicable(remove_hash, r#\"fn f() { let s = $0r\"random string\"; }\"#);\n     }\n \n     #[test]\n@@ -440,7 +440,7 @@ string\"###;\n             make_usual_string,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random string\"#;\n+                let s = $0r#\"random string\"#;\n             }\n             \"##,\n             r##\"r#\"random string\"#\"##,\n@@ -453,7 +453,7 @@ string\"###;\n             make_usual_string,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random string\"#;\n+                let s = $0r#\"random string\"#;\n             }\n             \"##,\n             r#\"\n@@ -470,7 +470,7 @@ string\"###;\n             make_usual_string,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random\"str\"ing\"#;\n+                let s = $0r#\"random\"str\"ing\"#;\n             }\n             \"##,\n             r#\"\n@@ -487,7 +487,7 @@ string\"###;\n             make_usual_string,\n             r###\"\n             fn f() {\n-                let s = <|>r##\"random string\"##;\n+                let s = $0r##\"random string\"##;\n             }\n             \"###,\n             r##\"\n@@ -504,7 +504,7 @@ string\"###;\n             make_usual_string,\n             r#\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = $0\"random string\";\n             }\n             \"#,\n         );"}, {"sha": "0320c2f1298dcba525f4f13c53d6efd187af4f94", "filename": "crates/assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -11,7 +11,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // fn main() {\n-//     <|>dbg!(92);\n+//     $0dbg!(92);\n // }\n // ```\n // ->\n@@ -161,19 +161,19 @@ mod tests {\n \n     #[test]\n     fn test_remove_dbg() {\n-        check_assist(remove_dbg, \"<|>dbg!(1 + 1)\", \"1 + 1\");\n+        check_assist(remove_dbg, \"$0dbg!(1 + 1)\", \"1 + 1\");\n \n-        check_assist(remove_dbg, \"dbg!<|>((1 + 1))\", \"(1 + 1)\");\n+        check_assist(remove_dbg, \"dbg!$0((1 + 1))\", \"(1 + 1)\");\n \n-        check_assist(remove_dbg, \"dbg!(1 <|>+ 1)\", \"1 + 1\");\n+        check_assist(remove_dbg, \"dbg!(1 $0+ 1)\", \"1 + 1\");\n \n-        check_assist(remove_dbg, \"let _ = <|>dbg!(1 + 1)\", \"let _ = 1 + 1\");\n+        check_assist(remove_dbg, \"let _ = $0dbg!(1 + 1)\", \"let _ = 1 + 1\");\n \n         check_assist(\n             remove_dbg,\n             \"\n fn foo(n: usize) {\n-    if let Some(_) = dbg!(n.<|>checked_sub(4)) {\n+    if let Some(_) = dbg!(n.$0checked_sub(4)) {\n         // ...\n     }\n }\n@@ -187,20 +187,20 @@ fn foo(n: usize) {\n \",\n         );\n \n-        check_assist(remove_dbg, \"<|>dbg!(Foo::foo_test()).bar()\", \"Foo::foo_test().bar()\");\n+        check_assist(remove_dbg, \"$0dbg!(Foo::foo_test()).bar()\", \"Foo::foo_test().bar()\");\n     }\n \n     #[test]\n     fn test_remove_dbg_with_brackets_and_braces() {\n-        check_assist(remove_dbg, \"dbg![<|>1 + 1]\", \"1 + 1\");\n-        check_assist(remove_dbg, \"dbg!{<|>1 + 1}\", \"1 + 1\");\n+        check_assist(remove_dbg, \"dbg![$01 + 1]\", \"1 + 1\");\n+        check_assist(remove_dbg, \"dbg!{$01 + 1}\", \"1 + 1\");\n     }\n \n     #[test]\n     fn test_remove_dbg_not_applicable() {\n-        check_assist_not_applicable(remove_dbg, \"<|>vec![1, 2, 3]\");\n-        check_assist_not_applicable(remove_dbg, \"<|>dbg(5, 6, 7)\");\n-        check_assist_not_applicable(remove_dbg, \"<|>dbg!(5, 6, 7\");\n+        check_assist_not_applicable(remove_dbg, \"$0vec![1, 2, 3]\");\n+        check_assist_not_applicable(remove_dbg, \"$0dbg(5, 6, 7)\");\n+        check_assist_not_applicable(remove_dbg, \"$0dbg!(5, 6, 7\");\n     }\n \n     #[test]\n@@ -209,7 +209,7 @@ fn foo(n: usize) {\n             remove_dbg,\n             \"\n fn foo(n: usize) {\n-    if let Some(_) = dbg!(n.<|>checked_sub(4)) {\n+    if let Some(_) = dbg!(n.$0checked_sub(4)) {\n         // ...\n     }\n }\n@@ -226,7 +226,7 @@ fn foo(n: usize) {\n         // the ast::MacroCall to include the semicolon at the end\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(1 * 20); // needless comment\"#,\n+            r#\"let res = $0dbg!(1 * 20); // needless comment\"#,\n             r#\"let res = 1 * 20; // needless comment\"#,\n         );\n     }\n@@ -238,7 +238,7 @@ fn foo(n: usize) {\n             \"\n fn main() {\n     let mut a = 1;\n-    while dbg!<|>(a) < 10000 {\n+    while dbg!$0(a) < 10000 {\n         a += 1;\n     }\n }\n@@ -258,31 +258,31 @@ fn main() {\n     fn test_remove_dbg_keep_expression() {\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(a + b).foo();\"#,\n+            r#\"let res = $0dbg!(a + b).foo();\"#,\n             r#\"let res = (a + b).foo();\"#,\n         );\n \n-        check_assist(remove_dbg, r#\"let res = <|>dbg!(2 + 2) * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n-        check_assist(remove_dbg, r#\"let res = <|>dbg![2 + 2] * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n+        check_assist(remove_dbg, r#\"let res = $0dbg!(2 + 2) * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n+        check_assist(remove_dbg, r#\"let res = $0dbg![2 + 2] * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n     }\n \n     #[test]\n     fn test_remove_dbg_method_chaining() {\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(foo().bar()).baz();\"#,\n+            r#\"let res = $0dbg!(foo().bar()).baz();\"#,\n             r#\"let res = foo().bar().baz();\"#,\n         );\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(foo.bar()).baz();\"#,\n+            r#\"let res = $0dbg!(foo.bar()).baz();\"#,\n             r#\"let res = foo.bar().baz();\"#,\n         );\n     }\n \n     #[test]\n     fn test_remove_dbg_field_chaining() {\n-        check_assist(remove_dbg, r#\"let res = <|>dbg!(foo.bar).baz;\"#, r#\"let res = foo.bar.baz;\"#);\n+        check_assist(remove_dbg, r#\"let res = $0dbg!(foo.bar).baz;\"#, r#\"let res = foo.bar.baz;\"#);\n     }\n \n     #[test]\n@@ -295,7 +295,7 @@ fn square(x: u32) -> u32 {\n }\n \n fn main() {\n-    let x = square(dbg<|>!(5 + 10));\n+    let x = square(dbg$0!(5 + 10));\n     println!(\"{}\", x);\n }\"#,\n             \"dbg!(5 + 10)\",\n@@ -309,7 +309,7 @@ fn square(x: u32) -> u32 {\n }\n \n fn main() {\n-    let x = square(dbg<|>!(5 + 10));\n+    let x = square(dbg$0!(5 + 10));\n     println!(\"{}\", x);\n }\"#,\n             r#\"\n@@ -328,7 +328,7 @@ fn main() {\n     fn test_remove_dbg_try_expr() {\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(result?).foo();\"#,\n+            r#\"let res = $0dbg!(result?).foo();\"#,\n             r#\"let res = result?.foo();\"#,\n         );\n     }\n@@ -337,7 +337,7 @@ fn main() {\n     fn test_remove_dbg_await_expr() {\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(fut.await).foo();\"#,\n+            r#\"let res = $0dbg!(fut.await).foo();\"#,\n             r#\"let res = fut.await.foo();\"#,\n         );\n     }\n@@ -346,7 +346,7 @@ fn main() {\n     fn test_remove_dbg_as_cast() {\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(3 as usize).foo();\"#,\n+            r#\"let res = $0dbg!(3 as usize).foo();\"#,\n             r#\"let res = (3 as usize).foo();\"#,\n         );\n     }\n@@ -355,12 +355,12 @@ fn main() {\n     fn test_remove_dbg_index_expr() {\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(array[3]).foo();\"#,\n+            r#\"let res = $0dbg!(array[3]).foo();\"#,\n             r#\"let res = array[3].foo();\"#,\n         );\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(tuple.3).foo();\"#,\n+            r#\"let res = $0dbg!(tuple.3).foo();\"#,\n             r#\"let res = tuple.3.foo();\"#,\n         );\n     }\n@@ -369,12 +369,12 @@ fn main() {\n     fn test_remove_dbg_range_expr() {\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(foo..bar).foo();\"#,\n+            r#\"let res = $0dbg!(foo..bar).foo();\"#,\n             r#\"let res = (foo..bar).foo();\"#,\n         );\n         check_assist(\n             remove_dbg,\n-            r#\"let res = <|>dbg!(foo..=bar).foo();\"#,\n+            r#\"let res = $0dbg!(foo..=bar).foo();\"#,\n             r#\"let res = (foo..=bar).foo();\"#,\n         );\n     }\n@@ -384,7 +384,7 @@ fn main() {\n         check_assist(\n             remove_dbg,\n             r#\"fn foo() {\n-    if <|>dbg!(x || y) {}\n+    if $0dbg!(x || y) {}\n }\"#,\n             r#\"fn foo() {\n     if x || y {}\n@@ -393,7 +393,7 @@ fn main() {\n         check_assist(\n             remove_dbg,\n             r#\"fn foo() {\n-    while let foo = <|>dbg!(&x) {}\n+    while let foo = $0dbg!(&x) {}\n }\"#,\n             r#\"fn foo() {\n     while let foo = &x {}\n@@ -402,7 +402,7 @@ fn main() {\n         check_assist(\n             remove_dbg,\n             r#\"fn foo() {\n-    if let foo = <|>dbg!(&x) {}\n+    if let foo = $0dbg!(&x) {}\n }\"#,\n             r#\"fn foo() {\n     if let foo = &x {}\n@@ -411,7 +411,7 @@ fn main() {\n         check_assist(\n             remove_dbg,\n             r#\"fn foo() {\n-    match <|>dbg!(&x) {}\n+    match $0dbg!(&x) {}\n }\"#,\n             r#\"fn foo() {\n     match &x {}"}, {"sha": "30d36dacd28a10bcd4d47ae8daf7f67c70e99dda", "filename": "crates/assists/src/handlers/remove_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_mut.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -8,7 +8,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // impl Walrus {\n-//     fn feed(&mut<|> self, amount: u32) {}\n+//     fn feed(&mut$0 self, amount: u32) {}\n // }\n // ```\n // ->"}, {"sha": "56e8b522948e03e6e78d64a4c4aeeafb208e6cef", "filename": "crates/assists/src/handlers/remove_unused_param.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -16,7 +16,7 @@ use crate::{\n // Removes unused function parameter.\n //\n // ```\n-// fn frobnicate(x: i32<|>) {}\n+// fn frobnicate(x: i32$0) {}\n //\n // fn main() {\n //     frobnicate(92);\n@@ -123,7 +123,7 @@ mod tests {\n             remove_unused_param,\n             r#\"\n fn a() { foo(9, 2) }\n-fn foo(x: i32, <|>y: i32) { x; }\n+fn foo(x: i32, $0y: i32) { x; }\n fn b() { foo(9, 2,) }\n \"#,\n             r#\"\n@@ -139,7 +139,7 @@ fn b() { foo(9, ) }\n         check_assist(\n             remove_unused_param,\n             r#\"\n-fn foo(<|>x: i32, y: i32) { y; }\n+fn foo($0x: i32, y: i32) { y; }\n fn a() { foo(1, 2) }\n fn b() { foo(1, 2,) }\n \"#,\n@@ -156,7 +156,7 @@ fn b() { foo(2,) }\n         check_assist(\n             remove_unused_param,\n             r#\"\n-fn foo(<|>x: i32) { 0; }\n+fn foo($0x: i32) { 0; }\n fn a() { foo(1) }\n fn b() { foo(1, ) }\n \"#,\n@@ -173,7 +173,7 @@ fn b() { foo( ) }\n         check_assist(\n             remove_unused_param,\n             r#\"\n-fn foo(x: i32, <|>y: i32, z: i32) { x; }\n+fn foo(x: i32, $0y: i32, z: i32) { x; }\n fn a() { foo(1, 2, 3) }\n fn b() { foo(1, 2, 3,) }\n \"#,\n@@ -190,7 +190,7 @@ fn b() { foo(1, 3,) }\n         check_assist(\n             remove_unused_param,\n             r#\"\n-mod bar { pub fn foo(x: i32, <|>y: i32) { x; } }\n+mod bar { pub fn foo(x: i32, $0y: i32) { x; } }\n fn b() { bar::foo(9, 2) }\n \"#,\n             r#\"\n@@ -205,7 +205,7 @@ fn b() { bar::foo(9) }\n         check_assist(\n             remove_unused_param,\n             r#\"\n-pub fn foo<T>(x: T, <|>y: i32) { x; }\n+pub fn foo<T>(x: T, $0y: i32) { x; }\n fn b() { foo::<i32>(9, 2) }\n \"#,\n             r#\"\n@@ -220,7 +220,7 @@ fn b() { foo::<i32>(9) }\n         check_assist(\n             remove_unused_param,\n             r#\"\n-pub fn foo<T>(x: i32, <|>y: T) { x; }\n+pub fn foo<T>(x: i32, $0y: T) { x; }\n fn b() { foo::<i32>(9, 2) }\n fn b2() { foo(9, 2) }\n \"#,\n@@ -238,7 +238,7 @@ fn b2() { foo(9) }\n         check_assist_not_applicable(\n             remove_unused_param,\n             r#\"\n-fn foo(x: i32, <|>y: i32) { y; }\n+fn foo(x: i32, $0y: i32) { y; }\n fn main() { foo(9, 2) }\n \"#,\n         );\n@@ -250,7 +250,7 @@ fn main() { foo(9, 2) }\n             remove_unused_param,\n             r#\"\n //- /main.rs\n-fn foo(x: i32, <|>y: i32) { x; }\n+fn foo(x: i32, $0y: i32) { x; }\n \n mod foo;\n "}, {"sha": "fba7d6ddbea8d846f96af2997ec8eda0740810c3", "filename": "crates/assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -15,7 +15,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // struct Foo {foo: i32, bar: i32};\n-// const test: Foo = <|>Foo {bar: 0, foo: 1}\n+// const test: Foo = $0Foo {bar: 0, foo: 1}\n // ```\n // ->\n // ```\n@@ -126,7 +126,7 @@ struct Foo {\n     bar: i32,\n }\n \n-const test: Foo = <|>Foo { foo: 0, bar: 0 };\n+const test: Foo = $0Foo { foo: 0, bar: 0 };\n \"#,\n         )\n     }\n@@ -137,7 +137,7 @@ const test: Foo = <|>Foo { foo: 0, bar: 0 };\n             reorder_fields,\n             r#\"\n struct Foo {};\n-const test: Foo = <|>Foo {}\n+const test: Foo = $0Foo {}\n \"#,\n         )\n     }\n@@ -148,7 +148,7 @@ const test: Foo = <|>Foo {}\n             reorder_fields,\n             r#\"\n struct Foo {foo: i32, bar: i32};\n-const test: Foo = <|>Foo {bar: 0, foo: 1}\n+const test: Foo = $0Foo {bar: 0, foo: 1}\n \"#,\n             r#\"\n struct Foo {foo: i32, bar: i32};\n@@ -166,7 +166,7 @@ struct Foo { foo: i64, bar: i64, baz: i64 }\n \n fn f(f: Foo) -> {\n     match f {\n-        <|>Foo { baz: 0, ref mut bar, .. } => (),\n+        $0Foo { baz: 0, ref mut bar, .. } => (),\n         _ => ()\n     }\n }\n@@ -197,7 +197,7 @@ struct Foo {\n impl Foo {\n     fn new() -> Foo {\n         let foo = String::new();\n-        <|>Foo {\n+        $0Foo {\n             bar: foo.clone(),\n             extra: \"Extra field\",\n             foo,"}, {"sha": "bd4c1c806b8cd7015d9d2e97d8b9bcbeca604ecd", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -22,7 +22,7 @@ use crate::{\n //\n // ```\n // # trait Debug { fn fmt(&self, f: &mut Formatter) -> Result<()>; }\n-// #[derive(Deb<|>ug, Display)]\n+// #[derive(Deb$0ug, Display)]\n // struct S;\n // ```\n // ->\n@@ -219,7 +219,7 @@ mod fmt {\n     }\n }\n \n-#[derive(Debu<|>g)]\n+#[derive(Debu$0g)]\n struct Foo {\n     bar: String,\n }\n@@ -261,7 +261,7 @@ mod foo {\n     }\n }\n \n-#[derive(<|>Bar)]\n+#[derive($0Bar)]\n struct Foo {\n     bar: String,\n }\n@@ -300,7 +300,7 @@ impl foo::Bar for Foo {\n         check_assist(\n             replace_derive_with_manual_impl,\n             \"\n-#[derive(Debu<|>g)]\n+#[derive(Debu$0g)]\n struct Foo {\n     bar: String,\n }\n@@ -322,7 +322,7 @@ impl Debug for Foo {\n         check_assist(\n             replace_derive_with_manual_impl,\n             \"\n-#[derive(Debug<|>)]\n+#[derive(Debug$0)]\n pub struct Foo {\n     bar: String,\n }\n@@ -344,7 +344,7 @@ impl Debug for Foo {\n         check_assist(\n             replace_derive_with_manual_impl,\n             \"\n-#[derive(Display, Debug<|>, Serialize)]\n+#[derive(Display, Debug$0, Serialize)]\n struct Foo {}\n             \",\n             \"\n@@ -363,7 +363,7 @@ impl Debug for Foo {\n         check_assist_not_applicable(\n             replace_derive_with_manual_impl,\n             \"\n-#[derive(<|>)]\n+#[derive($0)]\n struct Foo {}\n             \",\n         )\n@@ -374,15 +374,15 @@ struct Foo {}\n         check_assist_not_applicable(\n             replace_derive_with_manual_impl,\n             \"\n-#[derive<|>(Debug)]\n+#[derive$0(Debug)]\n struct Foo {}\n             \",\n         );\n \n         check_assist_not_applicable(\n             replace_derive_with_manual_impl,\n             \"\n-#[derive(Debug)<|>]\n+#[derive(Debug)$0]\n struct Foo {}\n             \",\n         )\n@@ -393,7 +393,7 @@ struct Foo {}\n         check_assist_not_applicable(\n             replace_derive_with_manual_impl,\n             \"\n-#[allow(non_camel_<|>case_types)]\n+#[allow(non_camel_$0case_types)]\n struct Foo {}\n             \",\n         )"}, {"sha": "aee3397ab707f9dc286ad717e132761ac7286d95", "filename": "crates/assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -20,7 +20,7 @@ use crate::{utils::unwrap_trivial_block, AssistContext, AssistId, AssistKind, As\n // enum Action { Move { distance: u32 }, Stop }\n //\n // fn handle(action: Action) {\n-//     <|>if let Action::Move { distance } = action {\n+//     $0if let Action::Move { distance } = action {\n //         foo(distance)\n //     } else {\n //         bar()\n@@ -89,7 +89,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n // enum Action { Move { distance: u32 }, Stop }\n //\n // fn handle(action: Action) {\n-//     <|>match action {\n+//     $0match action {\n //         Action::Move { distance } => foo(distance),\n //         _ => bar(),\n //     }\n@@ -179,7 +179,7 @@ mod tests {\n             r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n-        if <|>let VariantData::Struct(..) = *self {\n+        if $0let VariantData::Struct(..) = *self {\n             true\n         } else {\n             false\n@@ -204,7 +204,7 @@ impl VariantData {\n             replace_if_let_with_match,\n             r#\"\n fn foo() {\n-    if <|>let VariantData::Struct(..) = a {\n+    if $0let VariantData::Struct(..) = a {\n         bar(\n             123\n         )\n@@ -233,7 +233,7 @@ fn foo() {\n             r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n-        if <|>let VariantData::Struct(..) = *self {\n+        if $0let VariantData::Struct(..) = *self {\n             true\n         } else {\n             false\n@@ -257,7 +257,7 @@ enum Option<T> { Some(T), None }\n use Option::*;\n \n fn foo(x: Option<i32>) {\n-    <|>if let Some(x) = x {\n+    $0if let Some(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n@@ -287,7 +287,7 @@ enum Result<T, E> { Ok(T), Err(E) }\n use Result::*;\n \n fn foo(x: Result<i32, ()>) {\n-    <|>if let Ok(x) = x {\n+    $0if let Ok(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n@@ -315,7 +315,7 @@ fn foo(x: Result<i32, ()>) {\n             r#\"\n fn main() {\n     if true {\n-        <|>if let Ok(rel_path) = path.strip_prefix(root_path) {\n+        $0if let Ok(rel_path) = path.strip_prefix(root_path) {\n             let rel_path = RelativePathBuf::from_path(rel_path).ok()?;\n             Some((*id, rel_path))\n         } else {\n@@ -347,7 +347,7 @@ fn main() {\n             r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n-        <|>match *self {\n+        $0match *self {\n             VariantData::Struct(..) => true,\n             _ => false,\n         }\n@@ -372,7 +372,7 @@ impl VariantData {\n             replace_match_with_if_let,\n             r#\"\n fn foo() {\n-    <|>match a {\n+    $0match a {\n         VariantData::Struct(..) => {\n             bar(\n                 123\n@@ -401,7 +401,7 @@ fn foo() {\n             r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n-        <|>match *self {\n+        $0match *self {\n             VariantData::Struct(..) => true,\n             _ => false,\n         }\n@@ -423,7 +423,7 @@ enum Option<T> { Some(T), None }\n use Option::*;\n \n fn foo(x: Option<i32>) {\n-    <|>match x {\n+    $0match x {\n         Some(x) => println!(\"{}\", x),\n         None => println!(\"none\"),\n     }\n@@ -453,7 +453,7 @@ enum Result<T, E> { Ok(T), Err(E) }\n use Result::*;\n \n fn foo(x: Result<i32, ()>) {\n-    <|>match x {\n+    $0match x {\n         Ok(x) => println!(\"{}\", x),\n         Err(_) => println!(\"none\"),\n     }\n@@ -481,7 +481,7 @@ fn foo(x: Result<i32, ()>) {\n             r#\"\n fn main() {\n     if true {\n-        <|>match path.strip_prefix(root_path) {\n+        $0match path.strip_prefix(root_path) {\n             Ok(rel_path) => {\n                 let rel_path = RelativePathBuf::from_path(rel_path).ok()?;\n                 Some((*id, rel_path))\n@@ -512,7 +512,7 @@ fn main() {\n             replace_match_with_if_let,\n             r#\"\n fn main() {\n-    <|>match path.strip_prefix(root_path) {\n+    $0match path.strip_prefix(root_path) {\n         Ok(rel_path) => println!(\"{}\", rel_path),\n         _ => (),\n     }"}, {"sha": "ff25b61ea2709857969dd871df2a011f9edfdae8", "filename": "crates/assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -7,7 +7,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Replaces `impl Trait` function argument with the named generic.\n //\n // ```\n-// fn foo(bar: <|>impl Bar) {}\n+// fn foo(bar: $0impl Bar) {}\n // ```\n // ->\n // ```\n@@ -56,7 +56,7 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo<G>(bar: <|>impl Bar) {}\n+            fn foo<G>(bar: $0impl Bar) {}\n             \"#,\n             r#\"\n             fn foo<G, B: Bar>(bar: B) {}\n@@ -69,7 +69,7 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo(bar: <|>impl Bar) {}\n+            fn foo(bar: $0impl Bar) {}\n             \"#,\n             r#\"\n             fn foo<B: Bar>(bar: B) {}\n@@ -82,7 +82,7 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo<G>(foo: impl Foo, bar: <|>impl Bar) {}\n+            fn foo<G>(foo: impl Foo, bar: $0impl Bar) {}\n             \"#,\n             r#\"\n             fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\n@@ -95,7 +95,7 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo<>(bar: <|>impl Bar) {}\n+            fn foo<>(bar: $0impl Bar) {}\n             \"#,\n             r#\"\n             fn foo<B: Bar>(bar: B) {}\n@@ -109,7 +109,7 @@ mod tests {\n             replace_impl_trait_with_generic,\n             r#\"\n             fn foo<\n-            >(bar: <|>impl Bar) {}\n+            >(bar: $0impl Bar) {}\n             \"#,\n             r#\"\n             fn foo<B: Bar\n@@ -124,7 +124,7 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo<B>(bar: <|>impl Bar) {}\n+            fn foo<B>(bar: $0impl Bar) {}\n             \"#,\n             r#\"\n             fn foo<B, C: Bar>(bar: C) {}\n@@ -141,7 +141,7 @@ mod tests {\n                 G: Foo,\n                 F,\n                 H,\n-            >(bar: <|>impl Bar) {}\n+            >(bar: $0impl Bar) {}\n             \"#,\n             r#\"\n             fn foo<\n@@ -158,7 +158,7 @@ mod tests {\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n-            fn foo(bar: <|>impl Foo + Bar) {}\n+            fn foo(bar: $0impl Foo + Bar) {}\n             \"#,\n             r#\"\n             fn foo<F: Foo + Bar>(bar: F) {}"}, {"sha": "5a27ada6b6f44deee41aebed02cf8e95ab1b0cd3", "filename": "crates/assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -20,7 +20,7 @@ use ide_db::ty_filter::TryEnum;\n // # enum Option<T> { Some(T), None }\n //\n // fn main(action: Action) {\n-//     <|>let x = compute();\n+//     $0let x = compute();\n // }\n //\n // fn compute() -> Option<i32> { None }\n@@ -85,7 +85,7 @@ mod tests {\n enum E<T> { X(T), Y(T) }\n \n fn main() {\n-    <|>let x = E::X(92);\n+    $0let x = E::X(92);\n }\n             \",\n             r\""}, {"sha": "f3bc6cf3980c6cc6d9c8c93b2815879b6fcf651f", "filename": "crates/assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -9,7 +9,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Adds a use statement for a given fully-qualified name.\n //\n // ```\n-// fn process(map: std::collections::<|>HashMap<String, String>) {}\n+// fn process(map: std::collections::$0HashMap<String, String>) {}\n // ```\n // ->\n // ```\n@@ -127,7 +127,7 @@ mod tests {\n             r\"use std::fs;\n \n fn main() {\n-    std::f<|>s::Path\n+    std::f$0s::Path\n }\",\n             r\"use std::fs;\n \n@@ -142,7 +142,7 @@ fn main() {\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n-std::fmt::Debug<|>\n+std::fmt::Debug$0\n     \",\n             r\"\n use std::fmt::Debug;\n@@ -156,7 +156,7 @@ Debug\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n-std::fmt::Debug<|>\n+std::fmt::Debug$0\n \n fn main() {\n }\n@@ -180,7 +180,7 @@ fn main() {\n fn main() {\n }\n \n-std::fmt::Debug<|>\n+std::fmt::Debug$0\n     \",\n             r\"\n use std::fmt::Debug;\n@@ -198,7 +198,7 @@ Debug\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n-std::fmt<|>::Debug\n+std::fmt$0::Debug\n     \",\n             r\"\n use std::fmt;\n@@ -215,7 +215,7 @@ fmt::Debug\n             r\"\n use stdx;\n \n-impl std::fmt::Debug<|> for Foo {\n+impl std::fmt::Debug$0 for Foo {\n }\n     \",\n             r\"\n@@ -234,7 +234,7 @@ impl Debug for Foo {\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n-impl std::fmt::Debug<|> for Foo {\n+impl std::fmt::Debug$0 for Foo {\n }\n     \",\n             r\"\n@@ -251,7 +251,7 @@ impl Debug for Foo {\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n-    impl std::fmt::Debug<|> for Foo {\n+    impl std::fmt::Debug$0 for Foo {\n     }\n     \",\n             r\"\n@@ -270,7 +270,7 @@ impl Debug for Foo {\n             r\"\n use std::fmt;\n \n-impl std::io<|> for Foo {\n+impl std::io$0 for Foo {\n }\n     \",\n             r\"\n@@ -289,7 +289,7 @@ impl io for Foo {\n             r\"\n use std::fmt;\n \n-impl std::fmt::Debug<|> for Foo {\n+impl std::fmt::Debug$0 for Foo {\n }\n     \",\n             r\"\n@@ -308,7 +308,7 @@ impl Debug for Foo {\n             r\"\n use std::fmt::Debug;\n \n-impl std::fmt<|> for Foo {\n+impl std::fmt$0 for Foo {\n }\n     \",\n             r\"\n@@ -327,7 +327,7 @@ impl fmt for Foo {\n             r\"\n use std::fmt::{Debug, nested::{Display}};\n \n-impl std::fmt::nested<|> for Foo {\n+impl std::fmt::nested$0 for Foo {\n }\n \",\n             r\"\n@@ -346,7 +346,7 @@ impl nested for Foo {\n             r\"\n use std::fmt::{Debug, nested::{self, Display}};\n \n-impl std::fmt::nested<|> for Foo {\n+impl std::fmt::nested$0 for Foo {\n }\n \",\n             r\"\n@@ -365,7 +365,7 @@ impl nested for Foo {\n             r\"\n use std::fmt::{Debug, nested::{Display}};\n \n-impl std::fmt::nested::Debug<|> for Foo {\n+impl std::fmt::nested::Debug$0 for Foo {\n }\n \",\n             r\"\n@@ -384,7 +384,7 @@ impl Debug for Foo {\n             r\"\n use std::fmt::Debug;\n \n-impl std::fmt::nested::Display<|> for Foo {\n+impl std::fmt::nested::Display$0 for Foo {\n }\n \",\n             r\"\n@@ -403,7 +403,7 @@ impl Display for Foo {\n             r\"\n use std::fmt::nested::Debug;\n \n-impl std::fmt::Display<|> for Foo {\n+impl std::fmt::Display$0 for Foo {\n }\n \",\n             r\"\n@@ -425,7 +425,7 @@ use crate::{\n     AssocItem,\n };\n \n-fn foo() { crate::ty::lower<|>::trait_env() }\n+fn foo() { crate::ty::lower$0::trait_env() }\n \",\n             r\"\n use crate::{AssocItem, ty::{Substs, Ty, lower}};\n@@ -442,7 +442,7 @@ fn foo() { lower::trait_env() }\n             r\"\n use std::fmt as foo;\n \n-impl foo::Debug<|> for Foo {\n+impl foo::Debug$0 for Foo {\n }\n \",\n             r\"\n@@ -462,7 +462,7 @@ impl Debug for Foo {\n         check_assist_not_applicable(\n             replace_qualified_name_with_use,\n             r\"\n-impl foo<|> for Foo {\n+impl foo$0 for Foo {\n }\n \",\n         );\n@@ -473,7 +473,7 @@ impl foo<|> for Foo {\n         check_assist_not_applicable(\n             replace_qualified_name_with_use,\n             r\"\n-use std::fmt<|>;\n+use std::fmt$0;\n \",\n         );\n     }\n@@ -485,7 +485,7 @@ use std::fmt<|>;\n             r\"\n mod foo {\n     mod bar {\n-        std::fmt::Debug<|>\n+        std::fmt::Debug$0\n     }\n }\n     \",\n@@ -509,7 +509,7 @@ mod foo {\n #![allow(dead_code)]\n \n fn main() {\n-    std::fmt::Debug<|>\n+    std::fmt::Debug$0\n }\n     \",\n             r\"\n@@ -530,7 +530,7 @@ fn main() {\n             replace_qualified_name_with_use,\n             r\"\n fn main() {\n-    std::fmt::Debug<|>;\n+    std::fmt::Debug$0;\n     let x: std::fmt::Debug = std::fmt::Debug;\n }\n     \",\n@@ -552,7 +552,7 @@ fn main() {\n             r\"\n mod m {\n     fn f() {\n-        std::fmt::Debug<|>;\n+        std::fmt::Debug$0;\n         let x: std::fmt::Debug = std::fmt::Debug;\n     }\n     fn g() {\n@@ -590,7 +590,7 @@ fn f() {\n             replace_qualified_name_with_use,\n             r\"\n fn main() {\n-    std::fmt::Debug<|>;\n+    std::fmt::Debug$0;\n }\n \n mod sub {\n@@ -623,7 +623,7 @@ mod sub {\n use std::fmt::Display;\n \n fn main() {\n-    std::fmt<|>;\n+    std::fmt$0;\n }\n     \",\n             r\"\n@@ -643,7 +643,7 @@ fn main() {\n             r\"\n pub use std::fmt;\n \n-impl std::io<|> for Foo {\n+impl std::io$0 for Foo {\n }\n     \",\n             r\"\n@@ -663,7 +663,7 @@ impl io for Foo {\n             r\"\n pub(crate) use std::fmt;\n \n-impl std::io<|> for Foo {\n+impl std::io$0 for Foo {\n }\n     \",\n             r\""}, {"sha": "317318c2478020c093725a7fd602c6e5835c121c", "filename": "crates/assists/src/handlers/replace_string_with_char.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -8,7 +8,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n // fn main() {\n-//     find(\"{<|>\");\n+//     find(\"{$0\");\n // }\n // ```\n // ->\n@@ -48,7 +48,7 @@ mod tests {\n             replace_string_with_char,\n             r#\"\n             fn f() {\n-                let s = \"<|>c\";\n+                let s = \"$0c\";\n             }\n             \"#,\n             r#\"\"c\"\"#,\n@@ -61,7 +61,7 @@ mod tests {\n             replace_string_with_char,\n             r#\"\n     fn f() {\n-        let s = \"<|>c\";\n+        let s = \"$0c\";\n     }\n     \"#,\n             r##\"\n@@ -78,7 +78,7 @@ mod tests {\n             replace_string_with_char,\n             r#\"\n     fn f() {\n-        let s = \"<|>\ud83d\ude00\";\n+        let s = \"$0\ud83d\ude00\";\n     }\n     \"#,\n             r##\"\n@@ -95,7 +95,7 @@ mod tests {\n             replace_string_with_char,\n             r#\"\n     fn f() {\n-        let s = \"<|>test\";\n+        let s = \"$0test\";\n     }\n     \"#,\n         )\n@@ -107,7 +107,7 @@ mod tests {\n             replace_string_with_char,\n             r#\"\n                 fn f() {\n-                    format!(<|>\"x\", 92)\n+                    format!($0\"x\", 92)\n                 }\n                 \"#,\n             r##\"\n@@ -124,7 +124,7 @@ mod tests {\n             replace_string_with_char,\n             r#\"\n                 fn f() {\n-                    find(<|>\"x\");\n+                    find($0\"x\");\n                 }\n                 \"#,\n             r##\""}, {"sha": "a986a6ae8991aeae63ebeeaac01e23edeb789440", "filename": "crates/assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -23,7 +23,7 @@ use ide_db::ty_filter::TryEnum;\n // enum Result<T, E> { Ok(T), Err(E) }\n // fn main() {\n //     let x: Result<i32, i32> = Result::Ok(92);\n-//     let y = x.<|>unwrap();\n+//     let y = x.$0unwrap();\n // }\n // ```\n // ->\n@@ -101,7 +101,7 @@ enum Result<T, E> { Ok(T), Err(E) }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n-    let y = i(x).<|>unwrap();\n+    let y = i(x).$0unwrap();\n }\n             \",\n             r\"\n@@ -127,7 +127,7 @@ enum Option<T> { Some(T), None }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x = Option::Some(92);\n-    let y = i(x).<|>unwrap();\n+    let y = i(x).$0unwrap();\n }\n             \",\n             r\"\n@@ -153,7 +153,7 @@ enum Result<T, E> { Ok(T), Err(E) }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n-    let y = i(x).<|>unwrap().count_zeroes();\n+    let y = i(x).$0unwrap().count_zeroes();\n }\n             \",\n             r\"\n@@ -179,7 +179,7 @@ enum Option<T> { Some(T), None }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x = Option::Some(92);\n-    let y = i(x).<|>unwrap();\n+    let y = i(x).$0unwrap();\n }\n             \",\n             r\"i(x).unwrap()\","}, {"sha": "9319a4267e059a846d2a0b0b51aad9335f0b591f", "filename": "crates/assists/src/handlers/split_import.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -9,7 +9,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Wraps the tail of import into braces.\n //\n // ```\n-// use std::<|>collections::HashMap;\n+// use std::$0collections::HashMap;\n // ```\n // ->\n // ```\n@@ -43,7 +43,7 @@ mod tests {\n     fn test_split_import() {\n         check_assist(\n             split_import,\n-            \"use crate::<|>db::RootDatabase;\",\n+            \"use crate::$0db::RootDatabase;\",\n             \"use crate::{db::RootDatabase};\",\n         )\n     }\n@@ -52,27 +52,27 @@ mod tests {\n     fn split_import_works_with_trees() {\n         check_assist(\n             split_import,\n-            \"use crate:<|>:db::{RootDatabase, FileSymbol}\",\n+            \"use crate:$0:db::{RootDatabase, FileSymbol}\",\n             \"use crate::{db::{RootDatabase, FileSymbol}}\",\n         )\n     }\n \n     #[test]\n     fn split_import_target() {\n-        check_assist_target(split_import, \"use crate::<|>db::{RootDatabase, FileSymbol}\", \"::\");\n+        check_assist_target(split_import, \"use crate::$0db::{RootDatabase, FileSymbol}\", \"::\");\n     }\n \n     #[test]\n     fn issue4044() {\n-        check_assist_not_applicable(split_import, \"use crate::<|>:::self;\")\n+        check_assist_not_applicable(split_import, \"use crate::$0:::self;\")\n     }\n \n     #[test]\n     fn test_empty_use() {\n         check_assist_not_applicable(\n             split_import,\n             r\"\n-use std::<|>\n+use std::$0\n fn main() {}\",\n         );\n     }"}, {"sha": "33e12a7d0ca0d35c3b6661b882cecdca767c7c0d", "filename": "crates/assists/src/handlers/toggle_ignore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -10,7 +10,7 @@ use crate::{utils::test_related_attribute, AssistContext, AssistId, AssistKind,\n // Adds `#[ignore]` attribute to the test.\n //\n // ```\n-// <|>#[test]\n+// $0#[test]\n // fn arithmetics {\n //     assert_eq!(2 + 2, 5);\n // }\n@@ -69,7 +69,7 @@ mod tests {\n         check_assist(\n             toggle_ignore,\n             r#\"\n-            #[test<|>]\n+            #[test$0]\n             fn test() {}\n             \"#,\n             r#\"\n@@ -85,7 +85,7 @@ mod tests {\n         check_assist(\n             toggle_ignore,\n             r#\"\n-            #[test<|>]\n+            #[test$0]\n             #[ignore]\n             fn test() {}\n             \"#,"}, {"sha": "ed6f6177dab8ca0bdab81eee8df9a9b6b9e9872d", "filename": "crates/assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -14,7 +14,7 @@ use crate::{utils::unwrap_trivial_block, AssistContext, AssistId, AssistKind, As\n //\n // ```\n // fn foo() {\n-//     if true {<|>\n+//     if true {$0\n //         println!(\"foo\");\n //     }\n // }\n@@ -124,7 +124,7 @@ mod tests {\n             unwrap_block,\n             r#\"\n fn main() {\n-    <|>{\n+    $0{\n         92\n     }\n }\n@@ -143,7 +143,7 @@ fn main() {\n             unwrap_block,\n             r#\"\n fn main() {\n-    <|>{\n+    $0{\n         92;\n     }\n     ()\n@@ -161,7 +161,7 @@ fn main() {\n             unwrap_block,\n             r#\"\n fn main() {\n-    <|>{\n+    $0{\n         92\n     }\n     ()\n@@ -183,7 +183,7 @@ fn main() {\n             r#\"\n fn main() {\n     bar();\n-    if true {<|>\n+    if true {$0\n         foo();\n \n         //comment\n@@ -217,7 +217,7 @@ fn main() {\n \n         //comment\n         bar();\n-    } else {<|>\n+    } else {$0\n         println!(\"bar\");\n     }\n }\n@@ -249,7 +249,7 @@ fn main() {\n \n         //comment\n         //bar();\n-    } else if false {<|>\n+    } else if false {$0\n         println!(\"bar\");\n     } else {\n         println!(\"foo\");\n@@ -285,7 +285,7 @@ fn main() {\n         //bar();\n     } else if false {\n         println!(\"bar\");\n-    } else if true {<|>\n+    } else if true {$0\n         println!(\"foo\");\n     }\n }\n@@ -323,7 +323,7 @@ fn main() {\n         println!(\"bar\");\n     } else if true {\n         println!(\"foo\");\n-    } else {<|>\n+    } else {$0\n         println!(\"else\");\n     }\n }\n@@ -361,7 +361,7 @@ fn main() {\n         //bar();\n     } else if false {\n         println!(\"bar\");\n-    } else if true {<|>\n+    } else if true {$0\n         println!(\"foo\");\n     } else {\n         println!(\"else\");\n@@ -391,7 +391,7 @@ fn main() {\n             unwrap_block,\n             r#\"\n fn main() {\n-    bar();<|>\n+    bar();$0\n     if true {\n         foo();\n \n@@ -411,7 +411,7 @@ fn main() {\n             unwrap_block,\n             r#\"\n fn main() {\n-    for i in 0..5 {<|>\n+    for i in 0..5 {$0\n         if true {\n             foo();\n \n@@ -445,7 +445,7 @@ fn main() {\n             r#\"\n fn main() {\n     for i in 0..5 {\n-        if true {<|>\n+        if true {$0\n             foo();\n \n             //comment\n@@ -475,7 +475,7 @@ fn main() {\n             unwrap_block,\n             r#\"\n fn main() {\n-    loop {<|>\n+    loop {$0\n         if true {\n             foo();\n \n@@ -508,7 +508,7 @@ fn main() {\n             unwrap_block,\n             r#\"\n fn main() {\n-    while true {<|>\n+    while true {$0\n         if true {\n             foo();\n \n@@ -542,7 +542,7 @@ fn main() {\n             r#\"\n fn main() {\n     match rel_path {\n-        Ok(rel_path) => {<|>\n+        Ok(rel_path) => {$0\n             let rel_path = RelativePathBuf::from_path(rel_path).ok()?;\n             Some((*id, rel_path))\n         }\n@@ -567,7 +567,7 @@ fn main() {\n fn main() {\n     while true {\n         if true {\n-            foo();<|>\n+            foo();$0\n \n             //comment\n             bar();"}, {"sha": "fec16fc49516c857782c79e9e34879a84ad3d617", "filename": "crates/assists/src/handlers/wrap_return_type_in_result.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -13,7 +13,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Wrap the function's return type into Result.\n //\n // ```\n-// fn foo() -> i32<|> { 42i32 }\n+// fn foo() -> i32$0 { 42i32 }\n // ```\n // ->\n // ```\n@@ -282,7 +282,7 @@ mod tests {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i3<|>2 {\n+fn foo() -> i3$02 {\n     let test = \"test\";\n     return 42i32;\n }\n@@ -302,7 +302,7 @@ fn foo() -> Result<i32, ${0:_}> {\n             wrap_return_type_in_result,\n             r#\"\n fn foo() {\n-    || -> i32<|> {\n+    || -> i32$0 {\n         let test = \"test\";\n         return 42i32;\n     };\n@@ -325,7 +325,7 @@ fn foo() {\n             wrap_return_type_in_result,\n             r#\"\n fn foo() -> i32 {\n-    let test = \"test\";<|>\n+    let test = \"test\";$0\n     return 42i32;\n }\n \"#,\n@@ -339,7 +339,7 @@ fn foo() -> i32 {\n             r#\"\n fn foo() {\n     || -> i32 {\n-        let test = \"test\";<|>\n+        let test = \"test\";$0\n         return 42i32;\n     };\n }\n@@ -349,15 +349,15 @@ fn foo() {\n \n     #[test]\n     fn wrap_return_type_in_result_closure_non_block() {\n-        check_assist_not_applicable(wrap_return_type_in_result, r#\"fn foo() { || -> i<|>32 3; }\"#);\n+        check_assist_not_applicable(wrap_return_type_in_result, r#\"fn foo() { || -> i$032 3; }\"#);\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_return_type_already_result_std() {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> std::result::Result<i32<|>, String> {\n+fn foo() -> std::result::Result<i32$0, String> {\n     let test = \"test\";\n     return 42i32;\n }\n@@ -371,7 +371,7 @@ fn foo() -> std::result::Result<i32<|>, String> {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> Result<i32<|>, String> {\n+fn foo() -> Result<i32$0, String> {\n     let test = \"test\";\n     return 42i32;\n }\n@@ -385,7 +385,7 @@ fn foo() -> Result<i32<|>, String> {\n             wrap_return_type_in_result,\n             r#\"\n fn foo() {\n-    || -> Result<i32<|>, String> {\n+    || -> Result<i32$0, String> {\n         let test = \"test\";\n         return 42i32;\n     };\n@@ -399,7 +399,7 @@ fn foo() {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> <|>i32 {\n+fn foo() -> $0i32 {\n     let test = \"test\";\n     return 42i32;\n }\n@@ -418,7 +418,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -><|> i32 {\n+fn foo() ->$0 i32 {\n     let test = \"test\";\n     42i32\n }\n@@ -438,7 +438,7 @@ fn foo() -> Result<i32, ${0:_}> {\n             wrap_return_type_in_result,\n             r#\"\n fn foo() {\n-    || -><|> i32 {\n+    || ->$0 i32 {\n         let test = \"test\";\n         42i32\n     };\n@@ -459,7 +459,7 @@ fn foo() {\n     fn wrap_return_type_in_result_simple_with_tail_only() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> { 42i32 }\"#,\n+            r#\"fn foo() -> i32$0 { 42i32 }\"#,\n             r#\"fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\"#,\n         );\n     }\n@@ -469,7 +469,7 @@ fn foo() {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     if true {\n         42i32\n     } else {\n@@ -495,7 +495,7 @@ fn foo() -> Result<i32, ${0:_}> {\n             wrap_return_type_in_result,\n             r#\"\n fn foo() {\n-    || -> i32<|> {\n+    || -> i32$0 {\n         if true {\n             42i32\n         } else {\n@@ -523,7 +523,7 @@ fn foo() {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     if true {\n         if false {\n             1\n@@ -556,7 +556,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-async fn foo() -> i<|>32 {\n+async fn foo() -> i$032 {\n     if true {\n         if false {\n             1.await\n@@ -588,7 +588,7 @@ async fn foo() -> Result<i32, ${0:_}> {\n     fn wrap_return_type_in_result_simple_with_array() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> [i32;<|> 3] { [1, 2, 3] }\"#,\n+            r#\"fn foo() -> [i32;$0 3] { [1, 2, 3] }\"#,\n             r#\"fn foo() -> Result<[i32; 3], ${0:_}> { Ok([1, 2, 3]) }\"#,\n         );\n     }\n@@ -598,7 +598,7 @@ async fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -<|>> i32 {\n+fn foo() -$0> i32 {\n     if true {\n         if false {\n             1 as i32\n@@ -631,7 +631,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     let my_var = 5;\n     match my_var {\n         5 => 42i32,\n@@ -656,7 +656,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     let my_var = 5;\n     loop {\n         println!(\"test\");\n@@ -683,7 +683,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     let my_var = let x = loop {\n         break 1;\n     };\n@@ -706,7 +706,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     let my_var = 5;\n     let res = match my_var {\n         5 => 42i32,\n@@ -730,7 +730,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     let my_var = 5;\n     let res = if my_var == 5 {\n         42i32\n@@ -759,7 +759,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     let my_var = 5;\n     match my_var {\n         5 => {\n@@ -808,7 +808,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i<|>32 {\n+fn foo() -> i$032 {\n     let test = \"test\";\n     if test == \"test\" {\n         return 24i32;\n@@ -833,7 +833,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo(the_field: u32) -><|> u32 {\n+fn foo(the_field: u32) ->$0 u32 {\n     let true_closure = || { return true; };\n     if the_field < 5 {\n         let mut i = 0;\n@@ -865,7 +865,7 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-            fn foo(the_field: u32) -> u32<|> {\n+            fn foo(the_field: u32) -> u32$0 {\n                 let true_closure = || {\n                     return true;\n                 };\n@@ -912,7 +912,7 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     let test = \"test\";\n     if test == \"test\" {\n         return 24i32;\n@@ -946,7 +946,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i32<|> {\n+fn foo() -> i32$0 {\n     let test = \"test\";\n     if test == \"test\" {\n         return 24i32;\n@@ -984,7 +984,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> i3<|>2 {\n+fn foo() -> i3$02 {\n     let test = \"test\";\n     let other = 5;\n     if test == \"test\" {\n@@ -1030,7 +1030,7 @@ fn foo() -> Result<i32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo(the_field: u32) -> u32<|> {\n+fn foo(the_field: u32) -> u32$0 {\n     if the_field < 5 {\n         let mut i = 0;\n         loop {\n@@ -1070,7 +1070,7 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo(the_field: u32) -> u3<|>2 {\n+fn foo(the_field: u32) -> u3$02 {\n     if the_field < 5 {\n         let mut i = 0;\n         match i {\n@@ -1098,7 +1098,7 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo(the_field: u32) -> u32<|> {\n+fn foo(the_field: u32) -> u32$0 {\n     if the_field < 5 {\n         let mut i = 0;\n         if i == 5 {\n@@ -1128,7 +1128,7 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n         check_assist(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo(the_field: u32) -> <|>u32 {\n+fn foo(the_field: u32) -> $0u32 {\n     if the_field < 5 {\n         let mut i = 0;\n         if i == 5 {"}, {"sha": "fef29a0b8bf8fe6d3ff66d281e0f9d093e103470", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -166,7 +166,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n \n #[test]\n fn assist_order_field_struct() {\n-    let before = \"struct Foo { <|>bar: u32 }\";\n+    let before = \"struct Foo { $0bar: u32 }\";\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n@@ -181,7 +181,7 @@ fn assist_order_field_struct() {\n fn assist_order_if_expr() {\n     let before = \"\n     pub fn test_some_range(a: int) -> bool {\n-        if let 2..6 = <|>5<|> {\n+        if let 2..6 = $05$0 {\n             true\n         } else {\n             false\n@@ -201,7 +201,7 @@ fn assist_order_if_expr() {\n fn assist_filter_works() {\n     let before = \"\n     pub fn test_some_range(a: int) -> bool {\n-        if let 2..6 = <|>5<|> {\n+        if let 2..6 = $05$0 {\n             true\n         } else {\n             false"}, {"sha": "e28837b536de68eb48be3f0e266c00d923c11147", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -8,7 +8,7 @@ fn doctest_add_explicit_type() {\n         \"add_explicit_type\",\n         r#####\"\n fn main() {\n-    let x<|> = 92;\n+    let x$0 = 92;\n }\n \"#####,\n         r#####\"\n@@ -25,7 +25,7 @@ fn doctest_add_hash() {\n         \"add_hash\",\n         r#####\"\n fn main() {\n-    r#\"Hello,<|> World!\"#;\n+    r#\"Hello,$0 World!\"#;\n }\n \"#####,\n         r#####\"\n@@ -49,7 +49,7 @@ trait Trait {\n \n impl Trait for () {\n     type X = ();\n-    fn foo(&self) {}<|>\n+    fn foo(&self) {}$0\n \n }\n \"#####,\n@@ -81,7 +81,7 @@ trait Trait<T> {\n     fn bar(&self) {}\n }\n \n-impl Trait<u32> for () {<|>\n+impl Trait<u32> for () {$0\n \n }\n \"#####,\n@@ -110,7 +110,7 @@ fn doctest_add_turbo_fish() {\n         r#####\"\n fn make<T>() -> T { todo!() }\n fn main() {\n-    let x = make<|>();\n+    let x = make$0();\n }\n \"#####,\n         r#####\"\n@@ -128,7 +128,7 @@ fn doctest_apply_demorgan() {\n         \"apply_demorgan\",\n         r#####\"\n fn main() {\n-    if x != 4 ||<|> !y {}\n+    if x != 4 ||$0 !y {}\n }\n \"#####,\n         r#####\"\n@@ -145,7 +145,7 @@ fn doctest_auto_import() {\n         \"auto_import\",\n         r#####\"\n fn main() {\n-    let map = HashMap<|>::new();\n+    let map = HashMap$0::new();\n }\n pub mod std { pub mod collections { pub struct HashMap { } } }\n \"#####,\n@@ -165,7 +165,7 @@ fn doctest_change_visibility() {\n     check_doc_test(\n         \"change_visibility\",\n         r#####\"\n-<|>fn frobnicate() {}\n+$0fn frobnicate() {}\n \"#####,\n         r#####\"\n pub(crate) fn frobnicate() {}\n@@ -178,7 +178,7 @@ fn doctest_convert_integer_literal() {\n     check_doc_test(\n         \"convert_integer_literal\",\n         r#####\"\n-const _: i32 = 10<|>;\n+const _: i32 = 10$0;\n \"#####,\n         r#####\"\n const _: i32 = 0b1010;\n@@ -192,7 +192,7 @@ fn doctest_convert_to_guarded_return() {\n         \"convert_to_guarded_return\",\n         r#####\"\n fn main() {\n-    <|>if cond {\n+    $0if cond {\n         foo();\n         bar();\n     }\n@@ -220,7 +220,7 @@ mod foo {\n     pub struct Baz;\n }\n \n-use foo::*<|>;\n+use foo::*$0;\n \n fn qux(bar: Bar, baz: Baz) {}\n \"#####,\n@@ -242,7 +242,7 @@ fn doctest_extract_struct_from_enum_variant() {\n     check_doc_test(\n         \"extract_struct_from_enum_variant\",\n         r#####\"\n-enum A { <|>One(u32, u32) }\n+enum A { $0One(u32, u32) }\n \"#####,\n         r#####\"\n struct One(pub u32, pub u32);\n@@ -258,7 +258,7 @@ fn doctest_extract_variable() {\n         \"extract_variable\",\n         r#####\"\n fn main() {\n-    <|>(1 + 2)<|> * 4;\n+    $0(1 + 2)$0 * 4;\n }\n \"#####,\n         r#####\"\n@@ -279,7 +279,7 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        <|>\n+        $0\n     }\n }\n \"#####,\n@@ -305,7 +305,7 @@ mod m {\n     fn frobnicate() {}\n }\n fn main() {\n-    m::frobnicate<|>() {}\n+    m::frobnicate$0() {}\n }\n \"#####,\n         r#####\"\n@@ -325,7 +325,7 @@ fn doctest_flip_binexpr() {\n         \"flip_binexpr\",\n         r#####\"\n fn main() {\n-    let _ = 90 +<|> 2;\n+    let _ = 90 +$0 2;\n }\n \"#####,\n         r#####\"\n@@ -342,7 +342,7 @@ fn doctest_flip_comma() {\n         \"flip_comma\",\n         r#####\"\n fn main() {\n-    ((1, 2),<|> (3, 4));\n+    ((1, 2),$0 (3, 4));\n }\n \"#####,\n         r#####\"\n@@ -358,7 +358,7 @@ fn doctest_flip_trait_bound() {\n     check_doc_test(\n         \"flip_trait_bound\",\n         r#####\"\n-fn foo<T: Clone +<|> Copy>() { }\n+fn foo<T: Clone +$0 Copy>() { }\n \"#####,\n         r#####\"\n fn foo<T: Copy + Clone>() { }\n@@ -373,7 +373,7 @@ fn doctest_generate_default_from_enum_variant() {\n         r#####\"\n enum Version {\n  Undefined,\n- Minor<|>,\n+ Minor$0,\n  Major,\n }\n \"#####,\n@@ -400,7 +400,7 @@ fn doctest_generate_derive() {\n         r#####\"\n struct Point {\n     x: u32,\n-    y: u32,<|>\n+    y: u32,$0\n }\n \"#####,\n         r#####\"\n@@ -418,7 +418,7 @@ fn doctest_generate_from_impl_for_enum() {\n     check_doc_test(\n         \"generate_from_impl_for_enum\",\n         r#####\"\n-enum A { <|>One(u32) }\n+enum A { $0One(u32) }\n \"#####,\n         r#####\"\n enum A { One(u32) }\n@@ -440,7 +440,7 @@ fn doctest_generate_function() {\n struct Baz;\n fn baz() -> Baz { Baz }\n fn foo() {\n-    bar<|>(\"\", baz());\n+    bar$0(\"\", baz());\n }\n \n \"#####,\n@@ -465,7 +465,7 @@ fn doctest_generate_impl() {\n         \"generate_impl\",\n         r#####\"\n struct Ctx<T: Clone> {\n-    data: T,<|>\n+    data: T,$0\n }\n \"#####,\n         r#####\"\n@@ -486,7 +486,7 @@ fn doctest_generate_new() {\n         \"generate_new\",\n         r#####\"\n struct Ctx<T: Clone> {\n-     data: T,<|>\n+     data: T,$0\n }\n \"#####,\n         r#####\"\n@@ -507,7 +507,7 @@ fn doctest_infer_function_return_type() {\n     check_doc_test(\n         \"infer_function_return_type\",\n         r#####\"\n-fn foo() { 4<|>2i32 }\n+fn foo() { 4$02i32 }\n \"#####,\n         r#####\"\n fn foo() -> i32 { 42i32 }\n@@ -522,7 +522,7 @@ fn doctest_inline_function() {\n         r#####\"\n fn add(a: u32, b: u32) -> u32 { a + b }\n fn main() {\n-    let x = add<|>(1, 2);\n+    let x = add$0(1, 2);\n }\n \"#####,\n         r#####\"\n@@ -544,7 +544,7 @@ fn doctest_inline_local_variable() {\n         \"inline_local_variable\",\n         r#####\"\n fn main() {\n-    let x<|> = 1 + 2;\n+    let x$0 = 1 + 2;\n     x * 4;\n }\n \"#####,\n@@ -561,7 +561,7 @@ fn doctest_introduce_named_lifetime() {\n     check_doc_test(\n         \"introduce_named_lifetime\",\n         r#####\"\n-impl Cursor<'_<|>> {\n+impl Cursor<'_$0> {\n     fn node(self) -> &SyntaxNode {\n         match self {\n             Cursor::Replace(node) | Cursor::Before(node) => node,\n@@ -587,7 +587,7 @@ fn doctest_invert_if() {\n         \"invert_if\",\n         r#####\"\n fn main() {\n-    if<|> !y { A } else { B }\n+    if$0 !y { A } else { B }\n }\n \"#####,\n         r#####\"\n@@ -604,7 +604,7 @@ fn doctest_make_raw_string() {\n         \"make_raw_string\",\n         r#####\"\n fn main() {\n-    \"Hello,<|> World!\";\n+    \"Hello,$0 World!\";\n }\n \"#####,\n         r#####\"\n@@ -621,7 +621,7 @@ fn doctest_make_usual_string() {\n         \"make_usual_string\",\n         r#####\"\n fn main() {\n-    r#\"Hello,<|> \"World!\"\"#;\n+    r#\"Hello,$0 \"World!\"\"#;\n }\n \"#####,\n         r#####\"\n@@ -637,7 +637,7 @@ fn doctest_merge_imports() {\n     check_doc_test(\n         \"merge_imports\",\n         r#####\"\n-use std::<|>fmt::Formatter;\n+use std::$0fmt::Formatter;\n use std::io;\n \"#####,\n         r#####\"\n@@ -655,7 +655,7 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        <|>Action::Move(..) => foo(),\n+        $0Action::Move(..) => foo(),\n         Action::Stop => foo(),\n     }\n }\n@@ -681,7 +681,7 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => <|>if distance > 10 { foo() },\n+        Action::Move { distance } => $0if distance > 10 { foo() },\n         _ => (),\n     }\n }\n@@ -704,7 +704,7 @@ fn doctest_move_bounds_to_where_clause() {\n     check_doc_test(\n         \"move_bounds_to_where_clause\",\n         r#####\"\n-fn apply<T, U, <|>F: FnOnce(T) -> U>(f: F, x: T) -> U {\n+fn apply<T, U, $0F: FnOnce(T) -> U>(f: F, x: T) -> U {\n     f(x)\n }\n \"#####,\n@@ -725,7 +725,7 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } <|>if distance > 10 => foo(),\n+        Action::Move { distance } $0if distance > 10 => foo(),\n         _ => (),\n     }\n }\n@@ -750,7 +750,7 @@ fn doctest_move_module_to_file() {\n     check_doc_test(\n         \"move_module_to_file\",\n         r#####\"\n-mod <|>foo {\n+mod $0foo {\n     fn t() {}\n }\n \"#####,\n@@ -769,7 +769,7 @@ fn main() {\n     let mut foo = 6;\n \n     if true {\n-        <|>foo = 5;\n+        $0foo = 5;\n     } else {\n         foo = 4;\n     }\n@@ -795,7 +795,7 @@ fn doctest_qualify_path() {\n         \"qualify_path\",\n         r#####\"\n fn main() {\n-    let map = HashMap<|>::new();\n+    let map = HashMap$0::new();\n }\n pub mod std { pub mod collections { pub struct HashMap { } } }\n \"#####,\n@@ -814,7 +814,7 @@ fn doctest_remove_dbg() {\n         \"remove_dbg\",\n         r#####\"\n fn main() {\n-    <|>dbg!(92);\n+    $0dbg!(92);\n }\n \"#####,\n         r#####\"\n@@ -831,7 +831,7 @@ fn doctest_remove_hash() {\n         \"remove_hash\",\n         r#####\"\n fn main() {\n-    r#\"Hello,<|> World!\"#;\n+    r#\"Hello,$0 World!\"#;\n }\n \"#####,\n         r#####\"\n@@ -848,7 +848,7 @@ fn doctest_remove_mut() {\n         \"remove_mut\",\n         r#####\"\n impl Walrus {\n-    fn feed(&mut<|> self, amount: u32) {}\n+    fn feed(&mut$0 self, amount: u32) {}\n }\n \"#####,\n         r#####\"\n@@ -864,7 +864,7 @@ fn doctest_remove_unused_param() {\n     check_doc_test(\n         \"remove_unused_param\",\n         r#####\"\n-fn frobnicate(x: i32<|>) {}\n+fn frobnicate(x: i32$0) {}\n \n fn main() {\n     frobnicate(92);\n@@ -886,7 +886,7 @@ fn doctest_reorder_fields() {\n         \"reorder_fields\",\n         r#####\"\n struct Foo {foo: i32, bar: i32};\n-const test: Foo = <|>Foo {bar: 0, foo: 1}\n+const test: Foo = $0Foo {bar: 0, foo: 1}\n \"#####,\n         r#####\"\n struct Foo {foo: i32, bar: i32};\n@@ -901,7 +901,7 @@ fn doctest_replace_derive_with_manual_impl() {\n         \"replace_derive_with_manual_impl\",\n         r#####\"\n trait Debug { fn fmt(&self, f: &mut Formatter) -> Result<()>; }\n-#[derive(Deb<|>ug, Display)]\n+#[derive(Deb$0ug, Display)]\n struct S;\n \"#####,\n         r#####\"\n@@ -926,7 +926,7 @@ fn doctest_replace_if_let_with_match() {\n enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n-    <|>if let Action::Move { distance } = action {\n+    $0if let Action::Move { distance } = action {\n         foo(distance)\n     } else {\n         bar()\n@@ -951,7 +951,7 @@ fn doctest_replace_impl_trait_with_generic() {\n     check_doc_test(\n         \"replace_impl_trait_with_generic\",\n         r#####\"\n-fn foo(bar: <|>impl Bar) {}\n+fn foo(bar: $0impl Bar) {}\n \"#####,\n         r#####\"\n fn foo<B: Bar>(bar: B) {}\n@@ -967,7 +967,7 @@ fn doctest_replace_let_with_if_let() {\n enum Option<T> { Some(T), None }\n \n fn main(action: Action) {\n-    <|>let x = compute();\n+    $0let x = compute();\n }\n \n fn compute() -> Option<i32> { None }\n@@ -993,7 +993,7 @@ fn doctest_replace_match_with_if_let() {\n enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n-    <|>match action {\n+    $0match action {\n         Action::Move { distance } => foo(distance),\n         _ => bar(),\n     }\n@@ -1018,7 +1018,7 @@ fn doctest_replace_qualified_name_with_use() {\n     check_doc_test(\n         \"replace_qualified_name_with_use\",\n         r#####\"\n-fn process(map: std::collections::<|>HashMap<String, String>) {}\n+fn process(map: std::collections::$0HashMap<String, String>) {}\n \"#####,\n         r#####\"\n use std::collections::HashMap;\n@@ -1034,7 +1034,7 @@ fn doctest_replace_string_with_char() {\n         \"replace_string_with_char\",\n         r#####\"\n fn main() {\n-    find(\"{<|>\");\n+    find(\"{$0\");\n }\n \"#####,\n         r#####\"\n@@ -1053,7 +1053,7 @@ fn doctest_replace_unwrap_with_match() {\n enum Result<T, E> { Ok(T), Err(E) }\n fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n-    let y = x.<|>unwrap();\n+    let y = x.$0unwrap();\n }\n \"#####,\n         r#####\"\n@@ -1074,7 +1074,7 @@ fn doctest_split_import() {\n     check_doc_test(\n         \"split_import\",\n         r#####\"\n-use std::<|>collections::HashMap;\n+use std::$0collections::HashMap;\n \"#####,\n         r#####\"\n use std::{collections::HashMap};\n@@ -1087,7 +1087,7 @@ fn doctest_toggle_ignore() {\n     check_doc_test(\n         \"toggle_ignore\",\n         r#####\"\n-<|>#[test]\n+$0#[test]\n fn arithmetics {\n     assert_eq!(2 + 2, 5);\n }\n@@ -1108,7 +1108,7 @@ fn doctest_unwrap_block() {\n         \"unwrap_block\",\n         r#####\"\n fn foo() {\n-    if true {<|>\n+    if true {$0\n         println!(\"foo\");\n     }\n }\n@@ -1126,7 +1126,7 @@ fn doctest_wrap_return_type_in_result() {\n     check_doc_test(\n         \"wrap_return_type_in_result\",\n         r#####\"\n-fn foo() -> i32<|> { 42i32 }\n+fn foo() -> i32$0 { 42i32 }\n \"#####,\n         r#####\"\n fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }"}, {"sha": "10739750c717840464194b37342c93a6692a47c3", "filename": "crates/completion/src/completions/attribute.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -413,7 +413,7 @@ mod tests {\n     fn empty_derive_completion() {\n         check(\n             r#\"\n-#[derive(<|>)]\n+#[derive($0)]\n struct Test {}\n         \"#,\n             expect![[r#\"\n@@ -434,7 +434,7 @@ struct Test {}\n     fn no_completion_for_incorrect_derive() {\n         check(\n             r#\"\n-#[derive{<|>)]\n+#[derive{$0)]\n struct Test {}\n \"#,\n             expect![[r#\"\"#]],\n@@ -445,7 +445,7 @@ struct Test {}\n     fn derive_with_input_completion() {\n         check(\n             r#\"\n-#[derive(serde::Serialize, PartialEq, <|>)]\n+#[derive(serde::Serialize, PartialEq, $0)]\n struct Test {}\n \"#,\n             expect![[r#\"\n@@ -464,7 +464,7 @@ struct Test {}\n     #[test]\n     fn test_attribute_completion() {\n         check(\n-            r#\"#[<|>]\"#,\n+            r#\"#[$0]\"#,\n             expect![[r#\"\n                 at allow(\u2026)\n                 at automatically_derived\n@@ -504,13 +504,13 @@ struct Test {}\n \n     #[test]\n     fn test_attribute_completion_inside_nested_attr() {\n-        check(r#\"#[cfg(<|>)]\"#, expect![[]])\n+        check(r#\"#[cfg($0)]\"#, expect![[]])\n     }\n \n     #[test]\n     fn test_inner_attribute_completion() {\n         check(\n-            r\"#![<|>]\",\n+            r\"#![$0]\",\n             expect![[r#\"\n                 at allow(\u2026)\n                 at automatically_derived"}, {"sha": "2e25c8ba21782a7e2a7fbf825ebc5ca0f185573f", "filename": "crates/completion/src/completions/dot.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fdot.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -79,7 +79,7 @@ struct S { foo: u32 }\n impl S {\n     fn bar(&self) {}\n }\n-fn foo(s: S) { s.<|> }\n+fn foo(s: S) { s.$0 }\n \"#,\n             expect![[r#\"\n                 fd foo   u32\n@@ -94,7 +94,7 @@ fn foo(s: S) { s.<|> }\n             r#\"\n struct S { the_field: (u32,) }\n impl S {\n-    fn foo(self) { self.<|> }\n+    fn foo(self) { self.$0 }\n }\n \"#,\n             expect![[r#\"\n@@ -110,7 +110,7 @@ impl S {\n             r#\"\n struct A { the_field: (u32, i32) }\n impl A {\n-    fn foo(&self) { self.<|> }\n+    fn foo(&self) { self.$0 }\n }\n \"#,\n             expect![[r#\"\n@@ -126,7 +126,7 @@ impl A {\n         check(\n             r#\"\n struct A { the_field: u32 }\n-fn foo(a: A) { a.<|>() }\n+fn foo(a: A) { a.$0() }\n \"#,\n             expect![[\"\"]],\n         );\n@@ -144,7 +144,7 @@ mod inner {\n         pub(crate) super_field: u32,\n     }\n }\n-fn foo(a: inner::A) { a.<|> }\n+fn foo(a: inner::A) { a.$0 }\n \"#,\n             expect![[r#\"\n                 fd pub_field   u32\n@@ -162,7 +162,7 @@ mod m {\n         pub(crate) fn the_method(&self) {}\n     }\n }\n-fn foo(a: A) { a.<|> }\n+fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n                 me the_method() pub(crate) fn the_method(&self)\n@@ -175,7 +175,7 @@ fn foo(a: A) { a.<|> }\n         check(\n             r#\"\n union U { field: u8, other: u16 }\n-fn foo(u: U) { u.<|> }\n+fn foo(u: U) { u.$0 }\n \"#,\n             expect![[r#\"\n                 fd field u8\n@@ -195,7 +195,7 @@ impl A<u32> {\n impl A<i32> {\n     fn the_other_method(&self) {}\n }\n-fn foo(a: A<u32>) { a.<|> }\n+fn foo(a: A<u32>) { a.$0 }\n \"#,\n             expect![[r#\"\n                 me the_method() fn the_method(&self)\n@@ -210,7 +210,7 @@ fn foo(a: A<u32>) { a.<|> }\n struct A {}\n trait Trait { fn the_method(&self); }\n impl Trait for A {}\n-fn foo(a: A) { a.<|> }\n+fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n                 me the_method() fn the_method(&self)\n@@ -225,7 +225,7 @@ fn foo(a: A) { a.<|> }\n struct A {}\n trait Trait { fn the_method(&self); }\n impl<T> Trait for T {}\n-fn foo(a: &A) { a.<|> }\n+fn foo(a: &A) { a.$0 }\n \",\n             expect![[r#\"\n                 me the_method() fn the_method(&self)\n@@ -243,7 +243,7 @@ mod m {\n }\n use m::Trait;\n impl Trait for A {}\n-fn foo(a: A) { a.<|> }\n+fn foo(a: A) { a.$0 }\n \",\n             expect![[r#\"\n                 me the_method() fn the_method(&self)\n@@ -260,7 +260,7 @@ impl A {\n     fn the_method() {}\n }\n fn foo(a: A) {\n-   a.<|>\n+   a.$0\n }\n \"#,\n             expect![[\"\"]],\n@@ -273,7 +273,7 @@ fn foo(a: A) {\n             r#\"\n fn foo() {\n    let b = (0, 3.14);\n-   b.<|>\n+   b.$0\n }\n \"#,\n             expect![[r#\"\n@@ -295,7 +295,7 @@ struct T(S);\n impl T {\n     fn foo(&self) {\n         // FIXME: This doesn't work without the trailing `a` as `0.` is a float\n-        self.0.a<|>\n+        self.0.a$0\n     }\n }\n \"#,\n@@ -311,7 +311,7 @@ impl T {\n             r#\"\n struct A { the_field: u32 }\n const X: u32 = {\n-    A { the_field: 92 }.<|>\n+    A { the_field: 92 }.$0\n };\n \"#,\n             expect![[r#\"\n@@ -327,7 +327,7 @@ const X: u32 = {\n macro_rules! m { ($e:expr) => { $e } }\n struct A { the_field: u32 }\n fn foo(a: A) {\n-    m!(a.x<|>)\n+    m!(a.x$0)\n }\n \"#,\n             expect![[r#\"\n@@ -344,7 +344,7 @@ fn foo(a: A) {\n macro_rules! m { ($e:expr) => { $e } }\n struct A { the_field: u32 }\n fn foo(a: A) {\n-    m!(a.<|>)\n+    m!(a.$0)\n }\n \"#,\n             expect![[r#\"\n@@ -360,7 +360,7 @@ fn foo(a: A) {\n macro_rules! m { ($e:expr) => { $e } }\n struct A { the_field: u32 }\n fn foo(a: A) {\n-    m!(m!(m!(a.x<|>)))\n+    m!(m!(m!(a.x$0)))\n }\n \"#,\n             expect![[r#\"\n@@ -386,7 +386,7 @@ macro_rules! dbg {\n }\n struct A { the_field: u32 }\n fn foo(a: A) {\n-    dbg!(a.<|>)\n+    dbg!(a.$0)\n }\n \"#,\n             expect![[r#\"\n@@ -405,7 +405,7 @@ impl<T> HashSet<T> {\n }\n fn foo() {\n     let s: HashSet<_>;\n-    s.<|>\n+    s.$0\n }\n \"#,\n             expect![[r#\"\n@@ -421,7 +421,7 @@ fn foo() {\n struct S;\n impl S { fn foo(&self) {} }\n macro_rules! make_s { () => { S }; }\n-fn main() { make_s!().f<|>; }\n+fn main() { make_s!().f$0; }\n \"#,\n             expect![[r#\"\n                 me foo() fn foo(&self)"}, {"sha": "5505c35594326387ecc976e38acc0556b4a059d4", "filename": "crates/completion/src/completions/fn_param.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -81,7 +81,7 @@ mod tests {\n             r#\"\n fn foo(file_id: FileId) {}\n fn bar(file_id: FileId) {}\n-fn baz(file<|>) {}\n+fn baz(file$0) {}\n \"#,\n             expect![[r#\"\n                 bn file_id: FileId\n@@ -94,7 +94,7 @@ fn baz(file<|>) {}\n         check(\n             r#\"\n fn foo(file_id: FileId) {}\n-fn baz(file<|>, x: i32) {}\n+fn baz(file$0, x: i32) {}\n \"#,\n             expect![[r#\"\n                 bn file_id: FileId\n@@ -110,7 +110,7 @@ pub(crate) trait SourceRoot {\n     pub fn contains(&self, file_id: FileId) -> bool;\n     pub fn module_map(&self) -> &ModuleMap;\n     pub fn lines(&self, file_id: FileId) -> &LineIndex;\n-    pub fn syntax(&self, file<|>)\n+    pub fn syntax(&self, file$0)\n }\n \"#,\n             expect![[r#\"\n@@ -124,7 +124,7 @@ pub(crate) trait SourceRoot {\n         check(\n             r#\"\n fn outer(text: String) {\n-    fn inner(<|>)\n+    fn inner($0)\n }\n \"#,\n             expect![[r#\""}, {"sha": "425a688ffdd7353e671b37609373ef3f7a3dbb43", "filename": "crates/completion/src/completions/keyword.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -193,7 +193,7 @@ mod tests {\n     #[test]\n     fn test_keywords_in_use_stmt() {\n         check(\n-            r\"use <|>\",\n+            r\"use $0\",\n             expect![[r#\"\n                 kw crate::\n                 kw self\n@@ -202,15 +202,15 @@ mod tests {\n         );\n \n         check(\n-            r\"use a::<|>\",\n+            r\"use a::$0\",\n             expect![[r#\"\n                 kw self\n                 kw super::\n             \"#]],\n         );\n \n         check(\n-            r\"use a::{b, <|>}\",\n+            r\"use a::{b, $0}\",\n             expect![[r#\"\n                 kw self\n                 kw super::\n@@ -221,7 +221,7 @@ mod tests {\n     #[test]\n     fn test_keywords_at_source_file_level() {\n         check(\n-            r\"m<|>\",\n+            r\"m$0\",\n             expect![[r#\"\n                 kw fn\n                 kw use\n@@ -245,7 +245,7 @@ mod tests {\n     #[test]\n     fn test_keywords_in_function() {\n         check(\n-            r\"fn quux() { <|> }\",\n+            r\"fn quux() { $0 }\",\n             expect![[r#\"\n                 kw fn\n                 kw use\n@@ -271,7 +271,7 @@ mod tests {\n     #[test]\n     fn test_keywords_inside_block() {\n         check(\n-            r\"fn quux() { if true { <|> } }\",\n+            r\"fn quux() { if true { $0 } }\",\n             expect![[r#\"\n                 kw fn\n                 kw use\n@@ -297,7 +297,7 @@ mod tests {\n     #[test]\n     fn test_keywords_after_if() {\n         check(\n-            r#\"fn quux() { if true { () } <|> }\"#,\n+            r#\"fn quux() { if true { () } $0 }\"#,\n             expect![[r#\"\n                 kw fn\n                 kw use\n@@ -322,7 +322,7 @@ mod tests {\n         );\n         check_edit(\n             \"else\",\n-            r#\"fn quux() { if true { () } <|> }\"#,\n+            r#\"fn quux() { if true { () } $0 }\"#,\n             r#\"fn quux() { if true { () } else {$0} }\"#,\n         );\n     }\n@@ -332,7 +332,7 @@ mod tests {\n         check(\n             r#\"\n fn quux() -> i32 {\n-    match () { () => <|> }\n+    match () { () => $0 }\n }\n \"#,\n             expect![[r#\"\n@@ -350,7 +350,7 @@ fn quux() -> i32 {\n     #[test]\n     fn test_keywords_in_trait_def() {\n         check(\n-            r\"trait My { <|> }\",\n+            r\"trait My { $0 }\",\n             expect![[r#\"\n                 kw fn\n                 kw const\n@@ -363,7 +363,7 @@ fn quux() -> i32 {\n     #[test]\n     fn test_keywords_in_impl_def() {\n         check(\n-            r\"impl My { <|> }\",\n+            r\"impl My { $0 }\",\n             expect![[r#\"\n                 kw fn\n                 kw const\n@@ -378,7 +378,7 @@ fn quux() -> i32 {\n     #[test]\n     fn test_keywords_in_loop() {\n         check(\n-            r\"fn my() { loop { <|> } }\",\n+            r\"fn my() { loop { $0 } }\",\n             expect![[r#\"\n                 kw fn\n                 kw use\n@@ -406,7 +406,7 @@ fn quux() -> i32 {\n     #[test]\n     fn test_keywords_after_unsafe_in_item_list() {\n         check(\n-            r\"unsafe <|>\",\n+            r\"unsafe $0\",\n             expect![[r#\"\n                 kw fn\n                 kw trait\n@@ -418,7 +418,7 @@ fn quux() -> i32 {\n     #[test]\n     fn test_keywords_after_unsafe_in_block_expr() {\n         check(\n-            r\"fn my_fn() { unsafe <|> }\",\n+            r\"fn my_fn() { unsafe $0 }\",\n             expect![[r#\"\n                 kw fn\n                 kw trait\n@@ -430,19 +430,19 @@ fn quux() -> i32 {\n     #[test]\n     fn test_mut_in_ref_and_in_fn_parameters_list() {\n         check(\n-            r\"fn my_fn(&<|>) {}\",\n+            r\"fn my_fn(&$0) {}\",\n             expect![[r#\"\n                 kw mut\n             \"#]],\n         );\n         check(\n-            r\"fn my_fn(<|>) {}\",\n+            r\"fn my_fn($0) {}\",\n             expect![[r#\"\n                 kw mut\n             \"#]],\n         );\n         check(\n-            r\"fn my_fn() { let &<|> }\",\n+            r\"fn my_fn() { let &$0 }\",\n             expect![[r#\"\n                 kw mut\n             \"#]],\n@@ -452,13 +452,13 @@ fn quux() -> i32 {\n     #[test]\n     fn test_where_keyword() {\n         check(\n-            r\"trait A <|>\",\n+            r\"trait A $0\",\n             expect![[r#\"\n                 kw where\n             \"#]],\n         );\n         check(\n-            r\"impl A <|>\",\n+            r\"impl A $0\",\n             expect![[r#\"\n                 kw where\n             \"#]],\n@@ -471,23 +471,23 @@ fn quux() -> i32 {\n         check(\n             r#\"\n fn test() {\n-    let x = 2; // A comment<|>\n+    let x = 2; // A comment$0\n }\n \"#,\n             expect![[\"\"]],\n         );\n         check(\n             r#\"\n /*\n-Some multi-line comment<|>\n+Some multi-line comment$0\n */\n \"#,\n             expect![[\"\"]],\n         );\n         check(\n             r#\"\n /// Some doc comment\n-/// let test<|> = 1\n+/// let test$0 = 1\n \"#,\n             expect![[\"\"]],\n         );\n@@ -501,7 +501,7 @@ Some multi-line comment<|>\n use std::future::*;\n struct A {}\n impl Future for A {}\n-fn foo(a: A) { a.<|> }\n+fn foo(a: A) { a.$0 }\n \n //- /std/lib.rs crate:std\n pub mod future {\n@@ -520,7 +520,7 @@ pub mod future {\n use std::future::*;\n fn foo() {\n     let a = async {};\n-    a.<|>\n+    a.$0\n }\n \n //- /std/lib.rs crate:std\n@@ -540,7 +540,7 @@ pub mod future {\n     #[test]\n     fn after_let() {\n         check(\n-            r#\"fn main() { let _ = <|> }\"#,\n+            r#\"fn main() { let _ = $0 }\"#,\n             expect![[r#\"\n                 kw match\n                 kw while\n@@ -557,7 +557,7 @@ pub mod future {\n         check(\n             r#\"\n struct Foo {\n-    <|>\n+    $0\n     pub f: i32,\n }\n \"#,\n@@ -578,7 +578,7 @@ struct Foo {\n }\n fn foo() {\n     Foo {\n-        <|>\n+        $0\n     }\n }\n \"#,\n@@ -595,7 +595,7 @@ struct Foo {\n }\n fn foo() {\n     Foo {\n-        f: <|>\n+        f: $0\n     }\n }\n \"#,"}, {"sha": "2be299ac2188dc53942dfbfb0a409c878c8e49da", "filename": "crates/completion/src/completions/macro_in_item_position.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -31,7 +31,7 @@ mod tests {\n macro_rules! foo { () => {} }\n fn foo() {}\n \n-<|>\n+$0\n \"#,\n             expect![[r#\"\n                 ma foo!(\u2026) macro_rules! foo"}, {"sha": "8c8eaeaa6fbf8b671ecd2232e7a9353a0516679e", "filename": "crates/completion/src/completions/mod_.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -9,7 +9,7 @@ use crate::{CompletionItem, CompletionItemKind};\n \n use crate::{context::CompletionContext, item::CompletionKind, Completions};\n \n-/// Complete mod declaration, i.e. `mod <|> ;`\n+/// Complete mod declaration, i.e. `mod $0 ;`\n pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let mod_under_caret = match &ctx.mod_declaration_under_caret {\n         Some(mod_under_caret) if mod_under_caret.item_list().is_some() => return None,\n@@ -159,7 +159,7 @@ mod tests {\n         check(\n             r#\"\n             //- /lib.rs\n-            mod <|>\n+            mod $0\n             //- /foo.rs\n             fn foo() {}\n             //- /foo/ignored_foo.rs\n@@ -181,7 +181,7 @@ mod tests {\n         check(\n             r#\"\n             //- /lib.rs\n-            mod <|> {\n+            mod $0 {\n \n             }\n             //- /foo.rs\n@@ -196,7 +196,7 @@ mod tests {\n         check(\n             r#\"\n             //- /main.rs\n-            mod <|>\n+            mod $0\n             //- /foo.rs\n             fn foo() {}\n             //- /foo/ignored_foo.rs\n@@ -219,7 +219,7 @@ mod tests {\n             r#\"\n             //- /main.rs\n             mod tests {\n-                mod <|>;\n+                mod $0;\n             }\n             //- /tests/foo.rs\n             fn foo() {}\n@@ -237,7 +237,7 @@ mod tests {\n             //- /lib.rs\n             mod foo;\n             //- /foo.rs\n-            mod <|>;\n+            mod $0;\n             //- /foo/bar.rs\n             fn bar() {}\n             //- /foo/bar/ignored_bar.rs\n@@ -262,7 +262,7 @@ mod tests {\n             mod foo;\n             //- /foo.rs\n             mod bar {\n-                mod <|>\n+                mod $0\n             }\n             //- /foo/bar/baz.rs\n             fn baz() {}\n@@ -288,7 +288,7 @@ mod tests {\n     //         //- /src/bin.rs\n     //         fn main() {}\n     //         //- /src/bin/foo.rs\n-    //         mod <|>\n+    //         mod $0\n     //         //- /src/bin/bar.rs\n     //         fn bar() {}\n     //         //- /src/bin/bar/bar_ignored.rs\n@@ -307,7 +307,7 @@ mod tests {\n             //- /src/bin.rs crate:main\n             fn main() {}\n             //- /src/bin/foo.rs\n-            mod <|>\n+            mod $0\n             //- /src/bin/bar.rs\n             mod foo;\n             fn bar() {}"}, {"sha": "595160ff57aec89b48912c2817fc0b323de9d6e7", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -71,7 +71,7 @@ static FOO: E = E::X;\n struct Bar { f: u32 }\n \n fn foo() {\n-   match E::X { <|> }\n+   match E::X { $0 }\n }\n \"#,\n             expect![[r#\"\n@@ -92,7 +92,7 @@ macro_rules! m { ($e:expr) => { $e } }\n enum E { X }\n \n fn foo() {\n-   m!(match E::X { <|> })\n+   m!(match E::X { $0 })\n }\n \"#,\n             expect![[r#\"\n@@ -115,7 +115,7 @@ static FOO: E = E::X;\n struct Bar { f: u32 }\n \n fn foo() {\n-   let <|>\n+   let $0\n }\n \"#,\n             expect![[r#\"\n@@ -133,7 +133,7 @@ enum E { X }\n static FOO: E = E::X;\n struct Bar { f: u32 }\n \n-fn foo(<|>) {\n+fn foo($0) {\n }\n \"#,\n             expect![[r#\"\n@@ -149,7 +149,7 @@ fn foo(<|>) {\n struct Bar { f: u32 }\n \n fn foo() {\n-   let <|>\n+   let $0\n }\n \"#,\n             expect![[r#\"\n@@ -165,7 +165,7 @@ fn foo() {\n struct Foo { bar: String, baz: String }\n struct Bar(String, String);\n struct Baz;\n-fn outer(<|>) {}\n+fn outer($0) {}\n \"#,\n             expect![[r#\"\n                 bn Foo Foo { bar$1, baz$2 }: Foo$0\n@@ -182,7 +182,7 @@ struct Foo { bar: String, baz: String }\n struct Bar(String, String);\n struct Baz;\n fn outer() {\n-    let <|>\n+    let $0\n }\n \"#,\n             expect![[r#\"\n@@ -201,7 +201,7 @@ struct Bar(String, String);\n struct Baz;\n fn outer() {\n     match () {\n-        <|>\n+        $0\n     }\n }\n \"#,\n@@ -225,7 +225,7 @@ use foo::*;\n \n fn outer() {\n     match () {\n-        <|>\n+        $0\n     }\n }\n \"#,\n@@ -244,7 +244,7 @@ fn outer() {\n struct Foo(i32);\n fn main() {\n     match Foo(92) {\n-        <|>(92) => (),\n+        $0(92) => (),\n     }\n }\n \"#,"}, {"sha": "87f0c0b2acfe5ebcfe635dcc003f762b735d58aa", "filename": "crates/completion/src/completions/postfix.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -1,4 +1,4 @@\n-//! Postfix completions, like `Ok(10).ifl<|>` => `if let Ok() = Ok(10) { <|> }`.\n+//! Postfix completions, like `Ok(10).ifl$0` => `if let Ok() = Ok(10) { $0 }`.\n \n mod format_like;\n \n@@ -310,7 +310,7 @@ mod tests {\n             r#\"\n fn main() {\n     let bar = true;\n-    bar.<|>\n+    bar.$0\n }\n \"#,\n             expect![[r#\"\n@@ -342,7 +342,7 @@ fn foo(elt: bool) -> bool {\n \n fn main() {\n     let bar = true;\n-    foo(bar.<|>)\n+    foo(bar.$0)\n }\n \"#,\n             expect![[r#\"\n@@ -368,7 +368,7 @@ fn main() {\n             r#\"\n fn main() {\n     let bar: u8 = 12;\n-    bar.<|>\n+    bar.$0\n }\n \"#,\n             expect![[r#\"\n@@ -392,7 +392,7 @@ fn main() {\n         check(\n             r#\"\n fn main() {\n-    baz.l<|>\n+    baz.l$0\n     res\n }\n \"#,\n@@ -424,7 +424,7 @@ enum Option<T> { Some(T), None }\n \n fn main() {\n     let bar = Option::Some(true);\n-    bar.<|>\n+    bar.$0\n }\n \"#,\n             r#\"\n@@ -449,7 +449,7 @@ enum Result<T, E> { Ok(T), Err(E) }\n \n fn main() {\n     let bar = Result::Ok(true);\n-    bar.<|>\n+    bar.$0\n }\n \"#,\n             r#\"\n@@ -468,7 +468,7 @@ fn main() {\n \n     #[test]\n     fn postfix_completion_works_for_ambiguous_float_literal() {\n-        check_edit(\"refm\", r#\"fn main() { 42.<|> }\"#, r#\"fn main() { &mut 42 }\"#)\n+        check_edit(\"refm\", r#\"fn main() { 42.$0 }\"#, r#\"fn main() { &mut 42 }\"#)\n     }\n \n     #[test]\n@@ -479,7 +479,7 @@ fn main() {\n macro_rules! m { ($e:expr) => { $e } }\n fn main() {\n     let bar: u8 = 12;\n-    m!(bar.d<|>)\n+    m!(bar.d$0)\n }\n \"#,\n             r#\"\n@@ -494,55 +494,47 @@ fn main() {\n \n     #[test]\n     fn postfix_completion_for_references() {\n-        check_edit(\"dbg\", r#\"fn main() { &&42.<|> }\"#, r#\"fn main() { dbg!(&&42) }\"#);\n-        check_edit(\"refm\", r#\"fn main() { &&42.<|> }\"#, r#\"fn main() { &&&mut 42 }\"#);\n+        check_edit(\"dbg\", r#\"fn main() { &&42.$0 }\"#, r#\"fn main() { dbg!(&&42) }\"#);\n+        check_edit(\"refm\", r#\"fn main() { &&42.$0 }\"#, r#\"fn main() { &&&mut 42 }\"#);\n     }\n \n     #[test]\n     fn postfix_completion_for_format_like_strings() {\n         check_edit(\n             \"format\",\n-            r#\"fn main() { \"{some_var:?}\".<|> }\"#,\n+            r#\"fn main() { \"{some_var:?}\".$0 }\"#,\n             r#\"fn main() { format!(\"{:?}\", some_var) }\"#,\n         );\n         check_edit(\n             \"panic\",\n-            r#\"fn main() { \"Panic with {a}\".<|> }\"#,\n+            r#\"fn main() { \"Panic with {a}\".$0 }\"#,\n             r#\"fn main() { panic!(\"Panic with {}\", a) }\"#,\n         );\n         check_edit(\n             \"println\",\n-            r#\"fn main() { \"{ 2+2 } { SomeStruct { val: 1, other: 32 } :?}\".<|> }\"#,\n+            r#\"fn main() { \"{ 2+2 } { SomeStruct { val: 1, other: 32 } :?}\".$0 }\"#,\n             r#\"fn main() { println!(\"{} {:?}\", 2+2, SomeStruct { val: 1, other: 32 }) }\"#,\n         );\n         check_edit(\n             \"loge\",\n-            r#\"fn main() { \"{2+2}\".<|> }\"#,\n+            r#\"fn main() { \"{2+2}\".$0 }\"#,\n             r#\"fn main() { log::error!(\"{}\", 2+2) }\"#,\n         );\n         check_edit(\n             \"logt\",\n-            r#\"fn main() { \"{2+2}\".<|> }\"#,\n+            r#\"fn main() { \"{2+2}\".$0 }\"#,\n             r#\"fn main() { log::trace!(\"{}\", 2+2) }\"#,\n         );\n         check_edit(\n             \"logd\",\n-            r#\"fn main() { \"{2+2}\".<|> }\"#,\n+            r#\"fn main() { \"{2+2}\".$0 }\"#,\n             r#\"fn main() { log::debug!(\"{}\", 2+2) }\"#,\n         );\n-        check_edit(\n-            \"logi\",\n-            r#\"fn main() { \"{2+2}\".<|> }\"#,\n-            r#\"fn main() { log::info!(\"{}\", 2+2) }\"#,\n-        );\n-        check_edit(\n-            \"logw\",\n-            r#\"fn main() { \"{2+2}\".<|> }\"#,\n-            r#\"fn main() { log::warn!(\"{}\", 2+2) }\"#,\n-        );\n+        check_edit(\"logi\", r#\"fn main() { \"{2+2}\".$0 }\"#, r#\"fn main() { log::info!(\"{}\", 2+2) }\"#);\n+        check_edit(\"logw\", r#\"fn main() { \"{2+2}\".$0 }\"#, r#\"fn main() { log::warn!(\"{}\", 2+2) }\"#);\n         check_edit(\n             \"loge\",\n-            r#\"fn main() { \"{2+2}\".<|> }\"#,\n+            r#\"fn main() { \"{2+2}\".$0 }\"#,\n             r#\"fn main() { log::error!(\"{}\", 2+2) }\"#,\n         );\n     }"}, {"sha": "fa9e6e8100024c54e38f87ce51a97743e2ba1ae9", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -1,4 +1,4 @@\n-//! Completion of paths, i.e. `some::prefix::<|>`.\n+//! Completion of paths, i.e. `some::prefix::$0`.\n \n use hir::{Adt, HasVisibility, PathResolution, ScopeDef};\n use rustc_hash::FxHashSet;\n@@ -38,7 +38,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     if let ScopeDef::Unknown = def {\n                         if let Some(name_ref) = ctx.name_ref_syntax.as_ref() {\n                             if name_ref.syntax().text() == name.to_string().as_str() {\n-                                // for `use self::foo<|>`, don't suggest `foo` as a completion\n+                                // for `use self::foo$0`, don't suggest `foo` as a completion\n                                 mark::hit!(dont_complete_current_use);\n                                 continue;\n                             }\n@@ -173,15 +173,15 @@ mod tests {\n     #[test]\n     fn dont_complete_current_use() {\n         mark::check!(dont_complete_current_use);\n-        check(r#\"use self::foo<|>;\"#, expect![[\"\"]]);\n+        check(r#\"use self::foo$0;\"#, expect![[\"\"]]);\n     }\n \n     #[test]\n     fn dont_complete_current_use_in_braces_with_glob() {\n         check(\n             r#\"\n mod foo { pub struct S; }\n-use self::{foo::*, bar<|>};\n+use self::{foo::*, bar$0};\n \"#,\n             expect![[r#\"\n                 st S\n@@ -192,18 +192,18 @@ use self::{foo::*, bar<|>};\n \n     #[test]\n     fn dont_complete_primitive_in_use() {\n-        check_builtin(r#\"use self::<|>;\"#, expect![[\"\"]]);\n+        check_builtin(r#\"use self::$0;\"#, expect![[\"\"]]);\n     }\n \n     #[test]\n     fn dont_complete_primitive_in_module_scope() {\n-        check_builtin(r#\"fn foo() { self::<|> }\"#, expect![[\"\"]]);\n+        check_builtin(r#\"fn foo() { self::$0 }\"#, expect![[\"\"]]);\n     }\n \n     #[test]\n     fn completes_primitives() {\n         check_builtin(\n-            r#\"fn main() { let _: <|> = 92; }\"#,\n+            r#\"fn main() { let _: $0 = 92; }\"#,\n             expect![[r#\"\n                 bt u32\n                 bt bool\n@@ -230,7 +230,7 @@ use self::{foo::*, bar<|>};\n     fn completes_mod_with_same_name_as_function() {\n         check(\n             r#\"\n-use self::my::<|>;\n+use self::my::$0;\n \n mod my { pub struct Bar; }\n fn my() {}\n@@ -245,7 +245,7 @@ fn my() {}\n     fn filters_visibility() {\n         check(\n             r#\"\n-use self::my::<|>;\n+use self::my::$0;\n \n mod my {\n     struct Bar;\n@@ -264,7 +264,7 @@ mod my {\n     fn completes_use_item_starting_with_self() {\n         check(\n             r#\"\n-use self::m::<|>;\n+use self::m::$0;\n \n mod m { pub struct Bar; }\n \"#,\n@@ -282,7 +282,7 @@ mod m { pub struct Bar; }\n mod foo;\n struct Spam;\n //- /foo.rs\n-use crate::Sp<|>\n+use crate::Sp$0\n \"#,\n             expect![[r#\"\n                 md foo\n@@ -299,7 +299,7 @@ use crate::Sp<|>\n mod foo;\n struct Spam;\n //- /foo.rs\n-use crate::{Sp<|>};\n+use crate::{Sp$0};\n \"#,\n             expect![[r#\"\n                 md foo\n@@ -320,7 +320,7 @@ pub mod bar {\n     }\n }\n //- /foo.rs\n-use crate::{bar::{baz::Sp<|>}};\n+use crate::{bar::{baz::Sp$0}};\n \"#,\n             expect![[r#\"\n                 st Spam\n@@ -333,7 +333,7 @@ use crate::{bar::{baz::Sp<|>}};\n         check(\n             r#\"\n enum E { Foo, Bar(i32) }\n-fn foo() { let _ = E::<|> }\n+fn foo() { let _ = E::$0 }\n \"#,\n             expect![[r#\"\n                 ev Foo    ()\n@@ -356,7 +356,7 @@ impl S {\n     type T = i32;\n }\n \n-fn foo() { let _ = S::<|> }\n+fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n                 fn a()  fn a()\n@@ -384,7 +384,7 @@ mod m {\n     }\n }\n \n-fn foo() { let _ = S::<|> }\n+fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n                 fn public_method() pub(crate) fn public_method()\n@@ -401,7 +401,7 @@ fn foo() { let _ = S::<|> }\n enum E {};\n impl E { fn m() { } }\n \n-fn foo() { let _ = E::<|> }\n+fn foo() { let _ = E::$0 }\n         \"#,\n             expect![[r#\"\n                 fn m() fn m()\n@@ -416,7 +416,7 @@ fn foo() { let _ = E::<|> }\n union U {};\n impl U { fn m() { } }\n \n-fn foo() { let _ = U::<|> }\n+fn foo() { let _ = U::$0 }\n \"#,\n             expect![[r#\"\n                 fn m() fn m()\n@@ -429,7 +429,7 @@ fn foo() { let _ = U::<|> }\n         check(\n             r#\"\n //- /main.rs crate:main deps:foo\n-use foo::<|>;\n+use foo::$0;\n \n //- /foo/lib.rs crate:foo\n pub mod bar { pub struct S; }\n@@ -446,7 +446,7 @@ pub mod bar { pub struct S; }\n             r#\"\n trait Trait { fn m(); }\n \n-fn foo() { let _ = Trait::<|> }\n+fn foo() { let _ = Trait::$0 }\n \"#,\n             expect![[r#\"\n                 fn m() fn m()\n@@ -463,7 +463,7 @@ trait Trait { fn m(); }\n struct S;\n impl Trait for S {}\n \n-fn foo() { let _ = S::<|> }\n+fn foo() { let _ = S::$0 }\n \"#,\n             expect![[r#\"\n                 fn m() fn m()\n@@ -480,7 +480,7 @@ trait Trait { fn m(); }\n struct S;\n impl Trait for S {}\n \n-fn foo() { let _ = <S as Trait>::<|> }\n+fn foo() { let _ = <S as Trait>::$0 }\n \"#,\n             expect![[r#\"\n                 fn m() fn m()\n@@ -506,7 +506,7 @@ trait Sub: Super {\n     fn submethod(&self) {}\n }\n \n-fn foo<T: Sub>() { T::<|> }\n+fn foo<T: Sub>() { T::$0 }\n \"#,\n             expect![[r#\"\n                 ta SubTy        type SubTy;\n@@ -544,7 +544,7 @@ impl<T> Super for Wrap<T> {}\n impl<T> Sub for Wrap<T> {\n     fn subfunc() {\n         // Should be able to assume `Self: Sub + Super`\n-        Self::<|>\n+        Self::$0\n     }\n }\n \"#,\n@@ -570,7 +570,7 @@ impl S { fn foo() {} }\n type T = S;\n impl T { fn bar() {} }\n \n-fn main() { T::<|>; }\n+fn main() { T::$0; }\n \"#,\n             expect![[r#\"\n                 fn foo() fn foo()\n@@ -586,7 +586,7 @@ fn main() { T::<|>; }\n #[macro_export]\n macro_rules! foo { () => {} }\n \n-fn main() { let _ = crate::<|> }\n+fn main() { let _ = crate::$0 }\n         \"#,\n             expect![[r##\"\n                 fn main()  fn main()\n@@ -604,7 +604,7 @@ mod a {\n     const A: usize = 0;\n     mod b {\n         const B: usize = 0;\n-        mod c { use super::super::<|> }\n+        mod c { use super::super::$0 }\n     }\n }\n \"#,\n@@ -619,7 +619,7 @@ mod a {\n     fn completes_reexported_items_under_correct_name() {\n         check(\n             r#\"\n-fn foo() { self::m::<|> }\n+fn foo() { self::m::$0 }\n \n mod m {\n     pub use super::p::wrong_fn as right_fn;\n@@ -642,7 +642,7 @@ mod p {\n         check_edit(\n             \"RightType\",\n             r#\"\n-fn foo() { self::m::<|> }\n+fn foo() { self::m::$0 }\n \n mod m {\n     pub use super::p::wrong_fn as right_fn;\n@@ -677,7 +677,7 @@ mod p {\n         check(\n             r#\"\n macro_rules! m { ($e:expr) => { $e } }\n-fn main() { m!(self::f<|>); }\n+fn main() { m!(self::f$0); }\n fn foo() {}\n \"#,\n             expect![[r#\"\n@@ -691,7 +691,7 @@ fn foo() {}\n     fn function_mod_share_name() {\n         check(\n             r#\"\n-fn foo() { self::m::<|> }\n+fn foo() { self::m::$0 }\n \n mod m {\n     pub mod z {}\n@@ -716,7 +716,7 @@ impl<K, V> HashMap<K, V, RandomState> {\n     pub fn new() -> HashMap<K, V, RandomState> { }\n }\n fn foo() {\n-    HashMap::<|>\n+    HashMap::$0\n }\n \"#,\n             expect![[r#\"\n@@ -730,7 +730,7 @@ fn foo() {\n         check(\n             r#\"\n mod foo { pub struct Foo; }\n-#[foo::<|>]\n+#[foo::$0]\n fn f() {}\n \"#,\n             expect![[\"\"]],\n@@ -749,7 +749,7 @@ fn foo(\n }\n \n fn main() {\n-    fo<|>\n+    fo$0\n }\n \"#,\n             expect![[r#\"\n@@ -770,7 +770,7 @@ enum Foo {\n \n impl Foo {\n     fn foo(self) {\n-        Self::<|>\n+        Self::$0\n     }\n }\n \"#,"}, {"sha": "bb6354ded22c3f4099bc515f1e88079345726c38", "filename": "crates/completion/src/completions/record.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -99,7 +99,7 @@ impl core::default::Default for S {\n fn process(f: S) {\n     let other = S {\n         foo: 5,\n-        .<|>\n+        .$0\n     };\n }\n \"#;\n@@ -139,7 +139,7 @@ impl core::default::Default for S {\n fn process(f: S) {\n     let other = S {\n         foo: 5,\n-        .<|>\n+        .$0\n     };\n }\n \"#,\n@@ -173,7 +173,7 @@ struct S { foo: u32, bar: usize }\n fn process(f: S) {\n     let other = S {\n         foo: 5,\n-        .<|>\n+        .$0\n     };\n }\n \"#;\n@@ -201,7 +201,7 @@ struct S { foo: u32 }\n \n fn process(f: S) {\n     match f {\n-        S { f<|>: 92 } => (),\n+        S { f$0: 92 } => (),\n     }\n }\n \"#,\n@@ -219,7 +219,7 @@ enum E { S { foo: u32, bar: () } }\n \n fn process(e: E) {\n     match e {\n-        E::S { <|> } => (),\n+        E::S { $0 } => (),\n     }\n }\n \"#,\n@@ -239,7 +239,7 @@ struct S { foo: u32 }\n \n fn process(f: S) {\n     m!(match f {\n-        S { f<|>: 92 } => (),\n+        S { f$0: 92 } => (),\n     })\n }\n \",\n@@ -263,7 +263,7 @@ fn main() {\n         foo1: 1, foo2: 2,\n         bar: 3, baz: 4,\n     };\n-    if let S { foo1, foo2: a, <|> } = s {}\n+    if let S { foo1, foo2: a, $0 } = s {}\n }\n \"#,\n             expect![[r#\"\n@@ -279,7 +279,7 @@ fn main() {\n             r#\"\n struct A { the_field: u32 }\n fn foo() {\n-   A { the<|> }\n+   A { the$0 }\n }\n \"#,\n             expect![[r#\"\n@@ -294,7 +294,7 @@ fn foo() {\n             r#\"\n enum E { A { a: u32 } }\n fn foo() {\n-    let _ = E::A { <|> }\n+    let _ = E::A { $0 }\n }\n \"#,\n             expect![[r#\"\n@@ -311,7 +311,7 @@ struct A { a: u32 }\n struct B { b: u32 }\n \n fn foo() {\n-   let _: A = B { <|> }\n+   let _: A = B { $0 }\n }\n \"#,\n             expect![[r#\"\n@@ -327,7 +327,7 @@ fn foo() {\n struct A<T> { a: T }\n \n fn foo() {\n-   let _: A<u32> = A { <|> }\n+   let _: A<u32> = A { $0 }\n }\n \"#,\n             expect![[r#\"\n@@ -343,7 +343,7 @@ fn foo() {\n macro_rules! m { ($e:expr) => { $e } }\n struct A { the_field: u32 }\n fn foo() {\n-   m!(A { the<|> })\n+   m!(A { the$0 })\n }\n \"#,\n             expect![[r#\"\n@@ -363,7 +363,7 @@ struct S {\n \n fn main() {\n     let foo1 = 1;\n-    let s = S { foo1, foo2: 5, <|> }\n+    let s = S { foo1, foo2: 5, $0 }\n }\n \"#,\n             expect![[r#\"\n@@ -381,7 +381,7 @@ struct S { foo1: u32, foo2: u32 }\n \n fn main() {\n     let foo1 = 1;\n-    let s = S { foo1, <|> .. loop {} }\n+    let s = S { foo1, $0 .. loop {} }\n }\n \"#,\n             expect![[r#\""}, {"sha": "df17a15c5a6a14da363e99267f57a97188e50644", "filename": "crates/completion/src/completions/snippet.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -83,7 +83,7 @@ mod tests {\n     #[test]\n     fn completes_snippets_in_expressions() {\n         check(\n-            r#\"fn foo(x: i32) { <|> }\"#,\n+            r#\"fn foo(x: i32) { $0 }\"#,\n             expect![[r#\"\n                 sn pd\n                 sn ppd\n@@ -93,8 +93,8 @@ mod tests {\n \n     #[test]\n     fn should_not_complete_snippets_in_path() {\n-        check(r#\"fn foo(x: i32) { ::foo<|> }\"#, expect![[\"\"]]);\n-        check(r#\"fn foo(x: i32) { ::<|> }\"#, expect![[\"\"]]);\n+        check(r#\"fn foo(x: i32) { ::foo$0 }\"#, expect![[\"\"]]);\n+        check(r#\"fn foo(x: i32) { ::$0 }\"#, expect![[\"\"]]);\n     }\n \n     #[test]\n@@ -103,7 +103,7 @@ mod tests {\n             r#\"\n #[cfg(test)]\n mod tests {\n-    <|>\n+    $0\n }\n \"#,\n             expect![[r#\""}, {"sha": "aa9c845da67b7dccfe3b233b1d91c555601088a7", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -15,7 +15,7 @@\n //! }\n //!\n //! impl SomeTrait for () {\n-//!     fn f<|>\n+//!     fn f$0\n //! }\n //! ```\n //!\n@@ -27,7 +27,7 @@\n //! # }\n //!\n //! impl SomeTrait for () {\n-//!     fn foo() {}<|>\n+//!     fn foo() {}$0\n //! }\n //! ```\n \n@@ -82,28 +82,28 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n \n fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, SyntaxNode, Impl)> {\n     let mut token = ctx.token.clone();\n-    // For keywork without name like `impl .. { fn <|> }`, the current position is inside\n+    // For keywork without name like `impl .. { fn $0 }`, the current position is inside\n     // the whitespace token, which is outside `FN` syntax node.\n     // We need to follow the previous token in this case.\n     if token.kind() == SyntaxKind::WHITESPACE {\n         token = token.prev_token()?;\n     }\n \n     let impl_item_offset = match token.kind() {\n-        // `impl .. { const <|> }`\n+        // `impl .. { const $0 }`\n         // ERROR      0\n         //   CONST_KW <- *\n         SyntaxKind::CONST_KW => 0,\n-        // `impl .. { fn/type <|> }`\n+        // `impl .. { fn/type $0 }`\n         // FN/TYPE_ALIAS  0\n         //   FN_KW        <- *\n         SyntaxKind::FN_KW | SyntaxKind::TYPE_KW => 0,\n-        // `impl .. { fn/type/const foo<|> }`\n+        // `impl .. { fn/type/const foo$0 }`\n         // FN/TYPE_ALIAS/CONST  1\n         //  NAME                0\n         //    IDENT             <- *\n         SyntaxKind::IDENT if token.parent().kind() == SyntaxKind::NAME => 1,\n-        // `impl .. { foo<|> }`\n+        // `impl .. { foo$0 }`\n         // MACRO_CALL       3\n         //  PATH            2\n         //    PATH_SEGMENT  1\n@@ -120,7 +120,7 @@ fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, Synt\n     //     <item>\n     let impl_def = ast::Impl::cast(impl_item.parent()?.parent()?)?;\n     let kind = match impl_item.kind() {\n-        // `impl ... { const <|> fn/type/const }`\n+        // `impl ... { const $0 fn/type/const }`\n         _ if token.kind() == SyntaxKind::CONST_KW => ImplCompletionKind::Const,\n         SyntaxKind::CONST | SyntaxKind::ERROR => ImplCompletionKind::Const,\n         SyntaxKind::TYPE_ALIAS => ImplCompletionKind::TypeAlias,\n@@ -267,7 +267,7 @@ trait Test {\n struct T;\n \n impl Test for T {\n-    t<|>\n+    t$0\n }\n \"#,\n             expect![[\"\n@@ -287,7 +287,7 @@ struct T;\n \n impl Test for T {\n     fn test() {\n-        t<|>\n+        t$0\n     }\n }\n \",\n@@ -301,7 +301,7 @@ struct T;\n \n impl Test for T {\n     fn test() {\n-        fn t<|>\n+        fn t$0\n     }\n }\n \",\n@@ -315,7 +315,7 @@ struct T;\n \n impl Test for T {\n     fn test() {\n-        fn <|>\n+        fn $0\n     }\n }\n \",\n@@ -330,7 +330,7 @@ struct T;\n \n impl Test for T {\n     fn test() {\n-        foo.<|>\n+        foo.$0\n     }\n }\n \",\n@@ -343,7 +343,7 @@ trait Test { fn test(_: i32); fn test2(); }\n struct T;\n \n impl Test for T {\n-    fn test(t<|>)\n+    fn test(t$0)\n }\n \",\n             expect![[\"\"]],\n@@ -355,7 +355,7 @@ trait Test { fn test(_: fn()); fn test2(); }\n struct T;\n \n impl Test for T {\n-    fn test(f: fn <|>)\n+    fn test(f: fn $0)\n }\n \",\n             expect![[\"\"]],\n@@ -370,7 +370,7 @@ trait Test { const TEST: fn(); const TEST2: u32; type Test; fn test(); }\n struct T;\n \n impl Test for T {\n-    const TEST: fn <|>\n+    const TEST: fn $0\n }\n \",\n             expect![[\"\"]],\n@@ -382,7 +382,7 @@ trait Test { const TEST: u32; const TEST2: u32; type Test; fn test(); }\n struct T;\n \n impl Test for T {\n-    const TEST: T<|>\n+    const TEST: T$0\n }\n \",\n             expect![[\"\"]],\n@@ -394,7 +394,7 @@ trait Test { const TEST: u32; const TEST2: u32; type Test; fn test(); }\n struct T;\n \n impl Test for T {\n-    const TEST: u32 = f<|>\n+    const TEST: u32 = f$0\n }\n \",\n             expect![[\"\"]],\n@@ -407,7 +407,7 @@ struct T;\n \n impl Test for T {\n     const TEST: u32 = {\n-        t<|>\n+        t$0\n     };\n }\n \",\n@@ -421,7 +421,7 @@ struct T;\n \n impl Test for T {\n     const TEST: u32 = {\n-        fn <|>\n+        fn $0\n     };\n }\n \",\n@@ -435,7 +435,7 @@ struct T;\n \n impl Test for T {\n     const TEST: u32 = {\n-        fn t<|>\n+        fn t$0\n     };\n }\n \",\n@@ -451,7 +451,7 @@ trait Test { type Test; type Test2; fn test(); }\n struct T;\n \n impl Test for T {\n-    type Test = T<|>;\n+    type Test = T$0;\n }\n \",\n             expect![[\"\"]],\n@@ -463,7 +463,7 @@ trait Test { type Test; type Test2; fn test(); }\n struct T;\n \n impl Test for T {\n-    type Test = fn <|>;\n+    type Test = fn $0;\n }\n \",\n             expect![[\"\"]],\n@@ -481,7 +481,7 @@ trait Test {\n struct T;\n \n impl Test for T {\n-    t<|>\n+    t$0\n }\n \"#,\n             r#\"\n@@ -510,7 +510,7 @@ trait Test {\n struct T;\n \n impl Test for T {\n-    fn t<|>\n+    fn t$0\n }\n \"#,\n             r#\"\n@@ -540,7 +540,7 @@ struct T;\n \n impl Test for T {\n     fn foo() {}\n-    fn f<|>\n+    fn f$0\n }\n \"#,\n             expect![[r#\"\n@@ -560,7 +560,7 @@ trait Test {\n struct T;\n \n impl Test for T {\n-    fn f<|>\n+    fn f$0\n }\n \"#,\n             r#\"\n@@ -585,7 +585,7 @@ trait Test {\n struct T;\n \n impl Test for T {\n-    fn f<|>\n+    fn f$0\n }\n \"#,\n             r#\"\n@@ -614,7 +614,7 @@ trait Test {\n }\n \n impl Test for () {\n-    type S<|>\n+    type S$0\n }\n \"#,\n             \"\n@@ -639,7 +639,7 @@ trait Test {\n }\n \n impl Test for () {\n-    const S<|>\n+    const S$0\n }\n \"#,\n             \"\n@@ -661,7 +661,7 @@ trait Test {\n }\n \n impl Test for () {\n-    const S<|>\n+    const S$0\n }\n \"#,\n             \"\n@@ -724,7 +724,7 @@ impl Test for T {{\n         // Enumerate some possible next siblings.\n         for next_sibling in &[\n             \"\",\n-            \"fn other_fn() {}\", // `const <|> fn` -> `const fn`\n+            \"fn other_fn() {}\", // `const $0 fn` -> `const fn`\n             \"type OtherType = i32;\",\n             \"const OTHER_CONST: i32 = 0;\",\n             \"async fn other_fn() {}\",\n@@ -733,9 +733,9 @@ impl Test for T {{\n             \"default type OtherType = i32;\",\n             \"default const OTHER_CONST: i32 = 0;\",\n         ] {\n-            test(\"bar\", \"fn <|>\", \"fn bar() {\\n    $0\\n}\", next_sibling);\n-            test(\"Foo\", \"type <|>\", \"type Foo = \", next_sibling);\n-            test(\"CONST\", \"const <|>\", \"const CONST: u16 = \", next_sibling);\n+            test(\"bar\", \"fn $0\", \"fn bar() {\\n    $0\\n}\", next_sibling);\n+            test(\"Foo\", \"type $0\", \"type Foo = \", next_sibling);\n+            test(\"CONST\", \"const $0\", \"const CONST: u16 = \", next_sibling);\n         }\n     }\n }"}, {"sha": "12cdb869dad0c7fbdb92e46e9be540f1e0a14294", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -85,7 +85,7 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n //\n // ```\n // fn main() {\n-//     pda<|>\n+//     pda$0\n // }\n // # pub mod std { pub mod marker { pub struct PhantomData { } } }\n // ```\n@@ -212,7 +212,7 @@ mod tests {\n         mark::check!(self_fulfilling_completion);\n         check(\n             r#\"\n-use foo<|>\n+use foo$0\n use std::collections;\n \"#,\n             expect![[r#\"\n@@ -229,7 +229,7 @@ enum Enum { A, B }\n fn quux(x: Option<Enum>) {\n     match x {\n         None => (),\n-        Some(en<|> @ Enum::A) => (),\n+        Some(en$0 @ Enum::A) => (),\n     }\n }\n \"#,\n@@ -245,7 +245,7 @@ enum Enum { A, B }\n fn quux(x: Option<Enum>) {\n     match x {\n         None => (),\n-        Some(ref en<|>) => (),\n+        Some(ref en$0) => (),\n     }\n }\n \"#,\n@@ -261,7 +261,7 @@ enum Enum { A, B }\n fn quux(x: Option<Enum>) {\n     match x {\n         None => (),\n-        Some(En<|>) => (),\n+        Some(En$0) => (),\n     }\n }\n \"#,\n@@ -277,7 +277,7 @@ fn quux(x: Option<Enum>) {\n             r#\"\n fn quux(x: i32) {\n     let y = 92;\n-    1 + <|>;\n+    1 + $0;\n     let z = ();\n }\n \"#,\n@@ -299,7 +299,7 @@ fn quux() {\n     };\n     if let Some(a) = bar() {\n         let b = 62;\n-        1 + <|>\n+        1 + $0\n     }\n }\n \"#,\n@@ -316,7 +316,7 @@ fn quux() {\n         check(\n             r#\"\n fn quux() {\n-    for x in &[1, 2, 3] { <|> }\n+    for x in &[1, 2, 3] { $0 }\n }\n \"#,\n             expect![[r#\"\n@@ -334,7 +334,7 @@ fn quux() {\n             r#\"\n fn main() {\n     let wherewolf = 92;\n-    drop(where<|>)\n+    drop(where$0)\n }\n \"#,\n             r#\"\n@@ -349,7 +349,7 @@ fn main() {\n     #[test]\n     fn completes_generic_params() {\n         check(\n-            r#\"fn quux<T>() { <|> }\"#,\n+            r#\"fn quux<T>() { $0 }\"#,\n             expect![[r#\"\n                 tp T\n                 fn quux() fn quux<T>()\n@@ -360,7 +360,7 @@ fn main() {\n     #[test]\n     fn completes_generic_params_in_struct() {\n         check(\n-            r#\"struct S<T> { x: <|>}\"#,\n+            r#\"struct S<T> { x: $0}\"#,\n             expect![[r#\"\n                 tp Self\n                 tp T\n@@ -372,7 +372,7 @@ fn main() {\n     #[test]\n     fn completes_self_in_enum() {\n         check(\n-            r#\"enum X { Y(<|>) }\"#,\n+            r#\"enum X { Y($0) }\"#,\n             expect![[r#\"\n                 tp Self\n                 en X\n@@ -386,7 +386,7 @@ fn main() {\n             r#\"\n struct S;\n enum E {}\n-fn quux() { <|> }\n+fn quux() { $0 }\n \"#,\n             expect![[r#\"\n                 st S\n@@ -403,7 +403,7 @@ fn quux() { <|> }\n             \"_alpha\",\n             r#\"\n fn main() {\n-    _<|>\n+    _$0\n }\n fn _alpha() {}\n \"#,\n@@ -421,7 +421,7 @@ fn _alpha() {}\n         check(\n             r#\"\n //- /lib.rs crate:main deps:other_crate\n-use <|>;\n+use $0;\n \n //- /other_crate/lib.rs crate:other_crate\n // nothing here\n@@ -439,7 +439,7 @@ use <|>;\n struct Foo;\n mod m {\n     struct Bar;\n-    fn quux() { <|> }\n+    fn quux() { $0 }\n }\n \"#,\n             expect![[r#\"\n@@ -454,7 +454,7 @@ mod m {\n         check(\n             r#\"\n struct Foo;\n-fn x() -> <|>\n+fn x() -> $0\n \"#,\n             expect![[r#\"\n                 st Foo\n@@ -471,7 +471,7 @@ fn foo() {\n     let bar = 92;\n     {\n         let bar = 62;\n-        drop(<|>)\n+        drop($0)\n     }\n }\n \"#,\n@@ -487,7 +487,7 @@ fn foo() {\n     #[test]\n     fn completes_self_in_methods() {\n         check(\n-            r#\"impl S { fn foo(&self) { <|> } }\"#,\n+            r#\"impl S { fn foo(&self) { $0 } }\"#,\n             expect![[r#\"\n                 bn self &{unknown}\n                 tp Self\n@@ -500,7 +500,7 @@ fn foo() {\n         check(\n             r#\"\n //- /main.rs crate:main deps:std\n-fn foo() { let x: <|> }\n+fn foo() { let x: $0 }\n \n //- /std/lib.rs crate:std\n #[prelude_import]\n@@ -521,7 +521,7 @@ mod prelude { struct Option; }\n         check(\n             r#\"\n //- /main.rs crate:main deps:core,std\n-fn foo() { let x: <|> }\n+fn foo() { let x: $0 }\n \n //- /core/lib.rs crate:core\n #[prelude_import]\n@@ -562,7 +562,7 @@ mod m2 {\n     macro_rules! baz { () => {} }\n }\n \n-fn main() { let v = <|> }\n+fn main() { let v = $0 }\n \"#,\n             expect![[r##\"\n                 md m1\n@@ -581,7 +581,7 @@ fn main() { let v = <|> }\n         check(\n             r#\"\n macro_rules! foo { () => {} }\n-fn foo() { <|> }\n+fn foo() { $0 }\n \"#,\n             expect![[r#\"\n                 fn foo()   fn foo()\n@@ -595,7 +595,7 @@ fn foo() { <|> }\n         check(\n             r#\"\n macro_rules! foo { () => {} }\n-fn main() { let x: <|> }\n+fn main() { let x: $0 }\n \"#,\n             expect![[r#\"\n                 fn main()  fn main()\n@@ -609,7 +609,7 @@ fn main() { let x: <|> }\n         check(\n             r#\"\n macro_rules! foo { () => {} }\n-fn main() { <|> }\n+fn main() { $0 }\n \"#,\n             expect![[r#\"\n                 fn main()  fn main()\n@@ -623,7 +623,7 @@ fn main() { <|> }\n         check(\n             r#\"\n fn main() {\n-    return f<|>;\n+    return f$0;\n     fn frobnicate() {}\n }\n \"#,\n@@ -641,7 +641,7 @@ fn main() {\n macro_rules! m { ($e:expr) => { $e } }\n fn quux(x: i32) {\n     let y = 92;\n-    m!(<|>);\n+    m!($0);\n }\n \"#,\n             expect![[r#\"\n@@ -660,7 +660,7 @@ fn quux(x: i32) {\n macro_rules! m { ($e:expr) => { $e } }\n fn quux(x: i32) {\n     let y = 92;\n-    m!(x<|>);\n+    m!(x$0);\n }\n \",\n             expect![[r#\"\n@@ -679,7 +679,7 @@ fn quux(x: i32) {\n macro_rules! m { ($e:expr) => { $e } }\n fn quux(x: i32) {\n     let y = 92;\n-    m!(x<|>\n+    m!(x$0\n }\n \"#,\n             expect![[r#\"\n@@ -697,7 +697,7 @@ fn quux(x: i32) {\n             r#\"\n use spam::Quux;\n \n-fn main() { <|> }\n+fn main() { $0 }\n \"#,\n             expect![[r#\"\n                 fn main() fn main()\n@@ -714,7 +714,7 @@ enum Foo { Bar, Baz, Quux }\n \n fn main() {\n     let foo = Foo::Quux;\n-    match foo { Qu<|> }\n+    match foo { Qu$0 }\n }\n \"#,\n             expect![[r#\"\n@@ -734,7 +734,7 @@ enum Foo { Bar, Baz, Quux }\n \n fn main() {\n     let foo = Foo::Quux;\n-    match &foo { Qu<|> }\n+    match &foo { Qu$0 }\n }\n \"#,\n             expect![[r#\"\n@@ -754,7 +754,7 @@ enum Foo { Bar, Baz, Quux }\n \n fn main() {\n     let foo = Foo::Quux;\n-    if let Qu<|> = foo { }\n+    if let Qu$0 = foo { }\n }\n \"#,\n             expect![[r#\"\n@@ -771,7 +771,7 @@ fn main() {\n         check(\n             r#\"\n enum Foo { Bar, Baz, Quux }\n-fn main() { let foo: Foo = Q<|> }\n+fn main() { let foo: Foo = Q$0 }\n \"#,\n             expect![[r#\"\n                 ev Foo::Bar  ()\n@@ -788,7 +788,7 @@ fn main() { let foo: Foo = Q<|> }\n         check(\n             r#\"\n mod m { pub enum E { V } }\n-fn f() -> m::E { V<|> }\n+fn f() -> m::E { V$0 }\n \"#,\n             expect![[r#\"\n                 ev m::E::V ()\n@@ -803,7 +803,7 @@ fn f() -> m::E { V<|> }\n         check(\n             r#\"\n struct Foo;\n-#[<|>]\n+#[$0]\n fn f() {}\n \"#,\n             expect![[\"\"]],\n@@ -817,7 +817,7 @@ fn f() {}\n trait MyTrait {}\n struct MyStruct {}\n \n-impl My<|>\n+impl My$0\n \"#,\n             expect![[r#\"\n                 tp Self\n@@ -840,7 +840,7 @@ pub mod io {\n \n //- /main.rs crate:main deps:dep\n fn main() {\n-    stdi<|>\n+    stdi$0\n }\n \"#,\n             r#\"\n@@ -868,7 +868,7 @@ macro_rules! macro_with_curlies {\n \n //- /main.rs crate:main deps:dep\n fn main() {\n-    curli<|>\n+    curli$0\n }\n \"#,\n             r#\"\n@@ -898,7 +898,7 @@ pub mod some_module {\n use dep::{FirstStruct, some_module::SecondStruct};\n \n fn main() {\n-    this<|>\n+    this$0\n }\n \"#,\n             r#\"\n@@ -936,7 +936,7 @@ pub mod some_module {\n use dep::{FirstStruct, some_module::SecondStruct};\n \n fn main() {\n-    hir<|>\n+    hir$0\n }\n \"#,\n             expect![[r#\""}, {"sha": "ebf28e887d4bb01aebe8ec53430657ec7d7fbf05", "filename": "crates/completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -63,7 +63,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_expr: bool,\n     /// Something is typed at the \"top\" level, in module or impl/trait.\n     pub(super) is_new_item: bool,\n-    /// The receiver if this is a field or method access, i.e. writing something.<|>\n+    /// The receiver if this is a field or method access, i.e. writing something.$0\n     pub(super) dot_receiver: Option<ast::Expr>,\n     pub(super) dot_receiver_is_ambiguous_float_literal: bool,\n     /// If this is a call (method or function) in particular, i.e. the () are already there.\n@@ -228,9 +228,9 @@ impl<'a> CompletionContext<'a> {\n \n     /// Checks whether completions in that particular case don't make much sense.\n     /// Examples:\n-    /// - `fn <|>` -- we expect function name, it's unlikely that \"hint\" will be helpful.\n+    /// - `fn $0` -- we expect function name, it's unlikely that \"hint\" will be helpful.\n     ///   Exception for this case is `impl Trait for Foo`, where we would like to hint trait method names.\n-    /// - `for _ i<|>` -- obviously, it'll be \"in\" keyword.\n+    /// - `for _ i$0` -- obviously, it'll be \"in\" keyword.\n     pub(crate) fn no_completion_required(&self) -> bool {\n         (self.fn_is_prev && !self.inside_impl_trait_block) || self.for_is_prev2\n     }\n@@ -279,7 +279,7 @@ impl<'a> CompletionContext<'a> {\n         offset: TextSize,\n     ) {\n         // FIXME: this is wrong in at least two cases:\n-        //  * when there's no token `foo(<|>)`\n+        //  * when there's no token `foo($0)`\n         //  * when there is a token, but it happens to have type of it's own\n         self.expected_type = self\n             .token"}, {"sha": "35af354b0c689868a5f57cfbe86ae25051e56939", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -43,7 +43,7 @@ pub struct CompletionItem {\n     /// Lookup is used to check if completion item indeed can complete current\n     /// ident.\n     ///\n-    /// That is, in `foo.bar<|>` lookup of `abracadabra` will be accepted (it\n+    /// That is, in `foo.bar$0` lookup of `abracadabra` will be accepted (it\n     /// contains `bar` sub sequence), and `quux` will rejected.\n     lookup: Option<String>,\n "}, {"sha": "6cba88a6b8760b46c60b1078db66348f3f3a3e2e", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -47,8 +47,8 @@ pub use crate::{\n // - `expr.while` -> `while expr {}` or `while let ... {}` for `Option` or `Result`\n // - `expr.ref` -> `&expr`\n // - `expr.refm` -> `&mut expr`\n-// - `expr.let` -> `let <|> = expr;`\n-// - `expr.letm` -> `let mut <|> = expr;`\n+// - `expr.let` -> `let $0 = expr;`\n+// - `expr.letm` -> `let mut $0 = expr;`\n // - `expr.not` -> `!expr`\n // - `expr.dbg` -> `dbg!(expr)`\n // - `expr.dbgr` -> `dbg!(&expr)`\n@@ -92,7 +92,7 @@ pub use crate::{\n /// ```no_run\n /// fn f() {\n ///     let foo = 92;\n-///     let _ = bar<|>\n+///     let _ = bar$0\n /// }\n /// ```\n ///\n@@ -220,7 +220,7 @@ mod tests {\n \n             fn foo() {\n                 let bar = Bar;\n-                bar.fo<|>;\n+                bar.fo$0;\n             }\n             \"#,\n             DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \"Do the foo\" },\n@@ -246,7 +246,7 @@ mod tests {\n \n             fn foo() {\n                 let bar = Bar;\n-                bar.fo<|>;\n+                bar.fo$0;\n             }\n             \"#,\n             DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \" Do the foo\" },\n@@ -259,7 +259,7 @@ mod tests {\n         check_no_completion(\n             r#\"\n             fn foo() {\n-                for i i<|>\n+                for i i$0\n             }\n             \"#,\n         );\n@@ -270,7 +270,7 @@ mod tests {\n             fn foo() -> &'static str { \"foo\" }\n \n             fn bar() {\n-                for c in fo<|>\n+                for c in fo$0\n             }\n             \"#,\n             DetailAndDocumentation {"}, {"sha": "f148b9402a9840eba8238ae342249cd5f3bc3124", "filename": "crates/completion/src/patterns.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fpatterns.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n }\n #[test]\n fn test_has_trait_parent() {\n-    check_pattern_is_applicable(r\"trait A { f<|> }\", has_trait_parent);\n+    check_pattern_is_applicable(r\"trait A { f$0 }\", has_trait_parent);\n }\n \n pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n@@ -32,7 +32,7 @@ pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n }\n #[test]\n fn test_has_impl_parent() {\n-    check_pattern_is_applicable(r\"impl A { f<|> }\", has_impl_parent);\n+    check_pattern_is_applicable(r\"impl A { f$0 }\", has_impl_parent);\n }\n \n pub(crate) fn inside_impl_trait_block(element: SyntaxElement) -> bool {\n@@ -47,36 +47,36 @@ pub(crate) fn inside_impl_trait_block(element: SyntaxElement) -> bool {\n }\n #[test]\n fn test_inside_impl_trait_block() {\n-    check_pattern_is_applicable(r\"impl Foo for Bar { f<|> }\", inside_impl_trait_block);\n-    check_pattern_is_applicable(r\"impl Foo for Bar { fn f<|> }\", inside_impl_trait_block);\n-    check_pattern_is_not_applicable(r\"impl A { f<|> }\", inside_impl_trait_block);\n-    check_pattern_is_not_applicable(r\"impl A { fn f<|> }\", inside_impl_trait_block);\n+    check_pattern_is_applicable(r\"impl Foo for Bar { f$0 }\", inside_impl_trait_block);\n+    check_pattern_is_applicable(r\"impl Foo for Bar { fn f$0 }\", inside_impl_trait_block);\n+    check_pattern_is_not_applicable(r\"impl A { f$0 }\", inside_impl_trait_block);\n+    check_pattern_is_not_applicable(r\"impl A { fn f$0 }\", inside_impl_trait_block);\n }\n \n pub(crate) fn has_field_list_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element).filter(|it| it.kind() == RECORD_FIELD_LIST).is_some()\n }\n #[test]\n fn test_has_field_list_parent() {\n-    check_pattern_is_applicable(r\"struct Foo { f<|> }\", has_field_list_parent);\n-    check_pattern_is_applicable(r\"struct Foo { f<|> pub f: i32}\", has_field_list_parent);\n+    check_pattern_is_applicable(r\"struct Foo { f$0 }\", has_field_list_parent);\n+    check_pattern_is_applicable(r\"struct Foo { f$0 pub f: i32}\", has_field_list_parent);\n }\n \n pub(crate) fn has_block_expr_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element).filter(|it| it.kind() == BLOCK_EXPR).is_some()\n }\n #[test]\n fn test_has_block_expr_parent() {\n-    check_pattern_is_applicable(r\"fn my_fn() { let a = 2; f<|> }\", has_block_expr_parent);\n+    check_pattern_is_applicable(r\"fn my_fn() { let a = 2; f$0 }\", has_block_expr_parent);\n }\n \n pub(crate) fn has_bind_pat_parent(element: SyntaxElement) -> bool {\n     element.ancestors().find(|it| it.kind() == IDENT_PAT).is_some()\n }\n #[test]\n fn test_has_bind_pat_parent() {\n-    check_pattern_is_applicable(r\"fn my_fn(m<|>) {}\", has_bind_pat_parent);\n-    check_pattern_is_applicable(r\"fn my_fn() { let m<|> }\", has_bind_pat_parent);\n+    check_pattern_is_applicable(r\"fn my_fn(m$0) {}\", has_bind_pat_parent);\n+    check_pattern_is_applicable(r\"fn my_fn() { let m$0 }\", has_bind_pat_parent);\n }\n \n pub(crate) fn has_ref_parent(element: SyntaxElement) -> bool {\n@@ -86,8 +86,8 @@ pub(crate) fn has_ref_parent(element: SyntaxElement) -> bool {\n }\n #[test]\n fn test_has_ref_parent() {\n-    check_pattern_is_applicable(r\"fn my_fn(&m<|>) {}\", has_ref_parent);\n-    check_pattern_is_applicable(r\"fn my() { let &m<|> }\", has_ref_parent);\n+    check_pattern_is_applicable(r\"fn my_fn(&m$0) {}\", has_ref_parent);\n+    check_pattern_is_applicable(r\"fn my() { let &m$0 }\", has_ref_parent);\n }\n \n pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> bool {\n@@ -99,8 +99,8 @@ pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> boo\n }\n #[test]\n fn test_has_item_list_or_source_file_parent() {\n-    check_pattern_is_applicable(r\"i<|>\", has_item_list_or_source_file_parent);\n-    check_pattern_is_applicable(r\"mod foo { f<|> }\", has_item_list_or_source_file_parent);\n+    check_pattern_is_applicable(r\"i$0\", has_item_list_or_source_file_parent);\n+    check_pattern_is_applicable(r\"mod foo { f$0 }\", has_item_list_or_source_file_parent);\n }\n \n pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {\n@@ -112,7 +112,7 @@ pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {\n }\n #[test]\n fn test_is_match_arm() {\n-    check_pattern_is_applicable(r\"fn my_fn() { match () { () => m<|> } }\", is_match_arm);\n+    check_pattern_is_applicable(r\"fn my_fn() { match () { () => m$0 } }\", is_match_arm);\n }\n \n pub(crate) fn unsafe_is_prev(element: SyntaxElement) -> bool {\n@@ -124,7 +124,7 @@ pub(crate) fn unsafe_is_prev(element: SyntaxElement) -> bool {\n }\n #[test]\n fn test_unsafe_is_prev() {\n-    check_pattern_is_applicable(r\"unsafe i<|>\", unsafe_is_prev);\n+    check_pattern_is_applicable(r\"unsafe i$0\", unsafe_is_prev);\n }\n \n pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n@@ -144,11 +144,11 @@ pub(crate) fn fn_is_prev(element: SyntaxElement) -> bool {\n }\n #[test]\n fn test_fn_is_prev() {\n-    check_pattern_is_applicable(r\"fn l<|>\", fn_is_prev);\n+    check_pattern_is_applicable(r\"fn l$0\", fn_is_prev);\n }\n \n /// Check if the token previous to the previous one is `for`.\n-/// For example, `for _ i<|>` => true.\n+/// For example, `for _ i$0` => true.\n pub(crate) fn for_is_prev2(element: SyntaxElement) -> bool {\n     element\n         .into_token()\n@@ -159,28 +159,28 @@ pub(crate) fn for_is_prev2(element: SyntaxElement) -> bool {\n }\n #[test]\n fn test_for_is_prev2() {\n-    check_pattern_is_applicable(r\"for i i<|>\", for_is_prev2);\n+    check_pattern_is_applicable(r\"for i i$0\", for_is_prev2);\n }\n \n #[test]\n fn test_if_is_prev() {\n-    check_pattern_is_applicable(r\"if l<|>\", if_is_prev);\n+    check_pattern_is_applicable(r\"if l$0\", if_is_prev);\n }\n \n pub(crate) fn has_trait_as_prev_sibling(element: SyntaxElement) -> bool {\n     previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT).is_some()\n }\n #[test]\n fn test_has_trait_as_prev_sibling() {\n-    check_pattern_is_applicable(r\"trait A w<|> {}\", has_trait_as_prev_sibling);\n+    check_pattern_is_applicable(r\"trait A w$0 {}\", has_trait_as_prev_sibling);\n }\n \n pub(crate) fn has_impl_as_prev_sibling(element: SyntaxElement) -> bool {\n     previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == IMPL).is_some()\n }\n #[test]\n fn test_has_impl_as_prev_sibling() {\n-    check_pattern_is_applicable(r\"impl A w<|> {}\", has_impl_as_prev_sibling);\n+    check_pattern_is_applicable(r\"impl A w$0 {}\", has_impl_as_prev_sibling);\n }\n \n pub(crate) fn is_in_loop_body(element: SyntaxElement) -> bool {"}, {"sha": "e93c59f717796611786654664880ec737b1283a4", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -358,7 +358,7 @@ mod tests {\n             r#\"\n enum Foo { Foo { x: i32, y: i32 } }\n \n-fn main() { Foo::Fo<|> }\n+fn main() { Foo::Fo$0 }\n \"#,\n             expect![[r#\"\n                 [\n@@ -381,7 +381,7 @@ fn main() { Foo::Fo<|> }\n             r#\"\n enum Foo { Foo (i32, i32) }\n \n-fn main() { Foo::Fo<|> }\n+fn main() { Foo::Fo$0 }\n \"#,\n             expect![[r#\"\n                 [\n@@ -406,7 +406,7 @@ fn main() { Foo::Fo<|> }\n             r#\"\n enum Foo { Foo }\n \n-fn main() { Foo::Fo<|> }\n+fn main() { Foo::Fo$0 }\n \"#,\n             expect![[r#\"\n                 [\n@@ -430,7 +430,7 @@ fn main() { Foo::Fo<|> }\n mod m {\n     pub enum Spam { Foo, Bar(i32) }\n }\n-fn main() { let _: m::Spam = S<|> }\n+fn main() { let _: m::Spam = S$0 }\n \"#,\n             expect![[r#\"\n                 [\n@@ -483,7 +483,7 @@ fn something_deprecated() {}\n #[deprecated(since = \"1.0.0\")]\n fn something_else_deprecated() {}\n \n-fn main() { som<|> }\n+fn main() { som$0 }\n \"#,\n             expect![[r#\"\n                 [\n@@ -523,7 +523,7 @@ fn main() { som<|> }\n         check(\n             r#\"\n struct A { #[deprecated] the_field: u32 }\n-fn foo() { A { the<|> } }\n+fn foo() { A { the$0 } }\n \"#,\n             expect![[r#\"\n                 [\n@@ -551,7 +551,7 @@ struct S {\n }\n impl S {\n     /// Method docs\n-    fn bar(self) { self.<|> }\n+    fn bar(self) { self.$0 }\n }\"#,\n             expect![[r#\"\n                 [\n@@ -584,7 +584,7 @@ impl S {\n \n         check(\n             r#\"\n-use self::my<|>;\n+use self::my$0;\n \n /// mod docs\n mod my { }\n@@ -643,7 +643,7 @@ impl S {\n     #[inline]\n     fn the_method(&self) { }\n }\n-fn foo(s: S) { s.<|> }\n+fn foo(s: S) { s.$0 }\n \"#,\n             expect![[r#\"\n                 [\n@@ -671,7 +671,7 @@ fn foo(foo: u8, bar: u8) {}\n struct ManualVtable { f: fn(u8, u8) }\n \n fn main() -> ManualVtable {\n-    ManualVtable { f: f<|> }\n+    ManualVtable { f: f$0 }\n }\n \"#,\n             r#\"\n@@ -692,7 +692,7 @@ fn main() -> ManualVtable {\n             \"foo\",\n             r#\"\n mod m { pub fn foo() {} }\n-use crate::m::f<|>;\n+use crate::m::f$0;\n \"#,\n             r#\"\n mod m { pub fn foo() {} }\n@@ -707,7 +707,7 @@ use crate::m::foo;\n             \"foo\",\n             r#\"\n fn foo(x: i32) {}\n-fn main() { f<|>(); }\n+fn main() { f$0(); }\n \"#,\n             r#\"\n fn foo(x: i32) {}\n@@ -719,7 +719,7 @@ fn main() { foo(); }\n             r#\"\n struct Foo;\n impl Foo { fn foo(&self){} }\n-fn f(foo: &Foo) { foo.f<|>(); }\n+fn f(foo: &Foo) { foo.f$0(); }\n \"#,\n             r#\"\n struct Foo;\n@@ -736,7 +736,7 @@ fn f(foo: &Foo) { foo.foo(); }\n             \"Vec\",\n             r#\"\n struct Vec<T> {}\n-fn foo(xs: Ve<|>)\n+fn foo(xs: Ve$0)\n \"#,\n             r#\"\n struct Vec<T> {}\n@@ -747,7 +747,7 @@ fn foo(xs: Vec<$0>)\n             \"Vec\",\n             r#\"\n type Vec<T> = (T,);\n-fn foo(xs: Ve<|>)\n+fn foo(xs: Ve$0)\n \"#,\n             r#\"\n type Vec<T> = (T,);\n@@ -758,7 +758,7 @@ fn foo(xs: Vec<$0>)\n             \"Vec\",\n             r#\"\n struct Vec<T = i128> {}\n-fn foo(xs: Ve<|>)\n+fn foo(xs: Ve$0)\n \"#,\n             r#\"\n struct Vec<T = i128> {}\n@@ -769,7 +769,7 @@ fn foo(xs: Vec)\n             \"Vec\",\n             r#\"\n struct Vec<T> {}\n-fn foo(xs: Ve<|><i128>)\n+fn foo(xs: Ve$0<i128>)\n \"#,\n             r#\"\n struct Vec<T> {}\n@@ -785,7 +785,7 @@ fn foo(xs: Vec<i128>)\n             r#\"\n struct S { foo: i64, bar: u32, baz: u32 }\n fn test(bar: u32) { }\n-fn foo(s: S) { test(s.<|>) }\n+fn foo(s: S) { test(s.$0) }\n \"#,\n             expect![[r#\"\n                 fd bar [type+name]\n@@ -802,7 +802,7 @@ fn foo(s: S) { test(s.<|>) }\n             r#\"\n struct A { foo: i64, bar: u32, baz: u32 }\n struct B { x: (), y: f32, bar: u32 }\n-fn foo(a: A) { B { bar: a.<|> }; }\n+fn foo(a: A) { B { bar: a.$0 }; }\n \"#,\n             expect![[r#\"\n                 fd bar [type+name]\n@@ -819,7 +819,7 @@ fn foo(a: A) { B { bar: a.<|> }; }\n struct A { foo: i64, bar: u32, baz: u32 }\n struct B { x: (), y: f32, bar: u32 }\n fn f(foo: i64) {  }\n-fn foo(a: A) { B { bar: f(a.<|>) }; }\n+fn foo(a: A) { B { bar: f(a.$0) }; }\n \"#,\n             expect![[r#\"\n                 fd foo [type+name]\n@@ -832,7 +832,7 @@ fn foo(a: A) { B { bar: f(a.<|>) }; }\n struct A { foo: i64, bar: u32, baz: u32 }\n struct B { x: (), y: f32, bar: u32 }\n fn f(foo: i64) {  }\n-fn foo(a: A) { f(B { bar: a.<|> }); }\n+fn foo(a: A) { f(B { bar: a.$0 }); }\n \"#,\n             expect![[r#\"\n                 fd bar [type+name]\n@@ -847,7 +847,7 @@ fn foo(a: A) { f(B { bar: a.<|> }); }\n         check_scores(\n             r#\"\n struct WorldSnapshot { _f: () };\n-fn go(world: &WorldSnapshot) { go(w<|>) }\n+fn go(world: &WorldSnapshot) { go(w$0) }\n \"#,\n             expect![[r#\"\n                 bn world [type+name]\n@@ -862,7 +862,7 @@ fn go(world: &WorldSnapshot) { go(w<|>) }\n         check_scores(\n             r#\"\n struct Foo;\n-fn f(foo: &Foo) { f(foo, w<|>) }\n+fn f(foo: &Foo) { f(foo, w$0) }\n \"#,\n             expect![[r#\"\n                 st Foo []"}, {"sha": "89fb49773dc52e9fc1936e856f2bb3b8ce06d5ac", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -115,7 +115,7 @@ mod tests {\n enum Option<T> { Some(T), None }\n use Option::*;\n fn main() -> Option<i32> {\n-    Som<|>\n+    Som$0\n }\n \"#,\n             r#\""}, {"sha": "f5b0ce3e317f5e3dbb63fa0b91a550c73e2a4de7", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -124,7 +124,7 @@ mod tests {\n             \"no_args\",\n             r#\"\n fn no_args() {}\n-fn main() { no_<|> }\n+fn main() { no_$0 }\n \"#,\n             r#\"\n fn no_args() {}\n@@ -136,7 +136,7 @@ fn main() { no_args()$0 }\n             \"with_args\",\n             r#\"\n fn with_args(x: i32, y: String) {}\n-fn main() { with_<|> }\n+fn main() { with_$0 }\n \"#,\n             r#\"\n fn with_args(x: i32, y: String) {}\n@@ -151,7 +151,7 @@ struct S;\n impl S {\n     fn foo(&self) {}\n }\n-fn bar(s: &S) { s.f<|> }\n+fn bar(s: &S) { s.f$0 }\n \"#,\n             r#\"\n struct S;\n@@ -170,7 +170,7 @@ impl S {\n     fn foo(&self, x: i32) {}\n }\n fn bar(s: &S) {\n-    s.f<|>\n+    s.f$0\n }\n \"#,\n             r#\"\n@@ -195,7 +195,7 @@ struct S;\n impl S {\n     fn foo(&self) {}\n }\n-fn main() { S::f<|> }\n+fn main() { S::f$0 }\n \"#,\n             r#\"\n struct S;\n@@ -215,7 +215,7 @@ fn main() { S::foo(${1:&self})$0 }\n             \"with_args\",\n             r#\"\n fn with_args(x: i32, y: String) {}\n-fn main() { with_<|> }\n+fn main() { with_$0 }\n \"#,\n             r#\"\n fn with_args(x: i32, y: String) {}\n@@ -230,7 +230,7 @@ fn main() { with_args($0) }\n             \"foo\",\n             r#\"\n fn foo(_foo: i32, ___bar: bool, ho_ge_: String) {}\n-fn main() { f<|> }\n+fn main() { f$0 }\n \"#,\n             r#\"\n fn foo(_foo: i32, ___bar: bool, ho_ge_: String) {}\n@@ -248,7 +248,7 @@ struct Foo {}\n fn ref_arg(x: &Foo) {}\n fn main() {\n     let x = Foo {};\n-    ref_ar<|>\n+    ref_ar$0\n }\n \"#,\n             r#\"\n@@ -271,7 +271,7 @@ struct Foo {}\n fn ref_arg(x: &mut Foo) {}\n fn main() {\n     let x = Foo {};\n-    ref_ar<|>\n+    ref_ar$0\n }\n \"#,\n             r#\"\n@@ -299,7 +299,7 @@ impl Bar {\n fn main() {\n     let x = Foo {};\n     let y = Bar {};\n-    y.<|>\n+    y.$0\n }\n \"#,\n             r#\"\n@@ -326,7 +326,7 @@ fn main() {\n fn take_mutably(mut x: &i32) {}\n \n fn main() {\n-    take_m<|>\n+    take_m$0\n }\n \"#,\n             r#\""}, {"sha": "f893e420a227733614d862fe83dd04877eb6c8ce", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -135,7 +135,7 @@ mod tests {\n             \"frobnicate!\",\n             r#\"\n //- /main.rs crate:main deps:foo\n-use foo::<|>;\n+use foo::$0;\n //- /foo/lib.rs crate:foo\n #[macro_export]\n macro_rules! frobnicate { () => () }\n@@ -149,7 +149,7 @@ use foo::frobnicate;\n             \"frobnicate!\",\n             r#\"\n macro_rules! frobnicate { () => () }\n-fn main() { frob<|>!(); }\n+fn main() { frob$0!(); }\n \"#,\n             r#\"\n macro_rules! frobnicate { () => () }\n@@ -173,7 +173,7 @@ fn main() { frobnicate!(); }\n /// ```\n macro_rules! vec { () => {} }\n \n-fn fn main() { v<|> }\n+fn fn main() { v$0 }\n \"#,\n             r#\"\n /// Creates a [`Vec`] containing the arguments.\n@@ -198,7 +198,7 @@ fn fn main() { vec![$0] }\n /// Don't call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`,\n /// call as `let _=foo!  { hello world };`\n macro_rules! foo { () => {} }\n-fn main() { <|> }\n+fn main() { $0 }\n \"#,\n             r#\"\n /// Foo"}, {"sha": "3f4b9d4acc80b56c916d0f8fdc4f94eec7ae3d89", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -22,12 +22,12 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     merge: Some(MergeBehavior::Full),\n };\n \n-/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+/// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     let mut database = RootDatabase::default();\n     database.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = match range_or_offset {\n         RangeOrOffset::Range(_) => panic!(),\n         RangeOrOffset::Offset(it) => it,"}, {"sha": "065785da7fa4b40502b71a47c8b29b44732a38f5", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -194,7 +194,7 @@ mod tests {\n             let mut buf = String::new();\n             let off: usize = offset.into();\n             buf.push_str(&code[..off]);\n-            buf.push_str(\"<|>marker\");\n+            buf.push_str(\"$0marker\");\n             buf.push_str(&code[off..]);\n             buf\n         };\n@@ -231,7 +231,7 @@ mod tests {\n             r\"\n             fn quux(foo: i32) {\n                 let f = |bar, baz: i32| {\n-                    <|>\n+                    $0\n                 };\n             }\",\n             &[\"bar\", \"baz\", \"foo\"],\n@@ -243,7 +243,7 @@ mod tests {\n         do_check(\n             r\"\n             fn quux() {\n-                f(|x| <|> );\n+                f(|x| $0 );\n             }\",\n             &[\"x\"],\n         );\n@@ -254,7 +254,7 @@ mod tests {\n         do_check(\n             r\"\n             fn quux() {\n-                z.f(|x| <|> );\n+                z.f(|x| $0 );\n             }\",\n             &[\"x\"],\n         );\n@@ -267,7 +267,7 @@ mod tests {\n             fn quux() {\n                 loop {\n                     let x = ();\n-                    <|>\n+                    $0\n                 };\n             }\",\n             &[\"x\"],\n@@ -281,7 +281,7 @@ mod tests {\n             fn quux() {\n                 match () {\n                     Some(x) => {\n-                        <|>\n+                        $0\n                     }\n                 };\n             }\",\n@@ -294,7 +294,7 @@ mod tests {\n         do_check(\n             r\"\n             fn foo(x: String) {\n-                let x : &str = &x<|>;\n+                let x : &str = &x$0;\n             }\",\n             &[\"x\"],\n         );\n@@ -307,7 +307,7 @@ mod tests {\n fn foo() {\n     match Some(()) {\n         opt @ Some(unit) => {\n-            <|>\n+            $0\n         }\n         _ => {}\n     }\n@@ -330,7 +330,7 @@ fn foo() {\n \n             fn foo() {\n                 mac!();\n-                <|>\n+                $0\n             }\n         \",\n             &[],\n@@ -343,7 +343,7 @@ fn foo() {\n             r\"\n             fn foo() {\n                 trait {}\n-                <|>\n+                $0\n             }\n         \",\n             &[],\n@@ -391,7 +391,7 @@ fn foo(x: i32, y: u32) {\n         let z = x * 2;\n     }\n     {\n-        let t = x<|> * 3;\n+        let t = x$0 * 3;\n     }\n }\n \"#,\n@@ -404,7 +404,7 @@ fn foo(x: i32, y: u32) {\n         do_check_local_name(\n             r#\"\n fn foo(x: String) {\n-    let x : &str = &x<|>;\n+    let x : &str = &x$0;\n }\n \"#,\n             7,\n@@ -417,7 +417,7 @@ fn foo(x: String) {\n             r\"\n fn foo(x: String) {\n     let x : &str = &x;\n-    x<|>\n+    x$0\n }\n \",\n             28,\n@@ -430,7 +430,7 @@ fn foo(x: String) {\n             r\"\n fn foo() {\n     if let Some(&from) = bar() {\n-        from<|>;\n+        from$0;\n     }\n }\n \",\n@@ -446,7 +446,7 @@ fn foo() {\n fn test() {\n     let foo: Option<f32> = None;\n     while let Option::Some(spam) = foo {\n-        spam<|>\n+        spam$0\n     }\n }\n \"#,"}, {"sha": "4a212d2919091b48e71b422e3c48184833a7c4f2", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -410,7 +410,7 @@ mod tests {\n         let code = r#\"\n             //- /main.rs\n             struct S;\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"S\", \"S\", \"crate::S\", \"self::S\");\n     }\n@@ -420,7 +420,7 @@ mod tests {\n         let code = r#\"\n             //- /main.rs\n             enum E { A }\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"E::A\", \"E::A\", \"E::A\", \"E::A\");\n     }\n@@ -432,7 +432,7 @@ mod tests {\n             mod foo {\n                 pub struct S;\n             }\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"foo::S\", \"foo::S\", \"crate::foo::S\", \"self::foo::S\");\n     }\n@@ -446,7 +446,7 @@ mod tests {\n             mod bar;\n             struct S;\n             //- /foo/bar.rs\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"super::S\", \"super::S\", \"crate::foo::S\", \"super::S\");\n     }\n@@ -457,7 +457,7 @@ mod tests {\n             //- /main.rs\n             mod foo;\n             //- /foo.rs\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"self\", \"self\", \"crate::foo\", \"self\");\n     }\n@@ -468,7 +468,7 @@ mod tests {\n             //- /main.rs\n             mod foo;\n             //- /foo.rs\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"crate\", \"crate\", \"crate\", \"crate\");\n     }\n@@ -480,7 +480,7 @@ mod tests {\n             mod foo;\n             struct S;\n             //- /foo.rs\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"crate::S\", \"crate::S\", \"crate::S\", \"crate::S\");\n     }\n@@ -489,7 +489,7 @@ mod tests {\n     fn different_crate() {\n         let code = r#\"\n             //- /main.rs crate:main deps:std\n-            <|>\n+            $0\n             //- /std.rs crate:std\n             pub struct S;\n         \"#;\n@@ -501,7 +501,7 @@ mod tests {\n         let code = r#\"\n             //- /main.rs crate:main deps:std\n             extern crate std as std_renamed;\n-            <|>\n+            $0\n             //- /std.rs crate:std\n             pub struct S;\n         \"#;\n@@ -523,7 +523,7 @@ mod tests {\n             //- /main.rs crate:main deps:syntax\n \n             use syntax::ast;\n-            <|>\n+            $0\n \n             //- /lib.rs crate:syntax\n             pub mod ast {\n@@ -543,7 +543,7 @@ mod tests {\n         let code = r#\"\n             //- /main.rs crate:main deps:syntax\n \n-            <|>\n+            $0\n \n             //- /lib.rs crate:syntax\n             pub mod ast {\n@@ -569,7 +569,7 @@ mod tests {\n                 mod foo { pub(super) struct S; }\n                 pub(crate) use foo::*;\n             }\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"bar::S\", \"bar::S\", \"crate::bar::S\", \"self::bar::S\");\n     }\n@@ -582,7 +582,7 @@ mod tests {\n                 mod foo { pub(super) struct S; }\n                 pub(crate) use foo::S as U;\n             }\n-            <|>\n+            $0\n         \"#;\n         check_found_path(code, \"bar::U\", \"bar::U\", \"crate::bar::U\", \"self::bar::U\");\n     }\n@@ -591,7 +591,7 @@ mod tests {\n     fn different_crate_reexport() {\n         let code = r#\"\n             //- /main.rs crate:main deps:std\n-            <|>\n+            $0\n             //- /std.rs crate:std deps:core\n             pub use core::S;\n             //- /core.rs crate:core\n@@ -604,7 +604,7 @@ mod tests {\n     fn prelude() {\n         let code = r#\"\n             //- /main.rs crate:main deps:std\n-            <|>\n+            $0\n             //- /std.rs crate:std\n             pub mod prelude { pub struct S; }\n             #[prelude_import]\n@@ -617,7 +617,7 @@ mod tests {\n     fn enum_variant_from_prelude() {\n         let code = r#\"\n             //- /main.rs crate:main deps:std\n-            <|>\n+            $0\n             //- /std.rs crate:std\n             pub mod prelude {\n                 pub enum Option<T> { Some(T), None }\n@@ -637,7 +637,7 @@ mod tests {\n             pub mod foo;\n             pub mod baz;\n             struct S;\n-            <|>\n+            $0\n             //- /foo.rs\n             pub mod bar { pub struct S; }\n             //- /baz.rs\n@@ -654,7 +654,7 @@ mod tests {\n             pub mod bar { pub struct S; }\n             use bar::S;\n             //- /foo.rs\n-            <|>\n+            $0\n         \"#;\n         // crate::S would be shorter, but using private imports seems wrong\n         check_found_path(code, \"crate::bar::S\", \"crate::bar::S\", \"crate::bar::S\", \"crate::bar::S\");\n@@ -668,7 +668,7 @@ mod tests {\n             pub mod bar;\n             pub mod baz;\n             //- /bar.rs\n-            <|>\n+            $0\n             //- /foo.rs\n             pub use super::baz;\n             pub struct S;\n@@ -683,7 +683,7 @@ mod tests {\n         mark::check!(prefer_std_paths);\n         let code = r#\"\n         //- /main.rs crate:main deps:alloc,std\n-        <|>\n+        $0\n \n         //- /std.rs crate:std deps:alloc\n         pub mod sync {\n@@ -711,7 +711,7 @@ mod tests {\n         //- /main.rs crate:main deps:core,std\n         #![no_std]\n \n-        <|>\n+        $0\n \n         //- /std.rs crate:std deps:core\n \n@@ -740,7 +740,7 @@ mod tests {\n         //- /main.rs crate:main deps:alloc,std\n         #![no_std]\n \n-        <|>\n+        $0\n \n         //- /std.rs crate:std deps:alloc\n \n@@ -767,7 +767,7 @@ mod tests {\n     fn prefer_shorter_paths_if_not_alloc() {\n         let code = r#\"\n         //- /main.rs crate:main deps:megaalloc,std\n-        <|>\n+        $0\n \n         //- /std.rs crate:std deps:megaalloc\n         pub mod sync {\n@@ -790,7 +790,7 @@ mod tests {\n     fn builtins_are_in_scope() {\n         let code = r#\"\n         //- /main.rs\n-        <|>\n+        $0\n \n         pub mod primitive {\n             pub use u8;"}, {"sha": "509e1bbbc085f2df58963a802be3e4a7cacb9a2b", "filename": "crates/hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -28,7 +28,7 @@ fn typing_inside_a_function_should_not_invalidate_def_map() {\n     check_def_map_is_not_recomputed(\n         r\"\n         //- /lib.rs\n-        mod foo;<|>\n+        mod foo;$0\n \n         use crate::foo::bar::Baz;\n \n@@ -81,7 +81,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         pub mod bar;\n \n         //- /foo/bar.rs\n-        <|>\n+        $0\n         m!(X);\n         \",\n     );"}, {"sha": "eb257579f51633baaf08677418ab8dbde43be9cf", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -277,7 +277,7 @@ mod tests {\n         let expander = BuiltinDeriveExpander::find_by_name(&name).unwrap();\n         let fixture = format!(\n             r#\"//- /main.rs crate:main deps:core\n-<|>\n+$0\n {}\n //- /lib.rs crate:core\n // empty"}, {"sha": "3b1675f0b78a7c0419ea7a07dfdbffa1c83f4bf4", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -314,7 +314,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n         \"\n         //- /lib.rs\n         fn foo() -> i32 {\n-            <|>1 + 1\n+            $01 + 1\n         }\n     \",\n     );"}, {"sha": "4d8983cb213772f3516147c3565a935f63784746", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -178,7 +178,7 @@ mod tests {\n //- /lib.rs\n fn callee() {}\n fn caller() {\n-    call<|>ee();\n+    call$0ee();\n }\n \"#,\n             \"callee Function FileId(0) 0..14 3..9\",\n@@ -192,7 +192,7 @@ fn caller() {\n         check_hierarchy(\n             r#\"\n //- /lib.rs\n-fn call<|>ee() {}\n+fn call$0ee() {}\n fn caller() {\n     callee();\n }\n@@ -210,7 +210,7 @@ fn caller() {\n //- /lib.rs\n fn callee() {}\n fn caller() {\n-    call<|>ee();\n+    call$0ee();\n     callee();\n }\n \"#,\n@@ -227,7 +227,7 @@ fn caller() {\n //- /lib.rs\n fn callee() {}\n fn caller1() {\n-    call<|>ee();\n+    call$0ee();\n }\n \n fn caller2() {\n@@ -250,7 +250,7 @@ fn caller2() {\n //- /lib.rs cfg:test\n fn callee() {}\n fn caller1() {\n-    call<|>ee();\n+    call$0ee();\n }\n \n #[cfg(test)]\n@@ -281,7 +281,7 @@ mod foo;\n use foo::callee;\n \n fn caller() {\n-    call<|>ee();\n+    call$0ee();\n }\n \n //- /foo/mod.rs\n@@ -299,7 +299,7 @@ pub fn callee() {}\n             r#\"\n //- /lib.rs\n fn callee() {}\n-fn call<|>er() {\n+fn call$0er() {\n     callee();\n     callee();\n }\n@@ -318,7 +318,7 @@ fn call<|>er() {\n mod foo;\n use foo::callee;\n \n-fn call<|>er() {\n+fn call$0er() {\n     callee();\n }\n \n@@ -337,7 +337,7 @@ pub fn callee() {}\n             r#\"\n //- /lib.rs\n fn caller1() {\n-    call<|>er2();\n+    call$0er2();\n }\n \n fn caller2() {\n@@ -365,7 +365,7 @@ fn a() {\n fn b() {}\n \n fn main() {\n-    a<|>()\n+    a$0()\n }\n \"#,\n             \"a Function FileId(0) 0..18 3..4\",\n@@ -376,7 +376,7 @@ fn main() {\n         check_hierarchy(\n             r#\"\n fn a() {\n-    b<|>()\n+    b$0()\n }\n \n fn b() {}"}, {"sha": "6931a6190d07aa3f53e413e836e7adb079c57b94", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -315,7 +315,7 @@ fn div(x: i32, y: i32) -> Result<i32, ()> {\n     if y == 0 {\n         return Err(());\n     }\n-    x / y<|>\n+    x / y$0\n }\n //- /core/lib.rs crate:core\n pub mod result {\n@@ -346,7 +346,7 @@ fn div<T>(x: T) -> Result<T, i32> {\n     if x == 0 {\n         return Err(7);\n     }\n-    <|>x\n+    $0x\n }\n //- /core/lib.rs crate:core\n pub mod result {\n@@ -379,7 +379,7 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     if y == 0 {\n         return Err(());\n     }\n-    x <|>/ y\n+    x $0/ y\n }\n //- /core/lib.rs crate:core\n pub mod result {\n@@ -444,7 +444,7 @@ pub mod result {\n struct TestStruct { one: i32, two: i64 }\n \n fn test_fn() {\n-    let s = TestStruct {<|>};\n+    let s = TestStruct {$0};\n }\n \"#,\n             r#\"\n@@ -464,7 +464,7 @@ fn test_fn() {\n struct TestStruct { one: i32 }\n \n impl TestStruct {\n-    fn test_fn() { let s = Self {<|>}; }\n+    fn test_fn() { let s = Self {$0}; }\n }\n \"#,\n             r#\"\n@@ -487,7 +487,7 @@ enum Expr {\n \n impl Expr {\n     fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n-        Expr::Bin {<|> }\n+        Expr::Bin {$0 }\n     }\n }\n \"#,\n@@ -512,7 +512,7 @@ impl Expr {\n struct TestStruct { one: i32, two: i64 }\n \n fn test_fn() {\n-    let s = TestStruct{ two: 2<|> };\n+    let s = TestStruct{ two: 2$0 };\n }\n \"#,\n             r\"\n@@ -608,7 +608,7 @@ fn here() {}\n macro_rules! id { ($($tt:tt)*) => { $($tt)*}; }\n \n fn main() {\n-    let _x = id![Foo { a: <|>42 }];\n+    let _x = id![Foo { a: $042 }];\n }\n \n pub struct Foo { pub a: i32, pub b: i32 }\n@@ -663,7 +663,7 @@ mod a {\n         check_fix(\n             r\"\n             mod b {}\n-            use {<|>b};\n+            use {$0b};\n             \",\n             r\"\n             mod b {}\n@@ -673,7 +673,7 @@ mod a {\n         check_fix(\n             r\"\n             mod b {}\n-            use {b<|>};\n+            use {b$0};\n             \",\n             r\"\n             mod b {}\n@@ -683,7 +683,7 @@ mod a {\n         check_fix(\n             r\"\n             mod a { mod c {} }\n-            use a::{c<|>};\n+            use a::{c$0};\n             \",\n             r\"\n             mod a { mod c {} }\n@@ -693,7 +693,7 @@ mod a {\n         check_fix(\n             r\"\n             mod a {}\n-            use a::{self<|>};\n+            use a::{self$0};\n             \",\n             r\"\n             mod a {}\n@@ -703,7 +703,7 @@ mod a {\n         check_fix(\n             r\"\n             mod a { mod c {} mod d { mod e {} } }\n-            use a::{c, d::{e<|>}};\n+            use a::{c, d::{e$0}};\n             \",\n             r\"\n             mod a { mod c {} mod d { mod e {} } }\n@@ -717,7 +717,7 @@ mod a {\n         check_fix(\n             r\"\n fn main() {\n-    Foo { bar: 3, baz<|>: false};\n+    Foo { bar: 3, baz$0: false};\n }\n struct Foo {\n     bar: i32\n@@ -743,7 +743,7 @@ struct Foo {\n mod foo;\n \n fn main() {\n-    foo::Foo { bar: 3, <|>baz: false};\n+    foo::Foo { bar: 3, $0baz: false};\n }\n //- /foo.rs\n struct Foo {\n@@ -777,7 +777,7 @@ struct Foo {\n     fn test_rename_incorrect_case() {\n         check_fix(\n             r#\"\n-pub struct test_struct<|> { one: i32 }\n+pub struct test_struct$0 { one: i32 }\n \n pub fn some_fn(val: test_struct) -> test_struct {\n     test_struct { one: val.one + 1 }\n@@ -794,7 +794,7 @@ pub fn some_fn(val: TestStruct) -> TestStruct {\n \n         check_fix(\n             r#\"\n-pub fn some_fn(NonSnakeCase<|>: u8) -> u8 {\n+pub fn some_fn(NonSnakeCase$0: u8) -> u8 {\n     NonSnakeCase\n }\n \"#,\n@@ -807,7 +807,7 @@ pub fn some_fn(non_snake_case: u8) -> u8 {\n \n         check_fix(\n             r#\"\n-pub fn SomeFn<|>(val: u8) -> u8 {\n+pub fn SomeFn$0(val: u8) -> u8 {\n     if val != 0 { SomeFn(val - 1) } else { val }\n }\n \"#,\n@@ -821,7 +821,7 @@ pub fn some_fn(val: u8) -> u8 {\n         check_fix(\n             r#\"\n fn some_fn() {\n-    let whatAWeird_Formatting<|> = 10;\n+    let whatAWeird_Formatting$0 = 10;\n     another_func(whatAWeird_Formatting);\n }\n \"#,\n@@ -839,7 +839,7 @@ fn some_fn() {\n         check_no_diagnostics(\n             r#\"\n fn foo() {\n-    const ANOTHER_ITEM<|>: &str = \"some_item\";\n+    const ANOTHER_ITEM$0: &str = \"some_item\";\n }\n \"#,\n         );\n@@ -852,7 +852,7 @@ fn foo() {\n pub struct TestStruct;\n \n impl TestStruct {\n-    pub fn SomeFn<|>() -> TestStruct {\n+    pub fn SomeFn$0() -> TestStruct {\n         TestStruct\n     }\n }\n@@ -871,7 +871,7 @@ impl TestStruct {\n \n     #[test]\n     fn test_single_incorrect_case_diagnostic_in_function_name_issue_6970() {\n-        let input = r#\"fn FOO<|>() {}\"#;\n+        let input = r#\"fn FOO$0() {}\"#;\n         let expected = r#\"fn foo() {}\"#;\n \n         let (analysis, file_position) = fixture::position(input);"}, {"sha": "16c6ea8271ec6d759d1b3a6f96a631c2225c3816", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -120,7 +120,7 @@ fn main() { A { 0: 0 } }\n struct A { a: &'static str }\n fn main() {\n     let a = \"haha\";\n-    A { a<|>: a }\n+    A { a$0: a }\n }\n \"#,\n             r#\"\n@@ -138,7 +138,7 @@ struct A { a: &'static str, b: &'static str }\n fn main() {\n     let a = \"haha\";\n     let b = \"bb\";\n-    A { a<|>: a, b }\n+    A { a$0: a, b }\n }\n \"#,\n             r#\"\n@@ -171,7 +171,7 @@ fn f(a: A) { let A { 0: 0 } = a; }\n             r#\"\n struct A { a: &'static str }\n fn f(a: A) {\n-    let A { a<|>: a } = a;\n+    let A { a$0: a } = a;\n }\n \"#,\n             r#\"\n@@ -186,7 +186,7 @@ fn f(a: A) {\n             r#\"\n struct A { a: &'static str, b: &'static str }\n fn f(a: A) {\n-    let A { a<|>: a, b } = a;\n+    let A { a$0: a, b } = a;\n }\n \"#,\n             r#\""}, {"sha": "1ff818de247cfc32180e059627a812bdc4fc2a3e", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -464,7 +464,7 @@ mod tests {\n     fn test_doc_url_struct() {\n         check(\n             r#\"\n-pub struct Fo<|>o;\n+pub struct Fo$0o;\n \"#,\n             expect![[r#\"https://docs.rs/test/*/test/struct.Foo.html\"#]],\n         );\n@@ -474,7 +474,7 @@ pub struct Fo<|>o;\n     fn test_doc_url_fn() {\n         check(\n             r#\"\n-pub fn fo<|>o() {}\n+pub fn fo$0o() {}\n \"#,\n             expect![[r##\"https://docs.rs/test/*/test/fn.foo.html#method.foo\"##]],\n         );\n@@ -487,7 +487,7 @@ pub fn fo<|>o() {}\n pub struct Foo;\n \n impl Foo {\n-    pub fn met<|>hod() {}\n+    pub fn met$0hod() {}\n }\n \n \"#,\n@@ -500,7 +500,7 @@ impl Foo {\n         check(\n             r#\"\n pub trait Bar {\n-    fn met<|>hod() {}\n+    fn met$0hod() {}\n }\n \n \"#,\n@@ -513,7 +513,7 @@ pub trait Bar {\n         check(\n             r#\"\n pub trait Foo {\n-    fn met<|>hod();\n+    fn met$0hod();\n }\n \n \"#,\n@@ -526,7 +526,7 @@ pub trait Foo {\n         check(\n             r#\"\n pub struct Foo {\n-    pub fie<|>ld: ()\n+    pub fie$0ld: ()\n }\n \n \"#,\n@@ -539,7 +539,7 @@ pub struct Foo {\n         check(\n             r#\"\n pub mod foo {\n-    pub mod ba<|>r {}\n+    pub mod ba$0r {}\n }\n         \"#,\n             expect![[r#\"https://docs.rs/test/*/test/foo/bar/index.html\"#]],\n@@ -564,7 +564,7 @@ pub mod wrapper {\n }\n \n fn foo() {\n-    let bar: wrapper::It<|>em;\n+    let bar: wrapper::It$0em;\n }\n         \"#,\n             expect![[r#\"https://docs.rs/test/*/test/wrapper/module/struct.Item.html\"#]],"}, {"sha": "ffb3a6f7d2d214ffe2179f79ede617426cd99479", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -144,7 +144,7 @@ macro_rules! foo {\n macro_rules! baz {\n     () => { foo!(); }\n }\n-f<|>oo!();\n+f$0oo!();\n \"#,\n             expect![[r#\"\n                 foo\n@@ -165,7 +165,7 @@ macro_rules! foo {\n         }\n     }\n }\n-f<|>oo!();\n+f$0oo!();\n         \"#,\n             expect![[r#\"\n             foo\n@@ -192,7 +192,7 @@ macro_rules! match_ast {\n }\n \n fn main() {\n-    mat<|>ch_ast! {\n+    mat$0ch_ast! {\n         match container {\n             ast::TraitDef(it) => {},\n             ast::ImplDef(it) => {},\n@@ -226,7 +226,7 @@ macro_rules! match_ast {\n \n fn main() {\n     let p = f(|it| {\n-        let res = mat<|>ch_ast! { match c {}};\n+        let res = mat$0ch_ast! { match c {}};\n         Some(res)\n     })?;\n }\n@@ -250,7 +250,7 @@ macro_rules! foo {\n }\n \n fn main() {\n-    let res = fo<|>o!();\n+    let res = fo$0o!();\n }\n \"#,\n             expect![[r#\"\n@@ -272,7 +272,7 @@ macro_rules! foo {\n }\n \n fn main() {\n-    let res = fo<|>o!();\n+    let res = fo$0o!();\n }\n \"#,\n             expect![[r#\""}, {"sha": "56418c960e676958caf5326a4cc0cc53ef92bf88", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -334,29 +334,29 @@ mod tests {\n \n     #[test]\n     fn test_extend_selection_arith() {\n-        do_check(r#\"fn foo() { <|>1 + 1 }\"#, &[\"1\", \"1 + 1\", \"{ 1 + 1 }\"]);\n+        do_check(r#\"fn foo() { $01 + 1 }\"#, &[\"1\", \"1 + 1\", \"{ 1 + 1 }\"]);\n     }\n \n     #[test]\n     fn test_extend_selection_list() {\n-        do_check(r#\"fn foo(<|>x: i32) {}\"#, &[\"x\", \"x: i32\"]);\n-        do_check(r#\"fn foo(<|>x: i32, y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32, \"]);\n-        do_check(r#\"fn foo(<|>x: i32,y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32,\", \"(x: i32,y: i32)\"]);\n-        do_check(r#\"fn foo(x: i32, <|>y: i32) {}\"#, &[\"y\", \"y: i32\", \", y: i32\"]);\n-        do_check(r#\"fn foo(x: i32, <|>y: i32, ) {}\"#, &[\"y\", \"y: i32\", \"y: i32, \"]);\n-        do_check(r#\"fn foo(x: i32,<|>y: i32) {}\"#, &[\"y\", \"y: i32\", \",y: i32\"]);\n+        do_check(r#\"fn foo($0x: i32) {}\"#, &[\"x\", \"x: i32\"]);\n+        do_check(r#\"fn foo($0x: i32, y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32, \"]);\n+        do_check(r#\"fn foo($0x: i32,y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32,\", \"(x: i32,y: i32)\"]);\n+        do_check(r#\"fn foo(x: i32, $0y: i32) {}\"#, &[\"y\", \"y: i32\", \", y: i32\"]);\n+        do_check(r#\"fn foo(x: i32, $0y: i32, ) {}\"#, &[\"y\", \"y: i32\", \"y: i32, \"]);\n+        do_check(r#\"fn foo(x: i32,$0y: i32) {}\"#, &[\"y\", \"y: i32\", \",y: i32\"]);\n \n-        do_check(r#\"const FOO: [usize; 2] = [ 22<|> , 33];\"#, &[\"22\", \"22 , \"]);\n-        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|>];\"#, &[\"33\", \", 33\"]);\n-        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|> ,];\"#, &[\"33\", \"33 ,\", \"[ 22 , 33 ,]\"]);\n+        do_check(r#\"const FOO: [usize; 2] = [ 22$0 , 33];\"#, &[\"22\", \"22 , \"]);\n+        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33$0];\"#, &[\"33\", \", 33\"]);\n+        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33$0 ,];\"#, &[\"33\", \"33 ,\", \"[ 22 , 33 ,]\"]);\n \n-        do_check(r#\"fn main() { (1, 2<|>) }\"#, &[\"2\", \", 2\", \"(1, 2)\"]);\n+        do_check(r#\"fn main() { (1, 2$0) }\"#, &[\"2\", \", 2\", \"(1, 2)\"]);\n \n         do_check(\n             r#\"\n const FOO: [usize; 2] = [\n     22,\n-    <|>33,\n+    $033,\n ]\"#,\n             &[\"33\", \"33,\"],\n         );\n@@ -365,7 +365,7 @@ const FOO: [usize; 2] = [\n             r#\"\n const FOO: [usize; 2] = [\n     22\n-    , 33<|>,\n+    , 33$0,\n ]\"#,\n             &[\"33\", \"33,\"],\n         );\n@@ -376,7 +376,7 @@ const FOO: [usize; 2] = [\n         do_check(\n             r#\"\n impl S {\n-<|>    fn foo() {\n+$0    fn foo() {\n \n     }\n }\"#,\n@@ -393,7 +393,7 @@ struct A;\n /// bla\n /// bla\n struct B {\n-    <|>\n+    $0\n }\n             \"#,\n             &[\"\\n    \\n\", \"{\\n    \\n}\", \"/// bla\\n/// bla\\nstruct B {\\n    \\n}\"],\n@@ -407,7 +407,7 @@ struct B {\n fn bar(){}\n \n // fn foo() {\n-// 1 + <|>1\n+// 1 + $01\n // }\n \n // fn foo(){}\n@@ -419,7 +419,7 @@ fn bar(){}\n             r#\"\n // #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n // pub enum Direction {\n-//  <|>   Next,\n+//  $0   Next,\n //     Prev\n // }\n \"#,\n@@ -433,46 +433,46 @@ fn bar(){}\n             r#\"\n /*\n foo\n-_bar1<|>*/\n+_bar1$0*/\n \"#,\n             &[\"_bar1\", \"/*\\nfoo\\n_bar1*/\"],\n         );\n \n-        do_check(r#\"//!<|>foo_2 bar\"#, &[\"foo_2\", \"//!foo_2 bar\"]);\n+        do_check(r#\"//!$0foo_2 bar\"#, &[\"foo_2\", \"//!foo_2 bar\"]);\n \n-        do_check(r#\"/<|>/foo bar\"#, &[\"//foo bar\"]);\n+        do_check(r#\"/$0/foo bar\"#, &[\"//foo bar\"]);\n     }\n \n     #[test]\n     fn test_extend_selection_prefer_idents() {\n         do_check(\n             r#\"\n-fn main() { foo<|>+bar;}\n+fn main() { foo$0+bar;}\n \"#,\n             &[\"foo\", \"foo+bar\"],\n         );\n         do_check(\n             r#\"\n-fn main() { foo+<|>bar;}\n+fn main() { foo+$0bar;}\n \"#,\n             &[\"bar\", \"foo+bar\"],\n         );\n     }\n \n     #[test]\n     fn test_extend_selection_prefer_lifetimes() {\n-        do_check(r#\"fn foo<<|>'a>() {}\"#, &[\"'a\", \"<'a>\"]);\n-        do_check(r#\"fn foo<'a<|>>() {}\"#, &[\"'a\", \"<'a>\"]);\n+        do_check(r#\"fn foo<$0'a>() {}\"#, &[\"'a\", \"<'a>\"]);\n+        do_check(r#\"fn foo<'a$0>() {}\"#, &[\"'a\", \"<'a>\"]);\n     }\n \n     #[test]\n     fn test_extend_selection_select_first_word() {\n-        do_check(r#\"// foo bar b<|>az quxx\"#, &[\"baz\", \"// foo bar baz quxx\"]);\n+        do_check(r#\"// foo bar b$0az quxx\"#, &[\"baz\", \"// foo bar baz quxx\"]);\n         do_check(\n             r#\"\n impl S {\n fn foo() {\n-// hel<|>lo world\n+// hel$0lo world\n }\n }\n \"#,\n@@ -486,7 +486,7 @@ fn foo() {\n             r#\"\n fn bar(){}\n \n-\" fn f<|>oo() {\"\n+\" fn f$0oo() {\"\n \"#,\n             &[\"foo\", \"\\\" fn foo() {\\\"\"],\n         );\n@@ -499,7 +499,7 @@ fn bar(){}\n fn foo<R>()\n     where\n         R: req::Request + 'static,\n-        R::Params: DeserializeOwned<|> + panic::UnwindSafe + 'static,\n+        R::Params: DeserializeOwned$0 + panic::UnwindSafe + 'static,\n         R::Result: Serialize + 'static,\n \"#,\n             &[\n@@ -510,26 +510,26 @@ fn foo<R>()\n                 \"R::Params: DeserializeOwned + panic::UnwindSafe + 'static,\",\n             ],\n         );\n-        do_check(r#\"fn foo<T>() where T: <|>Copy\"#, &[\"Copy\"]);\n-        do_check(r#\"fn foo<T>() where T: <|>Copy + Display\"#, &[\"Copy\", \"Copy + \"]);\n-        do_check(r#\"fn foo<T>() where T: <|>Copy +Display\"#, &[\"Copy\", \"Copy +\"]);\n-        do_check(r#\"fn foo<T>() where T: <|>Copy+Display\"#, &[\"Copy\", \"Copy+\"]);\n-        do_check(r#\"fn foo<T>() where T: Copy + <|>Display\"#, &[\"Display\", \"+ Display\"]);\n-        do_check(r#\"fn foo<T>() where T: Copy + <|>Display + Sync\"#, &[\"Display\", \"Display + \"]);\n-        do_check(r#\"fn foo<T>() where T: Copy +<|>Display\"#, &[\"Display\", \"+Display\"]);\n+        do_check(r#\"fn foo<T>() where T: $0Copy\"#, &[\"Copy\"]);\n+        do_check(r#\"fn foo<T>() where T: $0Copy + Display\"#, &[\"Copy\", \"Copy + \"]);\n+        do_check(r#\"fn foo<T>() where T: $0Copy +Display\"#, &[\"Copy\", \"Copy +\"]);\n+        do_check(r#\"fn foo<T>() where T: $0Copy+Display\"#, &[\"Copy\", \"Copy+\"]);\n+        do_check(r#\"fn foo<T>() where T: Copy + $0Display\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T>() where T: Copy + $0Display + Sync\"#, &[\"Display\", \"Display + \"]);\n+        do_check(r#\"fn foo<T>() where T: Copy +$0Display\"#, &[\"Display\", \"+Display\"]);\n     }\n \n     #[test]\n     fn test_extend_trait_bounds_list_inline() {\n-        do_check(r#\"fn foo<T: <|>Copy>() {}\"#, &[\"Copy\"]);\n-        do_check(r#\"fn foo<T: <|>Copy + Display>() {}\"#, &[\"Copy\", \"Copy + \"]);\n-        do_check(r#\"fn foo<T: <|>Copy +Display>() {}\"#, &[\"Copy\", \"Copy +\"]);\n-        do_check(r#\"fn foo<T: <|>Copy+Display>() {}\"#, &[\"Copy\", \"Copy+\"]);\n-        do_check(r#\"fn foo<T: Copy + <|>Display>() {}\"#, &[\"Display\", \"+ Display\"]);\n-        do_check(r#\"fn foo<T: Copy + <|>Display + Sync>() {}\"#, &[\"Display\", \"Display + \"]);\n-        do_check(r#\"fn foo<T: Copy +<|>Display>() {}\"#, &[\"Display\", \"+Display\"]);\n+        do_check(r#\"fn foo<T: $0Copy>() {}\"#, &[\"Copy\"]);\n+        do_check(r#\"fn foo<T: $0Copy + Display>() {}\"#, &[\"Copy\", \"Copy + \"]);\n+        do_check(r#\"fn foo<T: $0Copy +Display>() {}\"#, &[\"Copy\", \"Copy +\"]);\n+        do_check(r#\"fn foo<T: $0Copy+Display>() {}\"#, &[\"Copy\", \"Copy+\"]);\n+        do_check(r#\"fn foo<T: Copy + $0Display>() {}\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T: Copy + $0Display + Sync>() {}\"#, &[\"Display\", \"Display + \"]);\n+        do_check(r#\"fn foo<T: Copy +$0Display>() {}\"#, &[\"Display\", \"+Display\"]);\n         do_check(\n-            r#\"fn foo<T: Copy<|> + Display, U: Copy>() {}\"#,\n+            r#\"fn foo<T: Copy$0 + Display, U: Copy>() {}\"#,\n             &[\n                 \"Copy\",\n                 \"Copy + \",\n@@ -544,19 +544,19 @@ fn foo<R>()\n     #[test]\n     fn test_extend_selection_on_tuple_in_type() {\n         do_check(\n-            r#\"fn main() { let _: (krate, <|>_crate_def_map, module_id) = (); }\"#,\n+            r#\"fn main() { let _: (krate, $0_crate_def_map, module_id) = (); }\"#,\n             &[\"_crate_def_map\", \"_crate_def_map, \", \"(krate, _crate_def_map, module_id)\"],\n         );\n         // white space variations\n         do_check(\n-            r#\"fn main() { let _: (krate,<|>_crate_def_map,module_id) = (); }\"#,\n+            r#\"fn main() { let _: (krate,$0_crate_def_map,module_id) = (); }\"#,\n             &[\"_crate_def_map\", \"_crate_def_map,\", \"(krate,_crate_def_map,module_id)\"],\n         );\n         do_check(\n             r#\"\n fn main() { let _: (\n     krate,\n-    _crate<|>_def_map,\n+    _crate$0_def_map,\n     module_id\n ) = (); }\"#,\n             &[\n@@ -570,19 +570,19 @@ fn main() { let _: (\n     #[test]\n     fn test_extend_selection_on_tuple_in_rvalue() {\n         do_check(\n-            r#\"fn main() { let var = (krate, _crate_def_map<|>, module_id); }\"#,\n+            r#\"fn main() { let var = (krate, _crate_def_map$0, module_id); }\"#,\n             &[\"_crate_def_map\", \"_crate_def_map, \", \"(krate, _crate_def_map, module_id)\"],\n         );\n         // white space variations\n         do_check(\n-            r#\"fn main() { let var = (krate,_crate<|>_def_map,module_id); }\"#,\n+            r#\"fn main() { let var = (krate,_crate$0_def_map,module_id); }\"#,\n             &[\"_crate_def_map\", \"_crate_def_map,\", \"(krate,_crate_def_map,module_id)\"],\n         );\n         do_check(\n             r#\"\n fn main() { let var = (\n     krate,\n-    _crate_def_map<|>,\n+    _crate_def_map$0,\n     module_id\n ); }\"#,\n             &[\n@@ -596,19 +596,19 @@ fn main() { let var = (\n     #[test]\n     fn test_extend_selection_on_tuple_pat() {\n         do_check(\n-            r#\"fn main() { let (krate, _crate_def_map<|>, module_id) = var; }\"#,\n+            r#\"fn main() { let (krate, _crate_def_map$0, module_id) = var; }\"#,\n             &[\"_crate_def_map\", \"_crate_def_map, \", \"(krate, _crate_def_map, module_id)\"],\n         );\n         // white space variations\n         do_check(\n-            r#\"fn main() { let (krate,_crate<|>_def_map,module_id) = var; }\"#,\n+            r#\"fn main() { let (krate,_crate$0_def_map,module_id) = var; }\"#,\n             &[\"_crate_def_map\", \"_crate_def_map,\", \"(krate,_crate_def_map,module_id)\"],\n         );\n         do_check(\n             r#\"\n fn main() { let (\n     krate,\n-    _crate_def_map<|>,\n+    _crate_def_map$0,\n     module_id\n ) = var; }\"#,\n             &[\n@@ -623,7 +623,7 @@ fn main() { let (\n     fn extend_selection_inside_macros() {\n         do_check(\n             r#\"macro_rules! foo { ($item:item) => {$item} }\n-                foo!{fn hello(na<|>me:usize){}}\"#,\n+                foo!{fn hello(na$0me:usize){}}\"#,\n             &[\n                 \"name\",\n                 \"name:usize\",\n@@ -640,7 +640,7 @@ fn main() { let (\n         do_check(\n             r#\" macro_rules! foo2 { ($item:item) => {$item} }\n                 macro_rules! foo { ($item:item) => {foo2!($item);} }\n-                foo!{fn hello(na<|>me:usize){}}\"#,\n+                foo!{fn hello(na$0me:usize){}}\"#,\n             &[\n                 \"name\",\n                 \"name:usize\","}, {"sha": "cc82188852d7987c06a3901a0ac45ce8f1b0b81e", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -20,38 +20,38 @@ pub(crate) fn files(ra_fixture: &str) -> (Analysis, Vec<FileId>) {\n     (host.analysis(), change_fixture.files)\n }\n \n-/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+/// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn position(ra_fixture: &str) -> (Analysis, FilePosition) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = match range_or_offset {\n         RangeOrOffset::Range(_) => panic!(),\n         RangeOrOffset::Offset(it) => it,\n     };\n     (host.analysis(), FilePosition { file_id, offset })\n }\n \n-/// Creates analysis for a single file, returns range marked with a pair of <|>.\n+/// Creates analysis for a single file, returns range marked with a pair of $0.\n pub(crate) fn range(ra_fixture: &str) -> (Analysis, FileRange) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let range = match range_or_offset {\n         RangeOrOffset::Range(it) => it,\n         RangeOrOffset::Offset(_) => panic!(),\n     };\n     (host.analysis(), FileRange { file_id, range })\n }\n \n-/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+/// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = match range_or_offset {\n         RangeOrOffset::Range(_) => panic!(),\n         RangeOrOffset::Offset(it) => it,"}, {"sha": "f6e5a522b4ef86f2d50ffa2c110a97fb376ce270", "filename": "crates/ide/src/fn_references.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffn_references.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -34,7 +34,7 @@ mod tests {\n     fn test_find_all_methods() {\n         let (analysis, pos) = fixture::position(\n             r#\"\n-            fn private_fn() {<|>}\n+            fn private_fn() {$0}\n \n             pub fn pub_fn() {}\n \n@@ -51,7 +51,7 @@ mod tests {\n         let (analysis, pos) = fixture::position(\n             r#\"\n             trait Foo {\n-                fn bar() {<|>}\n+                fn bar() {$0}\n                 fn baz() {}\n             }\n         \"#,\n@@ -67,7 +67,7 @@ mod tests {\n             r#\"\n             //- /lib.rs\n             #[test]\n-            fn foo() {<|>}\n+            fn foo() {$0}\n \n             pub fn pub_fn() {}\n "}, {"sha": "95b4cb9e34ae6776ca88fe734174b5356cafa254", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -166,7 +166,7 @@ mod tests {\n         check(\n             r#\"\n             //- /main.rs crate:main deps:std\n-            extern crate std<|>;\n+            extern crate std$0;\n             //- /std/lib.rs crate:std\n             // empty\n             //^ file\n@@ -179,7 +179,7 @@ mod tests {\n         check(\n             r#\"\n             //- /main.rs crate:main deps:std\n-            extern crate std as abc<|>;\n+            extern crate std as abc$0;\n             //- /std/lib.rs crate:std\n             // empty\n             //^ file\n@@ -193,7 +193,7 @@ mod tests {\n             r#\"\n struct Foo;\n      //^^^\n-enum E { X(Foo<|>) }\n+enum E { X(Foo$0) }\n \"#,\n         );\n     }\n@@ -204,7 +204,7 @@ enum E { X(Foo<|>) }\n             r#\"\n struct Foo;\n      //^^^\n-enum E { X(<|>Foo) }\n+enum E { X($0Foo) }\n \"#,\n         );\n     }\n@@ -217,7 +217,7 @@ enum E { X(<|>Foo) }\n use a::Foo;\n mod a;\n mod b;\n-enum E { X(Foo<|>) }\n+enum E { X(Foo$0) }\n \n //- /a.rs\n struct Foo;\n@@ -233,7 +233,7 @@ struct Foo;\n         check(\n             r#\"\n //- /lib.rs\n-mod <|>foo;\n+mod $0foo;\n \n //- /foo.rs\n // empty\n@@ -244,7 +244,7 @@ mod <|>foo;\n         check(\n             r#\"\n //- /lib.rs\n-mod <|>foo;\n+mod $0foo;\n \n //- /foo/mod.rs\n // empty\n@@ -260,7 +260,7 @@ mod <|>foo;\n macro_rules! foo { () => { () } }\n            //^^^\n fn bar() {\n-    <|>foo!();\n+    $0foo!();\n }\n \"#,\n         );\n@@ -273,7 +273,7 @@ fn bar() {\n //- /lib.rs\n use foo::foo;\n fn bar() {\n-    <|>foo!();\n+    $0foo!();\n }\n \n //- /foo/lib.rs\n@@ -289,7 +289,7 @@ macro_rules! foo { () => { () } }\n         check(\n             r#\"\n //- /lib.rs\n-use foo::foo<|>;\n+use foo::foo$0;\n \n //- /foo/lib.rs\n #[macro_export]\n@@ -312,7 +312,7 @@ define_fn!(foo);\n          //^^^\n \n fn bar() {\n-   <|>foo();\n+   $0foo();\n }\n \"#,\n         );\n@@ -331,7 +331,7 @@ macro_rules! define_fn {\n //^^^^^^^^^^^^^\n \n fn bar() {\n-   <|>foo();\n+   $0foo();\n }\n \"#,\n         );\n@@ -347,7 +347,7 @@ macro_rules! foo {() => {0}}\n \n fn bar() {\n     match (0,1) {\n-        (<|>foo!(), _) => {}\n+        ($0foo!(), _) => {}\n     }\n }\n \"#,\n@@ -363,7 +363,7 @@ macro_rules! foo {() => {0}}\n            //^^^\n fn bar() {\n     match 0 {\n-        <|>foo!() => {}\n+        $0foo!() => {}\n     }\n }\n \"#,\n@@ -375,7 +375,7 @@ fn bar() {\n         check(\n             r#\"\n //- /lib.rs crate:main deps:foo\n-use foo as bar<|>;\n+use foo as bar$0;\n \n //- /foo/lib.rs crate:foo\n // empty\n@@ -389,7 +389,7 @@ use foo as bar<|>;\n         check(\n             r#\"\n //- /lib.rs crate:main deps:foo\n-use foo::foo as bar<|>;\n+use foo::foo as bar$0;\n \n //- /foo/lib.rs crate:foo\n #[macro_export]\n@@ -410,7 +410,7 @@ impl Foo {\n }\n \n fn bar(foo: &Foo) {\n-    foo.frobnicate<|>();\n+    foo.frobnicate$0();\n }\n \"#,\n         );\n@@ -425,7 +425,7 @@ struct Foo {\n } //^^^^\n \n fn bar(foo: &Foo) {\n-    foo.spam<|>;\n+    foo.spam$0;\n }\n \"#,\n         );\n@@ -442,7 +442,7 @@ struct Foo {\n \n fn bar() -> Foo {\n     Foo {\n-        spam<|>: 0,\n+        spam$0: 0,\n     }\n }\n \"#,\n@@ -459,7 +459,7 @@ struct Foo {\n } //^^^^\n \n fn bar(foo: Foo) -> Foo {\n-    let Foo { spam<|>: _, } = foo\n+    let Foo { spam$0: _, } = foo\n }\n \"#,\n         );\n@@ -474,7 +474,7 @@ struct Foo { spam: u32 }\n            //^^^^\n \n fn bar() -> Foo {\n-    Foo { spam<|>: m!() }\n+    Foo { spam$0: m!() }\n }\n \",\n         );\n@@ -489,7 +489,7 @@ struct Foo(u32);\n \n fn bar() {\n     let foo = Foo(0);\n-    foo.<|>0;\n+    foo.$00;\n }\n \"#,\n         );\n@@ -505,7 +505,7 @@ impl Foo {\n }    //^^^^^^^^^^\n \n fn bar(foo: &Foo) {\n-    Foo::frobnicate<|>();\n+    Foo::frobnicate$0();\n }\n \"#,\n         );\n@@ -520,7 +520,7 @@ trait Foo {\n }    //^^^^^^^^^^\n \n fn bar() {\n-    Foo::frobnicate<|>();\n+    Foo::frobnicate$0();\n }\n \"#,\n         );\n@@ -537,7 +537,7 @@ trait Trait {\n impl Trait for Foo {}\n \n fn bar() {\n-    Foo::frobnicate<|>();\n+    Foo::frobnicate$0();\n }\n \"#,\n         );\n@@ -551,7 +551,7 @@ struct Foo;\n impl Foo {\n    //^^^\n     pub fn new() -> Self {\n-        Self<|> {}\n+        Self$0 {}\n     }\n }\n \"#,\n@@ -561,7 +561,7 @@ impl Foo {\n struct Foo;\n impl Foo {\n    //^^^\n-    pub fn new() -> Self<|> {\n+    pub fn new() -> Self$0 {\n         Self {}\n     }\n }\n@@ -573,7 +573,7 @@ impl Foo {\n enum Foo { A }\n impl Foo {\n    //^^^\n-    pub fn new() -> Self<|> {\n+    pub fn new() -> Self$0 {\n         Foo::A\n     }\n }\n@@ -585,7 +585,7 @@ impl Foo {\n enum Foo { A }\n impl Foo {\n    //^^^\n-    pub fn thing(a: &Self<|>) {\n+    pub fn thing(a: &Self$0) {\n     }\n }\n \"#,\n@@ -603,7 +603,7 @@ trait Make {\n impl Make for Foo {\n             //^^^\n     fn new() -> Self {\n-        Self<|> {}\n+        Self$0 {}\n     }\n }\n \"#,\n@@ -617,7 +617,7 @@ trait Make {\n }\n impl Make for Foo {\n             //^^^\n-    fn new() -> Self<|> {\n+    fn new() -> Self$0 {\n         Self {}\n     }\n }\n@@ -629,29 +629,29 @@ impl Make for Foo {\n     fn goto_def_when_used_on_definition_name_itself() {\n         check(\n             r#\"\n-struct Foo<|> { value: u32 }\n+struct Foo$0 { value: u32 }\n      //^^^\n             \"#,\n         );\n \n         check(\n             r#\"\n struct Foo {\n-    field<|>: string,\n+    field$0: string,\n } //^^^^^\n \"#,\n         );\n \n         check(\n             r#\"\n-fn foo_test<|>() { }\n+fn foo_test$0() { }\n  //^^^^^^^^\n \"#,\n         );\n \n         check(\n             r#\"\n-enum Foo<|> { Variant }\n+enum Foo$0 { Variant }\n    //^^^\n \"#,\n         );\n@@ -660,7 +660,7 @@ enum Foo<|> { Variant }\n             r#\"\n enum Foo {\n     Variant1,\n-    Variant2<|>,\n+    Variant2$0,\n   //^^^^^^^^\n     Variant3,\n }\n@@ -669,35 +669,35 @@ enum Foo {\n \n         check(\n             r#\"\n-static INNER<|>: &str = \"\";\n+static INNER$0: &str = \"\";\n      //^^^^^\n \"#,\n         );\n \n         check(\n             r#\"\n-const INNER<|>: &str = \"\";\n+const INNER$0: &str = \"\";\n     //^^^^^\n \"#,\n         );\n \n         check(\n             r#\"\n-type Thing<|> = Option<()>;\n+type Thing$0 = Option<()>;\n    //^^^^^\n \"#,\n         );\n \n         check(\n             r#\"\n-trait Foo<|> { }\n+trait Foo$0 { }\n     //^^^\n \"#,\n         );\n \n         check(\n             r#\"\n-mod bar<|> { }\n+mod bar$0 { }\n   //^^^\n \"#,\n         );\n@@ -714,7 +714,7 @@ fn foo() {}\n  //^^^\n id! {\n     fn bar() {\n-        fo<|>o();\n+        fo$0o();\n     }\n }\n mod confuse_index { fn foo(); }\n@@ -743,7 +743,7 @@ pub mod __export {\n fn foo() -> i8 {}\n  //^^^\n fn test() {\n-    format!(\"{}\", fo<|>o())\n+    format!(\"{}\", fo$0o())\n }\n \"#,\n         );\n@@ -761,7 +761,7 @@ macro_rules! include {}\n //^^^^^^^^^^^^^^^^^^^\n \n fn f() {\n-    foo<|>();\n+    foo$0();\n }\n \n mod confuse_index {\n@@ -778,7 +778,7 @@ fn foo() {}\n     fn goto_for_type_param() {\n         check(\n             r#\"\n-struct Foo<T: Clone> { t: <|>T }\n+struct Foo<T: Clone> { t: $0T }\n          //^\n \"#,\n         );\n@@ -796,7 +796,7 @@ fn foo() {\n     let x = 1;\n       //^\n     id!({\n-        let y = <|>x;\n+        let y = $0x;\n         let z = y;\n     });\n }\n@@ -814,7 +814,7 @@ fn foo() {\n     id!({\n         let y = x;\n           //^\n-        let z = <|>y;\n+        let z = $0y;\n     });\n }\n \"#,\n@@ -829,7 +829,7 @@ fn main() {\n     fn foo() {\n         let x = 92;\n           //^\n-        <|>x;\n+        $0x;\n     }\n }\n \"#,\n@@ -843,7 +843,7 @@ fn main() {\n fn bar() {\n     macro_rules! foo { () => { () } }\n                //^^^\n-    <|>foo!();\n+    $0foo!();\n }\n \"#,\n         );\n@@ -857,7 +857,7 @@ struct Foo { x: i32 }\n fn main() {\n     let x = 92;\n       //^\n-    Foo { x<|> };\n+    Foo { x$0 };\n }\n \"#,\n         )\n@@ -872,7 +872,7 @@ enum Foo {\n }       //^\n fn baz(foo: Foo) {\n     match foo {\n-        Foo::Bar { x<|> } => x\n+        Foo::Bar { x$0 } => x\n     };\n }\n \"#,\n@@ -887,7 +887,7 @@ enum Foo { Bar }\n          //^^^\n impl Foo {\n     fn baz(self) {\n-        match self { Self::Bar<|> => {} }\n+        match self { Self::Bar$0 => {} }\n     }\n }\n \"#,\n@@ -902,7 +902,7 @@ enum Foo { Bar { val: i32 } }\n          //^^^\n impl Foo {\n     fn baz(self) -> i32 {\n-        match self { Self::Bar<|> { val } => {} }\n+        match self { Self::Bar$0 { val } => {} }\n     }\n }\n \"#,\n@@ -916,7 +916,7 @@ impl Foo {\n enum Foo { Bar }\n          //^^^\n impl Foo {\n-    fn baz(self) { Self::Bar<|>; }\n+    fn baz(self) { Self::Bar$0; }\n }\n \"#,\n         );\n@@ -929,7 +929,7 @@ impl Foo {\n enum Foo { Bar { val: i32 } }\n          //^^^\n impl Foo {\n-    fn baz(self) { Self::Bar<|> {val: 4}; }\n+    fn baz(self) { Self::Bar$0 {val: 4}; }\n }\n \"#,\n         );\n@@ -939,7 +939,7 @@ impl Foo {\n     fn goto_def_for_type_alias_generic_parameter() {\n         check(\n             r#\"\n-type Alias<T> = T<|>;\n+type Alias<T> = T$0;\n          //^\n \"#,\n         )\n@@ -950,7 +950,7 @@ type Alias<T> = T<|>;\n         check(\n             r#\"\n //- /lib.rs\n-foo::module<|>::mac!();\n+foo::module$0::mac!();\n \n //- /foo/lib.rs\n pub mod module {\n@@ -972,7 +972,7 @@ trait Iterator {\n        //^^^^\n }\n \n-fn f() -> impl Iterator<Item<|> = u8> {}\n+fn f() -> impl Iterator<Item$0 = u8> {}\n \"#,\n         );\n     }\n@@ -987,7 +987,7 @@ trait Iterator {\n     type B;\n }\n \n-fn f() -> impl Iterator<A<|> = u8, B = ()> {}\n+fn f() -> impl Iterator<A$0 = u8, B = ()> {}\n \"#,\n         );\n         check(\n@@ -998,7 +998,7 @@ trait Iterator {\n        //^\n }\n \n-fn f() -> impl Iterator<A = u8, B<|> = ()> {}\n+fn f() -> impl Iterator<A = u8, B$0 = ()> {}\n \"#,\n         );\n     }\n@@ -1012,7 +1012,7 @@ trait Iterator {\n        //^^^^\n }\n \n-fn g() -> <() as Iterator<Item<|> = ()>>::Item {}\n+fn g() -> <() as Iterator<Item$0 = ()>>::Item {}\n \"#,\n         );\n     }\n@@ -1027,7 +1027,7 @@ trait Iterator {\n     type B;\n }\n \n-fn g() -> <() as Iterator<A<|> = (), B = u8>>::B {}\n+fn g() -> <() as Iterator<A$0 = (), B = u8>>::B {}\n \"#,\n         );\n         check(\n@@ -1038,7 +1038,7 @@ trait Iterator {\n        //^\n }\n \n-fn g() -> <() as Iterator<A = (), B<|> = u8>>::A {}\n+fn g() -> <() as Iterator<A = (), B$0 = u8>>::A {}\n \"#,\n         );\n     }\n@@ -1052,7 +1052,7 @@ struct Foo {}\n impl Foo {\n     fn bar(self: &Foo) {\n          //^^^^\n-        let foo = sel<|>f;\n+        let foo = sel$0f;\n     }\n }\"#,\n         )\n@@ -1065,7 +1065,7 @@ impl Foo {\n struct Foo {}\n \n impl Foo {\n-    fn bar(&self<|>) {\n+    fn bar(&self$0) {\n           //^^^^\n     }\n }\"#,\n@@ -1076,7 +1076,7 @@ impl Foo {\n     fn goto_lifetime_param_on_decl() {\n         check(\n             r#\"\n-fn foo<'foobar<|>>(_: &'foobar ()) {\n+fn foo<'foobar$0>(_: &'foobar ()) {\n      //^^^^^^^\n }\"#,\n         )\n@@ -1086,7 +1086,7 @@ fn foo<'foobar<|>>(_: &'foobar ()) {\n     fn goto_lifetime_param_decl() {\n         check(\n             r#\"\n-fn foo<'foobar>(_: &'foobar<|> ()) {\n+fn foo<'foobar>(_: &'foobar$0 ()) {\n      //^^^^^^^\n }\"#,\n         )\n@@ -1097,7 +1097,7 @@ fn foo<'foobar>(_: &'foobar<|> ()) {\n         check(\n             r#\"\n fn foo<'foobar>(_: &'foobar ()) {\n-    fn foo<'foobar>(_: &'foobar<|> ()) {}\n+    fn foo<'foobar>(_: &'foobar$0 ()) {}\n          //^^^^^^^\n }\"#,\n         )\n@@ -1108,13 +1108,13 @@ fn foo<'foobar>(_: &'foobar ()) {\n     fn goto_lifetime_hrtb() {\n         check(\n             r#\"trait Foo<T> {}\n-fn foo<T>() where for<'a> T: Foo<&'a<|> (u8, u16)>, {}\n+fn foo<T>() where for<'a> T: Foo<&'a$0 (u8, u16)>, {}\n                     //^^\n \"#,\n         );\n         check(\n             r#\"trait Foo<T> {}\n-fn foo<T>() where for<'a<|>> T: Foo<&'a (u8, u16)>, {}\n+fn foo<T>() where for<'a$0> T: Foo<&'a (u8, u16)>, {}\n                     //^^\n \"#,\n         );\n@@ -1125,7 +1125,7 @@ fn foo<T>() where for<'a<|>> T: Foo<&'a (u8, u16)>, {}\n     fn goto_lifetime_hrtb_for_type() {\n         check(\n             r#\"trait Foo<T> {}\n-fn foo<T>() where T: for<'a> Foo<&'a<|> (u8, u16)>, {}\n+fn foo<T>() where T: for<'a> Foo<&'a$0 (u8, u16)>, {}\n                        //^^\n \"#,\n         );\n@@ -1139,7 +1139,7 @@ fn foo<'foo>(_: &'foo ()) {\n     'foo: {\n   //^^^^\n         'bar: loop {\n-            break 'foo<|>;\n+            break 'foo$0;\n         }\n     }\n }\"#,"}, {"sha": "761a98b2cabfeeacf135f2c8690c554a54cecfed", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -107,7 +107,7 @@ mod tests {\n     fn goto_implementation_works() {\n         check(\n             r#\"\n-struct Foo<|>;\n+struct Foo$0;\n impl Foo {}\n    //^^^\n \"#,\n@@ -118,7 +118,7 @@ impl Foo {}\n     fn goto_implementation_works_multiple_blocks() {\n         check(\n             r#\"\n-struct Foo<|>;\n+struct Foo$0;\n impl Foo {}\n    //^^^\n impl Foo {}\n@@ -131,7 +131,7 @@ impl Foo {}\n     fn goto_implementation_works_multiple_mods() {\n         check(\n             r#\"\n-struct Foo<|>;\n+struct Foo$0;\n mod a {\n     impl super::Foo {}\n        //^^^^^^^^^^\n@@ -149,7 +149,7 @@ mod b {\n         check(\n             r#\"\n //- /lib.rs\n-struct Foo<|>;\n+struct Foo$0;\n mod a;\n mod b;\n //- /a.rs\n@@ -166,7 +166,7 @@ impl crate::Foo {}\n     fn goto_implementation_for_trait() {\n         check(\n             r#\"\n-trait T<|> {}\n+trait T$0 {}\n struct Foo;\n impl T for Foo {}\n          //^^^\n@@ -179,7 +179,7 @@ impl T for Foo {}\n         check(\n             r#\"\n //- /lib.rs\n-trait T<|> {};\n+trait T$0 {};\n struct Foo;\n mod a;\n mod b;\n@@ -199,7 +199,7 @@ impl crate::T for crate::Foo {}\n             r#\"\n //- /lib.rs\n trait T {}\n-struct Foo<|>;\n+struct Foo$0;\n impl Foo {}\n    //^^^\n impl T for Foo {}\n@@ -216,7 +216,7 @@ impl T for &Foo {}\n             r#\"\n   #[derive(Copy)]\n //^^^^^^^^^^^^^^^\n-struct Foo<|>;\n+struct Foo$0;\n \n mod marker {\n     trait Copy {}"}, {"sha": "369a59820e5fc4f5822d49de12625124400e17d7", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -76,7 +76,7 @@ mod tests {\n struct Foo;\n      //^^^\n fn foo() {\n-    let f: Foo; f<|>\n+    let f: Foo; f$0\n }\n \"#,\n         );\n@@ -89,7 +89,7 @@ fn foo() {\n struct Foo;\n      //^^^\n fn foo() {\n-    let f: &Foo; f<|>\n+    let f: &Foo; f$0\n }\n \"#,\n         );\n@@ -103,7 +103,7 @@ macro_rules! id { ($($tt:tt)*) => { $($tt)* } }\n struct Foo {}\n      //^^^\n id! {\n-    fn bar() { let f<|> = Foo {}; }\n+    fn bar() { let f$0 = Foo {}; }\n }\n \"#,\n         );\n@@ -115,7 +115,7 @@ id! {\n             r#\"\n struct Foo;\n      //^^^\n-fn foo(<|>f: Foo) {}\n+fn foo($0f: Foo) {}\n \"#,\n         );\n     }\n@@ -129,7 +129,7 @@ struct Foo;\n struct Bar(Foo);\n fn foo() {\n     let bar = Bar(Foo);\n-    bar.<|>0;\n+    bar.$00;\n }\n \"#,\n         );\n@@ -142,7 +142,7 @@ fn foo() {\n struct Foo;\n      //^^^\n impl Foo {\n-    fn f(&self<|>) {}\n+    fn f(&self$0) {}\n }\n \"#,\n         )"}, {"sha": "8cb4a51d8e220d818dc02c9fe77a7b2e82b65114", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 108, "deletions": 108, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -457,7 +457,7 @@ mod tests {\n pub fn foo() -> u32 { 1 }\n \n fn main() {\n-    let foo_test = foo()<|>;\n+    let foo_test = foo()$0;\n }\n \"#,\n             expect![[r#\"\n@@ -476,7 +476,7 @@ fn main() {\n pub fn foo() -> u32 { 1 }\n \n fn main() {\n-    let foo_test = foo()<|>;\n+    let foo_test = foo()$0;\n }\n \"#,\n             expect![[r#\"\n@@ -506,7 +506,7 @@ fn main() {\n         Option::Some(*memo + value)\n     };\n     let number = 5u32;\n-    let mut iter<|> = scan(OtherStruct { i: num }, closure, number);\n+    let mut iter$0 = scan(OtherStruct { i: num }, closure, number);\n }\n \"#,\n             expect![[r#\"\n@@ -526,7 +526,7 @@ fn main() {\n             r#\"\n pub fn foo() -> u32 { 1 }\n \n-fn main() { let foo_test = fo<|>o(); }\n+fn main() { let foo_test = fo$0o(); }\n \"#,\n             expect![[r#\"\n                 *foo*\n@@ -558,7 +558,7 @@ mod a;\n mod b;\n mod c;\n \n-fn main() { let foo_test = fo<|>o(); }\n+fn main() { let foo_test = fo$0o(); }\n         \"#,\n             expect![[r#\"\n                 *foo*\n@@ -575,7 +575,7 @@ fn main() { let foo_test = fo<|>o(); }\n             r#\"\n pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str { }\n \n-fn main() { let foo_test = fo<|>o(); }\n+fn main() { let foo_test = fo$0o(); }\n         \"#,\n             expect![[r#\"\n                 *foo*\n@@ -595,7 +595,7 @@ fn main() { let foo_test = fo<|>o(); }\n     fn hover_shows_fn_signature_on_fn_name() {\n         check(\n             r#\"\n-pub fn foo<|>(a: u32, b: u32) -> u32 {}\n+pub fn foo$0(a: u32, b: u32) -> u32 {}\n \n fn main() { }\n \"#,\n@@ -623,7 +623,7 @@ fn main() { }\n /// #\n /// foo(Path::new(\"hello, world!\"))\n /// ```\n-pub fn foo<|>(_: &Path) {}\n+pub fn foo$0(_: &Path) {}\n \n fn main() { }\n \"#,\n@@ -656,7 +656,7 @@ fn main() { }\n         check(\n             r##\"\n #[doc = r#\"Raw string doc attr\"#]\n-pub fn foo<|>(_: &Path) {}\n+pub fn foo$0(_: &Path) {}\n \n fn main() { }\n \"##,\n@@ -686,7 +686,7 @@ fn main() { }\n struct Foo { field_a: u32 }\n \n fn main() {\n-    let foo = Foo { field_a<|>: 0, };\n+    let foo = Foo { field_a$0: 0, };\n }\n \"#,\n             expect![[r#\"\n@@ -705,7 +705,7 @@ fn main() {\n         // Hovering over the field in the definition\n         check(\n             r#\"\n-struct Foo { field_a<|>: u32 }\n+struct Foo { field_a$0: u32 }\n \n fn main() {\n     let foo = Foo { field_a: 0 };\n@@ -728,7 +728,7 @@ fn main() {\n     #[test]\n     fn hover_const_static() {\n         check(\n-            r#\"const foo<|>: u32 = 123;\"#,\n+            r#\"const foo$0: u32 = 123;\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -742,7 +742,7 @@ fn main() {\n             \"#]],\n         );\n         check(\n-            r#\"static foo<|>: u32 = 456;\"#,\n+            r#\"static foo$0: u32 = 456;\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -764,7 +764,7 @@ fn main() {\n struct Test<K, T = u8> { k: K, t: T }\n \n fn main() {\n-    let zz<|> = Test { t: 23u8, k: 33 };\n+    let zz$0 = Test { t: 23u8, k: 33 };\n }\"#,\n             expect![[r#\"\n                 *zz*\n@@ -783,7 +783,7 @@ fn main() {\n enum Option<T> { Some(T) }\n use Option::Some;\n \n-fn main() { So<|>me(12); }\n+fn main() { So$0me(12); }\n \"#,\n             expect![[r#\"\n                 *Some*\n@@ -803,7 +803,7 @@ fn main() { So<|>me(12); }\n enum Option<T> { Some(T) }\n use Option::Some;\n \n-fn main() { let b<|>ar = Some(12); }\n+fn main() { let b$0ar = Some(12); }\n \"#,\n             expect![[r#\"\n                 *bar*\n@@ -821,7 +821,7 @@ fn main() { let b<|>ar = Some(12); }\n             r#\"\n enum Option<T> {\n     /// The None variant\n-    Non<|>e\n+    Non$0e\n }\n \"#,\n             expect![[r#\"\n@@ -848,7 +848,7 @@ enum Option<T> {\n     Some(T)\n }\n fn main() {\n-    let s = Option::Som<|>e(12);\n+    let s = Option::Som$0e(12);\n }\n \"#,\n             expect![[r#\"\n@@ -872,7 +872,7 @@ fn main() {\n     #[test]\n     fn hover_for_local_variable() {\n         check(\n-            r#\"fn func(foo: i32) { fo<|>o; }\"#,\n+            r#\"fn func(foo: i32) { fo$0o; }\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -886,7 +886,7 @@ fn main() {\n     #[test]\n     fn hover_for_local_variable_pat() {\n         check(\n-            r#\"fn func(fo<|>o: i32) {}\"#,\n+            r#\"fn func(fo$0o: i32) {}\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -900,7 +900,7 @@ fn main() {\n     #[test]\n     fn hover_local_var_edge() {\n         check(\n-            r#\"fn func(foo: i32) { if true { <|>foo; }; }\"#,\n+            r#\"fn func(foo: i32) { if true { $0foo; }; }\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -914,7 +914,7 @@ fn main() {\n     #[test]\n     fn hover_for_param_edge() {\n         check(\n-            r#\"fn func(<|>foo: i32) {}\"#,\n+            r#\"fn func($0foo: i32) {}\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -934,7 +934,7 @@ fn main() {\n             trait DerefMut {\n                 type Target: ?Sized;\n             }\n-            fn f(_x<|>: impl Deref<Target=u8> + DerefMut<Target=u8>) {}\"#,\n+            fn f(_x$0: impl Deref<Target=u8> + DerefMut<Target=u8>) {}\"#,\n             expect![[r#\"\n                 *_x*\n \n@@ -955,7 +955,7 @@ impl Thing {\n     fn new() -> Thing { Thing { x: 0 } }\n }\n \n-fn main() { let foo_<|>test = Thing::new(); }\n+fn main() { let foo_$0test = Thing::new(); }\n             \"#,\n             expect![[r#\"\n                 *foo_test*\n@@ -979,7 +979,7 @@ mod wrapper {\n     }\n }\n \n-fn main() { let foo_test = wrapper::Thing::new<|>(); }\n+fn main() { let foo_test = wrapper::Thing::new$0(); }\n \"#,\n             expect![[r#\"\n                 *new*\n@@ -1006,7 +1006,7 @@ impl X {\n \n fn main() {\n     match 1 {\n-        X::C<|> => {},\n+        X::C$0 => {},\n         2 => {},\n         _ => {}\n     };\n@@ -1032,7 +1032,7 @@ fn main() {\n             r#\"\n struct Thing { x: u32 }\n impl Thing {\n-    fn new() -> Self { Self<|> { x: 0 } }\n+    fn new() -> Self { Self$0 { x: 0 } }\n }\n \"#,\n             expect![[r#\"\n@@ -1051,7 +1051,7 @@ impl Thing {\n             r#\"\n struct Thing { x: u32 }\n impl Thing {\n-    fn new() -> Self<|> { Self { x: 0 } }\n+    fn new() -> Self$0 { Self { x: 0 } }\n }\n \"#,\n             expect![[r#\"\n@@ -1070,7 +1070,7 @@ impl Thing {\n             r#\"\n enum Thing { A }\n impl Thing {\n-    pub fn new() -> Self<|> { Thing::A }\n+    pub fn new() -> Self$0 { Thing::A }\n }\n \"#,\n             expect![[r#\"\n@@ -1089,7 +1089,7 @@ impl Thing {\n             r#\"\n         enum Thing { A }\n         impl Thing {\n-            pub fn thing(a: Self<|>) {}\n+            pub fn thing(a: Self$0) {}\n         }\n         \"#,\n             expect![[r#\"\n@@ -1114,7 +1114,7 @@ fn x() {}\n \n fn y() {\n     let x = 0i32;\n-    x<|>;\n+    x$0;\n }\n \"#,\n             expect![[r#\"\n@@ -1133,7 +1133,7 @@ fn y() {\n             r#\"\n macro_rules! foo { () => {} }\n \n-fn f() { fo<|>o!(); }\n+fn f() { fo$0o!(); }\n \"#,\n             expect![[r#\"\n                 *foo*\n@@ -1152,7 +1152,7 @@ fn f() { fo<|>o!(); }\n     #[test]\n     fn test_hover_tuple_field() {\n         check(\n-            r#\"struct TS(String, i32<|>);\"#,\n+            r#\"struct TS(String, i32$0);\"#,\n             expect![[r#\"\n                 *i32*\n \n@@ -1170,7 +1170,7 @@ fn f() { fo<|>o!(); }\n macro_rules! id { ($($tt:tt)*) => { $($tt)* } }\n fn foo() {}\n id! {\n-    fn bar() { fo<|>o(); }\n+    fn bar() { fo$0o(); }\n }\n \"#,\n             expect![[r#\"\n@@ -1192,7 +1192,7 @@ id! {\n         check(\n             r#\"\n macro_rules! id { ($($tt:tt)*) => { $($tt)* } }\n-fn foo(bar:u32) { let a = id!(ba<|>r); }\n+fn foo(bar:u32) { let a = id!(ba$0r); }\n \"#,\n             expect![[r#\"\n                 *bar*\n@@ -1210,7 +1210,7 @@ fn foo(bar:u32) { let a = id!(ba<|>r); }\n             r#\"\n macro_rules! id_deep { ($($tt:tt)*) => { $($tt)* } }\n macro_rules! id { ($($tt:tt)*) => { id_deep!($($tt)*) } }\n-fn foo(bar:u32) { let a = id!(ba<|>r); }\n+fn foo(bar:u32) { let a = id!(ba$0r); }\n \"#,\n             expect![[r#\"\n                 *bar*\n@@ -1229,7 +1229,7 @@ fn foo(bar:u32) { let a = id!(ba<|>r); }\n macro_rules! id_deep { ($($tt:tt)*) => { $($tt)* } }\n macro_rules! id { ($($tt:tt)*) => { id_deep!($($tt)*) } }\n fn bar() -> u32 { 0 }\n-fn foo() { let a = id!([0u32, bar(<|>)] ); }\n+fn foo() { let a = id!([0u32, bar($0)] ); }\n \"#,\n             expect![[r#\"\n                 *bar()*\n@@ -1247,7 +1247,7 @@ fn foo() { let a = id!([0u32, bar(<|>)] ); }\n macro_rules! arr { ($($tt:tt)*) => { [$($tt)*)] } }\n fn foo() {\n     let mastered_for_itunes = \"\";\n-    let _ = arr!(\"Tr<|>acks\", &mastered_for_itunes);\n+    let _ = arr!(\"Tr$0acks\", &mastered_for_itunes);\n }\n \"#,\n             expect![[r#\"\n@@ -1268,7 +1268,7 @@ macro_rules! assert {}\n \n fn bar() -> bool { true }\n fn foo() {\n-    assert!(ba<|>r());\n+    assert!(ba$0r());\n }\n \"#,\n             expect![[r#\"\n@@ -1293,7 +1293,7 @@ fn foo() {\n             macro_rules! format {}\n \n             fn foo() {\n-                format!(\"hel<|>lo {}\", 0);\n+                format!(\"hel$0lo {}\", 0);\n             }\n             \"#,\n         );\n@@ -1306,7 +1306,7 @@ fn foo() {\n ///\u3000<- `\\u{3000}` here\n fn foo() { }\n \n-fn bar() { fo<|>o(); }\n+fn bar() { fo$0o(); }\n \",\n             expect![[r#\"\n                 *foo*\n@@ -1329,7 +1329,7 @@ fn bar() { fo<|>o(); }\n     #[test]\n     fn test_hover_function_show_qualifiers() {\n         check(\n-            r#\"async fn foo<|>() {}\"#,\n+            r#\"async fn foo$0() {}\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -1343,7 +1343,7 @@ fn bar() { fo<|>o(); }\n             \"#]],\n         );\n         check(\n-            r#\"pub const unsafe fn foo<|>() {}\"#,\n+            r#\"pub const unsafe fn foo$0() {}\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -1357,7 +1357,7 @@ fn bar() { fo<|>o(); }\n             \"#]],\n         );\n         check(\n-            r#\"pub(crate) async unsafe extern \"C\" fn foo<|>() {}\"#,\n+            r#\"pub(crate) async unsafe extern \"C\" fn foo$0() {}\"#,\n             expect![[r#\"\n                 *foo*\n \n@@ -1375,7 +1375,7 @@ fn bar() { fo<|>o(); }\n     #[test]\n     fn test_hover_trait_show_qualifiers() {\n         check_actions(\n-            r\"unsafe trait foo<|>() {}\",\n+            r\"unsafe trait foo$0() {}\",\n             expect![[r#\"\n                 [\n                     Implementation(\n@@ -1396,7 +1396,7 @@ fn bar() { fo<|>o(); }\n         check(\n             r#\"\n //- /main.rs crate:main deps:std\n-extern crate st<|>d;\n+extern crate st$0d;\n //- /std/lib.rs crate:std\n //! Standard library for this test\n //!\n@@ -1414,7 +1414,7 @@ extern crate st<|>d;\n         check(\n             r#\"\n //- /main.rs crate:main deps:std\n-extern crate std as ab<|>c;\n+extern crate std as ab$0c;\n //- /std/lib.rs crate:std\n //! Standard library for this test\n //!\n@@ -1435,7 +1435,7 @@ extern crate std as ab<|>c;\n     fn test_hover_mod_with_same_name_as_function() {\n         check(\n             r#\"\n-use self::m<|>y::Bar;\n+use self::m$0y::Bar;\n mod my { pub struct Bar; }\n \n fn my() {}\n@@ -1461,7 +1461,7 @@ fn my() {}\n /// bar docs\n struct Bar;\n \n-fn foo() { let bar = Ba<|>r; }\n+fn foo() { let bar = Ba$0r; }\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1488,7 +1488,7 @@ fn foo() { let bar = Ba<|>r; }\n #[doc = \"bar docs\"]\n struct Bar;\n \n-fn foo() { let bar = Ba<|>r; }\n+fn foo() { let bar = Ba$0r; }\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1517,7 +1517,7 @@ fn foo() { let bar = Ba<|>r; }\n #[doc = \"bar docs 2\"]\n struct Bar;\n \n-fn foo() { let bar = Ba<|>r; }\n+fn foo() { let bar = Ba$0r; }\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1545,7 +1545,7 @@ fn foo() { let bar = Ba<|>r; }\n             r#\"\n pub struct Foo;\n /// [Foo](struct.Foo.html)\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1571,7 +1571,7 @@ pub struct B<|>ar\n             r#\"\n pub struct Foo;\n /// [struct Foo](struct.Foo.html)\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1599,7 +1599,7 @@ pub struct B<|>ar\n pub struct Foo;\n pub struct Bar {\n     /// [Foo](struct.Foo.html)\n-    fie<|>ld: ()\n+    fie$0ld: ()\n }\n \"#,\n             expect![[r#\"\n@@ -1628,7 +1628,7 @@ pub mod foo {\n     pub struct Foo;\n }\n /// [Foo](foo::Foo)\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1658,7 +1658,7 @@ pub mod foo {\n     pub struct Foo;\n }\n /// [Foo](foo::Foo)\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1684,7 +1684,7 @@ pub struct B<|>ar\n             r#\"\n pub struct Foo;\n /// [Foo]\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1710,7 +1710,7 @@ pub struct B<|>ar\n             r#\"\n pub struct Foo;\n /// [`Foo`]\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1737,7 +1737,7 @@ pub struct B<|>ar\n pub struct Foo;\n fn Foo() {}\n /// [Foo()]\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1763,7 +1763,7 @@ pub struct B<|>ar\n             r#\"\n pub struct Foo;\n /// [`struct Foo`]\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1789,7 +1789,7 @@ pub struct B<|>ar\n             r#\"\n pub struct Foo;\n /// [`struct@Foo`]\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1817,7 +1817,7 @@ pub struct Foo;\n /// [my Foo][foo]\n ///\n /// [foo]: Foo\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1843,7 +1843,7 @@ pub struct B<|>ar\n             r#\"\n pub struct Foo;\n /// [external](https://www.google.com)\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1870,7 +1870,7 @@ pub struct B<|>ar\n             r#\"\n pub struct Foo;\n /// [baz](Baz)\n-pub struct B<|>ar\n+pub struct B$0ar\n \"#,\n             expect![[r#\"\n                 *Bar*\n@@ -1896,7 +1896,7 @@ pub struct B<|>ar\n             r#\"\n enum E {\n     /// [E]\n-    V<|> { field: i32 }\n+    V$0 { field: i32 }\n }\n \"#,\n             expect![[r#\"\n@@ -1923,7 +1923,7 @@ enum E {\n             r#\"\n struct S {\n     /// [`S`]\n-    field<|>: i32\n+    field$0: i32\n }\n \"#,\n             expect![[r#\"\n@@ -1969,7 +1969,7 @@ struct S {\n ///\n /// [`Result`]: ../../std/result/enum.Result.html\n /// [^example]: https://www.example.com/\n-pub fn fo<|>o() {}\n+pub fn fo$0o() {}\n \"#,\n             expect![[r#\"\n                 *foo*\n@@ -2026,7 +2026,7 @@ macro_rules! bar {\n \n bar!();\n \n-fn foo() { let bar = Bar; bar.fo<|>o(); }\n+fn foo() { let bar = Bar; bar.fo$0o(); }\n \"#,\n             expect![[r#\"\n                 *foo*\n@@ -2064,7 +2064,7 @@ macro_rules! bar {\n \n bar!();\n \n-fn foo() { let bar = Bar; bar.fo<|>o(); }\n+fn foo() { let bar = Bar; bar.fo$0o(); }\n \"#,\n             expect![[r#\"\n                 *foo*\n@@ -2087,7 +2087,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n     #[test]\n     fn test_hover_trait_has_impl_action() {\n         check_actions(\n-            r#\"trait foo<|>() {}\"#,\n+            r#\"trait foo$0() {}\"#,\n             expect![[r#\"\n                 [\n                     Implementation(\n@@ -2106,7 +2106,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n     #[test]\n     fn test_hover_struct_has_impl_action() {\n         check_actions(\n-            r\"struct foo<|>() {}\",\n+            r\"struct foo$0() {}\",\n             expect![[r#\"\n                 [\n                     Implementation(\n@@ -2125,7 +2125,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n     #[test]\n     fn test_hover_union_has_impl_action() {\n         check_actions(\n-            r#\"union foo<|>() {}\"#,\n+            r#\"union foo$0() {}\"#,\n             expect![[r#\"\n                 [\n                     Implementation(\n@@ -2144,7 +2144,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n     #[test]\n     fn test_hover_enum_has_impl_action() {\n         check_actions(\n-            r\"enum foo<|>() { A, B }\",\n+            r\"enum foo$0() { A, B }\",\n             expect![[r#\"\n                 [\n                     Implementation(\n@@ -2163,7 +2163,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n     #[test]\n     fn test_hover_self_has_impl_action() {\n         check_actions(\n-            r#\"struct foo where Self<|>:;\"#,\n+            r#\"struct foo where Self$0:;\"#,\n             expect![[r#\"\n                 [\n                     Implementation(\n@@ -2184,7 +2184,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n         check_actions(\n             r#\"\n #[test]\n-fn foo_<|>test() {}\n+fn foo_$0test() {}\n \"#,\n             expect![[r#\"\n                 [\n@@ -2219,7 +2219,7 @@ fn foo_<|>test() {}\n     fn test_hover_test_mod_has_action() {\n         check_actions(\n             r#\"\n-mod tests<|> {\n+mod tests$0 {\n     #[test]\n     fn foo_test() {}\n }\n@@ -2254,7 +2254,7 @@ mod tests<|> {\n             r#\"\n struct S{ f1: u32 }\n \n-fn main() { let s<|>t = S{ f1:0 }; }\n+fn main() { let s$0t = S{ f1:0 }; }\n             \"#,\n             expect![[r#\"\n                 [\n@@ -2287,7 +2287,7 @@ fn main() { let s<|>t = S{ f1:0 }; }\n struct Arg(u32);\n struct S<T>{ f1: T }\n \n-fn main() { let s<|>t = S{ f1:Arg(0) }; }\n+fn main() { let s$0t = S{ f1:Arg(0) }; }\n \"#,\n             expect![[r#\"\n                 [\n@@ -2333,7 +2333,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n struct Arg(u32);\n struct S<T>{ f1: T }\n \n-fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n+fn main() { let s$0t = S{ f1: S{ f1: Arg(0) } }; }\n             \"#,\n             expect![[r#\"\n                 [\n@@ -2382,7 +2382,7 @@ mod M {\n     pub struct C(u32);\n }\n \n-fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n+fn main() { let s$0t = (A(1), B(2), M::C(3) ); }\n \"#,\n             expect![[r#\"\n                 [\n@@ -2441,7 +2441,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n trait Foo {}\n fn foo() -> impl Foo {}\n \n-fn main() { let s<|>t = foo(); }\n+fn main() { let s$0t = foo(); }\n \"#,\n             expect![[r#\"\n                 [\n@@ -2475,7 +2475,7 @@ trait Foo<T> {}\n struct S;\n fn foo() -> impl Foo<S> {}\n \n-fn main() { let s<|>t = foo(); }\n+fn main() { let s$0t = foo(); }\n \"#,\n             expect![[r#\"\n                 [\n@@ -2522,7 +2522,7 @@ trait Foo {}\n trait Bar {}\n fn foo() -> impl Foo + Bar {}\n \n-fn main() { let s<|>t = foo(); }\n+fn main() { let s$0t = foo(); }\n             \"#,\n             expect![[r#\"\n                 [\n@@ -2572,7 +2572,7 @@ struct S2 {}\n \n fn foo() -> impl Foo<S1> + Bar<S2> {}\n \n-fn main() { let s<|>t = foo(); }\n+fn main() { let s$0t = foo(); }\n \"#,\n             expect![[r#\"\n                 [\n@@ -2642,7 +2642,7 @@ fn main() { let s<|>t = foo(); }\n         check_actions(\n             r#\"\n trait Foo {}\n-fn foo(ar<|>g: &impl Foo) {}\n+fn foo(ar$0g: &impl Foo) {}\n \"#,\n             expect![[r#\"\n                 [\n@@ -2676,7 +2676,7 @@ trait Foo {}\n trait Bar<T> {}\n struct S{}\n \n-fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n+fn foo(ar$0g: &impl Foo + Bar<S>) {}\n \"#,\n             expect![[r#\"\n                 [\n@@ -2734,7 +2734,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n             r#\"\n struct S;\n fn foo() {\n-    let fo<|>o = async { S };\n+    let fo$0o = async { S };\n }\n \n #[prelude_import] use future::*;\n@@ -2786,7 +2786,7 @@ mod future {\n             r#\"\n trait Foo<T> {}\n struct S {}\n-fn foo(ar<|>g: &impl Foo<S>) {}\n+fn foo(ar$0g: &impl Foo<S>) {}\n \"#,\n             expect![[r#\"\n                 [\n@@ -2836,7 +2836,7 @@ impl Foo for S {}\n struct B<T>{}\n fn foo() -> B<dyn Foo> {}\n \n-fn main() { let s<|>t = foo(); }\n+fn main() { let s$0t = foo(); }\n \"#,\n             expect![[r#\"\n                 [\n@@ -2880,7 +2880,7 @@ fn main() { let s<|>t = foo(); }\n         check_actions(\n             r#\"\n trait Foo {}\n-fn foo(ar<|>g: &dyn Foo) {}\n+fn foo(ar$0g: &dyn Foo) {}\n \"#,\n             expect![[r#\"\n                 [\n@@ -2912,7 +2912,7 @@ fn foo(ar<|>g: &dyn Foo) {}\n             r#\"\n trait Foo<T> {}\n struct S {}\n-fn foo(ar<|>g: &dyn Foo<S>) {}\n+fn foo(ar$0g: &dyn Foo<S>) {}\n \"#,\n             expect![[r#\"\n                 [\n@@ -2960,7 +2960,7 @@ trait DynTrait<T> {}\n struct B<T> {}\n struct S {}\n \n-fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n+fn foo(a$0rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n             \"#,\n             expect![[r#\"\n                 [\n@@ -3041,7 +3041,7 @@ impl Foo for S { type Item = Bar; }\n \n fn test() -> impl Foo { S {} }\n \n-fn main() { let s<|>t = test().get(); }\n+fn main() { let s$0t = test().get(); }\n \"#,\n             expect![[r#\"\n                 [\n@@ -3074,7 +3074,7 @@ fn main() { let s<|>t = test().get(); }\n struct Bar;\n struct Foo<const BAR: Bar>;\n \n-impl<const BAR: Bar> Foo<BAR<|>> {}\n+impl<const BAR: Bar> Foo<BAR$0> {}\n \"#,\n             expect![[r#\"\n                 [\n@@ -3106,7 +3106,7 @@ impl<const BAR: Bar> Foo<BAR<|>> {}\n             r#\"\n trait Foo {}\n \n-fn foo<T: Foo>(t: T<|>){}\n+fn foo<T: Foo>(t: T$0){}\n \"#,\n             expect![[r#\"\n                 [\n@@ -3146,7 +3146,7 @@ pub mod wrapper {\n }\n \n //- /main.rs crate:main deps:name-with-dashes\n-fn main() { let foo_test = name_with_dashes::wrapper::Thing::new<|>(); }\n+fn main() { let foo_test = name_with_dashes::wrapper::Thing::new$0(); }\n \"#,\n             expect![[r#\"\n             *new*\n@@ -3172,7 +3172,7 @@ struct S {\n \n fn main() {\n     let s = S { f: 0 };\n-    let S { f<|> } = &s;\n+    let S { f$0 } = &s;\n }\n \"#,\n             expect![[r#\"\n@@ -3191,7 +3191,7 @@ fn main() {\n             r#\"\n struct Foo {}\n impl Foo {\n-    fn bar(&sel<|>f) {}\n+    fn bar(&sel$0f) {}\n }\n \"#,\n             expect![[r#\"\n@@ -3210,7 +3210,7 @@ impl Foo {\n struct Arc<T>(T);\n struct Foo {}\n impl Foo {\n-    fn bar(sel<|>f: Arc<Foo>) {}\n+    fn bar(sel$0f: Arc<Foo>) {}\n }\n \"#,\n             expect![[r#\"\n@@ -3227,7 +3227,7 @@ impl Foo {\n         check(\n             r#\"\n /// Be quick;\n-mod Foo<|> {\n+mod Foo$0 {\n     //! time is mana\n \n     /// This comment belongs to the function\n@@ -3258,7 +3258,7 @@ mod Foo<|> {\n         check(\n             r#\"\n #[doc = \"Be quick;\"]\n-mod Foo<|> {\n+mod Foo$0 {\n     #![doc = \"time is mana\"]\n \n     #[doc = \"This comment belongs to the function\"]\n@@ -3289,7 +3289,7 @@ mod Foo<|> {\n         check_hover_no_result(\n             r#\"\n fn no_hover() {\n-    // no<|>hover\n+    // no$0hover\n }\n \"#,\n         );\n@@ -3300,7 +3300,7 @@ fn no_hover() {\n         check(\n             r#\"\n fn foo() {\n-    'label<|>: loop {}\n+    'label$0: loop {}\n }\n \"#,\n             expect![[r#\"\n@@ -3316,7 +3316,7 @@ fn foo() {\n     #[test]\n     fn hover_lifetime() {\n         check(\n-            r#\"fn foo<'lifetime>(_: &'lifetime<|> ()) {}\"#,\n+            r#\"fn foo<'lifetime>(_: &'lifetime$0 ()) {}\"#,\n             expect![[r#\"\n             *'lifetime*\n \n@@ -3335,7 +3335,7 @@ struct Foo<T>(T);\n trait Copy {}\n trait Clone {}\n trait Sized {}\n-impl<T: Copy + Clone> Foo<T<|>> where T: Sized {}\n+impl<T: Copy + Clone> Foo<T$0> where T: Sized {}\n \"#,\n             expect![[r#\"\n                 *T*\n@@ -3348,7 +3348,7 @@ impl<T: Copy + Clone> Foo<T<|>> where T: Sized {}\n         check(\n             r#\"\n struct Foo<T>(T);\n-impl<T> Foo<T<|>> {}\n+impl<T> Foo<T$0> {}\n \"#,\n             expect![[r#\"\n                 *T*\n@@ -3362,7 +3362,7 @@ impl<T> Foo<T<|>> {}\n         check(\n             r#\"\n struct Foo<T>(T);\n-impl<T: 'static> Foo<T<|>> {}\n+impl<T: 'static> Foo<T$0> {}\n \"#,\n             expect![[r#\"\n                 *T*\n@@ -3379,7 +3379,7 @@ impl<T: 'static> Foo<T<|>> {}\n         check(\n             r#\"\n struct Foo<const LEN: usize>;\n-impl<const LEN: usize> Foo<LEN<|>> {}\n+impl<const LEN: usize> Foo<LEN$0> {}\n \"#,\n             expect![[r#\"\n                 *LEN*"}, {"sha": "296893d2fa1ba4f3651d261ea2ca428fc591b6f9", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -104,7 +104,7 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextS\n     // Special case that turns something like:\n     //\n     // ```\n-    // my_function({<|>\n+    // my_function({$0\n     //    <some-expr>\n     // })\n     // ```\n@@ -116,7 +116,7 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextS\n     // ditto for\n     //\n     // ```\n-    // use foo::{<|>\n+    // use foo::{$0\n     //    bar\n     // };\n     // ```\n@@ -222,13 +222,13 @@ mod tests {\n         check_join_lines(\n             r\"\n fn foo() {\n-    <|>foo(1,\n+    $0foo(1,\n     )\n }\n \",\n             r\"\n fn foo() {\n-    <|>foo(1)\n+    $0foo(1)\n }\n \",\n         );\n@@ -239,14 +239,14 @@ fn foo() {\n         check_join_lines(\n             r\"\n pub fn reparse(&self, edit: &AtomTextEdit) -> File {\n-    <|>self.incremental_reparse(edit).unwrap_or_else(|| {\n+    $0self.incremental_reparse(edit).unwrap_or_else(|| {\n         self.full_reparse(edit)\n     })\n }\n \",\n             r\"\n pub fn reparse(&self, edit: &AtomTextEdit) -> File {\n-    <|>self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n+    $0self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n }\n \",\n         );\n@@ -257,13 +257,13 @@ pub fn reparse(&self, edit: &AtomTextEdit) -> File {\n         check_join_lines(\n             r\"\n fn foo() {\n-    foo(<|>{\n+    foo($0{\n         92\n     })\n }\",\n             r\"\n fn foo() {\n-    foo(<|>92)\n+    foo($092)\n }\",\n         );\n     }\n@@ -274,7 +274,7 @@ fn foo() {\n             fn foo() {\n                 loop {\n                     match x {\n-                        92 => <|>{\n+                        92 => $0{\n                             continue;\n                         }\n                     }\n@@ -285,7 +285,7 @@ fn foo() {\n             fn foo() {\n                 loop {\n                     match x {\n-                        92 => <|>continue,\n+                        92 => $0continue,\n                     }\n                 }\n             }\n@@ -299,7 +299,7 @@ fn foo() {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>{\n+        Ok(u) => $0{\n             u.foo()\n         }\n         Err(v) => v,\n@@ -308,7 +308,7 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>u.foo(),\n+        Ok(u) => $0u.foo(),\n         Err(v) => v,\n     }\n }\",\n@@ -321,7 +321,7 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo() {\n     match ty {\n-        <|> Some(ty) => {\n+        $0 Some(ty) => {\n             match ty {\n                 _ => false,\n             }\n@@ -333,7 +333,7 @@ fn foo() {\n             r\"\n fn foo() {\n     match ty {\n-        <|> Some(ty) => match ty {\n+        $0 Some(ty) => match ty {\n                 _ => false,\n             },\n         _ => true,\n@@ -350,7 +350,7 @@ fn foo() {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>{\n+        Ok(u) => $0{\n             u.foo()\n         },\n         Err(v) => v,\n@@ -359,7 +359,7 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>u.foo(),\n+        Ok(u) => $0u.foo(),\n         Err(v) => v,\n     }\n }\",\n@@ -370,7 +370,7 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>{\n+        Ok(u) => $0{\n             u.foo()\n         }    ,\n         Err(v) => v,\n@@ -379,7 +379,7 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>u.foo()    ,\n+        Ok(u) => $0u.foo()    ,\n         Err(v) => v,\n     }\n }\",\n@@ -390,7 +390,7 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>{\n+        Ok(u) => $0{\n             u.foo()\n         }\n         ,\n@@ -400,7 +400,7 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>u.foo()\n+        Ok(u) => $0u.foo()\n         ,\n         Err(v) => v,\n     }\n@@ -414,42 +414,42 @@ fn foo(e: Result<U, V>) {\n         check_join_lines(\n             r\"\n fn foo() {\n-    let x = (<|>{\n+    let x = ($0{\n        4\n     },);\n }\",\n             r\"\n fn foo() {\n-    let x = (<|>4,);\n+    let x = ($04,);\n }\",\n         );\n \n         // single arg tuple with whitespace between brace and comma\n         check_join_lines(\n             r\"\n fn foo() {\n-    let x = (<|>{\n+    let x = ($0{\n        4\n     }   ,);\n }\",\n             r\"\n fn foo() {\n-    let x = (<|>4   ,);\n+    let x = ($04   ,);\n }\",\n         );\n \n         // single arg tuple with newline between brace and comma\n         check_join_lines(\n             r\"\n fn foo() {\n-    let x = (<|>{\n+    let x = ($0{\n        4\n     }\n     ,);\n }\",\n             r\"\n fn foo() {\n-    let x = (<|>4\n+    let x = ($04\n     ,);\n }\",\n         );\n@@ -460,11 +460,11 @@ fn foo() {\n         // No space after the '{'\n         check_join_lines(\n             r\"\n-<|>use syntax::{\n+$0use syntax::{\n     TextSize, TextRange,\n };\",\n             r\"\n-<|>use syntax::{TextSize, TextRange,\n+$0use syntax::{TextSize, TextRange,\n };\",\n         );\n     }\n@@ -475,11 +475,11 @@ fn foo() {\n         check_join_lines(\n             r\"\n use syntax::{\n-<|>    TextSize, TextRange\n+$0    TextSize, TextRange\n };\",\n             r\"\n use syntax::{\n-<|>    TextSize, TextRange};\",\n+$0    TextSize, TextRange};\",\n         );\n     }\n \n@@ -489,11 +489,11 @@ use syntax::{\n         check_join_lines(\n             r\"\n use syntax::{\n-<|>    TextSize, TextRange,\n+$0    TextSize, TextRange,\n };\",\n             r\"\n use syntax::{\n-<|>    TextSize, TextRange};\",\n+$0    TextSize, TextRange};\",\n         );\n     }\n \n@@ -502,14 +502,14 @@ use syntax::{\n         check_join_lines(\n             r\"\n use syntax::{\n-    algo::<|>{\n+    algo::$0{\n         find_token_at_offset,\n     },\n     ast,\n };\",\n             r\"\n use syntax::{\n-    algo::<|>find_token_at_offset,\n+    algo::$0find_token_at_offset,\n     ast,\n };\",\n         );\n@@ -520,13 +520,13 @@ use syntax::{\n         check_join_lines(\n             r\"\n fn foo() {\n-    // Hello<|>\n+    // Hello$0\n     // world!\n }\n \",\n             r\"\n fn foo() {\n-    // Hello<|> world!\n+    // Hello$0 world!\n }\n \",\n         );\n@@ -537,13 +537,13 @@ fn foo() {\n         check_join_lines(\n             r\"\n fn foo() {\n-    /// Hello<|>\n+    /// Hello$0\n     /// world!\n }\n \",\n             r\"\n fn foo() {\n-    /// Hello<|> world!\n+    /// Hello$0 world!\n }\n \",\n         );\n@@ -554,13 +554,13 @@ fn foo() {\n         check_join_lines(\n             r\"\n fn foo() {\n-    //! Hello<|>\n+    //! Hello$0\n     //! world!\n }\n \",\n             r\"\n fn foo() {\n-    //! Hello<|> world!\n+    //! Hello$0 world!\n }\n \",\n         );\n@@ -571,13 +571,13 @@ fn foo() {\n         check_join_lines(\n             r\"\n fn foo() {\n-    // Hello<|>\n+    // Hello$0\n     /* world! */\n }\n \",\n             r\"\n fn foo() {\n-    // Hello<|> world! */\n+    // Hello$0 world! */\n }\n \",\n         );\n@@ -588,15 +588,15 @@ fn foo() {\n         check_join_lines(\n             r\"\n fn foo() {\n-    // The<|>\n+    // The$0\n     /* quick\n     brown\n     fox! */\n }\n \",\n             r\"\n fn foo() {\n-    // The<|> quick\n+    // The$0 quick\n     brown\n     fox! */\n }\n@@ -621,10 +621,10 @@ fn foo() {\n         check_join_lines_sel(\n             r\"\n fn foo() {\n-    <|>foo(1,\n+    $0foo(1,\n         2,\n         3,\n-    <|>)\n+    $0)\n }\n     \",\n             r\"\n@@ -639,9 +639,9 @@ fn foo() {\n     fn test_join_lines_selection_struct() {\n         check_join_lines_sel(\n             r\"\n-struct Foo <|>{\n+struct Foo $0{\n     f: u32,\n-}<|>\n+}$0\n     \",\n             r\"\n struct Foo { f: u32 }\n@@ -654,9 +654,9 @@ struct Foo { f: u32 }\n         check_join_lines_sel(\n             r\"\n fn foo() {\n-    join(<|>type_params.type_params()\n+    join($0type_params.type_params()\n             .filter_map(|it| it.name())\n-            .map(|it| it.text())<|>)\n+            .map(|it| it.text())$0)\n }\",\n             r\"\n fn foo() {\n@@ -671,9 +671,9 @@ fn foo() {\n             r\"\n pub fn handle_find_matching_brace() {\n     params.offsets\n-        .map(|offset| <|>{\n+        .map(|offset| $0{\n             world.analysis().matching_brace(&file, offset).unwrap_or(offset)\n-        }<|>)\n+        }$0)\n         .collect();\n }\",\n             r\"\n@@ -691,7 +691,7 @@ pub fn handle_find_matching_brace() {\n             r\"\n fn main() {\n     let _ = {\n-        // <|>foo\n+        // $0foo\n         // bar\n         92\n     };\n@@ -700,7 +700,7 @@ fn main() {\n             r\"\n fn main() {\n     let _ = {\n-        // <|>foo bar\n+        // $0foo bar\n         92\n     };\n }\n@@ -712,27 +712,27 @@ fn main() {\n     fn join_lines_mandatory_blocks_block() {\n         check_join_lines(\n             r\"\n-<|>fn foo() {\n+$0fn foo() {\n     92\n }\n         \",\n             r\"\n-<|>fn foo() { 92\n+$0fn foo() { 92\n }\n         \",\n         );\n \n         check_join_lines(\n             r\"\n fn foo() {\n-    <|>if true {\n+    $0if true {\n         92\n     }\n }\n         \",\n             r\"\n fn foo() {\n-    <|>if true { 92\n+    $0if true { 92\n     }\n }\n         \",\n@@ -741,14 +741,14 @@ fn foo() {\n         check_join_lines(\n             r\"\n fn foo() {\n-    <|>loop {\n+    $0loop {\n         92\n     }\n }\n         \",\n             r\"\n fn foo() {\n-    <|>loop { 92\n+    $0loop { 92\n     }\n }\n         \",\n@@ -757,14 +757,14 @@ fn foo() {\n         check_join_lines(\n             r\"\n fn foo() {\n-    <|>unsafe {\n+    $0unsafe {\n         92\n     }\n }\n         \",\n             r\"\n fn foo() {\n-    <|>unsafe { 92\n+    $0unsafe { 92\n     }\n }\n         \","}, {"sha": "1bfa1439d5df292c40d47631146287455b486899", "filename": "crates/ide/src/matching_brace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmatching_brace.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -58,15 +58,15 @@ mod tests {\n             assert_eq_text!(after, &actual);\n         }\n \n-        do_check(\"struct Foo { a: i32, }<|>\", \"struct Foo <|>{ a: i32, }\");\n-        do_check(\"fn main() { |x: i32|<|> x * 2;}\", \"fn main() { <|>|x: i32| x * 2;}\");\n-        do_check(\"fn main() { <|>|x: i32| x * 2;}\", \"fn main() { |x: i32<|>| x * 2;}\");\n+        do_check(\"struct Foo { a: i32, }$0\", \"struct Foo $0{ a: i32, }\");\n+        do_check(\"fn main() { |x: i32|$0 x * 2;}\", \"fn main() { $0|x: i32| x * 2;}\");\n+        do_check(\"fn main() { $0|x: i32| x * 2;}\", \"fn main() { |x: i32$0| x * 2;}\");\n \n         {\n             mark::check!(pipes_not_braces);\n             do_check(\n-                \"fn main() { match 92 { 1 | 2 |<|> 3 => 92 } }\",\n-                \"fn main() { match 92 { 1 | 2 |<|> 3 => 92 } }\",\n+                \"fn main() { match 92 { 1 | 2 |$0 3 => 92 } }\",\n+                \"fn main() { match 92 { 1 | 2 |$0 3 => 92 } }\",\n             );\n         }\n     }"}, {"sha": "d343638fbd271006bd58eeee7ae83e9d286cc80b", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -74,7 +74,7 @@ mod tests {\n             //- /lib.rs\n             mod foo;\n             //- /foo.rs\n-            <|>// empty\n+            $0// empty\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n@@ -90,7 +90,7 @@ mod tests {\n             mod foo;\n \n             //- /foo.rs\n-            mod <|>bar;\n+            mod $0bar;\n \n             //- /foo/bar.rs\n             // empty\n@@ -107,7 +107,7 @@ mod tests {\n             //- /lib.rs\n             mod foo {\n                 mod bar {\n-                    mod baz { <|> }\n+                    mod baz { $0 }\n                 }\n             }\n             \",\n@@ -123,7 +123,7 @@ mod tests {\n //- /main.rs\n mod foo;\n //- /foo.rs\n-<|>\n+$0\n \"#,\n         );\n         assert_eq!(analysis.crate_for(file_id).unwrap().len(), 1);"}, {"sha": "c95ed669c46c22f3b6f35ba2b651b31345ee3b2d", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -331,7 +331,7 @@ mod tests {\n     fn test_struct_literal_after_space() {\n         check(\n             r#\"\n-struct Foo <|>{\n+struct Foo $0{\n     a: i32,\n }\n impl Foo {\n@@ -354,7 +354,7 @@ fn main() {\n     fn test_struct_literal_before_space() {\n         check(\n             r#\"\n-struct Foo<|> {}\n+struct Foo$0 {}\n     fn main() {\n     let f: Foo;\n     f = Foo {};\n@@ -373,7 +373,7 @@ struct Foo<|> {}\n     fn test_struct_literal_with_generic_type() {\n         check(\n             r#\"\n-struct Foo<T> <|>{}\n+struct Foo<T> $0{}\n     fn main() {\n     let f: Foo::<i32>;\n     f = Foo {};\n@@ -391,7 +391,7 @@ struct Foo<T> <|>{}\n     fn test_struct_literal_for_tuple() {\n         check(\n             r#\"\n-struct Foo<|>(i32);\n+struct Foo$0(i32);\n \n fn main() {\n     let f: Foo;\n@@ -410,7 +410,7 @@ fn main() {\n     fn test_enum_after_space() {\n         check(\n             r#\"\n-enum Foo <|>{\n+enum Foo $0{\n     A,\n     B,\n }\n@@ -431,7 +431,7 @@ fn main() {\n     fn test_enum_before_space() {\n         check(\n             r#\"\n-enum Foo<|> {\n+enum Foo$0 {\n     A,\n     B,\n }\n@@ -453,7 +453,7 @@ fn main() {\n     fn test_enum_with_generic_type() {\n         check(\n             r#\"\n-enum Foo<T> <|>{\n+enum Foo<T> $0{\n     A(T),\n     B,\n }\n@@ -474,7 +474,7 @@ fn main() {\n     fn test_enum_for_tuple() {\n         check(\n             r#\"\n-enum Foo<|>{\n+enum Foo$0{\n     A(i8),\n     B(i8),\n }\n@@ -498,7 +498,7 @@ fn main() {\n fn main() {\n     let mut i = 1;\n     let j = 1;\n-    i = i<|> + j;\n+    i = i$0 + j;\n \n     {\n         i = 0;\n@@ -522,7 +522,7 @@ fn main() {\n         check(\n             r#\"\n fn foo() {\n-    let spam<|> = 92;\n+    let spam$0 = 92;\n     spam + spam\n }\n fn bar() {\n@@ -543,7 +543,7 @@ fn bar() {\n     fn test_find_all_refs_for_param_inside() {\n         check(\n             r#\"\n-fn foo(i : u32) -> u32 { i<|> }\n+fn foo(i : u32) -> u32 { i$0 }\n \"#,\n             expect![[r#\"\n                 i ValueParam FileId(0) 7..8 Other\n@@ -557,7 +557,7 @@ fn foo(i : u32) -> u32 { i<|> }\n     fn test_find_all_refs_for_fn_param() {\n         check(\n             r#\"\n-fn foo(i<|> : u32) -> u32 { i }\n+fn foo(i$0 : u32) -> u32 { i }\n \"#,\n             expect![[r#\"\n                 i ValueParam FileId(0) 7..8 Other\n@@ -573,7 +573,7 @@ fn foo(i<|> : u32) -> u32 { i }\n             r#\"\n //- /lib.rs\n struct Foo {\n-    pub spam<|>: u32,\n+    pub spam$0: u32,\n }\n \n fn main(s: Foo) {\n@@ -594,7 +594,7 @@ fn main(s: Foo) {\n             r#\"\n struct Foo;\n impl Foo {\n-    fn f<|>(&self) {  }\n+    fn f$0(&self) {  }\n }\n \"#,\n             expect![[r#\"\n@@ -610,7 +610,7 @@ impl Foo {\n             r#\"\n enum Foo {\n     A,\n-    B<|>,\n+    B$0,\n     C,\n }\n \"#,\n@@ -627,7 +627,7 @@ enum Foo {\n             r#\"\n enum Foo {\n     A,\n-    B { field<|>: u8 },\n+    B { field$0: u8 },\n     C,\n }\n \"#,\n@@ -669,7 +669,7 @@ pub struct Bar {\n }\n \n fn f() {\n-    let i = foo::Foo<|> { n: 5 };\n+    let i = foo::Foo$0 { n: 5 };\n }\n \"#,\n             expect![[r#\"\n@@ -689,7 +689,7 @@ fn f() {\n         check(\n             r#\"\n //- /lib.rs\n-mod foo<|>;\n+mod foo$0;\n \n use foo::Foo;\n \n@@ -726,7 +726,7 @@ fn f() {\n }\n \n //- /foo/some.rs\n-pub(super) struct Foo<|> {\n+pub(super) struct Foo$0 {\n     pub n: u32,\n }\n \"#,\n@@ -746,7 +746,7 @@ pub(super) struct Foo<|> {\n             mod foo;\n             mod bar;\n \n-            pub fn quux<|>() {}\n+            pub fn quux$0() {}\n \n             //- /foo.rs\n             fn f() { super::quux(); }\n@@ -782,7 +782,7 @@ pub(super) struct Foo<|> {\n         check(\n             r#\"\n #[macro_export]\n-macro_rules! m1<|> { () => (()) }\n+macro_rules! m1$0 { () => (()) }\n \n fn foo() {\n     m1();\n@@ -803,7 +803,7 @@ fn foo() {\n         check(\n             r#\"\n fn foo() {\n-    let mut i<|> = 0;\n+    let mut i$0 = 0;\n     i = i + 1;\n }\n \"#,\n@@ -826,7 +826,7 @@ struct S {\n \n fn foo() {\n     let mut s = S{f: 0};\n-    s.f<|> = 0;\n+    s.f$0 = 0;\n }\n \"#,\n             expect![[r#\"\n@@ -843,7 +843,7 @@ fn foo() {\n         check(\n             r#\"\n fn foo() {\n-    let i<|>;\n+    let i$0;\n     i = 1;\n }\n \"#,\n@@ -863,7 +863,7 @@ mod foo {\n     pub struct Foo;\n \n     impl Foo {\n-        pub fn new<|>() -> Foo { Foo }\n+        pub fn new$0() -> Foo { Foo }\n     }\n }\n \n@@ -886,7 +886,7 @@ fn main() {\n //- /lib.rs\n mod foo { mod bar; }\n \n-fn f<|>() {}\n+fn f$0() {}\n \n //- /foo/bar.rs\n use crate::f;\n@@ -907,7 +907,7 @@ fn g() { f(); }\n         check(\n             r#\"\n struct S {\n-    field<|>: u8,\n+    field$0: u8,\n }\n \n fn f(s: S) {\n@@ -930,7 +930,7 @@ fn f(s: S) {\n             r#\"\n enum En {\n     Variant {\n-        field<|>: u8,\n+        field$0: u8,\n     }\n }\n \n@@ -955,7 +955,7 @@ fn f(e: En) {\n mod m {\n     pub enum En {\n         Variant {\n-            field<|>: u8,\n+            field$0: u8,\n         }\n     }\n }\n@@ -980,7 +980,7 @@ struct Foo { bar: i32 }\n \n impl Foo {\n     fn foo(self) {\n-        let x = self<|>.bar;\n+        let x = self$0.bar;\n         if true {\n             let _ = match () {\n                 () => self,\n@@ -1032,7 +1032,7 @@ impl Foo {\n             r#\"\n trait Foo<'a> {}\n impl<'a> Foo<'a> for &'a () {}\n-fn foo<'a, 'b: 'a>(x: &'a<|> ()) -> &'a () where &'a (): Foo<'a> {\n+fn foo<'a, 'b: 'a>(x: &'a$0 ()) -> &'a () where &'a (): Foo<'a> {\n     fn bar<'a>(_: &'a ()) {}\n     x\n }\n@@ -1053,7 +1053,7 @@ fn foo<'a, 'b: 'a>(x: &'a<|> ()) -> &'a () where &'a (): Foo<'a> {\n     fn test_find_lifetimes_type_alias() {\n         check(\n             r#\"\n-type Foo<'a, T> where T: 'a<|> = &'a T;\n+type Foo<'a, T> where T: 'a$0 = &'a T;\n \"#,\n             expect![[r#\"\n                 'a LifetimeParam FileId(0) 9..11 9..11 Lifetime\n@@ -1072,7 +1072,7 @@ trait Foo<'a> {\n     fn foo() -> &'a ();\n }\n impl<'a> Foo<'a> for &'a () {\n-    fn foo() -> &'a<|> () {\n+    fn foo() -> &'a$0 () {\n         unimplemented!()\n     }\n }\n@@ -1093,7 +1093,7 @@ impl<'a> Foo<'a> for &'a () {\n             r#\"\n macro_rules! foo {($i:ident) => {$i} }\n fn main() {\n-    let a<|> = \"test\";\n+    let a$0 = \"test\";\n     foo!(a);\n }\n \"#,\n@@ -1112,7 +1112,7 @@ fn main() {\n macro_rules! foo {($i:ident) => {$i} }\n fn main() {\n     let a = \"test\";\n-    foo!(a<|>);\n+    foo!(a$0);\n }\n \"#,\n             expect![[r#\"\n@@ -1130,7 +1130,7 @@ fn main() {\n fn foo<'a>() -> &'a () {\n     'a: loop {\n         'b: loop {\n-            continue 'a<|>;\n+            continue 'a$0;\n         }\n         break 'a;\n     }\n@@ -1149,7 +1149,7 @@ fn foo<'a>() -> &'a () {\n     fn test_find_const_param() {\n         check(\n             r#\"\n-fn foo<const FOO<|>: usize>() -> usize {\n+fn foo<const FOO$0: usize>() -> usize {\n     FOO\n }\n \"#,"}, {"sha": "53d79333ce4a6fecddfdf769ad1712d64f224e96", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -493,19 +493,19 @@ mod tests {\n \n     #[test]\n     fn test_rename_to_underscore() {\n-        check(\"_\", r#\"fn main() { let i<|> = 1; }\"#, r#\"fn main() { let _ = 1; }\"#);\n+        check(\"_\", r#\"fn main() { let i$0 = 1; }\"#, r#\"fn main() { let _ = 1; }\"#);\n     }\n \n     #[test]\n     fn test_rename_to_raw_identifier() {\n-        check(\"r#fn\", r#\"fn main() { let i<|> = 1; }\"#, r#\"fn main() { let r#fn = 1; }\"#);\n+        check(\"r#fn\", r#\"fn main() { let i$0 = 1; }\"#, r#\"fn main() { let r#fn = 1; }\"#);\n     }\n \n     #[test]\n     fn test_rename_to_invalid_identifier1() {\n         check(\n             \"invalid!\",\n-            r#\"fn main() { let i<|> = 1; }\"#,\n+            r#\"fn main() { let i$0 = 1; }\"#,\n             \"error: Invalid name `invalid!`: not an identifier\",\n         );\n     }\n@@ -514,7 +514,7 @@ mod tests {\n     fn test_rename_to_invalid_identifier2() {\n         check(\n             \"multiple tokens\",\n-            r#\"fn main() { let i<|> = 1; }\"#,\n+            r#\"fn main() { let i$0 = 1; }\"#,\n             \"error: Invalid name `multiple tokens`: not an identifier\",\n         );\n     }\n@@ -523,7 +523,7 @@ mod tests {\n     fn test_rename_to_invalid_identifier3() {\n         check(\n             \"let\",\n-            r#\"fn main() { let i<|> = 1; }\"#,\n+            r#\"fn main() { let i$0 = 1; }\"#,\n             \"error: Invalid name `let`: not an identifier\",\n         );\n     }\n@@ -532,7 +532,7 @@ mod tests {\n     fn test_rename_to_invalid_identifier_lifetime() {\n         check(\n             \"'foo\",\n-            r#\"fn main() { let i<|> = 1; }\"#,\n+            r#\"fn main() { let i$0 = 1; }\"#,\n             \"error: Invalid name `'foo`: not an identifier\",\n         );\n     }\n@@ -541,7 +541,7 @@ mod tests {\n     fn test_rename_to_invalid_identifier_lifetime2() {\n         check(\n             \"foo\",\n-            r#\"fn main<'a>(_: &'a<|> ()) {}\"#,\n+            r#\"fn main<'a>(_: &'a$0 ()) {}\"#,\n             \"error: Invalid name `foo`: not a lifetime identifier\",\n         );\n     }\n@@ -554,7 +554,7 @@ mod tests {\n fn main() {\n     let mut i = 1;\n     let j = 1;\n-    i = i<|> + j;\n+    i = i$0 + j;\n \n     { i = 0; }\n \n@@ -579,7 +579,7 @@ fn main() {\n     fn test_rename_unresolved_reference() {\n         check(\n             \"new_name\",\n-            r#\"fn main() { let _ = unresolved_ref<|>; }\"#,\n+            r#\"fn main() { let _ = unresolved_ref$0; }\"#,\n             \"error: No references found at position\",\n         );\n     }\n@@ -591,7 +591,7 @@ fn main() {\n             r#\"\n macro_rules! foo {($i:ident) => {$i} }\n fn main() {\n-    let a<|> = \"test\";\n+    let a$0 = \"test\";\n     foo!(a);\n }\n \"#,\n@@ -613,7 +613,7 @@ fn main() {\n macro_rules! foo {($i:ident) => {$i} }\n fn main() {\n     let a = \"test\";\n-    foo!(a<|>);\n+    foo!(a$0);\n }\n \"#,\n             r#\"\n@@ -634,7 +634,7 @@ fn main() {\n macro_rules! define_fn {($id:ident) => { fn $id{} }}\n define_fn!(foo);\n fn main() {\n-    fo<|>o();\n+    fo$0o();\n }\n \"#,\n             r#\"\n@@ -653,7 +653,7 @@ fn main() {\n             \"bar\",\n             r#\"\n macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-define_fn!(fo<|>o);\n+define_fn!(fo$0o);\n fn main() {\n     foo();\n }\n@@ -670,25 +670,25 @@ fn main() {\n \n     #[test]\n     fn test_rename_for_param_inside() {\n-        check(\"j\", r#\"fn foo(i : u32) -> u32 { i<|> }\"#, r#\"fn foo(j : u32) -> u32 { j }\"#);\n+        check(\"j\", r#\"fn foo(i : u32) -> u32 { i$0 }\"#, r#\"fn foo(j : u32) -> u32 { j }\"#);\n     }\n \n     #[test]\n     fn test_rename_refs_for_fn_param() {\n-        check(\"j\", r#\"fn foo(i<|> : u32) -> u32 { i }\"#, r#\"fn foo(j : u32) -> u32 { j }\"#);\n+        check(\"j\", r#\"fn foo(i$0 : u32) -> u32 { i }\"#, r#\"fn foo(j : u32) -> u32 { j }\"#);\n     }\n \n     #[test]\n     fn test_rename_for_mut_param() {\n-        check(\"j\", r#\"fn foo(mut i<|> : u32) -> u32 { i }\"#, r#\"fn foo(mut j : u32) -> u32 { j }\"#);\n+        check(\"j\", r#\"fn foo(mut i$0 : u32) -> u32 { i }\"#, r#\"fn foo(mut j : u32) -> u32 { j }\"#);\n     }\n \n     #[test]\n     fn test_rename_struct_field() {\n         check(\n             \"j\",\n             r#\"\n-struct Foo { i<|>: i32 }\n+struct Foo { i$0: i32 }\n \n impl Foo {\n     fn new(i: i32) -> Self {\n@@ -714,7 +714,7 @@ impl Foo {\n         check(\n             \"j\",\n             r#\"\n-struct Foo { i<|>: i32 }\n+struct Foo { i$0: i32 }\n \n impl Foo {\n     fn new(i: i32) -> Self {\n@@ -743,7 +743,7 @@ impl Foo {\n struct Foo { i: i32 }\n \n impl Foo {\n-    fn new(i<|>: i32) -> Self {\n+    fn new(i$0: i32) -> Self {\n         Self { i }\n     }\n }\n@@ -765,7 +765,7 @@ impl Foo {\n         check(\n             \"j\",\n             r#\"\n-struct Foo { i<|>: i32 }\n+struct Foo { i$0: i32 }\n struct Bar { i: i32 }\n \n impl Bar {\n@@ -794,7 +794,7 @@ impl Bar {\n             r#\"\n struct Foo { i: i32 }\n \n-fn baz(i<|>: i32) -> Self {\n+fn baz(i$0: i32) -> Self {\n      let x = Foo { i };\n      {\n          let i = 0;\n@@ -825,7 +825,7 @@ fn baz(j: i32) -> Self {\n mod bar;\n \n //- /bar.rs\n-mod foo<|>;\n+mod foo$0;\n \n //- /bar/foo.rs\n // empty\n@@ -883,7 +883,7 @@ fn main() {}\n pub struct FooContent;\n \n //- /bar.rs\n-use crate::foo<|>::FooContent;\n+use crate::foo$0::FooContent;\n \"#,\n             expect![[r#\"\n                 RangeInfo {\n@@ -943,7 +943,7 @@ use crate::foo<|>::FooContent;\n             \"foo2\",\n             r#\"\n //- /lib.rs\n-mod fo<|>o;\n+mod fo$0o;\n //- /foo/mod.rs\n // emtpy\n \"#,\n@@ -992,7 +992,7 @@ mod fo<|>o;\n             \"bar\",\n             r#\"\n //- /lib.rs\n-mod outer { mod fo<|>o; }\n+mod outer { mod fo$0o; }\n \n //- /outer/foo.rs\n // emtpy\n@@ -1041,7 +1041,7 @@ mod outer { mod fo<|>o; }\n         check(\n             \"baz\",\n             r#\"\n-mod <|>foo { pub fn bar() {} }\n+mod $0foo { pub fn bar() {} }\n \n fn main() { foo::bar(); }\n \"#,\n@@ -1065,7 +1065,7 @@ fn f() {\n }\n \n //- /bar.rs\n-pub mod foo<|>;\n+pub mod foo$0;\n \n //- /bar/foo.rs\n // pub fn fun() {}\n@@ -1128,7 +1128,7 @@ pub mod foo<|>;\n             \"Baz\",\n             r#\"\n mod foo {\n-    pub enum Foo { Bar<|> }\n+    pub enum Foo { Bar$0 }\n }\n \n fn func(f: foo::Foo) {\n@@ -1157,7 +1157,7 @@ fn func(f: foo::Foo) {\n             \"baz\",\n             r#\"\n mod foo {\n-    pub struct Foo { pub bar<|>: uint }\n+    pub struct Foo { pub bar$0: uint }\n }\n \n fn foo(f: foo::Foo) {\n@@ -1184,7 +1184,7 @@ fn foo(f: foo::Foo) {\n struct Foo { i: i32 }\n \n impl Foo {\n-    fn f(foo<|>: &mut Foo) -> i32 {\n+    fn f(foo$0: &mut Foo) -> i32 {\n         foo.i\n     }\n }\n@@ -1205,7 +1205,7 @@ impl Foo {\n struct Foo { i: i32 }\n \n impl Foo {\n-    fn f(foo<|>: Foo) -> i32 {\n+    fn f(foo$0: Foo) -> i32 {\n         foo.i\n     }\n }\n@@ -1229,7 +1229,7 @@ impl Foo {\n             r#\"\n struct Foo { i: i32 }\n \n-fn f(foo<|>: &mut Foo) -> i32 {\n+fn f(foo$0: &mut Foo) -> i32 {\n     foo.i\n }\n \"#,\n@@ -1242,7 +1242,7 @@ struct Foo { i: i32 }\n struct Bar;\n \n impl Bar {\n-    fn f(foo<|>: &mut Foo) -> i32 {\n+    fn f(foo$0: &mut Foo) -> i32 {\n         foo.i\n     }\n }\n@@ -1258,7 +1258,7 @@ impl Bar {\n             r#\"\n struct Foo { i: i32 }\n impl Foo {\n-    fn f(x: (), foo<|>: &mut Foo) -> i32 {\n+    fn f(x: (), foo$0: &mut Foo) -> i32 {\n         foo.i\n     }\n }\n@@ -1274,7 +1274,7 @@ impl Foo {\n             r#\"\n struct Foo { i: i32 }\n impl &Foo {\n-    fn f(foo<|>: &Foo) -> i32 {\n+    fn f(foo$0: &Foo) -> i32 {\n         foo.i\n     }\n }\n@@ -1298,7 +1298,7 @@ impl &Foo {\n struct Foo { i: i32 }\n \n impl Foo {\n-    fn f(&mut <|>self) -> i32 {\n+    fn f(&mut $0self) -> i32 {\n         self.i\n     }\n }\n@@ -1323,7 +1323,7 @@ impl Foo {\n struct Foo { i: i32 }\n \n impl Foo {\n-    fn f(<|>self) -> i32 {\n+    fn f($0self) -> i32 {\n         self.i\n     }\n }\n@@ -1350,7 +1350,7 @@ struct Foo { i: i32 }\n impl Foo {\n     fn f(&self) -> i32 {\n         let self_var = 1;\n-        self<|>.i\n+        self$0.i\n     }\n }\n \"#,\n@@ -1373,7 +1373,7 @@ impl Foo {\n         check(\n             \"bar\",\n             r#\"\n-struct Foo { i<|>: i32 }\n+struct Foo { i$0: i32 }\n \n fn foo(bar: i32) -> Foo {\n     Foo { i: bar }\n@@ -1394,7 +1394,7 @@ fn foo(bar: i32) -> Foo {\n         check(\n             \"baz\",\n             r#\"\n-struct Foo { i<|>: i32 }\n+struct Foo { i$0: i32 }\n \n fn foo(foo: Foo) {\n     let Foo { i: baz } = foo;\n@@ -1433,7 +1433,7 @@ struct Foo {\n \n fn foo(foo: Foo) {\n     let Foo { i: b } = foo;\n-    let _ = b<|>;\n+    let _ = b$0;\n }\n \"#,\n             expected_fixture,\n@@ -1447,7 +1447,7 @@ struct Foo {\n \n fn foo(foo: Foo) {\n     let Foo { i } = foo;\n-    let _ = i<|>;\n+    let _ = i$0;\n }\n \"#,\n             expected_fixture,\n@@ -1464,7 +1464,7 @@ struct Foo {\n }\n \n fn foo(Foo { i }: foo) -> i32 {\n-    i<|>\n+    i$0\n }\n \"#,\n             r#\"\n@@ -1488,7 +1488,7 @@ trait Foo<'a> {\n     fn foo() -> &'a ();\n }\n impl<'a> Foo<'a> for &'a () {\n-    fn foo() -> &'a<|> () {\n+    fn foo() -> &'a$0 () {\n         unimplemented!()\n     }\n }\n@@ -1520,7 +1520,7 @@ fn main() {\n     let test_variable = CustomOption::Some(22);\n \n     match test_variable {\n-        CustomOption::Some(foo<|>) if foo == 11 => {}\n+        CustomOption::Some(foo$0) if foo == 11 => {}\n         _ => (),\n     }\n }\"#,\n@@ -1549,7 +1549,7 @@ fn main() {\n fn foo<'a>() -> &'a () {\n     'a: {\n         'b: loop {\n-            break 'a<|>;\n+            break 'a$0;\n         }\n     }\n }"}, {"sha": "557563d7e1a36bf3ecdc3bd0eacf880a86a9c59f", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -329,7 +329,7 @@ mod tests {\n         check(\n             r#\"\n //- /lib.rs\n-<|>\n+$0\n fn main() {}\n \n #[test]\n@@ -425,7 +425,7 @@ fn bench() {}\n         check(\n             r#\"\n //- /lib.rs\n-<|>\n+$0\n fn main() {}\n \n /// ```\n@@ -573,7 +573,7 @@ struct StructWithRunnable(String);\n         check(\n             r#\"\n //- /lib.rs\n-<|>\n+$0\n fn main() {}\n \n struct Data;\n@@ -625,7 +625,7 @@ impl Data {\n         check(\n             r#\"\n //- /lib.rs\n-<|>\n+$0\n mod test_mod {\n     #[test]\n     fn test_foo1() {}\n@@ -679,7 +679,7 @@ mod test_mod {\n         check(\n             r#\"\n //- /lib.rs\n-<|>\n+$0\n mod root_tests {\n     mod nested_tests_0 {\n         mod nested_tests_1 {\n@@ -819,7 +819,7 @@ mod root_tests {\n         check(\n             r#\"\n //- /lib.rs crate:foo cfg:feature=foo\n-<|>\n+$0\n #[test]\n #[cfg(feature = \"foo\")]\n fn test_foo1() {}\n@@ -864,7 +864,7 @@ fn test_foo1() {}\n         check(\n             r#\"\n //- /lib.rs crate:foo cfg:feature=foo,feature=bar\n-<|>\n+$0\n #[test]\n #[cfg(all(feature = \"foo\", feature = \"bar\"))]\n fn test_foo1() {}\n@@ -919,7 +919,7 @@ fn test_foo1() {}\n         check(\n             r#\"\n //- /lib.rs\n-<|>\n+$0\n mod test_mod {\n     fn foo1() {}\n }\n@@ -938,7 +938,7 @@ mod test_mod {\n //- /lib.rs\n mod foo;\n //- /foo.rs\n-struct Foo;<|>\n+struct Foo;$0\n impl Foo {\n     /// ```\n     /// let x = 5;"}, {"sha": "1f26f8043d2b22de239a2bea4a489d42c1011d20", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -85,7 +85,7 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n         .trim_end_matches('\"')\n         .trim()\n         // Remove custom markers\n-        .replace(\"<|>\", \"\");\n+        .replace(\"$0\", \"\");\n \n     let parsed = SourceFile::parse(&text);\n \n@@ -182,7 +182,7 @@ SOURCE_FILE@0..60\n \n     #[test]\n     fn test_syntax_tree_with_range() {\n-        let (analysis, range) = fixture::range(r#\"<|>fn foo() {}<|>\"#.trim());\n+        let (analysis, range) = fixture::range(r#\"$0fn foo() {}$0\"#.trim());\n         let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n \n         assert_eq_text!(\n@@ -206,10 +206,10 @@ FN@0..11\n \n         let (analysis, range) = fixture::range(\n             r#\"fn test() {\n-    <|>assert!(\"\n+    $0assert!(\"\n     fn foo() {\n     }\n-    \", \"\");<|>\n+    \", \"\");$0\n }\"#\n             .trim(),\n         );\n@@ -243,8 +243,8 @@ EXPR_STMT@16..58\n         let (analysis, range) = fixture::range(\n             r#\"fn test() {\n     assert!(\"\n-<|>fn foo() {\n-}<|>\n+$0fn foo() {\n+}$0\n fn bar() {\n }\n     \", \"\");\n@@ -277,8 +277,8 @@ SOURCE_FILE@0..12\n         let (analysis, range) = fixture::range(\n             r###\"fn test() {\n     assert!(r#\"\n-<|>fn foo() {\n-}<|>\n+$0fn foo() {\n+}$0\n fn bar() {\n }\n     \"#, \"\");\n@@ -310,11 +310,11 @@ SOURCE_FILE@0..12\n         // With a raw string\n         let (analysis, range) = fixture::range(\n             r###\"fn test() {\n-    assert!(r<|>#\"\n+    assert!(r$0#\"\n fn foo() {\n }\n fn bar() {\n-}\"<|>#, \"\");\n+}\"$0#, \"\");\n }\"###\n                 .trim(),\n         );"}, {"sha": "88c905003063a34332d79f29a7fd3b12357f8c88", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -170,7 +170,7 @@ mod tests {\n     fn test_on_eq_typed() {\n         //     do_check(r\"\n         // fn foo() {\n-        //     let foo =<|>\n+        //     let foo =$0\n         // }\n         // \", r\"\n         // fn foo() {\n@@ -181,7 +181,7 @@ mod tests {\n             '=',\n             r\"\n fn foo() {\n-    let foo <|> 1 + 1\n+    let foo $0 1 + 1\n }\n \",\n             r\"\n@@ -192,7 +192,7 @@ fn foo() {\n         );\n         //     do_check(r\"\n         // fn foo() {\n-        //     let foo =<|>\n+        //     let foo =$0\n         //     let bar = 1;\n         // }\n         // \", r\"\n@@ -210,7 +210,7 @@ fn foo() {\n             r\"\n             fn main() {\n                 xs.foo()\n-                <|>\n+                $0\n             }\n             \",\n             r\"\n@@ -225,7 +225,7 @@ fn foo() {\n             r\"\n             fn main() {\n                 xs.foo()\n-                    <|>\n+                    $0\n             }\n             \",\n         )\n@@ -238,7 +238,7 @@ fn foo() {\n             r\"\n             fn main() {\n                 xs.foo()\n-                <|>;\n+                $0;\n             }\n             \",\n             r\"\n@@ -253,7 +253,7 @@ fn foo() {\n             r\"\n             fn main() {\n                 xs.foo()\n-                    <|>;\n+                    $0;\n             }\n             \",\n         )\n@@ -266,7 +266,7 @@ fn foo() {\n             r#\"\n fn main() {\n     let _ = foo\n-    <|>\n+    $0\n     bar()\n }\n \"#,\n@@ -288,7 +288,7 @@ fn main() {\n             fn main() {\n                 xs.foo()\n                     .first()\n-                <|>\n+                $0\n             }\n             \",\n             r\"\n@@ -305,7 +305,7 @@ fn main() {\n             fn main() {\n                 xs.foo()\n                     .first()\n-                    <|>\n+                    $0\n             }\n             \",\n         );\n@@ -318,7 +318,7 @@ fn main() {\n             r\"\n             fn source_impl() {\n                 let var = enum_defvariant_list().unwrap()\n-                <|>\n+                $0\n                     .nth(92)\n                     .unwrap();\n             }\n@@ -337,7 +337,7 @@ fn main() {\n             r\"\n             fn source_impl() {\n                 let var = enum_defvariant_list().unwrap()\n-                    <|>\n+                    $0\n                     .nth(92)\n                     .unwrap();\n             }\n@@ -351,22 +351,22 @@ fn main() {\n             '.',\n             r\"\n             fn main() {\n-                <|>\n+                $0\n             }\n             \",\n         );\n         type_char_noop(\n             '.',\n             r\"\n             fn main() {\n-            <|>\n+            $0\n             }\n             \",\n         );\n     }\n \n     #[test]\n     fn adds_space_after_return_type() {\n-        type_char('>', \"fn foo() -<|>{ 92 }\", \"fn foo() -> { 92 }\")\n+        type_char('>', \"fn foo() -$0{ 92 }\", \"fn foo() -> { 92 }\")\n     }\n }"}, {"sha": "63cd51b69c5682df85bdb0f8a8426a002e82fce2", "filename": "crates/ide/src/typing/on_enter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -136,7 +136,7 @@ mod tests {\n     fn continues_doc_comment() {\n         do_check(\n             r\"\n-/// Some docs<|>\n+/// Some docs$0\n fn foo() {\n }\n \",\n@@ -151,7 +151,7 @@ fn foo() {\n         do_check(\n             r\"\n impl S {\n-    /// Some<|> docs.\n+    /// Some$0 docs.\n     fn foo() {}\n }\n \",\n@@ -166,7 +166,7 @@ impl S {\n \n         do_check(\n             r\"\n-///<|> Some docs\n+///$0 Some docs\n fn foo() {\n }\n \",\n@@ -181,15 +181,15 @@ fn foo() {\n \n     #[test]\n     fn does_not_continue_before_doc_comment() {\n-        do_check_noop(r\"<|>//! docz\");\n+        do_check_noop(r\"$0//! docz\");\n     }\n \n     #[test]\n     fn continues_code_comment_in_the_middle_of_line() {\n         do_check(\n             r\"\n fn main() {\n-    // Fix<|> me\n+    // Fix$0 me\n     let x = 1 + 1;\n }\n \",\n@@ -208,7 +208,7 @@ fn main() {\n         do_check(\n             r\"\n fn main() {\n-    // Fix<|>\n+    // Fix$0\n     // me\n     let x = 1 + 1;\n }\n@@ -229,7 +229,7 @@ fn main() {\n         do_check_noop(\n             r\"\n fn main() {\n-    // Fix me<|>\n+    // Fix me$0\n     let x = 1 + 1;\n }\n \",\n@@ -242,7 +242,7 @@ fn main() {\n         do_check(\n             r#\"\n fn main() {\n-    // Fix me <|>\n+    // Fix me $0\n     let x = 1 + 1;\n }\n \"#,\n@@ -261,7 +261,7 @@ fn main() {\n         do_check(\n             \"\n fn main() {\n-    // Fix me  \\t\\t   <|>\n+    // Fix me  \\t\\t   $0\n     let x = 1 + 1;\n }\n \","}, {"sha": "c714cf280d493117c3ecb76698bf6ac4aae5d87e", "filename": "crates/ide_db/src/call_info/tests.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -3,12 +3,12 @@ use base_db::{fixture::ChangeFixture, FilePosition};\n use expect_test::{expect, Expect};\n use test_utils::{mark, RangeOrOffset};\n \n-/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+/// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     let mut database = RootDatabase::default();\n     database.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = match range_or_offset {\n         RangeOrOffset::Range(_) => panic!(),\n         RangeOrOffset::Offset(it) => it,\n@@ -49,7 +49,7 @@ fn test_fn_signature_two_args() {\n     check(\n         r#\"\n fn foo(x: u32, y: u32) -> u32 {x + y}\n-fn bar() { foo(<|>3, ); }\n+fn bar() { foo($03, ); }\n \"#,\n         expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n@@ -59,7 +59,7 @@ fn bar() { foo(<|>3, ); }\n     check(\n         r#\"\n fn foo(x: u32, y: u32) -> u32 {x + y}\n-fn bar() { foo(3<|>, ); }\n+fn bar() { foo(3$0, ); }\n \"#,\n         expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n@@ -69,7 +69,7 @@ fn bar() { foo(3<|>, ); }\n     check(\n         r#\"\n fn foo(x: u32, y: u32) -> u32 {x + y}\n-fn bar() { foo(3,<|> ); }\n+fn bar() { foo(3,$0 ); }\n \"#,\n         expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n@@ -79,7 +79,7 @@ fn bar() { foo(3,<|> ); }\n     check(\n         r#\"\n fn foo(x: u32, y: u32) -> u32 {x + y}\n-fn bar() { foo(3, <|>); }\n+fn bar() { foo(3, $0); }\n \"#,\n         expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n@@ -93,7 +93,7 @@ fn test_fn_signature_two_args_empty() {\n     check(\n         r#\"\n fn foo(x: u32, y: u32) -> u32 {x + y}\n-fn bar() { foo(<|>); }\n+fn bar() { foo($0); }\n \"#,\n         expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n@@ -110,7 +110,7 @@ fn foo<T, U: Copy + Display>(x: T, y: U) -> u32\n     where T: Copy + Display, U: Debug\n { x + y }\n \n-fn bar() { foo(<|>3, ); }\n+fn bar() { foo($03, ); }\n \"#,\n         expect![[r#\"\n                 fn foo(x: i32, y: {unknown}) -> u32\n@@ -124,7 +124,7 @@ fn test_fn_signature_no_params() {\n     check(\n         r#\"\n fn foo<T>() -> T where T: Copy + Display {}\n-fn bar() { foo(<|>); }\n+fn bar() { foo($0); }\n \"#,\n         expect![[r#\"\n                 fn foo() -> {unknown}\n@@ -140,7 +140,7 @@ fn test_fn_signature_for_impl() {\n struct F;\n impl F { pub fn new() { } }\n fn bar() {\n-    let _ : F = F::new(<|>);\n+    let _ : F = F::new($0);\n }\n \"#,\n         expect![[r#\"\n@@ -159,7 +159,7 @@ impl S { pub fn do_it(&self) {} }\n \n fn bar() {\n     let s: S = S;\n-    s.do_it(<|>);\n+    s.do_it($0);\n }\n \"#,\n         expect![[r#\"\n@@ -178,7 +178,7 @@ impl S {\n     fn foo(&self, x: i32) {}\n }\n \n-fn main() { S.foo(<|>); }\n+fn main() { S.foo($0); }\n \"#,\n         expect![[r#\"\n                 fn foo(&self, x: i32)\n@@ -196,7 +196,7 @@ impl S {\n     fn foo(&self, x: i32) {}\n }\n \n-fn main() { S::foo(<|>); }\n+fn main() { S::foo($0); }\n \"#,\n         expect![[r#\"\n                 fn foo(self: &S, x: i32)\n@@ -216,7 +216,7 @@ fn foo(j: u32) -> u32 {\n }\n \n fn bar() {\n-    let _ = foo(<|>);\n+    let _ = foo($0);\n }\n \"#,\n         expect![[r#\"\n@@ -246,7 +246,7 @@ pub fn add_one(x: i32) -> i32 {\n }\n \n pub fn do() {\n-    add_one(<|>\n+    add_one($0\n }\"#,\n         expect![[r##\"\n                 Adds one to the number given.\n@@ -287,7 +287,7 @@ impl addr {\n \n pub fn do_it() {\n     addr {};\n-    addr::add_one(<|>);\n+    addr::add_one($0);\n }\n \"#,\n         expect![[r##\"\n@@ -331,7 +331,7 @@ impl<E> WriteHandler<E> {\n }\n \n pub fn foo(mut r: WriteHandler<()>) {\n-    r.finished(<|>);\n+    r.finished($0);\n }\n \"#,\n         expect![[r#\"\n@@ -351,7 +351,7 @@ fn call_info_bad_offset() {\n     check(\n         r#\"\n fn foo(x: u32, y: u32) -> u32 {x + y}\n-fn bar() { foo <|> (3, ); }\n+fn bar() { foo $0 (3, ); }\n \"#,\n         expect![[\"\"]],\n     );\n@@ -368,7 +368,7 @@ fn bar(_: u32) { }\n \n fn main() {\n     let foo = Foo;\n-    std::thread::spawn(move || foo.bar(<|>));\n+    std::thread::spawn(move || foo.bar($0));\n }\n \"#,\n         expect![[r#\"\n@@ -385,7 +385,7 @@ fn works_for_tuple_structs() {\n /// A cool tuple struct\n struct S(u32, i32);\n fn main() {\n-    let s = S(0, <|>);\n+    let s = S(0, $0);\n }\n \"#,\n         expect![[r#\"\n@@ -403,7 +403,7 @@ fn generic_struct() {\n         r#\"\n struct S<T>(T);\n fn main() {\n-    let s = S(<|>);\n+    let s = S($0);\n }\n \"#,\n         expect![[r#\"\n@@ -427,7 +427,7 @@ enum E {\n }\n \n fn main() {\n-    let a = E::A(<|>);\n+    let a = E::A($0);\n }\n \"#,\n         expect![[r#\"\n@@ -445,7 +445,7 @@ fn cant_call_struct_record() {\n         r#\"\n struct S { x: u32, y: i32 }\n fn main() {\n-    let s = S(<|>);\n+    let s = S($0);\n }\n \"#,\n         expect![[\"\"]],\n@@ -466,7 +466,7 @@ enum E {\n }\n \n fn main() {\n-    let a = E::C(<|>);\n+    let a = E::C($0);\n }\n \"#,\n         expect![[\"\"]],\n@@ -480,7 +480,7 @@ fn fn_signature_for_call_in_macro() {\n macro_rules! id { ($($tt:tt)*) => { $($tt)* } }\n fn foo() { }\n id! {\n-    fn bar() { foo(<|>); }\n+    fn bar() { foo($0); }\n }\n \"#,\n         expect![[r#\"\n@@ -497,7 +497,7 @@ fn call_info_for_lambdas() {\n struct S;\n fn foo(s: S) -> i32 { 92 }\n fn main() {\n-    (|s| foo(s))(<|>)\n+    (|s| foo(s))($0)\n }\n         \"#,\n         expect![[r#\"\n@@ -512,7 +512,7 @@ fn call_info_for_fn_ptr() {\n     check(\n         r#\"\n fn main(f: fn(i32, f64) -> char) {\n-    f(0, <|>)\n+    f(0, $0)\n }\n         \"#,\n         expect![[r#\""}, {"sha": "be1c64b03b21f6c67c6c3f2f409accd5c3337696", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -358,7 +358,7 @@ impl NameRefClass {\n             if let Some(path) = macro_call.path() {\n                 if path.qualifier().is_none() {\n                     // Only use this to resolve single-segment macro calls like `foo!()`. Multi-segment\n-                    // paths are handled below (allowing `log<|>::info!` to resolve to the log crate).\n+                    // paths are handled below (allowing `log$0::info!` to resolve to the log crate).\n                     if let Some(macro_def) = sema.resolve_macro_call(&macro_call) {\n                         return Some(NameRefClass::Definition(Definition::Macro(macro_def)));\n                     }"}, {"sha": "84bb255059e6baf4e5df87dd9c7cb205eaa06cfa", "filename": "crates/ide_db/src/traits/tests.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits%2Ftests.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -5,12 +5,12 @@ use hir::Semantics;\n use syntax::ast::{self, AstNode};\n use test_utils::RangeOrOffset;\n \n-/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+/// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     let mut database = RootDatabase::default();\n     database.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n     let offset = match range_or_offset {\n         RangeOrOffset::Range(_) => panic!(),\n         RangeOrOffset::Offset(it) => it,\n@@ -55,7 +55,7 @@ pub trait Foo {\n     fn bar();\n }\n impl Foo for u8 {\n-    <|>\n+    $0\n }\n             \"#,\n         expect![[\"Foo\"]],\n@@ -68,7 +68,7 @@ pub trait Foo {\n impl Foo for u8 {\n     fn bar() {\n         fn baz() {\n-            <|>\n+            $0\n         }\n         baz();\n     }\n@@ -83,7 +83,7 @@ pub trait Foo {\n }\n pub struct Bar;\n impl Bar {\n-    <|>\n+    $0\n }\n             \"#,\n         expect![[\"\"]],\n@@ -99,7 +99,7 @@ pub trait Foo {\n     fn bar();\n }\n impl Foo for u8 {\n-    <|>\n+    $0\n }\"#,\n         expect![[r#\"\n                 FOO\n@@ -114,7 +114,7 @@ pub trait Foo {\n }\n impl Foo for u8 {\n     const FOO: u8 = 10;\n-    <|>\n+    $0\n }\"#,\n         expect![[r#\"\n                 bar\"#]],\n@@ -128,7 +128,7 @@ pub trait Foo {\n }\n impl Foo for u8 {\n     const FOO: u8 = 10;\n-    fn bar() {<|>}\n+    fn bar() {$0}\n }\"#,\n         expect![[r#\"\"#]],\n     );\n@@ -137,7 +137,7 @@ impl Foo for u8 {\n         r#\"\n pub struct Foo;\n impl Foo {\n-    fn bar() {<|>}\n+    fn bar() {$0}\n }\"#,\n         expect![[r#\"\"#]],\n     );"}, {"sha": "bc9999ddc503b8155641bbfb303c9ef4c38b7ffe", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -861,7 +861,7 @@ mod tests {\n         fn foo(arg: &Foo) {}\n         fn main() {\n             let arg = Foo;\n-            foo(<|>)\n+            foo($0)\n         }\"#;\n \n         let (offset, text) = test_utils::extract_offset(fixture);"}, {"sha": "d6918c22d7d6ed27b4e89ca5192306a87484f317", "filename": "crates/ssr/src/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -59,7 +59,7 @@ fn parser_undefined_placeholder_in_replacement() {\n     );\n }\n \n-/// `code` may optionally contain a cursor marker `<|>`. If it doesn't, then the position will be\n+/// `code` may optionally contain a cursor marker `$0`. If it doesn't, then the position will be\n /// the start of the file. If there's a second cursor marker, then we'll return a single range.\n pub(crate) fn single_file(code: &str) -> (ide_db::RootDatabase, FilePosition, Vec<FileRange>) {\n     use ide_db::base_db::fixture::WithFixture;\n@@ -596,7 +596,7 @@ fn replace_function_call() {\n     // This test also makes sure that we ignore empty-ranges.\n     assert_ssr_transform(\n         \"foo() ==>> bar()\",\n-        \"fn foo() {<|><|>} fn bar() {} fn f1() {foo(); foo();}\",\n+        \"fn foo() {$0$0} fn bar() {} fn f1() {foo(); foo();}\",\n         expect![[\"fn foo() {} fn bar() {} fn f1() {bar(); bar();}\"]],\n     );\n }\n@@ -706,15 +706,15 @@ fn replace_associated_trait_constant() {\n \n #[test]\n fn replace_path_in_different_contexts() {\n-    // Note the <|> inside module a::b which marks the point where the rule is interpreted. We\n+    // Note the $0 inside module a::b which marks the point where the rule is interpreted. We\n     // replace foo with bar, but both need different path qualifiers in different contexts. In f4,\n     // foo is unqualified because of a use statement, however the replacement needs to be fully\n     // qualified.\n     assert_ssr_transform(\n         \"c::foo() ==>> c::bar()\",\n         r#\"\n             mod a {\n-                pub mod b {<|>\n+                pub mod b {$0\n                     pub mod c {\n                         pub fn foo() {}\n                         pub fn bar() {}\n@@ -1096,7 +1096,7 @@ fn pattern_is_a_single_segment_path() {\n         fn f1() -> i32 {\n             let foo = 1;\n             let bar = 2;\n-            foo<|>\n+            foo$0\n         }\n         \"#,\n         expect![[r#\"\n@@ -1128,7 +1128,7 @@ fn replace_local_variable_reference() {\n                 let foo = 5;\n                 res += foo + 1;\n                 let foo = 10;\n-                res += foo + 2;<|>\n+                res += foo + 2;$0\n                 res += foo + 3;\n                 let foo = 15;\n                 res += foo + 4;\n@@ -1160,9 +1160,9 @@ fn replace_path_within_selection() {\n             let foo = 41;\n             let bar = 42;\n             do_stuff(foo);\n-            do_stuff(foo);<|>\n+            do_stuff(foo);$0\n             do_stuff(foo);\n-            do_stuff(foo);<|>\n+            do_stuff(foo);$0\n             do_stuff(foo);\n         }\"#,\n         expect![[r#\"\n@@ -1185,9 +1185,9 @@ fn replace_nonpath_within_selection() {\n         \"$a + $b ==>> $b * $a\",\n         r#\"\n         fn main() {\n-            let v = 1 + 2;<|>\n+            let v = 1 + 2;$0\n             let v2 = 3 + 3;\n-            let v3 = 4 + 5;<|>\n+            let v3 = 4 + 5;$0\n             let v4 = 6 + 7;\n         }\"#,\n         expect![[r#\"\n@@ -1212,7 +1212,7 @@ fn replace_self() {\n         fn bar(_: &S1) {}\n         impl S1 {\n             fn f1(&self) {\n-                foo(self)<|>\n+                foo(self)$0\n             }\n             fn f2(&self) {\n                 foo(self)"}, {"sha": "22ab36cd2b05505a72d1bec937ebfabb0f267f6f", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -19,7 +19,7 @@ use crate::{\n \n /// Returns ancestors of the node at the offset, sorted by length. This should\n /// do the right thing at an edge, e.g. when searching for expressions at `{\n-/// <|>foo }` we will get the name reference instead of the whole block, which\n+/// $0foo }` we will get the name reference instead of the whole block, which\n /// we would get if we just did `find_token_at_offset(...).flat_map(|t|\n /// t.parent().ancestors())`.\n pub fn ancestors_at_offset("}, {"sha": "78eaf3410b4bbaf82fd534540d8022853f57c570", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -223,7 +223,7 @@ mod tests {\n         do_check(\n             r\"\n fn foo() {\n-    let x = foo + <|>bar<|>\n+    let x = foo + $0bar$0\n }\n \",\n             \"baz\",\n@@ -232,7 +232,7 @@ fn foo() {\n         do_check(\n             r\"\n fn foo() {\n-    let x = foo<|> + bar<|>\n+    let x = foo$0 + bar$0\n }\n \",\n             \"baz\",\n@@ -241,7 +241,7 @@ fn foo() {\n         do_check(\n             r\"\n struct Foo {\n-    f: foo<|><|>\n+    f: foo$0$0\n }\n \",\n             \",\\n    g: (),\",\n@@ -252,7 +252,7 @@ struct Foo {\n fn foo {\n     let;\n     1 + 1;\n-    <|>92<|>;\n+    $092$0;\n }\n \",\n             \"62\",\n@@ -261,7 +261,7 @@ fn foo {\n         do_check(\n             r\"\n mod foo {\n-    fn <|><|>\n+    fn $0$0\n }\n \",\n             \"bar\",\n@@ -271,7 +271,7 @@ mod foo {\n         do_check(\n             r\"\n trait Foo {\n-    type <|>Foo<|>;\n+    type $0Foo$0;\n }\n \",\n             \"Output\",\n@@ -280,33 +280,33 @@ trait Foo {\n         do_check(\n             r\"\n impl IntoIterator<Item=i32> for Foo {\n-    f<|><|>\n+    f$0$0\n }\n \",\n             \"n next(\",\n             9,\n         );\n-        do_check(r\"use a::b::{foo,<|>,bar<|>};\", \"baz\", 10);\n+        do_check(r\"use a::b::{foo,$0,bar$0};\", \"baz\", 10);\n         do_check(\n             r\"\n pub enum A {\n-    Foo<|><|>\n+    Foo$0$0\n }\n \",\n             \"\\nBar;\\n\",\n             11,\n         );\n         do_check(\n             r\"\n-foo!{a, b<|><|> d}\n+foo!{a, b$0$0 d}\n \",\n             \", c[3]\",\n             8,\n         );\n         do_check(\n             r\"\n fn foo() {\n-    vec![<|><|>]\n+    vec![$0$0]\n }\n \",\n             \"123\",\n@@ -315,7 +315,7 @@ fn foo() {\n         do_check(\n             r\"\n extern {\n-    fn<|>;<|>\n+    fn$0;$0\n }\n \",\n             \" exit(code: c_int)\",\n@@ -326,86 +326,86 @@ extern {\n     #[test]\n     fn reparse_token_tests() {\n         do_check(\n-            r\"<|><|>\n+            r\"$0$0\n fn foo() -> i32 { 1 }\n \",\n             \"\\n\\n\\n   \\n\",\n             1,\n         );\n         do_check(\n             r\"\n-fn foo() -> <|><|> {}\n+fn foo() -> $0$0 {}\n \",\n             \"  \\n\",\n             2,\n         );\n         do_check(\n             r\"\n-fn <|>foo<|>() -> i32 { 1 }\n+fn $0foo$0() -> i32 { 1 }\n \",\n             \"bar\",\n             3,\n         );\n         do_check(\n             r\"\n-fn foo<|><|>foo() {  }\n+fn foo$0$0foo() {  }\n \",\n             \"bar\",\n             6,\n         );\n         do_check(\n             r\"\n-fn foo /* <|><|> */ () {}\n+fn foo /* $0$0 */ () {}\n \",\n             \"some comment\",\n             6,\n         );\n         do_check(\n             r\"\n-fn baz <|><|> () {}\n+fn baz $0$0 () {}\n \",\n             \"    \\t\\t\\n\\n\",\n             2,\n         );\n         do_check(\n             r\"\n-fn baz <|><|> () {}\n+fn baz $0$0 () {}\n \",\n             \"    \\t\\t\\n\\n\",\n             2,\n         );\n         do_check(\n             r\"\n-/// foo <|><|>omment\n+/// foo $0$0omment\n mod { }\n \",\n             \"c\",\n             14,\n         );\n         do_check(\n             r#\"\n-fn -> &str { \"Hello<|><|>\" }\n+fn -> &str { \"Hello$0$0\" }\n \"#,\n             \", world\",\n             7,\n         );\n         do_check(\n             r#\"\n-fn -> &str { // \"Hello<|><|>\"\n+fn -> &str { // \"Hello$0$0\"\n \"#,\n             \", world\",\n             10,\n         );\n         do_check(\n             r##\"\n-fn -> &str { r#\"Hello<|><|>\"#\n+fn -> &str { r#\"Hello$0$0\"#\n \"##,\n             \", world\",\n             10,\n         );\n         do_check(\n             r\"\n-#[derive(<|>Copy<|>)]\n+#[derive($0Copy$0)]\n enum Foo {\n \n }\n@@ -417,20 +417,20 @@ enum Foo {\n \n     #[test]\n     fn reparse_str_token_with_error_unchanged() {\n-        do_check(r#\"\"<|>Unclosed<|> string literal\"#, \"Still unclosed\", 24);\n+        do_check(r#\"\"$0Unclosed$0 string literal\"#, \"Still unclosed\", 24);\n     }\n \n     #[test]\n     fn reparse_str_token_with_error_fixed() {\n-        do_check(r#\"\"unterinated<|><|>\"#, \"\\\"\", 12);\n+        do_check(r#\"\"unterinated$0$0\"#, \"\\\"\", 12);\n     }\n \n     #[test]\n     fn reparse_block_with_error_in_middle_unchanged() {\n         do_check(\n             r#\"fn main() {\n                 if {}\n-                32 + 4<|><|>\n+                32 + 4$0$0\n                 return\n                 if {}\n             }\"#,\n@@ -444,7 +444,7 @@ enum Foo {\n         do_check(\n             r#\"fn main() {\n                 if {}\n-                32 + 4<|><|>\n+                32 + 4$0$0\n                 return\n                 if {}\n             }\"#,"}, {"sha": "05d6e8c9ed3a3a13b4b90e11713a119fe674feee", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -3,7 +3,7 @@\n //! Most notable things are:\n //!\n //! * Rich text comparison, which outputs a diff.\n-//! * Extracting markup (mainly, `<|>` markers) out of fixture strings.\n+//! * Extracting markup (mainly, `$0` markers) out of fixture strings.\n //! * marks (see the eponymous module).\n \n #[macro_use]\n@@ -25,7 +25,7 @@ pub use rustc_hash::FxHashMap;\n \n pub use crate::fixture::Fixture;\n \n-pub const CURSOR_MARKER: &str = \"<|>\";\n+pub const CURSOR_MARKER: &str = \"$0\";\n \n /// Asserts that two strings are equal, otherwise displays a rich diff between them.\n ///\n@@ -62,7 +62,7 @@ pub fn extract_offset(text: &str) -> (TextSize, String) {\n     }\n }\n \n-/// Returns the offset of the first occurence of `<|>` marker and the copy of `text`\n+/// Returns the offset of the first occurence of `$0` marker and the copy of `text`\n /// without the marker.\n fn try_extract_offset(text: &str) -> Option<(TextSize, String)> {\n     let cursor_pos = text.find(CURSOR_MARKER)?;\n@@ -81,7 +81,7 @@ pub fn extract_range(text: &str) -> (TextRange, String) {\n     }\n }\n \n-/// Returns `TextRange` between the first two markers `<|>...<|>` and the copy\n+/// Returns `TextRange` between the first two markers `$0...$0` and the copy\n /// of `text` without both of these markers.\n fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n     let (start, text) = try_extract_offset(text)?;\n@@ -104,11 +104,11 @@ impl From<RangeOrOffset> for TextRange {\n     }\n }\n \n-/// Extracts `TextRange` or `TextSize` depending on the amount of `<|>` markers\n+/// Extracts `TextRange` or `TextSize` depending on the amount of `$0` markers\n /// found in `text`.\n ///\n /// # Panics\n-/// Panics if no `<|>` marker is present in the `text`.\n+/// Panics if no `$0` marker is present in the `text`.\n pub fn extract_range_or_offset(text: &str) -> (RangeOrOffset, String) {\n     if let Some((range, text)) = try_extract_range(text) {\n         return (RangeOrOffset::Range(range), text);\n@@ -164,12 +164,12 @@ fn test_extract_tags() {\n     assert_eq!(actual, vec![(\"fn main() {}\", Some(\"fn\".into())), (\"main\", None),]);\n }\n \n-/// Inserts `<|>` marker into the `text` at `offset`.\n+/// Inserts `$0` marker into the `text` at `offset`.\n pub fn add_cursor(text: &str, offset: TextSize) -> String {\n     let offset: usize = offset.into();\n     let mut res = String::new();\n     res.push_str(&text[..offset]);\n-    res.push_str(\"<|>\");\n+    res.push_str(\"$0\");\n     res.push_str(&text[offset..]);\n     res\n }"}, {"sha": "d91a9108e1acbbbb6a83087ad18d8f02979aa569", "filename": "docs/dev/style.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -111,7 +111,7 @@ When using multiline fixtures, use unindented raw string literals:\n             r#\"\n struct S { foo: i32}\n fn main() {\n-    let <|>foo = 92;\n+    let $0foo = 92;\n     S { foo }\n }\n \"#,"}, {"sha": "6e18a50a638164d1e8213f4eab10181b26132852", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7967ce85cfc5fc2b1996425b44f2a45d0841c8ff/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=7967ce85cfc5fc2b1996425b44f2a45d0841c8ff", "patch": "@@ -86,8 +86,8 @@ impl Assist {\n \n impl fmt::Display for Assist {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let before = self.before.replace(\"<|>\", \"\u2503\"); // Unicode pseudo-graphics bar\n-        let after = self.after.replace(\"<|>\", \"\u2503\");\n+        let before = self.before.replace(\"$0\", \"\u2503\"); // Unicode pseudo-graphics bar\n+        let after = self.after.replace(\"$0\", \"\u2503\");\n         writeln!(\n             f,\n             \"[discrete]\\n=== `{}`"}]}