{"sha": "fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiN2MwODg3NmU3YjI5YzFiOWQ1N2RmOTA1ZjNlZTBkZWVjNDZhYTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:12:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T21:49:04Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "2b7eb92a4d5a0d997871020964fe539390737dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b7eb92a4d5a0d997871020964fe539390737dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "comment_count": 15, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "html_url": "https://github.com/rust-lang/rust/commit/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbeef0edb2d25a3ff321d8e09532f053b5ef2c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbeef0edb2d25a3ff321d8e09532f053b5ef2c07", "html_url": "https://github.com/rust-lang/rust/commit/dbeef0edb2d25a3ff321d8e09532f053b5ef2c07"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "1a122572e434c4c7a05f3c906209735fcbdab964", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -285,7 +285,7 @@ tidy:\n \t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n \t\t$(Q)echo $(ALL_HS) \\\n \t\t| xargs -n 10 $(CFG_PYTHON) $(S)src/etc/tidy.py\n-\t\t$(Q)find $(S)src -type f -perm /a+x \\\n+\t\t$(Q)find $(S)src -type f -perm +a+x \\\n \t\t    -not -name '*.rs' -and -not -name '*.py' \\\n \t\t    -and -not -name '*.sh' \\\n \t\t| grep '^$(S)src/jemalloc' -v \\"}, {"sha": "893c9d250b7237cae7fa3aff45f0de81f3ce985e", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -33,36 +33,37 @@\n //!\n //! ```\n //! use std::sync::Arc;\n+//! use std::thread::Thread;\n //!\n //! let five = Arc::new(5i);\n //!\n //! for i in range(0u, 10) {\n //!     let five = five.clone();\n //!\n-//!     spawn(move || {\n+//!     Thread::spawn(move || {\n //!         println!(\"{}\", five);\n-//!     });\n+//!     }).detach();\n //! }\n //! ```\n //!\n //! Sharing mutable data safely between tasks with a `Mutex`:\n //!\n //! ```\n-//! use std::sync::Arc;\n-//! use std::sync::Mutex;\n+//! use std::sync::{Arc, Mutex};\n+//! use std::thread::Thread;\n //!\n //! let five = Arc::new(Mutex::new(5i));\n //!\n //! for _ in range(0u, 10) {\n //!     let five = five.clone();\n //!\n-//!     spawn(move || {\n+//!     Thread::spawn(move || {\n //!         let mut number = five.lock();\n //!\n-//!         number += 1;\n+//!         *number += 1;\n //!\n //!         println!(\"{}\", *number); // prints 6\n-//!     });\n+//!     }).detach();\n //! }\n //! ```\n "}, {"sha": "b82c7e4cba27b5ed0c44804637989b93933f0ef8", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -53,6 +53,7 @@ use core::cmp::max;\n use core::default::Default;\n use core::fmt;\n use core::hash::{mod, Hash};\n+use core::iter::repeat;\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n use core::num::{Int, UnsignedInt};"}, {"sha": "d793f49efe5e8cf640d608d99cdf4261015816d3", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -131,7 +131,7 @@ impl<'v> Visitor<'v> for Annotator {\n     }\n \n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n-        self.annotate(i.id, &i.attrs, |_| {});\n+        self.annotate(i.id, true, &i.attrs, |_| {});\n     }\n }\n "}, {"sha": "85a06125e23ab6665cbaca06229437e0005f092c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -535,6 +535,8 @@ pub fn parameterized<'tcx>(cx: &ctxt<'tcx>,\n                 base,\n                 if strs[0].starts_with(\"(\") && strs[0].ends_with(\",)\") {\n                     strs[0][1 .. strs[0].len() - 2] // Remove '(' and ',)'\n+                } else if strs[0].starts_with(\"(\") && strs[0].ends_with(\")\") {\n+                    strs[0][1 .. strs[0].len() - 1] // Remove '(' and ')'\n                 } else {\n                     strs[0][]\n                 },"}, {"sha": "8149864afd405e4ac79783805b48aa231f55350e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -1473,7 +1473,6 @@ mod test_map {\n \n     use super::HashMap;\n     use super::Entry::{Occupied, Vacant};\n-    use cmp::Equiv;\n     use hash;\n     use iter::{range_inclusive, range_step_inclusive};\n     use cell::RefCell;"}, {"sha": "c3cdf4acba15080d24f77fb04c6c943b7cfa6282", "filename": "src/snapshots.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -3,7 +3,7 @@ S 2014-12-20 8443b09\n   linux-i386 3daf531aed03f5769402f2fef852377e2838db98\n   linux-x86_64 4f3c8b092dd4fe159d6f25a217cf62e0e899b365\n   macos-i386 2a3e647b9c400505bd49cfe56091e866c83574ca\n-  macos-x86_64 78f952a3e77a9921a23c957bb133131017b57324\n+  macos-x86_64 5e730efc34d79a33f464a87686c10eace0760a2e\n   winnt-i386 8ea056043de82096d5ce5abc98c8c74ebac7e77d\n   winnt-x86_64 9804100dafae9b64a76e0ea7e1be157719dae151\n "}, {"sha": "5c72c7388a9ee2d34f187885a87f97f8149fe462", "filename": "src/test/compile-fail/issue-13359.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -14,8 +14,8 @@ fn bar(_s: u32) { }\n \n fn main() {\n     foo(1*(1 as int));\n-    //~^ ERROR: mismatched types: expected `i16`, found `int` (expected `i16`, found `int`)\n+    //~^ ERROR: mismatched types: expected `i16`, found `int` (expected i16, found int)\n \n     bar(1*(1 as uint));\n-    //~^ ERROR: mismatched types: expected `u32`, found `uint` (expected `u32`, found `uint`)\n+    //~^ ERROR: mismatched types: expected `u32`, found `uint` (expected u32, found uint)\n }"}, {"sha": "d653843ba059044b5bc10f09b2d702cef2e6cc48", "filename": "src/test/run-pass/issue-20091.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7c08876e7b29c1b9d57df905f3ee0deec46aa1/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20091.rs?ref=fb7c08876e7b29c1b9d57df905f3ee0deec46aa1", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-windows currently windows requires UTF-8 for spawning processes\n+\n use std::io::Command;\n use std::os;\n "}]}