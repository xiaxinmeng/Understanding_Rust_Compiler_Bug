{"sha": "90c48bed25751f4c171b1555f8114234ca0a81c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYzQ4YmVkMjU3NTFmNGMxNzFiMTU1NWY4MTE0MjM0Y2EwYTgxYzQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-09-11T18:07:12Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-09-13T21:42:40Z"}, "message": "Centralise the handling of attributes on extern functions", "tree": {"sha": "773054606e8a177f80e88bf36fbd26feb8e60675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773054606e8a177f80e88bf36fbd26feb8e60675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90c48bed25751f4c171b1555f8114234ca0a81c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90c48bed25751f4c171b1555f8114234ca0a81c4", "html_url": "https://github.com/rust-lang/rust/commit/90c48bed25751f4c171b1555f8114234ca0a81c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90c48bed25751f4c171b1555f8114234ca0a81c4/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd230ff12481ebeba720fb1ac1f610d93bb74920", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd230ff12481ebeba720fb1ac1f610d93bb74920", "html_url": "https://github.com/rust-lang/rust/commit/fd230ff12481ebeba720fb1ac1f610d93bb74920"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "1359252e0351af2e486941e0fac440a75e53fa07", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90c48bed25751f4c171b1555f8114234ca0a81c4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c48bed25751f4c171b1555f8114234ca0a81c4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=90c48bed25751f4c171b1555f8114234ca0a81c4", "patch": "@@ -677,11 +677,8 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     ccx.sess().bug(\"unexpected intrinsic in trans_external_path\")\n                 }\n                 _ => {\n-                    let llfn = foreign::register_foreign_item_fn(ccx, fn_ty.abi,\n-                                                                 t, &name);\n                     let attrs = csearch::get_item_attrs(&ccx.sess().cstore, did);\n-                    attributes::from_fn_attrs(ccx, &attrs, llfn);\n-                    llfn\n+                    foreign::register_foreign_item_fn(ccx, fn_ty.abi, t, &name, &attrs)\n                 }\n             }\n         }\n@@ -2418,9 +2415,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     let abi = ccx.tcx().map.get_foreign_abi(id);\n                     let ty = ccx.tcx().node_id_to_type(ni.id);\n                     let name = foreign::link_name(&*ni);\n-                    let llfn = foreign::register_foreign_item_fn(ccx, abi, ty, &name);\n-                    attributes::from_fn_attrs(ccx, &ni.attrs, llfn);\n-                    llfn\n+                    foreign::register_foreign_item_fn(ccx, abi, ty, &name, &ni.attrs)\n                 }\n                 hir::ForeignItemStatic(..) => {\n                     foreign::register_static(ccx, &*ni)"}, {"sha": "9a561249594929d0c9d96149c0abc427b22e0a3c", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90c48bed25751f4c171b1555f8114234ca0a81c4/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c48bed25751f4c171b1555f8114234ca0a81c4/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=90c48bed25751f4c171b1555f8114234ca0a81c4", "patch": "@@ -187,7 +187,8 @@ pub fn get_extern_fn(ccx: &CrateContext,\n /// Registers a foreign function found in a library. Just adds a LLVM global.\n pub fn register_foreign_item_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                           abi: Abi, fty: Ty<'tcx>,\n-                                          name: &str) -> ValueRef {\n+                                          name: &str,\n+                                          attrs: &[hir::Attribute])-> ValueRef {\n     debug!(\"register_foreign_item_fn(abi={:?}, \\\n             ty={:?}, \\\n             name={})\",\n@@ -211,6 +212,7 @@ pub fn register_foreign_item_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     let llfn = get_extern_fn(ccx, &mut *ccx.externs().borrow_mut(), name, cc, llfn_ty, fty);\n     add_argument_attributes(&tys, llfn);\n+    attributes::from_fn_attrs(ccx, attrs, llfn);\n     llfn\n }\n \n@@ -489,8 +491,7 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &hir::ForeignMod) {\n                                                      \"foreign fn's sty isn't a bare_fn_ty?\")\n                     }\n \n-                    let llfn = register_foreign_item_fn(ccx, abi, ty, &lname);\n-                    attributes::from_fn_attrs(ccx, &foreign_item.attrs, llfn);\n+                    register_foreign_item_fn(ccx, abi, ty, &lname, &foreign_item.attrs);\n                     // Unlike for other items, we shouldn't call\n                     // `base::update_linkage` here.  Foreign items have\n                     // special linkage requirements, which are handled"}]}