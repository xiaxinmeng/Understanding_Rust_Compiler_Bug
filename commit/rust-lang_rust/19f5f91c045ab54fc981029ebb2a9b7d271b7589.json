{"sha": "19f5f91c045ab54fc981029ebb2a9b7d271b7589", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZjVmOTFjMDQ1YWI1NGZjOTgxMDI5ZWJiMmE5YjdkMjcxYjc1ODk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-27T02:03:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-27T19:08:19Z"}, "message": "rustdoc: Make fold require Clone instead of Copy", "tree": {"sha": "1b21ed0879baf333343b6f873398eb1ba93ac4d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b21ed0879baf333343b6f873398eb1ba93ac4d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19f5f91c045ab54fc981029ebb2a9b7d271b7589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19f5f91c045ab54fc981029ebb2a9b7d271b7589", "html_url": "https://github.com/rust-lang/rust/commit/19f5f91c045ab54fc981029ebb2a9b7d271b7589", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19f5f91c045ab54fc981029ebb2a9b7d271b7589/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21e9d52de543d0beb30a1043aa40a9015453d6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21e9d52de543d0beb30a1043aa40a9015453d6f", "html_url": "https://github.com/rust-lang/rust/commit/b21e9d52de543d0beb30a1043aa40a9015453d6f"}], "stats": {"total": 151, "additions": 110, "deletions": 41}, "files": [{"sha": "3e1c26f9f8e1537294f2cb2a865516e7bde863e3", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -39,6 +39,10 @@ pub enum Srv = {\n     ch: comm::Chan<Msg>\n };\n \n+impl Srv: Clone {\n+    fn clone(&self) -> Srv { copy *self }\n+}\n+\n pub fn from_str<T>(source: ~str, owner: SrvOwner<T>) -> T {\n     run(owner, source, parse::from_str_sess)\n }"}, {"sha": "0d2440d384fa2272d371787501de53b0fe31d939", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -61,6 +61,10 @@ pub type Config = {\n     pandoc_cmd: Option<~str>\n };\n \n+impl Config: Clone {\n+    fn clone(&self) -> Config { copy *self }\n+}\n+\n fn opt_output_dir() -> ~str { ~\"output-dir\" }\n fn opt_output_format() -> ~str { ~\"output-format\" }\n fn opt_output_style() -> ~str { ~\"output-style\" }"}, {"sha": "787d83306b575f4220c745bb7de58ab73af145ce", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -1,5 +1,25 @@\n pub enum Fold<T> = Fold_<T>;\n \n+impl<T: Clone> Fold<T>: Clone {\n+    fn clone(&self) -> Fold<T> {\n+        Fold({\n+            ctxt: self.ctxt.clone(),\n+            fold_doc: copy self.fold_doc,\n+            fold_crate: copy self.fold_crate,\n+            fold_item: copy self.fold_item,\n+            fold_mod: copy self.fold_mod,\n+            fold_nmod: copy self.fold_nmod,\n+            fold_fn: copy self.fold_fn,\n+            fold_const: copy self.fold_const,\n+            fold_enum: copy self.fold_enum,\n+            fold_trait: copy self.fold_trait,\n+            fold_impl: copy self.fold_impl,\n+            fold_type: copy self.fold_type,\n+            fold_struct: copy self.fold_struct\n+        })\n+    }\n+}\n+\n type FoldDoc<T> = fn~(fold: &Fold<T>, +doc: doc::Doc) -> doc::Doc;\n type FoldCrate<T> = fn~(fold: &Fold<T>, +doc: doc::CrateDoc) -> doc::CrateDoc;\n type FoldItem<T> = fn~(fold: &Fold<T>, +doc: doc::ItemDoc) -> doc::ItemDoc;\n@@ -33,7 +53,7 @@ type Fold_<T> = {\n \n // This exists because fn types don't infer correctly as record\n // initializers, but they do as function arguments\n-fn mk_fold<T:Copy>(\n+fn mk_fold<T:Clone>(\n     +ctxt: T,\n     +fold_doc: FoldDoc<T>,\n     +fold_crate: FoldCrate<T>,\n@@ -49,7 +69,7 @@ fn mk_fold<T:Copy>(\n     +fold_struct: FoldStruct<T>\n ) -> Fold<T> {\n     Fold({\n-        ctxt: ctxt,\n+        ctxt: move ctxt,\n         fold_doc: move fold_doc,\n         fold_crate: move fold_crate,\n         fold_item: move fold_item,\n@@ -65,9 +85,9 @@ fn mk_fold<T:Copy>(\n     })\n }\n \n-pub fn default_any_fold<T:Send Copy>(+ctxt: T) -> Fold<T> {\n+pub fn default_any_fold<T:Send Clone>(+ctxt: T) -> Fold<T> {\n     mk_fold(\n-        ctxt,\n+        move ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n         |f, d| default_seq_fold_crate(f, d),\n         |f, d| default_seq_fold_item(f, d),\n@@ -83,9 +103,9 @@ pub fn default_any_fold<T:Send Copy>(+ctxt: T) -> Fold<T> {\n     )\n }\n \n-pub fn default_seq_fold<T:Copy>(+ctxt: T) -> Fold<T> {\n+pub fn default_seq_fold<T:Clone>(+ctxt: T) -> Fold<T> {\n     mk_fold(\n-        ctxt,\n+        move ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n         |f, d| default_seq_fold_crate(f, d),\n         |f, d| default_seq_fold_item(f, d),\n@@ -101,9 +121,9 @@ pub fn default_seq_fold<T:Copy>(+ctxt: T) -> Fold<T> {\n     )\n }\n \n-pub fn default_par_fold<T:Send Copy>(+ctxt: T) -> Fold<T> {\n+pub fn default_par_fold<T:Send Clone>(+ctxt: T) -> Fold<T> {\n     mk_fold(\n-        ctxt,\n+        move ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n         |f, d| default_seq_fold_crate(f, d),\n         |f, d| default_seq_fold_item(f, d),\n@@ -151,11 +171,11 @@ pub fn default_seq_fold_item<T>(\n     doc\n }\n \n-pub fn default_any_fold_mod<T:Send Copy>(\n+pub fn default_any_fold_mod<T:Send Clone>(\n     fold: &Fold<T>,\n     +doc: doc::ModDoc\n ) -> doc::ModDoc {\n-    let fold_copy = copy *fold;\n+    let fold_copy = fold.clone();\n     doc::ModDoc_({\n         item: fold.fold_item(fold, doc.item),\n         items: par::map(doc.items, |ItemTag, move fold_copy| {\n@@ -178,11 +198,11 @@ pub fn default_seq_fold_mod<T>(\n     })\n }\n \n-pub fn default_par_fold_mod<T:Send Copy>(\n+pub fn default_par_fold_mod<T:Send Clone>(\n     fold: &Fold<T>,\n     +doc: doc::ModDoc\n ) -> doc::ModDoc {\n-    let fold_copy = copy *fold;\n+    let fold_copy = fold.clone();\n     doc::ModDoc_({\n         item: fold.fold_item(fold, doc.item),\n         items: par::map(doc.items, |ItemTag, move fold_copy| {\n@@ -192,11 +212,11 @@ pub fn default_par_fold_mod<T:Send Copy>(\n     })\n }\n \n-pub fn default_any_fold_nmod<T:Send Copy>(\n+pub fn default_any_fold_nmod<T:Send Clone>(\n     fold: &Fold<T>,\n     +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n-    let fold_copy = copy *fold;\n+    let fold_copy = fold.clone();\n     {\n         item: fold.fold_item(fold, doc.item),\n         fns: par::map(doc.fns, |FnDoc, move fold_copy| {\n@@ -219,11 +239,11 @@ pub fn default_seq_fold_nmod<T>(\n     }\n }\n \n-pub fn default_par_fold_nmod<T:Send Copy>(\n+pub fn default_par_fold_nmod<T:Send Clone>(\n     fold: &Fold<T>,\n     +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n-    let fold_copy = copy *fold;\n+    let fold_copy = fold.clone();\n     {\n         item: fold.fold_item(fold, doc.item),\n         fns: par::map(doc.fns, |FnDoc, move fold_copy| {"}, {"sha": "05fd54fe7ea19b2dc07f9244dff400e8aae0cf84", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -7,6 +7,7 @@ individual modules, pages for the crate, indexes, etc.\n \n use doc::{ItemUtils, PageUtils};\n use syntax::ast;\n+use util::NominalOp;\n \n pub fn mk_pass(output_style: config::OutputStyle) -> Pass {\n     {\n@@ -39,6 +40,8 @@ fn run(\n type PagePort = comm::Port<Option<doc::Page>>;\n type PageChan = comm::Chan<Option<doc::Page>>;\n \n+type NominalPageChan = NominalOp<PageChan>;\n+\n fn make_doc_from_pages(page_port: PagePort) -> doc::Doc {\n     let mut pages = ~[];\n     loop {\n@@ -59,15 +62,15 @@ fn find_pages(doc: doc::Doc, page_chan: PageChan) {\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n-        .. *fold::default_any_fold(page_chan)\n+        .. *fold::default_any_fold(NominalOp { op: page_chan })\n     });\n     fold.fold_doc(&fold, doc);\n \n     comm::send(page_chan, None);\n }\n \n fn fold_crate(\n-    fold: &fold::Fold<PageChan>,\n+    fold: &fold::Fold<NominalPageChan>,\n     +doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n \n@@ -78,13 +81,13 @@ fn fold_crate(\n         .. doc\n     });\n \n-    comm::send(fold.ctxt, Some(page));\n+    comm::send(fold.ctxt.op, Some(page));\n \n     doc\n }\n \n fn fold_mod(\n-    fold: &fold::Fold<PageChan>,\n+    fold: &fold::Fold<NominalPageChan>,\n     +doc: doc::ModDoc\n ) -> doc::ModDoc {\n \n@@ -94,7 +97,7 @@ fn fold_mod(\n \n         let doc = strip_mod(doc);\n         let page = doc::ItemPage(doc::ModTag(doc));\n-        comm::send(fold.ctxt, Some(page));\n+        comm::send(fold.ctxt.op, Some(page));\n     }\n \n     doc\n@@ -114,12 +117,12 @@ fn strip_mod(doc: doc::ModDoc) -> doc::ModDoc {\n }\n \n fn fold_nmod(\n-    fold: &fold::Fold<PageChan>,\n+    fold: &fold::Fold<NominalPageChan>,\n     +doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n     let doc = fold::default_seq_fold_nmod(fold, doc);\n     let page = doc::ItemPage(doc::NmodTag(doc));\n-    comm::send(fold.ctxt, Some(page));\n+    comm::send(fold.ctxt.op, Some(page));\n     return doc;\n }\n "}, {"sha": "34592a3669c2995ed790735b436ad4e88e7ee805", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -10,14 +10,18 @@ pub fn mk_pass() -> Pass {\n     }\n }\n \n-type Ctxt = {\n+struct Ctxt {\n     srv: astsrv::Srv,\n     mut path: ~[~str]\n-};\n+}\n+\n+impl Ctxt: Clone {\n+    fn clone(&self) -> Ctxt { copy *self }\n+}\n \n #[allow(non_implicitly_copyable_typarams)]\n fn run(srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n-    let ctxt = {\n+    let ctxt = Ctxt {\n         srv: srv,\n         mut path: ~[]\n     };"}, {"sha": "ebaca058fe0142b01a6e9734b2f6e2b10df93d38", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -44,7 +44,7 @@ fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n             ast_map::node_item(item, _) => {\n                 item.vis == ast::public\n             }\n-            _ => util::unreachable()\n+            _ => core::util::unreachable()\n         }\n     }\n }"}, {"sha": "4dd1e6b8cb6c6bcfb5d4aed1b0bb1321a72a499f", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -52,3 +52,4 @@ mod page_pass;\n mod sectionalize_pass;\n mod escape_pass;\n mod prune_private_pass;\n+mod util;\n\\ No newline at end of file"}, {"sha": "485014a383336cb5ab3fcc10cdc362078d1f203d", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -2,14 +2,17 @@\n \n use doc::ItemUtils;\n use std::sort;\n+use util::NominalOp;\n \n-pub type ItemLtEq = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n+pub type ItemLtEqOp = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n \n-pub fn mk_pass(name: ~str, +lteq: ItemLtEq) -> Pass {\n+type ItemLtEq = NominalOp<ItemLtEqOp>;\n+\n+pub fn mk_pass(name: ~str, +lteq: ItemLtEqOp) -> Pass {\n     {\n         name: name,\n         f: fn~(move lteq, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n-            run(srv, doc, copy lteq)\n+            run(srv, doc, NominalOp { op: copy lteq })\n         }\n     }\n }\n@@ -34,7 +37,7 @@ fn fold_mod(\n ) -> doc::ModDoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n     doc::ModDoc_({\n-        items: sort::merge_sort(doc.items, fold.ctxt),\n+        items: sort::merge_sort(doc.items, fold.ctxt.op),\n         .. *doc\n     })\n }"}, {"sha": "80104271f109828cf233593bb584da1474817e49", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -1,6 +1,7 @@\n //! Generic pass for performing an operation on all descriptions\n \n use doc::ItemUtils;\n+use util::NominalOp;\n \n pub fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n     {\n@@ -19,6 +20,9 @@ fn run(\n     +doc: doc::Doc,\n     +op: Op\n ) -> doc::Doc {\n+    let op = NominalOp {\n+        op: move op\n+    };\n     let fold = fold::Fold({\n         fold_item: fold_item,\n         fold_enum: fold_enum,\n@@ -29,11 +33,14 @@ fn run(\n     fold.fold_doc(&fold, doc)\n }\n \n-fn maybe_apply_op(op: Op, s: Option<~str>) -> Option<~str> {\n-    s.map(|s| op(*s) )\n+fn maybe_apply_op(op: NominalOp<Op>, s: Option<~str>) -> Option<~str> {\n+    s.map(|s| op.op(*s) )\n }\n \n-fn fold_item(fold: &fold::Fold<Op>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n+fn fold_item(\n+    fold: &fold::Fold<NominalOp<Op>>,\n+    +doc: doc::ItemDoc\n+) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n     {\n@@ -44,14 +51,19 @@ fn fold_item(fold: &fold::Fold<Op>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     }\n }\n \n-fn apply_to_sections(op: Op, sections: ~[doc::Section]) -> ~[doc::Section] {\n+fn apply_to_sections(\n+    op: NominalOp<Op>,\n+    sections: ~[doc::Section]\n+) -> ~[doc::Section] {\n     par::map(sections, |section, copy op| {\n-        header: op(section.header),\n-        body: op(section.body)\n+        header: op.op(section.header),\n+        body: op.op(section.body)\n     })\n }\n \n-fn fold_enum(fold: &fold::Fold<Op>, +doc: doc::EnumDoc) -> doc::EnumDoc {\n+fn fold_enum(\n+    fold: &fold::Fold<NominalOp<Op>>,\n+    +doc: doc::EnumDoc) -> doc::EnumDoc {\n     let doc = fold::default_seq_fold_enum(fold, doc);\n     let fold_copy = copy *fold;\n \n@@ -66,7 +78,10 @@ fn fold_enum(fold: &fold::Fold<Op>, +doc: doc::EnumDoc) -> doc::EnumDoc {\n     }\n }\n \n-fn fold_trait(fold: &fold::Fold<Op>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n+fn fold_trait(\n+    fold: &fold::Fold<NominalOp<Op>>,\n+    +doc: doc::TraitDoc\n+) -> doc::TraitDoc {\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     {\n@@ -75,7 +90,10 @@ fn fold_trait(fold: &fold::Fold<Op>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n     }\n }\n \n-fn apply_to_methods(op: Op, docs: ~[doc::MethodDoc]) -> ~[doc::MethodDoc] {\n+fn apply_to_methods(\n+    op: NominalOp<Op>,\n+    docs: ~[doc::MethodDoc]\n+) -> ~[doc::MethodDoc] {\n     do par::map(docs) |doc, copy op| {\n         {\n             brief: maybe_apply_op(op, doc.brief),\n@@ -86,7 +104,10 @@ fn apply_to_methods(op: Op, docs: ~[doc::MethodDoc]) -> ~[doc::MethodDoc] {\n     }\n }\n \n-fn fold_impl(fold: &fold::Fold<Op>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n+fn fold_impl(\n+    fold: &fold::Fold<NominalOp<Op>>,\n+    +doc: doc::ImplDoc\n+) -> doc::ImplDoc {\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     {"}, {"sha": "7b07ef682671ee0d37417def1503678eff01320c", "filename": "src/librustdoc/util.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f5f91c045ab54fc981029ebb2a9b7d271b7589/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=19f5f91c045ab54fc981029ebb2a9b7d271b7589", "patch": "@@ -0,0 +1,9 @@\n+// Just a named container for our op, so it can have impls\n+pub struct NominalOp<T> {\n+    op: T\n+}\n+\n+impl<T: Copy> NominalOp<T>: Clone {\n+    fn clone(&self) -> NominalOp<T> { copy *self }\n+}\n+"}]}