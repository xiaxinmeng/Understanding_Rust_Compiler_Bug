{"sha": "654313dbc7fdfc839b79592c5a06dfe8597d55b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDMxM2RiYzdmZGZjODM5Yjc5NTkyYzVhMDZkZmU4NTk3ZDU1YjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-09T20:57:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T20:57:04Z"}, "message": "Merge #6822\n\n6822: Read version of rustc that compiled proc macro r=edwin0cheng a=jsomedon\n\nSigned-off-by: Jay Somedon <jay.somedon@outlook.com>\r\n\r\nThis PR is to fix #6174.\r\n\r\nI basically\r\n* added two methods, `read_version` and `read_section`(used by `read_version`)\r\n* two new crates `snap` and `object` to be used by those two methods\r\n\r\nI just noticed that some part of code were auto-reformatted by rust-analyzer on file save. Does it matter?\n\nCo-authored-by: Jay Somedon <jay.somedon@outlook.com>\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "064328d3e2417144ad3de1e4f67b9f82172ccd05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064328d3e2417144ad3de1e4f67b9f82172ccd05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654313dbc7fdfc839b79592c5a06dfe8597d55b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR+EgCRBK7hj4Ov3rIwAAdHIIAFUbJT75ulTCHHaGGvnpifKQ\nHESAzUnt/y9Ab+kAWwCer6RvsfnziUzMMrejK0siokNEXR7HPVfHHfNvbyfa/b7Z\ncxuuy5OY9hlc6Gt0I40ebFy8DDe2O8DHZ0fbVYW60DT2kj1Ooxi0IFk/l0Cb6a1z\nilxHx/bLgqYfYwm/QrYhwIBOhdlO9BBdFtQuMnqiTtASHEn7pdOPMLPVJeZAC1gZ\nu8ub3BrNCCnlE2oa6Asr0o29AP5n/RwgDQwLsUQ9Z3zOdPkHO00KUF0kMNvucoFD\nOTUZDFyc1uODg/K6f6Rhhu3QvgywNOVzjVMOpUSczh/0UvARPg9cRGHdlfqpLg0=\n=OpSu\n-----END PGP SIGNATURE-----\n", "payload": "tree 064328d3e2417144ad3de1e4f67b9f82172ccd05\nparent 4bb120c7a6abed6425534876b86d214440ba1d9a\nparent ad34e79bb9818cc9bf3d0cf746bd052a67c7bab9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615323424 +0000\ncommitter GitHub <noreply@github.com> 1615323424 +0000\n\nMerge #6822\n\n6822: Read version of rustc that compiled proc macro r=edwin0cheng a=jsomedon\n\nSigned-off-by: Jay Somedon <jay.somedon@outlook.com>\r\n\r\nThis PR is to fix #6174.\r\n\r\nI basically\r\n* added two methods, `read_version` and `read_section`(used by `read_version`)\r\n* two new crates `snap` and `object` to be used by those two methods\r\n\r\nI just noticed that some part of code were auto-reformatted by rust-analyzer on file save. Does it matter?\n\nCo-authored-by: Jay Somedon <jay.somedon@outlook.com>\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654313dbc7fdfc839b79592c5a06dfe8597d55b3", "html_url": "https://github.com/rust-lang/rust/commit/654313dbc7fdfc839b79592c5a06dfe8597d55b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654313dbc7fdfc839b79592c5a06dfe8597d55b3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb120c7a6abed6425534876b86d214440ba1d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb120c7a6abed6425534876b86d214440ba1d9a", "html_url": "https://github.com/rust-lang/rust/commit/4bb120c7a6abed6425534876b86d214440ba1d9a"}, {"sha": "ad34e79bb9818cc9bf3d0cf746bd052a67c7bab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad34e79bb9818cc9bf3d0cf746bd052a67c7bab9", "html_url": "https://github.com/rust-lang/rust/commit/ad34e79bb9818cc9bf3d0cf746bd052a67c7bab9"}], "stats": {"total": 176, "additions": 173, "deletions": 3}, "files": [{"sha": "87cf1bf27f1e85e667eaff8dccf02cdeb78411f7", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/654313dbc7fdfc839b79592c5a06dfe8597d55b3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/654313dbc7fdfc839b79592c5a06dfe8597d55b3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=654313dbc7fdfc839b79592c5a06dfe8597d55b3", "patch": "@@ -896,6 +896,16 @@ version = \"2.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0ee1c47aaa256ecabcaea351eae4a9b01ef39ed810004e298d2511ed284b1525\"\n \n+[[package]]\n+name = \"memmap\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6585fd95e7bb50d6cc31e20d4cf9afb4e2ba16c5846fc76793f11218da9c475b\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"memmap2\"\n version = \"0.2.1\"\n@@ -1159,8 +1169,11 @@ dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"log\",\n+ \"memmap\",\n+ \"object\",\n  \"serde\",\n  \"serde_json\",\n+ \"snap\",\n  \"stdx\",\n  \"tt\",\n ]\n@@ -1545,6 +1558,12 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"snap\"\n+version = \"1.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"dc725476a1398f0480d56cd0ad381f6f32acf2642704456f8f59a35df464b59a\"\n+\n [[package]]\n name = \"socket2\"\n version = \"0.3.19\""}, {"sha": "16fd56c7ecc757e7995798f5a49b72f29a7ebf36", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/654313dbc7fdfc839b79592c5a06dfe8597d55b3/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/654313dbc7fdfc839b79592c5a06dfe8597d55b3/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=654313dbc7fdfc839b79592c5a06dfe8597d55b3", "patch": "@@ -19,3 +19,6 @@ jod-thread = \"0.1.1\"\n tt = { path = \"../tt\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+snap = \"1\"\n+object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"elf\", \"macho\", \"pe\", \"unaligned\"] }\n+memmap = \"0.7.0\""}, {"sha": "941d0fe9e21c65f5a957b34e75872cf0839b7b1d", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/654313dbc7fdfc839b79592c5a06dfe8597d55b3/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654313dbc7fdfc839b79592c5a06dfe8597d55b3/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=654313dbc7fdfc839b79592c5a06dfe8597d55b3", "patch": "@@ -5,18 +5,19 @@\n //! is used to provide basic infrastructure for communication between two\n //! processes: Client (RA itself), Server (the external program)\n \n-mod rpc;\n-mod process;\n pub mod msg;\n+mod process;\n+mod rpc;\n+mod version;\n \n+use base_db::{Env, ProcMacro};\n use std::{\n     ffi::OsStr,\n     io,\n     path::{Path, PathBuf},\n     sync::Arc,\n };\n \n-use base_db::{Env, ProcMacro};\n use tt::{SmolStr, Subtree};\n \n use crate::process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n@@ -75,6 +76,21 @@ impl ProcMacroClient {\n     }\n \n     pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n+        match version::read_info(dylib_path) {\n+            Ok(info) => {\n+                if info.version.0 < 1 || info.version.1 < 47 {\n+                    eprintln!(\"proc-macro {} built by {:#?} is not supported by Rust Analyzer, please update your rust version.\", dylib_path.to_string_lossy(), info);\n+                }\n+            }\n+            Err(err) => {\n+                eprintln!(\n+                    \"proc-macro {} failed to find the given version. Reason: {}\",\n+                    dylib_path.to_string_lossy(),\n+                    err\n+                );\n+            }\n+        }\n+\n         let macros = match self.process.find_proc_macros(dylib_path) {\n             Err(err) => {\n                 eprintln!(\"Failed to find proc macros. Error: {:#?}\", err);"}, {"sha": "11a7fb59a3b70b79a890f3292009478d545c6086", "filename": "crates/proc_macro_api/src/version.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/654313dbc7fdfc839b79592c5a06dfe8597d55b3/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654313dbc7fdfc839b79592c5a06dfe8597d55b3/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs?ref=654313dbc7fdfc839b79592c5a06dfe8597d55b3", "patch": "@@ -0,0 +1,132 @@\n+//! Reading proc-macro rustc version information from binary data\n+\n+use std::{\n+    fs::File,\n+    io::{self, Read},\n+    path::Path,\n+};\n+\n+use memmap::Mmap;\n+use object::read::{File as BinaryFile, Object, ObjectSection};\n+use snap::read::FrameDecoder as SnapDecoder;\n+\n+#[derive(Debug)]\n+pub(crate) struct RustCInfo {\n+    pub(crate) version: (usize, usize, usize),\n+    pub(crate) channel: String,\n+    pub(crate) commit: String,\n+    pub(crate) date: String,\n+}\n+\n+pub(crate) fn read_info(dylib_path: &Path) -> io::Result<RustCInfo> {\n+    macro_rules! err {\n+        ($e:literal) => {\n+            io::Error::new(io::ErrorKind::InvalidData, $e)\n+        };\n+    }\n+\n+    let ver_str = read_version(dylib_path)?;\n+    let mut items = ver_str.split_whitespace();\n+    let tag = items.next().ok_or(err!(\"version format error\"))?;\n+    if tag != \"rustc\" {\n+        return Err(err!(\"version format error (No rustc tag)\"));\n+    }\n+\n+    let version_part = items.next().ok_or(err!(\"no version string\"))?;\n+    let mut version_parts = version_part.split(\"-\");\n+    let version = version_parts.next().ok_or(err!(\"no version\"))?;\n+    let channel = version_parts.next().unwrap_or_default().to_string();\n+\n+    let commit = items.next().ok_or(err!(\"no commit info\"))?;\n+    // remove (\n+    if commit.len() == 0 {\n+        return Err(err!(\"commit format error\"));\n+    }\n+    let commit = commit[1..].to_string();\n+    let date = items.next().ok_or(err!(\"no date info\"))?;\n+    // remove )\n+    if date.len() == 0 {\n+        return Err(err!(\"date format error\"));\n+    }\n+    let date = date[0..date.len() - 2].to_string();\n+\n+    let version_numbers = version\n+        .split(\".\")\n+        .map(|it| it.parse::<usize>())\n+        .collect::<Result<Vec<_>, _>>()\n+        .map_err(|_| err!(\"version number error\"))?;\n+\n+    if version_numbers.len() != 3 {\n+        return Err(err!(\"version number format error\"));\n+    }\n+    let version = (version_numbers[0], version_numbers[1], version_numbers[2]);\n+\n+    Ok(RustCInfo { version, channel, commit, date })\n+}\n+\n+/// This is used inside read_version() to locate the \".rustc\" section\n+/// from a proc macro crate's binary file.\n+fn read_section<'a>(dylib_binary: &'a [u8], section_name: &str) -> io::Result<&'a [u8]> {\n+    BinaryFile::parse(dylib_binary)\n+        .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))?\n+        .section_by_name(section_name)\n+        .ok_or_else(|| io::Error::new(io::ErrorKind::InvalidData, \"section read error\"))?\n+        .data()\n+        .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))\n+}\n+\n+/// Check the version of rustc that was used to compile a proc macro crate's\n+///\n+/// binary file.\n+/// A proc macro crate binary's \".rustc\" section has following byte layout:\n+/// * [b'r',b'u',b's',b't',0,0,0,5] is the first 8 bytes\n+/// * ff060000 734e6150 is followed, it's the snappy format magic bytes,\n+///   means bytes from here(including this sequence) are compressed in\n+///   snappy compression format. Version info is inside here, so decompress\n+///   this.\n+/// The bytes you get after decompressing the snappy format portion has\n+/// following layout:\n+/// * [b'r',b'u',b's',b't',0,0,0,5] is the first 8 bytes(again)\n+/// * [crate root bytes] next 4 bytes is to store crate root position,\n+///   according to rustc's source code comment\n+/// * [length byte] next 1 byte tells us how many bytes we should read next\n+///   for the version string's utf8 bytes\n+/// * [version string bytes encoded in utf8] <- GET THIS BOI\n+/// * [some more bytes that we don really care but still there] :-)\n+/// Check this issue for more about the bytes layout:\n+/// https://github.com/rust-analyzer/rust-analyzer/issues/6174\n+fn read_version(dylib_path: &Path) -> io::Result<String> {\n+    let dylib_file = File::open(dylib_path)?;\n+    let dylib_mmaped = unsafe { Mmap::map(&dylib_file) }?;\n+\n+    let dot_rustc = read_section(&dylib_mmaped, \".rustc\")?;\n+\n+    let header = &dot_rustc[..8];\n+    const EXPECTED_HEADER: [u8; 8] = [b'r', b'u', b's', b't', 0, 0, 0, 5];\n+    // check if header is valid\n+    if header != EXPECTED_HEADER {\n+        return Err(io::Error::new(\n+            io::ErrorKind::InvalidData,\n+            format!(\"only metadata version 5 is supported, section header was: {:?}\", header),\n+        ));\n+    }\n+\n+    let snappy_portion = &dot_rustc[8..];\n+\n+    let mut snappy_decoder = SnapDecoder::new(snappy_portion);\n+\n+    // the bytes before version string bytes, so this basically is:\n+    // 8 bytes for [b'r',b'u',b's',b't',0,0,0,5]\n+    // 4 bytes for [crate root bytes]\n+    // 1 byte for length of version string\n+    // so 13 bytes in total, and we should check the 13th byte\n+    // to know the length\n+    let mut bytes_before_version = [0u8; 13];\n+    snappy_decoder.read_exact(&mut bytes_before_version)?;\n+    let length = bytes_before_version[12]; // what? can't use -1 indexing?\n+\n+    let mut version_string_utf8 = vec![0u8; length as usize];\n+    snappy_decoder.read_exact(&mut version_string_utf8)?;\n+    let version_string = String::from_utf8(version_string_utf8);\n+    version_string.map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))\n+}"}]}