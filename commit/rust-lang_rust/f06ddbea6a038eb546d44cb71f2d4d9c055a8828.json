{"sha": "f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNmRkYmVhNmEwMzhlYjU0NmQ0NGNiNzFmMmQ0ZDljMDU1YTg4Mjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-21T17:05:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-21T17:05:21Z"}, "message": "Merge #9080\n\n9080: Improve completion of cfg attributes r=JamieCunliffe a=JamieCunliffe\n\nThis will close #5398 and it also adds some completion for cfg options.\n\nCo-authored-by: Jamie Cunliffe <Jamie.Cunliffe@outlook.com>", "tree": {"sha": "9c39a29bdee4f45dcbd497c25350cbfbb0c5e9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c39a29bdee4f45dcbd497c25350cbfbb0c5e9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0MbRCRBK7hj4Ov3rIwAAPQ0IABMaYEY1hs5O737QGprkRsOs\nxIlCIHdrYOUkVWMhfDgoW1iNQb1RUNwoxN94nFXf1UrpmTr7tLkKT0SW809dX0kH\nBlf46dngQT7bzOAPm0qxp2NogjCtZCaHiNsdsOd8IgbDSmVzp/vpw4vgEdiamhPj\nAaGO/tk3Q4BgvWUI90Hulas32QJqM5V5P+b+Q+tZFKt4aTJF2Gja0hQDXDYTn9iq\nYSUd28wMrnLk8fx0Xu5wfhvfxvkUaMLGx3U72yLoDYuB1ppUW9hdRNBAfYznH9ZT\nErOdWLXgVschLUU7YgfB7urPPQRYrqwqJDftI6BRzfmjBVge5iQwy/yFa377Zmk=\n=ZKr+\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c39a29bdee4f45dcbd497c25350cbfbb0c5e9c3\nparent 1b05dbba39d5a4d46f321dc962df99038cddbf21\nparent ae823aa23f1c4fa55e71dd972d0b10c69148b0b4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624295121 +0000\ncommitter GitHub <noreply@github.com> 1624295121 +0000\n\nMerge #9080\n\n9080: Improve completion of cfg attributes r=JamieCunliffe a=JamieCunliffe\n\nThis will close #5398 and it also adds some completion for cfg options.\n\nCo-authored-by: Jamie Cunliffe <Jamie.Cunliffe@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "html_url": "https://github.com/rust-lang/rust/commit/f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b05dbba39d5a4d46f321dc962df99038cddbf21", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b05dbba39d5a4d46f321dc962df99038cddbf21", "html_url": "https://github.com/rust-lang/rust/commit/1b05dbba39d5a4d46f321dc962df99038cddbf21"}, {"sha": "ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "html_url": "https://github.com/rust-lang/rust/commit/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "7d5d12e630025d0b1f3956e8015d48313eafd823", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "patch": "@@ -128,6 +128,7 @@ impl ChangeFixture {\n                     file_id,\n                     meta.edition,\n                     Some(crate_name.clone().into()),\n+                    meta.cfg.clone(),\n                     meta.cfg,\n                     meta.env,\n                     Default::default(),\n@@ -157,6 +158,7 @@ impl ChangeFixture {\n                 crate_root,\n                 Edition::Edition2018,\n                 Some(CrateName::new(\"test\").unwrap().into()),\n+                default_cfg.clone(),\n                 default_cfg,\n                 Env::default(),\n                 Default::default(),\n@@ -186,6 +188,7 @@ impl ChangeFixture {\n                 Edition::Edition2021,\n                 Some(CrateDisplayName::from_canonical_name(\"core\".to_string())),\n                 CfgOptions::default(),\n+                CfgOptions::default(),\n                 Env::default(),\n                 Vec::new(),\n             );"}, {"sha": "0c51a59a0f065c068274fb2b4a6be3efe6fbd8ee", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "patch": "@@ -189,6 +189,7 @@ pub struct CrateData {\n     /// `Dependency` matters), this name should only be used for UI.\n     pub display_name: Option<CrateDisplayName>,\n     pub cfg_options: CfgOptions,\n+    pub potential_cfg_options: CfgOptions,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n     pub proc_macro: Vec<ProcMacro>,\n@@ -219,6 +220,7 @@ impl CrateGraph {\n         edition: Edition,\n         display_name: Option<CrateDisplayName>,\n         cfg_options: CfgOptions,\n+        potential_cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<ProcMacro>,\n     ) -> CrateId {\n@@ -227,6 +229,7 @@ impl CrateGraph {\n             edition,\n             display_name,\n             cfg_options,\n+            potential_cfg_options,\n             env,\n             proc_macro,\n             dependencies: Vec::new(),\n@@ -504,6 +507,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -512,6 +516,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -520,6 +525,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -536,6 +542,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -544,6 +551,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -559,6 +567,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -567,6 +576,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -575,6 +585,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -590,6 +601,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );\n@@ -598,6 +610,7 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n         );"}, {"sha": "9a4baa636949009beaa02bc41cf7ee3302d534fa", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "patch": "@@ -50,6 +50,26 @@ impl CfgOptions {\n             self.enabled.remove(&atom);\n         }\n     }\n+\n+    pub fn get_cfg_keys(&self) -> Vec<&SmolStr> {\n+        self.enabled\n+            .iter()\n+            .map(|x| match x {\n+                CfgAtom::Flag(key) => key,\n+                CfgAtom::KeyValue { key, .. } => key,\n+            })\n+            .collect()\n+    }\n+\n+    pub fn get_cfg_values(&self, cfg_key: &str) -> Vec<&SmolStr> {\n+        self.enabled\n+            .iter()\n+            .filter_map(|x| match x {\n+                CfgAtom::KeyValue { key, value } if cfg_key == key => Some(value),\n+                _ => None,\n+            })\n+            .collect()\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]"}, {"sha": "30cc34403c93279b2a08584d7fb30fa2de0f703b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "patch": "@@ -233,6 +233,10 @@ impl Crate {\n     pub fn cfg(&self, db: &dyn HirDatabase) -> CfgOptions {\n         db.crate_graph()[self.id].cfg_options.clone()\n     }\n+\n+    pub fn potential_cfg(&self, db: &dyn HirDatabase) -> CfgOptions {\n+        db.crate_graph()[self.id].potential_cfg_options.clone()\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "aac084012869ad66775120db637fe3b7c7c9dbbf", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "patch": "@@ -217,6 +217,7 @@ impl Analysis {\n             file_id,\n             Edition::Edition2018,\n             None,\n+            cfg_options.clone(),\n             cfg_options,\n             Env::default(),\n             Default::default(),"}, {"sha": "cc4f4b2af728e973af0fcae689eddde843574fbb", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "patch": "@@ -15,6 +15,7 @@ use crate::{\n     Completions,\n };\n \n+mod cfg;\n mod derive;\n mod lint;\n mod repr;\n@@ -30,6 +31,9 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n                 lint::complete_lint(acc, ctx, token_tree.clone(), DEFAULT_LINTS);\n                 lint::complete_lint(acc, ctx, token_tree, CLIPPY_LINTS);\n             }\n+            \"cfg\" => {\n+                cfg::complete_cfg(acc, ctx);\n+            }\n             _ => (),\n         },\n         (None, Some(_)) => (),\n@@ -852,4 +856,15 @@ mod tests {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_cfg() {\n+        check(\n+            r#\"#[cfg(target_endian = $0\"#,\n+            expect![[r#\"\n+                at little\n+                at big\n+\"#]],\n+        );\n+    }\n }"}, {"sha": "847e6529a1bf272fcd386c10a6914aada06d8535", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "patch": "@@ -0,0 +1,112 @@\n+//! Completion for cfg\n+\n+use std::iter;\n+\n+use syntax::SyntaxKind;\n+\n+use crate::{\n+    completions::Completions, context::CompletionContext, item::CompletionKind, CompletionItem,\n+    CompletionItemKind,\n+};\n+\n+pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n+    let add_completion = |item: &&str| {\n+        let mut completion =\n+            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), *item);\n+        completion.insert_text(format!(r#\"\"{}\"\"#, item));\n+        completion.kind(CompletionItemKind::Attribute);\n+        acc.add(completion.build());\n+    };\n+\n+    let previous = iter::successors(ctx.original_token.prev_token(), |t| {\n+        (matches!(t.kind(), SyntaxKind::EQ) || t.kind().is_trivia())\n+            .then(|| t.prev_token())\n+            .flatten()\n+    })\n+    .find(|t| matches!(t.kind(), SyntaxKind::IDENT));\n+\n+    match previous.as_ref().map(|p| p.text()) {\n+        Some(\"target_arch\") => KNOWN_ARCH.iter().for_each(add_completion),\n+        Some(\"target_env\") => KNOWN_ENV.iter().for_each(add_completion),\n+        Some(\"target_os\") => KNOWN_OS.iter().for_each(add_completion),\n+        Some(\"target_vendor\") => KNOWN_VENDOR.iter().for_each(add_completion),\n+        Some(\"target_endian\") => [\"little\", \"big\"].iter().for_each(add_completion),\n+        Some(name) => {\n+            ctx.krate.map(|krate| {\n+                krate.potential_cfg(ctx.db).get_cfg_values(&name).iter().for_each(|s| {\n+                    let mut item = CompletionItem::new(\n+                        CompletionKind::Attribute,\n+                        ctx.source_range(),\n+                        s.as_str(),\n+                    );\n+                    item.insert_text(format!(r#\"\"{}\"\"#, s));\n+\n+                    acc.add(item.build());\n+                })\n+            });\n+        }\n+        None => {\n+            ctx.krate.map(|krate| {\n+                krate.potential_cfg(ctx.db).get_cfg_keys().iter().for_each(|s| {\n+                    let item = CompletionItem::new(\n+                        CompletionKind::Attribute,\n+                        ctx.source_range(),\n+                        s.as_str(),\n+                    );\n+                    acc.add(item.build());\n+                })\n+            });\n+        }\n+    };\n+}\n+\n+const KNOWN_ARCH: [&'static str; 19] = [\n+    \"aarch64\",\n+    \"arm\",\n+    \"avr\",\n+    \"hexagon\",\n+    \"mips\",\n+    \"mips64\",\n+    \"msp430\",\n+    \"nvptx64\",\n+    \"powerpc\",\n+    \"powerpc64\",\n+    \"riscv32\",\n+    \"riscv64\",\n+    \"s390x\",\n+    \"sparc\",\n+    \"sparc64\",\n+    \"wasm32\",\n+    \"wasm64\",\n+    \"x86\",\n+    \"x86_64\",\n+];\n+\n+const KNOWN_ENV: [&'static str; 7] =\n+    [\"eabihf\", \"gnu\", \"gnueabihf\", \"msvc\", \"relibc\", \"sgx\", \"uclibc\"];\n+\n+const KNOWN_OS: [&'static str; 20] = [\n+    \"cuda\",\n+    \"dragonfly\",\n+    \"emscripten\",\n+    \"freebsd\",\n+    \"fuchsia\",\n+    \"haiku\",\n+    \"hermit\",\n+    \"illumos\",\n+    \"l4re\",\n+    \"linux\",\n+    \"netbsd\",\n+    \"none\",\n+    \"openbsd\",\n+    \"psp\",\n+    \"redox\",\n+    \"solaris\",\n+    \"uefi\",\n+    \"unknown\",\n+    \"vxworks\",\n+    \"windows\",\n+];\n+\n+const KNOWN_VENDOR: [&'static str; 8] =\n+    [\"apple\", \"fortanix\", \"nvidia\", \"pc\", \"sony\", \"unknown\", \"wrs\", \"uwp\"];"}, {"sha": "e67ba2bd92849e40ae290f90062b45368c2bb637", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06ddbea6a038eb546d44cb71f2d4d9c055a8828/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=f06ddbea6a038eb546d44cb71f2d4d9c055a8828", "patch": "@@ -384,6 +384,7 @@ fn project_json_to_crate_graph(\n                     file_id,\n                     krate.edition,\n                     krate.display_name.clone(),\n+                    cfg_options.clone(),\n                     cfg_options,\n                     env,\n                     proc_macro.unwrap_or_default(),\n@@ -580,6 +581,7 @@ fn detached_files_to_crate_graph(\n             Edition::Edition2018,\n             display_name,\n             cfg_options.clone(),\n+            cfg_options.clone(),\n             Env::default(),\n             Vec::new(),\n         );\n@@ -719,11 +721,19 @@ fn add_target_crate_root(\n         .unwrap_or_default();\n \n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());\n+    let mut potential_cfg_options = cfg_options.clone();\n+    potential_cfg_options.extend(\n+        pkg.features\n+            .iter()\n+            .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n+    );\n+\n     let crate_id = crate_graph.add_crate_root(\n         file_id,\n         edition,\n         Some(display_name),\n         cfg_options,\n+        potential_cfg_options,\n         env,\n         proc_macro,\n     );\n@@ -753,6 +763,7 @@ fn sysroot_to_crate_graph(\n                 Edition::Edition2018,\n                 Some(display_name),\n                 cfg_options.clone(),\n+                cfg_options.clone(),\n                 env,\n                 proc_macro,\n             );"}]}