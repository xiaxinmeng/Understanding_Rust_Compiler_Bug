{"sha": "907f00be3059deae7ccc0e95388501ff6f2b118d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2YwMGJlMzA1OWRlYWU3Y2NjMGU5NTM4ODUwMWZmNmYyYjExOGQ=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-28T13:52:45Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-08-19T19:02:40Z"}, "message": "Add more comments about the `INVALID_HANDLE_VALUE` situation.", "tree": {"sha": "b81c220fb5d21887b06160ff48c4fe3c1a97bd1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b81c220fb5d21887b06160ff48c4fe3c1a97bd1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907f00be3059deae7ccc0e95388501ff6f2b118d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907f00be3059deae7ccc0e95388501ff6f2b118d", "html_url": "https://github.com/rust-lang/rust/commit/907f00be3059deae7ccc0e95388501ff6f2b118d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907f00be3059deae7ccc0e95388501ff6f2b118d/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab08639e5950f5c8a42a2870c9636181308c3686", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab08639e5950f5c8a42a2870c9636181308c3686", "html_url": "https://github.com/rust-lang/rust/commit/ab08639e5950f5c8a42a2870c9636181308c3686"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "910b0ef9f53821368ec2cefd41b8479db753576c", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/907f00be3059deae7ccc0e95388501ff6f2b118d/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907f00be3059deae7ccc0e95388501ff6f2b118d/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=907f00be3059deae7ccc0e95388501ff6f2b118d", "patch": "@@ -22,8 +22,8 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// so it can be used in FFI in places where a handle is passed as an argument,\n /// it is not captured or consumed, and it is never null.\n ///\n-/// Note that it *may* have the value `INVALID_HANDLE_VALUE`. See [here] for\n-/// the full story.\n+/// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n+/// sometimes a valid handle value. See [here] for the full story.\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n #[derive(Copy, Clone)]\n@@ -42,10 +42,10 @@ pub struct BorrowedHandle<'handle> {\n /// so it can be used in FFI in places where a handle is passed as a consumed\n /// argument or returned as an owned value, and is never null.\n ///\n-/// Note that it *may* have the value `INVALID_HANDLE_VALUE`. See [here] for\n-/// the full story. For APIs like `CreateFileW` which report errors with\n-/// `INVALID_HANDLE_VALUE` instead of null, use [`OptionFileHandle`] instead\n-/// of `Option<OwnedHandle>`.\n+/// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n+/// sometimes a valid handle value. See [here] for the full story. For APIs\n+/// like `CreateFileW` which report errors with `INVALID_HANDLE_VALUE` instead\n+/// of null, use [`OptionFileHandle`] instead of `Option<OwnedHandle>`.\n ///\n /// `OwnedHandle` uses [`CloseHandle`] to close its handle on drop. As such,\n /// it must not be used with handles to open registry keys which need to be\n@@ -98,8 +98,14 @@ impl BorrowedHandle<'_> {\n     ///\n     /// # Safety\n     ///\n-    /// The resource pointed to by `handle` must remain open for the duration\n-    /// of the returned `BorrowedHandle`, and it must not be null.\n+    /// The resource pointed to by `handle` must be a valid open handle, it\n+    /// must remain open for the duration of the returned `BorrowedHandle`, and\n+    /// it must not be null.\n+    ///\n+    /// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n+    /// sometimes a valid handle value. See [here] for the full story.\n+    ///\n+    /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n     pub unsafe fn borrow_raw_handle(handle: RawHandle) -> Self {\n@@ -182,6 +188,9 @@ impl IntoRawHandle for OwnedHandle {\n impl FromRawHandle for OwnedHandle {\n     /// Constructs a new instance of `Self` from the given raw handle.\n     ///\n+    /// Use `OptionFileHandle` instead of `Option<OwnedHandle>` for APIs that\n+    /// use `INVALID_HANDLE_VALUE` to indicate failure.\n+    ///\n     /// # Safety\n     ///\n     /// The resource pointed to by `handle` must be open and suitable for\n@@ -191,7 +200,11 @@ impl FromRawHandle for OwnedHandle {\n     /// In particular, it must not be used with handles to open registry\n     /// keys which need to be closed with [`RegCloseKey`] instead.\n     ///\n+    /// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n+    /// sometimes a valid handle value. See [here] for the full story.\n+    ///\n     /// [`RegCloseKey`]: https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey\n+    /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n         assert!(!handle.is_null());\n@@ -200,14 +213,19 @@ impl FromRawHandle for OwnedHandle {\n }\n \n impl FromRawHandle for OptionFileHandle {\n-    /// Constructs a new instance of `Self` from the given raw handle.\n+    /// Constructs a new instance of `Self` from the given raw handle returned\n+    /// from a Windows API that uses `INVALID_HANDLE_VALUE` to indicate\n+    /// failure, such as `CreateFileW`.\n+    ///\n+    /// Use `Option<OwnedHandle>` instead of `OptionFileHandle` for APIs that\n+    /// use null to indicate failure.\n     ///\n     /// # Safety\n     ///\n     /// The resource pointed to by `handle` must be either open and otherwise\n-    /// unowned, or equal to `INVALID_HANDLE_VALUE``. Note that not all Windows\n-    /// APIs use `INVALID_HANDLE_VALUE` for errors; see [here] for the full\n-    /// story.\n+    /// unowned, or equal to `INVALID_HANDLE_VALUE` (-1). It must not be null.\n+    /// Note that not all Windows APIs use `INVALID_HANDLE_VALUE` for errors;\n+    /// see [here] for the full story.\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]"}]}