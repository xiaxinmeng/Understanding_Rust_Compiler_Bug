{"sha": "1f73e898ee1da743bf9b27e529e070424ca25acf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNzNlODk4ZWUxZGE3NDNiZjliMjdlNTI5ZTA3MDQyNGNhMjVhY2Y=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T01:00:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T01:00:10Z"}, "message": "Rollup merge of #75417 - npmccallum:naked, r=matthewjasper\n\nDon't spill operands onto the stack in naked functions\n\nCurrently, the code spills operands onto the stack for the purpose of\ndebuginfo. However, naked functions can only contain an asm block. Therefore,\nattempting to spill the operands on the stack is undefined behavior.\n\nFixes https://github.com/rust-lang/rust/issues/42779\ncc https://github.com/rust-lang/rust/issues/32408\n\nNote that this PR reverts https://github.com/rust-lang/rust/pull/74105 which ultimately didn't fix the problem.\n\ncc @haraldh @Amanieu @matthewjasper", "tree": {"sha": "1566be836da875beb7e1bf01a777c553fbb4dea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1566be836da875beb7e1bf01a777c553fbb4dea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f73e898ee1da743bf9b27e529e070424ca25acf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNeIaCRBK7hj4Ov3rIwAAdHIIAD/O5oHfBdTXgoG2omylA37n\nfw974gM6U3auqQCZBKwWPUoiq/npRKrQ/Jz0wC5WXRI5YVwwmcY0vzowLtonaqiV\nCmTeGYMiIC/Jw/eA8LwTiiK2aqYHBFNZQSZISmPkRx5U171kByBcoCdeVFdr5tSJ\nyXLrcPyd4WixBsYG5WyVhvR+/x7DwSzs1rIHU7mNoqCIoAUywPLi9k2j7mdJItmC\nhR4j5ESepCZd3/8zsgbmyaV9T0Ns0dZnneklxVpMj4n2q0Kp8A5XJ8ZKLNO5+QLx\nnLYvxf0R93CYIeGNvRw4YmGWvtB22AnPkGkFay5beI9uTD3YgOUT0dBHv9WqV6k=\n=m2Fq\n-----END PGP SIGNATURE-----\n", "payload": "tree 1566be836da875beb7e1bf01a777c553fbb4dea9\nparent 8c361aa28d42b3fe95675e461f2d96b05de681de\nparent 050fb380aaa5f95ca27d6365cea06ea614c4cbf7\nauthor Tyler Mandry <tmandry@gmail.com> 1597366810 -0700\ncommitter GitHub <noreply@github.com> 1597366810 -0700\n\nRollup merge of #75417 - npmccallum:naked, r=matthewjasper\n\nDon't spill operands onto the stack in naked functions\n\nCurrently, the code spills operands onto the stack for the purpose of\ndebuginfo. However, naked functions can only contain an asm block. Therefore,\nattempting to spill the operands on the stack is undefined behavior.\n\nFixes https://github.com/rust-lang/rust/issues/42779\ncc https://github.com/rust-lang/rust/issues/32408\n\nNote that this PR reverts https://github.com/rust-lang/rust/pull/74105 which ultimately didn't fix the problem.\n\ncc @haraldh @Amanieu @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f73e898ee1da743bf9b27e529e070424ca25acf", "html_url": "https://github.com/rust-lang/rust/commit/1f73e898ee1da743bf9b27e529e070424ca25acf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f73e898ee1da743bf9b27e529e070424ca25acf/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c361aa28d42b3fe95675e461f2d96b05de681de", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c361aa28d42b3fe95675e461f2d96b05de681de", "html_url": "https://github.com/rust-lang/rust/commit/8c361aa28d42b3fe95675e461f2d96b05de681de"}, {"sha": "050fb380aaa5f95ca27d6365cea06ea614c4cbf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/050fb380aaa5f95ca27d6365cea06ea614c4cbf7", "html_url": "https://github.com/rust-lang/rust/commit/050fb380aaa5f95ca27d6365cea06ea614c4cbf7"}], "stats": {"total": 66, "additions": 11, "deletions": 55}, "files": [{"sha": "d8a530d98faa7df9f0228b1b11a10af891e030c1", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f73e898ee1da743bf9b27e529e070424ca25acf/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f73e898ee1da743bf9b27e529e070424ca25acf/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=1f73e898ee1da743bf9b27e529e070424ca25acf", "patch": "@@ -1,6 +1,7 @@\n use crate::traits::*;\n use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;\n use rustc_session::config::DebugInfo;\n@@ -216,6 +217,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             LocalRef::Operand(None) => return,\n \n             LocalRef::Operand(Some(operand)) => {\n+                // Don't spill operands onto the stack in naked functions.\n+                // See: https://github.com/rust-lang/rust/issues/42779\n+                let attrs = bx.tcx().codegen_fn_attrs(self.instance.def_id());\n+                if attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n+                    return;\n+                }\n+\n                 // \"Spill\" the value onto the stack, for debuginfo,\n                 // without forcing non-debuginfo uses of the local\n                 // to also load from the stack every single time."}, {"sha": "215a0c7dfdf2712dbb1c6ad3909775e41d35b688", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f73e898ee1da743bf9b27e529e070424ca25acf/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f73e898ee1da743bf9b27e529e070424ca25acf/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=1f73e898ee1da743bf9b27e529e070424ca25acf", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::lang_items;\n use rustc_hir::{GeneratorKind, HirIdMap, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n@@ -798,22 +797,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         argument_scope: region::Scope,\n         ast_body: &'tcx hir::Expr<'tcx>,\n     ) -> BlockAnd<()> {\n-        let tcx = self.hir.tcx();\n-        let attrs = tcx.codegen_fn_attrs(fn_def_id);\n-        let naked = attrs.flags.contains(CodegenFnAttrFlags::NAKED);\n-\n         // Allocate locals for the function arguments\n         for &ArgInfo(ty, _, arg_opt, _) in arguments.iter() {\n             let source_info =\n                 SourceInfo::outermost(arg_opt.map_or(self.fn_span, |arg| arg.pat.span));\n             let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n \n-            // Emit function argument debuginfo only for non-naked functions.\n-            // See: https://github.com/rust-lang/rust/issues/42779\n-            if naked {\n-                continue;\n-            }\n-\n             // If this is a simple binding pattern, give debuginfo a nice name.\n             if let Some(arg) = arg_opt {\n                 if let Some(ident) = arg.pat.simple_ident() {\n@@ -826,6 +815,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n+        let tcx = self.hir.tcx();\n         let tcx_hir = tcx.hir();\n         let hir_typeck_results = self.hir.typeck_results();\n "}, {"sha": "493c1b9f0ba6b9a2655d506a4c62b551a21b4fe1", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f73e898ee1da743bf9b27e529e070424ca25acf/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f73e898ee1da743bf9b27e529e070424ca25acf/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=1f73e898ee1da743bf9b27e529e070424ca25acf", "patch": "@@ -18,7 +18,7 @@ pub fn naked_empty() {\n // CHECK-NEXT: define void @naked_with_args(i{{[0-9]+( %0)?}})\n pub fn naked_with_args(a: isize) {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %_1 = alloca i{{[0-9]+}}\n+    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret void\n }\n@@ -39,7 +39,7 @@ pub fn naked_with_return() -> isize {\n #[naked]\n pub fn naked_with_args_and_return(a: isize) -> isize {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %_1 = alloca i{{[0-9]+}}\n+    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n     a"}, {"sha": "5f3a1eb44e4e55179eeb49b90ae3182d6198aed7", "filename": "src/test/debuginfo/function-arguments-naked.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8c361aa28d42b3fe95675e461f2d96b05de681de/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c361aa28d42b3fe95675e461f2d96b05de681de/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs?ref=8c361aa28d42b3fe95675e461f2d96b05de681de", "patch": "@@ -1,42 +0,0 @@\n-// min-lldb-version: 310\n-\n-// We have to ignore android because of this issue:\n-// https://github.com/rust-lang/rust/issues/74847\n-// ignore-android\n-//\n-// We need to use inline assembly, so just use one platform\n-// only-x86_64\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:run\n-\n-// gdb-command:info args\n-// gdb-check:No arguments.\n-// gdb-command:continue\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:frame variable\n-// lldbg-check:(unsigned long) = 111 (unsigned long) = 222\n-// lldbr-check:(unsigned long) = 111 (unsigned long) = 222\n-// lldb-command:continue\n-\n-\n-#![feature(asm)]\n-#![feature(naked_functions)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-fn main() {\n-    naked(111, 222);\n-}\n-\n-#[naked]\n-extern \"C\" fn naked(x: usize, y: usize) {\n-    unsafe { asm!(\"ret\"); } // #break\n-}"}]}