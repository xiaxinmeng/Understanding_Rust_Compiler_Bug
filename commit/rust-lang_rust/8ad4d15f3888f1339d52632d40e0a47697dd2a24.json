{"sha": "8ad4d15f3888f1339d52632d40e0a47697dd2a24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZDRkMTVmMzg4OGYxMzM5ZDUyNjMyZDQwZTBhNDc2OTdkZDJhMjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-29T23:56:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-29T23:56:46Z"}, "message": "move AttributeTemplate to builtin_attrs", "tree": {"sha": "ae7cc6454831442d6a43b74f0edac117ddc3460c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae7cc6454831442d6a43b74f0edac117ddc3460c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad4d15f3888f1339d52632d40e0a47697dd2a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad4d15f3888f1339d52632d40e0a47697dd2a24", "html_url": "https://github.com/rust-lang/rust/commit/8ad4d15f3888f1339d52632d40e0a47697dd2a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad4d15f3888f1339d52632d40e0a47697dd2a24/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "048201fa7a69b3c3795e76186bc954d06d2ca368", "url": "https://api.github.com/repos/rust-lang/rust/commits/048201fa7a69b3c3795e76186bc954d06d2ca368", "html_url": "https://github.com/rust-lang/rust/commit/048201fa7a69b3c3795e76186bc954d06d2ca368"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "284b23a14e792bdba8a170c9b788a7100010e28d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8ad4d15f3888f1339d52632d40e0a47697dd2a24", "patch": "@@ -39,10 +39,10 @@ use rustc_feature::Stability;\n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast::{self, Expr};\n use syntax::ptr::P;\n-use syntax::attr::{self, HasAttrs, AttributeTemplate};\n+use syntax::attr::{self, HasAttrs};\n use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n-use syntax::feature_gate::{AttributeGate, AttributeType};\n+use syntax::feature_gate::{AttributeGate, AttributeTemplate, AttributeType};\n use syntax::feature_gate::deprecated_attributes;\n use syntax_pos::{BytePos, Span};\n use syntax::symbol::{Symbol, kw, sym};"}, {"sha": "e6284858a21d315931d13fdbc48230fe9509110f", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=8ad4d15f3888f1339d52632d40e0a47697dd2a24", "patch": "@@ -1,8 +1,9 @@\n //! Meta-syntax validation logic of attributes for post-expansion.\n \n use errors::{PResult, Applicability};\n-use syntax::ast::{self, Attribute, AttrKind, Ident, MetaItem};\n-use syntax::attr::{AttributeTemplate, mk_name_value_item_str};\n+use syntax::feature_gate::AttributeTemplate;\n+use syntax::ast::{self, Attribute, AttrKind, Ident, MetaItem, MetaItemKind};\n+use syntax::attr::mk_name_value_item_str;\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::feature_gate::BUILTIN_ATTRIBUTE_MAP;\n use syntax::token;\n@@ -41,6 +42,16 @@ pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, Meta\n     })\n }\n \n+/// Checks that the given meta-item is compatible with this `AttributeTemplate`.\n+fn is_attr_template_compatible(template: &AttributeTemplate, meta: &ast::MetaItemKind) -> bool {\n+    match meta {\n+        MetaItemKind::Word => template.word,\n+        MetaItemKind::List(..) => template.list.is_some(),\n+        MetaItemKind::NameValue(lit) if lit.kind.is_str() => template.name_value_str.is_some(),\n+        MetaItemKind::NameValue(..) => false,\n+    }\n+}\n+\n pub fn check_builtin_attribute(\n     sess: &ParseSess,\n     attr: &Attribute,\n@@ -57,7 +68,7 @@ pub fn check_builtin_attribute(\n                              name == sym::test || name == sym::bench;\n \n     match parse_meta(sess, attr) {\n-        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.kind) {\n+        Ok(meta) => if !should_skip(name) && !is_attr_template_compatible(&template, &meta.kind) {\n             let error_msg = format!(\"malformed `{}` attribute input\", name);\n             let mut msg = \"attribute must be of the form \".to_owned();\n             let mut suggestions = vec![];"}, {"sha": "be53d802eec4c86e2e2ff70f6baa53c0b7865abb", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=8ad4d15f3888f1339d52632d40e0a47697dd2a24", "patch": "@@ -25,31 +25,6 @@ enum AttrError {\n     UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n }\n \n-/// A template that the attribute input must match.\n-/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n-#[derive(Clone, Copy)]\n-pub struct AttributeTemplate {\n-    pub word: bool,\n-    pub list: Option<&'static str>,\n-    pub name_value_str: Option<&'static str>,\n-}\n-\n-impl AttributeTemplate {\n-    pub fn only_word() -> Self {\n-        Self { word: true, list: None, name_value_str: None }\n-    }\n-\n-    /// Checks that the given meta-item is compatible with this template.\n-    pub fn compatible(&self, meta_item_kind: &ast::MetaItemKind) -> bool {\n-        match meta_item_kind {\n-            ast::MetaItemKind::Word => self.word,\n-            ast::MetaItemKind::List(..) => self.list.is_some(),\n-            ast::MetaItemKind::NameValue(lit) if lit.kind.is_str() => self.name_value_str.is_some(),\n-            ast::MetaItemKind::NameValue(..) => false,\n-        }\n-    }\n-}\n-\n fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     let diag = &sess.span_diagnostic;\n     match error {"}, {"sha": "7435b2e056a6296aa5e555c566e6d5e4c74942c6", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=8ad4d15f3888f1339d52632d40e0a47697dd2a24", "patch": "@@ -8,14 +8,14 @@ use super::check::{EXPLAIN_ALLOW_INTERNAL_UNSAFE, EXPLAIN_ALLOW_INTERNAL_UNSTABL\n use rustc_feature::{Features, Stability};\n \n use crate::ast;\n-use crate::attr::AttributeTemplate;\n use crate::sess::ParseSess;\n \n use syntax_pos::symbol::{Symbol, sym};\n use syntax_pos::Span;\n use rustc_data_structures::fx::FxHashMap;\n use lazy_static::lazy_static;\n \n+\n type GateFn = fn(&Features) -> bool;\n \n macro_rules! cfg_fn {\n@@ -108,6 +108,21 @@ impl AttributeGate {\n     }\n }\n \n+/// A template that the attribute input must match.\n+/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n+#[derive(Clone, Copy)]\n+pub struct AttributeTemplate {\n+    pub word: bool,\n+    pub list: Option<&'static str>,\n+    pub name_value_str: Option<&'static str>,\n+}\n+\n+impl AttributeTemplate {\n+    pub fn only_word() -> Self {\n+        Self { word: true, list: None, name_value_str: None }\n+    }\n+}\n+\n /// A convenience macro for constructing attribute templates.\n /// E.g., `template!(Word, List: \"description\")` means that the attribute\n /// supports forms `#[attr]` and `#[attr(description)]`."}, {"sha": "8e95fe3c34bfacb0713fef760ac021bf82e22db8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=8ad4d15f3888f1339d52632d40e0a47697dd2a24", "patch": "@@ -101,7 +101,7 @@ pub mod feature_gate {\n     };\n     mod builtin_attrs;\n     pub use builtin_attrs::{\n-        AttributeGate, AttributeType, GatedCfg,\n+        AttributeGate, AttributeTemplate, AttributeType, GatedCfg,\n         BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n         deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n     };"}, {"sha": "893fd402e83b6af769d13d77b83bc24c47404711", "filename": "src/libsyntax_ext/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibsyntax_ext%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad4d15f3888f1339d52632d40e0a47697dd2a24/src%2Flibsyntax_ext%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Futil.rs?ref=8ad4d15f3888f1339d52632d40e0a47697dd2a24", "patch": "@@ -1,7 +1,7 @@\n use rustc_parse::validate_attr;\n use syntax_pos::Symbol;\n use syntax::ast::MetaItem;\n-use syntax::attr::AttributeTemplate;\n+use syntax::feature_gate::AttributeTemplate;\n use syntax_expand::base::ExtCtxt;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {"}]}