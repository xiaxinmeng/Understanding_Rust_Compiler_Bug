{"sha": "887999d163bace7e79370b952bdd1f930ff4cdd5", "node_id": "C_kwDOAAsO6NoAKDg4Nzk5OWQxNjNiYWNlN2U3OTM3MGI5NTJiZGQxZjkzMGZmNGNkZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-04T05:59:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-04T05:59:16Z"}, "message": "Auto merge of #88439 - cynecx:unwind_asm, r=Amanieu\n\nUnwinding support for inline assembly\n\nr? `@Amanieu`", "tree": {"sha": "0b2a5642dfe49a0cebe9744394169acebf412ccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b2a5642dfe49a0cebe9744394169acebf412ccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887999d163bace7e79370b952bdd1f930ff4cdd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887999d163bace7e79370b952bdd1f930ff4cdd5", "html_url": "https://github.com/rust-lang/rust/commit/887999d163bace7e79370b952bdd1f930ff4cdd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887999d163bace7e79370b952bdd1f930ff4cdd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5815727786aa1ed2793af05cf65c5d79c290c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5815727786aa1ed2793af05cf65c5d79c290c67", "html_url": "https://github.com/rust-lang/rust/commit/f5815727786aa1ed2793af05cf65c5d79c290c67"}, {"sha": "3dbb621c72e57c7eee9c10f20316d76c59168f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbb621c72e57c7eee9c10f20316d76c59168f83", "html_url": "https://github.com/rust-lang/rust/commit/3dbb621c72e57c7eee9c10f20316d76c59168f83"}], "stats": {"total": 855, "additions": 623, "deletions": 232}, "files": [{"sha": "03b957adeda9d36a748908846eac282a5d3b2f59", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1981,7 +1981,7 @@ pub enum InlineAsmRegOrRegClass {\n \n bitflags::bitflags! {\n     #[derive(Encodable, Decodable, HashStable_Generic)]\n-    pub struct InlineAsmOptions: u8 {\n+    pub struct InlineAsmOptions: u16 {\n         const PURE = 1 << 0;\n         const NOMEM = 1 << 1;\n         const READONLY = 1 << 2;\n@@ -1990,6 +1990,7 @@ bitflags::bitflags! {\n         const NOSTACK = 1 << 5;\n         const ATT_SYNTAX = 1 << 6;\n         const RAW = 1 << 7;\n+        const MAY_UNWIND = 1 << 8;\n     }\n }\n "}, {"sha": "9f27ace25ab4b442aade416279123f6db49939d6", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -49,6 +49,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 .struct_span_err(sp, \"the `att_syntax` option is only supported on x86\")\n                 .emit();\n         }\n+        if asm.options.contains(InlineAsmOptions::MAY_UNWIND)\n+            && !self.sess.features_untracked().asm_unwind\n+        {\n+            feature_err(\n+                &self.sess.parse_sess,\n+                sym::asm_unwind,\n+                sp,\n+                \"the `may_unwind` option is unstable\",\n+            )\n+            .emit();\n+        }\n \n         let mut clobber_abis = FxHashMap::default();\n         if let Some(asm_arch) = asm_arch {"}, {"sha": "0dc1f093947e3b092ea8645d86f92a4c7a875c86", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -2338,6 +2338,9 @@ impl<'a> State<'a> {\n                 if opts.contains(InlineAsmOptions::RAW) {\n                     options.push(\"raw\");\n                 }\n+                if opts.contains(InlineAsmOptions::MAY_UNWIND) {\n+                    options.push(\"may_unwind\");\n+                }\n                 s.commasep(Inconsistent, &options, |s, &opt| {\n                     s.word(opt);\n                 });"}, {"sha": "15372ec1534fe164fb6d9f162a27e46c7eada66c", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::RegionVid;\n use rustc_middle::ty::TyCtxt;\n use rustc_mir_dataflow::impls::{EverInitializedPlaces, MaybeUninitializedPlaces};\n use rustc_mir_dataflow::ResultsVisitable;\n-use rustc_mir_dataflow::{self, fmt::DebugWithContext, GenKill};\n+use rustc_mir_dataflow::{self, fmt::DebugWithContext, CallReturnPlaces, GenKill};\n use rustc_mir_dataflow::{Analysis, Direction, Results};\n use std::fmt;\n use std::iter;\n@@ -434,9 +434,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n         &self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        _dest_place: mir::Place<'tcx>,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n     }\n }"}, {"sha": "70acbc9ee2dbc4024fd77bd4504ca8ef3ea0a1b7", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -17,7 +17,7 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n         PlaceContext::MutatingUse(MutatingUseContext::Store) |\n \n         // This is potentially both a def and a use...\n-        PlaceContext::MutatingUse(MutatingUseContext::AsmOutput) |\n+        PlaceContext::MutatingUse(MutatingUseContext::LlvmAsmOutput) |\n \n         // We let Call define the result in both the success and\n         // unwind cases. This is not really correct, however it\n@@ -26,6 +26,7 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n         // the def in call only to the input from the success\n         // path and not the unwind path. -nmatsakis\n         PlaceContext::MutatingUse(MutatingUseContext::Call) |\n+        PlaceContext::MutatingUse(MutatingUseContext::AsmOutput) |\n         PlaceContext::MutatingUse(MutatingUseContext::Yield) |\n \n         // Storage live and storage dead aren't proper defines, but we can ignore"}, {"sha": "c03e4d8a448900996b3091e97993b474fc431fef", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -199,6 +199,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n+                cleanup: _,\n             } => {\n                 for op in operands {\n                     match *op {"}, {"sha": "88fab269109f998973e76b89829c4155119b89bb", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -791,6 +791,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n+                cleanup: _,\n             } => {\n                 for op in operands {\n                     match *op {"}, {"sha": "6a263bd63ada8c63f99e7e81ec43b8cd72b1a139", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1828,10 +1828,16 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     self.assert_iscleanup(body, block_data, unwind, true);\n                 }\n             }\n-            TerminatorKind::InlineAsm { destination, .. } => {\n+            TerminatorKind::InlineAsm { destination, cleanup, .. } => {\n                 if let Some(target) = destination {\n                     self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 }\n+                if let Some(cleanup) = cleanup {\n+                    if is_cleanup {\n+                        span_mirbug!(self, block_data, \"cleanup on cleanup block\")\n+                    }\n+                    self.assert_iscleanup(body, block_data, cleanup, true);\n+                }\n             }\n         }\n     }"}, {"sha": "b374769cbea250baf8caf109ef3ffdb95c292d14", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -420,6 +420,8 @@ fn parse_options<'a>(\n             try_set_option(p, args, sym::att_syntax, ast::InlineAsmOptions::ATT_SYNTAX);\n         } else if p.eat_keyword(kw::Raw) {\n             try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::RAW);\n+        } else if p.eat_keyword(sym::may_unwind) {\n+            try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::MAY_UNWIND);\n         } else {\n             return p.unexpected();\n         }"}, {"sha": "371c71de62fbbb421c18707e08b5f83b4524ecc1", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1,6 +1,7 @@\n //! Codegen of a single function\n \n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n+use rustc_ast::InlineAsmOptions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n@@ -239,7 +240,8 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             fx.add_comment(inst, terminator_head);\n         }\n \n-        fx.set_debug_loc(bb_data.terminator().source_info);\n+        let source_info = bb_data.terminator().source_info;\n+        fx.set_debug_loc(source_info);\n \n         match &bb_data.terminator().kind {\n             TerminatorKind::Goto { target } => {\n@@ -295,19 +297,19 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                         let len = codegen_operand(fx, len).load_scalar(fx);\n                         let index = codegen_operand(fx, index).load_scalar(fx);\n                         let location = fx\n-                            .get_caller_location(bb_data.terminator().source_info.span)\n+                            .get_caller_location(source_info.span)\n                             .load_scalar(fx);\n \n                         codegen_panic_inner(\n                             fx,\n                             rustc_hir::LangItem::PanicBoundsCheck,\n                             &[index, len, location],\n-                            bb_data.terminator().source_info.span,\n+                            source_info.span,\n                         );\n                     }\n                     _ => {\n                         let msg_str = msg.description();\n-                        codegen_panic(fx, msg_str, bb_data.terminator().source_info.span);\n+                        codegen_panic(fx, msg_str, source_info.span);\n                     }\n                 }\n             }\n@@ -378,10 +380,18 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                 options,\n                 destination,\n                 line_spans: _,\n+                cleanup: _,\n             } => {\n+                if options.contains(InlineAsmOptions::MAY_UNWIND) {\n+                    fx.tcx.sess.span_fatal(\n+                        source_info.span,\n+                        \"cranelift doesn't support unwinding from inline assembly.\",\n+                    );\n+                }\n+\n                 crate::inline_asm::codegen_inline_asm(\n                     fx,\n-                    bb_data.terminator().source_info.span,\n+                    source_info.span,\n                     template,\n                     operands,\n                     *options,\n@@ -415,7 +425,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             }\n             TerminatorKind::Drop { place, target, unwind: _ } => {\n                 let drop_place = codegen_place(fx, *place);\n-                crate::abi::codegen_drop(fx, bb_data.terminator().source_info.span, drop_place);\n+                crate::abi::codegen_drop(fx, source_info.span, drop_place);\n \n                 let target_block = fx.get_block(*target);\n                 fx.bcx.ins().jump(target_block, &[]);"}, {"sha": "6a3b94a0d7018311a6979d04cd7aa4dca320a56b", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -118,7 +118,14 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         true\n     }\n \n-    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, _span: &[Span], _instance: Instance<'_>) {\n+    fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, span: &[Span], _instance: Instance<'_>, _dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>) {\n+        if options.contains(InlineAsmOptions::MAY_UNWIND) {\n+            self.sess()\n+                .struct_span_err(span[0], \"GCC backend does not support unwinding from inline asm\")\n+                .emit();\n+            return;\n+        }\n+\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n         let is_x86 = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64);\n         let att_dialect = is_x86 && options.contains(InlineAsmOptions::ATT_SYNTAX);"}, {"sha": "83c5cb6f1cf51ee28f975668cf55237301ca49da", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1,6 +1,8 @@\n use crate::builder::Builder;\n+use crate::common::Funclet;\n use crate::context::CodegenCx;\n use crate::llvm;\n+use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -98,6 +100,8 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             ia.alignstack,\n             ia.dialect,\n             &[span],\n+            false,\n+            None,\n         );\n         if r.is_none() {\n             return false;\n@@ -121,6 +125,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n         instance: Instance<'_>,\n+        dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>,\n     ) {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n \n@@ -355,6 +360,8 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             alignstack,\n             dialect,\n             line_spans,\n+            options.contains(InlineAsmOptions::MAY_UNWIND),\n+            dest_catch_funclet,\n         )\n         .unwrap_or_else(|| span_bug!(line_spans[0], \"LLVM asm constraint validation failed\"));\n \n@@ -447,9 +454,16 @@ pub(crate) fn inline_asm_call(\n     alignstack: bool,\n     dia: LlvmAsmDialect,\n     line_spans: &[Span],\n+    unwind: bool,\n+    dest_catch_funclet: Option<(\n+        &'ll llvm::BasicBlock,\n+        &'ll llvm::BasicBlock,\n+        Option<&Funclet<'ll>>,\n+    )>,\n ) -> Option<&'ll Value> {\n     let volatile = if volatile { llvm::True } else { llvm::False };\n     let alignstack = if alignstack { llvm::True } else { llvm::False };\n+    let can_throw = if unwind { llvm::True } else { llvm::False };\n \n     let argtys = inputs\n         .iter()\n@@ -466,6 +480,13 @@ pub(crate) fn inline_asm_call(\n         let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr().cast(), cons.len());\n         debug!(\"constraint verification result: {:?}\", constraints_ok);\n         if constraints_ok {\n+            if unwind && llvm_util::get_version() < (13, 0, 0) {\n+                bx.cx.sess().span_fatal(\n+                    line_spans[0],\n+                    \"unwinding from inline assembly is only supported on llvm >= 13.\",\n+                );\n+            }\n+\n             let v = llvm::LLVMRustInlineAsm(\n                 fty,\n                 asm.as_ptr().cast(),\n@@ -475,8 +496,14 @@ pub(crate) fn inline_asm_call(\n                 volatile,\n                 alignstack,\n                 llvm::AsmDialect::from_generic(dia),\n+                can_throw,\n             );\n-            let call = bx.call(fty, v, inputs, None);\n+\n+            let call = if let Some((dest, catch, funclet)) = dest_catch_funclet {\n+                bx.invoke(fty, v, inputs, dest, catch, funclet)\n+            } else {\n+                bx.call(fty, v, inputs, None)\n+            };\n \n             // Store mark in a metadata node so we can map LLVM errors\n             // back to source locations.  See #17552."}, {"sha": "5e7d7552daf10ad8e4a42a3fa8b3f480618ac023", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -350,6 +350,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     false,\n                     ast::LlvmAsmDialect::Att,\n                     &[span],\n+                    false,\n+                    None,\n                 )\n                 .unwrap_or_else(|| bug!(\"failed to generate inline asm call for `black_box`\"));\n "}, {"sha": "d9a6723fe27fde21a2515e2a377b1b0186ee5494", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1847,6 +1847,7 @@ extern \"C\" {\n         SideEffects: Bool,\n         AlignStack: Bool,\n         Dialect: AsmDialect,\n+        CanThrow: Bool,\n     ) -> &Value;\n     pub fn LLVMRustInlineAsmVerify(\n         Ty: &Type,"}, {"sha": "0447c02fdecc4fdc2e9791d374439cc978290899", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -211,6 +211,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n             PlaceContext::MutatingUse(\n                 MutatingUseContext::Store\n+                | MutatingUseContext::LlvmAsmOutput\n                 | MutatingUseContext::AsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::AddressOf\n@@ -275,9 +276,9 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n                 | TerminatorKind::SwitchInt { .. }\n                 | TerminatorKind::Yield { .. }\n                 | TerminatorKind::FalseEdge { .. }\n-                | TerminatorKind::FalseUnwind { .. }\n-                | TerminatorKind::InlineAsm { .. } => { /* nothing to do */ }\n+                | TerminatorKind::FalseUnwind { .. } => { /* nothing to do */ }\n                 TerminatorKind::Call { cleanup: unwind, .. }\n+                | TerminatorKind::InlineAsm { cleanup: unwind, .. }\n                 | TerminatorKind::Assert { cleanup: unwind, .. }\n                 | TerminatorKind::DropAndReplace { unwind, .. }\n                 | TerminatorKind::Drop { unwind, .. } => {"}, {"sha": "e914e4932693215ea8f9718e3636416b2781c473", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -10,6 +10,7 @@ use crate::traits::*;\n use crate::MemFlags;\n \n use rustc_ast as ast;\n+use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::AssertKind;\n@@ -174,6 +175,45 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             }\n         }\n     }\n+\n+    /// Generates inline assembly with optional `destination` and `cleanup`.\n+    fn do_inlineasm<Bx: BuilderMethods<'a, 'tcx>>(\n+        &self,\n+        fx: &mut FunctionCx<'a, 'tcx, Bx>,\n+        bx: &mut Bx,\n+        template: &[InlineAsmTemplatePiece],\n+        operands: &[InlineAsmOperandRef<'tcx, Bx>],\n+        options: InlineAsmOptions,\n+        line_spans: &[Span],\n+        destination: Option<mir::BasicBlock>,\n+        cleanup: Option<mir::BasicBlock>,\n+        instance: Instance<'_>,\n+    ) {\n+        if let Some(cleanup) = cleanup {\n+            let ret_llbb = if let Some(target) = destination {\n+                fx.llbb(target)\n+            } else {\n+                fx.unreachable_block()\n+            };\n+\n+            bx.codegen_inline_asm(\n+                template,\n+                &operands,\n+                options,\n+                line_spans,\n+                instance,\n+                Some((ret_llbb, self.llblock(fx, cleanup), self.funclet(fx))),\n+            );\n+        } else {\n+            bx.codegen_inline_asm(template, &operands, options, line_spans, instance, None);\n+\n+            if let Some(target) = destination {\n+                self.funclet_br(fx, bx, target);\n+            } else {\n+                bx.unreachable();\n+            }\n+        }\n+    }\n }\n \n /// Codegen implementations for some terminator variants.\n@@ -877,6 +917,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         options: ast::InlineAsmOptions,\n         line_spans: &[Span],\n         destination: Option<mir::BasicBlock>,\n+        cleanup: Option<mir::BasicBlock>,\n         instance: Instance<'_>,\n     ) {\n         let span = terminator.source_info.span;\n@@ -931,13 +972,17 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             })\n             .collect();\n \n-        bx.codegen_inline_asm(template, &operands, options, line_spans, instance);\n-\n-        if let Some(target) = destination {\n-            helper.funclet_br(self, &mut bx, target);\n-        } else {\n-            bx.unreachable();\n-        }\n+        helper.do_inlineasm(\n+            self,\n+            &mut bx,\n+            template,\n+            &operands,\n+            options,\n+            line_spans,\n+            destination,\n+            cleanup,\n+            instance,\n+        );\n     }\n }\n \n@@ -1041,6 +1086,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 options,\n                 line_spans,\n                 destination,\n+                cleanup,\n             } => {\n                 self.codegen_asm_terminator(\n                     helper,\n@@ -1051,6 +1097,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     options,\n                     line_spans,\n                     destination,\n+                    cleanup,\n                     self.instance,\n                 );\n             }"}, {"sha": "65f3c754d2dccf408f5d84bee432c260f4bb58bf", "filename": "compiler/rustc_codegen_ssa/src/traits/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -59,6 +59,7 @@ pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n         instance: Instance<'_>,\n+        dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>,\n     );\n }\n "}, {"sha": "249b4ea0602c19cba7cef1324a16d391953dac87", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -7,6 +7,7 @@ use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{self, BasicBlock, Local, Location, Statement, StatementKind};\n use rustc_mir_dataflow::fmt::DebugWithContext;\n use rustc_mir_dataflow::JoinSemiLattice;\n+use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces};\n use rustc_span::DUMMY_SP;\n \n use std::fmt;\n@@ -80,18 +81,18 @@ where\n     fn apply_call_return_effect(\n         &mut self,\n         _block: BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        return_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        // We cannot reason about another function's internals, so use conservative type-based\n-        // qualification for the result of a function call.\n-        let return_ty = return_place.ty(self.ccx.body, self.ccx.tcx).ty;\n-        let qualif = Q::in_any_value_of_ty(self.ccx, return_ty);\n+        return_places.for_each(|place| {\n+            // We cannot reason about another function's internals, so use conservative type-based\n+            // qualification for the result of a function call.\n+            let return_ty = place.ty(self.ccx.body, self.ccx.tcx).ty;\n+            let qualif = Q::in_any_value_of_ty(self.ccx, return_ty);\n \n-        if !return_place.is_indirect() {\n-            self.assign_qualif_direct(&return_place, qualif);\n-        }\n+            if !place.is_indirect() {\n+                self.assign_qualif_direct(&place, qualif);\n+            }\n+        });\n     }\n \n     fn address_of_allows_mutation(&self, _mt: mir::Mutability, _place: mir::Place<'tcx>) -> bool {\n@@ -329,7 +330,7 @@ impl JoinSemiLattice for State {\n     }\n }\n \n-impl<Q> rustc_mir_dataflow::AnalysisDomain<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n+impl<Q> AnalysisDomain<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n where\n     Q: Qualif,\n {\n@@ -349,7 +350,7 @@ where\n     }\n }\n \n-impl<Q> rustc_mir_dataflow::Analysis<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n+impl<Q> Analysis<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n where\n     Q: Qualif,\n {\n@@ -375,10 +376,8 @@ where\n         &self,\n         state: &mut Self::Domain,\n         block: BasicBlock,\n-        func: &mir::Operand<'tcx>,\n-        args: &[mir::Operand<'tcx>],\n-        return_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        self.transfer_function(state).apply_call_return_effect(block, func, args, return_place)\n+        self.transfer_function(state).apply_call_return_effect(block, return_places)\n     }\n }"}, {"sha": "448a04f76b10ae5f3be154f1c1ccf35e44ef092a", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -495,10 +495,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n-            TerminatorKind::InlineAsm { destination, .. } => {\n+            TerminatorKind::InlineAsm { destination, cleanup, .. } => {\n                 if let Some(destination) = destination {\n                     self.check_edge(location, *destination, EdgeKind::Normal);\n                 }\n+                if let Some(cleanup) = cleanup {\n+                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n+                }\n             }\n             // Nothing to validate for these.\n             TerminatorKind::Resume"}, {"sha": "640c4bba6dafb43022f32959aff3075f164b9cbd", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -290,6 +290,8 @@ declare_features! (\n     (active, asm_experimental_arch, \"1.58.0\", Some(72016), None),\n     /// Allows using `sym` operands in inline assembly.\n     (active, asm_sym, \"1.58.0\", Some(72016), None),\n+    /// Allows the `may_unwind` option in inline assembly.\n+    (active, asm_unwind, \"1.58.0\", Some(72016), None),\n     /// Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n     /// Allows associated type defaults."}, {"sha": "18bc5bb64d6de781044f3547186563763863542c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1433,6 +1433,9 @@ impl<'a> State<'a> {\n                 if opts.contains(ast::InlineAsmOptions::RAW) {\n                     options.push(\"raw\");\n                 }\n+                if opts.contains(ast::InlineAsmOptions::MAY_UNWIND) {\n+                    options.push(\"may_unwind\");\n+                }\n                 s.commasep(Inconsistent, &options, |s, &opt| {\n                     s.word(opt);\n                 });"}, {"sha": "3fbf020c552d741842f715b26b2bbd23854a2e2c", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -445,11 +445,20 @@ extern \"C\" LLVMValueRef\n LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString, size_t AsmStringLen,\n                   char *Constraints, size_t ConstraintsLen,\n                   LLVMBool HasSideEffects, LLVMBool IsAlignStack,\n-                  LLVMRustAsmDialect Dialect) {\n+                  LLVMRustAsmDialect Dialect, LLVMBool CanThrow) {\n+#if LLVM_VERSION_GE(13, 0)\n+  return wrap(InlineAsm::get(unwrap<FunctionType>(Ty),\n+                             StringRef(AsmString, AsmStringLen),\n+                             StringRef(Constraints, ConstraintsLen),\n+                             HasSideEffects, IsAlignStack,\n+                             fromRust(Dialect), CanThrow));\n+#else\n   return wrap(InlineAsm::get(unwrap<FunctionType>(Ty),\n                              StringRef(AsmString, AsmStringLen),\n                              StringRef(Constraints, ConstraintsLen),\n-                             HasSideEffects, IsAlignStack, fromRust(Dialect)));\n+                             HasSideEffects, IsAlignStack,\n+                             fromRust(Dialect)));\n+#endif\n }\n \n extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty, char *Constraints,"}, {"sha": "a82f98d28e723f8dbfd19258ee1771919d105ec9", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -260,6 +260,10 @@ pub enum TerminatorKind<'tcx> {\n         /// Destination block after the inline assembly returns, unless it is\n         /// diverging (InlineAsmOptions::NORETURN).\n         destination: Option<BasicBlock>,\n+\n+        /// Cleanup to be done if the inline assembly unwinds. This is present\n+        /// if and only if InlineAsmOptions::MAY_UNWIND is set.\n+        cleanup: Option<BasicBlock>,\n     },\n }\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n@@ -309,7 +313,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Return\n             | Unreachable\n             | Call { destination: None, cleanup: None, .. }\n-            | InlineAsm { destination: None, .. } => None.into_iter().chain(&[]),\n+            | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),\n             Goto { target: ref t }\n             | Call { destination: None, cleanup: Some(ref t), .. }\n             | Call { destination: Some((_, ref t)), cleanup: None, .. }\n@@ -318,13 +322,17 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Drop { target: ref t, unwind: None, .. }\n             | Assert { target: ref t, cleanup: None, .. }\n             | FalseUnwind { real_target: ref t, unwind: None }\n-            | InlineAsm { destination: Some(ref t), .. } => Some(t).into_iter().chain(&[]),\n+            | InlineAsm { destination: Some(ref t), cleanup: None, .. }\n+            | InlineAsm { destination: None, cleanup: Some(ref t), .. } => {\n+                Some(t).into_iter().chain(&[])\n+            }\n             Call { destination: Some((_, ref t)), cleanup: Some(ref u), .. }\n             | Yield { resume: ref t, drop: Some(ref u), .. }\n             | DropAndReplace { target: ref t, unwind: Some(ref u), .. }\n             | Drop { target: ref t, unwind: Some(ref u), .. }\n             | Assert { target: ref t, cleanup: Some(ref u), .. }\n-            | FalseUnwind { real_target: ref t, unwind: Some(ref u) } => {\n+            | FalseUnwind { real_target: ref t, unwind: Some(ref u) }\n+            | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {\n                 Some(t).into_iter().chain(slice::from_ref(u))\n             }\n             SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets[..]),\n@@ -343,7 +351,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Return\n             | Unreachable\n             | Call { destination: None, cleanup: None, .. }\n-            | InlineAsm { destination: None, .. } => None.into_iter().chain(&mut []),\n+            | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),\n             Goto { target: ref mut t }\n             | Call { destination: None, cleanup: Some(ref mut t), .. }\n             | Call { destination: Some((_, ref mut t)), cleanup: None, .. }\n@@ -352,13 +360,17 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Drop { target: ref mut t, unwind: None, .. }\n             | Assert { target: ref mut t, cleanup: None, .. }\n             | FalseUnwind { real_target: ref mut t, unwind: None }\n-            | InlineAsm { destination: Some(ref mut t), .. } => Some(t).into_iter().chain(&mut []),\n+            | InlineAsm { destination: Some(ref mut t), cleanup: None, .. }\n+            | InlineAsm { destination: None, cleanup: Some(ref mut t), .. } => {\n+                Some(t).into_iter().chain(&mut [])\n+            }\n             Call { destination: Some((_, ref mut t)), cleanup: Some(ref mut u), .. }\n             | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n             | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }\n             | Drop { target: ref mut t, unwind: Some(ref mut u), .. }\n             | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }\n-            | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) } => {\n+            | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }\n+            | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {\n                 Some(t).into_iter().chain(slice::from_mut(u))\n             }\n             SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets[..]),\n@@ -378,13 +390,13 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::InlineAsm { .. } => None,\n+            | TerminatorKind::FalseEdge { .. } => None,\n             TerminatorKind::Call { cleanup: ref unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref unwind, .. }\n             | TerminatorKind::DropAndReplace { ref unwind, .. }\n             | TerminatorKind::Drop { ref unwind, .. }\n-            | TerminatorKind::FalseUnwind { ref unwind, .. } => Some(unwind),\n+            | TerminatorKind::FalseUnwind { ref unwind, .. }\n+            | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),\n         }\n     }\n \n@@ -398,13 +410,13 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::InlineAsm { .. } => None,\n+            | TerminatorKind::FalseEdge { .. } => None,\n             TerminatorKind::Call { cleanup: ref mut unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref mut unwind, .. }\n             | TerminatorKind::DropAndReplace { ref mut unwind, .. }\n             | TerminatorKind::Drop { ref mut unwind, .. }\n-            | TerminatorKind::FalseUnwind { ref mut unwind, .. } => Some(unwind),\n+            | TerminatorKind::FalseUnwind { ref mut unwind, .. }\n+            | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),\n         }\n     }\n \n@@ -583,8 +595,12 @@ impl<'tcx> TerminatorKind<'tcx> {\n             FalseEdge { .. } => vec![\"real\".into(), \"imaginary\".into()],\n             FalseUnwind { unwind: Some(_), .. } => vec![\"real\".into(), \"cleanup\".into()],\n             FalseUnwind { unwind: None, .. } => vec![\"real\".into()],\n-            InlineAsm { destination: Some(_), .. } => vec![\"\".into()],\n-            InlineAsm { destination: None, .. } => vec![],\n+            InlineAsm { destination: Some(_), cleanup: Some(_), .. } => {\n+                vec![\"return\".into(), \"unwind\".into()]\n+            }\n+            InlineAsm { destination: Some(_), cleanup: None, .. } => vec![\"return\".into()],\n+            InlineAsm { destination: None, cleanup: Some(_), .. } => vec![\"unwind\".into()],\n+            InlineAsm { destination: None, cleanup: None, .. } => vec![],\n         }\n     }\n }"}, {"sha": "901f3bf4f7d41b84603a6d89a04acfd670a59fee", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -84,13 +84,16 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 FalseEdge { real_target, imaginary_target }\n             }\n             FalseUnwind { real_target, unwind } => FalseUnwind { real_target, unwind },\n-            InlineAsm { template, operands, options, line_spans, destination } => InlineAsm {\n-                template,\n-                operands: operands.try_fold_with(folder)?,\n-                options,\n-                line_spans,\n-                destination,\n-            },\n+            InlineAsm { template, operands, options, line_spans, destination, cleanup } => {\n+                InlineAsm {\n+                    template,\n+                    operands: operands.try_fold_with(folder)?,\n+                    options,\n+                    line_spans,\n+                    destination,\n+                    cleanup,\n+                }\n+            }\n         };\n         Ok(Terminator { source_info: self.source_info, kind })\n     }"}, {"sha": "d783b6330e8e5dd0ad5d75bbc8d812cd517f7897", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -412,7 +412,7 @@ macro_rules! make_mir_visitor {\n                         for output in & $($mutability)? asm.outputs[..] {\n                             self.visit_place(\n                                 output,\n-                                PlaceContext::MutatingUse(MutatingUseContext::AsmOutput),\n+                                PlaceContext::MutatingUse(MutatingUseContext::LlvmAsmOutput),\n                                 location\n                             );\n                         }\n@@ -581,6 +581,7 @@ macro_rules! make_mir_visitor {\n                         options: _,\n                         line_spans: _,\n                         destination: _,\n+                        cleanup: _,\n                     } => {\n                         for op in operands {\n                             match op {\n@@ -590,7 +591,7 @@ macro_rules! make_mir_visitor {\n                                 InlineAsmOperand::Out { place: Some(place), .. } => {\n                                     self.visit_place(\n                                         place,\n-                                        PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                                        PlaceContext::MutatingUse(MutatingUseContext::AsmOutput),\n                                         location,\n                                     );\n                                 }\n@@ -599,7 +600,7 @@ macro_rules! make_mir_visitor {\n                                     if let Some(out_place) = out_place {\n                                         self.visit_place(\n                                             out_place,\n-                                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                                            PlaceContext::MutatingUse(MutatingUseContext::AsmOutput),\n                                             location,\n                                         );\n                                     }\n@@ -1178,8 +1179,10 @@ pub enum MutatingUseContext {\n     /// Appears as LHS of an assignment.\n     Store,\n     /// Can often be treated as a `Store`, but needs to be separate because\n-    /// ASM is allowed to read outputs as well, so a `Store`-`AsmOutput` sequence\n+    /// ASM is allowed to read outputs as well, so a `Store`-`LlvmAsmOutput` sequence\n     /// cannot be simplified the way a `Store`-`Store` can be.\n+    LlvmAsmOutput,\n+    /// Output operand of an inline assembly block.\n     AsmOutput,\n     /// Destination of a call.\n     Call,\n@@ -1268,6 +1271,7 @@ impl PlaceContext {\n             PlaceContext::MutatingUse(\n                 MutatingUseContext::Store\n                     | MutatingUseContext::Call\n+                    | MutatingUseContext::LlvmAsmOutput\n                     | MutatingUseContext::AsmOutput,\n             )\n         )"}, {"sha": "abec67af08bff17a5f2ba93f45069e21b1528013", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -467,8 +467,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         } else {\n                             Some(destination_block)\n                         },\n+                        cleanup: None,\n                     },\n                 );\n+                if options.contains(InlineAsmOptions::MAY_UNWIND) {\n+                    this.diverge_from(block);\n+                }\n                 destination_block.unit()\n             }\n "}, {"sha": "fc46c54c2fc35033769aa4b7d577c4b123acad45", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1034,6 +1034,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     | TerminatorKind::Call { .. }\n                     | TerminatorKind::DropAndReplace { .. }\n                     | TerminatorKind::FalseUnwind { .. }\n+                    | TerminatorKind::InlineAsm { .. }\n             ),\n             \"diverge_from called on block with terminator that cannot unwind.\"\n         );\n@@ -1373,7 +1374,8 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             | TerminatorKind::DropAndReplace { unwind, .. }\n             | TerminatorKind::FalseUnwind { unwind, .. }\n             | TerminatorKind::Call { cleanup: unwind, .. }\n-            | TerminatorKind::Assert { cleanup: unwind, .. } => {\n+            | TerminatorKind::Assert { cleanup: unwind, .. }\n+            | TerminatorKind::InlineAsm { cleanup: unwind, .. } => {\n                 *unwind = Some(to);\n             }\n             TerminatorKind::Goto { .. }\n@@ -1384,8 +1386,7 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::InlineAsm { .. } => {\n+            | TerminatorKind::FalseEdge { .. } => {\n                 span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n             }\n         }"}, {"sha": "6131ee7981829fdd7fceb2294eb534c0f18c0847", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -4,7 +4,9 @@ use rustc_middle::ty::TyCtxt;\n use std::ops::RangeInclusive;\n \n use super::visitor::{ResultsVisitable, ResultsVisitor};\n-use super::{Analysis, Effect, EffectIndex, GenKillAnalysis, GenKillSet, SwitchIntTarget};\n+use super::{\n+    Analysis, CallReturnPlaces, Effect, EffectIndex, GenKillAnalysis, GenKillSet, SwitchIntTarget,\n+};\n \n pub trait Direction {\n     fn is_forward() -> bool;\n@@ -235,14 +237,26 @@ impl Direction for Backward {\n                 // Apply terminator-specific edge effects.\n                 //\n                 // FIXME(ecstaticmorse): Avoid cloning the exit state unconditionally.\n-                mir::TerminatorKind::Call {\n-                    destination: Some((return_place, dest)),\n-                    ref func,\n-                    ref args,\n-                    ..\n+                mir::TerminatorKind::Call { destination: Some((return_place, dest)), .. }\n+                    if dest == bb =>\n+                {\n+                    let mut tmp = exit_state.clone();\n+                    analysis.apply_call_return_effect(\n+                        &mut tmp,\n+                        pred,\n+                        CallReturnPlaces::Call(return_place),\n+                    );\n+                    propagate(pred, &tmp);\n+                }\n+                mir::TerminatorKind::InlineAsm {\n+                    destination: Some(dest), ref operands, ..\n                 } if dest == bb => {\n                     let mut tmp = exit_state.clone();\n-                    analysis.apply_call_return_effect(&mut tmp, pred, func, args, return_place);\n+                    analysis.apply_call_return_effect(\n+                        &mut tmp,\n+                        pred,\n+                        CallReturnPlaces::InlineAsm(operands),\n+                    );\n                     propagate(pred, &tmp);\n                 }\n \n@@ -258,6 +272,7 @@ impl Direction for Backward {\n                 | mir::TerminatorKind::Drop { unwind: Some(unwind), .. }\n                 | mir::TerminatorKind::DropAndReplace { unwind: Some(unwind), .. }\n                 | mir::TerminatorKind::FalseUnwind { unwind: Some(unwind), .. }\n+                | mir::TerminatorKind::InlineAsm { cleanup: Some(unwind), .. }\n                     if unwind == bb =>\n                 {\n                     if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n@@ -467,7 +482,7 @@ impl Direction for Forward {\n                 propagate(target, exit_state);\n             }\n \n-            Call { cleanup, destination, ref func, ref args, from_hir_call: _, fn_span: _ } => {\n+            Call { cleanup, destination, func: _, args: _, from_hir_call: _, fn_span: _ } => {\n                 if let Some(unwind) = cleanup {\n                     if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n                         propagate(unwind, exit_state);\n@@ -477,13 +492,37 @@ impl Direction for Forward {\n                 if let Some((dest_place, target)) = destination {\n                     // N.B.: This must be done *last*, otherwise the unwind path will see the call\n                     // return effect.\n-                    analysis.apply_call_return_effect(exit_state, bb, func, args, dest_place);\n+                    analysis.apply_call_return_effect(\n+                        exit_state,\n+                        bb,\n+                        CallReturnPlaces::Call(dest_place),\n+                    );\n                     propagate(target, exit_state);\n                 }\n             }\n \n-            InlineAsm { template: _, operands: _, options: _, line_spans: _, destination } => {\n+            InlineAsm {\n+                template: _,\n+                ref operands,\n+                options: _,\n+                line_spans: _,\n+                destination,\n+                cleanup,\n+            } => {\n+                if let Some(unwind) = cleanup {\n+                    if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n+                        propagate(unwind, exit_state);\n+                    }\n+                }\n+\n                 if let Some(target) = destination {\n+                    // N.B.: This must be done *last*, otherwise the unwind path will see the call\n+                    // return effect.\n+                    analysis.apply_call_return_effect(\n+                        exit_state,\n+                        bb,\n+                        CallReturnPlaces::InlineAsm(operands),\n+                    );\n                     propagate(target, exit_state);\n                 }\n             }"}, {"sha": "517bc086ef683451b27108158b4936dfcbd24dc2", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::graphviz_safe_def_name;\n use rustc_middle::mir::{self, BasicBlock, Body, Location};\n \n use super::fmt::{DebugDiffWithAdapter, DebugWithAdapter, DebugWithContext};\n-use super::{Analysis, Direction, Results, ResultsRefCursor, ResultsVisitor};\n+use super::{Analysis, CallReturnPlaces, Direction, Results, ResultsRefCursor, ResultsVisitor};\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum OutputStyle {\n@@ -231,16 +231,15 @@ where\n         // for the basic block itself. That way, we could display terminator-specific effects for\n         // backward dataflow analyses as well as effects for `SwitchInt` terminators.\n         match terminator.kind {\n-            mir::TerminatorKind::Call {\n-                destination: Some((return_place, _)),\n-                ref func,\n-                ref args,\n-                ..\n-            } => {\n+            mir::TerminatorKind::Call { destination: Some((return_place, _)), .. } => {\n                 self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n                     let state_on_unwind = this.results.get().clone();\n                     this.results.apply_custom_effect(|analysis, state| {\n-                        analysis.apply_call_return_effect(state, block, func, args, return_place);\n+                        analysis.apply_call_return_effect(\n+                            state,\n+                            block,\n+                            CallReturnPlaces::Call(return_place),\n+                        );\n                     });\n \n                     write!(\n@@ -278,6 +277,31 @@ where\n                 })?;\n             }\n \n+            mir::TerminatorKind::InlineAsm { destination: Some(_), ref operands, .. } => {\n+                self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n+                    let state_on_unwind = this.results.get().clone();\n+                    this.results.apply_custom_effect(|analysis, state| {\n+                        analysis.apply_call_return_effect(\n+                            state,\n+                            block,\n+                            CallReturnPlaces::InlineAsm(operands),\n+                        );\n+                    });\n+\n+                    write!(\n+                        w,\n+                        r#\"<td balign=\"left\" colspan=\"{colspan}\" {fmt} align=\"left\">{diff}</td>\"#,\n+                        colspan = this.style.num_state_columns(),\n+                        fmt = fmt,\n+                        diff = diff_pretty(\n+                            this.results.get(),\n+                            &state_on_unwind,\n+                            this.results.analysis()\n+                        ),\n+                    )\n+                })?;\n+            }\n+\n             _ => {}\n         };\n "}, {"sha": "500fba8b1142cb364822428df8d2d038d6c66764", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -160,9 +160,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n         &self,\n         state: &mut Self::Domain,\n         block: BasicBlock,\n-        func: &mir::Operand<'tcx>,\n-        args: &[mir::Operand<'tcx>],\n-        return_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     );\n \n     /// Updates the current dataflow state with the effect of resuming from a `Yield` terminator.\n@@ -276,9 +274,7 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         block: BasicBlock,\n-        func: &mir::Operand<'tcx>,\n-        args: &[mir::Operand<'tcx>],\n-        return_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     );\n \n     /// See `Analysis::apply_yield_resume_effect`.\n@@ -347,11 +343,9 @@ where\n         &self,\n         state: &mut A::Domain,\n         block: BasicBlock,\n-        func: &mir::Operand<'tcx>,\n-        args: &[mir::Operand<'tcx>],\n-        return_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        self.call_return_effect(state, block, func, args, return_place);\n+        self.call_return_effect(state, block, return_places);\n     }\n \n     fn apply_yield_resume_effect(\n@@ -542,5 +536,29 @@ pub trait SwitchIntEdgeEffects<D> {\n     fn apply(&mut self, apply_edge_effect: impl FnMut(&mut D, SwitchIntTarget));\n }\n \n+/// List of places that are written to after a successful (non-unwind) return\n+/// from a `Call` or `InlineAsm`.\n+pub enum CallReturnPlaces<'a, 'tcx> {\n+    Call(mir::Place<'tcx>),\n+    InlineAsm(&'a [mir::InlineAsmOperand<'tcx>]),\n+}\n+\n+impl<'tcx> CallReturnPlaces<'_, 'tcx> {\n+    pub fn for_each(&self, mut f: impl FnMut(mir::Place<'tcx>)) {\n+        match *self {\n+            Self::Call(place) => f(place),\n+            Self::InlineAsm(operands) => {\n+                for op in operands {\n+                    match *op {\n+                        mir::InlineAsmOperand::Out { place: Some(place), .. }\n+                        | mir::InlineAsmOperand::InOut { out_place: Some(place), .. } => f(place),\n+                        _ => {}\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "01ca8ca9258fb769f3e3ae3032a75d6db780af10", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -220,9 +220,7 @@ impl<D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n         &self,\n         _state: &mut Self::Domain,\n         _block: BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        _return_place: mir::Place<'tcx>,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n     }\n }"}, {"sha": "6df2c8df3cea0840af30fda3e4dd48a53389277a", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-use crate::{AnalysisDomain, GenKill, GenKillAnalysis};\n+use crate::{AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis};\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n \n@@ -84,9 +84,7 @@ impl GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n         &self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        _dest_place: mir::Place<'tcx>,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n     }\n }"}, {"sha": "df13b5c33940a0fe4e28a3d86dcadf2b9105c8ca", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -2,7 +2,7 @@\n //!\n //! A local will be maybe initialized if *any* projections of that local might be initialized.\n \n-use crate::GenKill;\n+use crate::{CallReturnPlaces, GenKill};\n \n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n@@ -53,11 +53,9 @@ impl crate::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        return_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        trans.gen(return_place.local)\n+        return_places.for_each(|place| trans.gen(place.local));\n     }\n \n     /// See `Analysis::apply_yield_resume_effect`.\n@@ -83,7 +81,11 @@ where\n         use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, NonUseContext};\n         match context {\n             // These are handled specially in `call_return_effect` and `yield_resume_effect`.\n-            PlaceContext::MutatingUse(MutatingUseContext::Call | MutatingUseContext::Yield) => {}\n+            PlaceContext::MutatingUse(\n+                MutatingUseContext::Call\n+                | MutatingUseContext::AsmOutput\n+                | MutatingUseContext::Yield,\n+            ) => {}\n \n             // Otherwise, when a place is mutated, we must consider it possibly initialized.\n             PlaceContext::MutatingUse(_) => self.trans.gen(local),"}, {"sha": "5be9df6c452a2214235ffa5e889aa1af1379c489", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -2,7 +2,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Local, Location};\n \n-use crate::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n+use crate::{AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKillAnalysis};\n \n /// A [live-variable dataflow analysis][liveness].\n ///\n@@ -94,13 +94,13 @@ impl GenKillAnalysis<'tcx> for MaybeLiveLocals {\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        dest_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        if let Some(local) = dest_place.as_local() {\n-            trans.kill(local);\n-        }\n+        return_places.for_each(|place| {\n+            if let Some(local) = place.as_local() {\n+                trans.kill(local);\n+            }\n+        });\n     }\n \n     fn yield_resume_effect(\n@@ -167,12 +167,16 @@ impl DefUse {\n             // destination place for a `Call` return or `Yield` resume respectively. Since this is\n             // only a `Def` when the function returns successfully, we handle this case separately\n             // in `call_return_effect` above.\n-            PlaceContext::MutatingUse(MutatingUseContext::Call | MutatingUseContext::Yield) => None,\n+            PlaceContext::MutatingUse(\n+                MutatingUseContext::Call\n+                | MutatingUseContext::AsmOutput\n+                | MutatingUseContext::Yield,\n+            ) => None,\n \n             // All other contexts are uses...\n             PlaceContext::MutatingUse(\n                 MutatingUseContext::AddressOf\n-                | MutatingUseContext::AsmOutput\n+                | MutatingUseContext::LlvmAsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::Drop\n                 | MutatingUseContext::Retag,"}, {"sha": "5659fd2dc70750c62903799b906b7786fe19db10", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 44, "deletions": 46, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::{self, TyCtxt};\n use crate::drop_flag_effects_for_function_entry;\n use crate::drop_flag_effects_for_location;\n use crate::elaborate_drops::DropFlagState;\n-use crate::framework::SwitchIntEdgeEffects;\n+use crate::framework::{CallReturnPlaces, SwitchIntEdgeEffects};\n use crate::move_paths::{HasMoveData, InitIndex, InitKind, LookupResult, MoveData, MovePathIndex};\n use crate::on_lookup_result_bits;\n use crate::MoveDataParamEnv;\n@@ -354,21 +354,21 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        dest_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        // when a call returns successfully, that means we need to set\n-        // the bits for that dest_place to 1 (initialized).\n-        on_lookup_result_bits(\n-            self.tcx,\n-            self.body,\n-            self.move_data(),\n-            self.move_data().rev_lookup.find(dest_place.as_ref()),\n-            |mpi| {\n-                trans.gen(mpi);\n-            },\n-        );\n+        return_places.for_each(|place| {\n+            // when a call returns successfully, that means we need to set\n+            // the bits for that dest_place to 1 (initialized).\n+            on_lookup_result_bits(\n+                self.tcx,\n+                self.body,\n+                self.move_data(),\n+                self.move_data().rev_lookup.find(place.as_ref()),\n+                |mpi| {\n+                    trans.gen(mpi);\n+                },\n+            );\n+        });\n     }\n \n     fn switch_int_edge_effects<G: GenKill<Self::Idx>>(\n@@ -472,21 +472,21 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        dest_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        // when a call returns successfully, that means we need to set\n-        // the bits for that dest_place to 0 (initialized).\n-        on_lookup_result_bits(\n-            self.tcx,\n-            self.body,\n-            self.move_data(),\n-            self.move_data().rev_lookup.find(dest_place.as_ref()),\n-            |mpi| {\n-                trans.kill(mpi);\n-            },\n-        );\n+        return_places.for_each(|place| {\n+            // when a call returns successfully, that means we need to set\n+            // the bits for that dest_place to 0 (initialized).\n+            on_lookup_result_bits(\n+                self.tcx,\n+                self.body,\n+                self.move_data(),\n+                self.move_data().rev_lookup.find(place.as_ref()),\n+                |mpi| {\n+                    trans.kill(mpi);\n+                },\n+            );\n+        });\n     }\n \n     fn switch_int_edge_effects<G: GenKill<Self::Idx>>(\n@@ -591,21 +591,21 @@ impl<'tcx> GenKillAnalysis<'tcx> for DefinitelyInitializedPlaces<'_, 'tcx> {\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        dest_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        // when a call returns successfully, that means we need to set\n-        // the bits for that dest_place to 1 (initialized).\n-        on_lookup_result_bits(\n-            self.tcx,\n-            self.body,\n-            self.move_data(),\n-            self.move_data().rev_lookup.find(dest_place.as_ref()),\n-            |mpi| {\n-                trans.gen(mpi);\n-            },\n-        );\n+        return_places.for_each(|place| {\n+            // when a call returns successfully, that means we need to set\n+            // the bits for that dest_place to 1 (initialized).\n+            on_lookup_result_bits(\n+                self.tcx,\n+                self.body,\n+                self.move_data(),\n+                self.move_data().rev_lookup.find(place.as_ref()),\n+                |mpi| {\n+                    trans.gen(mpi);\n+                },\n+            );\n+        });\n     }\n }\n \n@@ -679,9 +679,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         block: mir::BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        _dest_place: mir::Place<'tcx>,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n         let move_data = self.move_data();\n         let init_loc_map = &move_data.init_loc_map;"}, {"sha": "108357abc0de02886d3aba76941daf2aa006b0ea", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1,7 +1,7 @@\n pub use super::*;\n \n use crate::storage::AlwaysLiveLocals;\n-use crate::{GenKill, Results, ResultsRefCursor};\n+use crate::{CallReturnPlaces, GenKill, Results, ResultsRefCursor};\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use std::cell::RefCell;\n@@ -68,9 +68,7 @@ impl crate::GenKillAnalysis<'tcx> for MaybeStorageLive {\n         &self,\n         _trans: &mut impl GenKill<Self::Idx>,\n         _block: BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        _return_place: mir::Place<'tcx>,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n         // Nothing to do when a call returns successfully\n     }\n@@ -226,7 +224,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n         terminator: &mir::Terminator<'tcx>,\n         loc: Location,\n     ) {\n-        match &terminator.kind {\n+        match terminator.kind {\n             // For call terminators the destination requires storage for the call\n             // and after the call returns successfully, but not after a panic.\n             // Since `propagate_call_unwind` doesn't exist, we have to kill the\n@@ -235,6 +233,11 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n                 trans.kill(place.local);\n             }\n \n+            // The same applies to InlineAsm outputs.\n+            TerminatorKind::InlineAsm { ref operands, .. } => {\n+                CallReturnPlaces::InlineAsm(operands).for_each(|place| trans.kill(place.local));\n+            }\n+\n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n             TerminatorKind::Call { destination: None, .. }\n@@ -247,7 +250,6 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Goto { .. }\n-            | TerminatorKind::InlineAsm { .. }\n             | TerminatorKind::Resume\n             | TerminatorKind::Return\n             | TerminatorKind::SwitchInt { .. }\n@@ -261,11 +263,9 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n         _block: BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        return_place: mir::Place<'tcx>,\n+        return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n-        trans.gen(return_place.local);\n+        return_places.for_each(|place| trans.gen(place.local));\n     }\n \n     fn yield_resume_effect("}, {"sha": "10d2cf6eba03de5869efc52f0eebf04a61aecfe2", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -28,9 +28,9 @@ pub use self::drop_flag_effects::{\n     on_lookup_result_bits,\n };\n pub use self::framework::{\n-    fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, Direction, Engine,\n-    Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor, ResultsRefCursor,\n-    ResultsVisitable, ResultsVisitor,\n+    fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, CallReturnPlaces,\n+    Direction, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor,\n+    ResultsRefCursor, ResultsVisitable, ResultsVisitor,\n };\n \n use self::move_paths::MoveData;"}, {"sha": "feb85d4ffdfa881126ea178fc02d136df323d56e", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -419,6 +419,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n+                cleanup: _,\n             } => {\n                 for op in operands {\n                     match *op {"}, {"sha": "cdfeb957df9b1f1c38eff3d3a1dcf35e35ae8141", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -208,6 +208,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                             MutatingUseContext::Store\n                                 | MutatingUseContext::Drop\n                                 | MutatingUseContext::AsmOutput\n+                                | MutatingUseContext::LlvmAsmOutput\n                         )\n                     );\n                 // If this is just an assignment, determine if the assigned type needs dropping."}, {"sha": "4bfa1de7a3b3f33922d77e916d3d7def336c2b7a", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -1022,6 +1022,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             // These are just stores, where the storing is not propagatable, but there may be later\n             // mutations of the same local via `Store`\n             | MutatingUse(MutatingUseContext::Call)\n+            | MutatingUse(MutatingUseContext::AsmOutput)\n             // Actual store that can possibly even propagate a value\n             | MutatingUse(MutatingUseContext::Store) => {\n                 if !self.found_assignment.insert(local) {\n@@ -1052,7 +1053,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n \n             // These could be propagated with a smarter analysis or just some careful thinking about\n             // whether they'd be fine right now.\n-            MutatingUse(MutatingUseContext::AsmOutput)\n+            MutatingUse(MutatingUseContext::LlvmAsmOutput)\n             | MutatingUse(MutatingUseContext::Yield)\n             | MutatingUse(MutatingUseContext::Drop)\n             | MutatingUse(MutatingUseContext::Retag)"}, {"sha": "f3217f0b9b68b3d697b6d9e97ac3456a117f4a5b", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -624,6 +624,7 @@ impl Conflicts<'a> {\n                 options: _,\n                 line_spans: _,\n                 destination: _,\n+                cleanup: _,\n             } => {\n                 // The intended semantics here aren't documented, we just assume that nothing that\n                 // could be written to by the assembly may overlap with any other operands."}, {"sha": "4dacd4c288a277326d2b413bb74b17a63b2cae8a", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -441,6 +441,13 @@ impl Inliner<'tcx> {\n                     }\n                 }\n                 TerminatorKind::Resume => cost += RESUME_PENALTY,\n+                TerminatorKind::InlineAsm { cleanup, .. } => {\n+                    cost += INSTR_COST;\n+\n+                    if cleanup.is_some() {\n+                        cost += LANDINGPAD_PENALTY;\n+                    }\n+                }\n                 _ => cost += INSTR_COST,\n             }\n \n@@ -954,9 +961,13 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n             {\n                 bug!(\"False unwinds should have been removed before inlining\")\n             }\n-            TerminatorKind::InlineAsm { ref mut destination, .. } => {\n+            TerminatorKind::InlineAsm { ref mut destination, ref mut cleanup, .. } => {\n                 if let Some(ref mut tgt) = *destination {\n                     *tgt = self.map_block(*tgt);\n+                } else if !self.in_cleanup_block {\n+                    // Unless this inline asm is in a cleanup block, add an unwind edge to\n+                    // the original call's cleanup block\n+                    *cleanup = self.cleanup_block;\n                 }\n             }\n         }"}, {"sha": "309c305293fd6e54e6ffe3d6af4b229d214b67bc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -332,6 +332,7 @@ symbols! {\n         asm_const,\n         asm_experimental_arch,\n         asm_sym,\n+        asm_unwind,\n         assert,\n         assert_inhabited,\n         assert_macro,\n@@ -817,6 +818,7 @@ symbols! {\n         maxnumf32,\n         maxnumf64,\n         may_dangle,\n+        may_unwind,\n         maybe_uninit,\n         maybe_uninit_uninit,\n         maybe_uninit_zeroed,"}, {"sha": "fa238a8b3bc6591a55ed18b9403675440464b024", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -454,7 +454,7 @@ operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\n reg_operand := dir_spec \"(\" reg_spec \")\" operand_expr\n operand := reg_operand / \"const\" const_expr / \"sym\" path\n clobber_abi := \"clobber_abi(\" <abi> *[\",\" <abi>] [\",\"] \")\"\n-option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\n+option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\" / \"may_unwind\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) *(\",\" clobber_abi) *(\",\" options) [\",\"] \")\"\n ```\n@@ -829,6 +829,7 @@ Currently the following options are defined:\n - `noreturn`: The `asm` block never returns, and its return type is defined as `!` (never). Behavior is undefined if execution falls through past the end of the asm code. A `noreturn` asm block behaves just like a function which doesn't return; notably, local variables in scope are not dropped before it is invoked.\n - `nostack`: The `asm` block does not push data to the stack, or write to the stack red-zone (if supported by the target). If this option is *not* used then the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.\n - `att_syntax`: This option is only valid on x86, and causes the assembler to use the `.att_syntax prefix` mode of the GNU assembler. Register operands are substituted in with a leading `%`.\n+- `may_unwind`: The `asm` block may unwind the stack and be part of the stack unwinding process (This option is only supported by the LLVM backend right now).\n - `raw`: This causes the template string to be parsed as a raw assembly string, with no special handling for `{` and `}`. This is primarily useful when including raw assembly code from an external file using `include_str!`.\n \n The compiler performs some additional checks on options:"}, {"sha": "85cae8b2b1c674bb5034bdf879ef36d654e3b060", "filename": "src/test/codegen/asm-may_unwind.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -0,0 +1,25 @@\n+// min-llvm-version: 13.0.0\n+// compile-flags: -O\n+// only-x86_64\n+\n+#![crate_type = \"rlib\"]\n+#![feature(asm, asm_unwind)]\n+\n+#[no_mangle]\n+pub extern \"C\" fn panicky() {}\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!();\n+    }\n+}\n+\n+// CHECK-LABEL: @may_unwind\n+#[no_mangle]\n+pub unsafe fn may_unwind() {\n+    let _m = Foo;\n+    // CHECK: invoke void asm sideeffect alignstack inteldialect unwind \"\"\n+    asm!(\"\", options(may_unwind));\n+}"}, {"sha": "867e0433eae1bece783672fd52c8dcf4c2ebac31", "filename": "src/test/ui/asm/aarch64/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -36,41 +36,41 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"));\n    |                    |\n    |                    generic outputs\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:28:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:30:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:32:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:34:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:36:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:38:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n error: invalid ABI for `clobber_abi`\n   --> $DIR/bad-options.rs:20:18"}, {"sha": "94cc7d750491a9d0bcb7616eda308d247b6dd87b", "filename": "src/test/ui/asm/aarch64/may_unwind.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -0,0 +1,37 @@\n+// min-llvm-version: 13.0.0\n+// only-aarch64\n+// run-pass\n+// needs-asm-support\n+\n+#![feature(asm, asm_sym, asm_unwind)]\n+\n+use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};\n+\n+struct Foo<'a>(&'a mut bool);\n+\n+impl Drop for Foo<'_> {\n+    fn drop(&mut self) {\n+        *self.0 = false;\n+    }\n+}\n+\n+extern \"C\" fn panicky() {\n+    resume_unwind(Box::new(()));\n+}\n+\n+fn main() {\n+    let flag = &mut true;\n+    catch_unwind(AssertUnwindSafe(|| {\n+        let _foo = Foo(flag);\n+        unsafe {\n+            asm!(\n+                \"bl {}\",\n+                sym panicky,\n+                clobber_abi(\"C\"),\n+                options(may_unwind)\n+            );\n+        }\n+    }))\n+    .expect_err(\"expected a panic\");\n+    assert_eq!(*flag, false);\n+}"}, {"sha": "a143c3b2b28180ea94aa8d112035957ec4cfbcc4", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -64,23 +64,23 @@ error: argument to `sym` must be a path expression\n LL |         asm!(\"{}\", sym foo + bar);\n    |                        ^^^^^^^^^\n \n-error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n   --> $DIR/parse-error.rs:31:26\n    |\n LL |         asm!(\"\", options(foo));\n-   |                          ^^^ expected one of 9 possible tokens\n+   |                          ^^^ expected one of 10 possible tokens\n \n error: expected one of `)` or `,`, found `foo`\n   --> $DIR/parse-error.rs:33:32\n    |\n LL |         asm!(\"\", options(nomem foo));\n    |                                ^^^ expected one of `)` or `,`\n \n-error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n   --> $DIR/parse-error.rs:35:33\n    |\n LL |         asm!(\"\", options(nomem, foo));\n-   |                                 ^^^ expected one of 9 possible tokens\n+   |                                 ^^^ expected one of 10 possible tokens\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:37:31\n@@ -260,23 +260,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:100:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:106:30"}, {"sha": "436e8b9d95a892d03d497e670806952c982360ee", "filename": "src/test/ui/asm/may_unwind.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fmay_unwind.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -0,0 +1,9 @@\n+// min-llvm-version: 13.0.0\n+// run-pass\n+// needs-asm-support\n+\n+#![feature(asm, asm_unwind)]\n+\n+fn main() {\n+    unsafe { asm!(\"\", options(may_unwind)) };\n+}"}, {"sha": "a63c42aac27377d543b3385867ea922774c2036b", "filename": "src/test/ui/asm/x86_64/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -45,41 +45,41 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                    |             clobber_abi\n    |                    generic outputs\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:31:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:33:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:35:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:37:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:39:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:41:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n error: invalid ABI for `clobber_abi`\n   --> $DIR/bad-options.rs:20:18"}, {"sha": "5ac4dd9b956d70662e624642dfffd72657b23b3f", "filename": "src/test/ui/asm/x86_64/may_unwind.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -0,0 +1,37 @@\n+// min-llvm-version: 13.0.0\n+// only-x86_64\n+// run-pass\n+// needs-asm-support\n+\n+#![feature(asm, asm_sym, asm_unwind)]\n+\n+use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};\n+\n+struct Foo<'a>(&'a mut bool);\n+\n+impl Drop for Foo<'_> {\n+    fn drop(&mut self) {\n+        *self.0 = false;\n+    }\n+}\n+\n+extern \"C\" fn panicky() {\n+    resume_unwind(Box::new(()));\n+}\n+\n+fn main() {\n+    let flag = &mut true;\n+    catch_unwind(AssertUnwindSafe(|| {\n+        let _foo = Foo(flag);\n+        unsafe {\n+            asm!(\n+                \"call {}\",\n+                sym panicky,\n+                clobber_abi(\"C\"),\n+                options(may_unwind)\n+            );\n+        }\n+    }))\n+    .expect_err(\"expected a panic\");\n+    assert_eq!(*flag, false);\n+}"}, {"sha": "4f16c15af381c5b8ffa789f2ee64d06045b20f53", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -64,23 +64,23 @@ error: argument to `sym` must be a path expression\n LL |         asm!(\"{}\", sym foo + bar);\n    |                        ^^^^^^^^^\n \n-error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n   --> $DIR/parse-error.rs:31:26\n    |\n LL |         asm!(\"\", options(foo));\n-   |                          ^^^ expected one of 9 possible tokens\n+   |                          ^^^ expected one of 10 possible tokens\n \n error: expected one of `)` or `,`, found `foo`\n   --> $DIR/parse-error.rs:33:32\n    |\n LL |         asm!(\"\", options(nomem foo));\n    |                                ^^^ expected one of `)` or `,`\n \n-error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n   --> $DIR/parse-error.rs:35:33\n    |\n LL |         asm!(\"\", options(nomem, foo));\n-   |                                 ^^^ expected one of 9 possible tokens\n+   |                                 ^^^ expected one of 10 possible tokens\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:37:31\n@@ -266,23 +266,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:108:30"}, {"sha": "c9957ff91d5832139399bb868fbaeaa314ad47d1", "filename": "src/test/ui/feature-gates/feature-gate-asm_unwind.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -0,0 +1,10 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", options(may_unwind));\n+        //~^ ERROR the `may_unwind` option is unstable\n+    }\n+}"}, {"sha": "6b5bf286e7bca2ff8eb7f01efa1c84826b2e7a39", "filename": "src/test/ui/feature-gates/feature-gate-asm_unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_unwind.stderr?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `may_unwind` option is unstable\n+  --> $DIR/feature-gate-asm_unwind.rs:7:9\n+   |\n+LL |         asm!(\"\", options(may_unwind));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n+   = help: add `#![feature(asm_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0eba6633ee19b36650bd3ee15b863fa43dba4661", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887999d163bace7e79370b952bdd1f930ff4cdd5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=887999d163bace7e79370b952bdd1f930ff4cdd5", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::{\n     Mutability,\n };\n use rustc_middle::ty::{self, fold::TypeVisitor, Ty, TyCtxt};\n-use rustc_mir_dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n+use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::sym;\n@@ -499,11 +499,9 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n \n     fn call_return_effect(\n         &self,\n-        _in_out: &mut impl GenKill<Self::Idx>,\n+        _trans: &mut impl GenKill<Self::Idx>,\n         _block: mir::BasicBlock,\n-        _func: &mir::Operand<'tcx>,\n-        _args: &[mir::Operand<'tcx>],\n-        _return_place: mir::Place<'tcx>,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n     ) {\n         // Nothing to do when a call returns successfully\n     }"}]}