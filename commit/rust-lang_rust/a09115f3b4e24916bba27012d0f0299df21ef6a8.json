{"sha": "a09115f3b4e24916bba27012d0f0299df21ef6a8", "node_id": "C_kwDOAAsO6NoAKGEwOTExNWYzYjRlMjQ5MTZiYmEyNzAxMmQwZjAyOTlkZjIxZWY2YTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-10T22:04:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-10T22:04:25Z"}, "message": "Rollup merge of #89930 - cuviper:avoid-clone3, r=joshtriplett\n\nOnly use `clone3` when needed for pidfd\n\nIn #89522 we learned that `clone3` is interacting poorly with Gentoo's\n`sandbox` tool. We only need that for the unstable pidfd extensions, so\notherwise avoid that and use a normal `fork`.\n\nThis is a re-application of beta #89924, now that we're aware that we need\nmore than just a temporary release fix. I also reverted 12fbabd27f700, as\nthat was just fallout from using `clone3` instead of `fork`.\n\nr? `@Mark-Simulacrum`\ncc `@joshtriplett`", "tree": {"sha": "122d01f4c10dfa0c0c80e31476789b4ab22a8fde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/122d01f4c10dfa0c0c80e31476789b4ab22a8fde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09115f3b4e24916bba27012d0f0299df21ef6a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhjEHpCRBK7hj4Ov3rIwAA5SQIAJBFLeYp/MWYSE2SHPBhmQpg\nAuoz7JTh/8cefzlZC07wGMdFTvXB3Snr5ZFbMUf1u7aoBYKfqFLeBudGcYdtGHAr\nNibYWEIuPifWGLCbI4OQGDf7jB5tRZiI7JPkpHm8Wdxqnp1O3U6K2AvUduUsS3t1\n7ASrvj79tMwOT9h1wfJ3fDCeybhlIxkov2OLXkV6PcRQFwiVbajEoF7aZGVdoqY6\ncMxCbx9yz5MPqqUtPN2qcvfCyqlNES9guazRzzshAEUC4BRi/XyUjJWVLa1zG+e6\nYXHOWXuJu08E2c+dltFoXFjlHf0AlPjrJUkBWKUWVQ9f+w909XsPjrKVurZFkG8=\n=6/Id\n-----END PGP SIGNATURE-----\n", "payload": "tree 122d01f4c10dfa0c0c80e31476789b4ab22a8fde\nparent 68ca579406f2fa9ec62710e4a4d5d3e07a168d3c\nparent e96a0a8681998caf78093b65e746bfd967cb87e9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636581865 +0100\ncommitter GitHub <noreply@github.com> 1636581865 +0100\n\nRollup merge of #89930 - cuviper:avoid-clone3, r=joshtriplett\n\nOnly use `clone3` when needed for pidfd\n\nIn #89522 we learned that `clone3` is interacting poorly with Gentoo's\n`sandbox` tool. We only need that for the unstable pidfd extensions, so\notherwise avoid that and use a normal `fork`.\n\nThis is a re-application of beta #89924, now that we're aware that we need\nmore than just a temporary release fix. I also reverted 12fbabd27f700, as\nthat was just fallout from using `clone3` instead of `fork`.\n\nr? `@Mark-Simulacrum`\ncc `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09115f3b4e24916bba27012d0f0299df21ef6a8", "html_url": "https://github.com/rust-lang/rust/commit/a09115f3b4e24916bba27012d0f0299df21ef6a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09115f3b4e24916bba27012d0f0299df21ef6a8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ca579406f2fa9ec62710e4a4d5d3e07a168d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c", "html_url": "https://github.com/rust-lang/rust/commit/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c"}, {"sha": "e96a0a8681998caf78093b65e746bfd967cb87e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e96a0a8681998caf78093b65e746bfd967cb87e9", "html_url": "https://github.com/rust-lang/rust/commit/e96a0a8681998caf78093b65e746bfd967cb87e9"}], "stats": {"total": 61, "additions": 17, "deletions": 44}, "files": [{"sha": "326382d9038a8a1e2c9c36361e07e58a89bcc4f1", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a09115f3b4e24916bba27012d0f0299df21ef6a8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09115f3b4e24916bba27012d0f0299df21ef6a8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=a09115f3b4e24916bba27012d0f0299df21ef6a8", "patch": "@@ -166,21 +166,22 @@ impl Command {\n             fn clone3(cl_args: *mut clone_args, len: libc::size_t) -> libc::c_long\n         }\n \n+        // Bypassing libc for `clone3` can make further libc calls unsafe,\n+        // so we use it sparingly for now. See #89522 for details.\n+        // Some tools (e.g. sandboxing tools) may also expect `fork`\n+        // rather than `clone3`.\n+        let want_clone3_pidfd = self.get_create_pidfd();\n+\n         // If we fail to create a pidfd for any reason, this will\n         // stay as -1, which indicates an error.\n         let mut pidfd: pid_t = -1;\n \n         // Attempt to use the `clone3` syscall, which supports more arguments\n         // (in particular, the ability to create a pidfd). If this fails,\n         // we will fall through this block to a call to `fork()`\n-        if HAS_CLONE3.load(Ordering::Relaxed) {\n-            let mut flags = 0;\n-            if self.get_create_pidfd() {\n-                flags |= CLONE_PIDFD;\n-            }\n-\n+        if want_clone3_pidfd && HAS_CLONE3.load(Ordering::Relaxed) {\n             let mut args = clone_args {\n-                flags,\n+                flags: CLONE_PIDFD,\n                 pidfd: &mut pidfd as *mut pid_t as u64,\n                 child_tid: 0,\n                 parent_tid: 0,\n@@ -212,8 +213,8 @@ impl Command {\n             }\n         }\n \n-        // If we get here, the 'clone3' syscall does not exist\n-        // or we do not have permission to call it\n+        // Generally, we just call `fork`. If we get here after wanting `clone3`,\n+        // then the syscall does not exist or we do not have permission to call it.\n         cvt(libc::fork()).map(|res| (res, pidfd))\n     }\n "}, {"sha": "61914e2293070459c03ee0a6c66edf2975e7829a", "filename": "src/test/ui/command/command-pre-exec.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a09115f3b4e24916bba27012d0f0299df21ef6a8/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09115f3b4e24916bba27012d0f0299df21ef6a8/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs?ref=a09115f3b4e24916bba27012d0f0299df21ef6a8", "patch": "@@ -8,30 +8,15 @@\n // ignore-sgx no processes\n #![feature(process_exec, rustc_private)]\n \n+extern crate libc;\n+\n use std::env;\n use std::io::Error;\n use std::os::unix::process::CommandExt;\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::Arc;\n \n-#[cfg(not(target_os = \"linux\"))]\n-fn getpid() -> u32 {\n-    use std::process;\n-    process::id()\n-}\n-\n-/// We need to directly use the getpid syscall instead of using `process::id()`\n-/// because the libc wrapper might return incorrect values after a process was\n-/// forked.\n-#[cfg(target_os = \"linux\")]\n-fn getpid() -> u32 {\n-    extern crate libc;\n-    unsafe {\n-        libc::syscall(libc::SYS_getpid) as _\n-    }\n-}\n-\n fn main() {\n     if let Some(arg) = env::args().nth(1) {\n         match &arg[..] {\n@@ -83,12 +68,14 @@ fn main() {\n     };\n     assert_eq!(output.raw_os_error(), Some(102));\n \n-    let pid = getpid();\n+    let pid = unsafe { libc::getpid() };\n+    assert!(pid >= 0);\n     let output = unsafe {\n         Command::new(&me)\n             .arg(\"empty\")\n             .pre_exec(move || {\n-                let child = getpid();\n+                let child = libc::getpid();\n+                assert!(child >= 0);\n                 assert!(pid != child);\n                 Ok(())\n             })"}, {"sha": "1ccf6bb051c20593c0e4d6f90f04669fbe8673e3", "filename": "src/test/ui/process/process-panic-after-fork.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a09115f3b4e24916bba27012d0f0299df21ef6a8/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09115f3b4e24916bba27012d0f0299df21ef6a8/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs?ref=a09115f3b4e24916bba27012d0f0299df21ef6a8", "patch": "@@ -23,21 +23,6 @@ use std::sync::atomic::{AtomicU32, Ordering};\n \n use libc::c_int;\n \n-#[cfg(not(target_os = \"linux\"))]\n-fn getpid() -> u32 {\n-    process::id()\n-}\n-\n-/// We need to directly use the getpid syscall instead of using `process::id()`\n-/// because the libc wrapper might return incorrect values after a process was\n-/// forked.\n-#[cfg(target_os = \"linux\")]\n-fn getpid() -> u32 {\n-    unsafe {\n-        libc::syscall(libc::SYS_getpid) as _\n-    }\n-}\n-\n /// This stunt allocator allows us to spot heap allocations in the child.\n struct PidChecking<A> {\n     parent: A,\n@@ -59,7 +44,7 @@ impl<A> PidChecking<A> {\n     fn check(&self) {\n         let require_pid = self.require_pid.load(Ordering::Acquire);\n         if require_pid != 0 {\n-            let actual_pid = getpid();\n+            let actual_pid = process::id();\n             if require_pid != actual_pid {\n                 unsafe {\n                     libc::raise(libc::SIGUSR1);"}]}