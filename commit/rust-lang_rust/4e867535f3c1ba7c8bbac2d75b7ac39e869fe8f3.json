{"sha": "4e867535f3c1ba7c8bbac2d75b7ac39e869fe8f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlODY3NTM1ZjNjMWJhN2M4YmJhYzJkNzViN2FjMzllODY5ZmU4ZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-24T15:42:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-24T15:42:26Z"}, "message": "no more codegen for miri_start_panic", "tree": {"sha": "91edde8e4cca5e08298b416bb990872785e10f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91edde8e4cca5e08298b416bb990872785e10f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e867535f3c1ba7c8bbac2d75b7ac39e869fe8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e867535f3c1ba7c8bbac2d75b7ac39e869fe8f3", "html_url": "https://github.com/rust-lang/rust/commit/4e867535f3c1ba7c8bbac2d75b7ac39e869fe8f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e867535f3c1ba7c8bbac2d75b7ac39e869fe8f3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79cd224e758f603898b64308e849fbb9be6e6f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/79cd224e758f603898b64308e849fbb9be6e6f4d", "html_url": "https://github.com/rust-lang/rust/commit/79cd224e758f603898b64308e849fbb9be6e6f4d"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "a1b54607b809e02b855482dfb854834ac0160150", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e867535f3c1ba7c8bbac2d75b7ac39e869fe8f3/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e867535f3c1ba7c8bbac2d75b7ac39e869fe8f3/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=4e867535f3c1ba7c8bbac2d75b7ac39e869fe8f3", "patch": "@@ -515,12 +515,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        // For normal codegen, this Miri-specific intrinsic is just a NOP.\n+        // For normal codegen, this Miri-specific intrinsic should never occur.\n         if intrinsic == Some(\"miri_start_panic\") {\n-            let target = destination.as_ref().unwrap().1;\n-            helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n-            helper.funclet_br(self, &mut bx, target);\n-            return;\n+            bug!(\"`miri_start_panic` should never end up in compiled code\");\n         }\n \n         // Emit a panic or a no-op for `panic_if_uninhabited`."}]}