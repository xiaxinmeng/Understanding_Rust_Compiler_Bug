{"sha": "562d4784215cb477c7fcec7c2c34df898d59c674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MmQ0Nzg0MjE1Y2I0NzdjN2ZjZWM3YzJjMzRkZjg5OGQ1OWM2NzQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-21T12:42:47Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:36Z"}, "message": "fix rustdoc", "tree": {"sha": "4fb4412744c9e2e90d944de2e23f0841a127c6d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb4412744c9e2e90d944de2e23f0841a127c6d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/562d4784215cb477c7fcec7c2c34df898d59c674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/562d4784215cb477c7fcec7c2c34df898d59c674", "html_url": "https://github.com/rust-lang/rust/commit/562d4784215cb477c7fcec7c2c34df898d59c674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/562d4784215cb477c7fcec7c2c34df898d59c674/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1151d6204919202340e22cef15ca69aa183b41d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1151d6204919202340e22cef15ca69aa183b41d1", "html_url": "https://github.com/rust-lang/rust/commit/1151d6204919202340e22cef15ca69aa183b41d1"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "23defc51a3764acf28043cbab0cbe7dd0e23dcfd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/562d4784215cb477c7fcec7c2c34df898d59c674/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562d4784215cb477c7fcec7c2c34df898d59c674/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=562d4784215cb477c7fcec7c2c34df898d59c674", "patch": "@@ -1661,16 +1661,23 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     .predicates\n                     .iter()\n                     .filter_map(|predicate| {\n-                        let trait_ref = if let Some(tr) = predicate.to_opt_poly_trait_ref() {\n-                            tr\n-                        } else if let Some(pred) = predicate.to_opt_type_outlives() {\n-                            // these should turn up at the end\n-                            if let Some(r) = pred.skip_binder().1.clean(cx) {\n-                                regions.push(GenericBound::Outlives(r));\n+                        // Note: The substs of opaque types can contain unbound variables,\n+                        // meaning that we have to use `ignore_qualifiers_with_unbound_vars` here.\n+                        let trait_ref = match predicate\n+                            .ignore_qualifiers_with_unbound_vars(cx.tcx)\n+                            .skip_binder()\n+                            .kind()\n+                        {\n+                            ty::PredicateKind::Trait(tr, _constness) => {\n+                                ty::Binder::bind(tr.trait_ref)\n+                            }\n+                            ty::PredicateKind::TypeOutlives(pred) => {\n+                                if let Some(r) = pred.1.clean(cx) {\n+                                    regions.push(GenericBound::Outlives(r));\n+                                }\n+                                return None;\n                             }\n-                            return None;\n-                        } else {\n-                            return None;\n+                            _ => return None,\n                         };\n \n                         if let Some(sized) = cx.tcx.lang_items().sized_trait() {\n@@ -1684,10 +1691,11 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             .predicates\n                             .iter()\n                             .filter_map(|pred| {\n-                                if let ty::PredicateKind::Projection(proj) =\n-                                    pred.ignore_qualifiers().skip_binder().kind()\n+                                if let ty::PredicateKind::Projection(proj) = pred\n+                                    .ignore_qualifiers_with_unbound_vars(cx.tcx)\n+                                    .skip_binder()\n+                                    .kind()\n                                 {\n-                                    let proj = proj;\n                                     if proj.projection_ty.trait_ref(cx.tcx)\n                                         == trait_ref.skip_binder()\n                                     {"}]}