{"sha": "c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNzQ0ZTFlMGMzNWIxMDgzNzMzZmQ1Yzc0ZmMzZmI1YTZjZDA0Zjc=", "commit": {"author": {"name": "Andrew Paverd", "email": "andrew.paverd@microsoft.com", "date": "2020-01-13T13:25:39Z"}, "committer": {"name": "Andrew Paverd", "email": "andrew.paverd@microsoft.com", "date": "2020-01-28T14:43:23Z"}, "message": "Add support for Control Flow Guard on Windows.\n\nThis patch enables rustc to emit the required LLVM module flags to enable Control Flow Guard metadata (cfguard=1) or metadata and checks (cfguard=2). The LLVM module flags are ignored on unsupported targets and operating systems.", "tree": {"sha": "48b10b069dd6728f528f8f60fca0293674ebe46e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b10b069dd6728f528f8f60fca0293674ebe46e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "html_url": "https://github.com/rust-lang/rust/commit/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/comments", "author": {"login": "ajpaverd", "id": 207321, "node_id": "MDQ6VXNlcjIwNzMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/207321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajpaverd", "html_url": "https://github.com/ajpaverd", "followers_url": "https://api.github.com/users/ajpaverd/followers", "following_url": "https://api.github.com/users/ajpaverd/following{/other_user}", "gists_url": "https://api.github.com/users/ajpaverd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajpaverd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajpaverd/subscriptions", "organizations_url": "https://api.github.com/users/ajpaverd/orgs", "repos_url": "https://api.github.com/users/ajpaverd/repos", "events_url": "https://api.github.com/users/ajpaverd/events{/privacy}", "received_events_url": "https://api.github.com/users/ajpaverd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ajpaverd", "id": 207321, "node_id": "MDQ6VXNlcjIwNzMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/207321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajpaverd", "html_url": "https://github.com/ajpaverd", "followers_url": "https://api.github.com/users/ajpaverd/followers", "following_url": "https://api.github.com/users/ajpaverd/following{/other_user}", "gists_url": "https://api.github.com/users/ajpaverd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajpaverd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajpaverd/subscriptions", "organizations_url": "https://api.github.com/users/ajpaverd/orgs", "repos_url": "https://api.github.com/users/ajpaverd/repos", "events_url": "https://api.github.com/users/ajpaverd/events{/privacy}", "received_events_url": "https://api.github.com/users/ajpaverd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b181835a6bacfa449f55d46764a10e25d1c471dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b181835a6bacfa449f55d46764a10e25d1c471dc", "html_url": "https://github.com/rust-lang/rust/commit/b181835a6bacfa449f55d46764a10e25d1c471dc"}], "stats": {"total": 103, "additions": 98, "deletions": 5}, "files": [{"sha": "6b31f14410d2f23630aa2b72a8afbb124c2e0e78", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "patch": "@@ -12,7 +12,7 @@ use rustc_codegen_ssa::traits::*;\n use crate::callee::get_fn;\n use rustc::bug;\n use rustc::mir::mono::CodegenUnit;\n-use rustc::session::config::{self, DebugInfo};\n+use rustc::session::config::{self, CFGuard, DebugInfo};\n use rustc::session::Session;\n use rustc::ty::layout::{\n     FnAbiExt, HasParamEnv, LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx,\n@@ -227,6 +227,16 @@ pub unsafe fn create_module(\n         llvm::LLVMRustAddModuleFlag(llmod, avoid_plt, 1);\n     }\n \n+    // Set module flags to enable Windows Control Flow Guard (/guard:cf) metadata\n+    // only (`cfguard=1`) or metadata and checks (`cfguard=2`).\n+    match sess.opts.debugging_opts.control_flow_guard {\n+        CFGuard::Disabled => {}\n+        CFGuard::NoChecks => {\n+            llvm::LLVMRustAddModuleFlag(llmod, \"cfguard\\0\".as_ptr() as *const _, 1)\n+        }\n+        CFGuard::Checks => llvm::LLVMRustAddModuleFlag(llmod, \"cfguard\\0\".as_ptr() as *const _, 2),\n+    }\n+\n     llmod\n }\n "}, {"sha": "bc0322ffe1d485507f63f6daff427a4716277a84", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "patch": "@@ -1,7 +1,7 @@\n use rustc::middle::cstore::{EncodedMetadata, LibSource, NativeLibrary, NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::config::{\n-    self, DebugInfo, OutputFilenames, OutputType, PrintRequest, Sanitizer,\n+    self, CFGuard, DebugInfo, OutputFilenames, OutputType, PrintRequest, Sanitizer,\n };\n use rustc::session::search_paths::PathKind;\n /// For all the linkers we support, and information they might\n@@ -1294,6 +1294,10 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.pgo_gen();\n     }\n \n+    if sess.opts.debugging_opts.control_flow_guard != CFGuard::Disabled {\n+        cmd.control_flow_guard();\n+    }\n+\n     // FIXME (#2397): At some point we want to rpath our guesses as to\n     // where extern libraries might live, based on the\n     // addl_lib_search_paths"}, {"sha": "5aafb8a12d74b261d4ba0eeeb92d7b85f4cfa4f0", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "patch": "@@ -106,6 +106,7 @@ pub trait Linker {\n     fn no_relro(&mut self);\n     fn optimize(&mut self);\n     fn pgo_gen(&mut self);\n+    fn control_flow_guard(&mut self);\n     fn debuginfo(&mut self);\n     fn no_default_libraries(&mut self);\n     fn build_dylib(&mut self, out_filename: &Path);\n@@ -360,6 +361,10 @@ impl<'a> Linker for GccLinker<'a> {\n         self.cmd.arg(\"__llvm_profile_runtime\");\n     }\n \n+    fn control_flow_guard(&mut self) {\n+        self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n+    }\n+\n     fn debuginfo(&mut self) {\n         if let DebugInfo::None = self.sess.opts.debuginfo {\n             // If we are building without debuginfo enabled and we were called with\n@@ -660,6 +665,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // Nothing needed here.\n     }\n \n+    fn control_flow_guard(&mut self) {\n+        self.cmd.arg(\"/guard:cf\");\n+    }\n+\n     fn debuginfo(&mut self) {\n         // This will cause the Microsoft linker to generate a PDB file\n         // from the CodeView line tables in the object files.\n@@ -862,6 +871,10 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop, but maybe we need something like the gnu linker?\n     }\n \n+    fn control_flow_guard(&mut self) {\n+        self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n+    }\n+\n     fn debuginfo(&mut self) {\n         // Preserve names or generate source maps depending on debug info\n         self.cmd.arg(match self.sess.opts.debuginfo {\n@@ -1058,6 +1071,10 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn debuginfo(&mut self) {}\n \n+    fn control_flow_guard(&mut self) {\n+        self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n+    }\n+\n     fn no_default_libraries(&mut self) {}\n \n     fn build_dylib(&mut self, _out_filename: &Path) {\n@@ -1233,6 +1250,10 @@ impl<'a> Linker for PtxLinker<'a> {\n \n     fn no_default_libraries(&mut self) {}\n \n+    fn control_flow_guard(&mut self) {\n+        self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n+    }\n+\n     fn build_dylib(&mut self, _out_filename: &Path) {}\n \n     fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType) {}"}, {"sha": "813d14d616d42c5f2c6b083d717e219800838567", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "patch": "@@ -70,6 +70,19 @@ impl FromStr for Sanitizer {\n     }\n }\n \n+/// The different settings that the `-Z control_flow_guard` flag can have.\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum CFGuard {\n+    /// Do not emit Control Flow Guard metadata or checks.\n+    Disabled,\n+\n+    /// Emit Control Flow Guard metadata but no checks.\n+    NoChecks,\n+\n+    /// Emit Control Flow Guard metadata and checks.\n+    Checks,\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Hash)]\n pub enum OptLevel {\n     No,         // -O0\n@@ -1980,8 +1993,8 @@ impl PpMode {\n /// how the hash should be calculated when adding a new command-line argument.\n crate mod dep_tracking {\n     use super::{\n-        CrateType, DebugInfo, ErrorOutputType, LinkerPluginLto, LtoCli, OptLevel, OutputTypes,\n-        Passes, Sanitizer, SwitchWithOptPath, SymbolManglingVersion,\n+        CFGuard, CrateType, DebugInfo, ErrorOutputType, LinkerPluginLto, LtoCli, OptLevel,\n+        OutputTypes, Passes, Sanitizer, SwitchWithOptPath, SymbolManglingVersion,\n     };\n     use crate::lint;\n     use crate::utils::NativeLibraryKind;\n@@ -2053,6 +2066,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n+    impl_dep_tracking_hash_via_hash!(CFGuard);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n     impl_dep_tracking_hash_via_hash!(Edition);\n     impl_dep_tracking_hash_via_hash!(LinkerPluginLto);"}, {"sha": "f7f8ec8604561bf83616189331e0f5138fb173a5", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "patch": "@@ -263,6 +263,8 @@ macro_rules! options {\n         pub const parse_sanitizer_list: Option<&str> =\n             Some(\"comma separated list of sanitizers\");\n         pub const parse_sanitizer_memory_track_origins: Option<&str> = None;\n+        pub const parse_cfguard: Option<&str> =\n+            Some(\"either `disabled`, `nochecks`, or `checks`\");\n         pub const parse_linker_flavor: Option<&str> =\n             Some(::rustc_target::spec::LinkerFlavor::one_of());\n         pub const parse_optimization_fuel: Option<&str> =\n@@ -288,7 +290,7 @@ macro_rules! options {\n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath,\n-            SymbolManglingVersion};\n+            SymbolManglingVersion, CFGuard};\n         use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n         use std::str::FromStr;\n@@ -499,6 +501,16 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_cfguard(slot: &mut CFGuard, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"disabled\") => *slot = CFGuard::Disabled,\n+                Some(\"nochecks\") => *slot = CFGuard::NoChecks,\n+                Some(\"checks\") => *slot = CFGuard::Checks,\n+                _ => return false,\n+            }\n+            true\n+        }\n+\n         fn parse_linker_flavor(slote: &mut Option<LinkerFlavor>, v: Option<&str>) -> bool {\n             match v.and_then(LinkerFlavor::from_str) {\n                 Some(lf) => *slote = Some(lf),\n@@ -950,6 +962,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n     deduplicate_diagnostics: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n         \"deduplicate identical diagnostics\"),\n+    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n+        \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n     no_link: bool = (false, parse_bool, [TRACKED],\n         \"compile without linking\"),\n }"}, {"sha": "40a7353eac0454f7fe00699aab5d94a25eca38eb", "filename": "src/test/codegen/cfguard_checks.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs?ref=c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z control_flow_guard=checks\n+\n+#![crate_type = \"lib\"]\n+\n+// A basic test function.\n+pub fn test() {\n+}\n+\n+// Ensure the module flag cfguard=2 is present\n+// CHECK: !\"cfguard\", i32 2"}, {"sha": "d1747931e15c8255959026e87f9de0204a0fc6c4", "filename": "src/test/codegen/cfguard_disabled.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs?ref=c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z control_flow_guard=disabled\n+\n+#![crate_type = \"lib\"]\n+\n+// A basic test function.\n+pub fn test() {\n+}\n+\n+// Ensure the module flag cfguard is not present\n+// CHECK-NOT: !\"cfguard\""}, {"sha": "c5d7afbae257b57276797ded41e898e9e38fdfd8", "filename": "src/test/codegen/cfguard_nochecks.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs?ref=c0744e1e0c35b1083733fd5c74fc3fb5a6cd04f7", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z control_flow_guard=nochecks\n+\n+#![crate_type = \"lib\"]\n+\n+// A basic test function.\n+pub fn test() {\n+}\n+\n+// Ensure the module flag cfguard=1 is present\n+// CHECK: !\"cfguard\", i32 1"}]}