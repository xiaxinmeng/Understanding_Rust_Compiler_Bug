{"sha": "f4518cdba7e7b5b40cea2b0549c4593414154829", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTE4Y2RiYTdlN2I1YjQwY2VhMmIwNTQ5YzQ1OTM0MTQxNTQ4Mjk=", "commit": {"author": {"name": "gentlefolk", "email": "cemacken@gmail.com", "date": "2014-02-21T01:44:29Z"}, "committer": {"name": "gentlefolk", "email": "cemacken@gmail.com", "date": "2014-03-28T01:03:44Z"}, "message": "Initial support for emitting DWARF for static vars.\n\nOnly supports crate level statics. No debug info is generated for\nfunction level statics. Closes #9227.", "tree": {"sha": "89b15b04f1080af5878c3d3831e16cd784a8381c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89b15b04f1080af5878c3d3831e16cd784a8381c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4518cdba7e7b5b40cea2b0549c4593414154829", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4518cdba7e7b5b40cea2b0549c4593414154829", "html_url": "https://github.com/rust-lang/rust/commit/f4518cdba7e7b5b40cea2b0549c4593414154829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4518cdba7e7b5b40cea2b0549c4593414154829/comments", "author": {"login": "cmacknz", "id": 3466215, "node_id": "MDQ6VXNlcjM0NjYyMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3466215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmacknz", "html_url": "https://github.com/cmacknz", "followers_url": "https://api.github.com/users/cmacknz/followers", "following_url": "https://api.github.com/users/cmacknz/following{/other_user}", "gists_url": "https://api.github.com/users/cmacknz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmacknz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmacknz/subscriptions", "organizations_url": "https://api.github.com/users/cmacknz/orgs", "repos_url": "https://api.github.com/users/cmacknz/repos", "events_url": "https://api.github.com/users/cmacknz/events{/privacy}", "received_events_url": "https://api.github.com/users/cmacknz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cmacknz", "id": 3466215, "node_id": "MDQ6VXNlcjM0NjYyMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3466215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmacknz", "html_url": "https://github.com/cmacknz", "followers_url": "https://api.github.com/users/cmacknz/followers", "following_url": "https://api.github.com/users/cmacknz/following{/other_user}", "gists_url": "https://api.github.com/users/cmacknz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmacknz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmacknz/subscriptions", "organizations_url": "https://api.github.com/users/cmacknz/orgs", "repos_url": "https://api.github.com/users/cmacknz/repos", "events_url": "https://api.github.com/users/cmacknz/events{/privacy}", "received_events_url": "https://api.github.com/users/cmacknz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13dafa09f1a80b8b50f41cab42ac2bfd24dfa6b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/13dafa09f1a80b8b50f41cab42ac2bfd24dfa6b9", "html_url": "https://github.com/rust-lang/rust/commit/13dafa09f1a80b8b50f41cab42ac2bfd24dfa6b9"}], "stats": {"total": 788, "additions": 711, "deletions": 77}, "files": [{"sha": "d482acbb3b901b285700ee087339c2965b6bdf1e", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -277,6 +277,7 @@ pub mod debuginfo {\n     pub type DIDerivedType = DIType;\n     pub type DICompositeType = DIDerivedType;\n     pub type DIVariable = DIDescriptor;\n+    pub type DIGlobalVariable = DIDescriptor;\n     pub type DIArray = DIDescriptor;\n     pub type DISubrange = DIDescriptor;\n \n@@ -1589,6 +1590,18 @@ pub mod llvm {\n                                                Col: c_uint)\n                                                -> DILexicalBlock;\n \n+        pub fn LLVMDIBuilderCreateStaticVariable(Builder: DIBuilderRef,\n+                                                 Context: DIDescriptor,\n+                                                 Name: *c_char,\n+                                                 LinkageName: *c_char,\n+                                                 File: DIFile,\n+                                                 LineNo: c_uint,\n+                                                 Ty: DIType,\n+                                                 isLocalToUnit: bool,\n+                                                 Val: ValueRef,\n+                                                 Decl: ValueRef)\n+                                                 -> DIGlobalVariable;\n+\n         pub fn LLVMDIBuilderCreateLocalVariable(Builder: DIBuilderRef,\n                                                 Tag: c_uint,\n                                                 Scope: DIDescriptor,"}, {"sha": "fb6813e59db1d634ede85e391266f9753ab8285c", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -28,6 +28,7 @@ use middle::trans::inline;\n use middle::trans::machine;\n use middle::trans::type_::Type;\n use middle::trans::type_of;\n+use middle::trans::debuginfo;\n use middle::ty;\n use util::ppaux::{Repr, ty_to_str};\n \n@@ -688,5 +689,6 @@ pub fn trans_const(ccx: &CrateContext, m: ast::Mutability, id: ast::NodeId) {\n         if m != ast::MutMutable {\n             llvm::LLVMSetGlobalConstant(g, True);\n         }\n+        debuginfo::create_global_var_metadata(ccx, id, g);\n     }\n }"}, {"sha": "a75d5237d1f0a0a22729a143f85400177b093ee8", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 72, "deletions": 7, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -280,6 +280,66 @@ pub fn finalize(cx: &CrateContext) {\n     };\n }\n \n+/// Creates debug information for the given global variable.\n+///\n+/// Adds the created metadata nodes directly to the crate's IR.\n+pub fn create_global_var_metadata(cx: &CrateContext,\n+                                  node_id: ast::NodeId,\n+                                  global: ValueRef) {\n+    if cx.dbg_cx.is_none() {\n+        return;\n+    }\n+\n+    let var_item = cx.tcx.map.get(node_id);\n+\n+    let (ident, span) = match var_item {\n+        ast_map::NodeItem(item) => {\n+            match item.node {\n+                ast::ItemStatic(..) => (item.ident, item.span),\n+                _ => cx.sess().span_bug(item.span,\n+                                        format!(\"debuginfo::create_global_var_metadata() -\n+                                                Captured var-id refers to unexpected ast_item\n+                                                variant: {:?}\",\n+                                                var_item))\n+            }\n+        },\n+        _ => cx.sess().bug(format!(\"debuginfo::create_global_var_metadata() - Captured var-id \\\n+                                   refers to unexpected ast_map variant: {:?}\",\n+                                   var_item))\n+    };\n+\n+    let filename = span_start(cx, span).file.name.clone();\n+    let file_metadata = file_metadata(cx, filename);\n+\n+    let is_local_to_unit = is_node_local_to_unit(cx, node_id);\n+    let loc = span_start(cx, span);\n+\n+    let variable_type = ty::node_id_to_type(cx.tcx(), node_id);\n+    let type_metadata = type_metadata(cx, variable_type, span);\n+\n+    let namespace_node = namespace_for_item(cx, ast_util::local_def(node_id));\n+    let var_name = token::get_ident(ident).get().to_str();\n+    let linkage_name = namespace_node.mangled_name_of_contained_item(var_name);\n+    let var_scope = namespace_node.scope;\n+\n+    var_name.with_c_str(|var_name| {\n+        linkage_name.with_c_str(|linkage_name| {\n+            unsafe {\n+                llvm::LLVMDIBuilderCreateStaticVariable(DIB(cx),\n+                                                        var_scope,\n+                                                        var_name,\n+                                                        linkage_name,\n+                                                        file_metadata,\n+                                                        loc.line as c_uint,\n+                                                        type_metadata,\n+                                                        is_local_to_unit,\n+                                                        global,\n+                                                        ptr::null());\n+            }\n+        })\n+    });\n+}\n+\n /// Creates debug information for the given local variable.\n ///\n /// Adds the created metadata nodes directly to the crate's IR.\n@@ -640,13 +700,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n     // Clang sets this parameter to the opening brace of the function's block, so let's do this too.\n     let scope_line = span_start(cx, top_level_block.span).line;\n \n-    // The is_local_to_unit flag indicates whether a function is local to the current compilation\n-    // unit (i.e. if it is *static* in the C-sense). The *reachable* set should provide a good\n-    // approximation of this, as it contains everything that might leak out of the current crate\n-    // (by being externally visible or by being inlined into something externally visible). It might\n-    // better to use the `exported_items` set from `driver::CrateAnalysis` in the future, but (atm)\n-    // this set is not available in the translation pass.\n-    let is_local_to_unit = !cx.reachable.contains(&fn_ast_id);\n+    let is_local_to_unit = is_node_local_to_unit(cx, fn_ast_id);\n \n     let fn_metadata = function_name.with_c_str(|function_name| {\n                           linkage_name.with_c_str(|linkage_name| {\n@@ -854,6 +908,17 @@ pub fn create_function_debug_context(cx: &CrateContext,\n // Module-Internal debug info creation functions\n //=-------------------------------------------------------------------------------------------------\n \n+fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool\n+{\n+    // The is_local_to_unit flag indicates whether a function is local to the current compilation\n+    // unit (i.e. if it is *static* in the C-sense). The *reachable* set should provide a good\n+    // approximation of this, as it contains everything that might leak out of the current crate\n+    // (by being externally visible or by being inlined into something externally visible). It might\n+    // better to use the `exported_items` set from `driver::CrateAnalysis` in the future, but (atm)\n+    // this set is not available in the translation pass.\n+    !cx.reachable.contains(&node_id)\n+}\n+\n fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n     return unsafe {\n         llvm::LLVMDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32)"}, {"sha": "4755c7873fcb2114f66d765cc0f584f6908a1297", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -323,6 +323,28 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateLexicalBlock(\n         unwrapDI<DIFile>(File), Line, Col));\n }\n \n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateStaticVariable(\n+    DIBuilderRef Builder,\n+    LLVMValueRef Context,\n+    const char* Name,\n+    const char* LinkageName,\n+    LLVMValueRef File,\n+    unsigned LineNo,\n+    LLVMValueRef Ty,\n+    bool isLocalToUnit,\n+    LLVMValueRef Val,\n+    LLVMValueRef Decl = NULL) {\n+    return wrap(Builder->createStaticVariable(unwrapDI<DIDescriptor>(Context),\n+        Name,\n+        LinkageName,\n+        unwrapDI<DIFile>(File),\n+        LineNo,\n+        unwrapDI<DIType>(Ty),\n+        isLocalToUnit,\n+        unwrap(Val),\n+        unwrapDI<MDNode*>(Decl)));\n+}\n+\n extern \"C\" LLVMValueRef LLVMDIBuilderCreateLocalVariable(\n     DIBuilderRef Builder,\n     unsigned Tag,"}, {"sha": "0b4a619c419903ea7aea18c2b22c3c639c33c006", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -586,6 +586,7 @@ LLVMDIBuilderCreate\n LLVMDIBuilderDispose\n LLVMDIBuilderFinalize\n LLVMDIBuilderCreateCompileUnit\n+LLVMDIBuilderCreateStaticVariable\n LLVMDIBuilderCreateLocalVariable\n LLVMDIBuilderCreateFunction\n LLVMDIBuilderCreateFile"}, {"sha": "943af3d0437f9d60fec87f30d043552d7bf1b09c", "filename": "src/test/debug-info/basic-types-globals-metadata.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fbasic-types-globals-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fbasic-types-globals-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-globals-metadata.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+\n+// compile-flags:-g\n+// debugger:rbreak zzz\n+// debugger:run\n+// debugger:finish\n+// debugger:whatis 'basic-types-globals-metadata::B'\n+// check:type = bool\n+// debugger:whatis 'basic-types-globals-metadata::I'\n+// check:type = int\n+// debugger:whatis 'basic-types-globals-metadata::C'\n+// check:type = char\n+// debugger:whatis 'basic-types-globals-metadata::I8'\n+// check:type = i8\n+// debugger:whatis 'basic-types-globals-metadata::I16'\n+// check:type = i16\n+// debugger:whatis 'basic-types-globals-metadata::I32'\n+// check:type = i32\n+// debugger:whatis 'basic-types-globals-metadata::I64'\n+// check:type = i64\n+// debugger:whatis 'basic-types-globals-metadata::U'\n+// check:type = uint\n+// debugger:whatis 'basic-types-globals-metadata::U8'\n+// check:type = u8\n+// debugger:whatis 'basic-types-globals-metadata::U16'\n+// check:type = u16\n+// debugger:whatis 'basic-types-globals-metadata::U32'\n+// check:type = u32\n+// debugger:whatis 'basic-types-globals-metadata::U64'\n+// check:type = u64\n+// debugger:whatis 'basic-types-globals-metadata::F32'\n+// check:type = f32\n+// debugger:whatis 'basic-types-globals-metadata::F64'\n+// check:type = f64\n+// debugger:continue\n+\n+#[allow(unused_variable)];\n+\n+static B: bool = false;\n+static I: int = -1;\n+static C: char = 'a';\n+static I8: i8 = 68;\n+static I16: i16 = -16;\n+static I32: i32 = -32;\n+static I64: i64 = -64;\n+static U: uint = 1;\n+static U8: u8 = 100;\n+static U16: u16 = 16;\n+static U32: u32 = 32;\n+static U64: u64 = 64;\n+static F32: f32 = 2.5;\n+static F64: f64 = 3.5;\n+\n+fn main() {\n+    _zzz();\n+}\n+\n+fn _zzz() {()}"}, {"sha": "4847144c57f6a975a2f544df46ca54ac53e8b713", "filename": "src/test/debug-info/basic-types-globals.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Caveats - gdb prints any 8-bit value (meaning rust I8 and u8 values)\n+// as its numerical value along with its associated ASCII char, there\n+// doesn't seem to be any way around this. Also, gdb doesn't know\n+// about UTF-32 character encoding and will print a rust char as only\n+// its numerical value.\n+\n+// ignore-android: FIXME(#10381)\n+\n+// compile-flags:-g\n+// debugger:rbreak zzz\n+// debugger:run\n+// debugger:finish\n+// debugger:print 'basic-types-globals::B'\n+// check:$1 = false\n+// debugger:print 'basic-types-globals::I'\n+// check:$2 = -1\n+// debugger:print 'basic-types-globals::C'\n+// check:$3 = 97\n+// debugger:print/d 'basic-types-globals::I8'\n+// check:$4 = 68\n+// debugger:print 'basic-types-globals::I16'\n+// check:$5 = -16\n+// debugger:print 'basic-types-globals::I32'\n+// check:$6 = -32\n+// debugger:print 'basic-types-globals::I64'\n+// check:$7 = -64\n+// debugger:print 'basic-types-globals::U'\n+// check:$8 = 1\n+// debugger:print/d 'basic-types-globals::U8'\n+// check:$9 = 100\n+// debugger:print 'basic-types-globals::U16'\n+// check:$10 = 16\n+// debugger:print 'basic-types-globals::U32'\n+// check:$11 = 32\n+// debugger:print 'basic-types-globals::U64'\n+// check:$12 = 64\n+// debugger:print 'basic-types-globals::F32'\n+// check:$13 = 2.5\n+// debugger:print 'basic-types-globals::F64'\n+// check:$14 = 3.5\n+// debugger:continue\n+\n+#[allow(unused_variable)];\n+\n+static B: bool = false;\n+static I: int = -1;\n+static C: char = 'a';\n+static I8: i8 = 68;\n+static I16: i16 = -16;\n+static I32: i32 = -32;\n+static I64: i64 = -64;\n+static U: uint = 1;\n+static U8: u8 = 100;\n+static U16: u16 = 16;\n+static U32: u32 = 32;\n+static U64: u64 = 64;\n+static F32: f32 = 2.5;\n+static F64: f64 = 3.5;\n+\n+fn main() {\n+    _zzz();\n+}\n+\n+fn _zzz() {()}"}, {"sha": "95228343bda40bc8f53309670f56ecb27b92b89d", "filename": "src/test/debug-info/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -46,8 +46,7 @@\n // check:type = f64\n // debugger:info functions _yyy\n // check:[...]![...]_yyy([...])([...]);\n-// debugger:detach\n-// debugger:quit\n+// debugger:continue\n \n #[allow(unused_variable)];\n "}, {"sha": "51391faed7a111b7afd4d2e234c64ff34f293594", "filename": "src/test/debug-info/basic-types-mut-globals.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fbasic-types-mut-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fbasic-types-mut-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-mut-globals.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Caveats - gdb prints any 8-bit value (meaning rust I8 and u8 values)\n+// as its numerical value along with its associated ASCII char, there\n+// doesn't seem to be any way around this. Also, gdb doesn't know\n+// about UTF-32 character encoding and will print a rust char as only\n+// its numerical value.\n+\n+// ignore-android: FIXME(#10381)\n+\n+// compile-flags:-g\n+// debugger:rbreak zzz\n+// debugger:run\n+// debugger:finish\n+\n+// Check initializers\n+// debugger:print 'basic-types-mut-globals::B'\n+// check:$1 = false\n+// debugger:print 'basic-types-mut-globals::I'\n+// check:$2 = -1\n+// debugger:print 'basic-types-mut-globals::C'\n+// check:$3 = 97\n+// debugger:print/d 'basic-types-mut-globals::I8'\n+// check:$4 = 68\n+// debugger:print 'basic-types-mut-globals::I16'\n+// check:$5 = -16\n+// debugger:print 'basic-types-mut-globals::I32'\n+// check:$6 = -32\n+// debugger:print 'basic-types-mut-globals::I64'\n+// check:$7 = -64\n+// debugger:print 'basic-types-mut-globals::U'\n+// check:$8 = 1\n+// debugger:print/d 'basic-types-mut-globals::U8'\n+// check:$9 = 100\n+// debugger:print 'basic-types-mut-globals::U16'\n+// check:$10 = 16\n+// debugger:print 'basic-types-mut-globals::U32'\n+// check:$11 = 32\n+// debugger:print 'basic-types-mut-globals::U64'\n+// check:$12 = 64\n+// debugger:print 'basic-types-mut-globals::F32'\n+// check:$13 = 2.5\n+// debugger:print 'basic-types-mut-globals::F64'\n+// check:$14 = 3.5\n+// debugger:continue\n+\n+// Check new values\n+// debugger:print 'basic-types-mut-globals'::B\n+// check:$15 = true\n+// debugger:print 'basic-types-mut-globals'::I\n+// check:$16 = 2\n+// debugger:print 'basic-types-mut-globals'::C\n+// check:$17 = 102\n+// debugger:print/d 'basic-types-mut-globals'::I8\n+// check:$18 = 78\n+// debugger:print 'basic-types-mut-globals'::I16\n+// check:$19 = -26\n+// debugger:print 'basic-types-mut-globals'::I32\n+// check:$20 = -12\n+// debugger:print 'basic-types-mut-globals'::I64\n+// check:$21 = -54\n+// debugger:print 'basic-types-mut-globals'::U\n+// check:$22 = 5\n+// debugger:print/d 'basic-types-mut-globals'::U8\n+// check:$23 = 20\n+// debugger:print 'basic-types-mut-globals'::U16\n+// check:$24 = 32\n+// debugger:print 'basic-types-mut-globals'::U32\n+// check:$25 = 16\n+// debugger:print 'basic-types-mut-globals'::U64\n+// check:$26 = 128\n+// debugger:print 'basic-types-mut-globals'::F32\n+// check:$27 = 5.75\n+// debugger:print 'basic-types-mut-globals'::F64\n+// check:$28 = 9.25\n+\n+// debugger:detach\n+// debugger:quit\n+\n+#[allow(unused_variable)];\n+\n+static mut B: bool = false;\n+static mut I: int = -1;\n+static mut C: char = 'a';\n+static mut I8: i8 = 68;\n+static mut I16: i16 = -16;\n+static mut I32: i32 = -32;\n+static mut I64: i64 = -64;\n+static mut U: uint = 1;\n+static mut U8: u8 = 100;\n+static mut U16: u16 = 16;\n+static mut U32: u32 = 32;\n+static mut U64: u64 = 64;\n+static mut F32: f32 = 2.5;\n+static mut F64: f64 = 3.5;\n+\n+fn main() {\n+    _zzz();\n+\n+    unsafe {\n+        B = true;\n+        I = 2;\n+        C = 'f';\n+        I8 = 78;\n+        I16 = -26;\n+        I32 = -12;\n+        I64 = -54;\n+        U = 5;\n+        U8 = 20;\n+        U16 = 32;\n+        U32 = 16;\n+        U64 = 128;\n+        F32 = 5.75;\n+        F64 = 9.25;\n+    }\n+\n+    _zzz();\n+}\n+\n+fn _zzz() {()}"}, {"sha": "7229480b2733e2436c52cb11c4134799227519c1", "filename": "src/test/debug-info/c-style-enum.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -12,29 +12,63 @@\n \n // compile-flags:-g\n // debugger:rbreak zzz\n+\n+// debugger:print 'c-style-enum::SINGLE_VARIANT'\n+// check:$1 = TheOnlyVariant\n+\n+// debugger:print 'c-style-enum::AUTO_ONE'\n+// check:$2 = One\n+\n+// debugger:print 'c-style-enum::AUTO_TWO'\n+// check:$3 = One\n+\n+// debugger:print 'c-style-enum::AUTO_THREE'\n+// check:$4 = One\n+\n+// debugger:print 'c-style-enum::MANUAL_ONE'\n+// check:$5 = OneHundred\n+\n+// debugger:print 'c-style-enum::MANUAL_TWO'\n+// check:$6 = OneHundred\n+\n+// debugger:print 'c-style-enum::MANUAL_THREE'\n+// check:$7 = OneHundred\n+\n // debugger:run\n // debugger:finish\n \n // debugger:print auto_one\n-// check:$1 = One\n+// check:$8 = One\n \n // debugger:print auto_two\n-// check:$2 = Two\n+// check:$9 = Two\n \n // debugger:print auto_three\n-// check:$3 = Three\n+// check:$10 = Three\n \n // debugger:print manual_one_hundred\n-// check:$4 = OneHundred\n+// check:$11 = OneHundred\n \n // debugger:print manual_one_thousand\n-// check:$5 = OneThousand\n+// check:$12 = OneThousand\n \n // debugger:print manual_one_million\n-// check:$6 = OneMillion\n+// check:$13 = OneMillion\n \n // debugger:print single_variant\n-// check:$7 = TheOnlyVariant\n+// check:$14 = TheOnlyVariant\n+\n+// debugger:print 'c-style-enum::AUTO_TWO'\n+// check:$15 = Two\n+\n+// debugger:print 'c-style-enum::AUTO_THREE'\n+// check:$16 = Three\n+\n+// debugger:print 'c-style-enum::MANUAL_TWO'\n+// check:$17 = OneThousand\n+\n+// debugger:print 'c-style-enum::MANUAL_THREE'\n+// check:$18 = OneMillion\n \n #[allow(unused_variable)];\n \n@@ -54,6 +88,16 @@ enum SingleVariant {\n     TheOnlyVariant\n }\n \n+static SINGLE_VARIANT: SingleVariant = TheOnlyVariant;\n+\n+static mut AUTO_ONE: AutoDiscriminant = One;\n+static mut AUTO_TWO: AutoDiscriminant = One;\n+static mut AUTO_THREE: AutoDiscriminant = One;\n+\n+static mut MANUAL_ONE: ManualDiscriminant = OneHundred;\n+static mut MANUAL_TWO: ManualDiscriminant = OneHundred;\n+static mut MANUAL_THREE: ManualDiscriminant = OneHundred;\n+\n fn main() {\n \n     let auto_one = One;\n@@ -66,6 +110,14 @@ fn main() {\n \n     let single_variant = TheOnlyVariant;\n \n+    unsafe {\n+        AUTO_TWO = Two;\n+        AUTO_THREE = Three;\n+\n+        MANUAL_TWO = OneThousand;\n+        MANUAL_THREE = OneMillion;\n+    };\n+\n     zzz();\n }\n "}, {"sha": "72611e3bafa7c2a918a61ae727366de594c689f4", "filename": "src/test/debug-info/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 80, "deletions": 48, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -15,183 +15,207 @@\n // debugger:rbreak zzz\n // debugger:run\n \n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$1 = 0\n+\n // STRUCT EXPRESSION\n // debugger:finish\n // debugger:print val\n-// check:$1 = -1\n+// check:$2 = -1\n // debugger:print ten\n-// check:$2 = 10\n+// check:$3 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$3 = 11\n+// check:$4 = 11\n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$5 = 1\n // debugger:print ten\n-// check:$4 = 10\n+// check:$6 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$5 = -1\n+// check:$7 = -1\n // debugger:print ten\n-// check:$6 = 10\n+// check:$8 = 10\n // debugger:continue\n \n // FUNCTION CALL\n // debugger:finish\n // debugger:print val\n-// check:$7 = -1\n+// check:$9 = -1\n // debugger:print ten\n-// check:$8 = 10\n+// check:$10 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$9 = 12\n+// check:$11 = 12\n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$12 = 2\n // debugger:print ten\n-// check:$10 = 10\n+// check:$13 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$11 = -1\n+// check:$14 = -1\n // debugger:print ten\n-// check:$12 = 10\n+// check:$15 = 10\n // debugger:continue\n \n // TUPLE EXPRESSION\n // debugger:finish\n // debugger:print val\n-// check:$13 = -1\n+// check:$16 = -1\n // debugger:print ten\n-// check:$14 = 10\n+// check:$17 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$15 = 13\n+// check:$18 = 13\n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$19 = 3\n // debugger:print ten\n-// check:$16 = 10\n+// check:$20 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$17 = -1\n+// check:$21 = -1\n // debugger:print ten\n-// check:$18 = 10\n+// check:$22 = 10\n // debugger:continue\n \n // VEC EXPRESSION\n // debugger:finish\n // debugger:print val\n-// check:$19 = -1\n+// check:$23 = -1\n // debugger:print ten\n-// check:$20 = 10\n+// check:$24 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$21 = 14\n+// check:$25 = 14\n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$26 = 4\n // debugger:print ten\n-// check:$22 = 10\n+// check:$27 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$23 = -1\n+// check:$28 = -1\n // debugger:print ten\n-// check:$24 = 10\n+// check:$29 = 10\n // debugger:continue\n \n // REPEAT VEC EXPRESSION\n // debugger:finish\n // debugger:print val\n-// check:$25 = -1\n+// check:$30 = -1\n // debugger:print ten\n-// check:$26 = 10\n+// check:$31 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$27 = 15\n+// check:$32 = 15\n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$33 = 5\n // debugger:print ten\n-// check:$28 = 10\n+// check:$34 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$29 = -1\n+// check:$35 = -1\n // debugger:print ten\n-// check:$30 = 10\n+// check:$36 = 10\n // debugger:continue\n \n // ASSIGNMENT EXPRESSION\n // debugger:finish\n // debugger:print val\n-// check:$31 = -1\n+// check:$37 = -1\n // debugger:print ten\n-// check:$32 = 10\n+// check:$38 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$33 = 16\n+// check:$39 = 16\n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$40 = 6\n // debugger:print ten\n-// check:$34 = 10\n+// check:$41 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$35 = -1\n+// check:$42 = -1\n // debugger:print ten\n-// check:$36 = 10\n+// check:$43 = 10\n // debugger:continue\n \n \n // ARITHMETIC EXPRESSION\n // debugger:finish\n // debugger:print val\n-// check:$37 = -1\n+// check:$44 = -1\n // debugger:print ten\n-// check:$38 = 10\n+// check:$45 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$39 = 17\n+// check:$46 = 17\n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$47 = 7\n // debugger:print ten\n-// check:$40 = 10\n+// check:$48 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$41 = -1\n+// check:$49 = -1\n // debugger:print ten\n-// check:$42 = 10\n+// check:$50 = 10\n // debugger:continue\n \n // INDEX EXPRESSION\n // debugger:finish\n // debugger:print val\n-// check:$43 = -1\n+// check:$51 = -1\n // debugger:print ten\n-// check:$44 = 10\n+// check:$52 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$45 = 18\n+// check:$53 = 18\n+// debugger:print 'lexical-scopes-in-block-expression::MUT_INT'\n+// check:$54 = 8\n // debugger:print ten\n-// check:$46 = 10\n+// check:$55 = 10\n // debugger:continue\n \n // debugger:finish\n // debugger:print val\n-// check:$47 = -1\n+// check:$56 = -1\n // debugger:print ten\n-// check:$48 = 10\n+// check:$57 = 10\n // debugger:continue\n \n+#[allow(unused_variable)];\n+#[allow(dead_assignment)];\n+\n+static mut MUT_INT: int = 0;\n+\n struct Point {\n     x: int,\n     y: int\n@@ -213,6 +237,7 @@ fn main() {\n             sentinel();\n \n             let val = ten + 1;\n+            unsafe {MUT_INT = 1;};\n \n             zzz();\n             sentinel();\n@@ -231,6 +256,7 @@ fn main() {\n         sentinel();\n \n         let val = ten + 2;\n+        unsafe {MUT_INT = 2;};\n \n         zzz();\n         sentinel();\n@@ -248,6 +274,7 @@ fn main() {\n         sentinel();\n \n         let val = ten + 3;\n+        unsafe {MUT_INT = 3;};\n \n         zzz();\n         sentinel();\n@@ -264,6 +291,7 @@ fn main() {\n         sentinel();\n \n         let val = ten + 4;\n+        unsafe {MUT_INT = 4;};\n \n         zzz();\n         sentinel();\n@@ -280,6 +308,7 @@ fn main() {\n         sentinel();\n \n         let val = ten + 5;\n+        unsafe {MUT_INT = 5;};\n \n         zzz();\n         sentinel();\n@@ -297,6 +326,7 @@ fn main() {\n         sentinel();\n \n         let val = ten + 6;\n+        unsafe {MUT_INT = 6;};\n \n         zzz();\n         sentinel();\n@@ -313,6 +343,7 @@ fn main() {\n         sentinel();\n \n         let val = ten + 7;\n+        unsafe {MUT_INT = 7;};\n \n         zzz();\n         sentinel();\n@@ -330,6 +361,7 @@ fn main() {\n         sentinel();\n \n         let val = ten + 8;\n+        unsafe {MUT_INT = 8;};\n \n         zzz();\n         sentinel();"}, {"sha": "5f9789ff620c053c1714ffd377a9761c46b679f8", "filename": "src/test/debug-info/simple-struct.rs", "status": "modified", "additions": 102, "deletions": 6, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -13,28 +13,66 @@\n // compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n+\n+// debugger:print 'simple-struct::NO_PADDING_16'\n+// check:$1 = {x = 1000, y = -1001}\n+\n+// debugger:print 'simple-struct::NO_PADDING_32'\n+// check:$2 = {x = 1, y = 2, z = 3}\n+\n+// debugger:print 'simple-struct::NO_PADDING_64'\n+// check:$3 = {x = 4, y = 5, z = 6}\n+\n+// debugger:print 'simple-struct::NO_PADDING_163264'\n+// check:$4 = {a = 7, b = 8, c = 9, d = 10}\n+\n+// debugger:print 'simple-struct::INTERNAL_PADDING'\n+// check:$5 = {x = 11, y = 12}\n+\n+// debugger:print 'simple-struct::PADDING_AT_END'\n+// check:$6 = {x = 13, y = 14}\n+\n // debugger:run\n // debugger:finish\n \n // debugger:print no_padding16\n-// check:$1 = {x = 10000, y = -10001}\n+// check:$7 = {x = 10000, y = -10001}\n \n // debugger:print no_padding32\n-// check:$2 = {x = -10002, y = -10003.5, z = 10004}\n+// check:$8 = {x = -10002, y = -10003.5, z = 10004}\n \n // debugger:print no_padding64\n-// check:$3 = {x = -10005.5, y = 10006, z = 10007}\n+// check:$9 = {x = -10005.5, y = 10006, z = 10007}\n \n // debugger:print no_padding163264\n-// check:$4 = {a = -10008, b = 10009, c = 10010, d = 10011}\n+// check:$10 = {a = -10008, b = 10009, c = 10010, d = 10011}\n \n // debugger:print internal_padding\n-// check:$5 = {x = 10012, y = -10013}\n+// check:$11 = {x = 10012, y = -10013}\n \n // debugger:print padding_at_end\n-// check:$6 = {x = -10014, y = 10015}\n+// check:$12 = {x = -10014, y = 10015}\n+\n+// debugger:print 'simple-struct::NO_PADDING_16'\n+// check:$13 = {x = 100, y = -101}\n+\n+// debugger:print 'simple-struct::NO_PADDING_32'\n+// check:$14 = {x = -15, y = -16, z = 17}\n+\n+// debugger:print 'simple-struct::NO_PADDING_64'\n+// check:$15 = {x = -18, y = 19, z = 20}\n+\n+// debugger:print 'simple-struct::NO_PADDING_163264'\n+// check:$16 = {a = -21, b = 22, c = 23, d = 24}\n+\n+// debugger:print 'simple-struct::INTERNAL_PADDING'\n+// check:$17 = {x = 25, y = -26}\n+\n+// debugger:print 'simple-struct::PADDING_AT_END'\n+// check:$18 = {x = -27, y = 28}\n \n #[allow(unused_variable)];\n+#[allow(dead_code)];\n \n struct NoPadding16 {\n     x: u16,\n@@ -70,6 +108,40 @@ struct PaddingAtEnd {\n     y: u16\n }\n \n+static mut NO_PADDING_16: NoPadding16 = NoPadding16 {\n+    x: 1000,\n+    y: -1001\n+};\n+\n+static mut NO_PADDING_32: NoPadding32 = NoPadding32 {\n+    x: 1,\n+    y: 2.0,\n+    z: 3\n+};\n+\n+static mut NO_PADDING_64: NoPadding64 = NoPadding64 {\n+    x: 4.0,\n+    y: 5,\n+    z: 6\n+};\n+\n+static mut NO_PADDING_163264: NoPadding163264 = NoPadding163264 {\n+    a: 7,\n+    b: 8,\n+    c: 9,\n+    d: 10\n+};\n+\n+static mut INTERNAL_PADDING: InternalPadding = InternalPadding {\n+    x: 11,\n+    y: 12\n+};\n+\n+static mut PADDING_AT_END: PaddingAtEnd = PaddingAtEnd {\n+    x: 13,\n+    y: 14\n+};\n+\n fn main() {\n     let no_padding16 = NoPadding16 { x: 10000, y: -10001 };\n     let no_padding32 = NoPadding32 { x: -10002, y: -10003.5, z: 10004 };\n@@ -79,6 +151,30 @@ fn main() {\n     let internal_padding = InternalPadding { x: 10012, y: -10013 };\n     let padding_at_end = PaddingAtEnd { x: -10014, y: 10015 };\n \n+    unsafe {\n+        NO_PADDING_16.x = 100;\n+        NO_PADDING_16.y = -101;\n+\n+        NO_PADDING_32.x = -15;\n+        NO_PADDING_32.y = -16.0;\n+        NO_PADDING_32.z = 17;\n+\n+        NO_PADDING_64.x = -18.0;\n+        NO_PADDING_64.y = 19;\n+        NO_PADDING_64.z = 20;\n+\n+        NO_PADDING_163264.a = -21;\n+        NO_PADDING_163264.b = 22;\n+        NO_PADDING_163264.c = 23;\n+        NO_PADDING_163264.d = 24;\n+\n+        INTERNAL_PADDING.x = 25;\n+        INTERNAL_PADDING.y = -26;\n+\n+        PADDING_AT_END.x = -27;\n+        PADDING_AT_END.y = 28;\n+    }\n+\n     zzz();\n }\n "}, {"sha": "877b6285d133dfacc1e9b750e0a9da463473de76", "filename": "src/test/debug-info/simple-tuple.rs", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -13,27 +13,74 @@\n // compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n+\n+// debugger:print/d 'simple-tuple::NO_PADDING_8'\n+// check:$1 = {-50, 50}\n+// debugger:print 'simple-tuple::NO_PADDING_16'\n+// check:$2 = {-1, 2, 3}\n+// debugger:print 'simple-tuple::NO_PADDING_32'\n+// check:$3 = {4, 5, 6}\n+// debugger:print 'simple-tuple::NO_PADDING_64'\n+// check:$4 = {7, 8, 9}\n+\n+// debugger:print 'simple-tuple::INTERNAL_PADDING_1'\n+// check:$5 = {10, 11}\n+// debugger:print 'simple-tuple::INTERNAL_PADDING_2'\n+// check:$6 = {12, 13, 14, 15}\n+\n+// debugger:print 'simple-tuple::PADDING_AT_END'\n+// check:$7 = {16, 17}\n+\n // debugger:run\n // debugger:finish\n \n // debugger:print/d noPadding8\n-// check:$1 = {-100, 100}\n+// check:$8 = {-100, 100}\n // debugger:print noPadding16\n-// check:$2 = {0, 1, 2}\n+// check:$9 = {0, 1, 2}\n // debugger:print noPadding32\n-// check:$3 = {3, 4.5, 5}\n+// check:$10 = {3, 4.5, 5}\n // debugger:print noPadding64\n-// check:$4 = {6, 7.5, 8}\n+// check:$11 = {6, 7.5, 8}\n \n // debugger:print internalPadding1\n-// check:$5 = {9, 10}\n+// check:$12 = {9, 10}\n // debugger:print internalPadding2\n-// check:$6 = {11, 12, 13, 14}\n+// check:$13 = {11, 12, 13, 14}\n \n // debugger:print paddingAtEnd\n-// check:$7 = {15, 16}\n+// check:$14 = {15, 16}\n+\n+// debugger:print/d 'simple-tuple::NO_PADDING_8'\n+// check:$15 = {-127, 127}\n+// debugger:print 'simple-tuple::NO_PADDING_16'\n+// check:$16 = {-10, 10, 9}\n+// debugger:print 'simple-tuple::NO_PADDING_32'\n+// check:$17 = {14, 15, 16}\n+// debugger:print 'simple-tuple::NO_PADDING_64'\n+// check:$18 = {17, 18, 19}\n+\n+// debugger:print 'simple-tuple::INTERNAL_PADDING_1'\n+// check:$19 = {110, 111}\n+// debugger:print 'simple-tuple::INTERNAL_PADDING_2'\n+// check:$20 = {112, 113, 114, 115}\n+\n+// debugger:print 'simple-tuple::PADDING_AT_END'\n+// check:$21 = {116, 117}\n \n #[allow(unused_variable)];\n+#[allow(dead_code)];\n+\n+static mut NO_PADDING_8: (i8, u8) = (-50, 50);\n+static mut NO_PADDING_16: (i16, i16, u16) = (-1, 2, 3);\n+\n+static mut NO_PADDING_32: (i32, f32, u32) = (4, 5.0, 6);\n+static mut NO_PADDING_64: (i64, f64, u64) = (7, 8.0, 9);\n+\n+static mut INTERNAL_PADDING_1: (i16, i32) = (10, 11);\n+static mut INTERNAL_PADDING_2: (i16, i32, u32, u64) = (12, 13, 14, 15);\n+\n+static mut PADDING_AT_END: (i32, i16) = (16, 17);\n \n fn main() {\n     let noPadding8: (i8, u8) = (-100, 100);\n@@ -46,6 +93,19 @@ fn main() {\n \n     let paddingAtEnd: (i32, i16) = (15, 16);\n \n+    unsafe {\n+        NO_PADDING_8 = (-127, 127);\n+        NO_PADDING_16 = (-10, 10, 9);\n+\n+        NO_PADDING_32 = (14, 15.0, 16);\n+        NO_PADDING_64 = (17, 18.0, 19);\n+\n+        INTERNAL_PADDING_1 = (110, 111);\n+        INTERNAL_PADDING_2 = (112, 113, 114, 115);\n+\n+        PADDING_AT_END = (116, 117);\n+    }\n+\n     zzz();\n }\n "}, {"sha": "b60e5818411741f382cc6ebd66560829c024b018", "filename": "src/test/debug-info/vec-slices.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec-slices.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -47,6 +47,11 @@\n // debugger:print padded_struct.data_ptr[1]\n // check:$13 = {x = 13, y = 14, z = 15}\n \n+// debugger:print 'vec-slices::MUT_VECT_SLICE'.length\n+// check:$14 = 2\n+// debugger:print *((int64_t[2]*)('vec-slices::MUT_VECT_SLICE'.data_ptr))\n+// check:$15 = {64, 65}\n+\n #[allow(unused_variable)];\n \n struct AStruct {\n@@ -55,6 +60,9 @@ struct AStruct {\n     z: i16\n }\n \n+static VECT_SLICE: &'static [i64] = &[64, 65];\n+static mut MUT_VECT_SLICE: &'static [i64] = &[32];\n+\n fn main() {\n     let empty: &[i64] = &[];\n     let singleton: &[i64] = &[1];\n@@ -68,6 +76,10 @@ fn main() {\n         AStruct { x: 13, y: 14, z: 15 }\n     ];\n \n+    unsafe {\n+        MUT_VECT_SLICE = VECT_SLICE;\n+    }\n+\n     zzz();\n }\n "}, {"sha": "ad88606d48532d85bef542ce26f532c6b6fad5ed", "filename": "src/test/debug-info/vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4518cdba7e7b5b40cea2b0549c4593414154829/src%2Ftest%2Fdebug-info%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec.rs?ref=f4518cdba7e7b5b40cea2b0549c4593414154829", "patch": "@@ -17,12 +17,22 @@\n // debugger:finish\n // debugger:print a\n // check:$1 = {1, 2, 3}\n+// debugger:print vec::VECT\n+// check:$2 = {4, 5, 6}\n \n #[allow(unused_variable)];\n \n+static mut VECT: [i32, ..3] = [1, 2, 3];\n+\n fn main() {\n     let a = [1, 2, 3];\n \n+    unsafe {\n+        VECT[0] = 4;\n+        VECT[1] = 5;\n+        VECT[2] = 6;\n+    }\n+\n     zzz();\n }\n "}]}