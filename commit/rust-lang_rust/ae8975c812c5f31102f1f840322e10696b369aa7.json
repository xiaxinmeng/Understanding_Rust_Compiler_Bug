{"sha": "ae8975c812c5f31102f1f840322e10696b369aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlODk3NWM4MTJjNWYzMTEwMmYxZjg0MDMyMmUxMDY5NmIzNjlhYTc=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-01T17:13:27Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-23T16:51:46Z"}, "message": "Update GenericPredicates queries", "tree": {"sha": "2e5c0d0037538b77a3d71bcae43d36a5e3bd28a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5c0d0037538b77a3d71bcae43d36a5e3bd28a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae8975c812c5f31102f1f840322e10696b369aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8975c812c5f31102f1f840322e10696b369aa7", "html_url": "https://github.com/rust-lang/rust/commit/ae8975c812c5f31102f1f840322e10696b369aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae8975c812c5f31102f1f840322e10696b369aa7/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba5d9c094daf8d78178058e7a3498b66d47db950", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5d9c094daf8d78178058e7a3498b66d47db950", "html_url": "https://github.com/rust-lang/rust/commit/ba5d9c094daf8d78178058e7a3498b66d47db950"}], "stats": {"total": 119, "additions": 64, "deletions": 55}, "files": [{"sha": "06e82f0ae9cb94236d17a66a3661b1885daf4dec", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -68,6 +68,7 @@ macro_rules! arena_types {\n                     >\n                 >,\n             [few] resolve_lifetimes: rustc::middle::resolve_lifetime::ResolveLifetimes,\n+            [decode] generic_predicates: rustc::ty::GenericPredicates<'tcx>,\n         ], $tcx);\n     )\n }"}, {"sha": "1b9c8e864d65c7d9af2d5af784c484b4cd4ac756", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -61,7 +61,7 @@ rustc_queries! {\n         /// predicate gets in the way of some checks, which are intended\n         /// to operate over only the actual where-clauses written by the\n         /// user.)\n-        query predicates_of(_: DefId) -> Lrc<ty::GenericPredicates<'tcx>> {}\n+        query predicates_of(_: DefId) -> &'tcx ty::GenericPredicates<'tcx> {}\n \n         query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLibrary>> {\n             desc { \"looking up the native libraries of a linked crate\" }\n@@ -166,11 +166,11 @@ rustc_queries! {\n         /// equal to the `explicit_predicates_of` predicates plus the\n         /// `inferred_outlives_of` predicates.\n         query predicates_defined_on(_: DefId)\n-            -> Lrc<ty::GenericPredicates<'tcx>> {}\n+            -> &'tcx ty::GenericPredicates<'tcx> {}\n \n         /// Returns the predicates written explicitly by the user.\n         query explicit_predicates_of(_: DefId)\n-            -> Lrc<ty::GenericPredicates<'tcx>> {}\n+            -> &'tcx ty::GenericPredicates<'tcx> {}\n \n         /// Returns the inferred outlives predicates (e.g., for `struct\n         /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n@@ -182,14 +182,14 @@ rustc_queries! {\n         /// evaluate them even during type conversion, often before the\n         /// full predicates are available (note that supertraits have\n         /// additional acyclicity requirements).\n-        query super_predicates_of(key: DefId) -> Lrc<ty::GenericPredicates<'tcx>> {\n+        query super_predicates_of(key: DefId) -> &'tcx ty::GenericPredicates<'tcx> {\n             desc { |tcx| \"computing the supertraits of `{}`\", tcx.def_path_str(key) }\n         }\n \n         /// To avoid cycles within the predicates of a single item we compute\n         /// per-type-parameter predicates for resolving `T::AssocTy`.\n         query type_param_predicates(key: (DefId, DefId))\n-            -> Lrc<ty::GenericPredicates<'tcx>> {\n+            -> &'tcx ty::GenericPredicates<'tcx> {\n             no_force\n             desc { |tcx| \"computing the bounds for type parameter `{}`\", {\n                 let id = tcx.hir().as_local_hir_id(key.1).unwrap();"}, {"sha": "d8d1170fc3a209f18526fbc055dd1e036ffe912b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -201,6 +201,10 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n     }\n }\n \n+pub struct Common<'tcx> {\n+    pub empty_predicates: ty::GenericPredicates<'tcx>,\n+}\n+\n pub struct CommonTypes<'tcx> {\n     pub unit: Ty<'tcx>,\n     pub bool: Ty<'tcx>,\n@@ -1045,6 +1049,9 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub dep_graph: DepGraph,\n \n+    /// Common objects.\n+    pub common: Common<'tcx>,\n+\n     /// Common types, pre-interned for your convenience.\n     pub types: CommonTypes<'tcx>,\n \n@@ -1252,6 +1259,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             s.fatal(&err);\n         });\n         let interners = CtxtInterners::new(&arenas.interner);\n+        let common = Common {\n+            empty_predicates: ty::GenericPredicates {\n+                parent: None,\n+                predicates: vec![],\n+            },\n+        };\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n@@ -1308,6 +1321,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             global_arenas: &arenas.global,\n             global_interners: interners,\n             dep_graph,\n+            common,\n             types: common_types,\n             lifetimes: common_lifetimes,\n             consts: common_consts,"}, {"sha": "99c3293168754dd9a15cb2073996fa08088c0970", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -2298,7 +2298,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     }\n \n     #[inline]\n-    pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Lrc<GenericPredicates<'gcx>> {\n+    pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> &'tcx GenericPredicates<'gcx> {\n         tcx.predicates_of(self.did)\n     }\n "}, {"sha": "7ca1343a4873b0772c23d60de360bff19b68ef56", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -96,9 +96,11 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generics_of => {\n         tcx.alloc_generics(cdata.get_generics(def_id.index, tcx.sess))\n     }\n-    predicates_of => { Lrc::new(cdata.get_predicates(def_id.index, tcx)) }\n-    predicates_defined_on => { Lrc::new(cdata.get_predicates_defined_on(def_id.index, tcx)) }\n-    super_predicates_of => { Lrc::new(cdata.get_super_predicates(def_id.index, tcx)) }\n+    predicates_of => { tcx.arena.alloc(cdata.get_predicates(def_id.index, tcx)) }\n+    predicates_defined_on => {\n+        tcx.arena.alloc(cdata.get_predicates_defined_on(def_id.index, tcx))\n+    }\n+    super_predicates_of => { tcx.arena.alloc(cdata.get_super_predicates(def_id.index, tcx)) }\n     trait_def => {\n         tcx.alloc_trait_def(cdata.get_trait_def(def_id.index, tcx.sess))\n     }"}, {"sha": "4fd6dd00cee4c36321e00dc3f27c6709256ef7da", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -67,7 +67,7 @@ trait DefIdVisitor<'a, 'tcx: 'a> {\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> bool {\n         self.skeleton().visit_trait(trait_ref)\n     }\n-    fn visit_predicates(&mut self, predicates: Lrc<ty::GenericPredicates<'tcx>>) -> bool {\n+    fn visit_predicates(&mut self, predicates: &ty::GenericPredicates<'tcx>) -> bool {\n         self.skeleton().visit_predicates(predicates)\n     }\n }\n@@ -89,8 +89,8 @@ impl<'a, 'tcx, V> DefIdVisitorSkeleton<'_, 'a, 'tcx, V>\n         (!self.def_id_visitor.shallow() && substs.visit_with(self))\n     }\n \n-    fn visit_predicates(&mut self, predicates: Lrc<ty::GenericPredicates<'tcx>>) -> bool {\n-        let ty::GenericPredicates { parent: _, predicates } = &*predicates;\n+    fn visit_predicates(&mut self, predicates: &ty::GenericPredicates<'tcx>) -> bool {\n+        let ty::GenericPredicates { parent: _, predicates } = predicates;\n         for (predicate, _span) in predicates {\n             match predicate {\n                 ty::Predicate::Trait(poly_predicate) => {"}, {"sha": "3a2b0178ce4d099c525ea7457ed1bc3bc7bb5737", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -17,7 +17,6 @@ use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::subst::{Kind, Subst, InternalSubsts, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n use rustc::mir::interpret::ConstValue;\n-use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi;\n use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n@@ -46,7 +45,7 @@ pub trait AstConv<'gcx, 'tcx> {\n     /// Returns the set of bounds in scope for the type parameter with\n     /// the given id.\n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n-                                 -> Lrc<ty::GenericPredicates<'tcx>>;\n+                                 -> &'tcx ty::GenericPredicates<'tcx>;\n \n     /// What lifetime should we use when a lifetime is omitted (and not elided)?\n     fn re_infer(&self, span: Span, _def: Option<&ty::GenericParamDef>)"}, {"sha": "655bf5722ae5af7eb2959a3790d34286178343ff", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -97,7 +97,6 @@ use crate::namespace::Namespace;\n use rustc::infer::{self, InferCtxt, InferOk, InferResult};\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi::Abi;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n@@ -1907,15 +1906,15 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }\n \n     fn get_type_parameter_bounds(&self, _: Span, def_id: DefId)\n-                                 -> Lrc<ty::GenericPredicates<'tcx>>\n+                                 -> &'tcx ty::GenericPredicates<'tcx>\n     {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         let item_id = tcx.hir().ty_param_owner(hir_id);\n         let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n         let generics = tcx.generics_of(item_def_id);\n         let index = generics.param_def_id_to_index[&def_id];\n-        Lrc::new(ty::GenericPredicates {\n+        tcx.arena.alloc(ty::GenericPredicates {\n             parent: None,\n             predicates: self.param_env.caller_bounds.iter().filter_map(|&predicate| {\n                 match predicate {"}, {"sha": "45380d757b97d77d981c89366f7c20d090cff79b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -31,7 +31,6 @@ use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc::util::captures::Captures;\n use rustc::util::nodemap::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi;\n \n use syntax::ast;\n@@ -178,7 +177,7 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n     }\n \n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n-                                 -> Lrc<ty::GenericPredicates<'tcx>> {\n+                                 -> &'tcx ty::GenericPredicates<'tcx> {\n         self.tcx\n             .at(span)\n             .type_param_predicates((self.item_def_id, def_id))\n@@ -243,7 +242,7 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n fn type_param_predicates<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     (item_def_id, def_id): (DefId, DefId),\n-) -> Lrc<ty::GenericPredicates<'tcx>> {\n+) -> &'tcx ty::GenericPredicates<'tcx> {\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n@@ -264,16 +263,11 @@ fn type_param_predicates<'a, 'tcx>(\n         tcx.generics_of(item_def_id).parent\n     };\n \n-    let mut result = parent.map_or_else(\n-        || Lrc::new(ty::GenericPredicates {\n-            parent: None,\n-            predicates: vec![],\n-        }),\n-        |parent| {\n-            let icx = ItemCtxt::new(tcx, parent);\n-            icx.get_type_parameter_bounds(DUMMY_SP, def_id)\n-        },\n-    );\n+    let result = parent.map_or(&tcx.common.empty_predicates, |parent| {\n+        let icx = ItemCtxt::new(tcx, parent);\n+        icx.get_type_parameter_bounds(DUMMY_SP, def_id)\n+    });\n+    let mut extend = None;\n \n     let item_hir_id = tcx.hir().as_local_hir_id(item_def_id).unwrap();\n     let ast_generics = match tcx.hir().get_by_hir_id(item_hir_id) {\n@@ -298,9 +292,7 @@ fn type_param_predicates<'a, 'tcx>(\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_hir_id {\n                         let identity_trait_ref = ty::TraitRef::identity(tcx, item_def_id);\n-                        Lrc::make_mut(&mut result)\n-                            .predicates\n-                            .push((identity_trait_ref.to_predicate(), item.span));\n+                        extend = Some((identity_trait_ref.to_predicate(), item.span));\n                     }\n                     generics\n                 }\n@@ -317,11 +309,12 @@ fn type_param_predicates<'a, 'tcx>(\n     };\n \n     let icx = ItemCtxt::new(tcx, item_def_id);\n-    Lrc::make_mut(&mut result)\n-        .predicates\n-        .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty,\n-            OnlySelfBounds(true)));\n-    result\n+    let mut result = (*result).clone();\n+    result.predicates.extend(extend.into_iter());\n+    result.predicates\n+          .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty,\n+                  OnlySelfBounds(true)));\n+    tcx.arena.alloc(result)\n }\n \n impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n@@ -690,7 +683,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n fn super_predicates_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_def_id: DefId,\n-) -> Lrc<ty::GenericPredicates<'tcx>> {\n+) -> &'tcx ty::GenericPredicates<'tcx> {\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n     let trait_hir_id = tcx.hir().as_local_hir_id(trait_def_id).unwrap();\n \n@@ -734,7 +727,7 @@ fn super_predicates_of<'a, 'tcx>(\n         }\n     }\n \n-    Lrc::new(ty::GenericPredicates {\n+    tcx.arena.alloc(ty::GenericPredicates {\n         parent: None,\n         predicates: superbounds,\n     })\n@@ -1842,7 +1835,7 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n fn predicates_defined_on<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> Lrc<ty::GenericPredicates<'tcx>> {\n+) -> &'tcx ty::GenericPredicates<'tcx> {\n     debug!(\"predicates_defined_on({:?})\", def_id);\n     let mut result = tcx.explicit_predicates_of(def_id);\n     debug!(\n@@ -1858,9 +1851,9 @@ fn predicates_defined_on<'a, 'tcx>(\n             def_id,\n             inferred_outlives,\n         );\n-        Lrc::make_mut(&mut result)\n-            .predicates\n-            .extend(inferred_outlives.iter().map(|&p| (p, span)));\n+        let mut predicates = (*result).clone();\n+        predicates.predicates.extend(inferred_outlives.iter().map(|&p| (p, span)));\n+        result = tcx.arena.alloc(predicates);\n     }\n     debug!(\"predicates_defined_on({:?}) = {:?}\", def_id, result);\n     result\n@@ -1872,7 +1865,7 @@ fn predicates_defined_on<'a, 'tcx>(\n fn predicates_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> Lrc<ty::GenericPredicates<'tcx>> {\n+) -> &'tcx ty::GenericPredicates<'tcx> {\n     let mut result = tcx.predicates_defined_on(def_id);\n \n     if tcx.is_trait(def_id) {\n@@ -1889,9 +1882,9 @@ fn predicates_of<'a, 'tcx>(\n         // used, and adding the predicate into this list ensures\n         // that this is done.\n         let span = tcx.def_span(def_id);\n-        Lrc::make_mut(&mut result)\n-            .predicates\n-            .push((ty::TraitRef::identity(tcx, def_id).to_predicate(), span));\n+        let mut predicates = (*result).clone();\n+        predicates.predicates.push((ty::TraitRef::identity(tcx, def_id).to_predicate(), span));\n+        result = tcx.arena.alloc(predicates);\n     }\n     debug!(\"predicates_of(def_id={:?}) = {:?}\", def_id, result);\n     result\n@@ -1902,7 +1895,7 @@ fn predicates_of<'a, 'tcx>(\n fn explicit_predicates_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> Lrc<ty::GenericPredicates<'tcx>> {\n+) -> &'tcx ty::GenericPredicates<'tcx> {\n     use rustc::hir::*;\n     use rustc_data_structures::fx::FxHashSet;\n \n@@ -2017,7 +2010,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n \n                     if impl_trait_fn.is_some() {\n                         // impl Trait\n-                        return Lrc::new(ty::GenericPredicates {\n+                        return tcx.arena.alloc(ty::GenericPredicates {\n                             parent: None,\n                             predicates: bounds.predicates(tcx, opaque_ty),\n                         });\n@@ -2228,7 +2221,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n         );\n     }\n \n-    let result = Lrc::new(ty::GenericPredicates {\n+    let result = tcx.arena.alloc(ty::GenericPredicates {\n         parent: generics.parent,\n         predicates,\n     });"}, {"sha": "8e2460a14b87a7e6d62c9e82540f5294d1094c16", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -104,8 +104,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     // Instead, we generate `impl !Send for Foo<T>`, which better\n                     // expresses the fact that `Foo<T>` never implements `Send`,\n                     // regardless of the choice of `T`.\n-                    let params = (self.cx.tcx.generics_of(param_env_def_id), &Default::default())\n-                        .clean(self.cx).params;\n+                    let params = (\n+                        self.cx.tcx.generics_of(param_env_def_id),\n+                        &&self.cx.tcx.common.empty_predicates,\n+                    ).clean(self.cx).params;\n \n                     Generics {\n                         params,"}, {"sha": "9c3f522d8470fcbd69fe30dc66d8d840a80b5104", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8975c812c5f31102f1f840322e10696b369aa7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ae8975c812c5f31102f1f840322e10696b369aa7", "patch": "@@ -10,7 +10,6 @@ mod auto_trait;\n mod blanket_impl;\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n use rustc::infer::region_constraints::{RegionConstraintData, Constraint};\n@@ -1687,7 +1686,7 @@ impl Clean<Generics> for hir::Generics {\n }\n \n impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n-                                    &'a Lrc<ty::GenericPredicates<'tcx>>) {\n+                                    &'a &'tcx ty::GenericPredicates<'tcx>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Generics {\n         use self::WherePredicate as WP;\n "}]}