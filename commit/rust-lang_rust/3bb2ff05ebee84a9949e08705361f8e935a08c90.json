{"sha": "3bb2ff05ebee84a9949e08705361f8e935a08c90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYjJmZjA1ZWJlZTg0YTk5NDllMDg3MDUzNjFmOGU5MzVhMDhjOTA=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-03T22:29:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-13T15:48:00Z"}, "message": "Move coherence/overlap.rs into coherence/mod.rs\n\n`fn check_impl` was feeling lonely with a file all for itself.", "tree": {"sha": "46dd81cad54124d0fdba1e2397c0419413ea8728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46dd81cad54124d0fdba1e2397c0419413ea8728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bb2ff05ebee84a9949e08705361f8e935a08c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb2ff05ebee84a9949e08705361f8e935a08c90", "html_url": "https://github.com/rust-lang/rust/commit/3bb2ff05ebee84a9949e08705361f8e935a08c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bb2ff05ebee84a9949e08705361f8e935a08c90/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd52b197555ed047db0dfb2a881a5f74635be57", "url": "https://api.github.com/repos/rust-lang/rust/commits/edd52b197555ed047db0dfb2a881a5f74635be57", "html_url": "https://github.com/rust-lang/rust/commit/edd52b197555ed047db0dfb2a881a5f74635be57"}], "stats": {"total": 105, "additions": 45, "deletions": 60}, "files": [{"sha": "f65d627781f0fb802b848fcc40f5ad5c145d0b3f", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3bb2ff05ebee84a9949e08705361f8e935a08c90/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb2ff05ebee84a9949e08705361f8e935a08c90/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=3bb2ff05ebee84a9949e08705361f8e935a08c90", "patch": "@@ -16,6 +16,7 @@\n // mappings. That mapping code resides here.\n \n use hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::traits;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::maps::Providers;\n \n@@ -25,7 +26,6 @@ mod builtin;\n mod inherent_impls;\n mod inherent_impls_overlap;\n mod orphan;\n-mod overlap;\n mod unsafety;\n \n fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n@@ -119,7 +119,7 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n         check_impl(tcx, impl_id);\n     }\n     for &impl_id in impls {\n-        overlap::check_impl(tcx, impl_id);\n+        check_impl_overlap(tcx, impl_id);\n     }\n     builtin::check_trait(tcx, def_id);\n }\n@@ -136,3 +136,46 @@ pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     ty::maps::queries::crate_inherent_impls::ensure(tcx, LOCAL_CRATE);\n     ty::maps::queries::crate_inherent_impls_overlap_check::ensure(tcx, LOCAL_CRATE);\n }\n+\n+/// Overlap: No two impls for the same trait are implemented for the\n+/// same type. Likewise, no two inherent impls for a given type\n+/// constructor provide a method with the same name.\n+fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n+    let impl_def_id = tcx.hir.local_def_id(node_id);\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+    let trait_def_id = trait_ref.def_id;\n+\n+    if trait_ref.references_error() {\n+        debug!(\"coherence: skipping impl {:?} with error {:?}\",\n+               impl_def_id, trait_ref);\n+        return\n+    }\n+\n+    // Trigger building the specialization graph for the trait of this impl.\n+    // This will detect any overlap errors.\n+    tcx.specialization_graph_of(trait_def_id);\n+\n+    // check for overlap with the automatic `impl Trait for Trait`\n+    if let ty::TyDynamic(ref data, ..) = trait_ref.self_ty().sty {\n+        // This is something like impl Trait1 for Trait2. Illegal\n+        // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n+\n+        if data.principal().map_or(true, |p| !tcx.is_object_safe(p.def_id())) {\n+            // This is an error, but it will be reported by wfcheck.  Ignore it here.\n+            // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n+        } else {\n+            let mut supertrait_def_ids =\n+                traits::supertrait_def_ids(tcx,\n+                                           data.principal().unwrap().def_id());\n+            if supertrait_def_ids.any(|d| d == trait_def_id) {\n+                span_err!(tcx.sess,\n+                          tcx.span_of_impl(impl_def_id).unwrap(),\n+                          E0371,\n+                          \"the object type `{}` automatically \\\n+                           implements the trait `{}`\",\n+                          trait_ref.self_ty(),\n+                          tcx.item_path_str(trait_def_id));\n+            }\n+        }\n+    }\n+}"}, {"sha": "8c7db918f5ac281af7a1a771629a897789861eca", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Overlap: No two impls for the same trait are implemented for the\n-//! same type. Likewise, no two inherent impls for a given type\n-//! constructor provide a method with the same name.\n-\n-use rustc::traits;\n-use rustc::ty::{self, TyCtxt, TypeFoldable};\n-use syntax::ast;\n-\n-pub fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n-    let impl_def_id = tcx.hir.local_def_id(node_id);\n-    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-    let trait_def_id = trait_ref.def_id;\n-\n-    if trait_ref.references_error() {\n-        debug!(\"coherence: skipping impl {:?} with error {:?}\",\n-               impl_def_id, trait_ref);\n-        return\n-    }\n-\n-    // Trigger building the specialization graph for the trait of this impl.\n-    // This will detect any overlap errors.\n-    tcx.specialization_graph_of(trait_def_id);\n-\n-\n-    // check for overlap with the automatic `impl Trait for Trait`\n-    if let ty::TyDynamic(ref data, ..) = trait_ref.self_ty().sty {\n-        // This is something like impl Trait1 for Trait2. Illegal\n-        // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n-\n-        if data.principal().map_or(true, |p| !tcx.is_object_safe(p.def_id())) {\n-            // This is an error, but it will be reported by wfcheck.  Ignore it here.\n-            // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n-        } else {\n-            let mut supertrait_def_ids =\n-                traits::supertrait_def_ids(tcx,\n-                                           data.principal().unwrap().def_id());\n-            if supertrait_def_ids.any(|d| d == trait_def_id) {\n-                span_err!(tcx.sess,\n-                          tcx.span_of_impl(impl_def_id).unwrap(),\n-                          E0371,\n-                          \"the object type `{}` automatically \\\n-                           implements the trait `{}`\",\n-                          trait_ref.self_ty(),\n-                          tcx.item_path_str(trait_def_id));\n-            }\n-        }\n-    }\n-}"}]}