{"sha": "5c7b383e59111718b344abf21fa3edf13a68a68f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjN2IzODNlNTkxMTE3MThiMzQ0YWJmMjFmYTNlZGYxM2E2OGE2OGY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-27T01:34:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-27T01:34:30Z"}, "message": "Rollup merge of #82442 - Aaron1011:fix/closure-mut-crash, r=matthewjasper\n\nSkip emitting closure diagnostic when closure_kind_origins has no entry\n\nFixes #82438\n\nThis map is not guarnateed to have an entry for a closure.", "tree": {"sha": "9b61de13931fdc2ae779861fc3918921290a3500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b61de13931fdc2ae779861fc3918921290a3500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c7b383e59111718b344abf21fa3edf13a68a68f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOaGmCRBK7hj4Ov3rIwAAdHIIABTpEMnh7SsEZ3CIFsyXh+2D\nWTqEjCOkN15Jqi88ROYdeydiqe1ubm48ZoxCQW2VyeiQTso01z4HHNcGiAvo++u3\nTG6cqooTIu3n9A9mKoRPpol1owslkX5yA+NdcFsd+spORRHyKaucUFJSRnLPCP1X\nHikGrEyMtcDCT591dUfQo3cNfoUOi5zIlBBwXu9bE1R68KROueyJGSKw9PoHb28N\n5NPsi1JG9PuAf1ppXTb1dkixH+xZGfbL3v9d/3OkyKwmK7OL5e0VE4EC5ajp0AdJ\nTnoHsQthM2GM8XSvK8nHEki+ADY3J8sRsWV0NgtvO9TbCYLG0s8mPSsXcqWbKRw=\n=RvkK\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b61de13931fdc2ae779861fc3918921290a3500\nparent d80033f048d88bce20d4785ea7afdd88b4295f35\nparent 46db4bab0b44294a6e41eb756587904f8bed6049\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614389670 +0100\ncommitter GitHub <noreply@github.com> 1614389670 +0100\n\nRollup merge of #82442 - Aaron1011:fix/closure-mut-crash, r=matthewjasper\n\nSkip emitting closure diagnostic when closure_kind_origins has no entry\n\nFixes #82438\n\nThis map is not guarnateed to have an entry for a closure.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7b383e59111718b344abf21fa3edf13a68a68f", "html_url": "https://github.com/rust-lang/rust/commit/5c7b383e59111718b344abf21fa3edf13a68a68f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c7b383e59111718b344abf21fa3edf13a68a68f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d80033f048d88bce20d4785ea7afdd88b4295f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80033f048d88bce20d4785ea7afdd88b4295f35", "html_url": "https://github.com/rust-lang/rust/commit/d80033f048d88bce20d4785ea7afdd88b4295f35"}, {"sha": "46db4bab0b44294a6e41eb756587904f8bed6049", "url": "https://api.github.com/repos/rust-lang/rust/commits/46db4bab0b44294a6e41eb756587904f8bed6049", "html_url": "https://github.com/rust-lang/rust/commit/46db4bab0b44294a6e41eb756587904f8bed6049"}], "stats": {"total": 91, "additions": 66, "deletions": 25}, "files": [{"sha": "2f40a90fb5516f8099d8168273efad29e0e2c102", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5c7b383e59111718b344abf21fa3edf13a68a68f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7b383e59111718b344abf21fa3edf13a68a68f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=5c7b383e59111718b344abf21fa3edf13a68a68f", "patch": "@@ -513,32 +513,33 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let id = id.expect_local();\n         let tables = tcx.typeck(id);\n         let hir_id = tcx.hir().local_def_id_to_hir_id(id);\n-        let (span, place) = &tables.closure_kind_origins()[hir_id];\n-        let reason = if let PlaceBase::Upvar(upvar_id) = place.base {\n-            let upvar = ty::place_to_string_for_capture(tcx, place);\n-            match tables.upvar_capture(upvar_id) {\n-                ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n-                    kind: ty::BorrowKind::MutBorrow | ty::BorrowKind::UniqueImmBorrow,\n-                    ..\n-                }) => {\n-                    format!(\"mutable borrow of `{}`\", upvar)\n-                }\n-                ty::UpvarCapture::ByValue(_) => {\n-                    format!(\"possible mutation of `{}`\", upvar)\n+        if let Some((span, place)) = tables.closure_kind_origins().get(hir_id) {\n+            let reason = if let PlaceBase::Upvar(upvar_id) = place.base {\n+                let upvar = ty::place_to_string_for_capture(tcx, place);\n+                match tables.upvar_capture(upvar_id) {\n+                    ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n+                        kind: ty::BorrowKind::MutBorrow | ty::BorrowKind::UniqueImmBorrow,\n+                        ..\n+                    }) => {\n+                        format!(\"mutable borrow of `{}`\", upvar)\n+                    }\n+                    ty::UpvarCapture::ByValue(_) => {\n+                        format!(\"possible mutation of `{}`\", upvar)\n+                    }\n+                    val => bug!(\"upvar `{}` borrowed, but not mutably: {:?}\", upvar, val),\n                 }\n-                val => bug!(\"upvar `{}` borrowed, but not mutably: {:?}\", upvar, val),\n-            }\n-        } else {\n-            bug!(\"not an upvar\")\n-        };\n-        err.span_label(\n-            *span,\n-            format!(\n-                \"calling `{}` requires mutable binding due to {}\",\n-                self.describe_place(the_place_err).unwrap(),\n-                reason\n-            ),\n-        );\n+            } else {\n+                bug!(\"not an upvar\")\n+            };\n+            err.span_label(\n+                *span,\n+                format!(\n+                    \"calling `{}` requires mutable binding due to {}\",\n+                    self.describe_place(the_place_err).unwrap(),\n+                    reason\n+                ),\n+            );\n+        }\n     }\n \n     // Attempt to search similar mutable associated items for suggestion."}, {"sha": "5d88e1e77d4509c341e3fb97469e44668835d0b0", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5c7b383e59111718b344abf21fa3edf13a68a68f/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7b383e59111718b344abf21fa3edf13a68a68f/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs?ref=5c7b383e59111718b344abf21fa3edf13a68a68f", "patch": "@@ -0,0 +1,28 @@\n+use std::error::Error;\n+struct A {\n+}\n+\n+impl A {\n+    pub fn new() -> A {\n+        A {\n+        }\n+    }\n+\n+    pub fn f<'a>(\n+        &'a self,\n+        team_name: &'a str,\n+        c: &'a mut dyn FnMut(String, String, u64, u64)\n+    ) -> Result<(), Box<dyn Error>> {\n+        Ok(())\n+    }\n+}\n+\n+\n+fn main() {\n+    let A = A::new();\n+    let participant_name = \"A\";\n+\n+    let c = |a, b, c, d| {};\n+\n+    A.f(participant_name, &mut c); //~ ERROR cannot borrow\n+}"}, {"sha": "06e2b5d0c1bce97fde162a4cebaa85dd3a849828", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c7b383e59111718b344abf21fa3edf13a68a68f/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c7b383e59111718b344abf21fa3edf13a68a68f/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr?ref=5c7b383e59111718b344abf21fa3edf13a68a68f", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow `c` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-82438-mut-without-upvar.rs:27:27\n+   |\n+LL |     let c = |a, b, c, d| {};\n+   |         - help: consider changing this to be mutable: `mut c`\n+LL | \n+LL |     A.f(participant_name, &mut c);\n+   |                           ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}]}