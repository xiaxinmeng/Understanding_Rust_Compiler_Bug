{"sha": "540eaf985d08b140bf792b7c68731a641ecb026a", "node_id": "C_kwDOAAsO6NoAKDU0MGVhZjk4NWQwOGIxNDBiZjc5MmI3YzY4NzMxYTY0MWVjYjAyNmE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-29T15:07:46Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-05T15:00:20Z"}, "message": "errors: introduce `DecorateLint`\n\nAdd a new trait to be generated by diagnostic derives which uses a\n`LintDiagnosticBuilder`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "33e106eed714e906247b041b7fc69390ef635d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e106eed714e906247b041b7fc69390ef635d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/540eaf985d08b140bf792b7c68731a641ecb026a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/540eaf985d08b140bf792b7c68731a641ecb026a", "html_url": "https://github.com/rust-lang/rust/commit/540eaf985d08b140bf792b7c68731a641ecb026a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/540eaf985d08b140bf792b7c68731a641ecb026a/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2874f09534b39b98b23a649e8300e8bdd2fb1823", "url": "https://api.github.com/repos/rust-lang/rust/commits/2874f09534b39b98b23a649e8300e8bdd2fb1823", "html_url": "https://github.com/rust-lang/rust/commit/2874f09534b39b98b23a649e8300e8bdd2fb1823"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "0d1d017d87458655a8af1a162a4e991271ef2151", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=540eaf985d08b140bf792b7c68731a641ecb026a", "patch": "@@ -1,7 +1,7 @@\n use crate::snippet::Style;\n use crate::{\n-    CodeSuggestion, DiagnosticMessage, Level, MultiSpan, SubdiagnosticMessage, Substitution,\n-    SubstitutionPart, SuggestionStyle,\n+    CodeSuggestion, DiagnosticMessage, EmissionGuarantee, Level, LintDiagnosticBuilder, MultiSpan,\n+    SubdiagnosticMessage, Substitution, SubstitutionPart, SuggestionStyle,\n };\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_error_messages::FluentValue;\n@@ -168,6 +168,14 @@ pub trait AddSubdiagnostic {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic);\n }\n \n+/// Trait implemented by lint types. This should not be implemented manually. Instead, use\n+/// `#[derive(LintDiagnostic)]` -- see [rustc_macros::LintDiagnostic].\n+#[rustc_diagnostic_item = \"DecorateLint\"]\n+pub trait DecorateLint<'a, G: EmissionGuarantee> {\n+    /// Decorate and emit a lint.\n+    fn decorate_lint(self, diag: LintDiagnosticBuilder<'a, G>);\n+}\n+\n #[must_use]\n #[derive(Clone, Debug, Encodable, Decodable)]\n pub struct Diagnostic {"}, {"sha": "ffe4ecebb2e3681a92a2d86f2d501dc35eae9e21", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=540eaf985d08b140bf792b7c68731a641ecb026a", "patch": "@@ -370,7 +370,7 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{\n-    AddSubdiagnostic, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n+    AddSubdiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n     DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, LintDiagnosticBuilder};"}, {"sha": "83328093e9fa81aba558a49efd81a01a17959687", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=540eaf985d08b140bf792b7c68731a641ecb026a", "patch": "@@ -22,7 +22,9 @@ use rustc_ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_errors::{add_elided_lifetime_in_path_suggestion, struct_span_err};\n-use rustc_errors::{Applicability, LintDiagnosticBuilder, MultiSpan, SuggestionStyle};\n+use rustc_errors::{\n+    Applicability, DecorateLint, LintDiagnosticBuilder, MultiSpan, SuggestionStyle,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -870,6 +872,17 @@ pub trait LintContext: Sized {\n         decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     );\n \n+    /// Emit a lint at `span` from a lint struct (some type that implements `DecorateLint`,\n+    /// typically generated by `#[derive(LintDiagnostic)]`).\n+    fn emit_spanned_lint<S: Into<MultiSpan>>(\n+        &self,\n+        lint: &'static Lint,\n+        span: S,\n+        decorator: impl for<'a> DecorateLint<'a, ()>,\n+    ) {\n+        self.lookup(lint, Some(span), |diag| decorator.decorate_lint(diag));\n+    }\n+\n     fn struct_span_lint<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static Lint,\n@@ -878,6 +891,13 @@ pub trait LintContext: Sized {\n     ) {\n         self.lookup(lint, Some(span), decorate);\n     }\n+\n+    /// Emit a lint from a lint struct (some type that implements `DecorateLint`, typically\n+    /// generated by `#[derive(LintDiagnostic)]`).\n+    fn emit_lint(&self, lint: &'static Lint, decorator: impl for<'a> DecorateLint<'a, ()>) {\n+        self.lookup(lint, None as Option<Span>, |diag| decorator.decorate_lint(diag));\n+    }\n+\n     /// Emit a lint at the appropriate level, with no associated span.\n     fn lint(\n         &self,"}, {"sha": "738f475983e9b692c2a803338393ae0e2dd40491", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=540eaf985d08b140bf792b7c68731a641ecb026a", "patch": "@@ -414,7 +414,7 @@ impl LateLintPass<'_> for Diagnostics {\n                 let Impl { of_trait: Some(of_trait), .. } = impl_ &&\n                 let Some(def_id) = of_trait.trait_def_id() &&\n                 let Some(name) = cx.tcx.get_diagnostic_name(def_id) &&\n-                matches!(name, sym::SessionDiagnostic | sym::AddSubdiagnostic)\n+                matches!(name, sym::SessionDiagnostic | sym::AddSubdiagnostic | sym::DecorateLint)\n             {\n                 found_impl = true;\n                 break;"}, {"sha": "3d8b0763122f125f417d019979e0e081a31ed742", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=540eaf985d08b140bf792b7c68731a641ecb026a", "patch": "@@ -34,7 +34,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_errors::{ErrorGuaranteed, LintDiagnosticBuilder, MultiSpan};\n+use rustc_errors::{DecorateLint, ErrorGuaranteed, LintDiagnosticBuilder, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n@@ -2787,6 +2787,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Emit a lint at `span` from a lint struct (some type that implements `DecorateLint`,\n+    /// typically generated by `#[derive(LintDiagnostic)]`).\n+    pub fn emit_spanned_lint(\n+        self,\n+        lint: &'static Lint,\n+        hir_id: HirId,\n+        span: impl Into<MultiSpan>,\n+        decorator: impl for<'a> DecorateLint<'a, ()>,\n+    ) {\n+        self.struct_span_lint_hir(lint, hir_id, span, |diag| decorator.decorate_lint(diag))\n+    }\n+\n     pub fn struct_span_lint_hir(\n         self,\n         lint: &'static Lint,\n@@ -2798,6 +2810,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);\n     }\n \n+    /// Emit a lint from a lint struct (some type that implements `DecorateLint`, typically\n+    /// generated by `#[derive(LintDiagnostic)]`).\n+    pub fn emit_lint(\n+        self,\n+        lint: &'static Lint,\n+        id: HirId,\n+        decorator: impl for<'a> DecorateLint<'a, ()>,\n+    ) {\n+        self.struct_lint_node(lint, id, |diag| decorator.decorate_lint(diag))\n+    }\n+\n     pub fn struct_lint_node(\n         self,\n         lint: &'static Lint,"}, {"sha": "65a2a18e02f8f5ea3b826f59324abd6d9977ef19", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540eaf985d08b140bf792b7c68731a641ecb026a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=540eaf985d08b140bf792b7c68731a641ecb026a", "patch": "@@ -173,6 +173,7 @@ symbols! {\n         DebugTuple,\n         Decodable,\n         Decoder,\n+        DecorateLint,\n         Default,\n         Deref,\n         DiagnosticMessage,"}]}