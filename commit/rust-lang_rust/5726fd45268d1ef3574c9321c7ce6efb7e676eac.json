{"sha": "5726fd45268d1ef3574c9321c7ce6efb7e676eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjZmZDQ1MjY4ZDFlZjM1NzRjOTMyMWM3Y2U2ZWZiN2U2NzZlYWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-20T21:38:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-21T16:47:17Z"}, "message": "librustc: Forbid access to cross-crate private static methods", "tree": {"sha": "e0a44f88291d3db7eb9582a39aa5f2dadc37ee75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a44f88291d3db7eb9582a39aa5f2dadc37ee75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5726fd45268d1ef3574c9321c7ce6efb7e676eac", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5726fd45268d1ef3574c9321c7ce6efb7e676eac", "html_url": "https://github.com/rust-lang/rust/commit/5726fd45268d1ef3574c9321c7ce6efb7e676eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5726fd45268d1ef3574c9321c7ce6efb7e676eac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "html_url": "https://github.com/rust-lang/rust/commit/56d288d0dc89ae8d284ffddf74f6be9d0f37362e"}], "stats": {"total": 63, "additions": 46, "deletions": 17}, "files": [{"sha": "16b896f11d6a495a6af2dc2dd7ccac860acce110", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=5726fd45268d1ef3574c9321c7ce6efb7e676eac", "patch": "@@ -229,11 +229,11 @@ pub fn struct_dtor(cstore: @mut cstore::CStore, def: ast::def_id)\n     decoder::struct_dtor(cdata, def.node)\n }\n \n-pub fn get_method_visibility(cstore: @mut cstore::CStore,\n-                             def_id: ast::def_id)\n-                          -> ast::visibility {\n+pub fn get_item_visibility(cstore: @mut cstore::CStore,\n+                           def_id: ast::def_id)\n+                        -> ast::visibility {\n     let cdata = cstore::get_crate_data(cstore, def_id.crate);\n-    decoder::get_method_visibility(cdata, def_id.node)\n+    decoder::get_item_visibility(cdata, def_id.node)\n }\n \n pub fn get_link_args_for_crate(cstore: @mut cstore::CStore,"}, {"sha": "292a11062613d953566a392b1b208d8fe0cbf9f2", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=5726fd45268d1ef3574c9321c7ce6efb7e676eac", "patch": "@@ -145,13 +145,16 @@ fn item_family(item: ebml::Doc) -> Family {\n }\n \n fn item_visibility(item: ebml::Doc) -> ast::visibility {\n-    let visibility = reader::get_doc(item, tag_items_data_item_visibility);\n-    debug!(\"item visibility for %?\", item_family(item));\n-    match reader::doc_as_u8(visibility) as char {\n-        'y' => ast::public,\n-        'n' => ast::private,\n-        'i' => ast::inherited,\n-        _ => fail!(~\"unknown visibility character\"),\n+    match reader::maybe_get_doc(item, tag_items_data_item_visibility) {\n+        None => ast::public,\n+        Some(visibility_doc) => {\n+            match reader::doc_as_u8(visibility_doc) as char {\n+                'y' => ast::public,\n+                'n' => ast::private,\n+                'i' => ast::inherited,\n+                _ => fail!(~\"unknown visibility character\")\n+            }\n+        }\n     }\n }\n \n@@ -909,8 +912,8 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n     result\n }\n \n-pub fn get_method_visibility(cdata: cmd, id: ast::node_id)\n-                          -> ast::visibility {\n+pub fn get_item_visibility(cdata: cmd, id: ast::node_id)\n+                        -> ast::visibility {\n     item_visibility(lookup_item(id, cdata.data))\n }\n "}, {"sha": "c3a65a4f256f447bacf082b8aedb5df4c1f4bea8", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=5726fd45268d1ef3574c9321c7ce6efb7e676eac", "patch": "@@ -265,8 +265,7 @@ pub fn check_crate(tcx: ty::ctxt,\n             }\n         } else {\n             let visibility =\n-                csearch::get_method_visibility(tcx.sess.cstore,\n-                                               method_id);\n+                csearch::get_item_visibility(tcx.sess.cstore, method_id);\n             if visibility != public {\n                 tcx.sess.span_err(span,\n                                   fmt!(\"method `%s` is private\",\n@@ -298,8 +297,16 @@ pub fn check_crate(tcx: ty::ctxt,\n                                                              .idents\n                                                              .last())));\n                     }\n-                } else {\n-                    // XXX: Check privacy in external crates.\n+                } else if csearch::get_item_visibility(tcx.sess.cstore,\n+                                                       def_id) != public {\n+                    tcx.sess.span_err(span,\n+                                      fmt!(\"function `%s` is private\",\n+                                           *tcx.sess\n+                                               .parse_sess\n+                                               .interner\n+                                               .get(copy *path\n+                                                         .idents\n+                                                         .last())));\n                 }\n             }\n             _ => {}"}, {"sha": "f9fda2b0810b350624ec05b1c676428d92523d3f", "filename": "src/test/auxiliary/xc_private_method_lib.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs?ref=5726fd45268d1ef3574c9321c7ce6efb7e676eac", "patch": "@@ -0,0 +1,10 @@\n+#[crate_type=\"lib\"];\n+\n+pub struct Foo {\n+    x: int\n+}\n+\n+impl Foo {\n+    fn new() -> Foo { Foo { x: 1 } }\n+}\n+"}, {"sha": "d194820df9408abfbfc96bb2210594439a74a8b1", "filename": "src/test/compile-fail/xc-private-method.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5726fd45268d1ef3574c9321c7ce6efb7e676eac/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs?ref=5726fd45268d1ef3574c9321c7ce6efb7e676eac", "patch": "@@ -0,0 +1,9 @@\n+// xfail-fast\n+// aux-build:xc_private_method_lib.rs\n+\n+extern mod xc_private_method_lib;\n+\n+fn main() {\n+    let _ = xc_private_method_lib::Foo::new();  //~ ERROR function `new` is private\n+}\n+"}]}