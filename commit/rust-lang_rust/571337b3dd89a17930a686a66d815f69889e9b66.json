{"sha": "571337b3dd89a17930a686a66d815f69889e9b66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MTMzN2IzZGQ4OWExNzkzMGE2ODZhNjZkODE1ZjY5ODg5ZTliNjY=", "commit": {"author": {"name": "Tomas Gavenciak", "email": "gavento@ucw.cz", "date": "2018-04-11T21:41:20Z"}, "committer": {"name": "Tomas Gavenciak", "email": "gavento@ucw.cz", "date": "2018-05-02T20:17:31Z"}, "message": "Update tests with Nikos comments", "tree": {"sha": "3ab50a684b9430d6fa5ff8b1226d0d01343cfdb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab50a684b9430d6fa5ff8b1226d0d01343cfdb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/571337b3dd89a17930a686a66d815f69889e9b66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/571337b3dd89a17930a686a66d815f69889e9b66", "html_url": "https://github.com/rust-lang/rust/commit/571337b3dd89a17930a686a66d815f69889e9b66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/571337b3dd89a17930a686a66d815f69889e9b66/comments", "author": {"login": "gavento", "id": 956446, "node_id": "MDQ6VXNlcjk1NjQ0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/956446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavento", "html_url": "https://github.com/gavento", "followers_url": "https://api.github.com/users/gavento/followers", "following_url": "https://api.github.com/users/gavento/following{/other_user}", "gists_url": "https://api.github.com/users/gavento/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavento/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavento/subscriptions", "organizations_url": "https://api.github.com/users/gavento/orgs", "repos_url": "https://api.github.com/users/gavento/repos", "events_url": "https://api.github.com/users/gavento/events{/privacy}", "received_events_url": "https://api.github.com/users/gavento/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gavento", "id": 956446, "node_id": "MDQ6VXNlcjk1NjQ0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/956446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavento", "html_url": "https://github.com/gavento", "followers_url": "https://api.github.com/users/gavento/followers", "following_url": "https://api.github.com/users/gavento/following{/other_user}", "gists_url": "https://api.github.com/users/gavento/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavento/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavento/subscriptions", "organizations_url": "https://api.github.com/users/gavento/orgs", "repos_url": "https://api.github.com/users/gavento/repos", "events_url": "https://api.github.com/users/gavento/events{/privacy}", "received_events_url": "https://api.github.com/users/gavento/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0617b925e83079ebebc53bc9a29a9e4105a39ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0617b925e83079ebebc53bc9a29a9e4105a39ec3", "html_url": "https://github.com/rust-lang/rust/commit/0617b925e83079ebebc53bc9a29a9e4105a39ec3"}], "stats": {"total": 112, "additions": 65, "deletions": 47}, "files": [{"sha": "24d756a83314e60bcba7fc7206e0be8954ecd3b8", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.rs?ref=571337b3dd89a17930a686a66d815f69889e9b66", "patch": "@@ -19,16 +19,19 @@\n // associated-type-constructors-part-2-family-traits/\n \n trait Collection<T> {\n-    fn empty() -> Self;\n-    fn add(&mut self, value: T);\n-    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n     type Iter<'iter>: Iterator<Item=&'iter T>;\n     type Family: CollectionFamily;\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> = <<Self as Collection<T>>::Family as CollectionFamily>::\n         Member<U>;\n     //~^ ERROR type parameters are not allowed on this type [E0109]\n+\n+    fn empty() -> Self;\n+\n+    fn add(&mut self, value: T);\n+\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n }\n \n trait CollectionFamily {\n@@ -42,23 +45,28 @@ impl CollectionFamily for VecFamily {\n }\n \n impl<T> Collection<T> for Vec<T> {\n+    type Iter<'iter> = std::slice::Iter<'iter, T>;\n+    type Family = VecFamily;\n+\n     fn empty() -> Self {\n         Vec::new()\n     }\n+\n     fn add(&mut self, value: T) {\n         self.push(value)\n     }\n+\n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n         self.iter()\n     }\n-    type Iter<'iter> = std::slice::Iter<'iter, T>;\n-    type Family = VecFamily;\n }\n \n fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n     //~^ ERROR type parameters are not allowed on this type [E0109]\n-    where C: Collection<i32> {\n+where\n+    C: Collection<i32>,\n+{\n     let mut res = C::Family::Member::<f32>::empty();\n     for &v in ints.iterate() {\n         res.add(v as f32);\n@@ -68,7 +76,9 @@ fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>\n \n fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n     //~^ ERROR type parameters are not allowed on this type [E0109]\n-    where C: Collection<i32> {\n+where\n+    C: Collection<i32>,\n+{\n     let mut res = C::Family::Member::<f32>::empty();\n     for &v in ints.iterate() {\n         res.add(v as f32);"}, {"sha": "0a51bf56397df32746219fdc1f216f2056faafd7", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=571337b3dd89a17930a686a66d815f69889e9b66", "patch": "@@ -1,29 +1,29 @@\n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/collections.rs:59:90\n+  --> $DIR/collections.rs:65:90\n    |\n LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n    |                                                                                          ^^^ type parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/collections.rs:69:69\n+  --> $DIR/collections.rs:77:69\n    |\n LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n    |                                                                     ^^^ type parameter not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/collections.rs:24:50\n-   |\n-LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-   |                                                  ^^^^^ lifetime parameter not allowed on this type\n-\n error[E0109]: type parameters are not allowed on this type\n-  --> $DIR/collections.rs:30:16\n+  --> $DIR/collections.rs:26:16\n    |\n LL |         Member<U>;\n    |                ^ type parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/collections.rs:51:50\n+  --> $DIR/collections.rs:33:50\n+   |\n+LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n+   |                                                  ^^^^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/collections.rs:59:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n    |                                                  ^^^^^ lifetime parameter not allowed on this type"}, {"sha": "04294100315264ec5f1a26bb3a6834da7e86500b", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=571337b3dd89a17930a686a66d815f69889e9b66", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(generic_associated_types)]\n \n+use std::ops::Deref;\n+\n //FIXME(#44265): \"lifetime parameters are not allowed on this type\" errors will be addressed in a\n //follow-up PR\n \n@@ -18,11 +20,18 @@ trait Foo {\n }\n \n trait Baz {\n-    type Quux<'a>;\n+    type Quux<'a>: Foo;\n+\n+    // This weird type tests that we can use universal function call syntax to access the Item on\n+    type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n+    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n+    //~| ERROR lifetime parameters are not allowed on this type [E0110]\n }\n \n impl<T> Baz for T where T: Foo {\n-    type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n+    type Quux<'a> = T;\n+\n+    type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n }\n "}, {"sha": "764a0db2478a8478d7d86dd03758905bf9db48f4", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=571337b3dd89a17930a686a66d815f69889e9b66", "patch": "@@ -1,9 +1,21 @@\n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/construct_with_other_type.rs:25:37\n+  --> $DIR/construct_with_other_type.rs:26:46\n    |\n-LL |     type Quux<'a> = <T as Foo>::Bar<'a, 'static>;\n-   |                                     ^^ lifetime parameter not allowed on this type\n+LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n+   |                                              ^^ lifetime parameter not allowed on this type\n \n-error: aborting due to previous error\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/construct_with_other_type.rs:26:63\n+   |\n+LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n+   |                                                               ^^ lifetime parameter not allowed on this type\n+\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/construct_with_other_type.rs:34:40\n+   |\n+LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n+   |                                        ^^ lifetime parameter not allowed on this type\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0110`."}, {"sha": "38967dbbe4530ea4ab28da1943889f4ef1e8d54f", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=571337b3dd89a17930a686a66d815f69889e9b66", "patch": "@@ -20,11 +20,6 @@ trait Iterable {\n     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n \n-    // This weird type tests that we can use universal function call syntax to access the Item on\n-    // Self::Iter which we have declared to be an Iterator\n-    type Iter2<'a>: Deref<Target = <Self::Iter<'a> as Iterator>::Item>;\n-    //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n-\n     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n }\n@@ -33,8 +28,7 @@ trait Iterable {\n impl<T> Iterable for Vec<T> {\n     type Item<'a> = &'a T;\n     type Iter<'a> = std::slice::Iter<'a, T>;\n-    type Iter2<'a> = &'a T;\n-    // gavento: ^^^ Not 100% sure about the intention here\n+\n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n         self.iter()\n@@ -45,8 +39,7 @@ impl<T> Iterable for Vec<T> {\n impl<T> Iterable for [T] {\n     type Item<'a> = &'a T;\n     type Iter<'a> = std::slice::Iter<'a, T>;\n-    type Iter2<'a> = &'a T;\n-    // gavento: ^^^ Not 100% sure about the intention here\n+\n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n     //~^ ERROR lifetime parameters are not allowed on this type [E0110]\n         self.iter()"}, {"sha": "0e251300e451f8bb49eae67a15577a72ead73977", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=571337b3dd89a17930a686a66d815f69889e9b66", "patch": "@@ -5,41 +5,35 @@ LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n    |                                               ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:25:48\n-   |\n-LL |     type Iter2<'a>: Deref<Target = <Self::Iter<'a> as Iterator>::Item>;\n-   |                                                ^^ lifetime parameter not allowed on this type\n-\n-error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:56:53\n+  --> $DIR/iterable.rs:49:53\n    |\n LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n    |                                                     ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:61:60\n+  --> $DIR/iterable.rs:54:60\n    |\n LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n    |                                                            ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:28:41\n+  --> $DIR/iterable.rs:23:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n    |                                         ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:38:41\n+  --> $DIR/iterable.rs:32:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                                         ^^ lifetime parameter not allowed on this type\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/iterable.rs:50:41\n+  --> $DIR/iterable.rs:43:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                                         ^^ lifetime parameter not allowed on this type\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0110`."}, {"sha": "6ed7380f3f87a319f60c9c510f937d82bd3d8b78", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571337b3dd89a17930a686a66d815f69889e9b66/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs?ref=571337b3dd89a17930a686a66d815f69889e9b66", "patch": "@@ -11,8 +11,8 @@\n #![feature(generic_associated_types)]\n \n //FIXME(#44265): The lifetime shadowing and type parameter shadowing\n-// should cause an error. This will be addressed by a future PR.\n-// For now this compiles:\n+// should cause an error. Now it compiles (errorneously) and this will be addressed\n+// by a future PR. Then remove the following:\n // must-compile-successfully\n \n trait Shadow<'a> {"}]}