{"sha": "abe94f9b4d0d072e2477b989715c6c79e97de259", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTk0ZjliNGQwZDA3MmUyNDc3Yjk4OTcxNWM2Yzc5ZTk3ZGUyNTk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-16T05:41:28Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-16T05:41:28Z"}, "message": "doc: correct spelling in documentation.", "tree": {"sha": "705abd2a2859eeb55a097d6e7b4ccfd080bbb2be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705abd2a2859eeb55a097d6e7b4ccfd080bbb2be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe94f9b4d0d072e2477b989715c6c79e97de259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe94f9b4d0d072e2477b989715c6c79e97de259", "html_url": "https://github.com/rust-lang/rust/commit/abe94f9b4d0d072e2477b989715c6c79e97de259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe94f9b4d0d072e2477b989715c6c79e97de259/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad0cf5841e2fb577c4c26a051067fdd06e24796", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad0cf5841e2fb577c4c26a051067fdd06e24796", "html_url": "https://github.com/rust-lang/rust/commit/1ad0cf5841e2fb577c4c26a051067fdd06e24796"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "8b06c170f035f90c3c735de91d1dc7b26275ebae", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -582,7 +582,7 @@ a referencing source file, or by the name of the crate itself.\n \n Each source file contains a sequence of zero or more `item` definitions,\n and may optionally begin with any number of `attributes` that apply to the containing module.\n-Atributes on the anonymous crate module define important metadata that influences\n+Attributes on the anonymous crate module define important metadata that influences\n the behavior of the compiler.\n \n ~~~~~~~~\n@@ -1273,7 +1273,7 @@ since the typechecker checks that any type with an implementation of `Circle` al\n \n In type-parameterized functions,\n methods of the supertrait may be called on values of subtrait-bound type parameters.\n-Refering to the previous example of `trait Circle : Shape`:\n+Referring to the previous example of `trait Circle : Shape`:\n \n ~~~\n # trait Shape { fn area(&self) -> float; }\n@@ -1914,7 +1914,7 @@ A field access on a record is an [lvalue](#lvalues-rvalues-and-temporaries) refe\n When the field is mutable, it can be [assigned](#assignment-expressions) to.\n \n When the type of the expression to the left of the dot is a pointer to a record or structure,\n-it is automatically derferenced to make the field access possible.\n+it is automatically dereferenced to make the field access possible.\n \n \n ### Vector expressions"}, {"sha": "2b1246b0af0078d68986f58b14793ad3ead4d5cc", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -18,7 +18,7 @@ pub struct EnumSet<E> {\n     priv bits: uint\n }\n \n-/// An iterface for casting C-like enum to uint and back.\n+/// An interface for casting C-like enum to uint and back.\n pub trait CLike {\n     /// Converts C-like enum to uint.\n     fn to_uint(&self) -> uint;"}, {"sha": "aa7c6433f1fccd7ebad5269972c4fd5fdd10e494", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -166,7 +166,7 @@ Constructors for flat pipes that send POD types using memcpy.\n \n This module is currently unsafe because it uses `Clone + Send` as a type\n parameter bounds meaning POD (plain old data), but `Clone + Send` and\n-POD are not equivelant.\n+POD are not equivalent.\n \n */\n pub mod pod {"}, {"sha": "0cea4c1ac6c015f597309cba8168697bba9f00b6", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -365,7 +365,7 @@ pub fn write_boxplot(w: @io::Writer, s: &Summary, width_hint: uint) {\n     w.write_str(histr);\n }\n \n-/// Returns a HashMap with the number of occurences of every element in the\n+/// Returns a HashMap with the number of occurrences of every element in the\n /// sequence that the iterator exposes.\n pub fn freq_count<T: Iterator<U>, U: Eq+Hash>(mut iter: T) -> hashmap::HashMap<U, uint> {\n     let mut map = hashmap::HashMap::new::<U, uint>();"}, {"sha": "120946ad161e3b710038e32a7a8a61f66719ab13", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -200,7 +200,7 @@ pub mod raw {\n      * Sets the length of a vector\n      *\n      * This will explicitly set the size of the vector, without actually\n-     * modifing its buffers, so it is up to the caller to ensure that\n+     * modifying its buffers, so it is up to the caller to ensure that\n      * the vector is actually the specified size.\n      */\n     #[inline]"}, {"sha": "b8175e43fb6695cee0dab8d25799df390eaebe06", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -33,7 +33,7 @@ and more.\n \n Also, a few conversion functions: `to_bit` and `to_str`.\n \n-Finally, some inquries into the nature of truth: `is_true` and `is_false`.\n+Finally, some inquiries into the nature of truth: `is_true` and `is_false`.\n \n */\n "}, {"sha": "5feb72cb9cd8e4a48c502e62587a4fea5127440f", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -147,7 +147,7 @@ helper methods.\n ## Internationalization\n \n The formatting syntax supported by the `ifmt!` extension supports\n-internationalization by providing \"methods\" which execute various differnet\n+internationalization by providing \"methods\" which execute various different\n outputs depending on the input. The syntax and methods provided are similar to\n other internationalization systems, so again nothing should seem alien.\n Currently two methods are supported by this extension: \"select\" and \"plural\"."}, {"sha": "84295d0bd5a45958969ba979266038e2d4ce121d", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -66,7 +66,7 @@ pub enum Position<'self> {\n     ArgumentNext, ArgumentIs(uint), ArgumentNamed(&'self str)\n }\n \n-/// Enum of alignments which are supoprted.\n+/// Enum of alignments which are supported.\n #[deriving(Eq)]\n pub enum Alignment { AlignLeft, AlignRight, AlignUnknown }\n "}, {"sha": "52d5f835fe63d4fe1027efea4e1d0b21dee497d9", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -125,7 +125,7 @@ pub static neg_infinity: f32 = -1.0_f32/0.0_f32;\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // staticants from cmath.\n-    /// Archimedes' staticant\n+    /// Archimedes' constant\n     pub static pi: f32 = 3.14159265358979323846264338327950288_f32;\n \n     /// pi/2.0"}, {"sha": "6244189d0d639860fea86b9e885eb0c7e88f6524", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -254,7 +254,7 @@ pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: &fn(*T)) {\n   passing to the provided callback function\n \n   SAFETY NOTE: This will only work with a null-terminated\n-  pointer array. Barely less-dodgey Pointer Arithmetic.\n+  pointer array. Barely less-dodgy Pointer Arithmetic.\n   Dragons be here.\n */\n pub unsafe fn array_each<T>(arr: **T, cb: &fn(*T)) {"}, {"sha": "9e53c596656b264174c72f601ae547bf09941bcc", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -658,7 +658,7 @@ pub fn rng() -> IsaacRng {\n \n /// Create a weak random number generator with a default algorithm and seed.\n ///\n-/// It returns the fatest `Rng` algorithm currently available in Rust without\n+/// It returns the fastest `Rng` algorithm currently available in Rust without\n /// consideration for cryptography or security. If you require a specifically\n /// seeded `Rng` for consistency over time you should pick one algorithm and\n /// create the `Rng` yourself."}, {"sha": "61cf8df4a1ffad756fb32f33129c3d147918c547", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -25,7 +25,7 @@ use str::StrSlice;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n-/// In order to provide informative error messages, `E` is reqired to implement `ToStr`.\n+/// In order to provide informative error messages, `E` is required to implement `ToStr`.\n /// It is further recommended for `E` to be a descriptive error type, eg a `enum` for\n /// all possible errors cases.\n #[deriving(Clone, Eq)]"}, {"sha": "78c4cec2d4cd1e0beb3f1990c9f96eb2b9dfcc70", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -93,7 +93,7 @@ Asynchronous interfaces are most often associated with the callback\n (continuation-passing) style popularised by node.js. Such systems rely\n on all computations being run inside an event loop which maintains a\n list of all pending I/O events; when one completes the registered\n-callback is run and the code that made the I/O request continiues.\n+callback is run and the code that made the I/O request continues.\n Such interfaces achieve non-blocking at the expense of being more\n difficult to reason about.\n \n@@ -136,7 +136,7 @@ Rust's I/O employs a combination of techniques to reduce boilerplate\n while still providing feedback about errors. The basic strategy:\n \n * Errors are fatal by default, resulting in task failure\n-* Errors raise the `io_error` conditon which provides an opportunity to inspect\n+* Errors raise the `io_error` condition which provides an opportunity to inspect\n   an IoError object containing details.\n * Return values must have a sensible null or zero value which is returned\n   if a condition is handled successfully. This may be an `Option`, an empty\n@@ -189,7 +189,7 @@ will start passing around null or zero objects when wrapped in a condition handl\n * XXX: How should we use condition handlers that return values?\n * XXX: Should EOF raise default conditions when EOF is not an error?\n \n-# Issues withi/o scheduler affinity, work stealing, task pinning\n+# Issues with i/o scheduler affinity, work stealing, task pinning\n \n # Resource management\n "}, {"sha": "01a8882e4f9a711974aa6131193d5c944c403784", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -69,7 +69,7 @@ pub struct Coroutine {\n     saved_context: Context\n }\n \n-/// Some tasks have a deciated home scheduler that they must run on.\n+/// Some tasks have a dedicated home scheduler that they must run on.\n pub enum SchedHome {\n     AnySched,\n     Sched(SchedHandle)\n@@ -592,4 +592,3 @@ mod test {\n         }\n     }\n }\n-"}, {"sha": "d892fc8024fbb510d9c8d6c960877de6c5d5faff", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -23,7 +23,7 @@\n  * There are also a collection of helper functions to ease interacting\n  * with the low-level API.\n  *\n- * As new functionality, existant in uv.h, is added to the rust stdlib,\n+ * As new functionality, existent in uv.h, is added to the rust stdlib,\n  * the mappings should be added in this module.\n  */\n "}, {"sha": "d10d9fc2854f39618e36172610aed6210260474d", "filename": "src/libstd/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -90,7 +90,7 @@ pub struct ProcessOptions<'self> {\n     in_fd: Option<c_int>,\n \n     /**\n-     * If this is None then a new pipe will be created for the new progam's\n+     * If this is None then a new pipe will be created for the new program's\n      * output and Process.output() will provide a Reader to read from this pipe.\n      *\n      * If this is Some(file-descriptor) then the new process will write its output\n@@ -100,7 +100,7 @@ pub struct ProcessOptions<'self> {\n     out_fd: Option<c_int>,\n \n     /**\n-     * If this is None then a new pipe will be created for the new progam's\n+     * If this is None then a new pipe will be created for the new program's\n      * error stream and Process.error() will provide a Reader to read from this pipe.\n      *\n      * If this is Some(file-descriptor) then the new process will write its error output\n@@ -840,7 +840,7 @@ pub fn process_output(prog: &str, args: &[~str]) -> ProcessOutput {\n  * Note that this is private to avoid race conditions on unix where if\n  * a user calls waitpid(some_process.get_id()) then some_process.finish()\n  * and some_process.destroy() and some_process.finalize() will then either\n- * operate on a none-existant process or, even worse, on a newer process\n+ * operate on a none-existent process or, even worse, on a newer process\n  * with the same id.\n  */\n fn waitpid(pid: pid_t) -> int {"}, {"sha": "98bf963be9aa2bef5033a03bffaba6e7304f565a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -382,7 +382,7 @@ impl<'self, Sep: CharEq> Iterator<&'self str> for CharSplitIterator<'self, Sep>\n     }\n }\n \n-/// An iterator over the start and end indicies of the matches of a\n+/// An iterator over the start and end indices of the matches of a\n /// substring within a larger string\n #[deriving(Clone)]\n pub struct MatchesIndexIterator<'self> {\n@@ -893,7 +893,7 @@ pub mod raw {\n     /// Sets the length of a string\n     ///\n     /// This will explicitly set the size of the string, without actually\n-    /// modifing its buffers, so it is up to the caller to ensure that\n+    /// modifying its buffers, so it is up to the caller to ensure that\n     /// the string is actually the specified size.\n     #[inline]\n     pub unsafe fn set_len(s: &mut ~str, new_len: uint) {"}, {"sha": "820baec6a7956dc882001fa4695b837a905b17ca", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -365,7 +365,7 @@ impl TaskBuilder {\n         spawn::spawn_raw(opts, f);\n     }\n \n-    /// Runs a task, while transfering ownership of one argument to the child.\n+    /// Runs a task, while transferring ownership of one argument to the child.\n     pub fn spawn_with<A:Send>(&mut self, arg: A, f: ~fn(v: A)) {\n         let arg = Cell::new(arg);\n         do self.spawn {\n@@ -474,10 +474,10 @@ pub fn spawn_indestructible(f: ~fn()) {\n \n pub fn spawn_with<A:Send>(arg: A, f: ~fn(v: A)) {\n     /*!\n-     * Runs a task, while transfering ownership of one argument to the\n+     * Runs a task, while transferring ownership of one argument to the\n      * child.\n      *\n-     * This is useful for transfering ownership of noncopyables to\n+     * This is useful for transferring ownership of noncopyables to\n      * another task.\n      *\n      * This function is equivalent to `task().spawn_with(arg, f)`."}, {"sha": "4d84b6d251d23da3f61fc792e4c1450d95c39511", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -28,7 +28,7 @@ pub type Cb<'self> = &'self fn(buf: &[u8]) -> bool;\n  * A trait to implement in order to make a type hashable;\n  * This works in combination with the trait `Hash::Hash`, and\n  * may in the future be merged with that trait or otherwise\n- * modified when default methods and trait inheritence are\n+ * modified when default methods and trait inheritance are\n  * completed.\n  */\n pub trait IterBytes {"}, {"sha": "f286235ca0e18b9694cf584c861bcb736e97ae60", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -39,14 +39,14 @@ pub struct AtomicBool {\n }\n \n /**\n- * A signed atomic integer type, supporting basic atomic aritmetic operations\n+ * A signed atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicInt {\n     priv v: int\n }\n \n /**\n- * An unsigned atomic integer type, supporting basic atomic aritmetic operations\n+ * An unsigned atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicUint {\n     priv v: uint\n@@ -497,7 +497,7 @@ pub unsafe fn atomic_xor<T>(dst: &mut T, val: T, order: Ordering) -> T {\n  * A fence 'A' which has `Release` ordering semantics, synchronizes with a\n  * fence 'B' with (at least) `Acquire` semantics, if and only if there exists\n  * atomic operations X and Y, both operating on some atomic object 'M' such\n- * that A is sequenced before X, Y is synchronized before B and Y obsevers\n+ * that A is sequenced before X, Y is synchronized before B and Y observers\n  * the change to M. This provides a happens-before dependence between A and B.\n  *\n  * Atomic operations with `Release` or `Acquire` semantics can also synchronize"}, {"sha": "7fbe9179f75aa49d575dfc1f29048b56b46c9d05", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -18,7 +18,7 @@ stack closures that emulates Java-style try/finally blocks.\n do || {\n     ...\n }.finally {\n-    alway_run_this();\n+    always_run_this();\n }\n ~~~\n */"}, {"sha": "0642bb1973745423c725e64e3ecabdd8d7942677", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -22,7 +22,7 @@ semantics as C++11. See the LLVM documentation on [[atomics]].\n \n A quick refresher on memory ordering:\n \n-* Acquire - a barrier for aquiring a lock. Subsequent reads and writes\n+* Acquire - a barrier for acquiring a lock. Subsequent reads and writes\n   take place after the barrier.\n * Release - a barrier for releasing a lock. Preceding reads and writes\n   take place before the barrier."}, {"sha": "7c8046a64b2c2de942c172a42ef075e38828734e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe94f9b4d0d072e2477b989715c6c79e97de259/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=abe94f9b4d0d072e2477b989715c6c79e97de259", "patch": "@@ -468,7 +468,7 @@ impl<'self, T> Iterator<&'self [T]> for WindowIter<'self, T> {\n /// elements at a time).\n ///\n /// When the vector len is not evenly divided by the chunk size,\n-/// the last slice of the iteration will be the remainer.\n+/// the last slice of the iteration will be the remainder.\n #[deriving(Clone)]\n pub struct ChunkIter<'self, T> {\n     priv v: &'self [T],\n@@ -1930,7 +1930,7 @@ pub mod raw {\n      * Sets the length of a vector\n      *\n      * This will explicitly set the size of the vector, without actually\n-     * modifing its buffers, so it is up to the caller to ensure that\n+     * modifying its buffers, so it is up to the caller to ensure that\n      * the vector is actually the specified size.\n      */\n     #[inline]"}]}