{"sha": "b13527735e5977d544eff498469cda9d9c4511de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMzUyNzczNWU1OTc3ZDU0NGVmZjQ5ODQ2OWNkYTlkOWM0NTExZGU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-07T18:59:18Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-07T18:59:18Z"}, "message": "Use an early exit to reduce indentation.", "tree": {"sha": "b4fb2882176723c6096da3123b335567cb3b6fea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4fb2882176723c6096da3123b335567cb3b6fea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b13527735e5977d544eff498469cda9d9c4511de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b13527735e5977d544eff498469cda9d9c4511de", "html_url": "https://github.com/rust-lang/rust/commit/b13527735e5977d544eff498469cda9d9c4511de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b13527735e5977d544eff498469cda9d9c4511de/comments", "author": null, "committer": null, "parents": [{"sha": "6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "html_url": "https://github.com/rust-lang/rust/commit/6d6c4c2a7699778cb641cf96f4b08f7fc4402840"}], "stats": {"total": 146, "additions": 74, "deletions": 72}, "files": [{"sha": "b9bef80534e9cc7088499fdd9671ef05b6b65989", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 74, "deletions": 72, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/b13527735e5977d544eff498469cda9d9c4511de/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13527735e5977d544eff498469cda9d9c4511de/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b13527735e5977d544eff498469cda9d9c4511de", "patch": "@@ -471,88 +471,90 @@ fn main(vec[str] args) {\n     // gcc to link the object file with some libs\n     //\n     // TODO: Factor this out of main.\n-    if (sopts.output_type == link::output_type_exe) {\n-        let str glu = binary_dir + \"/lib/glue.o\";\n-        let str main = \"rt/main.o\";\n-        let str stage = \"-L\" + binary_dir + \"/lib\";\n-        let str prog = \"gcc\";\n-        // The invocations of gcc share some flags across platforms\n-\n-        let vec[str] gcc_args =\n-            [stage, \"-Lrt\", \"-lrustrt\", glu,  \"-m32\", \"-o\",\n-             saved_out_filename, saved_out_filename + \".o\"];\n-        auto lib_cmd;\n-\n-        auto os = sess.get_targ_cfg().os;\n-        if (os == session::os_macos) {\n-                lib_cmd = \"-dynamiclib\";\n-        } else {\n-                lib_cmd = \"-shared\";\n-        }\n+    if (sopts.output_type != link::output_type_exe) {\n+        ret;\n+    }\n \n-        // Converts a library file name into a gcc -l argument\n-        fn unlib(@session::config config, str filename) -> str {\n-            auto rmlib = bind fn(@session::config config,\n-                                 str filename) -> str {\n-                if (config.os == session::os_macos\n-                    || config.os == session::os_linux\n-                    && str::find(filename, \"lib\") == 0) {\n-                    ret str::slice(filename, 3u, str::byte_len(filename));\n-                } else {\n-                    ret filename;\n-                }\n-            } (config, _);\n-            fn rmext(str filename) -> str {\n-                auto parts = str::split(filename, '.' as u8);\n-                vec::pop(parts);\n-                ret str::connect(parts, \".\");\n-            }\n-            ret alt (config.os) {\n-                case (session::os_macos) { rmext(rmlib(filename)) }\n-                case (session::os_linux) { rmext(rmlib(filename)) }\n-                case (_) { rmext(filename) }\n-            };\n-        }\n+    let str glu = binary_dir + \"/lib/glue.o\";\n+    let str main = \"rt/main.o\";\n+    let str stage = \"-L\" + binary_dir + \"/lib\";\n+    let str prog = \"gcc\";\n+    // The invocations of gcc share some flags across platforms\n+\n+    let vec[str] gcc_args =\n+        [stage, \"-Lrt\", \"-lrustrt\", glu,  \"-m32\", \"-o\",\n+         saved_out_filename, saved_out_filename + \".o\"];\n+    auto lib_cmd;\n+\n+    auto os = sess.get_targ_cfg().os;\n+    if (os == session::os_macos) {\n+            lib_cmd = \"-dynamiclib\";\n+    } else {\n+            lib_cmd = \"-shared\";\n+    }\n \n-        for (str cratepath in sess.get_used_crate_files()) {\n-            auto dir = fs::dirname(cratepath);\n-            if (dir != \"\") {\n-                gcc_args += [\"-L\" + dir];\n+    // Converts a library file name into a gcc -l argument\n+    fn unlib(@session::config config, str filename) -> str {\n+        auto rmlib = bind fn(@session::config config,\n+                             str filename) -> str {\n+            if (config.os == session::os_macos\n+                || config.os == session::os_linux\n+                && str::find(filename, \"lib\") == 0) {\n+                ret str::slice(filename, 3u, str::byte_len(filename));\n+            } else {\n+                ret filename;\n             }\n-            auto libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n-            gcc_args += [\"-l\" + libarg];\n+        } (config, _);\n+        fn rmext(str filename) -> str {\n+            auto parts = str::split(filename, '.' as u8);\n+            vec::pop(parts);\n+            ret str::connect(parts, \".\");\n         }\n+        ret alt (config.os) {\n+            case (session::os_macos) { rmext(rmlib(filename)) }\n+            case (session::os_linux) { rmext(rmlib(filename)) }\n+            case (_) { rmext(filename) }\n+        };\n+    }\n \n-        gcc_args += sess.get_used_link_args();\n-        auto used_libs = sess.get_used_libraries();\n-        for (str l in used_libs) {\n-            gcc_args += [\"-l\" + l];\n+    for (str cratepath in sess.get_used_crate_files()) {\n+        auto dir = fs::dirname(cratepath);\n+        if (dir != \"\") {\n+            gcc_args += [\"-L\" + dir];\n         }\n+        auto libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n+        gcc_args += [\"-l\" + libarg];\n+    }\n \n-        if (sopts.library) {\n-            gcc_args += [lib_cmd];\n-        } else {\n-            // FIXME: why do we hardcode -lm?\n-            gcc_args += [\"-lm\", main];\n-        }\n-        // We run 'gcc' here\n+    gcc_args += sess.get_used_link_args();\n+    auto used_libs = sess.get_used_libraries();\n+    for (str l in used_libs) {\n+        gcc_args += [\"-l\" + l];\n+    }\n \n-        auto err_code = run::run_program(prog, gcc_args);\n-        if (0 != err_code) {\n-            sess.err(#fmt(\"linking with gcc failed with code %d\", err_code));\n-            sess.note(#fmt(\"gcc arguments: %s\", str::connect(gcc_args, \" \")));\n-            sess.abort_if_errors();\n-        }\n-        // Clean up on Darwin\n+    if (sopts.library) {\n+        gcc_args += [lib_cmd];\n+    } else {\n+        // FIXME: why do we hardcode -lm?\n+        gcc_args += [\"-lm\", main];\n+    }\n+    // We run 'gcc' here\n \n-        if (sess.get_targ_cfg().os == session::os_macos) {\n-            run::run_program(\"dsymutil\", [saved_out_filename]);\n-        }\n+    auto err_code = run::run_program(prog, gcc_args);\n+    if (0 != err_code) {\n+        sess.err(#fmt(\"linking with gcc failed with code %d\", err_code));\n+        sess.note(#fmt(\"gcc arguments: %s\", str::connect(gcc_args, \" \")));\n+        sess.abort_if_errors();\n+    }\n+    // Clean up on Darwin\n \n-        // Remove the temporary object file if we aren't saving temps\n-        if (!sopts.save_temps) {\n-            run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n-        }\n+    if (sess.get_targ_cfg().os == session::os_macos) {\n+        run::run_program(\"dsymutil\", [saved_out_filename]);\n+    }\n+\n+    // Remove the temporary object file if we aren't saving temps\n+    if (!sopts.save_temps) {\n+        run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n     }\n }\n // Local Variables:"}]}