{"sha": "7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYmRlMjQxYzAwY2Q5ZWI4MTZiMWFhN2NiMjEyYTk0NmFmYjBkM2U=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T17:24:54Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T20:37:09Z"}, "message": "Fix two crashes found by running inference on all of rustc", "tree": {"sha": "ca49de264fa411c62216952b52b865fcce5bdabe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca49de264fa411c62216952b52b865fcce5bdabe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "html_url": "https://github.com/rust-lang/rust/commit/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bcb84ea681f982946a24b5e000ddde58247adba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcb84ea681f982946a24b5e000ddde58247adba", "html_url": "https://github.com/rust-lang/rust/commit/8bcb84ea681f982946a24b5e000ddde58247adba"}], "stats": {"total": 99, "additions": 84, "deletions": 15}, "files": [{"sha": "28cb32ac58ada14f7202c3eb0aa7127b9c637441", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "patch": "@@ -989,19 +989,24 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// If `ty` is a type variable with known type, returns that type;\n     /// otherwise, return ty.\n     fn resolve_ty_shallow<'b>(&mut self, ty: &'b Ty) -> Cow<'b, Ty> {\n-        match ty {\n-            Ty::Infer(tv) => {\n-                let inner = tv.to_inner();\n-                match self.var_unification_table.probe_value(inner).known() {\n-                    Some(known_ty) => {\n-                        // The known_ty can't be a type var itself\n-                        Cow::Owned(known_ty.clone())\n+        let mut ty = Cow::Borrowed(ty);\n+        for _ in 0..3 {\n+            // the type variable could resolve to a int/float variable\n+            match &*ty {\n+                Ty::Infer(tv) => {\n+                    let inner = tv.to_inner();\n+                    match self.var_unification_table.probe_value(inner).known() {\n+                        Some(known_ty) => {\n+                            // The known_ty can't be a type var itself\n+                            ty = Cow::Owned(known_ty.clone());\n+                        }\n+                        _ => return ty,\n                     }\n-                    _ => Cow::Borrowed(ty),\n                 }\n+                _ => return ty,\n             }\n-            _ => Cow::Borrowed(ty),\n         }\n+        ty\n     }\n \n     /// Resolves the type completely; type variables without known type are\n@@ -1185,17 +1190,21 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.infer_path_expr(&resolver, &path).unwrap_or(Ty::Unknown)\n             }\n             Pat::Bind { mode, name: _name, subpat } => {\n-                let subty = if let Some(subpat) = subpat {\n+                let inner_ty = if let Some(subpat) = subpat {\n                     self.infer_pat(*subpat, expected)\n                 } else {\n                     expected.clone()\n                 };\n+                let inner_ty = self.insert_type_vars_shallow(inner_ty);\n \n-                match mode {\n-                    BindingAnnotation::Ref => Ty::Ref(subty.into(), Mutability::Shared),\n-                    BindingAnnotation::RefMut => Ty::Ref(subty.into(), Mutability::Mut),\n-                    BindingAnnotation::Mutable | BindingAnnotation::Unannotated => subty,\n-                }\n+                let bound_ty = match mode {\n+                    BindingAnnotation::Ref => Ty::Ref(inner_ty.clone().into(), Mutability::Shared),\n+                    BindingAnnotation::RefMut => Ty::Ref(inner_ty.clone().into(), Mutability::Mut),\n+                    BindingAnnotation::Mutable | BindingAnnotation::Unannotated => inner_ty.clone(),\n+                };\n+                let bound_ty = self.resolve_ty_as_possible(&mut vec![], bound_ty);\n+                self.write_pat_ty(pat, bound_ty);\n+                return inner_ty;\n             }\n             _ => Ty::Unknown,\n         };"}, {"sha": "4b99788e47f97215a5463a1c5e06433fd89e5b3f", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_1.snap", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_1.snap?ref=7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "patch": "@@ -0,0 +1,13 @@\n+---\n+created: \"2019-02-09T16:56:24.803326529Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[54; 139) '{     ...   } }': ()\n+[60; 137) 'match ...     }': ()\n+[66; 83) 'someth...nknown': Maybe<[unknown]>\n+[94; 124) 'Maybe:...thing)': Maybe<[unknown]>\n+[106; 123) 'ref mu...ething': &mut [unknown]\n+[128; 130) '()': ()\n+"}, {"sha": "fd0b39b7dc6e6d9f848370a21647ec407b7f1599", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_2.snap", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_2.snap?ref=7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "patch": "@@ -0,0 +1,14 @@\n+---\n+created: \"2019-02-09T17:03:11.974225590Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[23; 53) '{     ...n']; }': ()\n+[29; 50) '&[0, b...b'\\n']': &[u8]\n+[30; 50) '[0, b'...b'\\n']': [u8]\n+[31; 32) '0': u8\n+[34; 39) 'b'\\n'': u8\n+[41; 42) '1': u8\n+[44; 49) 'b'\\n'': u8\n+"}, {"sha": "3139eba0b47fc7650f4b50a1376b3bf63a78cddc", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "patch": "@@ -630,6 +630,39 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_std_crash_1() {\n+    // caused stack overflow, taken from std\n+    check_inference(\n+        \"infer_std_crash_1\",\n+        r#\"\n+enum Maybe<T> {\n+    Real(T),\n+    Fake,\n+}\n+\n+fn write() {\n+    match something_unknown {\n+        Maybe::Real(ref mut something) => (),\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_std_crash_2() {\n+    // caused \"equating two type variables, ...\", taken from std\n+    check_inference(\n+        \"infer_std_crash_2\",\n+        r#\"\n+fn test_line_buffer() {\n+    &[0, b'\\n', 1, b'\\n'];\n+}\n+\"#,\n+    );\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.parse(file_id);"}]}