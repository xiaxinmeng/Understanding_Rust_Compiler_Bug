{"sha": "54af489e6f14fd1382c7b84c9cf85fecf91ba276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YWY0ODllNmYxNGZkMTM4MmM3Yjg0YzljZjg1ZmVjZjkxYmEyNzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-01T23:50:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T21:14:20Z"}, "message": "virtualize the runtime per target triple.", "tree": {"sha": "a84ebde37e3c35627315853ba12f568916dbd13d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a84ebde37e3c35627315853ba12f568916dbd13d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54af489e6f14fd1382c7b84c9cf85fecf91ba276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54af489e6f14fd1382c7b84c9cf85fecf91ba276", "html_url": "https://github.com/rust-lang/rust/commit/54af489e6f14fd1382c7b84c9cf85fecf91ba276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54af489e6f14fd1382c7b84c9cf85fecf91ba276/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8e2f3395dcb08950eb09ab073d9776b8432ba0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e2f3395dcb08950eb09ab073d9776b8432ba0a", "html_url": "https://github.com/rust-lang/rust/commit/e8e2f3395dcb08950eb09ab073d9776b8432ba0a"}], "stats": {"total": 275, "additions": 174, "deletions": 101}, "files": [{"sha": "bb7a4a8e5ef0aab805fb2a835cc21a1cf8cd0602", "filename": "configure", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/54af489e6f14fd1382c7b84c9cf85fecf91ba276/configure", "raw_url": "https://github.com/rust-lang/rust/raw/54af489e6f14fd1382c7b84c9cf85fecf91ba276/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=54af489e6f14fd1382c7b84c9cf85fecf91ba276", "patch": "@@ -394,15 +394,25 @@ step_msg \"making directories\"\n for i in \\\n     doc doc/std \\\n     nd nd/std \\\n-    rt rt/isaac rt/bigint rt/sync rt/test rt/arch/i386 rt/arch/x86_64 \\\n-    rt/libuv rt/libuv/src/ares rt/libuv/src/eio rt/libuv/src/ev \\\n     rustllvm dl \\\n     test/run-pass test/run-fail test/compile-fail \\\n     test/bench test/perf test/pretty\n do\n     make_dir $i\n done\n \n+make_dir rt\n+for t in $CFG_TARGET_TRIPLES\n+do\n+  make_dir rt/$t\n+  for i in                                          \\\n+    isaac bigint sync test arch/i386 arch/x86_64    \\\n+    libuv libuv/src/ares libuv/src/eio libuv/src/ev\n+  do\n+    make_dir rt/$t/$i\n+  done\n+done\n+\n for t in $CFG_TARGET_TRIPLES\n do\n     for i in 0 1 2 3"}, {"sha": "1a75c10a9130d5b955d98fccb91f4316dd526a4d", "filename": "mk/platform.mk", "status": "modified", "additions": 57, "deletions": 22, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/54af489e6f14fd1382c7b84c9cf85fecf91ba276/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/54af489e6f14fd1382c7b84c9cf85fecf91ba276/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=54af489e6f14fd1382c7b84c9cf85fecf91ba276", "patch": "@@ -1,5 +1,15 @@\n \n-CFG_GCCISH_CFLAGS := -fno-strict-aliasing\n+# Create variables HOST_<triple> containing the host part\n+# of each target triple.  For example, the triple i686-darwin-macos\n+# would create a variable HOST_i686-darwin-macos with the value \n+# i386.\n+define DEF_HOST_VAR\n+  HOST_$(1) = $(subst i686,i386,$(word 1,$(subst -, ,$(1))))\n+endef\n+$(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_HOST_VAR,$(t))))\n+$(foreach t,$(CFG_TARGET_TRIPLES),$(info Host for $(t) is $(HOST_$(t))))\n+\n+CFG_GCCISH_FLAGS := -fno-strict-aliasing\n CFG_GCCISH_LINK_FLAGS :=\n \n # On Darwin, we need to run dsymutil so the debugging information ends\n@@ -16,8 +26,10 @@ ifneq ($(findstring freebsd,$(CFG_OSTYPE)),)\n   CFG_GCCISH_CFLAGS += -fPIC -march=i686 -I/usr/local/include\n   CFG_GCCISH_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n   ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCCISH_CFLAGS += -m32\n-    CFG_GCCISH_LINK_FLAGS += -m32\n+\tCFG_GCCISH_CFLAGS_i386 += -m32\n+\tCFG_GCCISH_LINK_FLAGS_i386 += -m32\n+\tCFG_GCCISH_CFLAGS_x86_64 += -m32\n+\tCFG_GCCISH_LINK_FLAGS_x86_64 += -m32\n   endif\n   CFG_UNIXY := 1\n   CFG_LDENV := LD_LIBRARY_PATH\n@@ -34,10 +46,10 @@ ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n   # -znoexecstack is here because librt is for some reason being created\n   # with executable stack and Fedora (or SELinux) doesn't like that (#798)\n   CFG_GCCISH_POST_LIB_FLAGS := -Wl,-no-whole-archive -Wl,-znoexecstack\n-  ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCCISH_CFLAGS += -m32\n-    CFG_GCCISH_LINK_FLAGS += -m32\n-  endif\n+  CFG_GCCISH_CFLAGS_i386 = -m32\n+  CFG_GCCISH_LINK_FLAGS_i386 = -m32\n+  CFG_GCCISH_CFLAGS_x86_64 = -m64\n+  CFG_GCCISH_LINK_FLAGS_x86_64 = -m64\n   CFG_UNIXY := 1\n   CFG_LDENV := LD_LIBRARY_PATH\n   CFG_DEF_SUFFIX := .linux.def\n@@ -66,13 +78,10 @@ ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n   # approaches welcome!\n   #\n   # NB: Currently GCC's optimizer breaks rustrt (task-comm-1 hangs) on Darwin.\n-  CFG_GCC_CFLAGS += -m32\n-  CFG_CLANG_CFLAGS += -m32\n-  ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCCISH_CFLAGS += -arch i386\n-    CFG_GCCISH_LINK_FLAGS += -arch i386\n-  endif\n-  CFG_GCCISH_LINK_FLAGS += -m32\n+  CFG_GCCISH_CFLAGS_i386 := -m32 -arch i386\n+  CFG_GCCISH_CFLAGS_x86_64 := -m64 -arch x86_64\n+  CFG_GCCISH_LINK_FLAGS_i386 := -m32\n+  CFG_GCCISH_LINK_FLAGS_x86_64 := -m64\n   CFG_DSYMUTIL := dsymutil\n   CFG_DEF_SUFFIX := .darwin.def\n   # Mac requires this flag to make rpath work\n@@ -169,25 +178,51 @@ ifeq ($(CFG_C_COMPILER),clang)\n   CXX=clang++\n   CFG_GCCISH_CFLAGS += -Wall -Werror -fno-rtti -g\n   CFG_GCCISH_LINK_FLAGS += -g\n-  CFG_COMPILE_C = $(CFG_GCCISH_CROSS)$(CXX) $(CFG_GCCISH_CFLAGS) \\\n-    $(CFG_CLANG_CFLAGS) -c -o $(1) $(2)\n   CFG_DEPEND_C = $(CFG_GCCISH_CROSS)$(CXX) $(CFG_GCCISH_CFLAGS) -MT \"$(1)\" \\\n     -MM $(2)\n-  CFG_LINK_C = $(CFG_GCCISH_CROSS)$(CXX) $(CFG_GCCISH_LINK_FLAGS) -o $(1) \\\n-    $(CFG_GCCISH_DEF_FLAG)$(3) $(2) $(call CFG_INSTALL_NAME,$(4))\n+\n+  define CFG_MAKE_CC\n+\tCFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n+\t\t$$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)\t\t\\\n+\t\t$$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n+\t    $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n+\t\t-c -o $$(1) $$(2)\n+    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n+\t\t$$(CFG_GCCISH_LINK_FLAGS) -o $$(1)\t\t\t\\\n+\t\t$$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))\t\t\\\n+        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)\t\t\t\\\n+\t    $$(call CFG_INSTALL_NAME,$$(4))\n+  endef\n+\n+  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+    $(eval $(call CFG_MAKE_CC,$(target))))\n else\n ifeq ($(CFG_C_COMPILER),gcc)\n   CC=gcc\n   CXX=g++\n   CFG_GCCISH_CFLAGS += -Wall -Werror -fno-rtti -g\n   CFG_GCCISH_LINK_FLAGS += -g\n-  CFG_COMPILE_C = $(CFG_GCCISH_CROSS)$(CXX) $(CFG_GCCISH_CFLAGS) \\\n-    $(CFG_GCC_CFLAGS) -c -o $(1) $(2)\n   CFG_DEPEND_C = $(CFG_GCCISH_CROSS)$(CXX) $(CFG_GCCISH_CFLAGS) -MT \"$(1)\" \\\n     -MM $(2)\n-  CFG_LINK_C = $(CFG_GCCISH_CROSS)$(CXX) $(CFG_GCCISH_LINK_FLAGS) -o $(1) \\\n-               $(CFG_GCCISH_DEF_FLAG)$(3) $(2) $(call CFG_INSTALL_NAME,$(4))\n+\n+  define CFG_MAKE_CC\n+\tCFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n+        $$(CFG_GCCISH_CFLAGS)\t\t\t\t\t\t\t\\\n+\t    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n+        $$(CFG_GCC_CFLAGS)\t\t\t\t\t\t\t\t\\\n+        $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n+        -c -o $$(1) $$(2)\n+    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)\t\t\t\\\n+\t\t$$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))\t\t\\\n+        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)\t\t\t\\\n+        $$(call CFG_INSTALL_NAME,$$(4))\n+  endef\n+\n+  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+    $(eval $(call CFG_MAKE_CC,$(target))))\n else\n   CFG_ERR := $(error please try on a system with gcc or clang)\n endif\n endif\n+"}, {"sha": "aa7e6792e78becf35348a4a8dc467bb2ab8e9d6b", "filename": "mk/rt.mk", "status": "modified", "additions": 103, "deletions": 70, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/54af489e6f14fd1382c7b84c9cf85fecf91ba276/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/54af489e6f14fd1382c7b84c9cf85fecf91ba276/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=54af489e6f14fd1382c7b84c9cf85fecf91ba276", "patch": "@@ -1,8 +1,36 @@\n+# This is a procedure to define the targets for building\n+# the runtime.  \n+#\n+# Argument 1 is the target triple.\n+#\n+# This is not really the right place to explain this, but\n+# for those of you who are not Makefile gurus, let me briefly\n+# cover the $ expansion system in use here, because it \n+# confused me for a while!  The variable DEF_RUNTIME_TARGETS\n+# will be defined once and then expanded with different\n+# values substituted for $(1) each time it is called.\n+# That resulting text is then eval'd. \n+#\n+# For most variables, you could use a single $ sign.  The result\n+# is that the substitution would occur when the CALL occurs,\n+# I believe.  The problem is that the automatic variables $< and $@\n+# need to be expanded-per-rule.  Therefore, for those variables at\n+# least, you need $$< and $$@ in the variable text.  This way, after \n+# the CALL substitution occurs, you will have $< and $@.  This text\n+# will then be evaluated, and all will work as you like.\n+#\n+# Reader beware, this explanantion could be wrong, but it seems to\n+# fit the experimental data (i.e., I was able to get the system \n+# working under these assumptions). \n+\n+define DEF_RUNTIME_TARGETS\n+\n ######################################################################\n # Runtime (C++) library variables\n ######################################################################\n \n-RUNTIME_CS := rt/sync/timer.cpp \\\n+RUNTIME_CS_$(1) := \\\n+              rt/sync/timer.cpp \\\n               rt/sync/sync.cpp \\\n               rt/sync/lock_and_signal.cpp \\\n               rt/rust.cpp \\\n@@ -33,15 +61,13 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/test/rust_test_harness.cpp \\\n               rt/test/rust_test_runtime.cpp \\\n               rt/test/rust_test_util.cpp \\\n-              rt/arch/i386/context.cpp\n-\n-RUNTIME_LL :=\n+              rt/arch/$$(HOST_$(1))/context.cpp\n \n-RUNTIME_S := rt/arch/i386/_context.S \\\n-             rt/arch/i386/ccall.S \\\n-             rt/arch/i386/morestack.S\n+RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n+                  rt/arch/$$(HOST_$(1))/ccall.S \\\n+                  rt/arch/$$(HOST_$(1))/morestack.S\n \n-RUNTIME_HDR := rt/globals.h \\\n+RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust.h \\\n                rt/rust_abi.h \\\n                rt/rust_cc.h \\\n@@ -76,81 +102,88 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/test/rust_test_harness.h \\\n                rt/test/rust_test_runtime.h \\\n                rt/test/rust_test_util.h \\\n-               rt/arch/i386/context.h\n+               rt/arch/$$(HOST_$(1))/context.h\n \n-ifeq ($(CFG_WINDOWSY), 1)\n-  LIBUV_OSTYPE := win\n-  LIBUV_ARCH := ia32\n-  LIBUV_LIB := rt/libuv/Default/obj.target/src/rt/libuv/libuv.a\n-else ifeq ($(CFG_OSTYPE), apple-darwin)\n-  LIBUV_OSTYPE := mac\n-  LIBUV_ARCH := ia32\n-  LIBUV_LIB := rt/libuv/Default/libuv.a\n+ifeq ($$(HOST_$(1)), i386)\n+  LIBUV_ARCH_$(1) := ia32\n else\n-  LIBUV_OSTYPE := unix\n-  LIBUV_ARCH := ia32\n-  LIBUV_LIB := rt/libuv/Default/obj.target/src/rt/libuv/libuv.a\n+  LIBUV_ARCH_$(1) := x86_64\n endif\n \n-RUNTIME_DEF := rt/rustrt$(CFG_DEF_SUFFIX)\n-RUNTIME_INCS := -I $(S)src/rt/isaac -I $(S)src/rt/uthash \\\n-                -I $(S)src/rt/arch/i386 \\\n-\t\t\t\t-I $(S)src/rt/libuv/include\n-RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o) $(RUNTIME_LL:.ll=.o) $(RUNTIME_S:.S=.o)\n-RUNTIME_LIBS := $(LIBUV_LIB)\n-\n-RT_COMPILE_C := $(call CFG_COMPILE_C, $(0), $(1) -I $(S)src/rt/arch/$(2))\n-\n-rt/%.o: rt/%.cpp $(MKFILES)\n-\t@$(call E, compile: $@)\n-\t$(Q)$(call CFG_COMPILE_C, $@, $(RUNTIME_INCS)) $<\n-\n-rt/%.o: rt/%.S $(MKFILES)\n-\t@$(call E, compile: $@)\n-\t$(Q)$(call CFG_COMPILE_C, $@, $(RUNTIME_INCS)) $<\n-\n-rt/%.o: rt/%.ll $(MKFILES)\n-\t@$(call E, llc: $@)\n-\t$(Q)$(LLC) -filetype=obj -relocation-model=pic -march=x86 -o $@ $<\n+ifeq ($$(CFG_WINDOWSY), 1)\n+  LIBUV_OSTYPE_$(1) := win\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/rt/libuv/libuv.a\n+else ifeq ($(CFG_OSTYPE), apple-darwin)\n+  LIBUV_OSTYPE_$(1) := mac\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/libuv.a\n+else\n+  LIBUV_OSTYPE_$(1) := unix\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/rt/libuv/libuv.a\n+endif\n \n-rt/$(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR) $(RUNTIME_DEF) $(RUNTIME_LIBS)\n-\t@$(call E, link: $@)\n-\t$(Q)$(call CFG_LINK_C,$@, $(RUNTIME_OBJS) \\\n-\t  $(CFG_GCCISH_POST_LIB_FLAGS) $(RUNTIME_LIBS) \\\n-\t  $(CFG_LIBUV_LINK_FLAGS),$(RUNTIME_DEF),$(CFG_RUNTIME))\n+RUNTIME_DEF_$(1) := rt/rustrt$$(CFG_DEF_SUFFIX)\n+RUNTIME_INCS_$(1) := -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n+                -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n+\t\t\t\t-I $$(S)src/rt/libuv/include\n+RUNTIME_OBJS_$(1) := $$(RUNTIME_CS_$(1):rt/%.cpp=rt/$(1)/%.o) \\\n+                     $$(RUNTIME_S_$(1):rt/%.S=rt/$(1)/%.o)\n+RUNTIME_LIBS_$(1) := $$(LIBUV_LIB_$(1))\n+\n+rt/$(1)/%.o: rt/%.cpp $$(MKFILES)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, $$(RUNTIME_INCS_$(1))) $$<\n+\n+rt/$(1)/%.o: rt/%.S $$(MKFILES)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, $$(RUNTIME_INCS_$(1))) $$<\n+\n+rt/$(1)/$(CFG_RUNTIME): $$(RUNTIME_OBJS_$(1)) $$(MKFILES) \\\n+\t\t\t  \t\t\t\t $$(RUNTIME_HDR_$(1)) \\\n+                             $$(RUNTIME_DEF_$(1)) \\\n+                             $$(RUNTIME_LIBS_$(1))\n+\t@$$(call E, link: $$@)\n+\t$$(Q)$$(call CFG_LINK_C_$(1),$$@, $$(RUNTIME_OBJS_$(1)) \\\n+\t  $$(CFG_GCCISH_POST_LIB_FLAGS) $$(RUNTIME_LIBS_$(1)) \\\n+\t  $$(CFG_LIBUV_LINK_FLAGS),$$(RUNTIME_DEF_$(1)),$$(CFG_RUNTIME))\n \n # FIXME: For some reason libuv's makefiles can't figure out the correct definition\n # of CC on the mingw I'm using, so we are explicitly using gcc. Also, we\n # have to list environment variables first on windows... mysterious\n-$(LIBUV_LIB): $(wildcard \\\n-                     $(S)src/rt/libuv/* \\\n-                     $(S)src/rt/libuv/*/* \\\n-                     $(S)src/rt/libuv/*/*/* \\\n-                     $(S)src/rt/libuv/*/*/*/*)\n-\t$(Q)$(MAKE) -C $(S)mk/libuv/$(LIBUV_ARCH)/$(LIBUV_OSTYPE) \\\n-\t\tCFLAGS=\"-m32\" LDFLAGS=\"-m32\" \\\n-\t\tCC=\"$(CFG_GCCISH_CROSS)$(CC)\" \\\n-\t\tCXX=\"$(CFG_GCCISH_CROSS)$(CXX)\" \\\n-\t\tAR=\"$(CFG_GCCISH_CROSS)$(AR)\" \\\n-\t\tbuilddir_name=\"$(CFG_BUILD_DIR)/rt/libuv\" \\\n-\t\tV=$(VERBOSE) FLOCK= uv\n+$$(LIBUV_LIB_$(1)): $$(wildcard \\\n+                     $$(S)src/rt/libuv/* \\\n+                     $$(S)src/rt/libuv/*/* \\\n+                     $$(S)src/rt/libuv/*/*/* \\\n+                     $$(S)src/rt/libuv/*/*/*/*)\n+\t$$(Q)$$(MAKE) -C $$(S)mk/libuv/$$(LIBUV_ARCH_$(1))/$$(LIBUV_OSTYPE_$(1)) \\\n+\t\tCFLAGS=\"$$(TAR_CFLAGS)\" LDFLAGS=\"-m32\" \\\n+\t\tCC=\"$$(CFG_GCCISH_CROSS)$$(CC)\" \\\n+\t\tCXX=\"$$(CFG_GCCISH_CROSS)$$(CXX)\" \\\n+\t\tAR=\"$$(CFG_GCCISH_CROSS)$$(AR)\" \\\n+\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n+\t\tV=$$(VERBOSE) FLOCK= uv\n \n # These could go in rt.mk or rustllvm.mk, they're needed for both.\n \n-%.linux.def:    %.def.in $(MKFILES)\n-\t@$(call E, def: $@)\n-\t$(Q)echo \"{\" > $@\n-\t$(Q)sed 's/.$$/&;/' $< >> $@\n-\t$(Q)echo \"};\" >> $@\n+%.linux.def:    %.def.in $$(MKFILES)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo \"{\" > $$@\n+\t$$(Q)sed 's/.$$/&;/' $$< >> $$@\n+\t$$(Q)echo \"};\" >> $$@\n \n-%.darwin.def:\t%.def.in $(MKFILES)\n-\t@$(call E, def: $@)\n-\t$(Q)sed 's/^./_&/' $< > $@\n+%.darwin.def:\t%.def.in $$(MKFILES)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)sed 's/^./_&/' $$< > $$@\n \n ifdef CFG_WINDOWSY\n-%.def:\t%.def.in $(MKFILES)\n-\t@$(call E, def: $@)\n-\t$(Q)echo LIBRARY $* > $@\n-\t$(Q)echo EXPORTS >> $@\n-\t$(Q)sed 's/^./    &/' $< >> $@\n+%.def:\t%.def.in $$(MKFILES)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo LIBRARY $$* > $$@\n+\t$$(Q)echo EXPORTS >> $$@\n+\t$$(Q)sed 's/^./    &/' $$< >> $$@\n endif\n+\n+endef\n+\n+# Instantiate template for all stages\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(call DEF_RUNTIME_TARGETS,$(target))))"}, {"sha": "71c744bdf4c712bbfd498688c73bcfff28abf64b", "filename": "mk/target.mk", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54af489e6f14fd1382c7b84c9cf85fecf91ba276/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/54af489e6f14fd1382c7b84c9cf85fecf91ba276/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=54af489e6f14fd1382c7b84c9cf85fecf91ba276", "patch": "@@ -7,13 +7,8 @@\n \n define TARGET_STAGE_N\n \n-TARGET_HOST    := $$(word 1,$$(subst -, ,$(2)))\n-\n-# For some reason there is (sometimes) a mismatch here between i686, i386, etc\n-INTR_HOST := $$(subst i686,i386,$$(TARGET_HOST))\n-\n $$(TARGET_LIB$(1)$(2))/intrinsics.ll: \\\n-\t\t$$(S)src/rt/intrinsics/intrinsics.$$(INTR_HOST).ll.in\n+\t\t$$(S)src/rt/intrinsics/intrinsics.$(HOST_$(2)).ll.in\n \t@$$(call E, sed: $$@)\n \t$$(Q)sed s/@CFG_TARGET_TRIPLE@/$(2)/ $$< > $$@\n \n@@ -40,7 +35,7 @@ $$(TARGET_LIB$(1)$(2))/libstd.rlib: \\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_$(2)) --lib --static -o $$@ $$<\n \n-$$(TARGET_LIB$(1)$(2))/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n+$$(TARGET_LIB$(1)$(2))/$$(CFG_RUNTIME): rt/$(2)/$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n "}]}