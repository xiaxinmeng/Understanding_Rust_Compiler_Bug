{"sha": "bea3a7a14cdb6eee76d75729b5bb4b367e005225", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTNhN2ExNGNkYjZlZWU3NmQ3NTcyOWI1YmI0YjM2N2UwMDUyMjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-10T05:14:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-10T05:14:28Z"}, "message": "libcore: Some more fixes to Windows libc stuff. rs=bustage", "tree": {"sha": "4b915e706f468c41833f92eca9d3a7b04ad728d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b915e706f468c41833f92eca9d3a7b04ad728d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea3a7a14cdb6eee76d75729b5bb4b367e005225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea3a7a14cdb6eee76d75729b5bb4b367e005225", "html_url": "https://github.com/rust-lang/rust/commit/bea3a7a14cdb6eee76d75729b5bb4b367e005225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea3a7a14cdb6eee76d75729b5bb4b367e005225/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd737d41a1fca9825e6dea8abcb077aa86463b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd737d41a1fca9825e6dea8abcb077aa86463b52", "html_url": "https://github.com/rust-lang/rust/commit/bd737d41a1fca9825e6dea8abcb077aa86463b52"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "c528b63b5bb68d203d4a3f91e4dc31e4659a570e", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea3a7a14cdb6eee76d75729b5bb4b367e005225/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea3a7a14cdb6eee76d75729b5bb4b367e005225/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=bea3a7a14cdb6eee76d75729b5bb4b367e005225", "patch": "@@ -514,8 +514,9 @@ pub mod types {\n             }\n             pub mod extra {\n                 use libc::types::common::c95::c_void;\n-                use libc::types::os::arch::c95::{c_char, c_int,\n-                                                     c_ulong, wchar_t};\n+                use libc::types::os::arch::c95::{c_char, c_int, c_uint};\n+                use libc::types::os::arch::c95::{c_long, c_ulong};\n+                use libc::types::os::arch::c95::{wchar_t};\n                 use libc::types::os::arch::c99::{c_ulonglong};\n \n                 pub type BOOL = c_int;\n@@ -1195,6 +1196,7 @@ pub mod funcs {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_int, c_uint, c_char,\n                                              c_long, size_t};\n+            use libc::types::os::arch::c99::intptr_t;\n \n             #[link_name = \"_access\"]\n             fn access(path: *c_char, amode: c_int) -> c_int;\n@@ -1490,6 +1492,10 @@ pub mod funcs {\n \n     #[cfg(target_os = \"win32\")]\n     pub mod extra {\n+        use libc::types::os::arch::c95::c_int;\n+        use libc::types::os::arch::extra::{DWORD, HMODULE, LPCWSTR, LPWSTR};\n+        use libc::types::os::arch::extra::{BOOL, LPSECURITY_ATTRIBUTES};\n+\n         #[abi = \"stdcall\"]\n         pub extern mod kernel32 {\n             fn GetEnvironmentVariableW(n: LPCWSTR,"}, {"sha": "6429d00fbc326ba992624a719d7a451873787640", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bea3a7a14cdb6eee76d75729b5bb4b367e005225/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea3a7a14cdb6eee76d75729b5bb4b367e005225/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=bea3a7a14cdb6eee76d75729b5bb4b367e005225", "patch": "@@ -64,8 +64,7 @@ extern mod rustrt {\n     fn rust_set_exit_status(code: libc::intptr_t);\n }\n \n-\n-const tmpbuf_sz : uint = 1000u;\n+pub const tmpbuf_sz : uint = 1000u;\n \n pub fn getcwd() -> Path {\n     Path(rustrt::rust_getcwd())\n@@ -92,7 +91,9 @@ pub mod win32 {\n     use libc;\n     use vec;\n     use str;\n+    use option::{None, Option};\n     use option;\n+    use os::tmpbuf_sz;\n     use libc::types::os::arch::extra::DWORD;\n \n     pub fn fill_utf16_buf_and_decode(f: fn(*mut u16, DWORD) -> DWORD)"}]}