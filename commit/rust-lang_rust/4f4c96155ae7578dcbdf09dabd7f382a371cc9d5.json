{"sha": "4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "node_id": "C_kwDOAAsO6NoAKDRmNGM5NjE1NWFlNzU3OGRjYmRmMDlkYWJkN2YzODJhMzcxY2M5ZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-05T23:36:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-05T23:36:49Z"}, "message": "Auto merge of #10142 - EricWu2003:drop_ref-FP, r=llogiq\n\n[`drop_ref`]: don't lint idiomatic in match arm\n\nfixes #10122\n\nAs established in issue #9482, it is idiomatic to use a single `drop()` expression in a match arm to achieve a side-effect of a function while discarding its output. This should also apply to cases where the function returns a reference.\n\nThe change to the lint's code was less than 1 line, because all the heavy lifting was done in PR #9491.\n\n---\n\nchangelog: FP: [`drop_ref`]: No longer lints idiomatic expression in `match` arms\n[#10142](https://github.com/rust-lang/rust-clippy/pull/10142)\n<!-- changelog_checked -->", "tree": {"sha": "77b5336ed2d2925c49252d079fcd60d1d49d5821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b5336ed2d2925c49252d079fcd60d1d49d5821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "html_url": "https://github.com/rust-lang/rust/commit/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61ff54e5c22736bad5fc4f41d3cc36208475510c", "url": "https://api.github.com/repos/rust-lang/rust/commits/61ff54e5c22736bad5fc4f41d3cc36208475510c", "html_url": "https://github.com/rust-lang/rust/commit/61ff54e5c22736bad5fc4f41d3cc36208475510c"}, {"sha": "01a2a9df4300749f5c96209e707d02aae44f39e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a2a9df4300749f5c96209e707d02aae44f39e3", "html_url": "https://github.com/rust-lang/rust/commit/01a2a9df4300749f5c96209e707d02aae44f39e3"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "11e1bcdf12d1ec79f309902c6bd64bb9b614e50d", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                sym::mem_drop if arg_ty.is_ref() => (DROP_REF, DROP_REF_SUMMARY),\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => (DROP_REF, DROP_REF_SUMMARY),\n                 sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => (DROP_COPY, DROP_COPY_SUMMARY),\n                 sym::mem_forget if is_copy => (FORGET_COPY, FORGET_COPY_SUMMARY),"}, {"sha": "10044e65f1156bc484ea3de731ed05c0fc97d902", "filename": "tests/ui/drop_ref.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "patch": "@@ -72,3 +72,26 @@ fn test_owl_result_2() -> Result<u8, ()> {\n     produce_half_owl_ok().map(drop)?;\n     Ok(1)\n }\n+\n+#[allow(unused)]\n+#[allow(clippy::unit_cmp)]\n+fn issue10122(x: u8) {\n+    // This is a function which returns a reference and has a side-effect, which means\n+    // that calling drop() on the function is considered an idiomatic way of achieving the side-effect\n+    // in a match arm.\n+    fn println_and<T>(t: &T) -> &T {\n+        println!(\"foo\");\n+        t\n+    }\n+\n+    match x {\n+        0 => drop(println_and(&12)), // Don't lint (copy type), we only care about side-effects\n+        1 => drop(println_and(&String::new())), // Don't lint (no copy type), we only care about side-effects\n+        2 => {\n+            drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n+        },\n+        3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+        4 => drop(&2),                           // Lint, not a fn/method call\n+        _ => (),\n+    }\n+}"}, {"sha": "293b9f6de832dc5ca5f2f3d5a1eefb67d79f3195", "filename": "tests/ui/drop_ref.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "patch": "@@ -107,5 +107,41 @@ note: argument has type `&SomeStruct`\n LL |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+  --> $DIR/drop_ref.rs:91:13\n+   |\n+LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:91:18\n+   |\n+LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n+   |                  ^^^^^^^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+  --> $DIR/drop_ref.rs:93:14\n+   |\n+LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:93:19\n+   |\n+LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+  --> $DIR/drop_ref.rs:94:14\n+   |\n+LL |         4 => drop(&2),                           // Lint, not a fn/method call\n+   |              ^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:94:19\n+   |\n+LL |         4 => drop(&2),                           // Lint, not a fn/method call\n+   |                   ^^\n+\n+error: aborting due to 12 previous errors\n "}]}