{"sha": "4b46d2a3a222f090b07b019df0e9346b08c40ae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNDZkMmEzYTIyMmYwOTBiMDdiMDE5ZGYwZTkzNDZiMDhjNDBhZTE=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-01-30T16:37:49Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-01-30T16:37:49Z"}, "message": "Don't handle ENOSYS in `anon_pipe()`\n\nWe're not calling the raw syscall but a libc function, the libc will\nhave a compatibility layer.", "tree": {"sha": "fa6b6dc2fb2918de3b881a0ea67bd86cd9e968a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6b6dc2fb2918de3b881a0ea67bd86cd9e968a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b46d2a3a222f090b07b019df0e9346b08c40ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b46d2a3a222f090b07b019df0e9346b08c40ae1", "html_url": "https://github.com/rust-lang/rust/commit/4b46d2a3a222f090b07b019df0e9346b08c40ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b46d2a3a222f090b07b019df0e9346b08c40ae1/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31d5b504144c4c542c3042b850cfc3b1066aa38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31d5b504144c4c542c3042b850cfc3b1066aa38", "html_url": "https://github.com/rust-lang/rust/commit/c31d5b504144c4c542c3042b850cfc3b1066aa38"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "51e00fc1ab96abe8456cfb7280fc367af249dbef", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4b46d2a3a222f090b07b019df0e9346b08c40ae1/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b46d2a3a222f090b07b019df0e9346b08c40ae1/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=4b46d2a3a222f090b07b019df0e9346b08c40ae1", "patch": "@@ -13,7 +13,6 @@ use io;\n use libc::{self, c_int};\n use mem;\n use ptr;\n-use sync::atomic::{AtomicBool, Ordering};\n use sys::{cvt, cvt_r};\n use sys::fd::FileDesc;\n \n@@ -30,21 +29,17 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     // CLOEXEC flag is to use the `pipe2` syscall on Linux. This was added in\n     // 2.6.27, however, and because we support 2.6.18 we must detect this\n     // support dynamically.\n-    static TRY_PIPE2: AtomicBool = AtomicBool::new(cfg!(target_os = \"linux\"));\n-    if TRY_PIPE2.load(Ordering::Relaxed) {\n+    if cfg!(any(target_os = \"dragonfly\",\n+                target_os = \"freebsd\",\n+                target_os = \"linux\",\n+                target_os = \"netbsd\",\n+                target_os = \"openbsd\"))\n+    {\n         weak! { fn pipe2(*mut c_int, c_int) -> c_int }\n         if let Some(pipe) = pipe2.get() {\n-            match cvt(unsafe { pipe(fds.as_mut_ptr(), libc::O_CLOEXEC) }) {\n-                Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {\n-                    TRY_PIPE2.store(false, Ordering::Relaxed);\n-                    // Fall through\n-                },\n-                res => {\n-                    res?;\n-                    return Ok((AnonPipe(FileDesc::new(fds[0])),\n-                               AnonPipe(FileDesc::new(fds[1]))));\n-                }\n-            }\n+            cvt(unsafe { pipe(fds.as_mut_ptr(), libc::O_CLOEXEC) })?;\n+            return Ok((AnonPipe(FileDesc::new(fds[0])),\n+                       AnonPipe(FileDesc::new(fds[1]))));\n         }\n     }\n     cvt(unsafe { libc::pipe(fds.as_mut_ptr()) })?;"}]}