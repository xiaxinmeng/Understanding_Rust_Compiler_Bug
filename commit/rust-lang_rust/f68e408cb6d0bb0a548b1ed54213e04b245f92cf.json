{"sha": "f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OGU0MDhjYjZkMGJiMGE1NDhiMWVkNTQyMTNlMDRiMjQ1ZjkyY2Y=", "commit": {"author": {"name": "Yury Krivopalov", "email": "ykrivopalov@yandex.ru", "date": "2017-09-30T08:33:15Z"}, "committer": {"name": "Yury Krivopalov", "email": "ykrivopalov@yandex.ru", "date": "2017-10-14T09:21:23Z"}, "message": "identity_op lint fix for '&' with unsigned types", "tree": {"sha": "5b6b89e3d72e7324d05fd6cd49a0f9191ed7df06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6b89e3d72e7324d05fd6cd49a0f9191ed7df06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "html_url": "https://github.com/rust-lang/rust/commit/f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f68e408cb6d0bb0a548b1ed54213e04b245f92cf/comments", "author": null, "committer": null, "parents": [{"sha": "f0aa2c15878ce4303cc9079881d8d816be290a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0aa2c15878ce4303cc9079881d8d816be290a85", "html_url": "https://github.com/rust-lang/rust/commit/f0aa2c15878ce4303cc9079881d8d816be290a85"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "21aa914155e05a655f01a539657f31f70c7d47db", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f68e408cb6d0bb0a548b1ed54213e04b245f92cf/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68e408cb6d0bb0a548b1ed54213e04b245f92cf/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "patch": "@@ -1,9 +1,9 @@\n use consts::{constant_simple, Constant};\n-use rustc::lint::*;\n use rustc::hir::*;\n+use rustc::lint::*;\n+use rustc_const_math::ConstInt;\n use syntax::codemap::Span;\n use utils::{in_macro, snippet, span_lint};\n-use syntax::attr::IntType::{SignedInt, UnsignedInt};\n \n /// **What it does:** Checks for identity operations, e.g. `x + 0`.\n ///\n@@ -58,15 +58,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n     }\n }\n \n+fn no_zeros(v: &ConstInt) -> bool {\n+    match *v {\n+        ConstInt::I8(i) => i.count_zeros() == 0,\n+        ConstInt::I16(i) => i.count_zeros() == 0,\n+        ConstInt::I32(i) => i.count_zeros() == 0,\n+        ConstInt::I64(i) => i.count_zeros() == 0,\n+        ConstInt::I128(i) => i.count_zeros() == 0,\n+        ConstInt::U8(i) => i.count_zeros() == 0,\n+        ConstInt::U16(i) => i.count_zeros() == 0,\n+        ConstInt::U32(i) => i.count_zeros() == 0,\n+        ConstInt::U64(i) => i.count_zeros() == 0,\n+        ConstInt::U128(i) => i.count_zeros() == 0,\n+        _ => false\n+    }\n+}\n+\n #[allow(cast_possible_wrap)]\n fn check(cx: &LateContext, e: &Expr, m: i8, span: Span, arg: Span) {\n     if let Some(Constant::Int(v)) = constant_simple(cx, e) {\n         if match m {\n             0 => v.to_u128_unchecked() == 0,\n-            -1 => match v.int_type() {\n-                SignedInt(_) => (v.to_u128_unchecked() as i128 == -1),\n-                UnsignedInt(_) => false,\n-            },\n+            -1 => no_zeros(&v),\n             1 => v.to_u128_unchecked() == 1,\n             _ => unreachable!(),\n         } {"}, {"sha": "1ed9f974d436c2b4c0f3e863755b137e41a80229", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f68e408cb6d0bb0a548b1ed54213e04b245f92cf/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f68e408cb6d0bb0a548b1ed54213e04b245f92cf/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "patch": "@@ -27,4 +27,7 @@ fn main() {\n \n     x & NEG_ONE;  //no error, as we skip lookups (for now)\n     -1 & x;\n+\n+    let u : u8 = 0;\n+    u & 255;\n }"}, {"sha": "c1ce8d2ec4cd5c616aa620408d67ea3243acb985", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f68e408cb6d0bb0a548b1ed54213e04b245f92cf/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f68e408cb6d0bb0a548b1ed54213e04b245f92cf/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=f68e408cb6d0bb0a548b1ed54213e04b245f92cf", "patch": "@@ -42,3 +42,9 @@ error: the operation is ineffective. Consider reducing it to `x`\n 29 |     -1 & x;\n    |     ^^^^^^\n \n+error: the operation is ineffective. Consider reducing it to `u`\n+  --> $DIR/identity_op.rs:32:5\n+   |\n+32 |     u & 255;\n+   |     ^^^^^^^\n+"}]}