{"sha": "bb0b597f055eac3f5730f299e69048dc5f583ba6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMGI1OTdmMDU1ZWFjM2Y1NzMwZjI5OWU2OTA0OGRjNWY1ODNiYTY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2017-06-08T18:16:18Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2017-06-08T18:17:10Z"}, "message": "Check for `for` loop desugaring in highering", "tree": {"sha": "a19a4748eaf888e947134a39abafd20a2519c9a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19a4748eaf888e947134a39abafd20a2519c9a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb0b597f055eac3f5730f299e69048dc5f583ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0b597f055eac3f5730f299e69048dc5f583ba6", "html_url": "https://github.com/rust-lang/rust/commit/bb0b597f055eac3f5730f299e69048dc5f583ba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb0b597f055eac3f5730f299e69048dc5f583ba6/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c25ea4394f5d0ec2d233c04609c98859fd8a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c25ea4394f5d0ec2d233c04609c98859fd8a58", "html_url": "https://github.com/rust-lang/rust/commit/07c25ea4394f5d0ec2d233c04609c98859fd8a58"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "e736f2eae1f64c8ebc07ece094863d99980a93b3", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb0b597f055eac3f5730f299e69048dc5f583ba6/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0b597f055eac3f5730f299e69048dc5f583ba6/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=bb0b597f055eac3f5730f299e69048dc5f583ba6", "patch": "@@ -125,7 +125,7 @@ pub fn is_from_for_desugar(decl: &hir::Decl) -> bool {\n /// `for pat in arg { body }` becomes `(pat, arg, body)`.\n pub fn for_loop(expr: &hir::Expr) -> Option<(&hir::Pat, &hir::Expr, &hir::Expr)> {\n     if_let_chain! {[\n-        let hir::ExprMatch(ref iterexpr, ref arms, _) = expr.node,\n+        let hir::ExprMatch(ref iterexpr, ref arms, hir::MatchSource::ForLoopDesugar) = expr.node,\n         let hir::ExprCall(_, ref iterargs) = iterexpr.node,\n         iterargs.len() == 1 && arms.len() == 1 && arms[0].guard.is_none(),\n         let hir::ExprLoop(ref block, _, _) = arms[0].body.node,"}]}