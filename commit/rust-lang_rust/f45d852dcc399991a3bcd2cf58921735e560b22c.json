{"sha": "f45d852dcc399991a3bcd2cf58921735e560b22c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NWQ4NTJkY2MzOTk5OTFhM2JjZDJjZjU4OTIxNzM1ZTU2MGIyMmM=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-02-25T13:45:07Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:24:36Z"}, "message": "perf: Merge region_obligations snapshotting into the undo log", "tree": {"sha": "62de8d90bb041567931f9154bd739e0488202857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62de8d90bb041567931f9154bd739e0488202857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f45d852dcc399991a3bcd2cf58921735e560b22c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f45d852dcc399991a3bcd2cf58921735e560b22c", "html_url": "https://github.com/rust-lang/rust/commit/f45d852dcc399991a3bcd2cf58921735e560b22c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f45d852dcc399991a3bcd2cf58921735e560b22c/comments", "author": null, "committer": null, "parents": [{"sha": "04f5d54d132d8469acf888e5ad6e39748ab53a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f5d54d132d8469acf888e5ad6e39748ab53a1f", "html_url": "https://github.com/rust-lang/rust/commit/04f5d54d132d8469acf888e5ad6e39748ab53a1f"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "e594bf450ddefd07e23e67f87eeb15c393a018ab", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f45d852dcc399991a3bcd2cf58921735e560b22c/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45d852dcc399991a3bcd2cf58921735e560b22c/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=f45d852dcc399991a3bcd2cf58921735e560b22c", "patch": "@@ -196,7 +196,7 @@ pub struct InferCtxtInner<'tcx> {\n     /// for each body-id in this map, which will process the\n     /// obligations within. This is expected to be done 'late enough'\n     /// that all type inference variables have been bound and so forth.\n-    pub region_obligations: Vec<(hir::HirId, RegionObligation<'tcx>)>,\n+    region_obligations: Vec<(hir::HirId, RegionObligation<'tcx>)>,\n }\n \n impl<'tcx> InferCtxtInner<'tcx> {\n@@ -213,6 +213,10 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         }\n     }\n \n+    pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {\n+        &self.region_obligations\n+    }\n+\n     pub(crate) fn projection_cache(&mut self) -> traits::ProjectionCache<'tcx, '_> {\n         self.projection_cache.with_log(&mut self.undo_log)\n     }\n@@ -270,6 +274,7 @@ pub(crate) enum UndoLog<'tcx> {\n     RegionConstraintCollector(region_constraints::UndoLog<'tcx>),\n     RegionUnificationTable(sv::UndoLog<ut::Delegate<ty::RegionVid>>),\n     ProjectionCache(traits::UndoLog<'tcx>),\n+    PushRegionObligation,\n }\n \n impl<'tcx> From<region_constraints::UndoLog<'tcx>> for UndoLog<'tcx> {\n@@ -348,6 +353,7 @@ struct RollbackView<'tcx, 'a> {\n     float_unification_table: &'a mut ut::UnificationStorage<ty::FloatVid>,\n     region_constraints: &'a mut RegionConstraintStorage<'tcx>,\n     projection_cache: &'a mut traits::ProjectionCacheStorage<'tcx>,\n+    region_obligations: &'a mut Vec<(hir::HirId, RegionObligation<'tcx>)>,\n }\n \n impl<'tcx> Rollback<UndoLog<'tcx>> for RollbackView<'tcx, '_> {\n@@ -362,6 +368,9 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for RollbackView<'tcx, '_> {\n                 self.region_constraints.unification_table.reverse(undo)\n             }\n             UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),\n+            UndoLog::PushRegionObligation => {\n+                self.region_obligations.pop();\n+            }\n         }\n     }\n }\n@@ -915,7 +924,6 @@ pub struct FullSnapshot<'a, 'tcx> {\n #[must_use = \"once you start a snapshot, you should always consume it\"]\n pub struct CombinedSnapshot<'a, 'tcx> {\n     undo_snapshot: Snapshot<'tcx>,\n-    region_obligations_snapshot: usize,\n     universe: ty::UniverseIndex,\n     was_in_snapshot: bool,\n     _in_progress_tables: Option<Ref<'a, ty::TypeckTables<'tcx>>>,\n@@ -1052,7 +1060,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let undo_snapshot = Snapshot { undo_len: inner.undo_log.logs.len(), _marker: PhantomData };\n         CombinedSnapshot {\n             undo_snapshot,\n-            region_obligations_snapshot: inner.region_obligations.len(),\n             universe: self.universe(),\n             was_in_snapshot: in_snapshot,\n             // Borrow tables \"in progress\" (i.e., during typeck)\n@@ -1063,13 +1070,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {\n         debug!(\"rollback_to(cause={})\", cause);\n-        let CombinedSnapshot {\n-            undo_snapshot,\n-            region_obligations_snapshot,\n-            universe,\n-            was_in_snapshot,\n-            _in_progress_tables,\n-        } = snapshot;\n+        let CombinedSnapshot { undo_snapshot, universe, was_in_snapshot, _in_progress_tables } =\n+            snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n         self.universe.set(universe);\n@@ -1093,21 +1095,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 float_unification_table,\n                 region_constraints: region_constraints.as_mut().unwrap(),\n                 projection_cache,\n+                region_obligations,\n             },\n             undo_snapshot,\n         );\n-        region_obligations.truncate(region_obligations_snapshot);\n     }\n \n     fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {\n         debug!(\"commit_from()\");\n-        let CombinedSnapshot {\n-            undo_snapshot,\n-            region_obligations_snapshot: _,\n-            universe: _,\n-            was_in_snapshot,\n-            _in_progress_tables,\n-        } = snapshot;\n+        let CombinedSnapshot { undo_snapshot, universe: _, was_in_snapshot, _in_progress_tables } =\n+            snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n "}, {"sha": "f068afc8dff14226ef1768c099afc279f7247171", "filename": "src/librustc_infer/infer/outlives/obligations.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f45d852dcc399991a3bcd2cf58921735e560b22c/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45d852dcc399991a3bcd2cf58921735e560b22c/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs?ref=f45d852dcc399991a3bcd2cf58921735e560b22c", "patch": "@@ -61,7 +61,10 @@\n \n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::outlives::verify::VerifyBoundCx;\n-use crate::infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n+use crate::infer::{\n+    self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, UndoLog, VerifyBound,\n+};\n+use crate::rustc_data_structures::undo_log::UndoLogs;\n use crate::traits::ObligationCause;\n use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -84,7 +87,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ) {\n         debug!(\"register_region_obligation(body_id={:?}, obligation={:?})\", body_id, obligation);\n \n-        self.inner.borrow_mut().region_obligations.push((body_id, obligation));\n+        let mut inner = self.inner.borrow_mut();\n+        inner.undo_log.push(UndoLog::PushRegionObligation);\n+        inner.region_obligations.push((body_id, obligation));\n     }\n \n     pub fn register_region_obligation_with_cause("}, {"sha": "e19ddcd9e5e9885a6fe862439413aa66c371c510", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f45d852dcc399991a3bcd2cf58921735e560b22c/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45d852dcc399991a3bcd2cf58921735e560b22c/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=f45d852dcc399991a3bcd2cf58921735e560b22c", "patch": "@@ -195,7 +195,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             let body_id_map: FxHashMap<_, _> = infcx\n                 .inner\n                 .borrow()\n-                .region_obligations\n+                .region_obligations()\n                 .iter()\n                 .map(|&(id, _)| (id, vec![]))\n                 .collect();"}]}