{"sha": "aebdef0cd6dff87322f51850f72c42ccb54fbd53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYmRlZjBjZDZkZmY4NzMyMmY1MTg1MGY3MmM0MmNjYjU0ZmJkNTM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-13T22:59:40Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-14T02:13:21Z"}, "message": "Move #fmt conversion model into ExtFmt.CT namespace", "tree": {"sha": "8b80cb4ca955f24f099bcca1360ed7b854eb486c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b80cb4ca955f24f099bcca1360ed7b854eb486c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aebdef0cd6dff87322f51850f72c42ccb54fbd53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aebdef0cd6dff87322f51850f72c42ccb54fbd53", "html_url": "https://github.com/rust-lang/rust/commit/aebdef0cd6dff87322f51850f72c42ccb54fbd53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aebdef0cd6dff87322f51850f72c42ccb54fbd53/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44aed626bf56b72af4934768e9fa31ad4439935a", "url": "https://api.github.com/repos/rust-lang/rust/commits/44aed626bf56b72af4934768e9fa31ad4439935a", "html_url": "https://github.com/rust-lang/rust/commit/44aed626bf56b72af4934768e9fa31ad4439935a"}], "stats": {"total": 145, "additions": 72, "deletions": 73}, "files": [{"sha": "3a12fb82dc37491e33d0b781724c904a969a134d", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/aebdef0cd6dff87322f51850f72c42ccb54fbd53/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebdef0cd6dff87322f51850f72c42ccb54fbd53/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=aebdef0cd6dff87322f51850f72c42ccb54fbd53", "patch": "@@ -21,35 +21,34 @@ import std.option;\n import std.option.none;\n import std.option.some;\n \n-import std.ExtFmt;\n-import std.ExtFmt.signedness;\n-import std.ExtFmt.signed;\n-import std.ExtFmt.unsigned;\n-import std.ExtFmt.caseness;\n-import std.ExtFmt.case_upper;\n-import std.ExtFmt.case_lower;\n-import std.ExtFmt.ty;\n-import std.ExtFmt.ty_bool;\n-import std.ExtFmt.ty_str;\n-import std.ExtFmt.ty_char;\n-import std.ExtFmt.ty_int;\n-import std.ExtFmt.ty_bits;\n-import std.ExtFmt.ty_hex;\n-import std.ExtFmt.flag;\n-import std.ExtFmt.flag_left_justify;\n-import std.ExtFmt.flag_left_zero_pad;\n-import std.ExtFmt.flag_left_space_pad;\n-import std.ExtFmt.flag_plus_if_positive;\n-import std.ExtFmt.flag_alternate;\n-import std.ExtFmt.count;\n-import std.ExtFmt.count_is;\n-import std.ExtFmt.count_is_param;\n-import std.ExtFmt.count_is_next_param;\n-import std.ExtFmt.count_implied;\n-import std.ExtFmt.conv;\n-import std.ExtFmt.piece;\n-import std.ExtFmt.piece_string;\n-import std.ExtFmt.piece_conv;\n+import std.ExtFmt.CT.signedness;\n+import std.ExtFmt.CT.signed;\n+import std.ExtFmt.CT.unsigned;\n+import std.ExtFmt.CT.caseness;\n+import std.ExtFmt.CT.case_upper;\n+import std.ExtFmt.CT.case_lower;\n+import std.ExtFmt.CT.ty;\n+import std.ExtFmt.CT.ty_bool;\n+import std.ExtFmt.CT.ty_str;\n+import std.ExtFmt.CT.ty_char;\n+import std.ExtFmt.CT.ty_int;\n+import std.ExtFmt.CT.ty_bits;\n+import std.ExtFmt.CT.ty_hex;\n+import std.ExtFmt.CT.flag;\n+import std.ExtFmt.CT.flag_left_justify;\n+import std.ExtFmt.CT.flag_left_zero_pad;\n+import std.ExtFmt.CT.flag_left_space_pad;\n+import std.ExtFmt.CT.flag_plus_if_positive;\n+import std.ExtFmt.CT.flag_alternate;\n+import std.ExtFmt.CT.count;\n+import std.ExtFmt.CT.count_is;\n+import std.ExtFmt.CT.count_is_param;\n+import std.ExtFmt.CT.count_is_next_param;\n+import std.ExtFmt.CT.count_implied;\n+import std.ExtFmt.CT.conv;\n+import std.ExtFmt.CT.piece;\n+import std.ExtFmt.CT.piece_string;\n+import std.ExtFmt.CT.piece_conv;\n import std.ExtFmt.CT.parse_fmt_string;\n \n export expand_syntax_ext;"}, {"sha": "35b9c5dd9e389cd43e64f53f1d8438fd07eff3d0", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/aebdef0cd6dff87322f51850f72c42ccb54fbd53/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebdef0cd6dff87322f51850f72c42ccb54fbd53/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=aebdef0cd6dff87322f51850f72c42ccb54fbd53", "patch": "@@ -1,56 +1,56 @@\n import option.none;\n import option.some;\n \n-tag signedness {\n-    signed;\n-    unsigned;\n-}\n+// Functions used by the fmt extension at compile time\n+mod CT {\n+    tag signedness {\n+        signed;\n+        unsigned;\n+    }\n \n-tag caseness {\n-    case_upper;\n-    case_lower;\n-}\n+    tag caseness {\n+        case_upper;\n+        case_lower;\n+    }\n \n-tag ty {\n-    ty_bool;\n-    ty_str;\n-    ty_char;\n-    ty_int(signedness);\n-    ty_bits;\n-    ty_hex(caseness);\n-    // FIXME: More types\n-}\n+    tag ty {\n+        ty_bool;\n+        ty_str;\n+        ty_char;\n+        ty_int(signedness);\n+        ty_bits;\n+        ty_hex(caseness);\n+        // FIXME: More types\n+    }\n \n-tag flag {\n-    flag_left_justify;\n-    flag_left_zero_pad;\n-    flag_left_space_pad;\n-    flag_plus_if_positive;\n-    flag_alternate;\n-}\n+    tag flag {\n+        flag_left_justify;\n+        flag_left_zero_pad;\n+        flag_left_space_pad;\n+        flag_plus_if_positive;\n+        flag_alternate;\n+    }\n \n-tag count {\n-    count_is(int);\n-    count_is_param(int);\n-    count_is_next_param;\n-    count_implied;\n-}\n+    tag count {\n+        count_is(int);\n+        count_is_param(int);\n+        count_is_next_param;\n+        count_implied;\n+    }\n \n-// A formatted conversion from an expression to a string\n-type conv = rec(option.t[int] param,\n-                vec[flag] flags,\n-                count width,\n-                count precision,\n-                ty ty);\n-\n-// A fragment of the output sequence\n-tag piece {\n-    piece_string(str);\n-    piece_conv(conv);\n-}\n+    // A formatted conversion from an expression to a string\n+    type conv = rec(option.t[int] param,\n+                    vec[flag] flags,\n+                    count width,\n+                    count precision,\n+                    ty ty);\n+\n+    // A fragment of the output sequence\n+    tag piece {\n+        piece_string(str);\n+        piece_conv(conv);\n+    }\n \n-// Functions used by the fmt extension at compile time\n-mod CT {\n     fn parse_fmt_string(str s) -> vec[piece] {\n         let vec[piece] pieces = vec();\n         auto lim = _str.byte_len(s);"}]}