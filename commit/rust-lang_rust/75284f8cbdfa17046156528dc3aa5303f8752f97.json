{"sha": "75284f8cbdfa17046156528dc3aa5303f8752f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Mjg0ZjhjYmRmYTE3MDQ2MTU2NTI4ZGMzYWE1MzAzZjg3NTJmOTc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-20T23:27:14Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-26T15:18:55Z"}, "message": "rustc_span: replace MacroBacktrace with ExpnData.", "tree": {"sha": "1e48804b616c0c6143bc49a7a80d7afb9be08705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e48804b616c0c6143bc49a7a80d7afb9be08705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75284f8cbdfa17046156528dc3aa5303f8752f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75284f8cbdfa17046156528dc3aa5303f8752f97", "html_url": "https://github.com/rust-lang/rust/commit/75284f8cbdfa17046156528dc3aa5303f8752f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75284f8cbdfa17046156528dc3aa5303f8752f97/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7b0aa0675f6e81bdb62e614c020a6862381c98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b0aa0675f6e81bdb62e614c020a6862381c98a", "html_url": "https://github.com/rust-lang/rust/commit/a7b0aa0675f6e81bdb62e614c020a6862381c98a"}], "stats": {"total": 41, "additions": 13, "deletions": 28}, "files": [{"sha": "49c8be2829220377e07cfccbd39704f3d536a890", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75284f8cbdfa17046156528dc3aa5303f8752f97/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75284f8cbdfa17046156528dc3aa5303f8752f97/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=75284f8cbdfa17046156528dc3aa5303f8752f97", "patch": "@@ -21,6 +21,7 @@ use crate::{\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_span::hygiene::{ExpnKind, MacroKind};\n use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n use std::io;\n@@ -346,15 +347,15 @@ pub trait Emitter {\n             for (i, trace) in sp.macro_backtrace().iter().rev().enumerate() {\n                 // Only show macro locations that are local\n                 // and display them like a span_note\n-                if trace.def_site_span.is_dummy() {\n+                if trace.def_site.is_dummy() {\n                     continue;\n                 }\n                 if always_backtrace {\n                     new_labels.push((\n-                        trace.def_site_span,\n+                        trace.def_site,\n                         format!(\n                             \"in this expansion of `{}`{}\",\n-                            trace.macro_decl_name,\n+                            trace.kind.descr(),\n                             if backtrace_len > 2 {\n                                 // if backtrace_len == 1 it'll be pointed\n                                 // at by \"in this macro invocation\"\n@@ -366,9 +367,8 @@ pub trait Emitter {\n                     ));\n                 }\n                 // Check to make sure we're not in any <*macros>\n-                if !sm.span_to_filename(trace.def_site_span).is_macros()\n-                    && !trace.macro_decl_name.starts_with(\"desugaring of \")\n-                    && !trace.macro_decl_name.starts_with(\"#[\")\n+                if !sm.span_to_filename(trace.def_site).is_macros()\n+                    && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n                     || always_backtrace\n                 {\n                     new_labels.push(("}, {"sha": "21be9527b6cabed969c6b5cad989a83db324f883", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75284f8cbdfa17046156528dc3aa5303f8752f97/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75284f8cbdfa17046156528dc3aa5303f8752f97/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=75284f8cbdfa17046156528dc3aa5303f8752f97", "patch": "@@ -17,7 +17,8 @@ use crate::{Applicability, DiagnosticId};\n use crate::{CodeSuggestion, SubDiagnostic};\n \n use rustc_data_structures::sync::Lrc;\n-use rustc_span::{MacroBacktrace, MultiSpan, Span, SpanLabel};\n+use rustc_span::hygiene::ExpnData;\n+use rustc_span::{MultiSpan, Span, SpanLabel};\n use std::io::{self, Write};\n use std::path::Path;\n use std::sync::{Arc, Mutex};\n@@ -317,18 +318,18 @@ impl DiagnosticSpan {\n         is_primary: bool,\n         label: Option<String>,\n         suggestion: Option<(&String, Applicability)>,\n-        mut backtrace: vec::IntoIter<MacroBacktrace>,\n+        mut backtrace: vec::IntoIter<ExpnData>,\n         je: &JsonEmitter,\n     ) -> DiagnosticSpan {\n         let start = je.sm.lookup_char_pos(span.lo());\n         let end = je.sm.lookup_char_pos(span.hi());\n         let backtrace_step = backtrace.next().map(|bt| {\n             let call_site = Self::from_span_full(bt.call_site, false, None, None, backtrace, je);\n             let def_site_span =\n-                Self::from_span_full(bt.def_site_span, false, None, None, vec![].into_iter(), je);\n+                Self::from_span_full(bt.def_site, false, None, None, vec![].into_iter(), je);\n             Box::new(DiagnosticSpanMacroExpansion {\n                 span: call_site,\n-                macro_decl_name: bt.macro_decl_name,\n+                macro_decl_name: bt.kind.descr(),\n                 def_site_span,\n             })\n         });"}, {"sha": "3f23eb15829de33d6a57744c6bfbafbaa55947d8", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/75284f8cbdfa17046156528dc3aa5303f8752f97/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75284f8cbdfa17046156528dc3aa5303f8752f97/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=75284f8cbdfa17046156528dc3aa5303f8752f97", "patch": "@@ -445,7 +445,7 @@ impl Span {\n         self.ctxt().outer_expn_data().allow_internal_unsafe\n     }\n \n-    pub fn macro_backtrace(mut self) -> Vec<MacroBacktrace> {\n+    pub fn macro_backtrace(mut self) -> Vec<ExpnData> {\n         let mut prev_span = DUMMY_SP;\n         let mut result = vec![];\n         loop {\n@@ -455,11 +455,7 @@ impl Span {\n             }\n             // Don't print recursive invocations.\n             if !expn_data.call_site.source_equal(&prev_span) {\n-                result.push(MacroBacktrace {\n-                    call_site: expn_data.call_site,\n-                    macro_decl_name: expn_data.kind.descr(),\n-                    def_site_span: expn_data.def_site,\n-                });\n+                result.push(expn_data.clone());\n             }\n \n             prev_span = self;\n@@ -1501,18 +1497,6 @@ pub struct FileLines {\n pub static SPAN_DEBUG: AtomicRef<fn(Span, &mut fmt::Formatter<'_>) -> fmt::Result> =\n     AtomicRef::new(&(default_span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n \n-#[derive(Debug)]\n-pub struct MacroBacktrace {\n-    /// span where macro was applied to generate this code\n-    pub call_site: Span,\n-\n-    /// name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")\n-    pub macro_decl_name: String,\n-\n-    /// span where macro was defined (possibly dummy)\n-    pub def_site_span: Span,\n-}\n-\n // _____________________________________________________________________________\n // SpanLinesError, SpanSnippetError, DistinctSources, MalformedSourceMapPositions\n //"}]}