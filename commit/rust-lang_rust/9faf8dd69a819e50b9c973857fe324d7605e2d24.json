{"sha": "9faf8dd69a819e50b9c973857fe324d7605e2d24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYWY4ZGQ2OWE4MTllNTBiOWM5NzM4NTdmZTMyNGQ3NjA1ZTJkMjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-08T19:14:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-08T19:14:52Z"}, "message": "Hygiene is an internal implementation detail of the compiler", "tree": {"sha": "a9eccedac7905ac3b6d6608b4607241ddefe6a63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9eccedac7905ac3b6d6608b4607241ddefe6a63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9faf8dd69a819e50b9c973857fe324d7605e2d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9faf8dd69a819e50b9c973857fe324d7605e2d24", "html_url": "https://github.com/rust-lang/rust/commit/9faf8dd69a819e50b9c973857fe324d7605e2d24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9faf8dd69a819e50b9c973857fe324d7605e2d24/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e346a9c5e1f5fb536df19086a52411cf05255ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e346a9c5e1f5fb536df19086a52411cf05255ac9", "html_url": "https://github.com/rust-lang/rust/commit/e346a9c5e1f5fb536df19086a52411cf05255ac9"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "62692c2c18dc4614a5b60a553131e93ac1629d6a", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9faf8dd69a819e50b9c973857fe324d7605e2d24/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faf8dd69a819e50b9c973857fe324d7605e2d24/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9faf8dd69a819e50b9c973857fe324d7605e2d24", "patch": "@@ -96,7 +96,7 @@ pub use {\n         visibility::Visibility,\n     },\n     hir_expand::{\n-        name::{known, AsName, Name},\n+        name::{known, Name},\n         ExpandResult, HirFileId, InFile, MacroCallId, MacroCallLoc, /* FIXME */ MacroDefId,\n         MacroFile, Origin,\n     },\n@@ -106,7 +106,10 @@ pub use {\n // These are negative re-exports: pub using these names is forbidden, they\n // should remain private to hir internals.\n #[allow(unused)]\n-use {hir_def::path::Path, hir_expand::hygiene::Hygiene};\n+use {\n+    hir_def::path::Path,\n+    hir_expand::{hygiene::Hygiene, name::AsName},\n+};\n \n /// hir::Crate describes a single crate. It's the main interface with which\n /// a crate's dependencies interact. Mostly, it should be just a proxy for the"}, {"sha": "335e0ed954ad1d82fd725615dff5bc6ddf09b9b5", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9faf8dd69a819e50b9c973857fe324d7605e2d24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faf8dd69a819e50b9c973857fe324d7605e2d24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=9faf8dd69a819e50b9c973857fe324d7605e2d24", "patch": "@@ -1,7 +1,7 @@\n use std::iter;\n \n use either::Either;\n-use hir::{AsName, Module, ModuleDef, Name, Variant};\n+use hir::{Module, ModuleDef, Name, Variant};\n use ide_db::{\n     defs::Definition,\n     helpers::{\n@@ -133,7 +133,7 @@ fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &Va\n             ),\n             _ => false,\n         })\n-        .any(|(name, _)| name == variant_name.as_name())\n+        .any(|(name, _)| name.to_string() == variant_name.to_string())\n }\n \n fn insert_import("}, {"sha": "d84ca0e5553cf5bf2e9f5ccdfb8e148e9b19120f", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9faf8dd69a819e50b9c973857fe324d7605e2d24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faf8dd69a819e50b9c973857fe324d7605e2d24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=9faf8dd69a819e50b9c973857fe324d7605e2d24", "patch": "@@ -1,6 +1,6 @@\n use std::iter;\n \n-use hir::{AsAssocItem, AsName};\n+use hir::AsAssocItem;\n use ide_db::helpers::{import_assets::ImportCandidate, mod_path_to_ast};\n use ide_db::RootDatabase;\n use syntax::{\n@@ -160,7 +160,9 @@ fn find_trait_method(\n ) -> Option<hir::Function> {\n     if let Some(hir::AssocItem::Function(method)) =\n         trait_.items(db).into_iter().find(|item: &hir::AssocItem| {\n-            item.name(db).map(|name| name == trait_method_name.as_name()).unwrap_or(false)\n+            item.name(db)\n+                .map(|name| name.to_string() == trait_method_name.to_string())\n+                .unwrap_or(false)\n         })\n     {\n         Some(method)"}, {"sha": "e2237ca9568f5b8a78bc34f116f6698db2d84b48", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faf8dd69a819e50b9c973857fe324d7605e2d24/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/9faf8dd69a819e50b9c973857fe324d7605e2d24/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=9faf8dd69a819e50b9c973857fe324d7605e2d24", "patch": "@@ -46,7 +46,7 @@ This is *the* entry point, but it front-loads a lot of complexity, so its fine t\n \n `crates/rust-analyzer/src/handlers.rs` implements all LSP requests and is a great place to start if you are already familiar with LSP.\n \n-`Analysis` and `AnalysisHost` types define the main API.\n+`Analysis` and `AnalysisHost` types define the main API for consumers of IDE services.\n \n ## Code Map\n "}]}