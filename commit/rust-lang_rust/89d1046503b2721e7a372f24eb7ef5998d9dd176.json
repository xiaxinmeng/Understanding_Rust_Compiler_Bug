{"sha": "89d1046503b2721e7a372f24eb7ef5998d9dd176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZDEwNDY1MDNiMjcyMWU3YTM3MmYyNGViN2VmNTk5OGQ5ZGQxNzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-26T12:10:07Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-26T12:10:07Z"}, "message": "don't report bitshift overflow twice", "tree": {"sha": "8fd2f7b94b16d549d3a95ee8b3271f7e5e167567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fd2f7b94b16d549d3a95ee8b3271f7e5e167567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89d1046503b2721e7a372f24eb7ef5998d9dd176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89d1046503b2721e7a372f24eb7ef5998d9dd176", "html_url": "https://github.com/rust-lang/rust/commit/89d1046503b2721e7a372f24eb7ef5998d9dd176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89d1046503b2721e7a372f24eb7ef5998d9dd176/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "735c018974e5570ea13fd887aa70a011a5b8e7b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/735c018974e5570ea13fd887aa70a011a5b8e7b8", "html_url": "https://github.com/rust-lang/rust/commit/735c018974e5570ea13fd887aa70a011a5b8e7b8"}], "stats": {"total": 28, "additions": 6, "deletions": 22}, "files": [{"sha": "59792d16e8bb6a484c1793de319d5d2965709ac6", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d1046503b2721e7a372f24eb7ef5998d9dd176/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d1046503b2721e7a372f24eb7ef5998d9dd176/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=89d1046503b2721e7a372f24eb7ef5998d9dd176", "patch": "@@ -40,4 +40,4 @@ mod err;\n pub use int::*;\n pub use us::*;\n pub use is::*;\n-pub use err::ConstMathErr;\n+pub use err::{ConstMathErr, Op};"}, {"sha": "0673188f53d6ff6ce9efc4007e5bdd5fa96a6c57", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89d1046503b2721e7a372f24eb7ef5998d9dd176/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d1046503b2721e7a372f24eb7ef5998d9dd176/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=89d1046503b2721e7a372f24eb7ef5998d9dd176", "patch": "@@ -28,9 +28,10 @@ use rustc::dep_graph::DepNode;\n use rustc::ty::cast::{CastKind};\n use rustc_const_eval::{ConstEvalErr, lookup_const_fn_by_id, compare_lit_exprs};\n use rustc_const_eval::{eval_const_expr_partial, lookup_const_by_id};\n-use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal, MiscCatchAll};\n use rustc_const_eval::ErrKind::{ErroneousReferencedConstant, MiscBinaryOp};\n+use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal, MiscCatchAll, Math};\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_math::{ConstMathErr, Op};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n@@ -490,6 +491,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 Err(ConstEvalErr { kind: MiscCatchAll, ..}) |\n                 Err(ConstEvalErr { kind: MiscBinaryOp, ..}) |\n                 Err(ConstEvalErr { kind: ErroneousReferencedConstant(_), ..}) |\n+                Err(ConstEvalErr { kind: Math(ConstMathErr::Overflow(Op::Shr)), ..}) |\n+                Err(ConstEvalErr { kind: Math(ConstMathErr::Overflow(Op::Shl)), ..}) |\n                 Err(ConstEvalErr { kind: IndexOpFeatureGated, ..}) => {},\n                 Err(msg) => {\n                     self.qualif = self.qualif | ConstQualif::NOT_CONST;"}, {"sha": "b235962eb9a3dcf6fddfd86d06c85253cc1a8bcf", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89d1046503b2721e7a372f24eb7ef5998d9dd176/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d1046503b2721e7a372f24eb7ef5998d9dd176/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=89d1046503b2721e7a372f24eb7ef5998d9dd176", "patch": "@@ -30,6 +30,7 @@\n extern crate core;\n #[macro_use] extern crate rustc;\n extern crate rustc_const_eval;\n+extern crate rustc_const_math;\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "6d5abc944e78f7dc2ca80ab94e150889c31897a1", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89d1046503b2721e7a372f24eb7ef5998d9dd176/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d1046503b2721e7a372f24eb7ef5998d9dd176/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=89d1046503b2721e7a372f24eb7ef5998d9dd176", "patch": "@@ -16,53 +16,37 @@\n fn main() {\n       let n = 1u8 << 7;\n       let n = 1u8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n       let n = 1u16 << 15;\n       let n = 1u16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n       let n = 1u32 << 31;\n       let n = 1u32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n       let n = 1u64 << 63;\n       let n = 1u64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n       let n = 1i8 << 7;\n       let n = 1i8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n       let n = 1i16 << 15;\n       let n = 1i16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n       let n = 1i32 << 31;\n       let n = 1i32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n       let n = 1i64 << 63;\n       let n = 1i64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n \n       let n = 1u8 >> 7;\n       let n = 1u8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n       let n = 1u16 >> 15;\n       let n = 1u16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n       let n = 1u32 >> 31;\n       let n = 1u32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n       let n = 1u64 >> 63;\n       let n = 1u64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n       let n = 1i8 >> 7;\n       let n = 1i8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n       let n = 1i16 >> 15;\n       let n = 1i16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n       let n = 1i32 >> 31;\n       let n = 1i32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n       let n = 1i64 >> 63;\n       let n = 1i64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n \n       let n = 1u8;\n       let n = n << 7;\n@@ -73,22 +57,18 @@ fn main() {\n \n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;\n       #[cfg(target_pointer_width = \"64\")]\n       const BITS: usize = 64;\n \n       let n = 1_isize << BITS; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n       let n = 1_usize << BITS; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift left with overflow\n \n \n       let n = 1i8<<(1isize+-1);\n \n       let n = 1i64 >> [63][0];\n       let n = 1i64 >> [64][0]; //~ ERROR: bitshift exceeds the type's number of bits\n-      //~^ WARN: attempted to shift right with overflow\n }"}]}