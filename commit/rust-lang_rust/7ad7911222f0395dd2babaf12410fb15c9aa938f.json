{"sha": "7ad7911222f0395dd2babaf12410fb15c9aa938f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZDc5MTEyMjJmMDM5NWRkMmJhYmFmMTI0MTBmYjE1YzlhYTkzOGY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-16T21:28:46Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:12:04Z"}, "message": "Add watched and indestructible spawn modes.", "tree": {"sha": "a983cd583eb539a5d0781915be39032d74aeabc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a983cd583eb539a5d0781915be39032d74aeabc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad7911222f0395dd2babaf12410fb15c9aa938f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad7911222f0395dd2babaf12410fb15c9aa938f", "html_url": "https://github.com/rust-lang/rust/commit/7ad7911222f0395dd2babaf12410fb15c9aa938f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad7911222f0395dd2babaf12410fb15c9aa938f/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21831458500b1a5c78fe6aeccab5412fac701d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/21831458500b1a5c78fe6aeccab5412fac701d9f", "html_url": "https://github.com/rust-lang/rust/commit/21831458500b1a5c78fe6aeccab5412fac701d9f"}], "stats": {"total": 125, "additions": 121, "deletions": 4}, "files": [{"sha": "cfd8e46dfdb75f721d3a95f9f2a6ea348345a360", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ad7911222f0395dd2babaf12410fb15c9aa938f/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad7911222f0395dd2babaf12410fb15c9aa938f/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=7ad7911222f0395dd2babaf12410fb15c9aa938f", "patch": "@@ -130,7 +130,7 @@ impl BlockedTask {\n \n     /// Create a blocked task, unless the task was already killed.\n     pub fn try_block(mut task: ~Task) -> Either<~Task, BlockedTask> {\n-        if task.death.unkillable > 0 { // FIXME(#7544): || self.indestructible\n+        if task.death.unkillable > 0 {\n             Right(Unkillable(task))\n         } else {\n             rtassert!(task.death.kill_handle.is_some());"}, {"sha": "a3ece0c2e0a1388dd87a1ee8cbec2fa39374ed3a", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/7ad7911222f0395dd2babaf12410fb15c9aa938f/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad7911222f0395dd2babaf12410fb15c9aa938f/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=7ad7911222f0395dd2babaf12410fb15c9aa938f", "patch": "@@ -148,6 +148,17 @@ pub struct SchedOpts {\n  * * supervised - Propagate failure unidirectionally from parent to child,\n  *                but not from child to parent. False by default.\n  *\n+ * * watched - Make parent task collect exit status notifications from child\n+ *             before reporting its own exit status. (This delays the parent\n+ *             task's death and cleanup until after all transitively watched\n+ *             children also exit.) True by default.\n+ *\n+ * * indestructible - Configures the task to ignore kill signals received from\n+ *                    linked failure. This may cause process hangs during\n+ *                    failure if not used carefully, but causes task blocking\n+ *                    code paths (e.g. port recv() calls) to be faster by 2\n+ *                    atomic operations. False by default.\n+ *\n  * * notify_chan - Enable lifecycle notifications on the given channel\n  *\n  * * sched - Specify the configuration of a new scheduler to create the task\n@@ -166,6 +177,8 @@ pub struct SchedOpts {\n pub struct TaskOpts {\n     linked: bool,\n     supervised: bool,\n+    watched: bool,\n+    indestructible: bool,\n     notify_chan: Option<Chan<TaskResult>>,\n     sched: SchedOpts\n }\n@@ -217,6 +230,8 @@ impl TaskBuilder {\n             opts: TaskOpts {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n+                watched: self.opts.watched,\n+                indestructible: self.opts.indestructible,\n                 notify_chan: notify_chan,\n                 sched: self.opts.sched\n             },\n@@ -232,6 +247,7 @@ impl TaskBuilder {\n     /// the other will not be killed.\n     pub fn unlinked(&mut self) {\n         self.opts.linked = false;\n+        self.opts.watched = false;\n     }\n \n     /// Unidirectionally link the child task's failure with the parent's. The\n@@ -240,13 +256,34 @@ impl TaskBuilder {\n     pub fn supervised(&mut self) {\n         self.opts.supervised = true;\n         self.opts.linked = false;\n+        self.opts.watched = false;\n     }\n \n     /// Link the child task's and parent task's failures. If either fails, the\n     /// other will be killed.\n     pub fn linked(&mut self) {\n         self.opts.linked = true;\n         self.opts.supervised = false;\n+        self.opts.watched = true;\n+    }\n+\n+    /// Cause the parent task to collect the child's exit status (and that of\n+    /// all transitively-watched grandchildren) before reporting its own.\n+    pub fn watched(&mut self) {\n+        self.opts.watched = true;\n+    }\n+\n+    /// Allow the child task to outlive the parent task, at the possible cost\n+    /// of the parent reporting success even if the child task fails later.\n+    pub fn unwatched(&mut self) {\n+        self.opts.watched = false;\n+    }\n+\n+    /// Cause the child task to ignore any kill signals received from linked\n+    /// failure. This optimizes context switching, at the possible expense of\n+    /// process hangs in the case of unexpected failure.\n+    pub fn indestructible(&mut self) {\n+        self.opts.indestructible = true;\n     }\n \n     /**\n@@ -341,6 +378,8 @@ impl TaskBuilder {\n         let opts = TaskOpts {\n             linked: x.opts.linked,\n             supervised: x.opts.supervised,\n+            watched: x.opts.watched,\n+            indestructible: x.opts.indestructible,\n             notify_chan: notify_chan,\n             sched: x.opts.sched\n         };\n@@ -407,6 +446,8 @@ pub fn default_task_opts() -> TaskOpts {\n     TaskOpts {\n         linked: true,\n         supervised: false,\n+        watched: true,\n+        indestructible: false,\n         notify_chan: None,\n         sched: SchedOpts {\n             mode: DefaultScheduler,\n@@ -448,6 +489,17 @@ pub fn spawn_supervised(f: ~fn()) {\n     task.spawn(f)\n }\n \n+/// Creates a child task that cannot be killed by linked failure. This causes\n+/// its context-switch path to be faster by 2 atomic swap operations.\n+/// (Note that this convenience wrapper still uses linked-failure, so the\n+/// child's children will still be killable by the parent. For the fastest\n+/// possible spawn mode, use task::task().unlinked().indestructible().spawn.)\n+pub fn spawn_indestructible(f: ~fn()) {\n+    let mut task = task();\n+    task.indestructible();\n+    task.spawn(f)\n+}\n+\n pub fn spawn_with<A:Send>(arg: A, f: ~fn(v: A)) {\n     /*!\n      * Runs a task, while transfering ownership of one argument to the\n@@ -1209,3 +1261,61 @@ fn test_simple_newsched_spawn() {\n     }\n }\n \n+#[test] #[ignore(cfg(windows))]\n+fn test_spawn_watched() {\n+    use rt::test::{run_in_newsched_task, spawntask_try};\n+    do run_in_newsched_task {\n+        let result = do spawntask_try {\n+            let mut t = task();\n+            t.unlinked();\n+            t.watched();\n+            do t.spawn {\n+                let mut t = task();\n+                t.unlinked();\n+                t.watched();\n+                do t.spawn {\n+                    task::yield();\n+                    fail!();\n+                }\n+            }\n+        };\n+        assert!(result.is_err());\n+    }\n+}\n+\n+#[test] #[ignore(cfg(windows))]\n+fn test_indestructible() {\n+    use rt::test::{run_in_newsched_task, spawntask_try};\n+    do run_in_newsched_task {\n+        let result = do spawntask_try {\n+            let mut t = task();\n+            t.watched();\n+            t.supervised();\n+            t.indestructible();\n+            do t.spawn {\n+                let (p1, _c1) = stream::<()>();\n+                let (p2, c2) = stream::<()>();\n+                let (p3, c3) = stream::<()>();\n+                let mut t = task();\n+                t.unwatched();\n+                do t.spawn {\n+                    do (|| {\n+                        p1.recv(); // would deadlock if not killed\n+                    }).finally {\n+                        c2.send(());\n+                    };\n+                }\n+                let mut t = task();\n+                t.unwatched();\n+                do t.spawn {\n+                    p3.recv();\n+                    task::yield();\n+                    fail!();\n+                }\n+                c3.send(());\n+                p2.recv();\n+            }\n+        };\n+        assert!(result.is_ok());\n+    }\n+}"}, {"sha": "2150c0c5ac28dc39e39c2e6af2918ce9215df96d", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ad7911222f0395dd2babaf12410fb15c9aa938f/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad7911222f0395dd2babaf12410fb15c9aa938f/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=7ad7911222f0395dd2babaf12410fb15c9aa938f", "patch": "@@ -671,6 +671,7 @@ pub fn spawn_raw(opts: TaskOpts, f: ~fn()) {\n \n fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n     let child_data = Cell::new(gen_child_taskgroup(opts.linked, opts.supervised));\n+    let indestructible = opts.indestructible;\n \n     let child_wrapper: ~fn() = || {\n         // Child task runs this code.\n@@ -692,21 +693,25 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n         };\n         // Should be run after the local-borrowed task is returned.\n         if enlist_success {\n-            f()\n+            if indestructible {\n+                unsafe { do unkillable { f() } }\n+            } else {\n+                f()\n+            }\n         }\n     };\n \n     let mut task = unsafe {\n         let sched = Local::unsafe_borrow::<Scheduler>();\n         rtdebug!(\"unsafe borrowed sched\");\n \n-        if opts.linked {\n+        if opts.watched {\n             let child_wrapper = Cell::new(child_wrapper);\n             do Local::borrow::<Task, ~Task>() |running_task| {\n                 ~running_task.new_child(&mut (*sched).stack_pool, child_wrapper.take())\n             }\n         } else {\n-            // An unlinked task is a new root in the task tree\n+            // An unwatched task is a new root in the exit-code propagation tree\n             ~Task::new_root(&mut (*sched).stack_pool, child_wrapper)\n         }\n     };\n@@ -848,6 +853,7 @@ fn test_spawn_raw_simple() {\n fn test_spawn_raw_unsupervise() {\n     let opts = task::TaskOpts {\n         linked: false,\n+        watched: false,\n         notify_chan: None,\n         .. default_task_opts()\n     };\n@@ -878,6 +884,7 @@ fn test_spawn_raw_notify_failure() {\n \n     let opts = task::TaskOpts {\n         linked: false,\n+        watched: false,\n         notify_chan: Some(notify_ch),\n         .. default_task_opts()\n     };"}]}