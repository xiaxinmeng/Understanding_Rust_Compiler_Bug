{"sha": "a34e1b58cb810fdada170b59e83f6bf8407342cb", "node_id": "C_kwDOAAsO6NoAKGEzNGUxYjU4Y2I4MTBmZGFkYTE3MGI1OWU4M2Y2YmY4NDA3MzQyY2I", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-24T09:27:05Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-24T09:27:05Z"}, "message": "make `classify_drop_access_kind` iterate", "tree": {"sha": "9211bcc56dbad253b67b10794538e0623eac2375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9211bcc56dbad253b67b10794538e0623eac2375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34e1b58cb810fdada170b59e83f6bf8407342cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34e1b58cb810fdada170b59e83f6bf8407342cb", "html_url": "https://github.com/rust-lang/rust/commit/a34e1b58cb810fdada170b59e83f6bf8407342cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34e1b58cb810fdada170b59e83f6bf8407342cb/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21759f5509477522a208b27bec5822d89f7c6b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21759f5509477522a208b27bec5822d89f7c6b8", "html_url": "https://github.com/rust-lang/rust/commit/b21759f5509477522a208b27bec5822d89f7c6b8"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "3b4e9e95b0e9108db5086f244888b4bce63e041b", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a34e1b58cb810fdada170b59e83f6bf8407342cb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34e1b58cb810fdada170b59e83f6bf8407342cb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a34e1b58cb810fdada170b59e83f6bf8407342cb", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::ObligationCause;\n+use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory,\n     FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n@@ -22,6 +23,7 @@ use rustc_trait_selection::traits::TraitEngineExt as _;\n use crate::borrow_set::TwoPhaseActivation;\n use crate::borrowck_errors;\n \n+use crate::diagnostics::conflict_errors::StorageDeadOrDrop::LocalStorageDead;\n use crate::diagnostics::find_all_local_uses;\n use crate::{\n     borrow_set::BorrowData, diagnostics::Instance, prefixes::IsPrefixOf,\n@@ -1956,45 +1958,46 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     fn classify_drop_access_kind(&self, place: PlaceRef<'tcx>) -> StorageDeadOrDrop<'tcx> {\n         let tcx = self.infcx.tcx;\n-        match place.last_projection() {\n-            None => StorageDeadOrDrop::LocalStorageDead,\n-            Some((place_base, elem)) => {\n-                // FIXME(spastorino) make this iterate\n-                let base_access = self.classify_drop_access_kind(place_base);\n-                match elem {\n-                    ProjectionElem::Deref => match base_access {\n-                        StorageDeadOrDrop::LocalStorageDead\n-                        | StorageDeadOrDrop::BoxedStorageDead => {\n-                            assert!(\n-                                place_base.ty(self.body, tcx).ty.is_box(),\n-                                \"Drop of value behind a reference or raw pointer\"\n-                            );\n-                            StorageDeadOrDrop::BoxedStorageDead\n-                        }\n-                        StorageDeadOrDrop::Destructor(_) => base_access,\n-                    },\n-                    ProjectionElem::Field(..) | ProjectionElem::Downcast(..) => {\n-                        let base_ty = place_base.ty(self.body, tcx).ty;\n-                        match base_ty.kind() {\n-                            ty::Adt(def, _) if def.has_dtor(tcx) => {\n-                                // Report the outermost adt with a destructor\n-                                match base_access {\n-                                    StorageDeadOrDrop::Destructor(_) => base_access,\n-                                    StorageDeadOrDrop::LocalStorageDead\n-                                    | StorageDeadOrDrop::BoxedStorageDead => {\n-                                        StorageDeadOrDrop::Destructor(base_ty)\n+        let (kind, _place_ty) = place.projection.iter().fold(\n+            (LocalStorageDead, PlaceTy::from_ty(self.body.local_decls[place.local].ty)),\n+            |(kind, place_ty), &elem| {\n+                (\n+                    match elem {\n+                        ProjectionElem::Deref => match kind {\n+                            StorageDeadOrDrop::LocalStorageDead\n+                            | StorageDeadOrDrop::BoxedStorageDead => {\n+                                assert!(\n+                                    place_ty.ty.is_box(),\n+                                    \"Drop of value behind a reference or raw pointer\"\n+                                );\n+                                StorageDeadOrDrop::BoxedStorageDead\n+                            }\n+                            StorageDeadOrDrop::Destructor(_) => kind,\n+                        },\n+                        ProjectionElem::Field(..) | ProjectionElem::Downcast(..) => {\n+                            match place_ty.ty.kind() {\n+                                ty::Adt(def, _) if def.has_dtor(tcx) => {\n+                                    // Report the outermost adt with a destructor\n+                                    match kind {\n+                                        StorageDeadOrDrop::Destructor(_) => kind,\n+                                        StorageDeadOrDrop::LocalStorageDead\n+                                        | StorageDeadOrDrop::BoxedStorageDead => {\n+                                            StorageDeadOrDrop::Destructor(place_ty.ty)\n+                                        }\n                                     }\n                                 }\n+                                _ => kind,\n                             }\n-                            _ => base_access,\n                         }\n-                    }\n-                    ProjectionElem::ConstantIndex { .. }\n-                    | ProjectionElem::Subslice { .. }\n-                    | ProjectionElem::Index(_) => base_access,\n-                }\n-            }\n-        }\n+                        ProjectionElem::ConstantIndex { .. }\n+                        | ProjectionElem::Subslice { .. }\n+                        | ProjectionElem::Index(_) => kind,\n+                    },\n+                    place_ty.projection_ty(tcx, elem),\n+                )\n+            },\n+        );\n+        kind\n     }\n \n     /// Describe the reason for the fake borrow that was assigned to `place`."}]}