{"sha": "61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYTBhN2YwYTNhODQzMjgyYzE4NmU4YzM1YjExNmQ2Y2I0YzhkMTk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-11-27T12:54:01Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-12-02T00:22:00Z"}, "message": "debuginfo: Fix multi-byte character related bug in cleanup scope handling.\n\nAlso see issue #18791.", "tree": {"sha": "27ef9cd65b1ef2754b9c3869387edc4ba3ad6b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27ef9cd65b1ef2754b9c3869387edc4ba3ad6b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "html_url": "https://github.com/rust-lang/rust/commit/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de95ad4c46788518822326941bdc5084b1023abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/de95ad4c46788518822326941bdc5084b1023abf", "html_url": "https://github.com/rust-lang/rust/commit/de95ad4c46788518822326941bdc5084b1023abf"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "e0d588a1d3985ff20c505bfbbafb6937f359394c", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "patch": "@@ -1816,7 +1816,7 @@ pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // cleanup scope for the incoming arguments\n     let fn_cleanup_debug_loc =\n-        debuginfo::get_cleanup_debug_loc_for_ast_node(fn_ast_id, body.span, true);\n+        debuginfo::get_cleanup_debug_loc_for_ast_node(ccx, fn_ast_id, body.span, true);\n     let arg_scope = fcx.push_custom_cleanup_scope_with_debug_loc(fn_cleanup_debug_loc);\n \n     let block_ty = node_id_type(bcx, body.id);"}, {"sha": "62d314a4829120ca02a70a6ad3369aa274a831a4", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "patch": "@@ -55,7 +55,7 @@ pub fn trans_stmt<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n \n     let id = ast_util::stmt_id(s);\n     let cleanup_debug_loc =\n-        debuginfo::get_cleanup_debug_loc_for_ast_node(id, s.span, false);\n+        debuginfo::get_cleanup_debug_loc_for_ast_node(bcx.ccx(), id, s.span, false);\n     fcx.push_ast_cleanup_scope(cleanup_debug_loc);\n \n     match s.node {\n@@ -103,7 +103,7 @@ pub fn trans_block<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let mut bcx = bcx;\n \n     let cleanup_debug_loc =\n-        debuginfo::get_cleanup_debug_loc_for_ast_node(b.id, b.span, true);\n+        debuginfo::get_cleanup_debug_loc_for_ast_node(bcx.ccx(), b.id, b.span, true);\n     fcx.push_ast_cleanup_scope(cleanup_debug_loc);\n \n     for s in b.stmts.iter() {"}, {"sha": "e798dd4dc945f8036011a915edd09cf8e279d412", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "patch": "@@ -1047,10 +1047,11 @@ pub fn create_argument_metadata(bcx: Block, arg: &ast::Arg) {\n     })\n }\n \n-pub fn get_cleanup_debug_loc_for_ast_node(node_id: ast::NodeId,\n-                                          node_span: Span,\n-                                          is_block: bool)\n-                                          -> NodeInfo {\n+pub fn get_cleanup_debug_loc_for_ast_node<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n+                                                    node_id: ast::NodeId,\n+                                                    node_span: Span,\n+                                                    is_block: bool)\n+                                                 -> NodeInfo {\n     // A debug location needs two things:\n     // (1) A span (of which only the beginning will actually be used)\n     // (2) An AST node-id which will be used to look up the lexical scope\n@@ -1080,15 +1081,25 @@ pub fn get_cleanup_debug_loc_for_ast_node(node_id: ast::NodeId,\n     // scope is actually left when the cleanup code is executed.\n     // In practice it shouldn't make much of a difference.\n \n-    let cleanup_span = if is_block {\n-        Span {\n-            lo: node_span.hi - codemap::BytePos(1), // closing brace should always be 1 byte...\n-            hi: node_span.hi,\n-            expn_id: node_span.expn_id\n+    let mut cleanup_span = node_span;\n+\n+    if is_block {\n+        // Not all blocks actually have curly braces (e.g. simple closure\n+        // bodies), in which case we also just want to return the span of the\n+        // whole expression.\n+        let code_snippet = cx.sess().codemap().span_to_snippet(node_span);\n+        if let Some(code_snippet) = code_snippet {\n+            let bytes = code_snippet.as_bytes();\n+\n+            if bytes.len() > 0 && bytes[bytes.len()-1 ..] == b\"}\" {\n+                cleanup_span = Span {\n+                    lo: node_span.hi - codemap::BytePos(1),\n+                    hi: node_span.hi,\n+                    expn_id: node_span.expn_id\n+                };\n+            }\n         }\n-    } else {\n-        node_span\n-    };\n+    }\n \n     NodeInfo {\n         id: node_id,"}, {"sha": "149a1796348734d9bfe843cabe9815e14ec8133f", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "patch": "@@ -97,7 +97,8 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     debug!(\"trans_into() expr={}\", expr.repr(bcx.tcx()));\n \n-    let cleanup_debug_loc = debuginfo::get_cleanup_debug_loc_for_ast_node(expr.id,\n+    let cleanup_debug_loc = debuginfo::get_cleanup_debug_loc_for_ast_node(bcx.ccx(),\n+                                                                          expr.id,\n                                                                           expr.span,\n                                                                           false);\n     bcx.fcx.push_ast_cleanup_scope(cleanup_debug_loc);\n@@ -130,7 +131,8 @@ pub fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let mut bcx = bcx;\n     let fcx = bcx.fcx;\n \n-    let cleanup_debug_loc = debuginfo::get_cleanup_debug_loc_for_ast_node(expr.id,\n+    let cleanup_debug_loc = debuginfo::get_cleanup_debug_loc_for_ast_node(bcx.ccx(),\n+                                                                          expr.id,\n                                                                           expr.span,\n                                                                           false);\n     fcx.push_ast_cleanup_scope(cleanup_debug_loc);\n@@ -621,7 +623,10 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 ast::ExprRepeat(..) | ast::ExprVec(..) => {\n                     // Special case for slices.\n                     let cleanup_debug_loc =\n-                        debuginfo::get_cleanup_debug_loc_for_ast_node(x.id, x.span, false);\n+                        debuginfo::get_cleanup_debug_loc_for_ast_node(bcx.ccx(),\n+                                                                      x.id,\n+                                                                      x.span,\n+                                                                      false);\n                     fcx.push_ast_cleanup_scope(cleanup_debug_loc);\n                     let datum = unpack_datum!(\n                         bcx, tvec::trans_slice_vec(bcx, expr, &**x));"}, {"sha": "dd0d86bf742e6415adadd180bc6e836bfee08d05", "filename": "src/test/debuginfo/multi-byte-chars.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a0a7f0a3a843282c186e8c35b116d6cb4c8d19/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs?ref=61a0a7f0a3a843282c186e8c35b116d6cb4c8d19", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+#![feature(non_ascii_idents)]\n+\n+// This test checks whether debuginfo generation can handle multi-byte UTF-8\n+// characters at the end of a block. There's no need to do anything in the\n+// debugger -- just make sure that the compiler doesn't crash.\n+// See also issue #18791.\n+\n+struct C { \u03b8: u8 }\n+\n+fn main() {\n+    let x =  C { \u03b8: 0 };\n+    (|c: C| c.\u03b8 )(x);\n+}"}]}