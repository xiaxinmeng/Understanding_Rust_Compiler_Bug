{"sha": "be7a31fbd64943f71afe11b0413c99496526dddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlN2EzMWZiZDY0OTQzZjcxYWZlMTFiMDQxM2M5OTQ5NjUyNmRkZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-13T17:20:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-13T17:20:16Z"}, "message": "Merge #7999\n\n7999: Handle `cfg_attr` gating multiple attributes r=jonas-schievink a=jonas-schievink\n\nApparently `#[cfg_attr(cfg_expr, attr1, attr2)]` is valid, so let's add support for that.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "746e40311f1fc9f351a088ec92434139c5207354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746e40311f1fc9f351a088ec92434139c5207354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be7a31fbd64943f71afe11b0413c99496526dddc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTPRQCRBK7hj4Ov3rIwAAdHIIAAOFBftAXf+3qEe3vrpDgI80\nA4b/NV404xnnnFOVlrALeuIzUSjY5JPe5SXdSXG4tF2LaO+9lciwKKtCWe+KbBP4\n9zyP6JhYl+1xDx0PoiNY9rfbWz8VcnHzhc+LcWKQmX/oLpZx+ICaMUCec4V4WtuN\nNzSlzazK3nOsAYs7zXjTescryUKUmAOIG+mecNG4XG+dG6FeTYA/kixI10Vruuyj\nUtGfvCcIyNp6hUl4HQc+YkX8oygR4LPbvX34dJocijEHO88YuEFxSBzvp1AHDRgs\nm0Wv58BxBSdRcBQ+s0ko2udjPTyNoRiMIIrIgX6wW/ITx0wstEKfCiYZhYEhTkU=\n=QS0n\n-----END PGP SIGNATURE-----\n", "payload": "tree 746e40311f1fc9f351a088ec92434139c5207354\nparent 6ab405f2e9861c34ab9e1ad86af6604523745cef\nparent 1848bd0fa093a9fa00b0de98201abcfd574349f9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615656016 +0000\ncommitter GitHub <noreply@github.com> 1615656016 +0000\n\nMerge #7999\n\n7999: Handle `cfg_attr` gating multiple attributes r=jonas-schievink a=jonas-schievink\n\nApparently `#[cfg_attr(cfg_expr, attr1, attr2)]` is valid, so let's add support for that.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be7a31fbd64943f71afe11b0413c99496526dddc", "html_url": "https://github.com/rust-lang/rust/commit/be7a31fbd64943f71afe11b0413c99496526dddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be7a31fbd64943f71afe11b0413c99496526dddc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ab405f2e9861c34ab9e1ad86af6604523745cef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ab405f2e9861c34ab9e1ad86af6604523745cef", "html_url": "https://github.com/rust-lang/rust/commit/6ab405f2e9861c34ab9e1ad86af6604523745cef"}, {"sha": "1848bd0fa093a9fa00b0de98201abcfd574349f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1848bd0fa093a9fa00b0de98201abcfd574349f9", "html_url": "https://github.com/rust-lang/rust/commit/1848bd0fa093a9fa00b0de98201abcfd574349f9"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "7b41b148c8b140a152a875ecef1828ed23bed1ae", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/be7a31fbd64943f71afe11b0413c99496526dddc/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be7a31fbd64943f71afe11b0413c99496526dddc/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=be7a31fbd64943f71afe11b0413c99496526dddc", "patch": "@@ -9,6 +9,7 @@ use hir_expand::{hygiene::Hygiene, name::AsName, AstId, InFile};\n use itertools::Itertools;\n use la_arena::ArenaMap;\n use mbe::ast_to_token_tree;\n+use smallvec::{smallvec, SmallVec};\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n     match_ast, AstToken, SmolStr, SyntaxNode,\n@@ -134,53 +135,42 @@ impl RawAttrs {\n         let crate_graph = db.crate_graph();\n         let new_attrs = self\n             .iter()\n-            .filter_map(|attr| {\n+            .flat_map(|attr| -> SmallVec<[_; 1]> {\n                 let attr = attr.clone();\n                 let is_cfg_attr =\n                     attr.path.as_ident().map_or(false, |name| *name == hir_expand::name![cfg_attr]);\n                 if !is_cfg_attr {\n-                    return Some(attr);\n+                    return smallvec![attr];\n                 }\n \n                 let subtree = match &attr.input {\n                     Some(AttrInput::TokenTree(it)) => it,\n-                    _ => return Some(attr),\n+                    _ => return smallvec![attr],\n                 };\n \n-                // Input subtree is: `(cfg, attr)`\n-                // Split it up into a `cfg` and an `attr` subtree.\n+                // Input subtree is: `(cfg, $(attr),+)`\n+                // Split it up into a `cfg` subtree and the `attr` subtrees.\n                 // FIXME: There should be a common API for this.\n-                let mut saw_comma = false;\n-                let (mut cfg, attr): (Vec<_>, Vec<_>) =\n-                    subtree.clone().token_trees.into_iter().partition(|tree| {\n-                        if saw_comma {\n-                            return false;\n-                        }\n-\n-                        match tree {\n-                            tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ',' => {\n-                                saw_comma = true;\n-                            }\n-                            _ => {}\n-                        }\n-\n-                        true\n-                    });\n-                cfg.pop(); // `,` ends up in here\n-\n-                let attr = Subtree { delimiter: None, token_trees: attr };\n-                let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg };\n+                let mut parts = subtree.token_trees.split(\n+                    |tt| matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ','),\n+                );\n+                let cfg = parts.next().unwrap();\n+                let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg.to_vec() };\n                 let cfg = CfgExpr::parse(&cfg);\n+                let attrs = parts.filter(|a| !a.is_empty()).filter_map(|attr| {\n+                    let tree = Subtree { delimiter: None, token_trees: attr.to_vec() };\n+                    let attr = ast::Attr::parse(&format!(\"#[{}]\", tree)).ok()?;\n+                    let hygiene = Hygiene::new_unhygienic(); // FIXME\n+                    Attr::from_src(attr, &hygiene)\n+                });\n \n                 let cfg_options = &crate_graph[krate].cfg_options;\n                 if cfg_options.check(&cfg) == Some(false) {\n-                    None\n+                    smallvec![]\n                 } else {\n                     cov_mark::hit!(cfg_attr_active);\n \n-                    let attr = ast::Attr::parse(&format!(\"#[{}]\", attr)).ok()?;\n-                    let hygiene = Hygiene::new_unhygienic(); // FIXME\n-                    Attr::from_src(attr, &hygiene)\n+                    attrs.collect()\n                 }\n             })\n             .collect();"}, {"sha": "1b8e885b05ea39d7368a2462d399c7c172fd611b", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be7a31fbd64943f71afe11b0413c99496526dddc/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be7a31fbd64943f71afe11b0413c99496526dddc/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=be7a31fbd64943f71afe11b0413c99496526dddc", "patch": "@@ -149,6 +149,9 @@ fn inactive_via_cfg_attr() {\n           #[cfg_attr(not(never), cfg(not(no)))] fn f() {}\n \n           #[cfg_attr(never, cfg(no))] fn g() {}\n+\n+          #[cfg_attr(not(never), inline, cfg(no))] fn h() {}\n+        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n         \"#,\n     );\n }"}]}