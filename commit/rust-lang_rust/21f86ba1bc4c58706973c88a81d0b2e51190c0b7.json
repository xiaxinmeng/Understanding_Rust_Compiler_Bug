{"sha": "21f86ba1bc4c58706973c88a81d0b2e51190c0b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZjg2YmExYmM0YzU4NzA2OTczYzg4YTgxZDBiMmU1MTE5MGMwYjc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-04T03:54:22Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-04T18:38:11Z"}, "message": "Simplify handling of dropping structs.", "tree": {"sha": "46112a7da2de36fbcad7ba33ab3198a058a0b2fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46112a7da2de36fbcad7ba33ab3198a058a0b2fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f86ba1bc4c58706973c88a81d0b2e51190c0b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f86ba1bc4c58706973c88a81d0b2e51190c0b7", "html_url": "https://github.com/rust-lang/rust/commit/21f86ba1bc4c58706973c88a81d0b2e51190c0b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f86ba1bc4c58706973c88a81d0b2e51190c0b7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dadd14d6c671ca5c159acb635f62dbc909e7cc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dadd14d6c671ca5c159acb635f62dbc909e7cc4", "html_url": "https://github.com/rust-lang/rust/commit/7dadd14d6c671ca5c159acb635f62dbc909e7cc4"}], "stats": {"total": 77, "additions": 11, "deletions": 66}, "files": [{"sha": "13163518f941ec710875127a62f3a94b3fca34e7", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/21f86ba1bc4c58706973c88a81d0b2e51190c0b7/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f86ba1bc4c58706973c88a81d0b2e51190c0b7/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=21f86ba1bc4c58706973c88a81d0b2e51190c0b7", "patch": "@@ -15,7 +15,6 @@\n use llvm;\n use llvm::{ValueRef, ContextRef, TypeKind};\n use llvm::{True, False, Bool, OperandBundleDef};\n-use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n use rustc::util::common::MemoizationMap;\n@@ -38,7 +37,7 @@ use std::borrow::Cow;\n use std::iter;\n \n use syntax::ast;\n-use syntax::symbol::{Symbol, InternedString};\n+use syntax::symbol::InternedString;\n use syntax_pos::Span;\n \n use rustc_i128::u128;\n@@ -169,55 +168,6 @@ pub fn type_is_zero_size<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -\n *\n */\n \n-use Disr;\n-\n-/// The concrete version of ty::FieldDef. The name is the field index if\n-/// the field is numeric.\n-pub struct Field<'tcx>(pub ast::Name, pub Ty<'tcx>);\n-\n-/// The concrete version of ty::VariantDef\n-pub struct VariantInfo<'tcx> {\n-    pub discr: Disr,\n-    pub fields: Vec<Field<'tcx>>\n-}\n-\n-impl<'a, 'tcx> VariantInfo<'tcx> {\n-    pub fn from_ty(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                   ty: Ty<'tcx>,\n-                   opt_def: Option<Def>)\n-                   -> Self\n-    {\n-        match ty.sty {\n-            ty::TyAdt(adt, substs) => {\n-                let variant = match opt_def {\n-                    None => adt.struct_variant(),\n-                    Some(def) => adt.variant_of_def(def)\n-                };\n-\n-                VariantInfo {\n-                    discr: Disr::from(variant.disr_val),\n-                    fields: variant.fields.iter().map(|f| {\n-                        Field(f.name, monomorphize::field_ty(tcx, substs, f))\n-                    }).collect()\n-                }\n-            }\n-\n-            ty::TyTuple(ref v) => {\n-                VariantInfo {\n-                    discr: Disr(0),\n-                    fields: v.iter().enumerate().map(|(i, &t)| {\n-                        Field(Symbol::intern(&i.to_string()), t)\n-                    }).collect()\n-                }\n-            }\n-\n-            _ => {\n-                bug!(\"cannot get field types from the type {:?}\", ty);\n-            }\n-        }\n-    }\n-}\n-\n /// A structure representing an active landing pad for the duration of a basic\n /// block.\n ///"}, {"sha": "4fe07c9b86abfa738fcd01b53b5a3c2f2a9cb3b5", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/21f86ba1bc4c58706973c88a81d0b2e51190c0b7/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f86ba1bc4c58706973c88a81d0b2e51190c0b7/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=21f86ba1bc4c58706973c88a81d0b2e51190c0b7", "patch": "@@ -13,6 +13,7 @@\n // Code relating to drop glue.\n \n use std;\n+use std::ptr;\n use std::iter;\n \n use llvm;\n@@ -444,21 +445,15 @@ fn drop_structural_ty<'a, 'tcx>(\n         }\n         ty::TyAdt(adt, substs) => match adt.adt_kind() {\n             AdtKind::Struct => {\n-                let VariantInfo { fields, discr } = VariantInfo::from_ty(cx.tcx(), t, None);\n-                for (i, &Field(_, field_ty)) in fields.iter().enumerate() {\n-                    let mut ptr = ptr.clone();\n-                    ptr.ty = LvalueTy::Downcast {\n-                        adt_def: adt,\n-                        substs: substs,\n-                        variant_index: Disr::from(discr).0 as usize,\n-                    };\n-                    let llfld_a = ptr.trans_field_ptr(&cx, i);\n-                    let ptr = if cx.ccx.shared().type_is_sized(field_ty) {\n-                        LvalueRef::new_sized_ty(llfld_a, field_ty)\n-                    } else {\n-                        LvalueRef::new_unsized_ty(llfld_a, ptr.llextra, field_ty)\n-                    };\n-                    drop_ty(&cx, ptr);\n+                for (i, field) in adt.variants[0].fields.iter().enumerate() {\n+                    let field_ty = monomorphize::field_ty(cx.tcx(), substs, field);\n+                    let mut field_ptr = ptr.clone();\n+                    field_ptr.llval = ptr.trans_field_ptr(&cx, i);\n+                    field_ptr.ty = LvalueTy::from_ty(field_ty);\n+                    if cx.ccx.shared().type_is_sized(field_ty) {\n+                        field_ptr.llextra = ptr::null_mut();\n+                    }\n+                    drop_ty(&cx, field_ptr);\n                 }\n             }\n             AdtKind::Union => {"}]}