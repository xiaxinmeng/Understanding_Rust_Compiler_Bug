{"sha": "476c6c27e751ced05f5c279770ff8f6a114fe8eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NmM2YzI3ZTc1MWNlZDA1ZjVjMjc5NzcwZmY4ZjZhMTE0ZmU4ZWI=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-02-24T04:19:15Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-02-24T04:19:15Z"}, "message": "Update outdated comment in unix Command.", "tree": {"sha": "6eb168746fb40b3c37254999761a3b4e1af07e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb168746fb40b3c37254999761a3b4e1af07e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/476c6c27e751ced05f5c279770ff8f6a114fe8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/476c6c27e751ced05f5c279770ff8f6a114fe8eb", "html_url": "https://github.com/rust-lang/rust/commit/476c6c27e751ced05f5c279770ff8f6a114fe8eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/476c6c27e751ced05f5c279770ff8f6a114fe8eb/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1bf8e05c39bdcc73fc09e246b7209444e389bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1bf8e05c39bdcc73fc09e246b7209444e389bc", "html_url": "https://github.com/rust-lang/rust/commit/fe1bf8e05c39bdcc73fc09e246b7209444e389bc"}], "stats": {"total": 24, "additions": 7, "deletions": 17}, "files": [{"sha": "88a27f27f6628e866cf620e7da76a440af0defc9", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476c6c27e751ced05f5c279770ff8f6a114fe8eb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c6c27e751ced05f5c279770ff8f6a114fe8eb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=476c6c27e751ced05f5c279770ff8f6a114fe8eb", "patch": "@@ -172,6 +172,8 @@ impl CommandExt for process::Command {\n     }\n \n     fn exec(&mut self) -> io::Error {\n+        // NOTE: This may *not* be safe to call after `libc::fork`, because it\n+        // may allocate. That may be worth fixing at some point in the future.\n         self.as_inner_mut().exec(sys::process::Stdio::Inherit)\n     }\n "}, {"sha": "b9dcc4e4b9e381c13b078e55781c1a7f8946a573", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/476c6c27e751ced05f5c279770ff8f6a114fe8eb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476c6c27e751ced05f5c279770ff8f6a114fe8eb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=476c6c27e751ced05f5c279770ff8f6a114fe8eb", "patch": "@@ -60,25 +60,13 @@ cfg_if::cfg_if! {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct Command {\n-    // Currently we try hard to ensure that the call to `.exec()` doesn't\n-    // actually allocate any memory. While many platforms try to ensure that\n-    // memory allocation works after a fork in a multithreaded process, it's\n-    // been observed to be buggy and somewhat unreliable, so we do our best to\n-    // just not do it at all!\n-    //\n-    // Along those lines, the `argv` and `envp` raw pointers here are exactly\n-    // what's gonna get passed to `execvp`. The `argv` array starts with the\n-    // `program` and ends with a NULL, and the `envp` pointer, if present, is\n-    // also null-terminated.\n-    //\n-    // Right now we don't support removing arguments, so there's no much fancy\n-    // support there, but we support adding and removing environment variables,\n-    // so a side table is used to track where in the `envp` array each key is\n-    // located. Whenever we add a key we update it in place if it's already\n-    // present, and whenever we remove a key we update the locations of all\n-    // other keys.\n     program: CString,\n     args: Vec<CString>,\n+    /// Exactly what will be passed to `execvp`.\n+    ///\n+    /// First element is a pointer to `program`, followed by pointers to\n+    /// `args`, followed by a `null`. Be careful when modifying `program` or\n+    /// `args` to properly update this as well.\n     argv: Argv,\n     env: CommandEnv,\n "}]}