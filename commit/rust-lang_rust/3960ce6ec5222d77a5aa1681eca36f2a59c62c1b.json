{"sha": "3960ce6ec5222d77a5aa1681eca36f2a59c62c1b", "node_id": "C_kwDOAAsO6NoAKDM5NjBjZTZlYzUyMjJkNzdhNWFhMTY4MWVjYTM2ZjJhNTljNjJjMWI", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-02-13T12:19:18Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-02-14T22:16:35Z"}, "message": "Make [u8]::cmp implementation branchless", "tree": {"sha": "9423ab7d61cb74a41d77f6aac466fcc80eedafe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9423ab7d61cb74a41d77f6aac466fcc80eedafe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3960ce6ec5222d77a5aa1681eca36f2a59c62c1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmIK1OkACgkQcE4BSbAZ\nSzw+bw//esFXFmAjsCGU0/e7r3iA2+NnnMUIqektxlGkdDLsV09/eveeXLDDnqKU\nq2B2ztgouYVlLDcTqL6XGC56pk3+F9ANelS9CfUsdJ6I06Rp35/auDywBZpGrfH7\n+JbVim8UNdUWB6xHf0pfCXUZ/8CQRUkv2+uKqe4Q2Bhiz8bWBkdsIM9bMlx6fzT/\nVRq3hswFhKf3tYpdhXB3WADKBE2XblnrQ1VCeTedRyz75UdMS+1q6IIpILPGBgWX\nUn6AOeQP0KRZtrqJ7+5TaEtbcccEkJWtjqKiX1M6KLFMWSBXcCddxCeH1bs7pwDK\n128LS+mUDV6mwXnNzJkyzIlcWOeHDWvMVlYn5mmZTmPANrQ4IPuA4mF51RJtrOZ6\nKY0w0nIDsUpufHDsgZKOQ4TCqdikexPqvAyBlzhOqTMtC3Df9p4cKDMxbvSmmplJ\n/7Y8H9c6rawJEhlS0jl9+Y/O5FzoBmuNpLiPcigwn5OibWDy7VpL1qhhYLyoNKCf\nAjhtNe/2kmXFAnayZKlm1UGAXaRWCA/CeK5xZ7GxPZ027Osq/MCmIPrAI7O1lJlm\nY9FObpWlRg+Y2DgPeozWnJ+gYzT5HKDez3vDgQKivn7DLyPP44vLOaMRMvyvpR2N\nNgDNy+V67bUTkV9PsHfIX2wTvpJKT1SzmHqdXqerjTX48ODpEYE=\n=WK2p\n-----END PGP SIGNATURE-----", "payload": "tree 9423ab7d61cb74a41d77f6aac466fcc80eedafe2\nparent 9a60099cc43c8a07abb280be323d1ed9afc27f2c\nauthor joboet <jonasboettiger@icloud.com> 1644754758 +0100\ncommitter joboet <jonasboettiger@icloud.com> 1644876995 +0100\n\nMake [u8]::cmp implementation branchless\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3960ce6ec5222d77a5aa1681eca36f2a59c62c1b", "html_url": "https://github.com/rust-lang/rust/commit/3960ce6ec5222d77a5aa1681eca36f2a59c62c1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3960ce6ec5222d77a5aa1681eca36f2a59c62c1b/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a60099cc43c8a07abb280be323d1ed9afc27f2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a60099cc43c8a07abb280be323d1ed9afc27f2c", "html_url": "https://github.com/rust-lang/rust/commit/9a60099cc43c8a07abb280be323d1ed9afc27f2c"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "27c6b6f5bc02f474a8954a54c53de4f7f6347ed9", "filename": "library/core/src/slice/cmp.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3960ce6ec5222d77a5aa1681eca36f2a59c62c1b/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3960ce6ec5222d77a5aa1681eca36f2a59c62c1b/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs?ref=3960ce6ec5222d77a5aa1681eca36f2a59c62c1b", "patch": "@@ -1,7 +1,6 @@\n //! Comparison traits for `[T]`.\n \n-use crate::cmp;\n-use crate::cmp::Ordering::{self, Greater, Less};\n+use crate::cmp::{self, Ordering};\n use crate::mem;\n \n use super::from_raw_parts;\n@@ -189,18 +188,18 @@ impl<A: Ord> SliceOrd for A {\n impl SliceOrd for u8 {\n     #[inline]\n     fn compare(left: &[Self], right: &[Self]) -> Ordering {\n-        let order =\n-            // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.\n-            // We use the minimum of both lengths which guarantees that both regions are\n-            // valid for reads in that interval.\n-            unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };\n+        // Since the length of a slice is always less than or equal to isize::MAX, this never underflows.\n+        let diff = left.len() as isize - right.len() as isize;\n+        // This comparison gets optimized away (on x86_64 and ARM) because the subtraction updates flags.\n+        let len = if left.len() < right.len() { left.len() } else { right.len() };\n+        // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.\n+        // We use the minimum of both lengths which guarantees that both regions are\n+        // valid for reads in that interval.\n+        let mut order = unsafe { memcmp(left.as_ptr(), right.as_ptr(), len) as isize };\n         if order == 0 {\n-            left.len().cmp(&right.len())\n-        } else if order < 0 {\n-            Less\n-        } else {\n-            Greater\n+            order = diff;\n         }\n+        order.cmp(&0)\n     }\n }\n "}]}