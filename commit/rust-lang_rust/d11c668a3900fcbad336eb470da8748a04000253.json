{"sha": "d11c668a3900fcbad336eb470da8748a04000253", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMWM2NjhhMzkwMGZjYmFkMzM2ZWI0NzBkYTg3NDhhMDQwMDAyNTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-16T06:39:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-16T06:39:06Z"}, "message": "no longer run rustc on the tests; instead make sure we actually deny all warnings\n\nAlso fix the fallout from that", "tree": {"sha": "072fa1f41f87a9ceb6ef517f51a82047d7b23bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072fa1f41f87a9ceb6ef517f51a82047d7b23bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d11c668a3900fcbad336eb470da8748a04000253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d11c668a3900fcbad336eb470da8748a04000253", "html_url": "https://github.com/rust-lang/rust/commit/d11c668a3900fcbad336eb470da8748a04000253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d11c668a3900fcbad336eb470da8748a04000253/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5be8bd987de6cf72d858b21bdc62fe4125b2890d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be8bd987de6cf72d858b21bdc62fe4125b2890d", "html_url": "https://github.com/rust-lang/rust/commit/5be8bd987de6cf72d858b21bdc62fe4125b2890d"}], "stats": {"total": 34, "additions": 6, "deletions": 28}, "files": [{"sha": "489b7bebcdc8f7fb24f30d526e332e03844ebd34", "filename": "tests/compile-fail-fullmir/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d11c668a3900fcbad336eb470da8748a04000253/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11c668a3900fcbad336eb470da8748a04000253/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs?ref=d11c668a3900fcbad336eb470da8748a04000253", "patch": "@@ -10,6 +10,6 @@ use std::alloc::*;\n fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _y = Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1).unwrap();\n+        Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1).unwrap();\n     }\n }"}, {"sha": "c73f86bc1721ce6fb00922785062faa3900caac0", "filename": "tests/compile-fail-fullmir/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d11c668a3900fcbad336eb470da8748a04000253/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11c668a3900fcbad336eb470da8748a04000253/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs?ref=d11c668a3900fcbad336eb470da8748a04000253", "patch": "@@ -8,7 +8,7 @@ use std::alloc::*;\n fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n+        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n         let _z = *(x.as_ptr() as *mut u8); //~ ERROR constant evaluation error\n         //~^ NOTE dangling pointer was dereferenced\n     }"}, {"sha": "38d8069672814d583380cd40e42d6298c90604ac", "filename": "tests/compiletest.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d11c668a3900fcbad336eb470da8748a04000253/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11c668a3900fcbad336eb470da8748a04000253/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=d11c668a3900fcbad336eb470da8748a04000253", "patch": "@@ -62,6 +62,7 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n         config.compile_lib_path = rustc_lib_path();\n     }\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     config.src_base = PathBuf::from(path.to_string());\n     flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     config.target_rustcflags = Some(flags.join(\" \"));\n@@ -70,23 +71,6 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n     compiletest::run_tests(&config);\n }\n \n-fn rustc_pass(sysroot: &Path, path: &str) {\n-    eprintln!(\"{}\", format!(\"## Running run-pass tests in {} against rustc\", path).green().bold());\n-    let mut config = compiletest::Config::default().tempdir();\n-    config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n-    config.src_base = PathBuf::from(path);\n-    if let Some(rustc_path) = rustc_test_suite() {\n-        config.rustc_path = rustc_path;\n-        config.run_lib_path = rustc_lib_path();\n-        config.compile_lib_path = rustc_lib_path();\n-        config.target_rustcflags = Some(format!(\"-Dwarnings --sysroot {}\", sysroot.display()));\n-    } else {\n-        config.target_rustcflags = Some(\"-Dwarnings\".to_owned());\n-    }\n-    config.host_rustcflags = Some(\"-Dwarnings\".to_string());\n-    compiletest::run_tests(&config);\n-}\n-\n fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n     if need_fullmir && !have_fullmir() {\n         eprintln!(\"{}\", format!(\n@@ -116,6 +100,7 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n     }\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     if have_fullmir() {\n         flags.push(\"-Zmiri-start-fn\".to_owned());\n     }\n@@ -190,12 +175,6 @@ fn run_pass_miri(opt: bool) {\n     miri_pass(&sysroot, \"tests/run-pass-fullmir\", &host, &host, true, opt);\n }\n \n-fn run_pass_rustc() {\n-    let sysroot = get_sysroot();\n-    rustc_pass(&sysroot, \"tests/run-pass\");\n-    rustc_pass(&sysroot, \"tests/run-pass-fullmir\");\n-}\n-\n fn compile_fail_miri() {\n     let sysroot = get_sysroot();\n     let host = get_host();\n@@ -211,10 +190,7 @@ fn test() {\n     // introduces.  We still get parallelism within our tests because `compiletest`\n     // uses `libtest` which runs jobs in parallel.\n \n-    run_pass_rustc();\n-\n     run_pass_miri(false);\n-\n     // FIXME: Disabled for now, as the optimizer is pretty broken and crashes...\n     // See https://github.com/rust-lang/rust/issues/50411\n     //run_pass_miri(true);"}, {"sha": "7fe568522d53e397ee3a0663e0e47460fa24bdfc", "filename": "tests/run-pass/box_box_trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d11c668a3900fcbad336eb470da8748a04000253/tests%2Frun-pass%2Fbox_box_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11c668a3900fcbad336eb470da8748a04000253/tests%2Frun-pass%2Fbox_box_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbox_box_trait.rs?ref=d11c668a3900fcbad336eb470da8748a04000253", "patch": "@@ -13,7 +13,9 @@ impl Drop for DroppableStruct {\n trait MyTrait { fn dummy(&self) { } }\n impl MyTrait for Box<DroppableStruct> {}\n \n+#[allow(dead_code)]\n struct Whatever { w: Box<MyTrait+'static> }\n+\n impl  Whatever {\n     fn new(w: Box<MyTrait+'static>) -> Whatever {\n         Whatever { w: w }"}]}