{"sha": "7cfce50b24cecaa04fae94cbc06ef97a0a9f3958", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZmNlNTBiMjRjZWNhYTA0ZmFlOTRjYmMwNmVmOTdhMGE5ZjM5NTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-08T05:17:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-01-08T05:24:48Z"}, "message": "Address some minor points in the pointer guide\n\ncc #11364.", "tree": {"sha": "49d99af9068f6e72dfac54fef4c71a6f5d586c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49d99af9068f6e72dfac54fef4c71a6f5d586c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cfce50b24cecaa04fae94cbc06ef97a0a9f3958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cfce50b24cecaa04fae94cbc06ef97a0a9f3958", "html_url": "https://github.com/rust-lang/rust/commit/7cfce50b24cecaa04fae94cbc06ef97a0a9f3958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cfce50b24cecaa04fae94cbc06ef97a0a9f3958/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8dd6afd4ef36742b4e8a4e848e13ddbe275fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8dd6afd4ef36742b4e8a4e848e13ddbe275fe8", "html_url": "https://github.com/rust-lang/rust/commit/2d8dd6afd4ef36742b4e8a4e848e13ddbe275fe8"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "49e5b3c999467a456a679b65bdd44213548afca1", "filename": "doc/guide-pointers.md", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7cfce50b24cecaa04fae94cbc06ef97a0a9f3958/doc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/7cfce50b24cecaa04fae94cbc06ef97a0a9f3958/doc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-pointers.md?ref=7cfce50b24cecaa04fae94cbc06ef97a0a9f3958", "patch": "@@ -3,7 +3,7 @@\n Rust's pointers are one of its more unique and compelling features. Pointers\n are also one of the more confusing topics for newcomers to Rust. They can also\n be confusing for people coming from other languages that support pointers, such\n-as C++. This tutorial will help you understand this important topic.\n+as C++. This guide will help you understand this important topic.\n \n # You don't actually need pointers\n \n@@ -13,8 +13,7 @@ that emphasizes safety. Pointers, as the joke goes, are very pointy: it's easy\n to accidentally stab yourself. Therefore, Rust is made in a way such that you\n don't need them very often.\n \n-\"But tutorial!\" you may cry. \"My co-worker wrote a function that looks like\n-this:\n+\"But guide!\" you may cry. \"My co-worker wrote a function that looks like this:\n \n ~~~rust\n fn succ(x: &int) -> int { *x + 1 }\n@@ -250,6 +249,12 @@ struct.\n \n # Managed Pointers\n \n+> **Note**: the `@` form of managed pointers is deprecated and behind a\n+> feature gate (it requires a `#[feature(managed_pointers)];` attribute on\n+> the crate root; remember the semicolon!). There are replacements, currently \n+> there is `std::rc::Rc` and `std::gc::Gc` for shared ownership via reference\n+> counting and garbage collection respectively.\n+\n Managed pointers, notated by an `@`, are used when having a single owner for\n some data isn't convenient or possible. This generally happens when your\n program is very large and complicated.\n@@ -375,12 +380,12 @@ duration a 'lifetime'. Let's try a more complex example:\n ~~~rust\n fn main() {\n     let mut x = ~5;\n-    if(*x < 10) {\n+    if *x < 10 {\n         let y = &x;\n         println!(\"Oh no: {:?}\", y);\n         return;\n     }\n-    *x = *x - 1;\n+    *x -= 1;\n     println!(\"Oh no: {:?}\", x);\n }\n ~~~\n@@ -392,14 +397,14 @@ mutated, and therefore, lets us pass. This wouldn't work:\n ~~~rust {.xfail-test}\n fn main() {\n     let mut x = ~5;\n-    if(*x < 10) {\n+    if *x < 10 {\n         let y = &x;\n-        *x = *x - 1;\n+        *x -= 1;\n \n         println!(\"Oh no: {:?}\", y);\n         return;\n     }\n-    *x = *x - 1;\n+    *x -= 1;\n     println!(\"Oh no: {:?}\", x);\n }\n ~~~\n@@ -408,7 +413,7 @@ It gives this error:\n \n ~~~ {.notrust}\n test.rs:5:8: 5:10 error: cannot assign to `*x` because it is borrowed\n-test.rs:5         *x = *x - 1;\n+test.rs:5         *x -= 1;\n                   ^~\n test.rs:4:16: 4:18 note: borrow of `*x` occurs here\n test.rs:4         let y = &x;\n@@ -469,8 +474,9 @@ fn main() {\n You may think that this gives us terrible performance: return a value and then\n immediately box it up?!?! Isn't that the worst of both worlds? Rust is smarter\n than that. There is no copy in this code. `main` allocates enough room for the\n-`@int`, passes it into `foo` as `x`, and then `foo` writes the value into the\n-new box. This writes the return value directly into the allocated box.\n+`@int`, passes a pointer to that memory into `foo` as `x`, and then `foo` writes \n+the value straight into that pointer. This writes the return value directly into\n+the allocated box.\n \n This is important enough that it bears repeating: pointers are not for optimizing\n returning values from your code. Allow the caller to choose how they want to\n@@ -479,4 +485,4 @@ use your output.\n \n # Related Resources\n \n-* [Lifetimes tutorial](tutorial-lifetimes.html)\n+* [Lifetimes guide](guide-lifetimes.html)"}]}