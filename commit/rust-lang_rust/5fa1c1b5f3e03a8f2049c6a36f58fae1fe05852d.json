{"sha": "5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTFjMWI1ZjNlMDNhOGYyMDQ5YzZhMzZmNThmYWUxZmUwNTg1MmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-04T14:04:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-07T08:21:57Z"}, "message": "Fix spans for binary operator expression with interpolated identifiers", "tree": {"sha": "ce6a673749a2eba6d0605dc1ed7410ee85fdd6ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce6a673749a2eba6d0605dc1ed7410ee85fdd6ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d", "html_url": "https://github.com/rust-lang/rust/commit/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24fc541e7cee966ad8752eb8360f0d4e9ba0bef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/24fc541e7cee966ad8752eb8360f0d4e9ba0bef0", "html_url": "https://github.com/rust-lang/rust/commit/24fc541e7cee966ad8752eb8360f0d4e9ba0bef0"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "f35ecbe20e016b7b12f577ebfe6b85e3a032697d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d", "patch": "@@ -150,13 +150,14 @@ fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)\n     lhs\n }\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n enum PrevTokenKind {\n     DocComment,\n     Comma,\n     Plus,\n     Interpolated,\n     Eof,\n+    Ident,\n     Other,\n }\n \n@@ -1040,6 +1041,7 @@ impl<'a> Parser<'a> {\n             token::BinOp(token::Plus) => PrevTokenKind::Plus,\n             token::Interpolated(..) => PrevTokenKind::Interpolated,\n             token::Eof => PrevTokenKind::Eof,\n+            token::Ident(..) => PrevTokenKind::Ident,\n             _ => PrevTokenKind::Other,\n         };\n \n@@ -2777,10 +2779,15 @@ impl<'a> Parser<'a> {\n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = AssocOp::from_token(&self.token) {\n \n-            let lhs_span = if self.prev_token_kind == PrevTokenKind::Interpolated {\n-                self.prev_span\n-            } else {\n-                lhs.span\n+            // Adjust the span for interpolated LHS to point to the `$lhs` token and not to what\n+            // it refers to. Interpolated identifiers are unwrapped early and never show up here\n+            // as `PrevTokenKind::Interpolated` so if LHS is a single identifier we always process\n+            // it as \"interpolated\", it doesn't change the answer for non-interpolated idents.\n+            let lhs_span = match (self.prev_token_kind, &lhs.node) {\n+                (PrevTokenKind::Interpolated, _) => self.prev_span,\n+                (PrevTokenKind::Ident, &ExprKind::Path(None, ref path))\n+                    if path.segments.len() == 1 => self.prev_span,\n+                _ => lhs.span,\n             };\n \n             let cur_op_span = self.span;"}, {"sha": "ee0367b8a6846e66263d4d26e75db292f97e29de", "filename": "src/test/ui/issue-42954.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d/src%2Ftest%2Fui%2Fissue-42954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d/src%2Ftest%2Fui%2Fissue-42954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.rs?ref=5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! is_plainly_printable {\n+    ($i: ident) => {\n+      $i as u32 < 0\n+    };\n+}\n+\n+fn main() {\n+    let c = 'a';\n+    is_plainly_printable!(c);\n+}"}, {"sha": "0ac3d82c719a8967e4643c01fe2b24c55733f030", "filename": "src/test/ui/issue-42954.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d/src%2Ftest%2Fui%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d/src%2Ftest%2Fui%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.stderr?ref=5fa1c1b5f3e03a8f2049c6a36f58fae1fe05852d", "patch": "@@ -0,0 +1,13 @@\n+error: `<` is interpreted as a start of generic arguments for `u32`, not a comparison\n+  --> $DIR/issue-42954.rs:13:19\n+   |\n+13 |       $i as u32 < 0\n+   |                 - ^ interpreted as generic argument\n+   |                 |\n+   |                 not interpreted as comparison\n+   |\n+help: if you want to compare the casted value then write:\n+   |       ($i as u32) < 0\n+\n+error: aborting due to previous error\n+"}]}