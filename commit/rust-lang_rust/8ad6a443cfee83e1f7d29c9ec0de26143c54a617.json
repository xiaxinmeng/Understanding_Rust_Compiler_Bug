{"sha": "8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZDZhNDQzY2ZlZTgzZTFmN2QyOWM5ZWMwZGUyNjE0M2M1NGE2MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-04T17:48:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-04T17:48:41Z"}, "message": "Auto merge of #83855 - Dylan-DPC:rollup-oww62sh, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #73945 (Add an unstable --json=unused-externs flag to print unused externs)\n - #81619 (Implement `SourceIterator` and `InPlaceIterable` for `ResultShunt`)\n - #82726 (BTree: move blocks around in node.rs)\n - #83521 (2229: Fix diagnostic issue when using FakeReads in closures)\n - #83532 (Fix compiletest on FreeBSD)\n - #83793 (rustdoc: highlight macros more efficiently)\n - #83809 (Remove unneeded INITIAL_IDS const)\n - #83827 (cleanup leak after test to make miri happy)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bb122b499c5baa9399d1ca9f05995ea414035e06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb122b499c5baa9399d1ca9f05995ea414035e06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "html_url": "https://github.com/rust-lang/rust/commit/8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0ab79116ba3231f447bc7a67c16ce93ecca0a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0ab79116ba3231f447bc7a67c16ce93ecca0a3", "html_url": "https://github.com/rust-lang/rust/commit/5b0ab79116ba3231f447bc7a67c16ce93ecca0a3"}, {"sha": "b943ea8cdc677e4637ed25f0d4a2814b168aa97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b943ea8cdc677e4637ed25f0d4a2814b168aa97d", "html_url": "https://github.com/rust-lang/rust/commit/b943ea8cdc677e4637ed25f0d4a2814b168aa97d"}], "stats": {"total": 889, "additions": 577, "deletions": 312}, "files": [{"sha": "a58caf2667b063422046e32ebdf2ed020ce5f1eb", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -195,6 +195,9 @@ pub trait Emitter {\n \n     fn emit_future_breakage_report(&mut self, _diags: Vec<(FutureBreakage, Diagnostic)>) {}\n \n+    /// Emit list of unused externs\n+    fn emit_unused_externs(&mut self, _lint_level: &str, _unused_externs: &[&str]) {}\n+\n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {\n         true"}, {"sha": "40277006462d2b55cebe960d4ee8a6451311b6a6", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -159,6 +159,19 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n+    fn emit_unused_externs(&mut self, lint_level: &str, unused_externs: &[&str]) {\n+        let data = UnusedExterns { lint_level, unused_extern_names: unused_externs };\n+        let result = if self.pretty {\n+            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+        } else {\n+            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+        }\n+        .and_then(|_| self.dst.flush());\n+        if let Err(e) = result {\n+            panic!(\"failed to print unused externs: {:?}\", e);\n+        }\n+    }\n+\n     fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         Some(&self.sm)\n     }\n@@ -322,6 +335,18 @@ struct FutureIncompatReport {\n     future_incompat_report: Vec<FutureBreakageItem>,\n }\n \n+// NOTE: Keep this in sync with the equivalent structs in rustdoc's\n+// doctest component (as well as cargo).\n+// We could unify this struct the one in rustdoc but they have different\n+// ownership semantics, so doing so would create wasteful allocations.\n+#[derive(Encodable)]\n+struct UnusedExterns<'a, 'b, 'c> {\n+    /// The severity level of the unused dependencies lint\n+    lint_level: &'a str,\n+    /// List of unused externs by their names.\n+    unused_extern_names: &'b [&'c str],\n+}\n+\n impl Diagnostic {\n     fn from_errors_diagnostic(diag: &crate::Diagnostic, je: &JsonEmitter) -> Diagnostic {\n         let sugg = diag.suggestions.iter().map(|sugg| Diagnostic {"}, {"sha": "0d1f55a6b00eee194ff4eadb5936338ca86db0bc", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -765,6 +765,10 @@ impl Handler {\n         self.inner.borrow_mut().emitter.emit_future_breakage_report(diags)\n     }\n \n+    pub fn emit_unused_externs(&self, lint_level: &str, unused_externs: &[&str]) {\n+        self.inner.borrow_mut().emit_unused_externs(lint_level, unused_externs)\n+    }\n+\n     pub fn delay_as_bug(&self, diagnostic: Diagnostic) {\n         self.inner.borrow_mut().delay_as_bug(diagnostic)\n     }\n@@ -839,6 +843,10 @@ impl HandlerInner {\n         self.emitter.emit_artifact_notification(path, artifact_type);\n     }\n \n+    fn emit_unused_externs(&mut self, lint_level: &str, unused_externs: &[&str]) {\n+        self.emitter.emit_unused_externs(lint_level, unused_externs);\n+    }\n+\n     fn treat_err_as_bug(&self) -> bool {\n         self.flags.treat_err_as_bug.map_or(false, |c| self.err_count() >= c.get())\n     }"}, {"sha": "02e62a2cee951d62044871a00e208ab5901a75e4", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n+use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n@@ -831,6 +832,12 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                 });\n \n                 sess.time(\"looking_for_derive_registrar\", || proc_macro_decls::find(tcx));\n+\n+                let cstore = tcx\n+                    .cstore_as_any()\n+                    .downcast_ref::<CStore>()\n+                    .expect(\"`tcx.cstore` is not a `CStore`\");\n+                cstore.report_unused_deps(tcx);\n             },\n             {\n                 par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {"}, {"sha": "26db3a5f39d7c80e8ee0aa1b2960a13c5ecfc3b9", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -46,6 +46,9 @@ pub struct CStore {\n     /// This map is used to verify we get no hash conflicts between\n     /// `StableCrateId` values.\n     stable_crate_ids: FxHashMap<StableCrateId, CrateNum>,\n+\n+    /// Unused externs of the crate\n+    unused_externs: Vec<Symbol>,\n }\n \n pub struct CrateLoader<'a> {\n@@ -190,6 +193,27 @@ impl CStore {\n     crate fn has_global_allocator(&self) -> bool {\n         self.has_global_allocator\n     }\n+\n+    pub fn report_unused_deps(&self, tcx: TyCtxt<'_>) {\n+        // We put the check for the option before the lint_level_at_node call\n+        // because the call mutates internal state and introducing it\n+        // leads to some ui tests failing.\n+        if !tcx.sess.opts.json_unused_externs {\n+            return;\n+        }\n+        let level = tcx\n+            .lint_level_at_node(lint::builtin::UNUSED_CRATE_DEPENDENCIES, rustc_hir::CRATE_HIR_ID)\n+            .0;\n+        if level != lint::Level::Allow {\n+            let unused_externs =\n+                self.unused_externs.iter().map(|ident| ident.to_ident_string()).collect::<Vec<_>>();\n+            let unused_externs = unused_externs.iter().map(String::as_str).collect::<Vec<&str>>();\n+            tcx.sess\n+                .parse_sess\n+                .span_diagnostic\n+                .emit_unused_externs(level.as_str(), &unused_externs);\n+        }\n+    }\n }\n \n impl<'a> CrateLoader<'a> {\n@@ -217,6 +241,7 @@ impl<'a> CrateLoader<'a> {\n                 allocator_kind: None,\n                 has_global_allocator: false,\n                 stable_crate_ids,\n+                unused_externs: Vec::new(),\n             },\n             used_extern_options: Default::default(),\n         }\n@@ -904,11 +929,17 @@ impl<'a> CrateLoader<'a> {\n                 // Don't worry about pathless `--extern foo` sysroot references\n                 continue;\n             }\n-            if self.used_extern_options.contains(&Symbol::intern(name)) {\n+            let name_interned = Symbol::intern(name);\n+            if self.used_extern_options.contains(&name_interned) {\n                 continue;\n             }\n \n             // Got a real unused --extern\n+            if self.sess.opts.json_unused_externs {\n+                self.cstore.unused_externs.push(name_interned);\n+                continue;\n+            }\n+\n             let diag = match self.sess.opts.extern_dep_specs.get(name) {\n                 Some(loc) => BuiltinLintDiagnostics::ExternDepSpec(name.clone(), loc.into()),\n                 None => {\n@@ -941,9 +972,9 @@ impl<'a> CrateLoader<'a> {\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);\n \n-        info!(\"{:?}\", CrateDump(&self.cstore));\n-\n         self.report_unused_deps(krate);\n+\n+        info!(\"{:?}\", CrateDump(&self.cstore));\n     }\n \n     pub fn process_extern_crate("}, {"sha": "a7e9fc468b4fdfc0bfb50aee29205cb397dfd87e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -1482,7 +1482,7 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// Note that this also is emitted for regular `let` bindings to ensure that locals that are\n     /// never accessed still get some sanity checks for, e.g., `let x: ! = ..;`\n-    FakeRead(FakeReadCause, Box<Place<'tcx>>),\n+    FakeRead(Box<(FakeReadCause, Place<'tcx>)>),\n \n     /// Write the discriminant for a variant to the enum Place.\n     SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },\n@@ -1575,7 +1575,12 @@ pub enum FakeReadCause {\n \n     /// `let x: !; match x {}` doesn't generate any read of x so we need to\n     /// generate a read of x to check that it is initialized and safe.\n-    ForMatchedPlace,\n+    ///\n+    /// If a closure pattern matches a Place starting with an Upvar, then we introduce a\n+    /// FakeRead for that Place outside the closure, in such a case this option would be\n+    /// Some(closure_def_id).\n+    /// Otherwise, the value of the optional DefId will be None.\n+    ForMatchedPlace(Option<DefId>),\n \n     /// A fake read of the RefWithinGuard version of a bind-by-value variable\n     /// in a match guard to ensure that it's value hasn't change by the time\n@@ -1594,7 +1599,12 @@ pub enum FakeReadCause {\n     /// but in some cases it can affect the borrow checker, as in #53695.\n     /// Therefore, we insert a \"fake read\" here to ensure that we get\n     /// appropriate errors.\n-    ForLet,\n+    ///\n+    /// If a closure pattern matches a Place starting with an Upvar, then we introduce a\n+    /// FakeRead for that Place outside the closure, in such a case this option would be\n+    /// Some(closure_def_id).\n+    /// Otherwise, the value of the optional DefId will be None.\n+    ForLet(Option<DefId>),\n \n     /// If we have an index expression like\n     ///\n@@ -1618,7 +1628,9 @@ impl Debug for Statement<'_> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(box (ref place, ref rv)) => write!(fmt, \"{:?} = {:?}\", place, rv),\n-            FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n+            FakeRead(box (ref cause, ref place)) => {\n+                write!(fmt, \"FakeRead({:?}, {:?})\", cause, place)\n+            }\n             Retag(ref kind, ref place) => write!(\n                 fmt,\n                 \"Retag({}{:?})\","}, {"sha": "fd504f8c5d5acae6a65770544419e4ed96e8b3c6", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -380,7 +380,7 @@ macro_rules! make_mir_visitor {\n                     ) => {\n                         self.visit_assign(place, rvalue, location);\n                     }\n-                    StatementKind::FakeRead(_, place) => {\n+                    StatementKind::FakeRead(box (_, place)) => {\n                         self.visit_place(\n                             place,\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect),"}, {"sha": "d5deec820889ac05595d459789de888bf53970de", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -1728,7 +1728,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         impl<'tcx> Visitor<'tcx> for FakeReadCauseFinder<'tcx> {\n             fn visit_statement(&mut self, statement: &Statement<'tcx>, _: Location) {\n                 match statement {\n-                    Statement { kind: StatementKind::FakeRead(cause, box place), .. }\n+                    Statement { kind: StatementKind::FakeRead(box (cause, place)), .. }\n                         if *place == self.place =>\n                     {\n                         self.cause = Some(*cause);"}, {"sha": "2a388b8a72bb05b4aa3ff9a7099ccfcae3850e85", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -515,7 +515,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let block = &self.body.basic_blocks()[location.block];\n \n                 let kind = if let Some(&Statement {\n-                    kind: StatementKind::FakeRead(FakeReadCause::ForLet, _),\n+                    kind: StatementKind::FakeRead(box (FakeReadCause::ForLet(_), _)),\n                     ..\n                 }) = block.statements.get(location.statement_index)\n                 {"}, {"sha": "577d7d53814ee1d362a084d421919f8ce5c5ff06", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -7,8 +7,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItemGroup;\n use rustc_hir::GeneratorKind;\n use rustc_middle::mir::{\n-    AggregateKind, Constant, Field, Local, LocalInfo, LocalKind, Location, Operand, Place,\n-    PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n+    AggregateKind, Constant, FakeReadCause, Field, Local, LocalInfo, LocalKind, Location, Operand,\n+    Place, PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Instance, Ty, TyCtxt};\n@@ -795,6 +795,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n+        // StatementKind::FakeRead only contains a def_id if they are introduced as a result\n+        // of pattern matching within a closure.\n+        if let StatementKind::FakeRead(box (cause, ref place)) = stmt.kind {\n+            match cause {\n+                FakeReadCause::ForMatchedPlace(Some(closure_def_id))\n+                | FakeReadCause::ForLet(Some(closure_def_id)) => {\n+                    debug!(\"move_spans: def_id={:?} place={:?}\", closure_def_id, place);\n+                    let places = &[Operand::Move(*place)];\n+                    if let Some((args_span, generator_kind, var_span)) =\n+                        self.closure_span(closure_def_id, moved_place, places)\n+                    {\n+                        return ClosureUse { generator_kind, args_span, var_span };\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         let normal_ret =\n             if moved_place.projection.iter().any(|p| matches!(p, ProjectionElem::Downcast(..))) {\n                 PatUse(stmt.source_info.span)"}, {"sha": "9374741f83749ec8507ebf8842c617e1628c1060", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -63,7 +63,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n \n                 self.mutate_place(location, *lhs, Shallow(None), JustWrite);\n             }\n-            StatementKind::FakeRead(_, _) => {\n+            StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n             StatementKind::SetDiscriminant { place, variant_index: _ } => {"}, {"sha": "71db6abde43512abd716ca9817815b0af1026cbd", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -574,7 +574,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n \n                 self.mutate_place(location, (*lhs, span), Shallow(None), JustWrite, flow_state);\n             }\n-            StatementKind::FakeRead(_, box ref place) => {\n+            StatementKind::FakeRead(box (_, ref place)) => {\n                 // Read for match doesn't access any memory and is used to\n                 // assert that a place is safe and live. So we don't have to\n                 // do any checks here."}, {"sha": "538d8921869c3e7267fe0f53ad2c40f12e426cb9", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -293,8 +293,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n-            StatementKind::FakeRead(_, place) => {\n-                self.create_move_path(**place);\n+            StatementKind::FakeRead(box (_, place)) => {\n+                self.create_move_path(*place);\n             }\n             StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (output, kind) in iter::zip(&*asm.outputs, &asm.asm.outputs) {"}, {"sha": "324d826b375c1976d9a23b3a8e1e1a2e16a42272", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -683,10 +683,10 @@ pub(super) fn filtered_statement_span(\n         // and `_1` is the `Place` for `somenum`.\n         //\n         // If and when the Issue is resolved, remove this special case match pattern:\n-        StatementKind::FakeRead(cause, _) if cause == FakeReadCause::ForGuardBinding => None,\n+        StatementKind::FakeRead(box (cause, _)) if cause == FakeReadCause::ForGuardBinding => None,\n \n         // Retain spans from all other statements\n-        StatementKind::FakeRead(_, _) // Not including `ForGuardBinding`\n+        StatementKind::FakeRead(box (_, _)) // Not including `ForGuardBinding`\n         | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }"}, {"sha": "fd4a783d12a003bb6f843f09892c6300eb525c62", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> CFG<'tcx> {\n         cause: FakeReadCause,\n         place: Place<'tcx>,\n     ) {\n-        let kind = StatementKind::FakeRead(cause, box place);\n+        let kind = StatementKind::FakeRead(box (cause, place));\n         let stmt = Statement { source_info, kind };\n         self.push(block, stmt);\n     }"}, {"sha": "822fbd91c947ea49ccbef8daf36b43fbc4e09522", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -179,24 +179,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //     match x { _ => () } // fake read of `x`\n                 // };\n                 // ```\n-                // FIXME(RFC2229): Remove feature gate once diagnostics are improved\n-                if this.tcx.features().capture_disjoint_fields {\n-                    for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n-                        let place_builder =\n-                            unpack!(block = this.as_place_builder(block, thir_place));\n-\n-                        if let Ok(place_builder_resolved) =\n-                            place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n-                        {\n-                            let mir_place =\n-                                place_builder_resolved.into_place(this.tcx, this.typeck_results);\n-                            this.cfg.push_fake_read(\n-                                block,\n-                                this.source_info(this.tcx.hir().span(*hir_id)),\n-                                *cause,\n-                                mir_place,\n-                            );\n-                        }\n+                for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n+                    let place_builder = unpack!(block = this.as_place_builder(block, thir_place));\n+\n+                    if let Ok(place_builder_resolved) =\n+                        place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n+                    {\n+                        let mir_place =\n+                            place_builder_resolved.into_place(this.tcx, this.typeck_results);\n+                        this.cfg.push_fake_read(\n+                            block,\n+                            this.source_info(this.tcx.hir().span(*hir_id)),\n+                            *cause,\n+                            mir_place,\n+                        );\n                     }\n                 }\n "}, {"sha": "0e422dc3c6378837608f27cd030bd0982514c0bd", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // uninhabited value. If we get never patterns, those will check that\n         // the place is initialized, and so this read would only be used to\n         // check safety.\n-        let cause_matched_place = FakeReadCause::ForMatchedPlace;\n+        let cause_matched_place = FakeReadCause::ForMatchedPlace(None);\n         let source_info = self.source_info(scrutinee_span);\n \n         if let Ok(scrutinee_builder) =\n@@ -400,7 +400,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let source_info = self.source_info(irrefutable_pat.span);\n-                self.cfg.push_fake_read(block, source_info, FakeReadCause::ForLet, place);\n+                self.cfg.push_fake_read(block, source_info, FakeReadCause::ForLet(None), place);\n \n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n@@ -435,7 +435,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let pattern_source_info = self.source_info(irrefutable_pat.span);\n-                let cause_let = FakeReadCause::ForLet;\n+                let cause_let = FakeReadCause::ForLet(None);\n                 self.cfg.push_fake_read(block, pattern_source_info, cause_let, place);\n \n                 let ty_source_info = self.source_info(user_ty_span);"}, {"sha": "c7d561f760b964c05a25d0ad598e8c9f83d5b876", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -456,6 +456,10 @@ impl Externs {\n     pub fn iter(&self) -> BTreeMapIter<'_, String, ExternEntry> {\n         self.0.iter()\n     }\n+\n+    pub fn len(&self) -> usize {\n+        self.0.len()\n+    }\n }\n \n impl ExternEntry {\n@@ -698,6 +702,7 @@ impl Default for Options {\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n             json_artifact_notifications: false,\n+            json_unused_externs: false,\n             pretty: None,\n         }\n     }\n@@ -1196,15 +1201,23 @@ pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n     }\n }\n \n+/// Possible json config files\n+pub struct JsonConfig {\n+    pub json_rendered: HumanReadableErrorType,\n+    pub json_artifact_notifications: bool,\n+    pub json_unused_externs: bool,\n+}\n+\n /// Parse the `--json` flag.\n ///\n /// The first value returned is how to render JSON diagnostics, and the second\n /// is whether or not artifact notifications are enabled.\n-pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool) {\n+pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n     let mut json_rendered: fn(ColorConfig) -> HumanReadableErrorType =\n         HumanReadableErrorType::Default;\n     let mut json_color = ColorConfig::Never;\n     let mut json_artifact_notifications = false;\n+    let mut json_unused_externs = false;\n     for option in matches.opt_strs(\"json\") {\n         // For now conservatively forbid `--color` with `--json` since `--json`\n         // won't actually be emitting any colors and anything colorized is\n@@ -1221,14 +1234,20 @@ pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool)\n                 \"diagnostic-short\" => json_rendered = HumanReadableErrorType::Short,\n                 \"diagnostic-rendered-ansi\" => json_color = ColorConfig::Always,\n                 \"artifacts\" => json_artifact_notifications = true,\n+                \"unused-externs\" => json_unused_externs = true,\n                 s => early_error(\n                     ErrorOutputType::default(),\n                     &format!(\"unknown `--json` option `{}`\", s),\n                 ),\n             }\n         }\n     }\n-    (json_rendered(json_color), json_artifact_notifications)\n+\n+    JsonConfig {\n+        json_rendered: json_rendered(json_color),\n+        json_artifact_notifications,\n+        json_unused_externs,\n+    }\n }\n \n /// Parses the `--error-format` flag.\n@@ -1806,7 +1825,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let edition = parse_crate_edition(matches);\n \n-    let (json_rendered, json_artifact_notifications) = parse_json(matches);\n+    let JsonConfig { json_rendered, json_artifact_notifications, json_unused_externs } =\n+        parse_json(matches);\n \n     let error_format = parse_error_format(matches, color, json_rendered);\n \n@@ -1819,6 +1839,14 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let mut debugging_opts = build_debugging_options(matches, error_format);\n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n \n+    if !debugging_opts.unstable_options && json_unused_externs {\n+        early_error(\n+            error_format,\n+            \"the `-Z unstable-options` flag must also be passed to enable \\\n+            the flag `--json=unused-externs`\",\n+        );\n+    }\n+\n     let output_types = parse_output_types(&debugging_opts, matches, error_format);\n \n     let mut cg = build_codegen_options(matches, error_format);\n@@ -1979,6 +2007,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         remap_path_prefix,\n         edition,\n         json_artifact_notifications,\n+        json_unused_externs,\n         pretty,\n     }\n }"}, {"sha": "dd35cb97275bcac27a48937dc32ffb0708c21a7b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -147,6 +147,9 @@ top_level_options!(\n         // by the compiler.\n         json_artifact_notifications: bool [TRACKED],\n \n+        // `true` if we're emitting a JSON blob containing the unused externs\n+        json_unused_externs: bool [UNTRACKED],\n+\n         pretty: Option<PpMode> [UNTRACKED],\n     }\n );"}, {"sha": "02510cb6a44cf87806fa0edc8b1a9b3d8efcd069", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -280,9 +280,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 if needs_to_be_read {\n                     self.borrow_expr(&discr, ty::ImmBorrow);\n                 } else {\n+                    let closure_def_id = match discr_place.place.base {\n+                        PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+                        _ => None,\n+                    };\n+\n                     self.delegate.fake_read(\n                         discr_place.place.clone(),\n-                        FakeReadCause::ForMatchedPlace,\n+                        FakeReadCause::ForMatchedPlace(closure_def_id),\n                         discr_place.hir_id,\n                     );\n \n@@ -578,9 +583,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     }\n \n     fn walk_arm(&mut self, discr_place: &PlaceWithHirId<'tcx>, arm: &hir::Arm<'_>) {\n+        let closure_def_id = match discr_place.place.base {\n+            PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+            _ => None,\n+        };\n+\n         self.delegate.fake_read(\n             discr_place.place.clone(),\n-            FakeReadCause::ForMatchedPlace,\n+            FakeReadCause::ForMatchedPlace(closure_def_id),\n             discr_place.hir_id,\n         );\n         self.walk_pat(discr_place, &arm.pat);\n@@ -595,9 +605,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// Walks a pat that occurs in isolation (i.e., top-level of fn argument or\n     /// let binding, and *not* a match arm or nested pat.)\n     fn walk_irrefutable_pat(&mut self, discr_place: &PlaceWithHirId<'tcx>, pat: &hir::Pat<'_>) {\n+        let closure_def_id = match discr_place.place.base {\n+            PlaceBase::Upvar(upvar_id) => Some(upvar_id.closure_expr_id.to_def_id()),\n+            _ => None,\n+        };\n+\n         self.delegate.fake_read(\n             discr_place.place.clone(),\n-            FakeReadCause::ForLet,\n+            FakeReadCause::ForLet(closure_def_id),\n             discr_place.hir_id,\n         );\n         self.walk_pat(discr_place, pat);"}, {"sha": "f330a1bb3dcfebd0822d6b485c5937d59a5415cf", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 165, "deletions": 167, "changes": 332, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -128,106 +128,6 @@ impl<K, V> InternalNode<K, V> {\n /// is not a separate type and has no destructor.\n type BoxedNode<K, V> = NonNull<LeafNode<K, V>>;\n \n-/// The root node of an owned tree.\n-///\n-/// Note that this does not have a destructor, and must be cleaned up manually.\n-pub type Root<K, V> = NodeRef<marker::Owned, K, V, marker::LeafOrInternal>;\n-\n-impl<K, V> Root<K, V> {\n-    /// Returns a new owned tree, with its own root node that is initially empty.\n-    pub fn new() -> Self {\n-        NodeRef::new_leaf().forget_type()\n-    }\n-}\n-\n-impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {\n-    fn new_leaf() -> Self {\n-        Self::from_new_leaf(LeafNode::new())\n-    }\n-\n-    fn from_new_leaf(leaf: Box<LeafNode<K, V>>) -> Self {\n-        NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }\n-    }\n-}\n-\n-impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {\n-    fn new_internal(child: Root<K, V>) -> Self {\n-        let mut new_node = unsafe { InternalNode::new() };\n-        new_node.edges[0].write(child.node);\n-        unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }\n-    }\n-\n-    /// # Safety\n-    /// `height` must not be zero.\n-    unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n-        debug_assert!(height > 0);\n-        let node = NonNull::from(Box::leak(internal)).cast();\n-        let mut this = NodeRef { height, node, _marker: PhantomData };\n-        this.borrow_mut().correct_all_childrens_parent_links();\n-        this\n-    }\n-}\n-\n-impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {\n-    /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe\n-    /// because the return value cannot be used to destroy the root, and there\n-    /// cannot be other references to the tree.\n-    pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-\n-    /// Slightly mutably borrows the owned root node.\n-    pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-\n-    /// Irreversibly transitions to a reference that permits traversal and offers\n-    /// destructive methods and little else.\n-    pub fn into_dying(self) -> NodeRef<marker::Dying, K, V, Type> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-}\n-\n-impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n-    /// Adds a new internal node with a single edge pointing to the previous root node,\n-    /// make that new node the root node, and return it. This increases the height by 1\n-    /// and is the opposite of `pop_internal_level`.\n-    pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n-        super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());\n-\n-        // `self.borrow_mut()`, except that we just forgot we're internal now:\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-\n-    /// Removes the internal root node, using its first child as the new root node.\n-    /// As it is intended only to be called when the root node has only one child,\n-    /// no cleanup is done on any of the keys, values and other children.\n-    /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n-    ///\n-    /// Requires exclusive access to the `Root` object but not to the root node;\n-    /// it will not invalidate other handles or references to the root node.\n-    ///\n-    /// Panics if there is no internal level, i.e., if the root node is a leaf.\n-    pub fn pop_internal_level(&mut self) {\n-        assert!(self.height > 0);\n-\n-        let top = self.node;\n-\n-        // SAFETY: we asserted to be internal.\n-        let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };\n-        // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.\n-        let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };\n-        // SAFETY: the first edge is always initialized.\n-        self.node = unsafe { internal_node.edges[0].assume_init_read() };\n-        self.height -= 1;\n-        self.clear_parent_link();\n-\n-        unsafe {\n-            Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());\n-        }\n-    }\n-}\n-\n // N.B. `NodeRef` is always covariant in `K` and `V`, even when the `BorrowType`\n // is `Mut`. This is technically wrong, but cannot result in any unsafety due to\n // internal use of `NodeRef` because we stay completely generic over `K` and `V`.\n@@ -292,6 +192,11 @@ pub struct NodeRef<BorrowType, K, V, Type> {\n     _marker: PhantomData<(BorrowType, Type)>,\n }\n \n+/// The root node of an owned tree.\n+///\n+/// Note that this does not have a destructor, and must be cleaned up manually.\n+pub type Root<K, V> = NodeRef<marker::Owned, K, V, marker::LeafOrInternal>;\n+\n impl<'a, K: 'a, V: 'a, Type> Copy for NodeRef<marker::Immut<'a>, K, V, Type> {}\n impl<'a, K: 'a, V: 'a, Type> Clone for NodeRef<marker::Immut<'a>, K, V, Type> {\n     fn clone(&self) -> Self {\n@@ -307,6 +212,34 @@ unsafe impl<'a, K: Send + 'a, V: Send + 'a, Type> Send for NodeRef<marker::ValMu\n unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Owned, K, V, Type> {}\n unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Dying, K, V, Type> {}\n \n+impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {\n+    fn new_leaf() -> Self {\n+        Self::from_new_leaf(LeafNode::new())\n+    }\n+\n+    fn from_new_leaf(leaf: Box<LeafNode<K, V>>) -> Self {\n+        NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }\n+    }\n+}\n+\n+impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {\n+    fn new_internal(child: Root<K, V>) -> Self {\n+        let mut new_node = unsafe { InternalNode::new() };\n+        new_node.edges[0].write(child.node);\n+        unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }\n+    }\n+\n+    /// # Safety\n+    /// `height` must not be zero.\n+    unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n+        debug_assert!(height > 0);\n+        let node = NonNull::from(Box::leak(internal)).cast();\n+        let mut this = NodeRef { height, node, _marker: PhantomData };\n+        this.borrow_mut().correct_all_childrens_parent_links();\n+        this\n+    }\n+}\n+\n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n     /// Unpack a node reference that was packed as `NodeRef::parent`.\n     fn from_internal(node: NonNull<InternalNode<K, V>>, height: usize) -> Self {\n@@ -420,6 +353,19 @@ impl<BorrowType: marker::BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type>\n     }\n }\n \n+impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n+    /// Could be a public implementation of PartialEq, but only used in this module.\n+    fn eq(&self, other: &Self) -> bool {\n+        let Self { node, height, _marker } = self;\n+        if node.eq(&other.node) {\n+            debug_assert_eq!(*height, other.height);\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n     /// Exposes the leaf portion of any leaf or internal node in an immutable tree.\n     fn into_leaf(self) -> &'a LeafNode<K, V> {\n@@ -461,20 +407,6 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n     }\n }\n \n-impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Unsafely asserts to the compiler the static information that this node is a `Leaf`.\n-    unsafe fn cast_to_leaf_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n-        debug_assert!(self.height == 0);\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-\n-    /// Unsafely asserts to the compiler the static information that this node is an `Internal`.\n-    unsafe fn cast_to_internal_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n-        debug_assert!(self.height > 0);\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-}\n-\n impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// Temporarily takes out another, mutable reference to the same node. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n@@ -577,6 +509,22 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n }\n \n+impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n+    /// # Safety\n+    /// Every item returned by `range` is a valid edge index for the node.\n+    unsafe fn correct_childrens_parent_links<R: Iterator<Item = usize>>(&mut self, range: R) {\n+        for i in range {\n+            debug_assert!(i <= self.len());\n+            unsafe { Handle::new_edge(self.reborrow_mut(), i) }.correct_parent_link();\n+        }\n+    }\n+\n+    fn correct_all_childrens_parent_links(&mut self) {\n+        let len = self.len();\n+        unsafe { self.correct_childrens_parent_links(0..=len) };\n+    }\n+}\n+\n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n     /// Sets the node's link to its parent edge,\n     /// without invalidating other references to the node.\n@@ -596,6 +544,71 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n     }\n }\n \n+impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n+    /// Returns a new owned tree, with its own root node that is initially empty.\n+    pub fn new() -> Self {\n+        NodeRef::new_leaf().forget_type()\n+    }\n+\n+    /// Adds a new internal node with a single edge pointing to the previous root node,\n+    /// make that new node the root node, and return it. This increases the height by 1\n+    /// and is the opposite of `pop_internal_level`.\n+    pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n+        super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());\n+\n+        // `self.borrow_mut()`, except that we just forgot we're internal now:\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+\n+    /// Removes the internal root node, using its first child as the new root node.\n+    /// As it is intended only to be called when the root node has only one child,\n+    /// no cleanup is done on any of the keys, values and other children.\n+    /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n+    ///\n+    /// Requires exclusive access to the `Root` object but not to the root node;\n+    /// it will not invalidate other handles or references to the root node.\n+    ///\n+    /// Panics if there is no internal level, i.e., if the root node is a leaf.\n+    pub fn pop_internal_level(&mut self) {\n+        assert!(self.height > 0);\n+\n+        let top = self.node;\n+\n+        // SAFETY: we asserted to be internal.\n+        let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };\n+        // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.\n+        let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };\n+        // SAFETY: the first edge is always initialized.\n+        self.node = unsafe { internal_node.edges[0].assume_init_read() };\n+        self.height -= 1;\n+        self.clear_parent_link();\n+\n+        unsafe {\n+            Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());\n+        }\n+    }\n+}\n+\n+impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {\n+    /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe\n+    /// because the return value cannot be used to destroy the root, and there\n+    /// cannot be other references to the tree.\n+    pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+\n+    /// Slightly mutably borrows the owned root node.\n+    pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+\n+    /// Irreversibly transitions to a reference that permits traversal and offers\n+    /// destructive methods and little else.\n+    pub fn into_dying(self) -> NodeRef<marker::Dying, K, V, Type> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+}\n+\n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n     /// Adds a key-value pair to the end of the node.\n     pub fn push(&mut self, key: K, val: V) {\n@@ -610,22 +623,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n     }\n }\n \n-impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n-    /// # Safety\n-    /// Every item returned by `range` is a valid edge index for the node.\n-    unsafe fn correct_childrens_parent_links<R: Iterator<Item = usize>>(&mut self, range: R) {\n-        for i in range {\n-            debug_assert!(i <= self.len());\n-            unsafe { Handle::new_edge(self.reborrow_mut(), i) }.correct_parent_link();\n-        }\n-    }\n-\n-    fn correct_all_childrens_parent_links(&mut self) {\n-        let len = self.len();\n-        unsafe { self.correct_childrens_parent_links(0..=len) };\n-    }\n-}\n-\n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     /// Adds a key-value pair, and an edge to go to the right of that pair,\n     /// to the end of the node.\n@@ -645,6 +642,20 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     }\n }\n \n+impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {\n+    /// Removes any static information asserting that this node is a `Leaf` node.\n+    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+}\n+\n+impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n+    /// Removes any static information asserting that this node is an `Internal` node.\n+    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+}\n+\n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n     /// Checks whether a node is an `Internal` node or a `Leaf` node.\n     pub fn force(\n@@ -669,6 +680,20 @@ impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n     }\n }\n \n+impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n+    /// Unsafely asserts to the compiler the static information that this node is a `Leaf`.\n+    unsafe fn cast_to_leaf_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n+        debug_assert!(self.height == 0);\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+\n+    /// Unsafely asserts to the compiler the static information that this node is an `Internal`.\n+    unsafe fn cast_to_internal_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n+        debug_assert!(self.height > 0);\n+        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n+    }\n+}\n+\n /// A reference to a specific key-value pair or edge within a node. The `Node` parameter\n /// must be a `NodeRef`, while the `Type` can either be `KV` (signifying a handle on a key-value\n /// pair) or `Edge` (signifying a handle on an edge).\n@@ -722,19 +747,6 @@ impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, mar\n     }\n }\n \n-impl<BorrowType, K, V, NodeType> NodeRef<BorrowType, K, V, NodeType> {\n-    /// Could be a public implementation of PartialEq, but only used in this module.\n-    fn eq(&self, other: &Self) -> bool {\n-        let Self { node, height, _marker } = self;\n-        if node.eq(&other.node) {\n-            debug_assert_eq!(*height, other.height);\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n impl<BorrowType, K, V, NodeType, HandleType> PartialEq\n     for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>\n {\n@@ -754,16 +766,6 @@ impl<BorrowType, K, V, NodeType, HandleType>\n     }\n }\n \n-impl<'a, K, V, Type> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, Type> {\n-    /// Unsafely asserts to the compiler the static information that the handle's node is a `Leaf`.\n-    pub unsafe fn cast_to_leaf_unchecked(\n-        self,\n-    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, Type> {\n-        let node = unsafe { self.node.cast_to_leaf_unchecked() };\n-        Handle { node, idx: self.idx, _marker: PhantomData }\n-    }\n-}\n-\n impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n     /// Temporarily takes out another, mutable handle on the same location. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n@@ -1466,20 +1468,6 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n     }\n }\n \n-impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {\n-    /// Removes any static information asserting that this node is a `Leaf` node.\n-    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-}\n-\n-impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n-    /// Removes any static information asserting that this node is an `Internal` node.\n-    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n-    }\n-}\n-\n impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {\n     pub fn forget_node_type(\n         self,\n@@ -1531,6 +1519,16 @@ impl<BorrowType, K, V, Type> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInte\n     }\n }\n \n+impl<'a, K, V, Type> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, Type> {\n+    /// Unsafely asserts to the compiler the static information that the handle's node is a `Leaf`.\n+    pub unsafe fn cast_to_leaf_unchecked(\n+        self,\n+    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, Type> {\n+        let node = unsafe { self.node.cast_to_leaf_unchecked() };\n+        Handle { node, idx: self.idx, _marker: PhantomData }\n+    }\n+}\n+\n impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n     /// Move the suffix after `self` from one node to another one. `right` must be empty.\n     /// The first edge of `right` remains unchanged."}, {"sha": "4dcc5d30debf7294d4f92927122a2e7032dc57a3", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -1004,9 +1004,9 @@ fn test_from_iter_specialization_with_iterator_adapters() {\n         .map_while(Option::Some)\n         .peekable()\n         .skip(1)\n-        .map(|e| std::num::NonZeroUsize::new(e));\n+        .map(|e| if e != usize::MAX { Ok(std::num::NonZeroUsize::new(e)) } else { Err(()) });\n     assert_in_place_trait(&iter);\n-    let sink = iter.collect::<Vec<_>>();\n+    let sink = iter.collect::<Result<Vec<_>, _>>().unwrap();\n     let sinkptr = sink.as_ptr();\n     assert_eq!(srcptr, sinkptr as *const usize);\n }\n@@ -1078,12 +1078,21 @@ fn test_from_iter_specialization_panic_during_drop_leaks() {\n         }\n     }\n \n+    let mut to_free: *mut Droppable = core::ptr::null_mut();\n+    let mut cap = 0;\n+\n     let _ = std::panic::catch_unwind(AssertUnwindSafe(|| {\n-        let v = vec![Droppable::DroppedTwice(Box::new(123)), Droppable::PanicOnDrop];\n+        let mut v = vec![Droppable::DroppedTwice(Box::new(123)), Droppable::PanicOnDrop];\n+        to_free = v.as_mut_ptr();\n+        cap = v.capacity();\n         let _ = v.into_iter().take(0).collect::<Vec<_>>();\n     }));\n \n     assert_eq!(unsafe { DROP_COUNTER }, 1);\n+    // clean up the leak to keep miri happy\n+    unsafe {\n+        drop(Vec::from_raw_parts(to_free, 0, cap));\n+    }\n }\n \n #[test]"}, {"sha": "61d8351d59f09bce9a536f80d73a5e5a95de04e0", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -194,3 +194,26 @@ where\n         self.try_fold(init, ok(fold)).unwrap()\n     }\n }\n+\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, I, E> SourceIter for ResultShunt<'_, I, E>\n+where\n+    I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n+    }\n+}\n+\n+// SAFETY: ResultShunt::next calls I::find, which has to advance `iter` in order to\n+// return `Some(_)`. Since `iter` has type `I: InPlaceIterable` it's guaranteed that\n+// at least one item will be moved out from the underlying source.\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<I, T, E> InPlaceIterable for ResultShunt<'_, I, E> where\n+    I: Iterator<Item = Result<T, E>> + InPlaceIterable\n+{\n+}"}, {"sha": "5e9cfe148f17a584a0074aabbf37ed4513c468a6", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -154,6 +154,8 @@ crate struct Options {\n     /// If this option is set to `true`, rustdoc will only run checks and not generate\n     /// documentation.\n     crate run_check: bool,\n+    /// Whether doctests should emit unused externs\n+    crate json_unused_externs: bool,\n }\n \n impl fmt::Debug for Options {\n@@ -352,7 +354,8 @@ impl Options {\n         }\n \n         let color = config::parse_color(&matches);\n-        let (json_rendered, _artifacts) = config::parse_json(&matches);\n+        let config::JsonConfig { json_rendered, json_unused_externs, .. } =\n+            config::parse_json(&matches);\n         let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);\n@@ -507,7 +510,6 @@ impl Options {\n         let edition = config::parse_crate_edition(&matches);\n \n         let mut id_map = html::markdown::IdMap::new();\n-        id_map.populate(&html::render::INITIAL_IDS);\n         let external_html = match ExternalHtml::load(\n             &matches.opt_strs(\"html-in-header\"),\n             &matches.opt_strs(\"html-before-content\"),\n@@ -687,6 +689,7 @@ impl Options {\n             },\n             crate_name,\n             output_format,\n+            json_unused_externs,\n         })\n     }\n "}, {"sha": "6f6ed0eb68413c8d9a2de99ad4b1d9017c3d166d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 101, "deletions": 6, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{ColorConfig, ErrorReported};\n use rustc_hir as hir;\n@@ -23,6 +23,8 @@ use std::panic;\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::sync::{Arc, Mutex};\n \n use crate::clean::Attributes;\n use crate::config::Options;\n@@ -104,8 +106,10 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n \n     let mut test_args = options.test_args.clone();\n     let display_warnings = options.display_warnings;\n+    let externs = options.externs.clone();\n+    let json_unused_externs = options.json_unused_externs;\n \n-    let tests = interface::run_compiler(config, |compiler| {\n+    let res = interface::run_compiler(config, |compiler| {\n         compiler.enter(|queries| {\n             let _lower_to_hir = queries.lower_to_hir()?;\n \n@@ -151,12 +155,15 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n             });\n             compiler.session().abort_if_errors();\n \n-            let ret: Result<_, ErrorReported> = Ok(collector.tests);\n+            let unused_extern_reports = collector.unused_extern_reports.clone();\n+            let compiling_test_count = collector.compiling_test_count.load(Ordering::SeqCst);\n+            let ret: Result<_, ErrorReported> =\n+                Ok((collector.tests, unused_extern_reports, compiling_test_count));\n             ret\n         })\n     });\n-    let tests = match tests {\n-        Ok(tests) => tests,\n+    let (tests, unused_extern_reports, compiling_test_count) = match res {\n+        Ok(res) => res,\n         Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n@@ -168,6 +175,44 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         Some(testing::Options::new().display_output(display_warnings)),\n     );\n \n+    // Collect and warn about unused externs, but only if we've gotten\n+    // reports for each doctest\n+    if json_unused_externs {\n+        let unused_extern_reports: Vec<_> =\n+            std::mem::take(&mut unused_extern_reports.lock().unwrap());\n+        if unused_extern_reports.len() == compiling_test_count {\n+            let extern_names = externs.iter().map(|(name, _)| name).collect::<FxHashSet<&String>>();\n+            let mut unused_extern_names = unused_extern_reports\n+                .iter()\n+                .map(|uexts| uexts.unused_extern_names.iter().collect::<FxHashSet<&String>>())\n+                .fold(extern_names, |uextsa, uextsb| {\n+                    uextsa.intersection(&uextsb).map(|v| *v).collect::<FxHashSet<&String>>()\n+                })\n+                .iter()\n+                .map(|v| (*v).clone())\n+                .collect::<Vec<String>>();\n+            unused_extern_names.sort();\n+            // Take the most severe lint level\n+            let lint_level = unused_extern_reports\n+                .iter()\n+                .map(|uexts| uexts.lint_level.as_str())\n+                .max_by_key(|v| match *v {\n+                    \"warn\" => 1,\n+                    \"deny\" => 2,\n+                    \"forbid\" => 3,\n+                    // The allow lint level is not expected,\n+                    // as if allow is specified, no message\n+                    // is to be emitted.\n+                    v => unreachable!(\"Invalid lint level '{}'\", v),\n+                })\n+                .unwrap_or(\"warn\")\n+                .to_string();\n+            let uext = UnusedExterns { lint_level, unused_extern_names };\n+            let unused_extern_json = serde_json::to_string(&uext).unwrap();\n+            eprintln!(\"{}\", unused_extern_json);\n+        }\n+    }\n+\n     Ok(())\n }\n \n@@ -235,6 +280,18 @@ impl DirState {\n     }\n }\n \n+// NOTE: Keep this in sync with the equivalent structs in rustc\n+// and cargo.\n+// We could unify this struct the one in rustc but they have different\n+// ownership semantics, so doing so would create wasteful allocations.\n+#[derive(serde::Serialize, serde::Deserialize)]\n+struct UnusedExterns {\n+    /// Lint level of the unused_crate_dependencies lint\n+    lint_level: String,\n+    /// List of unused externs by their names.\n+    unused_extern_names: Vec<String>,\n+}\n+\n fn run_test(\n     test: &str,\n     cratename: &str,\n@@ -253,6 +310,7 @@ fn run_test(\n     outdir: DirState,\n     path: PathBuf,\n     test_id: &str,\n+    report_unused_externs: impl Fn(UnusedExterns),\n ) -> Result<(), TestFailure> {\n     let (test, line_offset, supports_color) =\n         make_test(test, Some(cratename), as_test_harness, opts, edition, Some(test_id));\n@@ -278,6 +336,12 @@ fn run_test(\n     if as_test_harness {\n         compiler.arg(\"--test\");\n     }\n+    if options.json_unused_externs && !compile_fail {\n+        compiler.arg(\"--error-format=json\");\n+        compiler.arg(\"--json\").arg(\"unused-externs\");\n+        compiler.arg(\"-Z\").arg(\"unstable-options\");\n+        compiler.arg(\"-W\").arg(\"unused_crate_dependencies\");\n+    }\n     for lib_str in &options.lib_strs {\n         compiler.arg(\"-L\").arg(&lib_str);\n     }\n@@ -337,7 +401,26 @@ fn run_test(\n             eprint!(\"{}\", self.0);\n         }\n     }\n-    let out = str::from_utf8(&output.stderr).unwrap();\n+    let mut out_lines = str::from_utf8(&output.stderr)\n+        .unwrap()\n+        .lines()\n+        .filter(|l| {\n+            if let Ok(uext) = serde_json::from_str::<UnusedExterns>(l) {\n+                report_unused_externs(uext);\n+                false\n+            } else {\n+                true\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    // Add a \\n to the end to properly terminate the last line,\n+    // but only if there was output to be printed\n+    if out_lines.len() > 0 {\n+        out_lines.push(\"\");\n+    }\n+\n+    let out = out_lines.join(\"\\n\");\n     let _bomb = Bomb(&out);\n     match (output.status.success(), compile_fail) {\n         (true, true) => {\n@@ -721,6 +804,8 @@ crate struct Collector {\n     source_map: Option<Lrc<SourceMap>>,\n     filename: Option<PathBuf>,\n     visited_tests: FxHashMap<(String, usize), usize>,\n+    unused_extern_reports: Arc<Mutex<Vec<UnusedExterns>>>,\n+    compiling_test_count: AtomicUsize,\n }\n \n impl Collector {\n@@ -745,6 +830,8 @@ impl Collector {\n             source_map,\n             filename,\n             visited_tests: FxHashMap::default(),\n+            unused_extern_reports: Default::default(),\n+            compiling_test_count: AtomicUsize::new(0),\n         }\n     }\n \n@@ -791,6 +878,10 @@ impl Tester for Collector {\n         let runtool_args = self.options.runtool_args.clone();\n         let target = self.options.target.clone();\n         let target_str = target.to_string();\n+        let unused_externs = self.unused_extern_reports.clone();\n+        if !config.compile_fail {\n+            self.compiling_test_count.fetch_add(1, Ordering::SeqCst);\n+        }\n \n         // FIXME(#44940): if doctests ever support path remapping, then this filename\n         // needs to be the result of `SourceMap::span_to_unmapped_path`.\n@@ -846,6 +937,9 @@ impl Tester for Collector {\n                 test_type: testing::TestType::DocTest,\n             },\n             testfn: testing::DynTestFn(box move || {\n+                let report_unused_externs = |uext| {\n+                    unused_externs.lock().unwrap().push(uext);\n+                };\n                 let res = run_test(\n                     &test,\n                     &cratename,\n@@ -864,6 +958,7 @@ impl Tester for Collector {\n                     outdir,\n                     path,\n                     &test_id,\n+                    report_unused_externs,\n                 );\n \n                 if let Err(err) = res {"}, {"sha": "3a4319d5d9aad12df340275652c61430ac847856", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -189,7 +189,9 @@ impl<'a> Classifier<'a> {\n             // leading identifier.\n             TokenKind::Bang if self.in_macro => {\n                 self.in_macro = false;\n-                Class::Macro\n+                sink(Highlight::Token { text, class: None });\n+                sink(Highlight::ExitSpan);\n+                return;\n             }\n \n             // Assume that '&' or '*' is the reference or dereference operator\n@@ -298,7 +300,9 @@ impl<'a> Classifier<'a> {\n             },\n             TokenKind::Ident | TokenKind::RawIdent if lookahead == Some(TokenKind::Bang) => {\n                 self.in_macro = true;\n-                Class::Macro\n+                sink(Highlight::EnterSpan { class: Class::Macro });\n+                sink(Highlight::Token { text, class: None });\n+                return;\n             }\n             TokenKind::Ident => match text {\n                 \"ref\" | \"mut\" => Class::RefKeyWord,"}, {"sha": "1c8dbffe78c22d5be893faab966293ae177716a3", "filename": "src/librustdoc/html/highlight/fixtures/dos_line.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdos_line.html?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -1,3 +1,3 @@\n <span class=\"kw\">pub</span> <span class=\"kw\">fn</span> <span class=\"ident\">foo</span>() {\n-<span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">&quot;foo&quot;</span>);\n+<span class=\"macro\">println!</span>(<span class=\"string\">&quot;foo&quot;</span>);\n }"}, {"sha": "4966e0ac6bbd3977ff1719f0e017a307761236b0", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -17,11 +17,11 @@\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"op\">&amp;&amp;</span><span class=\"ident\">foo</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n-    <span class=\"macro\">mac</span><span class=\"macro\">!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;</span><span class=\"kw-2\">mut</span> <span class=\"ident\">bar</span>);\n-    <span class=\"macro\">assert</span><span class=\"macro\">!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> <span class=\"op\">&lt;</span> <span class=\"ident\">N</span> <span class=\"op\">&amp;&amp;</span> <span class=\"ident\">index</span> <span class=\"op\">&lt;</span><span class=\"op\">=</span> <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n+    <span class=\"macro\">mac!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;</span><span class=\"kw-2\">mut</span> <span class=\"ident\">bar</span>);\n+    <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> <span class=\"op\">&lt;</span> <span class=\"ident\">N</span> <span class=\"op\">&amp;&amp;</span> <span class=\"ident\">index</span> <span class=\"op\">&lt;</span><span class=\"op\">=</span> <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n }\n \n-<span class=\"macro\">macro_rules</span><span class=\"macro\">!</span> <span class=\"ident\">bar</span> {\n+<span class=\"macro\">macro_rules!</span> <span class=\"ident\">bar</span> {\n     (<span class=\"macro-nonterminal\">$</span><span class=\"macro-nonterminal\">foo</span>:<span class=\"ident\">tt</span>) <span class=\"op\">=</span><span class=\"op\">&gt;</span> {};\n }\n </code></pre>"}, {"sha": "509f1730557756ee7b1cc92d569eb45a4c1b1639", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -1356,6 +1356,9 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"rustdoc-vars\".to_owned(), 1);\n     map.insert(\"sidebar-vars\".to_owned(), 1);\n     map.insert(\"copy-path\".to_owned(), 1);\n+    map.insert(\"help\".to_owned(), 1);\n+    map.insert(\"TOC\".to_owned(), 1);\n+    map.insert(\"render-detail\".to_owned(), 1);\n     // This is the list of IDs used by rustdoc sections.\n     map.insert(\"fields\".to_owned(), 1);\n     map.insert(\"variants\".to_owned(), 1);\n@@ -1365,6 +1368,12 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"trait-implementations\".to_owned(), 1);\n     map.insert(\"synthetic-implementations\".to_owned(), 1);\n     map.insert(\"blanket-implementations\".to_owned(), 1);\n+    map.insert(\"associated-types\".to_owned(), 1);\n+    map.insert(\"associated-const\".to_owned(), 1);\n+    map.insert(\"required-methods\".to_owned(), 1);\n+    map.insert(\"provided-methods\".to_owned(), 1);\n+    map.insert(\"implementors\".to_owned(), 1);\n+    map.insert(\"synthetic-implementors\".to_owned(), 1);\n     map\n }\n \n@@ -1373,12 +1382,6 @@ impl IdMap {\n         IdMap { map: init_id_map() }\n     }\n \n-    crate fn populate<I: IntoIterator<Item = S>, S: AsRef<str> + ToString>(&mut self, ids: I) {\n-        for id in ids {\n-            let _ = self.derive(id);\n-        }\n-    }\n-\n     crate fn derive<S: AsRef<str> + ToString>(&mut self, candidate: S) -> String {\n         let id = match self.map.get_mut(candidate.as_ref()) {\n             None => candidate.to_string(),"}, {"sha": "1a993f360a1660c7e0718238777973e50df28315", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -18,7 +18,7 @@ use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n use super::{\n     print_sidebar, settings, AllTypes, NameDoc, SharedContext, StylePath, BASIC_KEYWORDS,\n-    CURRENT_DEPTH, INITIAL_IDS,\n+    CURRENT_DEPTH,\n };\n \n use crate::clean::{self, AttributesExt};\n@@ -423,14 +423,11 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     }\n \n     fn make_child_renderer(&self) -> Self {\n-        let mut id_map = IdMap::new();\n-        id_map.populate(&INITIAL_IDS);\n-\n         Self {\n             current: self.current.clone(),\n             dst: self.dst.clone(),\n             render_redirect_pages: self.render_redirect_pages,\n-            id_map: RefCell::new(id_map),\n+            id_map: RefCell::new(IdMap::new()),\n             deref_id_map: RefCell::new(FxHashMap::default()),\n             shared: Rc::clone(&self.shared),\n             cache: Rc::clone(&self.cache),"}, {"sha": "7b656baa1b4bf991fb2be1b474ede7a0739545f2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -283,24 +283,6 @@ crate struct StylePath {\n \n thread_local!(crate static CURRENT_DEPTH: Cell<usize> = Cell::new(0));\n \n-crate const INITIAL_IDS: [&'static str; 15] = [\n-    \"main\",\n-    \"search\",\n-    \"help\",\n-    \"TOC\",\n-    \"render-detail\",\n-    \"associated-types\",\n-    \"associated-const\",\n-    \"required-methods\",\n-    \"provided-methods\",\n-    \"implementors\",\n-    \"synthetic-implementors\",\n-    \"implementors-list\",\n-    \"synthetic-implementors-list\",\n-    \"methods\",\n-    \"implementations\",\n-];\n-\n fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n     if let Some(l) = cx.src_href(item) {\n         write!(buf, \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"goto source code\\\">[src]</a>\", l)"}, {"sha": "9fa478f8a826c73b97626ae2420e2d4035d26b81", "filename": "src/test/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -130,12 +130,12 @@ fn address_of_reborrow() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/address-of.rs:4:14: 4:21\n         _2 = [const 0_i32; 10];          // scope 0 at $DIR/address-of.rs:4:14: 4:21\n         _1 = &_2;                        // scope 0 at $DIR/address-of.rs:4:13: 4:21\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/address-of.rs:4:9: 4:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/address-of.rs:4:9: 4:10\n         StorageLive(_3);                 // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:5:22: 5:29\n         _4 = [const 0_i32; 10];          // scope 1 at $DIR/address-of.rs:5:22: 5:29\n         _3 = &mut _4;                    // scope 1 at $DIR/address-of.rs:5:17: 5:29\n-        FakeRead(ForLet, _3);            // scope 1 at $DIR/address-of.rs:5:9: 5:14\n+        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/address-of.rs:5:9: 5:14\n         StorageLive(_5);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n         StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:7:5: 7:18\n         _6 = &raw const (*_1);           // scope 2 at $DIR/address-of.rs:7:5: 7:6\n@@ -170,25 +170,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_13);                // scope 2 at $DIR/address-of.rs:11:20: 11:21\n         StorageLive(_15);                // scope 2 at $DIR/address-of.rs:13:9: 13:10\n         _15 = &raw const (*_1);          // scope 2 at $DIR/address-of.rs:13:23: 13:24\n-        FakeRead(ForLet, _15);           // scope 2 at $DIR/address-of.rs:13:9: 13:10\n+        FakeRead(ForLet(None), _15);     // scope 2 at $DIR/address-of.rs:13:9: 13:10\n         AscribeUserType(_15, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 2 at $DIR/address-of.rs:13:12: 13:20\n         StorageLive(_16);                // scope 3 at $DIR/address-of.rs:14:9: 14:10\n         _16 = &raw const (*_1);          // scope 3 at $DIR/address-of.rs:14:31: 14:32\n-        FakeRead(ForLet, _16);           // scope 3 at $DIR/address-of.rs:14:9: 14:10\n+        FakeRead(ForLet(None), _16);     // scope 3 at $DIR/address-of.rs:14:9: 14:10\n         AscribeUserType(_16, o, UserTypeProjection { base: UserType(5), projs: [] }); // scope 3 at $DIR/address-of.rs:14:12: 14:28\n         StorageLive(_17);                // scope 4 at $DIR/address-of.rs:15:9: 15:10\n         StorageLive(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         _18 = &raw const (*_1);          // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         _17 = move _18 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 4 at $DIR/address-of.rs:15:30: 15:31\n         StorageDead(_18);                // scope 4 at $DIR/address-of.rs:15:30: 15:31\n-        FakeRead(ForLet, _17);           // scope 4 at $DIR/address-of.rs:15:9: 15:10\n+        FakeRead(ForLet(None), _17);     // scope 4 at $DIR/address-of.rs:15:9: 15:10\n         AscribeUserType(_17, o, UserTypeProjection { base: UserType(7), projs: [] }); // scope 4 at $DIR/address-of.rs:15:12: 15:27\n         StorageLive(_19);                // scope 5 at $DIR/address-of.rs:16:9: 16:10\n         StorageLive(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         _20 = &raw const (*_1);          // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         _19 = move _20 as *const [i32] (Pointer(Unsize)); // scope 5 at $DIR/address-of.rs:16:27: 16:28\n         StorageDead(_20);                // scope 5 at $DIR/address-of.rs:16:27: 16:28\n-        FakeRead(ForLet, _19);           // scope 5 at $DIR/address-of.rs:16:9: 16:10\n+        FakeRead(ForLet(None), _19);     // scope 5 at $DIR/address-of.rs:16:9: 16:10\n         AscribeUserType(_19, o, UserTypeProjection { base: UserType(9), projs: [] }); // scope 5 at $DIR/address-of.rs:16:12: 16:24\n         StorageLive(_21);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n         StorageLive(_22);                // scope 6 at $DIR/address-of.rs:18:5: 18:18\n@@ -218,25 +218,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_27);                // scope 6 at $DIR/address-of.rs:21:22: 21:23\n         StorageLive(_29);                // scope 6 at $DIR/address-of.rs:23:9: 23:10\n         _29 = &raw const (*_3);          // scope 6 at $DIR/address-of.rs:23:23: 23:24\n-        FakeRead(ForLet, _29);           // scope 6 at $DIR/address-of.rs:23:9: 23:10\n+        FakeRead(ForLet(None), _29);     // scope 6 at $DIR/address-of.rs:23:9: 23:10\n         AscribeUserType(_29, o, UserTypeProjection { base: UserType(13), projs: [] }); // scope 6 at $DIR/address-of.rs:23:12: 23:20\n         StorageLive(_30);                // scope 7 at $DIR/address-of.rs:24:9: 24:10\n         _30 = &raw const (*_3);          // scope 7 at $DIR/address-of.rs:24:31: 24:32\n-        FakeRead(ForLet, _30);           // scope 7 at $DIR/address-of.rs:24:9: 24:10\n+        FakeRead(ForLet(None), _30);     // scope 7 at $DIR/address-of.rs:24:9: 24:10\n         AscribeUserType(_30, o, UserTypeProjection { base: UserType(15), projs: [] }); // scope 7 at $DIR/address-of.rs:24:12: 24:28\n         StorageLive(_31);                // scope 8 at $DIR/address-of.rs:25:9: 25:10\n         StorageLive(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         _32 = &raw const (*_3);          // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         _31 = move _32 as *const dyn std::marker::Send (Pointer(Unsize)); // scope 8 at $DIR/address-of.rs:25:30: 25:31\n         StorageDead(_32);                // scope 8 at $DIR/address-of.rs:25:30: 25:31\n-        FakeRead(ForLet, _31);           // scope 8 at $DIR/address-of.rs:25:9: 25:10\n+        FakeRead(ForLet(None), _31);     // scope 8 at $DIR/address-of.rs:25:9: 25:10\n         AscribeUserType(_31, o, UserTypeProjection { base: UserType(17), projs: [] }); // scope 8 at $DIR/address-of.rs:25:12: 25:27\n         StorageLive(_33);                // scope 9 at $DIR/address-of.rs:26:9: 26:10\n         StorageLive(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         _34 = &raw const (*_3);          // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         _33 = move _34 as *const [i32] (Pointer(Unsize)); // scope 9 at $DIR/address-of.rs:26:27: 26:28\n         StorageDead(_34);                // scope 9 at $DIR/address-of.rs:26:27: 26:28\n-        FakeRead(ForLet, _33);           // scope 9 at $DIR/address-of.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _33);     // scope 9 at $DIR/address-of.rs:26:9: 26:10\n         AscribeUserType(_33, o, UserTypeProjection { base: UserType(19), projs: [] }); // scope 9 at $DIR/address-of.rs:26:12: 26:24\n         StorageLive(_35);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n         StorageLive(_36);                // scope 10 at $DIR/address-of.rs:28:5: 28:16\n@@ -266,25 +266,25 @@ fn address_of_reborrow() -> () {\n         StorageDead(_41);                // scope 10 at $DIR/address-of.rs:31:20: 31:21\n         StorageLive(_43);                // scope 10 at $DIR/address-of.rs:33:9: 33:10\n         _43 = &raw mut (*_3);            // scope 10 at $DIR/address-of.rs:33:21: 33:22\n-        FakeRead(ForLet, _43);           // scope 10 at $DIR/address-of.rs:33:9: 33:10\n+        FakeRead(ForLet(None), _43);     // scope 10 at $DIR/address-of.rs:33:9: 33:10\n         AscribeUserType(_43, o, UserTypeProjection { base: UserType(23), projs: [] }); // scope 10 at $DIR/address-of.rs:33:12: 33:18\n         StorageLive(_44);                // scope 11 at $DIR/address-of.rs:34:9: 34:10\n         _44 = &raw mut (*_3);            // scope 11 at $DIR/address-of.rs:34:29: 34:30\n-        FakeRead(ForLet, _44);           // scope 11 at $DIR/address-of.rs:34:9: 34:10\n+        FakeRead(ForLet(None), _44);     // scope 11 at $DIR/address-of.rs:34:9: 34:10\n         AscribeUserType(_44, o, UserTypeProjection { base: UserType(25), projs: [] }); // scope 11 at $DIR/address-of.rs:34:12: 34:26\n         StorageLive(_45);                // scope 12 at $DIR/address-of.rs:35:9: 35:10\n         StorageLive(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         _46 = &raw mut (*_3);            // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         _45 = move _46 as *mut dyn std::marker::Send (Pointer(Unsize)); // scope 12 at $DIR/address-of.rs:35:28: 35:29\n         StorageDead(_46);                // scope 12 at $DIR/address-of.rs:35:28: 35:29\n-        FakeRead(ForLet, _45);           // scope 12 at $DIR/address-of.rs:35:9: 35:10\n+        FakeRead(ForLet(None), _45);     // scope 12 at $DIR/address-of.rs:35:9: 35:10\n         AscribeUserType(_45, o, UserTypeProjection { base: UserType(27), projs: [] }); // scope 12 at $DIR/address-of.rs:35:12: 35:25\n         StorageLive(_47);                // scope 13 at $DIR/address-of.rs:36:9: 36:10\n         StorageLive(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         _48 = &raw mut (*_3);            // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         _47 = move _48 as *mut [i32] (Pointer(Unsize)); // scope 13 at $DIR/address-of.rs:36:25: 36:26\n         StorageDead(_48);                // scope 13 at $DIR/address-of.rs:36:25: 36:26\n-        FakeRead(ForLet, _47);           // scope 13 at $DIR/address-of.rs:36:9: 36:10\n+        FakeRead(ForLet(None), _47);     // scope 13 at $DIR/address-of.rs:36:9: 36:10\n         AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // scope 13 at $DIR/address-of.rs:36:12: 36:22\n         _0 = const ();                   // scope 0 at $DIR/address-of.rs:3:26: 37:2\n         StorageDead(_47);                // scope 13 at $DIR/address-of.rs:37:1: 37:2"}, {"sha": "195f3e2e65c642cd1eacabcd833dca54630f781a", "filename": "src/test/mir-opt/address_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress_of.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -24,19 +24,19 @@ fn borrow_and_cast(_1: i32) -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/address-of.rs:42:13: 42:15\n         _3 = &_1;                        // scope 0 at $DIR/address-of.rs:42:13: 42:15\n         _2 = &raw const (*_3);           // scope 0 at $DIR/address-of.rs:42:13: 42:15\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/address-of.rs:42:9: 42:10\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/address-of.rs:42:9: 42:10\n         StorageDead(_3);                 // scope 0 at $DIR/address-of.rs:42:29: 42:30\n         StorageLive(_4);                 // scope 1 at $DIR/address-of.rs:43:9: 43:10\n         StorageLive(_5);                 // scope 1 at $DIR/address-of.rs:43:13: 43:19\n         _5 = &mut _1;                    // scope 1 at $DIR/address-of.rs:43:13: 43:19\n         _4 = &raw const (*_5);           // scope 1 at $DIR/address-of.rs:43:13: 43:19\n-        FakeRead(ForLet, _4);            // scope 1 at $DIR/address-of.rs:43:9: 43:10\n+        FakeRead(ForLet(None), _4);      // scope 1 at $DIR/address-of.rs:43:9: 43:10\n         StorageDead(_5);                 // scope 1 at $DIR/address-of.rs:43:33: 43:34\n         StorageLive(_6);                 // scope 2 at $DIR/address-of.rs:44:9: 44:10\n         StorageLive(_7);                 // scope 2 at $DIR/address-of.rs:44:13: 44:19\n         _7 = &mut _1;                    // scope 2 at $DIR/address-of.rs:44:13: 44:19\n         _6 = &raw mut (*_7);             // scope 2 at $DIR/address-of.rs:44:13: 44:19\n-        FakeRead(ForLet, _6);            // scope 2 at $DIR/address-of.rs:44:9: 44:10\n+        FakeRead(ForLet(None), _6);      // scope 2 at $DIR/address-of.rs:44:9: 44:10\n         StorageDead(_7);                 // scope 2 at $DIR/address-of.rs:44:31: 44:32\n         _0 = const ();                   // scope 0 at $DIR/address-of.rs:41:32: 45:2\n         StorageDead(_6);                 // scope 2 at $DIR/address-of.rs:45:1: 45:2"}, {"sha": "e751b825c050535f5f776972e10f650200ceed69", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -28,15 +28,15 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n         _1 = const false;                // scope 0 at $DIR/basic_assignment.rs:11:20: 11:25\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/basic_assignment.rs:11:9: 11:17\n         StorageLive(_2);                 // scope 1 at $DIR/basic_assignment.rs:12:9: 12:17\n         StorageLive(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n         _3 = _1;                         // scope 2 at $DIR/basic_assignment.rs:16:16: 16:24\n         _2 = move _3;                    // scope 2 at $DIR/basic_assignment.rs:16:5: 16:24\n         StorageDead(_3);                 // scope 2 at $DIR/basic_assignment.rs:16:23: 16:24\n         StorageLive(_4);                 // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n         _4 = Option::<Box<u32>>::None;   // scope 2 at $DIR/basic_assignment.rs:18:36: 18:40\n-        FakeRead(ForLet, _4);            // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n+        FakeRead(ForLet(None), _4);      // scope 2 at $DIR/basic_assignment.rs:18:9: 18:15\n         AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 2 at $DIR/basic_assignment.rs:18:17: 18:33\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20"}, {"sha": "93507879a6f83e286563fb152ae91c6215301369", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -18,7 +18,7 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n     }\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n         switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:15: 6:16\n     }\n "}, {"sha": "8355b2d195e148d519123c0625eaddb82d405bbb", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -14,7 +14,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         _1 = const false;                // scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n "}, {"sha": "06fbbda3d9e2298b3c144ddcdd10eba2e6572416", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -24,7 +24,7 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n+        FakeRead(ForMatchedPlace(None), _3); // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n@@ -51,7 +51,7 @@ fn main() -> () {\n     }\n \n     bb8: {\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n         StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21"}, {"sha": "2e6783b7f3c9d9987f5afdf08bc80ff284d476f9", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25"}, {"sha": "2e6783b7f3c9d9987f5afdf08bc80ff284d476f9", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -38,7 +38,7 @@ fn main() -> () {\n         _2 = [move _3, move _4];         // scope 1 at $DIR/issue-72181.rs:26:13: 26:43\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n         StorageDead(_3);                 // scope 1 at $DIR/issue-72181.rs:26:42: 26:43\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_5);                 // scope 2 at $DIR/issue-72181.rs:27:13: 27:30\n         StorageLive(_6);                 // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25"}, {"sha": "7def08ece220b09d7babc4741428ada79e1ee3e3", "filename": "src/test/mir-opt/issue_72181_1.f.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -9,7 +9,7 @@ fn f(_1: Void) -> ! {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n         StorageLive(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n     }\n "}, {"sha": "3c26b20c35e2d79fc4a033ffd5cd382a9e55b7d3", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -29,7 +29,7 @@ fn main() -> () {\n \n     bb1: {\n         StorageDead(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:43: 17:44\n-        FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-72181-1.rs:16:12: 16:16\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n         StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8"}, {"sha": "99c7ac8d5b708c4e7e076ec359e6f8699fa0dde2", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -41,7 +41,7 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n-        FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+        FakeRead(ForLet(None), _6);      // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n         goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n     }"}, {"sha": "3395cbfbdfb3ac30c4b83c4a57352a0bb7332b38", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -31,7 +31,7 @@\n       }\n   \n       bb0: {\n--         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+-         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n -         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n +         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n       }"}, {"sha": "5af242376c9304066de78725f9c5cfb9acd0d119", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -27,7 +27,7 @@ fn full_tested_match() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n         switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }"}, {"sha": "a4ebf8a02466a5160d5dd27806afba0f3bf4418b", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -26,7 +26,7 @@ fn full_tested_match2() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n         switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }"}, {"sha": "5de52b324f43ffd2813cca70ff7428ade62930af", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -37,7 +37,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }"}, {"sha": "5bb910947ca2523556cea829e733822e11189d7f", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -21,12 +21,12 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/match_test.rs:7:9: 7:10\n         _1 = const 3_i32;                // scope 0 at $DIR/match_test.rs:7:13: 7:14\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/match_test.rs:7:9: 7:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/match_test.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         _2 = const true;                 // scope 1 at $DIR/match_test.rs:8:13: 8:17\n-        FakeRead(ForLet, _2);            // scope 1 at $DIR/match_test.rs:8:9: 8:10\n+        FakeRead(ForLet(None), _2);      // scope 1 at $DIR/match_test.rs:8:9: 8:10\n         StorageLive(_3);                 // scope 2 at $DIR/match_test.rs:12:5: 17:6\n-        FakeRead(ForMatchedPlace, _1);   // scope 2 at $DIR/match_test.rs:12:11: 12:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 2 at $DIR/match_test.rs:12:11: 12:12\n         _6 = Le(const 0_i32, _1);        // scope 2 at $DIR/match_test.rs:13:9: 13:14\n         switchInt(move _6) -> [false: bb4, otherwise: bb1]; // scope 2 at $DIR/match_test.rs:13:9: 13:14\n     }"}, {"sha": "39e6cee11b4c9c8a6e9fca6a08e2316f1f2a58d0", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -46,7 +46,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         _1 = [const Const(Value(Scalar(0x00000001)): usize), const Const(Value(Scalar(0x00000002)): usize), const Const(Value(Scalar(0x00000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n@@ -57,10 +57,10 @@ fn main() -> () {\n \n     bb1: {\n         _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6"}, {"sha": "6021b6529f911f81110faf21750685aad4452d35", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -46,7 +46,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n@@ -57,10 +57,10 @@ fn main() -> () {\n \n     bb1: {\n         _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6"}, {"sha": "f54c8f8ab4a2e2ba60f1946669d8b1b61a05da42", "filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -36,7 +36,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n         AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/receiver-ptr-mutability.rs:14:14: 14:23\n         StorageLive(_2);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n         StorageLive(_3);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n@@ -63,7 +63,7 @@ fn main() -> () {\n         _7 = &_8;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:18:35: 18:41\n         _6 = &_7;                        // scope 1 at $DIR/receiver-ptr-mutability.rs:18:34: 18:41\n         _5 = &(*_6);                     // scope 1 at $DIR/receiver-ptr-mutability.rs:18:34: 18:41\n-        FakeRead(ForLet, _5);            // scope 1 at $DIR/receiver-ptr-mutability.rs:18:9: 18:16\n+        FakeRead(ForLet(None), _5);      // scope 1 at $DIR/receiver-ptr-mutability.rs:18:9: 18:16\n         AscribeUserType(_5, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 1 at $DIR/receiver-ptr-mutability.rs:18:18: 18:31\n         StorageDead(_6);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:18:41: 18:42\n         StorageLive(_10);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16"}, {"sha": "4aa388fc67bd0204208e5795f831e03a17d663e8", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -13,7 +13,7 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n   \n       bb0: {\n--         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n           _3 = discriminant(_1);           // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n           switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16"}, {"sha": "841cca7c381f78670161de9738aff47375aaed64", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -5,7 +5,7 @@ fn match_bool(_1: bool) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n         switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n "}, {"sha": "841cca7c381f78670161de9738aff47375aaed64", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -5,7 +5,7 @@ fn match_bool(_1: bool) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n         switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n "}, {"sha": "e02580135af38f3f9a02d8745b52b024052d91c9", "filename": "src/test/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -39,7 +39,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n         _1 = const 0_i32;                // scope 0 at $DIR/storage_ranges.rs:4:13: 4:14\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/storage_ranges.rs:4:9: 4:10\n         StorageLive(_2);                 // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n         StorageLive(_3);                 // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n         StorageLive(_4);                 // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n@@ -48,14 +48,14 @@ fn main() -> () {\n         _4 = Option::<i32>::Some(move _5); // scope 1 at $DIR/storage_ranges.rs:6:18: 6:25\n         StorageDead(_5);                 // scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n         _3 = &_4;                        // scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n-        FakeRead(ForLet, _3);            // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n+        FakeRead(ForLet(None), _3);      // scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n         _2 = const ();                   // scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n         StorageDead(_4);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_3);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_2);                 // scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageLive(_6);                 // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _6 = const 1_i32;                // scope 1 at $DIR/storage_ranges.rs:8:13: 8:14\n-        FakeRead(ForLet, _6);            // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n+        FakeRead(ForLet(None), _6);      // scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n         _0 = const ();                   // scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n         StorageDead(_6);                 // scope 1 at $DIR/storage_ranges.rs:9:1: 9:2\n         StorageDead(_1);                 // scope 0 at $DIR/storage_ranges.rs:9:1: 9:2"}, {"sha": "7f81d9fc482ff91e17445f060855618925bc9e98", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -48,7 +48,7 @@ fn move_out_by_subslice() -> () {\n \n     bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2"}, {"sha": "62ab494c066285935830d66237b7b9bcba83a4bc", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -48,7 +48,7 @@ fn move_out_from_end() -> () {\n \n     bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n+        FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2"}, {"sha": "dac4d93499dc2e7c31a653a25a9673f7fc9d5d04", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -212,7 +212,7 @@ fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statemen\n             check_rvalue(tcx, body, def_id, rval, span)\n         }\n \n-        StatementKind::FakeRead(_, place) |\n+        StatementKind::FakeRead(box (_, place)) => check_place(tcx, *place, span, body),\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n "}, {"sha": "480916018619dfb6b9fbcaed3e00b90df2da252f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -909,7 +909,8 @@ fn extract_gdb_version(full_version_line: &str) -> Option<u32> {\n     // This particular form is documented in the GNU coding standards:\n     // https://www.gnu.org/prep/standards/html_node/_002d_002dversion.html#g_t_002d_002dversion\n \n-    let mut splits = full_version_line.rsplit(' ');\n+    let unbracketed_part = full_version_line.split('[').next().unwrap();\n+    let mut splits = unbracketed_part.trim_end().rsplit(' ');\n     let version_string = splits.next().unwrap();\n \n     let mut splits = version_string.split('.');"}, {"sha": "e6725dba2605148289dbb87f04240a606442b253", "filename": "src/tools/compiletest/src/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad6a443cfee83e1f7d29c9ec0de26143c54a617/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs?ref=8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "patch": "@@ -39,6 +39,9 @@ fn test_extract_gdb_version() {\n         7012000: \"GNU gdb (GDB) 7.12\",\n         7012000: \"GNU gdb (GDB) 7.12.20161027-git\",\n         7012050: \"GNU gdb (GDB) 7.12.50.20161027-git\",\n+\n+        9002000: \"GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2\",\n+        10001000: \"GNU gdb (GDB) 10.1 [GDB v10.1 for FreeBSD]\",\n     }\n }\n "}]}