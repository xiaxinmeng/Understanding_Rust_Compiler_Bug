{"sha": "759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OWY4YzgzZTUzYmI3MjgwNGNiNGM1NzhhMDFiMDlmYzJkY2Y0ZmE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-12T23:34:01Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-18T00:53:22Z"}, "message": "Make `ItemTreeId` its own type", "tree": {"sha": "e8fad4c250ba1c9578065f5781ecdfd3c282f437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fad4c250ba1c9578065f5781ecdfd3c282f437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "html_url": "https://github.com/rust-lang/rust/commit/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5632e61f79ff8827816ccfab9f01ce2e349f3144", "url": "https://api.github.com/repos/rust-lang/rust/commits/5632e61f79ff8827816ccfab9f01ce2e349f3144", "html_url": "https://github.com/rust-lang/rust/commit/5632e61f79ff8827816ccfab9f01ce2e349f3144"}], "stats": {"total": 114, "additions": 77, "deletions": 37}, "files": [{"sha": "15651bb2222ed5b58ee1fd890e02e1ca2d5677cb", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "patch": "@@ -574,7 +574,7 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn scope_for_def(&self, def: Trait) -> SemanticsScope<'db> {\n-        let file_id = self.db.lookup_intern_trait(def.id).id.file_id;\n+        let file_id = self.db.lookup_intern_trait(def.id).id.file_id();\n         let resolver = def.id.resolver(self.db.upcast());\n         SemanticsScope { db: self.db, file_id, resolver }\n     }"}, {"sha": "58e35353bc5f2193ea27f75e1f11dd81b82087be", "filename": "crates/hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fadt.rs?ref=759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "patch": "@@ -94,7 +94,7 @@ impl StructData {\n     pub(crate) fn struct_data_query(db: &dyn DefDatabase, id: StructId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let krate = loc.container.krate;\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.krate].cfg_options.clone();\n \n@@ -110,7 +110,7 @@ impl StructData {\n     pub(crate) fn union_data_query(db: &dyn DefDatabase, id: UnionId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let krate = loc.container.krate;\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.krate].cfg_options.clone();\n \n@@ -130,7 +130,7 @@ impl EnumData {\n     pub(crate) fn enum_data_query(db: &dyn DefDatabase, e: EnumId) -> Arc<EnumData> {\n         let loc = e.lookup(db);\n         let krate = loc.container.krate;\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let cfg_options = db.crate_graph()[krate].cfg_options.clone();\n \n         let enum_ = &item_tree[loc.id.value];"}, {"sha": "e4c84afbfa1d8ee6070447940f4c5a6e2fb3fff3", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "patch": "@@ -530,7 +530,7 @@ where\n }\n \n fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase) -> RawAttrs {\n-    let tree = db.item_tree(id.file_id);\n+    let tree = id.item_tree(db);\n     let mod_item = N::id_to_mod_item(id.value);\n     tree.raw_attrs(mod_item.into()).clone()\n }"}, {"sha": "f1772ea3d50170312422ec7bb9e44c9f7f7a26a0", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "patch": "@@ -38,7 +38,7 @@ impl FunctionData {\n         let krate = loc.container.module(db).krate;\n         let crate_graph = db.crate_graph();\n         let cfg_options = &crate_graph[krate].cfg_options;\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let func = &item_tree[loc.id.value];\n \n         let enabled_params = func\n@@ -89,7 +89,7 @@ impl TypeAliasData {\n         typ: TypeAliasId,\n     ) -> Arc<TypeAliasData> {\n         let loc = typ.lookup(db);\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let typ = &item_tree[loc.id.value];\n \n         Arc::new(TypeAliasData {\n@@ -115,23 +115,23 @@ pub struct TraitData {\n impl TraitData {\n     pub(crate) fn trait_data_query(db: &dyn DefDatabase, tr: TraitId) -> Arc<TraitData> {\n         let tr_loc = tr.lookup(db);\n-        let item_tree = db.item_tree(tr_loc.id.file_id);\n+        let item_tree = tr_loc.id.item_tree(db);\n         let tr_def = &item_tree[tr_loc.id.value];\n         let name = tr_def.name.clone();\n         let is_auto = tr_def.is_auto;\n         let is_unsafe = tr_def.is_unsafe;\n         let module_id = tr_loc.container;\n         let container = AssocContainerId::TraitId(tr);\n-        let mut expander = Expander::new(db, tr_loc.id.file_id, module_id);\n         let visibility = item_tree[tr_def.visibility].clone();\n         let bounds = tr_def.bounds.clone();\n+        let mut expander = Expander::new(db, tr_loc.id.file_id(), module_id);\n \n         let items = collect_items(\n             db,\n             module_id,\n             &mut expander,\n             tr_def.items.iter().copied(),\n-            tr_loc.id.file_id,\n+            tr_loc.id.file_id(),\n             container,\n             100,\n         );\n@@ -167,21 +167,21 @@ impl ImplData {\n         let _p = profile::span(\"impl_data_query\");\n         let impl_loc = id.lookup(db);\n \n-        let item_tree = db.item_tree(impl_loc.id.file_id);\n+        let item_tree = impl_loc.id.item_tree(db);\n         let impl_def = &item_tree[impl_loc.id.value];\n         let target_trait = impl_def.target_trait.map(|id| item_tree[id].clone());\n         let target_type = item_tree[impl_def.target_type].clone();\n         let is_negative = impl_def.is_negative;\n         let module_id = impl_loc.container;\n         let container = AssocContainerId::ImplId(id);\n-        let mut expander = Expander::new(db, impl_loc.id.file_id, module_id);\n+        let mut expander = Expander::new(db, impl_loc.id.file_id(), module_id);\n \n         let items = collect_items(\n             db,\n             module_id,\n             &mut expander,\n             impl_def.items.iter().copied(),\n-            impl_loc.id.file_id,\n+            impl_loc.id.file_id(),\n             container,\n             100,\n         );\n@@ -202,7 +202,7 @@ pub struct ConstData {\n impl ConstData {\n     pub(crate) fn const_data_query(db: &dyn DefDatabase, konst: ConstId) -> Arc<ConstData> {\n         let loc = konst.lookup(db);\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let konst = &item_tree[loc.id.value];\n \n         Arc::new(ConstData {\n@@ -225,7 +225,7 @@ pub struct StaticData {\n impl StaticData {\n     pub(crate) fn static_data_query(db: &dyn DefDatabase, konst: StaticId) -> Arc<StaticData> {\n         let node = konst.lookup(db);\n-        let item_tree = db.item_tree(node.id.file_id);\n+        let item_tree = node.id.item_tree(db);\n         let statik = &item_tree[node.id.value];\n \n         Arc::new(StaticData {"}, {"sha": "7c6cbff118e79dc2bc3ebb2b4556381c940b32b6", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "patch": "@@ -97,43 +97,43 @@ impl GenericParams {\n         let generics = match def {\n             GenericDefId::FunctionId(id) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::StructId(id)) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::EnumId(id)) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::UnionId(id)) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::TraitId(id) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::TypeAliasId(id) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::ImplId(id) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }"}, {"sha": "8383780e07f1fb748d76021c80de85d08bb23118", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "patch": "@@ -401,7 +401,47 @@ impl<N: ItemTreeNode> fmt::Debug for FileItemTreeId<N> {\n     }\n }\n \n-pub type ItemTreeId<N> = InFile<FileItemTreeId<N>>;\n+#[derive(Debug)]\n+pub struct ItemTreeId<N: ItemTreeNode> {\n+    file: HirFileId,\n+    pub value: FileItemTreeId<N>,\n+}\n+\n+impl<N: ItemTreeNode> ItemTreeId<N> {\n+    pub fn new(file: HirFileId, idx: FileItemTreeId<N>) -> Self {\n+        Self { file, value: idx }\n+    }\n+\n+    pub fn file_id(self) -> HirFileId {\n+        self.file\n+    }\n+\n+    pub fn item_tree(self, db: &dyn DefDatabase) -> Arc<ItemTree> {\n+        db.item_tree(self.file)\n+    }\n+}\n+\n+impl<N: ItemTreeNode> Copy for ItemTreeId<N> {}\n+impl<N: ItemTreeNode> Clone for ItemTreeId<N> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<N: ItemTreeNode> PartialEq for ItemTreeId<N> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.file == other.file && self.value == other.value\n+    }\n+}\n+\n+impl<N: ItemTreeNode> Eq for ItemTreeId<N> {}\n+\n+impl<N: ItemTreeNode> Hash for ItemTreeId<N> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.file.hash(state);\n+        self.value.hash(state);\n+    }\n+}\n \n macro_rules! mod_items {\n     ( $( $typ:ident in $fld:ident -> $ast:ty ),+ $(,)? ) => {"}, {"sha": "7ca4299b9027de4320858a4b2345b061fd3233ec", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "patch": "@@ -951,21 +951,21 @@ impl DefCollector<'_> {\n         let mut diagnosed_extern_crates = FxHashSet::default();\n         for directive in &self.unresolved_imports {\n             if let ImportSource::ExternCrate(krate) = directive.import.source {\n-                let item_tree = self.db.item_tree(krate.file_id);\n+                let item_tree = krate.item_tree(self.db);\n                 let extern_crate = &item_tree[krate.value];\n \n                 diagnosed_extern_crates.insert(extern_crate.name.clone());\n \n                 self.def_map.diagnostics.push(DefDiagnostic::unresolved_extern_crate(\n                     directive.module_id,\n-                    InFile::new(krate.file_id, extern_crate.ast_id),\n+                    InFile::new(krate.file_id(), extern_crate.ast_id),\n                 ));\n             }\n         }\n \n         for directive in &self.unresolved_imports {\n             if let ImportSource::Import(import) = &directive.import.source {\n-                let item_tree = self.db.item_tree(import.file_id);\n+                let item_tree = import.item_tree(self.db);\n                 let import_data = &item_tree[import.value];\n \n                 match (import_data.path.segments().first(), &import_data.path.kind) {\n@@ -979,7 +979,7 @@ impl DefCollector<'_> {\n \n                 self.def_map.diagnostics.push(DefDiagnostic::unresolved_import(\n                     directive.module_id,\n-                    InFile::new(import.file_id, import_data.ast_id),\n+                    InFile::new(import.file_id(), import_data.ast_id),\n                     import_data.index,\n                 ));\n             }\n@@ -1055,7 +1055,7 @@ impl ModCollector<'_, '_> {\n                             self.def_collector.db,\n                             krate,\n                             &self.item_tree,\n-                            InFile::new(self.file_id, import_id),\n+                            ItemTreeId::new(self.file_id, import_id),\n                         ),\n                         status: PartialResolvedImport::Unresolved,\n                     })\n@@ -1067,7 +1067,7 @@ impl ModCollector<'_, '_> {\n                             self.def_collector.db,\n                             krate,\n                             &self.item_tree,\n-                            InFile::new(self.file_id, import_id),\n+                            ItemTreeId::new(self.file_id, import_id),\n                         ),\n                         status: PartialResolvedImport::Unresolved,\n                     })"}, {"sha": "24e57b46922d6b4fbdf0f54e3dc9fb45102c5040", "filename": "crates/hir_def/src/src.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759f8c83e53bb72804cb4c578a01b09fc2dcf4fa/crates%2Fhir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fsrc.rs?ref=759f8c83e53bb72804cb4c578a01b09fc2dcf4fa", "patch": "@@ -14,25 +14,25 @@ impl<N: ItemTreeNode> HasSource for AssocItemLoc<N> {\n     type Value = N::Source;\n \n     fn source(&self, db: &dyn DefDatabase) -> InFile<N::Source> {\n-        let tree = db.item_tree(self.id.file_id);\n-        let ast_id_map = db.ast_id_map(self.id.file_id);\n-        let root = db.parse_or_expand(self.id.file_id).unwrap();\n+        let tree = self.id.item_tree(db);\n+        let ast_id_map = db.ast_id_map(self.id.file_id());\n+        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n         let node = &tree[self.id.value];\n \n-        InFile::new(self.id.file_id, ast_id_map.get(node.ast_id()).to_node(&root))\n+        InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))\n     }\n }\n \n impl<N: ItemTreeNode> HasSource for ItemLoc<N> {\n     type Value = N::Source;\n \n     fn source(&self, db: &dyn DefDatabase) -> InFile<N::Source> {\n-        let tree = db.item_tree(self.id.file_id);\n-        let ast_id_map = db.ast_id_map(self.id.file_id);\n-        let root = db.parse_or_expand(self.id.file_id).unwrap();\n+        let tree = self.id.item_tree(db);\n+        let ast_id_map = db.ast_id_map(self.id.file_id());\n+        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n         let node = &tree[self.id.value];\n \n-        InFile::new(self.id.file_id, ast_id_map.get(node.ast_id()).to_node(&root))\n+        InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))\n     }\n }\n "}]}