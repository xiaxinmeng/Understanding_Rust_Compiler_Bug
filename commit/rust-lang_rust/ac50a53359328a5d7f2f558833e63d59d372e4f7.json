{"sha": "ac50a53359328a5d7f2f558833e63d59d372e4f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNTBhNTMzNTkzMjhhNWQ3ZjJmNTU4ODMzZTYzZDU5ZDM3MmU0Zjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-27T21:35:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-27T21:35:08Z"}, "message": "Auto merge of #88328 - fee1-dead:not-quite-const, r=oli-obk\n\nIntroduce `~const`\n\n - [x] Removed `?const` and change uses of `?const`\n - [x] Added `~const` to the AST. It is gated behind const_trait_impl.\n - [x] Validate `~const` in ast_validation.\n - [x] Update UI Tests\n - [x] Add enum `BoundConstness` (With variants `NotConst` and\n `ConstIfConst` allowing future extensions)\n - [x] Adjust trait selection and pre-existing code to use `BoundConstness`.\n - [ ] Optional steps for this PR\n      - [x] Fix #88155\n      - [x] ~~Do something with constness bounds in chalk~~ Must be done to rust-lang/chalk (just tried to refactor, there are a lot of errors to resolve :( )\n      - [ ] Adjust Error messages for `~const` bounds that can't be satisfied.\n\nr? `@oli-obk`", "tree": {"sha": "11955536eff1fbbb21e8774cd5b6a795166eabf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11955536eff1fbbb21e8774cd5b6a795166eabf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac50a53359328a5d7f2f558833e63d59d372e4f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac50a53359328a5d7f2f558833e63d59d372e4f7", "html_url": "https://github.com/rust-lang/rust/commit/ac50a53359328a5d7f2f558833e63d59d372e4f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac50a53359328a5d7f2f558833e63d59d372e4f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "html_url": "https://github.com/rust-lang/rust/commit/dfd84729d6b7060edcb66694e6e44aae9e2ac57d"}, {"sha": "2d7dbf2e05284aba0a99c40db007c512631872ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7dbf2e05284aba0a99c40db007c512631872ca", "html_url": "https://github.com/rust-lang/rust/commit/2d7dbf2e05284aba0a99c40db007c512631872ca"}], "stats": {"total": 1046, "additions": 501, "deletions": 545}, "files": [{"sha": "2b86128b3f793b4545426a0257eb8cd39b012b9b", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -284,7 +284,7 @@ impl ParenthesizedArgs {\n \n pub use crate::node_id::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n \n-/// A modifier on a bound, e.g., `?Sized` or `?const Trait`.\n+/// A modifier on a bound, e.g., `?Sized` or `~const Trait`.\n ///\n /// Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug)]\n@@ -295,10 +295,10 @@ pub enum TraitBoundModifier {\n     /// `?Trait`\n     Maybe,\n \n-    /// `?const Trait`\n+    /// `~const Trait`\n     MaybeConst,\n \n-    /// `?const ?Trait`\n+    /// `~const ?Trait`\n     //\n     // This parses but will be rejected during AST validation.\n     MaybeConstMaybe,"}, {"sha": "948d74e3bf8ebd307fd25dac4389945aa9b5a198", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1414,7 +1414,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                     ref ty,\n                                     TraitBoundModifier::None | TraitBoundModifier::MaybeConst,\n                                 ) => Some(this.lower_poly_trait_ref(ty, itctx.reborrow())),\n-                                // `?const ?Bound` will cause an error during AST validation\n+                                // `~const ?Bound` will cause an error during AST validation\n                                 // anyways, so treat it like `?Bound` as compilation proceeds.\n                                 GenericBound::Trait(\n                                     _,"}, {"sha": "c0ea710fdcb4e352debdcac7c97fa3aa3d4ebf8f", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 90, "deletions": 51, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -33,24 +33,6 @@ enum SelfSemantic {\n     No,\n }\n \n-/// A syntactic context that disallows certain kinds of bounds (e.g., `?Trait` or `?const Trait`).\n-#[derive(Clone, Copy)]\n-enum BoundContext {\n-    ImplTrait,\n-    TraitBounds,\n-    TraitObject,\n-}\n-\n-impl BoundContext {\n-    fn description(&self) -> &'static str {\n-        match self {\n-            Self::ImplTrait => \"`impl Trait`\",\n-            Self::TraitBounds => \"supertraits\",\n-            Self::TraitObject => \"trait objects\",\n-        }\n-    }\n-}\n-\n struct AstValidator<'a> {\n     session: &'a Session,\n \n@@ -60,18 +42,16 @@ struct AstValidator<'a> {\n     /// Are we inside a trait impl?\n     in_trait_impl: bool,\n \n+    in_const_trait_impl: bool,\n+\n     has_proc_macro_decls: bool,\n \n     /// Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n     /// Nested `impl Trait` _is_ allowed in associated type position,\n     /// e.g., `impl Iterator<Item = impl Debug>`.\n     outer_impl_trait: Option<Span>,\n \n-    /// Keeps track of the `BoundContext` as we recurse.\n-    ///\n-    /// This is used to forbid `?const Trait` bounds in, e.g.,\n-    /// `impl Iterator<Item = Box<dyn ?const Trait>`.\n-    bound_context: Option<BoundContext>,\n+    is_tilde_const_allowed: bool,\n \n     /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     /// or `Foo::Bar<impl Trait>`\n@@ -88,10 +68,18 @@ struct AstValidator<'a> {\n }\n \n impl<'a> AstValidator<'a> {\n-    fn with_in_trait_impl(&mut self, is_in: bool, f: impl FnOnce(&mut Self)) {\n+    fn with_in_trait_impl(\n+        &mut self,\n+        is_in: bool,\n+        constness: Option<Const>,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n         let old = mem::replace(&mut self.in_trait_impl, is_in);\n+        let old_const =\n+            mem::replace(&mut self.in_const_trait_impl, matches!(constness, Some(Const::Yes(_))));\n         f(self);\n         self.in_trait_impl = old;\n+        self.in_const_trait_impl = old_const;\n     }\n \n     fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n@@ -100,6 +88,18 @@ impl<'a> AstValidator<'a> {\n         self.is_impl_trait_banned = old;\n     }\n \n+    fn with_tilde_const_allowed(&mut self, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.is_tilde_const_allowed, true);\n+        f(self);\n+        self.is_tilde_const_allowed = old;\n+    }\n+\n+    fn with_banned_tilde_const(&mut self, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.is_tilde_const_allowed, false);\n+        f(self);\n+        self.is_tilde_const_allowed = old;\n+    }\n+\n     fn with_let_allowed(&mut self, allowed: bool, f: impl FnOnce(&mut Self, bool)) {\n         let old = mem::replace(&mut self.is_let_allowed, allowed);\n         f(self, old);\n@@ -130,19 +130,13 @@ impl<'a> AstValidator<'a> {\n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         if outer.is_some() {\n-            self.with_bound_context(BoundContext::ImplTrait, |this| f(this));\n+            self.with_banned_tilde_const(f);\n         } else {\n-            f(self)\n+            f(self);\n         }\n         self.outer_impl_trait = old;\n     }\n \n-    fn with_bound_context(&mut self, ctx: BoundContext, f: impl FnOnce(&mut Self)) {\n-        let old = self.bound_context.replace(ctx);\n-        f(self);\n-        self.bound_context = old;\n-    }\n-\n     fn visit_assoc_ty_constraint_from_generic_args(&mut self, constraint: &'a AssocTyConstraint) {\n         match constraint.kind {\n             AssocTyConstraintKind::Equality { .. } => {}\n@@ -164,9 +158,7 @@ impl<'a> AstValidator<'a> {\n             TyKind::ImplTrait(..) => {\n                 self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n             }\n-            TyKind::TraitObject(..) => {\n-                self.with_bound_context(BoundContext::TraitObject, |this| visit::walk_ty(this, t));\n-            }\n+            TyKind::TraitObject(..) => self.with_banned_tilde_const(|this| visit::walk_ty(this, t)),\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n                 //  - `Option<impl Trait>`\n@@ -1083,13 +1075,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 unsafety,\n                 polarity,\n                 defaultness: _,\n-                constness: _,\n-                generics: _,\n+                constness,\n+                ref generics,\n                 of_trait: Some(ref t),\n                 ref self_ty,\n-                items: _,\n+                ref items,\n             }) => {\n-                self.with_in_trait_impl(true, |this| {\n+                self.with_in_trait_impl(true, Some(constness), |this| {\n                     this.invalid_visibility(&item.vis, None);\n                     if let TyKind::Err = self_ty.kind {\n                         this.err_handler()\n@@ -1112,7 +1104,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                     }\n \n-                    visit::walk_item(this, item);\n+                    this.visit_vis(&item.vis);\n+                    this.visit_ident(item.ident);\n+                    if let Const::Yes(_) = constness {\n+                        this.with_tilde_const_allowed(|this| this.visit_generics(generics));\n+                    } else {\n+                        this.visit_generics(generics);\n+                    }\n+                    this.visit_trait_ref(t);\n+                    this.visit_ty(self_ty);\n+\n+                    walk_list!(this, visit_assoc_item, items, AssocCtxt::Impl);\n                 });\n                 return; // Avoid visiting again.\n             }\n@@ -1157,13 +1159,24 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n             }\n-            ItemKind::Fn(box FnKind(def, _, _, ref body)) => {\n+            ItemKind::Fn(box FnKind(def, ref sig, ref generics, ref body)) => {\n                 self.check_defaultness(item.span, def);\n \n                 if body.is_none() {\n                     let msg = \"free function without a body\";\n                     self.error_item_without_body(item.span, \"function\", msg, \" { <body> }\");\n                 }\n+                self.visit_vis(&item.vis);\n+                self.visit_ident(item.ident);\n+                if let Const::Yes(_) = sig.header.constness {\n+                    self.with_tilde_const_allowed(|this| this.visit_generics(generics));\n+                } else {\n+                    self.visit_generics(generics);\n+                }\n+                let kind = FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, body.as_deref());\n+                self.visit_fn(kind, item.span, item.id);\n+                walk_list!(self, visit_attribute, &item.attrs);\n+                return; // Avoid visiting again.\n             }\n             ItemKind::ForeignMod(ForeignMod { unsafety, .. }) => {\n                 let old_item = mem::replace(&mut self.extern_mod, Some(item));\n@@ -1206,9 +1219,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n                 self.visit_generics(generics);\n-                self.with_bound_context(BoundContext::TraitBounds, |this| {\n-                    walk_list!(this, visit_param_bound, bounds);\n-                });\n+                self.with_banned_tilde_const(|this| walk_list!(this, visit_param_bound, bounds));\n                 walk_list!(self, visit_assoc_item, trait_items, AssocCtxt::Trait);\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 return;\n@@ -1281,7 +1292,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             _ => {}\n         }\n \n-        visit::walk_item(self, item)\n+        visit::walk_item(self, item);\n     }\n \n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n@@ -1428,15 +1439,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_param_bound(&mut self, bound: &'a GenericBound) {\n         match bound {\n             GenericBound::Trait(_, TraitBoundModifier::MaybeConst) => {\n-                if let Some(ctx) = self.bound_context {\n-                    let msg = format!(\"`?const` is not permitted in {}\", ctx.description());\n-                    self.err_handler().span_err(bound.span(), &msg);\n+                if !self.is_tilde_const_allowed {\n+                    self.err_handler()\n+                        .struct_span_err(bound.span(), \"`~const` is not allowed here\")\n+                        .note(\"only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\")\n+                        .emit();\n                 }\n             }\n \n             GenericBound::Trait(_, TraitBoundModifier::MaybeConstMaybe) => {\n                 self.err_handler()\n-                    .span_err(bound.span(), \"`?const` and `?` are mutually exclusive\");\n+                    .span_err(bound.span(), \"`~const` and `?` are mutually exclusive\");\n             }\n \n             _ => {}\n@@ -1589,7 +1602,32 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             self.check_item_named(item.ident, \"const\");\n         }\n \n-        self.with_in_trait_impl(false, |this| visit::walk_assoc_item(this, item, ctxt));\n+        match item.kind {\n+            AssocItemKind::TyAlias(box TyAliasKind(_, ref generics, ref bounds, ref ty))\n+                if ctxt == AssocCtxt::Trait =>\n+            {\n+                self.visit_vis(&item.vis);\n+                self.visit_ident(item.ident);\n+                walk_list!(self, visit_attribute, &item.attrs);\n+                self.with_tilde_const_allowed(|this| {\n+                    this.visit_generics(generics);\n+                    walk_list!(this, visit_param_bound, bounds);\n+                });\n+                walk_list!(self, visit_ty, ty);\n+            }\n+            AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, ref body))\n+                if self.in_const_trait_impl =>\n+            {\n+                self.visit_vis(&item.vis);\n+                self.visit_ident(item.ident);\n+                self.with_tilde_const_allowed(|this| this.visit_generics(generics));\n+                let kind =\n+                    FnKind::Fn(FnCtxt::Assoc(ctxt), item.ident, sig, &item.vis, body.as_deref());\n+                self.visit_fn(kind, item.span, item.id);\n+            }\n+            _ => self\n+                .with_in_trait_impl(false, None, |this| visit::walk_assoc_item(this, item, ctxt)),\n+        }\n     }\n }\n \n@@ -1683,9 +1721,10 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n         session,\n         extern_mod: None,\n         in_trait_impl: false,\n+        in_const_trait_impl: false,\n         has_proc_macro_decls: false,\n         outer_impl_trait: None,\n-        bound_context: None,\n+        is_tilde_const_allowed: false,\n         is_impl_trait_banned: false,\n         is_assoc_ty_bound_banned: false,\n         is_let_allowed: false,"}, {"sha": "557271e32adb492d57908229c00febc6e5be6f2f", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -656,7 +656,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(more_qualified_paths, \"usage of qualified paths in this context is experimental\");\n     gate_all!(generators, \"yield syntax is experimental\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");\n-    gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");"}, {"sha": "5ae106353da616286d889110fcc6d61a0e5a7c43", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -515,9 +515,6 @@ declare_features! (\n     /// Allows `impl const Trait for T` syntax.\n     (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n \n-    /// Allows `T: ?const Trait` syntax in bounds.\n-    (incomplete, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None),\n-\n     /// Allows the use of `no_sanitize` attribute.\n     (active, no_sanitize, \"1.42.0\", Some(39699), None),\n "}, {"sha": "a8aa3c606c6c0d249dfe4024f41e3dfe74f0f15b", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -123,6 +123,9 @@ declare_features! (\n     /// Allows overlapping impls of marker traits.\n     (removed, overlapping_marker_traits, \"1.42.0\", Some(29864), None,\n      Some(\"removed in favor of `#![feature(marker_trait_attr)]`\")),\n+    /// Allows `T: ?const Trait` syntax in bounds.\n+    (removed, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None,\n+     Some(\"Removed in favor of `~const` bound in #![feature(const_trait_impl)]\")),\n     /// Allows `#[no_debug]`.\n     (removed, no_debug, \"1.43.0\", Some(29721), None, Some(\"removed due to lack of demand\")),\n     /// Allows comparing raw pointers during const eval."}, {"sha": "676cb7fe41d979c2525208ee60294654b92fa94f", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -17,7 +17,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::Constness;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n@@ -497,7 +496,7 @@ pub enum ImplSource<'tcx, N> {\n     /// for some type parameter. The `Vec<N>` represents the\n     /// obligations incurred from normalizing the where-clause (if\n     /// any).\n-    Param(Vec<N>, Constness),\n+    Param(Vec<N>, ty::BoundConstness),\n \n     /// Virtual calls through an object.\n     Object(ImplSourceObjectData<'tcx, N>),"}, {"sha": "796ca650bdd77f55bd1f7c6df12175c39a300904", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -33,7 +33,7 @@ impl<T> ExpectedFound<T> {\n #[derive(Clone, Debug, TypeFoldable)]\n pub enum TypeError<'tcx> {\n     Mismatch,\n-    ConstnessMismatch(ExpectedFound<hir::Constness>),\n+    ConstnessMismatch(ExpectedFound<ty::BoundConstness>),\n     UnsafetyMismatch(ExpectedFound<hir::Unsafety>),\n     AbiMismatch(ExpectedFound<abi::Abi>),\n     Mutability,\n@@ -102,7 +102,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             CyclicConst(_) => write!(f, \"encountered a self-referencing constant\"),\n             Mismatch => write!(f, \"types differ\"),\n             ConstnessMismatch(values) => {\n-                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+                write!(f, \"expected {} bound, found {} bound\", values.expected, values.found)\n             }\n             UnsafetyMismatch(values) => {\n                 write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)"}, {"sha": "8aa27d4ca53e3fe21c3c0ff6c5273bc1927c839b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_INDEX};\n-use rustc_hir::{Constness, Node};\n+use rustc_hir::Node;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n@@ -181,6 +181,25 @@ pub enum Visibility {\n     Invisible,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]\n+pub enum BoundConstness {\n+    /// `T: Trait`\n+    NotConst,\n+    /// `T: ~const Trait`\n+    ///\n+    /// Requires resolving to const only when we are in a const context.\n+    ConstIfConst,\n+}\n+\n+impl fmt::Display for BoundConstness {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::NotConst => f.write_str(\"normal\"),\n+            Self::ConstIfConst => f.write_str(\"`~const`\"),\n+        }\n+    }\n+}\n+\n #[derive(\n     Clone,\n     Debug,\n@@ -457,10 +476,6 @@ pub enum PredicateKind<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n     /// would be the type parameters.\n-    ///\n-    /// A trait predicate will have `Constness::Const` if it originates\n-    /// from a bound on a `const fn` without the `?const` opt-out (e.g.,\n-    /// `const fn foobar<Foo: Bar>() {}`).\n     Trait(TraitPredicate<'tcx>),\n \n     /// `where 'a: 'b`\n@@ -632,10 +647,7 @@ impl<'tcx> Predicate<'tcx> {\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>,\n \n-    /// A trait predicate will have `Constness::Const` if it originates\n-    /// from a bound on a `const fn` without the `?const` opt-out (e.g.,\n-    /// `const fn foobar<Foo: Bar>() {}`).\n-    pub constness: hir::Constness,\n+    pub constness: BoundConstness,\n }\n \n pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n@@ -1304,26 +1316,26 @@ impl<'tcx> ParamEnv<'tcx> {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n pub struct ConstnessAnd<T> {\n-    pub constness: Constness,\n+    pub constness: BoundConstness,\n     pub value: T,\n }\n \n // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that\n // the constness of trait bounds is being propagated correctly.\n pub trait WithConstness: Sized {\n     #[inline]\n-    fn with_constness(self, constness: Constness) -> ConstnessAnd<Self> {\n+    fn with_constness(self, constness: BoundConstness) -> ConstnessAnd<Self> {\n         ConstnessAnd { constness, value: self }\n     }\n \n     #[inline]\n-    fn with_const(self) -> ConstnessAnd<Self> {\n-        self.with_constness(Constness::Const)\n+    fn with_const_if_const(self) -> ConstnessAnd<Self> {\n+        self.with_constness(BoundConstness::ConstIfConst)\n     }\n \n     #[inline]\n     fn without_const(self) -> ConstnessAnd<Self> {\n-        self.with_constness(Constness::NotConst)\n+        self.with_constness(BoundConstness::NotConst)\n     }\n }\n "}, {"sha": "44981f171d50a2a9b53aec7de2474d4d90795b78", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -200,12 +200,12 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n     }\n }\n \n-impl<'tcx> Relate<'tcx> for ast::Constness {\n+impl<'tcx> Relate<'tcx> for ty::BoundConstness {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n-        a: ast::Constness,\n-        b: ast::Constness,\n-    ) -> RelateResult<'tcx, ast::Constness> {\n+        a: ty::BoundConstness,\n+        b: ty::BoundConstness,\n+    ) -> RelateResult<'tcx, ty::BoundConstness> {\n         if a != b {\n             Err(TypeError::ConstnessMismatch(expected_found(relation, a, b)))\n         } else {"}, {"sha": "89ad99d9f0794f6d9f7805a4d7c96bd86dbdf7c5", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -8,7 +8,6 @@ use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n-use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -155,8 +154,8 @@ impl fmt::Debug for ty::ParamConst {\n \n impl fmt::Debug for ty::TraitPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if let hir::Constness::Const = self.constness {\n-            write!(f, \"const \")?;\n+        if let ty::BoundConstness::ConstIfConst = self.constness {\n+            write!(f, \"~const \")?;\n         }\n         write!(f, \"TraitPredicate({:?})\", self.trait_ref)\n     }\n@@ -241,6 +240,7 @@ TrivialTypeFoldableAndLiftImpls! {\n     crate::traits::Reveal,\n     crate::ty::adjustment::AutoBorrowMutability,\n     crate::ty::AdtKind,\n+    crate::ty::BoundConstness,\n     // Including `BoundRegionKind` is a *bit* dubious, but direct\n     // references to bound region appear in `ty::Error`, and aren't\n     // really meant to be folded. In general, we can only fold a fully"}, {"sha": "65dd61b63295cf2eef68df4c1a982057a952eb93", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -878,7 +878,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n         self.map_bound(|trait_ref| ty::TraitPredicate {\n             trait_ref,\n-            constness: hir::Constness::NotConst,\n+            constness: ty::BoundConstness::NotConst,\n         })\n     }\n }"}, {"sha": "b501716a899752b41db2117da612e6ada703ff34", "filename": "compiler/rustc_mir/src/borrow_check/type_check/canonical.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fcanonical.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,6 +1,5 @@\n use std::fmt;\n \n-use rustc_hir as hir;\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::mir::ConstraintCategory;\n@@ -88,7 +87,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.prove_predicates(\n             Some(ty::PredicateKind::Trait(ty::TraitPredicate {\n                 trait_ref,\n-                constness: hir::Constness::NotConst,\n+                constness: ty::BoundConstness::NotConst,\n             })),\n             locations,\n             category,"}, {"sha": "2b748062cdf2319d3476a176fcd647e00f293f60", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 51, "deletions": 36, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -805,6 +805,8 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     }\n                 };\n \n+                let mut nonconst_call_permission = false;\n+\n                 // Attempting to call a trait method?\n                 if let Some(trait_id) = tcx.trait_of_item(callee) {\n                     trace!(\"attempting to call a trait method\");\n@@ -819,23 +821,54 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                         param_env,\n                         Binder::dummy(TraitPredicate {\n                             trait_ref,\n-                            constness: hir::Constness::Const,\n+                            constness: ty::BoundConstness::ConstIfConst,\n                         }),\n                     );\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {\n-                        let mut selcx = SelectionContext::new(&infcx);\n-                        selcx.select(&obligation).unwrap()\n+                        let mut selcx =\n+                            SelectionContext::with_constness(&infcx, hir::Constness::Const);\n+                        selcx.select(&obligation)\n                     });\n \n-                    // If the method is provided via a where-clause that does not use the `?const`\n-                    // opt-out, the call is allowed.\n-                    if let Some(ImplSource::Param(_, hir::Constness::Const)) = implsrc {\n-                        debug!(\n-                            \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n-                            trait_ref, param_env\n-                        );\n-                        return;\n+                    match implsrc {\n+                        Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => {\n+                            debug!(\n+                                \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n+                                trait_ref, param_env\n+                            );\n+                            return;\n+                        }\n+                        Ok(Some(ImplSource::UserDefined(data))) => {\n+                            let callee_name = tcx.item_name(callee);\n+                            if let Some(&did) = tcx\n+                                .associated_item_def_ids(data.impl_def_id)\n+                                .iter()\n+                                .find(|did| tcx.item_name(**did) == callee_name)\n+                            {\n+                                callee = did;\n+                            }\n+                        }\n+                        _ => {\n+                            if !tcx.is_const_fn_raw(callee) {\n+                                // At this point, it is only legal when the caller is marked with\n+                                // #[default_method_body_is_const], and the callee is in the same\n+                                // trait.\n+                                let callee_trait = tcx.trait_of_item(callee);\n+                                if callee_trait.is_some() {\n+                                    if tcx.has_attr(caller, sym::default_method_body_is_const) {\n+                                        if tcx.trait_of_item(caller) == callee_trait {\n+                                            nonconst_call_permission = true;\n+                                        }\n+                                    }\n+                                }\n+\n+                                if !nonconst_call_permission {\n+                                    self.check_op(ops::FnCallNonConst);\n+                                    return;\n+                                }\n+                            }\n+                        }\n                     }\n \n                     // Resolve a trait method call to its concrete implementation, which may be in a\n@@ -875,34 +908,16 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 let is_intrinsic = tcx.fn_sig(callee).abi() == RustIntrinsic;\n \n                 if !tcx.is_const_fn_raw(callee) {\n-                    let mut permitted = false;\n-\n-                    let callee_trait = tcx.trait_of_item(callee);\n-                    if let Some(trait_id) = callee_trait {\n-                        if tcx.has_attr(caller, sym::default_method_body_is_const) {\n-                            // permit call to non-const fn when caller has default_method_body_is_const..\n-                            if tcx.trait_of_item(caller) == callee_trait {\n-                                // ..and caller and callee are in the same trait.\n-                                permitted = true;\n-                            }\n-                        }\n-                        if !permitted {\n-                            // if trait's impls are all const, permit the call.\n-                            let mut const_impls = true;\n-                            tcx.for_each_relevant_impl(trait_id, substs.type_at(0), |imp| {\n-                                if const_impls {\n-                                    if let hir::Constness::NotConst = tcx.impl_constness(imp) {\n-                                        const_impls = false;\n-                                    }\n-                                }\n-                            });\n-                            if const_impls {\n-                                permitted = true;\n-                            }\n+                    if tcx.trait_of_item(callee).is_some() {\n+                        if tcx.has_attr(callee, sym::default_method_body_is_const) {\n+                            // To get to here we must have already found a const impl for the\n+                            // trait, but for it to still be non-const can be that the impl is\n+                            // using default method bodies.\n+                            nonconst_call_permission = true;\n                         }\n                     }\n \n-                    if !permitted {\n+                    if !nonconst_call_permission {\n                         self.check_op(ops::FnCallNonConst);\n                         return;\n                     }"}, {"sha": "299fc916ac97fa7802b2f6a6865877dc8a0744e7", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -11,12 +11,12 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym};\n \n-/// Any `?` or `?const` modifiers that appear at the start of a bound.\n+/// Any `?` or `~const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n     /// `?Trait`.\n     maybe: Option<Span>,\n \n-    /// `?const Trait`.\n+    /// `~const Trait`.\n     maybe_const: Option<Span>,\n }\n \n@@ -609,6 +609,7 @@ impl<'a> Parser<'a> {\n         || self.check_lifetime()\n         || self.check(&token::Not) // Used for error reporting only.\n         || self.check(&token::Question)\n+        || self.check(&token::Tilde)\n         || self.check_keyword(kw::For)\n         || self.check(&token::OpenDelim(token::Paren))\n     }\n@@ -655,7 +656,7 @@ impl<'a> Parser<'a> {\n         let inner_lo = self.token.span;\n         let is_negative = self.eat(&token::Not);\n \n-        let modifiers = self.parse_ty_bound_modifiers();\n+        let modifiers = self.parse_ty_bound_modifiers()?;\n         let bound = if self.token.is_lifetime() {\n             self.error_lt_bound_with_modifiers(modifiers);\n             self.parse_generic_lt_bound(lo, inner_lo, has_parens)?\n@@ -690,7 +691,7 @@ impl<'a> Parser<'a> {\n         if let Some(span) = modifiers.maybe_const {\n             self.struct_span_err(\n                 span,\n-                \"`?const` may only modify trait bounds, not lifetime bounds\",\n+                \"`~const` may only modify trait bounds, not lifetime bounds\",\n             )\n             .emit();\n         }\n@@ -721,34 +722,27 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    /// Parses the modifiers that may precede a trait in a bound, e.g. `?Trait` or `?const Trait`.\n+    /// Parses the modifiers that may precede a trait in a bound, e.g. `?Trait` or `~const Trait`.\n     ///\n     /// If no modifiers are present, this does not consume any tokens.\n     ///\n     /// ```\n-    /// TY_BOUND_MODIFIERS = \"?\" [\"const\" [\"?\"]]\n+    /// TY_BOUND_MODIFIERS = [\"~const\"] [\"?\"]\n     /// ```\n-    fn parse_ty_bound_modifiers(&mut self) -> BoundModifiers {\n-        if !self.eat(&token::Question) {\n-            return BoundModifiers { maybe: None, maybe_const: None };\n-        }\n-\n-        // `? ...`\n-        let first_question = self.prev_token.span;\n-        if !self.eat_keyword(kw::Const) {\n-            return BoundModifiers { maybe: Some(first_question), maybe_const: None };\n-        }\n+    fn parse_ty_bound_modifiers(&mut self) -> PResult<'a, BoundModifiers> {\n+        let maybe_const = if self.eat(&token::Tilde) {\n+            let tilde = self.prev_token.span;\n+            self.expect_keyword(kw::Const)?;\n+            let span = tilde.to(self.prev_token.span);\n+            self.sess.gated_spans.gate(sym::const_trait_impl, span);\n+            Some(span)\n+        } else {\n+            None\n+        };\n \n-        // `?const ...`\n-        let maybe_const = first_question.to(self.prev_token.span);\n-        self.sess.gated_spans.gate(sym::const_trait_bound_opt_out, maybe_const);\n-        if !self.eat(&token::Question) {\n-            return BoundModifiers { maybe: None, maybe_const: Some(maybe_const) };\n-        }\n+        let maybe = if self.eat(&token::Question) { Some(self.prev_token.span) } else { None };\n \n-        // `?const ? ...`\n-        let second_question = self.prev_token.span;\n-        BoundModifiers { maybe: Some(second_question), maybe_const: Some(maybe_const) }\n+        Ok(BoundModifiers { maybe, maybe_const })\n     }\n \n     /// Parses a type bound according to:\n@@ -757,7 +751,7 @@ impl<'a> Parser<'a> {\n     /// TY_BOUND_NOPAREN = [TY_BOUND_MODIFIERS] [for<LT_PARAM_DEFS>] SIMPLE_PATH\n     /// ```\n     ///\n-    /// For example, this grammar accepts `?const ?for<'a: 'b> m::Trait<'a>`.\n+    /// For example, this grammar accepts `~const ?for<'a: 'b> m::Trait<'a>`.\n     fn parse_generic_ty_bound(\n         &mut self,\n         lo: Span,"}, {"sha": "622c9edc4345035b2af384334f8109d424489ac8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -285,7 +285,7 @@ impl AutoTraitFinder<'tcx> {\n                 def_id: trait_did,\n                 substs: infcx.tcx.mk_substs_trait(ty, &[]),\n             },\n-            constness: hir::Constness::NotConst,\n+            constness: ty::BoundConstness::NotConst,\n         }));\n \n         let computed_preds = param_env.caller_bounds().iter();"}, {"sha": "17a4184c3c9ef92d734ce676477ad4e747a3340a", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -778,7 +778,10 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot(\n     let obligation = Obligation::new(\n         ObligationCause::dummy(),\n         ty::ParamEnv::reveal_all(),\n-        ty::Binder::dummy(ty::TraitPredicate { trait_ref, constness: hir::Constness::NotConst }),\n+        ty::Binder::dummy(ty::TraitPredicate {\n+            trait_ref,\n+            constness: ty::BoundConstness::NotConst,\n+        }),\n     );\n \n     let implsrc = tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "6fae8173985be82c233b0ce04dcac77e09b7e55c", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -8,7 +8,6 @@\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::Constness;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n@@ -75,7 +74,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ProjectionCandidate(idx) => {\n                 let obligations = self.confirm_projection_candidate(obligation, idx)?;\n                 // FIXME(jschievink): constness\n-                Ok(ImplSource::Param(obligations, Constness::NotConst))\n+                Ok(ImplSource::Param(obligations, ty::BoundConstness::NotConst))\n             }\n \n             ObjectCandidate(idx) => {\n@@ -113,7 +112,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // This indicates something like `Trait + Send: Send`. In this case, we know that\n                 // this holds because that's what the object type is telling us, and there's really\n                 // no additional obligations to prove and no types in particular to unify, etc.\n-                Ok(ImplSource::Param(Vec::new(), Constness::NotConst))\n+                Ok(ImplSource::Param(Vec::new(), ty::BoundConstness::NotConst))\n             }\n \n             BuiltinUnsizeCandidate => {"}, {"sha": "6cf1dabad8592316b4b99928035b290b4ffe3c17", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -32,7 +32,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::Constness;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n@@ -130,8 +129,8 @@ pub struct SelectionContext<'cx, 'tcx> {\n     /// and a negative impl\n     allow_negative_impls: bool,\n \n-    /// Do we only want const impls when we have a const trait predicate?\n-    const_impls_required: bool,\n+    /// Are we in a const context that needs `~const` bounds to be const?\n+    is_in_const_context: bool,\n \n     /// The mode that trait queries run in, which informs our error handling\n     /// policy. In essence, canonicalized queries need their errors propagated\n@@ -224,7 +223,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            const_impls_required: false,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -236,7 +235,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: true,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            const_impls_required: false,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -252,7 +251,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls,\n-            const_impls_required: false,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -268,7 +267,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            const_impls_required: false,\n+            is_in_const_context: false,\n             query_mode,\n         }\n     }\n@@ -283,7 +282,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            const_impls_required: matches!(constness, hir::Constness::Const),\n+            is_in_const_context: matches!(constness, hir::Constness::Const),\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -316,14 +315,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n+    /// Returns `true` if the trait predicate is considerd `const` to this selection context.\n+    pub fn is_trait_predicate_const(&self, pred: ty::TraitPredicate<'_>) -> bool {\n+        match pred.constness {\n+            ty::BoundConstness::ConstIfConst if self.is_in_const_context => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns `true` if the predicate is considered `const` to\n     /// this selection context.\n     pub fn is_predicate_const(&self, pred: ty::Predicate<'_>) -> bool {\n         match pred.kind().skip_binder() {\n-            ty::PredicateKind::Trait(ty::TraitPredicate {\n-                constness: hir::Constness::Const,\n-                ..\n-            }) if self.const_impls_required => true,\n+            ty::PredicateKind::Trait(pred) => self.is_trait_predicate_const(pred),\n             _ => false,\n         }\n     }\n@@ -1074,30 +1078,28 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n         let tcx = self.tcx();\n         // Respect const trait obligations\n-        if self.const_impls_required {\n-            if let hir::Constness::Const = obligation.predicate.skip_binder().constness {\n-                if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n-                    != tcx.lang_items().sized_trait()\n-                // const Sized bounds are skipped\n-                {\n-                    match candidate {\n-                        // const impl\n-                        ImplCandidate(def_id)\n-                            if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n-                        // const param\n-                        ParamCandidate(ty::ConstnessAnd {\n-                            constness: hir::Constness::Const,\n-                            ..\n-                        }) => {}\n-                        // auto trait impl\n-                        AutoImplCandidate(..) => {}\n-                        // generator, this will raise error in other places\n-                        // or ignore error with const_async_blocks feature\n-                        GeneratorCandidate => {}\n-                        _ => {\n-                            // reject all other types of candidates\n-                            return Err(Unimplemented);\n-                        }\n+        if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n+            if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n+                != tcx.lang_items().sized_trait()\n+            // const Sized bounds are skipped\n+            {\n+                match candidate {\n+                    // const impl\n+                    ImplCandidate(def_id)\n+                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                    // const param\n+                    ParamCandidate(ty::ConstnessAnd {\n+                        constness: ty::BoundConstness::ConstIfConst,\n+                        ..\n+                    }) => {}\n+                    // auto trait impl\n+                    AutoImplCandidate(..) => {}\n+                    // generator, this will raise error in other places\n+                    // or ignore error with const_async_blocks feature\n+                    GeneratorCandidate => {}\n+                    _ => {\n+                        // reject all other types of candidates\n+                        return Err(Unimplemented);\n                     }\n                 }\n             }\n@@ -1495,7 +1497,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // probably best characterized as a \"hack\", since we might prefer to just do our\n                     // best to *not* create essentially duplicate candidates in the first place.\n                     other.value.bound_vars().len() <= victim.value.bound_vars().len()\n-                } else if other.value == victim.value && victim.constness == Constness::NotConst {\n+                } else if other.value == victim.value\n+                    && victim.constness == ty::BoundConstness::NotConst\n+                {\n                     // Drop otherwise equivalent non-const candidates in favor of const candidates.\n                     true\n                 } else {"}, {"sha": "059e0cadd190cf649cf092fe4a291e48e6ebca11", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{Constness, GenericArg, GenericArgs};\n+use rustc_hir::{GenericArg, GenericArgs};\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, Ty, TyCtxt, TypeFoldable};\n@@ -47,8 +47,6 @@ pub trait AstConv<'tcx> {\n \n     fn item_def_id(&self) -> Option<DefId>;\n \n-    fn default_constness_for_trait_bounds(&self) -> Constness;\n-\n     /// Returns predicates in scope of the form `X: Foo<T>`, where `X`\n     /// is a type parameter `X` with the given id `def_id` and T\n     /// matches `assoc_name`. This is a subset of the full set of\n@@ -724,7 +722,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         trait_ref: &hir::TraitRef<'_>,\n         span: Span,\n-        constness: Constness,\n+        constness: ty::BoundConstness,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n@@ -795,7 +793,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let bound_vars = tcx.late_bound_vars(hir_id);\n         let poly_trait_ref =\n             ty::Binder::bind_with_vars(ty::TraitRef::new(trait_def_id, substs), bound_vars);\n-        bounds.trait_bounds.push((poly_trait_ref, span, Constness::NotConst));\n+        bounds.trait_bounds.push((poly_trait_ref, span, ty::BoundConstness::NotConst));\n \n         let mut dup_bindings = FxHashMap::default();\n         for binding in assoc_bindings {\n@@ -920,14 +918,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         bounds: &mut Bounds<'tcx>,\n         bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n     ) {\n-        let constness = self.default_constness_for_trait_bounds();\n         for ast_bound in ast_bounds {\n             match *ast_bound {\n                 hir::GenericBound::Trait(ref b, hir::TraitBoundModifier::None) => {\n                     self.instantiate_poly_trait_ref(\n                         &b.trait_ref,\n                         b.span,\n-                        constness,\n+                        ty::BoundConstness::NotConst,\n                         param_ty,\n                         bounds,\n                         false,\n@@ -937,7 +934,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.instantiate_poly_trait_ref(\n                         &b.trait_ref,\n                         b.span,\n-                        Constness::NotConst,\n+                        ty::BoundConstness::ConstIfConst,\n                         param_ty,\n                         bounds,\n                         false,\n@@ -1251,7 +1248,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             } = self.instantiate_poly_trait_ref(\n                 &trait_bound.trait_ref,\n                 trait_bound.span,\n-                Constness::NotConst,\n+                ty::BoundConstness::NotConst,\n                 dummy_self,\n                 &mut bounds,\n                 false,\n@@ -1330,7 +1327,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .filter(|(trait_ref, _, _)| !tcx.trait_is_auto(trait_ref.def_id()));\n \n         for (base_trait_ref, span, constness) in regular_traits_refs_spans {\n-            assert_eq!(constness, Constness::NotConst);\n+            assert_eq!(constness, ty::BoundConstness::NotConst);\n \n             for obligation in traits::elaborate_trait_ref(tcx, base_trait_ref) {\n                 debug!("}, {"sha": "24474e163b9daf23586c3d24e2efb063f652c596", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,7 +1,6 @@\n //! Bounds are restrictions applied to some types after they've been converted into the\n //! `ty` form from the HIR.\n \n-use rustc_hir::Constness;\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::Span;\n \n@@ -30,7 +29,7 @@ pub struct Bounds<'tcx> {\n \n     /// A list of trait bounds. So if you had `T: Debug` this would be\n     /// `T: Debug`. Note that the self-type is explicit here.\n-    pub trait_bounds: Vec<(ty::PolyTraitRef<'tcx>, Span, Constness)>,\n+    pub trait_bounds: Vec<(ty::PolyTraitRef<'tcx>, Span, ty::BoundConstness)>,\n \n     /// A list of projection equality bounds. So if you had `T:\n     /// Iterator<Item = u32>` this would include `<T as"}, {"sha": "9c70d2cb365b2714ff563cca9402aa7ff2c7b44d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -180,10 +180,6 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         None\n     }\n \n-    fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        self.tcx.hir().get(self.body_id).constness_for_typeck()\n-    }\n-\n     fn get_type_parameter_bounds(\n         &self,\n         _: Span,"}, {"sha": "b514176ad529d439556c1645bd0ac56d754d76e3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -365,10 +365,6 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         Some(self.item_def_id)\n     }\n \n-    fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        self.node().constness_for_typeck()\n-    }\n-\n     fn get_type_parameter_bounds(\n         &self,\n         span: Span,\n@@ -664,7 +660,6 @@ impl ItemCtxt<'tcx> {\n         only_self_bounds: OnlySelfBounds,\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-        let constness = self.default_constness_for_trait_bounds();\n         let from_ty_params = ast_generics\n             .params\n             .iter()\n@@ -677,7 +672,7 @@ impl ItemCtxt<'tcx> {\n                 Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n                 None => true,\n             })\n-            .flat_map(|b| predicates_from_bound(self, ty, b, constness));\n+            .flat_map(|b| predicates_from_bound(self, ty, b));\n \n         let from_where_clauses = ast_generics\n             .where_clause\n@@ -703,7 +698,7 @@ impl ItemCtxt<'tcx> {\n                     })\n                     .filter_map(move |b| bt.map(|bt| (bt, b)))\n             })\n-            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b, constness));\n+            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b));\n \n         from_ty_params.chain(from_where_clauses).collect()\n     }\n@@ -2031,7 +2026,6 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     let mut is_default_impl_trait = None;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n-    let constness = icx.default_constness_for_trait_bounds();\n \n     const NO_GENERICS: &hir::Generics<'_> = &hir::Generics::empty();\n \n@@ -2227,8 +2221,10 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     match bound {\n                         hir::GenericBound::Trait(poly_trait_ref, modifier) => {\n                             let constness = match modifier {\n-                                hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n-                                hir::TraitBoundModifier::None => constness,\n+                                hir::TraitBoundModifier::None => ty::BoundConstness::NotConst,\n+                                hir::TraitBoundModifier::MaybeConst => {\n+                                    ty::BoundConstness::ConstIfConst\n+                                }\n                                 // We ignore `where T: ?Sized`, it is already part of\n                                 // type parameter `T`.\n                                 hir::TraitBoundModifier::Maybe => continue,\n@@ -2491,14 +2487,13 @@ fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx>,\n     param_ty: Ty<'tcx>,\n     bound: &'tcx hir::GenericBound<'tcx>,\n-    constness: hir::Constness,\n ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     match *bound {\n         hir::GenericBound::Trait(ref tr, modifier) => {\n             let constness = match modifier {\n                 hir::TraitBoundModifier::Maybe => return vec![],\n-                hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n-                hir::TraitBoundModifier::None => constness,\n+                hir::TraitBoundModifier::MaybeConst => ty::BoundConstness::ConstIfConst,\n+                hir::TraitBoundModifier::None => ty::BoundConstness::NotConst,\n             };\n \n             let mut bounds = Bounds::default();"}, {"sha": "8ecd6034ad6951c1d7dd8a5908eb896c92169e2e", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -68,7 +68,6 @@\n use crate::constrained_generic_params as cgp;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n@@ -368,7 +367,7 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n         // items.\n         ty::PredicateKind::Trait(ty::TraitPredicate {\n             trait_ref,\n-            constness: hir::Constness::NotConst,\n+            constness: ty::BoundConstness::NotConst,\n         }) => {\n             if !matches!(\n                 trait_predicate_kind(tcx, predicate),\n@@ -399,7 +398,7 @@ fn trait_predicate_kind<'tcx>(\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Trait(ty::TraitPredicate {\n             trait_ref,\n-            constness: hir::Constness::NotConst,\n+            constness: ty::BoundConstness::NotConst,\n         }) => Some(tcx.trait_def(trait_ref.def_id).specialization_kind),\n         ty::PredicateKind::Trait(_)\n         | ty::PredicateKind::RegionOutlives(_)"}, {"sha": "749f681e92ed174750f70420ff063b70ccb10a41", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -548,7 +548,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         &item_cx,\n         hir_trait,\n         DUMMY_SP,\n-        hir::Constness::NotConst,\n+        ty::BoundConstness::NotConst,\n         self_ty,\n         &mut bounds,\n         true,"}, {"sha": "54be830bf42e7404231de5e62b66a8235d148acf", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -387,7 +387,7 @@ impl clean::GenericBound {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\",\n-                    hir::TraitBoundModifier::MaybeConst => \"?const\",\n+                    hir::TraitBoundModifier::MaybeConst => \"~const\",\n                 };\n                 if f.alternate() {\n                     write!(f, \"{}{:#}\", modifier_str, ty.print(cx))"}, {"sha": "80f6bbec2a181f04d6146376b12e96c246ee72a8", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,22 +1,13 @@\n // issue-49296: Unsafe shenigans in constants can result in missing errors\n \n #![feature(const_fn_trait_bound)]\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n \n-const unsafe fn transmute<T: ?const Copy, U: ?const Copy>(t: T) -> U {\n-    #[repr(C)]\n-    union Transmute<T: Copy, U: Copy> {\n-        from: T,\n-        to: U,\n-    }\n-\n-    Transmute { from: t }.to\n-}\n+use std::mem::transmute;\n \n const fn wat(x: u64) -> &'static u64 {\n     unsafe { transmute(&x) }\n }\n+\n const X: u64 = *wat(42);\n //~^ ERROR evaluation of constant value failed\n "}, {"sha": "bc3074b10bee6f326c048121d07b093515e63e46", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-49296.rs:20:16\n+  --> $DIR/issue-49296.rs:11:16\n    |\n LL | const X: u64 = *wat(42);\n    |                ^^^^^^^^ pointer to alloc2 was dereferenced after this allocation got freed"}, {"sha": "2b57c439fe9a026057815233558d1cf5512e6a1e", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -4,11 +4,11 @@ error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required by a bound in `Foo::Item`\n-  --> $DIR/projection-bound-cycle-generic.rs:11:49\n+note: required by a bound in `OnlySized`\n+  --> $DIR/projection-bound-cycle-generic.rs:28:18\n    |\n-LL |     type Item: Sized where <Self as Foo>::Item: Sized;\n-   |                                                 ^^^^^ required by this bound in `Foo::Item`\n+LL | struct OnlySized<T> where T: Sized { f: T }\n+   |                  ^ required by this bound in `OnlySized`\n \n error: aborting due to previous error\n "}, {"sha": "d9d0bf4274bd72c2f35ed75ea9053881260c36fb", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -4,11 +4,11 @@ error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required by a bound in `Foo::Item`\n-  --> $DIR/projection-bound-cycle.rs:13:49\n+note: required by a bound in `OnlySized`\n+  --> $DIR/projection-bound-cycle.rs:30:18\n    |\n-LL |     type Item: Sized where <Self as Foo>::Item: Sized;\n-   |                                                 ^^^^^ required by this bound in `Foo::Item`\n+LL | struct OnlySized<T> where T: Sized { f: T }\n+   |                  ^ required by this bound in `OnlySized`\n \n error: aborting due to previous error\n "}, {"sha": "4ae4549ea58966346c2d0d6994ae0a8d0407d8c1", "filename": "src/test/ui/parser/bounds-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -9,10 +9,10 @@ struct S<\n     T: Tr +, // OK\n     T: ?'a, //~ ERROR `?` may only modify trait bounds, not lifetime bounds\n \n-    T: ?const Tr, // OK\n-    T: ?const ?Tr, // OK\n-    T: ?const Tr + 'a, // OK\n-    T: ?const 'a, //~ ERROR `?const` may only modify trait bounds, not lifetime bounds\n+    T: ~const Tr, // OK\n+    T: ~const ?Tr, // OK\n+    T: ~const Tr + 'a, // OK\n+    T: ~const 'a, //~ ERROR `~const` may only modify trait bounds, not lifetime bounds\n >;\n \n fn main() {}"}, {"sha": "005bc1e54bd00421358c18ea1f832e595df62041", "filename": "src/test/ui/parser/bounds-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -4,10 +4,10 @@ error: `?` may only modify trait bounds, not lifetime bounds\n LL |     T: ?'a,\n    |        ^\n \n-error: `?const` may only modify trait bounds, not lifetime bounds\n+error: `~const` may only modify trait bounds, not lifetime bounds\n   --> $DIR/bounds-type.rs:15:8\n    |\n-LL |     T: ?const 'a,\n+LL |     T: ~const 'a,\n    |        ^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "b5258eebb90adf774132336d9078bc3226aa48c8", "filename": "src/test/ui/parser/trait-object-delimiters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -6,7 +6,7 @@ fn foo1(_: &dyn Drop + AsRef<str>) {} //~ ERROR ambiguous `+` in a type\n fn foo2(_: &dyn (Drop + AsRef<str>)) {} //~ ERROR incorrect braces around trait bounds\n \n fn foo3(_: &dyn {Drop + AsRef<str>}) {} //~ ERROR expected parameter name, found `{`\n-//~^ ERROR expected one of `!`, `(`, `)`, `,`, `?`, `for`, lifetime, or path, found `{`\n+//~^ ERROR expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n //~| ERROR at least one trait is required for an object type\n \n fn foo4(_: &dyn <Drop + AsRef<str>>) {} //~ ERROR expected identifier, found `<`"}, {"sha": "ee638d8a4f5ecf20c214d76f1dcfcb2687e1fb2c", "filename": "src/test/ui/parser/trait-object-delimiters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -22,11 +22,11 @@ error: expected parameter name, found `{`\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n    |                 ^ expected parameter name\n \n-error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, lifetime, or path, found `{`\n+error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n   --> $DIR/trait-object-delimiters.rs:8:17\n    |\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n-   |                -^ expected one of 8 possible tokens\n+   |                -^ expected one of 9 possible tokens\n    |                |\n    |                help: missing `,`\n "}, {"sha": "228b5ed71e80a833142ecd43054b0cc42fd936bb", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,7 +1,5 @@\n // FIXME(fee1-dead): this should have a better error message\n #![feature(const_trait_impl)]\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n \n struct NonConstAdd(i32);\n \n@@ -14,7 +12,7 @@ impl std::ops::Add for NonConstAdd {\n }\n \n trait Foo {\n-    type Bar: std::ops::Add;\n+    type Bar: ~const std::ops::Add;\n }\n \n impl const Foo for NonConstAdd {\n@@ -23,7 +21,7 @@ impl const Foo for NonConstAdd {\n }\n \n trait Baz {\n-    type Qux: ?const std::ops::Add;\n+    type Qux: std::ops::Add;\n }\n \n impl const Baz for NonConstAdd {"}, {"sha": "b894092205e433448fc0c812770e9fbace38583b", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,15 +1,15 @@\n error[E0277]: cannot add `NonConstAdd` to `NonConstAdd`\n-  --> $DIR/assoc-type.rs:21:5\n+  --> $DIR/assoc-type.rs:19:5\n    |\n LL |     type Bar = NonConstAdd;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `Add` is not implemented for `NonConstAdd`\n note: required by a bound in `Foo::Bar`\n-  --> $DIR/assoc-type.rs:17:15\n+  --> $DIR/assoc-type.rs:15:15\n    |\n-LL |     type Bar: std::ops::Add;\n-   |               ^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n+LL |     type Bar: ~const std::ops::Add;\n+   |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | impl const Foo for NonConstAdd where NonConstAdd: Add {"}, {"sha": "4b706a190e65e5985a7a3e3048ff0c1fa90e9426", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -6,7 +6,7 @@ trait MyPartialEq {\n     fn eq(&self, other: &Self) -> bool;\n }\n \n-impl<T: PartialEq> const MyPartialEq for T {\n+impl<T: ~const PartialEq> const MyPartialEq for T {\n     fn eq(&self, other: &Self) -> bool {\n         PartialEq::eq(self, other)\n     }"}, {"sha": "adf8d4f9ea565a208c3d92cd57416df8eb54b968", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -16,11 +16,11 @@ impl const PartialEq for S {\n     }\n }\n \n-const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n     *t == *t\n }\n \n-const fn equals_self_wrapper<T: PartialEq>(t: &T) -> bool {\n+const fn equals_self_wrapper<T: ~const PartialEq>(t: &T) -> bool {\n     equals_self(t)\n }\n "}, {"sha": "7185376b440c8fdf10e7b029f7f94f2a4ac1acba", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,9 +1,7 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_trait_bound_opt_out)]\n #![feature(const_fn_trait_bound)]\n-#![allow(incomplete_features)]\n \n struct S;\n \n@@ -16,9 +14,11 @@ impl const PartialEq for S {\n     }\n }\n \n-// This duplicate bound should not result in ambiguities. It should be equivalent to a single const\n+// This duplicate bound should not result in ambiguities. It should be equivalent to a single ~const\n // bound.\n-const fn equals_self<T: PartialEq + ?const PartialEq>(t: &T) -> bool {\n+// const fn equals_self<T: PartialEq + ~const PartialEq>(t: &T) -> bool {\n+// FIXME(fee1-dead)^ why should the order matter here?\n+const fn equals_self<T: ~const PartialEq + PartialEq>(t: &T) -> bool {\n     *t == *t\n }\n "}, {"sha": "e96249ff2fd5a4710f2c9b68166e438e136dc9f0", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,9 +1,7 @@\n #![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n \n-pub const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n+pub const fn equals_self<T: PartialEq>(t: &T) -> bool {\n     *t == *t\n     //~^ ERROR calls in constant functions are limited to constant functions\n }"}, {"sha": "818c582869631f9bc70f22b5be7077b0d34955a7", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/call-generic-method-fail.rs:7:5\n+  --> $DIR/call-generic-method-fail.rs:5:5\n    |\n LL |     *t == *t\n    |     ^^^^^^^^"}, {"sha": "585b65988f390ade606315e687ef8895e48fad73", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst-bound.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-bound.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![feature(const_fn_trait_bound)]\n+\n+struct S;\n+\n+impl PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    true\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+fn main() {}"}, {"sha": "1fc2c4fe4456f9100cd95e588774a8f69a1d69e9", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst-opt-out.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,24 +0,0 @@\n-// check-pass\n-\n-#![feature(const_fn_trait_bound)]\n-#![feature(const_trait_impl)]\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n-\n-struct S;\n-\n-impl PartialEq for S {\n-    fn eq(&self, _: &S) -> bool {\n-        true\n-    }\n-}\n-\n-const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n-    true\n-}\n-\n-pub const EQ: bool = equals_self(&S);\n-\n-// Calling `equals_self` with a type that only has a non-const impl is fine, because we opted out.\n-\n-fn main() {}"}, {"sha": "6881db0aa02c3cec75158117a2e856de518efd82", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -9,7 +9,7 @@ impl PartialEq for S {\n     }\n }\n \n-const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n     true\n }\n "}, {"sha": "9b9bda7c90ec7d313aab8b9096411c4c5d6acc2f", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -8,8 +8,8 @@ LL | pub const EQ: bool = equals_self(&S);\n note: required by a bound in `equals_self`\n   --> $DIR/call-generic-method-nonconst.rs:12:25\n    |\n-LL | const fn equals_self<T: PartialEq>(t: &T) -> bool {\n-   |                         ^^^^^^^^^ required by this bound in `equals_self`\n+LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n+   |                         ^^^^^^^^^^^^^^^^ required by this bound in `equals_self`\n \n error: aborting due to previous error\n "}, {"sha": "aa9bd4d824e1704aba419008433985d59c7f7727", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -16,7 +16,7 @@ impl const PartialEq for S {\n     }\n }\n \n-const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n     *t == *t\n }\n "}, {"sha": "58041454d5901058fa3cc093586d8b9f48cc852d", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.gated.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/feature-gate.rs:17:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "4452ad7ea239c1992fbe59e70ea382cef839c4d1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,17 +0,0 @@\n-// revisions: stock gated\n-// gate-test-const_trait_bound_opt_out\n-\n-#![cfg_attr(gated, feature(const_trait_bound_opt_out))]\n-#![allow(incomplete_features)]\n-#![feature(rustc_attrs)]\n-#![feature(const_fn_trait_bound)]\n-\n-trait T {\n-    const CONST: i32;\n-}\n-\n-const fn get_assoc_const<S: ?const T>() -> i32 { <S as T>::CONST }\n-//[stock]~^ ERROR `?const` on trait bounds is experimental\n-\n-#[rustc_error]\n-fn main() {} //[gated]~ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "8ae8b8868ddedaccb09b96b8af1d45e9cf28bf5b", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.stock.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `?const` on trait bounds is experimental\n-  --> $DIR/feature-gate.rs:13:29\n-   |\n-LL | const fn get_assoc_const<S: ?const T>() -> i32 { <S as T>::CONST }\n-   |                             ^^^^^^\n-   |\n-   = note: see issue #67794 <https://github.com/rust-lang/rust/issues/67794> for more information\n-   = help: add `#![feature(const_trait_bound_opt_out)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "f5561a922ddcd7555d6803c57332fc405f372266", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-impl-trait.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,21 +0,0 @@\n-#![feature(const_trait_bound_opt_out)]\n-#![feature(associated_type_bounds)]\n-#![allow(incomplete_features)]\n-\n-trait T {}\n-struct S;\n-impl T for S {}\n-\n-fn rpit() -> impl ?const T { S }\n-//~^ ERROR `?const` is not permitted in `impl Trait`\n-\n-fn apit(_: impl ?const T) {}\n-//~^ ERROR `?const` is not permitted in `impl Trait`\n-\n-fn rpit_assoc_bound() -> impl IntoIterator<Item: ?const T> { Some(S) }\n-//~^ ERROR `?const` is not permitted in `impl Trait`\n-\n-fn apit_assoc_bound(_: impl IntoIterator<Item: ?const T>) {}\n-//~^ ERROR `?const` is not permitted in `impl Trait`\n-\n-fn main() {}"}, {"sha": "06cd00a956a2d99999ad837e585e3c4668af4404", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-impl-trait.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-impl-trait.stderr?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,26 +0,0 @@\n-error: `?const` is not permitted in `impl Trait`\n-  --> $DIR/in-impl-trait.rs:9:19\n-   |\n-LL | fn rpit() -> impl ?const T { S }\n-   |                   ^^^^^^^^\n-\n-error: `?const` is not permitted in `impl Trait`\n-  --> $DIR/in-impl-trait.rs:12:17\n-   |\n-LL | fn apit(_: impl ?const T) {}\n-   |                 ^^^^^^^^\n-\n-error: `?const` is not permitted in `impl Trait`\n-  --> $DIR/in-impl-trait.rs:15:50\n-   |\n-LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ?const T> { Some(S) }\n-   |                                                  ^^^^^^^^\n-\n-error: `?const` is not permitted in `impl Trait`\n-  --> $DIR/in-impl-trait.rs:18:48\n-   |\n-LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ?const T>) {}\n-   |                                                ^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "fc9ed5b1dc22e10ab2101576d623266c0dccef17", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-trait-bounds.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,8 +0,0 @@\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n-\n-trait Super {}\n-trait T: ?const Super {}\n-//~^ ERROR `?const` is not permitted in supertraits\n-\n-fn main() {}"}, {"sha": "a0d8f95acd2a839313f73b39b3ed399f9f351b68", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-trait-bounds.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-bounds.stderr?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,8 +0,0 @@\n-error: `?const` is not permitted in supertraits\n-  --> $DIR/in-trait-bounds.rs:5:10\n-   |\n-LL | trait T: ?const Super {}\n-   |          ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b3d1f48ace147403190ef7e220b17950619c95c1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-trait-object.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,19 +0,0 @@\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(bare_trait_objects)]\n-#![allow(incomplete_features)]\n-\n-struct S;\n-trait T {}\n-impl T for S {}\n-\n-// An inherent impl for the trait object `?const T`.\n-impl ?const T {}\n-//~^ ERROR `?const` is not permitted in trait objects\n-\n-fn trait_object() -> &'static dyn ?const T { &S }\n-//~^ ERROR `?const` is not permitted in trait objects\n-\n-fn trait_object_in_apit(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n-//~^ ERROR `?const` is not permitted in trait objects\n-\n-fn main() {}"}, {"sha": "331fe0423fa9499abfedb7cb525dbc99bc9fb178", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/in-trait-object.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fin-trait-object.stderr?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,20 +0,0 @@\n-error: `?const` is not permitted in trait objects\n-  --> $DIR/in-trait-object.rs:10:6\n-   |\n-LL | impl ?const T {}\n-   |      ^^^^^^^^\n-\n-error: `?const` is not permitted in trait objects\n-  --> $DIR/in-trait-object.rs:13:35\n-   |\n-LL | fn trait_object() -> &'static dyn ?const T { &S }\n-   |                                   ^^^^^^^^\n-\n-error: `?const` is not permitted in trait objects\n-  --> $DIR/in-trait-object.rs:16:61\n-   |\n-LL | fn trait_object_in_apit(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n-   |                                                             ^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "01e941a8fba451fe03f59f59041d29a1c4fa1af2", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/opt-out-twice.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,8 +0,0 @@\n-// compile-flags: -Z parse-only\n-\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n-\n-struct S<T: ?const ?const Tr>;\n-//~^ ERROR expected identifier, found keyword `const`\n-//~| ERROR expected one of `(`, `+`, `,`, `::`, `<`, `=`, or `>`"}, {"sha": "f7924b3f24db39a0b176323c00824bdfca18d3d5", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/opt-out-twice.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fopt-out-twice.stderr?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,14 +0,0 @@\n-error: expected identifier, found keyword `const`\n-  --> $DIR/opt-out-twice.rs:6:21\n-   |\n-LL | struct S<T: ?const ?const Tr>;\n-   |                     ^^^^^ expected identifier, found keyword\n-\n-error: expected one of `(`, `+`, `,`, `::`, `<`, `=`, or `>`, found `Tr`\n-  --> $DIR/opt-out-twice.rs:6:27\n-   |\n-LL | struct S<T: ?const ?const Tr>;\n-   |                           ^^ expected one of 7 possible tokens\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "a0d9610bbb5e2b6517648d34923757c46894be62", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/syntax.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fsyntax.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,10 +0,0 @@\n-// compile-flags: -Z parse-only\n-// check-pass\n-\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n-\n-struct S<\n-    T: ?const ?for<'a> Tr<'a> + 'static + ?const std::ops::Add,\n-    T: ?const ?for<'a: 'b> m::Trait<'a>,\n->;"}, {"sha": "c2c8689e2942bcd33ba2ad795acd56b809544537", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/with-maybe-sized.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,7 +0,0 @@\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n-\n-struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n-//~^ ERROR `?const` and `?` are mutually exclusive\n-\n-fn main() {}"}, {"sha": "e8e9d6c1e76215671845463d21c0656e70b5e111", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/with-maybe-sized.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwith-maybe-sized.stderr?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,8 +0,0 @@\n-error: `?const` and `?` are mutually exclusive\n-  --> $DIR/with-maybe-sized.rs:4:13\n-   |\n-LL | struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n-   |             ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b904a2eec0dd0f531e998be78a2694059869f0f5", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/without-question-mark.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.rs?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,7 +0,0 @@\n-// compile-flags: -Z parse-only\n-\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n-\n-struct S<T: const Tr>;\n-//~^ ERROR expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, lifetime, or path"}, {"sha": "0dbca952c037ec8161df6a9bcc3a94d56328916a", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/without-question-mark.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfd84729d6b7060edcb66694e6e44aae9e2ac57d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Fwithout-question-mark.stderr?ref=dfd84729d6b7060edcb66694e6e44aae9e2ac57d", "patch": "@@ -1,8 +0,0 @@\n-error: expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, lifetime, or path, found keyword `const`\n-  --> $DIR/without-question-mark.rs:6:13\n-   |\n-LL | struct S<T: const Tr>;\n-   |             ^^^^^ expected one of 9 possible tokens\n-\n-error: aborting due to previous error\n-"}, {"sha": "05b26465c5b0c395ba57e625bde6abb6a5b47161", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-tilde-const-trait.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,11 +1,9 @@\n-#![feature(const_trait_bound_opt_out)]\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n struct S;\n trait T {}\n \n-impl ?const T for S {}\n+impl ~const T for S {}\n //~^ ERROR expected a trait, found type\n \n fn main() {}", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/impl-opt-out-trait.rs"}, {"sha": "0a91719e1f15b269b7652866d0b5264b43a10bb6", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-tilde-const-trait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,7 +1,7 @@\n error: expected a trait, found type\n-  --> $DIR/impl-opt-out-trait.rs:8:6\n+  --> $DIR/impl-tilde-const-trait.rs:6:6\n    |\n-LL | impl ?const T for S {}\n+LL | impl ~const T for S {}\n    |      ^^^^^^^^\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/impl-opt-out-trait.stderr"}, {"sha": "afd0d137bb4aadf8565a12443527e43e2ba5a760", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,6 +1,4 @@\n #![feature(const_trait_impl)]\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n #![allow(bare_trait_objects)]\n \n struct S;"}, {"sha": "8c55627031d1edfbaeb6636e237c39f5d5223897", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -1,5 +1,5 @@\n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:9:12\n+  --> $DIR/inherent-impl.rs:7:12\n    |\n LL | impl const S {}\n    |      ----- ^ inherent impl for this type\n@@ -9,7 +9,7 @@ LL | impl const S {}\n    = note: only trait implementations may be annotated with `const`\n \n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:12:12\n+  --> $DIR/inherent-impl.rs:10:12\n    |\n LL | impl const T {}\n    |      ----- ^ inherent impl for this type"}, {"sha": "157005bba7b7593782f11a4ca5627b9d85a38731", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-88155.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+pub trait A {\n+    fn assoc() -> bool;\n+}\n+\n+pub const fn foo<T: A>() -> bool {\n+    T::assoc()\n+    //~^ ERROR calls in constant functions are limited\n+}\n+\n+fn main() {}"}, {"sha": "931baac5389e6fbf69afa85354a022482f38033e", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-88155.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-88155.rs:9:5\n+   |\n+LL |     T::assoc()\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "7ac2458e3992850d051422629f17de153eca752f", "filename": "src/test/ui/rfc-2632-const-trait-impl/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -5,4 +5,4 @@\n #![feature(const_trait_impl)]\n \n // For now, this parses since an error does not occur until AST lowering.\n-impl ?const T {}\n+impl ~const T {}"}, {"sha": "b4302f3e75fd4dc495edd662fc8a0b5206d7acd4", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,29 @@\n+#![feature(const_trait_impl)]\n+#![feature(associated_type_bounds)]\n+\n+trait T {}\n+struct S;\n+impl T for S {}\n+\n+fn rpit() -> impl ~const T { S }\n+//~^ ERROR `~const` is not allowed\n+\n+fn apit(_: impl ~const T) {}\n+//~^ ERROR `~const` is not allowed\n+\n+fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n+//~^ ERROR `~const` is not allowed\n+\n+fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n+//~^ ERROR `~const` is not allowed\n+\n+fn generic<P: ~const T>() {}\n+//~^ ERROR `~const` is not allowed\n+\n+fn where_clause<P>() where P: ~const T {}\n+//~^ ERROR `~const` is not allowed\n+\n+struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n+//~^ ERROR `~const` and `?` are mutually exclusive\n+\n+fn main() {}"}, {"sha": "b026099f6829b5e3b04099e5a23641dcb82fd1a0", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,56 @@\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:8:19\n+   |\n+LL | fn rpit() -> impl ~const T { S }\n+   |                   ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:11:17\n+   |\n+LL | fn apit(_: impl ~const T) {}\n+   |                 ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:14:50\n+   |\n+LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n+   |                                                  ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:17:48\n+   |\n+LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n+   |                                                ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:20:15\n+   |\n+LL | fn generic<P: ~const T>() {}\n+   |               ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:23:31\n+   |\n+LL | fn where_clause<P>() where P: ~const T {}\n+   |                               ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` and `?` are mutually exclusive\n+  --> $DIR/tilde-const-invalid-places.rs:26:25\n+   |\n+LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n+   |                         ^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "9b3c2cf2a3b04334b072234c588c1c821a559f8a", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-syntax.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-syntax.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -Z parse-only\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+\n+struct S<\n+    T: ~const ?for<'a> Tr<'a> + 'static + ~const std::ops::Add,\n+    T: ~const ?for<'a: 'b> m::Trait<'a>,\n+>;"}, {"sha": "06e4ede8b5e7e3557cd31b01564f22d22f4813bf", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-twice.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-twice.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Z parse-only\n+\n+#![feature(const_trait_impl)]\n+\n+struct S<T: ~const ~const Tr>;\n+//~^ ERROR expected identifier, found `~`"}, {"sha": "928d23e8a424d4c373cc1b5fdfef595786da6a89", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-twice.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-twice.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `~`\n+  --> $DIR/tilde-twice.rs:5:20\n+   |\n+LL | struct S<T: ~const ~const Tr>;\n+   |                    ^ expected identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "96ba393bd85940294ccd6a3a70366cc971774659", "filename": "src/test/ui/rfc-2632-const-trait-impl/without-tilde.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,6 @@\n+// compiler-flags: -Z parse-only\n+\n+#![feature(const_trait_impl)]\n+\n+struct S<T: const Tr>;\n+//~^ ERROR expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, `~`, lifetime, or path"}, {"sha": "b6b77ac4a2fb67ada81e1ff0c4c37988304074ff", "filename": "src/test/ui/rfc-2632-const-trait-impl/without-tilde.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.stderr?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, `~`, lifetime, or path, found keyword `const`\n+  --> $DIR/without-tilde.rs:5:13\n+   |\n+LL | struct S<T: const Tr>;\n+   |             ^^^^^ expected one of 10 possible tokens\n+\n+error: aborting due to previous error\n+"}, {"sha": "640d127e8609818052a0024ad2aa8f604b215066", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -537,10 +537,10 @@ impl Rewrite for ast::GenericBound {\n                         .map(|s| format!(\"?{}\", s)),\n                     ast::TraitBoundModifier::MaybeConst => poly_trait_ref\n                         .rewrite(context, shape.offset_left(7)?)\n-                        .map(|s| format!(\"?const {}\", s)),\n+                        .map(|s| format!(\"~const {}\", s)),\n                     ast::TraitBoundModifier::MaybeConstMaybe => poly_trait_ref\n                         .rewrite(context, shape.offset_left(8)?)\n-                        .map(|s| format!(\"?const ?{}\", s)),\n+                        .map(|s| format!(\"~const ?{}\", s)),\n                 };\n                 rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }"}, {"sha": "61ef73a3cab1c6dbe80399e0f4fc5c0f77ae6685", "filename": "src/tools/rustfmt/tests/source/type.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -140,29 +140,23 @@ fn foo(a: SomeLongComplexType, b: SomeOtherLongComplexType) -> Box<Future<Item =\n \n type MyFn = fn(a: SomeLongComplexType, b: SomeOtherLongComplexType,) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;\n \n-// Const opt-out\n+// Const bound\n \n-trait T: ?   const  Super {}\n+trait T: ~   const  Super {}\n \n-const fn maybe_const<S: ?   const    T>() -> i32 { <S as T>::CONST }\n+const fn not_quite_const<S: ~  const    T>() -> i32 { <S as T>::CONST }\n \n-struct S<T:?  const   ?  Sized>(std::marker::PhantomData<T>);\n+struct S<T:~  const   ?  Sized>(std::marker::PhantomData<T>);\n \n-impl ?    const T {}\n+impl ~    const T {}\n \n-fn trait_object() -> &'static dyn ?  const T { &S }\n+fn apit(_: impl ~   const T) {}\n \n-fn i(_: impl IntoIterator<Item = Box<dyn ?    const    T>>) {}\n-\n-fn apit(_: impl ?const T) {}\n-\n-fn rpit() -> impl ?  const T { S }\n+fn rpit() -> impl ~  const T { S }\n \n pub struct Foo<T: Trait>(T);\n-impl<T:   ?  const Trait> Foo<T> {\n+impl<T:   ~  const Trait> Foo<T> {\n     fn new(t: T) -> Self {\n-        // not calling methods on `t`, so we opt out of requiring\n-        // `<T as Trait>` to have const methods via `?const`\n         Self(t)\n     }\n }\n@@ -171,4 +165,4 @@ impl<T:   ?  const Trait> Foo<T> {\n type T = typeof(\n 1);\n impl T for  .. {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "38cf909c2587a52c0b4b452df0cf6a79400d8270", "filename": "src/tools/rustfmt/tests/target/type.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac50a53359328a5d7f2f558833e63d59d372e4f7/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs?ref=ac50a53359328a5d7f2f558833e63d59d372e4f7", "patch": "@@ -145,35 +145,27 @@ type MyFn = fn(\n     b: SomeOtherLongComplexType,\n ) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;\n \n-// Const opt-out\n+// Const bound\n \n-trait T: ?const Super {}\n+trait T: ~const Super {}\n \n-const fn maybe_const<S: ?const T>() -> i32 {\n+const fn not_quite_const<S: ~const T>() -> i32 {\n     <S as T>::CONST\n }\n \n-struct S<T: ?const ?Sized>(std::marker::PhantomData<T>);\n+struct S<T: ~const ?Sized>(std::marker::PhantomData<T>);\n \n-impl ?const T {}\n+impl ~const T {}\n \n-fn trait_object() -> &'static dyn ?const T {\n-    &S\n-}\n-\n-fn i(_: impl IntoIterator<Item = Box<dyn ?const T>>) {}\n-\n-fn apit(_: impl ?const T) {}\n+fn apit(_: impl ~const T) {}\n \n-fn rpit() -> impl ?const T {\n+fn rpit() -> impl ~const T {\n     S\n }\n \n pub struct Foo<T: Trait>(T);\n-impl<T: ?const Trait> Foo<T> {\n+impl<T: ~const Trait> Foo<T> {\n     fn new(t: T) -> Self {\n-        // not calling methods on `t`, so we opt out of requiring\n-        // `<T as Trait>` to have const methods via `?const`\n         Self(t)\n     }\n }"}]}