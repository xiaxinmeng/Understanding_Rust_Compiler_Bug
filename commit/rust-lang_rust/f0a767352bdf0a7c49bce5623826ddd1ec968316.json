{"sha": "f0a767352bdf0a7c49bce5623826ddd1ec968316", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYTc2NzM1MmJkZjBhN2M0OWJjZTU2MjM4MjZkZGQxZWM5NjgzMTY=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2019-05-27T11:09:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-27T11:09:16Z"}, "message": "Rollup merge of #4102 - Urriel:fix/4096_match_same_arms, r=flip1995\n\nFix match_same_arms to fail late\n\nChanges:\n- Add a function search_same_list which return a list of matched expressions\n- Change the match_same_arms implementation behavior. It will lint each same arms found.\n\nfixes #4096\n\nchangelog: none", "tree": {"sha": "3474b04cc5dc6a7dfe219e9f8caa1150360564ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3474b04cc5dc6a7dfe219e9f8caa1150360564ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0a767352bdf0a7c49bce5623826ddd1ec968316", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc68VcCRBK7hj4Ov3rIwAAdHIIAFEvVvS2dmJWOxKqGwi6SMdg\nJrIuNyEu5ZwnwTAoIwFXWbm/Q014Vvk+p5bZYTT7lu2yvxqSkbjXgL8s+iECeSCB\nz+1epOIKrvMmFfMpwKXy5G+IIFxji3cIj6pcdQy2a0Blkv9Ds7kYKYP8m8Veq6qJ\npPyixMxQo6U5sHO2n5AvXHvUWh55EUaUWmqQsL3cxFGWE7R7i+8102sGiqqdlGfd\nLpTTN+txT7j9Dv1HY2qQJw/RiUaChrZpZLALj7Q2i7Hk2VmkkP3QZ0y+bFGiJBgt\n6yLBMJfp92H0MrZ3rhKYBpvQwPbfWOCuxXAYeEFj55TqpqKKXX0xh0zEiU/kX8o=\n=/dy0\n-----END PGP SIGNATURE-----\n", "payload": "tree 3474b04cc5dc6a7dfe219e9f8caa1150360564ef\nparent abe139c7ac7d5a33a6edb60ba0d4eb4dfaf11103\nparent 40f36658f544bd83be4430ec0126f381db57bb14\nauthor Philipp Krones <hello@philkrones.com> 1558955356 +0200\ncommitter GitHub <noreply@github.com> 1558955356 +0200\n\nRollup merge of #4102 - Urriel:fix/4096_match_same_arms, r=flip1995\n\nFix match_same_arms to fail late\n\nChanges:\n- Add a function search_same_list which return a list of matched expressions\n- Change the match_same_arms implementation behavior. It will lint each same arms found.\n\nfixes #4096\n\nchangelog: none\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a767352bdf0a7c49bce5623826ddd1ec968316", "html_url": "https://github.com/rust-lang/rust/commit/f0a767352bdf0a7c49bce5623826ddd1ec968316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0a767352bdf0a7c49bce5623826ddd1ec968316/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe139c7ac7d5a33a6edb60ba0d4eb4dfaf11103", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe139c7ac7d5a33a6edb60ba0d4eb4dfaf11103", "html_url": "https://github.com/rust-lang/rust/commit/abe139c7ac7d5a33a6edb60ba0d4eb4dfaf11103"}, {"sha": "40f36658f544bd83be4430ec0126f381db57bb14", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f36658f544bd83be4430ec0126f381db57bb14", "html_url": "https://github.com/rust-lang/rust/commit/40f36658f544bd83be4430ec0126f381db57bb14"}], "stats": {"total": 273, "additions": 218, "deletions": 55}, "files": [{"sha": "c1e06be7d6bce81caa1f8a2f24387e1d85577cbf", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f0a767352bdf0a7c49bce5623826ddd1ec968316/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a767352bdf0a7c49bce5623826ddd1ec968316/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=f0a767352bdf0a7c49bce5623826ddd1ec968316", "patch": "@@ -152,7 +152,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n     let eq: &dyn Fn(&&Expr, &&Expr) -> bool =\n         &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) };\n \n-    if let Some((i, j)) = search_same(conds, hash, eq) {\n+    for (i, j) in search_same(conds, hash, eq) {\n         span_note_and_lint(\n             cx,\n             IFS_SAME_COND,\n@@ -185,7 +185,7 @@ fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n         };\n \n         let indexed_arms: Vec<(usize, &Arm)> = arms.iter().enumerate().collect();\n-        if let Some((&(_, i), &(_, j))) = search_same(&indexed_arms, hash, eq) {\n+        for (&(_, i), &(_, j)) in search_same(&indexed_arms, hash, eq) {\n             span_lint_and_then(\n                 cx,\n                 MATCH_SAME_ARMS,\n@@ -217,7 +217,10 @@ fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n                                 ),\n                             );\n                         } else {\n-                            db.span_note(i.body.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs));\n+                            db.span_help(\n+                                i.pats[0].span,\n+                                &format!(\"consider refactoring into `{} | {}`\", lhs, rhs),\n+                            );\n                         }\n                     }\n                 },\n@@ -323,21 +326,33 @@ where\n     None\n }\n \n-fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Option<(&T, &T)>\n+fn search_common_cases<'a, T, Eq>(exprs: &'a [T], eq: &Eq) -> Option<(&'a T, &'a T)>\n where\n-    Hash: Fn(&T) -> u64,\n     Eq: Fn(&T, &T) -> bool,\n {\n-    // common cases\n     if exprs.len() < 2 {\n-        return None;\n+        None\n     } else if exprs.len() == 2 {\n-        return if eq(&exprs[0], &exprs[1]) {\n+        if eq(&exprs[0], &exprs[1]) {\n             Some((&exprs[0], &exprs[1]))\n         } else {\n             None\n-        };\n+        }\n+    } else {\n+        None\n     }\n+}\n+\n+fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Vec<(&T, &T)>\n+where\n+    Hash: Fn(&T) -> u64,\n+    Eq: Fn(&T, &T) -> bool,\n+{\n+    if let Some(expr) = search_common_cases(&exprs, &eq) {\n+        return vec![expr];\n+    }\n+\n+    let mut match_expr_list: Vec<(&T, &T)> = Vec::new();\n \n     let mut map: FxHashMap<_, Vec<&_>> =\n         FxHashMap::with_capacity_and_hasher(exprs.len(), BuildHasherDefault::default());\n@@ -347,7 +362,7 @@ where\n             Entry::Occupied(mut o) => {\n                 for o in o.get() {\n                     if eq(o, expr) {\n-                        return Some((o, expr));\n+                        match_expr_list.push((o, expr));\n                     }\n                 }\n                 o.get_mut().push(expr);\n@@ -358,5 +373,5 @@ where\n         }\n     }\n \n-    None\n+    match_expr_list\n }"}, {"sha": "d1213e5e5fdaf6db99c52fa507fe2e8bc4091b25", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=f0a767352bdf0a7c49bce5623826ddd1ec968316", "patch": "@@ -232,6 +232,20 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         return Ok(&foo[0..]);\n     }\n \n+    if true {\n+        let foo = \"\";\n+        return Ok(&foo[0..]);\n+    } else if false {\n+        let foo = \"bar\";\n+        return Ok(&foo[0..]);\n+    } else if true {\n+        let foo = \"\";\n+        return Ok(&foo[0..]);\n+    } else {\n+        let foo = \"\";\n+        return Ok(&foo[0..]);\n+    }\n+\n     // False positive `if_same_then_else`: `let (x, y)` vs. `let (y, x)`; see issue #3559.\n     if true {\n         let foo = \"\";"}, {"sha": "fa42afff0be0683709439d716df42ac9c16aa13e", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=f0a767352bdf0a7c49bce5623826ddd1ec968316", "patch": "@@ -210,5 +210,38 @@ LL | |         try!(Ok(\"foo\"));\n LL | |     } else {\n    | |_____^\n \n-error: aborting due to 10 previous errors\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:244:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         let foo = \"\";\n+LL | |         return Ok(&foo[0..]);\n+LL | |     }\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:241:20\n+   |\n+LL |       } else if true {\n+   |  ____________________^\n+LL | |         let foo = \"\";\n+LL | |         return Ok(&foo[0..]);\n+LL | |     } else {\n+   | |_____^\n+\n+error: this `if` has the same condition as a previous if\n+  --> $DIR/if_same_then_else.rs:241:15\n+   |\n+LL |     } else if true {\n+   |               ^^^^\n+   |\n+   = note: #[deny(clippy::ifs_same_cond)] on by default\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:235:8\n+   |\n+LL |     if true {\n+   |        ^^^^\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "880518b010a74e5da1ed4aa8c830df5a36c1dd63", "filename": "tests/ui/match_same_arms.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.rs?ref=f0a767352bdf0a7c49bce5623826ddd1ec968316", "patch": "@@ -108,6 +108,22 @@ fn match_same_arms() {\n         (None, Some(a)) => bar(a), // bindings have different types\n         _ => (),\n     }\n+\n+    let _ = match 42 {\n+        42 => 1,\n+        51 => 1, //~ ERROR match arms have same body\n+        41 => 2,\n+        52 => 2, //~ ERROR match arms have same body\n+        _ => 0,\n+    };\n+\n+    let _ = match 42 {\n+        1 => 2,\n+        2 => 2, //~ ERROR 2nd matched arms have same body\n+        3 => 2, //~ ERROR 3rd matched arms have same body\n+        4 => 3,\n+        _ => 0,\n+    };\n }\n \n fn main() {}"}, {"sha": "42c6f910dc30a2ee46b8e9ea97844c575aea2bbb", "filename": "tests/ui/match_same_arms.stderr", "status": "modified", "additions": 101, "deletions": 16, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=f0a767352bdf0a7c49bce5623826ddd1ec968316", "patch": "@@ -65,11 +65,11 @@ note: same as this\n    |\n LL |         42 => foo(),\n    |               ^^^^^\n-note: consider refactoring into `42 | 51`\n-  --> $DIR/match_same_arms.rs:56:15\n+help: consider refactoring into `42 | 51`\n+  --> $DIR/match_same_arms.rs:56:9\n    |\n LL |         42 => foo(),\n-   |               ^^^^^\n+   |         ^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:63:17\n@@ -82,11 +82,11 @@ note: same as this\n    |\n LL |         Some(_) => 24,\n    |                    ^^\n-note: consider refactoring into `Some(_) | None`\n-  --> $DIR/match_same_arms.rs:62:20\n+help: consider refactoring into `Some(_) | None`\n+  --> $DIR/match_same_arms.rs:62:9\n    |\n LL |         Some(_) => 24,\n-   |                    ^^\n+   |         ^^^^^^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:85:28\n@@ -99,11 +99,11 @@ note: same as this\n    |\n LL |         (Some(a), None) => bar(a),\n    |                            ^^^^^^\n-note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n-  --> $DIR/match_same_arms.rs:84:28\n+help: consider refactoring into `(Some(a), None) | (None, Some(a))`\n+  --> $DIR/match_same_arms.rs:84:9\n    |\n LL |         (Some(a), None) => bar(a),\n-   |                            ^^^^^^\n+   |         ^^^^^^^^^^^^^^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:91:26\n@@ -116,11 +116,11 @@ note: same as this\n    |\n LL |         (Some(a), ..) => bar(a),\n    |                          ^^^^^^\n-note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n-  --> $DIR/match_same_arms.rs:90:26\n+help: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n+  --> $DIR/match_same_arms.rs:90:9\n    |\n LL |         (Some(a), ..) => bar(a),\n-   |                          ^^^^^^\n+   |         ^^^^^^^^^^^^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:97:20\n@@ -133,11 +133,96 @@ note: same as this\n    |\n LL |         (1, .., 3) => 42,\n    |                       ^^\n-note: consider refactoring into `(1, .., 3) | (.., 3)`\n-  --> $DIR/match_same_arms.rs:96:23\n+help: consider refactoring into `(1, .., 3) | (.., 3)`\n+  --> $DIR/match_same_arms.rs:96:9\n    |\n LL |         (1, .., 3) => 42,\n-   |                       ^^\n+   |         ^^^^^^^^^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:114:15\n+   |\n+LL |         51 => 1, //~ ERROR match arms have same body\n+   |               ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:113:15\n+   |\n+LL |         42 => 1,\n+   |               ^\n+help: consider refactoring into `42 | 51`\n+  --> $DIR/match_same_arms.rs:113:9\n+   |\n+LL |         42 => 1,\n+   |         ^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:116:15\n+   |\n+LL |         52 => 2, //~ ERROR match arms have same body\n+   |               ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:115:15\n+   |\n+LL |         41 => 2,\n+   |               ^\n+help: consider refactoring into `41 | 52`\n+  --> $DIR/match_same_arms.rs:115:9\n+   |\n+LL |         41 => 2,\n+   |         ^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:122:14\n+   |\n+LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n+   |              ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:121:14\n+   |\n+LL |         1 => 2,\n+   |              ^\n+help: consider refactoring into `1 | 2`\n+  --> $DIR/match_same_arms.rs:121:9\n+   |\n+LL |         1 => 2,\n+   |         ^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:123:14\n+   |\n+LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n+   |              ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:121:14\n+   |\n+LL |         1 => 2,\n+   |              ^\n+help: consider refactoring into `1 | 3`\n+  --> $DIR/match_same_arms.rs:121:9\n+   |\n+LL |         1 => 2,\n+   |         ^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:123:14\n+   |\n+LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n+   |              ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:122:14\n+   |\n+LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n+   |              ^\n+help: consider refactoring into `2 | 3`\n+  --> $DIR/match_same_arms.rs:122:9\n+   |\n+LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n+   |         ^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "232ae28009b6091f40c366058e4c22130365fdd3", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0a767352bdf0a7c49bce5623826ddd1ec968316/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=f0a767352bdf0a7c49bce5623826ddd1ec968316", "patch": "@@ -89,11 +89,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:53:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:53:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n@@ -115,11 +115,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:59:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:59:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n@@ -141,11 +141,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:65:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:65:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -159,11 +159,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:74:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:74:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -177,11 +177,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:81:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:81:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -195,11 +195,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:87:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:87:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -213,11 +213,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:93:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:93:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -231,11 +231,11 @@ note: same as this\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |                             ^^^^^^^^^^^^^^^^^^^^\n-note: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-  --> $DIR/matches.rs:116:29\n+help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n+  --> $DIR/matches.rs:116:9\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n@@ -249,11 +249,11 @@ note: same as this\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:131:18\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:131:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n-   |                  ^^^^^^^^^^^^^^\n+   |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: you don't need to add `&` to all patterns"}]}