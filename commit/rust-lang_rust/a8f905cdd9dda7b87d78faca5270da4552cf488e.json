{"sha": "a8f905cdd9dda7b87d78faca5270da4552cf488e", "node_id": "C_kwDOAAsO6NoAKGE4ZjkwNWNkZDlkZGE3Yjg3ZDc4ZmFjYTUyNzBkYTQ1NTJjZjQ4OGU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T17:32:49Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-10T04:08:09Z"}, "message": "Unconstrained terms should account for infer vars being equated", "tree": {"sha": "63dc10d268d3d982e3d34aac83a1d89a7fc9c1ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63dc10d268d3d982e3d34aac83a1d89a7fc9c1ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f905cdd9dda7b87d78faca5270da4552cf488e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f905cdd9dda7b87d78faca5270da4552cf488e", "html_url": "https://github.com/rust-lang/rust/commit/a8f905cdd9dda7b87d78faca5270da4552cf488e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f905cdd9dda7b87d78faca5270da4552cf488e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f2657d1101b50f9b71ae460b762d330cc8426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f2657d1101b50f9b71ae460b762d330cc8426b", "html_url": "https://github.com/rust-lang/rust/commit/39f2657d1101b50f9b71ae460b762d330cc8426b"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "ca438a103cf342b4655d573c43b7799b0fdc8aa6", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a8f905cdd9dda7b87d78faca5270da4552cf488e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f905cdd9dda7b87d78faca5270da4552cf488e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=a8f905cdd9dda7b87d78faca5270da4552cf488e", "patch": "@@ -93,37 +93,42 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         };\n \n         // Guard against `<T as Trait<?0>>::Assoc = ?0>`.\n-        struct ContainsTerm<'tcx> {\n+        struct ContainsTerm<'a, 'tcx> {\n             term: ty::Term<'tcx>,\n+            infcx: &'a InferCtxt<'tcx>,\n         }\n-        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTerm<'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTerm<'_, 'tcx> {\n             type BreakTy = ();\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if t.needs_infer() {\n-                    if ty::Term::from(t) == self.term {\n-                        ControlFlow::Break(())\n-                    } else {\n-                        t.super_visit_with(self)\n-                    }\n+                if let Some(vid) = t.ty_vid()\n+                    && let ty::TermKind::Ty(term) = self.term.unpack()\n+                    && let Some(term_vid) = term.ty_vid()\n+                    && self.infcx.root_var(vid) == self.infcx.root_var(term_vid)\n+                {\n+                    ControlFlow::Break(())\n+                } else if t.has_non_region_infer() {\n+                    t.super_visit_with(self)\n                 } else {\n                     ControlFlow::Continue(())\n                 }\n             }\n \n             fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if c.needs_infer() {\n-                    if ty::Term::from(c) == self.term {\n-                        ControlFlow::Break(())\n-                    } else {\n-                        c.super_visit_with(self)\n-                    }\n+                if let ty::ConstKind::Infer(ty::InferConst::Var(vid)) = c.kind()\n+                    && let ty::TermKind::Const(term) = self.term.unpack()\n+                    && let ty::ConstKind::Infer(ty::InferConst::Var(term_vid)) = term.kind()\n+                    && self.infcx.root_const_var(vid) == self.infcx.root_const_var(term_vid)\n+                {\n+                    ControlFlow::Break(())\n+                } else if c.has_non_region_infer() {\n+                    c.super_visit_with(self)\n                 } else {\n                     ControlFlow::Continue(())\n                 }\n             }\n         }\n \n-        let mut visitor = ContainsTerm { term: goal.predicate.term };\n+        let mut visitor = ContainsTerm { infcx: self.infcx, term: goal.predicate.term };\n \n         term_is_infer\n             && goal.predicate.projection_ty.visit_with(&mut visitor).is_continue()"}]}