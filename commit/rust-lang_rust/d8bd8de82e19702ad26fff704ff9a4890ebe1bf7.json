{"sha": "d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YmQ4ZGU4MmUxOTcwMmFkMjZmZmY3MDRmZjlhNDg5MGViZTFiZjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-05T01:40:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-05T17:11:10Z"}, "message": "native: Move from usleep() to nanosleep()\n\nUsing nanosleep() allows us to gracefully recover from EINTR because on error it\nfills in the second parameter with the remaining time to sleep.\n\nCloses #12689", "tree": {"sha": "a4eb4b305a72fd8cd1e19d49a8d91179566a25c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4eb4b305a72fd8cd1e19d49a8d91179566a25c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "html_url": "https://github.com/rust-lang/rust/commit/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8334dd445fb10089a68808e7895f0c00d6fd0b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8334dd445fb10089a68808e7895f0c00d6fd0b3e", "html_url": "https://github.com/rust-lang/rust/commit/8334dd445fb10089a68808e7895f0c00d6fd0b3e"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "d7323ddf4995531e1f8606240ffbaa75f9c4cf7e", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "patch": "@@ -218,8 +218,15 @@ impl Timer {\n     }\n \n     pub fn sleep(ms: u64) {\n-        // FIXME: this can fail because of EINTR, what do do?\n-        let _ = unsafe { libc::usleep((ms * 1000) as libc::c_uint) };\n+        let mut to_sleep = libc::timespec {\n+            tv_sec: (ms / 1000) as libc::time_t,\n+            tv_nsec: ((ms % 1000) * 1000000) as libc::c_long,\n+        };\n+        while unsafe { libc::nanosleep(&to_sleep, &mut to_sleep) } != 0 {\n+            if os::errno() as int != libc::EINTR as int {\n+                fail!(\"failed to sleep, but not because of EINTR?\");\n+            }\n+        }\n     }\n \n     fn inner(&mut self) -> ~Inner {"}, {"sha": "55301b6f7c8d66d29927b4e7dbca6d7283f1ca2d", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "patch": "@@ -23,8 +23,8 @@\n //! why).\n //!\n //! As with timer_other, timers just using sleep() do not use the timerfd at\n-//! all. They remove the timerfd from the worker thread and then invoke usleep()\n-//! to block the calling thread.\n+//! all. They remove the timerfd from the worker thread and then invoke\n+//! nanosleep() to block the calling thread.\n //!\n //! As with timer_other, all units in this file are in units of millseconds.\n \n@@ -183,8 +183,15 @@ impl Timer {\n     }\n \n     pub fn sleep(ms: u64) {\n-        // FIXME: this can fail because of EINTR, what do do?\n-        let _ = unsafe { libc::usleep((ms * 1000) as libc::c_uint) };\n+        let mut to_sleep = libc::timespec {\n+            tv_sec: (ms / 1000) as libc::time_t,\n+            tv_nsec: ((ms % 1000) * 1000000) as libc::c_long,\n+        };\n+        while unsafe { libc::nanosleep(&to_sleep, &mut to_sleep) } != 0 {\n+            if os::errno() as int != libc::EINTR as int {\n+                fail!(\"failed to sleep, but not because of EINTR?\");\n+            }\n+        }\n     }\n \n     fn remove(&mut self) {"}, {"sha": "d10fa7684e83c16e7a8843a8d3b545c74d126d09", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bd8de82e19702ad26fff704ff9a4890ebe1bf7/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=d8bd8de82e19702ad26fff704ff9a4890ebe1bf7", "patch": "@@ -3682,6 +3682,7 @@ pub mod funcs {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_char, c_int, c_long, c_uint};\n             use libc::types::os::arch::c95::{size_t};\n+            use libc::types::os::common::posix01::timespec;\n             use libc::types::os::arch::posix01::utimbuf;\n             use libc::types::os::arch::posix88::{gid_t, off_t, pid_t};\n             use libc::types::os::arch::posix88::{ssize_t, uid_t};\n@@ -3731,6 +3732,7 @@ pub mod funcs {\n                 pub fn setuid(uid: uid_t) -> c_int;\n                 pub fn sleep(secs: c_uint) -> c_uint;\n                 pub fn usleep(secs: c_uint) -> c_int;\n+                pub fn nanosleep(rqtp: *timespec, rmtp: *mut timespec) -> c_int;\n                 pub fn sysconf(name: c_int) -> c_long;\n                 pub fn tcgetpgrp(fd: c_int) -> pid_t;\n                 pub fn ttyname(fd: c_int) -> *c_char;"}]}