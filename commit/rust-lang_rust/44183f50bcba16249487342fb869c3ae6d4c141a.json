{"sha": "44183f50bcba16249487342fb869c3ae6d4c141a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MTgzZjUwYmNiYTE2MjQ5NDg3MzQyZmI4NjljM2FlNmQ0YzE0MWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-05T04:02:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-05T04:02:07Z"}, "message": "Auto merge of #45710 - alexcrichton:std-symbols, r=michaelwoerister\n\nrustc: Handle some libstd symbole exports better\n\nRight now symbol exports, particularly in a cdylib, are handled by\nassuming that `pub extern` combined with `#[no_mangle]` means \"export\nthis\". This isn't actually what we want for some symbols that the\nstandard library uses to implement itself, for example symbols related\nto allocation. Additionally other special symbols like\n`rust_eh_personallity` have no need to be exported from cdylib crate\ntypes (only needed in dylib crate types).\n\nThis commit updates how rustc handles these special symbols by adding to\nthe hardcoded logic of symbols like `rust_eh_personallity` but also\nadding a new attribute, `#[rustc_std_internal_symbol]`, which forces the\nexport level to be considered the same as all other Rust functions\ninstead of looking like a C function.\n\nThe eventual goal here is to prevent functions like `__rdl_alloc` from\nshowing up as part of a Rust cdylib as it's just an internal\nimplementation detail. This then further allows such symbols to get gc'd\nby the linker when creating a cdylib.", "tree": {"sha": "61dcbdd472b1d6e099f3e8fbaa1a4bbf033173de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61dcbdd472b1d6e099f3e8fbaa1a4bbf033173de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44183f50bcba16249487342fb869c3ae6d4c141a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44183f50bcba16249487342fb869c3ae6d4c141a", "html_url": "https://github.com/rust-lang/rust/commit/44183f50bcba16249487342fb869c3ae6d4c141a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44183f50bcba16249487342fb869c3ae6d4c141a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12e6b53744a0101f28855f25e6e4551e2d664857", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e6b53744a0101f28855f25e6e4551e2d664857", "html_url": "https://github.com/rust-lang/rust/commit/12e6b53744a0101f28855f25e6e4551e2d664857"}, {"sha": "fbf98697021173a30b84d9145df0966a23a2f9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf98697021173a30b84d9145df0966a23a2f9d2", "html_url": "https://github.com/rust-lang/rust/commit/fbf98697021173a30b84d9145df0966a23a2f9d2"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "f060f6d79c17aabe2c503730b3a7d11aacc4111c", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=44183f50bcba16249487342fb869c3ae6d4c141a", "patch": "@@ -107,7 +107,7 @@ mod contents {\n     // ABI\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_alloc(size: usize,\n                                      align: usize,\n                                      err: *mut u8) -> *mut u8 {\n@@ -122,13 +122,13 @@ mod contents {\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_oom(err: *const u8) -> ! {\n         System.oom((*(err as *const AllocErr)).clone())\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_dealloc(ptr: *mut u8,\n                                        size: usize,\n                                        align: usize) {\n@@ -137,7 +137,7 @@ mod contents {\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_usable_size(layout: *const u8,\n                                            min: *mut usize,\n                                            max: *mut usize) {\n@@ -153,7 +153,7 @@ mod contents {\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_realloc(ptr: *mut u8,\n                                        _old_size: usize,\n                                        old_align: usize,\n@@ -177,7 +177,7 @@ mod contents {\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_alloc_zeroed(size: usize,\n                                             align: usize,\n                                             err: *mut u8) -> *mut u8 {\n@@ -196,7 +196,7 @@ mod contents {\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_alloc_excess(size: usize,\n                                             align: usize,\n                                             excess: *mut usize,\n@@ -210,7 +210,7 @@ mod contents {\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_realloc_excess(ptr: *mut u8,\n                                               old_size: usize,\n                                               old_align: usize,\n@@ -227,7 +227,7 @@ mod contents {\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_grow_in_place(ptr: *mut u8,\n                                              old_size: usize,\n                                              old_align: usize,\n@@ -237,7 +237,7 @@ mod contents {\n     }\n \n     #[no_mangle]\n-    #[linkage = \"external\"]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_shrink_in_place(ptr: *mut u8,\n                                                _old_size: usize,\n                                                old_align: usize,"}, {"sha": "352184c1efa76965fb5959224dcedff7b4b176f4", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=44183f50bcba16249487342fb869c3ae6d4c141a", "patch": "@@ -177,9 +177,13 @@ impl<'a> AllocFnFactory<'a> {\n \n         let no_mangle = Symbol::intern(\"no_mangle\");\n         let no_mangle = self.cx.meta_word(self.span, no_mangle);\n+\n+        let special = Symbol::intern(\"rustc_std_internal_symbol\");\n+        let special = self.cx.meta_word(self.span, special);\n         vec![\n             self.cx.attribute(self.span, linkage),\n             self.cx.attribute(self.span, no_mangle),\n+            self.cx.attribute(self.span, special),\n         ]\n     }\n "}, {"sha": "b9519bba2dd89b1eb6ed337a3c5b071ef346076c", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=44183f50bcba16249487342fb869c3ae6d4c141a", "patch": "@@ -21,6 +21,7 @@ use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use rustc::util::nodemap::FxHashMap;\n use rustc_allocator::ALLOCATOR_METHODS;\n+use syntax::attr;\n \n pub type ExportedSymbols = FxHashMap<\n     CrateNum,\n@@ -180,7 +181,15 @@ pub fn provide_extern(providers: &mut Providers) {\n }\n \n fn export_level(tcx: TyCtxt, sym_def_id: DefId) -> SymbolExportLevel {\n-    if tcx.contains_extern_indicator(sym_def_id) {\n+    // We export anything that's not mangled at the \"C\" layer as it probably has\n+    // to do with ABI concerns. We do not, however, apply such treatment to\n+    // special symbols in the standard library for various plumbing between\n+    // core/std/allocators/etc. For example symbols used to hook up allocation\n+    // are not considered for export\n+    let is_extern = tcx.contains_extern_indicator(sym_def_id);\n+    let std_internal = attr::contains_name(&tcx.get_attrs(sym_def_id),\n+                                           \"rustc_std_internal_symbol\");\n+    if is_extern && !std_internal {\n         SymbolExportLevel::C\n     } else {\n         SymbolExportLevel::Rust"}, {"sha": "4d5e4df6f95b8f24983dca3512292ca15b74339d", "filename": "src/libstd/heap.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Flibstd%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Flibstd%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fheap.rs?ref=44183f50bcba16249487342fb869c3ae6d4c141a", "patch": "@@ -17,6 +17,7 @@ pub use alloc_system::System;\n \n #[cfg(not(test))]\n #[doc(hidden)]\n+#[allow(unused_attributes)]\n pub mod __default_lib_allocator {\n     use super::{System, Layout, Alloc, AllocErr};\n     use ptr;\n@@ -28,6 +29,7 @@ pub mod __default_lib_allocator {\n     // ABI\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_alloc(size: usize,\n                                      align: usize,\n                                      err: *mut u8) -> *mut u8 {\n@@ -42,18 +44,21 @@ pub mod __default_lib_allocator {\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_oom(err: *const u8) -> ! {\n         System.oom((*(err as *const AllocErr)).clone())\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_dealloc(ptr: *mut u8,\n                                        size: usize,\n                                        align: usize) {\n         System.dealloc(ptr, Layout::from_size_align_unchecked(size, align))\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_usable_size(layout: *const u8,\n                                            min: *mut usize,\n                                            max: *mut usize) {\n@@ -63,6 +68,7 @@ pub mod __default_lib_allocator {\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_realloc(ptr: *mut u8,\n                                        old_size: usize,\n                                        old_align: usize,\n@@ -81,6 +87,7 @@ pub mod __default_lib_allocator {\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_alloc_zeroed(size: usize,\n                                             align: usize,\n                                             err: *mut u8) -> *mut u8 {\n@@ -95,6 +102,7 @@ pub mod __default_lib_allocator {\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_alloc_excess(size: usize,\n                                             align: usize,\n                                             excess: *mut usize,\n@@ -113,6 +121,7 @@ pub mod __default_lib_allocator {\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_realloc_excess(ptr: *mut u8,\n                                               old_size: usize,\n                                               old_align: usize,\n@@ -135,6 +144,7 @@ pub mod __default_lib_allocator {\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_grow_in_place(ptr: *mut u8,\n                                              old_size: usize,\n                                              old_align: usize,\n@@ -149,6 +159,7 @@ pub mod __default_lib_allocator {\n     }\n \n     #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_shrink_in_place(ptr: *mut u8,\n                                                old_size: usize,\n                                                old_align: usize,"}, {"sha": "8b564605c1ef3d60b2be9720b671b4f113e65a68", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=44183f50bcba16249487342fb869c3ae6d4c141a", "patch": "@@ -917,6 +917,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"allow_fail attribute is currently unstable\",\n                                  cfg_fn!(allow_fail))),\n \n+    (\"rustc_std_internal_symbol\", Whitelisted, Gated(Stability::Unstable,\n+                                     \"rustc_attrs\",\n+                                     \"this is an internal attribute that will \\\n+                                      never be stable\",\n+                                     cfg_fn!(rustc_attrs))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),"}, {"sha": "954ee792460add5768f6844fbf9370b7189c0418", "filename": "src/test/run-make/cdylib-fewer-symbols/Makefile", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2FMakefile?ref=44183f50bcba16249487342fb869c3ae6d4c141a", "patch": "@@ -0,0 +1,17 @@\n+# Test that allocator-related symbols don't show up as exported from a cdylib as\n+# they're internal to Rust and not part of the public ABI.\n+\n+-include ../tools.mk\n+\n+ifdef IS_MSVC\n+all:\n+\ttrue\n+else\n+all:\n+\t$(RUSTC) foo.rs\n+\tnm -g \"$(call DYLIB,foo)\"\n+\tnm -g \"$(call DYLIB,foo)\" | grep -vq __rdl_\n+\tnm -g \"$(call DYLIB,foo)\" | grep -vq __rde_\n+\tnm -g \"$(call DYLIB,foo)\" | grep -vq __rg_\n+\tnm -g \"$(call DYLIB,foo)\" | grep -vq __rust_\n+endif"}, {"sha": "4ec8d4ee86079ce968efc99c5be0c772f5da4634", "filename": "src/test/run-make/cdylib-fewer-symbols/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44183f50bcba16249487342fb869c3ae6d4c141a/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2Ffoo.rs?ref=44183f50bcba16249487342fb869c3ae6d4c141a", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"cdylib\"]\n+\n+#[no_mangle]\n+pub extern fn foo() -> u32 {\n+    3\n+}"}]}