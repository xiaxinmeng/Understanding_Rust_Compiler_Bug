{"sha": "29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZGNmZjNhYTJjYTNkODY3YmM4M2NiNTU1MjcxZGU3YmE3YWM1YTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-30T03:01:33Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-30T03:11:23Z"}, "message": "Support different scalar integer widths in Rust v. LLVM.\n\nSome x86 C intrinsics are declared to take `int ...` (i.e. exposed in\nRust as `i32`), but LLVM implements them by taking `i8` instead.", "tree": {"sha": "ccddef79ca16069c5fb2dc0ed89a35afa4c1f6ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccddef79ca16069c5fb2dc0ed89a35afa4c1f6ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "html_url": "https://github.com/rust-lang/rust/commit/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf8bdca57d0a099f955a33c2f9552b335d06ff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf8bdca57d0a099f955a33c2f9552b335d06ff6", "html_url": "https://github.com/rust-lang/rust/commit/daf8bdca57d0a099f955a33c2f9552b335d06ff6"}], "stats": {"total": 205, "additions": 136, "deletions": 69}, "files": [{"sha": "97b2f57010b97fcfcdb66c2ac1a837a37e89cb81", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -16,7 +16,8 @@\n import textwrap\n \n SPEC = re.compile(\n-    r'^(?:(?P<id>[iusfIUSF])(?:\\((?P<start>\\d*)-(?P<end>\\d*)\\)|(?P<width>\\d*))' +\n+    r'^(?:(?P<id>[iusfIUSF])(?:\\((?P<start>\\d+)-(?P<end>\\d+)\\)|'\n+    r'(?P<width>\\d+)(:?/(?P<llvm_width>\\d+))?)'\n     r'|(?P<reference>\\d+)(?P<modifiers>[vShdnwus]*)(?P<force_width>x\\d+)?)$'\n )\n \n@@ -111,27 +112,39 @@ def type_info(self, platform_info):\n         return platform_info.number_type_info(self)\n \n class Signed(Number):\n-    def __init__(self, bitwidth):\n+    def __init__(self, bitwidth, llvm_bitwidth = None):\n         Number.__init__(self, bitwidth)\n+        self._llvm_bitwidth = llvm_bitwidth\n \n     def compiler_ctor(self):\n-        return 'i({})'.format(self.bitwidth())\n+        if self._llvm_bitwidth is None:\n+            return 'i({})'.format(self.bitwidth())\n+        else:\n+            return 'i_({}, {})'.format(self.bitwidth(),\n+                                       self._llvm_bitwidth)\n \n     def llvm_name(self):\n-        return 'i{}'.format(self.bitwidth())\n+        bw = self._llvm_bitwidth or self.bitwidth()\n+        return 'i{}'.format(bw)\n \n     def rust_name(self):\n         return 'i{}'.format(self.bitwidth())\n \n class Unsigned(Number):\n-    def __init__(self, bitwidth):\n+    def __init__(self, bitwidth, llvm_bitwidth = None):\n         Number.__init__(self, bitwidth)\n+        self._llvm_bitwidth = llvm_bitwidth\n \n     def compiler_ctor(self):\n-        return 'u({})'.format(self.bitwidth())\n+        if self._llvm_bitwidth is None:\n+            return 'u({})'.format(self.bitwidth())\n+        else:\n+            return 'u_({}, {})'.format(self.bitwidth(),\n+                                       self._llvm_bitwidth)\n \n     def llvm_name(self):\n-        return 'i{}'.format(self.bitwidth())\n+        bw = self._llvm_bitwidth or self.bitwidth()\n+        return 'i{}'.format(bw)\n \n     def rust_name(self):\n         return 'u{}'.format(self.bitwidth())\n@@ -220,18 +233,28 @@ def enumerate(self, width):\n                 id = match.group('id')\n                 is_vector = id.islower()\n                 type_ctors = TYPE_ID_LOOKUP[id.lower()]\n+\n                 start = match.group('start')\n                 if start is not None:\n                     end = match.group('end')\n+                    llvm_width = None\n                 else:\n                     start = end = match.group('width')\n+                    llvm_width = match.group('llvm_width')\n                 start = int(start)\n                 end = int(end)\n \n                 bitwidth = start\n                 while bitwidth <= end:\n                     for ctor in type_ctors:\n-                        scalar = ctor(bitwidth)\n+                        if llvm_width is not None:\n+                            assert not is_vector\n+                            llvm_width = int(llvm_width)\n+                            assert llvm_width < bitwidth\n+                            scalar = ctor(bitwidth, llvm_width)\n+                        else:\n+                            scalar = ctor(bitwidth)\n+\n                         if is_vector:\n                             yield Vector(scalar, width // bitwidth)\n                         else:\n@@ -351,8 +374,9 @@ def parse_args():\n         vector := vector_elem width |\n         vector_elem := 'i' | 'u' | 's' | 'f'\n \n-        scalar := scalar_type number\n+        scalar := scalar_type number llvm_width?\n         scalar_type := 'U' | 'S' | 'F'\n+        llvm_width := '/' number\n \n         aggregate := '(' (type),* ')' 'f'?\n \n@@ -387,7 +411,11 @@ def parse_args():\n         ## Scalars\n \n         Similar to vectors, but these describe a single concrete type,\n-        not a range. The number is the bitwidth.\n+        not a range. The number is the bitwidth. The optional\n+        `llvm_width` is the bitwidth of the integer that should be\n+        passed to LLVM (by truncating the Rust argument): this only\n+        works with scalar integers and the LLVM width must be smaller\n+        than the Rust width.\n \n         ### Types\n \n@@ -474,7 +502,7 @@ def open(self, platform):\n \n #![allow(unused_imports)]\n \n-use {{Intrinsic, i, u, f, v, agg}};\n+use {{Intrinsic, i, i_, u, u_, f, v, agg}};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n "}, {"sha": "4ac82fb90e900870b4861db875c4cf4d8c1e2fa5", "filename": "src/etc/platform-intrinsics/x86/avx.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx.json?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -13,7 +13,7 @@\n             \"width\": [256],\n             \"llvm\": \"dp.ps.256\",\n             \"ret\": \"f32\",\n-            \"args\": [\"0\", \"0\", \"S32\"]\n+            \"args\": [\"0\", \"0\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"256_hadd_{0.data_type}\","}, {"sha": "bd260ec02e93078ea3d0eef710585d3036ce5efe", "filename": "src/etc/platform-intrinsics/x86/avx2.json", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Favx2.json?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -78,6 +78,20 @@\n             \"ret\": \"i(8-32)\",\n             \"args\": [\"0\", \"0\"]\n         },\n+        {\n+            \"intrinsic\": \"256_movemask_epi8\",\n+            \"width\": [256],\n+            \"llvm\": \"pmovmskb\",\n+            \"ret\": \"S32\",\n+            \"args\": [\"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"256_mpsadbw_epu8\",\n+            \"width\": [256],\n+            \"llvm\": \"mpsadbw\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"u8\", \"u8\", \"S32/8\"]\n+        },\n         {\n             \"intrinsic\": \"256_mul_{0.data_type}\",\n             \"width\": [256],"}, {"sha": "e835320e5cd18a84d4b185e3b8da3eb64fefb72d", "filename": "src/etc/platform-intrinsics/x86/sse41.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -6,7 +6,7 @@\n             \"width\": [128],\n             \"llvm\": \"dp{0.data_type}\",\n             \"ret\": \"f(32-64)\",\n-            \"args\": [\"0\", \"0\", \"S32\"]\n+            \"args\": [\"0\", \"0\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_max_{0.data_type}\",\n@@ -34,7 +34,7 @@\n             \"width\": [128],\n             \"llvm\": \"mpsadbw\",\n             \"ret\": \"u16\",\n-            \"args\": [\"u8\", \"u8\", \"S32\"]\n+            \"args\": [\"u8\", \"u8\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_mul_epi32\","}, {"sha": "c43ffef0dc578cc7459be1fa520401ed880aba79", "filename": "src/etc/platform-intrinsics/x86/sse42.json", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -6,98 +6,98 @@\n             \"width\": [128],\n             \"llvm\": \"pcmpestria128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpestrc\",\n             \"width\": [128],\n             \"llvm\": \"pcmpestric128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpestri\",\n             \"width\": [128],\n             \"llvm\": \"pcmpestri128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpestrm\",\n             \"width\": [128],\n             \"llvm\": \"pcmpestrm128\",\n             \"ret\": \"s8\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpestro\",\n             \"width\": [128],\n             \"llvm\": \"pcmpestrio128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpestrs\",\n             \"width\": [128],\n             \"llvm\": \"pcmpestris128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpestrz\",\n             \"width\": [128],\n             \"llvm\": \"pcmpestriz128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistra\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistria128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistrc\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistric128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistri\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistri128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistrm\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistrm128\",\n             \"ret\": \"s8\",\n-            \"args\": [\"s8\", \"s8\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistro\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistrio128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistrs\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistris128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistrz\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistriz128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"s8\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32/8\"]\n         }\n     ]\n }"}, {"sha": "d58feb4611c051c9ae7429b12a67ebc249620ec4", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -30,7 +30,7 @@ pub struct Intrinsic {\n \n #[derive(Clone, Hash, Eq, PartialEq)]\n pub enum Type {\n-    Integer(/* signed */ bool, u8),\n+    Integer(/* signed */ bool, u8, /* llvm width */ u8),\n     Float(u8),\n     Pointer(Box<Type>),\n     Vector(Box<Type>, u8),\n@@ -41,8 +41,11 @@ pub enum IntrinsicDef {\n     Named(&'static str),\n }\n \n-fn i(width: u8) -> Type { Type::Integer(true, width) }\n-fn u(width: u8) -> Type { Type::Integer(false, width) }\n+fn i(width: u8) -> Type { Type::Integer(true, width, width) }\n+fn i_(width: u8, llvm_width: u8) -> Type { Type::Integer(true, width, llvm_width) }\n+fn u(width: u8) -> Type { Type::Integer(false, width, width) }\n+#[allow(dead_code)]\n+fn u_(width: u8, llvm_width: u8) -> Type { Type::Integer(false, width, llvm_width) }\n fn f(width: u8) -> Type { Type::Float(width) }\n fn v(x: Type, length: u8) -> Type { Type::Vector(Box::new(x), length) }\n fn agg(flatten: bool, types: Vec<Type>) -> Type {"}, {"sha": "a6fe8aef0b4394922ff5f7a01c2bda94d52e805a", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -13,7 +13,7 @@\n \n #![allow(unused_imports)]\n \n-use {Intrinsic, i, u, f, v, agg};\n+use {Intrinsic, i, i_, u, u_, f, v, agg};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n \n@@ -286,12 +286,12 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.ssse3.psign.w.128\")\n         },\n         \"_dp_ps\" => Intrinsic {\n-            inputs: vec![v(f(32), 4), v(f(32), 4), i(32)],\n+            inputs: vec![v(f(32), 4), v(f(32), 4), i_(32, 8)],\n             output: v(f(32), 4),\n             definition: Named(\"llvm.x86.sse41.dpps\")\n         },\n         \"_dp_pd\" => Intrinsic {\n-            inputs: vec![v(f(64), 2), v(f(64), 2), i(32)],\n+            inputs: vec![v(f(64), 2), v(f(64), 2), i_(32, 8)],\n             output: v(f(64), 2),\n             definition: Named(\"llvm.x86.sse41.dppd\")\n         },\n@@ -341,7 +341,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.sse41.phminposuw\")\n         },\n         \"_mpsadbw_epu8\" => Intrinsic {\n-            inputs: vec![v(u(8), 16), v(u(8), 16), i(32)],\n+            inputs: vec![v(u(8), 16), v(u(8), 16), i_(32, 8)],\n             output: v(u(16), 8),\n             definition: Named(\"llvm.x86.sse41.mpsadbw\")\n         },\n@@ -371,72 +371,72 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.sse41.ptestz\")\n         },\n         \"_cmpestra\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpestria128\")\n         },\n         \"_cmpestrc\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpestric128\")\n         },\n         \"_cmpestri\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpestri128\")\n         },\n         \"_cmpestrm\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i_(32, 8)],\n             output: v(i(8), 16),\n             definition: Named(\"llvm.x86.sse42.pcmpestrm128\")\n         },\n         \"_cmpestro\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpestrio128\")\n         },\n         \"_cmpestrs\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpestris128\")\n         },\n         \"_cmpestrz\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpestriz128\")\n         },\n         \"_cmpistra\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistria128\")\n         },\n         \"_cmpistrc\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistric128\")\n         },\n         \"_cmpistri\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistri128\")\n         },\n         \"_cmpistrm\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i_(32, 8)],\n             output: v(i(8), 16),\n             definition: Named(\"llvm.x86.sse42.pcmpistrm128\")\n         },\n         \"_cmpistro\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistrio128\")\n         },\n         \"_cmpistrs\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistris128\")\n         },\n         \"_cmpistrz\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i_(32, 8)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistriz128\")\n         },\n@@ -451,7 +451,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.avx.addsub.pd.256\")\n         },\n         \"256_dp_ps\" => Intrinsic {\n-            inputs: vec![v(f(32), 8), v(f(32), 8), i(32)],\n+            inputs: vec![v(f(32), 8), v(f(32), 8), i_(32, 8)],\n             output: v(f(32), 8),\n             definition: Named(\"llvm.x86.avx.dp.ps.256\")\n         },\n@@ -765,6 +765,16 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(u(32), 8),\n             definition: Named(\"llvm.x86.avx2.pminu.d\")\n         },\n+        \"256_movemask_epi8\" => Intrinsic {\n+            inputs: vec![v(i(8), 32)],\n+            output: i(32),\n+            definition: Named(\"llvm.x86.avx2.pmovmskb\")\n+        },\n+        \"256_mpsadbw_epu8\" => Intrinsic {\n+            inputs: vec![v(u(8), 32), v(u(8), 32), i_(32, 8)],\n+            output: v(u(16), 16),\n+            definition: Named(\"llvm.x86.avx2.mpsadbw\")\n+        },\n         \"256_mul_epi64\" => Intrinsic {\n             inputs: vec![v(i(32), 8), v(i(32), 8)],\n             output: v(i(64), 4),"}, {"sha": "b883bad7d413de875bc2326e9e9552dd33e2273f", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -930,10 +930,13 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 x.into_iter().next().unwrap()\n             }\n             fn ty_to_type(ccx: &CrateContext, t: &intrinsics::Type,\n-                          any_flattened_aggregate: &mut bool) -> Vec<Type> {\n+                          any_changes_needed: &mut bool) -> Vec<Type> {\n                 use intrinsics::Type::*;\n                 match *t {\n-                    Integer(_signed, x) => vec![Type::ix(ccx, x as u64)],\n+                    Integer(_signed, width, llvm_width) => {\n+                        *any_changes_needed |= width != llvm_width;\n+                        vec![Type::ix(ccx, llvm_width as u64)]\n+                    }\n                     Float(x) => {\n                         match x {\n                             32 => vec![Type::f32(ccx)],\n@@ -944,27 +947,28 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                     Pointer(_) => unimplemented!(),\n                     Vector(ref t, length) => {\n                         let elem = one(ty_to_type(ccx, t,\n-                                                  any_flattened_aggregate));\n+                                                  any_changes_needed));\n                         vec![Type::vector(&elem,\n                                           length as u64)]\n                     }\n                     Aggregate(false, _) => unimplemented!(),\n                     Aggregate(true, ref contents) => {\n-                        *any_flattened_aggregate = true;\n+                        *any_changes_needed = true;\n                         contents.iter()\n-                                .flat_map(|t| ty_to_type(ccx, t, any_flattened_aggregate))\n+                                .flat_map(|t| ty_to_type(ccx, t, any_changes_needed))\n                                 .collect()\n                     }\n                 }\n             }\n \n             // This allows an argument list like `foo, (bar, baz),\n-            // qux` to be converted into `foo, bar, baz, qux`.\n-            fn flatten_aggregate<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                             t: &intrinsics::Type,\n-                                             arg_type: Ty<'tcx>,\n-                                             llarg: ValueRef)\n-                                             -> Vec<ValueRef>\n+            // qux` to be converted into `foo, bar, baz, qux`, and\n+            // integer arguments to be truncated as needed.\n+            fn modify_as_needed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                                            t: &intrinsics::Type,\n+                                            arg_type: Ty<'tcx>,\n+                                            llarg: ValueRef)\n+                                            -> Vec<ValueRef>\n             {\n                 match *t {\n                     intrinsics::Type::Aggregate(true, ref contents) => {\n@@ -984,22 +988,28 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                             })\n                             .collect()\n                     }\n+                    intrinsics::Type::Integer(_, width, llvm_width) if width != llvm_width => {\n+                        // the LLVM intrinsic uses a smaller integer\n+                        // size than the C intrinsic's signature, so\n+                        // we have to trim it down here.\n+                        vec![Trunc(bcx, llarg, Type::ix(bcx.ccx(), llvm_width as u64))]\n+                    }\n                     _ => vec![llarg],\n                 }\n             }\n \n \n-            let mut any_flattened_aggregate = false;\n+            let mut any_changes_needed = false;\n             let inputs = intr.inputs.iter()\n-                                    .flat_map(|t| ty_to_type(ccx, t, &mut any_flattened_aggregate))\n+                                    .flat_map(|t| ty_to_type(ccx, t, &mut any_changes_needed))\n                                     .collect::<Vec<_>>();\n \n-            let mut out_flattening = false;\n-            let outputs = one(ty_to_type(ccx, &intr.output, &mut out_flattening));\n+            let mut out_changes = false;\n+            let outputs = one(ty_to_type(ccx, &intr.output, &mut out_changes));\n             // outputting a flattened aggregate is nonsense\n-            assert!(!out_flattening);\n+            assert!(!out_changes);\n \n-            let llargs = if !any_flattened_aggregate {\n+            let llargs = if !any_changes_needed {\n                 // no aggregates to flatten, so no change needed\n                 llargs\n             } else {\n@@ -1009,9 +1019,10 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 intr.inputs.iter()\n                            .zip(&llargs)\n                            .zip(&arg_tys)\n-                           .flat_map(|((t, llarg), ty)| flatten_aggregate(bcx, t, ty, *llarg))\n+                           .flat_map(|((t, llarg), ty)| modify_as_needed(bcx, t, ty, *llarg))\n                            .collect()\n             };\n+            assert_eq!(inputs.len(), llargs.len());\n \n             match intr.definition {\n                 intrinsics::IntrinsicDef::Named(name) => {"}, {"sha": "4bca474f9220478e53beec85dde18220470ef988", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=29dcff3aa2ca3d867bc83cb555271de7ba7ac5a5", "patch": "@@ -456,7 +456,8 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n     };\n \n     match *expected {\n-        Integer(signed, bits) => match (signed, bits, &t.sty) {\n+        // (The width we pass to LLVM doesn't concern the type checker.)\n+        Integer(signed, bits, _llvm_width) => match (signed, bits, &t.sty) {\n             (true, 8, &ty::TyInt(ast::TyI8)) | (false, 8, &ty::TyUint(ast::TyU8)) |\n             (true, 16, &ty::TyInt(ast::TyI16)) | (false, 16, &ty::TyUint(ast::TyU16)) |\n             (true, 32, &ty::TyInt(ast::TyI32)) | (false, 32, &ty::TyUint(ast::TyU32)) |"}]}