{"sha": "5dd0375ae0ae0b2995c3be738a1da7bf774402d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZDAzNzVhZTBhZTBiMjk5NWMzYmU3MzhhMWRhN2JmNzc0NDAyZDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T09:59:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T11:11:09Z"}, "message": "turn casts-to-raw into a proper raw-reborrow; that is just cleaner", "tree": {"sha": "62c060a0db325deaeb26d9ffd34bbf2eb14d6b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c060a0db325deaeb26d9ffd34bbf2eb14d6b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dd0375ae0ae0b2995c3be738a1da7bf774402d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd0375ae0ae0b2995c3be738a1da7bf774402d3", "html_url": "https://github.com/rust-lang/rust/commit/5dd0375ae0ae0b2995c3be738a1da7bf774402d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dd0375ae0ae0b2995c3be738a1da7bf774402d3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c885d8b41e5cc22ae08447c7eadfc65a15a7af9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c885d8b41e5cc22ae08447c7eadfc65a15a7af9a", "html_url": "https://github.com/rust-lang/rust/commit/c885d8b41e5cc22ae08447c7eadfc65a15a7af9a"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "ff07f44ac5fd386f21f79b0e7028f8060cdc6dc8", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5dd0375ae0ae0b2995c3be738a1da7bf774402d3/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd0375ae0ae0b2995c3be738a1da7bf774402d3/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=5dd0375ae0ae0b2995c3be738a1da7bf774402d3", "patch": "@@ -37,37 +37,35 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         kind: CastKind,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx> {\n-        let src_layout = src.layout;\n         use rustc::mir::CastKind::*;\n         match kind {\n             Unsize => {\n                 self.unsize_into(src, dest)?;\n             }\n \n             Misc => {\n+                let src_layout = src.layout;\n                 let src = self.read_value(src)?;\n \n-                if M::ENABLE_PTR_TRACKING_HOOKS &&\n-                    src.layout.ty.is_region_ptr() && dest.layout.ty.is_unsafe_ptr()\n-                {\n+                let src = if M::ENABLE_PTR_TRACKING_HOOKS && src_layout.ty.is_region_ptr() {\n+                    // The only `Misc` casts on references are those creating raw pointers.\n+                    assert!(dest.layout.ty.is_unsafe_ptr());\n                     // For the purpose of the \"ptr tag hooks\", treat this as creating\n                     // a new, raw reference.\n                     let place = self.ref_to_mplace(src)?;\n-                    let _val = self.create_ref(place, None)?;\n-                    // FIXME: The blog post said we should now also erase the tag.\n-                    // That would amount to using `_val` instead of `src` from here on.\n-                    // However, do we really want to do that?  `transmute` doesn't\n-                    // do it either and we have to support that, somehow.\n-                }\n+                    self.create_ref(place, None)?\n+                } else {\n+                    *src\n+                };\n \n-                if self.type_is_fat_ptr(src.layout.ty) {\n-                    match (*src, self.type_is_fat_ptr(dest.layout.ty)) {\n+                if self.type_is_fat_ptr(src_layout.ty) {\n+                    match (src, self.type_is_fat_ptr(dest.layout.ty)) {\n                         // pointers to extern types\n                         (Value::Scalar(_),_) |\n                         // slices and trait objects to other slices/trait objects\n                         (Value::ScalarPair(..), true) => {\n                             // No change to value\n-                            self.write_value(*src, dest)?;\n+                            self.write_value(src, dest)?;\n                         }\n                         // slices and trait objects to thin pointers (dropping the metadata)\n                         (Value::ScalarPair(data, _), false) => {\n@@ -79,7 +77,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         layout::Variants::Single { index } => {\n                             if let Some(def) = src_layout.ty.ty_adt_def() {\n                                 // Cast from a univariant enum\n-                                assert!(src.layout.is_zst());\n+                                assert!(src_layout.is_zst());\n                                 let discr_val = def\n                                     .discriminant_for_variant(*self.tcx, index)\n                                     .val;"}]}