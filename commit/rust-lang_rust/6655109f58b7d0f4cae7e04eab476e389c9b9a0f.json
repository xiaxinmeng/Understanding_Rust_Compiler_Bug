{"sha": "6655109f58b7d0f4cae7e04eab476e389c9b9a0f", "node_id": "C_kwDOAAsO6NoAKDY2NTUxMDlmNThiN2QwZjRjYWU3ZTA0ZWFiNDc2ZTM4OWM5YjlhMGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-15T07:04:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-15T07:04:10Z"}, "message": "Auto merge of #93918 - jonhoo:bootstrap-native-envflags, r=Mark-Simulacrum\n\nbootstrap: tidy up flag handling for llvm build\n\nThis tidies up the logic in `src/bootstrap/native.rs` such that:\n\n - `CMAKE_*_LINKER_FLAGS` is not overridden if we add to it twice.\n - `CMAKE_*_FLAGS` also include the standard `*FLAGS` environment\n   variables, which CMake respects when we _don't_ set `CMAKE_*_FLAGS`.\n - `llvm.ldflags` from `config.toml` appends to the ldflags Rust's\n   bootstrap logic adds, rather than replacing them.\n\nIt also takes a second stab at #89983 by moving `-static-libstdc++` to just be passed as a linker flag, since that's what it is.\n\nFixes #93880. Fixes #70468. Closes #89983.", "tree": {"sha": "7421ca184f8134ca51476ecb617f568587016c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7421ca184f8134ca51476ecb617f568587016c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6655109f58b7d0f4cae7e04eab476e389c9b9a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6655109f58b7d0f4cae7e04eab476e389c9b9a0f", "html_url": "https://github.com/rust-lang/rust/commit/6655109f58b7d0f4cae7e04eab476e389c9b9a0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6655109f58b7d0f4cae7e04eab476e389c9b9a0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d163e66211c529465868a22686f46c5956342a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d163e66211c529465868a22686f46c5956342a4", "html_url": "https://github.com/rust-lang/rust/commit/8d163e66211c529465868a22686f46c5956342a4"}, {"sha": "36692741a2edef04a92021dcde05d9fa124f25e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/36692741a2edef04a92021dcde05d9fa124f25e6", "html_url": "https://github.com/rust-lang/rust/commit/36692741a2edef04a92021dcde05d9fa124f25e6"}], "stats": {"total": 97, "additions": 66, "deletions": 31}, "files": [{"sha": "f00875239040db8b67d298b0019bcf4939952c11", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 66, "deletions": 31, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/6655109f58b7d0f4cae7e04eab476e389c9b9a0f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6655109f58b7d0f4cae7e04eab476e389c9b9a0f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6655109f58b7d0f4cae7e04eab476e389c9b9a0f", "patch": "@@ -31,6 +31,29 @@ pub struct Meta {\n     root: String,\n }\n \n+// Linker flags to pass to LLVM's CMake invocation.\n+#[derive(Debug, Clone, Default)]\n+struct LdFlags {\n+    // CMAKE_EXE_LINKER_FLAGS\n+    exe: OsString,\n+    // CMAKE_SHARED_LINKER_FLAGS\n+    shared: OsString,\n+    // CMAKE_MODULE_LINKER_FLAGS\n+    module: OsString,\n+}\n+\n+impl LdFlags {\n+    fn push_all(&mut self, s: impl AsRef<OsStr>) {\n+        let s = s.as_ref();\n+        self.exe.push(\" \");\n+        self.exe.push(s);\n+        self.shared.push(\" \");\n+        self.shared.push(s);\n+        self.module.push(\" \");\n+        self.module.push(s);\n+    }\n+}\n+\n // This returns whether we've already previously built LLVM.\n //\n // It's used to avoid busting caches during x.py check -- if we've already built\n@@ -146,6 +169,7 @@ impl Step for Llvm {\n \n         // https://llvm.org/docs/CMake.html\n         let mut cfg = cmake::Config::new(builder.src.join(root));\n+        let mut ldflags = LdFlags::default();\n \n         let profile = match (builder.config.llvm_optimize, builder.config.llvm_release_debuginfo) {\n             (false, _) => \"Debug\",\n@@ -238,31 +262,28 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n-        // For distribution we want the LLVM tools to be *statically* linked to libstdc++\n-        if builder.config.llvm_tools_enabled {\n-            if !target.contains(\"msvc\") {\n+        // For distribution we want the LLVM tools to be *statically* linked to libstdc++.\n+        // We also do this if the user explicitly requested static libstdc++.\n+        if builder.config.llvm_tools_enabled || builder.config.llvm_static_stdcpp {\n+            if !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n                 if target.contains(\"apple\") {\n-                    cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-static-libstdc++\");\n+                    ldflags.push_all(\"-static-libstdc++\");\n                 } else {\n-                    cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-Wl,-Bsymbolic -static-libstdc++\");\n+                    ldflags.push_all(\"-Wl,-Bsymbolic -static-libstdc++\");\n                 }\n             }\n         }\n \n-        if !target.contains(\"freebsd\") && target.starts_with(\"riscv\") {\n+        if target.starts_with(\"riscv\") && !target.contains(\"freebsd\") {\n             // RISC-V GCC erroneously requires linking against\n             // `libatomic` when using 1-byte and 2-byte C++\n             // atomics but the LLVM build system check cannot\n             // detect this. Therefore it is set manually here.\n             // FreeBSD uses Clang as its system compiler and\n             // provides no libatomic in its base system so does\n             // not want this.\n-            if !builder.config.llvm_tools_enabled {\n-                cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-latomic\");\n-            } else {\n-                cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-latomic -static-libstdc++\");\n-            }\n-            cfg.define(\"CMAKE_SHARED_LINKER_FLAGS\", \"-latomic\");\n+            ldflags.exe.push(\" -latomic\");\n+            ldflags.shared.push(\" -latomic\");\n         }\n \n         if target.contains(\"msvc\") {\n@@ -309,7 +330,7 @@ impl Step for Llvm {\n \n         // Workaround for ppc32 lld limitation\n         if target == \"powerpc-unknown-freebsd\" {\n-            cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-fuse-ld=bfd\");\n+            ldflags.exe.push(\" -fuse-ld=bfd\");\n         }\n \n         // https://llvm.org/docs/HowToCrossCompileLLVM.html\n@@ -351,7 +372,7 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN\", \"YES\");\n         }\n \n-        configure_cmake(builder, target, &mut cfg, true);\n+        configure_cmake(builder, target, &mut cfg, true, ldflags);\n \n         for (key, val) in &builder.config.llvm_build_config {\n             cfg.define(key, val);\n@@ -399,6 +420,7 @@ fn configure_cmake(\n     target: TargetSelection,\n     cfg: &mut cmake::Config,\n     use_compiler_launcher: bool,\n+    mut ldflags: LdFlags,\n ) {\n     // Do not print installation messages for up-to-date files.\n     // LLVM and LLD builds can produce a lot of those and hit CI limits on log size.\n@@ -507,31 +529,38 @@ fn configure_cmake(\n     }\n \n     cfg.build_arg(\"-j\").build_arg(builder.jobs().to_string());\n-    let mut cflags = builder.cflags(target, GitRepo::Llvm).join(\" \");\n+    let mut cflags: OsString = builder.cflags(target, GitRepo::Llvm).join(\" \").into();\n     if let Some(ref s) = builder.config.llvm_cflags {\n-        cflags.push_str(&format!(\" {}\", s));\n+        cflags.push(\" \");\n+        cflags.push(s);\n     }\n     // Some compiler features used by LLVM (such as thread locals) will not work on a min version below iOS 10.\n     if target.contains(\"apple-ios\") {\n         if target.contains(\"86-\") {\n-            cflags.push_str(\" -miphonesimulator-version-min=10.0\");\n+            cflags.push(\" -miphonesimulator-version-min=10.0\");\n         } else {\n-            cflags.push_str(\" -miphoneos-version-min=10.0\");\n+            cflags.push(\" -miphoneos-version-min=10.0\");\n         }\n     }\n     if builder.config.llvm_clang_cl.is_some() {\n-        cflags.push_str(&format!(\" --target={}\", target))\n+        cflags.push(&format!(\" --target={}\", target));\n     }\n-    cfg.define(\"CMAKE_C_FLAGS\", cflags);\n-    let mut cxxflags = builder.cflags(target, GitRepo::Llvm).join(\" \");\n-    if builder.config.llvm_static_stdcpp && !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n-        cxxflags.push_str(\" -static-libstdc++\");\n+    if let Some(flags) = env::var_os(\"CFLAGS\") {\n+        cflags.push(\" \");\n+        cflags.push(flags);\n     }\n+    cfg.define(\"CMAKE_C_FLAGS\", cflags);\n+    let mut cxxflags: OsString = builder.cflags(target, GitRepo::Llvm).join(\" \").into();\n     if let Some(ref s) = builder.config.llvm_cxxflags {\n-        cxxflags.push_str(&format!(\" {}\", s));\n+        cxxflags.push(\" \");\n+        cxxflags.push(s);\n     }\n     if builder.config.llvm_clang_cl.is_some() {\n-        cxxflags.push_str(&format!(\" --target={}\", target))\n+        cxxflags.push(&format!(\" --target={}\", target));\n+    }\n+    if let Some(flags) = env::var_os(\"CXXFLAGS\") {\n+        cxxflags.push(\" \");\n+        cxxflags.push(flags);\n     }\n     cfg.define(\"CMAKE_CXX_FLAGS\", cxxflags);\n     if let Some(ar) = builder.ar(target) {\n@@ -550,12 +579,18 @@ fn configure_cmake(\n         }\n     }\n \n-    if let Some(ref s) = builder.config.llvm_ldflags {\n-        cfg.define(\"CMAKE_SHARED_LINKER_FLAGS\", s);\n-        cfg.define(\"CMAKE_MODULE_LINKER_FLAGS\", s);\n-        cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", s);\n+    if let Some(ref flags) = builder.config.llvm_ldflags {\n+        ldflags.push_all(flags);\n     }\n \n+    if let Some(flags) = env::var_os(\"LDFLAGS\") {\n+        ldflags.push_all(&flags);\n+    }\n+\n+    cfg.define(\"CMAKE_SHARED_LINKER_FLAGS\", &ldflags.shared);\n+    cfg.define(\"CMAKE_MODULE_LINKER_FLAGS\", &ldflags.module);\n+    cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", &ldflags.exe);\n+\n     if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n         cfg.env(\"RUSTC_LOG\", \"sccache=warn\");\n     }\n@@ -598,7 +633,7 @@ impl Step for Lld {\n         t!(fs::create_dir_all(&out_dir));\n \n         let mut cfg = cmake::Config::new(builder.src.join(\"src/llvm-project/lld\"));\n-        configure_cmake(builder, target, &mut cfg, true);\n+        configure_cmake(builder, target, &mut cfg, true, LdFlags::default());\n \n         // This is an awful, awful hack. Discovered when we migrated to using\n         // clang-cl to compile LLVM/LLD it turns out that LLD, when built out of\n@@ -788,7 +823,7 @@ impl Step for Sanitizers {\n         // Unfortunately sccache currently lacks support to build them successfully.\n         // Disable compiler launcher on Darwin targets to avoid potential issues.\n         let use_compiler_launcher = !self.target.contains(\"apple-darwin\");\n-        configure_cmake(builder, self.target, &mut cfg, use_compiler_launcher);\n+        configure_cmake(builder, self.target, &mut cfg, use_compiler_launcher, LdFlags::default());\n \n         t!(fs::create_dir_all(&out_dir));\n         cfg.out_dir(out_dir);"}]}