{"sha": "6d2cdbec3ef6e5460753986372ed898a1b3bc553", "node_id": "C_kwDOAAsO6NoAKDZkMmNkYmVjM2VmNmU1NDYwNzUzOTg2MzcyZWQ4OThhMWIzYmM1NTM", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-02-15T19:16:19Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-02-16T12:29:00Z"}, "message": "Add mentions to `Copy` for `union` fields", "tree": {"sha": "f7fd3ce176fe84e15647e17cd1accd9998d9b9fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7fd3ce176fe84e15647e17cd1accd9998d9b9fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2cdbec3ef6e5460753986372ed898a1b3bc553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2cdbec3ef6e5460753986372ed898a1b3bc553", "html_url": "https://github.com/rust-lang/rust/commit/6d2cdbec3ef6e5460753986372ed898a1b3bc553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2cdbec3ef6e5460753986372ed898a1b3bc553/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6421a499a50adbaa7b5d0234bdd4817d970f0933", "url": "https://api.github.com/repos/rust-lang/rust/commits/6421a499a50adbaa7b5d0234bdd4817d970f0933", "html_url": "https://github.com/rust-lang/rust/commit/6421a499a50adbaa7b5d0234bdd4817d970f0933"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "ca2e75886c79404491eab42c45696bab94d27a8c", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -382,10 +382,15 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                     tcx.sess,\n                     field_span,\n                     E0740,\n-                    \"unions may not contain fields that need dropping\"\n+                    \"unions cannot contain fields that may need dropping\"\n+                )\n+                .note(\n+                    \"a type is guaranteed not to need dropping \\\n+                    when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\",\n                 )\n                 .multipart_suggestion_verbose(\n-                    \"wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\",\n+                    \"when the type does not implement `Copy`, \\\n+                    wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\",\n                     vec![\n                         (ty_span.shrink_to_lo(), format!(\"std::mem::ManuallyDrop<\")),\n                         (ty_span.shrink_to_hi(), \">\".into()),"}, {"sha": "af8d8e92b20bdca8d3292a55f7f34104f18133c2", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -13,15 +13,15 @@ union U22<T> { // OK\n }\n \n union U3 {\n-    a: String, //~ ERROR unions may not contain fields that need dropping\n+    a: String, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union U32 { // field that does not drop but is not `Copy`, either -- this is the real feature gate test!\n     a: std::cell::RefCell<i32>, //~ ERROR unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\n }\n \n union U4<T> {\n-    a: T, //~ ERROR unions may not contain fields that need dropping\n+    a: T, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union U5 { // Having a drop impl is OK"}, {"sha": "9e4a89f80c852976fa3c6d9c2736c24574e160ab", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -7,24 +7,26 @@ LL |     a: std::cell::RefCell<i32>,\n    = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n    = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/feature-gate-untagged_unions.rs:16:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/feature-gate-untagged_unions.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "80474b807e7f34105e198d9bf512998d9a8fa5f3", "filename": "src/test/ui/union/issue-41073.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -1,7 +1,7 @@\n #![feature(untagged_unions)]\n \n union Test {\n-    a: A, //~ ERROR unions may not contain fields that need dropping\n+    a: A, //~ ERROR unions cannot contain fields that may need dropping\n     b: B\n }\n "}, {"sha": "7d4208b10da808d7a30de02034bcf48762171c46", "filename": "src/test/ui/union/issue-41073.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -1,10 +1,11 @@\n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/issue-41073.rs:4:5\n    |\n LL |     a: A,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<A>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "4b333631ec0f7cc53439427f171f44c0cffbe6d4", "filename": "src/test/ui/union/union-custom-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -4,7 +4,7 @@\n #![feature(untagged_unions)]\n \n union Foo {\n-    bar: Bar, //~ ERROR unions may not contain fields that need dropping\n+    bar: Bar, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union Bar {"}, {"sha": "b5579eeef09777d587c271cf372a28e9ce264f27", "filename": "src/test/ui/union/union-custom-drop.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -1,10 +1,11 @@\n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-custom-drop.rs:7:5\n    |\n LL |     bar: Bar,\n    |     ^^^^^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     bar: std::mem::ManuallyDrop<Bar>,\n    |          +++++++++++++++++++++++   +"}, {"sha": "93fe996d2a477deb3f95b537051a4cc0ebe7407e", "filename": "src/test/ui/union/union-with-drop-fields.mirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -1,32 +1,35 @@\n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "a7a8b69e784abc3a8af508a11841358aa4febb3a", "filename": "src/test/ui/union/union-with-drop-fields.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -8,20 +8,20 @@ union U {\n }\n \n union W {\n-    a: String, //~ ERROR unions may not contain fields that need dropping\n+    a: String, //~ ERROR unions cannot contain fields that may need dropping\n     b: String, // OK, only one field is reported\n }\n \n struct S(String);\n \n // `S` doesn't implement `Drop` trait, but still has non-trivial destructor\n union Y {\n-    a: S, //~ ERROR unions may not contain fields that need dropping\n+    a: S, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n // We don't know if `T` is trivially-destructable or not until trans\n union J<T> {\n-    a: T, //~ ERROR unions may not contain fields that need dropping\n+    a: T, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union H<T: Copy> {"}, {"sha": "93fe996d2a477deb3f95b537051a4cc0ebe7407e", "filename": "src/test/ui/union/union-with-drop-fields.thirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d2cdbec3ef6e5460753986372ed898a1b3bc553/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr?ref=6d2cdbec3ef6e5460753986372ed898a1b3bc553", "patch": "@@ -1,32 +1,35 @@\n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}]}