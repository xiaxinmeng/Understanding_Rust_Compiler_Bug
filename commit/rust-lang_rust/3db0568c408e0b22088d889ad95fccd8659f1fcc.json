{"sha": "3db0568c408e0b22088d889ad95fccd8659f1fcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYjA1NjhjNDA4ZTBiMjIwODhkODg5YWQ5NWZjY2Q4NjU5ZjFmY2M=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-05-09T13:54:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-05T16:08:18Z"}, "message": "Fix a couple of tests", "tree": {"sha": "261388e3c497ef45e642fc988c9d1bb6ef004b83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/261388e3c497ef45e642fc988c9d1bb6ef004b83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3db0568c408e0b22088d889ad95fccd8659f1fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3db0568c408e0b22088d889ad95fccd8659f1fcc", "html_url": "https://github.com/rust-lang/rust/commit/3db0568c408e0b22088d889ad95fccd8659f1fcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3db0568c408e0b22088d889ad95fccd8659f1fcc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba64e290a97328fc3be43563a10b9eab12aad3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba64e290a97328fc3be43563a10b9eab12aad3e", "html_url": "https://github.com/rust-lang/rust/commit/9ba64e290a97328fc3be43563a10b9eab12aad3e"}], "stats": {"total": 145, "additions": 60, "deletions": 85}, "files": [{"sha": "18fbc61b6d07090b800f1cee18acf372374420f6", "filename": "tests/compile-fail/copy_nonoverlapping.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(core_intrinsics)]\n \n-use std::intrinsics::*;\n-\n //error-pattern: copy_nonoverlapping called on overlapping ranges\n \n fn main() {"}, {"sha": "36e99cb11f72538c603695fbe6610771d759d85d", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -2,14 +2,14 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: incorrect alloc info: expected size 1 and align 2, got size 1 and align 1\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n     }\n }"}, {"sha": "f1271cefd1ac14044df20a16fe50cbaf39820672", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -2,14 +2,14 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: incorrect alloc info: expected size 2 and align 1, got size 1 and align 1\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n     }\n }"}, {"sha": "58fcb7409495ca3dccd24acaf7076feaabea4b17", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -2,15 +2,15 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: tried to deallocate dangling pointer\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n     }\n }"}, {"sha": "7390596cf7fa62f7fd524338c74ed2ebbaab67b5", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,17 +0,0 @@\n-// This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0\n-\n-#![feature(never_type)]\n-#![allow(unreachable_code)]\n-#![allow(unused_variables)]\n-\n-struct Human;\n-\n-fn main() {\n-    let x: ! = unsafe {\n-        std::mem::transmute::<Human, !>(Human) //~ ERROR entered unreachable code\n-    };\n-    f(x)\n-}\n-\n-fn f(x: !) -> ! { x }"}, {"sha": "e19a616a191651db51acc1fabce20565261fb500", "filename": "tests/compile-fail/out_of_bounds_ptr_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflowing math\n+// error-pattern: attempt to add with overflow\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "32ab2daebf0d0443b5aab4572cfa2e5892b1b8d5", "filename": "tests/compile-fail/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_overflow.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,4 +1,4 @@\n-//error-pattern: overflowing math\n+//error-pattern: attempt to add with overflow\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;"}, {"sha": "fae8246c5d29c2bbec346a2200e6180a20df7354", "filename": "tests/compile-fail/reallocate-bad-alignment-2.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,16 +0,0 @@\n-#![feature(alloc, allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n-\n-// error-pattern: incorrect alloc info: expected size 1 and align 2, got size 1 and align 1\n-\n-fn main() {\n-    unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        // Try realloc with a too big alignment.\n-        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(1, 2), Layout::from_size_align_unchecked(1, 1)).unwrap();\n-    }\n-}"}, {"sha": "6a928de07eec3dfe908e7d0332d3d70780354bdb", "filename": "tests/compile-fail/reallocate-bad-alignment.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,16 +0,0 @@\n-#![feature(alloc, allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n-\n-// error-pattern: incorrect alloc info: expected size 1 and align 1, got size 1 and align 2\n-\n-fn main() {\n-    unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 2)).unwrap();\n-        // Try realloc with a too small alignment.\n-        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(1, 1), Layout::from_size_align_unchecked(1, 2)).unwrap();\n-    }\n-}"}, {"sha": "d75c195d521e0f766c5d562198282c9a5af2158d", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -2,14 +2,14 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: incorrect alloc info: expected size 2 and align 1, got size 1 and align 1\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(2, 1), Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let _y = Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1);\n     }\n }"}, {"sha": "8a788104d86974bb6e0627a8db2ccf24341e119c", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -2,13 +2,13 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(1, 1), Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _z = *x; //~ ERROR: dangling pointer was dereferenced\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n+        let _z = *(x as *mut u8); //~ ERROR: dangling pointer was dereferenced\n     }\n }"}, {"sha": "39b60407160e4fa8c61fdf289b499026d47c257d", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -2,15 +2,15 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: dangling pointer was dereferenced\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n-        Heap.realloc(x, Layout::from_size_align_unchecked(1, 1), Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n     }\n }"}, {"sha": "0367580f4ce9b08fe194195c17466c9daad16a8a", "filename": "tests/compile-fail/repeat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frepeat.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,5 +1,6 @@\n+// error-pattern the type `[u8;\n+\n fn main() {\n     let data: [u8; std::usize::MAX] = [42; std::usize::MAX];\n-    //~^ ERROR: rustc layout computation failed: SizeOverflow([u8;\n     assert_eq!(data.len(), 1024);\n }"}, {"sha": "16cd9c1df8135ede1cfa551a6e128c1d31da483f", "filename": "tests/compile-fail/repeat2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Frepeat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Frepeat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frepeat2.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test\n+\n fn main() {\n     let data: [u8; 1024*1024*1024] = [42; 1024*1024*1024];\n     //~^ ERROR: tried to allocate"}, {"sha": "a2ebb6b21aa246157665ec32edc3cf775757bf0b", "filename": "tests/compile-fail/transmute_fat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,6 +1,5 @@\n // This should fail even without validation\n // compile-flags: -Zmir-emit-validate=0\n-#![feature(i128_type)]\n \n fn main() {\n     #[cfg(target_pointer_width=\"64\")]\n@@ -11,5 +10,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], u64>(&[1u8])\n     };\n-    bad + 1; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    let _ = bad + 1; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n }"}, {"sha": "3121a139d9204878d352c79417a57eba36c13d18", "filename": "tests/compile-fail/transmute_fat2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat2.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,5 +1,3 @@\n-#![feature(i128_type)]\n-\n fn main() {\n     #[cfg(target_pointer_width=\"64\")]\n     let bad = unsafe {"}, {"sha": "e812e13e702cadbfc5dd1dece7e0ba011b0720e2", "filename": "tests/compile-fail/validation_aliasing_mut1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_aliasing_mut1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_aliasing_mut1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut1.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "36ebcc2b4ac6fae57a657af0c9b9c1dfdeda47a3", "filename": "tests/compile-fail/validation_aliasing_mut2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_aliasing_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_aliasing_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut2.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "ad50fbd61b451f0d1a8d1cd05b24afe11a8eff8c", "filename": "tests/compile-fail/validation_aliasing_mut3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_aliasing_mut3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_aliasing_mut3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut3.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "a0f0a3cf9753a1abbb6fff23ded22eeb41f0e989", "filename": "tests/compile-fail/validation_aliasing_mut4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "282e536ce9b738d7006f2a6f025b2edb1080eb45", "filename": "tests/compile-fail/validation_buggy_as_mut_slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n // For some reason, the error location is different when using fullmir"}, {"sha": "a750f1466f51b8cf431e084c191c87288f15a864", "filename": "tests/compile-fail/validation_buggy_split_at_mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "cb3e4b3c1a204249571a6010bf3bfee86b104913", "filename": "tests/compile-fail/validation_illegal_write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "2a0857659622f7ddb7a6736165052f2493d1814f", "filename": "tests/compile-fail/validation_lock_confusion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n // Make sure validation can handle many overlapping shared borrows for different parts of a data structure\n #![allow(unused_variables)]\n use std::cell::RefCell;"}, {"sha": "14d6242860382d5781ada58d749ffe87a1b8a862", "filename": "tests/compile-fail/validation_pointer_smuggling.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n static mut PTR: *mut u8 = 0 as *mut _;"}, {"sha": "9061070ef67ebbed6aeb9dff7bd9b0740794e6ce", "filename": "tests/compile-fail/validation_recover1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_recover1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_recover1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover1.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n #[repr(u32)]"}, {"sha": "7a4a417ab1db993b640864d6911a92f9015d94c8", "filename": "tests/compile-fail/validation_recover2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_recover2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_recover2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover2.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "5cfc8aaa66b5f2cefa127b5dfe236a00e65b497b", "filename": "tests/compile-fail/validation_recover3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_recover3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_recover3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover3.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "939e93a264e8c03214903485b62c38c206353092", "filename": "tests/compile-fail/validation_undef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db0568c408e0b22088d889ad95fccd8659f1fcc/tests%2Fcompile-fail%2Fvalidation_undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_undef.rs?ref=3db0568c408e0b22088d889ad95fccd8659f1fcc", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n // error-pattern: attempted to read undefined bytes\n "}]}