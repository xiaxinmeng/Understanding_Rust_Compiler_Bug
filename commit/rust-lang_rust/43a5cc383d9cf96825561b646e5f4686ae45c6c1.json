{"sha": "43a5cc383d9cf96825561b646e5f4686ae45c6c1", "node_id": "C_kwDOAAsO6NoAKDQzYTVjYzM4M2Q5Y2Y5NjgyNTU2MWI2NDZlNWY0Njg2YWU0NWM2YzE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-08T12:59:02Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T10:01:25Z"}, "message": "Separate the lifetime of the session and the arena in the resolver", "tree": {"sha": "ba6fd4702116d7e1bbe96021fd328fe1d6c9ad24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6fd4702116d7e1bbe96021fd328fe1d6c9ad24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43a5cc383d9cf96825561b646e5f4686ae45c6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43a5cc383d9cf96825561b646e5f4686ae45c6c1", "html_url": "https://github.com/rust-lang/rust/commit/43a5cc383d9cf96825561b646e5f4686ae45c6c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43a5cc383d9cf96825561b646e5f4686ae45c6c1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ab7872fd77861e3d182ea85a82c4649c5bb3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ab7872fd77861e3d182ea85a82c4649c5bb3f8", "html_url": "https://github.com/rust-lang/rust/commit/e9ab7872fd77861e3d182ea85a82c4649c5bb3f8"}], "stats": {"total": 149, "additions": 79, "deletions": 70}, "files": [{"sha": "e85cc7ad36de69a439605d5b7ff994a4c29200fb", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -82,7 +82,7 @@ mod boxed_resolver {\n     struct BoxedResolverInner {\n         session: Lrc<Session>,\n         resolver_arenas: Option<ResolverArenas<'static>>,\n-        resolver: Option<Resolver<'static>>,\n+        resolver: Option<Resolver<'static, 'static>>,\n         _pin: PhantomPinned,\n     }\n \n@@ -98,7 +98,10 @@ mod boxed_resolver {\n     impl BoxedResolver {\n         pub(super) fn new(\n             session: Lrc<Session>,\n-            make_resolver: impl for<'a> FnOnce(&'a Session, &'a ResolverArenas<'a>) -> Resolver<'a>,\n+            make_resolver: impl for<'a, 'tcx> FnOnce(\n+                &'tcx Session,\n+                &'a ResolverArenas<'a>,\n+            ) -> Resolver<'a, 'tcx>,\n         ) -> BoxedResolver {\n             let mut boxed_resolver = Box::new(BoxedResolverInner {\n                 session,\n@@ -121,7 +124,10 @@ mod boxed_resolver {\n             }\n         }\n \n-        pub fn access<F: for<'a> FnOnce(&mut Resolver<'a>) -> R, R>(&mut self, f: F) -> R {\n+        pub fn access<F: for<'a, 'tcx> FnOnce(&mut Resolver<'a, 'tcx>) -> R, R>(\n+            &mut self,\n+            f: F,\n+        ) -> R {\n             // SAFETY: The resolver doesn't need to be pinned.\n             let mut resolver = unsafe {\n                 self.0.as_mut().map_unchecked_mut(|boxed_resolver| &mut boxed_resolver.resolver)\n@@ -256,7 +262,7 @@ pub fn configure_and_expand(\n     lint_store: &LintStore,\n     mut krate: ast::Crate,\n     crate_name: Symbol,\n-    resolver: &mut Resolver<'_>,\n+    resolver: &mut Resolver<'_, '_>,\n ) -> Result<ast::Crate> {\n     trace!(\"configure_and_expand\");\n     pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);"}, {"sha": "6d3518d53f7790b6c4e2043c8a6c50212e066575", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -65,7 +65,7 @@ impl<'a, Id: Into<DefId>> ToNameBinding<'a> for (Res, ty::Visibility<Id>, Span,\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n     pub(crate) fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)\n@@ -214,18 +214,18 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-struct BuildReducedGraphVisitor<'a, 'b> {\n-    r: &'b mut Resolver<'a>,\n+struct BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n+    r: &'b mut Resolver<'a, 'tcx>,\n     parent_scope: ParentScope<'a>,\n }\n \n-impl<'a> AsMut<Resolver<'a>> for BuildReducedGraphVisitor<'a, '_> {\n-    fn as_mut(&mut self) -> &mut Resolver<'a> {\n+impl<'a, 'tcx> AsMut<Resolver<'a, 'tcx>> for BuildReducedGraphVisitor<'a, '_, 'tcx> {\n+    fn as_mut(&mut self) -> &mut Resolver<'a, 'tcx> {\n         self.r\n     }\n }\n \n-impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     fn resolve_visibility(&mut self, vis: &ast::Visibility) -> ty::Visibility {\n         self.try_resolve_visibility(vis, true).unwrap_or_else(|err| {\n             self.r.report_vis_error(err);\n@@ -1315,7 +1315,7 @@ macro_rules! method {\n     };\n }\n \n-impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     method!(visit_expr: ast::Expr, ast::ExprKind::MacCall, walk_expr);\n     method!(visit_pat: ast::Pat, ast::PatKind::MacCall, walk_pat);\n     method!(visit_ty: ast::Ty, ast::TyKind::MacCall, walk_ty);"}, {"sha": "294fd0a736f37765316cfa40ba85a68aabc211a4", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -49,16 +49,16 @@ impl<'a> UnusedImport<'a> {\n     }\n }\n \n-struct UnusedImportCheckVisitor<'a, 'b> {\n-    r: &'a mut Resolver<'b>,\n+struct UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n+    r: &'a mut Resolver<'b, 'tcx>,\n     /// All the (so far) unused imports, grouped path list\n     unused_imports: FxIndexMap<ast::NodeId, UnusedImport<'a>>,\n     base_use_tree: Option<&'a ast::UseTree>,\n     base_id: ast::NodeId,\n     item_span: Span,\n }\n \n-impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     // We have information about whether `use` (import) items are actually\n     // used now. If an import is not used at all, we signal a lint error.\n     fn check_import(&mut self, id: ast::NodeId) {\n@@ -94,7 +94,7 @@ impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         self.item_span = item.span_with_attributes();\n \n@@ -222,7 +222,7 @@ fn calc_unused_spans(\n     }\n }\n \n-impl Resolver<'_> {\n+impl Resolver<'_, '_> {\n     pub(crate) fn check_unused(&mut self, krate: &ast::Crate) {\n         for import in self.potentially_unused_imports.iter() {\n             match import.kind {"}, {"sha": "e7ff236f84616e49af975ade2e83eccd6d669d05", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n pub(crate) fn collect_definitions(\n-    resolver: &mut Resolver<'_>,\n+    resolver: &mut Resolver<'_, '_>,\n     fragment: &AstFragment,\n     expansion: LocalExpnId,\n ) {\n@@ -18,14 +18,14 @@ pub(crate) fn collect_definitions(\n }\n \n /// Creates `DefId`s for nodes in the AST.\n-struct DefCollector<'a, 'b> {\n-    resolver: &'a mut Resolver<'b>,\n+struct DefCollector<'a, 'b, 'tcx> {\n+    resolver: &'a mut Resolver<'b, 'tcx>,\n     parent_def: LocalDefId,\n     impl_trait_context: ImplTraitContext,\n     expansion: LocalExpnId,\n }\n \n-impl<'a, 'b> DefCollector<'a, 'b> {\n+impl<'a, 'b, 'tcx> DefCollector<'a, 'b, 'tcx> {\n     fn create_def(&mut self, node_id: NodeId, data: DefPathData, span: Span) -> LocalDefId {\n         let parent_def = self.parent_def;\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n@@ -81,7 +81,7 @@ impl<'a, 'b> DefCollector<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n+impl<'a, 'b, 'tcx> visit::Visitor<'a> for DefCollector<'a, 'b, 'tcx> {\n     fn visit_item(&mut self, i: &'a Item) {\n         debug!(\"visit_item: {:?}\", i);\n "}, {"sha": "934d60589d4e21def520fb4718e2b7c74995b20b", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -114,7 +114,7 @@ fn reduce_impl_span_to_impl_keyword(sm: &SourceMap, impl_span: Span) -> Span {\n     sm.span_until_whitespace(impl_span)\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub(crate) fn report_errors(&mut self, krate: &Crate) {\n         self.report_with_use_injections(krate);\n \n@@ -1883,7 +1883,7 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-impl<'a, 'b> ImportResolver<'a, 'b> {\n+impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n     /// Adds suggestions for a path that cannot be resolved.\n     pub(crate) fn make_path_suggestion(\n         &mut self,"}, {"sha": "0079c3e526d62a65f17621d2c4487fff57a5a189", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -29,8 +29,8 @@ impl ParentId<'_> {\n     }\n }\n \n-pub(crate) struct EffectiveVisibilitiesVisitor<'r, 'a> {\n-    r: &'r mut Resolver<'a>,\n+pub(crate) struct EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n+    r: &'r mut Resolver<'a, 'tcx>,\n     def_effective_visibilities: EffectiveVisibilities,\n     /// While walking import chains we need to track effective visibilities per-binding, and def id\n     /// keys in `Resolver::effective_visibilities` are not enough for that, because multiple\n@@ -41,7 +41,7 @@ pub(crate) struct EffectiveVisibilitiesVisitor<'r, 'a> {\n     changed: bool,\n }\n \n-impl Resolver<'_> {\n+impl Resolver<'_, '_> {\n     fn nearest_normal_mod(&mut self, def_id: LocalDefId) -> LocalDefId {\n         self.get_nearest_non_block_module(def_id.to_def_id()).nearest_parent_mod().expect_local()\n     }\n@@ -67,18 +67,21 @@ impl Resolver<'_> {\n     }\n }\n \n-impl<'a, 'b> IntoDefIdTree for &'b mut Resolver<'a> {\n-    type Tree = &'b Resolver<'a>;\n+impl<'a, 'b, 'tcx> IntoDefIdTree for &'b mut Resolver<'a, 'tcx> {\n+    type Tree = &'b Resolver<'a, 'tcx>;\n     fn tree(self) -> Self::Tree {\n         self\n     }\n }\n \n-impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n+impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n     /// Fills the `Resolver::effective_visibilities` table with public & exported items\n     /// For now, this doesn't resolve macros (FIXME) and cannot resolve Impl, as we\n     /// need access to a TyCtxt for that.\n-    pub(crate) fn compute_effective_visibilities<'c>(r: &'r mut Resolver<'a>, krate: &'c Crate) {\n+    pub(crate) fn compute_effective_visibilities<'c>(\n+        r: &'r mut Resolver<'a, 'tcx>,\n+        krate: &'c Crate,\n+    ) {\n         let mut visitor = EffectiveVisibilitiesVisitor {\n             r,\n             def_effective_visibilities: Default::default(),\n@@ -192,7 +195,7 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n     }\n }\n \n-impl<'r, 'ast> Visitor<'ast> for EffectiveVisibilitiesVisitor<'ast, 'r> {\n+impl<'r, 'ast, 'tcx> Visitor<'ast> for EffectiveVisibilitiesVisitor<'ast, 'r, 'tcx> {\n     fn visit_item(&mut self, item: &'ast ast::Item) {\n         let def_id = self.r.local_def_id(item.id);\n         // Update effective visibilities of nested items."}, {"sha": "61a48b109b22a0f213f0ffabc061f7456498e495", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -28,7 +28,7 @@ use RibKind::*;\n \n type Visibility = ty::Visibility<LocalDefId>;\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// A generic scope visitor.\n     /// Visits scopes in order to resolve some identifier in them or perform other actions.\n     /// If the callback returns `Some` result, we stop visiting scopes and return it."}, {"sha": "da3e5095e531d3afb183f8a79d5896e5e23bc196", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -225,7 +225,7 @@ fn pub_use_of_private_extern_crate_hack(import: &Import<'_>, binding: &NameBindi\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// Given a binding and an import that resolves to it,\n     /// return the corresponding binding defined by the import.\n     pub(crate) fn import(\n@@ -333,7 +333,7 @@ impl<'a> Resolver<'a> {\n     // If the resolution becomes a success, define it in the module's glob importers.\n     fn update_resolution<T, F>(&mut self, module: Module<'a>, key: BindingKey, f: F) -> T\n     where\n-        F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T,\n+        F: FnOnce(&mut Resolver<'a, 'tcx>, &mut NameResolution<'a>) -> T,\n     {\n         // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,\n         // during which the resolution might end up getting re-defined via a glob cycle.\n@@ -405,11 +405,11 @@ struct UnresolvedImportError {\n     candidates: Option<Vec<ImportSuggestion>>,\n }\n \n-pub(crate) struct ImportResolver<'a, 'b> {\n-    pub r: &'a mut Resolver<'b>,\n+pub(crate) struct ImportResolver<'a, 'b, 'tcx> {\n+    pub r: &'a mut Resolver<'b, 'tcx>,\n }\n \n-impl<'a, 'b> ImportResolver<'a, 'b> {\n+impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n     // Import resolution\n     //\n     // This is a fixed-point algorithm. We resolve imports until our efforts"}, {"sha": "d3bcbbabf55e541a04cdc39cd132e628dd0fee24", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -505,7 +505,7 @@ enum MaybeExported<'a> {\n }\n \n impl MaybeExported<'_> {\n-    fn eval(self, r: &Resolver<'_>) -> bool {\n+    fn eval(self, r: &Resolver<'_, '_>) -> bool {\n         let def_id = match self {\n             MaybeExported::Ok(node_id) => Some(r.local_def_id(node_id)),\n             MaybeExported::Impl(Some(trait_def_id)) | MaybeExported::ImplItem(Ok(trait_def_id)) => {\n@@ -584,8 +584,8 @@ struct DiagnosticMetadata<'ast> {\n     current_elision_failures: Vec<MissingLifetime>,\n }\n \n-struct LateResolutionVisitor<'a, 'b, 'ast> {\n-    r: &'b mut Resolver<'a>,\n+struct LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n+    r: &'b mut Resolver<'a, 'tcx>,\n \n     /// The module that represents the current item scope.\n     parent_scope: ParentScope<'a>,\n@@ -628,7 +628,7 @@ struct LateResolutionVisitor<'a, 'b, 'ast> {\n }\n \n /// Walks the whole crate in DFS order, visiting each item, resolving names as it goes.\n-impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n+impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n     fn visit_attribute(&mut self, _: &'ast Attribute) {\n         // We do not want to resolve expressions that appear in attributes,\n         // as they do not correspond to actual code.\n@@ -1199,8 +1199,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n }\n \n-impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n-    fn new(resolver: &'b mut Resolver<'a>) -> LateResolutionVisitor<'a, 'b, 'ast> {\n+impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n+    fn new(resolver: &'b mut Resolver<'a, 'tcx>) -> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // During late resolution we only track the module component of the parent scope,\n         // although it may be useful to track other components as well for diagnostics.\n         let graph_root = resolver.graph_root;\n@@ -2029,13 +2029,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     /// List all the lifetimes that appear in the provided type.\n     fn find_lifetime_for_self(&self, ty: &'ast Ty) -> Set1<LifetimeRes> {\n-        struct SelfVisitor<'r, 'a> {\n-            r: &'r Resolver<'a>,\n+        struct SelfVisitor<'r, 'a, 'tcx> {\n+            r: &'r Resolver<'a, 'tcx>,\n             impl_self: Option<Res>,\n             lifetime: Set1<LifetimeRes>,\n         }\n \n-        impl SelfVisitor<'_, '_> {\n+        impl SelfVisitor<'_, '_, '_> {\n             // Look for `self: &'a Self` - also desugared from `&'a self`,\n             // and if that matches, use it for elision and return early.\n             fn is_self_ty(&self, ty: &Ty) -> bool {\n@@ -2053,7 +2053,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n         }\n \n-        impl<'a> Visitor<'a> for SelfVisitor<'_, '_> {\n+        impl<'a> Visitor<'a> for SelfVisitor<'_, '_, '_> {\n             fn visit_ty(&mut self, ty: &'a Ty) {\n                 trace!(\"SelfVisitor considering ty={:?}\", ty);\n                 if let TyKind::Ref(lt, ref mt) = ty.kind && self.is_self_ty(&mt.ty) {\n@@ -4288,13 +4288,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     }\n }\n \n-struct LifetimeCountVisitor<'a, 'b> {\n-    r: &'b mut Resolver<'a>,\n+struct LifetimeCountVisitor<'a, 'b, 'tcx> {\n+    r: &'b mut Resolver<'a, 'tcx>,\n }\n \n /// Walks the whole crate in DFS order, visiting each item, counting the declared number of\n /// lifetime generic parameters.\n-impl<'ast> Visitor<'ast> for LifetimeCountVisitor<'_, '_> {\n+impl<'ast> Visitor<'ast> for LifetimeCountVisitor<'_, '_, '_> {\n     fn visit_item(&mut self, item: &'ast Item) {\n         match &item.kind {\n             ItemKind::TyAlias(box TyAlias { ref generics, .. })\n@@ -4328,7 +4328,7 @@ impl<'ast> Visitor<'ast> for LifetimeCountVisitor<'_, '_> {\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub(crate) fn late_resolve_crate(&mut self, krate: &Crate) {\n         visit::walk_crate(&mut LifetimeCountVisitor { r: self }, krate);\n         let mut late_resolution_visitor = LateResolutionVisitor::new(self);"}, {"sha": "a3195a64366893a75120d1a2ca7c629f0aa990d1", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -166,7 +166,7 @@ impl TypoCandidate {\n     }\n }\n \n-impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n+impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n     fn def_span(&self, def_id: DefId) -> Option<Span> {\n         match def_id.krate {\n             LOCAL_CRATE => self.r.opt_span(def_id),\n@@ -318,7 +318,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         span: Span,\n         source: PathSource<'_>,\n         res: Option<Res>,\n-    ) -> (DiagnosticBuilder<'a, ErrorGuaranteed>, Vec<ImportSuggestion>) {\n+    ) -> (DiagnosticBuilder<'tcx, ErrorGuaranteed>, Vec<ImportSuggestion>) {\n         debug!(?res, ?source);\n         let base_error = self.make_base_error(path, span, source, res);\n         let code = source.error_code(res.is_some());"}, {"sha": "3db3b76fc26a296d2e63b60e31c20fbe89e29f38", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -147,7 +147,7 @@ struct ParentScope<'a> {\n impl<'a> ParentScope<'a> {\n     /// Creates a parent scope with the passed argument used as the module scope component,\n     /// and other scope components set to default empty values.\n-    fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {\n+    fn module(module: Module<'a>, resolver: &Resolver<'a, '_>) -> ParentScope<'a> {\n         ParentScope {\n             module,\n             expansion: LocalExpnId::ROOT,\n@@ -528,9 +528,9 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n-    fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)\n+    fn for_each_child<'tcx, R, F>(&'a self, resolver: &mut R, mut f: F)\n     where\n-        R: AsMut<Resolver<'a>>,\n+        R: AsMut<Resolver<'a, 'tcx>>,\n         F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),\n     {\n         for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {\n@@ -541,9 +541,9 @@ impl<'a> ModuleData<'a> {\n     }\n \n     /// This modifies `self` in place. The traits will be stored in `self.traits`.\n-    fn ensure_traits<R>(&'a self, resolver: &mut R)\n+    fn ensure_traits<'tcx, R>(&'a self, resolver: &mut R)\n     where\n-        R: AsMut<Resolver<'a>>,\n+        R: AsMut<Resolver<'a, 'tcx>>,\n     {\n         let mut traits = self.traits.borrow_mut();\n         if traits.is_none() {\n@@ -864,8 +864,8 @@ struct MacroData {\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n-pub struct Resolver<'a> {\n-    session: &'a Session,\n+pub struct Resolver<'a, 'tcx> {\n+    session: &'tcx Session,\n \n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     expn_that_defined: FxHashMap<LocalDefId, ExpnId>,\n@@ -949,7 +949,7 @@ pub struct Resolver<'a> {\n     /// Ambiguity errors are delayed for deduplication.\n     ambiguity_errors: Vec<AmbiguityError<'a>>,\n     /// `use` injections are delayed for better placement and deduplication.\n-    use_injections: Vec<UseError<'a>>,\n+    use_injections: Vec<UseError<'tcx>>,\n     /// Crate-local macro expanded `macro_export` referred to by a module-relative path.\n     macro_expanded_macro_export_errors: BTreeSet<(Span, Span)>,\n \n@@ -1111,8 +1111,8 @@ impl<'a> ResolverArenas<'a> {\n     }\n }\n \n-impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {\n-    fn as_mut(&mut self) -> &mut Resolver<'a> {\n+impl<'a, 'tcx> AsMut<Resolver<'a, 'tcx>> for Resolver<'a, 'tcx> {\n+    fn as_mut(&mut self) -> &mut Resolver<'a, 'tcx> {\n         self\n     }\n }\n@@ -1134,14 +1134,14 @@ impl DefIdTree for ResolverTree<'_> {\n     }\n }\n \n-impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n+impl<'a, 'b, 'tcx> DefIdTree for &'a Resolver<'b, 'tcx> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n         ResolverTree(&self.untracked).opt_parent(id)\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'tcx> Resolver<'_, 'tcx> {\n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {\n         self.node_id_to_def_id.get(&node).copied()\n     }\n@@ -1200,14 +1200,14 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub fn new(\n-        session: &'a Session,\n+        session: &'tcx Session,\n         krate: &Crate,\n         crate_name: Symbol,\n         metadata_loader: Box<MetadataLoaderDyn>,\n         arenas: &'a ResolverArenas<'a>,\n-    ) -> Resolver<'a> {\n+    ) -> Resolver<'a, 'tcx> {\n         let root_def_id = CRATE_DEF_ID.to_def_id();\n         let mut module_map = FxHashMap::default();\n         let graph_root = arenas.new_module("}, {"sha": "1c220a81792da4e1e948d9c5937c963b5fe27fae", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a5cc383d9cf96825561b646e5f4686ae45c6c1/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=43a5cc383d9cf96825561b646e5f4686ae45c6c1", "patch": "@@ -160,7 +160,7 @@ fn soft_custom_inner_attributes_gate(path: &ast::Path, invoc: &Invocation) -> bo\n     false\n }\n \n-impl<'a> ResolverExpand for Resolver<'a> {\n+impl<'a, 'tcx> ResolverExpand for Resolver<'a, 'tcx> {\n     fn next_node_id(&mut self) -> NodeId {\n         self.next_node_id()\n     }\n@@ -467,7 +467,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// Resolve macro path with error reporting and recovery.\n     /// Uses dummy syntax extensions for unresolved macros or macros with unexpected resolutions\n     /// for better error recovery."}]}