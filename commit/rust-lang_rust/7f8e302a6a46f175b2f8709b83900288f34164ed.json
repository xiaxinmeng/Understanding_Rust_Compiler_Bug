{"sha": "7f8e302a6a46f175b2f8709b83900288f34164ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOGUzMDJhNmE0NmYxNzViMmY4NzA5YjgzOTAwMjg4ZjM0MTY0ZWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-16T06:38:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-16T07:03:45Z"}, "message": "Whitespace", "tree": {"sha": "9e08ae779e9240fb27687444eed13b87e4986ebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e08ae779e9240fb27687444eed13b87e4986ebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f8e302a6a46f175b2f8709b83900288f34164ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8e302a6a46f175b2f8709b83900288f34164ed", "html_url": "https://github.com/rust-lang/rust/commit/7f8e302a6a46f175b2f8709b83900288f34164ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f8e302a6a46f175b2f8709b83900288f34164ed/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ea37b3364b2903f3373a33e04921d145050de9", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ea37b3364b2903f3373a33e04921d145050de9", "html_url": "https://github.com/rust-lang/rust/commit/20ea37b3364b2903f3373a33e04921d145050de9"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "4097b6d41b756ecac105d311df187af82256d213", "filename": "src/rt/boxed_region.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Fboxed_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Fboxed_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.h?ref=7f8e302a6a46f175b2f8709b83900288f34164ed", "patch": "@@ -39,7 +39,7 @@ class boxed_region {\n     // private and undefined to disable copying\n     boxed_region(const boxed_region& rhs);\n     boxed_region& operator=(const boxed_region& rhs);\n-    \n+\n public:\n     boxed_region(rust_env *e, memory_region *br)\n         : env(e)"}, {"sha": "172fa5c625b73b6b5d432afc4c96bebe2d4ff5cc", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=7f8e302a6a46f175b2f8709b83900288f34164ed", "patch": "@@ -39,7 +39,7 @@ circular_buffer : public kernel_owned<circular_buffer> {\n     // private and undefined to disable copying\n     circular_buffer(const circular_buffer& rhs);\n     circular_buffer& operator=(const circular_buffer& rhs);\n-    \n+\n private:\n     size_t initial_size();\n     void grow();"}, {"sha": "7a68a0f8af5487c1fd166d97b8ff15274cd7c990", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=7f8e302a6a46f175b2f8709b83900288f34164ed", "patch": "@@ -73,7 +73,7 @@ class memory_region {\n     // private and undefined to disable copying\n     memory_region(const memory_region& rhs);\n     memory_region& operator=(const memory_region& rhs);\n-    \n+\n public:\n     memory_region(rust_env *env, bool synchronized);\n     memory_region(memory_region *parent);"}, {"sha": "a981fad24f85a506251d609051ecc40d4b1746ae", "filename": "src/rt/rust_sched_launcher.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Frust_sched_launcher.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Frust_sched_launcher.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.h?ref=7f8e302a6a46f175b2f8709b83900288f34164ed", "patch": "@@ -27,7 +27,7 @@ class rust_sched_launcher : public kernel_owned<rust_sched_launcher> {\n     // private and undefined to disable copying\n     rust_sched_launcher(const rust_sched_launcher& rhs);\n     rust_sched_launcher& operator=(const rust_sched_launcher& rhs);\n-    \n+\n protected:\n     rust_sched_driver driver;\n "}, {"sha": "a5e6bc231e696d2c8f3003a71aec9812ae0bb81a", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=7f8e302a6a46f175b2f8709b83900288f34164ed", "patch": "@@ -86,7 +86,7 @@ struct rust_sched_loop\n     // private and undefined to disable copying\n     rust_sched_loop(const rust_sched_loop& rhs);\n     rust_sched_loop& operator=(const rust_sched_loop& rhs);\n-    \n+\n public:\n     rust_kernel *kernel;\n     rust_scheduler *sched;"}, {"sha": "30e0626ddd3762c068a9d96ad2bdb44ae52251ad", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=7f8e302a6a46f175b2f8709b83900288f34164ed", "patch": "@@ -62,7 +62,7 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     // private and undefined to disable copying\n     rust_scheduler(const rust_scheduler& rhs);\n     rust_scheduler& operator=(const rust_scheduler& rhs);\n-    \n+\n public:\n     rust_scheduler(rust_kernel *kernel, size_t max_num_threads,\n                    rust_sched_id id, bool allow_exit, bool killed,"}, {"sha": "27694becdfbcfc9f97c6c63a41270ce06da535a3", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=7f8e302a6a46f175b2f8709b83900288f34164ed", "patch": "@@ -309,7 +309,7 @@ rust_task : public kernel_owned<rust_task>\n     // private and undefined to disable copying\n     rust_task(const rust_task& rhs);\n     rust_task& operator=(const rust_task& rhs);\n-    \n+\n public:\n \n     // Only a pointer to 'name' is kept, so it must live as long as this task."}, {"sha": "4bef26750db3c3cf12d5c31de4387654244e5f30", "filename": "src/rt/util/array_list.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Futil%2Farray_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f8e302a6a46f175b2f8709b83900288f34164ed/src%2Frt%2Futil%2Farray_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Farray_list.h?ref=7f8e302a6a46f175b2f8709b83900288f34164ed", "patch": "@@ -73,7 +73,10 @@ array_list<T>::push(T value) {\n         size_t new_capacity = _capacity * 2;\n         void* buffer = realloc(_data, new_capacity * sizeof(T));\n         if (buffer == NULL) {\n-            fprintf(stderr, \"array_list::push> Out of memory allocating %ld bytes\", (long int) (new_capacity * sizeof(T)));\n+            fprintf(stderr,\n+                    \"array_list::push> \"\n+                    \"Out of memory allocating %ld bytes\",\n+                    (long int) (new_capacity * sizeof(T)));\n             abort();\n         }\n         _data = (T *) buffer;"}]}