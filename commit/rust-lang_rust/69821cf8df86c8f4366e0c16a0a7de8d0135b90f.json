{"sha": "69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODIxY2Y4ZGY4NmM4ZjQzNjZlMGMxNmEwYTdkZThkMDEzNWI5MGY=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-16T21:13:00Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-16T21:13:00Z"}, "message": "Add a test for foreign empty enums", "tree": {"sha": "81e22a0fae0765d9a6f9a1e24950d90616a72550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e22a0fae0765d9a6f9a1e24950d90616a72550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "html_url": "https://github.com/rust-lang/rust/commit/69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36e3409f6753fd92bf40608bc1d47c0de3161352", "url": "https://api.github.com/repos/rust-lang/rust/commits/36e3409f6753fd92bf40608bc1d47c0de3161352", "html_url": "https://github.com/rust-lang/rust/commit/36e3409f6753fd92bf40608bc1d47c0de3161352"}], "stats": {"total": 150, "additions": 102, "deletions": 48}, "files": [{"sha": "0b0719f48ee02b944c28c9c1ce14777063156146", "filename": "src/test/ui/pattern/usefulness/auxiliary/empty.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fempty.rs?ref=69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "patch": "@@ -0,0 +1,2 @@\n+#![crate_type = \"rlib\"]\n+pub enum EmptyForeignEnum {}"}, {"sha": "c5c3a214f9aff1d4f8a566040b2c12e597d0c2b5", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "patch": "@@ -1,8 +1,12 @@\n+// aux-build:empty.rs\n #![feature(never_type)]\n #![feature(never_type_fallback)]\n #![feature(exhaustive_patterns)]\n #![deny(unreachable_patterns)]\n-enum Foo {}\n+\n+extern crate empty;\n+\n+enum EmptyEnum {}\n \n struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n union NonEmptyUnion1 { //~ `NonEmptyUnion1` defined here\n@@ -42,7 +46,17 @@ macro_rules! match_false {\n     };\n }\n \n-fn foo(x: Foo) {\n+fn empty_enum(x: EmptyEnum) {\n+    match x {} // ok\n+    match x {\n+        _ => {}, //~ ERROR unreachable pattern\n+    }\n+    match x {\n+        _ if false => {}, //~ ERROR unreachable pattern\n+    }\n+}\n+\n+fn empty_foreign_enum(x: empty::EmptyForeignEnum) {\n     match x {} // ok\n     match x {\n         _ => {}, //~ ERROR unreachable pattern\n@@ -67,7 +81,7 @@ fn main() {\n         None => {}\n         Some(_) => {} //~ ERROR unreachable pattern\n     }\n-    match None::<Foo> {\n+    match None::<EmptyEnum> {\n         None => {}\n         Some(_) => {} //~ ERROR unreachable pattern\n     }"}, {"sha": "9d8b5f38e8cf5a9e6575967baea6204f4a89515d", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "patch": "@@ -1,47 +1,59 @@\n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:48:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:52:9\n    |\n LL |         _ => {},\n    |         ^\n    |\n note: the lint level is defined here\n-  --> $DIR/match-empty-exhaustive_patterns.rs:4:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:5:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:51:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:55:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:58:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:62:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:61:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:65:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:68:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:72:9\n+   |\n+LL |         _ => {},\n+   |         ^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty-exhaustive_patterns.rs:75:9\n+   |\n+LL |         _ if false => {},\n+   |         ^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty-exhaustive_patterns.rs:82:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty-exhaustive_patterns.rs:72:9\n+  --> $DIR/match-empty-exhaustive_patterns.rs:86:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:75:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:89:18\n    |\n LL |     match_empty!(0u8);\n    |                  ^^^\n@@ -50,7 +62,7 @@ LL |     match_empty!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:77:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:91:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -62,7 +74,7 @@ LL |     match_empty!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:93:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -76,7 +88,7 @@ LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty-exhaustive_patterns.rs:81:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:95:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -91,7 +103,7 @@ LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:83:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:97:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -108,7 +120,7 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:85:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:99:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -129,7 +141,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:87:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:101:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -143,7 +155,7 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    = note: the matched value is of type `NonEmptyEnum5`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:90:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:104:18\n    |\n LL |     match_false!(0u8);\n    |                  ^^^ pattern `_` not covered\n@@ -152,7 +164,7 @@ LL |     match_false!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:92:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:106:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -164,7 +176,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:94:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:108:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -178,7 +190,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:96:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:110:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -193,7 +205,7 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:98:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:112:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -210,7 +222,7 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:100:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:114:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -231,7 +243,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty-exhaustive_patterns.rs:102:18\n+  --> $DIR/match-empty-exhaustive_patterns.rs:116:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -244,6 +256,6 @@ LL |       match_false!(NonEmptyEnum5::V1);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum5`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 22 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "10ea2a10406e367079f73c60ac4dd2bf17640fb4", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "patch": "@@ -1,7 +1,11 @@\n+// aux-build:empty.rs\n #![feature(never_type)]\n #![feature(never_type_fallback)]\n #![deny(unreachable_patterns)]\n-enum Foo {}\n+\n+extern crate empty;\n+\n+enum EmptyEnum {}\n \n struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n union NonEmptyUnion1 { //~ `NonEmptyUnion1` defined here\n@@ -41,7 +45,17 @@ macro_rules! match_false {\n     };\n }\n \n-fn foo(x: Foo) {\n+fn empty_enum(x: EmptyEnum) {\n+    match x {} // ok\n+    match x {\n+        _ => {}, //~ ERROR unreachable pattern\n+    }\n+    match x {\n+        _ if false => {}, //~ ERROR unreachable pattern\n+    }\n+}\n+\n+fn empty_foreign_enum(x: empty::EmptyForeignEnum) {\n     match x {} // ok\n     match x {\n         _ => {}, //~ ERROR unreachable pattern\n@@ -67,7 +81,7 @@ fn main() {\n         None => {}\n         Some(_) => {}\n     }\n-    match None::<Foo> {\n+    match None::<EmptyEnum> {\n         None => {}\n         Some(_) => {}\n     }"}, {"sha": "6065c552390e4469625f8be745865272a938f019", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69821cf8df86c8f4366e0c16a0a7de8d0135b90f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=69821cf8df86c8f4366e0c16a0a7de8d0135b90f", "patch": "@@ -1,35 +1,47 @@\n error: unreachable pattern\n-  --> $DIR/match-empty.rs:47:9\n+  --> $DIR/match-empty.rs:51:9\n    |\n LL |         _ => {},\n    |         ^\n    |\n note: the lint level is defined here\n-  --> $DIR/match-empty.rs:3:9\n+  --> $DIR/match-empty.rs:4:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/match-empty.rs:50:9\n+  --> $DIR/match-empty.rs:54:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty.rs:57:9\n+  --> $DIR/match-empty.rs:61:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/match-empty.rs:60:9\n+  --> $DIR/match-empty.rs:64:9\n+   |\n+LL |         _ if false => {},\n+   |         ^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty.rs:71:9\n+   |\n+LL |         _ => {},\n+   |         ^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty.rs:74:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/match-empty.rs:75:18\n+  --> $DIR/match-empty.rs:89:18\n    |\n LL |     match_empty!(0u8);\n    |                  ^^^\n@@ -38,7 +50,7 @@ LL |     match_empty!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n-  --> $DIR/match-empty.rs:77:18\n+  --> $DIR/match-empty.rs:91:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -50,7 +62,7 @@ LL |     match_empty!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/match-empty.rs:79:18\n+  --> $DIR/match-empty.rs:93:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -64,7 +76,7 @@ LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/match-empty.rs:81:18\n+  --> $DIR/match-empty.rs:95:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -79,7 +91,7 @@ LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty.rs:83:18\n+  --> $DIR/match-empty.rs:97:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -96,7 +108,7 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty.rs:85:18\n+  --> $DIR/match-empty.rs:99:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -117,7 +129,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty.rs:87:18\n+  --> $DIR/match-empty.rs:101:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -131,7 +143,7 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    = note: the matched value is of type `NonEmptyEnum5`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/match-empty.rs:90:18\n+  --> $DIR/match-empty.rs:104:18\n    |\n LL |     match_false!(0u8);\n    |                  ^^^ pattern `_` not covered\n@@ -140,7 +152,7 @@ LL |     match_false!(0u8);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n-  --> $DIR/match-empty.rs:92:18\n+  --> $DIR/match-empty.rs:106:18\n    |\n LL | struct NonEmptyStruct(bool);\n    | ---------------------------- `NonEmptyStruct` defined here\n@@ -152,7 +164,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/match-empty.rs:94:18\n+  --> $DIR/match-empty.rs:108:18\n    |\n LL | / union NonEmptyUnion1 {\n LL | |     foo: (),\n@@ -166,7 +178,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/match-empty.rs:96:18\n+  --> $DIR/match-empty.rs:110:18\n    |\n LL | / union NonEmptyUnion2 {\n LL | |     foo: (),\n@@ -181,7 +193,7 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n-  --> $DIR/match-empty.rs:98:18\n+  --> $DIR/match-empty.rs:112:18\n    |\n LL | / enum NonEmptyEnum1 {\n LL | |     Foo(bool),\n@@ -198,7 +210,7 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n-  --> $DIR/match-empty.rs:100:18\n+  --> $DIR/match-empty.rs:114:18\n    |\n LL | / enum NonEmptyEnum2 {\n LL | |     Foo(bool),\n@@ -219,7 +231,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n-  --> $DIR/match-empty.rs:102:18\n+  --> $DIR/match-empty.rs:116:18\n    |\n LL | / enum NonEmptyEnum5 {\n LL | |     V1, V2, V3, V4, V5,\n@@ -232,6 +244,6 @@ LL |       match_false!(NonEmptyEnum5::V1);\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `NonEmptyEnum5`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 20 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}]}