{"sha": "931eb4c4d5169ebff249387f2049295eb7925c79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMWViNGM0ZDUxNjllYmZmMjQ5Mzg3ZjIwNDkyOTVlYjc5MjVjNzk=", "commit": {"author": {"name": "Roman Proskuryakov", "email": "humbug@deeptown.org", "date": "2018-08-06T14:33:32Z"}, "committer": {"name": "Roman Proskuryakov", "email": "humbug@deeptown.org", "date": "2018-08-06T14:33:32Z"}, "message": "Add one more example for Cow that shows how to keep Cow in a struct", "tree": {"sha": "65cd6c8c9e24ff59822ec1fe40c9e18b26527a6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65cd6c8c9e24ff59822ec1fe40c9e18b26527a6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931eb4c4d5169ebff249387f2049295eb7925c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931eb4c4d5169ebff249387f2049295eb7925c79", "html_url": "https://github.com/rust-lang/rust/commit/931eb4c4d5169ebff249387f2049295eb7925c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931eb4c4d5169ebff249387f2049295eb7925c79/comments", "author": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ec12df020453836c3b8990c0a8dd859b774e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ec12df020453836c3b8990c0a8dd859b774e84", "html_url": "https://github.com/rust-lang/rust/commit/78ec12df020453836c3b8990c0a8dd859b774e84"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "dd4f958804dee0db8e0bee597c0144e2b88d1f07", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/931eb4c4d5169ebff249387f2049295eb7925c79/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931eb4c4d5169ebff249387f2049295eb7925c79/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=931eb4c4d5169ebff249387f2049295eb7925c79", "patch": "@@ -141,6 +141,40 @@ impl<T> ToOwned for T\n /// let mut input = Cow::from(vec![-1, 0, 1]);\n /// abs_all(&mut input);\n /// ```\n+///\n+/// ```\n+/// use std::borrow::{Cow, ToOwned};\n+///\n+/// struct Items<'a, X: 'a> where [X]: ToOwned<Owned=Vec<X>> {\n+///     values: Cow<'a, [X]>,\n+/// }\n+///\n+/// impl<'a, X: Clone + 'a> Items<'a, X> where [X]: ToOwned<Owned=Vec<X>> {\n+///     fn new(v: Cow<'a, [X]>) -> Self {\n+///         Items { values: v }\n+///     }\n+/// }\n+///\n+/// // Creates a container from borrowed values of a slice\n+/// let readonly = [1, 2];\n+/// let borrowed = Items::new((&readonly[..]).into());\n+/// match borrowed {\n+///     Items { values: Cow::Borrowed(b) } => println!(\"borrowed {:?}\", b),\n+///     _ => panic!(\"expect borrowed value\"),\n+/// }\n+///\n+/// let mut clone_on_write = borrowed;\n+/// // Mutates the data from slice into owned vec and pushes a new value on top\n+/// clone_on_write.values.to_mut().push(3);\n+/// println!(\"clone_on_write = {:?}\", clone_on_write.values);\n+///\n+/// // The data was mutated. Let check it out.\n+/// match clone_on_write {\n+///     Items { values: Cow::Owned(_) } => println!(\"clone_on_write contains owned data\"),\n+///     _ => panic!(\"expect owned data\"),\n+/// }\n+/// ```\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Cow<'a, B: ?Sized + 'a>\n     where B: ToOwned"}]}