{"sha": "827b74c709398de95fbde4f1a35b57b181a476bf", "node_id": "C_kwDOAAsO6NoAKDgyN2I3NGM3MDkzOThkZTk1ZmJkZTRmMWEzNWI1N2IxODFhNDc2YmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T15:04:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T15:04:31Z"}, "message": "Rollup merge of #110176 - nnethercote:renumber-cleanups, r=lqd\n\nRenumbering cleanups\n\nr? ``@lqd``", "tree": {"sha": "e12b1dd7d358a2de5b985bb6d5cdce9f56b138d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e12b1dd7d358a2de5b985bb6d5cdce9f56b138d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/827b74c709398de95fbde4f1a35b57b181a476bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNsh/CRBK7hj4Ov3rIwAAq/wIAH6DS6rWdE0fdoR6LcqpKciz\n7k42pGms/0oZhD8i7zDZv5C/EZUqYAeXzKIH+EYXCPLoOIujgxw0fmbf3VWe/o5A\nnc0B1gba6287QKj8H0ZcjEn//V9OAX2JFe8oOvKjJnBbsJbWf9tSCNOLawwHfw5+\n45kkRPJdAIMAcBlu7ItzerjuI0TYPsnk9/jM20qV2CbI5YGge8KZQuA0z9OHIa6i\nf4Zx9xQfYrcz3i/pa2aOUuEdJ5Ii4WvLH2V830hA7TcyFLdFyMvEgBfC0wBIi1sd\nN8q9+gHkvPoblGwf/ux8mzQ6lbv+Z9JweyXqWmS9EikdA3WP0IRO85m8YSurLto=\n=q3Rp\n-----END PGP SIGNATURE-----\n", "payload": "tree e12b1dd7d358a2de5b985bb6d5cdce9f56b138d3\nparent fd40f519c57f65803c2660bd5d89eb6e1214a340\nparent 74463214a619a7e9d2d0dc5c6e299c0d0f6f14a5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681311871 +0200\ncommitter GitHub <noreply@github.com> 1681311871 +0200\n\nRollup merge of #110176 - nnethercote:renumber-cleanups, r=lqd\n\nRenumbering cleanups\n\nr? ``@lqd``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/827b74c709398de95fbde4f1a35b57b181a476bf", "html_url": "https://github.com/rust-lang/rust/commit/827b74c709398de95fbde4f1a35b57b181a476bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/827b74c709398de95fbde4f1a35b57b181a476bf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd40f519c57f65803c2660bd5d89eb6e1214a340", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd40f519c57f65803c2660bd5d89eb6e1214a340", "html_url": "https://github.com/rust-lang/rust/commit/fd40f519c57f65803c2660bd5d89eb6e1214a340"}, {"sha": "74463214a619a7e9d2d0dc5c6e299c0d0f6f14a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/74463214a619a7e9d2d0dc5c6e299c0d0f6f14a5", "html_url": "https://github.com/rust-lang/rust/commit/74463214a619a7e9d2d0dc5c6e299c0d0f6f14a5"}], "stats": {"total": 41, "additions": 14, "deletions": 27}, "files": [{"sha": "2c1d74ef9ca85e61f1694ab76b4dd9997d5500d6", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/827b74c709398de95fbde4f1a35b57b181a476bf/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827b74c709398de95fbde4f1a35b57b181a476bf/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=827b74c709398de95fbde4f1a35b57b181a476bf", "patch": "@@ -20,31 +20,13 @@ pub fn renumber_mir<'tcx>(\n ) {\n     debug!(?body.arg_count);\n \n-    let mut visitor = NllVisitor { infcx };\n+    let mut renumberer = RegionRenumberer { infcx };\n \n     for body in promoted.iter_mut() {\n-        visitor.visit_body(body);\n+        renumberer.visit_body(body);\n     }\n \n-    visitor.visit_body(body);\n-}\n-\n-/// Replaces all regions appearing in `value` with fresh inference\n-/// variables.\n-#[instrument(skip(infcx, get_ctxt_fn), level = \"debug\")]\n-pub(crate) fn renumber_regions<'tcx, T, F>(\n-    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n-    value: T,\n-    get_ctxt_fn: F,\n-) -> T\n-where\n-    T: TypeFoldable<TyCtxt<'tcx>>,\n-    F: Fn() -> RegionCtxt,\n-{\n-    infcx.tcx.fold_regions(value, |_region, _depth| {\n-        let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n-        infcx.next_nll_region_var(origin, || get_ctxt_fn())\n-    })\n+    renumberer.visit_body(body);\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n@@ -82,21 +64,26 @@ impl RegionCtxt {\n     }\n }\n \n-struct NllVisitor<'a, 'tcx> {\n+struct RegionRenumberer<'a, 'tcx> {\n     infcx: &'a BorrowckInferCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> RegionRenumberer<'a, 'tcx> {\n+    /// Replaces all regions appearing in `value` with fresh inference\n+    /// variables.\n     fn renumber_regions<T, F>(&mut self, value: T, region_ctxt_fn: F) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,\n         F: Fn() -> RegionCtxt,\n     {\n-        renumber_regions(self.infcx, value, region_ctxt_fn)\n+        let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n+        self.infcx.tcx.fold_regions(value, |_region, _depth| {\n+            self.infcx.next_nll_region_var(origin, || region_ctxt_fn())\n+        })\n     }\n }\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> MutVisitor<'tcx> for RegionRenumberer<'a, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -124,9 +111,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n-    fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _location: Location) {\n+    fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n         let literal = constant.literal;\n-        constant.literal = self.renumber_regions(literal, || RegionCtxt::Location(_location));\n+        constant.literal = self.renumber_regions(literal, || RegionCtxt::Location(location));\n         debug!(\"constant: {:#?}\", constant);\n     }\n }"}]}