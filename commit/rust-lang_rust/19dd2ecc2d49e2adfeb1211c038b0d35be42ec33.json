{"sha": "19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "node_id": "C_kwDOAAsO6NoAKDE5ZGQyZWNjMmQ0OWUyYWRmZWIxMjExYzAzOGIwZDM1YmU0MmVjMzM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-24T12:45:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-24T12:45:34Z"}, "message": "Reorder unwinding related builder methods to differentiate between dwarf and msvc instructions", "tree": {"sha": "f6a1197ffdb96d2a8628adbdd46a47a0eccd6f26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6a1197ffdb96d2a8628adbdd46a47a0eccd6f26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "html_url": "https://github.com/rust-lang/rust/commit/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef119d704d87a05435ea97ef4161529142313a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef119d704d87a05435ea97ef4161529142313a9b", "html_url": "https://github.com/rust-lang/rust/commit/ef119d704d87a05435ea97ef4161529142313a9b"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "1b9e13873b0b9b837c3e663e9425bb7565313131", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "patch": "@@ -1256,6 +1256,10 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         aggregate_value\n     }\n \n+    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n+        // TODO(antoyo)\n+    }\n+\n     fn landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>, _num_clauses: usize) -> RValue<'gcc> {\n         let field1 = self.context.new_field(None, self.u8_type, \"landing_pad_field_1\");\n         let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n@@ -1295,10 +1299,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         unimplemented!();\n     }\n \n-    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n-        // TODO(antoyo)\n-    }\n-\n     // Atomic Operations\n     fn atomic_cmpxchg(&mut self, dst: RValue<'gcc>, cmp: RValue<'gcc>, src: RValue<'gcc>, order: AtomicOrdering, failure_order: AtomicOrdering, weak: bool) -> RValue<'gcc> {\n         let expected = self.current_func().new_local(None, cmp.get_type(), \"expected\");"}, {"sha": "efae50b37a8c602fbd4b7fbd5ccde92b2385150c", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "patch": "@@ -956,6 +956,12 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildInsertValue(self.llbuilder, agg_val, elt, idx as c_uint, UNNAMED) }\n     }\n \n+    fn set_personality_fn(&mut self, personality: &'ll Value) {\n+        unsafe {\n+            llvm::LLVMSetPersonalityFn(self.llfn(), personality);\n+        }\n+    }\n+\n     fn landing_pad(\n         &mut self,\n         ty: &'ll Type,\n@@ -1044,12 +1050,6 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn set_personality_fn(&mut self, personality: &'ll Value) {\n-        unsafe {\n-            llvm::LLVMSetPersonalityFn(self.llfn(), personality);\n-        }\n-    }\n-\n     // Atomic Operations\n     fn atomic_cmpxchg(\n         &mut self,"}, {"sha": "98c67154f9b3a722f31f87446e2e9e1513f87fdf", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dd2ecc2d49e2adfeb1211c038b0d35be42ec33/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=19dd2ecc2d49e2adfeb1211c038b0d35be42ec33", "patch": "@@ -421,6 +421,9 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn extract_value(&mut self, agg_val: Self::Value, idx: u64) -> Self::Value;\n     fn insert_value(&mut self, agg_val: Self::Value, elt: Self::Value, idx: u64) -> Self::Value;\n \n+    fn set_personality_fn(&mut self, personality: Self::Value);\n+\n+    // These are used by everyone except msvc\n     fn landing_pad(\n         &mut self,\n         ty: Self::Type,\n@@ -429,6 +432,8 @@ pub trait BuilderMethods<'a, 'tcx>:\n     ) -> Self::Value;\n     fn set_cleanup(&mut self, landing_pad: Self::Value);\n     fn resume(&mut self, exn: Self::Value) -> Self::Value;\n+\n+    // These are used only by msvc\n     fn cleanup_pad(&mut self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Funclet;\n     fn cleanup_ret(\n         &mut self,\n@@ -443,7 +448,6 @@ pub trait BuilderMethods<'a, 'tcx>:\n         num_handlers: usize,\n     ) -> Self::Value;\n     fn add_handler(&mut self, catch_switch: Self::Value, handler: Self::BasicBlock);\n-    fn set_personality_fn(&mut self, personality: Self::Value);\n \n     fn atomic_cmpxchg(\n         &mut self,"}]}