{"sha": "0389cc6bcd35a8ab06fb942fba5a500817c164e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzODljYzZiY2QzNWE4YWIwNmZiOTQyZmJhNWE1MDA4MTdjMTY0ZTI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-10-29T13:01:11Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "rustc_passes: fix compilation", "tree": {"sha": "5a3621db37749bbcb5afec37efee933064f7d2a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a3621db37749bbcb5afec37efee933064f7d2a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0389cc6bcd35a8ab06fb942fba5a500817c164e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0389cc6bcd35a8ab06fb942fba5a500817c164e2", "html_url": "https://github.com/rust-lang/rust/commit/0389cc6bcd35a8ab06fb942fba5a500817c164e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0389cc6bcd35a8ab06fb942fba5a500817c164e2/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e75411dd67dd593184c3ce9989b28cb5ceabc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e75411dd67dd593184c3ce9989b28cb5ceabc4", "html_url": "https://github.com/rust-lang/rust/commit/37e75411dd67dd593184c3ce9989b28cb5ceabc4"}], "stats": {"total": 82, "additions": 50, "deletions": 32}, "files": [{"sha": "626af7db325d891490b20eeda3b8e8285b63c3b2", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=0389cc6bcd35a8ab06fb942fba5a500817c164e2", "patch": "@@ -48,7 +48,7 @@ use rustc::lint::builtin::CONST_ERR;\n use rustc::hir::{self, PatKind};\n use syntax::ast;\n use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, FnKind, Visitor};\n+use rustc::hir::intravisit::{self, FnKind, Visitor, NestedVisitMode};\n \n use std::collections::hash_map::Entry;\n use std::cmp::Ordering;\n@@ -100,7 +100,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n             .enter(|infcx| f(&mut euv::ExprUseVisitor::new(self, &infcx)))\n     }\n \n-    fn global_expr(&mut self, mode: Mode, expr: &hir::Expr) -> ConstQualif {\n+    fn global_expr(&mut self, mode: Mode, expr: &'gcx hir::Expr) -> ConstQualif {\n         assert!(mode != Mode::Var);\n         match self.tcx.const_qualif_map.borrow_mut().entry(expr.id) {\n             Entry::Occupied(entry) => return *entry.get(),\n@@ -132,9 +132,9 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n     }\n \n     fn fn_like(&mut self,\n-               fk: FnKind,\n-               fd: &hir::FnDecl,\n-               b: &hir::Expr,\n+               fk: FnKind<'gcx>,\n+               fd: &'gcx hir::FnDecl,\n+               b: hir::ExprId,\n                s: Span,\n                fn_id: ast::NodeId)\n                -> ConstQualif {\n@@ -160,7 +160,8 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         };\n \n         let qualif = self.with_mode(mode, |this| {\n-            this.with_euv(Some(fn_id), |euv| euv.walk_fn(fd, b));\n+            let body = this.tcx.map.expr(b);\n+            this.with_euv(Some(fn_id), |euv| euv.walk_fn(fd, body));\n             intravisit::walk_fn(this, fk, fd, b, s, fn_id);\n             this.qualif\n         });\n@@ -213,8 +214,12 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &hir::Item) {\n+impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    }\n+\n+    fn visit_item(&mut self, i: &'tcx hir::Item) {\n         debug!(\"visit_item(item={})\", self.tcx.map.node_to_string(i.id));\n         assert_eq!(self.mode, Mode::Var);\n         match i.node {\n@@ -240,7 +245,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, t: &'v hir::TraitItem) {\n+    fn visit_trait_item(&mut self, t: &'tcx hir::TraitItem) {\n         match t.node {\n             hir::ConstTraitItem(_, ref default) => {\n                 if let Some(ref expr) = *default {\n@@ -253,7 +258,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_impl_item(&mut self, i: &'v hir::ImplItem) {\n+    fn visit_impl_item(&mut self, i: &'tcx hir::ImplItem) {\n         match i.node {\n             hir::ImplItemKind::Const(_, ref expr) => {\n                 self.global_expr(Mode::Const, &expr);\n@@ -263,15 +268,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     fn visit_fn(&mut self,\n-                fk: FnKind<'v>,\n-                fd: &'v hir::FnDecl,\n-                b: &'v hir::Expr,\n+                fk: FnKind<'tcx>,\n+                fd: &'tcx hir::FnDecl,\n+                b: hir::ExprId,\n                 s: Span,\n                 fn_id: ast::NodeId) {\n         self.fn_like(fk, fd, b, s, fn_id);\n     }\n \n-    fn visit_pat(&mut self, p: &hir::Pat) {\n+    fn visit_pat(&mut self, p: &'tcx hir::Pat) {\n         match p.node {\n             PatKind::Lit(ref lit) => {\n                 self.global_expr(Mode::Const, &lit);\n@@ -296,7 +301,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_block(&mut self, block: &hir::Block) {\n+    fn visit_block(&mut self, block: &'tcx hir::Block) {\n         // Check all statements in the block\n         for stmt in &block.stmts {\n             match stmt.node {\n@@ -315,7 +320,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n         intravisit::walk_block(self, block);\n     }\n \n-    fn visit_expr(&mut self, ex: &hir::Expr) {\n+    fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n         let mut outer = self.qualif;\n         self.qualif = ConstQualif::empty();\n "}, {"sha": "28a913de26fe6b41270614e1162cd1530fff9f59", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=0389cc6bcd35a8ab06fb942fba5a500817c164e2", "patch": "@@ -106,7 +106,7 @@ impl<'k> StatCollector<'k> {\n }\n \n impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'v>> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'v>, hir_visit::NestedVisitMode)> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n \n@@ -172,7 +172,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_fn(&mut self,\n                 fk: hir_visit::FnKind<'v>,\n                 fd: &'v hir::FnDecl,\n-                b: &'v hir::Expr,\n+                b: hir::ExprId,\n                 s: Span,\n                 id: NodeId) {\n         self.record(\"FnDecl\", Id::None, fd);"}, {"sha": "9356a0ce17d67718650f99f2db8e3b3c37c0b916", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=0389cc6bcd35a8ab06fb942fba5a500817c164e2", "patch": "@@ -13,7 +13,7 @@ use rustc::session::Session;\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -59,16 +59,20 @@ pub fn check_crate(sess: &Session, map: &Map) {\n     }.as_deep_visitor());\n }\n \n-impl<'a, 'ast, 'v> Visitor<'v> for CheckLoopVisitor<'a, 'ast> {\n-    fn visit_item(&mut self, i: &hir::Item) {\n+impl<'a, 'ast> Visitor<'ast> for CheckLoopVisitor<'a, 'ast> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'ast>, NestedVisitMode)> {\n+        Some((&self.hir_map, NestedVisitMode::OnlyBodies))\n+    }\n+\n+    fn visit_item(&mut self, i: &'ast hir::Item) {\n         self.with_context(Normal, |v| intravisit::walk_item(v, i));\n     }\n \n-    fn visit_impl_item(&mut self, i: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, i: &'ast hir::ImplItem) {\n         self.with_context(Normal, |v| intravisit::walk_impl_item(v, i));\n     }\n \n-    fn visit_expr(&mut self, e: &hir::Expr) {\n+    fn visit_expr(&mut self, e: &'ast hir::Expr) {\n         match e.node {\n             hir::ExprWhile(ref e, ref b, _) => {\n                 self.with_context(Loop(LoopKind::WhileLoop), |v| {\n@@ -79,8 +83,8 @@ impl<'a, 'ast, 'v> Visitor<'v> for CheckLoopVisitor<'a, 'ast> {\n             hir::ExprLoop(ref b, _, source) => {\n                 self.with_context(Loop(LoopKind::Loop(source)), |v| v.visit_block(&b));\n             }\n-            hir::ExprClosure(.., ref b, _) => {\n-                self.with_context(Closure, |v| v.visit_expr(&b));\n+            hir::ExprClosure(.., b, _) => {\n+                self.with_context(Closure, |v| v.visit_body(b));\n             }\n             hir::ExprBreak(label, ref opt_expr) => {\n                 if opt_expr.is_some() {"}, {"sha": "36492538d4bfbeaca8aed5a52897010427638fdf", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=0389cc6bcd35a8ab06fb942fba5a500817c164e2", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n use rustc::traits::Reveal;\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n use syntax::ast;\n use syntax_pos::Span;\n \n@@ -31,11 +31,15 @@ struct RvalueContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for RvalueContext<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for RvalueContext<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    }\n+\n     fn visit_fn(&mut self,\n-                fk: intravisit::FnKind<'v>,\n-                fd: &'v hir::FnDecl,\n-                b: &'v hir::Expr,\n+                fk: intravisit::FnKind<'tcx>,\n+                fd: &'tcx hir::FnDecl,\n+                b: hir::ExprId,\n                 s: Span,\n                 fn_id: ast::NodeId) {\n         // FIXME (@jroesch) change this to be an inference context\n@@ -46,8 +50,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for RvalueContext<'a, 'tcx> {\n                 tcx: infcx.tcx,\n                 param_env: &param_env\n             };\n+            let body = infcx.tcx.map.expr(b);\n             let mut euv = euv::ExprUseVisitor::new(&mut delegate, &infcx);\n-            euv.walk_fn(fd, b);\n+            euv.walk_fn(fd, body);\n         });\n         intravisit::walk_fn(self, fk, fd, b, s, fn_id)\n     }"}, {"sha": "a70ad25f50545ab9ecd620832767cbabe82f3088", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0389cc6bcd35a8ab06fb942fba5a500817c164e2/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=0389cc6bcd35a8ab06fb942fba5a500817c164e2", "patch": "@@ -20,7 +20,7 @@ use rustc::util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n use rustc::hir;\n \n use std::cell::RefCell;\n@@ -200,6 +200,10 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n }\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'ast>, NestedVisitMode)> {\n+        Some((&self.ast_map, NestedVisitMode::OnlyBodies))\n+    }\n+\n     fn visit_item(&mut self, it: &'ast hir::Item) {\n         self.with_item_id_pushed(it.id, |v| intravisit::walk_item(v, it), it.span);\n     }"}]}