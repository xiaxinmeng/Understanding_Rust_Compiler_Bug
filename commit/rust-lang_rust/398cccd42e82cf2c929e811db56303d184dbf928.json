{"sha": "398cccd42e82cf2c929e811db56303d184dbf928", "node_id": "C_kwDOAAsO6NoAKDM5OGNjY2Q0MmU4MmNmMmM5MjllODExZGI1NjMwM2QxODRkYmY5Mjg", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-13T15:19:42Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-13T15:23:16Z"}, "message": "Make default stdio lock() return 'static handles\n\nThis also deletes the unstable API surface area previously added to expose this\nfunctionality on new methods rather than built into the current set.", "tree": {"sha": "2a0234071440a987df34492b066248ed846f17b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a0234071440a987df34492b066248ed846f17b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/398cccd42e82cf2c929e811db56303d184dbf928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/398cccd42e82cf2c929e811db56303d184dbf928", "html_url": "https://github.com/rust-lang/rust/commit/398cccd42e82cf2c929e811db56303d184dbf928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/398cccd42e82cf2c929e811db56303d184dbf928/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3a3e3d5bd65fd534336101a06f7b11396c3208", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3a3e3d5bd65fd534336101a06f7b11396c3208", "html_url": "https://github.com/rust-lang/rust/commit/9c3a3e3d5bd65fd534336101a06f7b11396c3208"}], "stats": {"total": 246, "additions": 18, "deletions": 228}, "files": [{"sha": "3fa965d08e6981b629f39fa4e6a4fdba30287eb5", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/398cccd42e82cf2c929e811db56303d184dbf928/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398cccd42e82cf2c929e811db56303d184dbf928/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=398cccd42e82cf2c929e811db56303d184dbf928", "patch": "@@ -268,8 +268,6 @@ pub use self::buffered::WriterPanicked;\n pub use self::stdio::set_output_capture;\n #[unstable(feature = \"print_internals\", issue = \"none\")]\n pub use self::stdio::{_eprint, _print};\n-#[unstable(feature = \"stdio_locked\", issue = \"86845\")]\n-pub use self::stdio::{stderr_locked, stdin_locked, stdout_locked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::{\n     buffered::{BufReader, BufWriter, IntoInnerError, LineWriter},"}, {"sha": "5414ff648d4d5f5051ccf64d5a71e0aa3b5ed239", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 15, "deletions": 223, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/398cccd42e82cf2c929e811db56303d184dbf928/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398cccd42e82cf2c929e811db56303d184dbf928/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=398cccd42e82cf2c929e811db56303d184dbf928", "patch": "@@ -307,48 +307,6 @@ pub fn stdin() -> Stdin {\n     }\n }\n \n-/// Constructs a new locked handle to the standard input of the current\n-/// process.\n-///\n-/// Each handle returned is a guard granting locked access to a shared\n-/// global buffer whose access is synchronized via a mutex. If you need\n-/// more explicit control over locking, for example, in a multi-threaded\n-/// program, use the [`io::stdin`] function to obtain an unlocked handle,\n-/// along with the [`Stdin::lock`] method.\n-///\n-/// The lock is released when the returned guard goes out of scope. The\n-/// returned guard also implements the [`Read`] and [`BufRead`] traits for\n-/// accessing the underlying data.\n-///\n-/// **Note**: The mutex locked by this handle is not reentrant. Even in a\n-/// single-threaded program, calling other code that accesses [`Stdin`]\n-/// could cause a deadlock or panic, if this locked handle is held across\n-/// that call.\n-///\n-/// ### Note: Windows Portability Consideration\n-/// When operating in a console, the Windows implementation of this stream does not support\n-/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n-/// an error.\n-///\n-/// # Examples\n-///\n-/// ```no_run\n-/// #![feature(stdio_locked)]\n-/// use std::io::{self, BufRead};\n-///\n-/// fn main() -> io::Result<()> {\n-///     let mut buffer = String::new();\n-///     let mut handle = io::stdin_locked();\n-///\n-///     handle.read_line(&mut buffer)?;\n-///     Ok(())\n-/// }\n-/// ```\n-#[unstable(feature = \"stdio_locked\", issue = \"86845\")]\n-pub fn stdin_locked() -> StdinLock<'static> {\n-    stdin().into_locked()\n-}\n-\n impl Stdin {\n     /// Locks this handle to the standard input stream, returning a readable\n     /// guard.\n@@ -372,8 +330,10 @@ impl Stdin {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn lock(&self) -> StdinLock<'_> {\n-        self.lock_any()\n+    pub fn lock(&self) -> StdinLock<'static> {\n+        // Locks this handle with 'static lifetime. This depends on the\n+        // implementation detail that the underlying `Mutex` is static.\n+        StdinLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n     }\n \n     /// Locks this handle and reads a line of input, appending it to the specified buffer.\n@@ -407,43 +367,6 @@ impl Stdin {\n         self.lock().read_line(buf)\n     }\n \n-    // Locks this handle with any lifetime. This depends on the\n-    // implementation detail that the underlying `Mutex` is static.\n-    fn lock_any<'a>(&self) -> StdinLock<'a> {\n-        StdinLock { inner: self.inner.lock().unwrap_or_else(|e| e.into_inner()) }\n-    }\n-\n-    /// Consumes this handle to the standard input stream, locking the\n-    /// shared global buffer associated with the stream and returning a\n-    /// readable guard.\n-    ///\n-    /// The lock is released when the returned guard goes out of scope. The\n-    /// returned guard also implements the [`Read`] and [`BufRead`] traits\n-    /// for accessing the underlying data.\n-    ///\n-    /// It is often simpler to directly get a locked handle using the\n-    /// [`stdin_locked`] function instead, unless nearby code also needs to\n-    /// use an unlocked handle.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```no_run\n-    /// #![feature(stdio_locked)]\n-    /// use std::io::{self, BufRead};\n-    ///\n-    /// fn main() -> io::Result<()> {\n-    ///     let mut buffer = String::new();\n-    ///     let mut handle = io::stdin().into_locked();\n-    ///\n-    ///     handle.read_line(&mut buffer)?;\n-    ///     Ok(())\n-    /// }\n-    /// ```\n-    #[unstable(feature = \"stdio_locked\", issue = \"86845\")]\n-    pub fn into_locked(self) -> StdinLock<'static> {\n-        self.lock_any()\n-    }\n-\n     /// Consumes this handle and returns an iterator over input lines.\n     ///\n     /// For detailed semantics of this method, see the documentation on\n@@ -463,7 +386,7 @@ impl Stdin {\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n     pub fn lines(self) -> Lines<StdinLock<'static>> {\n-        self.into_locked().lines()\n+        self.lock().lines()\n     }\n }\n \n@@ -649,42 +572,6 @@ pub fn stdout() -> Stdout {\n     }\n }\n \n-/// Constructs a new locked handle to the standard output of the current\n-/// process.\n-///\n-/// Each handle returned is a guard granting locked access to a shared\n-/// global buffer whose access is synchronized via a mutex. If you need\n-/// more explicit control over locking, for example, in a multi-threaded\n-/// program, use the [`io::stdout`] function to obtain an unlocked handle,\n-/// along with the [`Stdout::lock`] method.\n-///\n-/// The lock is released when the returned guard goes out of scope. The\n-/// returned guard also implements the [`Write`] trait for writing data.\n-///\n-/// ### Note: Windows Portability Consideration\n-/// When operating in a console, the Windows implementation of this stream does not support\n-/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n-/// an error.\n-///\n-/// # Examples\n-///\n-/// ```no_run\n-/// #![feature(stdio_locked)]\n-/// use std::io::{self, Write};\n-///\n-/// fn main() -> io::Result<()> {\n-///     let mut handle = io::stdout_locked();\n-///\n-///     handle.write_all(b\"hello world\")?;\n-///\n-///     Ok(())\n-/// }\n-/// ```\n-#[unstable(feature = \"stdio_locked\", issue = \"86845\")]\n-pub fn stdout_locked() -> StdoutLock<'static> {\n-    stdout().into_locked()\n-}\n-\n pub fn cleanup() {\n     if let Some(instance) = STDOUT.get() {\n         // Flush the data and disable buffering during shutdown\n@@ -712,55 +599,20 @@ impl Stdout {\n     /// use std::io::{self, Write};\n     ///\n     /// fn main() -> io::Result<()> {\n-    ///     let stdout = io::stdout();\n-    ///     let mut handle = stdout.lock();\n+    ///     let mut stdout = io::stdout().lock();\n     ///\n-    ///     handle.write_all(b\"hello world\")?;\n+    ///     stdout.write_all(b\"hello world\")?;\n     ///\n     ///     Ok(())\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn lock(&self) -> StdoutLock<'_> {\n-        self.lock_any()\n-    }\n-\n-    // Locks this handle with any lifetime. This depends on the\n-    // implementation detail that the underlying `ReentrantMutex` is\n-    // static.\n-    fn lock_any<'a>(&self) -> StdoutLock<'a> {\n+    pub fn lock(&self) -> StdoutLock<'static> {\n+        // Locks this handle with 'static lifetime. This depends on the\n+        // implementation detail that the underlying `ReentrantMutex` is\n+        // static.\n         StdoutLock { inner: self.inner.lock() }\n     }\n-\n-    /// Consumes this handle to the standard output stream, locking the\n-    /// shared global buffer associated with the stream and returning a\n-    /// writable guard.\n-    ///\n-    /// The lock is released when the returned lock goes out of scope. The\n-    /// returned guard also implements the [`Write`] trait for writing data.\n-    ///\n-    /// It is often simpler to directly get a locked handle using the\n-    /// [`io::stdout_locked`] function instead, unless nearby code also\n-    /// needs to use an unlocked handle.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```no_run\n-    /// #![feature(stdio_locked)]\n-    /// use std::io::{self, Write};\n-    ///\n-    /// fn main() -> io::Result<()> {\n-    ///     let mut handle = io::stdout().into_locked();\n-    ///\n-    ///     handle.write_all(b\"hello world\")?;\n-    ///\n-    ///     Ok(())\n-    /// }\n-    /// ```\n-    #[unstable(feature = \"stdio_locked\", issue = \"86845\")]\n-    pub fn into_locked(self) -> StdoutLock<'static> {\n-        self.lock_any()\n-    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -935,35 +787,6 @@ pub fn stderr() -> Stderr {\n     }\n }\n \n-/// Constructs a new locked handle to the standard error of the current\n-/// process.\n-///\n-/// This handle is not buffered.\n-///\n-/// ### Note: Windows Portability Consideration\n-/// When operating in a console, the Windows implementation of this stream does not support\n-/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n-/// an error.\n-///\n-/// # Example\n-///\n-/// ```no_run\n-/// #![feature(stdio_locked)]\n-/// use std::io::{self, Write};\n-///\n-/// fn main() -> io::Result<()> {\n-///     let mut handle = io::stderr_locked();\n-///\n-///     handle.write_all(b\"hello world\")?;\n-///\n-///     Ok(())\n-/// }\n-/// ```\n-#[unstable(feature = \"stdio_locked\", issue = \"86845\")]\n-pub fn stderr_locked() -> StderrLock<'static> {\n-    stderr().into_locked()\n-}\n-\n impl Stderr {\n     /// Locks this handle to the standard error stream, returning a writable\n     /// guard.\n@@ -986,43 +809,12 @@ impl Stderr {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn lock(&self) -> StderrLock<'_> {\n-        self.lock_any()\n-    }\n-\n-    // Locks this handle with any lifetime. This depends on the\n-    // implementation detail that the underlying `ReentrantMutex` is\n-    // static.\n-    fn lock_any<'a>(&self) -> StderrLock<'a> {\n+    pub fn lock(&self) -> StderrLock<'static> {\n+        // Locks this handle with 'static lifetime. This depends on the\n+        // implementation detail that the underlying `ReentrantMutex` is\n+        // static.\n         StderrLock { inner: self.inner.lock() }\n     }\n-\n-    /// Locks and consumes this handle to the standard error stream,\n-    /// returning a writable guard.\n-    ///\n-    /// The lock is released when the returned guard goes out of scope. The\n-    /// returned guard also implements the [`Write`] trait for writing\n-    /// data.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(stdio_locked)]\n-    /// use std::io::{self, Write};\n-    ///\n-    /// fn foo() -> io::Result<()> {\n-    ///     let stderr = io::stderr();\n-    ///     let mut handle = stderr.into_locked();\n-    ///\n-    ///     handle.write_all(b\"hello world\")?;\n-    ///\n-    ///     Ok(())\n-    /// }\n-    /// ```\n-    #[unstable(feature = \"stdio_locked\", issue = \"86845\")]\n-    pub fn into_locked(self) -> StderrLock<'static> {\n-        self.lock_any()\n-    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]"}, {"sha": "f89fd27ce6c23b2ed6ae874b61daa2f6f81b7616", "filename": "library/std/src/io/stdio/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/398cccd42e82cf2c929e811db56303d184dbf928/library%2Fstd%2Fsrc%2Fio%2Fstdio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398cccd42e82cf2c929e811db56303d184dbf928/library%2Fstd%2Fsrc%2Fio%2Fstdio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio%2Ftests.rs?ref=398cccd42e82cf2c929e811db56303d184dbf928", "patch": "@@ -50,17 +50,17 @@ fn panic_doesnt_poison() {\n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_lock_stderr() {\n-    test_lock(stderr, stderr_locked);\n+    test_lock(stderr, || stderr().lock());\n }\n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_lock_stdin() {\n-    test_lock(stdin, stdin_locked);\n+    test_lock(stdin, || stdin().lock());\n }\n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_lock_stdout() {\n-    test_lock(stdout, stdout_locked);\n+    test_lock(stdout, || stdout().lock());\n }\n \n // Helper trait to make lock testing function generic."}]}