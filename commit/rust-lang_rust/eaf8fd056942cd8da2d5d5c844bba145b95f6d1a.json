{"sha": "eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjhmZDA1Njk0MmNkOGRhMmQ1ZDVjODQ0YmJhMTQ1Yjk1ZjZkMWE=", "commit": {"author": {"name": "Gabriel Smith", "email": "gsmith@d3engineering.com", "date": "2019-11-18T19:57:23Z"}, "committer": {"name": "Gabriel Smith", "email": "gsmith@d3engineering.com", "date": "2019-11-18T22:23:22Z"}, "message": "test: const-generics: Update tests removing unrequired braces\n\nBraces were left in cases where generic args were in the generic const\npaths.", "tree": {"sha": "6105989dbc14bf39472bbbd687691560c0212ee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6105989dbc14bf39472bbbd687691560c0212ee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "html_url": "https://github.com/rust-lang/rust/commit/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/comments", "author": null, "committer": null, "parents": [{"sha": "fb6cfde5bad603193d1ae42786a725bd5dc01a40", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6cfde5bad603193d1ae42786a725bd5dc01a40", "html_url": "https://github.com/rust-lang/rust/commit/fb6cfde5bad603193d1ae42786a725bd5dc01a40"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "56a58c582f6457af5dd15a39e1502b3fc65725d5", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs?ref=eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "patch": "@@ -3,11 +3,11 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-struct Foo<T, const N: usize>([T; {N}]);\n+struct Foo<T, const N: usize>([T; N]);\n \n-impl<T, const N: usize> Foo<T, {N}> {\n+impl<T, const N: usize> Foo<T, N> {\n     fn foo(&self) -> usize {\n-        {N}\n+        N\n     }\n }\n "}, {"sha": "cd4b19db3533117f6d6bff106ec48ed3911d4112", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "patch": "@@ -9,12 +9,12 @@ fn function() -> u32 {\n \n struct Wrapper<const F: fn() -> u32>;\n \n-impl<const F: fn() -> u32> Wrapper<{F}> {\n+impl<const F: fn() -> u32> Wrapper<F> {\n     fn call() -> u32 {\n         F()\n     }\n }\n \n fn main() {\n-    assert_eq!(Wrapper::<{function}>::call(), 17);\n+    assert_eq!(Wrapper::<function>::call(), 17);\n }"}, {"sha": "dc69fa9eea58556eed6d94264fcd2554ebc20b14", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "patch": "@@ -11,15 +11,15 @@ fn generic_arg<T>(val: T) -> bool { true }\n fn generic<T>(val: usize) -> bool { val != 1 }\n \n fn main() {\n-    let _: Option<Checked<{not_one}>> = None;\n-    let _: Checked<{not_one}> = Checked::<{not_one}>;\n-    let _: Checked<{not_one}> = Checked::<{not_two}>; //~ mismatched types\n+    let _: Option<Checked<not_one>> = None;\n+    let _: Checked<not_one> = Checked::<not_one>;\n+    let _: Checked<not_one> = Checked::<not_two>; //~ mismatched types\n \n-    let _ = Checked::<{generic_arg}>;\n+    let _ = Checked::<generic_arg>;\n     let _ = Checked::<{generic_arg::<usize>}>;\n     let _ = Checked::<{generic_arg::<u32>}>;  //~ mismatched types\n \n-    let _ = Checked::<{generic}>; //~ type annotations needed\n+    let _ = Checked::<generic>; //~ type annotations needed\n     let _ = Checked::<{generic::<u16>}>;\n     let _: Checked<{generic::<u16>}> = Checked::<{generic::<u16>}>;\n     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>; //~ mismatched types"}, {"sha": "e36bb824151f710e5e6dd43c14e801a72927284d", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "patch": "@@ -7,10 +7,10 @@ LL | #![feature(const_generics, const_compare_raw_pointers)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-const-param-infer.rs:16:33\n+  --> $DIR/fn-const-param-infer.rs:16:31\n    |\n-LL |     let _: Checked<{not_one}> = Checked::<{not_two}>;\n-   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n+LL |     let _: Checked<not_one> = Checked::<not_two>;\n+   |                               ^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n    |\n    = note: expected type `Checked<not_one>`\n               found type `Checked<not_two>`\n@@ -25,10 +25,10 @@ LL |     let _ = Checked::<{generic_arg::<u32>}>;\n               found type `fn(u32) -> bool {generic_arg::<u32>}`\n \n error[E0282]: type annotations needed\n-  --> $DIR/fn-const-param-infer.rs:22:24\n+  --> $DIR/fn-const-param-infer.rs:22:23\n    |\n-LL |     let _ = Checked::<{generic}>;\n-   |                        ^^^^^^^ cannot infer type for `T`\n+LL |     let _ = Checked::<generic>;\n+   |                       ^^^^^^^ cannot infer type for `T`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:25:40"}, {"sha": "87572e51e8142df6b04535d82dadc2cf3d051323", "filename": "src/test/ui/const-generics/impl-const-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs?ref=eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "patch": "@@ -5,7 +5,7 @@\n \n struct S<const X: u32>;\n \n-impl<const X: u32> S<{X}> {\n+impl<const X: u32> S<X> {\n     fn x() -> u32 {\n         X\n     }"}, {"sha": "745dde3c2876661236df9fb48392f1be6d58071a", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "patch": "@@ -6,7 +6,7 @@ const A: u32 = 3;\n \n struct Const<const P: *const u32>;\n \n-impl<const P: *const u32> Const<{P}> {\n+impl<const P: *const u32> Const<P> {\n     fn get() -> u32 {\n         unsafe {\n             *P"}, {"sha": "7942631bb70b9f632583db09285b74b9f18e4941", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf8fd056942cd8da2d5d5c844bba145b95f6d1a/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs?ref=eaf8fd056942cd8da2d5d5c844bba145b95f6d1a", "patch": "@@ -7,7 +7,7 @@ use std::fmt;\n \n struct Array<T, const N: usize>([T; N]);\n \n-impl<T: fmt::Debug, const N: usize> fmt::Debug for Array<T, {N}> {\n+impl<T: fmt::Debug, const N: usize> fmt::Debug for Array<T, N> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.0.iter()).finish()\n     }"}]}