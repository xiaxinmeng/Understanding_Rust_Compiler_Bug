{"sha": "47a558ed7c9b129dea246cdfb35817b1035f8de9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YTU1OGVkN2M5YjEyOWRlYTI0NmNkZmIzNTgxN2IxMDM1ZjhkZTk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-18T18:15:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-20T21:03:39Z"}, "message": "Feature gate async fn methods", "tree": {"sha": "a655ce20ed111efa4e06a285d2860082ff62c13b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a655ce20ed111efa4e06a285d2860082ff62c13b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47a558ed7c9b129dea246cdfb35817b1035f8de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47a558ed7c9b129dea246cdfb35817b1035f8de9", "html_url": "https://github.com/rust-lang/rust/commit/47a558ed7c9b129dea246cdfb35817b1035f8de9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47a558ed7c9b129dea246cdfb35817b1035f8de9/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bbd29f2066b58d0efef6fe724807daa3d85d237", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbd29f2066b58d0efef6fe724807daa3d85d237", "html_url": "https://github.com/rust-lang/rust/commit/4bbd29f2066b58d0efef6fe724807daa3d85d237"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "560748dbd6ffd6d6a0e0d90eba6b16b27fc3b820", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/47a558ed7c9b129dea246cdfb35817b1035f8de9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a558ed7c9b129dea246cdfb35817b1035f8de9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=47a558ed7c9b129dea246cdfb35817b1035f8de9", "patch": "@@ -2035,28 +2035,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 fn_decl: &'a ast::FnDecl,\n                 span: Span,\n                 _node_id: NodeId) {\n-        match fn_kind {\n-            FnKind::ItemFn(_, header, _, _) => {\n-                // Check for const fn and async fn declarations.\n-                if header.asyncness.node.is_async() {\n-                    gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n-                }\n+        if let Some(header) = fn_kind.header() {\n+            // Check for const fn and async fn declarations.\n+            if header.asyncness.node.is_async() {\n+                gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n+            }\n \n-                if fn_decl.c_variadic {\n-                    gate_feature_post!(&self, c_variadic, span,\n-                                       \"C-varaidic functions are unstable\");\n-                }\n-                // Stability of const fn methods are covered in\n-                // `visit_trait_item` and `visit_impl_item` below; this is\n-                // because default methods don't pass through this point.\n+            // Stability of const fn methods are covered in\n+            // `visit_trait_item` and `visit_impl_item` below; this is\n+            // because default methods don't pass through this point.\n+            self.check_abi(header.abi, span);\n+        }\n \n-                self.check_abi(header.abi, span);\n-            }\n-            FnKind::Method(_, sig, _, _) => {\n-                self.check_abi(sig.header.abi, span);\n-            }\n-            _ => {}\n+        if fn_decl.c_variadic {\n+            gate_feature_post!(&self, c_variadic, span, \"C-varaidic functions are unstable\");\n         }\n+\n         visit::walk_fn(self, fn_kind, fn_decl, span);\n     }\n "}, {"sha": "fe74cbd649612d23675069b0e6ee429a9e60e95a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47a558ed7c9b129dea246cdfb35817b1035f8de9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a558ed7c9b129dea246cdfb35817b1035f8de9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=47a558ed7c9b129dea246cdfb35817b1035f8de9", "patch": "@@ -31,6 +31,16 @@ pub enum FnKind<'a> {\n     Closure(&'a Expr),\n }\n \n+impl<'a> FnKind<'a> {\n+    pub fn header(&self) -> Option<&'a FnHeader> {\n+        match *self {\n+            FnKind::ItemFn(_, header, _, _) => Some(header),\n+            FnKind::Method(_, sig, _, _) => Some(&sig.header),\n+            FnKind::Closure(_) => None,\n+        }\n+    }\n+}\n+\n /// Each method of the Visitor trait is a hook to be potentially\n /// overridden. Each method's default implementation recursively visits\n /// the substructure of the input via the corresponding `walk` method;"}]}