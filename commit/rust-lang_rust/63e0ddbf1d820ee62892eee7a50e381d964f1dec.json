{"sha": "63e0ddbf1d820ee62892eee7a50e381d964f1dec", "node_id": "C_kwDOAAsO6NoAKDYzZTBkZGJmMWQ4MjBlZTYyODkyZWVlN2E1MGUzODFkOTY0ZjFkZWM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T07:20:26Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T07:20:26Z"}, "message": "core is now compilable", "tree": {"sha": "28b0f8142c97b67bd00044aa700efbea1224a4e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b0f8142c97b67bd00044aa700efbea1224a4e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63e0ddbf1d820ee62892eee7a50e381d964f1dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63e0ddbf1d820ee62892eee7a50e381d964f1dec", "html_url": "https://github.com/rust-lang/rust/commit/63e0ddbf1d820ee62892eee7a50e381d964f1dec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63e0ddbf1d820ee62892eee7a50e381d964f1dec/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e80c0204455534c5d9ec4f92dd8bffd392513fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e80c0204455534c5d9ec4f92dd8bffd392513fc3", "html_url": "https://github.com/rust-lang/rust/commit/e80c0204455534c5d9ec4f92dd8bffd392513fc3"}], "stats": {"total": 338, "additions": 85, "deletions": 253}, "files": [{"sha": "a002421aeef3a472d1cb2cf544b8104338518154", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -106,7 +106,6 @@\n #![feature(coerce_unsized)]\n #![feature(const_align_of_val)]\n #![feature(const_box)]\n-#![feature(const_convert)]\n #![feature(const_cow_is_borrowed)]\n #![feature(const_eval_select)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n@@ -174,7 +173,6 @@\n #![feature(associated_type_bounds)]\n #![feature(c_unwind)]\n #![feature(cfg_sanitize)]\n-#![feature(const_deref)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n #![feature(const_ptr_write)]"}, {"sha": "597303037345ed72ff00b97bb591f0de8b210c8e", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -231,9 +231,8 @@ impl Layout {\n     /// Returns an error if the combination of `self.size()` and the given\n     /// `align` violates the conditions listed in [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n-    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub const fn align_to(&self, align: usize) -> Result<Self, LayoutError> {\n+    pub fn align_to(&self, align: usize) -> Result<Self, LayoutError> {\n         Layout::from_size_align(self.size(), cmp::max(self.align(), align))\n     }\n \n@@ -315,9 +314,8 @@ impl Layout {\n     ///\n     /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n-    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub const fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {\n+    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {\n         // This cannot overflow. Quoting from the invariant of Layout:\n         // > `size`, when rounded up to the nearest multiple of `align`,\n         // > must not overflow isize (i.e., the rounded value must be\n@@ -376,9 +374,8 @@ impl Layout {\n     /// # assert_eq!(repr_c(&[u64, u32, u16, u32]), Ok((s, vec![0, 8, 12, 16])));\n     /// ```\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n-    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub const fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n+    pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n         let new_align = cmp::max(self.align, next.align);\n         let pad = self.padding_needed_for(next.align());\n \n@@ -403,9 +400,8 @@ impl Layout {\n     ///\n     /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n-    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub const fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n+    pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n         let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n         Layout::from_size_alignment(size, self.align)\n@@ -418,9 +414,8 @@ impl Layout {\n     ///\n     /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n-    #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub const fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n+    pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n         let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n         Layout::from_size_alignment(new_size, self.align)"}, {"sha": "03cdff9b13be171ac8b6871e63fe5c4eed7cafb2", "filename": "library/core/src/bool.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fbool.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -30,8 +30,7 @@ impl bool {\n     /// ```\n     #[stable(feature = \"bool_to_option\", since = \"1.62.0\")]\n     #[inline]\n-    pub fn then_some<T>(self, t: T) -> Option<T>\n-    {\n+    pub fn then_some<T>(self, t: T) -> Option<T> {\n         if self { Some(t) } else { None }\n     }\n \n@@ -57,8 +56,7 @@ impl bool {\n     /// ```\n     #[stable(feature = \"lazy_bool_to_option\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn then<T, F: FnOnce() -> T>(self, f: F) -> Option<T>\n-    {\n+    pub fn then<T, F: FnOnce() -> T>(self, f: F) -> Option<T> {\n         if self { Some(f()) } else { None }\n     }\n }"}, {"sha": "a6d6230d3a62b6a18700cca3d3b525fcc5afb701", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -126,8 +126,7 @@ pub trait Clone: Sized {\n     /// allocations.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn clone_from(&mut self, source: &Self)\n-    {\n+    fn clone_from(&mut self, source: &Self) {\n         *self = source.clone()\n     }\n }"}, {"sha": "90825c4ce32e1c68b4e86265fdabcd6971351002", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -25,8 +25,6 @@\n mod bytewise;\n pub(crate) use bytewise::BytewiseEq;\n \n-use crate::marker::Destruct;\n-\n use self::Ordering::*;\n \n /// Trait for equality comparisons.\n@@ -1158,9 +1156,8 @@ pub macro PartialOrd($item:item) {\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"cmp_min\")]\n-pub const fn min<T: Ord>(v1: T, v2: T) -> T {\n+pub fn min<T: Ord>(v1: T, v2: T) -> T {\n     v1.min(v2)\n }\n \n@@ -1179,8 +1176,7 @@ pub const fn min<T: Ord>(v1: T, v2: T) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"cmp_min_max_by\", since = \"1.53.0\")]\n-pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T\n-{\n+pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n     match compare(&v1, &v2) {\n         Ordering::Less | Ordering::Equal => v1,\n         Ordering::Greater => v2,\n@@ -1202,8 +1198,7 @@ pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T\n #[inline]\n #[must_use]\n #[stable(feature = \"cmp_min_max_by\", since = \"1.53.0\")]\n-pub fn min_by_key<T, F:FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T\n-{\n+pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n     min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n }\n \n@@ -1244,8 +1239,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"cmp_min_max_by\", since = \"1.53.0\")]\n-pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T\n-{\n+pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n     match compare(&v1, &v2) {\n         Ordering::Less | Ordering::Equal => v2,\n         Ordering::Greater => v1,\n@@ -1267,14 +1261,8 @@ pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T\n #[inline]\n #[must_use]\n #[stable(feature = \"cmp_min_max_by\", since = \"1.53.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n-pub const fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T\n-where\n-    T: Destruct,\n-    F: Destruct,\n-    K: Destruct,\n-{\n-    max_by(v1, v2, const |v1, v2| f(v1).cmp(&f(v2)))\n+pub fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n+    max_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n }\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types"}, {"sha": "9b8bc8d1d21ca6acef72fd13874afc4bb3921560", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -324,14 +324,14 @@ impl CStr {\n     /// assert_eq!(c_str.to_str().unwrap(), \"AAAAAAAA\");\n     /// ```\n     ///\n-    #[rustc_allow_const_fn_unstable(const_slice_index)]\n     #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n     #[rustc_const_stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n     pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {\n             Some(nul_pos) => {\n-                let subslice = &bytes[..nul_pos + 1];\n+                // FIXME(const-hack) replace with range index\n+                let subslice = unsafe { crate::slice::from_raw_parts(bytes.as_ptr(), nul_pos + 1) };\n                 // SAFETY: We know there is a nul byte at nul_pos, so this slice\n                 // (ending at the nul byte) is a well-formed C string.\n                 Ok(unsafe { CStr::from_bytes_with_nul_unchecked(subslice) })\n@@ -561,8 +561,7 @@ impl CStr {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n-    pub const fn to_bytes(&self) -> &[u8] {\n+    pub fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n         // SAFETY: to_bytes_with_nul returns slice with length at least 1\n         unsafe { bytes.get_unchecked(..bytes.len() - 1) }\n@@ -613,8 +612,7 @@ impl CStr {\n     /// assert_eq!(cstr.to_str(), Ok(\"foo\"));\n     /// ```\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n-    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n-    pub const fn to_str(&self) -> Result<&str, str::Utf8Error> {\n+    pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n         // N.B., when `CStr` is changed to perform the length check in `.to_bytes()`\n         // instead of in `from_ptr()`, it may be worth considering if this should\n         // be rewritten to do the UTF-8 check inline with the length calculation"}, {"sha": "a73b5b610a4ad7e3f8dbcc72072464364e5e3625", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -86,7 +86,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::fmt;\n-use crate::intrinsics::const_eval_select;\n use crate::marker;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -239,21 +238,9 @@ pub trait Hash {\n     where\n         Self: Sized,\n     {\n-        //FIXME(const_trait_impl): revert to only a for loop\n-        fn rt<T: Hash, H: Hasher>(data: &[T], state: &mut H) {\n-            for piece in data {\n-                piece.hash(state)\n-            }\n-        }\n-        const fn ct<T: Hash, H: Hasher>(data: &[T], state: &mut H) {\n-            let mut i = 0;\n-            while i < data.len() {\n-                data[i].hash(state);\n-                i += 1;\n-            }\n+        for piece in data {\n+            piece.hash(state)\n         }\n-        // SAFETY: same behavior, CT just uses while instead of for\n-        unsafe { const_eval_select((data, state), ct, rt) };\n     }\n }\n "}, {"sha": "6b9f2e84257d185f66f81d721267d354c3ce637c", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -118,7 +118,7 @@ macro_rules! load_int_le {\n /// Safety: this performs unchecked indexing of `buf` at `start..start+len`, so\n /// that must be in-bounds.\n #[inline]\n-const unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n+unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n     debug_assert!(len < 8);\n     let mut i = 0; // current byte index (from LSB) in the output u64\n     let mut out = 0;"}, {"sha": "9ccdadcb691cd2de2226c6e735c5c2a6d4b09763", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -112,7 +112,6 @@\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n #![feature(const_char_from_u32_unchecked)]\n-#![feature(const_cmp)]\n #![feature(const_cstr_methods)]\n #![feature(const_discriminant)]\n #![feature(const_eval_select)]\n@@ -128,7 +127,6 @@\n #![feature(const_intrinsic_forget)]\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n-#![feature(const_is_char_boundary)]\n #![feature(const_likely)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n@@ -146,7 +144,6 @@\n #![feature(const_ptr_write)]\n #![feature(const_raw_ptr_comparison)]\n #![feature(const_replace)]\n-#![feature(const_result_drop)]\n #![feature(const_size_of_val)]\n #![feature(const_size_of_val_raw)]\n #![feature(const_slice_from_raw_parts_mut)]"}, {"sha": "ba5e6ddc752a40c7407d4ce84f18c6adde1b9fde", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -116,8 +116,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!(!(f32::NAN..1.0).contains(&0.5));\n     /// ```\n     #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n-    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n-    pub const fn contains<U>(&self, item: &U) -> bool\n+    pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n         U: ?Sized + PartialOrd<Idx>,\n@@ -143,8 +142,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!( (f32::NAN..5.0).is_empty());\n     /// ```\n     #[stable(feature = \"range_is_empty\", since = \"1.47.0\")]\n-    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n-    pub const fn is_empty(&self) -> bool {\n+    pub fn is_empty(&self) -> bool {\n         !(self.start < self.end)\n     }\n }\n@@ -538,9 +536,8 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!(r.is_empty());\n     /// ```\n     #[stable(feature = \"range_is_empty\", since = \"1.47.0\")]\n-    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n     #[inline]\n-    pub const fn is_empty(&self) -> bool {\n+    pub fn is_empty(&self) -> bool {\n         self.exhausted || !(self.start <= self.end)\n     }\n }"}, {"sha": "b4f69d0b21309253eda811fd54fd2bb27fed6574", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -386,9 +386,7 @@ impl<T> NeverShortCircuit<T> {\n     }\n \n     #[inline]\n-    pub fn wrap_mut_2<A, B>(\n-        mut f: impl FnMut(A, B) -> T,\n-    ) -> impl FnMut(A, B) -> Self {\n+    pub fn wrap_mut_2<A, B>(mut f: impl FnMut(A, B) -> T) -> impl FnMut(A, B) -> Self {\n         move |a, b| NeverShortCircuit(f(a, b))\n     }\n }"}, {"sha": "82e7e69215edba27d7203b733a61d4a2d6df6649", "filename": "library/core/src/option.rs", "status": "modified", "additions": 27, "deletions": 100, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -547,7 +547,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n-use crate::marker::Destruct;\n use crate::panicking::{panic, panic_str};\n use crate::pin::Pin;\n use crate::{\n@@ -967,11 +966,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn unwrap_or(self, default: T) -> T\n-    where\n-        T: Destruct,\n-    {\n+    pub fn unwrap_or(self, default: T) -> T {\n         match self {\n             Some(x) => x,\n             None => default,\n@@ -989,11 +984,9 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn unwrap_or_else<F>(self, f: F) -> T\n+    pub fn unwrap_or_else<F>(self, f: F) -> T\n     where\n         F: FnOnce() -> T,\n-        F: Destruct,\n     {\n         match self {\n             Some(x) => x,\n@@ -1022,8 +1015,7 @@ impl<T> Option<T> {\n     /// [`FromStr`]: crate::str::FromStr\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn unwrap_or_default(self) -> T\n+    pub fn unwrap_or_default(self) -> T\n     where\n         T: Default,\n     {\n@@ -1089,11 +1081,9 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn map<U, F>(self, f: F) -> Option<U>\n+    pub fn map<U, F>(self, f: F) -> Option<U>\n     where\n         F: FnOnce(T) -> U,\n-        F: Destruct,\n     {\n         match self {\n             Some(x) => Some(f(x)),\n@@ -1118,11 +1108,9 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn inspect<F>(self, f: F) -> Self\n+    pub fn inspect<F>(self, f: F) -> Self\n     where\n         F: FnOnce(&T),\n-        F: Destruct,\n     {\n         if let Some(ref x) = self {\n             f(x);\n@@ -1151,12 +1139,9 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn map_or<U, F>(self, default: U, f: F) -> U\n+    pub fn map_or<U, F>(self, default: U, f: F) -> U\n     where\n         F: FnOnce(T) -> U,\n-        F: Destruct,\n-        U: Destruct,\n     {\n         match self {\n             Some(t) => f(t),\n@@ -1180,13 +1165,10 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U\n+    pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U\n     where\n         D: FnOnce() -> U,\n-        D: Destruct,\n         F: FnOnce(T) -> U,\n-        F: Destruct,\n     {\n         match self {\n             Some(t) => f(t),\n@@ -1217,11 +1199,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn ok_or<E>(self, err: E) -> Result<T, E>\n-    where\n-        E: Destruct,\n-    {\n+    pub fn ok_or<E>(self, err: E) -> Result<T, E> {\n         match self {\n             Some(v) => Ok(v),\n             None => Err(err),\n@@ -1246,11 +1224,9 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>\n+    pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E>\n     where\n         F: FnOnce() -> E,\n-        F: Destruct,\n     {\n         match self {\n             Some(v) => Ok(v),\n@@ -1274,8 +1250,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn as_deref(&self) -> Option<&T::Target>\n+    pub fn as_deref(&self) -> Option<&T::Target>\n     where\n         T: Deref,\n     {\n@@ -1301,8 +1276,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn as_deref_mut(&mut self) -> Option<&mut T::Target>\n+    pub fn as_deref_mut(&mut self) -> Option<&mut T::Target>\n     where\n         T: DerefMut,\n     {\n@@ -1388,12 +1362,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn and<U>(self, optb: Option<U>) -> Option<U>\n-    where\n-        T: Destruct,\n-        U: Destruct,\n-    {\n+    pub fn and<U>(self, optb: Option<U>) -> Option<U> {\n         match self {\n             Some(_) => optb,\n             None => None,\n@@ -1430,11 +1399,9 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn and_then<U, F>(self, f: F) -> Option<U>\n+    pub fn and_then<U, F>(self, f: F) -> Option<U>\n     where\n         F: FnOnce(T) -> Option<U>,\n-        F: Destruct,\n     {\n         match self {\n             Some(x) => f(x),\n@@ -1468,12 +1435,9 @@ impl<T> Option<T> {\n     /// [`Some(t)`]: Some\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn filter<P>(self, predicate: P) -> Self\n+    pub fn filter<P>(self, predicate: P) -> Self\n     where\n-        T: Destruct,\n         P: FnOnce(&T) -> bool,\n-        P: Destruct,\n     {\n         if let Some(x) = self {\n             if predicate(&x) {\n@@ -1512,11 +1476,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn or(self, optb: Option<T>) -> Option<T>\n-    where\n-        T: Destruct,\n-    {\n+    pub fn or(self, optb: Option<T>) -> Option<T> {\n         match self {\n             Some(x) => Some(x),\n             None => optb,\n@@ -1538,11 +1498,9 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn or_else<F>(self, f: F) -> Option<T>\n+    pub fn or_else<F>(self, f: F) -> Option<T>\n     where\n         F: FnOnce() -> Option<T>,\n-        F: Destruct,\n     {\n         match self {\n             Some(x) => Some(x),\n@@ -1573,11 +1531,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_xor\", since = \"1.37.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn xor(self, optb: Option<T>) -> Option<T>\n-    where\n-        T: Destruct,\n-    {\n+    pub fn xor(self, optb: Option<T>) -> Option<T> {\n         match (self, optb) {\n             (Some(a), None) => Some(a),\n             (None, Some(b)) => Some(b),\n@@ -1611,11 +1565,7 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to set a value, consider assignment instead\"]\n     #[inline]\n     #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn insert(&mut self, value: T) -> &mut T\n-    where\n-        T: Destruct,\n-    {\n+    pub fn insert(&mut self, value: T) -> &mut T {\n         *self = Some(value);\n \n         // SAFETY: the code above just filled the option\n@@ -1644,11 +1594,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn get_or_insert(&mut self, value: T) -> &mut T\n-    where\n-        T: Destruct,\n-    {\n+    pub fn get_or_insert(&mut self, value: T) -> &mut T {\n         if let None = *self {\n             *self = Some(value);\n         }\n@@ -1679,12 +1625,11 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"option_get_or_insert_default\", issue = \"82901\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn get_or_insert_default(&mut self) -> &mut T\n+    pub fn get_or_insert_default(&mut self) -> &mut T\n     where\n         T: Default,\n     {\n-        const fn default<T: Default>() -> T {\n+        fn default<T: Default>() -> T {\n             T::default()\n         }\n \n@@ -1710,11 +1655,9 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T\n+    pub fn get_or_insert_with<F>(&mut self, f: F) -> &mut T\n     where\n         F: FnOnce() -> T,\n-        F: Destruct,\n     {\n         if let None = *self {\n             // the compiler isn't smart enough to know that we are not dropping a `T`\n@@ -1794,12 +1737,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.zip(z), None);\n     /// ```\n     #[stable(feature = \"option_zip_option\", since = \"1.46.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn zip<U>(self, other: Option<U>) -> Option<(T, U)>\n-    where\n-        T: Destruct,\n-        U: Destruct,\n-    {\n+    pub fn zip<U>(self, other: Option<U>) -> Option<(T, U)> {\n         match (self, other) {\n             (Some(a), Some(b)) => Some((a, b)),\n             _ => None,\n@@ -1835,13 +1773,9 @@ impl<T> Option<T> {\n     /// assert_eq!(x.zip_with(None, Point::new), None);\n     /// ```\n     #[unstable(feature = \"option_zip\", issue = \"70086\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n+    pub fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n     where\n         F: FnOnce(T, U) -> R,\n-        F: Destruct,\n-        T: Destruct,\n-        U: Destruct,\n     {\n         match (self, other) {\n             (Some(a), Some(b)) => Some(f(a, b)),\n@@ -1867,12 +1801,7 @@ impl<T, U> Option<(T, U)> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"unzip_option\", since = \"1.66.0\")]\n-    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n-    pub const fn unzip(self) -> (Option<T>, Option<U>)\n-    where\n-        T: Destruct,\n-        U: Destruct,\n-    {\n+    pub fn unzip(self) -> (Option<T>, Option<U>) {\n         match self {\n             Some((a, b)) => (Some(a), Some(b)),\n             None => (None, None),\n@@ -1922,8 +1851,7 @@ impl<T> Option<&T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_cloned\", issue = \"91582\")]\n-    pub const fn cloned(self) -> Option<T>\n+    pub fn cloned(self) -> Option<T>\n     where\n         T: Clone,\n     {\n@@ -1974,8 +1902,7 @@ impl<T> Option<&mut T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(since = \"1.26.0\", feature = \"option_ref_mut_cloned\")]\n-    #[rustc_const_unstable(feature = \"const_option_cloned\", issue = \"91582\")]\n-    pub const fn cloned(self) -> Option<T>\n+    pub fn cloned(self) -> Option<T>\n     where\n         T: Clone,\n     {"}, {"sha": "1a442c8bb84e089d9f49241bf7e5cea324991295", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -1650,9 +1650,8 @@ impl<T> *const [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub const unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output\n+    pub unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output\n     where\n         I: SliceIndex<[T]>,\n     {"}, {"sha": "9912648554bd9e9558fce9c1f955861fa7707421", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -2036,9 +2036,8 @@ impl<T> *mut [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline(always)]\n-    pub const unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output\n+    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output\n     where\n         I: SliceIndex<[T]>,\n     {"}, {"sha": "506d891d989b174026d47df923605b938e16e58b", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -676,9 +676,8 @@ impl<T> NonNull<[T]> {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub const unsafe fn get_unchecked_mut<I>(self, index: I) -> NonNull<I::Output>\n+    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> NonNull<I::Output>\n     where\n         I: SliceIndex<[T]>,\n     {"}, {"sha": "a853f15edb7e0d00292af5282583735ab8656338", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -70,7 +70,8 @@ impl<T: Sized> Unique<T> {\n     #[must_use]\n     #[inline]\n     pub const fn dangling() -> Self {\n-        Self::from(NonNull::dangling())\n+        // FIXME(const-hack) replace with `From`\n+        Unique { pointer: NonNull::dangling(), _marker: PhantomData }\n     }\n }\n \n@@ -134,7 +135,9 @@ impl<T: ?Sized> Unique<T> {\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn cast<U>(self) -> Unique<U> {\n-        Unique::from(self.pointer.cast())\n+        // FIXME(const-hack): replace with `From`\n+        // SAFETY: is `NonNull`\n+        unsafe { Unique::new_unchecked(self.pointer.cast().as_ptr()) }\n     }\n }\n "}, {"sha": "28cb02989ecc0d1af7ab9ca8f130f3678117d714", "filename": "library/core/src/result.rs", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -489,7 +489,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n-use crate::marker::Destruct;\n use crate::ops::{self, ControlFlow, Deref, DerefMut};\n use crate::{convert, fmt, hint};\n \n@@ -629,11 +628,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n-    pub const fn ok(self) -> Option<T>\n-    where\n-        E: Destruct,\n-    {\n+    pub fn ok(self) -> Option<T> {\n         match self {\n             Ok(x) => Some(x),\n             Err(_) => None,\n@@ -656,11 +651,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n-    pub const fn err(self) -> Option<E>\n-    where\n-        T: Destruct,\n-    {\n+    pub fn err(self) -> Option<E> {\n         match self {\n             Ok(_) => None,\n             Err(x) => Some(x),\n@@ -1283,14 +1274,8 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.and(y), Ok(\"different result type\"));\n     /// ```\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn and<U>(self, res: Result<U, E>) -> Result<U, E>\n-    where\n-        T: Destruct,\n-        U: Destruct,\n-        E: Destruct,\n-    {\n+    pub fn and<U>(self, res: Result<U, E>) -> Result<U, E> {\n         match self {\n             Ok(_) => res,\n             Err(e) => Err(e),\n@@ -1364,14 +1349,8 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.or(y), Ok(2));\n     /// ```\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn or<F>(self, res: Result<T, F>) -> Result<T, F>\n-    where\n-        T: Destruct,\n-        E: Destruct,\n-        F: Destruct,\n-    {\n+    pub fn or<F>(self, res: Result<T, F>) -> Result<T, F> {\n         match self {\n             Ok(v) => Ok(v),\n             Err(_) => res,\n@@ -1422,13 +1401,8 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.unwrap_or(default), default);\n     /// ```\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_result_drop\", issue = \"92384\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn unwrap_or(self, default: T) -> T\n-    where\n-        T: Destruct,\n-        E: Destruct,\n-    {\n+    pub fn unwrap_or(self, default: T) -> T {\n         match self {\n             Ok(t) => t,\n             Err(_) => default,\n@@ -1979,9 +1953,7 @@ impl<T, E> ops::Try for Result<T, E> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>>\n-    for Result<T, F>\n-{\n+impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {\n     #[inline]\n     #[track_caller]\n     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {"}, {"sha": "3ae15e47bce2777bc04ba218005246d92ab044ee", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -1,7 +1,6 @@\n // Original implementation taken from rust-memchr.\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n-use crate::cmp;\n use crate::mem;\n \n const LO_USIZE: usize = usize::repeat_u8(0x01);"}, {"sha": "d12809357a8909cbd1b8d5b332df83782e2c44fd", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -333,10 +333,9 @@ impl<T> [T] {\n     /// assert_eq!(None, v.get(0..4));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n     #[must_use]\n-    pub const fn get<I>(&self, index: I) -> Option<&I::Output>\n+    pub fn get<I>(&self, index: I) -> Option<&I::Output>\n     where\n         I: SliceIndex<Self>,\n     {\n@@ -359,10 +358,9 @@ impl<T> [T] {\n     /// assert_eq!(x, &[0, 42, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n     #[must_use]\n-    pub const fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n+    pub fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n     where\n         I: SliceIndex<Self>,\n     {\n@@ -392,10 +390,9 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n     #[must_use]\n-    pub const unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n+    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n     where\n         I: SliceIndex<Self>,\n     {\n@@ -430,10 +427,9 @@ impl<T> [T] {\n     /// assert_eq!(x, &[1, 13, 4]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n     #[must_use]\n-    pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n+    pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n     where\n         I: SliceIndex<Self>,\n     {\n@@ -678,9 +674,8 @@ impl<T> [T] {\n     /// assert!(v == [3, 2, 1]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_reverse\", issue = \"100784\")]\n     #[inline]\n-    pub const fn reverse(&mut self) {\n+    pub fn reverse(&mut self) {\n         let half_len = self.len() / 2;\n         let Range { start, end } = self.as_mut_ptr_range();\n \n@@ -703,7 +698,7 @@ impl<T> [T] {\n         revswap(front_half, back_half, half_len);\n \n         #[inline]\n-        const fn revswap<T>(a: &mut [T], b: &mut [T], n: usize) {\n+        fn revswap<T>(a: &mut [T], b: &mut [T], n: usize) {\n             debug_assert!(a.len() == n);\n             debug_assert!(b.len() == n);\n "}, {"sha": "a13107fd0de09352103c3606828db35e9b8f1a28", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -206,9 +206,8 @@ impl str {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]\n-    #[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]\n     #[inline]\n-    pub const fn is_char_boundary(&self, index: usize) -> bool {\n+    pub fn is_char_boundary(&self, index: usize) -> bool {\n         // 0 is always ok.\n         // Test for 0 explicitly so that it can optimize out the check\n         // easily and skip reading string data for that case.\n@@ -436,9 +435,8 @@ impl str {\n     /// assert!(v.get(..42).is_none());\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub const fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+    pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n         i.get(self)\n     }\n \n@@ -469,9 +467,8 @@ impl str {\n     /// assert_eq!(\"HEllo\", v);\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub const fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+    pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n         i.get_mut(self)\n     }\n \n@@ -502,9 +499,8 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub const unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n+    pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n         // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n@@ -538,12 +534,8 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub const unsafe fn get_unchecked_mut<I: SliceIndex<str>>(\n-        &mut self,\n-        i: I,\n-    ) -> &mut I::Output {\n+    pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;\n         // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is."}, {"sha": "b74fe013665945b073c4292c56f1aeb37e82ce1f", "filename": "library/core/src/time.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e0ddbf1d820ee62892eee7a50e381d964f1dec/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=63e0ddbf1d820ee62892eee7a50e381d964f1dec", "patch": "@@ -735,8 +735,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n-    pub const fn from_secs_f64(secs: f64) -> Duration {\n+    pub fn from_secs_f64(secs: f64) -> Duration {\n         match Duration::try_from_secs_f64(secs) {\n             Ok(v) => v,\n             Err(e) => panic!(\"{}\", e.description()),\n@@ -773,8 +772,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n-    pub const fn from_secs_f32(secs: f32) -> Duration {\n+    pub fn from_secs_f32(secs: f32) -> Duration {\n         match Duration::try_from_secs_f32(secs) {\n             Ok(v) => v,\n             Err(e) => panic!(\"{}\", e.description()),\n@@ -798,8 +796,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n-    pub const fn mul_f64(self, rhs: f64) -> Duration {\n+    pub fn mul_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(rhs * self.as_secs_f64())\n     }\n \n@@ -820,8 +817,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n-    pub const fn mul_f32(self, rhs: f32) -> Duration {\n+    pub fn mul_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(rhs * self.as_secs_f32())\n     }\n \n@@ -842,8 +838,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n-    pub const fn div_f64(self, rhs: f64) -> Duration {\n+    pub fn div_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(self.as_secs_f64() / rhs)\n     }\n \n@@ -866,8 +861,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n-    pub const fn div_f32(self, rhs: f32) -> Duration {\n+    pub fn div_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(self.as_secs_f32() / rhs)\n     }\n \n@@ -1402,9 +1396,8 @@ impl Duration {\n     /// assert_eq!(res, Ok(Duration::new(1, 2_929_688)));\n     /// ```\n     #[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n-    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     #[inline]\n-    pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, TryFromFloatSecsError> {\n+    pub fn try_from_secs_f32(secs: f32) -> Result<Duration, TryFromFloatSecsError> {\n         try_from_secs!(\n             secs = secs,\n             mantissa_bits = 23,\n@@ -1479,9 +1472,8 @@ impl Duration {\n     /// assert_eq!(res, Ok(Duration::new(1, 2_929_688)));\n     /// ```\n     #[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n-    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     #[inline]\n-    pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, TryFromFloatSecsError> {\n+    pub fn try_from_secs_f64(secs: f64) -> Result<Duration, TryFromFloatSecsError> {\n         try_from_secs!(\n             secs = secs,\n             mantissa_bits = 52,"}]}