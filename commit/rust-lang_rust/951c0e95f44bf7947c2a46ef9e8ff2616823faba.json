{"sha": "951c0e95f44bf7947c2a46ef9e8ff2616823faba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MWMwZTk1ZjQ0YmY3OTQ3YzJhNDZlZjllOGZmMjYxNjgyM2ZhYmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-23T20:48:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-23T20:48:35Z"}, "message": "Merge #8948\n\n8948: feat: generate getter assist places the cursor at the generated function r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f202726bcd9676b919d04d638f9fafa6f9b801e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f202726bcd9676b919d04d638f9fafa6f9b801e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/951c0e95f44bf7947c2a46ef9e8ff2616823faba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqr+jCRBK7hj4Ov3rIwAAavoIAKlqW+cwVtHoAx3GR5p8o1Te\nVIhc5dKwk3RUloxZFkEyP5GbaibFl5Fn2kNPClkboh1c+9Fe33bgvnVOq+Gvs5Q9\nVQoQUpIVK6k3HKV4tJtdyokttt1zNTPNvATzVp9AagOCxdy5Ija0Ne2pA5sF27sz\nDwSzcqDvS3PIEflhBYC6LYcQ0gxpzq/5ayaRToWSq1r95b6VWOWpzsCbkljwhUIU\n2ck5WPWxtpri08nqhVs6yPmJjxkwhG9UafF5I9GqKWfqdy/gkhVgJtOBQQHgHOSM\n6491n70rJHyJ4zAfvOYLrGMV55+hinHgjNjEakVUj8jBQH1hif7fpROHo8mZNUE=\n=Rzm4\n-----END PGP SIGNATURE-----\n", "payload": "tree f202726bcd9676b919d04d638f9fafa6f9b801e9\nparent e0864c9c153c88a4bc3b75d0cc5501678a21183a\nparent 8696c82777f9992fceadc531536bf90b64cf753d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621802915 +0000\ncommitter GitHub <noreply@github.com> 1621802915 +0000\n\nMerge #8948\n\n8948: feat: generate getter assist places the cursor at the generated function r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/951c0e95f44bf7947c2a46ef9e8ff2616823faba", "html_url": "https://github.com/rust-lang/rust/commit/951c0e95f44bf7947c2a46ef9e8ff2616823faba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/951c0e95f44bf7947c2a46ef9e8ff2616823faba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0864c9c153c88a4bc3b75d0cc5501678a21183a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0864c9c153c88a4bc3b75d0cc5501678a21183a", "html_url": "https://github.com/rust-lang/rust/commit/e0864c9c153c88a4bc3b75d0cc5501678a21183a"}, {"sha": "8696c82777f9992fceadc531536bf90b64cf753d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8696c82777f9992fceadc531536bf90b64cf753d", "html_url": "https://github.com/rust-lang/rust/commit/8696c82777f9992fceadc531536bf90b64cf753d"}], "stats": {"total": 393, "additions": 141, "deletions": 252}, "files": [{"sha": "9faaaf284b0f702e6572b2e4d6493aa92bcbaf4d", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 137, "deletions": 52, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/951c0e95f44bf7947c2a46ef9e8ff2616823faba/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/951c0e95f44bf7947c2a46ef9e8ff2616823faba/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=951c0e95f44bf7947c2a46ef9e8ff2616823faba", "patch": "@@ -23,12 +23,46 @@ use crate::{\n //\n // impl Person {\n //     /// Get a reference to the person's name.\n-//     fn name(&self) -> &String {\n+//     fn $0name(&self) -> &String {\n //         &self.name\n //     }\n // }\n // ```\n pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    generate_getter_impl(acc, ctx, false)\n+}\n+\n+// Assist: generate_getter_mut\n+//\n+// Generate a mut getter method.\n+//\n+// ```\n+// struct Person {\n+//     nam$0e: String,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Person {\n+//     name: String,\n+// }\n+//\n+// impl Person {\n+//     /// Get a mutable reference to the person's name.\n+//     fn $0name_mut(&mut self) -> &mut String {\n+//         &mut self.name\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_getter_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    generate_getter_impl(acc, ctx, true)\n+}\n+\n+pub(crate) fn generate_getter_impl(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+    mutable: bool,\n+) -> Option<()> {\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n     let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n \n@@ -37,39 +71,45 @@ pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let field_ty = field.ty()?;\n \n     // Return early if we've found an existing fn\n-    let fn_name = to_lower_snake_case(&field_name.to_string());\n+    let mut fn_name = to_lower_snake_case(&field_name.to_string());\n+    if mutable {\n+        format_to!(fn_name, \"_mut\");\n+    }\n     let impl_def = find_struct_impl(&ctx, &ast::Adt::Struct(strukt.clone()), fn_name.as_str())?;\n \n+    let (id, label) = if mutable {\n+        (\"generate_getter_mut\", \"Generate a mut getter method\")\n+    } else {\n+        (\"generate_getter\", \"Generate a getter method\")\n+    };\n     let target = field.syntax().text_range();\n     acc.add_group(\n         &GroupLabel(\"Generate getter/setter\".to_owned()),\n-        AssistId(\"generate_getter\", AssistKind::Generate),\n-        \"Generate a getter method\",\n+        AssistId(id, AssistKind::Generate),\n+        label,\n         target,\n         |builder| {\n             let mut buf = String::with_capacity(512);\n \n-            let fn_name_spaced = fn_name.replace('_', \" \");\n-            let strukt_name_spaced =\n-                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \");\n-\n             if impl_def.is_some() {\n                 buf.push('\\n');\n             }\n \n             let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n             format_to!(\n                 buf,\n-                \"    /// Get a reference to the {}'s {}.\n-    {}fn {}(&self) -> &{} {{\n-        &self.{}\n+                \"    /// Get a {}reference to the {}'s {}.\n+    {}fn {}(&{mut_}self) -> &{mut_}{} {{\n+        &{mut_}self.{}\n     }}\",\n-                strukt_name_spaced,\n-                fn_name_spaced,\n+                mutable.then(|| \"mutable \").unwrap_or_default(),\n+                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \"),\n+                fn_name.trim_end_matches(\"_mut\").replace('_', \" \"),\n                 vis,\n                 fn_name,\n                 field_ty,\n-                fn_name,\n+                field_name,\n+                mut_ = mutable.then(|| \"mut \").unwrap_or_default(),\n             );\n \n             let start_offset = impl_def\n@@ -79,7 +119,12 @@ pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n                     strukt.syntax().text_range().end()\n                 });\n \n-            builder.insert(start_offset, buf);\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    builder.insert_snippet(cap, start_offset, buf.replacen(\"fn \", \"fn $0\", 1))\n+                }\n+                None => builder.insert(start_offset, buf),\n+            }\n         },\n     )\n }\n@@ -90,45 +135,81 @@ mod tests {\n \n     use super::*;\n \n-    fn check_not_applicable(ra_fixture: &str) {\n-        check_assist_not_applicable(generate_getter, ra_fixture)\n-    }\n-\n     #[test]\n     fn test_generate_getter_from_field() {\n         check_assist(\n             generate_getter,\n             r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n+struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n             r#\"\n-struct Context<T: Clone> {\n-    data: T,\n+struct Context {\n+    data: Data,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a reference to the context's data.\n-    fn data(&self) -> &T {\n+    fn $0data(&self) -> &Data {\n         &self.data\n     }\n-}\"#,\n+}\n+\"#,\n+        );\n+\n+        check_assist(\n+            generate_getter_mut,\n+            r#\"\n+struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n+            r#\"\n+struct Context {\n+    data: Data,\n+}\n+\n+impl Context {\n+    /// Get a mutable reference to the context's data.\n+    fn $0data_mut(&mut self) -> &mut Data {\n+        &mut self.data\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_generate_getter_already_implemented() {\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_getter,\n             r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n+struct Context {\n+    dat$0a: Data,\n }\n \n-impl<T: Clone> Context<T> {\n-    fn data(&self) -> &T {\n+impl Context {\n+    fn data(&self) -> &Data {\n         &self.data\n     }\n-}\"#,\n+}\n+\"#,\n+        );\n+\n+        check_assist_not_applicable(\n+            generate_getter_mut,\n+            r#\"\n+struct Context {\n+    dat$0a: Data,\n+}\n+\n+impl Context {\n+    fn data_mut(&mut self) -> &mut Data {\n+        &mut self.data\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -137,20 +218,22 @@ impl<T: Clone> Context<T> {\n         check_assist(\n             generate_getter,\n             r#\"\n-pub(crate) struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n+pub(crate) struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n             r#\"\n-pub(crate) struct Context<T: Clone> {\n-    data: T,\n+pub(crate) struct Context {\n+    data: Data,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a reference to the context's data.\n-    pub(crate) fn data(&self) -> &T {\n+    pub(crate) fn $0data(&self) -> &Data {\n         &self.data\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -159,34 +242,36 @@ impl<T: Clone> Context<T> {\n         check_assist(\n             generate_getter,\n             r#\"\n-struct Context<T: Clone> {\n-    data: T,\n+struct Context {\n+    data: Data,\n     cou$0nt: usize,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a reference to the context's data.\n-    fn data(&self) -> &T {\n+    fn data(&self) -> &Data {\n         &self.data\n     }\n-}\"#,\n+}\n+\"#,\n             r#\"\n-struct Context<T: Clone> {\n-    data: T,\n+struct Context {\n+    data: Data,\n     count: usize,\n }\n \n-impl<T: Clone> Context<T> {\n+impl Context {\n     /// Get a reference to the context's data.\n-    fn data(&self) -> &T {\n+    fn data(&self) -> &Data {\n         &self.data\n     }\n \n     /// Get a reference to the context's count.\n-    fn count(&self) -> &usize {\n+    fn $0count(&self) -> &usize {\n         &self.count\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n }"}, {"sha": "821c2eed5468d1ffb235d7d8eaf37c58786c04f0", "filename": "crates/ide_assists/src/handlers/generate_getter_mut.rs", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/e0864c9c153c88a4bc3b75d0cc5501678a21183a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0864c9c153c88a4bc3b75d0cc5501678a21183a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs?ref=e0864c9c153c88a4bc3b75d0cc5501678a21183a", "patch": "@@ -1,195 +0,0 @@\n-use stdx::{format_to, to_lower_snake_case};\n-use syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n-\n-use crate::{\n-    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n-    AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n-};\n-\n-// Assist: generate_getter_mut\n-//\n-// Generate a mut getter method.\n-//\n-// ```\n-// struct Person {\n-//     nam$0e: String,\n-// }\n-// ```\n-// ->\n-// ```\n-// struct Person {\n-//     name: String,\n-// }\n-//\n-// impl Person {\n-//     /// Get a mutable reference to the person's name.\n-//     fn name_mut(&mut self) -> &mut String {\n-//         &mut self.name\n-//     }\n-// }\n-// ```\n-pub(crate) fn generate_getter_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n-    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n-\n-    let strukt_name = strukt.name()?;\n-    let field_name = field.name()?;\n-    let field_ty = field.ty()?;\n-\n-    // Return early if we've found an existing fn\n-    let fn_name = to_lower_snake_case(&field_name.to_string());\n-    let impl_def = find_struct_impl(\n-        &ctx,\n-        &ast::Adt::Struct(strukt.clone()),\n-        format!(\"{}_mut\", fn_name).as_str(),\n-    )?;\n-\n-    let target = field.syntax().text_range();\n-    acc.add_group(\n-        &GroupLabel(\"Generate getter/setter\".to_owned()),\n-        AssistId(\"generate_getter_mut\", AssistKind::Generate),\n-        \"Generate a mut getter method\",\n-        target,\n-        |builder| {\n-            let mut buf = String::with_capacity(512);\n-            let fn_name_spaced = fn_name.replace('_', \" \");\n-            let strukt_name_spaced =\n-                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \");\n-\n-            if impl_def.is_some() {\n-                buf.push('\\n');\n-            }\n-\n-            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-            format_to!(\n-                buf,\n-                \"    /// Get a mutable reference to the {}'s {}.\n-    {}fn {}_mut(&mut self) -> &mut {} {{\n-        &mut self.{}\n-    }}\",\n-                strukt_name_spaced,\n-                fn_name_spaced,\n-                vis,\n-                fn_name,\n-                field_ty,\n-                fn_name,\n-            );\n-\n-            let start_offset = impl_def\n-                .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n-                .unwrap_or_else(|| {\n-                    buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n-                    strukt.syntax().text_range().end()\n-                });\n-\n-            builder.insert(start_offset, buf);\n-        },\n-    )\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n-\n-    use super::*;\n-\n-    fn check_not_applicable(ra_fixture: &str) {\n-        check_assist_not_applicable(generate_getter_mut, ra_fixture)\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_mut_from_field() {\n-        check_assist(\n-            generate_getter_mut,\n-            r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n-            r#\"\n-struct Context<T: Clone> {\n-    data: T,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_mut_already_implemented() {\n-        check_not_applicable(\n-            r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_mut_from_field_with_visibility_marker() {\n-        check_assist(\n-            generate_getter_mut,\n-            r#\"\n-pub(crate) struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n-            r#\"\n-pub(crate) struct Context<T: Clone> {\n-    data: T,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    pub(crate) fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_multiple_generate_getter_mut() {\n-        check_assist(\n-            generate_getter_mut,\n-            r#\"\n-struct Context<T: Clone> {\n-    data: T,\n-    cou$0nt: usize,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-            r#\"\n-struct Context<T: Clone> {\n-    data: T,\n-    count: usize,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-\n-    /// Get a mutable reference to the context's count.\n-    fn count_mut(&mut self) -> &mut usize {\n-        &mut self.count\n-    }\n-}\"#,\n-        );\n-    }\n-}"}, {"sha": "16af72927b02137f440e6d7cdd1c092a17c717b2", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/951c0e95f44bf7947c2a46ef9e8ff2616823faba/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/951c0e95f44bf7947c2a46ef9e8ff2616823faba/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=951c0e95f44bf7947c2a46ef9e8ff2616823faba", "patch": "@@ -206,7 +206,6 @@ mod handlers {\n     mod generate_enum_projection_method;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n-    mod generate_getter_mut;\n     mod generate_getter;\n     mod generate_impl;\n     mod generate_new;\n@@ -276,8 +275,8 @@ mod handlers {\n             generate_enum_projection_method::generate_enum_try_into_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n-            generate_getter_mut::generate_getter_mut,\n             generate_getter::generate_getter,\n+            generate_getter::generate_getter_mut,\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n             generate_setter::generate_setter,"}, {"sha": "2b7c2d581e9afe3bf081bd1db8712bdb5a8f9bc3", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/951c0e95f44bf7947c2a46ef9e8ff2616823faba/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/951c0e95f44bf7947c2a46ef9e8ff2616823faba/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=951c0e95f44bf7947c2a46ef9e8ff2616823faba", "patch": "@@ -215,8 +215,8 @@ fn assist_order_field_struct() {\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate `Deref` impl using `bar`\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Add `#[derive]`\");\n }"}, {"sha": "ffc915fd4d9425a53f1360570f6bbc04a0323261", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/951c0e95f44bf7947c2a46ef9e8ff2616823faba/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/951c0e95f44bf7947c2a46ef9e8ff2616823faba/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=951c0e95f44bf7947c2a46ef9e8ff2616823faba", "patch": "@@ -786,7 +786,7 @@ struct Person {\n \n impl Person {\n     /// Get a reference to the person's name.\n-    fn name(&self) -> &String {\n+    fn $0name(&self) -> &String {\n         &self.name\n     }\n }\n@@ -810,7 +810,7 @@ struct Person {\n \n impl Person {\n     /// Get a mutable reference to the person's name.\n-    fn name_mut(&mut self) -> &mut String {\n+    fn $0name_mut(&mut self) -> &mut String {\n         &mut self.name\n     }\n }"}]}