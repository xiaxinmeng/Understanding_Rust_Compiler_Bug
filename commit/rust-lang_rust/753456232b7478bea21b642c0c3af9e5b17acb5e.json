{"sha": "753456232b7478bea21b642c0c3af9e5b17acb5e", "node_id": "C_kwDOAAsO6NoAKDc1MzQ1NjIzMmI3NDc4YmVhMjFiNjQyYzBjM2FmOWU1YjE3YWNiNWU", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-23T00:06:11Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-24T08:38:28Z"}, "message": "Disable all source-gen tests at compile time", "tree": {"sha": "9d4b98507e95b878cd8531b5f8890a4c2f9e51ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d4b98507e95b878cd8531b5f8890a4c2f9e51ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753456232b7478bea21b642c0c3af9e5b17acb5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753456232b7478bea21b642c0c3af9e5b17acb5e", "html_url": "https://github.com/rust-lang/rust/commit/753456232b7478bea21b642c0c3af9e5b17acb5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753456232b7478bea21b642c0c3af9e5b17acb5e/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "107e2653a6fa15ff9761302f86b2bdf8c8cc8147", "url": "https://api.github.com/repos/rust-lang/rust/commits/107e2653a6fa15ff9761302f86b2bdf8c8cc8147", "html_url": "https://github.com/rust-lang/rust/commit/107e2653a6fa15ff9761302f86b2bdf8c8cc8147"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "fca09d384c6efcea3a1ea987629bd6a8c7b319f7", "filename": "src/tools/rust-analyzer/crates/ide-assists/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2FCargo.toml?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -26,3 +26,6 @@ hir = { path = \"../hir\", version = \"0.0.0\" }\n test-utils = { path = \"../test-utils\" }\n sourcegen = { path = \"../sourcegen\" }\n expect-test = \"1.4.0\"\n+\n+[features]\n+in-rust-tree = []"}, {"sha": "97d5b2cbbae77578c011cc98d7d865195b731457", "filename": "src/tools/rust-analyzer/crates/ide-assists/src/tests/sourcegen.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -1,9 +1,12 @@\n //! Generates `assists.md` documentation.\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n use std::{fmt, fs, path::Path};\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n use test_utils::project_root;\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[test]\n fn sourcegen_assists_docs() {\n     let assists = Assist::collect();\n@@ -59,20 +62,24 @@ r#####\"\n         fs::write(dst, contents).unwrap();\n     }\n }\n+\n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n struct Section {\n     doc: String,\n     before: String,\n     after: String,\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n struct Assist {\n     id: String,\n     location: sourcegen::Location,\n     sections: Vec<Section>,\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n impl Assist {\n     fn collect() -> Vec<Assist> {\n         let handlers_dir = project_root().join(\"crates/ide-assists/src/handlers\");\n@@ -104,9 +111,11 @@ impl Assist {\n                 while lines.peek().is_some() {\n                     let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n                     assert!(\n-                        (doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.')) || assist.sections.len() > 0,\n+                        (doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.'))\n+                            || assist.sections.len() > 0,\n                         \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n-                        &assist.id, doc,\n+                        &assist.id,\n+                        doc,\n                     );\n \n                     let before = take_until(lines.by_ref(), \"```\");\n@@ -135,6 +144,7 @@ impl Assist {\n     }\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n impl fmt::Display for Assist {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let _ = writeln!(\n@@ -169,13 +179,15 @@ impl fmt::Display for Assist {\n     }\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n fn hide_hash_comments(text: &str) -> String {\n     text.split('\\n') // want final newline\n         .filter(|&it| !(it.starts_with(\"# \") || it == \"#\"))\n         .map(|it| format!(\"{}\\n\", it))\n         .collect()\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n fn reveal_hash_comments(text: &str) -> String {\n     text.split('\\n') // want final newline\n         .map(|it| {"}, {"sha": "e221425edd5bfbf07cbcb1c89bf0c6dc8ce52a1a", "filename": "src/tools/rust-analyzer/crates/ide-diagnostics/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-diagnostics%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-diagnostics%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-diagnostics%2FCargo.toml?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -29,3 +29,6 @@ expect-test = \"1.4.0\"\n \n test-utils = { path = \"../test-utils\" }\n sourcegen = { path = \"../sourcegen\" }\n+\n+[features]\n+in-rust-tree = []"}, {"sha": "24bf6c3589491adb933992dc18e99078fe51c847", "filename": "src/tools/rust-analyzer/crates/ide-diagnostics/src/tests/sourcegen.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-diagnostics%2Fsrc%2Ftests%2Fsourcegen.rs?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -1,9 +1,12 @@\n //! Generates `assists.md` documentation.\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n use std::{fmt, fs, io, path::PathBuf};\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n use sourcegen::project_root;\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[test]\n fn sourcegen_diagnostic_docs() {\n     let diagnostics = Diagnostic::collect().unwrap();\n@@ -14,13 +17,15 @@ fn sourcegen_diagnostic_docs() {\n     fs::write(&dst, &contents).unwrap();\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n struct Diagnostic {\n     id: String,\n     location: sourcegen::Location,\n     doc: String,\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n impl Diagnostic {\n     fn collect() -> io::Result<Vec<Diagnostic>> {\n         let handlers_dir = project_root().join(\"crates/ide-diagnostics/src/handlers\");\n@@ -51,6 +56,7 @@ impl Diagnostic {\n     }\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n fn is_valid_diagnostic_name(diagnostic: &str) -> Result<(), String> {\n     let diagnostic = diagnostic.trim();\n     if diagnostic.find(char::is_whitespace).is_some() {\n@@ -66,6 +72,7 @@ fn is_valid_diagnostic_name(diagnostic: &str) -> Result<(), String> {\n     Ok(())\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n impl fmt::Display for Diagnostic {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         writeln!(f, \"=== {}\\n**Source:** {}\\n{}\", self.id, self.location, self.doc)"}, {"sha": "0e9771cd2ebafbc6f7df68c5cba6b3d5ad2d87b6", "filename": "src/tools/rust-analyzer/crates/ide/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide%2FCargo.toml?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -42,3 +42,6 @@ toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n [dev-dependencies]\n test-utils = { path = \"../test-utils\" }\n expect-test = \"1.4.0\"\n+\n+[features]\n+in-rust-tree = [\"ide-assists/in-rust-tree\", \"ide-diagnostics/in-rust-tree\"]"}, {"sha": "07771d1b392ce1a2481d08f2c156078ca20f07f6", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2FCargo.toml?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -84,4 +84,9 @@ mbe = { path = \"../mbe\" }\n [features]\n jemalloc = [\"jemallocator\", \"profile/jemalloc\"]\n force-always-assert = [\"always-assert/force\"]\n-in-rust-tree = [\"proc-macro-srv/sysroot-abi\"]\n+in-rust-tree = [\n+    \"proc-macro-srv/sysroot-abi\",\n+    \"sourcegen/in-rust-tree\",\n+    \"ide/in-rust-tree\",\n+    \"syntax/in-rust-tree\"\n+]"}, {"sha": "3c1f8a304ec7b63b1d4e5bcafe917af2d28a7933", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/sourcegen.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -1,7 +1,9 @@\n //! Generates `assists.md` documentation.\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n use std::{fmt, fs, io, path::PathBuf};\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[test]\n fn sourcegen_feature_docs() {\n     let features = Feature::collect().unwrap();\n@@ -17,13 +19,15 @@ fn sourcegen_feature_docs() {\n     fs::write(&dst, &contents).unwrap();\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n struct Feature {\n     id: String,\n     location: sourcegen::Location,\n     doc: String,\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n impl Feature {\n     fn collect() -> io::Result<Vec<Feature>> {\n         let crates_dir = sourcegen::project_root().join(\"crates\");\n@@ -54,6 +58,7 @@ impl Feature {\n     }\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n fn is_valid_feature_name(feature: &str) -> Result<(), String> {\n     'word: for word in feature.split_whitespace() {\n         for short in [\"to\", \"and\"] {\n@@ -73,6 +78,7 @@ fn is_valid_feature_name(feature: &str) -> Result<(), String> {\n     Ok(())\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n impl fmt::Display for Feature {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         writeln!(f, \"=== {}\\n**Source:** {}\\n{}\", self.id, self.location, self.doc)"}, {"sha": "18f95925d9a49e71c34b0545680a35dbb4a0181b", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -3,8 +3,12 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use xshell::{cmd, Shell};\n+use xshell::Shell;\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n+use xshell::cmd;\n+\n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[test]\n fn check_code_formatting() {\n     let sh = &Shell::new().unwrap();\n@@ -168,6 +172,7 @@ See https://github.com/rust-lang/rust-clippy/issues/5537 for discussion.\n     }\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[test]\n fn check_licenses() {\n     let sh = &Shell::new().unwrap();"}, {"sha": "a84110d940bc7a2e4311050519c1860dafe9dce8", "filename": "src/tools/rust-analyzer/crates/sourcegen/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsourcegen%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsourcegen%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsourcegen%2FCargo.toml?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -11,3 +11,6 @@ doctest = false\n \n [dependencies]\n xshell = \"0.2.2\"\n+\n+[features]\n+in-rust-tree = []"}, {"sha": "0e2dec386ff77387392162db323a35fd5f11f8bf", "filename": "src/tools/rust-analyzer/crates/syntax/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2FCargo.toml?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -34,3 +34,6 @@ ungrammar = \"1.16.1\"\n \n test-utils = { path = \"../test-utils\" }\n sourcegen = { path = \"../sourcegen\" }\n+\n+[features]\n+in-rust-tree = []"}, {"sha": "ed6430f53611396b9ed5bbe274f4da29cccd1a0e", "filename": "src/tools/rust-analyzer/crates/syntax/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests.rs?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -1,5 +1,6 @@\n-mod sourcegen_ast;\n mod ast_src;\n+#[cfg(not(feature = \"in-rust-tree\"))]\n+mod sourcegen_ast;\n \n use std::{\n     fs,"}, {"sha": "93959d4ed796e1b5f8750d2443be459db97e190c", "filename": "src/tools/rust-analyzer/crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753456232b7478bea21b642c0c3af9e5b17acb5e/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=753456232b7478bea21b642c0c3af9e5b17acb5e", "patch": "@@ -1,5 +1,6 @@\n //! Defines input for code generation process.\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n pub(crate) struct KindsSrc<'a> {\n     pub(crate) punct: &'a [(&'a str, &'a str)],\n     pub(crate) keywords: &'a [&'a str],\n@@ -9,6 +10,7 @@ pub(crate) struct KindsSrc<'a> {\n     pub(crate) nodes: &'a [&'a str],\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n     punct: &[\n         (\";\", \"SEMICOLON\"),\n@@ -216,13 +218,15 @@ pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n     ],\n };\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Default, Debug)]\n pub(crate) struct AstSrc {\n     pub(crate) tokens: Vec<String>,\n     pub(crate) nodes: Vec<AstNodeSrc>,\n     pub(crate) enums: Vec<AstEnumSrc>,\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n pub(crate) struct AstNodeSrc {\n     pub(crate) doc: Vec<String>,\n@@ -231,18 +235,21 @@ pub(crate) struct AstNodeSrc {\n     pub(crate) fields: Vec<Field>,\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum Field {\n     Token(String),\n     Node { name: String, ty: String, cardinality: Cardinality },\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum Cardinality {\n     Optional,\n     Many,\n }\n \n+#[cfg(not(feature = \"in-rust-tree\"))]\n #[derive(Debug)]\n pub(crate) struct AstEnumSrc {\n     pub(crate) doc: Vec<String>,"}]}