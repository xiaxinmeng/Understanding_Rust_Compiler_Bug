{"sha": "836c8a826b6b21dd38bbef9d4988e90a1cc0e852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNmM4YTgyNmI2YjIxZGQzOGJiZWY5ZDQ5ODhlOTBhMWNjMGU4NTI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-18T19:32:26Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-20T13:37:46Z"}, "message": "TRPL editing: match", "tree": {"sha": "b5c244ef8035b269f3439ca2e1da85a205ae7578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5c244ef8035b269f3439ca2e1da85a205ae7578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/836c8a826b6b21dd38bbef9d4988e90a1cc0e852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/836c8a826b6b21dd38bbef9d4988e90a1cc0e852", "html_url": "https://github.com/rust-lang/rust/commit/836c8a826b6b21dd38bbef9d4988e90a1cc0e852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/836c8a826b6b21dd38bbef9d4988e90a1cc0e852/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "213708867ed1ed26f748de9a9c955dc64ba0e1ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/213708867ed1ed26f748de9a9c955dc64ba0e1ae", "html_url": "https://github.com/rust-lang/rust/commit/213708867ed1ed26f748de9a9c955dc64ba0e1ae"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "2c0c8ea73c03c5b6ec6169b609af0d8a36d615b0", "filename": "src/doc/trpl/match.md", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/836c8a826b6b21dd38bbef9d4988e90a1cc0e852/src%2Fdoc%2Ftrpl%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/836c8a826b6b21dd38bbef9d4988e90a1cc0e852/src%2Fdoc%2Ftrpl%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmatch.md?ref=836c8a826b6b21dd38bbef9d4988e90a1cc0e852", "patch": "@@ -1,10 +1,8 @@\n % Match\n \n-Often, a simple `if`/`else` isn\u2019t enough, because you have more than two\n-possible options. Also, `else` conditions can get incredibly complicated, so\n-what\u2019s the solution?\n-\n-Rust has a keyword, `match`, that allows you to replace complicated `if`/`else`\n+Often, a simple [`if`][if]/`else` isn\u2019t enough, because you have more than two\n+possible options. Also, conditions can get quite complex. Rust\n+has a keyword, `match`, that allows you to replace complicated `if`/`else`\n groupings with something more powerful. Check it out:\n \n ```rust\n@@ -20,28 +18,31 @@ match x {\n }\n ```\n \n-`match` takes an expression and then branches based on its value. Each *arm* of\n+[if]: if.html\n+\n+`match` takes an expression and then branches based on its value. Each \u2018arm\u2019 of\n the branch is of the form `val => expression`. When the value matches, that arm\u2019s\n expression will be evaluated. It\u2019s called `match` because of the term \u2018pattern\n matching\u2019, which `match` is an implementation of. There\u2019s an [entire section on\n-patterns][patterns] coming up next, that covers all the options that fit here.\n+patterns][patterns] that covers all the patterns that are possible here.\n \n [patterns]: patterns.html\n \n-So what\u2019s the big advantage here? Well, there are a few. First of all, `match`\n-enforces *exhaustiveness checking*. Do you see that last arm, the one with the\n+So what\u2019s the big advantage? Well, there are a few. First of all, `match`\n+enforces \u2018exhaustiveness checking\u2019. Do you see that last arm, the one with the\n underscore (`_`)? If we remove that arm, Rust will give us an error:\n \n ```text\n error: non-exhaustive patterns: `_` not covered\n ```\n \n In other words, Rust is trying to tell us we forgot a value. Because `x` is an\n-integer, Rust knows that it can have a number of different values \u2013 for example,\n-`6`. Without the `_`, however, there is no arm that could match, and so Rust refuses\n-to compile. `_` acts like a \u2018catch-all arm\u2019. If none of the other arms match,\n-the arm with `_` will, and since we have this catch-all arm, we now have an arm\n-for every possible value of `x`, and so our program will compile successfully.\n+integer, Rust knows that it can have a number of different values \u2013 for\n+example, `6`. Without the `_`, however, there is no arm that could match, and\n+so Rust refuses to compile the code. `_` acts like a \u2018catch-all arm\u2019. If none\n+of the other arms match, the arm with `_` will, and since we have this\n+catch-all arm, we now have an arm for every possible value of `x`, and so our\n+program will compile successfully.\n \n `match` is also an expression, which means we can use it on the right-hand\n side of a `let` binding or directly where an expression is used:\n@@ -59,4 +60,4 @@ let numer = match x {\n };\n ```\n \n-Sometimes, it\u2019s a nice way of converting things.\n+Sometimes it\u2019s a nice way of converting something from one type to another."}]}