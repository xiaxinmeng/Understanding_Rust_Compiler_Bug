{"sha": "82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYTJlOGUzMTAxNmFjZTVlZTY3Yzg5Yjg1MmRjYzhlMWZhMDllMzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-02T02:41:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-02T09:06:09Z"}, "message": "Fix an infinite loop in the stability check that was the result of\nvarious bugs in `trait_id_of_impl`. The end result was that looking up\nthe \"trait_id_of_impl\" with a trait's def-id yielded the same trait\nagain, even though it ought to have yielded None.", "tree": {"sha": "824b8c1f739f1be6c4e9a96fec77f58547338f66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/824b8c1f739f1be6c4e9a96fec77f58547338f66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "html_url": "https://github.com/rust-lang/rust/commit/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed3f2490742a5ccd924b6bf037b8fbf0cd93352", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed3f2490742a5ccd924b6bf037b8fbf0cd93352", "html_url": "https://github.com/rust-lang/rust/commit/6ed3f2490742a5ccd924b6bf037b8fbf0cd93352"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "a7fd7054a9343fff525e414d3ee0ca83ca32438b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "patch": "@@ -441,9 +441,15 @@ pub fn get_impl_trait<'tcx>(cdata: Cmd,\n                             -> Option<Rc<ty::TraitRef<'tcx>>>\n {\n     let item_doc = lookup_item(id, cdata.data());\n-    reader::maybe_get_doc(item_doc, tag_item_trait_ref).map(|tp| {\n-        doc_trait_ref(tp, tcx, cdata)\n-    })\n+    let fam = item_family(item_doc);\n+    match fam {\n+        Family::Impl => {\n+            reader::maybe_get_doc(item_doc, tag_item_trait_ref).map(|tp| {\n+                doc_trait_ref(tp, tcx, cdata)\n+            })\n+        }\n+        _ => None\n+    }\n }\n \n pub fn get_impl_vtables<'tcx>(cdata: Cmd,"}, {"sha": "505352fa1234462801e06c5d95abbece2acce6d7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "patch": "@@ -11,7 +11,8 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use util::nodemap::{NodeMap, DefIdMap};\n+use middle::ty;\n+use metadata::csearch;\n use syntax::codemap::Span;\n use syntax::{attr, visit};\n use syntax::ast;\n@@ -21,8 +22,8 @@ use syntax::ast::{TypeMethod, Method, Generics, StructField, TypeTraitItem};\n use syntax::ast_util::is_local;\n use syntax::attr::Stability;\n use syntax::visit::{FnKind, FkMethod, Visitor};\n-use middle::ty;\n-use metadata::csearch;\n+use util::nodemap::{NodeMap, DefIdMap};\n+use util::ppaux::Repr;\n \n use std::mem::replace;\n \n@@ -154,10 +155,13 @@ impl Index {\n /// Lookup the stability for a node, loading external crate\n /// metadata as necessary.\n pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n+    debug!(\"lookup(id={})\",\n+           id.repr(tcx));\n+\n     // is this definition the implementation of a trait method?\n     match ty::trait_item_of_item(tcx, id) {\n-        Some(ty::MethodTraitItemId(trait_method_id))\n-                if trait_method_id != id => {\n+        Some(ty::MethodTraitItemId(trait_method_id)) if trait_method_id != id => {\n+            debug!(\"lookup: trait_method_id={}\", trait_method_id);\n             return lookup(tcx, trait_method_id)\n         }\n         _ => {}\n@@ -178,6 +182,7 @@ pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n             // stability of the trait to determine the stability of any\n             // unmarked impls for it. See FIXME above for more details.\n \n+            debug!(\"lookup: trait_id={}\", trait_id);\n             lookup(tcx, trait_id)\n         } else {\n             None"}, {"sha": "622163bf7b8286c834ef60f6a137d405e87528c0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "patch": "@@ -2862,8 +2862,6 @@ pub fn maybe_walk_ty<'tcx,F>(ty_root: Ty<'tcx>, mut f: F)\n             walker.skip_current_subtree();\n         }\n     }\n-\n-    maybe_walk_ty_(ty, &mut f);\n }\n \n // Folds types from the bottom up.\n@@ -6071,22 +6069,9 @@ pub fn populate_implementations_for_trait_if_necessary(\n /// Given the def_id of an impl, return the def_id of the trait it implements.\n /// If it implements no trait, return `None`.\n pub fn trait_id_of_impl(tcx: &ctxt,\n-                        def_id: ast::DefId) -> Option<ast::DefId> {\n-    let node = match tcx.map.find(def_id.node) {\n-        Some(node) => node,\n-        None => return None\n-    };\n-    match node {\n-        ast_map::NodeItem(item) => {\n-            match item.node {\n-                ast::ItemImpl(_, _, Some(ref trait_ref), _, _) => {\n-                    Some(node_id_to_trait_ref(tcx, trait_ref.ref_id).def_id)\n-                }\n-                _ => None\n-            }\n-        }\n-        _ => None\n-    }\n+                        def_id: ast::DefId)\n+                        -> Option<ast::DefId> {\n+    ty::impl_trait_ref(tcx, def_id).map(|tr| tr.def_id)\n }\n \n /// If the given def ID describes a method belonging to an impl, return the"}]}