{"sha": "9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZWVmZWY4ZjliYjlhOTc2YmE5YmRhM2ZlNWZlMmYwNTdiYmE1NDg=", "commit": {"author": {"name": "Alexandre Fourcat", "email": "afourcat@gmail.com", "date": "2021-08-03T22:46:50Z"}, "committer": {"name": "Alexandre Fourcat", "email": "afourcat@gmail.com", "date": "2021-08-04T16:52:58Z"}, "message": "Add completion for struct literal in which all fields are visible.\n\nFix ide_completion tests.\n\nMove 'complete_record_literal' call to the main completion function.\n\nFix a rendering bug when snippet not available.\n\nChecks if an expression is expected before adding completion for struct literal.\n\nMove 'completion struct literal with private field' test to 'expressions.rs' test file.\n\nUpdate 'expect' tests with new check in 'complete record literal'.", "tree": {"sha": "4c3099434892537a59aed5243a35b289c46eb888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c3099434892537a59aed5243a35b289c46eb888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZgzntU9AFEm/bWPjJheQDETr2cAFAmEKxeoACgkQJheQDETr\n2cCDjxAAp3E+BYJd2TdV0pjZrVaZvc1xYW1pV40jGydxkLcHntD4Ow6hi8GG96sl\nigW6RhFpInwJVvk/1hZMli8NaxmtooO7Kuev104f5dJKLZelsGp7LDkc7XwoNSfq\nHuWbbO7bDJJA2Syat5zkkGYT0JgzCdDfrRAPJroyfczwvtpHqQLm9FObk03CAAYc\nI1kZwNJthfZEXGfpjMmxUx/zkIgiIXdRqfotoGTChFwbNN/gqpGBPKPaiWvEnjES\n3oyUlDyDCEW3fBXN81/e44zyqGTdgsSGheiJ35HuTg3CFrY8jbLSVISyiZ2uXVkl\nyhjadwMhBRbDSQYzZHx/SgPmq7ORqj1AOS2v9viIAWAIRcVQvptaIbeqSRjcLKb8\n9M6Ctt1qSdHleV/23v6Hu3pmioQCI1SnrTYE+BeIkJk23EuVfbIQbV0JVEmlrgFm\nSEV/EYBBO9dwbKl1qFg5Nnq0idiZqaPQIAF6c/450c8pYa4nnMzAnGHxpNfrKnth\n1obHqmHw1WlDo4rEQ8FbXdw2FBDv3UUXIjLZm/4O4YE49sHSuMgjHRcQlyk4zpEm\n8u79sB9RttRJcLXeczoDRMevoCq1OCcoZM8tBUcqiONDuQh5xnkbckElL/+4y+JW\ndopql6+KKunc/Rei4L79B/Rdviqvyb8tViHAS8pFv4NdxwQA9fw=\n=F/eD\n-----END PGP SIGNATURE-----", "payload": "tree 4c3099434892537a59aed5243a35b289c46eb888\nparent 8a8431133e1d859fe6a168cc20288d48957d97fe\nauthor Alexandre Fourcat <afourcat@gmail.com> 1628030810 +0200\ncommitter Alexandre Fourcat <afourcat@gmail.com> 1628095978 +0200\n\nAdd completion for struct literal in which all fields are visible.\n\nFix ide_completion tests.\n\nMove 'complete_record_literal' call to the main completion function.\n\nFix a rendering bug when snippet not available.\n\nChecks if an expression is expected before adding completion for struct literal.\n\nMove 'completion struct literal with private field' test to 'expressions.rs' test file.\n\nUpdate 'expect' tests with new check in 'complete record literal'.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "html_url": "https://github.com/rust-lang/rust/commit/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/comments", "author": {"login": "Afourcat", "id": 35599359, "node_id": "MDQ6VXNlcjM1NTk5MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/35599359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Afourcat", "html_url": "https://github.com/Afourcat", "followers_url": "https://api.github.com/users/Afourcat/followers", "following_url": "https://api.github.com/users/Afourcat/following{/other_user}", "gists_url": "https://api.github.com/users/Afourcat/gists{/gist_id}", "starred_url": "https://api.github.com/users/Afourcat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Afourcat/subscriptions", "organizations_url": "https://api.github.com/users/Afourcat/orgs", "repos_url": "https://api.github.com/users/Afourcat/repos", "events_url": "https://api.github.com/users/Afourcat/events{/privacy}", "received_events_url": "https://api.github.com/users/Afourcat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Afourcat", "id": 35599359, "node_id": "MDQ6VXNlcjM1NTk5MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/35599359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Afourcat", "html_url": "https://github.com/Afourcat", "followers_url": "https://api.github.com/users/Afourcat/followers", "following_url": "https://api.github.com/users/Afourcat/following{/other_user}", "gists_url": "https://api.github.com/users/Afourcat/gists{/gist_id}", "starred_url": "https://api.github.com/users/Afourcat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Afourcat/subscriptions", "organizations_url": "https://api.github.com/users/Afourcat/orgs", "repos_url": "https://api.github.com/users/Afourcat/repos", "events_url": "https://api.github.com/users/Afourcat/events{/privacy}", "received_events_url": "https://api.github.com/users/Afourcat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a8431133e1d859fe6a168cc20288d48957d97fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a8431133e1d859fe6a168cc20288d48957d97fe", "html_url": "https://github.com/rust-lang/rust/commit/8a8431133e1d859fe6a168cc20288d48957d97fe"}], "stats": {"total": 259, "additions": 259, "deletions": 0}, "files": [{"sha": "5f751d83a83b515fd2514fca4611580f90abb5ee", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "patch": "@@ -29,6 +29,7 @@ use crate::{\n         macro_::render_macro,\n         pattern::{render_struct_pat, render_variant_pat},\n         render_field, render_resolution, render_tuple_field,\n+        struct_literal::render_struct_literal,\n         type_alias::{render_type_alias, render_type_alias_with_eq},\n         RenderContext,\n     },\n@@ -168,6 +169,16 @@ impl Completions {\n         self.add(item);\n     }\n \n+    pub(crate) fn add_struct_literal(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        strukt: hir::Struct,\n+        local_name: Option<hir::Name>,\n+    ) {\n+        let item = render_struct_literal(RenderContext::new(ctx), strukt, local_name);\n+        self.add_opt(item);\n+    }\n+\n     pub(crate) fn add_tuple_field(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "c9c09551f9c2f2c4e9effd2d9f240a28d9c942d1", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "patch": "@@ -45,10 +45,81 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n     Some(())\n }\n \n+pub(crate) fn complete_record_literal(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+) -> Option<()> {\n+    if !ctx.expects_expression() {\n+        return None;\n+    }\n+\n+    if let hir::Adt::Struct(strukt) = ctx.expected_type.as_ref()?.as_adt()? {\n+        acc.add_struct_literal(ctx, strukt, None);\n+    }\n+\n+    Some(())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::check_edit;\n \n+    #[test]\n+    fn literal_struct_completion_edit() {\n+        check_edit(\n+            \"FooDesc {\u2026}\",\n+            r#\"\n+struct FooDesc { pub bar: bool }\n+\n+fn create_foo(foo_desc: &FooDesc) -> () { () }\n+\n+fn baz() {\n+    let foo = create_foo(&$0);\n+}\n+            \"#,\n+            r#\"\n+struct FooDesc { pub bar: bool }\n+\n+fn create_foo(foo_desc: &FooDesc) -> () { () }\n+\n+fn baz() {\n+    let foo = create_foo(&FooDesc { bar: ${1:()} }$0);\n+}\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn literal_struct_complexion_module() {\n+        check_edit(\n+            \"FooDesc {\u2026}\",\n+            r#\"\n+mod _69latrick {\n+    pub struct FooDesc { pub six: bool, pub neuf: Vec<String>, pub bar: bool }\n+    pub fn create_foo(foo_desc: &FooDesc) -> () { () }\n+}\n+\n+fn baz() {\n+    use _69latrick::*;\n+\n+    let foo = create_foo(&$0);\n+}\n+            \"#,\n+            r#\"\n+mod _69latrick {\n+    pub struct FooDesc { pub six: bool, pub neuf: Vec<String>, pub bar: bool }\n+    pub fn create_foo(foo_desc: &FooDesc) -> () { () }\n+}\n+\n+fn baz() {\n+    use _69latrick::*;\n+\n+    let foo = create_foo(&FooDesc { six: ${1:()}, neuf: ${2:()}, bar: ${3:()} }$0);\n+}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn default_completion_edit() {\n         check_edit("}, {"sha": "f10f3772b1950465e506b5520ac54eced91dffbb", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "patch": "@@ -156,6 +156,7 @@ pub fn completions(\n     completions::unqualified_path::complete_unqualified_path(&mut acc, &ctx);\n     completions::dot::complete_dot(&mut acc, &ctx);\n     completions::record::complete_record(&mut acc, &ctx);\n+    completions::record::complete_record_literal(&mut acc, &ctx);\n     completions::pattern::complete_pattern(&mut acc, &ctx);\n     completions::postfix::complete_postfix(&mut acc, &ctx);\n     completions::trait_impl::complete_trait_impl(&mut acc, &ctx);"}, {"sha": "527838e8bf57690914d895de9b3e7d77a8b7130e", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "patch": "@@ -7,6 +7,7 @@ pub(crate) mod enum_variant;\n pub(crate) mod const_;\n pub(crate) mod pattern;\n pub(crate) mod type_alias;\n+pub(crate) mod struct_literal;\n \n mod builder_ext;\n "}, {"sha": "a6571eb02234ab1029d92a4096083ae0124e8bb4", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "patch": "@@ -0,0 +1,121 @@\n+//! Renderer for `struct` literal.\n+\n+use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n+use ide_db::helpers::SnippetCap;\n+use itertools::Itertools;\n+\n+use crate::{item::CompletionKind, render::RenderContext, CompletionItem, CompletionItemKind};\n+\n+pub(crate) fn render_struct_literal(\n+    ctx: RenderContext<'_>,\n+    strukt: hir::Struct,\n+    local_name: Option<Name>,\n+) -> Option<CompletionItem> {\n+    let _p = profile::span(\"render_struct_literal\");\n+\n+    let fields = strukt.fields(ctx.db());\n+    let (visible_fields, fields_omitted) = visible_fields(&ctx, &fields, strukt)?;\n+\n+    if fields_omitted {\n+        // If some fields are private you can't make `struct` literal.\n+        return None;\n+    }\n+\n+    let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_string();\n+    let literal = render_literal(&ctx, &name, strukt.kind(ctx.db()), &visible_fields)?;\n+\n+    Some(build_completion(ctx, name, literal, strukt))\n+}\n+\n+fn build_completion(\n+    ctx: RenderContext<'_>,\n+    name: String,\n+    literal: String,\n+    def: impl HasAttrs + Copy,\n+) -> CompletionItem {\n+    let mut item = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name + \" {\u2026}\");\n+    item.kind(CompletionItemKind::Snippet)\n+        .set_documentation(ctx.docs(def))\n+        .set_deprecated(ctx.is_deprecated(def))\n+        .detail(&literal);\n+    if let Some(snippet_cap) = ctx.snippet_cap() {\n+        item.insert_snippet(snippet_cap, literal);\n+    } else {\n+        item.insert_text(literal);\n+    };\n+    item.build()\n+}\n+\n+fn render_literal(\n+    ctx: &RenderContext<'_>,\n+    name: &str,\n+    kind: StructKind,\n+    fields: &[hir::Field],\n+) -> Option<String> {\n+    let mut literal = match kind {\n+        StructKind::Tuple if ctx.snippet_cap().is_some() => render_tuple_as_literal(fields, name),\n+        StructKind::Record => render_record_as_literal(ctx.db(), ctx.snippet_cap(), fields, name),\n+        _ => return None,\n+    };\n+\n+    if ctx.completion.is_param {\n+        literal.push(':');\n+        literal.push(' ');\n+        literal.push_str(name);\n+    }\n+    if ctx.snippet_cap().is_some() {\n+        literal.push_str(\"$0\");\n+    }\n+    Some(literal)\n+}\n+\n+fn render_record_as_literal(\n+    db: &dyn HirDatabase,\n+    snippet_cap: Option<SnippetCap>,\n+    fields: &[hir::Field],\n+    name: &str,\n+) -> String {\n+    let fields = fields.iter();\n+    if snippet_cap.is_some() {\n+        format!(\n+            \"{name} {{ {} }}\",\n+            fields\n+                .enumerate()\n+                .map(|(idx, field)| format!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n+                .format(\", \"),\n+            name = name\n+        )\n+    } else {\n+        format!(\n+            \"{name} {{ {} }}\",\n+            fields.map(|field| format!(\"{}: ()\", field.name(db))).format(\", \"),\n+            name = name\n+        )\n+    }\n+}\n+\n+fn render_tuple_as_literal(fields: &[hir::Field], name: &str) -> String {\n+    format!(\n+        \"{name}({})\",\n+        fields.iter().enumerate().map(|(idx, _)| format!(\"${}\", idx + 1)).format(\", \"),\n+        name = name\n+    )\n+}\n+\n+fn visible_fields(\n+    ctx: &RenderContext<'_>,\n+    fields: &[hir::Field],\n+    item: impl HasAttrs,\n+) -> Option<(Vec<hir::Field>, bool)> {\n+    let module = ctx.completion.scope.module()?;\n+    let n_fields = fields.len();\n+    let fields = fields\n+        .iter()\n+        .filter(|field| field.is_visible_from(ctx.db(), module))\n+        .copied()\n+        .collect::<Vec<_>>();\n+\n+    let fields_omitted =\n+        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n+    Some((fields, fields_omitted))\n+}"}, {"sha": "95aaff01ac3ed16c85adc07a054d90c11c56d95c", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beefef8f9bb9a976ba9bda3fe5fe2f057bba548/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=9beefef8f9bb9a976ba9bda3fe5fe2f057bba548", "patch": "@@ -13,6 +13,60 @@ fn check_empty(ra_fixture: &str, expect: Expect) {\n     expect.assert_eq(&actual);\n }\n \n+#[test]\n+fn complete_literal_struct_with_a_private_field() {\n+    // `FooDesc.bar` is private, the completion should not be triggered.\n+    check(\n+        r#\"\n+mod _69latrick {\n+    pub struct FooDesc { pub six: bool, pub neuf: Vec<String>, bar: bool }\n+    pub fn create_foo(foo_desc: &FooDesc) -> () { () }\n+}\n+\n+fn baz() {\n+    use _69latrick::*;\n+\n+    let foo = create_foo(&$0);\n+}\n+            \"#,\n+        // This should not contain `FooDesc {\u2026}`.\n+        expect![[r##\"\n+            kw unsafe\n+            kw match\n+            kw while\n+            kw while let\n+            kw loop\n+            kw if\n+            kw if let\n+            kw for\n+            kw true\n+            kw false\n+            kw mut\n+            kw return\n+            kw self\n+            kw super\n+            kw crate\n+            st FooDesc\n+            fn create_foo(\u2026) fn(&FooDesc)\n+            bt u32\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            fn baz()         fn()\n+            st Unit\n+            md _69latrick\n+            ma makro!(\u2026)     #[macro_export] macro_rules! makro\n+            fn function()    fn()\n+            sc STATIC\n+            un Union\n+            ev TupleV(\u2026)     (u32)\n+            ct CONST\n+        \"##]],\n+    )\n+}\n+\n #[test]\n fn completes_various_bindings() {\n     check_empty("}]}