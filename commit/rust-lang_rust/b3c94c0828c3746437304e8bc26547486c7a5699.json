{"sha": "b3c94c0828c3746437304e8bc26547486c7a5699", "node_id": "C_kwDOAAsO6NoAKGIzYzk0YzA4MjhjMzc0NjQzNzMwNGU4YmMyNjU0NzQ4NmM3YTU2OTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-09T22:28:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-09T22:28:36Z"}, "message": "Auto merge of #8976 - xFrednet:rust-97660-catch-emissions-with-expect, r=Jarcho\n\nFix some `#[expect]` lint interaction\n\nFixing the first few lints that aren't caught by `#[expect]`. The root cause of these examples was, that the lint was emitted at the wrong location.\n\n---\n\nchangelog: none\n\nr? `@Jarcho`\n\ncc: rust-lang/rust#97660", "tree": {"sha": "11d37086be76a6221b4c4d8b873dc8961d8b9d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11d37086be76a6221b4c4d8b873dc8961d8b9d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3c94c0828c3746437304e8bc26547486c7a5699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c94c0828c3746437304e8bc26547486c7a5699", "html_url": "https://github.com/rust-lang/rust/commit/b3c94c0828c3746437304e8bc26547486c7a5699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3c94c0828c3746437304e8bc26547486c7a5699/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f518e06c6cb6ffd4fd818dce35d47320f70fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f518e06c6cb6ffd4fd818dce35d47320f70fba", "html_url": "https://github.com/rust-lang/rust/commit/65f518e06c6cb6ffd4fd818dce35d47320f70fba"}, {"sha": "9d201d68b41eefab9bae6f61de1eccb881524ccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d201d68b41eefab9bae6f61de1eccb881524ccc", "html_url": "https://github.com/rust-lang/rust/commit/9d201d68b41eefab9bae6f61de1eccb881524ccc"}], "stats": {"total": 281, "additions": 186, "deletions": 95}, "files": [{"sha": "27c2896e1e5cee71bfc27e48d7ecee0aff5edda5", "filename": "clippy_lints/src/async_yields_async.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::implements_trait;\n use rustc_errors::Applicability;\n@@ -64,9 +64,10 @@ impl<'tcx> LateLintPass<'tcx> for AsyncYieldsAsync {\n                         _ => None,\n                     };\n                     if let Some(return_expr_span) = return_expr_span {\n-                        span_lint_and_then(\n+                        span_lint_hir_and_then(\n                             cx,\n                             ASYNC_YIELDS_ASYNC,\n+                            body.value.hir_id,\n                             return_expr_span,\n                             \"an async construct yields a type which is itself awaitable\",\n                             |db| {"}, {"sha": "fb418a3251f588c4cc58dbb5d8da10c88ffc96bf", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::numeric_literal;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n@@ -76,7 +76,7 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n     }\n \n     /// Check whether a passed literal has potential to cause fallback or not.\n-    fn check_lit(&self, lit: &Lit, lit_ty: Ty<'tcx>) {\n+    fn check_lit(&self, lit: &Lit, lit_ty: Ty<'tcx>, emit_hir_id: HirId) {\n         if_chain! {\n                 if !in_external_macro(self.cx.sess(), lit.span);\n                 if let Some(ty_bound) = self.ty_bounds.last();\n@@ -101,14 +101,15 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n                         }\n                     };\n                     let sugg = numeric_literal::format(&src, Some(suffix), is_float);\n-                    span_lint_and_sugg(\n+                    span_lint_hir_and_then(\n                         self.cx,\n                         DEFAULT_NUMERIC_FALLBACK,\n+                        emit_hir_id,\n                         lit.span,\n                         \"default numeric fallback might occur\",\n-                        \"consider adding suffix\",\n-                        sugg,\n-                        Applicability::MaybeIncorrect,\n+                        |diag| {\n+                            diag.span_suggestion(lit.span, \"consider adding suffix\", sugg, Applicability::MaybeIncorrect);\n+                        }\n                     );\n                 }\n         }\n@@ -179,7 +180,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n             ExprKind::Lit(lit) => {\n                 let ty = self.cx.typeck_results().expr_ty(expr);\n-                self.check_lit(lit, ty);\n+                self.check_lit(lit, ty, expr.hir_id);\n                 return;\n             },\n "}, {"sha": "d7a01b5818bf0aee2b2f07c47522248f0bc5b5da", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n use clippy_utils::ty::peel_mid_ty_refs;\n@@ -135,6 +135,7 @@ pub struct Dereferencing {\n struct StateData {\n     /// Span of the top level expression\n     span: Span,\n+    hir_id: HirId,\n }\n \n enum State {\n@@ -169,6 +170,8 @@ struct RefPat {\n     app: Applicability,\n     /// All the replacements which need to be made.\n     replacements: Vec<(Span, String)>,\n+    /// The [`HirId`] that the lint should be emitted at.\n+    hir_id: HirId,\n }\n \n impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n@@ -222,7 +225,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                 is_final_ufcs: matches!(expr.kind, ExprKind::Call(..)),\n                                 target_mut,\n                             },\n-                            StateData { span: expr.span },\n+                            StateData {\n+                                span: expr.span,\n+                                hir_id: expr.hir_id,\n+                            },\n                         ));\n                     },\n                     RefOp::AddrOf => {\n@@ -294,7 +300,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                     required_precedence,\n                                     msg,\n                                 },\n-                                StateData { span: expr.span },\n+                                StateData {\n+                                    span: expr.span,\n+                                    hir_id: expr.hir_id,\n+                                },\n                             ));\n                         }\n                     },\n@@ -387,6 +396,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             spans: vec![pat.span],\n                             app,\n                             replacements: vec![(pat.span, snip.into())],\n+                            hir_id: pat.hir_id\n                         }),\n                     );\n                 }\n@@ -399,13 +409,15 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n             for pat in self.ref_locals.drain(..).filter_map(|(_, x)| x) {\n                 let replacements = pat.replacements;\n                 let app = pat.app;\n-                span_lint_and_then(\n+                let lint = if pat.always_deref {\n+                    NEEDLESS_BORROW\n+                } else {\n+                    REF_BINDING_TO_REFERENCE\n+                };\n+                span_lint_hir_and_then(\n                     cx,\n-                    if pat.always_deref {\n-                        NEEDLESS_BORROW\n-                    } else {\n-                        REF_BINDING_TO_REFERENCE\n-                    },\n+                    lint,\n+                    pat.hir_id,\n                     pat.spans,\n                     \"this pattern creates a reference to a reference\",\n                     |diag| {\n@@ -642,19 +654,14 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, state: State, data: S\n         } => {\n             let mut app = Applicability::MachineApplicable;\n             let snip = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app).0;\n-            span_lint_and_sugg(\n-                cx,\n-                NEEDLESS_BORROW,\n-                data.span,\n-                msg,\n-                \"change this to\",\n-                if required_precedence > expr.precedence().order() && !has_enclosing_paren(&snip) {\n+            span_lint_hir_and_then(cx, NEEDLESS_BORROW, data.hir_id, data.span, msg, |diag| {\n+                let sugg = if required_precedence > expr.precedence().order() && !has_enclosing_paren(&snip) {\n                     format!(\"({})\", snip)\n                 } else {\n                     snip.into()\n-                },\n-                app,\n-            );\n+                };\n+                diag.span_suggestion(data.span, \"change this to\", sugg, app);\n+            });\n         },\n     }\n }"}, {"sha": "73f8e083b29a0dae6e95cd614e40484785dbcc57", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,7 +1,7 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n+use rustc_hir::{HirId, Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::AssocKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -42,11 +42,12 @@ declare_clippy_lint! {\n declare_lint_pass!(SameNameMethod => [SAME_NAME_METHOD]);\n \n struct ExistingName {\n-    impl_methods: BTreeMap<Symbol, Span>,\n+    impl_methods: BTreeMap<Symbol, (Span, HirId)>,\n     trait_methods: BTreeMap<Symbol, Vec<Span>>,\n }\n \n impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n+    #[expect(clippy::too_many_lines)]\n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>) {\n         let mut map = FxHashMap::<Res, ExistingName>::default();\n \n@@ -97,10 +98,11 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                         };\n \n                         let mut check_trait_method = |method_name: Symbol, trait_method_span: Span| {\n-                            if let Some(impl_span) = existing_name.impl_methods.get(&method_name) {\n-                                span_lint_and_then(\n+                            if let Some((impl_span, hir_id)) = existing_name.impl_methods.get(&method_name) {\n+                                span_lint_hir_and_then(\n                                     cx,\n                                     SAME_NAME_METHOD,\n+                                    *hir_id,\n                                     *impl_span,\n                                     \"method's name is the same as an existing method in a trait\",\n                                     |diag| {\n@@ -136,10 +138,12 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                         }) {\n                             let method_name = impl_item_ref.ident.name;\n                             let impl_span = impl_item_ref.span;\n+                            let hir_id = impl_item_ref.id.hir_id();\n                             if let Some(trait_spans) = existing_name.trait_methods.get(&method_name) {\n-                                span_lint_and_then(\n+                                span_lint_hir_and_then(\n                                     cx,\n                                     SAME_NAME_METHOD,\n+                                    hir_id,\n                                     impl_span,\n                                     \"method's name is the same as an existing method in a trait\",\n                                     |diag| {\n@@ -152,7 +156,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                     },\n                                 );\n                             }\n-                            existing_name.impl_methods.insert(method_name, impl_span);\n+                            existing_name.impl_methods.insert(method_name, (impl_span, hir_id));\n                         }\n                     },\n                 }"}, {"sha": "3cf380d2b954b0b5f4eb1efa22a54d231dac88df", "filename": "tests/ui/async_yields_async.fixed", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fasync_yields_async.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fasync_yields_async.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.fixed?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![feature(lint_reasons)]\n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]\n \n@@ -65,3 +65,14 @@ fn main() {\n     let _n = async || custom_future_type_ctor();\n     let _o = async || f();\n }\n+\n+#[rustfmt::skip]\n+#[allow(dead_code)]\n+fn check_expect_suppression() {\n+    #[expect(clippy::async_yields_async)]\n+    let _j = async || {\n+        async {\n+            3\n+        }\n+    };\n+}"}, {"sha": "dd4131b60ab3ae6b697d5257601fd2630edbb30e", "filename": "tests/ui/async_yields_async.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![feature(lint_reasons)]\n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]\n \n@@ -65,3 +65,14 @@ fn main() {\n     let _n = async || custom_future_type_ctor();\n     let _o = async || f();\n }\n+\n+#[rustfmt::skip]\n+#[allow(dead_code)]\n+fn check_expect_suppression() {\n+    #[expect(clippy::async_yields_async)]\n+    let _j = async || {\n+        async {\n+            3\n+        }\n+    };\n+}"}, {"sha": "55451cf2f7d0fa972bc40a7d48d8709952bdae6e", "filename": "tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:macro_rules.rs\n \n+#![feature(lint_reasons)]\n #![warn(clippy::default_numeric_fallback)]\n #![allow(\n     unused,\n@@ -173,4 +174,9 @@ mod in_macro {\n     }\n }\n \n+fn check_expect_suppression() {\n+    #[expect(clippy::default_numeric_fallback)]\n+    let x = 21;\n+}\n+\n fn main() {}"}, {"sha": "62d72f2febaaa4fc75c7d80a707fa9e75f475588", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:macro_rules.rs\n \n+#![feature(lint_reasons)]\n #![warn(clippy::default_numeric_fallback)]\n #![allow(\n     unused,\n@@ -173,4 +174,9 @@ mod in_macro {\n     }\n }\n \n+fn check_expect_suppression() {\n+    #[expect(clippy::default_numeric_fallback)]\n+    let x = 21;\n+}\n+\n fn main() {}"}, {"sha": "f7c5e724c403cdc4a85658800e89e377b106c62e", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,151 +1,151 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:20:17\n+  --> $DIR/default_numeric_fallback_i32.rs:21:17\n    |\n LL |         let x = 22;\n    |                 ^^ help: consider adding suffix: `22_i32`\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:21:18\n+  --> $DIR/default_numeric_fallback_i32.rs:22:18\n    |\n LL |         let x = [1, 2, 3];\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:21:21\n+  --> $DIR/default_numeric_fallback_i32.rs:22:21\n    |\n LL |         let x = [1, 2, 3];\n    |                     ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:21:24\n+  --> $DIR/default_numeric_fallback_i32.rs:22:24\n    |\n LL |         let x = [1, 2, 3];\n    |                        ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:28\n+  --> $DIR/default_numeric_fallback_i32.rs:23:28\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:31\n+  --> $DIR/default_numeric_fallback_i32.rs:23:31\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                               ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:44\n+  --> $DIR/default_numeric_fallback_i32.rs:23:44\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                            ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:47\n+  --> $DIR/default_numeric_fallback_i32.rs:23:47\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                               ^ help: consider adding suffix: `4_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:23\n+  --> $DIR/default_numeric_fallback_i32.rs:24:23\n    |\n LL |         let x = match 1 {\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:24:13\n+  --> $DIR/default_numeric_fallback_i32.rs:25:13\n    |\n LL |             1 => 1,\n    |             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:24:18\n+  --> $DIR/default_numeric_fallback_i32.rs:25:18\n    |\n LL |             1 => 1,\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:25:18\n+  --> $DIR/default_numeric_fallback_i32.rs:26:18\n    |\n LL |             _ => 2,\n    |                  ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:42:21\n+  --> $DIR/default_numeric_fallback_i32.rs:43:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:50:21\n+  --> $DIR/default_numeric_fallback_i32.rs:51:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:56:21\n+  --> $DIR/default_numeric_fallback_i32.rs:57:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:68:9\n+  --> $DIR/default_numeric_fallback_i32.rs:69:9\n    |\n LL |         1\n    |         ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:74:27\n+  --> $DIR/default_numeric_fallback_i32.rs:75:27\n    |\n LL |         let f = || -> _ { 1 };\n    |                           ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:78:29\n+  --> $DIR/default_numeric_fallback_i32.rs:79:29\n    |\n LL |         let f = || -> i32 { 1 };\n    |                             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:92:21\n+  --> $DIR/default_numeric_fallback_i32.rs:93:21\n    |\n LL |         generic_arg(1);\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:95:32\n+  --> $DIR/default_numeric_fallback_i32.rs:96:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:113:28\n+  --> $DIR/default_numeric_fallback_i32.rs:114:28\n    |\n LL |         GenericStruct { x: 1 };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:116:36\n+  --> $DIR/default_numeric_fallback_i32.rs:117:36\n    |\n LL |         let _ = GenericStruct { x: 1 };\n    |                                    ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:134:24\n+  --> $DIR/default_numeric_fallback_i32.rs:135:24\n    |\n LL |         GenericEnum::X(1);\n    |                        ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:154:23\n+  --> $DIR/default_numeric_fallback_i32.rs:155:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:161:21\n+  --> $DIR/default_numeric_fallback_i32.rs:162:21\n    |\n LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`"}, {"sha": "e7a483c058295b39c84c901a721f9530cd2e13a3", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n+\n #[warn(clippy::all, clippy::needless_borrow)]\n #[allow(unused_variables, clippy::unnecessary_mut_passed)]\n fn main() {\n@@ -96,3 +98,10 @@ trait Trait {}\n impl<'a> Trait for &'a str {}\n \n fn h(_: &dyn Trait) {}\n+\n+#[allow(dead_code)]\n+fn check_expect_suppression() {\n+    let a = 5;\n+    #[expect(clippy::needless_borrow)]\n+    let _ = x(&&a);\n+}"}, {"sha": "1d6bf46405a2f0b6cabd288c11780315f15dd9d7", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n+\n #[warn(clippy::all, clippy::needless_borrow)]\n #[allow(unused_variables, clippy::unnecessary_mut_passed)]\n fn main() {\n@@ -96,3 +98,10 @@ trait Trait {}\n impl<'a> Trait for &'a str {}\n \n fn h(_: &dyn Trait) {}\n+\n+#[allow(dead_code)]\n+fn check_expect_suppression() {\n+    let a = 5;\n+    #[expect(clippy::needless_borrow)]\n+    let _ = x(&&a);\n+}"}, {"sha": "be59d8f546d232a2df1f35de2127ed9aaa912fbc", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,97 +1,97 @@\n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:9:15\n+  --> $DIR/needless_borrow.rs:11:15\n    |\n LL |     let _ = x(&&a); // warn\n    |               ^^^ help: change this to: `&a`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:13:13\n+  --> $DIR/needless_borrow.rs:15:13\n    |\n LL |     mut_ref(&mut &mut b); // warn\n    |             ^^^^^^^^^^^ help: change this to: `&mut b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:25:13\n+  --> $DIR/needless_borrow.rs:27:13\n    |\n LL |             &&a\n    |             ^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:27:15\n+  --> $DIR/needless_borrow.rs:29:15\n    |\n LL |         46 => &&a,\n    |               ^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:33:27\n+  --> $DIR/needless_borrow.rs:35:27\n    |\n LL |                     break &ref_a;\n    |                           ^^^^^^ help: change this to: `ref_a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:40:15\n+  --> $DIR/needless_borrow.rs:42:15\n    |\n LL |     let _ = x(&&&a);\n    |               ^^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:41:15\n+  --> $DIR/needless_borrow.rs:43:15\n    |\n LL |     let _ = x(&mut &&a);\n    |               ^^^^^^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:42:15\n+  --> $DIR/needless_borrow.rs:44:15\n    |\n LL |     let _ = x(&&&mut b);\n    |               ^^^^^^^^ help: change this to: `&mut b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:43:15\n+  --> $DIR/needless_borrow.rs:45:15\n    |\n LL |     let _ = x(&&ref_a);\n    |               ^^^^^^^ help: change this to: `ref_a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:46:11\n+  --> $DIR/needless_borrow.rs:48:11\n    |\n LL |         x(&b);\n    |           ^^ help: change this to: `b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:53:13\n+  --> $DIR/needless_borrow.rs:55:13\n    |\n LL |     mut_ref(&mut x);\n    |             ^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:54:13\n+  --> $DIR/needless_borrow.rs:56:13\n    |\n LL |     mut_ref(&mut &mut x);\n    |             ^^^^^^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:55:23\n+  --> $DIR/needless_borrow.rs:57:23\n    |\n LL |     let y: &mut i32 = &mut x;\n    |                       ^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:56:23\n+  --> $DIR/needless_borrow.rs:58:23\n    |\n LL |     let y: &mut i32 = &mut &mut x;\n    |                       ^^^^^^^^^^^ help: change this to: `x`\n \n error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:72:13\n+  --> $DIR/needless_borrow.rs:74:13\n    |\n LL |     let _ = (&x).0;\n    |             ^^^^ help: change this to: `x`\n \n error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:74:22\n+  --> $DIR/needless_borrow.rs:76:22\n    |\n LL |     let _ = unsafe { (&*x).0 };\n    |                      ^^^^^ help: change this to: `(*x)`"}, {"sha": "570ef406e4a991d2193fe098945a0fdca7cd58a2", "filename": "tests/ui/ref_binding_to_reference.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fref_binding_to_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fref_binding_to_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,5 +1,6 @@\n // FIXME: run-rustfix waiting on multi-span suggestions\n \n+#![feature(lint_reasons)]\n #![warn(clippy::ref_binding_to_reference)]\n #![allow(clippy::needless_borrowed_reference)]\n \n@@ -73,3 +74,12 @@ impl T1 for S {\n         let _: &&String = x;\n     }\n }\n+\n+fn check_expect_suppression() {\n+    let x = String::new();\n+    #[expect(clippy::ref_binding_to_reference)]\n+    let _: &&String = match Some(&x) {\n+        Some(ref x) => x,\n+        None => return,\n+    };\n+}"}, {"sha": "eb36cd516a246a9e4f581b7079efb0bacc8cc09d", "filename": "tests/ui/ref_binding_to_reference.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fref_binding_to_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fref_binding_to_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.stderr?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,5 +1,5 @@\n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:30:14\n+  --> $DIR/ref_binding_to_reference.rs:31:14\n    |\n LL |         Some(ref x) => x,\n    |              ^^^^^\n@@ -11,7 +11,7 @@ LL |         Some(x) => &x,\n    |              ~     ~~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:36:14\n+  --> $DIR/ref_binding_to_reference.rs:37:14\n    |\n LL |         Some(ref x) => {\n    |              ^^^^^\n@@ -25,7 +25,7 @@ LL ~             &x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:46:14\n+  --> $DIR/ref_binding_to_reference.rs:47:14\n    |\n LL |         Some(ref x) => m2!(x),\n    |              ^^^^^\n@@ -36,7 +36,7 @@ LL |         Some(x) => m2!(&x),\n    |              ~         ~~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:51:15\n+  --> $DIR/ref_binding_to_reference.rs:52:15\n    |\n LL |     let _ = |&ref x: &&String| {\n    |               ^^^^^\n@@ -48,7 +48,7 @@ LL ~         let _: &&String = &x;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:57:12\n+  --> $DIR/ref_binding_to_reference.rs:58:12\n    |\n LL | fn f2<'a>(&ref x: &&'a String) -> &'a String {\n    |            ^^^^^\n@@ -61,7 +61,7 @@ LL ~     x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:64:11\n+  --> $DIR/ref_binding_to_reference.rs:65:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^\n@@ -73,7 +73,7 @@ LL ~         let _: &&String = &x;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:72:11\n+  --> $DIR/ref_binding_to_reference.rs:73:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^"}, {"sha": "9562b47f0c4ff28610caf5f78856225725642d77", "filename": "tests/ui/same_name_method.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.rs?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![warn(clippy::same_name_method)]\n #![allow(dead_code, non_camel_case_types)]\n \n@@ -108,4 +109,19 @@ mod should_not_lint {\n     }\n }\n \n+mod check_expect_suppression {\n+    use crate::T1;\n+\n+    struct S;\n+\n+    impl S {\n+        #[expect(clippy::same_name_method)]\n+        fn foo() {}\n+    }\n+\n+    impl T1 for S {\n+        fn foo() {}\n+    }\n+}\n+\n fn main() {}"}, {"sha": "f55ec9f3cc66b8306f9e6723612dd769646e0475", "filename": "tests/ui/same_name_method.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fsame_name_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3c94c0828c3746437304e8bc26547486c7a5699/tests%2Fui%2Fsame_name_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.stderr?ref=b3c94c0828c3746437304e8bc26547486c7a5699", "patch": "@@ -1,61 +1,61 @@\n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:20:13\n+  --> $DIR/same_name_method.rs:21:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n    = note: `-D clippy::same-name-method` implied by `-D warnings`\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:24:13\n+  --> $DIR/same_name_method.rs:25:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:34:13\n+  --> $DIR/same_name_method.rs:35:13\n    |\n LL |             fn clone() {}\n    |             ^^^^^^^^^^^^^\n    |\n note: existing `clone` defined here\n-  --> $DIR/same_name_method.rs:30:18\n+  --> $DIR/same_name_method.rs:31:18\n    |\n LL |         #[derive(Clone)]\n    |                  ^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:44:13\n+  --> $DIR/same_name_method.rs:45:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:48:13\n+  --> $DIR/same_name_method.rs:49:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:58:13\n+  --> $DIR/same_name_method.rs:59:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:61:9\n+  --> $DIR/same_name_method.rs:62:9\n    |\n LL |         impl T1 for S {}\n    |         ^^^^^^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:70:13\n+  --> $DIR/same_name_method.rs:71:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:73:9\n+  --> $DIR/same_name_method.rs:74:9\n    |\n LL |         impl T1 for S {}\n    |         ^^^^^^^^^^^^^^^^"}]}