{"sha": "acad03342412961536641d53628d7ccaa189279b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYWQwMzM0MjQxMjk2MTUzNjY0MWQ1MzYyOGQ3Y2NhYTE4OTI3OWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T07:25:49Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T10:25:33Z"}, "message": "expand: extract error_recursion_limit_reached", "tree": {"sha": "896718ca3991b4be30af6bf6f2b0f0a054b4c7b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896718ca3991b4be30af6bf6f2b0f0a054b4c7b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acad03342412961536641d53628d7ccaa189279b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acad03342412961536641d53628d7ccaa189279b", "html_url": "https://github.com/rust-lang/rust/commit/acad03342412961536641d53628d7ccaa189279b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acad03342412961536641d53628d7ccaa189279b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64ea295fe92236e5e5162722f5242f5837af7ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/64ea295fe92236e5e5162722f5242f5837af7ee1", "html_url": "https://github.com/rust-lang/rust/commit/64ea295fe92236e5e5162722f5242f5837af7ee1"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "da9660184099e223a300a616f315f3cd9d2d72b2", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/acad03342412961536641d53628d7ccaa189279b/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad03342412961536641d53628d7ccaa189279b/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=acad03342412961536641d53628d7ccaa189279b", "patch": "@@ -606,21 +606,26 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         }\n     }\n \n-    fn expand_invoc(&mut self, invoc: Invocation, ext: &SyntaxExtensionKind) -> AstFragment {\n-        if self.cx.current_expansion.depth > self.cx.ecfg.recursion_limit {\n-            let expn_data = self.cx.current_expansion.id.expn_data();\n-            let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n-            let mut err = self.cx.struct_span_err(\n+    fn error_recursion_limit_reached(&mut self) {\n+        let expn_data = self.cx.current_expansion.id.expn_data();\n+        let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n+        self.cx\n+            .struct_span_err(\n                 expn_data.call_site,\n                 &format!(\"recursion limit reached while expanding `{}`\", expn_data.kind.descr()),\n-            );\n-            err.help(&format!(\n+            )\n+            .help(&format!(\n                 \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n                 suggested_limit, self.cx.ecfg.crate_name,\n-            ));\n-            err.emit();\n-            self.cx.trace_macros_diag();\n-            FatalError.raise();\n+            ))\n+            .emit();\n+        self.cx.trace_macros_diag();\n+        FatalError.raise();\n+    }\n+\n+    fn expand_invoc(&mut self, invoc: Invocation, ext: &SyntaxExtensionKind) -> AstFragment {\n+        if self.cx.current_expansion.depth > self.cx.ecfg.recursion_limit {\n+            self.error_recursion_limit_reached();\n         }\n \n         let (fragment_kind, span) = (invoc.fragment_kind, invoc.span());"}]}