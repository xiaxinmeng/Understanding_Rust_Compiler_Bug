{"sha": "0350c2f783400b025713162ae312f54eaaad074f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNTBjMmY3ODM0MDBiMDI1NzEzMTYyYWUzMTJmNTRlYWFhZDA3NGY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-18T17:59:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-18T17:59:49Z"}, "message": "Rollup merge of #45217 - SimonSapin:alloc-doc, r=steveklabnik\n\nFix out of date unstable book entries for `alloc_*` features.\n\nThe `alloc_jemalloc` crate does not provide a type to use with `#[global_allocator]`, and (according to Alex) `extern crate alloc_jemalloc;` alone became a no-op when `#[global_allocator]` was introduced.", "tree": {"sha": "0b8f2dd54ea7cd3d6b885049d9699a2da7a2fdec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8f2dd54ea7cd3d6b885049d9699a2da7a2fdec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0350c2f783400b025713162ae312f54eaaad074f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0350c2f783400b025713162ae312f54eaaad074f", "html_url": "https://github.com/rust-lang/rust/commit/0350c2f783400b025713162ae312f54eaaad074f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0350c2f783400b025713162ae312f54eaaad074f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61c58c1584cdc2e767791fdcc9ecba21a40a6dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/61c58c1584cdc2e767791fdcc9ecba21a40a6dbe", "html_url": "https://github.com/rust-lang/rust/commit/61c58c1584cdc2e767791fdcc9ecba21a40a6dbe"}, {"sha": "818d2249475910fa1f7844486abb2d7239056d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/818d2249475910fa1f7844486abb2d7239056d96", "html_url": "https://github.com/rust-lang/rust/commit/818d2249475910fa1f7844486abb2d7239056d96"}], "stats": {"total": 86, "additions": 26, "deletions": 60}, "files": [{"sha": "425d4cb79b2df7e359fbd0c05edd3c8155d3156c", "filename": "src/doc/unstable-book/src/library-features/alloc-jemalloc.md", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0350c2f783400b025713162ae312f54eaaad074f/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/0350c2f783400b025713162ae312f54eaaad074f/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md?ref=0350c2f783400b025713162ae312f54eaaad074f", "patch": "@@ -8,55 +8,6 @@ See also [`alloc_system`](library-features/alloc-system.html).\n \n ------------------------\n \n-The compiler currently ships two default allocators: `alloc_system` and\n-`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n-are normal Rust crates and contain an implementation of the routines to\n-allocate and deallocate memory. The standard library is not compiled assuming\n-either one, and the compiler will decide which allocator is in use at\n-compile-time depending on the type of output artifact being produced.\n-\n-Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n-available). In this situation the compiler \"controls the world\" in the sense of\n-it has power over the final link. Primarily this means that the allocator\n-decision can be left up the compiler.\n-\n-Dynamic and static libraries, however, will use `alloc_system` by default. Here\n-Rust is typically a 'guest' in another application or another world where it\n-cannot authoritatively decide what allocator is in use. As a result it resorts\n-back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n-memory.\n-\n-# Switching Allocators\n-\n-Although the compiler's default choices may work most of the time, it's often\n-necessary to tweak certain aspects. Overriding the compiler's decision about\n-which allocator is in use is done simply by linking to the desired allocator:\n-\n-```rust,no_run\n-#![feature(alloc_system)]\n-\n-extern crate alloc_system;\n-\n-fn main() {\n-    let a = Box::new(4); // Allocates from the system allocator.\n-    println!(\"{}\", a);\n-}\n-```\n-\n-In this example the binary generated will not link to jemalloc by default but\n-instead use the system allocator. Conversely to generate a dynamic library which\n-uses jemalloc by default one would write:\n-\n-```rust,ignore\n-#![feature(alloc_jemalloc)]\n-#![crate_type = \"dylib\"]\n-\n-extern crate alloc_jemalloc;\n-\n-pub fn foo() {\n-    let a = Box::new(4); // Allocates from jemalloc.\n-    println!(\"{}\", a);\n-}\n-# fn main() {}\n-```\n+This feature has been replaced by [the `jemallocator` crate on crates.io.][jemallocator].\n \n+[jemallocator]: https://crates.io/crates/jemallocator"}, {"sha": "9effab202cabd909b8c270110f2ff1df5f7fa568", "filename": "src/doc/unstable-book/src/library-features/alloc-system.md", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0350c2f783400b025713162ae312f54eaaad074f/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/0350c2f783400b025713162ae312f54eaaad074f/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md?ref=0350c2f783400b025713162ae312f54eaaad074f", "patch": "@@ -1,10 +1,10 @@\n # `alloc_system`\n \n-The tracking issue for this feature is: [#33082]\n+The tracking issue for this feature is: [#32838]\n \n-[#33082]: https://github.com/rust-lang/rust/issues/33082\n+[#32838]: https://github.com/rust-lang/rust/issues/32838\n \n-See also [`alloc_jemalloc`](library-features/alloc-jemalloc.html).\n+See also [`global_allocator`](language-features/global-allocator.html).\n \n ------------------------\n \n@@ -30,13 +30,18 @@ memory.\n \n Although the compiler's default choices may work most of the time, it's often\n necessary to tweak certain aspects. Overriding the compiler's decision about\n-which allocator is in use is done simply by linking to the desired allocator:\n+which allocator is in use is done through the `#[global_allocator]` attribute:\n \n ```rust,no_run\n-#![feature(alloc_system)]\n+#![feature(alloc_system, global_allocator, allocator_api)]\n \n extern crate alloc_system;\n \n+use alloc_system::System;\n+\n+#[global_allocator]\n+static A: System = System;\n+\n fn main() {\n     let a = Box::new(4); // Allocates from the system allocator.\n     println!(\"{}\", a);\n@@ -47,16 +52,26 @@ In this example the binary generated will not link to jemalloc by default but\n instead use the system allocator. Conversely to generate a dynamic library which\n uses jemalloc by default one would write:\n \n+(The `alloc_jemalloc` crate cannot be used to control the global allocator,\n+crate.io\u2019s `jemallocator` crate provides equivalent functionality.)\n+\n+```toml\n+# Cargo.toml\n+[dependencies]\n+jemallocator = \"0.1\"\n+```\n ```rust,ignore\n-#![feature(alloc_jemalloc)]\n+#![feature(global_allocator)]\n #![crate_type = \"dylib\"]\n \n-extern crate alloc_jemalloc;\n+extern crate jemallocator;\n+\n+#[global_allocator]\n+static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n \n pub fn foo() {\n     let a = Box::new(4); // Allocates from jemalloc.\n     println!(\"{}\", a);\n }\n # fn main() {}\n ```\n-"}, {"sha": "7aa5f8a9186b0a229412e370e1faa93b08a61e80", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0350c2f783400b025713162ae312f54eaaad074f/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0350c2f783400b025713162ae312f54eaaad074f/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=0350c2f783400b025713162ae312f54eaaad074f", "patch": "@@ -14,7 +14,7 @@\n #![unstable(feature = \"alloc_system\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\",\n-            issue = \"27783\")]\n+            issue = \"32838\")]\n #![feature(global_allocator)]\n #![feature(allocator_api)]\n #![feature(alloc)]"}]}