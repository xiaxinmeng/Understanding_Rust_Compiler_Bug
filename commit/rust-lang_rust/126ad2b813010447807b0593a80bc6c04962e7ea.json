{"sha": "126ad2b813010447807b0593a80bc6c04962e7ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNmFkMmI4MTMwMTA0NDc4MDdiMDU5M2E4MGJjNmMwNDk2MmU3ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T14:16:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T14:16:18Z"}, "message": "Auto merge of #68708 - Mark-Simulacrum:stage0-step, r=pietroalbini\n\nStep stage0 to bootstrap from 1.42\n\nThis also includes a commit which fixes the rustfmt downloading logic to redownload when the rustfmt channel changes, and bumps rustfmt to a more recent version.", "tree": {"sha": "da18ca4b2fec7be348e271c47cb9543f803331df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da18ca4b2fec7be348e271c47cb9543f803331df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/126ad2b813010447807b0593a80bc6c04962e7ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/126ad2b813010447807b0593a80bc6c04962e7ea", "html_url": "https://github.com/rust-lang/rust/commit/126ad2b813010447807b0593a80bc6c04962e7ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/126ad2b813010447807b0593a80bc6c04962e7ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bae3d0dfc716ccbe511455275b77ccb3b5b8437b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bae3d0dfc716ccbe511455275b77ccb3b5b8437b", "html_url": "https://github.com/rust-lang/rust/commit/bae3d0dfc716ccbe511455275b77ccb3b5b8437b"}, {"sha": "dbc9894095d7ebc35e521075c98ea0d55175fdd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc9894095d7ebc35e521075c98ea0d55175fdd3", "html_url": "https://github.com/rust-lang/rust/commit/dbc9894095d7ebc35e521075c98ea0d55175fdd3"}], "stats": {"total": 105, "additions": 19, "deletions": 86}, "files": [{"sha": "1935759a5628e2ad914f2e6fbd3d2a4f1811f484", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -397,7 +397,7 @@ def support_xz():\n \n         if self.rustfmt() and self.rustfmt().startswith(self.bin_root()) and (\n             not os.path.exists(self.rustfmt())\n-            or self.program_out_of_date(self.rustfmt_stamp())\n+            or self.program_out_of_date(self.rustfmt_stamp(), self.rustfmt_channel)\n         ):\n             if rustfmt_channel:\n                 tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n@@ -407,7 +407,7 @@ def support_xz():\n                 self.fix_executable(\"{}/bin/rustfmt\".format(self.bin_root()))\n                 self.fix_executable(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n-                    rustfmt_stamp.write(self.date)\n+                    rustfmt_stamp.write(self.date + self.rustfmt_channel)\n \n     def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n         if date is None:\n@@ -521,12 +521,12 @@ def rustfmt_stamp(self):\n         \"\"\"\n         return os.path.join(self.bin_root(), '.rustfmt-stamp')\n \n-    def program_out_of_date(self, stamp_path):\n+    def program_out_of_date(self, stamp_path, extra=\"\"):\n         \"\"\"Check if the given program stamp is out of date\"\"\"\n         if not os.path.exists(stamp_path) or self.clean:\n             return True\n         with open(stamp_path, 'r') as stamp:\n-            return self.date != stamp.read()\n+            return (self.date + extra) != stamp.read()\n \n     def bin_root(self):\n         \"\"\"Return the binary root directory"}, {"sha": "504cba45570c17faf8d171e02a2120a50df9ea0a", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -13,7 +13,7 @@ use build_helper::output;\n use crate::Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.42.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.43.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "637323331f5820b50f8e52573c02b89ea3803fff", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -1026,7 +1026,7 @@ impl Build {\n     }\n \n     fn llvm_link_tools_dynamically(&self, target: Interned<String>) -> bool {\n-        (target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\"))\n+        target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\")\n     }\n \n     /// Returns the `version` string associated with this compiler for Rust"}, {"sha": "973c2f2b91555d20df31bbd79af3e597f22e30a0", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -1080,18 +1080,7 @@ fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>])\n     fmt.precision = getcount(args, &arg.format.precision);\n \n     // Extract the correct argument\n-    let value = {\n-        #[cfg(bootstrap)]\n-        {\n-            match arg.position {\n-                rt::v1::Position::At(i) => args[i],\n-            }\n-        }\n-        #[cfg(not(bootstrap))]\n-        {\n-            args[arg.position]\n-        }\n-    };\n+    let value = args[arg.position];\n \n     // Then actually do some printing\n     (value.formatter)(value.value, fmt)"}, {"sha": "f6460470bfe18e5e3aec17b90cbf39b1351835ec", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -7,9 +7,6 @@\n \n #[derive(Copy, Clone)]\n pub struct Argument {\n-    #[cfg(bootstrap)]\n-    pub position: Position,\n-    #[cfg(not(bootstrap))]\n     pub position: usize,\n     pub format: FormatSpec,\n }\n@@ -42,9 +39,3 @@ pub enum Count {\n     Param(usize),\n     Implied,\n }\n-\n-#[cfg(bootstrap)]\n-#[derive(Copy, Clone)]\n-pub enum Position {\n-    At(usize),\n-}"}, {"sha": "6edf253d4bb808da9eec837cff03d2dd579229f3", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -132,7 +132,6 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(assoc_int_consts)]\n \n #[prelude_import]"}, {"sha": "991458db5b72bde21de92bdfe382734559a0f495", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -17,7 +17,6 @@\n #![feature(range_is_empty)]\n #![feature(raw)]\n #![feature(saturating_neg)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n #![feature(specialization)]"}, {"sha": "6f507e85e742c59f6de1982c2fa76a5c23f4b3ff", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -282,12 +282,7 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     //\n     // In any case, we basically need to do something like this until we can\n     // express more operations in statics (and we may never be able to).\n-    if !cfg!(bootstrap) {\n-        atomic_store(\n-            &mut THROW_INFO.pmfnUnwind as *mut _ as *mut u32,\n-            ptr!(exception_cleanup) as u32,\n-        );\n-    }\n+    atomic_store(&mut THROW_INFO.pmfnUnwind as *mut _ as *mut u32, ptr!(exception_cleanup) as u32);\n     atomic_store(\n         &mut THROW_INFO.pCatchableTypeArray as *mut _ as *mut u32,\n         ptr!(&CATCHABLE_TYPE_ARRAY as *const _) as u32,\n@@ -300,12 +295,10 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n         &mut CATCHABLE_TYPE.pType as *mut _ as *mut u32,\n         ptr!(&TYPE_DESCRIPTOR as *const _) as u32,\n     );\n-    if !cfg!(bootstrap) {\n-        atomic_store(\n-            &mut CATCHABLE_TYPE.copyFunction as *mut _ as *mut u32,\n-            ptr!(exception_copy) as u32,\n-        );\n-    }\n+    atomic_store(\n+        &mut CATCHABLE_TYPE.copyFunction as *mut _ as *mut u32,\n+        ptr!(exception_copy) as u32,\n+    );\n \n     extern \"system\" {\n         #[unwind(allowed)]"}, {"sha": "237751bcbd787a34c66a400ed6a7d0c6c8e84994", "filename": "src/librustc/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fbenches%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -1,4 +1,3 @@\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "744ee1a65e1546b73c00d2fe98975b63939cdcd3", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -42,7 +42,6 @@\n #![feature(optin_builtin_traits)]\n #![feature(option_expect_none)]\n #![feature(range_is_empty)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n #![feature(thread_local)]"}, {"sha": "520a7ac3e566539f7c819d90499dbd9f88962586", "filename": "src/librustc_ast_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_ast_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_ast_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -4,8 +4,6 @@\n //!\n //! The crate also contains other misc AST visitors, e.g. `node_count` and `show_span`.\n \n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n-\n pub mod ast_validation;\n pub mod feature_gate;\n pub mod node_count;"}, {"sha": "f39587122c56d61fda4883878376579156b54fcc", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -4,7 +4,6 @@\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(libc)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(stmt_expr_attributes)]\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]"}, {"sha": "6b30ae42a19408f74ece7e4aee69306264592b1e", "filename": "src/librustc_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -1,8 +1,6 @@\n #![allow(rustc::default_hash_types)]\n #![recursion_limit = \"128\"]\n \n-extern crate proc_macro;\n-\n use synstructure::decl_derive;\n \n use proc_macro::TokenStream;"}, {"sha": "d94f23ff8bc6a8f28db0d123a385318a218b5761", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -10,7 +10,6 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![feature(rustc_private)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(specialization)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"256\"]"}, {"sha": "f064869d6647197f46c67e114a7111cdf76ae724", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -7,7 +7,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n #![feature(inner_deref)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "3c35827d15d3e66ac34ea0eb6c753979cf527109", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -5,7 +5,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(bool_to_option)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "cd674e3c5ebefb630f7dd1e161373ffd725a8728", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n \n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "c5e5bc969158f157c202b447205f409bdbe2d60d", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "af4ba4c0eb20eab417f0ea1ddd884b59efe95cc5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -11,7 +11,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![recursion_limit = \"256\"]\n \n pub use rustc_hir::def::{Namespace, PerNS};"}, {"sha": "a9db0254a7d1181e9942c1150eba13dd2e4a3447", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -11,7 +11,6 @@\n #![feature(box_syntax)]\n #![feature(bool_to_option)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n \n #[macro_use]\n extern crate log;"}, {"sha": "37faa2281b352abd2e5e00e5d180724bcbbb6781", "filename": "src/librustc_ty/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_ty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_ty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -8,7 +8,6 @@\n #![feature(bool_to_option)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "05ea9b1ac56dca4716d0fd7205ad326430cf1e41", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -64,7 +64,6 @@ This API is completely unstable and subject to change.\n #![feature(exhaustive_patterns)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "806f868ff242e41de4940d28502731b64d57d668", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -294,7 +294,6 @@\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(std_internals)]"}, {"sha": "9e1ac8754d9b058d3ea1e20ec53f8d9290011690", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -4,27 +4,6 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-#[cfg(bootstrap)]\n-#[doc(include = \"../libcore/macros/panic.md\")]\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable(libstd_sys_internals)]\n-macro_rules! panic {\n-    () => ({\n-        $crate::panic!(\"explicit panic\")\n-    });\n-    ($msg:expr) => ({\n-        $crate::rt::begin_panic($msg, &($crate::file!(), $crate::line!(), $crate::column!()))\n-    });\n-    ($msg:expr,) => ({\n-        $crate::panic!($msg)\n-    });\n-    ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))\n-    });\n-}\n-\n-#[cfg(not(bootstrap))]\n #[doc(include = \"../libcore/macros/panic.md\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "8b12aaaa7e2fd25c6cdf69b9a9d06ffbe122d8c4", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -389,7 +389,7 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cold]\n #[track_caller]\n-pub fn begin_panic<M: Any + Send>(msg: M, #[cfg(bootstrap)] _: &(&str, u32, u32)) -> ! {\n+pub fn begin_panic<M: Any + Send>(msg: M) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { intrinsics::abort() }\n     }"}, {"sha": "adb96356aae7d53fec41564461d6cb918d47ec81", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -13,7 +13,6 @@\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(try_trait)]\n-#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![feature(unicode_internals)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "14bffbadc06423dbf1744ac30c5ad68c27644cdf", "filename": "src/stage0.txt", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/126ad2b813010447807b0593a80bc6c04962e7ea/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=126ad2b813010447807b0593a80bc6c04962e7ea", "patch": "@@ -12,14 +12,15 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2019-12-18\n+date: 2020-01-30\n rustc: beta\n cargo: beta\n \n-# We use a nightly rustfmt to format the source because it solves some bootstrapping\n-# issues with use of new syntax in this repo. If you're looking at the beta/stable branch, this key should be omitted,\n-# as we don't want to depend on rustfmt from nightly there.\n-rustfmt: nightly-2019-12-18\n+# We use a nightly rustfmt to format the source because it solves some\n+# bootstrapping issues with use of new syntax in this repo. If you're looking at\n+# the beta/stable branch, this key should be omitted, as we don't want to depend\n+# on rustfmt from nightly there.\n+rustfmt: nightly-2020-01-31\n \n # When making a stable release the process currently looks like:\n #"}]}