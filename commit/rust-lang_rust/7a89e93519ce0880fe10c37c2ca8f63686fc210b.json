{"sha": "7a89e93519ce0880fe10c37c2ca8f63686fc210b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODllOTM1MTljZTA4ODBmZTEwYzM3YzJjYThmNjM2ODZmYzIxMGI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-04T16:56:14Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-13T08:01:18Z"}, "message": "Emit appropriate suggestion when there's already 'static bound on the return type.", "tree": {"sha": "7cb4156fc0be364e0c1fb2d7f6a275a7a2007c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb4156fc0be364e0c1fb2d7f6a275a7a2007c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a89e93519ce0880fe10c37c2ca8f63686fc210b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluaGU4ACgkQAXYLT59T\n8VS6LA/+NwFbRKMBshMZdihsJ4Zhfe3Aj9RHV13ObO0YuiA4DJ4JbHYu9V1uYdJF\ndnoFRORdW+9nokQFwhbOpvRoJKy+qChnR03W0xfUpjs5wUNYCQ5ebj7mNOGmX5Ob\n08+3DsCSSbrQQPqFN7Ji4f2JXXQiiVFkvt8+gGD3MJ/V4ipKpFkJYQNAd4PSy3nZ\n9b3I056fV7RK/9IxVqk5y1DKpQl5i6rjP/KiAN7ZDP3J3rYjVSeWZbaMopd54jgo\nmYWxkKvi8406GzCX/ioSZaqjyuUL5T8op80wRtdWw8unm/Zk1ZJIQRxZBNYj02KZ\nZarjHj6MKPuTPH/CbVt2PG4XjQiGy51U/tr8vY4agMfSDfLwLLP17RMoi4ViPSgY\ntc9Kt2nsiLzFaiId/OGzB/UHmMfS7wG18D6GdZt69e0SytO9UtbhAtqhIC+pyXAi\nPqW0Rk5xwfjOA0Ue5Yac37MEOw/DYnZTZm1TjvWkORmTyDoYPUbTKcQ2cWgsBJ4W\nD5ooqhmDCDRrtMIGd2NMgXv+J6QqPlMqb4d8msuWJKs1L+hzjx1F2mkMBSN91hRx\n7nQ5KHdY1DZZU+kfji7TDy1TVY2FIzdgMMVPZ+5sugtFHw9r4LFmrVLrQCcFEgL7\nWLO42DkoCD8tMZ0z8pOlQCivcFlecWchTiZtnlyX9s7+ODHWfIY=\n=0ZaR\n-----END PGP SIGNATURE-----", "payload": "tree 7cb4156fc0be364e0c1fb2d7f6a275a7a2007c59\nparent 65e253966693a1c222badf977dc133df028f2351\nauthor David Wood <david@davidtw.co> 1536080174 +0200\ncommitter David Wood <david@davidtw.co> 1536825678 +0200\n\nEmit appropriate suggestion when there's already 'static bound on the return type.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a89e93519ce0880fe10c37c2ca8f63686fc210b", "html_url": "https://github.com/rust-lang/rust/commit/7a89e93519ce0880fe10c37c2ca8f63686fc210b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a89e93519ce0880fe10c37c2ca8f63686fc210b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e253966693a1c222badf977dc133df028f2351", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e253966693a1c222badf977dc133df028f2351", "html_url": "https://github.com/rust-lang/rust/commit/65e253966693a1c222badf977dc133df028f2351"}], "stats": {"total": 155, "additions": 104, "deletions": 51}, "files": [{"sha": "03c99180d5e503c6da6b06e42d979ce1d7243746", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a89e93519ce0880fe10c37c2ca8f63686fc210b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a89e93519ce0880fe10c37c2ca8f63686fc210b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7a89e93519ce0880fe10c37c2ca8f63686fc210b", "patch": "@@ -1590,7 +1590,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn return_type_impl_trait(\n         &self,\n         scope_def_id: DefId,\n-    ) -> Option<Ty> {\n+    ) -> Option<Ty<'tcx>> {\n         let ret_ty = self.type_of(scope_def_id);\n         match ret_ty.sty {\n             ty::FnDef(_, _) => {"}, {"sha": "8690212804e219d5149ebe2fa30a8a14d9b703b3", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7a89e93519ce0880fe10c37c2ca8f63686fc210b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a89e93519ce0880fe10c37c2ca8f63686fc210b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=7a89e93519ce0880fe10c37c2ca8f63686fc210b", "patch": "@@ -15,7 +15,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n use rustc::mir::{self, Location, Mir, Place, Rvalue, StatementKind, TerminatorKind};\n-use rustc::ty::{TyCtxt, Ty, TyS, TyKind, Region, RegionKind, RegionVid};\n+use rustc::ty::{self, TyCtxt, Region, RegionKind, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::{Diagnostic, DiagnosticBuilder};\n use std::collections::VecDeque;\n@@ -491,26 +491,67 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr_region: Option<Region<'tcx>>,\n         outlived_fr_region: Option<Region<'tcx>>,\n     ) {\n-        if let (Some(f), Some(RegionKind::ReStatic)) = (fr_region, outlived_fr_region) {\n-            if let Some(TyS {\n-                sty: TyKind::Anon(did, _),\n+        if let (Some(f), Some(ty::RegionKind::ReStatic)) = (fr_region, outlived_fr_region) {\n+            if let Some(ty::TyS {\n+                sty: ty::TyKind::Anon(did, substs),\n                 ..\n-            }) = self.return_type_impl_trait(infcx, f) {\n+            }) = infcx.tcx.is_suitable_region(f)\n+                    .map(|r| r.def_id)\n+                    .map(|id| infcx.tcx.return_type_impl_trait(id))\n+                    .unwrap_or(None)\n+            {\n+                let has_static_predicate = {\n+                    let predicates_of = infcx.tcx.predicates_of(*did);\n+                    let bounds = predicates_of.instantiate(infcx.tcx, substs);\n+\n+                    let mut found = false;\n+                    for predicate in bounds.predicates {\n+                        if let ty::Predicate::TypeOutlives(binder) = predicate {\n+                            if let ty::OutlivesPredicate(\n+                                _,\n+                                RegionKind::ReStatic\n+                            ) = binder.skip_binder() {\n+                                found = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n+                    found\n+                };\n+\n+                debug!(\"add_static_impl_trait_suggestion: has_static_predicate={:?}\",\n+                       has_static_predicate);\n                 let static_str = keywords::StaticLifetime.name();\n-                let span = infcx.tcx.def_span(*did);\n-                if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(span) {\n-                    diag.span_suggestion(\n-                        span,\n-                        &format!(\n-                            \"you can add a constraint to the return type to make it last \\\n-                             less than `{}` and match `{}`\",\n-                            static_str, fr_name,\n-                        ),\n-                        match fr_name {\n-                            RegionName::Named(name) => format!(\"{} + {}\", snippet, name),\n-                            RegionName::Synthesized(_) => format!(\"{} + '_\", snippet),\n-                        },\n-                    );\n+                if has_static_predicate {\n+                    let span = self.get_span_of_named_region(infcx.tcx, f, &fr_name);\n+                    if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(span) {\n+                        diag.span_suggestion(\n+                            span,\n+                            &format!(\n+                                \"you can add a constraint to the definition of `{}` to require it \\\n+                                 outlive `{}`\",\n+                                fr_name, static_str,\n+                            ),\n+                            format!(\"{}: {}\", snippet, static_str),\n+                        );\n+                    }\n+                } else {\n+                    let span = infcx.tcx.def_span(*did);\n+                    if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(span) {\n+                        diag.span_suggestion(\n+                            span,\n+                            &format!(\n+                                \"you can add a constraint to the return type to make it last \\\n+                                 less than `{}` and match `{}`\",\n+                                static_str, fr_name,\n+                            ),\n+                            match fr_name {\n+                                RegionName::Named(name) => format!(\"{} + {}\", snippet, name),\n+                                RegionName::Synthesized(_) => format!(\"{} + '_\", snippet),\n+                            },\n+                        );\n+                    }\n                 }\n             }\n         }\n@@ -538,15 +579,4 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let (_, span, _) = self.best_blame_constraint(mir, tcx, fr1, |r| r == fr2);\n         span\n     }\n-\n-    fn return_type_impl_trait<'cx>(\n-        &self,\n-        infcx: &'cx InferCtxt<'_, '_, 'tcx>,\n-        outlived_fr_region: Region<'tcx>,\n-    ) -> Option<Ty<'cx>> {\n-        infcx.tcx.is_suitable_region(outlived_fr_region)\n-            .map(|r| r.def_id)\n-            .map(|id| infcx.tcx.return_type_impl_trait(id))\n-            .unwrap_or(None)\n-    }\n }"}, {"sha": "857f1dae7ab5175c27e347630c3e743a5a8938f9", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7a89e93519ce0880fe10c37c2ca8f63686fc210b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a89e93519ce0880fe10c37c2ca8f63686fc210b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=7a89e93519ce0880fe10c37c2ca8f63686fc210b", "patch": "@@ -22,6 +22,7 @@ use rustc::util::ppaux::with_highlight_region;\n use rustc_errors::DiagnosticBuilder;\n use syntax::ast::{Name, DUMMY_NODE_ID};\n use syntax::symbol::keywords;\n+use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n \n /// Name of a region used in error reporting. Variants denote the source of the region name -\n@@ -33,6 +34,14 @@ pub(crate) enum RegionName {\n     Synthesized(InternedString),\n }\n \n+impl RegionName {\n+    fn as_interned_string(&self) -> &InternedString {\n+        match self {\n+            RegionName::Named(name) | RegionName::Synthesized(name) => name,\n+        }\n+    }\n+}\n+\n impl Display for RegionName {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self {\n@@ -121,8 +130,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         match error_region {\n             ty::ReEarlyBound(ebr) => {\n                 if ebr.has_name() {\n-                    self.highlight_named_span(tcx, error_region, &ebr.name, diag);\n-                    Some(RegionName::Named(ebr.name))\n+                    let name = RegionName::Named(ebr.name);\n+                    self.highlight_named_span(tcx, error_region, &name, diag);\n+                    Some(name)\n                 } else {\n                     None\n                 }\n@@ -134,8 +144,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n             ty::ReFree(free_region) => match free_region.bound_region {\n                 ty::BoundRegion::BrNamed(_, name) => {\n+                    let name = RegionName::Named(name);\n                     self.highlight_named_span(tcx, error_region, &name, diag);\n-                    Some(RegionName::Named(name))\n+                    Some(name)\n                 },\n \n                 ty::BoundRegion::BrEnv => {\n@@ -198,6 +209,26 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n+    /// Get the span of a named region.\n+    pub(super) fn get_span_of_named_region(\n+        &self,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        error_region: &RegionKind,\n+        name: &RegionName,\n+    ) -> Span {\n+        let scope = error_region.free_region_binding_scope(tcx);\n+        let node = tcx.hir.as_local_node_id(scope).unwrap_or(DUMMY_NODE_ID);\n+\n+        let span = tcx.sess.source_map().def_span(tcx.hir.span(node));\n+        if let Some(param) = tcx.hir.get_generics(scope).and_then(|generics| {\n+            generics.get_named(name.as_interned_string())\n+        }) {\n+            param.span\n+        } else {\n+            span\n+        }\n+    }\n+\n     /// Highlight a named span to provide context for error messages that\n     /// mention that span, for example:\n     ///\n@@ -216,23 +247,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         error_region: &RegionKind,\n-        name: &InternedString,\n+        name: &RegionName,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) {\n-        let cm = tcx.sess.source_map();\n-\n-        let scope = error_region.free_region_binding_scope(tcx);\n-        let node = tcx.hir.as_local_node_id(scope).unwrap_or(DUMMY_NODE_ID);\n-\n-        let mut sp = cm.def_span(tcx.hir.span(node));\n-        if let Some(param) = tcx.hir\n-            .get_generics(scope)\n-            .and_then(|generics| generics.get_named(name))\n-        {\n-            sp = param.span;\n-        }\n+        let span = self.get_span_of_named_region(tcx, error_region, name);\n \n-        diag.span_label(sp, format!(\"lifetime `{}` defined here\", name));\n+        diag.span_label(\n+            span,\n+            format!(\"lifetime `{}` defined here\", name),\n+        );\n     }\n \n     /// Find an argument that contains `fr` and label it with a fully"}, {"sha": "1e527140127a5445645eb377936777fe01a0a964", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a89e93519ce0880fe10c37c2ca8f63686fc210b/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a89e93519ce0880fe10c37c2ca8f63686fc210b/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=7a89e93519ce0880fe10c37c2ca8f63686fc210b", "patch": "@@ -21,10 +21,10 @@ error: unsatisfied lifetime constraints\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n-help: you can add a constraint to the return type to make it last less than `'static` and match `'a`\n+help: you can add a constraint to the definition of `'a` to require it outlive `'static`\n    |\n-LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn with_bound<'a: 'static>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n+   |               ^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:5"}]}