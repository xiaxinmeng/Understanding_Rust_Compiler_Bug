{"sha": "a30964e6c0360a76f8f45d537fa4518115f02674", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDk2NGU2YzAzNjBhNzZmOGY0NWQ1MzdmYTQ1MTgxMTVmMDI2NzQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-07T00:20:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-07T00:20:38Z"}, "message": "Rollup merge of #66076 - RalfJung:qpath, r=davidtwco,oli-obk\n\nHIR docs: mention how to resolve method paths", "tree": {"sha": "9d97e81c4c4fe90e91cac262050380c23908068f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d97e81c4c4fe90e91cac262050380c23908068f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a30964e6c0360a76f8f45d537fa4518115f02674", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdw2NWCRBK7hj4Ov3rIwAAdHIIAKC+1TvtFwPbzdfc1G7RnJew\nnpveEHLiwjH205stCGpC9Eh0CPtkKR6mG4dUlI9xv59SkEOfcd3i0w9bq7k7obYw\n0rUeCQq3/+gdNt6l1aATjhhRYs8jCNmd49DLZ1RXT2BxsyFhlYowVRRkS9T8EWrA\nQ1P63ey6HAhu6ndAf8lKCYjFghYi9BxFFczP/1WpntabGzU87S1E4pqi3KGaFhh5\n0Z3qv8hvZJ34udc119tlsX/uUKurAFejexZEHGYUV1blz4JAI0SfJITrs8AwWEi7\nwAizuwgJkyVteOjr3kXBJO0DL2Xzi88T7JNsWOU1mmDNZtcebs/hTDN5Wfh9zkc=\n=47qo\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d97e81c4c4fe90e91cac262050380c23908068f\nparent 12ffe5ffdd51d0f4c860d064d7e70912cbbf3863\nparent f2ed1e661e69dc463aa18ef3912501e1dde936b8\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573086038 +0900\ncommitter GitHub <noreply@github.com> 1573086038 +0900\n\nRollup merge of #66076 - RalfJung:qpath, r=davidtwco,oli-obk\n\nHIR docs: mention how to resolve method paths\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a30964e6c0360a76f8f45d537fa4518115f02674", "html_url": "https://github.com/rust-lang/rust/commit/a30964e6c0360a76f8f45d537fa4518115f02674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a30964e6c0360a76f8f45d537fa4518115f02674/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863", "html_url": "https://github.com/rust-lang/rust/commit/12ffe5ffdd51d0f4c860d064d7e70912cbbf3863"}, {"sha": "f2ed1e661e69dc463aa18ef3912501e1dde936b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ed1e661e69dc463aa18ef3912501e1dde936b8", "html_url": "https://github.com/rust-lang/rust/commit/f2ed1e661e69dc463aa18ef3912501e1dde936b8"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "d6f7ba6b9734e0fc545a931795239a623c6510c5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a30964e6c0360a76f8f45d537fa4518115f02674/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30964e6c0360a76f8f45d537fa4518115f02674/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a30964e6c0360a76f8f45d537fa4518115f02674", "patch": "@@ -1616,6 +1616,11 @@ pub enum ExprKind {\n     /// and the remaining elements are the rest of the arguments.\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n+    ///\n+    /// To resolve the called method to a `DefId`, call [`type_dependent_def_id`] with\n+    /// the `hir_id` of the `MethodCall` node itself.\n+    ///\n+    /// [`type_dependent_def_id`]: ../ty/struct.TypeckTables.html#method.type_dependent_def_id\n     MethodCall(P<PathSegment>, Span, HirVec<Expr>),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(HirVec<Expr>),\n@@ -1698,6 +1703,10 @@ pub enum ExprKind {\n }\n \n /// Represents an optionally `Self`-qualified value/type path or associated extension.\n+///\n+/// To resolve the path to a `DefId`, call [`qpath_res`].\n+///\n+/// [`qpath_res`]: ../ty/struct.TypeckTables.html#method.qpath_res\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum QPath {\n     /// Path to a definition, optionally \"fully-qualified\" with a `Self`"}]}