{"sha": "1fea55ba51be4a0cc68c0ea820cf3e7eb8995b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZWE1NWJhNTFiZTRhMGNjNjhjMGVhODIwY2YzZTdlYjg5OTViOWE=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-05-19T11:16:29Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-05-25T04:57:23Z"}, "message": "Format bootstrap.py using autopep8", "tree": {"sha": "67c9bfd8da4020f0c07d2fdef3ef5821c9709ca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c9bfd8da4020f0c07d2fdef3ef5821c9709ca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fea55ba51be4a0cc68c0ea820cf3e7eb8995b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fea55ba51be4a0cc68c0ea820cf3e7eb8995b9a", "html_url": "https://github.com/rust-lang/rust/commit/1fea55ba51be4a0cc68c0ea820cf3e7eb8995b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fea55ba51be4a0cc68c0ea820cf3e7eb8995b9a/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d552e34e2030df102d0730e91af4b253dc9e07fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d552e34e2030df102d0730e91af4b253dc9e07fa", "html_url": "https://github.com/rust-lang/rust/commit/d552e34e2030df102d0730e91af4b253dc9e07fa"}], "stats": {"total": 94, "additions": 59, "deletions": 35}, "files": [{"sha": "d5f2e3f99a9ac01e6f01d8af342494b1c678c9ef", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 59, "deletions": 35, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1fea55ba51be4a0cc68c0ea820cf3e7eb8995b9a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/1fea55ba51be4a0cc68c0ea820cf3e7eb8995b9a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=1fea55ba51be4a0cc68c0ea820cf3e7eb8995b9a", "patch": "@@ -40,7 +40,8 @@ def get(url, path, verbose=False):\n                 return\n             else:\n                 if verbose:\n-                    print(\"ignoring already-download file \" + path + \" due to failed verification\")\n+                    print(\"ignoring already-download file \" +\n+                          path + \" due to failed verification\")\n                 os.unlink(path)\n         download(temp_path, url, True, verbose)\n         if not verify(temp_path, sha_path, verbose):\n@@ -100,8 +101,8 @@ def verify(path, sha_path, verbose):\n     verified = found == expected\n     if not verified:\n         print(\"invalid checksum:\\n\"\n-               \"    found:    {}\\n\"\n-               \"    expected: {}\".format(found, expected))\n+              \"    found:    {}\\n\"\n+              \"    expected: {}\".format(found, expected))\n     return verified\n \n \n@@ -141,6 +142,7 @@ def run(args, verbose=False, exception=False, **kwargs):\n             raise RuntimeError(err)\n         sys.exit(err)\n \n+\n def stage0_data(rust_root):\n     nightlies = os.path.join(rust_root, \"src/stage0.txt\")\n     data = {}\n@@ -153,11 +155,13 @@ def stage0_data(rust_root):\n             data[a] = b\n     return data\n \n+\n def format_build_time(duration):\n     return str(datetime.timedelta(seconds=int(duration)))\n \n \n class RustBuild(object):\n+\n     def download_stage0(self):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, self.stage0_date())\n@@ -172,11 +176,13 @@ def download_stage0(self):\n             self.print_what_it_means_to_bootstrap()\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n-            filename = \"rust-std-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            filename = \"rust-std-{}-{}.tar.gz\".format(\n+                rustc_channel, self.build)\n             url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n-                get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n+                get(\"{}/{}\".format(url, filename),\n+                    tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(),\n                    match=\"rust-std-\" + self.build,\n                    verbose=self.verbose)\n@@ -185,20 +191,25 @@ def download_stage0(self):\n             url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n-                get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-            unpack(tarball, self.bin_root(), match=\"rustc\", verbose=self.verbose)\n+                get(\"{}/{}\".format(url, filename),\n+                    tarball, verbose=self.verbose)\n+            unpack(tarball, self.bin_root(),\n+                   match=\"rustc\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/rustc\")\n             self.fix_executable(self.bin_root() + \"/bin/rustdoc\")\n             with open(self.rustc_stamp(), 'w') as f:\n                 f.write(self.stage0_date())\n \n             if \"pc-windows-gnu\" in self.build:\n-                filename = \"rust-mingw-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+                filename = \"rust-mingw-{}-{}.tar.gz\".format(\n+                    rustc_channel, self.build)\n                 url = self._download_url + \"/dist/\" + self.stage0_date()\n                 tarball = os.path.join(rustc_cache, filename)\n                 if not os.path.exists(tarball):\n-                    get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-                unpack(tarball, self.bin_root(), match=\"rust-mingw\", verbose=self.verbose)\n+                    get(\"{}/{}\".format(url, filename),\n+                        tarball, verbose=self.verbose)\n+                unpack(tarball, self.bin_root(),\n+                       match=\"rust-mingw\", verbose=self.verbose)\n \n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or self.cargo_out_of_date()):\n@@ -207,8 +218,10 @@ def download_stage0(self):\n             url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n-                get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-            unpack(tarball, self.bin_root(), match=\"cargo\", verbose=self.verbose)\n+                get(\"{}/{}\".format(url, filename),\n+                    tarball, verbose=self.verbose)\n+            unpack(tarball, self.bin_root(),\n+                   match=\"cargo\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/cargo\")\n             with open(self.cargo_stamp(), 'w') as f:\n                 f.write(self.stage0_date())\n@@ -218,7 +231,8 @@ def fix_executable(self, fname):\n \n         default_encoding = sys.getdefaultencoding()\n         try:\n-            ostype = subprocess.check_output(['uname', '-s']).strip().decode(default_encoding)\n+            ostype = subprocess.check_output(\n+                ['uname', '-s']).strip().decode(default_encoding)\n         except (subprocess.CalledProcessError, WindowsError):\n             return\n \n@@ -234,7 +248,8 @@ def fix_executable(self, fname):\n         print(\"info: you seem to be running NixOS. Attempting to patch \" + fname)\n \n         try:\n-            interpreter = subprocess.check_output([\"patchelf\", \"--print-interpreter\", fname])\n+            interpreter = subprocess.check_output(\n+                [\"patchelf\", \"--print-interpreter\", fname])\n             interpreter = interpreter.strip().decode(default_encoding)\n         except subprocess.CalledProcessError as e:\n             print(\"warning: failed to call patchelf: %s\" % e)\n@@ -243,7 +258,8 @@ def fix_executable(self, fname):\n         loader = interpreter.split(\"/\")[-1]\n \n         try:\n-            ldd_output = subprocess.check_output(['ldd', '/run/current-system/sw/bin/sh'])\n+            ldd_output = subprocess.check_output(\n+                ['ldd', '/run/current-system/sw/bin/sh'])\n             ldd_output = ldd_output.strip().decode(default_encoding)\n         except subprocess.CalledProcessError as e:\n             print(\"warning: unable to call ldd: %s\" % e)\n@@ -261,7 +277,8 @@ def fix_executable(self, fname):\n         correct_interpreter = loader_path + loader\n \n         try:\n-            subprocess.check_output([\"patchelf\", \"--set-interpreter\", correct_interpreter, fname])\n+            subprocess.check_output(\n+                [\"patchelf\", \"--set-interpreter\", correct_interpreter, fname])\n         except subprocess.CalledProcessError as e:\n             print(\"warning: failed to call patchelf: %s\" % e)\n             return\n@@ -371,16 +388,16 @@ def build_bootstrap(self):\n         env[\"CARGO_TARGET_DIR\"] = build_dir\n         env[\"RUSTC\"] = self.rustc()\n         env[\"LD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n-                                 (os.pathsep + env[\"LD_LIBRARY_PATH\"]) \\\n-                                 if \"LD_LIBRARY_PATH\" in env else \"\"\n+            (os.pathsep + env[\"LD_LIBRARY_PATH\"]) \\\n+            if \"LD_LIBRARY_PATH\" in env else \"\"\n         env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n-                                   (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n-                                   if \"DYLD_LIBRARY_PATH\" in env else \"\"\n+            (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n+            if \"DYLD_LIBRARY_PATH\" in env else \"\"\n         env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n-                                   (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n-                                   if \"LIBRARY_PATH\" in env else \"\"\n+            (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n+            if \"LIBRARY_PATH\" in env else \"\"\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n-                      os.pathsep + env[\"PATH\"]\n+            os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):\n             raise Exception(\"no cargo executable found at `%s`\" % self.cargo())\n         args = [self.cargo(), \"build\", \"--manifest-path\",\n@@ -404,8 +421,10 @@ def build_triple(self):\n         if config:\n             return config\n         try:\n-            ostype = subprocess.check_output(['uname', '-s']).strip().decode(default_encoding)\n-            cputype = subprocess.check_output(['uname', '-m']).strip().decode(default_encoding)\n+            ostype = subprocess.check_output(\n+                ['uname', '-s']).strip().decode(default_encoding)\n+            cputype = subprocess.check_output(\n+                ['uname', '-m']).strip().decode(default_encoding)\n         except (subprocess.CalledProcessError, OSError):\n             if sys.platform == 'win32':\n                 return 'x86_64-pc-windows-msvc'\n@@ -417,7 +436,8 @@ def build_triple(self):\n         # The goal here is to come up with the same triple as LLVM would,\n         # at least for the subset of platforms we're willing to target.\n         if ostype == 'Linux':\n-            os_from_sp = subprocess.check_output(['uname', '-o']).strip().decode(default_encoding)\n+            os_from_sp = subprocess.check_output(\n+                ['uname', '-o']).strip().decode(default_encoding)\n             if os_from_sp == 'Android':\n                 ostype = 'linux-android'\n             else:\n@@ -441,7 +461,7 @@ def build_triple(self):\n             # must be used instead.\n             try:\n                 cputype = subprocess.check_output(['isainfo',\n-                  '-k']).strip().decode(default_encoding)\n+                                                   '-k']).strip().decode(default_encoding)\n             except (subprocess.CalledProcessError, OSError):\n                 err = \"isainfo not found\"\n                 if self.verbose:\n@@ -534,8 +554,8 @@ def build_triple(self):\n \n     def update_submodules(self):\n         if (not os.path.exists(os.path.join(self.rust_root, \".git\"))) or \\\n-            self.get_toml('submodules') == \"false\" or \\\n-            self.get_mk('CFG_DISABLE_MANAGE_SUBMODULES') == \"1\":\n+                self.get_toml('submodules') == \"false\" or \\\n+                self.get_mk('CFG_DISABLE_MANAGE_SUBMODULES') == \"1\":\n             return\n \n         print('Updating submodules')\n@@ -547,10 +567,10 @@ def update_submodules(self):\n                 self.rust_root, \".gitmodules\"), \"--get-regexp\", \"path\"]).splitlines()]\n         for module in submodules:\n             if module.endswith(b\"llvm\") and \\\n-                (self.get_toml('llvm-config') or self.get_mk('CFG_LLVM_ROOT')):\n+                    (self.get_toml('llvm-config') or self.get_mk('CFG_LLVM_ROOT')):\n                 continue\n             if module.endswith(b\"jemalloc\") and \\\n-                (self.get_toml('jemalloc') or self.get_mk('CFG_JEMALLOC_ROOT')):\n+                    (self.get_toml('jemalloc') or self.get_mk('CFG_JEMALLOC_ROOT')):\n                 continue\n             run([\"git\", \"submodule\", \"update\",\n                       \"--init\", module], cwd=self.rust_root)\n@@ -611,7 +631,7 @@ def bootstrap():\n     if rb.use_vendored_sources:\n         if not os.path.exists('.cargo'):\n             os.makedirs('.cargo')\n-        with open('.cargo/config','w') as f:\n+        with open('.cargo/config', 'w') as f:\n             f.write(\"\"\"\n                 [source.crates-io]\n                 replace-with = 'vendored-sources'\n@@ -651,21 +671,25 @@ def bootstrap():\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     run(args, env=env, verbose=rb.verbose)\n \n+\n def main():\n     start_time = time()\n-    help_triggered = ('-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n+    help_triggered = (\n+        '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n     try:\n         bootstrap()\n         if not help_triggered:\n-            print(\"Build completed successfully in %s\" % format_build_time(time() - start_time))\n+            print(\"Build completed successfully in %s\" %\n+                  format_build_time(time() - start_time))\n     except (SystemExit, KeyboardInterrupt) as e:\n         if hasattr(e, 'code') and isinstance(e.code, int):\n             exit_code = e.code\n         else:\n             exit_code = 1\n             print(e)\n         if not help_triggered:\n-            print(\"Build completed unsuccessfully in %s\" % format_build_time(time() - start_time))\n+            print(\"Build completed unsuccessfully in %s\" %\n+                  format_build_time(time() - start_time))\n         sys.exit(exit_code)\n \n if __name__ == '__main__':"}]}