{"sha": "d8a3fc4d71bae720cc2534ff5b97164f47622e12", "node_id": "C_kwDOAAsO6NoAKGQ4YTNmYzRkNzFiYWU3MjBjYzI1MzRmZjViOTcxNjRmNDc2MjJlMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T23:18:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T23:18:03Z"}, "message": "Auto merge of #95643 - WaffleLapkin:ptr_convenience, r=joshtriplett\n\nAdd convenience byte offset/check align functions to pointers\n\nThis PR adds the following APIs:\n```rust\nimpl *const T {\n    // feature gates `pointer_byte_offsets` and `const_pointer_byte_offsets\n    pub const unsafe fn byte_offset(self, count: isize) -> Self;\n    pub const fn wrapping_byte_offset(self, count: isize) -> Self;\n    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize;\n    pub const unsafe fn byte_add(self, count: usize) -> Self;\n    pub const unsafe fn byte_sub(self, count: usize) -> Self;\n    pub const fn wrapping_byte_add(self, count: usize) -> Self;\n    pub const fn wrapping_byte_sub(self, count: usize) -> Self;\n\n    // feature gate `pointer_is_aligned`\n    pub fn is_aligned(self) -> bool where T: Sized;\n    pub fn is_aligned_to(self, align: usize) -> bool;\n}\n// ... and the same for` *mut T`\n```\n\nNote that all functions except `is_aligned` do **not** require `T: Sized` as their pointee-sized-offset counterparts.\n\ncc `@oli-obk` (you may want to check that I've correctly placed `const`s)\ncc `@RalfJung`", "tree": {"sha": "683bdc9c71844589da8f028471e762eb03d77dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/683bdc9c71844589da8f028471e762eb03d77dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8a3fc4d71bae720cc2534ff5b97164f47622e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a3fc4d71bae720cc2534ff5b97164f47622e12", "html_url": "https://github.com/rust-lang/rust/commit/d8a3fc4d71bae720cc2534ff5b97164f47622e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8a3fc4d71bae720cc2534ff5b97164f47622e12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd282d7f75da9080fda0f1740a729516e7fbec68", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd282d7f75da9080fda0f1740a729516e7fbec68", "html_url": "https://github.com/rust-lang/rust/commit/cd282d7f75da9080fda0f1740a729516e7fbec68"}, {"sha": "03d45699390421d6a27f5ae2dc10077b38d950fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d45699390421d6a27f5ae2dc10077b38d950fe", "html_url": "https://github.com/rust-lang/rust/commit/03d45699390421d6a27f5ae2dc10077b38d950fe"}], "stats": {"total": 339, "additions": 337, "deletions": 2}, "files": [{"sha": "f26fdc74ce1618442117085e941d85d647c7b688", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 167, "deletions": 1, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/d8a3fc4d71bae720cc2534ff5b97164f47622e12/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a3fc4d71bae720cc2534ff5b97164f47622e12/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=d8a3fc4d71bae720cc2534ff5b97164f47622e12", "patch": "@@ -455,6 +455,26 @@ impl<T: ?Sized> *const T {\n         unsafe { intrinsics::offset(self, count) }\n     }\n \n+    /// Calculates the offset from a pointer in bytes.\n+    ///\n+    /// `count` is in units of **bytes**.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [offset][pointer::offset] on it. See that method for documentation\n+    /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const unsafe fn byte_offset(self, count: isize) -> Self {\n+        // SAFETY: the caller must uphold the safety contract for `offset`.\n+        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n+        from_raw_parts::<T>(this, metadata(self))\n+    }\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     ///\n     /// `count` is in units of T; e.g., a `count` of 3 represents a pointer\n@@ -517,6 +537,24 @@ impl<T: ?Sized> *const T {\n         unsafe { intrinsics::arith_offset(self, count) }\n     }\n \n+    /// Calculates the offset from a pointer in bytes using wrapping arithmetic.\n+    ///\n+    /// `count` is in units of **bytes**.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [wrapping_offset][pointer::wrapping_offset] on it. See that method\n+    /// for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n+        from_raw_parts::<T>(self.cast::<u8>().wrapping_offset(count).cast::<()>(), metadata(self))\n+    }\n+\n     /// Calculates the distance between two pointers. The returned value is in\n     /// units of T: the distance in bytes divided by `mem::size_of::<T>()`.\n     ///\n@@ -611,6 +649,23 @@ impl<T: ?Sized> *const T {\n         unsafe { intrinsics::ptr_offset_from(self, origin) }\n     }\n \n+    /// Calculates the distance between two pointers. The returned value is in\n+    /// units of **bytes**.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [offset_from][pointer::offset_from] on it. See that method for\n+    /// documentation and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation considers only the data pointers,\n+    /// ignoring the metadata.\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n+        // SAFETY: the caller must uphold the safety contract for `offset_from`.\n+        unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n+    }\n+\n     /// Calculates the distance between two pointers, *where it's known that\n     /// `self` is equal to or greater than `origin`*. The returned value is in\n     /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n@@ -813,6 +868,26 @@ impl<T: ?Sized> *const T {\n         unsafe { self.offset(count as isize) }\n     }\n \n+    /// Calculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`).\n+    ///\n+    /// `count` is in units of bytes.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [add][pointer::add] on it. See that method for documentation\n+    /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const unsafe fn byte_add(self, count: usize) -> Self {\n+        // SAFETY: the caller must uphold the safety contract for `add`.\n+        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n+        from_raw_parts::<T>(this, metadata(self))\n+    }\n+\n     /// Calculates the offset from a pointer (convenience for\n     /// `.offset((count as isize).wrapping_neg())`).\n     ///\n@@ -877,6 +952,27 @@ impl<T: ?Sized> *const T {\n         unsafe { self.offset((count as isize).wrapping_neg()) }\n     }\n \n+    /// Calculates the offset from a pointer in bytes (convenience for\n+    /// `.byte_offset((count as isize).wrapping_neg())`).\n+    ///\n+    /// `count` is in units of bytes.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [sub][pointer::sub] on it. See that method for documentation\n+    /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const unsafe fn byte_sub(self, count: usize) -> Self {\n+        // SAFETY: the caller must uphold the safety contract for `sub`.\n+        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n+        from_raw_parts::<T>(this, metadata(self))\n+    }\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     /// (convenience for `.wrapping_offset(count as isize)`)\n     ///\n@@ -939,6 +1035,24 @@ impl<T: ?Sized> *const T {\n         self.wrapping_offset(count as isize)\n     }\n \n+    /// Calculates the offset from a pointer in bytes using wrapping arithmetic.\n+    /// (convenience for `.wrapping_byte_offset(count as isize)`)\n+    ///\n+    /// `count` is in units of bytes.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [wrapping_add][pointer::wrapping_add] on it. See that method for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const fn wrapping_byte_add(self, count: usize) -> Self {\n+        from_raw_parts::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n+    }\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     /// (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n     ///\n@@ -1001,6 +1115,24 @@ impl<T: ?Sized> *const T {\n         self.wrapping_offset((count as isize).wrapping_neg())\n     }\n \n+    /// Calculates the offset from a pointer in bytes using wrapping arithmetic.\n+    /// (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n+    ///\n+    /// `count` is in units of bytes.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [wrapping_sub][pointer::wrapping_sub] on it. See that method for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n+        from_raw_parts::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n+    }\n+\n     /// Reads the value from `self` without moving it. This leaves the\n     /// memory in `self` unchanged.\n     ///\n@@ -1154,12 +1286,46 @@ impl<T: ?Sized> *const T {\n         }\n \n         // SAFETY:\n-        // It is permisseble for `align_offset` to always return `usize::MAX`,\n+        // It is permissible for `align_offset` to always return `usize::MAX`,\n         // algorithm correctness can not depend on `align_offset` returning non-max values.\n         //\n         // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n         unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n     }\n+\n+    /// Returns whether the pointer is properly aligned for `T`.\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n+    pub fn is_aligned(self) -> bool\n+    where\n+        T: Sized,\n+    {\n+        self.is_aligned_to(core::mem::align_of::<T>())\n+    }\n+\n+    /// Returns whether the pointer is aligned to `align`.\n+    ///\n+    /// For non-`Sized` pointees this operation considers only the data pointer,\n+    /// ignoring the metadata.\n+    ///\n+    /// # Panics\n+    ///\n+    /// The function panics if `align` is not a power-of-two (this includes 0).\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n+    pub fn is_aligned_to(self, align: usize) -> bool {\n+        if !align.is_power_of_two() {\n+            panic!(\"is_aligned_to: align is not a power-of-two\");\n+        }\n+\n+        // SAFETY: `is_power_of_two()` will return `false` for zero.\n+        unsafe { core::intrinsics::assume(align != 0) };\n+\n+        // Cast is needed for `T: !Sized`\n+        self.cast::<u8>().addr() % align == 0\n+    }\n }\n \n impl<T> *const [T] {"}, {"sha": "37cf2ef4bfbb5f5d0c34fe9d52d1a41d47433963", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 170, "deletions": 1, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/d8a3fc4d71bae720cc2534ff5b97164f47622e12/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a3fc4d71bae720cc2534ff5b97164f47622e12/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=d8a3fc4d71bae720cc2534ff5b97164f47622e12", "patch": "@@ -467,6 +467,26 @@ impl<T: ?Sized> *mut T {\n         unsafe { intrinsics::offset(self, count) as *mut T }\n     }\n \n+    /// Calculates the offset from a pointer in bytes.\n+    ///\n+    /// `count` is in units of **bytes**.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [offset][pointer::offset] on it. See that method for documentation\n+    /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const unsafe fn byte_offset(self, count: isize) -> Self {\n+        // SAFETY: the caller must uphold the safety contract for `offset`.\n+        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n+        from_raw_parts_mut::<T>(this, metadata(self))\n+    }\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     /// `count` is in units of T; e.g., a `count` of 3 represents a pointer\n     /// offset of `3 * size_of::<T>()` bytes.\n@@ -528,6 +548,27 @@ impl<T: ?Sized> *mut T {\n         unsafe { intrinsics::arith_offset(self, count) as *mut T }\n     }\n \n+    /// Calculates the offset from a pointer in bytes using wrapping arithmetic.\n+    ///\n+    /// `count` is in units of **bytes**.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [wrapping_offset][pointer::wrapping_offset] on it. See that method\n+    /// for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n+        from_raw_parts_mut::<T>(\n+            self.cast::<u8>().wrapping_offset(count).cast::<()>(),\n+            metadata(self),\n+        )\n+    }\n+\n     /// Returns `None` if the pointer is null, or else returns a unique reference to\n     /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]\n     /// must be used instead.\n@@ -787,6 +828,23 @@ impl<T: ?Sized> *mut T {\n         unsafe { (self as *const T).offset_from(origin) }\n     }\n \n+    /// Calculates the distance between two pointers. The returned value is in\n+    /// units of **bytes**.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [offset_from][pointer::offset_from] on it. See that method for\n+    /// documentation and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation considers only the data pointers,\n+    /// ignoring the metadata.\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n+        // SAFETY: the caller must uphold the safety contract for `offset_from`.\n+        unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n+    }\n+\n     /// Calculates the distance between two pointers, *where it's known that\n     /// `self` is equal to or greater than `origin`*. The returned value is in\n     /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n@@ -922,6 +980,26 @@ impl<T: ?Sized> *mut T {\n         unsafe { self.offset(count as isize) }\n     }\n \n+    /// Calculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`).\n+    ///\n+    /// `count` is in units of bytes.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [add][pointer::add] on it. See that method for documentation\n+    /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const unsafe fn byte_add(self, count: usize) -> Self {\n+        // SAFETY: the caller must uphold the safety contract for `add`.\n+        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n+        from_raw_parts_mut::<T>(this, metadata(self))\n+    }\n+\n     /// Calculates the offset from a pointer (convenience for\n     /// `.offset((count as isize).wrapping_neg())`).\n     ///\n@@ -986,6 +1064,27 @@ impl<T: ?Sized> *mut T {\n         unsafe { self.offset((count as isize).wrapping_neg()) }\n     }\n \n+    /// Calculates the offset from a pointer in bytes (convenience for\n+    /// `.byte_offset((count as isize).wrapping_neg())`).\n+    ///\n+    /// `count` is in units of bytes.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [sub][pointer::sub] on it. See that method for documentation\n+    /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const unsafe fn byte_sub(self, count: usize) -> Self {\n+        // SAFETY: the caller must uphold the safety contract for `sub`.\n+        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n+        from_raw_parts_mut::<T>(this, metadata(self))\n+    }\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     /// (convenience for `.wrapping_offset(count as isize)`)\n     ///\n@@ -1048,6 +1147,24 @@ impl<T: ?Sized> *mut T {\n         self.wrapping_offset(count as isize)\n     }\n \n+    /// Calculates the offset from a pointer in bytes using wrapping arithmetic.\n+    /// (convenience for `.wrapping_byte_offset(count as isize)`)\n+    ///\n+    /// `count` is in units of bytes.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [wrapping_add][pointer::wrapping_add] on it. See that method for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const fn wrapping_byte_add(self, count: usize) -> Self {\n+        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n+    }\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     /// (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n     ///\n@@ -1110,6 +1227,24 @@ impl<T: ?Sized> *mut T {\n         self.wrapping_offset((count as isize).wrapping_neg())\n     }\n \n+    /// Calculates the offset from a pointer in bytes using wrapping arithmetic.\n+    /// (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n+    ///\n+    /// `count` is in units of bytes.\n+    ///\n+    /// This is purely a convenience for casting to a `u8` pointer and\n+    /// using [wrapping_sub][pointer::wrapping_sub] on it. See that method for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[must_use]\n+    #[inline(always)]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n+        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n+    }\n+\n     /// Reads the value from `self` without moving it. This leaves the\n     /// memory in `self` unchanged.\n     ///\n@@ -1420,12 +1555,46 @@ impl<T: ?Sized> *mut T {\n         }\n \n         // SAFETY:\n-        // It is permisseble for `align_offset` to always return `usize::MAX`,\n+        // It is permissible for `align_offset` to always return `usize::MAX`,\n         // algorithm correctness can not depend on `align_offset` returning non-max values.\n         //\n         // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n         unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n     }\n+\n+    /// Returns whether the pointer is properly aligned for `T`.\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n+    pub fn is_aligned(self) -> bool\n+    where\n+        T: Sized,\n+    {\n+        self.is_aligned_to(core::mem::align_of::<T>())\n+    }\n+\n+    /// Returns whether the pointer is aligned to `align`.\n+    ///\n+    /// For non-`Sized` pointees this operation considers only the data pointer,\n+    /// ignoring the metadata.\n+    ///\n+    /// # Panics\n+    ///\n+    /// The function panics if `align` is not a power-of-two (this includes 0).\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n+    pub fn is_aligned_to(self, align: usize) -> bool {\n+        if !align.is_power_of_two() {\n+            panic!(\"is_aligned_to: align is not a power-of-two\");\n+        }\n+\n+        // SAFETY: `is_power_of_two()` will return `false` for zero.\n+        unsafe { core::intrinsics::assume(align != 0) };\n+\n+        // Cast is needed for `T: !Sized`\n+        self.cast::<u8>().addr() % align == 0\n+    }\n }\n \n impl<T> *mut [T] {"}]}