{"sha": "de468c8cd2f55124f98ae67941bc4c11dee92c14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDY4YzhjZDJmNTUxMjRmOThhZTY3OTQxYmM0YzExZGVlOTJjMTQ=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-03-26T18:07:14Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-03-26T18:07:14Z"}, "message": "Added more missing lifetime annotations", "tree": {"sha": "12bed608bd8ff2cb8d3557390fbf44eb77c4e4e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12bed608bd8ff2cb8d3557390fbf44eb77c4e4e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de468c8cd2f55124f98ae67941bc4c11dee92c14", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de468c8cd2f55124f98ae67941bc4c11dee92c14", "html_url": "https://github.com/rust-lang/rust/commit/de468c8cd2f55124f98ae67941bc4c11dee92c14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de468c8cd2f55124f98ae67941bc4c11dee92c14/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c88a20d171b407aa6a88b516c213e93b7dda5c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/c88a20d171b407aa6a88b516c213e93b7dda5c94", "html_url": "https://github.com/rust-lang/rust/commit/c88a20d171b407aa6a88b516c213e93b7dda5c94"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "0f393dee597790ed874ed64819a4140118f78314", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de468c8cd2f55124f98ae67941bc4c11dee92c14/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de468c8cd2f55124f98ae67941bc4c11dee92c14/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=de468c8cd2f55124f98ae67941bc4c11dee92c14", "patch": "@@ -2240,7 +2240,7 @@ pub mod traits {\n #[cfg(test)]\n pub mod traits {}\n \n-pub trait StrSlice {\n+pub trait StrSlice<'self> {\n     fn all(&self, it: &fn(char) -> bool) -> bool;\n     fn any(&self, it: &fn(char) -> bool) -> bool;\n     fn contains(&self, needle: &'a str) -> bool;\n@@ -2260,9 +2260,9 @@ pub trait StrSlice {\n     fn len(&self) -> uint;\n     fn char_len(&self) -> uint;\n     fn slice(&self, begin: uint, end: uint) -> &'self str;\n-    fn each_split(&self, sepfn: &fn(char) -> bool, it: &fn(&str) -> bool);\n-    fn each_split_char(&self, sep: char, it: &fn(&str) -> bool);\n-    fn each_split_str(&self, sep: &'a str, it: &fn(&str) -> bool);\n+    fn each_split(&self, sepfn: &fn(char) -> bool, it: &fn(&'self str) -> bool);\n+    fn each_split_char(&self, sep: char, it: &fn(&'self str) -> bool);\n+    fn each_split_str(&self, sep: &'a str, it: &fn(&'self str) -> bool);\n     fn starts_with(&self, needle: &'a str) -> bool;\n     fn substr(&self, begin: uint, n: uint) -> &'self str;\n     fn to_lower(&self) -> ~str;\n@@ -2283,7 +2283,7 @@ pub trait StrSlice {\n }\n \n /// Extension methods for strings\n-impl StrSlice for &'self str {\n+impl StrSlice<'self> for &'self str {\n     /**\n      * Return true if a predicate matches all characters or if the string\n      * contains no characters\n@@ -2382,22 +2382,22 @@ impl StrSlice for &'self str {\n     }\n     /// Splits a string into substrings using a character function\n     #[inline]\n-    fn each_split(&self, sepfn: &fn(char) -> bool, it: &fn(&str) -> bool) {\n+    fn each_split(&self, sepfn: &fn(char) -> bool, it: &fn(&'self str) -> bool) {\n         each_split(*self, sepfn, it)\n     }\n     /**\n      * Splits a string into substrings at each occurrence of a given character\n      */\n     #[inline]\n-    fn each_split_char(&self, sep: char, it: &fn(&str) -> bool) {\n+    fn each_split_char(&self, sep: char, it: &fn(&'self str) -> bool) {\n         each_split_char(*self, sep, it)\n     }\n     /**\n      * Splits a string into a vector of the substrings separated by a given\n      * string\n      */\n     #[inline]\n-    fn each_split_str(&self, sep: &'a str, it: &fn(&str) -> bool)  {\n+    fn each_split_str(&self, sep: &'a str, it: &fn(&'self str) -> bool)  {\n         each_split_str(*self, sep, it)\n     }\n     /// Returns true if one string starts with another"}]}