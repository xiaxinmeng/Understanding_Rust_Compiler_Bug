{"sha": "27c3631d826aaad964f42ee94f26f9e80d658e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzM2MzFkODI2YWFhZDk2NGY0MmVlOTRmMjZmOWU4MGQ2NThlM2Y=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-14T14:10:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-14T14:10:12Z"}, "message": "Rollup merge of #56708 - oli-obk:stability_internal_const_fn, r=alexcrichton\n\nRemove some unnecessary feature gates\n\nfixes #56585\n\ncc @jethrogb", "tree": {"sha": "48ca19baf194148a2d4f9d7ee3e5f4151181fc68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48ca19baf194148a2d4f9d7ee3e5f4151181fc68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c3631d826aaad964f42ee94f26f9e80d658e3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcE7nECRBK7hj4Ov3rIwAAdHIIALHfj6hhuspd2PcSaFHL3Rw3\nSInWcwQ2wHpWQu3RPfOe9zyNgI2bA0XsgrZGFCgLCuefp6E1Ri17/pIc/gL3BVgV\n64Nx/ZJJZZHHdRFCYusHEmi0lH4z9v1o5DWzkhfjSZLqZGfSLoaX5OQj33V990Ee\nPPL4kRCmmQQ+QDgCX9igX0xQ85tmIg88YLUtLb3eqBka64MDqiCkKthhXTW9bMV2\n9uQkC3bcM56nfvzmYOZyVn7niCSDsCPprXlARyOjg/ttF/WB1dQIjDi1hnQkWm6R\nivcYv3pz5cLqWpRz5CWcB+gIgbwu2+rZsWDEZhaqlDOdvUXkrrAPUmpmB2ruJDg=\n=Pyi7\n-----END PGP SIGNATURE-----\n", "payload": "tree 48ca19baf194148a2d4f9d7ee3e5f4151181fc68\nparent 3e17988a537a5aaa4c02d8ba586b5cfe58c73aae\nparent 5457b19fe9ecc936129755005de439d44e27a4ec\nauthor kennytm <kennytm@gmail.com> 1544796612 +0800\ncommitter GitHub <noreply@github.com> 1544796612 +0800\n\nRollup merge of #56708 - oli-obk:stability_internal_const_fn, r=alexcrichton\n\nRemove some unnecessary feature gates\n\nfixes #56585\n\ncc @jethrogb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c3631d826aaad964f42ee94f26f9e80d658e3f", "html_url": "https://github.com/rust-lang/rust/commit/27c3631d826aaad964f42ee94f26f9e80d658e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c3631d826aaad964f42ee94f26f9e80d658e3f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e17988a537a5aaa4c02d8ba586b5cfe58c73aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e17988a537a5aaa4c02d8ba586b5cfe58c73aae", "html_url": "https://github.com/rust-lang/rust/commit/3e17988a537a5aaa4c02d8ba586b5cfe58c73aae"}, {"sha": "5457b19fe9ecc936129755005de439d44e27a4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5457b19fe9ecc936129755005de439d44e27a4ec", "html_url": "https://github.com/rust-lang/rust/commit/5457b19fe9ecc936129755005de439d44e27a4ec"}], "stats": {"total": 27, "additions": 1, "deletions": 26}, "files": [{"sha": "24965ff69318435e874eaad52f9dc8a1b58edcc3", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -26,7 +26,6 @@ const fn done<T>() -> *mut Arc<T> { 1_usize as *mut _ }\n unsafe impl<T> Sync for Lazy<T> {}\n \n impl<T> Lazy<T> {\n-    #[unstable(feature = \"sys_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Lazy<T> {\n         Lazy {\n             lock: Mutex::new(),"}, {"sha": "0febbe5694bc4f568e9bdcf671dc0483cdf9c716", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -271,6 +271,7 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n+#![cfg_attr(not(stage0), feature(min_const_unsafe_fn))]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "bf32c712216bc35ab84f1839a1bf84a30195254f", "filename": "src/libstd/sys/sgx/abi/mem.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -34,13 +34,6 @@ fn image_base() -> u64 {\n     base\n }\n \n-pub fn is_enclave_range(p: *const u8, len: usize) -> bool {\n-    let start=p as u64;\n-    let end=start + (len as u64);\n-    start >= image_base() &&\n-        end <= image_base() + (unsafe { ENCLAVE_SIZE } as u64) // unsafe ok: link-time constant\n-}\n-\n pub fn is_user_range(p: *const u8, len: usize) -> bool {\n     let start=p as u64;\n     let end=start + (len as u64);"}, {"sha": "d1d180e48251f90fcae1d1feeee1f957e03c3220", "filename": "src/libstd/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -33,14 +33,6 @@ pub fn read(fd: Fd, buf: &mut [u8]) -> IoResult<usize> {\n     }\n }\n \n-pub fn read_alloc(fd: Fd) -> IoResult<Vec<u8>> {\n-    unsafe {\n-        let mut userbuf = alloc::User::<ByteBuffer>::uninitialized();\n-        raw::read_alloc(fd, userbuf.as_raw_mut_ptr()).from_sgx_result()?;\n-        Ok(copy_user_buffer(&userbuf))\n-    }\n-}\n-\n pub fn write(fd: Fd, buf: &[u8]) -> IoResult<usize> {\n     unsafe {\n         let userbuf = alloc::User::new_from_enclave(buf);"}, {"sha": "940f50f25b81a5e9e3c1b59277a69d4d3d984b28", "filename": "src/libstd/sys/sgx/condvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -18,7 +18,6 @@ pub struct Condvar {\n }\n \n impl Condvar {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Condvar {\n         Condvar { inner: SpinMutex::new(WaitVariable::new(())) }\n     }"}, {"sha": "994cf91eea0cd6e58e06a9ca48fbbbfe3d0046ea", "filename": "src/libstd/sys/sgx/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -20,7 +20,6 @@ pub struct Mutex {\n \n // Implementation according to \u201cOperating Systems: Three Easy Pieces\u201d, chapter 28\n impl Mutex {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Mutex {\n         Mutex { inner: SpinMutex::new(WaitVariable::new(false)) }\n     }\n@@ -79,7 +78,6 @@ pub struct ReentrantMutex {\n }\n \n impl ReentrantMutex {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn uninitialized() -> ReentrantMutex {\n         ReentrantMutex {\n             inner: SpinMutex::new(WaitVariable::new(ReentrantLock { owner: None, count: 0 }))"}, {"sha": "a1551dbb53b2ddb4de0eb5dd5438609811ea9ef4", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -21,7 +21,6 @@ pub struct RWLock {\n //unsafe impl Sync for RWLock {} // FIXME\n \n impl RWLock {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> RWLock {\n         RWLock {\n             readers: SpinMutex::new(WaitVariable::new(None)),"}, {"sha": "ef0def13eee882d4e91f5bd2c36b38940bdc6688", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -50,7 +50,6 @@ pub struct WaitVariable<T> {\n }\n \n impl<T> WaitVariable<T> {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new(var: T) -> Self {\n         WaitVariable {\n             queue: WaitQueue::new(),\n@@ -137,7 +136,6 @@ impl<'a, T> Drop for WaitGuard<'a, T> {\n }\n \n impl WaitQueue {\n-    #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Self {\n         WaitQueue {\n             inner: UnsafeList::new()\n@@ -255,7 +253,6 @@ mod unsafe_list {\n     }\n \n     impl<T> UnsafeList<T> {\n-        #[unstable(feature = \"sgx_internals\", issue = \"0\")] // FIXME: min_const_fn\n         pub const fn new() -> Self {\n             unsafe {\n                 UnsafeList {"}, {"sha": "b6f29dd5fc3d3184f6a528fcb36f70b64b3f1051", "filename": "src/libstd/sys_common/condvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fcondvar.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -25,7 +25,6 @@ impl Condvar {\n     ///\n     /// Behavior is undefined if the condition variable is moved after it is\n     /// first used with any of the functions below.\n-    #[unstable(feature = \"sys_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Condvar { Condvar(imp::Condvar::new()) }\n \n     /// Prepares the condition variable for use."}, {"sha": "c6d531c7a1ac59cbb3b641ea96fc645a3b2f6d2d", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -27,7 +27,6 @@ impl Mutex {\n     /// Also, until `init` is called, behavior is undefined if this\n     /// mutex is ever used reentrantly, i.e., `raw_lock` or `try_lock`\n     /// are called by the thread currently holding the lock.\n-    #[unstable(feature = \"sys_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> Mutex { Mutex(imp::Mutex::new()) }\n \n     /// Prepare the mutex for use."}, {"sha": "71a4f01ec4cab9f2d3edcee78af3373f2484e24f", "filename": "src/libstd/sys_common/rwlock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c3631d826aaad964f42ee94f26f9e80d658e3f/src%2Flibstd%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Frwlock.rs?ref=27c3631d826aaad964f42ee94f26f9e80d658e3f", "patch": "@@ -22,7 +22,6 @@ impl RWLock {\n     ///\n     /// Behavior is undefined if the reader-writer lock is moved after it is\n     /// first used with any of the functions below.\n-    #[unstable(feature = \"sys_internals\", issue = \"0\")] // FIXME: min_const_fn\n     pub const fn new() -> RWLock { RWLock(imp::RWLock::new()) }\n \n     /// Acquires shared access to the underlying lock, blocking the current"}]}