{"sha": "d24026bb6dbf33f022b9dd1daffeeab2c9f7d117", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNDAyNmJiNmRiZjMzZjAyMmI5ZGQxZGFmZmVlYWIyYzlmN2QxMTc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-09T02:24:57Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-09T02:24:57Z"}, "message": "Fix broken link\n\n`write` is ambiguous because there's also a macro called `write`.\n\nAlso removed unnecessary and potentially confusing link to a function in\nits own docs.", "tree": {"sha": "fd2ebe949c821dd8aa89cc9027e034d0b6ae5154", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd2ebe949c821dd8aa89cc9027e034d0b6ae5154"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d24026bb6dbf33f022b9dd1daffeeab2c9f7d117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d24026bb6dbf33f022b9dd1daffeeab2c9f7d117", "html_url": "https://github.com/rust-lang/rust/commit/d24026bb6dbf33f022b9dd1daffeeab2c9f7d117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d24026bb6dbf33f022b9dd1daffeeab2c9f7d117/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "325acefee485d93c29da6e5641e823dd1d7de059", "url": "https://api.github.com/repos/rust-lang/rust/commits/325acefee485d93c29da6e5641e823dd1d7de059", "html_url": "https://github.com/rust-lang/rust/commit/325acefee485d93c29da6e5641e823dd1d7de059"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "eb31c739e834e3c401642e692a4816d3e2d4d38d", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d24026bb6dbf33f022b9dd1daffeeab2c9f7d117/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d24026bb6dbf33f022b9dd1daffeeab2c9f7d117/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=d24026bb6dbf33f022b9dd1daffeeab2c9f7d117", "patch": "@@ -129,7 +129,7 @@ mod mut_ptr;\n /// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n /// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n /// foo` counts as a use because it will cause the value to be dropped\n-/// again. [`write`] can be used to overwrite data without causing it to be\n+/// again. [`write()`] can be used to overwrite data without causing it to be\n /// dropped.\n ///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n@@ -639,7 +639,7 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// `*src` can violate memory safety. Note that assigning to `*src` counts as a\n /// use because it will attempt to drop the value at `*src`.\n ///\n-/// [`write`] can be used to overwrite data without causing it to be dropped.\n+/// [`write()`] can be used to overwrite data without causing it to be dropped.\n ///\n /// ```\n /// use std::ptr;\n@@ -878,7 +878,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// Overwrites a memory location with the given value without reading or\n /// dropping the old value.\n ///\n-/// Unlike [`write`], the pointer may be unaligned.\n+/// Unlike [`write()`], the pointer may be unaligned.\n ///\n /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it\n /// could leak allocations or resources, so care should be taken not to overwrite\n@@ -1085,7 +1085,7 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n /// Just like in C, whether an operation is volatile has no bearing whatsoever\n /// on questions involving concurrent access from multiple threads. Volatile\n /// accesses behave exactly like non-atomic accesses in that regard. In particular,\n-/// a race between a [`write_volatile`] and any other operation (reading or writing)\n+/// a race between a `write_volatile` and any other operation (reading or writing)\n /// on the same location is undefined behavior.\n ///\n /// # Examples"}]}