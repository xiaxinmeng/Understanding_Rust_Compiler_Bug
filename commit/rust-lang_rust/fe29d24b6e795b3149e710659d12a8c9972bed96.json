{"sha": "fe29d24b6e795b3149e710659d12a8c9972bed96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjlkMjRiNmU3OTViMzE0OWU3MTA2NTlkMTJhOGM5OTcyYmVkOTY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-11T13:26:36Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-11T13:26:36Z"}, "message": "Get rid of arm indices", "tree": {"sha": "12a1def74085ffe7104575f3ce56b1f6245f9bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12a1def74085ffe7104575f3ce56b1f6245f9bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe29d24b6e795b3149e710659d12a8c9972bed96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe29d24b6e795b3149e710659d12a8c9972bed96", "html_url": "https://github.com/rust-lang/rust/commit/fe29d24b6e795b3149e710659d12a8c9972bed96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe29d24b6e795b3149e710659d12a8c9972bed96/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5405f45274dc6dce53743092dc0679a5f43482d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5405f45274dc6dce53743092dc0679a5f43482d9", "html_url": "https://github.com/rust-lang/rust/commit/5405f45274dc6dce53743092dc0679a5f43482d9"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "3d8090b0a36ca167dab5120f1562edb7261fd99d", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=fe29d24b6e795b3149e710659d12a8c9972bed96", "patch": "@@ -233,7 +233,7 @@ tag decl_ {\n     decl_item(@item);\n }\n \n-type arm = rec(@pat pat, block block, hashmap[ident,def_id] index);\n+type arm = rec(@pat pat, block block);\n \n type elt = rec(mutability mut, @expr expr);\n type field = rec(mutability mut, ident ident, @expr expr);"}, {"sha": "10432389df4c19a3ad0d358e435502a82ef014c4", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=fe29d24b6e795b3149e710659d12a8c9972bed96", "patch": "@@ -1367,9 +1367,8 @@ fn parse_alt_expr(parser p) -> @ast.expr {\n                 expect(p, token.LPAREN);\n                 auto pat = parse_pat(p);\n                 expect(p, token.RPAREN);\n-                auto index = index_arm(pat);\n                 auto block = parse_block(p);\n-                arms += vec(rec(pat=pat, block=block, index=index));\n+                arms += vec(rec(pat=pat, block=block));\n             }\n \n             // FIXME: this is a vestigial form left over from\n@@ -1384,9 +1383,8 @@ fn parse_alt_expr(parser p) -> @ast.expr {\n                 p.bump();\n                 auto hi = p.get_hi_pos();\n                 auto pat = @spanned(lo, hi, ast.pat_wild(p.get_ann()));\n-                auto index = index_arm(pat);\n                 auto block = parse_block(p);\n-                arms += vec(rec(pat=pat, block=block, index=index));\n+                arms += vec(rec(pat=pat, block=block));\n             }\n             case (token.RBRACE) { /* empty */ }\n             case (?tok) {\n@@ -1626,25 +1624,6 @@ fn parse_source_stmt(parser p) -> @ast.stmt {\n     fail;\n }\n \n-fn index_arm(@ast.pat pat) -> hashmap[ast.ident,ast.def_id] {\n-    fn do_index_arm(&hashmap[ast.ident,ast.def_id] index, @ast.pat pat) {\n-        alt (pat.node) {\n-            case (ast.pat_bind(?i, ?def_id, _)) { index.insert(i, def_id); }\n-            case (ast.pat_wild(_)) { /* empty */ }\n-            case (ast.pat_lit(_, _)) { /* empty */ }\n-            case (ast.pat_tag(_, ?pats, _, _)) {\n-                for (@ast.pat p in pats) {\n-                    do_index_arm(index, p);\n-                }\n-            }\n-        }\n-    }\n-\n-    auto index = new_str_hash[ast.def_id]();\n-    do_index_arm(index, pat);\n-    ret index;\n-}\n-\n fn stmt_to_expr(@ast.stmt stmt) -> Option.t[@ast.expr] {\n     alt (stmt.node) {\n         case (ast.stmt_expr(?e,_)) { ret some[@ast.expr](e); }"}, {"sha": "c55858b81711d86fa7ff3fc74ba3ae99f7f4e83d", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=fe29d24b6e795b3149e710659d12a8c9972bed96", "patch": "@@ -892,7 +892,7 @@ fn fold_arm[ENV](&ENV env, &ast_fold[ENV] fld, &arm a) -> arm {\n     let ENV env_ = fld.update_env_for_arm(env, a);\n     auto ppat = fold_pat(env_, fld, a.pat);\n     auto bblock = fold_block(env_, fld, a.block);\n-    ret rec(pat=ppat, block=bblock, index=a.index);\n+    ret rec(pat=ppat, block=bblock);\n }\n \n fn fold_arg[ENV](&ENV env, &ast_fold[ENV] fld, &arg a) -> arg {"}, {"sha": "b386c51aa7bab3a73957c5bfa753dbe7a96c3307", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=fe29d24b6e795b3149e710659d12a8c9972bed96", "patch": "@@ -431,12 +431,7 @@ fn lookup_in_scope(&env e, list[scope] sc, ident id, namespace ns)\n \n             case (scope_arm(?a)) {\n                 if (ns == ns_value) {\n-                    alt (a.index.find(id)) {\n-                        case (some[def_id](?did)) {\n-                            ret some(ast.def_binding(did));\n-                        }\n-                        case (_) {}\n-                    }\n+                    ret lookup_in_pat(id, *a.pat);\n                 }\n             }\n         }\n@@ -470,6 +465,24 @@ fn lookup_in_ty_params(ident id, &vec[ast.ty_param] ty_params)\n     ret none[def];\n }\n \n+fn lookup_in_pat(ident id, &ast.pat pat) -> Option.t[def] {\n+    alt (pat.node) {\n+        case (ast.pat_bind(?name, ?defid, _)) {\n+            if (Str.eq(name, id)) { ret some(ast.def_binding(defid)); }\n+        }\n+        case (ast.pat_wild(_)) {}\n+        case (ast.pat_lit(_, _)) {}\n+        case (ast.pat_tag(_, ?pats, _, _)) {\n+            for (@ast.pat p in pats) {\n+                auto found = lookup_in_pat(id, *p);\n+                if (found != none[def]) { ret found; }\n+            }\n+        }\n+    }\n+    ret none[def];\n+}\n+\n+\n fn lookup_in_fn(ident id, &ast.fn_decl decl,\n                 &vec[ast.ty_param] ty_params, namespace ns) -> Option.t[def] {\n     if (ns == ns_value) {"}, {"sha": "7d04e84105d5b7cb0fa4e918153e3abde18e2906", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=fe29d24b6e795b3149e710659d12a8c9972bed96", "patch": "@@ -1463,8 +1463,7 @@ mod Pushdown {\n                     auto block_1 = pushdown_block(fcx, expected, arm_0.block);\n                     t = Demand.simple(fcx, e.span, t,\n                                       block_ty(fcx.ccx.tcx, block_1));\n-                    auto arm_1 = rec(pat=arm_0.pat, block=block_1,\n-                                     index=arm_0.index);\n+                    auto arm_1 = rec(pat=arm_0.pat, block=block_1);\n                     arms_1 += vec(arm_1);\n                 }\n                 e_1 = ast.expr_alt(discrim, arms_1, triv_ann(t));\n@@ -2266,7 +2265,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast.expr expr) -> @ast.expr {\n                                                        block_0);\n                 auto pat_1 = pats_1.(i);\n                 auto arm = arms.(i);\n-                auto arm_1 = rec(pat=pat_1, block=block_1, index=arm.index);\n+                auto arm_1 = rec(pat=pat_1, block=block_1);\n                 arms_1 += vec(arm_1);\n                 i += 1u;\n             }"}, {"sha": "1925dd151471095616d228a63c7523a92e612529", "filename": "src/comp/middle/typestate_check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29d24b6e795b3149e710659d12a8c9972bed96/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs?ref=fe29d24b6e795b3149e710659d12a8c9972bed96", "patch": "@@ -2184,8 +2184,7 @@ fn annotate_decl(&fn_info_map fm, &@decl d) -> @decl {\n fn annotate_alts(&fn_info_map fm, &vec[arm] alts) -> vec[arm] {\n     fn one(fn_info_map fm, &arm a) -> arm {\n         ret rec(pat=a.pat,\n-                 block=annotate_block(fm, a.block),\n-                 index=a.index);\n+                 block=annotate_block(fm, a.block));\n     }\n     auto f = bind one(fm,_);\n     ret Vec.map[arm, arm](f, alts);"}]}