{"sha": "a3fcaee5620d458af22682097c4ffb64b57c3327", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZmNhZWU1NjIwZDQ1OGFmMjI2ODIwOTdjNGZmYjY0YjU3YzMzMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-30T20:30:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-30T20:30:53Z"}, "message": "Auto merge of #4473 - phansch:fix_cast_lossless_fp, r=flip1995\n\nFix cast_lossless false positive in impl const fn\n\nFixes https://github.com/rust-lang/rust-clippy/issues/3656#issuecomment-526387382\n\nchangelog: Fix false positive in `cast_lossless`", "tree": {"sha": "3094b021556ccc4793b33396881418093d6f3352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3094b021556ccc4793b33396881418093d6f3352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3fcaee5620d458af22682097c4ffb64b57c3327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fcaee5620d458af22682097c4ffb64b57c3327", "html_url": "https://github.com/rust-lang/rust/commit/a3fcaee5620d458af22682097c4ffb64b57c3327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3fcaee5620d458af22682097c4ffb64b57c3327/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e7d075df7b3e11e61fa99b30e1ede26cee6afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e7d075df7b3e11e61fa99b30e1ede26cee6afd", "html_url": "https://github.com/rust-lang/rust/commit/70e7d075df7b3e11e61fa99b30e1ede26cee6afd"}, {"sha": "fb1ae1747f8a338ad4a69d5a8862f802ecf4de01", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1ae1747f8a338ad4a69d5a8862f802ecf4de01", "html_url": "https://github.com/rust-lang/rust/commit/fb1ae1747f8a338ad4a69d5a8862f802ecf4de01"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "1aff61e3186075c0aaf0080403e8c37e9e31a13e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3fcaee5620d458af22682097c4ffb64b57c3327/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fcaee5620d458af22682097c4ffb64b57c3327/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a3fcaee5620d458af22682097c4ffb64b57c3327", "patch": "@@ -88,6 +88,10 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n             node: ItemKind::Fn(_, header, ..),\n             ..\n         }) => header.constness == Constness::Const,\n+        Node::ImplItem(&ImplItem {\n+            node: ImplItemKind::Method(ref sig, _),\n+            ..\n+        }) => sig.header.constness == Constness::Const,\n         _ => false,\n     }\n }"}, {"sha": "709d58b596c83ad7de53cdc40d43fc73c58fe59b", "filename": "tests/ui/cast_lossless_float.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3fcaee5620d458af22682097c4ffb64b57c3327/tests%2Fui%2Fcast_lossless_float.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3fcaee5620d458af22682097c4ffb64b57c3327/tests%2Fui%2Fcast_lossless_float.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.fixed?ref=a3fcaee5620d458af22682097c4ffb64b57c3327", "patch": "@@ -32,3 +32,14 @@ fn main() {\n const fn abc(input: f32) -> f64 {\n     input as f64\n }\n+\n+// Same as the above issue. We can't suggest `::from` in const fns in impls\n+mod cast_lossless_in_impl {\n+    struct A;\n+\n+    impl A {\n+        pub const fn convert(x: f32) -> f64 {\n+            x as f64\n+        }\n+    }\n+}"}, {"sha": "eb0aab8864290978ee6505e616f3a7050d731a1c", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3fcaee5620d458af22682097c4ffb64b57c3327/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fcaee5620d458af22682097c4ffb64b57c3327/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=a3fcaee5620d458af22682097c4ffb64b57c3327", "patch": "@@ -32,3 +32,14 @@ fn main() {\n const fn abc(input: f32) -> f64 {\n     input as f64\n }\n+\n+// Same as the above issue. We can't suggest `::from` in const fns in impls\n+mod cast_lossless_in_impl {\n+    struct A;\n+\n+    impl A {\n+        pub const fn convert(x: f32) -> f64 {\n+            x as f64\n+        }\n+    }\n+}"}, {"sha": "03e49adb117db00d9bce74596e78d20e04f3cf11", "filename": "tests/ui/cast_lossless_integer.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3fcaee5620d458af22682097c4ffb64b57c3327/tests%2Fui%2Fcast_lossless_integer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3fcaee5620d458af22682097c4ffb64b57c3327/tests%2Fui%2Fcast_lossless_integer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.fixed?ref=a3fcaee5620d458af22682097c4ffb64b57c3327", "patch": "@@ -34,3 +34,14 @@ fn main() {\n const fn abc(input: u16) -> u32 {\n     input as u32\n }\n+\n+// Same as the above issue. We can't suggest `::from` in const fns in impls\n+mod cast_lossless_in_impl {\n+    struct A;\n+\n+    impl A {\n+        pub const fn convert(x: u32) -> u64 {\n+            x as u64\n+        }\n+    }\n+}"}, {"sha": "6a984d245963f761bcca28ca73e03ec748e9a2bf", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3fcaee5620d458af22682097c4ffb64b57c3327/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fcaee5620d458af22682097c4ffb64b57c3327/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=a3fcaee5620d458af22682097c4ffb64b57c3327", "patch": "@@ -34,3 +34,14 @@ fn main() {\n const fn abc(input: u16) -> u32 {\n     input as u32\n }\n+\n+// Same as the above issue. We can't suggest `::from` in const fns in impls\n+mod cast_lossless_in_impl {\n+    struct A;\n+\n+    impl A {\n+        pub const fn convert(x: u32) -> u64 {\n+            x as u64\n+        }\n+    }\n+}"}]}