{"sha": "0840ec038b2822a424acf238d8db5af569f99a21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NDBlYzAzOGIyODIyYTQyNGFjZjIzOGQ4ZGI1YWY1NjlmOTlhMjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-28T17:09:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-28T17:10:53Z"}, "message": "migrate add impl items to the new editing API", "tree": {"sha": "c40067afaffe2c7c1b974af668c078bc6d3b3341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40067afaffe2c7c1b974af668c078bc6d3b3341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0840ec038b2822a424acf238d8db5af569f99a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0840ec038b2822a424acf238d8db5af569f99a21", "html_url": "https://github.com/rust-lang/rust/commit/0840ec038b2822a424acf238d8db5af569f99a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0840ec038b2822a424acf238d8db5af569f99a21/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dbbfda34ae423229487595fd0ae9e727ae42906", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dbbfda34ae423229487595fd0ae9e727ae42906", "html_url": "https://github.com/rust-lang/rust/commit/5dbbfda34ae423229487595fd0ae9e727ae42906"}], "stats": {"total": 189, "additions": 109, "deletions": 80}, "files": [{"sha": "cbe12e9080505dadb1cf1baad02e0374752dd8f8", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0840ec038b2822a424acf238d8db5af569f99a21/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0840ec038b2822a424acf238d8db5af569f99a21/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=0840ec038b2822a424acf238d8db5af569f99a21", "patch": "@@ -2,7 +2,7 @@ use hir::db::HirDatabase;\n use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_syntax::{\n-    algo::{find_covering_element, find_node_at_offset},\n+    algo::{self, find_covering_element, find_node_at_offset},\n     AstNode, SourceFile, SyntaxElement, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n     TokenAtOffset,\n };\n@@ -177,6 +177,12 @@ impl AssistBuilder {\n         &mut self.edit\n     }\n \n+    pub(crate) fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n+        for (from, to) in algo::diff(old.syntax(), new.syntax()) {\n+            self.edit.replace(from.text_range(), to.to_string())\n+        }\n+    }\n+\n     fn build(self) -> AssistAction {\n         AssistAction {\n             edit: self.edit.finish(),"}, {"sha": "c2e3eb06ba98e967882134a2347815d54f579383", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0840ec038b2822a424acf238d8db5af569f99a21/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0840ec038b2822a424acf238d8db5af569f99a21/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=0840ec038b2822a424acf238d8db5af569f99a21", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     SmolStr,\n };\n \n-use crate::{ast_editor::AstEditor, Assist, AssistCtx, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n \n #[derive(PartialEq)]\n enum AddMissingImplMembersMode {\n@@ -79,14 +79,13 @@ fn add_missing_impl_members_inner(\n             ast::ImplItem::FnDef(def) => edit::strip_attrs_and_docs(add_body(def).into()),\n             _ => edit::strip_attrs_and_docs(it),\n         });\n-        let mut ast_editor = AstEditor::new(impl_item_list);\n-\n-        ast_editor.append_items(items);\n-\n-        let first_new_item = ast_editor.ast().impl_items().nth(n_existing_items).unwrap();\n-        let cursor_position = first_new_item.syntax().text_range().start();\n-        ast_editor.into_text_edit(edit.text_edit_builder());\n+        let new_impl_item_list = impl_item_list.append_items(items);\n+        let cursor_position = {\n+            let first_new_item = new_impl_item_list.impl_items().nth(n_existing_items).unwrap();\n+            first_new_item.syntax().text_range().start()\n+        };\n \n+        edit.replace_ast(impl_item_list, new_impl_item_list);\n         edit.set_cursor(cursor_position);\n     });\n "}, {"sha": "262e2fcf4034b2478db43e3776d1dfd08980e455", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 1, "deletions": 68, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0840ec038b2822a424acf238d8db5af569f99a21/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0840ec038b2822a424acf238d8db5af569f99a21/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=0840ec038b2822a424acf238d8db5af569f99a21", "patch": "@@ -7,9 +7,7 @@ use ra_fmt::leading_indent;\n use ra_syntax::{\n     algo,\n     ast::{self, make::tokens, TypeBoundsOwner},\n-    AstNode, Direction, InsertPosition, SyntaxElement,\n-    SyntaxKind::*,\n-    T,\n+    AstNode, Direction, InsertPosition, SyntaxElement, T,\n };\n use ra_text_edit::TextEditBuilder;\n \n@@ -67,38 +65,6 @@ impl<N: AstNode> AstEditor<N> {\n         let new_syntax = algo::replace_children(self.ast().syntax(), to_delete, &mut to_insert);\n         N::cast(new_syntax).unwrap()\n     }\n-\n-    fn do_make_multiline(&mut self) {\n-        let l_curly =\n-            match self.ast().syntax().children_with_tokens().find(|it| it.kind() == T!['{']) {\n-                Some(it) => it,\n-                None => return,\n-            };\n-        let sibling = match l_curly.next_sibling_or_token() {\n-            Some(it) => it,\n-            None => return,\n-        };\n-        let existing_ws = match sibling.as_token() {\n-            None => None,\n-            Some(tok) if tok.kind() != WHITESPACE => None,\n-            Some(ws) => {\n-                if ws.text().contains('\\n') {\n-                    return;\n-                }\n-                Some(ws.clone())\n-            }\n-        };\n-\n-        let indent = leading_indent(self.ast().syntax()).unwrap_or(\"\".into());\n-        let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n-        let to_insert = iter::once(ws.ws().into());\n-        self.ast = match existing_ws {\n-            None => self.insert_children(InsertPosition::After(l_curly), to_insert),\n-            Some(ws) => {\n-                self.replace_children(RangeInclusive::new(ws.clone().into(), ws.into()), to_insert)\n-            }\n-        };\n-    }\n }\n \n impl AstEditor<ast::RecordFieldList> {\n@@ -179,39 +145,6 @@ impl AstEditor<ast::RecordFieldList> {\n     }\n }\n \n-impl AstEditor<ast::ItemList> {\n-    pub fn append_items(&mut self, items: impl Iterator<Item = ast::ImplItem>) {\n-        if !self.ast().syntax().text().contains_char('\\n') {\n-            self.do_make_multiline();\n-        }\n-        items.for_each(|it| self.append_item(it));\n-    }\n-\n-    pub fn append_item(&mut self, item: ast::ImplItem) {\n-        let (indent, position) = match self.ast().impl_items().last() {\n-            Some(it) => (\n-                leading_indent(it.syntax()).unwrap_or_default().to_string(),\n-                InsertPosition::After(it.syntax().clone().into()),\n-            ),\n-            None => match self.l_curly() {\n-                Some(it) => (\n-                    \"    \".to_string() + &leading_indent(self.ast().syntax()).unwrap_or_default(),\n-                    InsertPosition::After(it),\n-                ),\n-                None => return,\n-            },\n-        };\n-        let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n-        let to_insert: ArrayVec<[SyntaxElement; 2]> =\n-            [ws.ws().into(), item.syntax().clone().into()].into();\n-        self.ast = self.insert_children(position, to_insert.into_iter());\n-    }\n-\n-    fn l_curly(&self) -> Option<SyntaxElement> {\n-        self.ast().syntax().children_with_tokens().find(|it| it.kind() == T!['{'])\n-    }\n-}\n-\n impl AstEditor<ast::TypeParam> {\n     pub fn remove_bounds(&mut self) -> &mut Self {\n         let colon = match self.ast.colon_token() {"}, {"sha": "2af6f573ef8cdbeb5b9822efbd4b77b046933ee1", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 94, "deletions": 3, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/0840ec038b2822a424acf238d8db5af569f99a21/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0840ec038b2822a424acf238d8db5af569f99a21/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=0840ec038b2822a424acf238d8db5af569f99a21", "patch": "@@ -7,10 +7,14 @@ use arrayvec::ArrayVec;\n \n use crate::{\n     algo,\n-    ast::{self, make, AstNode},\n-    InsertPosition, SyntaxElement,\n+    ast::{\n+        self,\n+        make::{self, tokens},\n+        AstNode,\n+    },\n+    AstToken, InsertPosition, SmolStr, SyntaxElement,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n-    SyntaxNode,\n+    SyntaxNode, T,\n };\n \n impl ast::FnDef {\n@@ -33,6 +37,74 @@ impl ast::FnDef {\n     }\n }\n \n+impl ast::ItemList {\n+    #[must_use]\n+    pub fn append_items(&self, items: impl Iterator<Item = ast::ImplItem>) -> ast::ItemList {\n+        let mut res = self.clone();\n+        if !self.syntax().text().contains_char('\\n') {\n+            res = res.make_multiline();\n+        }\n+        items.for_each(|it| res = res.append_item(it));\n+        res\n+    }\n+\n+    #[must_use]\n+    pub fn append_item(&self, item: ast::ImplItem) -> ast::ItemList {\n+        let (indent, position) = match self.impl_items().last() {\n+            Some(it) => (\n+                leading_indent(it.syntax()).unwrap_or_default().to_string(),\n+                InsertPosition::After(it.syntax().clone().into()),\n+            ),\n+            None => match self.l_curly() {\n+                Some(it) => (\n+                    \"    \".to_string() + &leading_indent(self.syntax()).unwrap_or_default(),\n+                    InsertPosition::After(it),\n+                ),\n+                None => return self.clone(),\n+            },\n+        };\n+        let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n+        let to_insert: ArrayVec<[SyntaxElement; 2]> =\n+            [ws.ws().into(), item.syntax().clone().into()].into();\n+        insert_children(self, position, to_insert.into_iter())\n+    }\n+\n+    fn l_curly(&self) -> Option<SyntaxElement> {\n+        self.syntax().children_with_tokens().find(|it| it.kind() == T!['{'])\n+    }\n+\n+    fn make_multiline(&self) -> ast::ItemList {\n+        let l_curly = match self.syntax().children_with_tokens().find(|it| it.kind() == T!['{']) {\n+            Some(it) => it,\n+            None => return self.clone(),\n+        };\n+        let sibling = match l_curly.next_sibling_or_token() {\n+            Some(it) => it,\n+            None => return self.clone(),\n+        };\n+        let existing_ws = match sibling.as_token() {\n+            None => None,\n+            Some(tok) if tok.kind() != WHITESPACE => None,\n+            Some(ws) => {\n+                if ws.text().contains('\\n') {\n+                    return self.clone();\n+                }\n+                Some(ws.clone())\n+            }\n+        };\n+\n+        let indent = leading_indent(self.syntax()).unwrap_or(\"\".into());\n+        let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n+        let to_insert = iter::once(ws.ws().into());\n+        match existing_ws {\n+            None => insert_children(self, InsertPosition::After(l_curly), to_insert),\n+            Some(ws) => {\n+                replace_children(self, RangeInclusive::new(ws.clone().into(), ws.into()), to_insert)\n+            }\n+        }\n+    }\n+}\n+\n pub fn strip_attrs_and_docs<N: ast::AttrsOwner>(node: N) -> N {\n     N::cast(strip_attrs_and_docs_inner(node.syntax().clone())).unwrap()\n }\n@@ -50,6 +122,25 @@ fn strip_attrs_and_docs_inner(mut node: SyntaxNode) -> SyntaxNode {\n     node\n }\n \n+// Note this is copy-pasted from fmt. It seems like fmt should be a separate\n+// crate, but basic tree building should be this crate. However, tree building\n+// might want to call into fmt...\n+fn leading_indent(node: &SyntaxNode) -> Option<SmolStr> {\n+    let prev_tokens = std::iter::successors(node.first_token(), |token| token.prev_token());\n+    for token in prev_tokens {\n+        if let Some(ws) = ast::Whitespace::cast(token.clone()) {\n+            let ws_text = ws.text();\n+            if let Some(pos) = ws_text.rfind('\\n') {\n+                return Some(ws_text[pos + 1..].into());\n+            }\n+        }\n+        if token.text().contains('\\n') {\n+            break;\n+        }\n+    }\n+    None\n+}\n+\n #[must_use]\n fn insert_children<N: AstNode>(\n     parent: &N,"}]}