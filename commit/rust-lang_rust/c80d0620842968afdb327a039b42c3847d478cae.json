{"sha": "c80d0620842968afdb327a039b42c3847d478cae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MGQwNjIwODQyOTY4YWZkYjMyN2EwMzliNDJjMzg0N2Q0NzhjYWU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T21:56:26Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T22:10:14Z"}, "message": "Add more TAIT multiple defining uses test cases", "tree": {"sha": "af5f8229a9989124a2b06909c26d0c644825ff9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5f8229a9989124a2b06909c26d0c644825ff9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80d0620842968afdb327a039b42c3847d478cae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC+mUYACgkQgTGiTgx5\n76/GIg//fQUmro0iosDZZAAQvY9MdK5dBkhyqEqb3BnpDLw5SJE6iZsk4k+64mx/\n6TeQlzYtDitKihaRY5TL+bbrBj+1h7PQUC3217B0ThpE1eRCxAHcqM9ciFpK/0P+\n4mxcCs4vjBFgMKTnXogZnxzkmSECOOzX1aORxUd/bmKi4miZTE4rRDVDCqrLf38h\nvuaogP9NUmBmts2EsnGRXkW2CUZXDwiDWZPYr4CLfVLdFubN5OYmUwGJ5vliXDZn\nudprkA6Ah67t/FNkwRxPla7L7Bd8jFUvdip1vfPbuGFx/7IKFuwSImErH7UeIgAJ\nWaeU/M1XtT8dQJrw9/clkzCn9qJFoV4PWbqwu5JIf2dw9CkhaANMe8aVnjxLDZlE\nleZlzyS5tlv3IAIU3C/HeSrpvkHZh7P2gfDDDXiPvqIhK8L0LiqD9kFYtF5m+a/b\n3ikOWX8QLMtFGfqh724Ovpt/m+anbVrIEIVoD4JrfGYJSV00WrDZcXx7X57e5QDU\nQJPxJsxM9IRtsPHww1GgUpf5QgcmPV63ipxDqydEsSmLbHd5+0+U9t7y3f/O0Hur\nlyQHKtC1rNanEqsGb6PJaQEwukCPoMaDkZvGY1M+J39Md68GqJLMC70TivYziCkT\ndr0yJXq1jppdoSykw+uUNiB/u4x8RxRn9IQaPYnI1uNSqelkiv8=\n=6Ran\n-----END PGP SIGNATURE-----", "payload": "tree af5f8229a9989124a2b06909c26d0c644825ff9e\nparent 9e547b446433d63e3fe99bacfdaedf97fed31a8a\nauthor Santiago Pastorino <spastorino@gmail.com> 1623102986 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623103814 -0300\n\nAdd more TAIT multiple defining uses test cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80d0620842968afdb327a039b42c3847d478cae", "html_url": "https://github.com/rust-lang/rust/commit/c80d0620842968afdb327a039b42c3847d478cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80d0620842968afdb327a039b42c3847d478cae/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e547b446433d63e3fe99bacfdaedf97fed31a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e547b446433d63e3fe99bacfdaedf97fed31a8a", "html_url": "https://github.com/rust-lang/rust/commit/9e547b446433d63e3fe99bacfdaedf97fed31a8a"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "ecad910f7d542a70830a5da2939f3b52161a421f", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-pass.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-pass.rs?ref=c80d0620842968afdb327a039b42c3847d478cae", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#![feature(min_type_alias_impl_trait)]\n+\n+type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n+\n+fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n+    (a.clone(), a)\n+}\n+\n+fn main() {\n+    println!(\"{}\", <X<_, _> as ToString>::to_string(&f(42_i32, String::new()).1));\n+}"}, {"sha": "38aa18fe40ee71ab57da0c7d82945a0b14904b34", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs?ref=c80d0620842968afdb327a039b42c3847d478cae", "patch": "@@ -0,0 +1,16 @@\n+// https://github.com/rust-lang/rust/issues/73481\n+// This test used to cause unsoundness, since one of the two possible\n+// resolutions was chosen at random instead of erroring due to conflicts.\n+\n+#![feature(min_type_alias_impl_trait)]\n+\n+type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n+//~^ ERROR could not find defining uses\n+\n+fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+    (a.clone(), a)\n+}\n+\n+fn main() {\n+    println!(\"{}\", <X<_, _> as ToString>::to_string(&f(42_i32, String::new()).1));\n+}"}, {"sha": "c00973c0761b058c4410913294223756e8ec9e7f", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr?ref=c80d0620842968afdb327a039b42c3847d478cae", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/multiple-def-uses-in-one-fn2.rs:7:52\n+   |\n+LL | type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n+   |                                                    ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "17e900058113dd8283be89c3672611d5beb32af9", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs?ref=c80d0620842968afdb327a039b42c3847d478cae", "patch": "@@ -0,0 +1,18 @@\n+// https://github.com/rust-lang/rust/issues/73481\n+// This test used to cause unsoundness, since one of the two possible\n+// resolutions was chosen at random instead of erroring due to conflicts.\n+\n+#![feature(min_type_alias_impl_trait)]\n+\n+type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n+\n+fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+    (a, b)\n+}\n+\n+fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n+    (a, b)\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "bbe709dccab4eb6e9404d4b5cba860ad4a7a2592", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80d0620842968afdb327a039b42c3847d478cae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr?ref=c80d0620842968afdb327a039b42c3847d478cae", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/multiple-def-uses-in-one-fn3.rs:14:9\n+   |\n+LL | fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n+   |      -                    - found type parameter\n+   |      |\n+   |      expected type parameter\n+LL |     (a, b)\n+   |         ^ expected type parameter `A`, found type parameter `B`\n+   |\n+   = note: expected type parameter `A`\n+              found type parameter `B`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}