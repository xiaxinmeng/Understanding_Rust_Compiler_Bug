{"sha": "e9baeab695ffb0483ce6bef872f5d85c636dd04a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YmFlYWI2OTVmZmIwNDgzY2U2YmVmODcyZjVkODVjNjM2ZGQwNGE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-16T11:28:13Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:58:28Z"}, "message": "debuginfo: Adapted DI generation to new memory layout of unique vecs.", "tree": {"sha": "297b8d02d412d0a74e2e18eab636c66b29113950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/297b8d02d412d0a74e2e18eab636c66b29113950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9baeab695ffb0483ce6bef872f5d85c636dd04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9baeab695ffb0483ce6bef872f5d85c636dd04a", "html_url": "https://github.com/rust-lang/rust/commit/e9baeab695ffb0483ce6bef872f5d85c636dd04a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9baeab695ffb0483ce6bef872f5d85c636dd04a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2aeb4b04bccf915444fa2a49ee3f3c33dec7097", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2aeb4b04bccf915444fa2a49ee3f3c33dec7097", "html_url": "https://github.com/rust-lang/rust/commit/b2aeb4b04bccf915444fa2a49ee3f3c33dec7097"}], "stats": {"total": 93, "additions": 76, "deletions": 17}, "files": [{"sha": "2489f4f8235160171cc4421515995d4862cae53f", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e9baeab695ffb0483ce6bef872f5d85c636dd04a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9baeab695ffb0483ce6bef872f5d85c636dd04a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=e9baeab695ffb0483ce6bef872f5d85c636dd04a", "patch": "@@ -581,7 +581,8 @@ fn tuple_metadata(cx: &mut CrateContext,\n fn enum_metadata(cx: &mut CrateContext,\n                  enum_type: ty::t,\n                  enum_def_id: ast::def_id,\n-                 substs: &ty::substs,\n+                 // _substs is only needed in the other version. Will go away with new snapshot.\n+                 _substs: &ty::substs,\n                  span: span)\n               -> DIType {\n \n@@ -1017,10 +1018,10 @@ fn fixed_vec_metadata(cx: &mut CrateContext,\n     };\n }\n \n-fn boxed_vec_metadata(cx: &mut CrateContext,\n-                      element_type: ty::t,\n-                      span: span)\n-                   -> DICompositeType {\n+fn vec_metadata(cx: &mut CrateContext,\n+                element_type: ty::t,\n+                span: span)\n+             -> DICompositeType {\n \n     let element_type_metadata = type_metadata(cx, element_type, span);\n     let element_llvm_type = type_of::type_of(cx, element_type);\n@@ -1045,14 +1046,25 @@ fn boxed_vec_metadata(cx: &mut CrateContext,\n     //                           fill               alloc              elements\n     let member_type_metadata = &[int_type_metadata, int_type_metadata, array_type_metadata];\n \n-    let vec_metadata = composite_type_metadata(\n+    return composite_type_metadata(\n         cx,\n         vec_llvm_type,\n         vec_type_name,\n         member_llvm_types,\n         member_names,\n         member_type_metadata,\n         span);\n+}\n+\n+fn boxed_vec_metadata(cx: &mut CrateContext,\n+                      element_type: ty::t,\n+                      span: span)\n+                   -> DICompositeType {\n+\n+    let element_llvm_type = type_of::type_of(cx, element_type);\n+    let vec_llvm_type = Type::vec(cx.sess.targ_cfg.arch, &element_llvm_type);\n+    let vec_type_name: &str = fmt!(\"[%s]\", ty_to_str(cx.tcx, element_type));\n+    let vec_metadata = vec_metadata(cx, element_type, span);\n \n     return boxed_type_metadata(\n         cx,\n@@ -1197,10 +1209,13 @@ fn type_metadata(cx: &mut CrateContext,\n                 ty::vstore_fixed(len) => {\n                     fixed_vec_metadata(cx, i8_t, len + 1, span)\n                 },\n-                ty::vstore_uniq |\n+                ty::vstore_uniq  => {\n+                    let vec_metadata = vec_metadata(cx, i8_t, span);\n+                    pointer_type_metadata(cx, t, vec_metadata)\n+                }\n                 ty::vstore_box => {\n-                    let box_metadata = boxed_vec_metadata(cx, i8_t, span);\n-                    pointer_type_metadata(cx, t, box_metadata)\n+                    let boxed_vec_metadata = boxed_vec_metadata(cx, i8_t, span);\n+                    pointer_type_metadata(cx, t, boxed_vec_metadata)\n                 }\n                 ty::vstore_slice(_region) => {\n                     vec_slice_metadata(cx, t, i8_t, span)\n@@ -1217,12 +1232,19 @@ fn type_metadata(cx: &mut CrateContext,\n             match *vstore {\n                 ty::vstore_fixed(len) => {\n                     fixed_vec_metadata(cx, mt.ty, len, span)\n-                },\n-                ty::vstore_uniq |\n-                ty::vstore_box  => {\n-                    let box_metadata = boxed_vec_metadata(cx, mt.ty, span);\n-                    pointer_type_metadata(cx, t, box_metadata)\n-                },\n+                }\n+                ty::vstore_uniq if ty::type_contents(cx.tcx, mt.ty).contains_managed() => {\n+                    let boxed_vec_metadata = boxed_vec_metadata(cx, mt.ty, span);\n+                    pointer_type_metadata(cx, t, boxed_vec_metadata)\n+                }\n+                ty::vstore_uniq => {\n+                    let vec_metadata = vec_metadata(cx, mt.ty, span);\n+                    pointer_type_metadata(cx, t, vec_metadata)\n+                }\n+                ty::vstore_box => {\n+                    let boxed_vec_metadata = boxed_vec_metadata(cx, mt.ty, span);\n+                    pointer_type_metadata(cx, t, boxed_vec_metadata)\n+                }\n                 ty::vstore_slice(_) => {\n                     vec_slice_metadata(cx, t, mt.ty, span)\n                 }"}, {"sha": "8abead6519697305a8148c9d938108235e205ff3", "filename": "src/test/debug-info/boxed-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9baeab695ffb0483ce6bef872f5d85c636dd04a/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9baeab695ffb0483ce6bef872f5d85c636dd04a/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs?ref=e9baeab695ffb0483ce6bef872f5d85c636dd04a", "patch": "@@ -20,9 +20,9 @@\n // debugger:print *((uint64_t[3]*)(managed->val.elements))\n // check:$2 = {7, 8, 9}\n \n-// debugger:print unique->val.fill\n+// debugger:print unique->fill\n // check:$3 = 32\n-// debugger:print *((uint64_t[4]*)(unique->val.elements))\n+// debugger:print *((uint64_t[4]*)(unique->elements))\n // check:$4 = {10, 11, 12, 13}\n \n fn main() {"}, {"sha": "e42631599a9b93ac82e57ec43b3945a13707f3e1", "filename": "src/test/debug-info/managed-pointer-within-unique-vec.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e9baeab695ffb0483ce6bef872f5d85c636dd04a/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9baeab695ffb0483ce6bef872f5d85c636dd04a/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs?ref=e9baeab695ffb0483ce6bef872f5d85c636dd04a", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print unique->val.elements[0]->val\n+// check:$1 = 10\n+\n+// debugger:print unique->val.elements[1]->val\n+// check:$2 = 11\n+\n+// debugger:print unique->val.elements[2]->val\n+// check:$3 = 12\n+\n+// debugger:print unique->val.elements[3]->val\n+// check:$4 = 13\n+\n+fn main() {\n+\n+    let unique: ~[@i64] = ~[@10, @11, @12, @13];\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}\n\\ No newline at end of file"}, {"sha": "3eb1c2ef01e55da2465f4e716842c3de473678c6", "filename": "src/test/debug-info/managed-pointer-within-unique.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9baeab695ffb0483ce6bef872f5d85c636dd04a/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9baeab695ffb0483ce6bef872f5d85c636dd04a/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs?ref=e9baeab695ffb0483ce6bef872f5d85c636dd04a", "previous_filename": "src/test/debug-info/managed-box-within-unique.rs"}]}