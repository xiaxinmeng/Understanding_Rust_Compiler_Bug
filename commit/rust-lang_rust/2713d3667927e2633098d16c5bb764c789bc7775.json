{"sha": "2713d3667927e2633098d16c5bb764c789bc7775", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MTNkMzY2NzkyN2UyNjMzMDk4ZDE2YzViYjc2NGM3ODliYzc3NzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-17T13:14:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-17T13:14:19Z"}, "message": "tweaks", "tree": {"sha": "dd9386327612962422af7f751d46d08c01abbe3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd9386327612962422af7f751d46d08c01abbe3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2713d3667927e2633098d16c5bb764c789bc7775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2713d3667927e2633098d16c5bb764c789bc7775", "html_url": "https://github.com/rust-lang/rust/commit/2713d3667927e2633098d16c5bb764c789bc7775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2713d3667927e2633098d16c5bb764c789bc7775/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c44e88cc8a75fa672ab6bdbfe76ad4323399f254", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44e88cc8a75fa672ab6bdbfe76ad4323399f254", "html_url": "https://github.com/rust-lang/rust/commit/c44e88cc8a75fa672ab6bdbfe76ad4323399f254"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "e6e830b1b6c852f87cd1c810805d43414c00b4c2", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2713d3667927e2633098d16c5bb764c789bc7775/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2713d3667927e2633098d16c5bb764c789bc7775/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2713d3667927e2633098d16c5bb764c789bc7775", "patch": "@@ -1118,7 +1118,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// * `dst` must be properly aligned.\n     ///\n-    /// Additionally, the caller should ensure that writing `count *\n+    /// Additionally, the caller must ensure that writing `count *\n     /// size_of::<T>()` bytes to the given region of memory results in a valid\n     /// value of `T`. Using a region of memory typed as a `T` that contains an\n     /// invalid value of `T` is undefined behavior.\n@@ -1153,7 +1153,7 @@ extern \"rust-intrinsic\" {\n     /// unsafe {\n     ///     // Leaks the previously held value by overwriting the `Box<T>` with\n     ///     // a null pointer.\n-    ///     ptr::write_bytes(&mut v, 0, 1);\n+    ///     ptr::write_bytes(&mut v as *mut Box<i32>, 0, 1);\n     /// }\n     ///\n     /// // At this point, using or dropping `v` results in undefined behavior.\n@@ -1164,7 +1164,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// unsafe {\n     ///     // Let us instead put in a valid value\n-    ///     ptr::write(&mut v, Box::new(42i32));\n+    ///     ptr::write(&mut v as *mut Box<i32>, Box::new(42i32));\n     /// }\n     ///\n     /// // Now the box is fine"}, {"sha": "68082e3ae809071a71efccbd4a7ea8e802a7d783", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2713d3667927e2633098d16c5bb764c789bc7775/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2713d3667927e2633098d16c5bb764c789bc7775/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=2713d3667927e2633098d16c5bb764c789bc7775", "patch": "@@ -117,7 +117,6 @@ pub use intrinsics::write_bytes;\n ///\n /// * `to_drop` must be properly aligned.  See the example below for how to drop\n ///   an unaligned pointer.\n-\n ///\n /// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n /// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n@@ -185,6 +184,10 @@ pub use intrinsics::write_bytes;\n ///     mem::forget(p);\n /// }\n /// ```\n+///\n+/// Notice that the compiler performs this copy automatically when dropping packed structs,\n+/// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`\n+/// manually.\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[lang = \"drop_in_place\"]\n #[allow(unconditional_recursion)]\n@@ -547,6 +550,9 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n ///\n ///         // Move `tmp` into `b`.\n ///         ptr::write(b, tmp);\n+///\n+///         // `tmp` has been moved (`write` takes ownership of its second argument),\n+///         // so nothing is dropped implicitly here.\n ///     }\n /// }\n ///\n@@ -688,9 +694,26 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n ///\n /// fn swap<T>(a: &mut T, b: &mut T) {\n ///     unsafe {\n+///         // Create a bitwise copy of the value at `a` in `tmp`.\n ///         let tmp = ptr::read(a);\n+///\n+///         // Exiting at this point (either by explicitly returning or by\n+///         // calling a function which panics) would cause the value in `tmp` to\n+///         // be dropped while the same value is still referenced by `a`. This\n+///         // could trigger undefined behavior if `T` is not `Copy`.\n+///\n+///         // Create a bitwise copy of the value at `b` in `a`.\n+///         // This is safe because mutable references cannot alias.\n ///         ptr::copy_nonoverlapping(b, a, 1);\n+///\n+///         // As above, exiting here could trigger undefined behavior because\n+///         // the same value is referenced by `a` and `b`.\n+///\n+///         // Move `tmp` into `b`.\n ///         ptr::write(b, tmp);\n+///\n+///         // `tmp` has been moved (`write` takes ownership of its second argument),\n+///         // so nothing is dropped implicitly here.\n ///     }\n /// }\n ///"}]}