{"sha": "9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjQxODBmMGQ1MWRlNWNiNGFhM2ZlOGIzZjNkMTRiZTVlZTEwM2M=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-24T00:08:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-27T09:05:06Z"}, "message": "Unify cache usage and improve naming", "tree": {"sha": "ca09cd8a95133ce2f71e18a8276cc78a749ab060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca09cd8a95133ce2f71e18a8276cc78a749ab060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c", "html_url": "https://github.com/rust-lang/rust/commit/9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522f48cb3fc5858a8be12e4c7f6b52829b289851", "url": "https://api.github.com/repos/rust-lang/rust/commits/522f48cb3fc5858a8be12e4c7f6b52829b289851", "html_url": "https://github.com/rust-lang/rust/commit/522f48cb3fc5858a8be12e4c7f6b52829b289851"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "c71b2b549e1f0656cb146dcb2e0e307d0aaa6c2b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9a64180f0d51de5cb4aa3fe8b3f3d14be5ee103c", "patch": "@@ -1144,7 +1144,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                     Some(Implementor {\n                         text: imp.inner_impl().print(cx.cache()).to_string(),\n                         synthetic: imp.inner_impl().synthetic,\n-                        types: collect_paths_for_type(imp.inner_impl().for_.clone(), &cx.cache),\n+                        types: collect_paths_for_type(imp.inner_impl().for_.clone(), cx.cache()),\n                     })\n                 }\n             })\n@@ -2466,7 +2466,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n             WhereClause { gens: &f.generics, indent: 0, end_newline: true }.print(cx.cache()),\n         decl = Function { decl: &f.decl, header_len, indent: 0, asyncness: f.header.asyncness }\n             .print(cx.cache()),\n-        spotlight = spotlight_decl(&f.decl, &cx.cache),\n+        spotlight = spotlight_decl(&f.decl, cx.cache()),\n     );\n     document(w, cx, it, None)\n }\n@@ -3685,30 +3685,31 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, cache: &Cache) -> bo\n     }\n }\n \n-fn spotlight_decl(decl: &clean::FnDecl, c: &Cache) -> String {\n+fn spotlight_decl(decl: &clean::FnDecl, cache: &Cache) -> String {\n     let mut out = Buffer::html();\n     let mut trait_ = String::new();\n \n-    if let Some(did) = decl.output.def_id_full(c) {\n-        if let Some(impls) = c.impls.get(&did) {\n+    if let Some(did) = decl.output.def_id_full(cache) {\n+        if let Some(impls) = cache.impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n-                if impl_.trait_.def_id_full(c).map_or(false, |d| c.traits[&d].is_spotlight) {\n+                if impl_.trait_.def_id_full(cache).map_or(false, |d| cache.traits[&d].is_spotlight)\n+                {\n                     if out.is_empty() {\n                         out.push_str(&format!(\n                             \"<h3 class=\\\"notable\\\">Notable traits for {}</h3>\\\n                              <code class=\\\"content\\\">\",\n-                            impl_.for_.print(c)\n+                            impl_.for_.print(cache)\n                         ));\n-                        trait_.push_str(&impl_.for_.print(c).to_string());\n+                        trait_.push_str(&impl_.for_.print(cache).to_string());\n                     }\n \n                     //use the \"where\" class here to make it small\n                     out.push_str(&format!(\n                         \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n-                        impl_.print(c)\n+                        impl_.print(cache)\n                     ));\n-                    let t_did = impl_.trait_.def_id_full(c).unwrap();\n+                    let t_did = impl_.trait_.def_id_full(cache).unwrap();\n                     for it in &impl_.items {\n                         if let clean::TypedefItem(ref tydef, _) = *it.kind {\n                             out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n@@ -3719,7 +3720,7 @@ fn spotlight_decl(decl: &clean::FnDecl, c: &Cache) -> String {\n                                 Some(&tydef.type_),\n                                 AssocItemLink::GotoSource(t_did, &FxHashSet::default()),\n                                 \"\",\n-                                c,\n+                                cache,\n                             );\n                             out.push_str(\";</span>\");\n                         }"}]}