{"sha": "a2be0509657c4b100ba9b81b34aa0262700da83c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYmUwNTA5NjU3YzRiMTAwYmE5YjgxYjM0YWEwMjYyNzAwZGE4M2M=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2018-10-19T04:03:56Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2018-10-19T04:03:56Z"}, "message": "Fix `clone_on_copy` not detecting derefs sometimes", "tree": {"sha": "764f766585e7a05151c3bc1d4e08fe24eb08c539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/764f766585e7a05151c3bc1d4e08fe24eb08c539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2be0509657c4b100ba9b81b34aa0262700da83c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCAAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAlvJWAcUHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic4ShggAtkT2A1zs+xvdG39ovQa5IsxAGfUd\niFX1HanzTMv7CvRed/R8oyeTNG/iXnnJWtKI6+g0DITDhKG9ytGgvMSznwhQobaL\n2oArjy30TgVn3COlbO3z3EfQHC+u3/Fk3LUqWyy+8BHGDliQVYVbcEijBKFtrjIJ\n7j6DtZplu5krRWIZP3dl6EcRftbJjXzQ+KncCNrH4iSXtBiuU1hTYVusGCnB0UO1\nzwqYR+n+HoarwJviF1A3MItj2gjvs6h6EGblePRb4ug3NzQjD1a96m1gs/0qfWWh\nMv6Oi1jik3jJfI5X+S/zTmLhds0/qCNxu6wkrRXtgtuu49RWCbhg30UuGw==\n=EDgq\n-----END PGP SIGNATURE-----", "payload": "tree 764f766585e7a05151c3bc1d4e08fe24eb08c539\nparent b1d0343749bdc87e5cbbe7f1aeaa9d2a2c9dbc5b\nauthor HMPerson1 <hmperson1@gmail.com> 1539921836 -0400\ncommitter HMPerson1 <hmperson1@gmail.com> 1539921836 -0400\n\nFix `clone_on_copy` not detecting derefs sometimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2be0509657c4b100ba9b81b34aa0262700da83c", "html_url": "https://github.com/rust-lang/rust/commit/a2be0509657c4b100ba9b81b34aa0262700da83c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2be0509657c4b100ba9b81b34aa0262700da83c/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d0343749bdc87e5cbbe7f1aeaa9d2a2c9dbc5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d0343749bdc87e5cbbe7f1aeaa9d2a2c9dbc5b", "html_url": "https://github.com/rust-lang/rust/commit/b1d0343749bdc87e5cbbe7f1aeaa9d2a2c9dbc5b"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "a0d57e0916becac8417068222b3ba57a9ee3b41c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2be0509657c4b100ba9b81b34aa0262700da83c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2be0509657c4b100ba9b81b34aa0262700da83c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a2be0509657c4b100ba9b81b34aa0262700da83c", "patch": "@@ -1250,7 +1250,8 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n     if is_copy(cx, ty) {\n         let snip;\n         if let Some(snippet) = sugg::Sugg::hir_opt(cx, arg) {\n-            if let ty::Ref(..) = cx.tables.expr_ty(arg).sty {\n+            // x.clone() might have dereferenced x, possibly through a Deref impl\n+            if cx.tables.expr_ty(arg) != ty {\n                 let parent = cx.tcx.hir.get_parent_node(expr.id);\n                 match cx.tcx.hir.get(parent) {\n                     hir::Node::Expr(parent) => match parent.node {"}, {"sha": "2dd2213e13898ab341bde7bc240f8b25f20df55f", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2be0509657c4b100ba9b81b34aa0262700da83c/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2be0509657c4b100ba9b81b34aa0262700da83c/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=a2be0509657c4b100ba9b81b34aa0262700da83c", "patch": "@@ -13,6 +13,7 @@\n #![warn(clippy::clone_on_ref_ptr)]\n #![allow(unused)]\n \n+use std::cell::RefCell;\n use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::rc::{self, Rc};\n@@ -30,6 +31,9 @@ fn clone_on_copy() {\n     vec![1].clone(); // ok, not a Copy type\n     Some(vec![1]).clone(); // ok, not a Copy type\n     (&42).clone();\n+\n+    let rc = RefCell::new(0);\n+    rc.borrow().clone();\n }\n \n fn clone_on_ref_ptr() {"}, {"sha": "63e6f3d8bd5b4cf37088f8e6e4e0180b0fc99955", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a2be0509657c4b100ba9b81b34aa0262700da83c/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2be0509657c4b100ba9b81b34aa0262700da83c/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=a2be0509657c4b100ba9b81b34aa0262700da83c", "patch": "@@ -1,84 +1,90 @@\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:28:5\n+  --> $DIR/unnecessary_clone.rs:29:5\n    |\n-28 |     42.clone();\n+29 |     42.clone();\n    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n    |\n    = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:32:5\n+  --> $DIR/unnecessary_clone.rs:33:5\n    |\n-32 |     (&42).clone();\n+33 |     (&42).clone();\n    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:36:5\n+   |\n+36 |     rc.borrow().clone();\n+   |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n+\n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:42:5\n+  --> $DIR/unnecessary_clone.rs:46:5\n    |\n-42 |     rc.clone();\n+46 |     rc.clone();\n    |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clippy::clone-on-ref-ptr` implied by `-D warnings`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:45:5\n+  --> $DIR/unnecessary_clone.rs:49:5\n    |\n-45 |     arc.clone();\n+49 |     arc.clone();\n    |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:48:5\n+  --> $DIR/unnecessary_clone.rs:52:5\n    |\n-48 |     rcweak.clone();\n+52 |     rcweak.clone();\n    |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:51:5\n+  --> $DIR/unnecessary_clone.rs:55:5\n    |\n-51 |     arc_weak.clone();\n+55 |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:55:29\n+  --> $DIR/unnecessary_clone.rs:59:29\n    |\n-55 |     let _: Arc<SomeTrait> = x.clone();\n+59 |     let _: Arc<SomeTrait> = x.clone();\n    |                             ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:59:5\n+  --> $DIR/unnecessary_clone.rs:63:5\n    |\n-59 |     t.clone();\n+63 |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:61:5\n+  --> $DIR/unnecessary_clone.rs:65:5\n    |\n-61 |     Some(t).clone();\n+65 |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:67:22\n+  --> $DIR/unnecessary_clone.rs:71:22\n    |\n-67 |     let z: &Vec<_> = y.clone();\n+71 |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n    = note: #[deny(clippy::clone_double_ref)] on by default\n help: try dereferencing it\n    |\n-67 |     let z: &Vec<_> = &(*y).clone();\n+71 |     let z: &Vec<_> = &(*y).clone();\n    |                      ^^^^^^^^^^^^^\n help: or try being explicit about what type to clone\n    |\n-67 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n+71 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:74:27\n+  --> $DIR/unnecessary_clone.rs:78:27\n    |\n-74 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+78 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}]}