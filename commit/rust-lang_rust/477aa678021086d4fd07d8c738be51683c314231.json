{"sha": "477aa678021086d4fd07d8c738be51683c314231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3N2FhNjc4MDIxMDg2ZDRmZDA3ZDhjNzM4YmU1MTY4M2MzMTQyMzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-27T19:48:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-27T19:48:53Z"}, "message": "Merge commit '5988bbd24aa87732bfa1d111ba00bcdaa22c481a' into sync_cg_clif-2020-11-27", "tree": {"sha": "971370a0682f0e551bb1d38ec276ba7237ed89d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971370a0682f0e551bb1d38ec276ba7237ed89d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/477aa678021086d4fd07d8c738be51683c314231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/477aa678021086d4fd07d8c738be51683c314231", "html_url": "https://github.com/rust-lang/rust/commit/477aa678021086d4fd07d8c738be51683c314231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/477aa678021086d4fd07d8c738be51683c314231/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "774bce7f5e9d0cc99a30cf37be5d175a3b530beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/774bce7f5e9d0cc99a30cf37be5d175a3b530beb", "html_url": "https://github.com/rust-lang/rust/commit/774bce7f5e9d0cc99a30cf37be5d175a3b530beb"}, {"sha": "5988bbd24aa87732bfa1d111ba00bcdaa22c481a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5988bbd24aa87732bfa1d111ba00bcdaa22c481a", "html_url": "https://github.com/rust-lang/rust/commit/5988bbd24aa87732bfa1d111ba00bcdaa22c481a"}], "stats": {"total": 622, "additions": 400, "deletions": 222}, "files": [{"sha": "0ceb3fe646cca0b882d8c1f2af0216ef9202bba1", "filename": "compiler/rustc_codegen_cranelift/.gitattributes", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.gitattributes?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -1 +1,2 @@\n * text=auto eol=lf\n+*.rs diff=rust"}, {"sha": "67ed41e7652319f1b84975a1544ddf5f8d002bc2", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -2,9 +2,9 @@\n # It is not intended for manual editing.\n [[package]]\n name = \"anyhow\"\n-version = \"1.0.33\"\n+version = \"1.0.34\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a1fd36ffbb1fb7c834eac128ea8d0e310c5aeb635548f9d58861e1308d46e71c\"\n+checksum = \"bf8dcb5b4bbaa28653b647d8c77bd4ed40183b48882e130c1f1ffb73de069fd7\"\n \n [[package]]\n name = \"ar\"\n@@ -31,28 +31,34 @@ checksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.61\"\n+version = \"1.0.62\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ed67cbde08356238e75fc4656be4749481eeffb09e19f320a25237d5221c985d\"\n+checksum = \"f1770ced377336a88a67c473594ccc14eca6f4559217c34f64aac8f83d641b40\"\n \n [[package]]\n name = \"cfg-if\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -69,27 +75,27 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -99,8 +105,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -111,8 +117,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"raw-cpuid\",\n@@ -121,8 +127,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -134,8 +140,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-simplejit\"\n-version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n+version = \"0.68.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#19640367dbf0da7093e61add3306c8d092644fb3\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"cranelift-entity\",\n@@ -151,18 +157,18 @@ dependencies = [\n \n [[package]]\n name = \"crc32fast\"\n-version = \"1.2.0\"\n+version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n+checksum = \"81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 1.0.0\",\n ]\n \n [[package]]\n name = \"errno\"\n-version = \"0.2.6\"\n+version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6eab5ee3df98a279d9b316b1af6ac95422127b1290317e6d18c1743c99418b01\"\n+checksum = \"fa68f2fb9cae9d37c9b2b3584aba698a2e97f72d7aef7b9f7aa71d8b54ce46fe\"\n dependencies = [\n  \"errno-dragonfly\",\n  \"libc\",\n@@ -187,9 +193,9 @@ checksum = \"8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2\"\n \n [[package]]\n name = \"gimli\"\n-version = \"0.22.0\"\n+version = \"0.23.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724\"\n+checksum = \"f6503fe142514ca4799d4c26297c4248239fe8838d827db6bd6065c6ed29a6ce\"\n dependencies = [\n  \"indexmap\",\n ]\n@@ -212,17 +218,17 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.79\"\n+version = \"0.2.80\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2448f6066e80e3bfc792e9c98bf705b4b0fc6e8ef5b43e5889aff0eaa9c58743\"\n+checksum = \"4d58d1b70b004888f764dfbf6a26a3b0342a1632d33968e4a179d8011c760614\"\n \n [[package]]\n name = \"libloading\"\n-version = \"0.6.4\"\n+version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3557c9384f7f757f6d139cd3a4c62ef4e850696c16bf27924a5538c8a09717a1\"\n+checksum = \"1090080fe06ec2648d0da3881d9453d97e71a45f00eb179af7fdd7e3f686fdb0\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 1.0.0\",\n  \"winapi\",\n ]\n \n@@ -232,7 +238,7 @@ version = \"0.4.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4fabed175da42fed1fa0746b0ea71f412aa9d35e76e95e59b192c64b9dc2bf8b\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n ]\n \n [[package]]\n@@ -246,9 +252,9 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.21.1\"\n+version = \"0.22.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"37fd5004feb2ce328a52b0b3d01dbf4ffff72583493900ed15f22d4111c51693\"\n+checksum = \"8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397\"\n dependencies = [\n  \"crc32fast\",\n  \"indexmap\",\n@@ -274,9 +280,9 @@ dependencies = [\n \n [[package]]\n name = \"raw-cpuid\"\n-version = \"7.0.3\"\n+version = \"8.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b4a349ca83373cfa5d6dbb66fd76e58b2cca08da71a5f6400de0a0a6a9bceeaf\"\n+checksum = \"1fdf7d9dbd43f3d81d94a49c1c3df73cc2b3827995147e6cf7f89d4ec5483e73\"\n dependencies = [\n  \"bitflags\",\n  \"cc\",\n@@ -361,9 +367,9 @@ checksum = \"fbee7696b84bbf3d89a1c2eccff0850e3047ed46bfcd2e92c29a2d074d57e252\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.44\"\n+version = \"1.0.48\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e03e57e4fcbfe7749842d53e24ccb9aa12b7252dbe5e91d2acad31834c8b8fdd\"\n+checksum = \"cc371affeffc477f42a221a1e4297aedcea33d47d19b61455588bd9d8f6b19ac\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -372,24 +378,24 @@ dependencies = [\n \n [[package]]\n name = \"target-lexicon\"\n-version = \"0.11.0\"\n+version = \"0.11.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fe2635952a442a01fd4cb53d98858b5e4bb461b02c0d111f22f31772e3e7a8b2\"\n+checksum = \"4ee5a98e506fb7231a304c3a1bd7c132a55016cf65001e0282480665870dfcb9\"\n \n [[package]]\n name = \"thiserror\"\n-version = \"1.0.21\"\n+version = \"1.0.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"318234ffa22e0920fe9a40d7b8369b5f649d490980cf7aadcf1eb91594869b42\"\n+checksum = \"0e9ae34b84616eedaaf1e9dd6026dbe00dcafa92aa0c8077cb69df1fcfe5e53e\"\n dependencies = [\n  \"thiserror-impl\",\n ]\n \n [[package]]\n name = \"thiserror-impl\"\n-version = \"1.0.21\"\n+version = \"1.0.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cae2447b6282786c3493999f40a9be2a6ad20cb8bd268b0a0dbf5a065535c0ab\"\n+checksum = \"9ba20f23e85b10754cd195504aebf6a27e2e6cbe28c17778a0c930724628dd56\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "cbff06749d3e93d51c1c1d8201be2a705b06cb8e", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -15,8 +15,8 @@ cranelift-module = { git = \"https://github.com/bytecodealliance/wasmtime/\", bran\n cranelift-simplejit = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", optional = true }\n cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n target-lexicon = \"0.11.0\"\n-gimli = { version = \"0.22.0\", default-features = false, features = [\"write\"]}\n-object = { version = \"0.21.1\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n+gimli = { version = \"0.23.0\", default-features = false, features = [\"write\"]}\n+object = { version = \"0.22.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.0.2\""}, {"sha": "de54bf67f4a19b7208613335ef998e05c42cb361", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -51,7 +51,7 @@ This should build and run your project with rustc_codegen_cranelift instead of t\n > You should prefer using the Cargo method.\n \n ```bash\n-$ $cg_clif_dir/build/cg_clif my_crate.rs\n+$ $cg_clif_dir/build/bin/cg_clif my_crate.rs\n ```\n \n ### Jit mode\n@@ -68,7 +68,7 @@ $ $cg_clif_dir/build/cargo.sh jit\n or\n \n ```bash\n-$ $cg_clif_dir/build/cg_clif --jit my_crate.rs\n+$ $cg_clif_dir/build/bin/cg_clif --jit my_crate.rs\n ```\n \n ### Shell\n@@ -77,7 +77,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/build/cg_clif - --jit\n+    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - --jit\n }\n \n function jit() {"}, {"sha": "26041b59cca1876bfcf56640a76b104125854ae3", "filename": "compiler/rustc_codegen_cranelift/build.sh", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fbuild.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fbuild.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -26,22 +26,35 @@ while [[ $# != 0 ]]; do\n done\n \n # Build cg_clif\n+unset CARGO_TARGET_DIR\n export RUSTFLAGS=\"-Zrun_dsymutil=no\"\n+unamestr=$(uname)\n+if [[ \"$unamestr\" == 'Linux' ]]; then\n+   export RUSTFLAGS='-Clink-arg=-Wl,-rpath=$ORIGIN/../lib '$RUSTFLAGS\n+elif [[ \"$unamestr\" == 'Darwin' ]]; then\n+   export RUSTFLAGS='-Clink-arg=-Wl,-rpath,@loader_path/../lib -Zosx-rpath-install-name '$RUSTFLAGS\n+   dylib_ext='dylib'\n+else\n+   echo \"Unsupported os\"\n+   exit 1\n+fi\n if [[ \"$CHANNEL\" == \"release\" ]]; then\n     cargo build --release\n else\n     cargo build\n fi\n \n-rm -rf $target_dir\n-mkdir $target_dir\n-cp -a target/$CHANNEL/cg_clif{,_build_sysroot} target/$CHANNEL/*rustc_codegen_cranelift* $target_dir/\n-cp -a rust-toolchain scripts/config.sh scripts/cargo.sh $target_dir\n+rm -rf \"$target_dir\"\n+mkdir \"$target_dir\"\n+mkdir \"$target_dir\"/bin \"$target_dir\"/lib\n+ln target/$CHANNEL/cg_clif{,_build_sysroot} \"$target_dir\"/bin\n+ln target/$CHANNEL/*rustc_codegen_cranelift* \"$target_dir\"/lib\n+ln rust-toolchain scripts/config.sh scripts/cargo.sh \"$target_dir\"\n \n if [[ \"$build_sysroot\" == \"1\" ]]; then\n     echo \"[BUILD] sysroot\"\n     export CG_CLIF_INCR_CACHE_DISABLED=1\n     dir=$(pwd)\n-    cd $target_dir\n-    time $dir/build_sysroot/build_sysroot.sh\n+    cd \"$target_dir\"\n+    time \"$dir/build_sysroot/build_sysroot.sh\"\n fi"}, {"sha": "a2b8f449f00ff06617abfcaef59d6a570a3e0ae4", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -2,9 +2,9 @@\n # It is not intended for manual editing.\n [[package]]\n name = \"addr2line\"\n-version = \"0.13.0\"\n+version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1b6a2d3371669ab3ca9797670853d61402b03d0b4b9ebf33d677dfa720203072\"\n+checksum = \"7c0929d69e78dd9bf5408269919fcbcaeb2e35e5d43e5815517cdc6a8e11a423\"\n dependencies = [\n  \"compiler_builtins\",\n  \"gimli\",\n@@ -47,9 +47,9 @@ checksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.61\"\n+version = \"1.0.65\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ed67cbde08356238e75fc4656be4749481eeffb09e19f320a25237d5221c985d\"\n+checksum = \"95752358c8f7552394baf48cd82695b345628ad3f170d607de3ca03b8dacca15\"\n \n [[package]]\n name = \"cfg-if\"\n@@ -76,9 +76,9 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"dlmalloc\"\n-version = \"0.1.4\"\n+version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"35055b1021724f4eb5262eb49130eebff23fc59fc5a14160e05faad8eeb36673\"\n+checksum = \"332570860c2edf2d57914987bf9e24835425f75825086b6ba7d1e6a3e4f1f254\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\",\n@@ -108,9 +108,9 @@ dependencies = [\n \n [[package]]\n name = \"gimli\"\n-version = \"0.22.0\"\n+version = \"0.23.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724\"\n+checksum = \"f6503fe142514ca4799d4c26297c4248239fe8838d827db6bd6065c6ed29a6ce\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n@@ -163,9 +163,9 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.20.0\"\n+version = \"0.22.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1ab52be62400ca80aa00285d25253d7f7c437b7375c4de678f5405d3afe82ca5\"\n+checksum = \"8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\","}, {"sha": "d7a72df2eb2839ba43f04bc82e3765abe44915f3", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/build_sysroot.sh", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -10,10 +10,10 @@ dir=$(pwd)\n \n # Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n # build scripts are still compiled using cg_llvm.\n-export RUSTC=$dir\"/cg_clif_build_sysroot\"\n+export RUSTC=$dir\"/bin/cg_clif_build_sysroot\"\n export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n \n-cd $(dirname \"$0\")\n+cd \"$(dirname \"$0\")\"\n \n # Cleanup for previous run\n #     v Clean target dir except for build scripts and incremental cache\n@@ -28,12 +28,13 @@ if [[ \"$1\" != \"--debug\" ]]; then\n     sysroot_channel='release'\n     # FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n     # FIXME Enable -Zmir-opt-level=2 again once it doesn't ice anymore\n-    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS\" cargo build --target $TARGET_TRIPLE --release\n+    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS\" cargo build --target \"$TARGET_TRIPLE\" --release\n else\n     sysroot_channel='debug'\n-    cargo build --target $TARGET_TRIPLE\n+    cargo build --target \"$TARGET_TRIPLE\"\n fi\n \n # Copy files to sysroot\n-mkdir -p $dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n-cp -a target/$TARGET_TRIPLE/$sysroot_channel/deps/* $dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n+mkdir -p \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n+ln \"target/$TARGET_TRIPLE/$sysroot_channel/deps/\"* \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n+rm \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"*.{rmeta,d}"}, {"sha": "40fbaf646a2f69a435a2c61427ebf143849599f0", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/prepare_sysroot_src.sh", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -1,18 +1,18 @@\n #!/bin/bash\n set -e\n-cd $(dirname \"$0\")\n+cd \"$(dirname \"$0\")\"\n \n-SRC_DIR=$(dirname $(rustup which rustc))\"/../lib/rustlib/src/rust/\"\n+SRC_DIR=\"$(dirname \"$(rustup which rustc)\")/../lib/rustlib/src/rust/\"\n DST_DIR=\"sysroot_src\"\n \n-if [ ! -e $SRC_DIR ]; then\n+if [ ! -e \"$SRC_DIR\" ]; then\n     echo \"Please install rust-src component\"\n     exit 1\n fi\n \n rm -rf $DST_DIR\n mkdir -p $DST_DIR/library\n-cp -a $SRC_DIR/library $DST_DIR/\n+cp -a \"$SRC_DIR/library\" $DST_DIR/\n \n pushd $DST_DIR\n echo \"[GIT] init\"\n@@ -22,8 +22,8 @@ git add .\n echo \"[GIT] commit\"\n git commit -m \"Initial commit\" -q\n for file in $(ls ../../patches/ | grep -v patcha); do\n-echo \"[GIT] apply\" $file\n-git apply ../../patches/$file\n+echo \"[GIT] apply\" \"$file\"\n+git apply ../../patches/\"$file\"\n git add -A\n git commit --no-gpg-sign -m \"Patch $file\"\n done"}, {"sha": "b38e25328a4eece82b29334128f293e498a4b188", "filename": "compiler/rustc_codegen_cranelift/example/std_example.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -53,6 +53,7 @@ fn main() {\n \n     assert_eq!(0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000u128.leading_zeros(), 26);\n     assert_eq!(0b0000000000000000000000000010000000000000000000000000000000000000_0000000000000000000000000000000000001000000000000000000010000000u128.trailing_zeros(), 7);\n+    assert_eq!(core::intrinsics::saturating_sub(0, -170141183460469231731687303715884105728i128), 170141183460469231731687303715884105727i128);\n \n     let _d = 0i128.checked_div(2i128);\n     let _d = 0u128.checked_div(2u128);"}, {"sha": "8cfffe580a1f0ef9be7dc3f207d4d399465de3de", "filename": "compiler/rustc_codegen_cranelift/patches/0022-core-Disable-not-compiling-tests.patch", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-core-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-core-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-core-Disable-not-compiling-tests.patch?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -52,8 +52,8 @@ index 0475aeb..9558198 100644\n              fn test_rotate() {\n                  assert_eq!(A.rotate_left(6).rotate_right(2).rotate_right(4), A);\n @@ -112,6 +113,7 @@ mod tests {\n-                 assert_eq!(B.rotate_left(64), B);\n-                 assert_eq!(C.rotate_left(64), C);\n+                 assert_eq!(B.rotate_left(128), B);\n+                 assert_eq!(C.rotate_left(128), C);\n              }\n +            */\n  \n@@ -72,8 +72,8 @@ index 04ed14f..a6e372e 100644\n              fn test_rotate() {\n                  assert_eq!(A.rotate_left(6).rotate_right(2).rotate_right(4), A);\n @@ -76,6 +77,7 @@ mod tests {\n-                 assert_eq!(B.rotate_left(64), B);\n-                 assert_eq!(C.rotate_left(64), C);\n+                 assert_eq!(B.rotate_left(128), B);\n+                 assert_eq!(C.rotate_left(128), C);\n              }\n +            */\n  "}, {"sha": "08e7cb1802999867d9427d58f478983dbe7fd133", "filename": "compiler/rustc_codegen_cranelift/prepare.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fprepare.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fprepare.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fprepare.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -24,6 +24,7 @@ git checkout -- .\n git checkout 804a7a21b9e673a482797aa289a18ed480e4d813\n \n # build with cg_llvm for perf comparison\n+unset CARGO_TARGET_DIR\n cargo build\n mv target/debug/main raytracer_cg_llvm\n popd"}, {"sha": "ed1e64f45db08a8fbd66430a89a151541949bca7", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -1 +1 @@\n-nightly-2020-10-31\n+nightly-2020-11-27"}, {"sha": "dcd40acc02a53369b4332c3920dafa5d61908083", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo.sh", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -1,16 +1,16 @@\n #!/bin/bash\n \n dir=$(dirname \"$0\")\n-source $dir/config.sh\n+source \"$dir/config.sh\"\n \n # read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat $dir/rust-toolchain)\n+TOOLCHAIN=$(cat \"$dir/rust-toolchain\")\n \n cmd=$1\n shift || true\n \n if [[ \"$cmd\" = \"jit\" ]]; then\n-cargo +${TOOLCHAIN} rustc \"$@\" -- --jit\n+cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- --jit\n else\n-cargo +${TOOLCHAIN} $cmd \"$@\"\n+cargo \"+${TOOLCHAIN}\" \"$cmd\" \"$@\"\n fi"}, {"sha": "dea037e2bc0021954537ef9cc3c34913de50ae40", "filename": "compiler/rustc_codegen_cranelift/scripts/config.sh", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -1,7 +1,8 @@\n-#!/usr/bin/env bash\n+# Note to people running shellcheck: this file should only be sourced, not executed directly.\n+\n set -e\n \n-unamestr=`uname`\n+unamestr=$(uname)\n if [[ \"$unamestr\" == 'Linux' ]]; then\n    dylib_ext='so'\n elif [[ \"$unamestr\" == 'Darwin' ]]; then\n@@ -40,19 +41,19 @@ echo\n export RUSTC_WRAPPER=\n fi\n \n-dir=$(cd $(dirname \"$BASH_SOURCE\"); pwd)\n+dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\"; pwd)\n \n-export RUSTC=$dir\"/cg_clif\"\n-export RUSTFLAGS=$linker\n-export RUSTDOCFLAGS=$linker' -Ztrim-diagnostic-paths=no -Cpanic=abort -Zpanic-abort-tests '\\\n-'-Zcodegen-backend='$dir'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$dir'/sysroot'\n+export RUSTC=$dir\"/bin/cg_clif\"\n+export RUSTFLAGS=$linker\" \"$RUSTFLAGS\n+export RUSTDOCFLAGS=$linker' -Cpanic=abort -Zpanic-abort-tests '\\\n+'-Zcodegen-backend='$dir'/lib/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$dir\n \n # FIXME remove once the atomic shim is gone\n-if [[ `uname` == 'Darwin' ]]; then\n+if [[ $(uname) == 'Darwin' ]]; then\n    export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n fi\n \n-export LD_LIBRARY_PATH=\"$dir:$(rustc --print sysroot)/lib:$dir/target/out:$dir/sysroot/lib/rustlib/\"$TARGET_TRIPLE\"/lib\"\n+export LD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n \n export CG_CLIF_DISPLAY_CG_TIME=1"}, {"sha": "430f5c469b4b2618c6f4f83ed939055443a52640", "filename": "compiler/rustc_codegen_cranelift/scripts/rustup.sh", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -7,13 +7,13 @@ case $1 in\n         TOOLCHAIN=$(date +%Y-%m-%d)\n \n         echo \"=> Installing new nightly\"\n-        rustup toolchain install --profile minimal nightly-${TOOLCHAIN} # Sanity check to see if the nightly exists\n-        echo nightly-${TOOLCHAIN} > rust-toolchain\n+        rustup toolchain install --profile minimal \"nightly-${TOOLCHAIN}\" # Sanity check to see if the nightly exists\n+        echo \"nightly-${TOOLCHAIN}\" > rust-toolchain\n         rustup component add rustfmt || true\n \n         echo \"=> Uninstalling all old nighlies\"\n-        for nightly in $(rustup toolchain list | grep nightly | grep -v $TOOLCHAIN | grep -v nightly-x86_64); do\n-            rustup toolchain uninstall $nightly\n+        for nightly in $(rustup toolchain list | grep nightly | grep -v \"$TOOLCHAIN\" | grep -v nightly-x86_64); do\n+            rustup toolchain uninstall \"$nightly\"\n         done\n \n         ./clean_all.sh\n@@ -27,14 +27,30 @@ case $1 in\n         git commit -m \"Rustup to $(rustc -V)\"\n         ;;\n     \"push\")\n-\tcg_clif=$(pwd)\n-\tpushd ../rust\n-\tbranch=update_cg_clif-$(date +%Y-%m-%d)\n-\tgit checkout -b $branch\n-\tgit subtree pull --prefix=compiler/rustc_codegen_cranelift/ https://github.com/bjorn3/rustc_codegen_cranelift.git master\n-\tgit push -u my $branch\n-\tpopd\n+        cg_clif=$(pwd)\n+        pushd ../rust\n+        git pull origin master\n+        branch=sync_cg_clif-$(date +%Y-%m-%d)\n+        git checkout -b \"$branch\"\n+        git subtree pull --prefix=compiler/rustc_codegen_cranelift/ https://github.com/bjorn3/rustc_codegen_cranelift.git master\n+        git push -u my \"$branch\"\n+\n+        # immediately merge the merge commit into cg_clif to prevent merge conflicts when syncing\n+        # from rust-lang/rust later\n+        git subtree push --prefix=compiler/rustc_codegen_cranelift/ \"$cg_clif\" sync_from_rust\n+        popd\n+        git merge sync_from_rust\n \t;;\n+    \"pull\")\n+        cg_clif=$(pwd)\n+        pushd ../rust\n+        git pull origin master\n+        rust_vers=\"$(git rev-parse HEAD)\"\n+        git subtree push --prefix=compiler/rustc_codegen_cranelift/ \"$cg_clif\" sync_from_rust\n+        popd\n+        git merge sync_from_rust -m \"Sync from rust $rust_vers\"\n+        git branch -d sync_from_rust\n+        ;;\n     *)\n         echo \"Unknown command '$1'\"\n         echo \"Usage: ./rustup.sh prepare|commit\""}, {"sha": "db69541b226cf8aba2167bfba8ea9569d73637db", "filename": "compiler/rustc_codegen_cranelift/scripts/test_bootstrap.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -1,7 +1,7 @@\n #!/bin/bash\n set -e\n \n-cd $(dirname \"$0\")/../\n+cd \"$(dirname \"$0\")/../\"\n \n ./build.sh\n source build/config.sh\n@@ -11,7 +11,7 @@ git clone https://github.com/rust-lang/rust.git || true\n pushd rust\n git fetch\n git checkout -- .\n-git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(')\n+git checkout \"$(rustc -V | cut -d' ' -f3 | tr -d '(')\"\n \n git apply - <<EOF\n diff --git a/.gitmodules b/.gitmodules\n@@ -48,7 +48,7 @@ cat > config.toml <<EOF\n ninja = false\n \n [build]\n-rustc = \"$(pwd)/../build/cg_clif\"\n+rustc = \"$(pwd)/../build/bin/cg_clif\"\n cargo = \"$(rustup which cargo)\"\n full-bootstrap = true\n local-rebuild = true"}, {"sha": "114b6f30a4a9119941af907bab0173333aaf8388", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -4,63 +4,63 @@ set -e\n \n source build/config.sh\n export CG_CLIF_INCR_CACHE_DISABLED=1\n-MY_RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+MY_RUSTC=\"$RUSTC $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n function no_sysroot_tests() {\n     echo \"[BUILD] mini_core\"\n-    $MY_RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target \"$TARGET_TRIPLE\"\n \n     echo \"[BUILD] example\"\n-    $MY_RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n+    $MY_RUSTC example/example.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] mini_core_hello_world\"\n-        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n+        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] mini_core_hello_world (skipped)\"\n     fi\n \n     echo \"[AOT] mini_core_hello_world\"\n-    $MY_RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n     # (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n \n     echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-    $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n }\n \n function base_sysroot_tests() {\n     echo \"[AOT] alloc_example\"\n-    $MY_RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/alloc_example.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/alloc_example\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] std_example\"\n-        $MY_RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n+        $MY_RUSTC --jit example/std_example.rs --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] std_example (skipped)\"\n     fi\n \n     echo \"[AOT] dst_field_align\"\n     # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n-    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n \n     echo \"[AOT] std_example\"\n-    $MY_RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/std_example.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/std_example arg\n \n     echo \"[AOT] subslice-patterns-const-eval\"\n-    $MY_RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $MY_RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n \n     echo \"[AOT] track-caller-attribute\"\n-    $MY_RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $MY_RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/track-caller-attribute\n \n     echo \"[AOT] mod_bench\"\n-    $MY_RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n+    $MY_RUSTC example/mod_bench.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/mod_bench\n \n     pushd rand\n@@ -73,13 +73,13 @@ function extended_sysroot_tests() {\n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-        hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n+        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"cargo clean\" \\\n         \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n         \"../build/cargo.sh build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\"\n         cp ./target/debug/main ./raytracer_cg_clif\n-        hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n+        hyperfine --runs \"${RUN_RUNS:-10}\" ./raytracer_cg_llvm ./raytracer_cg_clif\n     else\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\""}, {"sha": "aee274ab4a823dec08c1f58f9d06f43c630c39c8", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -214,10 +214,8 @@ pub(crate) fn get_function_name_and_sig<'tcx>(\n     support_vararg: bool,\n ) -> (String, Signature) {\n     assert!(!inst.substs.needs_infer());\n-    let fn_sig = tcx.normalize_erasing_late_bound_regions(\n-        ParamEnv::reveal_all(),\n-        fn_sig_for_fn_abi(tcx, inst),\n-    );\n+    let fn_sig = tcx\n+        .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), fn_sig_for_fn_abi(tcx, inst));\n     if fn_sig.c_variadic && !support_vararg {\n         tcx.sess.span_fatal(\n             tcx.def_span(inst.def_id()),"}, {"sha": "96579054389abd0723ba74cb938177589fb50c78", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -8,7 +8,7 @@ use rustc_codegen_ssa::back::archive::{find_library, ArchiveBuilder};\n use rustc_codegen_ssa::METADATA_FILENAME;\n use rustc_session::Session;\n \n-use object::{Object, SymbolKind};\n+use object::{Object, ObjectSymbol, SymbolKind};\n \n #[derive(Debug)]\n enum ArchiveEntry {\n@@ -184,7 +184,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                             entry_name.as_bytes().to_vec(),\n                             object\n                                 .symbols()\n-                                .filter_map(|(_index, symbol)| {\n+                                .filter_map(|symbol| {\n                                     if symbol.is_undefined()\n                                         || symbol.is_local()\n                                         || symbol.kind() != SymbolKind::Data\n@@ -193,7 +193,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                                     {\n                                         None\n                                     } else {\n-                                        symbol.name().map(|name| name.as_bytes().to_vec())\n+                                        symbol.name().map(|name| name.as_bytes().to_vec()).ok()\n                                     }\n                                 })\n                                 .collect::<Vec<_>>(),"}, {"sha": "674e6d907510a8510607cea2c747a66d17238c74", "filename": "compiler/rustc_codegen_cranelift/src/atomic_shim.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fatomic_shim.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -7,8 +7,7 @@ use crate::prelude::*;\n \n #[cfg(all(feature = \"jit\", unix))]\n #[no_mangle]\n-static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n-    libc::PTHREAD_MUTEX_INITIALIZER;\n+static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t = libc::PTHREAD_MUTEX_INITIALIZER;\n \n pub(crate) fn init_global_lock(\n     module: &mut impl Module,"}, {"sha": "72073896a723b89f908879e70e15be35c68f17b5", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -12,6 +12,10 @@ pub(crate) fn codegen_fn<'tcx>(\n ) {\n     let tcx = cx.tcx;\n \n+    let _inst_guard =\n+        crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));\n+    debug_assert!(!instance.substs.needs_infer());\n+\n     let mir = tcx.instance_mir(instance.def);\n \n     // Declare function\n@@ -499,7 +503,8 @@ fn codegen_stmt<'tcx>(\n                         UnOp::Neg => match layout.ty.kind() {\n                             ty::Int(IntTy::I128) => {\n                                 // FIXME remove this case once ineg.i128 works\n-                                let zero = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n+                                let zero =\n+                                    CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n                                 crate::num::codegen_int_binop(fx, BinOp::Sub, zero, operand)\n                             }\n                             ty::Int(_) => CValue::by_val(fx.bcx.ins().ineg(val), layout),\n@@ -509,7 +514,11 @@ fn codegen_stmt<'tcx>(\n                     };\n                     lval.write_cvalue(fx, res);\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), ref operand, to_ty) => {\n+                Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::ReifyFnPointer),\n+                    ref operand,\n+                    to_ty,\n+                ) => {\n                     let from_ty = fx.monomorphize(operand.ty(&fx.mir.local_decls, fx.tcx));\n                     let to_layout = fx.layout_of(fx.monomorphize(to_ty));\n                     match *from_ty.kind() {\n@@ -530,9 +539,21 @@ fn codegen_stmt<'tcx>(\n                         _ => bug!(\"Trying to ReifyFnPointer on non FnDef {:?}\", from_ty),\n                     }\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), ref operand, to_ty)\n-                | Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), ref operand, to_ty)\n-                | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), ref operand, to_ty) => {\n+                Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::UnsafeFnPointer),\n+                    ref operand,\n+                    to_ty,\n+                )\n+                | Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::MutToConstPointer),\n+                    ref operand,\n+                    to_ty,\n+                )\n+                | Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::ArrayToPointer),\n+                    ref operand,\n+                    to_ty,\n+                ) => {\n                     let to_layout = fx.layout_of(fx.monomorphize(to_ty));\n                     let operand = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));"}, {"sha": "f4d23ebcf4e4dd445452399b549d7de8c6d633cf", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -26,15 +26,15 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n \n         config.opts.cg.panic = Some(PanicStrategy::Abort);\n         config.opts.debugging_opts.panic_abort_tests = true;\n-        config.opts.maybe_sysroot = Some(\n-            config.opts.maybe_sysroot.clone().unwrap_or_else(\n-                || std::env::current_exe()\n-                    .unwrap()\n-                    .parent()\n-                    .unwrap()\n-                    .join(\"sysroot\"),\n-            ),\n-        );\n+        config.opts.maybe_sysroot = Some(config.opts.maybe_sysroot.clone().unwrap_or_else(|| {\n+            std::env::current_exe()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .parent()\n+                .unwrap()\n+                .to_owned()\n+        }));\n     }\n }\n "}, {"sha": "1485d4451b815bb01261b85cdb931f1107ec3af6", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -233,7 +233,7 @@ pub(crate) fn type_min_max_value(\n             let min_msb = bcx.ins().iconst(types::I64, (min >> 64) as u64 as i64);\n             let min = bcx.ins().iconcat(min_lsb, min_msb);\n \n-            let max = i128::MIN as u128;\n+            let max = i128::MAX as u128;\n             let max_lsb = bcx.ins().iconst(types::I64, max as u64 as i64);\n             let max_msb = bcx.ins().iconst(types::I64, (max >> 64) as u64 as i64);\n             let max = bcx.ins().iconcat(max_lsb, max_msb);\n@@ -364,7 +364,7 @@ impl<'tcx, M: Module> FunctionCx<'_, 'tcx, M> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            value\n+            value,\n         )\n     }\n "}, {"sha": "544b020b711900de19f66498d63f456c41cb22b8", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -163,10 +163,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n     assert!(!layout.is_unsized(), \"sized const value\");\n \n     if layout.is_zst() {\n-        return CValue::by_ref(\n-            crate::Pointer::dangling(layout.align.pref),\n-            layout,\n-        );\n+        return CValue::by_ref(crate::Pointer::dangling(layout.align.pref), layout);\n     }\n \n     match const_val {\n@@ -186,9 +183,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n             }\n \n             match x {\n-                Scalar::Int(int) => {\n-                    CValue::const_val(fx, layout, int)\n-                }\n+                Scalar::Int(int) => CValue::const_val(fx, layout, int),\n                 Scalar::Ptr(ptr) => {\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n                     let base_addr = match alloc_kind {"}, {"sha": "c21835b1fc3aaf8155a45c86c34365929352337d", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/emit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -76,16 +76,17 @@ impl WriterRelocate {\n     #[cfg(feature = \"jit\")]\n     pub(super) fn relocate_for_jit(\n         mut self,\n-        jit_product: &cranelift_simplejit::SimpleJITProduct,\n+        jit_module: &cranelift_simplejit::SimpleJITModule,\n     ) -> Vec<u8> {\n         use std::convert::TryInto;\n \n         for reloc in self.relocs.drain(..) {\n             match reloc.name {\n                 super::DebugRelocName::Section(_) => unreachable!(),\n                 super::DebugRelocName::Symbol(sym) => {\n-                    let addr = jit_product\n-                        .lookup_func(cranelift_module::FuncId::from_u32(sym.try_into().unwrap()));\n+                    let addr = jit_module.get_finalized_function(\n+                        cranelift_module::FuncId::from_u32(sym.try_into().unwrap()),\n+                    );\n                     let val = (addr as u64 as i64 + reloc.addend) as u64;\n                     self.writer\n                         .write_udata_at(reloc.offset as usize, val, reloc.size)"}, {"sha": "e0f62b64e6bbb5350edbd091879908ec2c44a6f3", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> UnwindContext<'tcx> {\n     #[cfg(feature = \"jit\")]\n     pub(crate) unsafe fn register_jit(\n         self,\n-        jit_product: &cranelift_simplejit::SimpleJITProduct,\n+        jit_module: &cranelift_simplejit::SimpleJITModule,\n     ) -> Option<UnwindRegistry> {\n         let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(\n             self.tcx,\n@@ -91,7 +91,7 @@ impl<'tcx> UnwindContext<'tcx> {\n             return None;\n         }\n \n-        let mut eh_frame = eh_frame.0.relocate_for_jit(jit_product);\n+        let mut eh_frame = eh_frame.0.relocate_for_jit(jit_module);\n \n         // GCC expects a terminating \"empty\" length, so write a 0 length at the end of the table.\n         eh_frame.extend(&[0, 0, 0, 0]);"}, {"sha": "ad635016a913672fd3bcae690efa78fbc28b4071", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -30,8 +30,16 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n                 .ty\n                 .discriminant_for_variant(fx.tcx, variant_index)\n                 .unwrap()\n-                .val\n-                .into();\n+                .val;\n+            let to = if ptr.layout().abi.is_signed() {\n+                ty::ScalarInt::try_from_int(\n+                    ptr.layout().size.sign_extend(to) as i128,\n+                    ptr.layout().size,\n+                )\n+                .unwrap()\n+            } else {\n+                ty::ScalarInt::try_from_uint(to, ptr.layout().size).unwrap()\n+            };\n             let discr = CValue::const_val(fx, ptr.layout(), to);\n             ptr.write_cvalue(fx, discr);\n         }\n@@ -49,8 +57,12 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             if variant_index != dataful_variant {\n                 let niche = place.place_field(fx, mir::Field::new(tag_field));\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n-                let niche_value = u128::from(niche_value).wrapping_add(niche_start);\n-                let niche_llval = CValue::const_val(fx, niche.layout(), niche_value.into());\n+                let niche_value = ty::ScalarInt::try_from_uint(\n+                    u128::from(niche_value).wrapping_add(niche_start),\n+                    niche.layout().size,\n+                )\n+                .unwrap();\n+                let niche_llval = CValue::const_val(fx, niche.layout(), niche_value);\n                 niche.write_cvalue(fx, niche_llval);\n             }\n         }\n@@ -78,7 +90,16 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 .ty\n                 .discriminant_for_variant(fx.tcx, *index)\n                 .map_or(u128::from(index.as_u32()), |discr| discr.val);\n-            return CValue::const_val(fx, dest_layout, discr_val.into());\n+            let discr_val = if dest_layout.abi.is_signed() {\n+                ty::ScalarInt::try_from_int(\n+                    dest_layout.size.sign_extend(discr_val) as i128,\n+                    dest_layout.size,\n+                )\n+                .unwrap()\n+            } else {\n+                ty::ScalarInt::try_from_uint(discr_val, dest_layout.size).unwrap()\n+            };\n+            return CValue::const_val(fx, dest_layout, discr_val);\n         }\n         Variants::Multiple {\n             tag,"}, {"sha": "491d6cbbf796935ec032a8bc52f7bd39ae83526b", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -145,7 +145,11 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n     }\n \n     let mut cx = crate::CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n-    super::codegen_mono_items(&mut cx, mono_items);\n+    super::predefine_mono_items(&mut cx, &mono_items);\n+    for (mono_item, (linkage, visibility)) in mono_items {\n+        let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+        super::codegen_mono_item(&mut cx, mono_item, linkage);\n+    }\n     let (mut module, global_asm, debug, mut unwind_context) =\n         tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context, false);"}, {"sha": "5a844841c2ce5b0649723fccc8e1c06e3f8a3b09", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -70,7 +70,11 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let (mut jit_module, global_asm, _debug, mut unwind_context) =\n         super::time(tcx, \"codegen mono items\", || {\n-            super::codegen_mono_items(&mut cx, mono_items);\n+            super::predefine_mono_items(&mut cx, &mono_items);\n+            for (mono_item, (linkage, visibility)) in mono_items {\n+                let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+                super::codegen_mono_item(&mut cx, mono_item, linkage);\n+            }\n             tcx.sess.time(\"finalize CodegenCx\", || cx.finalize())\n         });\n     if !global_asm.is_empty() {\n@@ -81,11 +85,11 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     tcx.sess.abort_if_errors();\n \n-    let jit_product = jit_module.finish();\n+    jit_module.finalize_definitions();\n \n-    let _unwind_register_guard = unsafe { unwind_context.register_jit(&jit_product) };\n+    let _unwind_register_guard = unsafe { unwind_context.register_jit(&jit_module) };\n \n-    let finalized_main: *const u8 = jit_product.lookup_func(main_func_id);\n+    let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n \n     println!(\"Rustc codegen cranelift will JIT run the executable, because --jit was passed\");\n \n@@ -140,11 +144,11 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n \n     let mut imported_symbols = Vec::new();\n     for path in dylib_paths {\n-        use object::Object;\n+        use object::{Object, ObjectSymbol};\n         let lib = libloading::Library::new(&path).unwrap();\n         let obj = std::fs::read(path).unwrap();\n         let obj = object::File::parse(&obj).unwrap();\n-        imported_symbols.extend(obj.dynamic_symbols().filter_map(|(_idx, symbol)| {\n+        imported_symbols.extend(obj.dynamic_symbols().filter_map(|symbol| {\n             let name = symbol.name().unwrap().to_string();\n             if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n                 return None;"}, {"sha": "7b8cc2ddd48d6da49f1ffbab26a2c6083a892d55", "filename": "compiler/rustc_codegen_cranelift/src/driver/mod.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -1,4 +1,4 @@\n-//! Drivers are responsible for calling [`codegen_mono_items`] and performing any further actions\n+//! Drivers are responsible for calling [`codegen_mono_item`] and performing any further actions\n //! like JIT executing or writing object files.\n \n use std::any::Any;\n@@ -40,12 +40,12 @@ pub(crate) fn codegen_crate(\n     aot::run_aot(tcx, metadata, need_metadata_module)\n }\n \n-fn codegen_mono_items<'tcx>(\n+fn predefine_mono_items<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx, impl Module>,\n-    mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n+    mono_items: &[(MonoItem<'tcx>, (RLinkage, Visibility))],\n ) {\n     cx.tcx.sess.time(\"predefine functions\", || {\n-        for &(mono_item, (linkage, visibility)) in &mono_items {\n+        for &(mono_item, (linkage, visibility)) in mono_items {\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let (name, sig) = get_function_name_and_sig(\n@@ -61,32 +61,22 @@ fn codegen_mono_items<'tcx>(\n             }\n         }\n     });\n-\n-    for (mono_item, (linkage, visibility)) in mono_items {\n-        let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-        codegen_mono_item(cx, mono_item, linkage);\n-    }\n }\n \n fn codegen_mono_item<'tcx, M: Module>(\n     cx: &mut crate::CodegenCx<'tcx, M>,\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,\n ) {\n-    let tcx = cx.tcx;\n     match mono_item {\n         MonoItem::Fn(inst) => {\n-            let _inst_guard =\n-                crate::PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).name));\n-            debug_assert!(!inst.substs.needs_infer());\n-            tcx.sess\n+            cx.tcx\n+                .sess\n                 .time(\"codegen fn\", || crate::base::codegen_fn(cx, inst, linkage));\n         }\n-        MonoItem::Static(def_id) => {\n-            crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n-        }\n+        MonoItem::Static(def_id) => crate::constant::codegen_static(&mut cx.constants_cx, def_id),\n         MonoItem::GlobalAsm(hir_id) => {\n-            let item = tcx.hir().expect_item(hir_id);\n+            let item = cx.tcx.hir().expect_item(hir_id);\n             if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n                 cx.global_asm.push_str(&*asm.as_str());\n                 cx.global_asm.push_str(\"\\n\\n\");"}, {"sha": "3563aa250a9b8fb7c8fd1c6af0e89479495196ec", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 66, "deletions": 14, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -263,6 +263,48 @@ fn simd_pair_for_each_lane<'tcx, M: Module>(\n     }\n }\n \n+fn simd_reduce<'tcx, M: Module>(\n+    fx: &mut FunctionCx<'_, 'tcx, M>,\n+    val: CValue<'tcx>,\n+    ret: CPlace<'tcx>,\n+    f: impl Fn(&mut FunctionCx<'_, 'tcx, M>, TyAndLayout<'tcx>, Value, Value) -> Value,\n+) {\n+    let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, val.layout());\n+    assert_eq!(lane_layout, ret.layout());\n+\n+    let mut res_val = val.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n+    for lane_idx in 1..lane_count {\n+        let lane = val\n+            .value_field(fx, mir::Field::new(lane_idx.into()))\n+            .load_scalar(fx);\n+        res_val = f(fx, lane_layout, res_val, lane);\n+    }\n+    let res = CValue::by_val(res_val, lane_layout);\n+    ret.write_cvalue(fx, res);\n+}\n+\n+fn simd_reduce_bool<'tcx, M: Module>(\n+    fx: &mut FunctionCx<'_, 'tcx, M>,\n+    val: CValue<'tcx>,\n+    ret: CPlace<'tcx>,\n+    f: impl Fn(&mut FunctionCx<'_, 'tcx, M>, Value, Value) -> Value,\n+) {\n+    let (_lane_layout, lane_count) = lane_type_and_count(fx.tcx, val.layout());\n+    assert!(ret.layout().ty.is_bool());\n+\n+    let res_val = val.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n+    let mut res_val = fx.bcx.ins().band_imm(res_val, 1); // mask to boolean\n+    for lane_idx in 1..lane_count {\n+        let lane = val\n+            .value_field(fx, mir::Field::new(lane_idx.into()))\n+            .load_scalar(fx);\n+        let lane = fx.bcx.ins().band_imm(lane, 1); // mask to boolean\n+        res_val = f(fx, res_val, lane);\n+    }\n+    let res = CValue::by_val(res_val, ret.layout());\n+    ret.write_cvalue(fx, res);\n+}\n+\n fn bool_to_zero_or_max_uint<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     layout: TyAndLayout<'tcx>,\n@@ -287,7 +329,7 @@ fn bool_to_zero_or_max_uint<'tcx>(\n }\n \n macro simd_cmp {\n-    ($fx:expr, $cc:ident($x:ident, $y:ident) -> $ret:ident) => {\n+    ($fx:expr, $cc:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n         let vector_ty = clif_vector_type($fx.tcx, $x.layout());\n \n         if let Some(vector_ty) = vector_ty {\n@@ -308,14 +350,15 @@ macro simd_cmp {\n                 |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n                     let res_lane = match lane_layout.ty.kind() {\n                         ty::Uint(_) | ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane),\n+                        ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n                         _ => unreachable!(\"{:?}\", lane_layout.ty),\n                     };\n                     bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n                 },\n             );\n         }\n     },\n-    ($fx:expr, $cc_u:ident|$cc_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n+    ($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n         // FIXME use vector icmp when possible\n         simd_pair_for_each_lane(\n             $fx,\n@@ -326,6 +369,7 @@ macro simd_cmp {\n                 let res_lane = match lane_layout.ty.kind() {\n                     ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n+                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n                 };\n                 bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n@@ -497,12 +541,12 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         };\n         copy | copy_nonoverlapping, <elem_ty> (v src, v dst, v count) {\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n-            let elem_size = fx\n-                .bcx\n-                .ins()\n-                .iconst(fx.pointer_type, elem_size as i64);\n             assert_eq!(args.len(), 3);\n-            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+            let byte_amount = if elem_size != 1 {\n+                fx.bcx.ins().imul_imm(count, elem_size as i64)\n+            } else {\n+                count\n+            };\n \n             if intrinsic.contains(\"nonoverlapping\") {\n                 // FIXME emit_small_memcpy\n@@ -515,12 +559,12 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         // NOTE: the volatile variants have src and dst swapped\n         volatile_copy_memory | volatile_copy_nonoverlapping_memory, <elem_ty> (v dst, v src, v count) {\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n-            let elem_size = fx\n-                .bcx\n-                .ins()\n-                .iconst(fx.pointer_type, elem_size as i64);\n             assert_eq!(args.len(), 3);\n-            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+            let byte_amount = if elem_size != 1 {\n+                fx.bcx.ins().imul_imm(count, elem_size as i64)\n+            } else {\n+                count\n+            };\n \n             // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n             if intrinsic.contains(\"nonoverlapping\") {\n@@ -676,7 +720,11 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         offset | arith_offset, (c base, v offset) {\n             let pointee_ty = base.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n-            let ptr_diff = fx.bcx.ins().imul_imm(offset, pointee_size as i64);\n+            let ptr_diff = if pointee_size != 1 {\n+                fx.bcx.ins().imul_imm(offset, pointee_size as i64)\n+            } else {\n+                offset\n+            };\n             let base_val = base.load_scalar(fx);\n             let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n             ret.write_cvalue(fx, CValue::by_val(res, base.layout()));\n@@ -688,7 +736,11 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         write_bytes | volatile_set_memory, (c dst, v val, v count) {\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n-            let count = fx.bcx.ins().imul_imm(count, pointee_size as i64);\n+            let count = if pointee_size != 1 {\n+                fx.bcx.ins().imul_imm(count, pointee_size as i64)\n+            } else {\n+                count\n+            };\n             let dst_ptr = dst.load_scalar(fx);\n             // FIXME make the memset actually volatile when switching to emit_small_memset\n             // FIXME use emit_small_memset"}, {"sha": "2b32e866e5ef6f088f89d3f3c563f8c3c239c27b", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 53, "deletions": 12, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -35,30 +35,33 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n \n-        // FIXME support float comparisons\n         simd_eq, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, Equal(x, y) -> ret);\n+            simd_cmp!(fx, Equal|Equal(x, y) -> ret);\n         };\n         simd_ne, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, NotEqual(x, y) -> ret);\n+            simd_cmp!(fx, NotEqual|NotEqual(x, y) -> ret);\n         };\n         simd_lt, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedLessThan|SignedLessThan(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedLessThan|SignedLessThan|LessThan(x, y) -> ret);\n         };\n         simd_le, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedLessThanOrEqual|SignedLessThanOrEqual(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedLessThanOrEqual|SignedLessThanOrEqual|LessThanOrEqual(x, y) -> ret);\n         };\n         simd_gt, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedGreaterThan|SignedGreaterThan(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedGreaterThan|SignedGreaterThan|GreaterThan(x, y) -> ret);\n         };\n         simd_ge, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual(x, y) -> ret);\n+            simd_cmp!(\n+                fx,\n+                UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual|GreaterThanOrEqual\n+                (x, y) -> ret\n+            );\n         };\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U\n@@ -107,9 +110,9 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n             for (out_idx, in_idx) in indexes.into_iter().enumerate() {\n                 let in_lane = if in_idx < lane_count {\n-                    x.value_field(fx, mir::Field::new(in_idx.try_into().unwrap()))\n+                    x.value_field(fx, mir::Field::new(in_idx.into()))\n                 } else {\n-                    y.value_field(fx, mir::Field::new((in_idx - lane_count).try_into().unwrap()))\n+                    y.value_field(fx, mir::Field::new((in_idx - lane_count).into()))\n                 };\n                 let out_lane = ret.place_field(fx, mir::Field::new(out_idx));\n                 out_lane.write_cvalue(fx, in_lane);\n@@ -143,10 +146,17 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n                 idx_const\n             } else {\n-                fx.tcx.sess.span_fatal(\n+                fx.tcx.sess.span_warn(\n                     span,\n                     \"Index argument for `simd_extract` is not a constant\",\n                 );\n+                let res = crate::trap::trap_unimplemented_ret_value(\n+                    fx,\n+                    ret.layout(),\n+                    \"Index argument for `simd_extract` is not a constant\",\n+                );\n+                ret.write_cvalue(fx, res);\n+                return;\n             };\n \n             let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n@@ -207,7 +217,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             assert_eq!(lane_count, ret_lane_count);\n \n             for lane in 0..lane_count {\n-                let lane = mir::Field::new(lane.try_into().unwrap());\n+                let lane = mir::Field::new(lane.into());\n                 let a_lane = a.value_field(fx, lane).load_scalar(fx);\n                 let b_lane = b.value_field(fx, lane).load_scalar(fx);\n                 let c_lane = c.value_field(fx, lane).load_scalar(fx);\n@@ -228,11 +238,42 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_flt_binop!(fx, fmax(x, y) -> ret);\n         };\n \n+        simd_reduce_add_ordered | simd_reduce_add_unordered, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce(fx, v, ret, |fx, lane_layout, a, b| {\n+                if lane_layout.ty.is_floating_point() {\n+                    fx.bcx.ins().fadd(a, b)\n+                } else {\n+                    fx.bcx.ins().iadd(a, b)\n+                }\n+            });\n+        };\n+\n+        simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce(fx, v, ret, |fx, lane_layout, a, b| {\n+                if lane_layout.ty.is_floating_point() {\n+                    fx.bcx.ins().fmul(a, b)\n+                } else {\n+                    fx.bcx.ins().imul(a, b)\n+                }\n+            });\n+        };\n+\n+        simd_reduce_all, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().band(a, b));\n+        };\n+\n+        simd_reduce_any, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().bor(a, b));\n+        };\n+\n         // simd_fabs\n         // simd_saturating_add\n         // simd_bitmask\n         // simd_select\n-        // simd_reduce_add_{,un}ordered\n         // simd_rem\n     }\n }"}, {"sha": "67495c7414840dfe620009a58340626f5e0b412d", "filename": "compiler/rustc_codegen_cranelift/src/trap.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477aa678021086d4fd07d8c738be51683c314231/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs?ref=477aa678021086d4fd07d8c738be51683c314231", "patch": "@@ -67,3 +67,15 @@ pub(crate) fn trap_unimplemented(fx: &mut FunctionCx<'_, '_, impl Module>, msg:\n     let true_ = fx.bcx.ins().iconst(types::I32, 1);\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n }\n+\n+/// Like `trap_unimplemented` but returns a fake value of the specified type.\n+///\n+/// Trap code: user65535\n+pub(crate) fn trap_unimplemented_ret_value<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n+    dest_layout: TyAndLayout<'tcx>,\n+    msg: impl AsRef<str>,\n+) -> CValue<'tcx> {\n+    trap_unimplemented(fx, msg);\n+    CValue::by_ref(Pointer::const_addr(fx, 0), dest_layout)\n+}"}]}