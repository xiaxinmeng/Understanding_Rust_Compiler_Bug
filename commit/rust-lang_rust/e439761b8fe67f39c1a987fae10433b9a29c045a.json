{"sha": "e439761b8fe67f39c1a987fae10433b9a29c045a", "node_id": "C_kwDOAAsO6NoAKGU0Mzk3NjFiOGZlNjdmMzljMWE5ODdmYWUxMDQzM2I5YTI5YzA0NWE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-04T20:28:41Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-11T02:31:24Z"}, "message": "Improve `AdtDef` interning.\n\nThis commit makes `AdtDef` use `Interned`. Much the commit is tedious\nchanges to introduce getter functions. The interesting changes are in\n`compiler/rustc_middle/src/ty/adt.rs`.", "tree": {"sha": "49cd51fbed01b74a491833054b570565ddf5e708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49cd51fbed01b74a491833054b570565ddf5e708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e439761b8fe67f39c1a987fae10433b9a29c045a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e439761b8fe67f39c1a987fae10433b9a29c045a", "html_url": "https://github.com/rust-lang/rust/commit/e439761b8fe67f39c1a987fae10433b9a29c045a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e439761b8fe67f39c1a987fae10433b9a29c045a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8723fe0b6b6f8563c2ca0f15c83adf309e780d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8723fe0b6b6f8563c2ca0f15c83adf309e780d2a", "html_url": "https://github.com/rust-lang/rust/commit/8723fe0b6b6f8563c2ca0f15c83adf309e780d2a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "89fd0bfa8bbfa2f7fe4b99415d35a8b0efd94c28", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e439761b8fe67f39c1a987fae10433b9a29c045a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e439761b8fe67f39c1a987fae10433b9a29c045a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=e439761b8fe67f39c1a987fae10433b9a29c045a", "patch": "@@ -67,7 +67,7 @@ fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Typ\n                 pointer_ty(tcx)\n             }\n         }\n-        ty::Adt(adt_def, _) if adt_def.repr.simd() => {\n+        ty::Adt(adt_def, _) if adt_def.repr().simd() => {\n             let (element, count) = match &tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap().abi\n             {\n                 Abi::Vector { element, count } => (element.clone(), *count),"}, {"sha": "fd63c3ecddbdfd9cdb2365ca0aec9bca6bc18d5e", "filename": "src/unsize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e439761b8fe67f39c1a987fae10433b9a29c045a/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e439761b8fe67f39c1a987fae10433b9a29c045a/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=e439761b8fe67f39c1a987fae10433b9a29c045a", "patch": "@@ -127,7 +127,7 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n             assert_eq!(def_a, def_b);\n \n-            for i in 0..def_a.variants[VariantIdx::new(0)].fields.len() {\n+            for i in 0..def_a.variant(VariantIdx::new(0)).fields.len() {\n                 let src_f = src.value_field(fx, mir::Field::new(i));\n                 let dst_f = dst.place_field(fx, mir::Field::new(i));\n \n@@ -200,7 +200,7 @@ pub(crate) fn size_and_align_of_dst<'tcx>(\n \n             // Packed types ignore the alignment of their fields.\n             if let ty::Adt(def, _) = layout.ty.kind() {\n-                if def.repr.packed() {\n+                if def.repr().packed() {\n                     unsized_align = sized_align;\n                 }\n             }"}, {"sha": "afe8797a0300969ef7901b36142a2f9841a8b640", "filename": "src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e439761b8fe67f39c1a987fae10433b9a29c045a/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e439761b8fe67f39c1a987fae10433b9a29c045a/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=e439761b8fe67f39c1a987fae10433b9a29c045a", "patch": "@@ -24,7 +24,7 @@ fn codegen_field<'tcx>(\n         }\n         match field_layout.ty.kind() {\n             ty::Slice(..) | ty::Str | ty::Foreign(..) => simple(fx),\n-            ty::Adt(def, _) if def.repr.packed() => {\n+            ty::Adt(def, _) if def.repr().packed() => {\n                 assert_eq!(layout.align.abi.bytes(), 1);\n                 simple(fx)\n             }\n@@ -816,7 +816,7 @@ pub(crate) fn assert_assignable<'tcx>(\n             // dyn for<'r> Trait<'r> -> dyn Trait<'_> is allowed\n         }\n         (&ty::Adt(adt_def_a, substs_a), &ty::Adt(adt_def_b, substs_b))\n-            if adt_def_a.did == adt_def_b.did =>\n+            if adt_def_a.did() == adt_def_b.did() =>\n         {\n             let mut types_a = substs_a.types();\n             let mut types_b = substs_b.types();"}]}