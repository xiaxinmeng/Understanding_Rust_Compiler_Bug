{"sha": "ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOTUzMGFkZGM0YzVlOWJiZmQ1YzAyODdkM2MzYWRiMmRlOTVlNDA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-28T13:34:00Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-04T18:10:47Z"}, "message": "Add HIR for impl blocks\n\nSince we need to be able to go from def to containing impl block, as well as the\nother direction, and to find all impls for a certain type, a design similar to\nthe one for modules, where we collect all impls for the whole crate and keep\nthem in an arena, seemed fitting. The ImplBlock type, which provides the public\ninterface, then consists only of an Arc to the arena containing all impls, and\nthe index into it.", "tree": {"sha": "42919bcc1ef1d439a04718aefe2fdc2fe3456afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42919bcc1ef1d439a04718aefe2fdc2fe3456afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "html_url": "https://github.com/rust-lang/rust/commit/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "226e31dae94f2c72f5cf650564e521b792793629", "url": "https://api.github.com/repos/rust-lang/rust/commits/226e31dae94f2c72f5cf650564e521b792793629", "html_url": "https://github.com/rust-lang/rust/commit/226e31dae94f2c72f5cf650564e521b792793629"}], "stats": {"total": 277, "additions": 269, "deletions": 8}, "files": [{"sha": "d7e51a59767c7953edf6e3a1136be348b38ecc41", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -105,6 +105,7 @@ salsa::database_storage! {\n             fn type_for_field() for hir::db::TypeForFieldQuery;\n             fn struct_data() for hir::db::StructDataQuery;\n             fn enum_data() for hir::db::EnumDataQuery;\n+            fn impls_in_crate() for hir::db::ImplsInCrateQuery;\n         }\n     }\n }"}, {"sha": "6d5235ba46652e88b2a40191a4f7e6946b696961", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{SyntaxNode, SourceFileNode};\n use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase, Cancelable};\n \n use crate::{\n-    DefLoc, DefId, MacroCallLoc, MacroCallId, Name, HirFileId,\n+    Crate, DefLoc, DefId, MacroCallLoc, MacroCallId, Name, HirFileId,\n     SourceFileItems, SourceItemId,\n     query_definitions,\n     FnScopes,\n@@ -13,6 +13,7 @@ use crate::{\n     nameres::{ItemMap, InputModuleItems}},\n     ty::{InferenceResult, Ty},\n     adt::{StructData, EnumData},\n+    impl_block::CrateImplBlocks,\n };\n \n salsa::query_group! {\n@@ -87,6 +88,11 @@ pub trait HirDatabase: SyntaxDatabase\n         type ModuleTreeQuery;\n         use fn crate::module::imp::module_tree;\n     }\n+\n+    fn impls_in_crate(krate: Crate) -> Cancelable<Arc<CrateImplBlocks>> {\n+        type ImplsInCrateQuery;\n+        use fn crate::impl_block::impls_in_crate;\n+    }\n }\n \n }"}, {"sha": "75ef308ae4912c93d4a242c3fc66393b1f49d1a7", "filename": "crates/ra_hir/src/function.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -11,11 +11,11 @@ use ra_syntax::{\n     ast::{self, AstNode, DocCommentsOwner, NameOwner},\n };\n \n-use crate::{DefId, DefKind, HirDatabase, ty::InferenceResult, Module};\n+use crate::{DefId, DefKind, HirDatabase, ty::InferenceResult, Module, Crate, impl_block::ImplBlock};\n \n pub use self::scope::FnScopes;\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Function {\n     def_id: DefId,\n }\n@@ -25,6 +25,10 @@ impl Function {\n         Function { def_id }\n     }\n \n+    pub fn def_id(&self) -> DefId {\n+        self.def_id\n+    }\n+\n     pub fn syntax(&self, db: &impl HirDatabase) -> ast::FnDefNode {\n         let def_loc = self.def_id.loc(db);\n         assert!(def_loc.kind == DefKind::Function);\n@@ -48,6 +52,15 @@ impl Function {\n     pub fn module(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n         self.def_id.module(db)\n     }\n+\n+    pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n+        self.def_id.krate(db)\n+    }\n+\n+    /// The containing impl block, if this is a method.\n+    pub fn impl_block(&self, db: &impl HirDatabase) -> Cancelable<Option<ImplBlock>> {\n+        self.def_id.impl_block(db)\n+    }\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "c98be66f92fa0e0c64b2e01a31a8150c6f63ea40", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -2,7 +2,7 @@ use ra_db::{SourceRootId, LocationIntener, Cancelable, FileId};\n use ra_syntax::{SourceFileNode, SyntaxKind, SyntaxNode, SyntaxNodeRef, SourceFile, AstNode, ast};\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n-use crate::{HirDatabase, PerNs, ModuleId, Module, Def, Function, Struct, Enum};\n+use crate::{HirDatabase, PerNs, ModuleId, Module, Def, Function, Struct, Enum, ImplBlock, Crate};\n \n /// hir makes a heavy use of ids: integer (u32) handlers to various things. You\n /// can think of id as a pointer (but without a lifetime) or a file descriptor\n@@ -177,6 +177,17 @@ impl DefId {\n         let loc = self.loc(db);\n         Module::new(db, loc.source_root_id, loc.module_id)\n     }\n+\n+    /// Returns the containing crate.\n+    pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n+        Ok(self.module(db)?.krate(db))\n+    }\n+\n+    /// Returns the containing impl block, if this is an impl item.\n+    pub fn impl_block(self, db: &impl HirDatabase) -> Cancelable<Option<ImplBlock>> {\n+        let crate_impls = db.impls_in_crate(ctry!(self.krate(db)?))?;\n+        Ok(ImplBlock::containing(crate_impls, self))\n+    }\n }\n \n impl DefLoc {"}, {"sha": "22f0a4461b1cfcb67436e4d8e63b2d492267a23c", "filename": "crates/ra_hir/src/impl_block.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -0,0 +1,172 @@\n+use std::sync::Arc;\n+use rustc_hash::FxHashMap;\n+\n+use ra_arena::{Arena, RawId, impl_arena_id};\n+use ra_syntax::ast::{self, AstNode};\n+use ra_db::{LocationIntener, Cancelable};\n+\n+use crate::{\n+    Crate, DefId, DefLoc, DefKind, SourceItemId, SourceFileItems,\n+    Module, Function,\n+    db::HirDatabase,\n+    type_ref::TypeRef,\n+    module::{ModuleSourceNode},\n+};\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct ImplBlock {\n+    crate_impl_blocks: Arc<CrateImplBlocks>,\n+    impl_id: ImplId,\n+}\n+\n+impl ImplBlock {\n+    pub(crate) fn containing(\n+        crate_impl_blocks: Arc<CrateImplBlocks>,\n+        def_id: DefId,\n+    ) -> Option<ImplBlock> {\n+        let impl_id = *crate_impl_blocks.impls_by_def.get(&def_id)?;\n+        Some(ImplBlock {\n+            crate_impl_blocks,\n+            impl_id,\n+        })\n+    }\n+\n+    fn impl_data(&self) -> &ImplData {\n+        &self.crate_impl_blocks.impls[self.impl_id]\n+    }\n+\n+    pub fn target(&self) -> &TypeRef {\n+        &self.impl_data().impl_for\n+    }\n+\n+    pub fn items(&self) -> &[ImplItem] {\n+        &self.impl_data().items\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct ImplData {\n+    impl_for: TypeRef,\n+    items: Vec<ImplItem>,\n+}\n+\n+impl ImplData {\n+    pub(crate) fn from_ast(\n+        db: &impl AsRef<LocationIntener<DefLoc, DefId>>,\n+        file_items: &SourceFileItems,\n+        module: &Module,\n+        node: ast::ImplBlock,\n+    ) -> Self {\n+        let impl_for = TypeRef::from_ast_opt(node.target_type());\n+        let file_id = module.source().file_id();\n+        let items = if let Some(item_list) = node.item_list() {\n+            item_list\n+                .impl_items()\n+                .map(|item_node| {\n+                    let kind = match item_node {\n+                        ast::ImplItem::FnDef(..) => DefKind::Function,\n+                        ast::ImplItem::ConstDef(..) => DefKind::Item,\n+                        ast::ImplItem::TypeDef(..) => DefKind::Item,\n+                    };\n+                    let item_id = file_items.id_of_unchecked(item_node.syntax());\n+                    let def_loc = DefLoc {\n+                        kind,\n+                        source_root_id: module.source_root_id,\n+                        module_id: module.module_id,\n+                        source_item_id: SourceItemId {\n+                            file_id,\n+                            item_id: Some(item_id),\n+                        },\n+                    };\n+                    let def_id = def_loc.id(db);\n+                    match item_node {\n+                        ast::ImplItem::FnDef(..) => ImplItem::Method(Function::new(def_id)),\n+                        ast::ImplItem::ConstDef(..) => ImplItem::Const(def_id),\n+                        ast::ImplItem::TypeDef(..) => ImplItem::Type(def_id),\n+                    }\n+                })\n+                .collect()\n+        } else {\n+            Vec::new()\n+        };\n+        ImplData { impl_for, items }\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ImplItem {\n+    Method(Function),\n+    // these don't have their own types yet\n+    Const(DefId),\n+    Type(DefId),\n+    // Existential\n+}\n+\n+impl ImplItem {\n+    pub fn def_id(&self) -> DefId {\n+        match self {\n+            ImplItem::Method(f) => f.def_id(),\n+            ImplItem::Const(def_id) => *def_id,\n+            ImplItem::Type(def_id) => *def_id,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct ImplId(pub RawId);\n+impl_arena_id!(ImplId);\n+\n+/// We have to collect all impl blocks in a crate, to later be able to find\n+/// impls for specific types.\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct CrateImplBlocks {\n+    impls: Arena<ImplId, ImplData>,\n+    impls_by_def: FxHashMap<DefId, ImplId>,\n+}\n+\n+impl CrateImplBlocks {\n+    fn new() -> Self {\n+        CrateImplBlocks {\n+            impls: Arena::default(),\n+            impls_by_def: FxHashMap::default(),\n+        }\n+    }\n+\n+    fn collect(&mut self, db: &impl HirDatabase, module: Module) -> Cancelable<()> {\n+        let module_source_node = module.source().resolve(db);\n+        let node = match &module_source_node {\n+            ModuleSourceNode::SourceFile(node) => node.borrowed().syntax(),\n+            ModuleSourceNode::Module(node) => node.borrowed().syntax(),\n+        };\n+\n+        let source_file_items = db.file_items(module.source().file_id());\n+\n+        for impl_block_ast in node.children().filter_map(ast::ImplBlock::cast) {\n+            let impl_block = ImplData::from_ast(db, &source_file_items, &module, impl_block_ast);\n+            let id = self.impls.alloc(impl_block);\n+            for impl_item in &self.impls[id].items {\n+                self.impls_by_def.insert(impl_item.def_id(), id);\n+            }\n+        }\n+\n+        for (_, child) in module.children() {\n+            self.collect(db, child)?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+pub(crate) fn impls_in_crate(\n+    db: &impl HirDatabase,\n+    krate: Crate,\n+) -> Cancelable<Arc<CrateImplBlocks>> {\n+    let mut result = CrateImplBlocks::new();\n+    let root_module = if let Some(root) = krate.root_module(db)? {\n+        root\n+    } else {\n+        return Ok(Arc::new(result));\n+    };\n+    result.collect(db, root_module)?;\n+    Ok(Arc::new(result))\n+}"}, {"sha": "5194e280b751b2d07c2cacaa32648e9c26356269", "filename": "crates/ra_hir/src/krate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fkrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fkrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fkrate.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -5,7 +5,7 @@ use crate::{HirDatabase, Module, Name, AsName, HirFileId};\n /// hir::Crate describes a single crate. It's the main inteface with which\n /// crate's dependencies interact. Mostly, it should be just a proxy for the\n /// root module.\n-#[derive(Debug)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Crate {\n     crate_id: CrateId,\n }"}, {"sha": "2abcec441b846d1f65a7550edf79e9dbf7001a30", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -31,6 +31,7 @@ mod function;\n mod adt;\n mod type_ref;\n mod ty;\n+mod impl_block;\n \n use crate::{\n     db::HirDatabase,\n@@ -48,6 +49,7 @@ pub use self::{\n     function::{Function, FnScopes},\n     adt::{Struct, Enum},\n     ty::Ty,\n+    impl_block::{ImplBlock, ImplItem},\n };\n \n pub use self::function::FnSignatureInfo;"}, {"sha": "ef245ec7a401928f945df06c37248f287275fa45", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -203,6 +203,7 @@ salsa::database_storage! {\n             fn type_for_field() for db::TypeForFieldQuery;\n             fn struct_data() for db::StructDataQuery;\n             fn enum_data() for db::EnumDataQuery;\n+            fn impls_in_crate() for db::ImplsInCrateQuery;\n         }\n     }\n }"}, {"sha": "b9821115ce8ba39b232c5c3d245b2799b23ddf90", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -71,6 +71,21 @@ impl Module {\n         })\n     }\n \n+    /// Returns an iterator of all children of this module.\n+    pub fn children<'a>(&'a self) -> impl Iterator<Item = (Name, Module)> + 'a {\n+        self.module_id\n+            .children(&self.tree)\n+            .map(move |(name, module_id)| {\n+                (\n+                    name,\n+                    Module {\n+                        module_id,\n+                        ..self.clone()\n+                    },\n+                )\n+            })\n+    }\n+\n     /// Returns the crate this module is part of.\n     pub fn krate(&self, db: &impl HirDatabase) -> Option<Crate> {\n         let root_id = self.module_id.crate_root(&self.tree);"}, {"sha": "91de17ddf14003778ee44bf8009c4bb1bab37e1c", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -1442,7 +1442,39 @@ impl<R: TreeRoot<RaTypes>> ImplBlockNode<R> {\n }\n \n \n-impl<'a> ImplBlock<'a> {}\n+impl<'a> ImplBlock<'a> {\n+    pub fn item_list(self) -> Option<ItemList<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n+// ImplItem\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum ImplItem<'a> {\n+    FnDef(FnDef<'a>),\n+    TypeDef(TypeDef<'a>),\n+    ConstDef(ConstDef<'a>),\n+}\n+\n+impl<'a> AstNode<'a> for ImplItem<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            FN_DEF => Some(ImplItem::FnDef(FnDef { syntax })),\n+            TYPE_DEF => Some(ImplItem::TypeDef(TypeDef { syntax })),\n+            CONST_DEF => Some(ImplItem::ConstDef(ConstDef { syntax })),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> {\n+        match self {\n+            ImplItem::FnDef(inner) => inner.syntax(),\n+            ImplItem::TypeDef(inner) => inner.syntax(),\n+            ImplItem::ConstDef(inner) => inner.syntax(),\n+        }\n+    }\n+}\n+\n+impl<'a> ImplItem<'a> {}\n \n // ImplTraitType\n #[derive(Debug, Clone, Copy,)]\n@@ -1555,7 +1587,11 @@ impl<R: TreeRoot<RaTypes>> ItemListNode<R> {\n \n impl<'a> ast::FnDefOwner<'a> for ItemList<'a> {}\n impl<'a> ast::ModuleItemOwner<'a> for ItemList<'a> {}\n-impl<'a> ItemList<'a> {}\n+impl<'a> ItemList<'a> {\n+    pub fn impl_items(self) -> impl Iterator<Item = ImplItem<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n \n // Label\n #[derive(Debug, Clone, Copy,)]"}, {"sha": "688a4af1ea474c73cb749a32002d9069f84ed24a", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "patch": "@@ -284,6 +284,7 @@ Grammar(\n             options: [ \"ItemList\" ]\n         ),\n         \"ItemList\": (\n+            collections: [[\"impl_items\", \"ImplItem\"]],\n             traits: [ \"FnDefOwner\", \"ModuleItemOwner\" ],\n         ),\n         \"ConstDef\": ( traits: [\n@@ -307,7 +308,7 @@ Grammar(\n             \"AttrsOwner\",\n             \"DocCommentsOwner\"\n         ] ),\n-        \"ImplBlock\": (collections: []),\n+        \"ImplBlock\": (options: [\"ItemList\"]),\n \n         \"ParenType\": (options: [\"TypeRef\"]),\n         \"TupleType\": ( collections: [[\"fields\", \"TypeRef\"]] ),\n@@ -351,6 +352,9 @@ Grammar(\n             enum: [\"StructDef\", \"EnumDef\", \"FnDef\", \"TraitDef\", \"TypeDef\", \"ImplBlock\",\n                    \"UseItem\", \"ExternCrateItem\", \"ConstDef\", \"StaticDef\", \"Module\" ]\n         ),\n+        \"ImplItem\": (\n+            enum: [\"FnDef\", \"TypeDef\", \"ConstDef\"]\n+        ),\n \n         \"TupleExpr\": (),\n         \"ArrayExpr\": (),"}]}