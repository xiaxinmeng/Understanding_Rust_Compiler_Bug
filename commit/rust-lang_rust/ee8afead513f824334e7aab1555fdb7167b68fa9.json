{"sha": "ee8afead513f824334e7aab1555fdb7167b68fa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOGFmZWFkNTEzZjgyNDMzNGU3YWFiMTU1NWZkYjcxNjdiNjhmYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-29T08:09:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-29T08:09:57Z"}, "message": "Auto merge of #935 - christianpoveda:blacklist-env-vars, r=RalfJung\n\nExclude environment variables from host communication\n\nrelated issue: #933\n\nr? @RalfJung", "tree": {"sha": "f86c34b478f6a574805c4d687271ccd56b27ec38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f86c34b478f6a574805c4d687271ccd56b27ec38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8afead513f824334e7aab1555fdb7167b68fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8afead513f824334e7aab1555fdb7167b68fa9", "html_url": "https://github.com/rust-lang/rust/commit/ee8afead513f824334e7aab1555fdb7167b68fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8afead513f824334e7aab1555fdb7167b68fa9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0", "html_url": "https://github.com/rust-lang/rust/commit/e3b87f6fe8712e2f80a2bb8801783aee4d27b3f0"}, {"sha": "abcda6dc941fb992c4293ab93d710a713ed365cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/abcda6dc941fb992c4293ab93d710a713ed365cc", "html_url": "https://github.com/rust-lang/rust/commit/abcda6dc941fb992c4293ab93d710a713ed365cc"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "f5b8999d1c5906071d23b0bd26ca10d33cafcfc1", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee8afead513f824334e7aab1555fdb7167b68fa9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ee8afead513f824334e7aab1555fdb7167b68fa9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ee8afead513f824334e7aab1555fdb7167b68fa9", "patch": "@@ -160,6 +160,8 @@ Several `-Z` flags are relevant for Miri:\n * `-Zmiri-disable-isolation` disables host host isolation.  As a consequence,\n   the program has access to host resources such as environment variables and\n   randomness (and, eventually, file systems and more).\n+* `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from \n+  the host. Can be used multiple times to exclude several variables.\n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n   overrides the default to be `0`; be advised that using any higher level can\n   make Miri miss bugs in your program because they got optimized away."}, {"sha": "a4f55996720458ed5c166461fc08d922dacc1907", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee8afead513f824334e7aab1555fdb7167b68fa9/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8afead513f824334e7aab1555fdb7167b68fa9/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=ee8afead513f824334e7aab1555fdb7167b68fa9", "patch": "@@ -28,6 +28,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n                 let config = miri::MiriConfig {\n                     validate: true,\n                     communicate: false,\n+                    excluded_env_vars: vec![],\n                     args: vec![],\n                     seed: None,\n                 };"}, {"sha": "3b4ad8415917af5fbcb2c24d28f6e443db3d1c68", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee8afead513f824334e7aab1555fdb7167b68fa9/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8afead513f824334e7aab1555fdb7167b68fa9/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=ee8afead513f824334e7aab1555fdb7167b68fa9", "patch": "@@ -51,6 +51,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                                 let config = MiriConfig {\n                                     validate: true,\n                                     communicate: false,\n+                                    excluded_env_vars: vec![],\n                                     args: vec![],\n                                     seed: None,\n                                 };\n@@ -69,6 +70,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 let config = MiriConfig {\n                     validate: true,\n                     communicate: false,\n+                    excluded_env_vars: vec![],\n                     args: vec![],\n                     seed: None\n                 };"}, {"sha": "6e4bf4a6c269ea10f016a2fb12b6f5d2823be532", "filename": "src/bin/miri.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee8afead513f824334e7aab1555fdb7167b68fa9/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8afead513f824334e7aab1555fdb7167b68fa9/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=ee8afead513f824334e7aab1555fdb7167b68fa9", "patch": "@@ -135,6 +135,7 @@ fn main() {\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n     let mut after_dashdash = false;\n+    let mut excluded_env_vars = vec![];\n     for arg in std::env::args() {\n         if rustc_args.is_empty() {\n             // Very first arg: for `rustc`.\n@@ -175,6 +176,9 @@ fn main() {\n                     seed = Some(u64::from_be_bytes(bytes));\n \n                 },\n+                arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n+                    excluded_env_vars.push(arg.trim_start_matches(\"-Zmiri-env-exclude=\").to_owned());\n+                },\n                 _ => {\n                     rustc_args.push(arg);\n                 }\n@@ -200,7 +204,13 @@ fn main() {\n \n     debug!(\"rustc arguments: {:?}\", rustc_args);\n     debug!(\"miri arguments: {:?}\", miri_args);\n-    let miri_config = miri::MiriConfig { validate, communicate, args: miri_args, seed };\n+    let miri_config = miri::MiriConfig {\n+        validate,\n+        communicate,\n+        excluded_env_vars,\n+        seed,\n+        args: miri_args,\n+    };\n     let result = rustc_driver::report_ices_to_stderr_if_any(move || {\n         rustc_driver::run_compiler(&rustc_args, &mut MiriCompilerCalls { miri_config }, None, None)\n     }).and_then(|result| result);"}, {"sha": "667491f8d477eb030ee290c2ea0ca691c7d6ce63", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee8afead513f824334e7aab1555fdb7167b68fa9/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8afead513f824334e7aab1555fdb7167b68fa9/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=ee8afead513f824334e7aab1555fdb7167b68fa9", "patch": "@@ -22,6 +22,9 @@ pub struct MiriConfig {\n     pub validate: bool,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n+    /// Environment variables that should always be isolated from the host.\n+    pub excluded_env_vars: Vec<String>,\n+    /// Command-line arguments passed to the interpreted program.\n     pub args: Vec<String>,\n     /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n     pub seed: Option<u64>,\n@@ -40,7 +43,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate),\n     );\n     // Complete initialization.\n-    EnvVars::init(&mut ecx);\n+    EnvVars::init(&mut ecx, config.excluded_env_vars);\n \n     // Setup first stack-frame\n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);"}, {"sha": "5a5dffa1d09b04b1a48fee875b6e95188c9f6e0e", "filename": "src/shims/env.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee8afead513f824334e7aab1555fdb7167b68fa9/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8afead513f824334e7aab1555fdb7167b68fa9/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=ee8afead513f824334e7aab1555fdb7167b68fa9", "patch": "@@ -15,11 +15,14 @@ pub struct EnvVars {\n impl EnvVars {\n     pub(crate) fn init<'mir, 'tcx>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+        excluded_env_vars: Vec<String>,\n     ) {\n         if ecx.machine.communicate {\n             for (name, value) in std::env::vars() {\n-                let var_ptr = alloc_env_var(name.as_bytes(), value.as_bytes(), ecx.memory_mut());\n-                ecx.machine.env_vars.map.insert(name.into_bytes(), var_ptr);\n+                if !excluded_env_vars.contains(&name) {\n+                    let var_ptr = alloc_env_var(name.as_bytes(), value.as_bytes(), ecx.memory_mut());\n+                    ecx.machine.env_vars.map.insert(name.into_bytes(), var_ptr);\n+                }\n             }\n         }\n     }"}, {"sha": "efcf7a756114c6b026515165fecc8fa5ef5e6e6b", "filename": "tests/run-pass/env-exclude.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee8afead513f824334e7aab1555fdb7167b68fa9/tests%2Frun-pass%2Fenv-exclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8afead513f824334e7aab1555fdb7167b68fa9/tests%2Frun-pass%2Fenv-exclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv-exclude.rs?ref=ee8afead513f824334e7aab1555fdb7167b68fa9", "patch": "@@ -0,0 +1,6 @@\n+// ignore-windows: TODO env var emulation stubbed out on Windows\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-env-exclude=MIRI_ENV_VAR_TEST\n+\n+fn main() {\n+    assert!(std::env::var(\"MIRI_ENV_VAR_TEST\").is_err());\n+}"}]}