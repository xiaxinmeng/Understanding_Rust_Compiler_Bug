{"sha": "c49d0906da09972f447013834dcf891ec887151b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OWQwOTA2ZGEwOTk3MmY0NDcwMTM4MzRkY2Y4OTFlYzg4NzE1MWI=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-04-21T08:32:13Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-04-21T08:32:13Z"}, "message": "Specify behavior of `write_all` for `ErrorKind::Interrupted` errors\n\nAlso spell out that read and write operations should be retried on\n`ErrorKind::Interrupted` errors.\n\nFixes #38494.", "tree": {"sha": "26f0f3bcccf79fee666e6a7cbed405fc2bd86f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f0f3bcccf79fee666e6a7cbed405fc2bd86f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c49d0906da09972f447013834dcf891ec887151b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c49d0906da09972f447013834dcf891ec887151b", "html_url": "https://github.com/rust-lang/rust/commit/c49d0906da09972f447013834dcf891ec887151b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c49d0906da09972f447013834dcf891ec887151b/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535ee6c7f05e29a6e94edba06b228d64f8ba74ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/535ee6c7f05e29a6e94edba06b228d64f8ba74ec", "html_url": "https://github.com/rust-lang/rust/commit/535ee6c7f05e29a6e94edba06b228d64f8ba74ec"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "39a0602eab826902eab3bed1e69dbdf864cd6cd4", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c49d0906da09972f447013834dcf891ec887151b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49d0906da09972f447013834dcf891ec887151b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=c49d0906da09972f447013834dcf891ec887151b", "patch": "@@ -466,6 +466,9 @@ pub trait Read {\n     /// variant will be returned. If an error is returned then it must be\n     /// guaranteed that no bytes were read.\n     ///\n+    /// An error of the `ErrorKind::Interrupted` kind is non-fatal and the read\n+    /// operation should be retried if there is nothing else to do.\n+    ///\n     /// # Examples\n     ///\n     /// [`File`][file]s implement `Read`:\n@@ -481,7 +484,7 @@ pub trait Read {\n     /// let mut f = File::open(\"foo.txt\")?;\n     /// let mut buffer = [0; 10];\n     ///\n-    /// // read 10 bytes\n+    /// // read up to 10 bytes\n     /// f.read(&mut buffer[..])?;\n     /// # Ok(())\n     /// # }\n@@ -885,6 +888,9 @@ pub trait Write {\n     /// It is **not** considered an error if the entire buffer could not be\n     /// written to this writer.\n     ///\n+    /// An error of the `ErrorKind::Interrupted` kind is non-fatal and the\n+    /// write operation should be retried if there is nothing else to do.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -894,6 +900,7 @@ pub trait Write {\n     /// # fn foo() -> std::io::Result<()> {\n     /// let mut buffer = File::create(\"foo.txt\")?;\n     ///\n+    /// // Writes some prefix of the byte string, not necessarily all of it.\n     /// buffer.write(b\"some bytes\")?;\n     /// # Ok(())\n     /// # }\n@@ -929,14 +936,17 @@ pub trait Write {\n \n     /// Attempts to write an entire buffer into this write.\n     ///\n-    /// This method will continuously call `write` while there is more data to\n-    /// write. This method will not return until the entire buffer has been\n-    /// successfully written or an error occurs. The first error generated from\n-    /// this method will be returned.\n+    /// This method will continuously call `write` until there is no more data\n+    /// to be written or an error of non-`ErrorKind::Interrupted` kind is\n+    /// returned. This method will not return until the entire buffer has been\n+    /// successfully written or such an error occurs. The first error that is\n+    /// not of `ErrorKind::Interrupted` kind generated from this method will be\n+    /// returned.\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the first error that `write` returns.\n+    /// This function will return the first error of\n+    /// non-`ErrorKind::Interrupted` kind that `write` returns.\n     ///\n     /// # Examples\n     ///"}]}