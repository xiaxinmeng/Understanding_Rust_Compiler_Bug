{"sha": "f9477a77c52af8d3dea361b3f4ac3e60653aa529", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NDc3YTc3YzUyYWY4ZDNkZWEzNjFiM2Y0YWMzZTYwNjUzYWE1Mjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-19T04:04:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-19T04:04:17Z"}, "message": "Auto merge of #62694 - lundibundi:help-infer-fn-ret, r=eddyb\n\nrustc_typeck: improve diagnostics for -> _ fn return type\n\nThis should implement IIUC the mentioned issue.\n\n~~I'm not sure if there is a better way than `get_infer_ret_ty` to get/check the return type without code duplication.~~\n\n~~Also, is this unwrap be okay `ty::Binder::bind(*tables.liberated_fn_sigs().get(hir_id).unwrap())`?~~\n\nr? @eddyb\nCloses: https://github.com/rust-lang/rust/issues/56132", "tree": {"sha": "13459d013bcd32ccd59de28a29c6aab8853f6fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13459d013bcd32ccd59de28a29c6aab8853f6fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9477a77c52af8d3dea361b3f4ac3e60653aa529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9477a77c52af8d3dea361b3f4ac3e60653aa529", "html_url": "https://github.com/rust-lang/rust/commit/f9477a77c52af8d3dea361b3f4ac3e60653aa529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9477a77c52af8d3dea361b3f4ac3e60653aa529/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe499a7b34dcb1fc054dd637ea561a19a268d2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe499a7b34dcb1fc054dd637ea561a19a268d2de", "html_url": "https://github.com/rust-lang/rust/commit/fe499a7b34dcb1fc054dd637ea561a19a268d2de"}, {"sha": "f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d", "html_url": "https://github.com/rust-lang/rust/commit/f8681f0c05c91df4aaf90a0ca60d1f823cf89d9d"}], "stats": {"total": 167, "additions": 125, "deletions": 42}, "files": [{"sha": "bde6db78aef32763bc7d781efc7eb576756a4eba", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f9477a77c52af8d3dea361b3f4ac3e60653aa529", "patch": "@@ -746,52 +746,53 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n     tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n }\n \n-/// If this `DefId` is a \"primary tables entry\", returns `Some((body_id, decl))`\n-/// with information about it's body-id and fn-decl (if any). Otherwise,\n+/// If this `DefId` is a \"primary tables entry\", returns\n+/// `Some((body_id, header, decl))` with information about\n+/// it's body-id, fn-header and fn-decl (if any). Otherwise,\n /// returns `None`.\n ///\n-/// If this function returns \"some\", then `typeck_tables(def_id)` will\n+/// If this function returns `Some`, then `typeck_tables(def_id)` will\n /// succeed; if it returns `None`, then `typeck_tables(def_id)` may or\n /// may not succeed. In some cases where this function returns `None`\n /// (notably closures), `typeck_tables(def_id)` would wind up\n /// redirecting to the owning function.\n fn primary_body_of(\n     tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&hir::FnDecl>)> {\n+) -> Option<(hir::BodyId, Option<&hir::FnHeader>, Option<&hir::FnDecl>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n                 hir::ItemKind::Const(_, body) |\n                 hir::ItemKind::Static(_, _, body) =>\n-                    Some((body, None)),\n-                hir::ItemKind::Fn(ref decl, .., body) =>\n-                    Some((body, Some(decl))),\n+                    Some((body, None, None)),\n+                hir::ItemKind::Fn(ref decl, ref header, .., body) =>\n+                    Some((body, Some(header), Some(decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::TraitItem(item) => {\n             match item.node {\n                 hir::TraitItemKind::Const(_, Some(body)) =>\n-                    Some((body, None)),\n+                    Some((body, None, None)),\n                 hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) =>\n-                    Some((body, Some(&sig.decl))),\n+                    Some((body, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::ImplItem(item) => {\n             match item.node {\n                 hir::ImplItemKind::Const(_, body) =>\n-                    Some((body, None)),\n+                    Some((body, None, None)),\n                 hir::ImplItemKind::Method(ref sig, body) =>\n-                    Some((body, Some(&sig.decl))),\n+                    Some((body, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n-        Node::AnonConst(constant) => Some((constant.body, None)),\n+        Node::AnonConst(constant) => Some((constant.body, None, None)),\n         _ => None,\n     }\n }\n@@ -824,15 +825,21 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n     let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n-    let (body_id, fn_decl) = primary_body_of(tcx, id).unwrap_or_else(|| {\n-        span_bug!(span, \"can't type-check body of {:?}\", def_id);\n-    });\n+    let (body_id, fn_header, fn_decl) = primary_body_of(tcx, id)\n+        .unwrap_or_else(|| {\n+            span_bug!(span, \"can't type-check body of {:?}\", def_id);\n+        });\n     let body = tcx.hir().body(body_id);\n \n     let tables = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n-        let fcx = if let Some(decl) = fn_decl {\n-            let fn_sig = tcx.fn_sig(def_id);\n+        let fcx = if let (Some(header), Some(decl)) = (fn_header, fn_decl) {\n+            let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n+                let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n+                AstConv::ty_of_fn(&fcx, header.unsafety, header.abi, decl)\n+            } else {\n+                tcx.fn_sig(def_id)\n+            };\n \n             check_abi(tcx, span, fn_sig.abi());\n "}, {"sha": "a5457c45d378cd5d5120b4b1af5d2a4bfad894d8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f9477a77c52af8d3dea361b3f4ac3e60653aa529", "patch": "@@ -160,6 +160,16 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Utility types and common code for the above passes.\n \n+fn bad_placeholder_type(tcx: TyCtxt<'tcx>, span: Span) -> errors::DiagnosticBuilder<'tcx> {\n+    let mut diag = tcx.sess.struct_span_err_with_code(\n+        span,\n+        \"the type placeholder `_` is not allowed within types on item signatures\",\n+        DiagnosticId::Error(\"E0121\".into()),\n+    );\n+    diag.span_label(span, \"not allowed in type signatures\");\n+    diag\n+}\n+\n impl ItemCtxt<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> ItemCtxt<'tcx> {\n         ItemCtxt { tcx, item_def_id }\n@@ -191,12 +201,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        self.tcx().sess.struct_span_err_with_code(\n-            span,\n-            \"the type placeholder `_` is not allowed within types on item signatures\",\n-            DiagnosticId::Error(\"E0121\".into()),\n-        ).span_label(span, \"not allowed in type signatures\")\n-         .emit();\n+        bad_placeholder_type(self.tcx(), span).emit();\n \n         self.tcx().types.err\n     }\n@@ -207,12 +212,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        self.tcx().sess.struct_span_err_with_code(\n-            span,\n-            \"the const placeholder `_` is not allowed within types on item signatures\",\n-            DiagnosticId::Error(\"E0121\".into()),\n-        ).span_label(span, \"not allowed in type signatures\")\n-         .emit();\n+        bad_placeholder_type(self.tcx(), span).emit();\n \n         self.tcx().consts.err\n     }\n@@ -1682,6 +1682,15 @@ fn find_existential_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n }\n \n+pub fn get_infer_ret_ty(output: &'_ hir::FunctionRetTy) -> Option<&hir::Ty> {\n+    if let hir::FunctionRetTy::Return(ref ty) = output {\n+        if let hir::TyKind::Infer = ty.node {\n+            return Some(&**ty)\n+        }\n+    }\n+    None\n+}\n+\n fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     use rustc::hir::*;\n     use rustc::hir::Node::*;\n@@ -1692,18 +1701,41 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            node: TraitItemKind::Method(sig, _),\n+            node: TraitItemKind::Method(MethodSig { header, decl }, TraitMethod::Provided(_)),\n             ..\n         })\n         | ImplItem(hir::ImplItem {\n-            node: ImplItemKind::Method(sig, _),\n+            node: ImplItemKind::Method(MethodSig { header, decl }, _),\n             ..\n-        }) => AstConv::ty_of_fn(&icx, sig.header.unsafety, sig.header.abi, &sig.decl),\n-\n-        Item(hir::Item {\n+        })\n+        | Item(hir::Item {\n             node: ItemKind::Fn(decl, header, _, _),\n             ..\n-        }) => AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl),\n+        }) => match get_infer_ret_ty(&decl.output) {\n+            Some(ty) => {\n+                let fn_sig = tcx.typeck_tables_of(def_id).liberated_fn_sigs()[hir_id];\n+                let mut diag = bad_placeholder_type(tcx, ty.span);\n+                let ret_ty = fn_sig.output();\n+                if ret_ty != tcx.types.err  {\n+                    diag.span_suggestion(\n+                        ty.span,\n+                        \"replace `_` with the correct return type\",\n+                        ret_ty.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                diag.emit();\n+                ty::Binder::bind(fn_sig)\n+            },\n+            None => AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n+        },\n+\n+        TraitItem(hir::TraitItem {\n+            node: TraitItemKind::Method(MethodSig { header, decl }, _),\n+            ..\n+        }) => {\n+            AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n+        },\n \n         ForeignItem(&hir::ForeignItem {\n             node: ForeignItemKind::Fn(ref fn_decl, _, _),"}, {"sha": "1a16aab6a41d1218e9c010c8b8fc314498d17c41", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=f9477a77c52af8d3dea361b3f4ac3e60653aa529", "patch": "@@ -2,7 +2,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/E0121.rs:1:13\n    |\n LL | fn foo() -> _ { 5 }\n-   |             ^ not allowed in type signatures\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace `_` with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/E0121.rs:3:13"}, {"sha": "ddaa5de4d3e27f09783169ef4e29533d18913bd0", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=f9477a77c52af8d3dea361b3f4ac3e60653aa529", "patch": "@@ -2,7 +2,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:4:14\n    |\n LL | fn test() -> _ { 5 }\n-   |              ^ not allowed in type signatures\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace `_` with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:7:16\n@@ -98,7 +101,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:57:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n-   |                     ^ not allowed in type signatures\n+   |                     ^\n+   |                     |\n+   |                     not allowed in type signatures\n+   |                     help: replace `_` with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:60:23\n@@ -158,7 +164,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:33:24\n    |\n LL |     fn test9(&self) -> _ { () }\n-   |                        ^ not allowed in type signatures\n+   |                        ^\n+   |                        |\n+   |                        not allowed in type signatures\n+   |                        help: replace `_` with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:36:27\n@@ -170,7 +179,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:41:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n-   |                        ^ not allowed in type signatures\n+   |                        ^\n+   |                        |\n+   |                        not allowed in type signatures\n+   |                        help: replace `_` with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:44:37\n@@ -182,7 +194,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:86:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n-   |                               ^ not allowed in type signatures\n+   |                               ^\n+   |                               |\n+   |                               not allowed in type signatures\n+   |                               help: replace `_` with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:89:34\n@@ -194,7 +209,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:94:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n-   |                            ^ not allowed in type signatures\n+   |                            ^\n+   |                            |\n+   |                            not allowed in type signatures\n+   |                            help: replace `_` with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:97:41"}, {"sha": "5f4cb4c1316d54357082839f6f3e310b52774014", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=f9477a77c52af8d3dea361b3f4ac3e60653aa529", "patch": "@@ -0,0 +1,11 @@\n+// This test checks that it proper item type will be suggested when\n+// using the `_` type placeholder.\n+\n+fn test1() -> _ { Some(42) }\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+pub fn main() {\n+    let _: Option<usize> = test1();\n+    let _: f64 = test1();\n+    let _: Option<i32> = test1();\n+}"}, {"sha": "7fb5549825cc5da42dc62f9840add630d66dfb7c", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=f9477a77c52af8d3dea361b3f4ac3e60653aa529", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:4:15\n+   |\n+LL | fn test1() -> _ { Some(42) }\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace `_` with the correct return type: `std::option::Option<i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}]}