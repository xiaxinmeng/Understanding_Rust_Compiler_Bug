{"sha": "75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YzBjOGM2ZGMxNzRjZGVmNDlmYmM0Y2JkOWNhMDg0Zjk4YmQzZjQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T17:04:01Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in describe_place_for_conflicting_borrow", "tree": {"sha": "96023becef84789c1d01ab3976a28379d4a6fb1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96023becef84789c1d01ab3976a28379d4a6fb1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "html_url": "https://github.com/rust-lang/rust/commit/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f81fc53dbff924aa48e448430f8b8ade8c8d20", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f81fc53dbff924aa48e448430f8b8ade8c8d20", "html_url": "https://github.com/rust-lang/rust/commit/46f81fc53dbff924aa48e448430f8b8ade8c8d20"}], "stats": {"total": 79, "additions": 42, "deletions": 37}, "files": [{"sha": "83ae87bc166717db378fc2caaec3ad6acedd72f5", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "patch": "@@ -275,11 +275,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             \"report_move_out_while_borrowed: location={:?} place={:?} span={:?} borrow={:?}\",\n             location, place, span, borrow\n         );\n-        let value_msg = match self.describe_place(place) {\n+        let value_msg = match self.describe_place(place.as_place_ref()) {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n         };\n-        let borrow_msg = match self.describe_place(&borrow.borrowed_place) {\n+        let borrow_msg = match self.describe_place(borrow.borrowed_place.as_place_ref()) {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n         };\n@@ -292,7 +292,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.cannot_move_when_borrowed(\n             span,\n-            &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n         );\n         err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_msg));\n         err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n@@ -331,15 +331,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.cannot_use_when_mutably_borrowed(\n             span,\n-            &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n             borrow_span,\n-            &self.describe_place(&borrow.borrowed_place)\n+            &self.describe_place(borrow.borrowed_place.as_place_ref())\n                 .unwrap_or_else(|| \"_\".to_owned()),\n         );\n \n         borrow_spans.var_span_label(&mut err, {\n             let place = &borrow.borrowed_place;\n-            let desc_place = self.describe_place(place).unwrap_or_else(|| \"_\".to_owned());\n+            let desc_place =\n+                self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned());\n \n             format!(\"borrow occurs due to use of `{}`{}\", desc_place, borrow_spans.describe())\n         });\n@@ -516,7 +517,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             );\n         } else {\n             let borrow_place = &issued_borrow.borrowed_place;\n-            let borrow_place_desc = self.describe_place(borrow_place)\n+            let borrow_place_desc = self.describe_place(borrow_place.as_place_ref())\n                                         .unwrap_or_else(|| \"_\".to_owned());\n             issued_spans.var_span_label(\n                 &mut err,\n@@ -615,9 +616,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 while let Some(box Projection { base: base_proj, elem }) = current {\n                     match elem {\n                         ProjectionElem::Field(field, _) if union_ty(base, base_proj).is_some() => {\n-                            return Some((Place {\n-                                base: base.clone(),\n-                                projection: base_proj.clone(),\n+                            return Some((PlaceRef {\n+                                base: base,\n+                                projection: base_proj,\n                             }, field));\n                         },\n                         _ => current = base_proj,\n@@ -639,18 +640,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     if let ProjectionElem::Field(field, _) = elem {\n                         if let Some(union_ty) = union_ty(base, proj_base) {\n                             if field != target_field\n-                                && *base == target_base.base\n-                                && *proj_base == target_base.projection {\n+                                && base == target_base.base\n+                                && proj_base == target_base.projection {\n                                 // FIXME when we avoid clone reuse describe_place closure\n-                                let describe_base_place =  self.describe_place(&Place {\n-                                    base: base.clone(),\n-                                    projection: proj_base.clone(),\n+                                let describe_base_place =  self.describe_place(PlaceRef {\n+                                    base: base,\n+                                    projection: proj_base,\n                                 }).unwrap_or_else(|| \"_\".to_owned());\n \n                                 return Some((\n                                     describe_base_place,\n-                                    describe_place(first_borrowed_place),\n-                                    describe_place(second_borrowed_place),\n+                                    describe_place(first_borrowed_place.as_place_ref()),\n+                                    describe_place(second_borrowed_place.as_place_ref()),\n                                     union_ty.to_string(),\n                                 ));\n                             }\n@@ -665,7 +666,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // If we didn't find a field access into a union, or both places match, then\n                 // only return the description of the first place.\n                 (\n-                    describe_place(first_borrowed_place),\n+                    describe_place(first_borrowed_place.as_place_ref()),\n                     \"\".to_string(),\n                     \"\".to_string(),\n                     \"\".to_string(),\n@@ -743,7 +744,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n-        let place_desc = self.describe_place(&borrow.borrowed_place);\n+        let place_desc = self.describe_place(borrow.borrowed_place.as_place_ref());\n \n         let kind_place = kind.filter(|_| place_desc.is_some()).map(|k| (k, place_span.0));\n         let explanation = self.explain_why_borrow_contains_point(location, &borrow, kind_place);\n@@ -950,12 +951,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.cannot_borrow_across_destructor(borrow_span);\n \n-        let what_was_dropped = match self.describe_place(place) {\n+        let what_was_dropped = match self.describe_place(place.as_place_ref()) {\n             Some(name) => format!(\"`{}`\", name.as_str()),\n             None => String::from(\"temporary value\"),\n         };\n \n-        let label = match self.describe_place(&borrow.borrowed_place) {\n+        let label = match self.describe_place(borrow.borrowed_place.as_place_ref()) {\n             Some(borrowed) => format!(\n                 \"here, drop of {D} needs exclusive access to `{B}`, \\\n                  because the type `{T}` implements the `Drop` trait\",\n@@ -1389,7 +1390,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let mut err = self.cannot_mutate_in_match_guard(\n                 span,\n                 loan_span,\n-                &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n+                &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n                 \"assign\",\n             );\n             loan_spans.var_span_label(\n@@ -1405,7 +1406,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut err = self.cannot_assign_to_borrowed(\n             span,\n             loan_span,\n-            &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n         );\n \n         loan_spans.var_span_label(\n@@ -1465,8 +1466,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 is_user_variable: None,\n                 ..\n             })\n-            | None => (self.describe_place(place), assigned_span),\n-            Some(decl) => (self.describe_place(err_place), decl.source_info.span),\n+            | None => (self.describe_place(place.as_place_ref()), assigned_span),\n+            Some(decl) => (self.describe_place(err_place.as_place_ref()), decl.source_info.span),\n         };\n \n         let mut err = self.cannot_reassign_immutable("}, {"sha": "06ef802a4cf4f5eed29e9fed3ba13b095df2cdc9", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "patch": "@@ -121,8 +121,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// End-user visible description of `place` if one can be found. If the\n     /// place is a temporary for instance, None will be returned.\n-    pub(super) fn describe_place(&self, place: &Place<'tcx>) -> Option<String> {\n-        self.describe_place_with_options(place.as_place_ref(), IncludingDowncast(false))\n+    pub(super) fn describe_place(&self, place_ref: PlaceRef<'cx, 'tcx>) -> Option<String> {\n+        self.describe_place_with_options(place_ref, IncludingDowncast(false))\n     }\n \n     /// End-user visible description of `place` if one can be found. If the"}, {"sha": "cbeedd317306464e8147ff0eed8f5dba5f9aa874", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "patch": "@@ -277,7 +277,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         span: Span\n     ) -> DiagnosticBuilder<'a> {\n         let description = if place.projection.is_none() {\n-            format!(\"static item `{}`\", self.describe_place(place).unwrap())\n+            format!(\"static item `{}`\", self.describe_place(place.as_place_ref()).unwrap())\n         } else {\n             let mut base_static = &place.projection;\n             while let Some(box Projection { base: Some(ref proj), .. }) = base_static {\n@@ -290,8 +290,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n             format!(\n                 \"`{:?}` as `{:?}` is a static item\",\n-                self.describe_place(place).unwrap(),\n-                self.describe_place(&base_static).unwrap(),\n+                self.describe_place(place.as_place_ref()).unwrap(),\n+                self.describe_place(base_static.as_place_ref()).unwrap(),\n             )\n         };\n \n@@ -363,7 +363,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let upvar_name = upvar.name;\n                 let upvar_span = self.infcx.tcx.hir().span(upvar_hir_id);\n \n-                let place_name = self.describe_place(move_place).unwrap();\n+                let place_name = self.describe_place(move_place.as_place_ref()).unwrap();\n \n                 let place_description = if self\n                     .is_upvar_field_projection(move_place.as_place_ref())\n@@ -392,7 +392,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n             _ => {\n                 let source = self.borrowed_content_source(&deref_base);\n-                match (self.describe_place(move_place), source.describe_for_named_place()) {\n+                match (\n+                    self.describe_place(move_place.as_place_ref()),\n+                    source.describe_for_named_place(),\n+                ) {\n                     (Some(place_desc), Some(source_desc)) => {\n                         self.cannot_move_out_of(\n                             span,\n@@ -452,7 +455,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 if binds_to.is_empty() {\n                     let place_ty = move_from.ty(self.body, self.infcx.tcx).ty;\n-                    let place_desc = match self.describe_place(&move_from) {\n+                    let place_desc = match self.describe_place(move_from.as_place_ref()) {\n                         Some(desc) => format!(\"`{}`\", desc),\n                         None => format!(\"value\"),\n                     };\n@@ -480,7 +483,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             GroupedMoveError::OtherIllegalMove { ref original_path, use_spans, .. } => {\n                 let span = use_spans.var_or_use();\n                 let place_ty = original_path.ty(self.body, self.infcx.tcx).ty;\n-                let place_desc = match self.describe_place(original_path) {\n+                let place_desc = match self.describe_place(original_path.as_place_ref()) {\n                     Some(desc) => format!(\"`{}`\", desc),\n                     None => format!(\"value\"),\n                 };"}, {"sha": "cc9a31db98b0f27ec5d3c914cff943dbdc485ca8", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let item_msg;\n         let reason;\n         let mut opt_source = None;\n-        let access_place_desc = self.describe_place(access_place);\n+        let access_place_desc = self.describe_place(access_place.as_place_ref());\n         debug!(\"report_mutability_error: access_place_desc={:?}\", access_place_desc);\n \n         match the_place_err {\n@@ -236,7 +236,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     format!(\n                         \"mutable borrow occurs due to use of `{}` in closure\",\n                         // always Some() if the message is printed.\n-                        self.describe_place(access_place).unwrap_or_default(),\n+                        self.describe_place(access_place.as_place_ref()).unwrap_or_default(),\n                     )\n                 );\n                 borrow_span"}, {"sha": "abb84c59d9b9e740b6febb840fd4a89bf6ccc893", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "patch": "@@ -304,7 +304,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             region,\n                         );\n                     if let Some(region_name) = region_name {\n-                        let opt_place_desc = self.describe_place(&borrow.borrowed_place);\n+                        let opt_place_desc =\n+                            self.describe_place(borrow.borrowed_place.as_place_ref());\n                         BorrowExplanation::MustBeValidFor {\n                             category,\n                             from_closure,"}]}