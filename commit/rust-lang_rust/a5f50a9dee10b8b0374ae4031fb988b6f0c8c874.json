{"sha": "a5f50a9dee10b8b0374ae4031fb988b6f0c8c874", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZjUwYTlkZWUxMGI4YjAzNzRhZTQwMzFmYjk4OGI2ZjBjOGM4NzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-31T23:22:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-31T23:22:18Z"}, "message": "Only emit warnings if the user is using Pulldown\n\nAlso checks for differences after eliminating whitespace-only diffs.\n\nRenames get_html_diff", "tree": {"sha": "8084c2f2d9d09065fd636fe7a2b1fd25aa7575a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8084c2f2d9d09065fd636fe7a2b1fd25aa7575a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f50a9dee10b8b0374ae4031fb988b6f0c8c874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f50a9dee10b8b0374ae4031fb988b6f0c8c874", "html_url": "https://github.com/rust-lang/rust/commit/a5f50a9dee10b8b0374ae4031fb988b6f0c8c874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f50a9dee10b8b0374ae4031fb988b6f0c8c874/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b01abf3d222523d0db4f79c13ed45e7fef27e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b01abf3d222523d0db4f79c13ed45e7fef27e3", "html_url": "https://github.com/rust-lang/rust/commit/97b01abf3d222523d0db4f79c13ed45e7fef27e3"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "a02ac133041f70e0c65de4be499b8e32a5baf507", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a5f50a9dee10b8b0374ae4031fb988b6f0c8c874/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f50a9dee10b8b0374ae4031fb988b6f0c8c874/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a5f50a9dee10b8b0374ae4031fb988b6f0c8c874", "patch": "@@ -1645,30 +1645,37 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n     Ok(())\n }\n \n-fn get_html_diff(w: &mut fmt::Formatter, md_text: &str, render_type: RenderType,\n+fn render_markdown(w: &mut fmt::Formatter, md_text: &str, render_type: RenderType,\n                  prefix: &str) -> fmt::Result {\n-    let output = format!(\"{}\", Markdown(md_text, render_type));\n-    let old = format!(\"{}\", Markdown(md_text, match render_type {\n-                                                  RenderType::Hoedown => RenderType::Pulldown,\n-                                                  RenderType::Pulldown => RenderType::Hoedown,\n-                                              }));\n-    let differences = html_diff::get_differences(&output, &old);\n-    if !differences.is_empty() {\n-        println!(\"Differences spotted in {:?}:\\n{}\",\n-                 md_text,\n-                 differences.iter()\n-                            .filter_map(|s| {\n-                                match *s {\n-                                    html_diff::Difference::NodeText { ref elem_text,\n-                                                                      ref opposite_elem_text,\n-                                                                      .. }\n-                                        if elem_text.trim() == opposite_elem_text.trim() => None,\n-                                    _ => Some(format!(\"=> {}\", s.to_string())),\n-                                }\n-                            })\n-                            .collect::<Vec<String>>()\n-                            .join(\"\\n\"));\n-    }\n+    let hoedown_output = format!(\"{}\", Markdown(md_text, RenderType::Hoedown));\n+    // We only emit warnings if the user has opted-in to Pulldown rendering.\n+    let output = if render_type == RenderType::Pulldown {\n+        let pulldown_output = format!(\"{}\", Markdown(md_text, RenderType::Pulldown));\n+        let differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n+        let differences = differences.iter()\n+            .filter_map(|s| {\n+                match *s {\n+                    html_diff::Difference::NodeText { ref elem_text,\n+                                                      ref opposite_elem_text,\n+                                                      .. }\n+                        if elem_text.trim() == opposite_elem_text.trim() => None,\n+                    _ => Some(format!(\"=> {}\", s.to_string())),\n+                }\n+            })\n+            .collect::<Vec<String>>();\n+\n+        if !differences.is_empty() {\n+            // Emit warnings if there are differences.\n+            println!(\"Differences spotted in {:?}:\\n{}\",\n+                     md_text,\n+                     differences.join(\"\\n\"));\n+        }\n+\n+        pulldown_output\n+    } else {\n+        hoedown_output\n+    };\n+\n     write!(w, \"<div class='docblock'>{}{}</div>\", prefix, output)\n }\n \n@@ -1681,7 +1688,7 @@ fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLin\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        get_html_diff(w, &markdown, render_type, prefix)?;\n+        render_markdown(w, &markdown, render_type, prefix)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -1705,7 +1712,7 @@ fn render_assoc_const_value(item: &clean::Item) -> String {\n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n                  render_type: RenderType, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n-        get_html_diff(w, s, render_type, prefix)?;\n+        render_markdown(w, s, render_type, prefix)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }"}]}