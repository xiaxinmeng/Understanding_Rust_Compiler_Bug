{"sha": "8195e12dd925e65f982519d84587a5673a712908", "node_id": "C_kwDOAAsO6NoAKDgxOTVlMTJkZDkyNWU2NWY5ODI1MTlkODQ1ODdhNTY3M2E3MTI5MDg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-23T17:59:26Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-23T19:36:27Z"}, "message": "Add `Mutability::ref_prefix_str`, order `Mutability`, simplify code", "tree": {"sha": "ae01e51d5b2a3a7d5ba185819f5858d8d8a553b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae01e51d5b2a3a7d5ba185819f5858d8d8a553b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8195e12dd925e65f982519d84587a5673a712908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8195e12dd925e65f982519d84587a5673a712908", "html_url": "https://github.com/rust-lang/rust/commit/8195e12dd925e65f982519d84587a5673a712908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8195e12dd925e65f982519d84587a5673a712908/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d121aa3b5584eb919a4aaf64dbae0ea1e8e30231", "url": "https://api.github.com/repos/rust-lang/rust/commits/d121aa3b5584eb919a4aaf64dbae0ea1e8e30231", "html_url": "https://github.com/rust-lang/rust/commit/d121aa3b5584eb919a4aaf64dbae0ea1e8e30231"}], "stats": {"total": 148, "additions": 51, "deletions": 97}, "files": [{"sha": "0567bb5a6c976f8279e0571bfe69830c96d24afd", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8195e12dd925e65f982519d84587a5673a712908", "patch": "@@ -775,8 +775,9 @@ pub enum PatKind {\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Copy)]\n #[derive(HashStable_Generic, Encodable, Decodable)]\n pub enum Mutability {\n-    Mut,\n+    // N.B. Order is deliberate, so that Not < Mut\n     Not,\n+    Mut,\n }\n \n impl Mutability {\n@@ -787,12 +788,21 @@ impl Mutability {\n         }\n     }\n \n+    /// Returns `\"\"` (empty string) or `\"mut \"` depending on the mutability.\n     pub fn prefix_str(&self) -> &'static str {\n         match self {\n             Mutability::Mut => \"mut \",\n             Mutability::Not => \"\",\n         }\n     }\n+\n+    /// Returns `\"&\"` or `\"&mut \"` depending on the mutability.\n+    pub fn ref_prefix_str(&self) -> &'static str {\n+        match self {\n+            Mutability::Not => \"&\",\n+            Mutability::Mut => \"&mut \",\n+        }\n+    }\n }\n \n /// The kind of borrow in an `AddrOf` expression,"}, {"sha": "018f606db6425e7ab77d571662ea6d7ce46f6530", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=8195e12dd925e65f982519d84587a5673a712908", "patch": "@@ -571,11 +571,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let moved_place = &self.move_data.move_paths[move_out.path].place;\n                 let move_spans = self.move_spans(moved_place.as_ref(), move_out.source);\n                 let move_span = move_spans.args_or_use();\n-                let suggestion = if borrow_level == hir::Mutability::Mut {\n-                    \"&mut \".to_string()\n-                } else {\n-                    \"&\".to_string()\n-                };\n+                let suggestion = borrow_level.ref_prefix_str().to_owned();\n                 (move_span.shrink_to_lo(), suggestion)\n             })\n             .collect();"}, {"sha": "5122f9808ed29e60cf0f70cc6f2db69cf6bd211f", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=8195e12dd925e65f982519d84587a5673a712908", "patch": "@@ -389,13 +389,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             // diagnostic: if the span starts with a mutable borrow of\n             // a local variable, then just suggest the user remove it.\n             PlaceRef { local: _, projection: [] }\n-                if {\n-                    if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n-                        snippet.starts_with(\"&mut \")\n-                    } else {\n-                        false\n-                    }\n-                } =>\n+                if self\n+                    .infcx\n+                    .tcx\n+                    .sess\n+                    .source_map()\n+                    .span_to_snippet(span)\n+                    .map_or(false, |snippet| snippet.starts_with(\"&mut \")) =>\n             {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n                 err.span_suggestion("}, {"sha": "13d7ab372a424931d9b47185f60986ff5080d4d0", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 20, "deletions": 49, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=8195e12dd925e65f982519d84587a5673a712908", "patch": "@@ -19,6 +19,7 @@ use rustc_trait_selection::traits::ObligationCause;\n \n use super::method::probe;\n \n+use std::cmp::min;\n use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -937,51 +938,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     && let Ok(src) = sm.span_to_snippet(sp)\n                 {\n                     let derefs = \"*\".repeat(steps);\n-                    if let Some((span, src, applicability)) = match mutbl_b {\n-                        hir::Mutability::Mut => {\n-                            let new_prefix = \"&mut \".to_owned() + &derefs;\n-                            match mutbl_a {\n-                                hir::Mutability::Mut => {\n-                                    replace_prefix(&src, \"&mut \", &new_prefix).map(|_| {\n-                                        let pos = sp.lo() + BytePos(5);\n-                                        let sp = sp.with_lo(pos).with_hi(pos);\n-                                        (sp, derefs, Applicability::MachineApplicable)\n-                                    })\n-                                }\n-                                hir::Mutability::Not => {\n-                                    replace_prefix(&src, \"&\", &new_prefix).map(|_| {\n-                                        let pos = sp.lo() + BytePos(1);\n-                                        let sp = sp.with_lo(pos).with_hi(pos);\n-                                        (\n-                                            sp,\n-                                            format!(\"mut {derefs}\"),\n-                                            Applicability::Unspecified,\n-                                        )\n-                                    })\n-                                }\n-                            }\n-                        }\n-                        hir::Mutability::Not => {\n-                            let new_prefix = \"&\".to_owned() + &derefs;\n-                            match mutbl_a {\n-                                hir::Mutability::Mut => {\n-                                    replace_prefix(&src, \"&mut \", &new_prefix).map(|_| {\n-                                        let lo = sp.lo() + BytePos(1);\n-                                        let hi = sp.lo() + BytePos(5);\n-                                        let sp = sp.with_lo(lo).with_hi(hi);\n-                                        (sp, derefs, Applicability::MachineApplicable)\n-                                    })\n-                                }\n-                                hir::Mutability::Not => {\n-                                    replace_prefix(&src, \"&\", &new_prefix).map(|_| {\n-                                        let pos = sp.lo() + BytePos(1);\n-                                        let sp = sp.with_lo(pos).with_hi(pos);\n-                                        (sp, derefs, Applicability::MachineApplicable)\n-                                    })\n-                                }\n-                            }\n-                        }\n-                    } {\n+                    let old_prefix = mutbl_a.ref_prefix_str();\n+                    let new_prefix = mutbl_b.ref_prefix_str().to_owned() + &derefs;\n+\n+                    let suggestion = replace_prefix(&src, old_prefix, &new_prefix).map(|_| {\n+                        // skip `&` or `&mut ` if both mutabilities are mutable\n+                        let lo = sp.lo() + BytePos(min(old_prefix.len(), mutbl_b.ref_prefix_str().len()) as _);\n+                        // skip `&` or `&mut `\n+                        let hi = sp.lo() + BytePos(old_prefix.len() as _);\n+                        let sp = sp.with_lo(lo).with_hi(hi);\n+\n+                        (\n+                            sp,\n+                            format!(\"{}{derefs}\", if mutbl_a != mutbl_b { mutbl_b.prefix_str() } else { \"\" }),\n+                            if mutbl_b <= mutbl_a { Applicability::MachineApplicable } else { Applicability::MaybeIncorrect }\n+                        )\n+                    });\n+\n+                    if let Some((span, src, applicability)) = suggestion {\n                         return Some((\n                             span,\n                             \"consider dereferencing\".to_string(),\n@@ -1005,10 +979,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // If the expression has `&`, removing it would fix the error\n                             prefix_span = prefix_span.with_hi(inner.span.lo());\n                             expr = inner;\n-                            remove += match mutbl {\n-                                hir::Mutability::Not => \"&\",\n-                                hir::Mutability::Mut => \"&mut \",\n-                            };\n+                            remove.push_str(mutbl.ref_prefix_str());\n                             steps -= 1;\n                         } else {\n                             break;"}, {"sha": "1780226b8e03131fd39da52845bb8c878f33ac95", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=8195e12dd925e65f982519d84587a5673a712908", "patch": "@@ -345,8 +345,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             if annotation {\n                 let suggest_annotation = match expr.peel_drop_temps().kind {\n-                    hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Not, _) => \"&\",\n-                    hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mut, _) => \"&mut \",\n+                    hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, _) => mutbl.ref_prefix_str(),\n                     _ => return true,\n                 };\n                 let mut tuple_indexes = Vec::new();"}, {"sha": "dea14dd93d6acd15e0ec4199ad0f677b5461ce6b", "filename": "compiler/rustc_hir_typeck/src/method/prelude2021.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs?ref=8195e12dd925e65f982519d84587a5673a712908", "patch": "@@ -5,7 +5,6 @@ use crate::{\n use hir::def_id::DefId;\n use hir::HirId;\n use hir::ItemKind;\n-use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -88,14 +87,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let derefs = \"*\".repeat(pick.autoderefs);\n \n                     let autoref = match pick.autoref_or_ptr_adjustment {\n-                        Some(probe::AutorefOrPtrAdjustment::Autoref {\n-                            mutbl: Mutability::Mut,\n-                            ..\n-                        }) => \"&mut \",\n-                        Some(probe::AutorefOrPtrAdjustment::Autoref {\n-                            mutbl: Mutability::Not,\n-                            ..\n-                        }) => \"&\",\n+                        Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl, .. }) => {\n+                            mutbl.ref_prefix_str()\n+                        }\n                         Some(probe::AutorefOrPtrAdjustment::ToConstPtr) | None => \"\",\n                     };\n                     if let Ok(self_expr) = self.sess().source_map().span_to_snippet(self_expr.span)\n@@ -386,8 +380,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let derefs = \"*\".repeat(pick.autoderefs);\n \n         let autoref = match pick.autoref_or_ptr_adjustment {\n-            Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl: Mutability::Mut, .. }) => \"&mut \",\n-            Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl: Mutability::Not, .. }) => \"&\",\n+            Some(probe::AutorefOrPtrAdjustment::Autoref { mutbl, .. }) => mutbl.ref_prefix_str(),\n             Some(probe::AutorefOrPtrAdjustment::ToConstPtr) | None => \"\",\n         };\n "}, {"sha": "0910155899537292c4e1659e640ee42db74a9d5e", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=8195e12dd925e65f982519d84587a5673a712908", "patch": "@@ -1147,19 +1147,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 && assoc.kind == ty::AssocKind::Fn\n             {\n                 let sig = self.tcx.fn_sig(assoc.def_id);\n-                if let Some(first) = sig.inputs().skip_binder().get(0) {\n-                    if first.peel_refs() == rcvr_ty.peel_refs() {\n-                        None\n-                    } else {\n-                        Some(if first.is_region_ptr() {\n-                            if first.is_mutable_ptr() { \"&mut \" } else { \"&\" }\n-                        } else {\n-                            \"\"\n-                        })\n-                    }\n-                } else {\n+                sig.inputs().skip_binder().get(0).and_then(|first| if first.peel_refs() == rcvr_ty.peel_refs() {\n                     None\n-                }\n+                } else {\n+                    Some(first.ref_mutability().map_or(\"\", |mutbl| mutbl.ref_prefix_str()))\n+                })\n             } else {\n                 None\n             };\n@@ -2625,11 +2617,7 @@ fn print_disambiguation_help<'tcx>(\n     let (span, sugg) = if let (ty::AssocKind::Fn, Some((receiver, args))) = (kind, args) {\n         let args = format!(\n             \"({}{})\",\n-            if rcvr_ty.is_region_ptr() {\n-                if rcvr_ty.is_mutable_ptr() { \"&mut \" } else { \"&\" }\n-            } else {\n-                \"\"\n-            },\n+            rcvr_ty.ref_mutability().map_or(\"\", |mutbl| mutbl.ref_prefix_str()),\n             std::iter::once(receiver)\n                 .chain(args.iter())\n                 .map(|arg| source_map.span_to_snippet(arg.span).unwrap_or_else(|_| {"}, {"sha": "31235ce191832023d042df69c7671cc33372200e", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8195e12dd925e65f982519d84587a5673a712908/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8195e12dd925e65f982519d84587a5673a712908", "patch": "@@ -15,7 +15,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Body, Closure, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n+use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Print, Printer};\n use rustc_middle::ty::{self, DefIdTree, InferConst};\n use rustc_middle::ty::{GenericArg, GenericArgKind, SubstsRef};\n@@ -508,10 +508,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     [\n                         ..,\n                         Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(_, mut_)), target: _ },\n-                    ] => match mut_ {\n-                        AutoBorrowMutability::Mut { .. } => \"&mut \",\n-                        AutoBorrowMutability::Not => \"&\",\n-                    },\n+                    ] => hir::Mutability::from(*mut_).ref_prefix_str(),\n                     _ => \"\",\n                 };\n "}]}