{"sha": "073d5f7733983a59bcfce9cf56fd182893ffc7b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3M2Q1Zjc3MzM5ODNhNTliY2ZjZTljZjU2ZmQxODI4OTNmZmM3YjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T19:15:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T19:15:12Z"}, "message": "internal: more focused parsing tests", "tree": {"sha": "874771c9038b835ed0ef674dec04584c1c23990e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/874771c9038b835ed0ef674dec04584c1c23990e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073d5f7733983a59bcfce9cf56fd182893ffc7b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073d5f7733983a59bcfce9cf56fd182893ffc7b0", "html_url": "https://github.com/rust-lang/rust/commit/073d5f7733983a59bcfce9cf56fd182893ffc7b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073d5f7733983a59bcfce9cf56fd182893ffc7b0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55078c81e04f016e65fc3eb54e98aa7cc10ed38f", "url": "https://api.github.com/repos/rust-lang/rust/commits/55078c81e04f016e65fc3eb54e98aa7cc10ed38f", "html_url": "https://github.com/rust-lang/rust/commit/55078c81e04f016e65fc3eb54e98aa7cc10ed38f"}], "stats": {"total": 393, "additions": 206, "deletions": 187}, "files": [{"sha": "6405a508ab095407e37a31227ffa84dbb2db8a8a", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 27, "deletions": 48, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -245,29 +245,9 @@ fn opt_item_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         T![mod] => mod_item(p, m),\n \n         T![type] => type_alias(p, m),\n-\n-        T![struct] => {\n-            // test struct_items\n-            // struct Foo;\n-            // struct Foo {}\n-            // struct Foo();\n-            // struct Foo(String, usize);\n-            // struct Foo {\n-            //     a: i32,\n-            //     b: f32,\n-            // }\n-            adt::strukt(p, m);\n-        }\n+        T![struct] => adt::strukt(p, m),\n         T![enum] => adt::enum_(p, m),\n-        IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n-            // test union_items\n-            // union Foo {}\n-            // union Foo {\n-            //     a: i32,\n-            //     b: f32,\n-            // }\n-            adt::union(p, m);\n-        }\n+        IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => adt::union(p, m),\n \n         // test pub_macro_def\n         // pub macro m($:ident) {}\n@@ -324,6 +304,31 @@ pub(crate) fn mod_item(p: &mut Parser, m: Marker) {\n     m.complete(p, MODULE);\n }\n \n+// test type_alias\n+// type Foo = Bar;\n+fn type_alias(p: &mut Parser, m: Marker) {\n+    p.bump(T![type]);\n+\n+    name(p);\n+\n+    // test type_item_type_params\n+    // type Result<T> = ();\n+    type_params::opt_generic_param_list(p);\n+\n+    if p.at(T![:]) {\n+        type_params::bounds(p);\n+    }\n+\n+    // test type_item_where_clause\n+    // type Foo where Foo: Copy = ();\n+    type_params::opt_where_clause(p);\n+    if p.eat(T![=]) {\n+        types::type_(p);\n+    }\n+    p.expect(T![;]);\n+    m.complete(p, TYPE_ALIAS);\n+}\n+\n pub(crate) fn item_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n@@ -374,32 +379,6 @@ fn fn_(p: &mut Parser) {\n     }\n }\n \n-// test type_item\n-// type Foo = Bar;\n-fn type_alias(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![type]));\n-    p.bump(T![type]);\n-\n-    name(p);\n-\n-    // test type_item_type_params\n-    // type Result<T> = ();\n-    type_params::opt_generic_param_list(p);\n-\n-    if p.at(T![:]) {\n-        type_params::bounds(p);\n-    }\n-\n-    // test type_item_where_clause\n-    // type Foo where Foo: Copy = ();\n-    type_params::opt_where_clause(p);\n-    if p.eat(T![=]) {\n-        types::type_(p);\n-    }\n-    p.expect(T![;]);\n-    m.complete(p, TYPE_ALIAS);\n-}\n-\n fn macro_rules(p: &mut Parser, m: Marker) {\n     assert!(p.at_contextual_kw(\"macro_rules\"));\n     p.bump_remap(T![macro_rules]);"}, {"sha": "eaf16bc1a10303794089ba12e0c43c422b82d7c1", "filename": "crates/parser/src/grammar/items/adt.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -1,18 +1,21 @@\n use super::*;\n \n+// test struct_item\n+// struct S {}\n pub(super) fn strukt(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![struct]));\n     p.bump(T![struct]);\n-    struct_or_union(p, m, T![struct], STRUCT);\n+    struct_or_union(p, m, true);\n }\n \n+// test union_item\n+// struct U { i: i32, f: f32 }\n pub(super) fn union(p: &mut Parser, m: Marker) {\n     assert!(p.at_contextual_kw(\"union\"));\n     p.bump_remap(T![union]);\n-    struct_or_union(p, m, T![union], UNION);\n+    struct_or_union(p, m, false);\n }\n \n-fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n+fn struct_or_union(p: &mut Parser, m: Marker, is_struct: bool) {\n     name_r(p, ITEM_RECOVERY_SET);\n     type_params::opt_generic_param_list(p);\n     match p.current() {\n@@ -29,26 +32,24 @@ fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n                 }\n             }\n         }\n-        T![;] if kw == T![struct] => {\n+        T!['{'] => record_field_list(p),\n+        // test unit_struct\n+        // struct S;\n+        T![;] if is_struct => {\n             p.bump(T![;]);\n         }\n-        T!['{'] => record_field_list(p),\n-        T!['('] if kw == T![struct] => {\n+        // test tuple_struct\n+        // struct S(String, usize);\n+        T!['('] if is_struct => {\n             tuple_field_list(p);\n             // test tuple_struct_where\n-            // struct Test<T>(T) where T: Clone;\n-            // struct Test<T>(T);\n+            // struct S<T>(T) where T: Clone;\n             type_params::opt_where_clause(p);\n             p.expect(T![;]);\n         }\n-        _ if kw == T![struct] => {\n-            p.error(\"expected `;`, `{`, or `(`\");\n-        }\n-        _ => {\n-            p.error(\"expected `{`\");\n-        }\n+        _ => p.error(if is_struct { \"expected `;`, `{`, or `(`\" } else { \"expected `{`\" }),\n     }\n-    m.complete(p, def);\n+    m.complete(p, if is_struct { STRUCT } else { UNION });\n }\n \n pub(super) fn enum_(p: &mut Parser, m: Marker) {\n@@ -102,6 +103,8 @@ pub(crate) fn variant_list(p: &mut Parser) {\n     m.complete(p, VARIANT_LIST);\n }\n \n+// test record_field_list\n+// struct S { a: i32, b: f32 }\n pub(crate) fn record_field_list(p: &mut Parser) {\n     assert!(p.at(T!['{']));\n     let m = p.start();"}, {"sha": "6589e479519323b1d20d20d81f778011fe563e40", "filename": "crates/syntax/test_data/parser/inline/ok/0068_union_items.rast", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/55078c81e04f016e65fc3eb54e98aa7cc10ed38f/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/55078c81e04f016e65fc3eb54e98aa7cc10ed38f/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast?ref=55078c81e04f016e65fc3eb54e98aa7cc10ed38f", "patch": "@@ -1,46 +0,0 @@\n-SOURCE_FILE@0..51\n-  UNION@0..12\n-    UNION_KW@0..5 \"union\"\n-    WHITESPACE@5..6 \" \"\n-    NAME@6..9\n-      IDENT@6..9 \"Foo\"\n-    WHITESPACE@9..10 \" \"\n-    RECORD_FIELD_LIST@10..12\n-      L_CURLY@10..11 \"{\"\n-      R_CURLY@11..12 \"}\"\n-  WHITESPACE@12..13 \"\\n\"\n-  UNION@13..50\n-    UNION_KW@13..18 \"union\"\n-    WHITESPACE@18..19 \" \"\n-    NAME@19..22\n-      IDENT@19..22 \"Foo\"\n-    WHITESPACE@22..23 \" \"\n-    RECORD_FIELD_LIST@23..50\n-      L_CURLY@23..24 \"{\"\n-      WHITESPACE@24..29 \"\\n    \"\n-      RECORD_FIELD@29..35\n-        NAME@29..30\n-          IDENT@29..30 \"a\"\n-        COLON@30..31 \":\"\n-        WHITESPACE@31..32 \" \"\n-        PATH_TYPE@32..35\n-          PATH@32..35\n-            PATH_SEGMENT@32..35\n-              NAME_REF@32..35\n-                IDENT@32..35 \"i32\"\n-      COMMA@35..36 \",\"\n-      WHITESPACE@36..41 \"\\n    \"\n-      RECORD_FIELD@41..47\n-        NAME@41..42\n-          IDENT@41..42 \"b\"\n-        COLON@42..43 \":\"\n-        WHITESPACE@43..44 \" \"\n-        PATH_TYPE@44..47\n-          PATH@44..47\n-            PATH_SEGMENT@44..47\n-              NAME_REF@44..47\n-                IDENT@44..47 \"f32\"\n-      COMMA@47..48 \",\"\n-      WHITESPACE@48..49 \"\\n\"\n-      R_CURLY@49..50 \"}\"\n-  WHITESPACE@50..51 \"\\n\""}, {"sha": "b7dd610d80a958bf168d7a7cc0fe33adbd6966ca", "filename": "crates/syntax/test_data/parser/inline/ok/0068_union_items.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55078c81e04f016e65fc3eb54e98aa7cc10ed38f/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55078c81e04f016e65fc3eb54e98aa7cc10ed38f/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rs?ref=55078c81e04f016e65fc3eb54e98aa7cc10ed38f", "patch": "@@ -1,5 +0,0 @@\n-union Foo {}\n-union Foo {\n-    a: i32,\n-    b: f32,\n-}"}, {"sha": "2befc8388ec70abcb7c245c0b679a425780f0850", "filename": "crates/syntax/test_data/parser/inline/ok/0078_type_alias.rast", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rast?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "previous_filename": "crates/syntax/test_data/parser/inline/ok/0078_type_item.rast"}, {"sha": "04c0344fa3641f0a3ce226d05680e2b1eb58a4e3", "filename": "crates/syntax/test_data/parser/inline/ok/0078_type_alias.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0078_type_alias.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "previous_filename": "crates/syntax/test_data/parser/inline/ok/0078_type_item.rs"}, {"sha": "693e3f3ee1245864d423b68dae606b0fb9c923e5", "filename": "crates/syntax/test_data/parser/inline/ok/0083_struct_items.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55078c81e04f016e65fc3eb54e98aa7cc10ed38f/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55078c81e04f016e65fc3eb54e98aa7cc10ed38f/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rs?ref=55078c81e04f016e65fc3eb54e98aa7cc10ed38f", "patch": "@@ -1,8 +0,0 @@\n-struct Foo;\n-struct Foo {}\n-struct Foo();\n-struct Foo(String, usize);\n-struct Foo {\n-    a: i32,\n-    b: f32,\n-}"}, {"sha": "31961113634ebf0c789bd6ef5b398fff80b2d9c0", "filename": "crates/syntax/test_data/parser/inline/ok/0114_tuple_struct_where.rast", "status": "modified", "additions": 40, "deletions": 62, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -1,64 +1,42 @@\n-SOURCE_FILE@0..53\n-  STRUCT@0..33\n+SOURCE_FILE@0..31\n+  STRUCT@0..30\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n-    NAME@7..11\n-      IDENT@7..11 \"Test\"\n-    GENERIC_PARAM_LIST@11..14\n-      L_ANGLE@11..12 \"<\"\n-      TYPE_PARAM@12..13\n-        NAME@12..13\n-          IDENT@12..13 \"T\"\n-      R_ANGLE@13..14 \">\"\n-    TUPLE_FIELD_LIST@14..17\n-      L_PAREN@14..15 \"(\"\n-      TUPLE_FIELD@15..16\n-        PATH_TYPE@15..16\n-          PATH@15..16\n-            PATH_SEGMENT@15..16\n-              NAME_REF@15..16\n-                IDENT@15..16 \"T\"\n-      R_PAREN@16..17 \")\"\n-    WHITESPACE@17..18 \" \"\n-    WHERE_CLAUSE@18..32\n-      WHERE_KW@18..23 \"where\"\n-      WHITESPACE@23..24 \" \"\n-      WHERE_PRED@24..32\n-        PATH_TYPE@24..25\n-          PATH@24..25\n-            PATH_SEGMENT@24..25\n-              NAME_REF@24..25\n-                IDENT@24..25 \"T\"\n-        COLON@25..26 \":\"\n-        WHITESPACE@26..27 \" \"\n-        TYPE_BOUND_LIST@27..32\n-          TYPE_BOUND@27..32\n-            PATH_TYPE@27..32\n-              PATH@27..32\n-                PATH_SEGMENT@27..32\n-                  NAME_REF@27..32\n-                    IDENT@27..32 \"Clone\"\n-    SEMICOLON@32..33 \";\"\n-  WHITESPACE@33..34 \"\\n\"\n-  STRUCT@34..52\n-    STRUCT_KW@34..40 \"struct\"\n-    WHITESPACE@40..41 \" \"\n-    NAME@41..45\n-      IDENT@41..45 \"Test\"\n-    GENERIC_PARAM_LIST@45..48\n-      L_ANGLE@45..46 \"<\"\n-      TYPE_PARAM@46..47\n-        NAME@46..47\n-          IDENT@46..47 \"T\"\n-      R_ANGLE@47..48 \">\"\n-    TUPLE_FIELD_LIST@48..51\n-      L_PAREN@48..49 \"(\"\n-      TUPLE_FIELD@49..50\n-        PATH_TYPE@49..50\n-          PATH@49..50\n-            PATH_SEGMENT@49..50\n-              NAME_REF@49..50\n-                IDENT@49..50 \"T\"\n-      R_PAREN@50..51 \")\"\n-    SEMICOLON@51..52 \";\"\n-  WHITESPACE@52..53 \"\\n\"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    GENERIC_PARAM_LIST@8..11\n+      L_ANGLE@8..9 \"<\"\n+      TYPE_PARAM@9..10\n+        NAME@9..10\n+          IDENT@9..10 \"T\"\n+      R_ANGLE@10..11 \">\"\n+    TUPLE_FIELD_LIST@11..14\n+      L_PAREN@11..12 \"(\"\n+      TUPLE_FIELD@12..13\n+        PATH_TYPE@12..13\n+          PATH@12..13\n+            PATH_SEGMENT@12..13\n+              NAME_REF@12..13\n+                IDENT@12..13 \"T\"\n+      R_PAREN@13..14 \")\"\n+    WHITESPACE@14..15 \" \"\n+    WHERE_CLAUSE@15..29\n+      WHERE_KW@15..20 \"where\"\n+      WHITESPACE@20..21 \" \"\n+      WHERE_PRED@21..29\n+        PATH_TYPE@21..22\n+          PATH@21..22\n+            PATH_SEGMENT@21..22\n+              NAME_REF@21..22\n+                IDENT@21..22 \"T\"\n+        COLON@22..23 \":\"\n+        WHITESPACE@23..24 \" \"\n+        TYPE_BOUND_LIST@24..29\n+          TYPE_BOUND@24..29\n+            PATH_TYPE@24..29\n+              PATH@24..29\n+                PATH_SEGMENT@24..29\n+                  NAME_REF@24..29\n+                    IDENT@24..29 \"Clone\"\n+    SEMICOLON@29..30 \";\"\n+  WHITESPACE@30..31 \"\\n\""}, {"sha": "a602e0018275a3748a84f7796a8e58283db250b1", "filename": "crates/syntax/test_data/parser/inline/ok/0114_tuple_struct_where.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -1,2 +1 @@\n-struct Test<T>(T) where T: Clone;\n-struct Test<T>(T);\n+struct S<T>(T) where T: Clone;"}, {"sha": "935fd6e07be8c2c92a77dece323430b907d5e879", "filename": "crates/syntax/test_data/parser/inline/ok/0170_tuple_struct.rast", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rast", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rast?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1,25 @@\n+SOURCE_FILE@0..25\n+  STRUCT@0..24\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    TUPLE_FIELD_LIST@8..23\n+      L_PAREN@8..9 \"(\"\n+      TUPLE_FIELD@9..15\n+        PATH_TYPE@9..15\n+          PATH@9..15\n+            PATH_SEGMENT@9..15\n+              NAME_REF@9..15\n+                IDENT@9..15 \"String\"\n+      COMMA@15..16 \",\"\n+      WHITESPACE@16..17 \" \"\n+      TUPLE_FIELD@17..22\n+        PATH_TYPE@17..22\n+          PATH@17..22\n+            PATH_SEGMENT@17..22\n+              NAME_REF@17..22\n+                IDENT@17..22 \"usize\"\n+      R_PAREN@22..23 \")\"\n+    SEMICOLON@23..24 \";\"\n+  WHITESPACE@24..25 \"\\n\""}, {"sha": "b4e05717ed3871cc8fd2fa709caba7a20121e504", "filename": "crates/syntax/test_data/parser/inline/ok/0170_tuple_struct.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0170_tuple_struct.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1 @@\n+struct S(String, usize);"}, {"sha": "3134482f0de0a5fd3b336692cb24ebd57c323586", "filename": "crates/syntax/test_data/parser/inline/ok/0171_struct_item.rast", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rast?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1,11 @@\n+SOURCE_FILE@0..12\n+  STRUCT@0..11\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    WHITESPACE@8..9 \" \"\n+    RECORD_FIELD_LIST@9..11\n+      L_CURLY@9..10 \"{\"\n+      R_CURLY@10..11 \"}\"\n+  WHITESPACE@11..12 \"\\n\""}, {"sha": "5f1a34f49b96cb4a1fddbd7bce40bb3baaeb08c1", "filename": "crates/syntax/test_data/parser/inline/ok/0171_struct_item.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0171_struct_item.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1 @@\n+struct S {}"}, {"sha": "ce1135c597d15c6e5c6e66bbac8fba4f55a84b24", "filename": "crates/syntax/test_data/parser/inline/ok/0172_record_field_list.rast", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rast?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1,35 @@\n+SOURCE_FILE@0..28\n+  STRUCT@0..27\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    WHITESPACE@8..9 \" \"\n+    RECORD_FIELD_LIST@9..27\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      RECORD_FIELD@11..17\n+        NAME@11..12\n+          IDENT@11..12 \"a\"\n+        COLON@12..13 \":\"\n+        WHITESPACE@13..14 \" \"\n+        PATH_TYPE@14..17\n+          PATH@14..17\n+            PATH_SEGMENT@14..17\n+              NAME_REF@14..17\n+                IDENT@14..17 \"i32\"\n+      COMMA@17..18 \",\"\n+      WHITESPACE@18..19 \" \"\n+      RECORD_FIELD@19..25\n+        NAME@19..20\n+          IDENT@19..20 \"b\"\n+        COLON@20..21 \":\"\n+        WHITESPACE@21..22 \" \"\n+        PATH_TYPE@22..25\n+          PATH@22..25\n+            PATH_SEGMENT@22..25\n+              NAME_REF@22..25\n+                IDENT@22..25 \"f32\"\n+      WHITESPACE@25..26 \" \"\n+      R_CURLY@26..27 \"}\"\n+  WHITESPACE@27..28 \"\\n\""}, {"sha": "a3bd7787db77c0a78369d6c676c64d4819f08cd4", "filename": "crates/syntax/test_data/parser/inline/ok/0172_record_field_list.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0172_record_field_list.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1 @@\n+struct S { a: i32, b: f32 }"}, {"sha": "5d5c0d69bc015935d374e825917ee403117bc05c", "filename": "crates/syntax/test_data/parser/inline/ok/0173_union_item.rast", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rast?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1,35 @@\n+SOURCE_FILE@0..28\n+  STRUCT@0..27\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"U\"\n+    WHITESPACE@8..9 \" \"\n+    RECORD_FIELD_LIST@9..27\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \" \"\n+      RECORD_FIELD@11..17\n+        NAME@11..12\n+          IDENT@11..12 \"i\"\n+        COLON@12..13 \":\"\n+        WHITESPACE@13..14 \" \"\n+        PATH_TYPE@14..17\n+          PATH@14..17\n+            PATH_SEGMENT@14..17\n+              NAME_REF@14..17\n+                IDENT@14..17 \"i32\"\n+      COMMA@17..18 \",\"\n+      WHITESPACE@18..19 \" \"\n+      RECORD_FIELD@19..25\n+        NAME@19..20\n+          IDENT@19..20 \"f\"\n+        COLON@20..21 \":\"\n+        WHITESPACE@21..22 \" \"\n+        PATH_TYPE@22..25\n+          PATH@22..25\n+            PATH_SEGMENT@22..25\n+              NAME_REF@22..25\n+                IDENT@22..25 \"f32\"\n+      WHITESPACE@25..26 \" \"\n+      R_CURLY@26..27 \"}\"\n+  WHITESPACE@27..28 \"\\n\""}, {"sha": "5edf50de3bd5ed58e1b43b4e5e12bbe634603f05", "filename": "crates/syntax/test_data/parser/inline/ok/0173_union_item.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0173_union_item.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1 @@\n+struct U { i: i32, f: f32 }"}, {"sha": "b20235889fcd4ba64ec0f84645cdbf7c597cedf2", "filename": "crates/syntax/test_data/parser/inline/ok/0174_unit_struct.rast", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rast", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rast?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1,8 @@\n+SOURCE_FILE@0..10\n+  STRUCT@0..9\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"S\"\n+    SEMICOLON@8..9 \";\"\n+  WHITESPACE@9..10 \"\\n\""}, {"sha": "28377c2760ba8dde214ff71b836bb949a554e8be", "filename": "crates/syntax/test_data/parser/inline/ok/0174_unit_struct.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073d5f7733983a59bcfce9cf56fd182893ffc7b0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0174_unit_struct.rs?ref=073d5f7733983a59bcfce9cf56fd182893ffc7b0", "patch": "@@ -0,0 +1 @@\n+struct S;"}]}