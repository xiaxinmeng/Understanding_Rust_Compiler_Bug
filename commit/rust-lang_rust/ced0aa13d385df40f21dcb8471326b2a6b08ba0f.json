{"sha": "ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZDBhYTEzZDM4NWRmNDBmMjFkY2I4NDcxMzI2YjJhNmIwOGJhMGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T00:05:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T00:06:56Z"}, "message": "rustc: Extract driver::diagnostic from syntax::codemap", "tree": {"sha": "05158b52a4a724704fbfc998eed34b5fc34ac7c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05158b52a4a724704fbfc998eed34b5fc34ac7c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "html_url": "https://github.com/rust-lang/rust/commit/ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1e8d2339cfb360c845b7435e97b4f5eb241991", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1e8d2339cfb360c845b7435e97b4f5eb241991", "html_url": "https://github.com/rust-lang/rust/commit/bb1e8d2339cfb360c845b7435e97b4f5eb241991"}], "stats": {"total": 300, "additions": 154, "deletions": 146}, "files": [{"sha": "5a425eb8429000ea8b9d48b741055239bd667a60", "filename": "src/comp/driver/diagnostic.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "patch": "@@ -0,0 +1,137 @@\n+import std::{io, term};\n+import io::writer_util;\n+import syntax::codemap;\n+import codemap::span;\n+\n+export diagnostictype, warning, error, note;\n+export print_diagnostic, emit_warning, emit_error, emit_note;\n+\n+tag diagnostictype {\n+    warning;\n+    error;\n+    note;\n+}\n+\n+fn diagnosticstr(t: diagnostictype) -> str {\n+    alt t {\n+      warning. { \"warning\" }\n+      error. { \"error\" }\n+      note. { \"note\" }\n+    }\n+}\n+\n+fn diagnosticcolor(t: diagnostictype) -> u8 {\n+    alt t {\n+      warning. { term::color_bright_yellow }\n+      error. { term::color_bright_red }\n+      note. { term::color_bright_green }\n+    }\n+}\n+\n+fn print_diagnostic(topic: str, t: diagnostictype, msg: str) {\n+    if str::is_not_empty(topic) {\n+        io::stdout().write_str(#fmt[\"%s \", topic]);\n+    }\n+    if term::color_supported() {\n+        term::fg(io::stdout(), diagnosticcolor(t));\n+    }\n+    io::stdout().write_str(#fmt[\"%s:\", diagnosticstr(t)]);\n+    if term::color_supported() {\n+        term::reset(io::stdout());\n+    }\n+    io::stdout().write_str(#fmt[\" %s\\n\", msg]);\n+}\n+\n+fn emit_diagnostic(cmsp: option<(codemap::codemap, span)>,\n+                   msg: str, t: diagnostictype) {\n+    alt cmsp {\n+      some((cm, sp)) {\n+        let ss = codemap::span_to_str(sp, cm);\n+        let lines = codemap::span_to_lines(sp, cm);\n+        print_diagnostic(ss, t, msg);\n+        highlight_lines(cm, sp, lines);\n+      }\n+      none. {\n+        print_diagnostic(\"\", t, msg);\n+      }\n+    }\n+}\n+\n+fn highlight_lines(cm: codemap::codemap, sp: span,\n+                   lines: @codemap::file_lines) {\n+\n+    // If we're not looking at a real file then we can't re-open it to\n+    // pull out the lines\n+    if lines.name == \"-\" { ret; }\n+\n+    // FIXME: reading in the entire file is the worst possible way to\n+    //        get access to the necessary lines.\n+    let file = alt io::read_whole_file_str(lines.name) {\n+      result::ok(file) { file }\n+      result::err(e) {\n+        emit_error(none, e);\n+        fail;\n+      }\n+    };\n+    let fm = codemap::get_filemap(cm, lines.name);\n+\n+    // arbitrarily only print up to six lines of the error\n+    let max_lines = 6u;\n+    let elided = false;\n+    let display_lines = lines.lines;\n+    if vec::len(display_lines) > max_lines {\n+        display_lines = vec::slice(display_lines, 0u, max_lines);\n+        elided = true;\n+    }\n+    // Print the offending lines\n+    for line: uint in display_lines {\n+        io::stdout().write_str(#fmt[\"%s:%u \", fm.name, line + 1u]);\n+        let s = codemap::get_line(fm, line as int, file);\n+        if !str::ends_with(s, \"\\n\") { s += \"\\n\"; }\n+        io::stdout().write_str(s);\n+    }\n+    if elided {\n+        let last_line = display_lines[vec::len(display_lines) - 1u];\n+        let s = #fmt[\"%s:%u \", fm.name, last_line + 1u];\n+        let indent = str::char_len(s);\n+        let out = \"\";\n+        while indent > 0u { out += \" \"; indent -= 1u; }\n+        out += \"...\\n\";\n+        io::stdout().write_str(out);\n+    }\n+\n+\n+    // If there's one line at fault we can easily point to the problem\n+    if vec::len(lines.lines) == 1u {\n+        let lo = codemap::lookup_char_pos(cm, sp.lo);\n+        let digits = 0u;\n+        let num = (lines.lines[0] + 1u) / 10u;\n+\n+        // how many digits must be indent past?\n+        while num > 0u { num /= 10u; digits += 1u; }\n+\n+        // indent past |name:## | and the 0-offset column location\n+        let left = str::char_len(fm.name) + digits + lo.col + 3u;\n+        let s = \"\";\n+        while left > 0u { str::push_char(s, ' '); left -= 1u; }\n+\n+        s += \"^\";\n+        let hi = codemap::lookup_char_pos(cm, sp.hi);\n+        if hi.col != lo.col {\n+            // the ^ already takes up one space\n+            let width = hi.col - lo.col - 1u;\n+            while width > 0u { str::push_char(s, '~'); width -= 1u; }\n+        }\n+        io::stdout().write_str(s + \"\\n\");\n+    }\n+}\n+\n+fn emit_warning(cmsp: option<(codemap::codemap, span)>, msg: str) {\n+    emit_diagnostic(cmsp, msg, warning);\n+}\n+fn emit_error(cmsp: option<(codemap::codemap, span)>, msg: str) {\n+    emit_diagnostic(cmsp, msg, error);\n+}\n+fn emit_note(cmsp: option<(codemap::codemap, span)>, msg: str) {\n+    emit_diagnostic(cmsp, msg, note);\n+}"}, {"sha": "a2963e7bd91b98d6d9480a4a9dc1f97d7b9ed08d", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "patch": "@@ -580,7 +580,7 @@ fn build_output_filenames(ifile: str,\n }\n \n fn early_error(msg: str) -> ! {\n-    codemap::print_diagnostic(\"\", codemap::error, msg);\n+    diagnostic::print_diagnostic(\"\", diagnostic::error, msg);\n     fail;\n }\n "}, {"sha": "fc8bc444e201d53a72aa0884ea21406a4303e198", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "patch": "@@ -65,19 +65,19 @@ type session = @{targ_cfg: @config,\n \n impl session for session {\n     fn span_fatal(sp: span, msg: str) -> ! {\n-        codemap::emit_error(some((self.parse_sess.cm, sp)), msg);\n+        diagnostic::emit_error(some((self.parse_sess.cm, sp)), msg);\n         fail;\n     }\n     fn fatal(msg: str) -> ! {\n-        codemap::emit_error(none, msg);\n+        diagnostic::emit_error(none, msg);\n         fail;\n     }\n     fn span_err(sp: span, msg: str) {\n-        codemap::emit_error(some((self.parse_sess.cm, sp)), msg);\n+        diagnostic::emit_error(some((self.parse_sess.cm, sp)), msg);\n         self.err_count += 1u;\n     }\n     fn err(msg: str) {\n-        codemap::emit_error(none, msg);\n+        diagnostic::emit_error(none, msg);\n         self.err_count += 1u;\n     }\n     fn has_errors() -> bool { self.err_count > 0u }\n@@ -87,16 +87,16 @@ impl session for session {\n         }\n     }\n     fn span_warn(sp: span, msg: str) {\n-        codemap::emit_warning(some((self.parse_sess.cm, sp)), msg);\n+        diagnostic::emit_warning(some((self.parse_sess.cm, sp)), msg);\n     }\n     fn warn(msg: str) {\n-        codemap::emit_warning(none, msg);\n+        diagnostic::emit_warning(none, msg);\n     }\n     fn span_note(sp: span, msg: str) {\n-        codemap::emit_note(some((self.parse_sess.cm, sp)), msg);\n+        diagnostic::emit_note(some((self.parse_sess.cm, sp)), msg);\n     }\n     fn note(msg: str) {\n-        codemap::emit_note(none, msg);\n+        diagnostic::emit_note(none, msg);\n     }\n     fn span_bug(sp: span, msg: str) -> ! {\n         self.span_fatal(sp, #fmt[\"internal compiler error %s\", msg]);"}, {"sha": "f688be64374b9e4ca59bd2b3dc8c28b3267c2a64", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "patch": "@@ -123,6 +123,7 @@ mod metadata {\n mod driver {\n     mod driver;\n     mod session;\n+    mod diagnostic;\n }\n \n mod util {"}, {"sha": "da5e9d13d8d25ca0c82a5eab7d88e5d7c81eaa13", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "patch": "@@ -1,6 +1,4 @@\n import core::{vec, uint, str, option, result};\n-import std::{term, io};\n-import io::writer_util;\n import option::{some, none};\n \n type filename = str;\n@@ -100,136 +98,6 @@ fn span_to_str(sp: span, cm: codemap) -> str {\n     ret res;\n }\n \n-tag diagnostictype {\n-    warning;\n-    error;\n-    note;\n-}\n-\n-fn diagnosticstr(t: diagnostictype) -> str {\n-    alt t {\n-      warning. { \"warning\" }\n-      error. { \"error\" }\n-      note. { \"note\" }\n-    }\n-}\n-\n-fn diagnosticcolor(t: diagnostictype) -> u8 {\n-    alt t {\n-      warning. { term::color_bright_yellow }\n-      error. { term::color_bright_red }\n-      note. { term::color_bright_green }\n-    }\n-}\n-\n-fn print_diagnostic(topic: str, t: diagnostictype, msg: str) {\n-    if str::is_not_empty(topic) {\n-        io::stdout().write_str(#fmt[\"%s \", topic]);\n-    }\n-    if term::color_supported() {\n-        term::fg(io::stdout(), diagnosticcolor(t));\n-    }\n-    io::stdout().write_str(#fmt[\"%s:\", diagnosticstr(t)]);\n-    if term::color_supported() {\n-        term::reset(io::stdout());\n-    }\n-    io::stdout().write_str(#fmt[\" %s\\n\", msg]);\n-}\n-\n-fn emit_diagnostic(cmsp: option<(codemap, span)>, msg: str,\n-                   t: diagnostictype) {\n-    alt cmsp {\n-      some((cm, sp)) {\n-        let ss = span_to_str(sp, cm);\n-        let lines = span_to_lines(sp, cm);\n-        print_diagnostic(ss, t, msg);\n-        highlight_lines(cm, sp, lines);\n-      }\n-      none. {\n-        print_diagnostic(\"\", t, msg);\n-      }\n-    }\n-}\n-\n-fn highlight_lines(cm: codemap, sp: span,\n-                   lines: @file_lines) {\n-\n-    // If we're not looking at a real file then we can't re-open it to\n-    // pull out the lines\n-    if lines.name == \"-\" { ret; }\n-\n-    // FIXME: reading in the entire file is the worst possible way to\n-    //        get access to the necessary lines.\n-    let file = alt io::read_whole_file_str(lines.name) {\n-      result::ok(file) { file }\n-      result::err(e) {\n-        emit_error(none, e);\n-        fail;\n-      }\n-    };\n-    let fm = get_filemap(cm, lines.name);\n-\n-    // arbitrarily only print up to six lines of the error\n-    let max_lines = 6u;\n-    let elided = false;\n-    let display_lines = lines.lines;\n-    if vec::len(display_lines) > max_lines {\n-        display_lines = vec::slice(display_lines, 0u, max_lines);\n-        elided = true;\n-    }\n-    // Print the offending lines\n-    for line: uint in display_lines {\n-        io::stdout().write_str(#fmt[\"%s:%u \", fm.name, line + 1u]);\n-        let s = get_line(fm, line as int, file);\n-        if !str::ends_with(s, \"\\n\") { s += \"\\n\"; }\n-        io::stdout().write_str(s);\n-    }\n-    if elided {\n-        let last_line = display_lines[vec::len(display_lines) - 1u];\n-        let s = #fmt[\"%s:%u \", fm.name, last_line + 1u];\n-        let indent = str::char_len(s);\n-        let out = \"\";\n-        while indent > 0u { out += \" \"; indent -= 1u; }\n-        out += \"...\\n\";\n-        io::stdout().write_str(out);\n-    }\n-\n-\n-    // If there's one line at fault we can easily point to the problem\n-    if vec::len(lines.lines) == 1u {\n-        let lo = lookup_char_pos(cm, sp.lo);\n-        let digits = 0u;\n-        let num = (lines.lines[0] + 1u) / 10u;\n-\n-        // how many digits must be indent past?\n-        while num > 0u { num /= 10u; digits += 1u; }\n-\n-        // indent past |name:## | and the 0-offset column location\n-        let left = str::char_len(fm.name) + digits + lo.col + 3u;\n-        let s = \"\";\n-        while left > 0u { str::push_char(s, ' '); left -= 1u; }\n-\n-        s += \"^\";\n-        let hi = lookup_char_pos(cm, sp.hi);\n-        if hi.col != lo.col {\n-            // the ^ already takes up one space\n-            let width = hi.col - lo.col - 1u;\n-            while width > 0u { str::push_char(s, '~'); width -= 1u; }\n-        }\n-        io::stdout().write_str(s + \"\\n\");\n-    }\n-}\n-\n-fn emit_warning(cmsp: option<(codemap, span)>, msg: str) {\n-    emit_diagnostic(cmsp, msg, warning);\n-}\n-fn emit_error(cmsp: option<(codemap, span)>, msg: str) {\n-    emit_diagnostic(cmsp, msg, error);\n-}\n-fn emit_note(cmsp: option<(codemap, span)>, msg: str) {\n-    emit_diagnostic(cmsp, msg, note);\n-}\n-\n type file_lines = {name: str, lines: [uint]};\n \n fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {"}, {"sha": "cc0850d88b00f99c50cba7304169e87c0cbf1a50", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "patch": "@@ -6,6 +6,7 @@ import option::{some, none};\n import util::interner;\n import util::interner::intern;\n import codemap;\n+import driver::diagnostic;\n \n type reader = @{\n     cm: codemap::codemap,\n@@ -47,7 +48,7 @@ impl reader for reader {\n         } else { self.curr = -1 as char; }\n     }\n     fn err(m: str) {\n-        codemap::emit_error(\n+        diagnostic::emit_error(\n             some((self.cm, ast_util::mk_sp(self.chpos, self.chpos))), m);\n     }\n }"}, {"sha": "097ac8e7162a1a7aea7ffa493ba9facb3cc3707f", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced0aa13d385df40f21dcb8471326b2a6b08ba0f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=ced0aa13d385df40f21dcb8471326b2a6b08ba0f", "patch": "@@ -10,6 +10,7 @@ import util::interner;\n import ast::{node_id, spanned};\n import front::attr;\n import lexer::reader;\n+import driver::diagnostic;\n \n tag restriction {\n     UNRESTRICTED;\n@@ -71,11 +72,11 @@ impl parser for parser {\n         self.span_fatal(self.span, m);\n     }\n     fn span_fatal(sp: span, m: str) -> ! {\n-        codemap::emit_error(some((self.sess.cm, sp)), m);\n+        diagnostic::emit_error(some((self.sess.cm, sp)), m);\n         fail;\n     }\n     fn warn(m: str) {\n-        codemap::emit_warning(some((self.sess.cm, self.span)), m);\n+        diagnostic::emit_warning(some((self.sess.cm, self.span)), m);\n     }\n     fn get_str(i: token::str_num) -> str {\n         interner::get(*self.reader.interner, i)\n@@ -92,7 +93,7 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n         src\n       }\n       result::err(e) {\n-        codemap::emit_error(none, e);\n+        diagnostic::emit_error(none, e);\n         fail;\n       }\n     };\n@@ -2525,7 +2526,7 @@ fn parse_crate_from_file(input: str, cfg: ast::crate_cfg, sess: parse_sess) ->\n     } else if str::ends_with(input, \".rs\") {\n         parse_crate_from_source_file(input, cfg, sess)\n     } else {\n-        codemap::emit_error(none, \"unknown input file type: \" + input);\n+        diagnostic::emit_error(none, \"unknown input file type: \" + input);\n         fail\n     }\n }"}]}