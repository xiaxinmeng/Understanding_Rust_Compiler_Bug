{"sha": "d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MzA3YTcxZjVlMTg5M2Y3YmQ2OWZmMTYwY2UzOGRjOTdiNWQxOTU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-13T03:06:20Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-13T03:25:51Z"}, "message": "Always show suggestions in their own subwindows", "tree": {"sha": "1f1420c5ef30d71a7778ce0ca140ef27f1e2e75d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f1420c5ef30d71a7778ce0ca140ef27f1e2e75d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "html_url": "https://github.com/rust-lang/rust/commit/d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bce77576964e069833edb1b3b6ca5baa68ae65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bce77576964e069833edb1b3b6ca5baa68ae65e", "html_url": "https://github.com/rust-lang/rust/commit/1bce77576964e069833edb1b3b6ca5baa68ae65e"}], "stats": {"total": 116, "additions": 69, "deletions": 47}, "files": [{"sha": "e176389f0e279a2276b3aa5fe3df98e3e0a78b79", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "patch": "@@ -1061,7 +1061,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 wildcard_sugg = String::from(\", \") + &wildcard_sugg;\n             }\n \n-            err.span_suggestion_short(\n+            err.span_suggestion_verbose(\n                 after_fields_span,\n                 \"use `_` to explicitly ignore each field\",\n                 wildcard_sugg,\n@@ -1071,14 +1071,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Only suggest `..` if more than one field is missing.\n             if fields.len() - subpats.len() > 1 {\n                 if subpats.is_empty() || all_wildcards {\n-                    err.span_suggestion_short(\n+                    err.span_suggestion_verbose(\n                         all_fields_span,\n                         \"use `..` to ignore all fields\",\n                         String::from(\"..\"),\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {\n-                    err.span_suggestion_short(\n+                    err.span_suggestion_verbose(\n                         after_fields_span,\n                         \"use `..` to ignore the rest of the fields\",\n                         String::from(\", ..\"),"}, {"sha": "8c20bb4fb833cce4783f59b6f66a99b7a1231ad7", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure_fail.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr?ref=d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "patch": "@@ -30,10 +30,12 @@ LL | struct TupleStruct<S, T>(S, T);\n    | ------------------------------- tuple struct defined here\n ...\n LL |     TupleStruct(_) = TupleStruct(1, 2);\n-   |     ^^^^^^^^^^^^^-\n-   |     |            |\n-   |     |            help: use `_` to explicitly ignore each field\n-   |     expected 2 fields, found 1\n+   |     ^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     TupleStruct(_, _) = TupleStruct(1, 2);\n+   |                  ^^^\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/tuple_struct_destructure_fail.rs:34:5\n@@ -51,10 +53,12 @@ LL |     SingleVariant(S, T)\n    |     ------------------- tuple variant defined here\n ...\n LL |     Enum::SingleVariant(_) = Enum::SingleVariant(1, 2);\n-   |     ^^^^^^^^^^^^^^^^^^^^^-\n-   |     |                    |\n-   |     |                    help: use `_` to explicitly ignore each field\n-   |     expected 2 fields, found 1\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     Enum::SingleVariant(_, _) = Enum::SingleVariant(1, 2);\n+   |                          ^^^\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/tuple_struct_destructure_fail.rs:40:12"}, {"sha": "832eba69722134f762552a8ab1073de8660d9a29", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "patch": "@@ -5,10 +5,12 @@ LL |     Apple(String, String),\n    |     --------------------- tuple variant defined here\n ...\n LL |         Fruit::Apple(a) => {},\n-   |         ^^^^^^^^^^^^^^-\n-   |         |             |\n-   |         |             help: use `_` to explicitly ignore each field\n-   |         expected 2 fields, found 1\n+   |         ^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         Fruit::Apple(a, _) => {},\n+   |                       ^^^\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/E0023.rs:12:9"}, {"sha": "46ffac48c1bada9bf04152f338ed0ba96b6fd13d", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "patch": "@@ -16,10 +16,12 @@ LL | struct P<T>(T); // 1 type parameter wanted\n    | --------------- tuple struct defined here\n ...\n LL |     let P() = U {};\n-   |         ^^-\n-   |         | |\n-   |         | help: use `_` to explicitly ignore each field\n-   |         expected 1 field, found 0\n+   |         ^^^ expected 1 field, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     let P(_) = U {};\n+   |           ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a1e8ec1677db5feac9cc831ef18a2bf3809030af", "filename": "src/test/ui/issues/issue-72574-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr?ref=d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "patch": "@@ -25,10 +25,12 @@ LL | struct Binder(i32, i32, i32);\n    | ----------------------------- tuple struct defined here\n ...\n LL |         Binder(_a, _x @ ..) => {}\n-   |         ^^^^^^^^^^^^^^^^^^-\n-   |         |                 |\n-   |         |                 help: use `_` to explicitly ignore each field\n-   |         expected 3 fields, found 2\n+   |         ^^^^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         Binder(_a, _x @ .., _) => {}\n+   |                           ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "04f8cab900e1b08d4c75c7b0a636aa9aaa7a62c7", "filename": "src/test/ui/match/match-pattern-field-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr?ref=d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "patch": "@@ -5,10 +5,12 @@ LL |         Rgb(usize, usize, usize),\n    |         ------------------------ tuple variant defined here\n ...\n LL |           Color::Rgb(_, _) => { }\n-   |           ^^^^^^^^^^^^^^^-\n-   |           |              |\n-   |           |              help: use `_` to explicitly ignore each field\n-   |           expected 3 fields, found 2\n+   |           ^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |           Color::Rgb(_, _, _) => { }\n+   |                          ^^^\n \n error: aborting due to previous error\n "}, {"sha": "f7644c19ea0d9cbc3435ef5a65f2beccb0bb2038", "filename": "src/test/ui/pattern/issue-74539.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr?ref=d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "patch": "@@ -25,10 +25,12 @@ LL |     A(u8, u8),\n    |     --------- tuple variant defined here\n ...\n LL |         E::A(x @ ..) => {\n-   |         ^^^^^^^^^^^-\n-   |         |          |\n-   |         |          help: use `_` to explicitly ignore each field\n-   |         expected 2 fields, found 1\n+   |         ^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::A(x @ .., _) => {\n+   |                    ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cdf7cfe30054ddf85c031d50534c1110668a1170", "filename": "src/test/ui/pattern/pat-tuple-underfield.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7307a71f5e1893f7bd69ff160ce38dc97b5d195/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr?ref=d7307a71f5e1893f7bd69ff160ce38dc97b5d195", "patch": "@@ -14,10 +14,12 @@ LL | struct S(i32, f32);\n    | ------------------- tuple struct defined here\n ...\n LL |         S(x) => {}\n-   |         ^^^-\n-   |         |  |\n-   |         |  help: use `_` to explicitly ignore each field\n-   |         expected 2 fields, found 1\n+   |         ^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(x, _) => {}\n+   |            ^^^\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n   --> $DIR/pat-tuple-underfield.rs:14:9\n@@ -26,10 +28,12 @@ LL | struct S(i32, f32);\n    | ------------------- tuple struct defined here\n ...\n LL |         S(_) => {}\n-   |         ^^^-\n-   |         |  |\n-   |         |  help: use `_` to explicitly ignore each field\n-   |         expected 2 fields, found 1\n+   |         ^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(_, _) => {}\n+   |            ^^^\n \n error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n   --> $DIR/pat-tuple-underfield.rs:19:9\n@@ -56,10 +60,12 @@ LL |     S(i32, f32),\n    |     ----------- tuple variant defined here\n ...\n LL |         E::S(x) => {}\n-   |         ^^^^^^-\n-   |         |     |\n-   |         |     help: use `_` to explicitly ignore each field\n-   |         expected 2 fields, found 1\n+   |         ^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S(x, _) => {}\n+   |               ^^^\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n   --> $DIR/pat-tuple-underfield.rs:31:9\n@@ -68,10 +74,12 @@ LL |     S(i32, f32),\n    |     ----------- tuple variant defined here\n ...\n LL |         E::S(_) => {}\n-   |         ^^^^^^-\n-   |         |     |\n-   |         |     help: use `_` to explicitly ignore each field\n-   |         expected 2 fields, found 1\n+   |         ^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S(_, _) => {}\n+   |               ^^^\n \n error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/pat-tuple-underfield.rs:36:9"}]}