{"sha": "6fdeecf62f413171ad9762bb42b2d794eb4f4967", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZGVlY2Y2MmY0MTMxNzFhZDk3NjJiYjQyYjJkNzk0ZWI0ZjQ5Njc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-02-10T15:04:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:17Z"}, "message": "CrateStore: Allow for custom def_id_to_string mappings in encode_type().", "tree": {"sha": "4c9b9ffd55e5ee132ab1f4387ae483b6c6d3824f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c9b9ffd55e5ee132ab1f4387ae483b6c6d3824f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fdeecf62f413171ad9762bb42b2d794eb4f4967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fdeecf62f413171ad9762bb42b2d794eb4f4967", "html_url": "https://github.com/rust-lang/rust/commit/6fdeecf62f413171ad9762bb42b2d794eb4f4967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fdeecf62f413171ad9762bb42b2d794eb4f4967/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a13a46601bb47a470264936b623b4adf706128", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a13a46601bb47a470264936b623b4adf706128", "html_url": "https://github.com/rust-lang/rust/commit/64a13a46601bb47a470264936b623b4adf706128"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "08b87e83a6c4bf1f1466f1cb3a61ab331cacbb25", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=6fdeecf62f413171ad9762bb42b2d794eb4f4967", "patch": "@@ -236,7 +236,11 @@ pub trait CrateStore<'tcx> : Any {\n     // utility functions\n     fn metadata_filename(&self) -> &str;\n     fn metadata_section_name(&self, target: &Target) -> &str;\n-    fn encode_type(&self, tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>;\n+    fn encode_type(&self,\n+                   tcx: &TyCtxt<'tcx>,\n+                   ty: Ty<'tcx>,\n+                   def_id_to_string: fn(&TyCtxt<'tcx>, DefId) -> String)\n+                   -> Vec<u8>;\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>;\n     fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource;\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>;\n@@ -419,8 +423,13 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // utility functions\n     fn metadata_filename(&self) -> &str { unimplemented!() }\n     fn metadata_section_name(&self, target: &Target) -> &str { unimplemented!() }\n-    fn encode_type(&self, tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>\n-        { unimplemented!() }\n+    fn encode_type(&self,\n+                   tcx: &TyCtxt<'tcx>,\n+                   ty: Ty<'tcx>,\n+                   def_id_to_string: fn(&TyCtxt<'tcx>, DefId) -> String)\n+                   -> Vec<u8> {\n+        unimplemented!()\n+    }\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>\n         { vec![] }\n     fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource { unimplemented!() }"}, {"sha": "62318f13a8aa8b0c225fee3f6d10e0ddd91e7bce", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=6fdeecf62f413171ad9762bb42b2d794eb4f4967", "patch": "@@ -478,9 +478,13 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     {\n         loader::meta_section_name(target)\n     }\n-    fn encode_type(&self, tcx: &TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>\n+    fn encode_type(&self,\n+                   tcx: &TyCtxt<'tcx>,\n+                   ty: Ty<'tcx>,\n+                   def_id_to_string: fn(&TyCtxt<'tcx>, DefId) -> String)\n+                   -> Vec<u8>\n     {\n-        encoder::encoded_ty(tcx, ty)\n+        encoder::encoded_ty(tcx, ty, def_id_to_string)\n     }\n \n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>"}, {"sha": "a082b0f21f11bd1384ea56a80ed7f747c2453634", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=6fdeecf62f413171ad9762bb42b2d794eb4f4967", "patch": "@@ -143,7 +143,7 @@ pub fn def_to_u64(did: DefId) -> u64 {\n     (did.krate as u64) << 32 | (did.index.as_usize() as u64)\n }\n \n-pub fn def_to_string(did: DefId) -> String {\n+pub fn def_to_string(_tcx: &TyCtxt, did: DefId) -> String {\n     format!(\"{}:{}\", did.krate, did.index.as_usize())\n }\n \n@@ -2078,11 +2078,14 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n }\n \n // Get the encoded string for a type\n-pub fn encoded_ty<'tcx>(tcx: &TyCtxt<'tcx>, t: Ty<'tcx>) -> Vec<u8> {\n+pub fn encoded_ty<'tcx>(tcx: &TyCtxt<'tcx>,\n+                        t: Ty<'tcx>,\n+                        def_id_to_string: fn(&TyCtxt<'tcx>, DefId) -> String)\n+                        -> Vec<u8> {\n     let mut wr = Cursor::new(Vec::new());\n     tyencode::enc_ty(&mut wr, &tyencode::ctxt {\n         diag: tcx.sess.diagnostic(),\n-        ds: def_to_string,\n+        ds: def_id_to_string,\n         tcx: tcx,\n         abbrevs: &RefCell::new(FnvHashMap())\n     }, t);"}, {"sha": "67e77ba3315c953abd4c823fbf93666086e1fcb3", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=6fdeecf62f413171ad9762bb42b2d794eb4f4967", "patch": "@@ -37,7 +37,7 @@ use encoder;\n pub struct ctxt<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n     // Def -> str Callback:\n-    pub ds: fn(DefId) -> String,\n+    pub ds: fn(&TyCtxt<'tcx>, DefId) -> String,\n     // The type context.\n     pub tcx: &'a TyCtxt<'tcx>,\n     pub abbrevs: &'a abbrev_map<'tcx>\n@@ -99,7 +99,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n             };\n         }\n         ty::TyEnum(def, substs) => {\n-            write!(w, \"t[{}|\", (cx.ds)(def.did));\n+            write!(w, \"t[{}|\", (cx.ds)(cx.tcx, def.did));\n             enc_substs(w, cx, substs);\n             write!(w, \"]\");\n         }\n@@ -137,7 +137,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n         }\n         ty::TyFnDef(def_id, substs, f) => {\n             write!(w, \"F\");\n-            write!(w, \"{}|\", (cx.ds)(def_id));\n+            write!(w, \"{}|\", (cx.ds)(cx.tcx, def_id));\n             enc_substs(w, cx, substs);\n             enc_bare_fn_ty(w, cx, f);\n         }\n@@ -152,12 +152,12 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n             write!(w, \"p[{}|{}|{}]\", idx, space.to_uint(), name);\n         }\n         ty::TyStruct(def, substs) => {\n-            write!(w, \"a[{}|\", (cx.ds)(def.did));\n+            write!(w, \"a[{}|\", (cx.ds)(cx.tcx, def.did));\n             enc_substs(w, cx, substs);\n             write!(w, \"]\");\n         }\n         ty::TyClosure(def, ref substs) => {\n-            write!(w, \"k[{}|\", (cx.ds)(def));\n+            write!(w, \"k[{}|\", (cx.ds)(cx.tcx, def));\n             enc_substs(w, cx, &substs.func_substs);\n             for ty in &substs.upvar_tys {\n                 enc_ty(w, cx, ty);\n@@ -310,7 +310,7 @@ fn enc_bound_region(w: &mut Cursor<Vec<u8>>, cx: &ctxt, br: ty::BoundRegion) {\n         }\n         ty::BrNamed(d, name) => {\n             write!(w, \"[{}|{}]\",\n-                     (cx.ds)(d),\n+                     (cx.ds)(cx.tcx, d),\n                      name);\n         }\n         ty::BrFresh(id) => {\n@@ -324,7 +324,7 @@ fn enc_bound_region(w: &mut Cursor<Vec<u8>>, cx: &ctxt, br: ty::BoundRegion) {\n \n pub fn enc_trait_ref<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,\n                                s: ty::TraitRef<'tcx>) {\n-    write!(w, \"{}|\", (cx.ds)(s.def_id));\n+    write!(w, \"{}|\", (cx.ds)(cx.tcx, s.def_id));\n     enc_substs(w, cx, s.substs);\n }\n \n@@ -408,16 +408,16 @@ pub fn enc_existential_bounds<'a,'tcx>(w: &mut Cursor<Vec<u8>>,\n pub fn enc_type_param_def<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,\n                                     v: &ty::TypeParameterDef<'tcx>) {\n     write!(w, \"{}:{}|{}|{}|{}|\",\n-             v.name, (cx.ds)(v.def_id),\n-             v.space.to_uint(), v.index, (cx.ds)(v.default_def_id));\n+             v.name, (cx.ds)(cx.tcx, v.def_id),\n+             v.space.to_uint(), v.index, (cx.ds)(cx.tcx, v.default_def_id));\n     enc_opt(w, v.default, |w, t| enc_ty(w, cx, t));\n     enc_object_lifetime_default(w, cx, v.object_lifetime_default);\n }\n \n pub fn enc_region_param_def(w: &mut Cursor<Vec<u8>>, cx: &ctxt,\n                             v: &ty::RegionParameterDef) {\n     write!(w, \"{}:{}|{}|{}|\",\n-             v.name, (cx.ds)(v.def_id),\n+             v.name, (cx.ds)(cx.tcx, v.def_id),\n              v.space.to_uint(), v.index);\n     for &r in &v.bounds {\n         write!(w, \"R\");\n@@ -477,7 +477,7 @@ pub fn enc_predicate<'a, 'tcx>(w: &mut Cursor<Vec<u8>>,\n             enc_ty(w, cx, data);\n         }\n         ty::Predicate::ObjectSafe(trait_def_id) => {\n-            write!(w, \"O{}|\", (cx.ds)(trait_def_id));\n+            write!(w, \"O{}|\", (cx.ds)(cx.tcx, trait_def_id));\n         }\n     }\n }"}, {"sha": "20fc74caad9f19f761b5ada6be737d248fd07279", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdeecf62f413171ad9762bb42b2d794eb4f4967/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=6fdeecf62f413171ad9762bb42b2d794eb4f4967", "patch": "@@ -22,6 +22,7 @@ use session::search_paths::PathKind;\n use session::Session;\n use middle::cstore::{self, CrateStore, LinkMeta};\n use middle::cstore::{LinkagePreference, NativeLibraryKind};\n+use middle::def_id::DefId;\n use middle::dependency_format::Linkage;\n use middle::ty::{Ty, TyCtxt};\n use rustc::front::map::DefPath;\n@@ -200,6 +201,9 @@ fn truncated_hash_result(symbol_hasher: &mut Sha256) -> String {\n     output[.. 8].to_hex().to_string()\n }\n \n+pub fn def_to_string(_tcx: &ty::ctxt, did: DefId) -> String {\n+    format!(\"{}:{}\", did.krate, did.index.as_usize())\n+}\n \n // This calculates STH for a symbol, as defined above\n fn symbol_hash<'tcx>(tcx: &TyCtxt<'tcx>,\n@@ -218,7 +222,7 @@ fn symbol_hash<'tcx>(tcx: &TyCtxt<'tcx>,\n         symbol_hasher.input_str(&meta[..]);\n     }\n     symbol_hasher.input_str(\"-\");\n-    symbol_hasher.input(&tcx.sess.cstore.encode_type(tcx, t));\n+    symbol_hasher.input(&tcx.sess.cstore.encode_type(tcx, t, def_to_string));\n     // Prefix with 'h' so that it never blends into adjacent digits\n     let mut hash = String::from(\"h\");\n     hash.push_str(&truncated_hash_result(symbol_hasher));"}]}