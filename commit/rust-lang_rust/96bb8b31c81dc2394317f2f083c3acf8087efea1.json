{"sha": "96bb8b31c81dc2394317f2f083c3acf8087efea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmI4YjMxYzgxZGMyMzk0MzE3ZjJmMDgzYzNhY2Y4MDg3ZWZlYTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-05T17:46:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-05T17:46:58Z"}, "message": "Auto merge of #67260 - TheSamsa:const-limit, r=oli-obk\n\nconst limit for CTFE\n\nI tried to tackle the first steps for this issue.\nThe active feature flag does link to the issue below, I think this has to change, because there should be a tracking issue?\nhttps://github.com/TheSamsa/rust/blob/1679a7647da0de672bac26b716db82d16f3896a8/src/librustc_feature/active.rs#L530\n\nAlso, I only put up the storage of the limit like \"recursion_limit\" but created a seperate file in the same place. Since I guess the invocation happens seperately.\nhttps://github.com/TheSamsa/rust/blob/const-limit/src/librustc/middle/const_limit.rs\n\nIf this does not hold up for the issue and since there is a time pressure, just reject it.\n\nhopefully this does not put more load on you than I expected...", "tree": {"sha": "88176218be713c7786c332a5ab3d7980322c764c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88176218be713c7786c332a5ab3d7980322c764c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96bb8b31c81dc2394317f2f083c3acf8087efea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96bb8b31c81dc2394317f2f083c3acf8087efea1", "html_url": "https://github.com/rust-lang/rust/commit/96bb8b31c81dc2394317f2f083c3acf8087efea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96bb8b31c81dc2394317f2f083c3acf8087efea1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c79f5f064725535f7520e693e69c65c3d0f2730f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c79f5f064725535f7520e693e69c65c3d0f2730f", "html_url": "https://github.com/rust-lang/rust/commit/c79f5f064725535f7520e693e69c65c3d0f2730f"}, {"sha": "527456e219d1d898eee53b2d0e29cdb296c7bab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/527456e219d1d898eee53b2d0e29cdb296c7bab8", "html_url": "https://github.com/rust-lang/rust/commit/527456e219d1d898eee53b2d0e29cdb296c7bab8"}], "stats": {"total": 197, "additions": 163, "deletions": 34}, "files": [{"sha": "df68e83bcac744e1b5fd4fa99f3b058955b81f99", "filename": "src/doc/unstable-book/src/language-features/const-eval-limit.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -0,0 +1,7 @@\n+# `const_eval_limit`\n+\n+The tracking issue for this feature is: [#67217]\n+\n+[#67217]: https://github.com/rust-lang/rust/issues/67217\n+\n+The `const_eval_limit` allows someone to limit the evaluation steps the CTFE undertakes to evaluate a `const fn`."}, {"sha": "22e4f5ea222617ba2d1a158bb88a6e13f4bcdb28", "filename": "src/librustc/middle/limits.rs", "status": "renamed", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flimits.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -1,9 +1,9 @@\n-// Recursion limit.\n-//\n-// There are various parts of the compiler that must impose arbitrary limits\n-// on how deeply they recurse to prevent stack overflow. Users can override\n-// this via an attribute on the crate like `#![recursion_limit=\"22\"]`. This pass\n-// just peeks and looks for that attribute.\n+//! Registering limits, recursion_limit, type_length_limit and const_eval_limit\n+//!\n+//! There are various parts of the compiler that must impose arbitrary limits\n+//! on how deeply they recurse to prevent stack overflow. Users can override\n+//! this via an attribute on the crate like `#![recursion_limit=\"22\"]`. This pass\n+//! just peeks and looks for that attribute.\n \n use crate::session::Session;\n use core::num::IntErrorKind;\n@@ -16,6 +16,7 @@ use rustc_data_structures::sync::Once;\n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n     update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);\n     update_limit(sess, krate, &sess.type_length_limit, sym::type_length_limit, 1048576);\n+    update_limit(sess, krate, &sess.const_eval_limit, sym::const_eval_limit, 1_000_000);\n }\n \n fn update_limit(\n@@ -37,10 +38,8 @@ fn update_limit(\n                     return;\n                 }\n                 Err(e) => {\n-                    let mut err = sess.struct_span_err(\n-                        attr.span,\n-                        \"`recursion_limit` must be a non-negative integer\",\n-                    );\n+                    let mut err =\n+                        sess.struct_span_err(attr.span, \"`limit` must be a non-negative integer\");\n \n                     let value_span = attr\n                         .meta()\n@@ -49,11 +48,11 @@ fn update_limit(\n                         .unwrap_or(attr.span);\n \n                     let error_str = match e.kind() {\n-                        IntErrorKind::Overflow => \"`recursion_limit` is too large\",\n-                        IntErrorKind::Empty => \"`recursion_limit` must be a non-negative integer\",\n+                        IntErrorKind::Overflow => \"`limit` is too large\",\n+                        IntErrorKind::Empty => \"`limit` must be a non-negative integer\",\n                         IntErrorKind::InvalidDigit => \"not a valid integer\",\n-                        IntErrorKind::Underflow => bug!(\"`recursion_limit` should never underflow\"),\n-                        IntErrorKind::Zero => bug!(\"zero is a valid `recursion_limit`\"),\n+                        IntErrorKind::Underflow => bug!(\"`limit` should never underflow\"),\n+                        IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),\n                         kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n                     };\n ", "previous_filename": "src/librustc/middle/recursion_limit.rs"}, {"sha": "464488964afb7b3c17e1c1b1054155d97472b2b0", "filename": "src/librustc/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmod.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -28,8 +28,8 @@ pub mod lib_features {\n         }\n     }\n }\n+pub mod limits;\n pub mod privacy;\n-pub mod recursion_limit;\n pub mod region;\n pub mod resolve_lifetime;\n pub mod stability;"}, {"sha": "6517a22701b0e8ea312c31f644d73fcefe268ab7", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -552,6 +552,9 @@ declare_features! (\n     /// Allows the use of `no_sanitize` attribute.\n     (active, no_sanitize, \"1.42.0\", Some(39699), None),\n \n+    // Allows limiting the evaluation steps of const expressions\n+    (active, const_eval_limit, \"1.43.0\", Some(67217), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "c140adf64d511905952684842cd0e43c864ac3d7", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -239,6 +239,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Limits:\n     ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\")),\n     ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    gated!(\n+        const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), const_eval_limit,\n+        experimental!(const_eval_limit)\n+    ),\n \n     // Entry point:\n     ungated!(main, Normal, template!(Word)),"}, {"sha": "29e9ea1833f8e4f08a284b5626c68cf2990ba2a3", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -189,7 +189,7 @@ pub fn register_plugins<'a>(\n     }\n \n     sess.time(\"recursion_limit\", || {\n-        middle::recursion_limit::update_limits(sess, &krate);\n+        middle::limits::update_limits(sess, &krate);\n     });\n \n     let mut lint_store = rustc_lint::new_lint_store("}, {"sha": "1bf748e66e2a04c90b756594e5cfe8ba9bbd7b22", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -89,7 +89,7 @@ pub(super) fn mk_eval_cx<'mir, 'tcx>(\n     InterpCx::new(\n         tcx.at(span),\n         param_env,\n-        CompileTimeInterpreter::new(),\n+        CompileTimeInterpreter::new(*tcx.sess.const_eval_limit.get()),\n         MemoryExtra { can_access_statics },\n     )\n }\n@@ -297,7 +297,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     let mut ecx = InterpCx::new(\n         tcx.at(span),\n         key.param_env,\n-        CompileTimeInterpreter::new(),\n+        CompileTimeInterpreter::new(*tcx.sess.const_eval_limit.get()),\n         MemoryExtra { can_access_statics: is_static },\n     );\n "}, {"sha": "ed8029834680c2c84710ad183439cf42142e7b99", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -3,6 +3,7 @@ use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::{self, Ty};\n use std::borrow::{Borrow, Cow};\n use std::collections::hash_map::Entry;\n+use std::convert::TryFrom;\n use std::hash::Hash;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -85,9 +86,6 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n     }\n }\n \n-/// Number of steps until the detector even starts doing anything.\n-/// Also, a warning is shown to the user when this number is reached.\n-const STEPS_UNTIL_DETECTOR_ENABLED: isize = 1_000_000;\n /// The number of steps between loop detector snapshots.\n /// Should be a power of two for performance reasons.\n const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n@@ -100,6 +98,8 @@ pub struct CompileTimeInterpreter<'mir, 'tcx> {\n     /// detector period.\n     pub(super) steps_since_detector_enabled: isize,\n \n+    pub(super) is_detector_enabled: bool,\n+\n     /// Extra state to detect loops.\n     pub(super) loop_detector: snapshot::InfiniteLoopDetector<'mir, 'tcx>,\n }\n@@ -111,10 +111,14 @@ pub struct MemoryExtra {\n }\n \n impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n-    pub(super) fn new() -> Self {\n+    pub(super) fn new(const_eval_limit: usize) -> Self {\n+        let steps_until_detector_enabled =\n+            isize::try_from(const_eval_limit).unwrap_or(std::isize::MAX);\n+\n         CompileTimeInterpreter {\n             loop_detector: Default::default(),\n-            steps_since_detector_enabled: -STEPS_UNTIL_DETECTOR_ENABLED,\n+            steps_since_detector_enabled: -steps_until_detector_enabled,\n+            is_detector_enabled: const_eval_limit != 0,\n         }\n     }\n }\n@@ -343,6 +347,10 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+        if !ecx.machine.is_detector_enabled {\n+            return Ok(());\n+        }\n+\n         {\n             let steps = &mut ecx.machine.steps_since_detector_enabled;\n "}, {"sha": "173b120e1f6d7d632acd5496c86dc0ce7949d8cf", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -88,6 +88,9 @@ pub struct Session {\n     /// The maximum length of types during monomorphization.\n     pub type_length_limit: Once<usize>,\n \n+    /// The maximum blocks a const expression can evaluate.\n+    pub const_eval_limit: Once<usize>,\n+\n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n     /// macro name and definition span in the source crate.\n@@ -1053,6 +1056,7 @@ fn build_session_(\n         features: Once::new(),\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n+        const_eval_limit: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,"}, {"sha": "c39f9f360c0271771cfc0b4198db1bd80d696176", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -208,6 +208,7 @@ symbols! {\n         console,\n         const_compare_raw_pointers,\n         const_constructor,\n+        const_eval_limit,\n         const_extern_fn,\n         const_fn,\n         const_fn_union,"}, {"sha": "4ed908312fb6dcc11a58fb72d96b7f5bd9b98780", "filename": "src/test/ui/consts/const_limit/const_eval_limit_not_reached.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![feature(const_eval_limit)]\n+#![const_eval_limit=\"1000\"]\n+\n+const CONSTANT: usize = limit();\n+\n+fn main() {\n+    assert_eq!(CONSTANT, 1764);\n+}\n+\n+const fn limit() -> usize {\n+    let x = 42;\n+\n+    x * 42\n+}"}, {"sha": "1c49593cd53fa399bc8d6451b60d70e13825b3c5", "filename": "src/test/ui/consts/const_limit/const_eval_limit_overflow.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_eval_limit)]\n+#![const_eval_limit=\"18_446_744_073_709_551_615\"]\n+//~^ ERROR `limit` must be a non-negative integer\n+\n+const CONSTANT: usize = limit();\n+\n+fn main() {\n+    assert_eq!(CONSTANT, 1764);\n+}\n+\n+const fn limit() -> usize {\n+    let x = 42;\n+\n+    x * 42\n+}"}, {"sha": "7f5d5e6cd4c5ac07714a5d2a977d89dbbbc0506d", "filename": "src/test/ui/consts/const_limit/const_eval_limit_overflow.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -0,0 +1,10 @@\n+error: `limit` must be a non-negative integer\n+  --> $DIR/const_eval_limit_overflow.rs:2:1\n+   |\n+LL | #![const_eval_limit=\"18_446_744_073_709_551_615\"]\n+   | ^^^^^^^^^^^^^^^^^^^^----------------------------^\n+   |                     |\n+   |                     not a valid integer\n+\n+error: aborting due to previous error\n+"}, {"sha": "d962398d4136e7d04517191b3cb8cf42f5bbc8f4", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+// only-x86_64\n+// check-pass\n+// NOTE: We always compile this test with -Copt-level=0 because higher opt-levels\n+//       optimize away the const function\n+// compile-flags:-Copt-level=0\n+#![feature(const_eval_limit)]\n+#![const_eval_limit=\"2\"]\n+\n+const CONSTANT: usize = limit();\n+//~^ WARNING Constant evaluating a complex constant, this might take some time\n+\n+fn main() {\n+    assert_eq!(CONSTANT, 1764);\n+}\n+\n+const fn limit() -> usize { //~ WARNING Constant evaluating a complex constant, this might take some time\n+    let x = 42;\n+\n+    x * 42\n+}"}, {"sha": "e0871ff718561f9d8220ed0dea4da6166844cfa3", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -0,0 +1,16 @@\n+warning: Constant evaluating a complex constant, this might take some time\n+  --> $DIR/const_eval_limit_reached.rs:17:1\n+   |\n+LL | / const fn limit() -> usize {\n+LL | |     let x = 42;\n+LL | |\n+LL | |     x * 42\n+LL | | }\n+   | |_^\n+\n+warning: Constant evaluating a complex constant, this might take some time\n+  --> $DIR/const_eval_limit_reached.rs:10:1\n+   |\n+LL | const CONSTANT: usize = limit();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "61119d7511d49262fc41355eea7720d7155d9eb4", "filename": "src/test/ui/consts/const_limit/feature-gate-const_eval_limit.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -0,0 +1,14 @@\n+#![const_eval_limit=\"42\"]\n+//~^ ERROR the `#[const_eval_limit]` attribute is an experimental feature [E0658]\n+\n+const CONSTANT: usize = limit();\n+\n+fn main() {\n+    assert_eq!(CONSTANT, 1764);\n+}\n+\n+const fn limit() -> usize {\n+    let x = 42;\n+\n+    x * 42\n+}"}, {"sha": "5bd29c7dfd22b8f116a5119e53ed15fa871c6543", "filename": "src/test/ui/consts/const_limit/feature-gate-const_eval_limit.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[const_eval_limit]` attribute is an experimental feature\n+  --> $DIR/feature-gate-const_eval_limit.rs:1:1\n+   |\n+LL | #![const_eval_limit=\"42\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #67217 <https://github.com/rust-lang/rust/issues/67217> for more information\n+   = help: add `#![feature(const_eval_limit)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "31ff9c1e3a72e0290f17e6162597d6b15b6bf1e2", "filename": "src/test/ui/recursion_limit/empty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -1,6 +1,6 @@\n // Test the parse error for an empty recursion_limit\n \n-#![recursion_limit = \"\"] //~ ERROR `recursion_limit` must be a non-negative integer\n-                         //~| `recursion_limit` must be a non-negative integer\n+#![recursion_limit = \"\"] //~ ERROR `limit` must be a non-negative integer\n+                         //~| `limit` must be a non-negative integer\n \n fn main() {}"}, {"sha": "bcd1d27e59b56be8926ceaa16a36d7dbb0b28422", "filename": "src/test/ui/recursion_limit/empty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -1,10 +1,10 @@\n-error: `recursion_limit` must be a non-negative integer\n+error: `limit` must be a non-negative integer\n   --> $DIR/empty.rs:3:1\n    |\n LL | #![recursion_limit = \"\"]\n    | ^^^^^^^^^^^^^^^^^^^^^--^\n    |                      |\n-   |                      `recursion_limit` must be a non-negative integer\n+   |                      `limit` must be a non-negative integer\n \n error: aborting due to previous error\n "}, {"sha": "759d69d0af20d08e33fa25f736b45d46c97da6ef", "filename": "src/test/ui/recursion_limit/invalid_digit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -1,6 +1,6 @@\n // Test the parse error for an invalid digit in recursion_limit\n \n-#![recursion_limit = \"-100\"] //~ ERROR `recursion_limit` must be a non-negative integer\n+#![recursion_limit = \"-100\"] //~ ERROR `limit` must be a non-negative integer\n                              //~| not a valid integer\n \n fn main() {}"}, {"sha": "e6fd6b72a0900e04013f6db6d2c5600ce1ca7e18", "filename": "src/test/ui/recursion_limit/invalid_digit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -1,4 +1,4 @@\n-error: `recursion_limit` must be a non-negative integer\n+error: `limit` must be a non-negative integer\n   --> $DIR/invalid_digit.rs:3:1\n    |\n LL | #![recursion_limit = \"-100\"]"}, {"sha": "8eee2792b23832cf6d5a6528a0bf67df474a6c8d", "filename": "src/test/ui/recursion_limit/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -1,7 +1,7 @@\n // Test the parse error for an overflowing recursion_limit\n \n #![recursion_limit = \"999999999999999999999999\"]\n-//~^ ERROR `recursion_limit` must be a non-negative integer\n-//~| `recursion_limit` is too large\n+//~^ ERROR `limit` must be a non-negative integer\n+//~| `limit` is too large\n \n fn main() {}"}, {"sha": "f6ed76c1ebc0e096facf4431f9edfefd65331fcf", "filename": "src/test/ui/recursion_limit/overflow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -1,10 +1,10 @@\n-error: `recursion_limit` must be a non-negative integer\n+error: `limit` must be a non-negative integer\n   --> $DIR/overflow.rs:3:1\n    |\n LL | #![recursion_limit = \"999999999999999999999999\"]\n    | ^^^^^^^^^^^^^^^^^^^^^--------------------------^\n    |                      |\n-   |                      `recursion_limit` is too large\n+   |                      `limit` is too large\n \n error: aborting due to previous error\n "}, {"sha": "eb95d7babc6b213a00cd7aa4641568bb38ca5bb0", "filename": "src/test/ui/recursion_limit/zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bb8b31c81dc2394317f2f083c3acf8087efea1/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs?ref=96bb8b31c81dc2394317f2f083c3acf8087efea1", "patch": "@@ -1,4 +1,4 @@\n-// Test that a `recursion_limit` of 0 is valid\n+// Test that a `limit` of 0 is valid\n \n #![recursion_limit = \"0\"]\n "}]}