{"sha": "2fb0e8d162a021f8a795fb603f5d8c0017855160", "node_id": "C_kwDOAAsO6NoAKDJmYjBlOGQxNjJhMDIxZjhhNzk1ZmI2MDNmNWQ4YzAwMTc4NTUxNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T21:57:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T21:57:11Z"}, "message": "Auto merge of #109734 - matthiaskrgr:rollup-oy4nlli, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #107387 (Use random `HashMap` keys on Hermit)\n - #109511 (Make `EvalCtxt`'s `infcx` private)\n - #109554 (Suggest ..= when someone tries to create an overflowing range)\n - #109675 (Do not consider elaborated projection predicates for objects in new solver)\n - #109693 (Remove ~const from alloc)\n - #109700 (Lint against escape sequences in Fluent files)\n - #109716 (Move `mir::Field` \u2192 `abi::FieldIdx`)\n - #109726 (rustdoc: Don't strip crate module)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9bff7eab583aa5f93f7186c4a891b9e3d3032c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bff7eab583aa5f93f7186c4a891b9e3d3032c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb0e8d162a021f8a795fb603f5d8c0017855160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb0e8d162a021f8a795fb603f5d8c0017855160", "html_url": "https://github.com/rust-lang/rust/commit/2fb0e8d162a021f8a795fb603f5d8c0017855160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb0e8d162a021f8a795fb603f5d8c0017855160/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c11672167827b0dd92c88ef69f24346d1286dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c11672167827b0dd92c88ef69f24346d1286dd", "html_url": "https://github.com/rust-lang/rust/commit/17c11672167827b0dd92c88ef69f24346d1286dd"}, {"sha": "02cb4da8969ba2d9f2879df33fc13fce83012ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/02cb4da8969ba2d9f2879df33fc13fce83012ed7", "html_url": "https://github.com/rust-lang/rust/commit/02cb4da8969ba2d9f2879df33fc13fce83012ed7"}], "stats": {"total": 814, "additions": 516, "deletions": 298}, "files": [{"sha": "428191bc8b93477ec3de63c46f6d6bc92881354b", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -1057,6 +1057,32 @@ impl Scalar {\n     }\n }\n \n+rustc_index::newtype_index! {\n+    /// The *source-order* index of a field in a variant.\n+    ///\n+    /// This is how most code after type checking refers to fields, rather than\n+    /// using names (as names have hygiene complications and more complex lookup).\n+    ///\n+    /// Particularly for `repr(Rust)` types, this may not be the same as *layout* order.\n+    /// (It is for `repr(C)` `struct`s, however.)\n+    ///\n+    /// For example, in the following types,\n+    /// ```rust\n+    /// # enum Never {}\n+    /// # #[repr(u16)]\n+    /// enum Demo1 {\n+    ///    Variant0 { a: Never, b: i32 } = 100,\n+    ///    Variant1 { c: u8, d: u64 } = 10,\n+    /// }\n+    /// struct Demo2 { e: u8, f: u16, g: u8 }\n+    /// ```\n+    /// `b` is `FieldIdx(1)` in `VariantIdx(0)`,\n+    /// `d` is `FieldIdx(1)` in `VariantIdx(1)`, and\n+    /// `f` is `FieldIdx(1)` in `VariantIdx(0)`.\n+    #[derive(HashStable_Generic)]\n+    pub struct FieldIdx {}\n+}\n+\n /// Describes how the fields of a type are located in memory.\n #[derive(PartialEq, Eq, Hash, Clone, Debug)]\n #[cfg_attr(feature = \"nightly\", derive(HashStable_Generic))]"}, {"sha": "5827fa81cffb55e39673a2309c852f93c84d7195", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -9,15 +9,15 @@ use rustc_hir::GeneratorKind;\n use rustc_infer::infer::{LateBoundRegionConversionTime, TyCtxtInferExt};\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{\n-    AggregateKind, Constant, FakeReadCause, Field, Local, LocalInfo, LocalKind, Location, Operand,\n-    Place, PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n+    AggregateKind, Constant, FakeReadCause, Local, LocalInfo, LocalKind, Location, Operand, Place,\n+    PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{symbol::sym, Span, Symbol, DUMMY_SP};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n     type_known_to_meet_bound_modulo_regions, Obligation, ObligationCause,\n@@ -302,7 +302,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn describe_field(\n         &self,\n         place: PlaceRef<'tcx>,\n-        field: Field,\n+        field: FieldIdx,\n         including_tuple_field: IncludingTupleField,\n     ) -> Option<String> {\n         let place_ty = match place {\n@@ -331,7 +331,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn describe_field_from_ty(\n         &self,\n         ty: Ty<'_>,\n-        field: Field,\n+        field: FieldIdx,\n         variant_index: Option<VariantIdx>,\n         including_tuple_field: IncludingTupleField,\n     ) -> Option<String> {"}, {"sha": "9d90400965040efecda0a07f5914f72c50002d15", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::{\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{sym, BytePos, Span};\n+use rustc_target::abi::FieldIdx;\n \n use crate::diagnostics::BorrowedContentSource;\n use crate::MirBorrowckCtxt;\n@@ -1275,7 +1276,7 @@ fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n fn get_mut_span_in_struct_field<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n-    field: mir::Field,\n+    field: FieldIdx,\n ) -> Option<Span> {\n     // Expect our local to be a reference to a struct of some kind.\n     if let ty::Ref(_, ty, _) = ty.kind()"}, {"sha": "2f64ccee686a870ef3f574a95e64b63392eb5df1", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -33,12 +33,13 @@ use rustc_middle::mir::{\n     Place, PlaceElem, PlaceRef, VarDebugInfoContents,\n };\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n-use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n+use rustc_middle::mir::{ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, CapturedPlace, ParamEnv, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::UNUSED_MUT;\n use rustc_span::{Span, Symbol};\n+use rustc_target::abi::FieldIdx;\n \n use either::Either;\n use smallvec::SmallVec;\n@@ -597,7 +598,7 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n     used_mut: FxIndexSet<Local>,\n     /// If the function we're checking is a closure, then we'll need to report back the list of\n     /// mutable upvars that have been used. This field keeps track of them.\n-    used_mut_upvars: SmallVec<[Field; 8]>,\n+    used_mut_upvars: SmallVec<[FieldIdx; 8]>,\n     /// Region inference context. This contains the results from region inference and lets us e.g.\n     /// find out which CFG points are contained in each borrow region.\n     regioncx: Rc<RegionInferenceContext<'tcx>>,\n@@ -2277,7 +2278,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// then returns the index of the field being projected. Note that this closure will always\n     /// be `self` in the current MIR, because that is the only time we directly access the fields\n     /// of a closure type.\n-    fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n+    fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<FieldIdx> {\n         path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())\n     }\n "}, {"sha": "ea9f8683ca7bbb24e50c5916a913c0335890b5f9", "filename": "compiler/rustc_borrowck/src/path_utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -7,8 +7,9 @@ use crate::BorrowIndex;\n use crate::Upvar;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::BorrowKind;\n-use rustc_middle::mir::{BasicBlock, Body, Field, Location, Place, PlaceRef, ProjectionElem};\n+use rustc_middle::mir::{BasicBlock, Body, Location, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::TyCtxt;\n+use rustc_target::abi::FieldIdx;\n \n /// Returns `true` if the borrow represented by `kind` is\n /// allowed to be split into separate Reservation and\n@@ -148,7 +149,7 @@ pub(crate) fn is_upvar_field_projection<'tcx>(\n     upvars: &[Upvar<'tcx>],\n     place_ref: PlaceRef<'tcx>,\n     body: &Body<'tcx>,\n-) -> Option<Field> {\n+) -> Option<FieldIdx> {\n     let mut place_ref = place_ref;\n     let mut by_ref = false;\n "}, {"sha": "04da6d6beff680d675111af3396868b260ec2fb9", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -36,7 +36,7 @@ use rustc_middle::ty::{\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::FIRST_VARIANT;\n+use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n@@ -786,7 +786,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         &mut self,\n         parent: &dyn fmt::Debug,\n         base_ty: PlaceTy<'tcx>,\n-        field: Field,\n+        field: FieldIdx,\n         location: Location,\n     ) -> Result<Ty<'tcx>, FieldAccessError> {\n         let tcx = self.tcx();"}, {"sha": "91c085d3d698684b0d2b4cbd13c84ba9d063256b", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -327,7 +327,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n             ArgKind::Spread(params) => {\n                 for (i, param) in params.into_iter().enumerate() {\n                     if let Some(param) = param {\n-                        place.place_field(fx, mir::Field::new(i)).write_cvalue(fx, param);\n+                        place.place_field(fx, FieldIdx::new(i)).write_cvalue(fx, param);\n                     }\n                 }\n             }\n@@ -460,7 +460,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         args.push(self_arg);\n         for i in 0..tupled_arguments.len() {\n             args.push(CallArgument {\n-                value: pack_arg.value.value_field(fx, mir::Field::new(i)),\n+                value: pack_arg.value.value_field(fx, FieldIdx::new(i)),\n                 is_owned: pack_arg.is_owned,\n             });\n         }"}, {"sha": "615ef58ff582922a740b6e834ba839125719668c", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -797,7 +797,7 @@ fn codegen_stmt<'tcx>(\n                             let index = fx.bcx.ins().iconst(fx.pointer_type, field_index as i64);\n                             variant_dest.place_index(fx, index)\n                         } else {\n-                            variant_dest.place_field(fx, mir::Field::new(field_index))\n+                            variant_dest.place_field(fx, FieldIdx::new(field_index))\n                         };\n                         to.write_cvalue(fx, operand);\n                     }"}, {"sha": "f740945a03c31578b8b025a062288d44d9ea6a16", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             tag_encoding: TagEncoding::Direct,\n             variants: _,\n         } => {\n-            let ptr = place.place_field(fx, mir::Field::new(tag_field));\n+            let ptr = place.place_field(fx, FieldIdx::new(tag_field));\n             let to = layout.ty.discriminant_for_variant(fx.tcx, variant_index).unwrap().val;\n             let to = if ptr.layout().abi.is_signed() {\n                 ty::ScalarInt::try_from_int(\n@@ -47,7 +47,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             variants: _,\n         } => {\n             if variant_index != untagged_variant {\n-                let niche = place.place_field(fx, mir::Field::new(tag_field));\n+                let niche = place.place_field(fx, FieldIdx::new(tag_field));\n                 let niche_type = fx.clif_type(niche.layout().ty).unwrap();\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = (niche_value as u128).wrapping_add(niche_start);\n@@ -107,7 +107,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n     let cast_to = fx.clif_type(dest_layout.ty).unwrap();\n \n     // Read the tag/niche-encoded discriminant from memory.\n-    let tag = value.value_field(fx, mir::Field::new(tag_field));\n+    let tag = value.value_field(fx, FieldIdx::new(tag_field));\n     let tag = tag.load_scalar(fx);\n \n     // Decode the discriminant (specifically if it's niche-encoded)."}, {"sha": "0f32d1a25ffade75762b0c7b39f5cbbfcb411089", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -179,8 +179,8 @@ fn llvm_add_sub<'tcx>(\n \n     // c + carry -> c + first intermediate carry or borrow respectively\n     let int0 = crate::num::codegen_checked_int_binop(fx, bin_op, a, b);\n-    let c = int0.value_field(fx, mir::Field::new(0));\n-    let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n+    let c = int0.value_field(fx, FieldIdx::new(0));\n+    let cb0 = int0.value_field(fx, FieldIdx::new(1)).load_scalar(fx);\n \n     // c + carry -> c + second intermediate carry or borrow respectively\n     let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);"}, {"sha": "6f54a8d49c8674d8b320d72b0ae84fa0a5387505", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -253,7 +253,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n \n             ret.write_cvalue(fx, base);\n-            let ret_lane = ret.place_field(fx, mir::Field::new(idx.try_into().unwrap()));\n+            let ret_lane = ret.place_field(fx, FieldIdx::new(idx.try_into().unwrap()));\n             ret_lane.write_cvalue(fx, val);\n         }\n "}, {"sha": "8cc7f6c34b021ac8d7c9c06e166693228633f425", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, TypeVisitableExt, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx, FIRST_VARIANT};\n+    pub(crate) use rustc_target::abi::{Abi, FieldIdx, Scalar, Size, VariantIdx, FIRST_VARIANT};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "ff0e12410e7031498d13b61e02bc1e3525401055", "filename": "compiler/rustc_codegen_cranelift/src/unsize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -147,8 +147,8 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n             assert_eq!(def_a, def_b);\n \n             for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n-                let src_f = src.value_field(fx, mir::Field::new(i));\n-                let dst_f = dst.place_field(fx, mir::Field::new(i));\n+                let src_f = src.value_field(fx, FieldIdx::new(i));\n+                let dst_f = dst.place_field(fx, FieldIdx::new(i));\n \n                 if dst_f.layout().is_zst() {\n                     continue;"}, {"sha": "ffe3ccb0eca0471099879d1fc9f8880a11320d5c", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -10,7 +10,7 @@ fn codegen_field<'tcx>(\n     base: Pointer,\n     extra: Option<Value>,\n     layout: TyAndLayout<'tcx>,\n-    field: mir::Field,\n+    field: FieldIdx,\n ) -> (Pointer, TyAndLayout<'tcx>) {\n     let field_offset = layout.fields.offset(field.index());\n     let field_layout = layout.field(&*fx, field.index());\n@@ -210,7 +210,7 @@ impl<'tcx> CValue<'tcx> {\n     pub(crate) fn value_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        field: mir::Field,\n+        field: FieldIdx,\n     ) -> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n@@ -687,7 +687,7 @@ impl<'tcx> CPlace<'tcx> {\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n-        field: mir::Field,\n+        field: FieldIdx,\n     ) -> CPlace<'tcx> {\n         let layout = self.layout();\n "}, {"sha": "b309695c190f8b4b6489a251870fa04116c39957", "filename": "compiler/rustc_codegen_cranelift/src/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n         if let Abi::Scalar(_) = arg.layout().abi {\n             'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr() && !arg.layout().ty.is_ref() {\n                 for i in 0..arg.layout().fields.count() {\n-                    let field = arg.value_field(fx, mir::Field::new(i));\n+                    let field = arg.value_field(fx, FieldIdx::new(i));\n                     if !field.layout().is_zst() {\n                         // we found the one non-zero-sized field that is allowed\n                         // now find *its* non-zero-sized field, or stop if it's a\n@@ -68,9 +68,9 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n             if ty.is_dyn_star() {\n                 let inner_layout = fx.layout_of(arg.layout().ty.builtin_deref(true).unwrap().ty);\n                 let dyn_star = CPlace::for_ptr(Pointer::new(arg.load_scalar(fx)), inner_layout);\n-                let ptr = dyn_star.place_field(fx, mir::Field::new(0)).to_ptr();\n+                let ptr = dyn_star.place_field(fx, FieldIdx::new(0)).to_ptr();\n                 let vtable =\n-                    dyn_star.place_field(fx, mir::Field::new(1)).to_cvalue(fx).load_scalar(fx);\n+                    dyn_star.place_field(fx, FieldIdx::new(1)).to_cvalue(fx).load_scalar(fx);\n                 break 'block (ptr, vtable);\n             }\n         }"}, {"sha": "b6d7484bccefd7eb8cc0bb8fe35cdcc646f0d663", "filename": "compiler/rustc_codegen_llvm/messages.ftl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_llvm%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_llvm%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fmessages.ftl?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -27,7 +27,8 @@ codegen_llvm_error_calling_dlltool =\n     Error calling dlltool: {$error}\n \n codegen_llvm_dlltool_fail_import_library =\n-    Dlltool could not create import library: {$stdout}\\n{$stderr}\n+    Dlltool could not create import library: {$stdout}\n+    {$stderr}\n \n codegen_llvm_target_feature_disable_or_enable =\n     the target features {$features} must all be either enabled or disabled together"}, {"sha": "3e4765fba57d540f64753568c5f8f8eb01721d0a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -6,15 +6,17 @@ use rustc_hir::def::CtorKind;\n use rustc_index::vec::IndexVec;\n use rustc_middle::{\n     bug,\n-    mir::{Field, GeneratorLayout, GeneratorSavedLocal},\n+    mir::{GeneratorLayout, GeneratorSavedLocal},\n     ty::{\n         self,\n         layout::{IntegerExt, LayoutOf, PrimitiveExt, TyAndLayout},\n         AdtDef, GeneratorSubsts, Ty, VariantDef,\n     },\n };\n use rustc_span::Symbol;\n-use rustc_target::abi::{HasDataLayout, Integer, Primitive, TagEncoding, VariantIdx, Variants};\n+use rustc_target::abi::{\n+    FieldIdx, HasDataLayout, Integer, Primitive, TagEncoding, VariantIdx, Variants,\n+};\n use std::borrow::Cow;\n \n use crate::{\n@@ -353,7 +355,7 @@ pub fn build_generator_variant_struct_type_di_node<'ll, 'tcx>(\n             let state_specific_fields: SmallVec<_> = (0..variant_layout.fields.count())\n                 .map(|field_index| {\n                     let generator_saved_local = generator_layout.variant_fields[variant_index]\n-                        [Field::from_usize(field_index)];\n+                        [FieldIdx::from_usize(field_index)];\n                     let field_name_maybe = state_specific_upvar_names[generator_saved_local];\n                     let field_name = field_name_maybe\n                         .as_ref()"}, {"sha": "ff25d1e38236d11f93c09fbce832f524d3555dfa", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::{Abi, Size, VariantIdx};\n+use rustc_target::abi::{Abi, FieldIdx, Size, VariantIdx};\n \n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n@@ -79,7 +79,7 @@ impl<'tcx, S: Copy, L: Copy> DebugScope<S, L> {\n trait DebugInfoOffsetLocation<'tcx, Bx> {\n     fn deref(&self, bx: &mut Bx) -> Self;\n     fn layout(&self) -> TyAndLayout<'tcx>;\n-    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self;\n+    fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self;\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self;\n }\n \n@@ -94,7 +94,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         self.layout\n     }\n \n-    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+    fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self {\n         PlaceRef::project_field(*self, bx, field.index())\n     }\n \n@@ -116,7 +116,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         *self\n     }\n \n-    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+    fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self {\n         self.field(bx.cx(), field.index())\n     }\n "}, {"sha": "f6751df443f7ae57eefcafdbde66eee6f34f8f08", "filename": "compiler/rustc_const_eval/messages.ftl", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_const_eval%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_const_eval%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fmessages.ftl?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -39,17 +39,25 @@ const_eval_unstable_const_fn = `{$def_path}` is not yet stable as a const fn\n const_eval_unallowed_mutable_refs =\n     mutable references are not allowed in the final value of {$kind}s\n     .teach_note =\n-        References in statics and constants may only refer to immutable values.\\n\\n\n+        References in statics and constants may only refer to immutable values.\n+\n+\n         Statics are shared everywhere, and if they refer to mutable data one might violate memory\n-        safety since holding multiple mutable references to shared data is not allowed.\\n\\n\n+        safety since holding multiple mutable references to shared data is not allowed.\n+\n+\n         If you really want global mutable state, try using static mut or a global UnsafeCell.\n \n const_eval_unallowed_mutable_refs_raw =\n     raw mutable references are not allowed in the final value of {$kind}s\n     .teach_note =\n-        References in statics and constants may only refer to immutable values.\\n\\n\n+        References in statics and constants may only refer to immutable values.\n+\n+\n         Statics are shared everywhere, and if they refer to mutable data one might violate memory\n-        safety since holding multiple mutable references to shared data is not allowed.\\n\\n\n+        safety since holding multiple mutable references to shared data is not allowed.\n+\n+\n         If you really want global mutable state, try using static mut or a global UnsafeCell.\n \n const_eval_non_const_fmt_macro_call ="}, {"sha": "b760620e3d48b0bba6d547f043ac774ecc81f5f1", "filename": "compiler/rustc_incremental/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_incremental%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_incremental%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fmessages.ftl?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -24,7 +24,7 @@ incremental_field_associated_value_expected = associated value expected for `{$n\n incremental_no_field = no field `{$name}`\n \n incremental_assertion_auto =\n-    `except` specified DepNodes that can not be affected for \\\"{$name}\\\": \\\"{$e}\\\"\n+    `except` specified DepNodes that can not be affected for \"{$name}\": \"{$e}\"\n \n incremental_undefined_clean_dirty_assertions_item =\n     clean/dirty auto-assertions not yet defined for Node::Item.node={$kind}"}, {"sha": "d9c8142226d2b2730246d80a0bdca84b00e91e0f", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -91,7 +91,7 @@ lint_ty_qualified = usage of qualified `ty::{$ty}`\n lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n-lint_non_existant_doc_keyword = found non-existing keyword `{$keyword}` used in `#[doc(keyword = \\\"...\\\")]`\n+lint_non_existant_doc_keyword = found non-existing keyword `{$keyword}` used in `#[doc(keyword = \"...\")]`\n     .help = only existing keywords are allowed in core/std\n \n lint_diag_out_of_impl =\n@@ -197,7 +197,9 @@ lint_drop_glue =\n     types that do not implement `Drop` can still have drop glue, consider instead using `{$needs_drop}` to detect whether a type is trivially dropped\n \n lint_range_endpoint_out_of_range = range endpoint is out of range for `{$ty}`\n-    .suggestion = use an inclusive range instead\n+\n+lint_range_use_inclusive_range = use an inclusive range instead\n+\n \n lint_overflowing_bin_hex = literal out of range for `{$ty}`\n     .negative_note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}`"}, {"sha": "8ec4c2b3d463ab6b51cd9df703a7392bf504426f", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -1210,11 +1210,33 @@ impl<'a> DecorateLint<'a, ()> for DropGlue<'_> {\n #[diag(lint_range_endpoint_out_of_range)]\n pub struct RangeEndpointOutOfRange<'a> {\n     pub ty: &'a str,\n-    #[suggestion(code = \"{start}..={literal}{suffix}\", applicability = \"machine-applicable\")]\n-    pub suggestion: Span,\n-    pub start: String,\n-    pub literal: u128,\n-    pub suffix: &'a str,\n+    #[subdiagnostic]\n+    pub sub: UseInclusiveRange<'a>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UseInclusiveRange<'a> {\n+    #[suggestion(\n+        lint_range_use_inclusive_range,\n+        code = \"{start}..={literal}{suffix}\",\n+        applicability = \"machine-applicable\"\n+    )]\n+    WithoutParen {\n+        #[primary_span]\n+        sugg: Span,\n+        start: String,\n+        literal: u128,\n+        suffix: &'a str,\n+    },\n+    #[multipart_suggestion(lint_range_use_inclusive_range, applicability = \"machine-applicable\")]\n+    WithParen {\n+        #[suggestion_part(code = \"=\")]\n+        eq_sugg: Span,\n+        #[suggestion_part(code = \"{literal}{suffix}\")]\n+        lit_sugg: Span,\n+        literal: u128,\n+        suffix: &'a str,\n+    },\n }\n \n #[derive(LintDiagnostic)]"}, {"sha": "f6bca7045c846cca4ea466841880c483a839e4bd", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -4,7 +4,8 @@ use crate::{\n         AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n         InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n         OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral,\n-        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, VariantSizeDifferencesDiag,\n+        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange,\n+        VariantSizeDifferencesDiag,\n     },\n };\n use crate::{LateContext, LateLintPass, LintContext};\n@@ -136,6 +137,14 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     expr: &'tcx hir::Expr<'tcx>,\n     ty: &str,\n ) -> bool {\n+    // Look past casts to support cases like `0..256 as u8`\n+    let (expr, lit_span) = if let Node::Expr(par_expr) = cx.tcx.hir().get(cx.tcx.hir().parent_id(expr.hir_id))\n+      && let ExprKind::Cast(_, _) = par_expr.kind {\n+        (par_expr, expr.span)\n+    } else {\n+        (expr, expr.span)\n+    };\n+\n     // We only want to handle exclusive (`..`) ranges,\n     // which are represented as `ExprKind::Struct`.\n     let par_id = cx.tcx.hir().parent_id(expr.hir_id);\n@@ -155,7 +164,6 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     if !(eps[1].expr.hir_id == expr.hir_id && lit_val - 1 == max) {\n         return false;\n     };\n-    let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) else { return false };\n \n     use rustc_ast::{LitIntType, LitKind};\n     let suffix = match lit.node {\n@@ -164,16 +172,28 @@ fn lint_overflowing_range_endpoint<'tcx>(\n         LitKind::Int(_, LitIntType::Unsuffixed) => \"\",\n         _ => bug!(),\n     };\n-    cx.emit_spanned_lint(\n-        OVERFLOWING_LITERALS,\n-        struct_expr.span,\n-        RangeEndpointOutOfRange {\n-            ty,\n-            suggestion: struct_expr.span,\n+\n+    let sub_sugg = if expr.span.lo() == lit_span.lo() {\n+        let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) else { return false };\n+        UseInclusiveRange::WithoutParen {\n+            sugg: struct_expr.span.shrink_to_lo().to(lit_span.shrink_to_hi()),\n             start,\n             literal: lit_val - 1,\n             suffix,\n-        },\n+        }\n+    } else {\n+        UseInclusiveRange::WithParen {\n+            eq_sugg: expr.span.shrink_to_lo(),\n+            lit_sugg: lit_span,\n+            literal: lit_val - 1,\n+            suffix,\n+        }\n+    };\n+\n+    cx.emit_spanned_lint(\n+        OVERFLOWING_LITERALS,\n+        struct_expr.span,\n+        RangeEndpointOutOfRange { ty, sub: sub_sugg },\n     );\n \n     // We've just emitted a lint, special cased for `(...)..MAX+1` ranges,"}, {"sha": "3b2f5cfdc73161759279cc5f813741963f46f0e0", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -111,6 +111,18 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             .emit();\n         return failed(&crate_name);\n     }\n+    let mut bad = false;\n+    for esc in [\"\\\\n\", \"\\\\\\\"\", \"\\\\'\"] {\n+        for _ in resource_contents.matches(esc) {\n+            bad = true;\n+            Diagnostic::spanned(resource_span, Level::Error, format!(\"invalid escape `{esc}` in Fluent resource\"))\n+                .note(\"Fluent does not interpret these escape sequences (<https://projectfluent.org/fluent/guide/special.html>)\")\n+                .emit();\n+        }\n+    }\n+    if bad {\n+        return failed(&crate_name);\n+    }\n \n     let resource = match FluentResource::try_new(resource_contents) {\n         Ok(resource) => resource,"}, {"sha": "37356b53c0271e423d8eb51558ffe1ea409c55eb", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -21,7 +21,7 @@ use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::{self, GeneratorKind, ImplicitSelfKind};\n use rustc_hir::{self as hir, HirId};\n use rustc_session::Session;\n-use rustc_target::abi::{Size, VariantIdx};\n+use rustc_target::abi::{FieldIdx, Size, VariantIdx};\n \n use polonius_engine::Atom;\n pub use rustc_ast::Mutability;\n@@ -1512,7 +1512,7 @@ impl<V, T> ProjectionElem<V, T> {\n     }\n \n     /// Returns `true` if this is a `Field` projection with the given index.\n-    pub fn is_field_to(&self, f: Field) -> bool {\n+    pub fn is_field_to(&self, f: FieldIdx) -> bool {\n         matches!(*self, Self::Field(x, _) if x == f)\n     }\n }\n@@ -1521,22 +1521,6 @@ impl<V, T> ProjectionElem<V, T> {\n /// need neither the `V` parameter for `Index` nor the `T` for `Field`.\n pub type ProjectionKind = ProjectionElem<(), ()>;\n \n-rustc_index::newtype_index! {\n-    /// A [newtype'd][wrapper] index type in the MIR [control-flow graph][CFG]\n-    ///\n-    /// A field (e.g., `f` in `_1.f`) is one variant of [`ProjectionElem`]. Conceptually,\n-    /// rustc can identify that a field projection refers to either two different regions of memory\n-    /// or the same one between the base and the 'projection element'.\n-    /// Read more about projections in the [rustc-dev-guide][mir-datatypes]\n-    ///\n-    /// [wrapper]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html#newtype\n-    /// [CFG]: https://rustc-dev-guide.rust-lang.org/appendix/background.html#cfg\n-    /// [mir-datatypes]: https://rustc-dev-guide.rust-lang.org/mir/index.html#mir-data-types\n-    #[derive(HashStable)]\n-    #[debug_format = \"field[{}]\"]\n-    pub struct Field {}\n-}\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct PlaceRef<'tcx> {\n     pub local: Local,\n@@ -2685,12 +2669,17 @@ impl<'tcx> UserTypeProjections {\n         self.map_projections(|pat_ty_proj| pat_ty_proj.deref())\n     }\n \n-    pub fn leaf(self, field: Field) -> Self {\n+    pub fn leaf(self, field: FieldIdx) -> Self {\n         self.map_projections(|pat_ty_proj| pat_ty_proj.leaf(field))\n     }\n \n-    pub fn variant(self, adt_def: AdtDef<'tcx>, variant_index: VariantIdx, field: Field) -> Self {\n-        self.map_projections(|pat_ty_proj| pat_ty_proj.variant(adt_def, variant_index, field))\n+    pub fn variant(\n+        self,\n+        adt_def: AdtDef<'tcx>,\n+        variant_index: VariantIdx,\n+        field_index: FieldIdx,\n+    ) -> Self {\n+        self.map_projections(|pat_ty_proj| pat_ty_proj.variant(adt_def, variant_index, field_index))\n     }\n }\n \n@@ -2733,7 +2722,7 @@ impl UserTypeProjection {\n         self\n     }\n \n-    pub(crate) fn leaf(mut self, field: Field) -> Self {\n+    pub(crate) fn leaf(mut self, field: FieldIdx) -> Self {\n         self.projs.push(ProjectionElem::Field(field, ()));\n         self\n     }\n@@ -2742,13 +2731,13 @@ impl UserTypeProjection {\n         mut self,\n         adt_def: AdtDef<'_>,\n         variant_index: VariantIdx,\n-        field: Field,\n+        field_index: FieldIdx,\n     ) -> Self {\n         self.projs.push(ProjectionElem::Downcast(\n             Some(adt_def.variant(variant_index).name),\n             variant_index,\n         ));\n-        self.projs.push(ProjectionElem::Field(field, ()));\n+        self.projs.push(ProjectionElem::Field(field_index, ()));\n         self\n     }\n }"}, {"sha": "68561cf6dd775deeee6df16b38bab56356d44616", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -10,12 +10,12 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use smallvec::SmallVec;\n use std::cell::Cell;\n use std::fmt::{self, Debug};\n \n-use super::{Field, SourceInfo};\n+use super::SourceInfo;\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n@@ -152,7 +152,7 @@ pub struct GeneratorLayout<'tcx> {\n \n     /// Which of the above fields are in each variant. Note that one field may\n     /// be stored in multiple variants.\n-    pub variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorSavedLocal>>,\n+    pub variant_fields: IndexVec<VariantIdx, IndexVec<FieldIdx, GeneratorSavedLocal>>,\n \n     /// The source that led to each variant being created (usually, a yield or\n     /// await).\n@@ -229,7 +229,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// unerased regions.\n     pub concrete_opaque_types: FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n-    pub used_mut_upvars: SmallVec<[Field; 8]>,\n+    pub used_mut_upvars: SmallVec<[FieldIdx; 8]>,\n     pub tainted_by_errors: Option<ErrorGuaranteed>,\n }\n \n@@ -353,7 +353,7 @@ pub enum ConstraintCategory<'tcx> {\n     /// like `Foo { field: my_val }`)\n     Usage,\n     OpaqueType,\n-    ClosureUpvar(Field),\n+    ClosureUpvar(FieldIdx),\n \n     /// A constraint from a user-written predicate\n     /// with the provided span, written on the item\n@@ -375,7 +375,7 @@ pub enum ConstraintCategory<'tcx> {\n #[derive(TyEncodable, TyDecodable, HashStable, TypeVisitable, TypeFoldable)]\n pub enum ReturnConstraint {\n     Normal,\n-    ClosureUpvar(Field),\n+    ClosureUpvar(FieldIdx),\n }\n \n /// The subject of a `ClosureOutlivesRequirement` -- that is, the thing"}, {"sha": "8fb693055fa8ae6c06987d411d65318e77b63d95", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -3,7 +3,7 @@\n //! This is in a dedicated file so that changes to this file can be reviewed more carefully.\n //! The intention is that this file only contains datatype declarations, no code.\n \n-use super::{BasicBlock, Constant, Field, Local, SwitchTargets, UserTypeProjection};\n+use super::{BasicBlock, Constant, Local, SwitchTargets, UserTypeProjection};\n \n use crate::mir::coverage::{CodeRegion, CoverageKind};\n use crate::traits::Reveal;\n@@ -16,7 +16,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir};\n use rustc_hir::{self, GeneratorKind};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n use rustc_ast::Mutability;\n use rustc_span::def_id::LocalDefId;\n@@ -888,7 +888,15 @@ pub struct Place<'tcx> {\n #[derive(TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum ProjectionElem<V, T> {\n     Deref,\n-    Field(Field, T),\n+\n+    /// A field (e.g., `f` in `_1.f`) is one variant of [`ProjectionElem`]. Conceptually,\n+    /// rustc can identify that a field projection refers to either two different regions of memory\n+    /// or the same one between the base and the 'projection element'.\n+    /// Read more about projections in the [rustc-dev-guide][mir-datatypes]\n+    ///\n+    /// [mir-datatypes]: https://rustc-dev-guide.rust-lang.org/mir/index.html#mir-data-types\n+    Field(FieldIdx, T),\n+\n     /// Index into a slice/array.\n     ///\n     /// Note that this does not also dereference, and so it does not exactly correspond to slice"}, {"sha": "4a28aabf8a35873da34675de243bc87b358696cb", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -6,7 +6,7 @@\n use crate::mir::*;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n #[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct PlaceTy<'tcx> {\n@@ -33,7 +33,7 @@ impl<'tcx> PlaceTy<'tcx> {\n     ///\n     /// Note that the resulting type has not been normalized.\n     #[instrument(level = \"debug\", skip(tcx), ret)]\n-    pub fn field_ty(self, tcx: TyCtxt<'tcx>, f: Field) -> Ty<'tcx> {\n+    pub fn field_ty(self, tcx: TyCtxt<'tcx>, f: FieldIdx) -> Ty<'tcx> {\n         match self.ty.kind() {\n             ty::Adt(adt_def, substs) => {\n                 let variant_def = match self.variant_index {\n@@ -61,14 +61,14 @@ impl<'tcx> PlaceTy<'tcx> {\n     /// `place_ty.projection_ty_core(tcx, elem, |...| { ... })`\n     /// projects `place_ty` onto `elem`, returning the appropriate\n     /// `Ty` or downcast variant corresponding to that projection.\n-    /// The `handle_field` callback must map a `Field` to its `Ty`,\n+    /// The `handle_field` callback must map a `FieldIdx` to its `Ty`,\n     /// (which should be trivial when `T` = `Ty`).\n     pub fn projection_ty_core<V, T>(\n         self,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         elem: &ProjectionElem<V, T>,\n-        mut handle_field: impl FnMut(&Self, Field, T) -> Ty<'tcx>,\n+        mut handle_field: impl FnMut(&Self, FieldIdx, T) -> Ty<'tcx>,\n         mut handle_opaque_cast: impl FnMut(&Self, T) -> Ty<'tcx>,\n     ) -> PlaceTy<'tcx>\n     where"}, {"sha": "4a096a2c0e840ca4dedbe1079136b2f55078fa40", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::hir_id::{HirId, OwnerId};\n use rustc_query_system::query::{DefaultCacheSelector, SingleCacheSelector, VecCacheSelector};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi::FieldIdx;\n \n /// Placeholder for `CrateNum`'s \"local\" counterpart\n #[derive(Copy, Clone, Debug)]\n@@ -332,7 +333,7 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n+impl<'tcx> Key for (ty::Const<'tcx>, FieldIdx) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {"}, {"sha": "29e3055a4b860fdbc4b8c014db126e397bc9a79d", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -17,14 +17,14 @@ use rustc_index::newtype_index;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::AllocId;\n-use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp};\n+use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Mutability, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtDef, FnSig, Ty, UpvarSubsts};\n use rustc_middle::ty::{CanonicalUserType, CanonicalUserTypeAnnotation};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use std::fmt;\n use std::ops::Index;\n@@ -366,7 +366,7 @@ pub enum ExprKind<'tcx> {\n         /// Variant containing the field.\n         variant_index: VariantIdx,\n         /// This can be a named (`.foo`) or unnamed (`.0`) field.\n-        name: Field,\n+        name: FieldIdx,\n     },\n     /// A *non-overloaded* indexing operation.\n     Index {\n@@ -491,7 +491,7 @@ pub enum ExprKind<'tcx> {\n /// This is used in struct constructors.\n #[derive(Clone, Debug, HashStable)]\n pub struct FieldExpr {\n-    pub name: Field,\n+    pub name: FieldIdx,\n     pub expr: ExprId,\n }\n \n@@ -570,7 +570,7 @@ pub enum BindingMode {\n \n #[derive(Clone, Debug, HashStable)]\n pub struct FieldPat<'tcx> {\n-    pub field: Field,\n+    pub field: FieldIdx,\n     pub pattern: Box<Pat<'tcx>>,\n }\n "}, {"sha": "8d0aa622244cd9e9d8b9582dae53ea9cc5c9c71a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -12,9 +12,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::resolve_bound_vars;\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation};\n-use crate::mir::{\n-    Body, BorrowCheckResult, Field, Local, Place, PlaceElem, ProjectionKind, Promoted,\n-};\n+use crate::mir::{Body, BorrowCheckResult, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::query::LocalCrate;\n use crate::thir::Thir;\n use crate::traits;\n@@ -65,7 +63,7 @@ use rustc_span::def_id::{DefPathHash, StableCrateId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::{Layout, LayoutS, TargetDataLayout, VariantIdx};\n+use rustc_target::abi::{FieldIdx, Layout, LayoutS, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n use rustc_type_ir::sty::TyKind::*;\n use rustc_type_ir::WithCachedTypeInfo;\n@@ -2125,7 +2123,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {\n+    pub fn mk_place_field(self, place: Place<'tcx>, f: FieldIdx, ty: Ty<'tcx>) -> Place<'tcx> {\n         self.mk_place_elem(place, PlaceElem::Field(f, ty))\n     }\n "}, {"sha": "d4f058440b954ba179a5d63ce331426c9995ce71", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -4,7 +4,7 @@\n //! to help with the tedium.\n \n use crate::mir::interpret;\n-use crate::mir::{Field, ProjectionKind};\n+use crate::mir::ProjectionKind;\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n@@ -217,6 +217,7 @@ CloneLiftImpls! {\n // implementation and traversal implementations (the latter only for\n // TyCtxt<'_> interners).\n TrivialTypeTraversalAndLiftImpls! {\n+    ::rustc_target::abi::FieldIdx,\n     ::rustc_target::abi::VariantIdx,\n     crate::middle::region::Scope,\n     crate::ty::FloatTy,\n@@ -268,7 +269,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     ::rustc_span::Span,\n     ::rustc_span::symbol::Ident,\n     ::rustc_errors::ErrorGuaranteed,\n-    Field,\n     interpret::Scalar,\n     rustc_target::abi::Size,\n     ty::BoundVar,"}, {"sha": "77a5017b3630f9459e07dc771ade54f360009d16", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::ty::cast::mir_cast_kind;\n use rustc_middle::{mir::*, thir::*, ty};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n use crate::build::custom::ParseError;\n use crate::build::expr::as_constant::as_constant_inner;\n@@ -223,7 +223,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n         let (parent, proj) = parse_by_kind!(self, expr_id, expr, \"place\",\n             @call(\"mir_field\", args) => {\n                 let (parent, ty) = self.parse_place_inner(args[0])?;\n-                let field = Field::from_u32(self.parse_integer_literal(args[1])? as u32);\n+                let field = FieldIdx::from_u32(self.parse_integer_literal(args[1])? as u32);\n                 let field_ty = ty.field_ty(self.tcx, field);\n                 let proj = PlaceElem::Field(field, field_ty);\n                 let place = parent.project_deeper(&[proj], self.tcx);"}, {"sha": "0fc99e57d12297361f8731d631273e66c54f2cf2", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::AdtDef;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, Variance};\n use rustc_span::Span;\n-use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n \n use std::assert_matches::assert_matches;\n use std::iter;\n@@ -293,7 +293,7 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         &self.projection\n     }\n \n-    pub(crate) fn field(self, f: Field, ty: Ty<'tcx>) -> Self {\n+    pub(crate) fn field(self, f: FieldIdx, ty: Ty<'tcx>) -> Self {\n         self.project(PlaceElem::Field(f, ty))\n     }\n "}, {"sha": "d1878bf77ef1e8c79273bbd6b0e57ebf0ec6f591", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -17,6 +17,7 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::cast::{mir_cast_kind, CastTy};\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n+use rustc_target::abi::FieldIdx;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns an rvalue suitable for use until the end of the current\n@@ -553,8 +554,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     result_value,\n                     Rvalue::CheckedBinaryOp(op, Box::new((lhs.to_copy(), rhs.to_copy()))),\n                 );\n-                let val_fld = Field::new(0);\n-                let of_fld = Field::new(1);\n+                let val_fld = FieldIdx::new(0);\n+                let of_fld = FieldIdx::new(1);\n \n                 let tcx = self.tcx;\n                 let val = tcx.mk_place_field(result_value, val_fld, ty);"}, {"sha": "b8260c719c89a3b9ae9bf2ec2b8658269bb5528a", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -10,6 +10,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n+use rustc_target::abi::FieldIdx;\n use std::iter;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -344,7 +345,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .collect();\n \n                 let field_names: Vec<_> =\n-                    (0..adt_def.variant(variant_index).fields.len()).map(Field::new).collect();\n+                    (0..adt_def.variant(variant_index).fields.len()).map(FieldIdx::new).collect();\n \n                 let fields: Vec<_> = if let Some(FruInfo { base, field_types }) = base {\n                     let place_builder ="}, {"sha": "e87e38fd04cafa5c4d056c61e2f6e029015f98da", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -25,6 +25,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_span::Symbol;\n+use rustc_target::abi::FieldIdx;\n use rustc_target::spec::abi::Abi;\n \n use super::lints;\n@@ -793,7 +794,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let mutability = captured_place.mutability;\n \n                 let mut projs = closure_env_projs.clone();\n-                projs.push(ProjectionElem::Field(Field::new(i), ty));\n+                projs.push(ProjectionElem::Field(FieldIdx::new(i), ty));\n                 match capture {\n                     ty::UpvarCapture::ByValue => {}\n                     ty::UpvarCapture::ByRef(..) => {"}, {"sha": "2a0b5d047331362aa3995a7870c85da6984d00b8", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n-use rustc_middle::mir::{self, BinOp, BorrowKind, Field, UnOp};\n+use rustc_middle::mir::{self, BinOp, BorrowKind, UnOp};\n use rustc_middle::thir::*;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -20,7 +20,7 @@ use rustc_middle::ty::{\n     self, AdtKind, InlineConstSubsts, InlineConstSubstsParts, ScalarInt, Ty, UpvarSubsts, UserType,\n };\n use rustc_span::{sym, Span};\n-use rustc_target::abi::FIRST_VARIANT;\n+use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n \n impl<'tcx> Cx<'tcx> {\n     pub(crate) fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {\n@@ -379,7 +379,7 @@ impl<'tcx> Cx<'tcx> {\n                             .iter()\n                             .enumerate()\n                             .map(|(idx, e)| FieldExpr {\n-                                name: Field::new(idx),\n+                                name: FieldIdx::new(idx),\n                                 expr: self.mirror_expr(e),\n                             })\n                             .collect();\n@@ -733,7 +733,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n                 variant_index: FIRST_VARIANT,\n-                name: Field::new(self.typeck_results.field_index(expr.hir_id)),\n+                name: FieldIdx::new(self.typeck_results.field_index(expr.hir_id)),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {\n                 // Check for a user-given type annotation on this `cast`\n@@ -1053,7 +1053,7 @@ impl<'tcx> Cx<'tcx> {\n                 HirProjectionKind::Field(field, variant_index) => ExprKind::Field {\n                     lhs: self.thir.exprs.push(captured_place_expr),\n                     variant_index,\n-                    name: Field::new(field as usize),\n+                    name: FieldIdx::new(field as usize),\n                 },\n                 HirProjectionKind::Index | HirProjectionKind::Subslice => {\n                     // We don't capture these projections, so we can ignore them here\n@@ -1107,7 +1107,7 @@ impl<'tcx> Cx<'tcx> {\n         fields\n             .iter()\n             .map(|field| FieldExpr {\n-                name: Field::new(self.typeck_results.field_index(field.hir_id)),\n+                name: FieldIdx::new(self.typeck_results.field_index(field.hir_id)),\n                 expr: self.mirror_expr(field.expr),\n             })\n             .collect()"}, {"sha": "2dbef740d1a6e290dd77ea1c8ff25478ad8e3278", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -2,11 +2,12 @@ use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n-use rustc_middle::mir::{self, Field};\n+use rustc_middle::mir;\n use rustc_middle::thir::{FieldPat, Pat, PatKind};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::Span;\n+use rustc_target::abi::FieldIdx;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause};\n \n@@ -218,7 +219,7 @@ impl<'tcx> ConstToPat<'tcx> {\n     ) -> Result<Vec<FieldPat<'tcx>>, FallbackToConstRef> {\n         vals.enumerate()\n             .map(|(idx, val)| {\n-                let field = Field::new(idx);\n+                let field = FieldIdx::new(idx);\n                 Ok(FieldPat { field, pattern: self.recur(val, false)? })\n             })\n             .collect()"}, {"sha": "e619e095496bc60548a20b87cfc37abe3119cf15", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -53,14 +53,14 @@ use smallvec::{smallvec, SmallVec};\n use rustc_data_structures::captures::Captures;\n use rustc_hir::{HirId, RangeEnd};\n use rustc_index::vec::Idx;\n-use rustc_middle::mir::{self, Field};\n+use rustc_middle::mir;\n use rustc_middle::thir::{FieldPat, Pat, PatKind, PatRange};\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::{self, Ty, TyCtxt, VariantDef};\n use rustc_middle::{middle::stability::EvalResult, mir::interpret::ConstValue};\n use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi::{Integer, Size, VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, Integer, Size, VariantIdx, FIRST_VARIANT};\n \n use self::Constructor::*;\n use self::SliceKind::*;\n@@ -1126,7 +1126,7 @@ impl<'tcx> SplitWildcard<'tcx> {\n /// Note that the number of fields of a constructor may not match the fields declared in the\n /// original struct/variant. This happens if a private or `non_exhaustive` field is uninhabited,\n /// because the code mustn't observe that it is uninhabited. In that case that field is not\n-/// included in `fields`. For that reason, when you have a `mir::Field` you must use\n+/// included in `fields`. For that reason, when you have a `FieldIdx` you must use\n /// `index_with_declared_idx`.\n #[derive(Debug, Clone, Copy)]\n pub(super) struct Fields<'p, 'tcx> {\n@@ -1165,7 +1165,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         cx: &'a MatchCheckCtxt<'p, 'tcx>,\n         ty: Ty<'tcx>,\n         variant: &'a VariantDef,\n-    ) -> impl Iterator<Item = (Field, Ty<'tcx>)> + Captures<'a> + Captures<'p> {\n+    ) -> impl Iterator<Item = (FieldIdx, Ty<'tcx>)> + Captures<'a> + Captures<'p> {\n         let ty::Adt(adt, substs) = ty.kind() else { bug!() };\n         // Whether we must not match the fields of this variant exhaustively.\n         let is_non_exhaustive = variant.is_field_list_non_exhaustive() && !adt.did().is_local();\n@@ -1180,7 +1180,7 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n             if is_uninhabited && (!is_visible || is_non_exhaustive) {\n                 None\n             } else {\n-                Some((Field::new(i), ty))\n+                Some((FieldIdx::new(i), ty))\n             }\n         })\n     }\n@@ -1438,7 +1438,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                 ty::Tuple(..) => PatKind::Leaf {\n                     subpatterns: subpatterns\n                         .enumerate()\n-                        .map(|(i, pattern)| FieldPat { field: Field::new(i), pattern })\n+                        .map(|(i, pattern)| FieldPat { field: FieldIdx::new(i), pattern })\n                         .collect(),\n                 },\n                 ty::Adt(adt_def, _) if adt_def.is_box() => {"}, {"sha": "72b4041aa1b72f17fdbc78166536d0186b6f74ea", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -21,12 +21,13 @@ use rustc_middle::mir::interpret::{\n     ConstValue, ErrorHandled, LitToConstError, LitToConstInput, Scalar,\n };\n use rustc_middle::mir::{self, UserTypeProjection};\n-use rustc_middle::mir::{BorrowKind, Field, Mutability};\n+use rustc_middle::mir::{BorrowKind, Mutability};\n use rustc_middle::thir::{Ascription, BindingMode, FieldPat, LocalVarId, Pat, PatKind, PatRange};\n use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use rustc_middle::ty::{self, AdtDef, ConstKind, Region, Ty, TyCtxt, UserType};\n use rustc_span::{Span, Symbol};\n+use rustc_target::abi::FieldIdx;\n \n use std::cmp::Ordering;\n \n@@ -356,7 +357,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let subpatterns = fields\n                     .iter()\n                     .map(|field| FieldPat {\n-                        field: Field::new(self.typeck_results.field_index(field.hir_id)),\n+                        field: FieldIdx::new(self.typeck_results.field_index(field.hir_id)),\n                         pattern: self.lower_pattern(&field.pat),\n                     })\n                     .collect();\n@@ -379,7 +380,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         pats.iter()\n             .enumerate_and_adjust(expected_len, gap_pos)\n             .map(|(i, subpattern)| FieldPat {\n-                field: Field::new(i),\n+                field: FieldIdx::new(i),\n                 pattern: self.lower_pattern(subpattern),\n             })\n             .collect()\n@@ -723,7 +724,7 @@ macro_rules! ClonePatternFoldableImpls {\n }\n \n ClonePatternFoldableImpls! { <'tcx>\n-    Span, Field, Mutability, Symbol, LocalVarId, usize,\n+    Span, FieldIdx, Mutability, Symbol, LocalVarId, usize,\n     Region<'tcx>, Ty<'tcx>, BindingMode, AdtDef<'tcx>,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n     UserTypeProjection, CanonicalUserTypeAnnotation<'tcx>"}, {"sha": "37787d99c2d51aeae9a5928b9995c83dc01747fe", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::traits::Reveal;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n use std::{fmt, iter};\n \n /// The value of an inserted drop flag.\n@@ -129,7 +129,7 @@ pub trait DropElaborator<'a, 'tcx>: fmt::Debug {\n     /// Returns the subpath of a field of `path` (or `None` if there is no dedicated subpath).\n     ///\n     /// If this returns `None`, `field` will not get a dedicated drop flag.\n-    fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path>;\n+    fn field_subpath(&self, path: Self::Path, field: FieldIdx) -> Option<Self::Path>;\n \n     /// Returns the subpath of a dereference of `path` (or `None` if there is no dedicated subpath).\n     ///\n@@ -269,7 +269,7 @@ where\n             .iter()\n             .enumerate()\n             .map(|(i, f)| {\n-                let field = Field::new(i);\n+                let field = FieldIdx::new(i);\n                 let subpath = self.elaborator.field_subpath(variant_path, field);\n                 let tcx = self.tcx();\n \n@@ -397,8 +397,8 @@ where\n             .enumerate()\n             .map(|(i, &ty)| {\n                 (\n-                    self.tcx().mk_place_field(self.place, Field::new(i), ty),\n-                    self.elaborator.field_subpath(self.path, Field::new(i)),\n+                    self.tcx().mk_place_field(self.place, FieldIdx::new(i), ty),\n+                    self.elaborator.field_subpath(self.path, FieldIdx::new(i)),\n                 )\n             })\n             .collect();\n@@ -416,9 +416,9 @@ where\n             unique_ty.ty_adt_def().unwrap().non_enum_variant().fields[0].ty(self.tcx(), substs);\n         let ptr_ty = self.tcx().mk_imm_ptr(substs[0].expect_ty());\n \n-        let unique_place = self.tcx().mk_place_field(self.place, Field::new(0), unique_ty);\n-        let nonnull_place = self.tcx().mk_place_field(unique_place, Field::new(0), nonnull_ty);\n-        let ptr_place = self.tcx().mk_place_field(nonnull_place, Field::new(0), ptr_ty);\n+        let unique_place = self.tcx().mk_place_field(self.place, FieldIdx::new(0), unique_ty);\n+        let nonnull_place = self.tcx().mk_place_field(unique_place, FieldIdx::new(0), nonnull_ty);\n+        let ptr_place = self.tcx().mk_place_field(nonnull_place, FieldIdx::new(0), ptr_ty);\n         let interior = self.tcx().mk_place_deref(ptr_place);\n \n         let interior_path = self.elaborator.deref_subpath(self.path);\n@@ -899,7 +899,7 @@ where\n             .iter()\n             .enumerate()\n             .map(|(i, f)| {\n-                let field = Field::new(i);\n+                let field = FieldIdx::new(i);\n                 let field_ty = f.ty(tcx, substs);\n                 Operand::Move(tcx.mk_place_field(self.place, field, field_ty))\n             })"}, {"sha": "63e553bec53291ce464a8b8f3a5da5d917e9ab09", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -40,7 +40,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n use crate::lattice::{HasBottom, HasTop};\n use crate::{\n@@ -919,7 +919,7 @@ impl<V: HasTop> ValueOrPlace<V> {\n /// Although only field projections are currently allowed, this could change in the future.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum TrackElem {\n-    Field(Field),\n+    Field(FieldIdx),\n     Variant(VariantIdx),\n     Discriminant,\n }\n@@ -941,7 +941,7 @@ pub fn iter_fields<'tcx>(\n     ty: Ty<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    mut f: impl FnMut(Option<VariantIdx>, Field, Ty<'tcx>),\n+    mut f: impl FnMut(Option<VariantIdx>, FieldIdx, Ty<'tcx>),\n ) {\n     match ty.kind() {\n         ty::Tuple(list) => {"}, {"sha": "15f5df41153b2502b9f0baf9532bd01e6964532a", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -13,8 +13,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{Map, State, TrackElem, ValueAnalysis, ValueOrPlace};\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n use rustc_span::DUMMY_SP;\n-use rustc_target::abi::Align;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{Align, FieldIdx, VariantIdx};\n \n use crate::MirPass;\n \n@@ -148,7 +147,7 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                         for (field_index, operand) in operands.iter().enumerate() {\n                             if let Some(field) = self.map().apply(\n                                 variant_target_idx,\n-                                TrackElem::Field(Field::from_usize(field_index)),\n+                                TrackElem::Field(FieldIdx::from_usize(field_index)),\n                             ) {\n                                 let result = self.handle_operand(operand, state);\n                                 state.insert_idx(field, result, self.map());"}, {"sha": "58bc083280a306c597fd824ae67af75d370f1e59", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_target::abi::FieldIdx;\n \n /// Constructs the types used when accessing a Box's pointer\n pub fn build_ptr_tys<'tcx>(\n@@ -32,9 +33,9 @@ pub fn build_projection<'tcx>(\n     ptr_ty: Ty<'tcx>,\n ) -> [PlaceElem<'tcx>; 3] {\n     [\n-        PlaceElem::Field(Field::new(0), unique_ty),\n-        PlaceElem::Field(Field::new(0), nonnull_ty),\n-        PlaceElem::Field(Field::new(0), ptr_ty),\n+        PlaceElem::Field(FieldIdx::new(0), unique_ty),\n+        PlaceElem::Field(FieldIdx::new(0), nonnull_ty),\n+        PlaceElem::Field(FieldIdx::new(0), ptr_ty),\n     ]\n }\n "}, {"sha": "a028d6356d50e0f770fbc778cabfbaeea9f2231a", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -15,7 +15,7 @@ use rustc_mir_dataflow::MoveDataParamEnv;\n use rustc_mir_dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_span::{DesugaringKind, Span};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use std::fmt;\n \n /// During MIR building, Drop terminators are inserted in every place where a drop may occur.\n@@ -252,7 +252,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, '_, 'tcx> {\n         }\n     }\n \n-    fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path> {\n+    fn field_subpath(&self, path: Self::Path, field: FieldIdx) -> Option<Self::Path> {\n         rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::Field(idx, _) => idx == field,\n             _ => false,"}, {"sha": "50538248d91ee5df70ee3bd7c8ec4196ad4979e3", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -73,7 +73,7 @@ use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n use rustc_target::spec::PanicStrategy;\n use std::{iter, ops};\n \n@@ -162,9 +162,10 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n                 place,\n                 Place {\n                     local: SELF_ARG,\n-                    projection: self\n-                        .tcx()\n-                        .mk_place_elems(&[ProjectionElem::Field(Field::new(0), self.ref_gen_ty)]),\n+                    projection: self.tcx().mk_place_elems(&[ProjectionElem::Field(\n+                        FieldIdx::new(0),\n+                        self.ref_gen_ty,\n+                    )]),\n                 },\n                 self.tcx,\n             );\n@@ -297,7 +298,7 @@ impl<'tcx> TransformVisitor<'tcx> {\n         let self_place = Place::from(SELF_ARG);\n         let base = self.tcx.mk_place_downcast_unnamed(self_place, variant_index);\n         let mut projection = base.projection.to_vec();\n-        projection.push(ProjectionElem::Field(Field::new(idx), ty));\n+        projection.push(ProjectionElem::Field(FieldIdx::new(idx), ty));\n \n         Place { local: base.local, projection: self.tcx.mk_place_elems(&projection) }\n     }\n@@ -967,7 +968,7 @@ fn compute_layout<'tcx>(\n \n     // Build the generator variant field list.\n     // Create a map from local indices to generator struct indices.\n-    let mut variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorSavedLocal>> =\n+    let mut variant_fields: IndexVec<VariantIdx, IndexVec<FieldIdx, GeneratorSavedLocal>> =\n         iter::repeat(IndexVec::new()).take(RESERVED_VARIANTS).collect();\n     let mut remap = FxHashMap::default();\n     for (suspension_point_idx, live_locals) in live_locals_at_suspension_points.iter().enumerate() {"}, {"sha": "98d2df719786452644b4d5ecf15033cfce0c62b3", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n-use rustc_target::abi::FIRST_VARIANT;\n+use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_target::spec::abi::Abi;\n \n use crate::simplify::{remove_dead_blocks, CfgSimplifier};\n@@ -701,7 +701,7 @@ impl<'tcx> Inliner<'tcx> {\n             // The `tmp0`, `tmp1`, and `tmp2` in our example above.\n             let tuple_tmp_args = tuple_tys.iter().enumerate().map(|(i, ty)| {\n                 // This is e.g., `tuple_tmp.0` in our example above.\n-                let tuple_field = Operand::Move(tcx.mk_place_field(tuple, Field::new(i), ty));\n+                let tuple_field = Operand::Move(tcx.mk_place_field(tuple, FieldIdx::new(i), ty));\n \n                 // Spill to a local to make e.g., `tmp0`.\n                 self.create_temp_if_necessary(tuple_field, callsite, caller_body)"}, {"sha": "3d06a0a495f79f328027f8d96c8a2f4d63fa49b0", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -3,14 +3,14 @@\n use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n-    BinOp, Body, CastKind, Constant, ConstantKind, Field, LocalDecls, Operand, Place,\n-    ProjectionElem, Rvalue, SourceInfo, Statement, StatementKind, SwitchTargets, Terminator,\n-    TerminatorKind, UnOp,\n+    BinOp, Body, CastKind, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem,\n+    Rvalue, SourceInfo, Statement, StatementKind, SwitchTargets, Terminator, TerminatorKind, UnOp,\n };\n use rustc_middle::ty::layout::ValidityRequirement;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n+use rustc_target::abi::FieldIdx;\n \n pub struct InstCombine;\n \n@@ -187,7 +187,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n                     for (i, field) in variant.fields.iter().enumerate() {\n                         let field_ty = field.ty(self.tcx, substs);\n                         if field_ty == *cast_ty {\n-                            let place = place.project_deeper(&[ProjectionElem::Field(Field::from_usize(i), *cast_ty)], self.tcx);\n+                            let place = place.project_deeper(&[ProjectionElem::Field(FieldIdx::from_usize(i), *cast_ty)], self.tcx);\n                             let operand = if operand.is_move() { Operand::Move(place) } else { Operand::Copy(place) };\n                             *rvalue = Rvalue::Use(operand);\n                             return;"}, {"sha": "c136642dff2779a253e322ddeffb68fee318f7cb", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n pub struct LowerIntrinsics;\n \n@@ -211,7 +211,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                                                     Some(sym::Some),\n                                                     VariantIdx::from_u32(1),\n                                                 ),\n-                                                PlaceElem::Field(Field::from_u32(0), *dest_ty),\n+                                                PlaceElem::Field(FieldIdx::from_u32(0), *dest_ty),\n                                             ],\n                                             tcx,\n                                         ),"}, {"sha": "1f9e521d315d8d1315e5542ae41e78b068f270ec", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -1,10 +1,11 @@\n use rustc_index::bit_set::ChunkedBitSet;\n-use rustc_middle::mir::{Body, Field, TerminatorKind};\n+use rustc_middle::mir::{Body, TerminatorKind};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, VariantDef};\n use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n use rustc_mir_dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n use rustc_mir_dataflow::{self, move_path_children_matching, Analysis, MoveDataParamEnv};\n+use rustc_target::abi::FieldIdx;\n \n use crate::MirPass;\n \n@@ -130,15 +131,15 @@ fn is_needs_drop_and_init<'tcx>(\n                     .fields\n                     .iter()\n                     .enumerate()\n-                    .map(|(f, field)| (Field::from_usize(f), field.ty(tcx, substs), mpi))\n+                    .map(|(f, field)| (FieldIdx::from_usize(f), field.ty(tcx, substs), mpi))\n                     .any(field_needs_drop_and_init)\n             })\n         }\n \n         ty::Tuple(fields) => fields\n             .iter()\n             .enumerate()\n-            .map(|(f, f_ty)| (Field::from_usize(f), f_ty, mpi))\n+            .map(|(f, f_ty)| (FieldIdx::from_usize(f), f_ty, mpi))\n             .any(field_needs_drop_and_init),\n \n         _ => true,"}, {"sha": "9e406eba0fcaaca7e9adc3d0918583edf22fc127", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, EarlyBinder, GeneratorSubsts, Ty, TyCtxt};\n-use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n \n use rustc_index::vec::{Idx, IndexVec};\n \n@@ -309,7 +309,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n \n     fn clear_drop_flag(&mut self, _location: Location, _path: Self::Path, _mode: DropFlagMode) {}\n \n-    fn field_subpath(&self, _path: Self::Path, _field: Field) -> Option<Self::Path> {\n+    fn field_subpath(&self, _path: Self::Path, _field: FieldIdx) -> Option<Self::Path> {\n         None\n     }\n     fn deref_subpath(&self, _path: Self::Path) -> Option<Self::Path> {\n@@ -530,7 +530,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             // created by block 2*i. We store this block in `unwind` so that the next clone block\n             // will unwind to it if cloning fails.\n \n-            let field = Field::new(i);\n+            let field = FieldIdx::new(i);\n             let src_field = self.tcx.mk_place_field(src, field, ity);\n \n             let dest_field = self.tcx.mk_place_field(dest, field, ity);\n@@ -753,7 +753,7 @@ fn build_call_shim<'tcx>(\n     if let Some(untuple_args) = untuple_args {\n         let tuple_arg = Local::new(1 + (sig.inputs().len() - 1));\n         args.extend(untuple_args.iter().enumerate().map(|(i, ity)| {\n-            Operand::Move(tcx.mk_place_field(Place::from(tuple_arg), Field::new(i), *ity))\n+            Operand::Move(tcx.mk_place_field(Place::from(tuple_arg), FieldIdx::new(i), *ity))\n         }));\n     }\n "}, {"sha": "c798bd05345e28e9dbe92612281085706e37109f", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{excluded_locals, iter_fields};\n+use rustc_target::abi::FieldIdx;\n \n pub struct ScalarReplacementOfAggregates;\n \n@@ -115,7 +116,7 @@ fn escaping_locals(excluded: &BitSet<Local>, body: &Body<'_>) -> BitSet<Local> {\n struct ReplacementMap<'tcx> {\n     /// Pre-computed list of all \"new\" locals for each \"old\" local. This is used to expand storage\n     /// and deinit statement and debuginfo.\n-    fragments: IndexVec<Local, Option<IndexVec<Field, Option<(Ty<'tcx>, Local)>>>>,\n+    fragments: IndexVec<Local, Option<IndexVec<FieldIdx, Option<(Ty<'tcx>, Local)>>>>,\n }\n \n impl<'tcx> ReplacementMap<'tcx> {\n@@ -129,7 +130,7 @@ impl<'tcx> ReplacementMap<'tcx> {\n     fn place_fragments(\n         &self,\n         place: Place<'tcx>,\n-    ) -> Option<impl Iterator<Item = (Field, Ty<'tcx>, Local)> + '_> {\n+    ) -> Option<impl Iterator<Item = (FieldIdx, Ty<'tcx>, Local)> + '_> {\n         let local = place.as_local()?;\n         let fields = self.fragments[local].as_ref()?;\n         Some(fields.iter_enumerated().filter_map(|(field, &opt_ty_local)| {"}, {"sha": "856b1c08b7237d610a36290b30e2448601aaa5fa", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -6,6 +6,7 @@ use super::trait_goals::structural_traits::*;\n use super::{EvalCtxt, SolverMode};\n use crate::traits::coherence;\n use itertools::Itertools;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::elaborate_predicates;\n@@ -489,9 +490,21 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         };\n \n         let tcx = self.tcx();\n-        for assumption in\n-            elaborate_predicates(tcx, bounds.iter().map(|bound| bound.with_self_ty(tcx, self_ty)))\n-        {\n+        let own_bounds: FxIndexSet<_> =\n+            bounds.iter().map(|bound| bound.with_self_ty(tcx, self_ty)).collect();\n+        for assumption in elaborate_predicates(tcx, own_bounds.iter().copied()) {\n+            // FIXME: Predicates are fully elaborated in the object type's existential bounds\n+            // list. We want to only consider these pre-elaborated projections, and not other\n+            // projection predicates that we reach by elaborating the principal trait ref,\n+            // since that'll cause ambiguity.\n+            //\n+            // We can remove this when we have implemented intersections in responses.\n+            if assumption.to_opt_poly_projection_pred().is_some()\n+                && !own_bounds.contains(&assumption)\n+            {\n+                continue;\n+            }\n+\n             match G::consider_object_bound_candidate(self, goal, assumption) {\n                 Ok(result) => {\n                     candidates.push(Candidate { source: CandidateSource::BuiltinImpl, result })"}, {"sha": "7ee4f33230630d0a55a93f0000985a8301708aa9", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "previous_filename": "compiler/rustc_trait_selection/src/solve/canonical/canonicalize.rs"}, {"sha": "e64b4a7656f256dc0bbe5b4230bfc951b719cec1", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -6,23 +6,42 @@ use rustc_infer::infer::{\n     DefineOpaqueTypes, InferCtxt, InferOk, LateBoundRegionConversionTime, TyCtxtInferExt,\n };\n use rustc_infer::traits::query::NoSolution;\n-use rustc_infer::traits::solve::{CanonicalGoal, Certainty, MaybeCause, QueryResult};\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n+use rustc_middle::traits::solve::{CanonicalGoal, Certainty, MaybeCause, QueryResult};\n use rustc_middle::ty::{\n     self, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n     TypeVisitor,\n };\n use rustc_span::DUMMY_SP;\n use std::ops::ControlFlow;\n \n+use crate::traits::specialization_graph;\n+\n use super::search_graph::{self, OverflowHandler};\n use super::SolverMode;\n use super::{search_graph::SearchGraph, Goal};\n \n+mod canonical;\n+\n pub struct EvalCtxt<'a, 'tcx> {\n-    // FIXME: should be private.\n-    pub(super) infcx: &'a InferCtxt<'tcx>,\n+    /// The inference context that backs (mostly) inference and placeholder terms\n+    /// instantiated while solving goals.\n+    ///\n+    /// NOTE: The `InferCtxt` that backs the `EvalCtxt` is intentionally private,\n+    /// because the `InferCtxt` is much more general than `EvalCtxt`. Methods such\n+    /// as  `take_registered_region_obligations` can mess up query responses,\n+    /// using `At::normalize` is totally wrong, calling `evaluate_root_goal` can\n+    /// cause coinductive unsoundness, etc.\n+    ///\n+    /// Methods that are generally of use for trait solving are *intentionally*\n+    /// re-declared through the `EvalCtxt` below, often with cleaner signatures\n+    /// since we don't care about things like `ObligationCause`s and `Span`s here.\n+    /// If some `InferCtxt` method is missing, please first think defensively about\n+    /// the method's compatibility with this solver, or if an existing one does\n+    /// the job already.\n+    infcx: &'a InferCtxt<'tcx>,\n+\n     pub(super) var_values: CanonicalVarValues<'tcx>,\n     /// The highest universe index nameable by the caller.\n     ///\n@@ -393,7 +412,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 if let &ty::Infer(ty::TyVar(vid)) = ty.kind() {\n                     match self.infcx.probe_ty_var(vid) {\n                         Ok(value) => bug!(\"resolved var in query: {goal:?} {value:?}\"),\n-                        Err(universe) => universe == self.universe(),\n+                        Err(universe) => universe == self.infcx.universe(),\n                     }\n                 } else {\n                     false\n@@ -403,7 +422,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 if let ty::ConstKind::Infer(ty::InferConst::Var(vid)) = ct.kind() {\n                     match self.infcx.probe_const_var(vid) {\n                         Ok(value) => bug!(\"resolved var in query: {goal:?} {value:?}\"),\n-                        Err(universe) => universe == self.universe(),\n+                        Err(universe) => universe == self.infcx.universe(),\n                     }\n                 } else {\n                     false\n@@ -545,7 +564,43 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         self.infcx.fresh_substs_for_item(DUMMY_SP, def_id)\n     }\n \n-    pub(super) fn universe(&self) -> ty::UniverseIndex {\n-        self.infcx.universe()\n+    pub(super) fn translate_substs(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        source_impl: DefId,\n+        source_substs: ty::SubstsRef<'tcx>,\n+        target_node: specialization_graph::Node,\n+    ) -> ty::SubstsRef<'tcx> {\n+        crate::traits::translate_substs(\n+            self.infcx,\n+            param_env,\n+            source_impl,\n+            source_substs,\n+            target_node,\n+        )\n+    }\n+\n+    pub(super) fn register_ty_outlives(&self, ty: Ty<'tcx>, lt: ty::Region<'tcx>) {\n+        self.infcx.register_region_obligation_with_cause(ty, lt, &ObligationCause::dummy());\n+    }\n+\n+    pub(super) fn register_region_outlives(&self, a: ty::Region<'tcx>, b: ty::Region<'tcx>) {\n+        // `b : a` ==> `a <= b`\n+        // (inlined from `InferCtxt::region_outlives_predicate`)\n+        self.infcx.sub_regions(\n+            rustc_infer::infer::SubregionOrigin::RelateRegionParamBound(DUMMY_SP),\n+            b,\n+            a,\n+        );\n+    }\n+\n+    /// Computes the list of goals required for `arg` to be well-formed\n+    pub(super) fn well_formed_goals(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        arg: ty::GenericArg<'tcx>,\n+    ) -> Option<impl Iterator<Item = Goal<'tcx, ty::Predicate<'tcx>>>> {\n+        crate::traits::wf::unnormalized_obligations(self.infcx, param_env, arg)\n+            .map(|obligations| obligations.into_iter().map(|obligation| obligation.into()))\n     }\n }"}, {"sha": "ee90488730a645cfa941ea5ac18442a2a22b235a", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "renamed", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -8,22 +8,19 @@\n /// section of the [rustc-dev-guide][c].\n ///\n /// [c]: https://rustc-dev-guide.rust-lang.org/solve/canonicalization.html\n-use self::canonicalize::{CanonicalizeMode, Canonicalizer};\n use super::{CanonicalGoal, Certainty, EvalCtxt, Goal};\n-use super::{CanonicalResponse, ExternalConstraints, QueryResult, Response};\n+use crate::solve::canonicalize::{CanonicalizeMode, Canonicalizer};\n+use crate::solve::{CanonicalResponse, QueryResult, Response};\n use rustc_infer::infer::canonical::query_response::make_query_region_constraints;\n use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::canonical::{CanonicalExt, QueryRegionConstraints};\n-use rustc_infer::traits::query::NoSolution;\n-use rustc_infer::traits::solve::ExternalConstraintsData;\n-use rustc_infer::traits::ObligationCause;\n+use rustc_middle::traits::query::NoSolution;\n+use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n use rustc_middle::ty::{self, GenericArgKind};\n use rustc_span::DUMMY_SP;\n use std::iter;\n use std::ops::Deref;\n \n-mod canonicalize;\n-\n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     /// Canonicalizes the goal remembering the original values\n     /// for each bound variable.\n@@ -48,7 +45,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     /// - `external_constraints`: additional constraints which aren't expressable\n     ///   using simple unification of inference variables.\n     #[instrument(level = \"debug\", skip(self))]\n-    pub(super) fn evaluate_added_goals_and_make_canonical_response(\n+    pub(in crate::solve) fn evaluate_added_goals_and_make_canonical_response(\n         &mut self,\n         certainty: Certainty,\n     ) -> QueryResult<'tcx> {\n@@ -219,15 +216,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     fn register_region_constraints(&mut self, region_constraints: &QueryRegionConstraints<'tcx>) {\n         for &(ty::OutlivesPredicate(lhs, rhs), _) in &region_constraints.outlives {\n             match lhs.unpack() {\n-                GenericArgKind::Lifetime(lhs) => self.infcx.region_outlives_predicate(\n-                    &ObligationCause::dummy(),\n-                    ty::Binder::dummy(ty::OutlivesPredicate(lhs, rhs)),\n-                ),\n-                GenericArgKind::Type(lhs) => self.infcx.register_region_obligation_with_cause(\n-                    lhs,\n-                    rhs,\n-                    &ObligationCause::dummy(),\n-                ),\n+                GenericArgKind::Lifetime(lhs) => self.register_region_outlives(lhs, rhs),\n+                GenericArgKind::Type(lhs) => self.register_ty_outlives(lhs, rhs),\n                 GenericArgKind::Const(_) => bug!(\"const outlives: {lhs:?}: {rhs:?}\"),\n             }\n         }", "previous_filename": "compiler/rustc_trait_selection/src/solve/canonical/mod.rs"}, {"sha": "a96ec2c60f0970b85eed9a140d7ed3d1bbdbc8af", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -13,18 +13,15 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::traits::solve::{\n-    CanonicalGoal, CanonicalResponse, Certainty, ExternalConstraints, ExternalConstraintsData,\n-    Goal, QueryResult, Response,\n+    CanonicalResponse, Certainty, ExternalConstraintsData, Goal, QueryResult, Response,\n };\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{\n     CoercePredicate, RegionOutlivesPredicate, SubtypePredicate, TypeOutlivesPredicate,\n };\n \n-use crate::traits::ObligationCause;\n-\n mod assembly;\n-mod canonical;\n+mod canonicalize;\n mod eval_ctxt;\n mod fulfill;\n mod project_goals;\n@@ -66,7 +63,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         goal: Goal<'tcx, TypeOutlivesPredicate<'tcx>>,\n     ) -> QueryResult<'tcx> {\n         let ty::OutlivesPredicate(ty, lt) = goal.predicate;\n-        self.infcx.register_region_obligation_with_cause(ty, lt, &ObligationCause::dummy());\n+        self.register_ty_outlives(ty, lt);\n         self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n     }\n \n@@ -75,10 +72,8 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         &mut self,\n         goal: Goal<'tcx, RegionOutlivesPredicate<'tcx>>,\n     ) -> QueryResult<'tcx> {\n-        self.infcx.region_outlives_predicate(\n-            &ObligationCause::dummy(),\n-            ty::Binder::dummy(goal.predicate),\n-        );\n+        let ty::OutlivesPredicate(a, b) = goal.predicate;\n+        self.register_region_outlives(a, b);\n         self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n     }\n \n@@ -142,13 +137,9 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         &mut self,\n         goal: Goal<'tcx, ty::GenericArg<'tcx>>,\n     ) -> QueryResult<'tcx> {\n-        match crate::traits::wf::unnormalized_obligations(\n-            self.infcx,\n-            goal.param_env,\n-            goal.predicate,\n-        ) {\n-            Some(obligations) => {\n-                self.add_goals(obligations.into_iter().map(|o| o.into()));\n+        match self.well_formed_goals(goal.param_env, goal.predicate) {\n+            Some(goals) => {\n+                self.add_goals(goals);\n                 self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n             }\n             None => self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS),"}, {"sha": "48f7d3e3e40239ac0ceafb1fde1c5563fba3af19", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -1,4 +1,4 @@\n-use crate::traits::{specialization_graph, translate_substs};\n+use crate::traits::specialization_graph;\n \n use super::assembly;\n use super::trait_goals::structural_traits;\n@@ -7,7 +7,6 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n-use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::specialization_graph::LeafDef;\n use rustc_infer::traits::Reveal;\n@@ -165,7 +164,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             // return ambiguity this would otherwise be incomplete, resulting in\n             // unsoundness during coherence (#105782).\n             let Some(assoc_def) = fetch_eligible_assoc_item_def(\n-                ecx.infcx,\n+                ecx,\n                 goal.param_env,\n                 goal_trait_ref,\n                 goal.predicate.def_id(),\n@@ -196,8 +195,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 goal_trait_ref.def_id,\n                 impl_substs,\n             );\n-            let substs = translate_substs(\n-                ecx.infcx,\n+            let substs = ecx.translate_substs(\n                 goal.param_env,\n                 impl_def_id,\n                 impl_substs_with_gat,\n@@ -504,15 +502,15 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n ///\n /// FIXME: We should merge these 3 implementations as it's likely that they otherwise\n /// diverge.\n-#[instrument(level = \"debug\", skip(infcx, param_env), ret)]\n+#[instrument(level = \"debug\", skip(ecx, param_env), ret)]\n fn fetch_eligible_assoc_item_def<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    ecx: &EvalCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     goal_trait_ref: ty::TraitRef<'tcx>,\n     trait_assoc_def_id: DefId,\n     impl_def_id: DefId,\n ) -> Result<Option<LeafDef>, NoSolution> {\n-    let node_item = specialization_graph::assoc_def(infcx.tcx, impl_def_id, trait_assoc_def_id)\n+    let node_item = specialization_graph::assoc_def(ecx.tcx(), impl_def_id, trait_assoc_def_id)\n         .map_err(|ErrorGuaranteed { .. }| NoSolution)?;\n \n     let eligible = if node_item.is_final() {\n@@ -524,7 +522,7 @@ fn fetch_eligible_assoc_item_def<'tcx>(\n         // transmute checking and polymorphic MIR optimizations could\n         // get a result which isn't correct for all monomorphizations.\n         if param_env.reveal() == Reveal::All {\n-            let poly_trait_ref = infcx.resolve_vars_if_possible(goal_trait_ref);\n+            let poly_trait_ref = ecx.resolve_vars_if_possible(goal_trait_ref);\n             !poly_trait_ref.still_further_specializable()\n         } else {\n             debug!(?node_item.item.def_id, \"not eligible due to default\");"}, {"sha": "6f2ba957bcda0995ac98952ae60666991d7df76b", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -14,8 +14,6 @@ use core::ptr::{self, NonNull};\n #[doc(inline)]\n pub use core::alloc::*;\n \n-use core::marker::Destruct;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -331,16 +329,12 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n \n #[cfg_attr(not(test), lang = \"box_free\")]\n #[inline]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n // This signature has to be the same as `Box`, otherwise an ICE will happen.\n // When an additional parameter to `Box` is added (like `A: Allocator`), this has to be added here as\n // well.\n // For example if `Box` is changed to  `struct Box<T: ?Sized, A: Allocator>(Unique<T>, A)`,\n // this function has to be changed to `fn box_free<T: ?Sized, A: Allocator>(Unique<T>, A)` as well.\n-pub(crate) const unsafe fn box_free<T: ?Sized, A: ~const Allocator + ~const Destruct>(\n-    ptr: Unique<T>,\n-    alloc: A,\n-) {\n+pub(crate) unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: Unique<T>, alloc: A) {\n     unsafe {\n         let size = size_of_val(ptr.as_ref());\n         let align = min_align_of_val(ptr.as_ref());"}, {"sha": "0c8c796ae9b819b33aa874aa8bb1057fffe4ad71", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -328,10 +328,9 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]\n-impl<B: ?Sized + ToOwned> const Deref for Cow<'_, B>\n+impl<B: ?Sized + ToOwned> Deref for Cow<'_, B>\n where\n-    B::Owned: ~const Borrow<B>,\n+    B::Owned: Borrow<B>,\n {\n     type Target = B;\n "}, {"sha": "09041bb119bb762346cbaa731e2c1776fe6220bb", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -159,7 +159,7 @@ use core::hash::{Hash, Hasher};\n use core::iter::FromIterator;\n use core::iter::{FusedIterator, Iterator};\n use core::marker::Tuple;\n-use core::marker::{Destruct, Unpin, Unsize};\n+use core::marker::{Unpin, Unsize};\n use core::mem;\n use core::ops::{\n     CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Generator, GeneratorState, Receiver,\n@@ -376,12 +376,11 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[must_use]\n     #[inline]\n-    pub const fn new_in(x: T, alloc: A) -> Self\n+    pub fn new_in(x: T, alloc: A) -> Self\n     where\n-        A: ~const Allocator + ~const Destruct,\n+        A: Allocator,\n     {\n         let mut boxed = Self::new_uninit_in(alloc);\n         unsafe {\n@@ -406,12 +405,10 @@ impl<T, A: Allocator> Box<T, A> {\n     /// # Ok::<(), std::alloc::AllocError>(())\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n-    pub const fn try_new_in(x: T, alloc: A) -> Result<Self, AllocError>\n+    pub fn try_new_in(x: T, alloc: A) -> Result<Self, AllocError>\n     where\n-        T: ~const Destruct,\n-        A: ~const Allocator + ~const Destruct,\n+        A: Allocator,\n     {\n         let mut boxed = Self::try_new_uninit_in(alloc)?;\n         unsafe {\n@@ -441,13 +438,12 @@ impl<T, A: Allocator> Box<T, A> {\n     /// assert_eq!(*five, 5)\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[cfg(not(no_global_oom_handling))]\n     #[must_use]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    pub const fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\n+    pub fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\n     where\n-        A: ~const Allocator + ~const Destruct,\n+        A: Allocator,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -482,10 +478,9 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n-    pub const fn try_new_uninit_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n+    pub fn try_new_uninit_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n     where\n-        A: ~const Allocator + ~const Destruct,\n+        A: Allocator,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         let ptr = alloc.allocate(layout)?.cast();\n@@ -513,13 +508,12 @@ impl<T, A: Allocator> Box<T, A> {\n     ///\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[cfg(not(no_global_oom_handling))]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[must_use]\n-    pub const fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\n+    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A>\n     where\n-        A: ~const Allocator + ~const Destruct,\n+        A: Allocator,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n@@ -554,10 +548,9 @@ impl<T, A: Allocator> Box<T, A> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n-    pub const fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n+    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n     where\n-        A: ~const Allocator + ~const Destruct,\n+        A: Allocator,\n     {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n         let ptr = alloc.allocate_zeroed(layout)?.cast();\n@@ -573,12 +566,11 @@ impl<T, A: Allocator> Box<T, A> {\n     /// construct a (pinned) `Box` in a different way than with [`Box::new_in`].\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[must_use]\n     #[inline(always)]\n-    pub const fn pin_in(x: T, alloc: A) -> Pin<Self>\n+    pub fn pin_in(x: T, alloc: A) -> Pin<Self>\n     where\n-        A: 'static + ~const Allocator + ~const Destruct,\n+        A: 'static + Allocator,\n     {\n         Self::into_pin(Self::new_in(x, alloc))\n     }\n@@ -605,12 +597,8 @@ impl<T, A: Allocator> Box<T, A> {\n     /// assert_eq!(Box::into_inner(c), 5);\n     /// ```\n     #[unstable(feature = \"box_into_inner\", issue = \"80437\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n-    pub const fn into_inner(boxed: Self) -> T\n-    where\n-        Self: ~const Destruct,\n-    {\n+    pub fn into_inner(boxed: Self) -> T {\n         *boxed\n     }\n }"}, {"sha": "68ebd8e35ee3d75dda0ddb873f6c25ff5f80dffc", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -179,18 +179,3 @@ unsafe impl const Allocator for ConstAllocator {\n         self\n     }\n }\n-\n-#[test]\n-fn const_box() {\n-    const VALUE: u32 = {\n-        let mut boxed = Box::new_in(1u32, ConstAllocator);\n-        assert!(*boxed == 1);\n-\n-        *boxed = 42;\n-        assert!(*boxed == 42);\n-\n-        *Box::leak(boxed)\n-    };\n-\n-    assert!(VALUE == 42);\n-}"}, {"sha": "c27ca642e9b1f38b67fa96ab97c70060ad894b8e", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -3,7 +3,6 @@\n #![feature(assert_matches)]\n #![feature(btree_drain_filter)]\n #![feature(cow_is_borrowed)]\n-#![feature(const_box)]\n #![feature(const_convert)]\n #![feature(const_cow_is_borrowed)]\n #![feature(const_heap)]"}, {"sha": "c7cb8466705cb69d182b57dfc46c650b02b9ec5f", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -75,9 +75,18 @@ pub fn abort_internal() -> ! {\n     }\n }\n \n-// FIXME: just a workaround to test the system\n pub fn hashmap_random_keys() -> (u64, u64) {\n-    (1, 2)\n+    let mut buf = [0; 16];\n+    let mut slice = &mut buf[..];\n+    while !slice.is_empty() {\n+        let res = cvt(unsafe { abi::read_entropy(slice.as_mut_ptr(), slice.len(), 0) })\n+            .expect(\"failed to generate random hashmap keys\");\n+        slice = &mut slice[res as usize..];\n+    }\n+\n+    let key1 = buf[..8].try_into().unwrap();\n+    let key2 = buf[8..].try_into().unwrap();\n+    (u64::from_ne_bytes(key1), u64::from_ne_bytes(key2))\n }\n \n // This function is needed by the panic runtime. The symbol is named in"}, {"sha": "a688aa14863a94c4ca1b867559a73629cd6490a7", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -121,9 +121,14 @@ impl<'a, 'tcx> DocFolder for Stripper<'a, 'tcx> {\n                 // strip things like impl methods but when doing so\n                 // we must not add any items to the `retained` set.\n                 let old = mem::replace(&mut self.update_retained, false);\n-                let ret = strip_item(self.set_is_in_hidden_item_and_fold(true, i));\n+                let ret = self.set_is_in_hidden_item_and_fold(true, i);\n                 self.update_retained = old;\n-                Some(ret)\n+                if ret.is_crate() {\n+                    // We don't strip the crate, even if it has `#[doc(hidden)]`.\n+                    Some(ret)\n+                } else {\n+                    Some(strip_item(ret))\n+                }\n             }\n             _ => {\n                 let ret = self.set_is_in_hidden_item_and_fold(true, i);"}, {"sha": "7a3e53a0d32eb6c01d5174d83a34cb74774cbab5", "filename": "tests/rustdoc/issue-109695-crate-doc-hidden.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Frustdoc%2Fissue-109695-crate-doc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Frustdoc%2Fissue-109695-crate-doc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-109695-crate-doc-hidden.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -0,0 +1,8 @@\n+// This test ensures that even if the crate module is `#[doc(hidden)]`, the file\n+// is generated.\n+\n+// @has 'foo/index.html'\n+// @has 'foo/all.html'\n+\n+#![crate_name = \"foo\"]\n+#![doc(hidden)]"}, {"sha": "e28852ea0050e48332353822f6aede35ab8d63b7", "filename": "tests/ui-fulldeps/fluent-messages/invalid-escape.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui-fulldeps%2Ffluent-messages%2Finvalid-escape.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui-fulldeps%2Ffluent-messages%2Finvalid-escape.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Finvalid-escape.ftl?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -0,0 +1 @@\n+no_crate_bad_escape = don't use \\n, \\', or \\\""}, {"sha": "1ee7227a8e9924279fe47fde44036725bdacb892", "filename": "tests/ui-fulldeps/fluent-messages/test.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -92,3 +92,12 @@ mod missing_message_ref {\n     fluent_messages! { \"./missing-message-ref.ftl\" }\n     //~^ ERROR referenced message `message` does not exist\n }\n+\n+mod bad_escape {\n+    use super::fluent_messages;\n+\n+    fluent_messages! { \"./invalid-escape.ftl\" }\n+    //~^ ERROR invalid escape `\\n`\n+    //~| ERROR invalid escape `\\\"`\n+    //~| ERROR invalid escape `\\'`\n+}"}, {"sha": "8a6a4a91cc201fa81703e7d38cf3feb6dee863f0", "filename": "tests/ui-fulldeps/fluent-messages/test.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -83,5 +83,29 @@ LL |     fluent_messages! { \"./missing-message-ref.ftl\" }\n    |\n    = help: you may have meant to use a variable reference (`{$message}`)\n \n-error: aborting due to 10 previous errors\n+error: invalid escape `\\n` in Fluent resource\n+  --> $DIR/test.rs:99:24\n+   |\n+LL |     fluent_messages! { \"./invalid-escape.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: os-specific message\n+\n+error: invalid escape `\\\"` in Fluent resource\n+  --> $DIR/test.rs:99:24\n+   |\n+LL |     fluent_messages! { \"./invalid-escape.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: os-specific message\n+\n+error: invalid escape `\\'` in Fluent resource\n+  --> $DIR/test.rs:99:24\n+   |\n+LL |     fluent_messages! { \"./invalid-escape.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: os-specific message\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "5110b9be08a53355e71d0a9cdd796d2921fc8cc9", "filename": "tests/ui-fulldeps/internal-lints/existing_doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -1,4 +1,4 @@\n-error: found non-existing keyword `tadam` used in `#[doc(keyword = \\\"...\\\")]`\n+error: found non-existing keyword `tadam` used in `#[doc(keyword = \"...\")]`\n   --> $DIR/existing_doc_keyword.rs:10:1\n    |\n LL | #[doc(keyword = \"tadam\")]"}, {"sha": "5ad489073eead94c271652ee85f3d24f21f7934d", "filename": "tests/ui/lint/issue-109529.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Flint%2Fissue-109529.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Flint%2Fissue-109529.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.fixed?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+fn main() {\n+    for _ in 0..=255 as u8 {} //~ ERROR range endpoint is out of range\n+    for _ in 0..=(255 as u8) {} //~ ERROR range endpoint is out of range\n+}"}, {"sha": "383d7bc4cf31f1fc50aee6fb6e3636bf09b672e0", "filename": "tests/ui/lint/issue-109529.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Flint%2Fissue-109529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Flint%2Fissue-109529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+fn main() {\n+    for _ in 0..256 as u8 {} //~ ERROR range endpoint is out of range\n+    for _ in 0..(256 as u8) {} //~ ERROR range endpoint is out of range\n+}"}, {"sha": "9e857d1b0ab5dd3564b3e2348d7c2ae7e1ab8a61", "filename": "tests/ui/lint/issue-109529.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Flint%2Fissue-109529.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Flint%2Fissue-109529.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.stderr?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -0,0 +1,23 @@\n+error: range endpoint is out of range for `u8`\n+  --> $DIR/issue-109529.rs:4:14\n+   |\n+LL |     for _ in 0..256 as u8 {}\n+   |              ------^^^^^^\n+   |              |\n+   |              help: use an inclusive range instead: `0..=255`\n+   |\n+   = note: `#[deny(overflowing_literals)]` on by default\n+\n+error: range endpoint is out of range for `u8`\n+  --> $DIR/issue-109529.rs:5:14\n+   |\n+LL |     for _ in 0..(256 as u8) {}\n+   |              ^^^^^^^^^^^^^^\n+   |\n+help: use an inclusive range instead\n+   |\n+LL |     for _ in 0..=(255 as u8) {}\n+   |                 + ~~~\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e608250063c0bdc63c1410ea5a5b47b3df4355fa", "filename": "tests/ui/traits/new-solver/dont-elaborate-for-projections.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Ftraits%2Fnew-solver%2Fdont-elaborate-for-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Ftraits%2Fnew-solver%2Fdont-elaborate-for-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fdont-elaborate-for-projections.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+trait Iter<'a, I: 'a>: Iterator<Item = &'a I> {}\n+\n+fn needs_iter<'a, T: Iter<'a, I> + ?Sized, I: 'a>(_: &T) {}\n+\n+fn test(x: &dyn Iter<'_, ()>) {\n+    needs_iter(x);\n+}\n+\n+fn main() {}"}, {"sha": "bb730b18ef77be91f90dbdf04ca312de5145cf54", "filename": "tests/ui/traits/new-solver/more-object-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.rs?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -10,7 +10,7 @@ trait Trait: SuperTrait<A = <Self as SuperTrait>::B> {}\n \n fn transmute<A, B>(x: A) -> B {\n     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n-    //~^ ERROR type annotations needed: cannot satisfy `dyn Trait<A = A, B = B>: Trait`\n+    //~^ ERROR the trait bound `dyn Trait<A = A, B = B>: Trait` is not satisfied\n }\n \n fn foo<A, B, T: ?Sized>(x: T::A) -> B"}, {"sha": "4554b8c7473cb7f37e7092414e9b8cdb70058b51", "filename": "tests/ui/traits/new-solver/more-object-bound.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0e8d162a021f8a795fb603f5d8c0017855160/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.stderr?ref=2fb0e8d162a021f8a795fb603f5d8c0017855160", "patch": "@@ -1,10 +1,9 @@\n-error[E0283]: type annotations needed: cannot satisfy `dyn Trait<A = A, B = B>: Trait`\n-  --> $DIR/more-object-bound.rs:12:5\n+error[E0277]: the trait bound `dyn Trait<A = A, B = B>: Trait` is not satisfied\n+  --> $DIR/more-object-bound.rs:12:17\n    |\n LL |     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `dyn Trait<A = A, B = B>`\n    |\n-   = note: cannot satisfy `dyn Trait<A = A, B = B>: Trait`\n note: required by a bound in `foo`\n   --> $DIR/more-object-bound.rs:18:8\n    |\n@@ -13,7 +12,11 @@ LL | fn foo<A, B, T: ?Sized>(x: T::A) -> B\n LL | where\n LL |     T: Trait<B = B>,\n    |        ^^^^^^^^^^^^ required by this bound in `foo`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn transmute<A, B>(x: A) -> B where dyn Trait<A = A, B = B>: Trait {\n+   |                               ++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0277`."}]}