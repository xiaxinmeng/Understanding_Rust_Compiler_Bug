{"sha": "ab5e29689086d5368e8e526b0295c628bd17ae92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNWUyOTY4OTA4NmQ1MzY4ZThlNTI2YjAyOTVjNjI4YmQxN2FlOTI=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-01-29T14:09:04Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-01-29T16:47:05Z"}, "message": "Document remaining undocumented `From` implementations for IPs", "tree": {"sha": "d0485b7bcee8be653f11802852ebf7f3d36d403e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0485b7bcee8be653f11802852ebf7f3d36d403e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5e29689086d5368e8e526b0295c628bd17ae92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5e29689086d5368e8e526b0295c628bd17ae92", "html_url": "https://github.com/rust-lang/rust/commit/ab5e29689086d5368e8e526b0295c628bd17ae92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5e29689086d5368e8e526b0295c628bd17ae92/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "html_url": "https://github.com/rust-lang/rust/commit/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "200b00b119595e7038e1890082d7e24a4b3ece19", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ab5e29689086d5368e8e526b0295c628bd17ae92/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5e29689086d5368e8e526b0295c628bd17ae92/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=ab5e29689086d5368e8e526b0295c628bd17ae92", "patch": "@@ -813,13 +813,41 @@ impl fmt::Display for IpAddr {\n \n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<Ipv4Addr> for IpAddr {\n+    /// Copies this address to a new `IpAddr::V4`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr};\n+    ///\n+    /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n+    ///\n+    /// assert_eq!(\n+    ///     IpAddr::V4(addr),\n+    ///     IpAddr::from(addr)\n+    /// )\n+    /// ```\n     fn from(ipv4: Ipv4Addr) -> IpAddr {\n         IpAddr::V4(ipv4)\n     }\n }\n \n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<Ipv6Addr> for IpAddr {\n+    /// Copies this address to a new `IpAddr::V6`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv6Addr};\n+    ///\n+    /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n+    ///\n+    /// assert_eq!(\n+    ///     IpAddr::V6(addr),\n+    ///     IpAddr::from(addr)\n+    /// );\n+    /// ```\n     fn from(ipv6: Ipv6Addr) -> IpAddr {\n         IpAddr::V6(ipv6)\n     }\n@@ -975,6 +1003,8 @@ impl From<u32> for Ipv4Addr {\n \n #[stable(feature = \"from_slice_v4\", since = \"1.9.0\")]\n impl From<[u8; 4]> for Ipv4Addr {\n+    /// Creates an `Ipv4Addr` from a four element byte array.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1734,6 +1764,27 @@ impl From<u128> for Ipv6Addr {\n \n #[stable(feature = \"ipv6_from_octets\", since = \"1.9.0\")]\n impl From<[u8; 16]> for Ipv6Addr {\n+    /// Creates an `Ipv6Addr` from a sixteen element byte array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::from([\n+    ///     25u8, 24u8, 23u8, 22u8, 21u8, 20u8, 19u8, 18u8,\n+    ///     17u8, 16u8, 15u8, 14u8, 13u8, 12u8, 11u8, 10u8,\n+    /// ]);\n+    /// assert_eq!(\n+    ///     Ipv6Addr::new(\n+    ///         0x1918, 0x1716,\n+    ///         0x1514, 0x1312,\n+    ///         0x1110, 0x0f0e,\n+    ///         0x0d0c, 0x0b0a\n+    ///     ),\n+    ///     addr\n+    /// );\n+    /// ```\n     fn from(octets: [u8; 16]) -> Ipv6Addr {\n         let inner = c::in6_addr { s6_addr: octets };\n         Ipv6Addr::from_inner(inner)\n@@ -1742,6 +1793,27 @@ impl From<[u8; 16]> for Ipv6Addr {\n \n #[stable(feature = \"ipv6_from_segments\", since = \"1.16.0\")]\n impl From<[u16; 8]> for Ipv6Addr {\n+    /// Creates an `Ipv6Addr` from an eight element 16-bit array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::from([\n+    ///     525u16, 524u16, 523u16, 522u16,\n+    ///     521u16, 520u16, 519u16, 518u16,\n+    /// ]);\n+    /// assert_eq!(\n+    ///     Ipv6Addr::new(\n+    ///         0x20d, 0x20c,\n+    ///         0x20b, 0x20a,\n+    ///         0x209, 0x208,\n+    ///         0x207, 0x206\n+    ///     ),\n+    ///     addr\n+    /// );\n+    /// ```\n     fn from(segments: [u16; 8]) -> Ipv6Addr {\n         let [a, b, c, d, e, f, g, h] = segments;\n         Ipv6Addr::new(a, b, c, d, e, f, g, h)"}]}