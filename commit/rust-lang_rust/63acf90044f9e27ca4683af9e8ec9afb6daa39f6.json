{"sha": "63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "node_id": "C_kwDOAAsO6NoAKDYzYWNmOTAwNDRmOWUyN2NhNDY4M2FmOWU4ZWM5YWZiNmRhYTM5ZjY", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-03-28T02:49:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-28T02:49:03Z"}, "message": "Merge pull request #5276 from calebcartwright/subtree-sync-2022-03-27\n\nsync subtree", "tree": {"sha": "7fa71e0531fc37c6eb73c53cd244bae3400e19c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fa71e0531fc37c6eb73c53cd244bae3400e19c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQSIfCRBK7hj4Ov3rIwAAmLcIACf15YSJMxzxRi/qYMMdGLm8\nhScEyo9jP0c38ORlzIDZKKnpXnk7nGTKaw39aKmVxgbbc5+uNPmiQJ6PiOWgmzn3\nUQ0TSVSafPZhrjAkFJwzb9/d4IGB/Ft274RgmgyqIXnGNM4GBvSl5X/Yy6UXcd8Z\nRTvHVKq/WrEq4l/xjHvuLvwIaK6DOA0J2ZAC0yglnimsPnj4T1X4R1Zbdy9JYhck\nk6r0DHB515SN4PYh1JNApGL1Nw2+2fcR3nVPhuWaegw+Xs867X1CUw5JT+OBS7Xa\n0DLC7ONmDrrWsJhRrPGNoH8NDe2H94RQjAwwoIZwWceuBqoPdtggckAX6jaL1G0=\n=LHeX\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fa71e0531fc37c6eb73c53cd244bae3400e19c9\nparent 8984438a6faf11e0cb8e876e80f177a42a43904d\nparent c2039d95c6fd5c27a90e768e79c630af374fcaf0\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1648435743 -0500\ncommitter GitHub <noreply@github.com> 1648435743 -0500\n\nMerge pull request #5276 from calebcartwright/subtree-sync-2022-03-27\n\nsync subtree"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "html_url": "https://github.com/rust-lang/rust/commit/63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8984438a6faf11e0cb8e876e80f177a42a43904d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8984438a6faf11e0cb8e876e80f177a42a43904d", "html_url": "https://github.com/rust-lang/rust/commit/8984438a6faf11e0cb8e876e80f177a42a43904d"}, {"sha": "c2039d95c6fd5c27a90e768e79c630af374fcaf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2039d95c6fd5c27a90e768e79c630af374fcaf0", "html_url": "https://github.com/rust-lang/rust/commit/c2039d95c6fd5c27a90e768e79c630af374fcaf0"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "94b57d506c20b0e86839ba819440b76cbb49de15", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-03-17\"\n+channel = \"nightly-2022-03-27\"\n components = [\"rustc-dev\"]"}, {"sha": "e87850507824f03b7907f738bd5c0f8251643795", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "patch": "@@ -575,7 +575,7 @@ where\n pub(crate) fn extract_pre_comment(pre_snippet: &str) -> (Option<String>, ListItemCommentStyle) {\n     let trimmed_pre_snippet = pre_snippet.trim();\n     // Both start and end are checked to support keeping a block comment inline with\n-    // the item, even if there are preceeding line comments, while still supporting\n+    // the item, even if there are preceding line comments, while still supporting\n     // a snippet that starts with a block comment but also contains one or more\n     // trailing single line comments.\n     // https://github.com/rust-lang/rustfmt/issues/3025"}, {"sha": "a8c2feec453c8a87ec742a5656c13087abcdb4d2", "filename": "src/parse/macros/lazy_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Fparse%2Fmacros%2Flazy_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Fparse%2Fmacros%2Flazy_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Flazy_static.rs?ref=63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn parse_lazy_static(\n         ($method:ident $(,)* $($arg:expr),* $(,)*) => {\n             match parser.$method($($arg,)*) {\n                 Ok(val) => {\n-                    if parser.sess.span_diagnostic.has_errors() {\n+                    if parser.sess.span_diagnostic.has_errors().is_some() {\n                         parser.sess.span_diagnostic.reset_err_count();\n                         return None;\n                     } else {"}, {"sha": "3728f3a19b44fc40ceccb60342ed4f5d99aeee75", "filename": "src/parse/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Fparse%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Fparse%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Fmod.rs?ref=63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "patch": "@@ -28,7 +28,7 @@ fn parse_macro_arg<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n             let mut cloned_parser = (*parser).clone();\n             match $parser(&mut cloned_parser) {\n                 Ok(x) => {\n-                    if parser.sess.span_diagnostic.has_errors() {\n+                    if parser.sess.span_diagnostic.has_errors().is_some() {\n                         parser.sess.span_diagnostic.reset_err_count();\n                     } else {\n                         // Parsing succeeded."}, {"sha": "7571e6d078a7bfe029767be0a33f99b413f24489", "filename": "src/parse/session.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fsession.rs?ref=63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "patch": "@@ -255,8 +255,10 @@ impl ParseSess {\n // Methods that should be restricted within the parse module.\n impl ParseSess {\n     pub(super) fn emit_diagnostics(&self, diagnostics: Vec<Diagnostic>) {\n-        for diagnostic in diagnostics {\n-            self.parse_sess.span_diagnostic.emit_diagnostic(&diagnostic);\n+        for mut diagnostic in diagnostics {\n+            self.parse_sess\n+                .span_diagnostic\n+                .emit_diagnostic(&mut diagnostic);\n         }\n     }\n \n@@ -265,7 +267,7 @@ impl ParseSess {\n     }\n \n     pub(super) fn has_errors(&self) -> bool {\n-        self.parse_sess.span_diagnostic.has_errors()\n+        self.parse_sess.span_diagnostic.has_errors().is_some()\n     }\n \n     pub(super) fn reset_errors(&self) {"}, {"sha": "64a201e45ddd4fbf7b662b96f1c9c7f8e0da3d42", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63acf90044f9e27ca4683af9e8ec9afb6daa39f6/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=63acf90044f9e27ca4683af9e8ec9afb6daa39f6", "patch": "@@ -251,7 +251,7 @@ fn rewrite_segment(\n         match **args {\n             ast::GenericArgs::AngleBracketed(ref data) if !data.args.is_empty() => {\n                 // HACK: squeeze out the span between the identifier and the parameters.\n-                // The hack is requried so that we don't remove the separator inside macro calls.\n+                // The hack is required so that we don't remove the separator inside macro calls.\n                 // This does not work in the presence of comment, hoping that people are\n                 // sane about where to put their comment.\n                 let separator_snippet = context"}]}