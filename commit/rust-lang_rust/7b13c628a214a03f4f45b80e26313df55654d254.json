{"sha": "7b13c628a214a03f4f45b80e26313df55654d254", "node_id": "C_kwDOAAsO6NoAKDdiMTNjNjI4YTIxNGEwM2Y0ZjQ1YjgwZTI2MzEzZGY1NTY1NGQyNTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-02T00:20:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-02T00:20:04Z"}, "message": "Auto merge of #92482 - matthiaskrgr:rollup-uso1zi0, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #84083 (Clarify the guarantees that ThreadId does and doesn't make.)\n - #91593 (Remove unnecessary bounds for some Hash{Map,Set} methods)\n - #92297 (Reduce compile time of rustbuild)\n - #92332 (Add test for where clause order)\n - #92438 (Enforce formatting for rustc_codegen_cranelift)\n - #92463 (Remove pronunciation guide from Vec<T>)\n - #92468 (Emit an error for `--cfg=)`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "379ec0fb43d268897bdb794bcdd70ddbaf5d4949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379ec0fb43d268897bdb794bcdd70ddbaf5d4949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b13c628a214a03f4f45b80e26313df55654d254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b13c628a214a03f4f45b80e26313df55654d254", "html_url": "https://github.com/rust-lang/rust/commit/7b13c628a214a03f4f45b80e26313df55654d254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b13c628a214a03f4f45b80e26313df55654d254/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3ac41495e85a9b7b5cb3186379d02ce17e51fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3ac41495e85a9b7b5cb3186379d02ce17e51fe", "html_url": "https://github.com/rust-lang/rust/commit/dd3ac41495e85a9b7b5cb3186379d02ce17e51fe"}, {"sha": "2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "html_url": "https://github.com/rust-lang/rust/commit/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd"}], "stats": {"total": 778, "additions": 398, "deletions": 380}, "files": [{"sha": "a912eee97dbf20ce638bcc7e2538a0185d88d4cd", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -175,9 +175,7 @@ dependencies = [\n  \"filetime\",\n  \"getopts\",\n  \"ignore\",\n- \"lazy_static\",\n  \"libc\",\n- \"merge\",\n  \"num_cpus\",\n  \"once_cell\",\n  \"opener\",\n@@ -2221,28 +2219,6 @@ dependencies = [\n  \"autocfg\",\n ]\n \n-[[package]]\n-name = \"merge\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"10bbef93abb1da61525bbc45eeaff6473a41907d19f8f9aa5168d214e10693e9\"\n-dependencies = [\n- \"merge_derive\",\n- \"num-traits\",\n-]\n-\n-[[package]]\n-name = \"merge_derive\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"209d075476da2e63b4b29e72a2ef627b840589588e71400a25e3565c4f849d07\"\n-dependencies = [\n- \"proc-macro-error\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"minifier\"\n version = \"0.0.41\""}, {"sha": "3804e10030733309293866cc5383da930661a2d8", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::registry::Registry;\n use rustc_errors::{ErrorReported, Handler};\n use rustc_lint::LintStore;\n use rustc_middle::ty;\n-use rustc_parse::new_parser_from_source_str;\n+use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n use rustc_session::early_error;\n@@ -91,7 +91,6 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     s\n                 )));\n                 let filename = FileName::cfg_spec_source_code(&s);\n-                let mut parser = new_parser_from_source_str(&sess, filename, s.to_string());\n \n                 macro_rules! error {\n                     ($reason: expr) => {\n@@ -102,26 +101,27 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     };\n                 }\n \n-                match &mut parser.parse_meta_item() {\n-                    Ok(meta_item) if parser.token == token::Eof => {\n-                        if meta_item.path.segments.len() != 1 {\n-                            error!(\"argument key must be an identifier\");\n-                        }\n-                        match &meta_item.kind {\n-                            MetaItemKind::List(..) => {\n-                                error!(r#\"expected `key` or `key=\"value\"`\"#);\n-                            }\n-                            MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n-                                error!(\"argument value must be a string\");\n+                match maybe_new_parser_from_source_str(&sess, filename, s.to_string()) {\n+                    Ok(mut parser) => match &mut parser.parse_meta_item() {\n+                        Ok(meta_item) if parser.token == token::Eof => {\n+                            if meta_item.path.segments.len() != 1 {\n+                                error!(\"argument key must be an identifier\");\n                             }\n-                            MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                                let ident = meta_item.ident().expect(\"multi-segment cfg key\");\n-                                return (ident.name, meta_item.value_str());\n+                            match &meta_item.kind {\n+                                MetaItemKind::List(..) => {}\n+                                MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n+                                    error!(\"argument value must be a string\");\n+                                }\n+                                MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n+                                    let ident = meta_item.ident().expect(\"multi-segment cfg key\");\n+                                    return (ident.name, meta_item.value_str());\n+                                }\n                             }\n                         }\n-                    }\n-                    Ok(..) => {}\n-                    Err(err) => err.cancel(),\n+                        Ok(..) => {}\n+                        Err(err) => err.cancel(),\n+                    },\n+                    Err(errs) => errs.into_iter().for_each(|mut err| err.cancel()),\n                 }\n \n                 error!(r#\"expected `key` or `key=\"value\"`\"#);"}, {"sha": "6fdaa8b950aa10d084ea33eaffad046375f2e7d9", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -148,7 +148,7 @@ use self::spec_extend::SpecExtend;\n #[cfg(not(no_global_oom_handling))]\n mod spec_extend;\n \n-/// A contiguous growable array type, written as `Vec<T>` and pronounced 'vector'.\n+/// A contiguous growable array type, written as `Vec<T>`, short for 'vector'.\n ///\n /// # Examples\n ///"}, {"sha": "c64377dfbc8acd9a8383e4ea9f84c31c01c39c63", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -349,6 +349,33 @@ impl<K, V, S> HashMap<K, V, S> {\n         Keys { inner: self.iter() }\n     }\n \n+    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `K`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n+    ///\n+    /// let mut vec: Vec<&str> = map.into_keys().collect();\n+    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n+    /// // keys must be sorted to test them against a sorted array.\n+    /// vec.sort_unstable();\n+    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n+    pub fn into_keys(self) -> IntoKeys<K, V> {\n+        IntoKeys { inner: self.into_iter() }\n+    }\n+\n     /// An iterator visiting all values in arbitrary order.\n     /// The iterator element type is `&'a V`.\n     ///\n@@ -399,6 +426,33 @@ impl<K, V, S> HashMap<K, V, S> {\n         ValuesMut { inner: self.iter_mut() }\n     }\n \n+    /// Creates a consuming iterator visiting all the values in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `V`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n+    ///\n+    /// let mut vec: Vec<i32> = map.into_values().collect();\n+    /// // The `IntoValues` iterator produces values in arbitrary order, so\n+    /// // the values must be sorted to test them against a sorted array.\n+    /// vec.sort_unstable();\n+    /// assert_eq!(vec, [1, 2, 3]);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n+    pub fn into_values(self) -> IntoValues<K, V> {\n+        IntoValues { inner: self.into_iter() }\n+    }\n+\n     /// An iterator visiting all key-value pairs in arbitrary order.\n     /// The iterator element type is `(&'a K, &'a V)`.\n     ///\n@@ -555,6 +609,29 @@ impl<K, V, S> HashMap<K, V, S> {\n         DrainFilter { base: self.base.drain_filter(pred) }\n     }\n \n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n+    /// map.retain(|&k, _| k % 2 == 0);\n+    /// assert_eq!(map.len(), 4);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n+    pub fn retain<F>(&mut self, f: F)\n+    where\n+        F: FnMut(&K, &mut V) -> bool,\n+    {\n+        self.base.retain(f)\n+    }\n+\n     /// Clears the map, removing all key-value pairs. Keeps the allocated memory\n     /// for reuse.\n     ///\n@@ -937,83 +1014,6 @@ where\n     {\n         self.base.remove_entry(k)\n     }\n-\n-    /// Retains only the elements specified by the predicate.\n-    ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n-    /// The elements are visited in unsorted (and unspecified) order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n-    /// map.retain(|&k, _| k % 2 == 0);\n-    /// assert_eq!(map.len(), 4);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n-    pub fn retain<F>(&mut self, f: F)\n-    where\n-        F: FnMut(&K, &mut V) -> bool,\n-    {\n-        self.base.retain(f)\n-    }\n-\n-    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n-    /// The map cannot be used after calling this.\n-    /// The iterator element type is `K`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let map = HashMap::from([\n-    ///     (\"a\", 1),\n-    ///     (\"b\", 2),\n-    ///     (\"c\", 3),\n-    /// ]);\n-    ///\n-    /// let mut vec: Vec<&str> = map.into_keys().collect();\n-    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n-    /// // keys must be sorted to test them against a sorted array.\n-    /// vec.sort_unstable();\n-    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n-    pub fn into_keys(self) -> IntoKeys<K, V> {\n-        IntoKeys { inner: self.into_iter() }\n-    }\n-\n-    /// Creates a consuming iterator visiting all the values in arbitrary order.\n-    /// The map cannot be used after calling this.\n-    /// The iterator element type is `V`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let map = HashMap::from([\n-    ///     (\"a\", 1),\n-    ///     (\"b\", 2),\n-    ///     (\"c\", 3),\n-    /// ]);\n-    ///\n-    /// let mut vec: Vec<i32> = map.into_values().collect();\n-    /// // The `IntoValues` iterator produces values in arbitrary order, so\n-    /// // the values must be sorted to test them against a sorted array.\n-    /// vec.sort_unstable();\n-    /// assert_eq!(vec, [1, 2, 3]);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n-    pub fn into_values(self) -> IntoValues<K, V> {\n-        IntoValues { inner: self.into_iter() }\n-    }\n }\n \n impl<K, V, S> HashMap<K, V, S>"}, {"sha": "0d087772bf931053a54660844e15e6f7997e189a", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -290,6 +290,28 @@ impl<T, S> HashSet<T, S> {\n         DrainFilter { base: self.base.drain_filter(pred) }\n     }\n \n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::from([1, 2, 3, 4, 5, 6]);\n+    /// set.retain(|&k| k % 2 == 0);\n+    /// assert_eq!(set.len(), 3);\n+    /// ```\n+    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n+    pub fn retain<F>(&mut self, f: F)\n+    where\n+        F: FnMut(&T) -> bool,\n+    {\n+        self.base.retain(f)\n+    }\n+\n     /// Clears the set, removing all values.\n     ///\n     /// # Examples\n@@ -906,28 +928,6 @@ where\n     {\n         self.base.take(value)\n     }\n-\n-    /// Retains only the elements specified by the predicate.\n-    ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n-    /// The elements are visited in unsorted (and unspecified) order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashSet;\n-    ///\n-    /// let mut set = HashSet::from([1, 2, 3, 4, 5, 6]);\n-    /// set.retain(|&k| k % 2 == 0);\n-    /// assert_eq!(set.len(), 3);\n-    /// ```\n-    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n-    pub fn retain<F>(&mut self, f: F)\n-    where\n-        F: FnMut(&T) -> bool,\n-    {\n-        self.base.retain(f)\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9f7f10d0d00813a2a7006d6b2390e9d0f2751aae", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -972,10 +972,13 @@ pub fn park_timeout(dur: Duration) {\n \n /// A unique identifier for a running thread.\n ///\n-/// A `ThreadId` is an opaque object that has a unique value for each thread\n-/// that creates one. `ThreadId`s are not guaranteed to correspond to a thread's\n-/// system-designated identifier. A `ThreadId` can be retrieved from the [`id`]\n-/// method on a [`Thread`].\n+/// A `ThreadId` is an opaque object that uniquely identifies each thread\n+/// created during the lifetime of a process. `ThreadId`s are guaranteed not to\n+/// be reused, even when a thread terminates. `ThreadId`s are under the control\n+/// of Rust's standard library and there may not be any relationship between\n+/// `ThreadId` and the underlying platform's notion of a thread identifier --\n+/// the two concepts cannot, therefore, be used interchangeably. A `ThreadId`\n+/// can be retrieved from the [`id`] method on a [`Thread`].\n ///\n /// # Examples\n ///"}, {"sha": "aa0d4888f082dadf7f889c8b18286f0a14dfe54b", "filename": "rustfmt.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -19,7 +19,6 @@ ignore = [\n     \"library/backtrace\",\n     \"library/portable-simd\",\n     \"library/stdarch\",\n-    \"compiler/rustc_codegen_cranelift\",\n     \"compiler/rustc_codegen_gcc\",\n     \"src/doc/book\",\n     \"src/doc/edition-guide\",\n@@ -36,4 +35,9 @@ ignore = [\n     \"src/tools/rust-analyzer\",\n     \"src/tools/rustfmt\",\n     \"src/tools/rust-installer\",\n+\n+    # these are ignored by a standard cargo fmt run\n+    \"compiler/rustc_codegen_cranelift/y.rs\", # running rustfmt breaks this file\n+    \"compiler/rustc_codegen_cranelift/example\",\n+    \"compiler/rustc_codegen_cranelift/scripts\",\n ]"}, {"sha": "b68b2163f873a07291342ffef28dc7e7edbf8bd3", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -44,11 +44,9 @@ libc = \"0.2\"\n serde = { version = \"1.0.8\", features = [\"derive\"] }\n serde_json = \"1.0.2\"\n toml = \"0.5\"\n-lazy_static = \"1.3.0\"\n time = \"0.1\"\n ignore = \"0.4.10\"\n opener = \"0.5\"\n-merge = \"0.1.0\"\n once_cell = \"1.7.2\"\n \n [target.'cfg(windows)'.dependencies.winapi]"}, {"sha": "7105a2457e282329ebee43f59d269ffcd50bc635", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -15,6 +15,8 @@\n //! switching compilers for the bootstrap and for build scripts will probably\n //! never get replaced.\n \n+include!(\"../dylib_util.rs\");\n+\n use std::env;\n use std::path::PathBuf;\n use std::process::{Child, Command};\n@@ -50,11 +52,11 @@ fn main() {\n \n     let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n     let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n-    let mut dylib_path = bootstrap::util::dylib_path();\n+    let mut dylib_path = dylib_path();\n     dylib_path.insert(0, PathBuf::from(&libdir));\n \n     let mut cmd = Command::new(rustc);\n-    cmd.args(&args).env(bootstrap::util::dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+    cmd.args(&args).env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n     // Get the name of the crate we're compiling, if any.\n     let crate_name =\n@@ -161,7 +163,7 @@ fn main() {\n         eprintln!(\n             \"{} command: {:?}={:?} {:?}\",\n             prefix,\n-            bootstrap::util::dylib_path_var(),\n+            dylib_path_var(),\n             env::join_paths(&dylib_path).unwrap(),\n             cmd,\n         );"}, {"sha": "ad3800834b07cc3f8d1892e3835fcfa01c3de612", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -7,6 +7,8 @@ use std::ffi::OsString;\n use std::path::PathBuf;\n use std::process::Command;\n \n+include!(\"../dylib_util.rs\");\n+\n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n@@ -20,14 +22,14 @@ fn main() {\n         Err(_) => 0,\n     };\n \n-    let mut dylib_path = bootstrap::util::dylib_path();\n+    let mut dylib_path = dylib_path();\n     dylib_path.insert(0, PathBuf::from(libdir.clone()));\n \n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n         .arg(\"--sysroot\")\n         .arg(&sysroot)\n-        .env(bootstrap::util::dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+        .env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n     // Force all crates compiled by this compiler to (a) be unstable and (b)\n     // allow the `rustc_private` feature to link to other unstable crates\n@@ -59,7 +61,7 @@ fn main() {\n     if verbose > 1 {\n         eprintln!(\n             \"rustdoc command: {:?}={:?} {:?}\",\n-            bootstrap::util::dylib_path_var(),\n+            dylib_path_var(),\n             env::join_paths(&dylib_path).unwrap(),\n             cmd,\n         );"}, {"sha": "917abde9de1ce34eb81a2783e23d0f475142b341", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -351,7 +351,6 @@ pub enum Kind {\n     Check,\n     Clippy,\n     Fix,\n-    Format,\n     Test,\n     Bench,\n     Dist,\n@@ -399,7 +398,7 @@ impl<'a> Builder<'a> {\n                 native::Lld,\n                 native::CrtBeginEnd\n             ),\n-            Kind::Check | Kind::Clippy { .. } | Kind::Fix | Kind::Format => describe!(\n+            Kind::Check | Kind::Clippy { .. } | Kind::Fix => describe!(\n                 check::Std,\n                 check::Rustc,\n                 check::Rustdoc,"}, {"sha": "fac5d8db5119df6da5c7b4ab1a06241e19eba326", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -13,7 +13,8 @@ use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::sync::Mutex;\n \n-use lazy_static::lazy_static;\n+// FIXME: replace with std::lazy after it gets stabilized and reaches beta\n+use once_cell::sync::Lazy;\n \n use crate::builder::Step;\n \n@@ -222,9 +223,7 @@ impl Interner {\n     }\n }\n \n-lazy_static! {\n-    pub static ref INTERNER: Interner = Interner::default();\n-}\n+pub static INTERNER: Lazy<Interner> = Lazy::new(Interner::default);\n \n /// This is essentially a `HashMap` which allows storing any type in its input and\n /// any type in its output. It is a write-once cache; values are never evicted,"}, {"sha": "5af9248583caefd33ec026ef7b8feb01ce933189", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 204, "deletions": 170, "changes": 374, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -18,7 +18,6 @@ pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::exe;\n use build_helper::t;\n-use merge::Merge;\n use serde::Deserialize;\n \n macro_rules! check_ci_llvm {\n@@ -334,6 +333,10 @@ struct TomlConfig {\n     profile: Option<String>,\n }\n \n+trait Merge {\n+    fn merge(&mut self, other: Self);\n+}\n+\n impl Merge for TomlConfig {\n     fn merge(\n         &mut self,\n@@ -357,105 +360,136 @@ impl Merge for TomlConfig {\n     }\n }\n \n-/// TOML representation of various global build decisions.\n-#[derive(Deserialize, Default, Clone, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Build {\n-    build: Option<String>,\n-    host: Option<Vec<String>>,\n-    target: Option<Vec<String>>,\n-    // This is ignored, the rust code always gets the build directory from the `BUILD_DIR` env variable\n-    build_dir: Option<String>,\n-    cargo: Option<String>,\n-    rustc: Option<String>,\n-    rustfmt: Option<PathBuf>,\n-    docs: Option<bool>,\n-    compiler_docs: Option<bool>,\n-    docs_minification: Option<bool>,\n-    submodules: Option<bool>,\n-    fast_submodules: Option<bool>,\n-    gdb: Option<String>,\n-    nodejs: Option<String>,\n-    npm: Option<String>,\n-    python: Option<String>,\n-    locked_deps: Option<bool>,\n-    vendor: Option<bool>,\n-    full_bootstrap: Option<bool>,\n-    extended: Option<bool>,\n-    tools: Option<HashSet<String>>,\n-    verbose: Option<usize>,\n-    sanitizers: Option<bool>,\n-    profiler: Option<bool>,\n-    cargo_native_static: Option<bool>,\n-    low_priority: Option<bool>,\n-    configure_args: Option<Vec<String>>,\n-    local_rebuild: Option<bool>,\n-    print_step_timings: Option<bool>,\n-    print_step_rusage: Option<bool>,\n-    check_stage: Option<u32>,\n-    doc_stage: Option<u32>,\n-    build_stage: Option<u32>,\n-    test_stage: Option<u32>,\n-    install_stage: Option<u32>,\n-    dist_stage: Option<u32>,\n-    bench_stage: Option<u32>,\n-    patch_binaries_for_nix: Option<bool>,\n+// We are using a decl macro instead of a derive proc macro here to reduce the compile time of\n+// rustbuild.\n+macro_rules! derive_merge {\n+    ($(#[$attr:meta])* struct $name:ident {\n+        $($field:ident: $field_ty:ty,)*\n+    }) => {\n+        $(#[$attr])*\n+        struct $name {\n+            $($field: $field_ty,)*\n+        }\n+\n+        impl Merge for $name {\n+            fn merge(&mut self, other: Self) {\n+                $(\n+                    if !self.$field.is_some() {\n+                        self.$field = other.$field;\n+                    }\n+                )*\n+            }\n+        }\n+    }\n }\n \n-/// TOML representation of various global install decisions.\n-#[derive(Deserialize, Default, Clone, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Install {\n-    prefix: Option<String>,\n-    sysconfdir: Option<String>,\n-    docdir: Option<String>,\n-    bindir: Option<String>,\n-    libdir: Option<String>,\n-    mandir: Option<String>,\n-    datadir: Option<String>,\n+derive_merge! {\n+    /// TOML representation of various global build decisions.\n+    #[derive(Deserialize, Default, Clone)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Build {\n+        build: Option<String>,\n+        host: Option<Vec<String>>,\n+        target: Option<Vec<String>>,\n+        // This is ignored, the rust code always gets the build directory from the `BUILD_DIR` env variable\n+        build_dir: Option<String>,\n+        cargo: Option<String>,\n+        rustc: Option<String>,\n+        rustfmt: Option<PathBuf>,\n+        docs: Option<bool>,\n+        compiler_docs: Option<bool>,\n+        docs_minification: Option<bool>,\n+        submodules: Option<bool>,\n+        fast_submodules: Option<bool>,\n+        gdb: Option<String>,\n+        nodejs: Option<String>,\n+        npm: Option<String>,\n+        python: Option<String>,\n+        locked_deps: Option<bool>,\n+        vendor: Option<bool>,\n+        full_bootstrap: Option<bool>,\n+        extended: Option<bool>,\n+        tools: Option<HashSet<String>>,\n+        verbose: Option<usize>,\n+        sanitizers: Option<bool>,\n+        profiler: Option<bool>,\n+        cargo_native_static: Option<bool>,\n+        low_priority: Option<bool>,\n+        configure_args: Option<Vec<String>>,\n+        local_rebuild: Option<bool>,\n+        print_step_timings: Option<bool>,\n+        print_step_rusage: Option<bool>,\n+        check_stage: Option<u32>,\n+        doc_stage: Option<u32>,\n+        build_stage: Option<u32>,\n+        test_stage: Option<u32>,\n+        install_stage: Option<u32>,\n+        dist_stage: Option<u32>,\n+        bench_stage: Option<u32>,\n+        patch_binaries_for_nix: Option<bool>,\n+    }\n }\n \n-/// TOML representation of how the LLVM build is configured.\n-#[derive(Deserialize, Default, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Llvm {\n-    skip_rebuild: Option<bool>,\n-    optimize: Option<bool>,\n-    thin_lto: Option<bool>,\n-    release_debuginfo: Option<bool>,\n-    assertions: Option<bool>,\n-    tests: Option<bool>,\n-    plugins: Option<bool>,\n-    ccache: Option<StringOrBool>,\n-    version_check: Option<bool>,\n-    static_libstdcpp: Option<bool>,\n-    ninja: Option<bool>,\n-    targets: Option<String>,\n-    experimental_targets: Option<String>,\n-    link_jobs: Option<u32>,\n-    link_shared: Option<bool>,\n-    version_suffix: Option<String>,\n-    clang_cl: Option<String>,\n-    cflags: Option<String>,\n-    cxxflags: Option<String>,\n-    ldflags: Option<String>,\n-    use_libcxx: Option<bool>,\n-    use_linker: Option<String>,\n-    allow_old_toolchain: Option<bool>,\n-    polly: Option<bool>,\n-    clang: Option<bool>,\n-    download_ci_llvm: Option<StringOrBool>,\n+derive_merge! {\n+    /// TOML representation of various global install decisions.\n+    #[derive(Deserialize, Default, Clone)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Install {\n+        prefix: Option<String>,\n+        sysconfdir: Option<String>,\n+        docdir: Option<String>,\n+        bindir: Option<String>,\n+        libdir: Option<String>,\n+        mandir: Option<String>,\n+        datadir: Option<String>,\n+    }\n }\n \n-#[derive(Deserialize, Default, Clone, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Dist {\n-    sign_folder: Option<String>,\n-    gpg_password_file: Option<String>,\n-    upload_addr: Option<String>,\n-    src_tarball: Option<bool>,\n-    missing_tools: Option<bool>,\n-    compression_formats: Option<Vec<String>>,\n+derive_merge! {\n+    /// TOML representation of how the LLVM build is configured.\n+    #[derive(Deserialize, Default)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Llvm {\n+        skip_rebuild: Option<bool>,\n+        optimize: Option<bool>,\n+        thin_lto: Option<bool>,\n+        release_debuginfo: Option<bool>,\n+        assertions: Option<bool>,\n+        tests: Option<bool>,\n+        plugins: Option<bool>,\n+        ccache: Option<StringOrBool>,\n+        version_check: Option<bool>,\n+        static_libstdcpp: Option<bool>,\n+        ninja: Option<bool>,\n+        targets: Option<String>,\n+        experimental_targets: Option<String>,\n+        link_jobs: Option<u32>,\n+        link_shared: Option<bool>,\n+        version_suffix: Option<String>,\n+        clang_cl: Option<String>,\n+        cflags: Option<String>,\n+        cxxflags: Option<String>,\n+        ldflags: Option<String>,\n+        use_libcxx: Option<bool>,\n+        use_linker: Option<String>,\n+        allow_old_toolchain: Option<bool>,\n+        polly: Option<bool>,\n+        clang: Option<bool>,\n+        download_ci_llvm: Option<StringOrBool>,\n+    }\n+}\n+\n+derive_merge! {\n+    #[derive(Deserialize, Default, Clone)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Dist {\n+        sign_folder: Option<String>,\n+        gpg_password_file: Option<String>,\n+        upload_addr: Option<String>,\n+        src_tarball: Option<bool>,\n+        missing_tools: Option<bool>,\n+        compression_formats: Option<Vec<String>>,\n+    }\n }\n \n #[derive(Deserialize)]\n@@ -471,80 +505,84 @@ impl Default for StringOrBool {\n     }\n }\n \n-/// TOML representation of how the Rust build is configured.\n-#[derive(Deserialize, Default, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct Rust {\n-    optimize: Option<bool>,\n-    debug: Option<bool>,\n-    codegen_units: Option<u32>,\n-    codegen_units_std: Option<u32>,\n-    debug_assertions: Option<bool>,\n-    debug_assertions_std: Option<bool>,\n-    overflow_checks: Option<bool>,\n-    overflow_checks_std: Option<bool>,\n-    debug_logging: Option<bool>,\n-    debuginfo_level: Option<u32>,\n-    debuginfo_level_rustc: Option<u32>,\n-    debuginfo_level_std: Option<u32>,\n-    debuginfo_level_tools: Option<u32>,\n-    debuginfo_level_tests: Option<u32>,\n-    run_dsymutil: Option<bool>,\n-    backtrace: Option<bool>,\n-    incremental: Option<bool>,\n-    parallel_compiler: Option<bool>,\n-    default_linker: Option<String>,\n-    channel: Option<String>,\n-    description: Option<String>,\n-    musl_root: Option<String>,\n-    rpath: Option<bool>,\n-    verbose_tests: Option<bool>,\n-    optimize_tests: Option<bool>,\n-    codegen_tests: Option<bool>,\n-    ignore_git: Option<bool>,\n-    dist_src: Option<bool>,\n-    save_toolstates: Option<String>,\n-    codegen_backends: Option<Vec<String>>,\n-    lld: Option<bool>,\n-    use_lld: Option<bool>,\n-    llvm_tools: Option<bool>,\n-    deny_warnings: Option<bool>,\n-    backtrace_on_ice: Option<bool>,\n-    verify_llvm_ir: Option<bool>,\n-    thin_lto_import_instr_limit: Option<u32>,\n-    remap_debuginfo: Option<bool>,\n-    jemalloc: Option<bool>,\n-    test_compare_mode: Option<bool>,\n-    llvm_libunwind: Option<String>,\n-    control_flow_guard: Option<bool>,\n-    new_symbol_mangling: Option<bool>,\n-    profile_generate: Option<String>,\n-    profile_use: Option<String>,\n-    // ignored; this is set from an env var set by bootstrap.py\n-    download_rustc: Option<StringOrBool>,\n+derive_merge! {\n+    /// TOML representation of how the Rust build is configured.\n+    #[derive(Deserialize, Default)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct Rust {\n+        optimize: Option<bool>,\n+        debug: Option<bool>,\n+        codegen_units: Option<u32>,\n+        codegen_units_std: Option<u32>,\n+        debug_assertions: Option<bool>,\n+        debug_assertions_std: Option<bool>,\n+        overflow_checks: Option<bool>,\n+        overflow_checks_std: Option<bool>,\n+        debug_logging: Option<bool>,\n+        debuginfo_level: Option<u32>,\n+        debuginfo_level_rustc: Option<u32>,\n+        debuginfo_level_std: Option<u32>,\n+        debuginfo_level_tools: Option<u32>,\n+        debuginfo_level_tests: Option<u32>,\n+        run_dsymutil: Option<bool>,\n+        backtrace: Option<bool>,\n+        incremental: Option<bool>,\n+        parallel_compiler: Option<bool>,\n+        default_linker: Option<String>,\n+        channel: Option<String>,\n+        description: Option<String>,\n+        musl_root: Option<String>,\n+        rpath: Option<bool>,\n+        verbose_tests: Option<bool>,\n+        optimize_tests: Option<bool>,\n+        codegen_tests: Option<bool>,\n+        ignore_git: Option<bool>,\n+        dist_src: Option<bool>,\n+        save_toolstates: Option<String>,\n+        codegen_backends: Option<Vec<String>>,\n+        lld: Option<bool>,\n+        use_lld: Option<bool>,\n+        llvm_tools: Option<bool>,\n+        deny_warnings: Option<bool>,\n+        backtrace_on_ice: Option<bool>,\n+        verify_llvm_ir: Option<bool>,\n+        thin_lto_import_instr_limit: Option<u32>,\n+        remap_debuginfo: Option<bool>,\n+        jemalloc: Option<bool>,\n+        test_compare_mode: Option<bool>,\n+        llvm_libunwind: Option<String>,\n+        control_flow_guard: Option<bool>,\n+        new_symbol_mangling: Option<bool>,\n+        profile_generate: Option<String>,\n+        profile_use: Option<String>,\n+        // ignored; this is set from an env var set by bootstrap.py\n+        download_rustc: Option<StringOrBool>,\n+    }\n }\n \n-/// TOML representation of how each build target is configured.\n-#[derive(Deserialize, Default, Merge)]\n-#[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n-struct TomlTarget {\n-    cc: Option<String>,\n-    cxx: Option<String>,\n-    ar: Option<String>,\n-    ranlib: Option<String>,\n-    default_linker: Option<PathBuf>,\n-    linker: Option<String>,\n-    llvm_config: Option<String>,\n-    llvm_filecheck: Option<String>,\n-    android_ndk: Option<String>,\n-    sanitizers: Option<bool>,\n-    profiler: Option<bool>,\n-    crt_static: Option<bool>,\n-    musl_root: Option<String>,\n-    musl_libdir: Option<String>,\n-    wasi_root: Option<String>,\n-    qemu_rootfs: Option<String>,\n-    no_std: Option<bool>,\n+derive_merge! {\n+    /// TOML representation of how each build target is configured.\n+    #[derive(Deserialize, Default)]\n+    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    struct TomlTarget {\n+        cc: Option<String>,\n+        cxx: Option<String>,\n+        ar: Option<String>,\n+        ranlib: Option<String>,\n+        default_linker: Option<PathBuf>,\n+        linker: Option<String>,\n+        llvm_config: Option<String>,\n+        llvm_filecheck: Option<String>,\n+        android_ndk: Option<String>,\n+        sanitizers: Option<bool>,\n+        profiler: Option<bool>,\n+        crt_static: Option<bool>,\n+        musl_root: Option<String>,\n+        musl_libdir: Option<String>,\n+        wasi_root: Option<String>,\n+        qemu_rootfs: Option<String>,\n+        no_std: Option<bool>,\n+    }\n }\n \n impl Config {\n@@ -1111,10 +1149,6 @@ impl Config {\n         self.verbose > 0\n     }\n \n-    pub fn very_verbose(&self) -> bool {\n-        self.verbose > 1\n-    }\n-\n     pub fn sanitizers_enabled(&self, target: TargetSelection) -> bool {\n         self.target_config.get(&target).map(|t| t.sanitizers).flatten().unwrap_or(self.sanitizers)\n     }"}, {"sha": "6d75272c50130ae6c03c75e13db95c94dd4386c1", "filename": "src/bootstrap/dylib_util.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fdylib_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Fdylib_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdylib_util.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -0,0 +1,28 @@\n+// Various utilities for working with dylib paths.\n+//\n+// This file is meant to be included directly to avoid a dependency on the bootstrap library from\n+// the rustc and rustdoc wrappers. This improves compilation time by reducing the linking time.\n+\n+/// Returns the environment variable which the dynamic library lookup path\n+/// resides in for this platform.\n+pub fn dylib_path_var() -> &'static str {\n+    if cfg!(target_os = \"windows\") {\n+        \"PATH\"\n+    } else if cfg!(target_os = \"macos\") {\n+        \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n+    } else {\n+        \"LD_LIBRARY_PATH\"\n+    }\n+}\n+\n+/// Parses the `dylib_path_var()` environment variable, returning a list of\n+/// paths that are members of this lookup path.\n+pub fn dylib_path() -> Vec<PathBuf> {\n+    let var = match env::var_os(dylib_path_var()) {\n+        Some(v) => v,\n+        None => return vec![],\n+    };\n+    env::split_paths(&var).collect()\n+}"}, {"sha": "8569089f70128beff3440f296c6859c3b853dd59", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -110,7 +110,6 @@ use std::fs::{self, File, OpenOptions};\n use std::io::{Read, Seek, SeekFrom, Write};\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n-use std::slice;\n use std::str;\n \n #[cfg(unix)]\n@@ -472,10 +471,6 @@ impl Build {\n         build\n     }\n \n-    pub fn build_triple(&self) -> &[Interned<String>] {\n-        slice::from_ref(&self.build.triple)\n-    }\n-\n     // modified from `check_submodule` and `update_submodule` in bootstrap.py\n     /// Given a path to the directory of a submodule, update it.\n     ///"}, {"sha": "ee58bedcc8735104091947eead2b8b5af2dcd833", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -16,11 +16,6 @@ use build_helper::t;\n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n \n-/// Returns the `name` as the filename of a static library for `target`.\n-pub fn staticlib(name: &str, target: TargetSelection) -> String {\n-    if target.contains(\"windows\") { format!(\"{}.lib\", name) } else { format!(\"lib{}.a\", name) }\n-}\n-\n /// Given an executable called `name`, return the filename for the\n /// executable for a particular target.\n pub fn exe(name: &str, target: TargetSelection) -> String {\n@@ -54,29 +49,7 @@ pub fn add_dylib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n     cmd.env(dylib_path_var(), t!(env::join_paths(list)));\n }\n \n-/// Returns the environment variable which the dynamic library lookup path\n-/// resides in for this platform.\n-pub fn dylib_path_var() -> &'static str {\n-    if cfg!(target_os = \"windows\") {\n-        \"PATH\"\n-    } else if cfg!(target_os = \"macos\") {\n-        \"DYLD_LIBRARY_PATH\"\n-    } else if cfg!(target_os = \"haiku\") {\n-        \"LIBRARY_PATH\"\n-    } else {\n-        \"LD_LIBRARY_PATH\"\n-    }\n-}\n-\n-/// Parses the `dylib_path_var()` environment variable, returning a list of\n-/// paths that are members of this lookup path.\n-pub fn dylib_path() -> Vec<PathBuf> {\n-    let var = match env::var_os(dylib_path_var()) {\n-        Some(v) => v,\n-        None => return vec![],\n-    };\n-    env::split_paths(&var).collect()\n-}\n+include!(\"dylib_util.rs\");\n \n /// Adds a list of lookup paths to `cmd`'s link library lookup path.\n pub fn add_link_lib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n@@ -103,21 +76,6 @@ fn link_lib_path() -> Vec<PathBuf> {\n     env::split_paths(&var).collect()\n }\n \n-/// `push` all components to `buf`. On windows, append `.exe` to the last component.\n-pub fn push_exe_path(mut buf: PathBuf, components: &[&str]) -> PathBuf {\n-    let (&file, components) = components.split_last().expect(\"at least one component required\");\n-    let mut file = file.to_owned();\n-\n-    if cfg!(windows) {\n-        file.push_str(\".exe\");\n-    }\n-\n-    buf.extend(components);\n-    buf.push(file);\n-\n-    buf\n-}\n-\n pub struct TimeIt(bool, Instant);\n \n /// Returns an RAII structure that prints out how long it took to drop."}, {"sha": "d0d89cbf126b480d0e65ff461270f5f04c5dbe59", "filename": "src/test/rustdoc/where-clause-order.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -0,0 +1,15 @@\n+#![crate_name = \"foo\"]\n+\n+pub trait SomeTrait<Rhs = Self>\n+where Rhs: ?Sized\n+{}\n+\n+// @has 'foo/trait.SomeTrait.html'\n+// @has - \"//div[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n+impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where\n+    A: PartialOrd<A> + PartialEq<A>,\n+    B: PartialOrd<B> + PartialEq<B>,\n+    C: PartialOrd<C> + PartialEq<C>,\n+    D: PartialOrd<D> + PartialEq<D>,\n+    E: PartialOrd<E> + PartialEq<E> + ?Sized\n+{}"}, {"sha": "1d7fa7885348ef8509bad200af0ca22c1810fde2", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-8.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --cfg )\n+// error-pattern: invalid `--cfg` argument: `)` (expected `key` or `key=\"value\"`)\n+fn main() {}"}, {"sha": "7bb1814127b292e43a0b26c6d8a05cd707ccf3a9", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-8.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b13c628a214a03f4f45b80e26313df55654d254/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b13c628a214a03f4f45b80e26313df55654d254/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr?ref=7b13c628a214a03f4f45b80e26313df55654d254", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--cfg` argument: `)` (expected `key` or `key=\"value\"`)\n+"}]}