{"sha": "a835d7487cc729a2a64149709229fb62af2d78fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzVkNzQ4N2NjNzI5YTJhNjQxNDk3MDkyMjlmYjYyYWYyZDc4ZmM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-06-16T10:28:39Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-06-16T10:28:39Z"}, "message": "save-analysis: add a decl_id for methods\n\nThis is non-null if the method is in a (non-inherent) impl and in that case will be the id for the method declaration in the implemented trait.", "tree": {"sha": "c05184188bf26b76851426b8665d4764f1672fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c05184188bf26b76851426b8665d4764f1672fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a835d7487cc729a2a64149709229fb62af2d78fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a835d7487cc729a2a64149709229fb62af2d78fc", "html_url": "https://github.com/rust-lang/rust/commit/a835d7487cc729a2a64149709229fb62af2d78fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a835d7487cc729a2a64149709229fb62af2d78fc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28374ef0b1b787ba039f55341caae88081ccc78", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28374ef0b1b787ba039f55341caae88081ccc78", "html_url": "https://github.com/rust-lang/rust/commit/c28374ef0b1b787ba039f55341caae88081ccc78"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "15aaa77cc3518fe3ef7a6a587b0fa539c58c4ef9", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a835d7487cc729a2a64149709229fb62af2d78fc/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a835d7487cc729a2a64149709229fb62af2d78fc/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=a835d7487cc729a2a64149709229fb62af2d78fc", "patch": "@@ -214,6 +214,7 @@ pub struct MethodData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub value: String,\n+    pub decl_id: Option<DefId>,\n }\n \n /// Data for modules."}, {"sha": "56c7436a8fe5c3b08875bfa642fe81b21493322e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a835d7487cc729a2a64149709229fb62af2d78fc/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a835d7487cc729a2a64149709229fb62af2d78fc/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a835d7487cc729a2a64149709229fb62af2d78fc", "patch": "@@ -30,7 +30,7 @@\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::session::Session;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, ImplOrTraitItem, ImplOrTraitItemContainer};\n \n use std::collections::HashSet;\n use std::hash::*;\n@@ -381,24 +381,42 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n \n             let sig_str = ::make_signature(&sig.decl, &sig.generics);\n             if body.is_some() {\n-                if !self.span.filter_generated(Some(method_data.span), span) {\n-                    let mut data = method_data.clone();\n-                    data.value = sig_str;\n-                    self.dumper.function(data.lower(self.tcx));\n-                }\n                 self.process_formals(&sig.decl.inputs, &method_data.qualname);\n-            } else {\n-                if !self.span.filter_generated(Some(method_data.span), span) {\n-                    self.dumper.method(MethodData {\n-                        id: method_data.id,\n-                        name: method_data.name,\n-                        span: method_data.span,\n-                        scope: method_data.scope,\n-                        qualname: method_data.qualname.clone(),\n-                        value: sig_str,\n-                    }.lower(self.tcx));\n-                }\n             }\n+\n+            // If the method is defined in an impl, then try and find the corresponding\n+            // method decl in a trait, and if there is one, make a decl_id for it. This\n+            // requires looking up the impl, then the trait, then searching for a method\n+            // with the right name.\n+            if !self.span.filter_generated(Some(method_data.span), span) {\n+                let container =\n+                    self.tcx.impl_or_trait_item(self.tcx.map.local_def_id(id)).container();\n+                let decl_id = if let ImplOrTraitItemContainer::ImplContainer(id) = container {\n+                    self.tcx.trait_id_of_impl(id).and_then(|id| {\n+                        for item in &**self.tcx.trait_items(id) {\n+                            if let &ImplOrTraitItem::MethodTraitItem(ref m) = item {\n+                                if m.name == name {\n+                                    return Some(m.def_id);\n+                                }\n+                            }\n+                        }\n+                        None\n+                    })\n+                } else {\n+                    None\n+                };\n+\n+                self.dumper.method(MethodData {\n+                    id: method_data.id,\n+                    name: method_data.name,\n+                    span: method_data.span,\n+                    scope: method_data.scope,\n+                    qualname: method_data.qualname.clone(),\n+                    value: sig_str,\n+                    decl_id: decl_id,\n+                }.lower(self.tcx));\n+            }\n+\n             self.process_generic_params(&sig.generics, span, &method_data.qualname, id);\n         }\n "}, {"sha": "7efd2624561e7ff915b8099df602d96cfe1c83fe", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a835d7487cc729a2a64149709229fb62af2d78fc/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a835d7487cc729a2a64149709229fb62af2d78fc/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=a835d7487cc729a2a64149709229fb62af2d78fc", "patch": "@@ -321,6 +321,7 @@ pub struct MethodData {\n     pub span: SpanData,\n     pub scope: DefId,\n     pub value: String,\n+    pub decl_id: Option<DefId>,\n }\n \n impl Lower for data::MethodData {\n@@ -334,6 +335,7 @@ impl Lower for data::MethodData {\n             id: make_def_id(self.id, &tcx.map),\n             qualname: self.qualname,\n             value: self.value,\n+            decl_id: self.decl_id,\n         }\n     }\n }"}, {"sha": "b1955cbd7b8016cc9b0d85ea99b2f52d17c7286a", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a835d7487cc729a2a64149709229fb62af2d78fc/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a835d7487cc729a2a64149709229fb62af2d78fc/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=a835d7487cc729a2a64149709229fb62af2d78fc", "patch": "@@ -182,6 +182,7 @@ struct Def {\n     qualname: String,\n     value: String,\n     children: Vec<Id>,\n+    decl_id: Option<Id>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -221,6 +222,7 @@ impl From<EnumData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n         }\n     }\n }\n@@ -235,6 +237,7 @@ impl From<TupleVariantData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n@@ -248,6 +251,7 @@ impl From<StructVariantData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n@@ -261,6 +265,7 @@ impl From<StructData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n         }\n     }\n }\n@@ -274,6 +279,7 @@ impl From<TraitData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n         }\n     }\n }\n@@ -287,6 +293,7 @@ impl From<FunctionData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n@@ -300,6 +307,7 @@ impl From<MethodData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: vec![],\n+            decl_id: data.decl_id.map(|id| From::from(id)),\n         }\n     }\n }\n@@ -313,6 +321,7 @@ impl From<MacroData> for Def {\n             qualname: data.qualname,\n             value: String::new(),\n             children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n@@ -326,6 +335,7 @@ impl From<ModData> for Def {\n             qualname: data.qualname,\n             value: data.filename,\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n         }\n     }\n }\n@@ -339,6 +349,7 @@ impl From<TypeDefData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: vec![],\n+            decl_id: None,\n         }\n     }\n }\n@@ -357,6 +368,7 @@ impl From<VariableData> for Def {\n             qualname: data.qualname,\n             value: data.value,\n             children: vec![],\n+            decl_id: None,\n         }\n     }\n }"}]}