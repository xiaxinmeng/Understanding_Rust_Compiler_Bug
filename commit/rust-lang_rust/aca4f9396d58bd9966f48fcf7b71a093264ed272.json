{"sha": "aca4f9396d58bd9966f48fcf7b71a093264ed272", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYTRmOTM5NmQ1OGJkOTk2NmY0OGZjZjdiNzFhMDkzMjY0ZWQyNzI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T21:32:52Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:55Z"}, "message": "mir: Get the right non-reference type for binding patterns.", "tree": {"sha": "f78c3166da01f9f99f95b448e0f4a44ea45c70b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f78c3166da01f9f99f95b448e0f4a44ea45c70b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca4f9396d58bd9966f48fcf7b71a093264ed272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca4f9396d58bd9966f48fcf7b71a093264ed272", "html_url": "https://github.com/rust-lang/rust/commit/aca4f9396d58bd9966f48fcf7b71a093264ed272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca4f9396d58bd9966f48fcf7b71a093264ed272/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf4daf7889706d618a66d5c10332764a0793f05e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4daf7889706d618a66d5c10332764a0793f05e", "html_url": "https://github.com/rust-lang/rust/commit/cf4daf7889706d618a66d5c10332764a0793f05e"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "0efa24f3119432af582b4003f374a42d5fa14e9a", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca4f9396d58bd9966f48fcf7b71a093264ed272/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca4f9396d58bd9966f48fcf7b71a093264ed272/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=aca4f9396d58bd9966f48fcf7b71a093264ed272", "patch": "@@ -488,7 +488,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                        .map(|subpattern| {\n                            // e.g., `(x as Variant).0`\n                            let lvalue = downcast_lvalue.clone().field(subpattern.field,\n-                                                                      subpattern.field_ty());\n+                                                                      subpattern.pattern.ty);\n                            // e.g., `(x as Variant).0 @ P1`\n                            MatchPair::new(lvalue, &subpattern.pattern)\n                        });"}, {"sha": "b46c3ffb76a1b82dab822db1771059eb88f14089", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca4f9396d58bd9966f48fcf7b71a093264ed272/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca4f9396d58bd9966f48fcf7b71a093264ed272/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=aca4f9396d58bd9966f48fcf7b71a093264ed272", "patch": "@@ -22,7 +22,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         subpatterns.iter()\n                    .map(|fieldpat| {\n                        let lvalue = lvalue.clone().field(fieldpat.field,\n-                                                         fieldpat.field_ty());\n+                                                         fieldpat.pattern.ty);\n                        MatchPair::new(lvalue, &fieldpat.pattern)\n                    })\n                    .collect()"}, {"sha": "232404417e0e4f605709a3f5e06015f4c6739e17", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aca4f9396d58bd9966f48fcf7b71a093264ed272/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca4f9396d58bd9966f48fcf7b71a093264ed272/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=aca4f9396d58bd9966f48fcf7b71a093264ed272", "patch": "@@ -63,6 +63,8 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n     }\n \n     fn to_pattern(&mut self, pat: &hir::Pat) -> Pattern<'tcx> {\n+        let mut ty = self.cx.tcx.node_id_to_type(pat.id);\n+\n         let kind = match pat.node {\n             PatKind::Wild => PatternKind::Wild,\n \n@@ -169,6 +171,17 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                     hir::BindByRef(hir::MutImmutable) =>\n                         (Mutability::Not, BindingMode::ByRef(region.unwrap(), BorrowKind::Shared)),\n                 };\n+\n+                // A ref x pattern is the same node used for x, and as such it has\n+                // x's type, which is &T, where we want T (the type being matched).\n+                if let hir::BindByRef(_) = bm {\n+                    if let ty::TyRef(_, mt) = ty.sty {\n+                        ty = mt.ty;\n+                    } else {\n+                        unreachable!(\"`ref {}` has wrong type {}\", ident.node, ty);\n+                    }\n+                }\n+\n                 PatternKind::Binding {\n                     mutability: mutability,\n                     mode: mode,\n@@ -234,8 +247,6 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n             }\n         };\n \n-        let ty = self.cx.tcx.node_id_to_type(pat.id);\n-\n         Pattern {\n             span: pat.span,\n             ty: ty,\n@@ -314,20 +325,3 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n         }\n     }\n }\n-\n-impl<'tcx> FieldPattern<'tcx> {\n-    pub fn field_ty(&self) -> Ty<'tcx> {\n-        debug!(\"field_ty({:?},ty={:?})\", self, self.pattern.ty);\n-        let r = match *self.pattern.kind {\n-            PatternKind::Binding { mode: BindingMode::ByRef(..), ..} => {\n-                match self.pattern.ty.sty {\n-                    ty::TyRef(_, mt) => mt.ty,\n-                    _ => unreachable!()\n-                }\n-            }\n-            _ => self.pattern.ty\n-        };\n-        debug!(\"field_ty -> {:?}\", r);\n-        r\n-    }\n-}"}]}