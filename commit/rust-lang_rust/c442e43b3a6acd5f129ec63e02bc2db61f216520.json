{"sha": "c442e43b3a6acd5f129ec63e02bc2db61f216520", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NDJlNDNiM2E2YWNkNWYxMjllYzYzZTAyYmMyZGI2MWYyMTY1MjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-29T19:58:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T19:58:25Z"}, "message": "Rollup merge of #71862 - LeSeulArtichaut:unsafe-block-in-unsafe-fn, r=nikomatsakis\n\nImplement RFC 2585: unsafe blocks in unsafe fn\n\nTracking issue: #71668\nr? @RalfJung cc @nikomatsakis", "tree": {"sha": "043e639d6c25d9cf907ade7db2df57b7d46d2650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/043e639d6c25d9cf907ade7db2df57b7d46d2650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c442e43b3a6acd5f129ec63e02bc2db61f216520", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0WliCRBK7hj4Ov3rIwAAdHIIAKUMgDdGSzdtC9zu8C/Ez1ob\noM5FcVUfDY9jZU/SYV4n3veysuOt7hZ+tPmxdTBvloCeFPjmmwoVMC27b3ftuabH\n4V2OMJ0p1bc0CjhJO1Ecgv97qrkY2MhtUGMpzYZ5Kn3DIVOUD9xvPAw7HQzz9bU5\nlxCRKaCiX/+A2bJb3X5EpcQYwjn9JDvHgR45kZnmlzd5wmH1JuPN479E8jbF/dzu\nDtoBMJKJi9oRXxDVcNWmH8x//he0fYAoKAm0OGTXWpPYWnzMCGMI1+iOl2sVXAIv\nVVlgIAge3/kOJ1c9okCjNlFaqgujxvPq4GCJakh7+hfbWNTCFO9Ode6Fi/bLZGQ=\n=/cLc\n-----END PGP SIGNATURE-----\n", "payload": "tree 043e639d6c25d9cf907ade7db2df57b7d46d2650\nparent 7aef3a0f6f8c86cc90b4a6b209b7167d2ac34e12\nparent 0e3b31c641217542f02b40527b0d299d9534b920\nauthor Ralf Jung <post@ralfj.de> 1590782305 +0200\ncommitter GitHub <noreply@github.com> 1590782305 +0200\n\nRollup merge of #71862 - LeSeulArtichaut:unsafe-block-in-unsafe-fn, r=nikomatsakis\n\nImplement RFC 2585: unsafe blocks in unsafe fn\n\nTracking issue: #71668\nr? @RalfJung cc @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c442e43b3a6acd5f129ec63e02bc2db61f216520", "html_url": "https://github.com/rust-lang/rust/commit/c442e43b3a6acd5f129ec63e02bc2db61f216520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c442e43b3a6acd5f129ec63e02bc2db61f216520/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aef3a0f6f8c86cc90b4a6b209b7167d2ac34e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aef3a0f6f8c86cc90b4a6b209b7167d2ac34e12", "html_url": "https://github.com/rust-lang/rust/commit/7aef3a0f6f8c86cc90b4a6b209b7167d2ac34e12"}, {"sha": "0e3b31c641217542f02b40527b0d299d9534b920", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3b31c641217542f02b40527b0d299d9534b920", "html_url": "https://github.com/rust-lang/rust/commit/0e3b31c641217542f02b40527b0d299d9534b920"}], "stats": {"total": 556, "additions": 527, "deletions": 29}, "files": [{"sha": "fd35cb6c3f78557354c2912ff274620eb8dd6d37", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -571,6 +571,9 @@ declare_features! (\n     /// Allows the use of `#[ffi_const]` on foreign functions.\n     (active, ffi_const, \"1.45.0\", Some(58328), None),\n \n+    /// No longer treat an unsafe function as an unsafe block.\n+    (active, unsafe_block_in_unsafe_fn, \"1.45.0\", Some(71668), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "3d2ddf12a0a1f933042a88f7765d8e1740906163", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -14,11 +14,11 @@ use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{struct_lint_level, LintLevelMap, LintLevelSets, LintSet, LintSource};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::lint::{builtin, Level, Lint};\n+use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n \n use std::cmp;\n \n@@ -80,11 +80,13 @@ impl<'s> LintLevelsBuilder<'s> {\n             let level = cmp::min(level, self.sets.lint_cap);\n \n             let lint_flag_val = Symbol::intern(lint_name);\n+\n             let ids = match store.find_lints(&lint_name) {\n                 Ok(ids) => ids,\n                 Err(_) => continue, // errors handled in check_lint_name_cmdline above\n             };\n             for id in ids {\n+                self.check_gated_lint(id, DUMMY_SP);\n                 let src = LintSource::CommandLine(lint_flag_val);\n                 specs.insert(id, (level, src));\n             }\n@@ -213,6 +215,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintSource::Node(name, li.span(), reason);\n                         for id in ids {\n+                            self.check_gated_lint(*id, attr.span);\n                             specs.insert(*id, (level, src));\n                         }\n                     }\n@@ -383,6 +386,20 @@ impl<'s> LintLevelsBuilder<'s> {\n         BuilderPush { prev, changed: prev != self.cur }\n     }\n \n+    fn check_gated_lint(&self, id: LintId, span: Span) {\n+        if id == LintId::of(builtin::UNSAFE_OP_IN_UNSAFE_FN)\n+            && !self.sess.features_untracked().unsafe_block_in_unsafe_fn\n+        {\n+            feature_err(\n+                &self.sess.parse_sess,\n+                sym::unsafe_block_in_unsafe_fn,\n+                span,\n+                \"the `unsafe_op_in_unsafe_fn` lint is unstable\",\n+            )\n+            .emit();\n+        }\n+    }\n+\n     /// Called after `push` when the scope of a set of attributes are exited.\n     pub fn pop(&mut self, push: BuilderPush) {\n         self.cur = push.prev;"}, {"sha": "20c64d40fabbd5b4cd9cc4936347087481eef384", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -408,7 +408,7 @@ impl<'tcx> Body<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum Safety {\n     Safe,\n     /// Unsafe because of a PushUnsafeBlock"}, {"sha": "99bfb74c243b47c7742c4d30bd57764d92c0b126", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -15,15 +15,27 @@ use super::{Field, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UnsafetyViolationKind {\n+    /// Only permitted in regular `fn`s, prohibitted in `const fn`s.\n     General,\n     /// Permitted both in `const fn`s and regular `fn`s.\n     GeneralAndConstFn,\n-    BorrowPacked(hir::HirId),\n+    /// Borrow of packed field.\n+    /// Has to be handled as a lint for backwards compatibility.\n+    BorrowPacked,\n+    /// Unsafe operation in an `unsafe fn` but outside an `unsafe` block.\n+    /// Has to be handled as a lint for backwards compatibility.\n+    /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n+    UnsafeFn,\n+    /// Borrow of packed field in an `unsafe fn` but outside an `unsafe` block.\n+    /// Has to be handled as a lint for backwards compatibility.\n+    /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n+    UnsafeFnBorrowPacked,\n }\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n+    pub lint_root: hir::HirId,\n     pub description: Symbol,\n     pub details: Symbol,\n     pub kind: UnsafetyViolationKind,"}, {"sha": "1f01bc0e19513456c81cf95f1bed5dfd63f6c3f7", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 117, "deletions": 23, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -2,14 +2,16 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n use rustc_hir::Node;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n+use rustc_session::lint::builtin::{SAFE_PACKED_BORROWS, UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n+use rustc_session::lint::Level;\n use rustc_span::symbol::{sym, Symbol};\n \n use std::ops::Bound;\n@@ -202,25 +204,30 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n         if context.is_borrow() {\n             if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n-                let source_info = self.source_info;\n-                let lint_root = self.body.source_scopes[source_info.scope]\n-                    .local_data\n-                    .as_ref()\n-                    .assert_crate_local()\n-                    .lint_root;\n                 self.require_unsafe(\n                     \"borrow of packed field\",\n                     \"fields of packed structs might be misaligned: dereferencing a \\\n                     misaligned pointer or even just creating a misaligned reference \\\n                     is undefined behavior\",\n-                    UnsafetyViolationKind::BorrowPacked(lint_root),\n+                    UnsafetyViolationKind::BorrowPacked,\n                 );\n             }\n         }\n \n         for (i, elem) in place.projection.iter().enumerate() {\n             let proj_base = &place.projection[..i];\n-            let old_source_info = self.source_info;\n+            if context.is_borrow() {\n+                if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n+                    self.require_unsafe(\n+                        \"borrow of packed field\",\n+                        \"fields of packed structs might be misaligned: dereferencing a \\\n+                        misaligned pointer or even just creating a misaligned reference \\\n+                        is undefined behavior\",\n+                        UnsafetyViolationKind::BorrowPacked,\n+                    );\n+                }\n+            }\n+            let source_info = self.source_info;\n             if let [] = proj_base {\n                 let decl = &self.body.local_decls[place.local];\n                 if decl.internal {\n@@ -301,7 +308,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 }\n                 _ => {}\n             }\n-            self.source_info = old_source_info;\n+            self.source_info = source_info;\n         }\n     }\n }\n@@ -314,9 +321,15 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         kind: UnsafetyViolationKind,\n     ) {\n         let source_info = self.source_info;\n+        let lint_root = self.body.source_scopes[self.source_info.scope]\n+            .local_data\n+            .as_ref()\n+            .assert_crate_local()\n+            .lint_root;\n         self.register_violations(\n             &[UnsafetyViolation {\n                 source_info,\n+                lint_root,\n                 description: Symbol::intern(description),\n                 details: Symbol::intern(details),\n                 kind,\n@@ -343,22 +356,42 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                     match violation.kind {\n                         UnsafetyViolationKind::GeneralAndConstFn\n                         | UnsafetyViolationKind::General => {}\n-                        UnsafetyViolationKind::BorrowPacked(_) => {\n+                        UnsafetyViolationKind::BorrowPacked => {\n                             if self.min_const_fn {\n                                 // const fns don't need to be backwards compatible and can\n                                 // emit these violations as a hard error instead of a backwards\n                                 // compat lint\n                                 violation.kind = UnsafetyViolationKind::General;\n                             }\n                         }\n+                        UnsafetyViolationKind::UnsafeFn\n+                        | UnsafetyViolationKind::UnsafeFnBorrowPacked => {\n+                            bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n+                        }\n+                    }\n+                    if !self.violations.contains(&violation) {\n+                        self.violations.push(violation)\n+                    }\n+                }\n+                false\n+            }\n+            // With the RFC 2585, no longer allow `unsafe` operations in `unsafe fn`s\n+            Safety::FnUnsafe if self.tcx.features().unsafe_block_in_unsafe_fn => {\n+                for violation in violations {\n+                    let mut violation = *violation;\n+\n+                    if violation.kind == UnsafetyViolationKind::BorrowPacked {\n+                        violation.kind = UnsafetyViolationKind::UnsafeFnBorrowPacked;\n+                    } else {\n+                        violation.kind = UnsafetyViolationKind::UnsafeFn;\n                     }\n                     if !self.violations.contains(&violation) {\n                         self.violations.push(violation)\n                     }\n                 }\n                 false\n             }\n-            // `unsafe` function bodies allow unsafe without additional unsafe blocks\n+            // `unsafe` function bodies allow unsafe without additional unsafe blocks (before RFC 2585)\n             Safety::BuiltinUnsafe | Safety::FnUnsafe => true,\n             Safety::ExplicitUnsafe(hir_id) => {\n                 // mark unsafe block as used if there are any unsafe operations inside\n@@ -373,7 +406,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             UnsafetyViolationKind::GeneralAndConstFn => {}\n                             // these things are forbidden in const fns\n                             UnsafetyViolationKind::General\n-                            | UnsafetyViolationKind::BorrowPacked(_) => {\n+                            | UnsafetyViolationKind::BorrowPacked => {\n                                 let mut violation = *violation;\n                                 // const fns don't need to be backwards compatible and can\n                                 // emit these violations as a hard error instead of a backwards\n@@ -383,6 +416,10 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                     self.violations.push(violation)\n                                 }\n                             }\n+                            UnsafetyViolationKind::UnsafeFn\n+                            | UnsafetyViolationKind::UnsafeFnBorrowPacked => bug!(\n+                                \"`UnsafetyViolationKind::UnsafeFn` in an `ExplicitUnsafe` context\"\n+                            ),\n                         }\n                     }\n                 }\n@@ -575,9 +612,12 @@ fn is_enclosed(\n             kind: hir::ItemKind::Fn(ref sig, _, _), ..\n         })) = tcx.hir().find(parent_id)\n         {\n-            match sig.header.unsafety {\n-                hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n-                hir::Unsafety::Normal => None,\n+            if sig.header.unsafety == hir::Unsafety::Unsafe\n+                && !tcx.features().unsafe_block_in_unsafe_fn\n+            {\n+                Some((\"fn\".to_string(), parent_id))\n+            } else {\n+                None\n             }\n         } else {\n             is_enclosed(tcx, used_unsafe, parent_id)\n@@ -630,40 +670,90 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n     let UnsafetyCheckResult { violations, unsafe_blocks } =\n         tcx.unsafety_check_result(def_id.expect_local());\n \n-    for &UnsafetyViolation { source_info, description, details, kind } in violations.iter() {\n+    for &UnsafetyViolation { source_info, lint_root, description, details, kind } in\n+        violations.iter()\n+    {\n         // Report an error.\n+        let unsafe_fn_msg =\n+            if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) { \" function or\" } else { \"\" };\n+\n         match kind {\n             UnsafetyViolationKind::GeneralAndConstFn | UnsafetyViolationKind::General => {\n+                // once\n                 struct_span_err!(\n                     tcx.sess,\n                     source_info.span,\n                     E0133,\n-                    \"{} is unsafe and requires unsafe function or block\",\n-                    description\n+                    \"{} is unsafe and requires unsafe{} block\",\n+                    description,\n+                    unsafe_fn_msg,\n                 )\n                 .span_label(source_info.span, &*description.as_str())\n                 .note(&details.as_str())\n                 .emit();\n             }\n-            UnsafetyViolationKind::BorrowPacked(lint_hir_id) => {\n+            UnsafetyViolationKind::BorrowPacked => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n                     tcx.ensure().unsafe_derive_on_repr_packed(impl_def_id);\n                 } else {\n                     tcx.struct_span_lint_hir(\n                         SAFE_PACKED_BORROWS,\n-                        lint_hir_id,\n+                        lint_root,\n                         source_info.span,\n                         |lint| {\n                             lint.build(&format!(\n-                                \"{} is unsafe and requires unsafe function or block (error E0133)\",\n-                                description\n+                                \"{} is unsafe and requires unsafe{} block (error E0133)\",\n+                                description, unsafe_fn_msg,\n                             ))\n                             .note(&details.as_str())\n                             .emit()\n                         },\n                     )\n                 }\n             }\n+            UnsafetyViolationKind::UnsafeFn => tcx.struct_span_lint_hir(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                lint_root,\n+                source_info.span,\n+                |lint| {\n+                    lint.build(&format!(\n+                        \"{} is unsafe and requires unsafe block (error E0133)\",\n+                        description,\n+                    ))\n+                    .span_label(source_info.span, &*description.as_str())\n+                    .note(&details.as_str())\n+                    .emit();\n+                },\n+            ),\n+            UnsafetyViolationKind::UnsafeFnBorrowPacked => {\n+                // When `unsafe_op_in_unsafe_fn` is disallowed, the behavior of safe and unsafe functions\n+                // should be the same in terms of warnings and errors. Therefore, with `#[warn(safe_packed_borrows)]`,\n+                // a safe packed borrow should emit a warning *but not an error* in an unsafe function,\n+                // just like in a safe function, even if `unsafe_op_in_unsafe_fn` is `deny`.\n+                //\n+                // Also, `#[warn(unsafe_op_in_unsafe_fn)]` can't cause any new errors. Therefore, with\n+                // `#[deny(safe_packed_borrows)]` and `#[warn(unsafe_op_in_unsafe_fn)]`, a packed borrow\n+                // should only issue a warning for the sake of backwards compatibility.\n+                //\n+                // The solution those 2 expectations is to always take the minimum of both lints.\n+                // This prevent any new errors (unless both lints are explicitely set to `deny`).\n+                let lint = if tcx.lint_level_at_node(SAFE_PACKED_BORROWS, lint_root).0\n+                    <= tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, lint_root).0\n+                {\n+                    SAFE_PACKED_BORROWS\n+                } else {\n+                    UNSAFE_OP_IN_UNSAFE_FN\n+                };\n+                tcx.struct_span_lint_hir(&lint, lint_root, source_info.span, |lint| {\n+                    lint.build(&format!(\n+                        \"{} is unsafe and requires unsafe block (error E0133)\",\n+                        description,\n+                    ))\n+                    .span_label(source_info.span, &*description.as_str())\n+                    .note(&details.as_str())\n+                    .emit();\n+                })\n+            }\n         }\n     }\n \n@@ -683,3 +773,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n         report_unused_unsafe(tcx, &unsafe_used, block_id);\n     }\n }\n+\n+fn unsafe_op_in_unsafe_fn_allowed(tcx: TyCtxt<'_>, id: HirId) -> bool {\n+    tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, id).0 == Level::Allow\n+}"}, {"sha": "4e4f0dc74cb7ce0230b401f257185f6463b12af1", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -4,6 +4,8 @@ use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n use rustc_hir as hir;\n use rustc_middle::mir::*;\n+use rustc_session::lint::builtin::UNSAFE_OP_IN_UNSAFE_FN;\n+use rustc_session::lint::Level;\n use rustc_span::Span;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -217,6 +219,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 assert_eq!(self.push_unsafe_count, 0);\n                 match self.unpushed_unsafe {\n                     Safety::Safe => {}\n+                    // no longer treat `unsafe fn`s as `unsafe` contexts (see RFC #2585)\n+                    Safety::FnUnsafe\n+                        if self.hir.tcx().lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, hir_id).0\n+                            != Level::Allow => {}\n                     _ => return,\n                 }\n                 self.unpushed_unsafe = Safety::ExplicitUnsafe(hir_id);\n@@ -231,7 +237,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .push_unsafe_count\n                     .checked_sub(1)\n                     .unwrap_or_else(|| span_bug!(span, \"unsafe count underflow\"));\n-                if self.push_unsafe_count == 0 { Some(self.unpushed_unsafe) } else { None }\n+                if self.push_unsafe_count == 0 {\n+                    Some(self.unpushed_unsafe)\n+                } else {\n+                    None\n+                }\n             }\n         };\n "}, {"sha": "7112ac35b082b8f66a06f4e5b8d2b3f84009689e", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -526,6 +526,12 @@ declare_lint! {\n     \"using only a subset of a register for inline asm inputs\",\n }\n \n+declare_lint! {\n+    pub UNSAFE_OP_IN_UNSAFE_FN,\n+    Allow,\n+    \"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -597,6 +603,7 @@ declare_lint_pass! {\n         SOFT_UNSTABLE,\n         INLINE_NO_SANITIZE,\n         ASM_SUB_REGISTER,\n+        UNSAFE_OP_IN_UNSAFE_FN,\n     ]\n }\n "}, {"sha": "0f2d52c2264fd91cd5c5bc2cae7c568f7f3c8a6c", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -808,6 +808,7 @@ symbols! {\n         unmarked_api,\n         unreachable_code,\n         unrestricted_attribute_tokens,\n+        unsafe_block_in_unsafe_fn,\n         unsafe_no_drop_flag,\n         unsized_locals,\n         unsized_tuple_coercion,"}, {"sha": "99ca7084c30dd099c206155c39d1d04cb5030ebd", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -226,6 +226,11 @@ where\n {\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n \n+    // Whitelist feature-gated lints to avoid feature errors when trying to\n+    // allow all lints.\n+    // FIXME(#72694): handle feature-gated lints properly.\n+    let unsafe_op_in_unsafe_fn_name = rustc_lint::builtin::UNSAFE_OP_IN_UNSAFE_FN.name;\n+\n     whitelisted_lints.push(warnings_lint_name.to_owned());\n     whitelisted_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n \n@@ -236,7 +241,13 @@ where\n     };\n \n     let lint_opts = lints()\n-        .filter_map(|lint| if lint.name == warnings_lint_name { None } else { filter_call(lint) })\n+        .filter_map(|lint| {\n+            if lint.name == warnings_lint_name || lint.name == unsafe_op_in_unsafe_fn_name {\n+                None\n+            } else {\n+                filter_call(lint)\n+            }\n+        })\n         .chain(lint_opts.into_iter())\n         .collect::<Vec<_>>();\n "}, {"sha": "61e512a12a18d117e3a05c326fe3e20acf3a1853", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_block_in_unsafe_fn.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -0,0 +1,6 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+//~^ ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n+//~| ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n+//~| ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n+\n+fn main() {}"}, {"sha": "c5cad4a98d9ca29172af13b5a6a539831f1e010e", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_block_in_unsafe_fn.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n+  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n+   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n+\n+error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n+  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n+   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n+\n+error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n+  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n+   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "540612a7dce0576777c6ae080928f2a3fc9c4778", "filename": "src/test/ui/unsafe/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-safe_packed_borrows-in-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-safe_packed_borrows-in-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-safe_packed_borrows-in-unsafe-fn.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -0,0 +1,67 @@\n+#![feature(unsafe_block_in_unsafe_fn)]\n+\n+#[repr(packed)]\n+pub struct Packed {\n+    data: &'static u32,\n+}\n+\n+const PACKED: Packed = Packed { data: &0 };\n+\n+#[allow(safe_packed_borrows)]\n+#[allow(unsafe_op_in_unsafe_fn)]\n+unsafe fn allow_allow() {\n+    &PACKED.data; // allowed\n+}\n+\n+#[allow(safe_packed_borrows)]\n+#[warn(unsafe_op_in_unsafe_fn)]\n+unsafe fn allow_warn() {\n+    &PACKED.data; // allowed\n+}\n+\n+#[allow(safe_packed_borrows)]\n+#[deny(unsafe_op_in_unsafe_fn)]\n+unsafe fn allow_deny() {\n+    &PACKED.data; // allowed\n+}\n+\n+#[warn(safe_packed_borrows)]\n+#[allow(unsafe_op_in_unsafe_fn)]\n+unsafe fn warn_allow() {\n+    &PACKED.data; // allowed\n+}\n+\n+#[warn(safe_packed_borrows)]\n+#[warn(unsafe_op_in_unsafe_fn)]\n+unsafe fn warn_warn() {\n+    &PACKED.data; //~ WARN\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+}\n+\n+#[warn(safe_packed_borrows)]\n+#[deny(unsafe_op_in_unsafe_fn)]\n+unsafe fn warn_deny() {\n+    &PACKED.data; //~ WARN\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+}\n+\n+#[deny(safe_packed_borrows)]\n+#[allow(unsafe_op_in_unsafe_fn)]\n+unsafe fn deny_allow() {\n+    &PACKED.data; // allowed\n+}\n+\n+#[deny(safe_packed_borrows)]\n+#[warn(unsafe_op_in_unsafe_fn)]\n+unsafe fn deny_warn() {\n+    &PACKED.data; //~ WARN\n+}\n+\n+#[deny(safe_packed_borrows)]\n+#[deny(unsafe_op_in_unsafe_fn)]\n+unsafe fn deny_deny() {\n+    &PACKED.data; //~ ERROR\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+}\n+\n+fn main() {}"}, {"sha": "fda15159643b6ec2526a547a8d25ba49e244c882", "filename": "src/test/ui/unsafe/rfc-2585-safe_packed_borrows-in-unsafe-fn.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-safe_packed_borrows-in-unsafe-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-safe_packed_borrows-in-unsafe-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-safe_packed_borrows-in-unsafe-fn.stderr?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -0,0 +1,60 @@\n+warning: borrow of packed field is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs:37:5\n+   |\n+LL |     &PACKED.data;\n+   |     ^^^^^^^^^^^^ borrow of packed field\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs:34:8\n+   |\n+LL | #[warn(safe_packed_borrows)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+warning: borrow of packed field is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs:44:5\n+   |\n+LL |     &PACKED.data;\n+   |     ^^^^^^^^^^^^ borrow of packed field\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs:41:8\n+   |\n+LL | #[warn(safe_packed_borrows)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+warning: borrow of packed field is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs:57:5\n+   |\n+LL |     &PACKED.data;\n+   |     ^^^^^^^^^^^^ borrow of packed field\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs:55:8\n+   |\n+LL | #[warn(unsafe_op_in_unsafe_fn)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error: borrow of packed field is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs:63:5\n+   |\n+LL |     &PACKED.data;\n+   |     ^^^^^^^^^^^^ borrow of packed field\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-safe_packed_borrows-in-unsafe-fn.rs:60:8\n+   |\n+LL | #[deny(safe_packed_borrows)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error: aborting due to previous error; 3 warnings emitted\n+"}, {"sha": "1e57b03ced48bf1698be7dd94729538b5ebfcc66", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -0,0 +1,76 @@\n+#![feature(unsafe_block_in_unsafe_fn)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n+#![deny(unused_unsafe)]\n+\n+unsafe fn unsf() {}\n+const PTR: *const () = std::ptr::null();\n+static mut VOID: () = ();\n+\n+unsafe fn deny_level() {\n+    unsf();\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    *PTR;\n+    //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    VOID = ();\n+    //~^ ERROR use of mutable static is unsafe and requires unsafe block\n+}\n+\n+// Check that `unsafe_op_in_unsafe_fn` works starting from the `warn` level.\n+#[warn(unsafe_op_in_unsafe_fn)]\n+#[deny(warnings)]\n+unsafe fn warning_level() {\n+    unsf();\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    *PTR;\n+    //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    VOID = ();\n+    //~^ ERROR use of mutable static is unsafe and requires unsafe block\n+}\n+\n+unsafe fn explicit_block() {\n+    // no error\n+    unsafe {\n+        unsf();\n+        *PTR;\n+        VOID = ();\n+    }\n+}\n+\n+unsafe fn two_explicit_blocks() {\n+    unsafe { unsafe { unsf() } }\n+    //~^ ERROR unnecessary `unsafe` block\n+}\n+\n+#[allow(unsafe_op_in_unsafe_fn)]\n+unsafe fn allow_level() {\n+    // lint allowed -> no error\n+    unsf();\n+    *PTR;\n+    VOID = ();\n+\n+    unsafe { unsf() }\n+    //~^ ERROR unnecessary `unsafe` block\n+}\n+\n+unsafe fn nested_allow_level() {\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    {\n+        // lint allowed -> no error\n+        unsf();\n+        *PTR;\n+        VOID = ();\n+\n+        unsafe { unsf() }\n+        //~^ ERROR unnecessary `unsafe` block\n+    }\n+}\n+\n+fn main() {\n+    unsf();\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    {\n+        unsf();\n+        //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+    }\n+}"}, {"sha": "cc595df12cc446069182a04ee078d6fe837d1c22", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c442e43b3a6acd5f129ec63e02bc2db61f216520/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr?ref=c442e43b3a6acd5f129ec63e02bc2db61f216520", "patch": "@@ -0,0 +1,104 @@\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:10:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:2:9\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n+   |\n+LL |     *PTR;\n+   |     ^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: use of mutable static is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:14:5\n+   |\n+LL |     VOID = ();\n+   |     ^^^^^^^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:22:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:20:8\n+   |\n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^\n+   = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:24:5\n+   |\n+LL |     *PTR;\n+   |     ^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: use of mutable static is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:5\n+   |\n+LL |     VOID = ();\n+   |     ^^^^^^^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:40:14\n+   |\n+LL |     unsafe { unsafe { unsf() } }\n+   |     ------   ^^^^^^ unnecessary `unsafe` block\n+   |     |\n+   |     because it's nested under this `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:3:9\n+   |\n+LL | #![deny(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:51:5\n+   |\n+LL |     unsafe { unsf() }\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:63:9\n+   |\n+LL |         unsafe { unsf() }\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:69:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:73:9\n+   |\n+LL |         unsf();\n+   |         ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}