{"sha": "85736de3bcd5ecab337a022bcc43014917296388", "node_id": "C_kwDOAAsO6NoAKDg1NzM2ZGUzYmNkNWVjYWIzMzdhMDIyYmNjNDMwMTQ5MTcyOTYzODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-25T13:05:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-25T13:05:51Z"}, "message": "Auto merge of #14024 - meliache:update-split-emacs-documentation, r=lnicola\n\nUpdate documentation for emacs and split it for LSP-mode and Eglot\n\nEmacs has now two LSP clients, the more minimalistic and lightweight [Eglot](https://joaotavora.github.io/eglot) and the extensive though a bit bloated [LSP Mode](https://github.com/emacs-lsp/lsp-mode). Eglot will soon be shipped with Emacs29. Both have rust-analyzer enabled by default and require no further setup other then being installed and enabled. `lsp-rust.el` is not required anymore.\n\nThe base-installation for each of those modes is so easy now that I don't think an enumerated list is necessary, both packages can be installed via the standard `M-x package-install` and the installation is a one-liner that I provide.\n\nConfiguration is only necessary for supporting the rust-analyzer extensions to the LSP protocol, which are built into LSP mode and require an [extension-package](https://github.com/nemethf/eglot-x) for Eglot.\n\nBut for further documentation, including the LSP extensions, I link against official documentation where possible to avoid duplicating efforts having to continually update this to stay up-to-date.\n\nI rewrote most of the original emacs documentation, but the [linked blog](https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/) post by `@rksm` seems still being actively updated with updates to LSP mode, so I kept the link. That blog post is opinionated, I personally use different packages which achieve similar end results (Eglot instead of LSP-mode, corfu instead of capf, vertico instead of helm etc.). But if someone doesn't already have an extensive Emacs configuration, I think this is not a bad starting point.\n\nDisclaimer: I'm a Rust beginner, which is why I read the rust-analyzer setup docs. So I necessarily know how most Rust experts use Emacs. But I'm an experienced Emacs user who uses several other programming languages via LSP-mode support in Emacs. I used both, initially LSP-mode and recently migrated to Eglot.\n\nAlso I'm not an experienced in writing asciidoc and I didn't do a local test-built, hopefully the html builds in the way I imagine it. So I recommend to check that aspect of the PR. Maybe the documentation is in the CI build-artifacts?\n\nThis is a duplicate of a PR to the old rust-analyzer project https://github.com/rust-analyzer/rust-analyzer.github.io/pull/197, which I made because I didn't know that the documentation now lives here.", "tree": {"sha": "3f35e8b93a6e2bb737de23a3dfdcba1ca9779693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f35e8b93a6e2bb737de23a3dfdcba1ca9779693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85736de3bcd5ecab337a022bcc43014917296388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85736de3bcd5ecab337a022bcc43014917296388", "html_url": "https://github.com/rust-lang/rust/commit/85736de3bcd5ecab337a022bcc43014917296388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85736de3bcd5ecab337a022bcc43014917296388/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf338f2c86f7863a17e9884a7e7d6676c1cd9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf338f2c86f7863a17e9884a7e7d6676c1cd9d0", "html_url": "https://github.com/rust-lang/rust/commit/8bf338f2c86f7863a17e9884a7e7d6676c1cd9d0"}, {"sha": "18366145b0150be81e39e9c6e93f2cdfe2b18582", "url": "https://api.github.com/repos/rust-lang/rust/commits/18366145b0150be81e39e9c6e93f2cdfe2b18582", "html_url": "https://github.com/rust-lang/rust/commit/18366145b0150be81e39e9c6e93f2cdfe2b18582"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "2cd1188c9df33368cb01791a12e453417f9dd887", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/85736de3bcd5ecab337a022bcc43014917296388/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/85736de3bcd5ecab337a022bcc43014917296388/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=85736de3bcd5ecab337a022bcc43014917296388", "patch": "@@ -234,16 +234,43 @@ $ brew install rust-analyzer\n \n === Emacs\n \n-Note this excellent https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/[guide] from https://github.com/rksm[@rksm].\n-\n Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>.\n \n-Emacs support is maintained as part of the https://github.com/emacs-lsp/lsp-mode[Emacs-LSP] package in https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-rust.el[lsp-rust.el].\n+To use `rust-analyzer`, you need to install and enable one of the two popular two popular LSP client implementations for Emacs, https://github.com/joaotavora/eglot[Eglot] or https://github.com/emacs-lsp/lsp-mode[LSP Mode]. Both enable `rust-analyzer` by default in rust buffers if it is available.\n+\n+==== Eglot\n+\n+Eglot is the more minimalistic and lightweight LSP client for Emacs, integrates well with existing Emacs functionality and will be built into Emacs starting from release 29.\n+\n+After installing Eglot, e.g. via `M-x package-install` (not needed from Emacs 29), you can enable it via the `M-x eglot` command or load it automatically in `rust-mode` via\n+\n+[source,emacs-lisp]\n+----\n+(add-hook 'rust-mode-hook 'eglot-ensure)\n+----\n+\n+For more detailed instructions and options see the https://joaotavora.github.io/eglot[Eglot manual] (also available from Emacs via `M-x info`) and the\n+https://github.com/joaotavora/eglot/blob/master/README.md[Eglot readme].\n+\n+Eglot does not support the rust-analyzer extensions to the language-server protocol and does not aim to do so in the future. The https://github.com/nemethf/eglot-x#rust-analyzer-extensions[eglot-x] package adds experimental support for those LSP extensions.\n+\n+==== LSP Mode\n+\n+LSP-mode is the original LSP-client for emacs. Compared to Eglot it has a larger codebase and supports more features, like LSP protocol extensions.\n+With extension packages like https://github.com/emacs-lsp/lsp-mode[LSP UI] it offers a lot of visual eyecandy.\n+Further it integrates well with https://github.com/emacs-lsp/dap-mode[DAP mode] for support of the Debug Adapter Protocol.\n+\n+You can install LSP-mode via `M-x package-install` and then run it via the `M-x lsp` command or load it automatically in rust buffers with\n+\n+[source,emacs-lisp]\n+----\n+(add-hook 'rust-mode-hook 'lsp-deferred)\n+----\n+\n+For more information on how to set up LSP mode and its extension package see the instructions in the https://emacs-lsp.github.io/lsp-mode/page/installation[LSP mode manual].\n+Also see the https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/[rust-analyzer section] for `rust-analyzer` specific options and commands, which you can optionally bind to keys.\n \n-1. Install the most recent version of `emacs-lsp` package by following the https://github.com/emacs-lsp/lsp-mode[Emacs-LSP instructions].\n-2. Set `lsp-rust-server` to `'rust-analyzer`.\n-3. Run `lsp` in a Rust buffer.\n-4. (Optionally) bind commands like `lsp-rust-analyzer-join-lines`, `lsp-extend-selection` and `lsp-rust-analyzer-expand-macro` to keys.\n+Note the excellent https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/[guide] from https://github.com/rksm[@rksm] on how to set-up Emacs for Rust development with LSP mode and several other packages.\n \n === Vim/NeoVim\n "}]}