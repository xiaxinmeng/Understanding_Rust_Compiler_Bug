{"sha": "e413dc36a83a5aad3ab6270373000693a917e92b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MTNkYzM2YTgzYTVhYWQzYWI2MjcwMzczMDAwNjkzYTkxN2U5MmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-14T15:52:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-14T15:52:51Z"}, "message": "Auto merge of #64987 - oli-obk:code_reuse_prevents_bugs, r=eddyb\n\nCompute the layout of uninhabited structs\n\nfixes #64506\n\nr? @eddyb", "tree": {"sha": "3f47bc5fe61faf2c50a843073147636bfda57893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f47bc5fe61faf2c50a843073147636bfda57893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e413dc36a83a5aad3ab6270373000693a917e92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e413dc36a83a5aad3ab6270373000693a917e92b", "html_url": "https://github.com/rust-lang/rust/commit/e413dc36a83a5aad3ab6270373000693a917e92b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e413dc36a83a5aad3ab6270373000693a917e92b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446e5e57b667c841ba3ebb4b41b44fb98bd3af4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/446e5e57b667c841ba3ebb4b41b44fb98bd3af4b", "html_url": "https://github.com/rust-lang/rust/commit/446e5e57b667c841ba3ebb4b41b44fb98bd3af4b"}, {"sha": "373c362b7ed0df2dfbc21853e53d5082f20d3de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/373c362b7ed0df2dfbc21853e53d5082f20d3de8", "html_url": "https://github.com/rust-lang/rust/commit/373c362b7ed0df2dfbc21853e53d5082f20d3de8"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "ac99ccd45eafe4e8b0c578a5d1c63d174e0bc3cf", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=e413dc36a83a5aad3ab6270373000693a917e92b", "patch": "@@ -389,10 +389,6 @@ pub enum UnsupportedOpInfo<'tcx> {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n \n-    /// FIXME(#64506) Error used to work around accessing projections of\n-    /// uninhabited types.\n-    UninhabitedValue,\n-\n     // -- Everything below is not categorized yet --\n     FunctionAbiMismatch(Abi, Abi),\n     FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n@@ -556,8 +552,6 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                     not a power of two\"),\n             Unsupported(ref msg) =>\n                 write!(f, \"{}\", msg),\n-            UninhabitedValue =>\n-                write!(f, \"tried to use an uninhabited value\"),\n         }\n     }\n }"}, {"sha": "aed9e87a168ce8cdd0dfc81dc192d06885b3d847", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=e413dc36a83a5aad3ab6270373000693a917e92b", "patch": "@@ -824,10 +824,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     });\n                     (present_variants.next(), present_variants.next())\n                 };\n-                if present_first.is_none() {\n+                let present_first = match present_first {\n+                    present_first @ Some(_) => present_first,\n                     // Uninhabited because it has no variants, or only absent ones.\n-                    return tcx.layout_raw(param_env.and(tcx.types.never));\n-                }\n+                    None if def.is_enum() => return tcx.layout_raw(param_env.and(tcx.types.never)),\n+                    // if it's a struct, still compute a layout so that we can still compute the\n+                    // field offsets\n+                    None => Some(VariantIdx::new(0)),\n+                };\n \n                 let is_struct = !def.is_enum() ||\n                     // Only one variant is present."}, {"sha": "903eb3c1c44b9279684bf282a16d8c6cc48afdd2", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=e413dc36a83a5aad3ab6270373000693a917e92b", "patch": "@@ -9,7 +9,7 @@ use rustc::mir;\n use rustc::mir::interpret::truncate;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{\n-    self, Size, Abi, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx, PrimitiveExt\n+    self, Size, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx, PrimitiveExt\n };\n use rustc::ty::TypeFoldable;\n \n@@ -377,20 +377,17 @@ where\n             layout::FieldPlacement::Array { stride, .. } => {\n                 let len = base.len(self)?;\n                 if field >= len {\n-                    // This can be violated because this runs during promotion on code where the\n-                    // type system has not yet ensured that such things don't happen.\n+                    // This can be violated because the index (field) can be a runtime value\n+                    // provided by the user.\n                     debug!(\"tried to access element {} of array/slice with length {}\", field, len);\n                     throw_panic!(BoundsCheck { len, index: field });\n                 }\n                 stride * field\n             }\n             layout::FieldPlacement::Union(count) => {\n-                // FIXME(#64506) `UninhabitedValue` can be removed when this issue is resolved\n-                if base.layout.abi == Abi::Uninhabited {\n-                    throw_unsup!(UninhabitedValue);\n-                }\n                 assert!(field < count as u64,\n-                        \"Tried to access field {} of union with {} fields\", field, count);\n+                        \"Tried to access field {} of union {:#?} with {} fields\",\n+                        field, base.layout, count);\n                 // Offset is always 0\n                 Size::from_bytes(0)\n             }"}, {"sha": "fde5c5bed4d91a02b35b42d8c2ed78ca3a241e38", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=e413dc36a83a5aad3ab6270373000693a917e92b", "patch": "@@ -738,7 +738,11 @@ impl FieldPlacement {\n \n     pub fn offset(&self, i: usize) -> Size {\n         match *self {\n-            FieldPlacement::Union(_) => Size::ZERO,\n+            FieldPlacement::Union(count) => {\n+                assert!(i < count,\n+                        \"Tried to access field {} of union with {} fields\", i, count);\n+                Size::ZERO\n+            },\n             FieldPlacement::Array { stride, count } => {\n                 let i = i as u64;\n                 assert!(i < count);"}, {"sha": "db3e85a7bdfd1077e1f05d9edbb899d25c00c4e9", "filename": "src/test/ui/consts/issue-64506.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Ftest%2Fui%2Fconsts%2Fissue-64506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e413dc36a83a5aad3ab6270373000693a917e92b/src%2Ftest%2Fui%2Fconsts%2Fissue-64506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64506.rs?ref=e413dc36a83a5aad3ab6270373000693a917e92b", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#[derive(Copy, Clone)]\n+pub struct ChildStdin {\n+    inner: AnonPipe,\n+}\n+\n+#[derive(Copy, Clone)]\n+enum AnonPipe {}\n+\n+const FOO: () = {\n+    union Foo {\n+        a: ChildStdin,\n+        b: (),\n+    }\n+    let x = unsafe { Foo { b: () }.a };\n+    let x = &x.inner;\n+};\n+\n+fn main() {}"}]}