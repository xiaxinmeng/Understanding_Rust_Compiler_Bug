{"sha": "e527def9c7a090fabf9ca41d09b629e5268d41f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MjdkZWY5YzdhMDkwZmFiZjljYTQxZDA5YjYyOWU1MjY4ZDQxZjg=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-02-16T07:09:07Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-02-16T13:19:32Z"}, "message": "Replace File::create and write_all with fs::write\n\nAlso don't convert to u8 buffers and back\nwhen we are only creating strings.", "tree": {"sha": "953af5678f995cd957d80e44431977032e595094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/953af5678f995cd957d80e44431977032e595094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e527def9c7a090fabf9ca41d09b629e5268d41f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e527def9c7a090fabf9ca41d09b629e5268d41f8", "html_url": "https://github.com/rust-lang/rust/commit/e527def9c7a090fabf9ca41d09b629e5268d41f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e527def9c7a090fabf9ca41d09b629e5268d41f8/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a4673fbd40b09a99d057eaa9b3e5579b54c184", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a4673fbd40b09a99d057eaa9b3e5579b54c184", "html_url": "https://github.com/rust-lang/rust/commit/42a4673fbd40b09a99d057eaa9b3e5579b54c184"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "1729cf99862a8d0b9617bfb02e3b37f1ccd23f0d", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e527def9c7a090fabf9ca41d09b629e5268d41f8/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e527def9c7a090fabf9ca41d09b629e5268d41f8/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=e527def9c7a090fabf9ca41d09b629e5268d41f8", "patch": "@@ -15,8 +15,6 @@ use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n \n use std::cell::Cell;\n-use std::fs::File;\n-use std::io::Write;\n use std::path::Path;\n \n pub use self::PpMode::*;\n@@ -375,13 +373,14 @@ fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n     (src, src_name)\n }\n \n-fn write_output(out: Vec<u8>, ofile: Option<&Path>) {\n+fn write_or_print(out: &str, ofile: Option<&Path>) {\n     match ofile {\n-        None => print!(\"{}\", String::from_utf8(out).unwrap()),\n-        Some(p) => match File::create(p) {\n-            Ok(mut w) => w.write_all(&out).unwrap(),\n-            Err(e) => panic!(\"print-print failed to open {} due to {}\", p.display(), e),\n-        },\n+        None => print!(\"{}\", out),\n+        Some(p) => {\n+            if let Err(e) = std::fs::write(p, out) {\n+                panic!(\"print-print failed to write {} due to {}\", p.display(), e);\n+            }\n+        }\n     }\n }\n \n@@ -417,7 +416,7 @@ pub fn print_after_parsing(\n         unreachable!();\n     };\n \n-    write_output(out.into_bytes(), ofile);\n+    write_or_print(&out, ofile);\n }\n \n pub fn print_after_hir_lowering<'tcx>(\n@@ -477,7 +476,7 @@ pub fn print_after_hir_lowering<'tcx>(\n         _ => unreachable!(),\n     }\n \n-    write_output(out.into_bytes(), ofile);\n+    write_or_print(&out, ofile);\n }\n \n // In an ideal world, this would be a public function called by the driver after\n@@ -503,7 +502,8 @@ fn print_with_analysis(\n     }\n     .unwrap();\n \n-    write_output(out, ofile);\n+    let out = std::str::from_utf8(&out).unwrap();\n+    write_or_print(out, ofile);\n \n     Ok(())\n }"}]}