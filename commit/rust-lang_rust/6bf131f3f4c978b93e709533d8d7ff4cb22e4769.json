{"sha": "6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZjEzMWYzZjRjOTc4YjkzZTcwOTUzM2Q4ZDdmZjRjYjIyZTQ3Njk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-02T09:10:51Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-13T08:01:18Z"}, "message": "Added help message for impl trait static constraint.", "tree": {"sha": "06bcf1af49ff5d85bca00d76ed229de9c41e1c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06bcf1af49ff5d85bca00d76ed229de9c41e1c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluaGU4ACgkQAXYLT59T\n8VRGLg/7BJG5Yi2/nD3lkbz5jL/NQFKcjhUT6ayyYHumGxdq8htHg6VoxiRhmJNW\nZQoFp12ozcQLbk7OfzgTRMYYv/DvFZ7GMizLnjBODw0XrgzE+yi3WMY1vudRTTYa\nI1T+bJw+cLAElwR9R3ONI8QwM3QrWnspbxvdaSJwXPcieYBv71ueUxkIOe9HbJmN\nxnQvdg1ijOpZ9G/qX7Y0bMat3P4uDeLyuZEidwNG6tFudsNch6u4S7wd7VT67J5q\nTMVQ+RSX2pQgkqaxnDAmGsmWaOlz1U9+Opl89FHZWzFDASGrXQCQd5G1aSa2IrI+\nFd+4TdyT+i0urvbLp+oijCuzurN20GLW3ikymIyqCN2F6Hm+VzQ1MBR1KENkNPMe\nuVD7VVCYso4TbhLtKXsafAO9Flv/ltHQq/QKSsDAOi/Bw7CX9yRp0I0pCkHkb0iz\nieYzseIMgu6Bov/o82c/7tS+hKOyo1AxRn5+ll4h7Ik/y0N6VFJB7GjYnzCQwGs8\nNMi0MTFdRlLKciMQWcCiLn+rhcWYToTQClsXGOzIEMHg9MjGuz31lGABIvIQbwJ0\nNn8Cu+LpcJgMpCpJctfe8kHBHKZHpF3GIHYjuuopRcRhfhb4veXgnrYJ44EpyWkn\ngKmjFWnmNSg4ahTJkHUOLgCvu7izve4kNfE9o4ZddA40X7W+wkA=\n=2gsV\n-----END PGP SIGNATURE-----", "payload": "tree 06bcf1af49ff5d85bca00d76ed229de9c41e1c42\nparent 78b21643a85a6a7e17964889122829a89e6da593\nauthor David Wood <david@davidtw.co> 1535879451 +0200\ncommitter David Wood <david@davidtw.co> 1536825678 +0200\n\nAdded help message for impl trait static constraint.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "html_url": "https://github.com/rust-lang/rust/commit/6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78b21643a85a6a7e17964889122829a89e6da593", "url": "https://api.github.com/repos/rust-lang/rust/commits/78b21643a85a6a7e17964889122829a89e6da593", "html_url": "https://github.com/rust-lang/rust/commit/78b21643a85a6a7e17964889122829a89e6da593"}], "stats": {"total": 88, "additions": 73, "deletions": 15}, "files": [{"sha": "29ba23b58bc0ce8418d9f39a13f376bb7cff6599", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                 ) => {\n                     let anon_reg_sup = self.tcx.is_suitable_region(sup_r)?;\n                     if sub_r == &RegionKind::ReStatic &&\n-                        self.tcx.is_return_type_impl_trait(anon_reg_sup.def_id)\n+                        self.tcx.return_type_impl_trait(anon_reg_sup.def_id).is_some()\n                     {\n                         let sp = var_origin.span();\n                         let return_sp = sub_origin.span();"}, {"sha": "ae840f93c20e4df157c35a6969127d6c927697af", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "patch": "@@ -1587,20 +1587,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         });\n     }\n \n-    pub fn is_return_type_impl_trait(\n+    pub fn return_type_impl_trait(\n         &self,\n         scope_def_id: DefId,\n-    ) -> bool {\n+    ) -> Option<Ty> {\n         let ret_ty = self.type_of(scope_def_id);\n         match ret_ty.sty {\n             ty::FnDef(_, _) => {\n                 let sig = ret_ty.fn_sig(*self);\n                 let output = self.erase_late_bound_regions(&sig.output());\n-                return output.is_impl_trait();\n+                if output.is_impl_trait() {\n+                    Some(output)\n+                } else {\n+                    None\n+                }\n             }\n-            _ => {}\n+            _ => None\n         }\n-        false\n     }\n \n     // Here we check if the bound region is in Impl Item."}, {"sha": "2d8f782f748ec56c93e944748e014dd87fb1056b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "patch": "@@ -15,7 +15,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n use rustc::mir::{self, Location, Mir, Place, Rvalue, StatementKind, TerminatorKind};\n-use rustc::ty::{TyCtxt, RegionVid};\n+use rustc::ty::{TyCtxt, Ty, TyS, TyKind, Region, RegionKind, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::Diagnostic;\n use std::collections::VecDeque;\n@@ -344,7 +344,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         // Check if we can use one of the \"nice region errors\".\n-        if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n+        let fr_region = self.to_error_region(fr);\n+        let outlived_fr_region = self.to_error_region(outlived_fr);\n+        if let (Some(f), Some(o)) = (fr_region, outlived_fr_region) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);\n             let nice = NiceRegionError::new_from_span(infcx.tcx, span, o, f, Some(tables));\n             if let Some(_error_reported) = nice.try_report_from_nll() {\n@@ -356,17 +358,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.universal_regions.is_local_free_region(fr),\n             self.universal_regions.is_local_free_region(outlived_fr),\n         );\n-        debug!(\"report_error: fr_is_local={:?} outlived_fr_is_local={:?} category={:?}\",\n-               fr_is_local, outlived_fr_is_local, category);\n \n+        debug!(\"report_error: fr_is_local={:?} outlived_fr_is_local={:?} fr_region={:?} \\\n+                outlived_fr_region={:?} category={:?}\",\n+               fr_is_local, outlived_fr_is_local, fr_region, outlived_fr_region, category);\n         match (category, fr_is_local, outlived_fr_is_local) {\n             (ConstraintCategory::Assignment, true, false) |\n             (ConstraintCategory::CallArgument, true, false) =>\n-                self.report_escaping_data_error(mir, infcx, mir_def_id, fr, outlived_fr,\n-                                                category, span, errors_buffer),\n+                self.report_escaping_data_error(mir, infcx, mir_def_id, fr, fr_region, outlived_fr,\n+                                                outlived_fr_region, category, span, errors_buffer),\n             _ =>\n-                self.report_general_error(mir, infcx, mir_def_id, fr, fr_is_local,\n-                                          outlived_fr, outlived_fr_is_local,\n+                self.report_general_error(mir, infcx, mir_def_id, fr, fr_is_local, fr_region,\n+                                          outlived_fr, outlived_fr_is_local, outlived_fr_region,\n                                           category, span, errors_buffer),\n         };\n     }\n@@ -377,7 +380,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n+        fr_region: Option<Region<'tcx>>,\n         outlived_fr: RegionVid,\n+        outlived_fr_region: Option<Region<'tcx>>,\n         category: ConstraintCategory,\n         span: Span,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -390,7 +395,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         if fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none() {\n             return self.report_general_error(mir, infcx, mir_def_id,\n-                                             fr, true, outlived_fr, false,\n+                                             fr, true, fr_region,\n+                                             outlived_fr, false, outlived_fr_region,\n                                              category, span, errors_buffer);\n         }\n \n@@ -430,8 +436,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         fr: RegionVid,\n         fr_is_local: bool,\n+        fr_region: Option<Region<'tcx>>,\n         outlived_fr: RegionVid,\n         outlived_fr_is_local: bool,\n+        outlived_fr_region: Option<Region<'tcx>>,\n         category: ConstraintCategory,\n         span: Span,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -465,6 +473,26 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             },\n         }\n \n+        if let (Some(f), Some(RegionKind::ReStatic)) = (fr_region, outlived_fr_region) {\n+            if let Some(TyS {\n+                sty: TyKind::Anon(did, _),\n+                ..\n+            }) = self.return_type_impl_trait(infcx, f) {\n+                let span = infcx.tcx.def_span(*did);\n+                if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(span) {\n+                    diag.span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"you can add a constraint to the return type to make it last \\\n+                             less than `'static` and match {}\",\n+                            fr_name,\n+                        ),\n+                        format!(\"{} + {}\", snippet, fr_name),\n+                    );\n+                }\n+            }\n+        }\n+\n         diag.buffer(errors_buffer);\n     }\n \n@@ -490,4 +518,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let (_, span, _) = self.best_blame_constraint(mir, tcx, fr1, |r| r == fr2);\n         span\n     }\n+\n+    fn return_type_impl_trait<'cx>(\n+        &self,\n+        infcx: &'cx InferCtxt<'_, '_, 'tcx>,\n+        outlived_fr_region: Region<'tcx>,\n+    ) -> Option<Ty<'cx>> {\n+        infcx.tcx.is_suitable_region(outlived_fr_region)\n+            .map(|r| r.def_id)\n+            .map(|id| infcx.tcx.return_type_impl_trait(id))\n+            .unwrap_or(None)\n+    }\n }"}, {"sha": "e372bd33aa2d528a497b3b55c8d3a863fc8e7580", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "patch": "@@ -11,12 +11,20 @@ error: unsatisfied lifetime constraints\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             -- lifetime `'a` defined here  ^ returning this value requires that `'a` must outlive `'static`\n+help: you can add a constraint to the return type to make it last less than `'static` and match 'a\n+   |\n+LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n+   |                                ^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n+help: you can add a constraint to the return type to make it last less than `'static` and match 'a\n+   |\n+LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:5"}, {"sha": "d6b19acb86b26df424da88064dd81ea3fe68b05e", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bf131f3f4c978b93e709533d8d7ff4cb22e4769/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=6bf131f3f4c978b93e709533d8d7ff4cb22e4769", "patch": "@@ -5,6 +5,10 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         - let's call the lifetime of this reference `'1`\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^ cast requires that `'1` must outlive `'static`\n+help: you can add a constraint to the return type to make it last less than `'static` and match '1\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '1 {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n   --> $DIR/static-return-lifetime-infered.rs:21:9\n@@ -13,6 +17,10 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    -- lifetime `'a` defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^ cast requires that `'a` must outlive `'static`\n+help: you can add a constraint to the return type to make it last less than `'static` and match 'a\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}