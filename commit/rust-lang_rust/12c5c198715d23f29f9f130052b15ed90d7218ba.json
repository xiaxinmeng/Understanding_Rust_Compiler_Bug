{"sha": "12c5c198715d23f29f9f130052b15ed90d7218ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzVjMTk4NzE1ZDIzZjI5ZjlmMTMwMDUyYjE1ZWQ5MGQ3MjE4YmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T02:42:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:34Z"}, "message": "librustc: De-`@mut` `MoveData::paths`", "tree": {"sha": "08bb301d8fda755e34eac83dc1af9f3bba7d3dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08bb301d8fda755e34eac83dc1af9f3bba7d3dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c5c198715d23f29f9f130052b15ed90d7218ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c5c198715d23f29f9f130052b15ed90d7218ba", "html_url": "https://github.com/rust-lang/rust/commit/12c5c198715d23f29f9f130052b15ed90d7218ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c5c198715d23f29f9f130052b15ed90d7218ba/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026364ca26a35f0d710d9b7d6501d267f8f82684", "url": "https://api.github.com/repos/rust-lang/rust/commits/026364ca26a35f0d710d9b7d6501d267f8f82684", "html_url": "https://github.com/rust-lang/rust/commit/026364ca26a35f0d710d9b7d6501d267f8f82684"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "1fd3f89ae2c32cc8fb184aebf3953f36f91277da", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/12c5c198715d23f29f9f130052b15ed90d7218ba/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c5c198715d23f29f9f130052b15ed90d7218ba/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=12c5c198715d23f29f9f130052b15ed90d7218ba", "patch": "@@ -15,6 +15,7 @@ comments in the section \"Moves and initialization\" and in `doc.rs`.\n \n */\n \n+use std::cell::RefCell;\n use std::hashmap::{HashMap, HashSet};\n use std::uint;\n use middle::borrowck::*;\n@@ -31,7 +32,7 @@ use util::ppaux::Repr;\n \n pub struct MoveData {\n     /// Move paths. See section \"Move paths\" in `doc.rs`.\n-    paths: ~[MovePath],\n+    paths: RefCell<~[MovePath]>,\n \n     /// Cache of loan path to move path index, for easy lookup.\n     path_map: HashMap<@LoanPath, MovePathIndex>,\n@@ -164,7 +165,7 @@ pub type AssignDataFlow = DataFlowContext<AssignDataFlowOperator>;\n impl MoveData {\n     pub fn new() -> MoveData {\n         MoveData {\n-            paths: ~[],\n+            paths: RefCell::new(~[]),\n             path_map: HashMap::new(),\n             moves: ~[],\n             path_assignments: ~[],\n@@ -174,35 +175,42 @@ impl MoveData {\n     }\n \n     fn path_loan_path(&self, index: MovePathIndex) -> @LoanPath {\n-        self.paths[*index].loan_path\n+        let paths = self.paths.borrow();\n+        paths.get()[*index].loan_path\n     }\n \n     fn path_parent(&self, index: MovePathIndex) -> MovePathIndex {\n-        self.paths[*index].parent\n+        let paths = self.paths.borrow();\n+        paths.get()[*index].parent\n     }\n \n     fn path_first_move(&self, index: MovePathIndex) -> MoveIndex {\n-        self.paths[*index].first_move\n+        let paths = self.paths.borrow();\n+        paths.get()[*index].first_move\n     }\n \n     fn path_first_child(&self, index: MovePathIndex) -> MovePathIndex {\n-        self.paths[*index].first_child\n+        let paths = self.paths.borrow();\n+        paths.get()[*index].first_child\n     }\n \n     fn path_next_sibling(&self, index: MovePathIndex) -> MovePathIndex {\n-        self.paths[*index].next_sibling\n+        let paths = self.paths.borrow();\n+        paths.get()[*index].next_sibling\n     }\n \n     fn set_path_first_move(&mut self,\n                            index: MovePathIndex,\n                            first_move: MoveIndex) {\n-        self.paths[*index].first_move = first_move\n+        let mut paths = self.paths.borrow_mut();\n+        paths.get()[*index].first_move = first_move\n     }\n \n     fn set_path_first_child(&mut self,\n                             index: MovePathIndex,\n                             first_child: MovePathIndex) {\n-        self.paths[*index].first_child = first_child\n+        let mut paths = self.paths.borrow_mut();\n+        paths.get()[*index].first_child = first_child\n     }\n                             \n \n@@ -234,9 +242,10 @@ impl MoveData {\n \n         let index = match *lp {\n             LpVar(..) => {\n-                let index = MovePathIndex(self.paths.len());\n+                let mut paths = self.paths.borrow_mut();\n+                let index = MovePathIndex(paths.get().len());\n \n-                self.paths.push(MovePath {\n+                paths.get().push(MovePath {\n                     loan_path: lp,\n                     parent: InvalidMovePathIndex,\n                     first_move: InvalidMoveIndex,\n@@ -249,18 +258,25 @@ impl MoveData {\n \n             LpExtend(base, _, _) => {\n                 let parent_index = self.move_path(tcx, base);\n-                let index = MovePathIndex(self.paths.len());\n+\n+                let index = {\n+                    let paths = self.paths.borrow();\n+                    MovePathIndex(paths.get().len())\n+                };\n \n                 let next_sibling = self.path_first_child(parent_index);\n                 self.set_path_first_child(parent_index, index);\n \n-                self.paths.push(MovePath {\n-                    loan_path: lp,\n-                    parent: parent_index,\n-                    first_move: InvalidMoveIndex,\n-                    first_child: InvalidMovePathIndex,\n-                    next_sibling: next_sibling,\n-                });\n+                {\n+                    let mut paths = self.paths.borrow_mut();\n+                    paths.get().push(MovePath {\n+                        loan_path: lp,\n+                        parent: parent_index,\n+                        first_move: InvalidMoveIndex,\n+                        first_child: InvalidMovePathIndex,\n+                        next_sibling: next_sibling,\n+                    });\n+                }\n \n                 index\n             }\n@@ -270,7 +286,8 @@ impl MoveData {\n                lp.repr(tcx),\n                index);\n \n-        assert_eq!(*index, self.paths.len() - 1);\n+        let paths = self.paths.borrow();\n+        assert_eq!(*index, paths.get().len() - 1);\n         self.path_map.insert(lp, index);\n         return index;\n     }\n@@ -409,14 +426,17 @@ impl MoveData {\n \n         // Kill all moves related to a variable `x` when it goes out\n         // of scope:\n-        for path in self.paths.iter() {\n-            match *path.loan_path {\n-                LpVar(id) => {\n-                    let kill_id = tcx.region_maps.encl_scope(id);\n-                    let path = *self.path_map.get(&path.loan_path);\n-                    self.kill_moves(path, kill_id, dfcx_moves);\n+        {\n+            let paths = self.paths.borrow();\n+            for path in paths.get().iter() {\n+                match *path.loan_path {\n+                    LpVar(id) => {\n+                        let kill_id = tcx.region_maps.encl_scope(id);\n+                        let path = *self.path_map.get(&path.loan_path);\n+                        self.kill_moves(path, kill_id, dfcx_moves);\n+                    }\n+                    LpExtend(..) => {}\n                 }\n-                LpExtend(..) => {}\n             }\n         }\n "}]}