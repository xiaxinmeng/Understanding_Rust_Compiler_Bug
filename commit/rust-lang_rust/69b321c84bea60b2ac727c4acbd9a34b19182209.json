{"sha": "69b321c84bea60b2ac727c4acbd9a34b19182209", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YjMyMWM4NGJlYTYwYjJhYzcyN2M0YWNiZDlhMzRiMTkxODIyMDk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-11T22:41:01Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-11T22:41:45Z"}, "message": "heap: replace `exchange_free` with `deallocate`\n\nThe `std::rt::heap` API is Rust's global allocator, so there's no need\nto have this as a separate API.", "tree": {"sha": "d3c82e585f6dab49fb155ee782c26e8be742bb8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c82e585f6dab49fb155ee782c26e8be742bb8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69b321c84bea60b2ac727c4acbd9a34b19182209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69b321c84bea60b2ac727c4acbd9a34b19182209", "html_url": "https://github.com/rust-lang/rust/commit/69b321c84bea60b2ac727c4acbd9a34b19182209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69b321c84bea60b2ac727c4acbd9a34b19182209/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32988db2bd82edc92f54c2d32fdcbd748ab78cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/32988db2bd82edc92f54c2d32fdcbd748ab78cd4", "html_url": "https://github.com/rust-lang/rust/commit/32988db2bd82edc92f54c2d32fdcbd748ab78cd4"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "87c2f826af5921f9dba686a2f52c916e889c0d55", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69b321c84bea60b2ac727c4acbd9a34b19182209/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b321c84bea60b2ac727c4acbd9a34b19182209/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=69b321c84bea60b2ac727c4acbd9a34b19182209", "patch": "@@ -33,7 +33,7 @@ use option::{Option, Some, None};\n use ptr;\n use ptr::RawPtr;\n use mem::{min_align_of, size_of};\n-use rt::heap::exchange_free;\n+use rt::heap::deallocate;\n \n struct RcBox<T> {\n     value: T,\n@@ -105,8 +105,8 @@ impl<T> Drop for Rc<T> {\n                     self.dec_weak();\n \n                     if self.weak() == 0 {\n-                        exchange_free(self.ptr as *mut u8, size_of::<RcBox<T>>(),\n-                                      min_align_of::<RcBox<T>>())\n+                        deallocate(self.ptr as *mut u8, size_of::<RcBox<T>>(),\n+                                   min_align_of::<RcBox<T>>())\n                     }\n                 }\n             }\n@@ -179,8 +179,8 @@ impl<T> Drop for Weak<T> {\n                 // the weak count starts at 1, and will only go to\n                 // zero if all the strong pointers have disappeared.\n                 if self.weak() == 0 {\n-                    exchange_free(self.ptr as *mut u8, size_of::<RcBox<T>>(),\n-                                  min_align_of::<RcBox<T>>())\n+                    deallocate(self.ptr as *mut u8, size_of::<RcBox<T>>(),\n+                               min_align_of::<RcBox<T>>())\n                 }\n             }\n         }"}, {"sha": "b729fb3803514a7c73aa6bb743ea8e1b03f58006", "filename": "src/libstd/rt/heap.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69b321c84bea60b2ac727c4acbd9a34b19182209/src%2Flibstd%2Frt%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b321c84bea60b2ac727c4acbd9a34b19182209/src%2Flibstd%2Frt%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fheap.rs?ref=69b321c84bea60b2ac727c4acbd9a34b19182209", "patch": "@@ -165,13 +165,8 @@ pub unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 {\n #[lang=\"exchange_free\"]\n #[inline]\n // FIXME: #13994 (rustc should pass align and size here)\n-pub unsafe fn exchange_free_(ptr: *mut u8) {\n-    exchange_free(ptr, 0, 8)\n-}\n-\n-#[inline]\n-pub unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n-    deallocate(ptr, size, align);\n+unsafe fn exchange_free(ptr: *mut u8) {\n+    deallocate(ptr, 0, 8);\n }\n \n // FIXME: #7496\n@@ -212,7 +207,7 @@ pub unsafe extern \"C\" fn rust_malloc(size: uint, align: uint) -> *mut u8 {\n #[deprecated]\n #[cfg(not(test))]\n pub unsafe extern \"C\" fn rust_free(ptr: *mut u8, size: uint, align: uint) {\n-    exchange_free(ptr, size, align)\n+    deallocate(ptr, size, align)\n }\n \n #[cfg(test)]"}, {"sha": "3c0d0efa7660c514c91453a9fadea71446fd8374", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69b321c84bea60b2ac727c4acbd9a34b19182209/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b321c84bea60b2ac727c4acbd9a34b19182209/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=69b321c84bea60b2ac727c4acbd9a34b19182209", "patch": "@@ -109,7 +109,7 @@ use ops::Drop;\n use option::{None, Option, Some};\n use ptr::RawPtr;\n use ptr;\n-use rt::heap::{exchange_malloc, exchange_free};\n+use rt::heap::{exchange_malloc, deallocate};\n use unstable::finally::try_finally;\n use vec::Vec;\n \n@@ -330,7 +330,7 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n                         ptr::read(&*p.offset(j));\n                     }\n                     // FIXME: #13994 (should pass align and size here)\n-                    exchange_free(ret as *mut u8, 0, 8);\n+                    deallocate(ret as *mut u8, 0, 8);\n                 });\n             mem::transmute(ret)\n         }\n@@ -377,7 +377,7 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n                         ptr::read(&*p.offset(j));\n                     }\n                     // FIXME: #13994 (should pass align and size here)\n-                    exchange_free(ret as *mut u8, 0, 8);\n+                    deallocate(ret as *mut u8, 0, 8);\n                 });\n             mem::transmute(ret)\n         }\n@@ -817,7 +817,7 @@ impl<T> Drop for MoveItems<T> {\n         for _x in *self {}\n         unsafe {\n             // FIXME: #13994 (should pass align and size here)\n-            exchange_free(self.allocation, 0, 8)\n+            deallocate(self.allocation, 0, 8)\n         }\n     }\n }"}, {"sha": "26d7e04fe1d15afb1fb0589580a529cb19c7d15e", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69b321c84bea60b2ac727c4acbd9a34b19182209/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b321c84bea60b2ac727c4acbd9a34b19182209/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=69b321c84bea60b2ac727c4acbd9a34b19182209", "patch": "@@ -15,7 +15,7 @@\n \n use std::mem;\n use std::ptr;\n-use std::rt::heap::exchange_free;\n+use std::rt::heap::deallocate;\n use std::sync::atomics;\n use std::mem::{min_align_of, size_of};\n \n@@ -191,8 +191,8 @@ impl<T: Share + Send> Drop for Arc<T> {\n \n         if self.inner().weak.fetch_sub(1, atomics::Release) == 1 {\n             atomics::fence(atomics::Acquire);\n-            unsafe { exchange_free(self.x as *mut u8, size_of::<ArcInner<T>>(),\n-                                   min_align_of::<ArcInner<T>>()) }\n+            unsafe { deallocate(self.x as *mut u8, size_of::<ArcInner<T>>(),\n+                                min_align_of::<ArcInner<T>>()) }\n         }\n     }\n }\n@@ -242,8 +242,8 @@ impl<T: Share + Send> Drop for Weak<T> {\n         // the memory orderings\n         if self.inner().weak.fetch_sub(1, atomics::Release) == 1 {\n             atomics::fence(atomics::Acquire);\n-            unsafe { exchange_free(self.x as *mut u8, size_of::<ArcInner<T>>(),\n-                                   min_align_of::<ArcInner<T>>()) }\n+            unsafe { deallocate(self.x as *mut u8, size_of::<ArcInner<T>>(),\n+                                min_align_of::<ArcInner<T>>()) }\n         }\n     }\n }"}]}