{"sha": "0f224f977d9edeb7f8ca56c052c1202fab384552", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMjI0Zjk3N2Q5ZWRlYjdmOGNhNTZjMDUyYzEyMDJmYWIzODQ1NTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T18:41:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-20T18:42:44Z"}, "message": "Expand rustc lexer to do almost-nearly-nontrivial stuff.", "tree": {"sha": "2e9b93ce5e4eea139f44c747fd10679c1f4a03df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e9b93ce5e4eea139f44c747fd10679c1f4a03df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f224f977d9edeb7f8ca56c052c1202fab384552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f224f977d9edeb7f8ca56c052c1202fab384552", "html_url": "https://github.com/rust-lang/rust/commit/0f224f977d9edeb7f8ca56c052c1202fab384552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f224f977d9edeb7f8ca56c052c1202fab384552/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5", "html_url": "https://github.com/rust-lang/rust/commit/9fc4fc6692c6684487eb57c6608ee34ab94dd9f5"}], "stats": {"total": 205, "additions": 201, "deletions": 4}, "files": [{"sha": "42bd91c59bf776f9a3776a14bbaa5b67f541f4c7", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f224f977d9edeb7f8ca56c052c1202fab384552/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f224f977d9edeb7f8ca56c052c1202fab384552/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=0f224f977d9edeb7f8ca56c052c1202fab384552", "patch": "@@ -17,7 +17,7 @@ fn write_module() {\n     llvm.LLVMDisposeModule(llmod);\n }\n \n-fn main(vec[str] args) -> () {\n+fn main(vec[str] args) {\n \n   log \"This is the rust 'self-hosted' compiler.\";\n   log \"The one written in rust.\";\n@@ -30,6 +30,16 @@ fn main(vec[str] args) -> () {\n         auto p = parser.new_parser(filename);\n         log \"opened file: \" + filename;\n         auto tok = p.peek();\n+        while (true) {\n+            alt (tok) {\n+                case (token.EOF()) { ret; }\n+                case (_) {\n+                    log token.to_str(tok);\n+                    p.bump();\n+                    tok = p.peek();\n+                }\n+            }\n+        }\n     }\n     i += 1;\n   }"}, {"sha": "57a60fe3f54311879b54558bfa167457e342711e", "filename": "src/comp/fe/lexer.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0f224f977d9edeb7f8ca56c052c1202fab384552/src%2Fcomp%2Ffe%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f224f977d9edeb7f8ca56c052c1202fab384552/src%2Fcomp%2Ffe%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Flexer.rs?ref=0f224f977d9edeb7f8ca56c052c1202fab384552", "patch": "@@ -38,8 +38,36 @@ fn next_token(stdio_reader rdr) -> token.token {\n \n     if (c == eof) { ret token.EOF(); }\n     if (is_alpha(c)) {\n-        accum += (c as u8);\n+        while (is_alpha(c)) {\n+            accum += (c as u8);\n+            c = rdr.getc() as char;\n+            ret token.IDENT(accum);\n+        }\n     }\n+\n+    if (is_dec_digit(c)) {\n+        if (c == '0') {\n+        } else {\n+            while (is_dec_digit(c)) {\n+                accum += (c as u8);\n+                ret token.LIT_INT(0);\n+            }\n+        }\n+    }\n+\n+    // One-byte structural symbols.\n+    if (c == ';') { ret token.SEMI(); }\n+    if (c == '.') { ret token.DOT(); }\n+    if (c == '(') { ret token.LPAREN(); }\n+    if (c == ')') { ret token.RPAREN(); }\n+    if (c == '{') { ret token.LBRACE(); }\n+    if (c == '}') { ret token.RBRACE(); }\n+    if (c == '[') { ret token.LBRACKET(); }\n+    if (c == ']') { ret token.RBRACKET(); }\n+    if (c == '@') { ret token.AT(); }\n+    if (c == '#') { ret token.POUND(); }\n+\n+    log \"lexer stopping at \";\n     log c;\n     ret token.EOF();\n }"}, {"sha": "8896b6f7767b8991e93bb9a578213622acdf57c9", "filename": "src/comp/fe/token.rs", "status": "modified", "additions": 148, "deletions": 2, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/0f224f977d9edeb7f8ca56c052c1202fab384552/src%2Fcomp%2Ffe%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f224f977d9edeb7f8ca56c052c1202fab384552/src%2Fcomp%2Ffe%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Ftoken.rs?ref=0f224f977d9edeb7f8ca56c052c1202fab384552", "patch": "@@ -1,4 +1,7 @@\n import util.common.ty_mach;\n+import util.common.ty_mach_to_str;\n+import std._int;\n+import std._uint;\n \n type op = tag\n     (PLUS(),\n@@ -107,10 +110,10 @@ type token = tag\n \n      /* Literals */\n      LIT_INT(int),\n-     LIT_UINT(int),\n+     LIT_UINT(uint),\n      LIT_MACH_INT(ty_mach, int),\n      LIT_STR(str),\n-     LIT_CHAR(int),\n+     LIT_CHAR(char),\n      LIT_BOOL(bool),\n \n      /* Name components */\n@@ -149,6 +152,149 @@ type token = tag\n      BRACEQUOTE(str),\n      EOF());\n \n+fn to_str(token t) -> str {\n+    alt (t) {\n+        case (OP(_)) { ret \"<op>\"; }\n+        case (OPEQ(_)) { ret \"<op>=\"; }\n+        case (AS()) { ret \"as\"; }\n+        case (WITH()) { ret \"with\"; }\n+\n+        /* Structural symbols */\n+        case (AT()) { ret \"@\"; }\n+        case (DOT()) { ret \".\"; }\n+        case (COMMA()) { ret \",\"; }\n+        case (SEMI()) { ret \";\"; }\n+        case (COLON()) { ret \":\"; }\n+        case (RARROW()) { ret \"->\"; }\n+        case (SEND()) { ret \"<|\"; }\n+        case (LARROW()) { ret \"<-\"; }\n+        case (LPAREN()) { ret \"(\"; }\n+        case (RPAREN()) { ret \")\"; }\n+        case (LBRACKET()) { ret \"[\"; }\n+        case (RBRACKET()) { ret \"]\"; }\n+        case (LBRACE()) { ret \"{\"; }\n+        case (RBRACE()) { ret \"}\"; }\n+\n+        /* Module and crate keywords */\n+        case (MOD()) { ret \"mod\"; }\n+        case (USE()) { ret \"use\"; }\n+        case (AUTH()) { ret \"auth\"; }\n+        case (META()) { ret \"meta\"; }\n+\n+        /* Metaprogramming keywords */\n+        case (SYNTAX()) { ret \"syntax\"; }\n+        case (POUND()) { ret \"#\"; }\n+\n+        /* Statement keywords */\n+        case (IF()) { ret \"if\"; }\n+        case (ELSE()) { ret \"else\"; }\n+        case (DO()) { ret \"do\"; }\n+        case (WHILE()) { ret \"while\"; }\n+        case (ALT()) { ret \"alt\"; }\n+        case (CASE()) { ret \"case\"; }\n+\n+        case (FAIL()) { ret \"fail\"; }\n+        case (DROP()) { ret \"drop\"; }\n+\n+        case (IN()) { ret \"in\"; }\n+        case (FOR()) { ret \"for\"; }\n+        case (EACH()) { ret \"each\"; }\n+        case (PUT()) { ret \"put\"; }\n+        case (RET()) { ret \"ret\"; }\n+        case (BE()) { ret \"be\"; }\n+\n+        /* Type and type-state keywords */\n+        case (TYPE()) { ret \"type\"; }\n+        case (CHECK()) { ret \"check\"; }\n+        case (CLAIM()) { ret \"claim\"; }\n+        case (PROVE()) { ret \"prove\"; }\n+\n+        /* Effect keywords */\n+        case (IO()) { ret \"io\"; }\n+        case (STATE()) { ret \"state\"; }\n+        case (UNSAFE()) { ret \"unsafe\"; }\n+\n+        /* Type qualifiers */\n+        case (NATIVE()) { ret \"native\"; }\n+        case (AUTO()) { ret \"auto\"; }\n+        case (MUTABLE()) { ret \"mutable\"; }\n+\n+        /* Name management */\n+        case (IMPORT()) { ret \"import\"; }\n+        case (EXPORT()) { ret \"export\"; }\n+\n+        /* Value / stmt declarators */\n+        case (LET()) { ret \"let\"; }\n+\n+        /* Magic runtime services */\n+        case (LOG()) { ret \"log\"; }\n+        case (SPAWN()) { ret \"spawn\"; }\n+        case (BIND()) { ret \"bind\"; }\n+        case (THREAD()) { ret \"thread\"; }\n+        case (YIELD()) { ret \"yield\"; }\n+        case (JOIN()) { ret \"join\"; }\n+\n+        /* Literals */\n+        case (LIT_INT(i)) { ret _int.to_str(i, 10u); }\n+        case (LIT_UINT(u)) { ret _uint.to_str(u, 10u); }\n+        case (LIT_MACH_INT(tm, i)) {\n+            ret  _int.to_str(i, 10u)\n+                + \"_\" + ty_mach_to_str(tm);\n+        }\n+\n+        case (LIT_STR(s)) {\n+            // FIXME: escape.\n+            ret \"\\\"\" + s + \"\\\"\";\n+        }\n+        case (LIT_CHAR(c)) {\n+            // FIXME: escape and encode.\n+            auto tmp = \"\";\n+            tmp += (c as u8);\n+            ret tmp;\n+        }\n+\n+        case (LIT_BOOL(b)) {\n+            if (b) { ret \"true\"; } else { ret \"false\"; }\n+        }\n+\n+        /* Name components */\n+        case (IDENT(s)) { ret s; }\n+        case (IDX(i)) { ret \"_\" + _int.to_str(i, 10u); }\n+        case (UNDERSCORE()) { ret \"_\"; }\n+\n+        /* Reserved type names */\n+        case (BOOL()) { ret \"bool\"; }\n+        case (INT()) { ret \"int\"; }\n+        case (UINT()) { ret \"uint\"; }\n+        case (FLOAT()) { ret \"float\"; }\n+        case (CHAR()) { ret \"char\"; }\n+        case (STR()) { ret \"str\"; }\n+        case (MACH(tm)) { ret ty_mach_to_str(tm); }\n+\n+        /* Algebraic type constructors */\n+        case (REC()) { ret \"rec\"; }\n+        case (TUP()) { ret \"tup\"; }\n+        case (TAG()) { ret \"tag\"; }\n+        case (VEC()) { ret \"vec\"; }\n+        case (ANY()) { ret \"any\"; }\n+\n+        /* Callable type constructors */\n+        case (FN()) { ret \"fn\"; }\n+        case (ITER()) { ret \"iter\"; }\n+\n+        /* Object type */\n+        case (OBJ()) { ret \"obj\"; }\n+\n+        /* Comm and task types */\n+        case (CHAN()) { ret \"chan\"; }\n+        case (PORT()) { ret \"port\"; }\n+        case (TASK()) { ret \"task\"; }\n+\n+        case (BRACEQUOTE(_)) { ret \"<bracequote>\"; }\n+        case (EOF()) { ret \"<eof>\"; }\n+    }\n+}\n+\n \n \n // Local Variables:"}, {"sha": "3089c2c12da3e8e02dd4fd233a39d215c6e9df35", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f224f977d9edeb7f8ca56c052c1202fab384552/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f224f977d9edeb7f8ca56c052c1202fab384552/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=0f224f977d9edeb7f8ca56c052c1202fab384552", "patch": "@@ -3,6 +3,19 @@ type ty_mach = tag( ty_i8(), ty_i16(), ty_i32(), ty_i64(),\n                     ty_u8(), ty_u16(), ty_u32(), ty_u64(),\n                     ty_f32(), ty_f16() );\n \n+fn ty_mach_to_str(ty_mach tm) -> str {\n+    alt (tm) {\n+        case (ty_u8()) { ret \"u8\"; }\n+        case (ty_i8()) { ret \"i8\"; }\n+        case (ty_u16()) { ret \"u16\"; }\n+        case (ty_i16()) { ret \"i16\"; }\n+        case (ty_u32()) { ret \"u32\"; }\n+        case (ty_i32()) { ret \"i32\"; }\n+        case (ty_u64()) { ret \"u64\"; }\n+        case (ty_i64()) { ret \"i64\"; }\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}