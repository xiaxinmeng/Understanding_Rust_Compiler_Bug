{"sha": "49ade22bd990f5ad9165431a4c974e5d8b0e8732", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YWRlMjJiZDk5MGY1YWQ5MTY1NDMxYTRjOTc0ZTVkOGIwZTg3MzI=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2020-10-04T21:56:48Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2020-10-06T22:13:15Z"}, "message": "Parse SocketAddrV6::scope_id", "tree": {"sha": "24e5bae956075a77db7024670a7ed5be25fafde7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e5bae956075a77db7024670a7ed5be25fafde7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ade22bd990f5ad9165431a4c974e5d8b0e8732", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEGdbxTRDxXfPwlFQKMuM+wV4f7zwFAl986/wACgkQMuM+wV4f\n7zxGmgwAsN+j5kaIY7A36Rs4TLrcaJspUABnaU1GbGM36QkX6X47+1G9TRRGZwK9\nW+a5rz9TZN+MshMYIVa5js0GqfrCQBIjz6Hy/WFjiVE1CNX5FFoGW66/aKuKzsag\npnDE5jlwMvp+ivYRnc2LO2y3OIisNzJgIRrtB23fhm3Cj54QRVZ8rsoUWWV0J4rf\nzMCoYVgRLTOKktmV9YjxNUOzPdTydb0ryGPICKY2oH0dE/s1gl0FY18ScOSOUZd0\nI2FzufbhgG37dCZMV1pSqrhivtsnlzrcLHYPeLU45AJlxsFFlF21/J8yqQCQHJkc\nxAlnZlVn2VTiX31KlM83mV9863l07IUNTsidvcJtoQf6fh7RTwhoZafpNli9lSnD\nbTq9XQECBNQ3sWgEeTNj0GZpfw7w+dl+ngZ1KX5Z6s+5MJkq3x8SpCzmPiI+mUMi\n4RsX0cMVVjWdtELEc3Rgb+RpWNfUOqL1rpSF6bN4Oz5MAa7Vy/NL0C0YL9TU2Xjl\nVBRfM6kY\n=55Yd\n-----END PGP SIGNATURE-----", "payload": "tree 24e5bae956075a77db7024670a7ed5be25fafde7\nparent a093957f43703555d02aaa2b8fd64ea686e1cd88\nauthor Tamir Duberstein <tamird@google.com> 1601848608 +0000\ncommitter Tamir Duberstein <tamird@google.com> 1602022395 +0000\n\nParse SocketAddrV6::scope_id\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ade22bd990f5ad9165431a4c974e5d8b0e8732", "html_url": "https://github.com/rust-lang/rust/commit/49ade22bd990f5ad9165431a4c974e5d8b0e8732", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ade22bd990f5ad9165431a4c974e5d8b0e8732/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a093957f43703555d02aaa2b8fd64ea686e1cd88", "url": "https://api.github.com/repos/rust-lang/rust/commits/a093957f43703555d02aaa2b8fd64ea686e1cd88", "html_url": "https://github.com/rust-lang/rust/commit/a093957f43703555d02aaa2b8fd64ea686e1cd88"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "e8b89626fbde1f75f637a86fd336d2073ad2bd12", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49ade22bd990f5ad9165431a4c974e5d8b0e8732/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ade22bd990f5ad9165431a4c974e5d8b0e8732/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=49ade22bd990f5ad9165431a4c974e5d8b0e8732", "patch": "@@ -32,7 +32,7 @@ macro_rules! impl_helper {\n     })*)\n }\n \n-impl_helper! { u8 u16 }\n+impl_helper! { u8 u16 u32 }\n \n struct Parser<'a> {\n     // parsing as ASCII, so can use byte array\n@@ -219,6 +219,14 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// Read a % followed by a scope id in base 10.\n+    fn read_scope_id(&mut self) -> Option<u32> {\n+        self.read_atomically(|p| {\n+            p.read_given_char('%')?;\n+            p.read_number(10, None)\n+        })\n+    }\n+\n     /// Read an IPV4 address with a port\n     fn read_socket_addr_v4(&mut self) -> Option<SocketAddrV4> {\n         self.read_atomically(|p| {\n@@ -233,10 +241,11 @@ impl<'a> Parser<'a> {\n         self.read_atomically(|p| {\n             p.read_given_char('[')?;\n             let ip = p.read_ipv6_addr()?;\n+            let scope_id = p.read_scope_id().unwrap_or(0);\n             p.read_given_char(']')?;\n \n             let port = p.read_port()?;\n-            Some(SocketAddrV6::new(ip, port, 0, 0))\n+            Some(SocketAddrV6::new(ip, port, 0, scope_id))\n         })\n     }\n "}, {"sha": "8d8889cd19d36757d44ae2ecbcd3e5b2a5fd88ce", "filename": "library/std/src/net/parser/tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ade22bd990f5ad9165431a4c974e5d8b0e8732/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ade22bd990f5ad9165431a4c974e5d8b0e8732/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs?ref=49ade22bd990f5ad9165431a4c974e5d8b0e8732", "patch": "@@ -3,6 +3,7 @@ use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAdd\n use crate::str::FromStr;\n \n const PORT: u16 = 8080;\n+const SCOPE_ID: u32 = 1337;\n \n const IPV4: Ipv4Addr = Ipv4Addr::new(192, 168, 0, 1);\n const IPV4_STR: &str = \"192.168.0.1\";\n@@ -13,6 +14,7 @@ const IPV6_STR_FULL: &str = \"2001:db8:0:0:0:0:c0a8:1\";\n const IPV6_STR_COMPRESS: &str = \"2001:db8::c0a8:1\";\n const IPV6_STR_V4: &str = \"2001:db8::192.168.0.1\";\n const IPV6_STR_PORT: &str = \"[2001:db8::c0a8:1]:8080\";\n+const IPV6_STR_PORT_SCOPE_ID: &str = \"[2001:db8::c0a8:1%1337]:8080\";\n \n #[test]\n fn parse_ipv4() {\n@@ -74,8 +76,8 @@ fn parse_socket_v4() {\n \n #[test]\n fn parse_socket_v6() {\n-    let result: SocketAddrV6 = IPV6_STR_PORT.parse().unwrap();\n-    assert_eq!(result, SocketAddrV6::new(IPV6, PORT, 0, 0));\n+    assert_eq!(IPV6_STR_PORT.parse(), Ok(SocketAddrV6::new(IPV6, PORT, 0, 0)));\n+    assert_eq!(IPV6_STR_PORT_SCOPE_ID.parse(), Ok(SocketAddrV6::new(IPV6, PORT, 0, SCOPE_ID)));\n \n     assert!(SocketAddrV6::from_str(IPV4_STR).is_err());\n     assert!(SocketAddrV6::from_str(IPV4_STR_PORT).is_err());"}]}