{"sha": "491ce71453499f61eeb24d891b28a07ea9ae532b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MWNlNzE0NTM0OTlmNjFlZWIyNGQ4OTFiMjhhMDdlYTlhZTUzMmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-11T11:34:58Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-11T12:20:33Z"}, "message": "Add a test for extra::rl.\n\nThis test has to be run by a human, to check inputs etc. Fortunately, it\nwon't bitrot (syntactically, or type-check-ly; it might bitrot\nsemantically), as it is designed so that the test runner compiles it with\n`--cfg robot_mode`, which is used to disable the actual running of code.", "tree": {"sha": "7e0d3f4c5c7de905be7384a316d78b237b74dc26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e0d3f4c5c7de905be7384a316d78b237b74dc26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/491ce71453499f61eeb24d891b28a07ea9ae532b", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/491ce71453499f61eeb24d891b28a07ea9ae532b", "html_url": "https://github.com/rust-lang/rust/commit/491ce71453499f61eeb24d891b28a07ea9ae532b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/491ce71453499f61eeb24d891b28a07ea9ae532b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ed5fcb122870d5b0876b32e2dffeb4ea2bd6aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed5fcb122870d5b0876b32e2dffeb4ea2bd6aed", "html_url": "https://github.com/rust-lang/rust/commit/4ed5fcb122870d5b0876b32e2dffeb4ea2bd6aed"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "558e0b6820dcbee720b2d36bcb5a3b3928a07e57", "filename": "src/test/run-pass/rl-human-test.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/491ce71453499f61eeb24d891b28a07ea9ae532b/src%2Ftest%2Frun-pass%2Frl-human-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491ce71453499f61eeb24d891b28a07ea9ae532b/src%2Ftest%2Frun-pass%2Frl-human-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frl-human-test.rs?ref=491ce71453499f61eeb24d891b28a07ea9ae532b", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast no compile flags for check-fast\n+\n+// we want this to be compiled to avoid bitrot, but the actual test\n+//has to be conducted by a human, i.e. someone (you?) compiling this\n+//file with a plain rustc invocation and running it and checking it\n+//works.\n+\n+// compile-flags: --cfg robot_mode\n+\n+extern mod extra;\n+use extra::rl;\n+\n+static HISTORY_FILE: &'static str = \"rl-human-test-history.txt\";\n+\n+fn main() {\n+    // don't run this in robot mode, but still typecheck it.\n+    if !cfg!(robot_mode) {\n+        println(\"~~ Welcome to the rl test \\\"suite\\\". ~~\");\n+        println!(\"Operations:\n+ - restrict the history to 2 lines,\n+ - set the tab-completion to suggest three copies of each of the last 3 letters (or 'empty'),\n+ - add 'one' and 'two' to the history,\n+ - save it to `{0}`,\n+ - add 'three',\n+ - prompt & save input (check the history & completion work and contains only 'two', 'three'),\n+ - load from `{0}`\n+ - prompt & save input (history should be 'one', 'two' again),\n+ - prompt once more.\n+\n+The bool return values of each step are printed.\",\n+                 HISTORY_FILE);\n+\n+        println!(\"restricting history length: {}\", rl::set_history_max_len(3));\n+\n+        do rl::complete |line, suggest| {\n+            if line.is_empty() {\n+                suggest(~\"empty\")\n+            } else {\n+                for c in line.rev_iter().take(3) {\n+                    suggest(format!(\"{0}{1}{1}{1}\", line, c))\n+                }\n+            }\n+        }\n+\n+        println!(\"adding 'one': {}\", rl::add_history(\"one\"));\n+        println!(\"adding 'two': {}\", rl::add_history(\"two\"));\n+\n+        println!(\"saving history: {}\", rl::save_history(HISTORY_FILE));\n+\n+        println!(\"adding 'three': {}\", rl::add_history(\"three\"));\n+\n+        match rl::read(\"> \") {\n+            Some(s) => println!(\"saving input: {}\", rl::add_history(s)),\n+            None => return\n+        }\n+        println!(\"loading history: {}\", rl::load_history(HISTORY_FILE));\n+\n+        match rl::read(\"> \") {\n+            Some(s) => println!(\"saving input: {}\", rl::add_history(s)),\n+            None => return\n+        }\n+\n+        rl::read(\"> \");\n+    }\n+}"}]}