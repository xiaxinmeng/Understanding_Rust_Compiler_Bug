{"sha": "cb3f4d43d9646deadf27da54e0d2a204685ed665", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiM2Y0ZDQzZDk2NDZkZWFkZjI3ZGE1NGUwZDJhMjA0Njg1ZWQ2NjU=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-02-27T20:18:51Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-06T19:19:03Z"}, "message": "7708: Initial implementation of generate Default assist.\n\nThe Generate Default impl from new function.", "tree": {"sha": "d63e638d2e47016987df720465032d8979535123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63e638d2e47016987df720465032d8979535123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3f4d43d9646deadf27da54e0d2a204685ed665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3f4d43d9646deadf27da54e0d2a204685ed665", "html_url": "https://github.com/rust-lang/rust/commit/cb3f4d43d9646deadf27da54e0d2a204685ed665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3f4d43d9646deadf27da54e0d2a204685ed665/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b8fb7c572eb658ee1136f086d6348aafba1e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b8fb7c572eb658ee1136f086d6348aafba1e1d", "html_url": "https://github.com/rust-lang/rust/commit/71b8fb7c572eb658ee1136f086d6348aafba1e1d"}], "stats": {"total": 223, "additions": 223, "deletions": 0}, "files": [{"sha": "a1174d3152fb60f811b912393942da8f9fff20d1", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/cb3f4d43d9646deadf27da54e0d2a204685ed665/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3f4d43d9646deadf27da54e0d2a204685ed665/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=cb3f4d43d9646deadf27da54e0d2a204685ed665", "patch": "@@ -0,0 +1,221 @@\n+use crate::{AssistId, assist_context::{AssistContext, Assists}};\n+use syntax::{AstNode, SyntaxKind, SyntaxNode, SyntaxText, ast::{self, NameOwner}};\n+use test_utils::mark;\n+\n+// Assist: generate_default_from_new\n+//\n+// Generates default implementation from new method\n+//\n+// ```\n+// struct Example { _inner: () }\n+//\n+// impl Example {\n+//     pu|b fn new() -> Self {\n+//         Self { _inner: () }\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Example { _inner: () }\n+\n+// impl Example {\n+//     pub fn new() -> Self {\n+//         Self { _inner: () }\n+//     }\n+// }\n+\n+// impl Default for Example {\n+//     fn default() -> Self {\n+//         Self::new()\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let fn_node: ast::Fn = ctx.find_node_at_offset()?;\n+    let fn_name = fn_node.name()?.to_string();\n+\n+    if !fn_name.eq(\"new\") {\n+        mark::hit!(other_function_than_new);\n+        return None;\n+    }\n+\n+    if fn_node.param_list()?.params().count() != 0 {\n+        mark::hit!(new_function_with_parameters);\n+        return None;\n+    }\n+\n+    let insert_after = scope_for_fn_insertion_node(&fn_node.syntax())?;\n+    let impl_obj = ast::Impl::cast(insert_after)?;\n+    let struct_name = impl_obj.self_ty()?.syntax().text();\n+\n+    let default_fn_syntax = default_fn_node_for_new(struct_name);\n+\n+\n+    acc.add(\n+        AssistId(\"generate_default_from_new\", crate::AssistKind::Generate),\n+        \"Generate a Default impl from a new fn\",\n+        impl_obj.syntax().text_range(),\n+        move |builder| {\n+            // TODO: indentation logic can also go here.\n+            // let new_indent = IndentLevel::from_node(&insert_after);\n+            let insert_location = impl_obj.syntax().text_range().end();\n+            builder.insert(insert_location, default_fn_syntax);\n+        },\n+    )\n+}\n+\n+fn scope_for_fn_insertion_node(node: &SyntaxNode) -> Option<SyntaxNode> {\n+    node.ancestors().into_iter().find(|node| node.kind() == SyntaxKind::IMPL)\n+}\n+\n+fn default_fn_node_for_new(struct_name: SyntaxText) -> String {\n+    // TODO: Update the implementation to consider the code indentation.\n+    format!(\n+    r#\"\n+\n+impl Default for {} {{\n+    fn default() -> Self {{\n+        Self::new()\n+    }}\n+}}\"#\n+    ,struct_name)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn generate_default() {\n+        check_assist(\n+            generate_default_from_new,\n+            r#\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn ne$0w() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+fn main() {}\n+\"#,\n+            r#\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn new() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\n+fn main() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn generate_default2() {\n+        check_assist(\n+            generate_default_from_new,\n+            r#\"\n+struct Test { value: u32 }\n+\n+impl Test {\n+    pub fn ne$0w() -> Self {\n+        Self { value: 0 }\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Test { value: u32 }\n+\n+impl Test {\n+    pub fn new() -> Self {\n+        Self { value: 0 }\n+    }\n+}\n+\n+impl Default for Test {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_parameters() {\n+        mark::check!(new_function_with_parameters);\n+        check_assist_not_applicable(generate_default_from_new,\n+        r#\"\n+struct Example { _inner: () }\n+\n+impl Example {\n+    pub fn $0new(value: ()) -> Self {\n+        Self { _inner: value }\n+    }\n+}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn other_function_than_new() {\n+        mark::check!(other_function_than_new);\n+        check_assist_not_applicable(generate_default_from_new,\n+        r#\"\n+struct Example { _inner: () }\n+\n+impl Exmaple {\n+    pub fn a$0dd() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+\"#\n+        );\n+    }\n+\n+//     #[test]\n+//     fn default_block_is_already_present() {\n+//         check_assist_not_applicable(generate_default_from_new,\n+//         r#\"\n+// struct Example { _inner: () }\n+\n+// impl Exmaple {\n+//     pub fn n$0ew() -> Self {\n+//         Self { _inner: () }\n+//     }\n+// }\n+\n+// impl Default for Example {\n+//     fn default() -> Self {\n+//         Self::new()\n+//     }\n+// }\n+// \"#,\n+//         );\n+//     }\n+\n+    #[test]\n+    fn standalone_new_function() {\n+        check_assist_not_applicable(generate_default_from_new,\n+        r#\"\n+fn n$0ew() -> u32 {\n+    0\n+}\n+\"#\n+        );\n+    }\n+}"}, {"sha": "ea62d5f5da18cc3f17815b73ba47b24c520b5334", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3f4d43d9646deadf27da54e0d2a204685ed665/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3f4d43d9646deadf27da54e0d2a204685ed665/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=cb3f4d43d9646deadf27da54e0d2a204685ed665", "patch": "@@ -127,6 +127,7 @@ mod handlers {\n     mod flip_comma;\n     mod flip_trait_bound;\n     mod generate_default_from_enum_variant;\n+    mod generate_default_from_new;\n     mod generate_derive;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n@@ -189,6 +190,7 @@ mod handlers {\n             flip_comma::flip_comma,\n             flip_trait_bound::flip_trait_bound,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n+            generate_default_from_new::generate_default_from_new,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,"}]}