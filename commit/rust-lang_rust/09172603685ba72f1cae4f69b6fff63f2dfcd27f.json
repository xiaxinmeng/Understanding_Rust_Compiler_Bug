{"sha": "09172603685ba72f1cae4f69b6fff63f2dfcd27f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTcyNjAzNjg1YmE3MmYxY2FlNGY2OWI2ZmZmNjNmMmRmY2QyN2Y=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-15T22:42:48Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-12-06T12:43:21Z"}, "message": "Add a few basic tests for if-let guards", "tree": {"sha": "c979777ba508f4a3539973d78482ecfb0bc310be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c979777ba508f4a3539973d78482ecfb0bc310be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09172603685ba72f1cae4f69b6fff63f2dfcd27f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09172603685ba72f1cae4f69b6fff63f2dfcd27f", "html_url": "https://github.com/rust-lang/rust/commit/09172603685ba72f1cae4f69b6fff63f2dfcd27f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09172603685ba72f1cae4f69b6fff63f2dfcd27f/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e69bc3fc92c0e76bc8a3977c82cfac75efd743", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e69bc3fc92c0e76bc8a3977c82cfac75efd743", "html_url": "https://github.com/rust-lang/rust/commit/61e69bc3fc92c0e76bc8a3977c82cfac75efd743"}], "stats": {"total": 225, "additions": 190, "deletions": 35}, "files": [{"sha": "5c10a7c781183e3ad7600e1499b1bebd8bbe016a", "filename": "src/test/ui/generator/yielding-in-match-guards.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -10,6 +10,9 @@\n // Thus, `&'_ u8` should be included in type signature\n // of the underlying generator.\n \n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n async fn f() -> u8 { 1 }\n async fn foo() -> [bool; 10] { [false; 10] }\n \n@@ -36,8 +39,16 @@ async fn i(x: u8) {\n     }\n }\n \n+async fn j(x: u8) {\n+    match x {\n+        y if let (1, 42) = (f().await, y) => (),\n+        _ => (),\n+    }\n+}\n+\n fn main() {\n     let _ = g(10);\n     let _ = h(9);\n     let _ = i(8);\n+    let _ = j(7);\n }"}, {"sha": "4e2d70e3290ec44f0c5c53ff3a52400975b82ce4", "filename": "src/test/ui/rfc-2294-if-let-guard/bindings.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    match Some(None) {\n+        Some(x) if let Some(y) = x => (x, y),\n+        _ => y, //~ ERROR cannot find value `y`\n+    }\n+    y //~ ERROR cannot find value `y`\n+}"}, {"sha": "9c5d92a33ada725771dd41ba5c11405e0ec44926", "filename": "src/test/ui/rfc-2294-if-let-guard/bindings.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/bindings.rs:7:14\n+   |\n+LL |         _ => y,\n+   |              ^ not found in this scope\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/bindings.rs:9:5\n+   |\n+LL |     y\n+   |     ^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "1670078e0d38b6f9ce64f03ba003c7c6096893a4", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -1,5 +1,5 @@\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:81:15\n+  --> $DIR/feature-gate.rs:80:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -17,7 +17,7 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n \n error[E0658]: `if let` guard is not implemented\n-  --> $DIR/feature-gate.rs:77:12\n+  --> $DIR/feature-gate.rs:76:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:11:16\n+  --> $DIR/feature-gate.rs:10:16\n    |\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |         () if (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:15:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:19:23\n+  --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -53,7 +53,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:23:15\n+  --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:27:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:31:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:35:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:35:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:15\n+  --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:28\n+  --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -116,7 +116,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -125,7 +125,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -134,7 +134,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -143,7 +143,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:53:15\n+  --> $DIR/feature-gate.rs:52:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -152,7 +152,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:69:16\n+  --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -161,7 +161,7 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:72:16\n+  --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n@@ -170,7 +170,7 @@ LL |     use_expr!((let 0 = 1));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:11:16\n+  --> $DIR/feature-gate.rs:10:16\n    |\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -179,7 +179,7 @@ LL |         () if (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:15:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -188,7 +188,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:19:23\n+  --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -197,7 +197,7 @@ LL |         () if true && let 0 = 1 => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:23:15\n+  --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -206,7 +206,7 @@ LL |         () if let 0 = 1 && true => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:27:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -215,7 +215,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:31:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -224,7 +224,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:35:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -233,7 +233,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:35:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -242,7 +242,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:15\n+  --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -251,7 +251,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:28\n+  --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -260,7 +260,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -269,7 +269,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -278,7 +278,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -287,7 +287,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:53:15\n+  --> $DIR/feature-gate.rs:52:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -296,7 +296,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:69:16\n+  --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -305,14 +305,14 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:72:16\n+  --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 35 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "a3663003790f7eeda51368eaddfe0076edf44dc0", "filename": "src/test/ui/rfc-2294-if-let-guard/run-pass.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+enum Foo {\n+    Bar,\n+    Baz,\n+    Qux(u8),\n+}\n+\n+fn bar(x: bool) -> Foo {\n+    if x { Foo::Baz } else { Foo::Bar }\n+}\n+\n+fn baz(x: u8) -> Foo {\n+    if x % 2 == 0 { Foo::Bar } else { Foo::Baz }\n+}\n+\n+fn qux(x: u8) -> Foo {\n+    Foo::Qux(x.rotate_left(1))\n+}\n+\n+fn main() {\n+    match Some((true, 3)) {\n+        Some((x, _)) if let Foo::Bar = bar(x) => panic!(),\n+        Some((_, x)) if let Foo::Baz = baz(x) => {},\n+        _ => panic!(),\n+    }\n+    match Some(42) {\n+        Some(x) if let Foo::Qux(y) = qux(x) => assert_eq!(y, 84),\n+        _ => panic!(),\n+    }\n+}"}, {"sha": "a4fc7f8cf2b263a4fff22f6824af6eab4402b2b6", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -0,0 +1,16 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+fn ok() -> Result<Option<bool>, ()> {\n+    Ok(Some(true))\n+}\n+\n+fn main() {\n+    match ok() {\n+        Ok(x) if let Err(_) = x => {},\n+        //~^ ERROR mismatched types\n+        Ok(x) if let 0 = x => {},\n+        //~^ ERROR mismatched types\n+        _ => {}\n+    }\n+}"}, {"sha": "7ce93fe7348fd8d84805d052df99622897775028", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/typeck.rs:10:22\n+   |\n+LL |         Ok(x) if let Err(_) = x => {},\n+   |                      ^^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |\n+   = note: expected enum `Option<bool>`\n+              found enum `std::result::Result<_, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/typeck.rs:12:22\n+   |\n+LL |         Ok(x) if let 0 = x => {},\n+   |                      ^ expected enum `Option`, found integer\n+   |\n+   = note: expected enum `Option<bool>`\n+              found type `{integer}`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9691a12f45b05f584228a4c56a775d30736b583a", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -0,0 +1,22 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+#[deny(irrefutable_let_patterns)]\n+fn irrefutable_let_guard() {\n+    match Some(()) {\n+        Some(x) if let () = x => {}\n+        //~^ ERROR irrefutable if-let guard\n+        _ => {}\n+    }\n+}\n+\n+#[deny(unreachable_patterns)]\n+fn unreachable_pattern() {\n+    match Some(()) {\n+        x if let None | None = x => {}\n+        //~^ ERROR unreachable pattern\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "45720f9fbc5515ae9441b62e001f540be1af48c1", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09172603685ba72f1cae4f69b6fff63f2dfcd27f/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr?ref=09172603685ba72f1cae4f69b6fff63f2dfcd27f", "patch": "@@ -0,0 +1,26 @@\n+error: irrefutable if-let guard\n+  --> $DIR/warns.rs:7:24\n+   |\n+LL |         Some(x) if let () = x => {}\n+   |                        ^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warns.rs:4:8\n+   |\n+LL | #[deny(irrefutable_let_patterns)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/warns.rs:16:25\n+   |\n+LL |         x if let None | None = x => {}\n+   |                         ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warns.rs:13:8\n+   |\n+LL | #[deny(unreachable_patterns)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}