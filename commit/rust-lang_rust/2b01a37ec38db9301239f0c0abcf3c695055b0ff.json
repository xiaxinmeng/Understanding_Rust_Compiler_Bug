{"sha": "2b01a37ec38db9301239f0c0abcf3c695055b0ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMDFhMzdlYzM4ZGI5MzAxMjM5ZjBjMGFiY2YzYzY5NTA1NWIwZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-21T09:20:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-21T09:20:48Z"}, "message": "Auto merge of #21959 - dhuseby:bitrig-support, r=brson\n\nThis patch adds the necessary pieces to support rust on Bitrig https://bitrig.org", "tree": {"sha": "a8fbf2329325d51716f163780d5e932989d04e06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8fbf2329325d51716f163780d5e932989d04e06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b01a37ec38db9301239f0c0abcf3c695055b0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b01a37ec38db9301239f0c0abcf3c695055b0ff", "html_url": "https://github.com/rust-lang/rust/commit/2b01a37ec38db9301239f0c0abcf3c695055b0ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b01a37ec38db9301239f0c0abcf3c695055b0ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}, {"sha": "551304015bac6f8424fcc6827855d3c61fe167c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/551304015bac6f8424fcc6827855d3c61fe167c9", "html_url": "https://github.com/rust-lang/rust/commit/551304015bac6f8424fcc6827855d3c61fe167c9"}], "stats": {"total": 923, "additions": 773, "deletions": 150}, "files": [{"sha": "e722fe8772a394f21e90280aaf21c5bc727dd4a1", "filename": "configure", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/configure", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -374,8 +374,12 @@ case $CFG_OSTYPE in\n         CFG_OSTYPE=unknown-dragonfly\n         ;;\n \n+    Bitrig)\n+        CFG_OSTYPE=unknown-bitrig\n+        ;;\n+\n     OpenBSD)\n-\tCFG_OSTYPE=unknown-openbsd\n+        CFG_OSTYPE=unknown-openbsd\n        ;;\n \n     Darwin)\n@@ -747,6 +751,13 @@ then\n     CFG_ENABLE_CLANG=1\n fi\n \n+# Force bitrig to build with clang; gcc doesn't like us there\n+if [ $CFG_OSTYPE = unknown-bitrig ]\n+then\n+    step_msg \"on Bitrig, forcing use of clang\"\n+    CFG_ENABLE_CLANG=1\n+fi\n+\n if [ -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n then\n     err \"either clang or gcc is required\""}, {"sha": "ad34988cb1bc00369ca1f92826a066715e05590a", "filename": "mk/cfg/x86_64-unknown-bitrig.mk", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -0,0 +1,26 @@\n+# x86_64-unknown-bitrig-elf configuration\n+CC_x86_64-unknown-bitrig=$(CC)\n+CXX_x86_64-unknown-bitrig=$(CXX)\n+CPP_x86_64-unknown-bitrig=$(CPP)\n+AR_x86_64-unknown-bitrig=$(AR)\n+CFG_LIB_NAME_x86_64-unknown-bitrig=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-unknown-bitrig=lib$(1).a\n+CFG_LIB_GLOB_x86_64-unknown-bitrig=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-unknown-bitrig=$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_x86_64-unknown-bitrig := -m64 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig := -Wall -Werror -fPIC -m64 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-bitrig := -shared -pic -pthread -m64 $(LDFLAGS)\n+CFG_GCCISH_DEF_FLAG_x86_64-unknown-bitrig := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-bitrig := -Wl,-pic -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-bitrig := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_x86_64-unknown-bitrig := .bsd.def\n+CFG_LLC_FLAGS_x86_64-unknown-bitrig :=\n+CFG_INSTALL_NAME_x86_64-unknown-bitrig =\n+CFG_EXE_SUFFIX_x86_64-unknown-bitrig :=\n+CFG_WINDOWSY_x86_64-unknown-bitrig :=\n+CFG_UNIXY_x86_64-unknown-bitrig := 1\n+CFG_PATH_MUNGE_x86_64-unknown-bitrig :=\n+CFG_LDPATH_x86_64-unknown-bitrig :=\n+CFG_RUN_x86_64-unknown-bitrig=$(2)\n+CFG_RUN_TARG_x86_64-unknown-bitrig=$(call CFG_RUN_x86_64-unknown-bitrig,,$(2))\n+CFG_GNU_TRIPLE_x86_64-unknown-bitrig := x86_64-unknown-bitrig"}, {"sha": "ed50585822ed432448079d431c9f28442f35896a", "filename": "mk/platform.mk", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -144,14 +144,14 @@ FIND_COMPILER = $(word 1,$(1:ccache=))\n define CFG_MAKE_TOOLCHAIN\n   # Prepend the tools with their prefix if cross compiling\n   ifneq ($(CFG_BUILD),$(1))\n-\tCC_$(1)=$(CROSS_PREFIX_$(1))$(CC_$(1))\n-\tCXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n-\tCPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n-\tAR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n-\tRUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(CC_$(1))) \\\n-\t    -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))\n-\n-\tRUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n+       CC_$(1)=$(CROSS_PREFIX_$(1))$(CC_$(1))\n+       CXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n+       CPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n+       AR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n+       RUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(CC_$(1))) \\\n+           -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))\n+\n+       RUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n   endif\n \n   CFG_COMPILE_C_$(1) = $$(CC_$(1)) \\\n@@ -179,11 +179,19 @@ define CFG_MAKE_TOOLCHAIN\n \n   ifeq ($$(findstring $(HOST_$(1)),arm aarch64 mips mipsel powerpc),)\n \n+  # On Bitrig, we need the relocation model to be PIC for everthing\n+  ifeq (,$(filter $(OSTYPE_$(1)),bitrig))\n+    LLVM_MC_RELOCATION_MODEL=\"pic\"\n+  else\n+    LLVM_MC_RELOCATION_MODEL=\"default\"\n+  endif\n+\n   # We're using llvm-mc as our assembler because it supports\n   # .cfi pseudo-ops on mac\n   CFG_ASSEMBLE_$(1)=$$(CPP_$(1)) -E $$(CFG_DEPEND_FLAGS) $$(2) | \\\n                     $$(LLVM_MC_$$(CFG_BUILD)) \\\n                     -assemble \\\n+                    -relocation-model=$$(LLVM_MC_RELOCATION_MODEL) \\\n                     -filetype=obj \\\n                     -triple=$(1) \\\n                     -o=$$(1)\n@@ -192,7 +200,7 @@ define CFG_MAKE_TOOLCHAIN\n   # For the ARM, AARCH64, MIPS and POWER crosses, use the toolchain assembler\n   # FIXME: We should be able to use the LLVM assembler\n   CFG_ASSEMBLE_$(1)=$$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-\t\t    $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)\n+                   $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)\n \n   endif\n "}, {"sha": "778629dd2028f53ed838dd533198e2705045c358", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -23,6 +23,7 @@ static OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"linux\", \"linux\"),\n     (\"freebsd\", \"freebsd\"),\n     (\"dragonfly\", \"dragonfly\"),\n+    (\"bitrig\", \"bitrig\"),\n     (\"openbsd\", \"openbsd\"),\n ];\n "}, {"sha": "e6ff29799f4c60a0abf89ef31219496380ff77cf", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -2188,8 +2188,8 @@ The following configurations must be defined by the implementation:\n   `\"unix\"` or `\"windows\"`. The value of this configuration option is defined\n   as a configuration itself, like `unix` or `windows`.\n * `target_os = \"...\"`. Operating system of the target, examples include\n-  `\"win32\"`, `\"macos\"`, `\"linux\"`, `\"android\"`, `\"freebsd\"`, `\"dragonfly\"` or\n-  `\"openbsd\"`.\n+  `\"win32\"`, `\"macos\"`, `\"linux\"`, `\"android\"`, `\"freebsd\"`, `\"dragonfly\"`,\n+  `\"bitrig\"` or `\"openbsd\"`.\n * `target_word_size = \"...\"`. Target word size in bits. This is set to `\"32\"`\n   for targets with 32-bit pointers, and likewise set to `\"64\"` for 64-bit\n   pointers."}, {"sha": "ca59b1c7d34a2faeb8f967d73a55355aea9c2a00", "filename": "src/etc/local_stage0.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -18,7 +18,7 @@ LIB_PREFIX=lib\n \n OS=`uname -s`\n case $OS in\n-    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"OpenBSD\")\n+    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"Bitrig\"|\"OpenBSD\")\n     BIN_SUF=\n     LIB_SUF=.so\n     ;;"}, {"sha": "e5e8c9f11bd82691e823583bfc140d4c46d1664c", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -57,7 +57,16 @@ def run(args):\n args.extend(components)\n out = run(args)\n for lib in out.strip().replace(\"\\n\", ' ').split(' '):\n-    lib = lib.strip()[2:] # chop of the leading '-l'\n+    if len(lib) == 0:\n+        continue\n+    # in some cases we get extra spaces in between libs so ignore those\n+    if len(lib) == 1 and lib == ' ':\n+        continue\n+    # not all libs strictly follow -lfoo, on Bitrig, there is -pthread\n+    if lib[0:2] == '-l':\n+        lib = lib.strip()[2:]\n+    elif lib[0] == '-':\n+        lib = lib.strip()[1:]\n     f.write(\"#[link(name = \\\"\" + lib + \"\\\"\")\n     # LLVM libraries are all static libraries\n     if 'LLVM' in lib:"}, {"sha": "0349ccf9b66408bf80833afe3d4b96d68dd6ceef", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -46,13 +46,13 @@ def scrub(b):\n         \"winnt\": [\"bin/rustc.exe\"],\n         \"freebsd\": [\"bin/rustc\"],\n         \"dragonfly\": [\"bin/rustc\"],\n+        \"bitrig\": [\"bin/rustc\"],\n         \"openbsd\": [\"bin/rustc\"],\n         }\n \n winnt_runtime_deps_32 = [\"libgcc_s_dw2-1.dll\", \"libstdc++-6.dll\"]\n winnt_runtime_deps_64 = [\"libgcc_s_seh-1.dll\", \"libstdc++-6.dll\"]\n \n-\n def parse_line(n, line):\n     global snapshotfile\n \n@@ -101,6 +101,8 @@ def get_kernel(triple):\n         return \"freebsd\"\n     if os_name == \"dragonfly\":\n         return \"dragonfly\"\n+    if os_name == \"bitrig\":\n+        return \"bitrig\"\n     if os_name == \"openbsd\":\n         return \"openbsd\"\n     return \"linux\""}, {"sha": "694b5d23c490e5e4736aab26321f33c22ce3826d", "filename": "src/libbacktrace/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibbacktrace%2Fconfigure", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fconfigure?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -5650,7 +5650,7 @@ else\n     lt_cv_sys_max_cmd_len=8192;\n     ;;\n \n-  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly* | bitrig*)\n     # This has been around since 386BSD, at least.  Likely further.\n     if test -x /sbin/sysctl; then\n       lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n@@ -9332,7 +9332,7 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       ;;\n \n     # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n-    freebsd* | dragonfly* | openbsd*)\n+    freebsd* | dragonfly* | bitrig* | openbsd*)\n       archive_cmds='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'\n       hardcode_libdir_flag_spec='-R$libdir'\n       hardcode_direct=yes"}, {"sha": "eaef55a59332a88c6bcb008a56214d48518c6546", "filename": "src/libbacktrace/ltmain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibbacktrace%2Fltmain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibbacktrace%2Fltmain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fltmain.sh?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -4741,7 +4741,7 @@ func_mode_link ()\n \t    # These systems don't actually have a C library (as such)\n \t    test \"X$arg\" = \"X-lc\" && continue\n \t    ;;\n-\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n+\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n \t    # Do not include libc due to us having libc/libc_r.\n \t    test \"X$arg\" = \"X-lc\" && continue\n \t    ;;"}, {"sha": "bf0cc9b4ad5e1f24ad160c4d83d933aa343f79ff", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 92, "deletions": 80, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -281,6 +281,7 @@ pub use funcs::bsd43::{shutdown};\n           target_os = \"android\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n pub use consts::os::posix01::{CLOCK_REALTIME, CLOCK_MONOTONIC};\n \n@@ -291,7 +292,7 @@ pub use types::os::arch::extra::{sockaddr_ll};\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub use consts::os::extra::{AF_PACKET};\n \n-#[cfg(all(unix, not(any(target_os = \"freebsd\", target_os = \"openbsd\"))))]\n+#[cfg(all(unix, not(any(target_os = \"freebsd\", target_os = \"bitrig\", target_os = \"openbsd\"))))]\n pub use consts::os::extra::{MAP_STACK};\n \n #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n@@ -1322,7 +1323,7 @@ pub mod types {\n         }\n     }\n \n-    #[cfg(target_os = \"openbsd\")]\n+    #[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n@@ -1333,6 +1334,24 @@ pub mod types {\n \n                 pub type pthread_t = uintptr_t;\n \n+                #[cfg(target_os = \"bitrig\")]\n+                #[repr(C)]\n+                #[derive(Copy)] pub struct glob_t {\n+                    pub gl_pathc:  c_int,\n+                    pub gl_matchc: c_int,\n+                    pub gl_offs:   c_int,\n+                    pub gl_flags:  c_int,\n+                    pub gl_pathv:  *mut *mut c_char,\n+                    pub __unused1: *mut c_void,\n+                    pub __unused2: *mut c_void,\n+                    pub __unused3: *mut c_void,\n+                    pub __unused4: *mut c_void,\n+                    pub __unused5: *mut c_void,\n+                    pub __unused6: *mut c_void,\n+                    pub __unused7: *mut c_void,\n+                }\n+\n+                #[cfg(target_os = \"openbsd\")]\n                 #[repr(C)]\n                 #[derive(Copy)] pub struct glob_t {\n                     pub gl_pathc:  c_int,\n@@ -1451,7 +1470,6 @@ pub mod types {\n                     pub ifa_dstaddr: *mut sockaddr,\n                     pub ifa_data: *mut c_void\n                 }\n-\n             }\n         }\n \n@@ -1485,15 +1503,16 @@ pub mod types {\n                 pub type uintmax_t = u64;\n             }\n             pub mod posix88 {\n+                use types::os::arch::c95::{c_long};\n                 pub type off_t = i64;\n-                pub type dev_t = u32;\n+                pub type dev_t = i32;\n                 pub type ino_t = u64;\n                 pub type pid_t = i32;\n                 pub type uid_t = u32;\n                 pub type gid_t = u32;\n                 pub type useconds_t = u32;\n                 pub type mode_t = u32;\n-                pub type ssize_t = i64;\n+                pub type ssize_t = c_long;\n             }\n             pub mod posix01 {\n                 use types::common::c95::{c_void};\n@@ -1503,7 +1522,7 @@ pub mod types {\n                 use types::os::arch::posix88::{mode_t, off_t};\n                 use types::os::arch::posix88::{uid_t};\n \n-                pub type nlink_t = u32;\n+                pub type nlink_t = uint32_t;\n                 pub type blksize_t = uint32_t;\n                 pub type ino_t = uint64_t;\n                 pub type blkcnt_t = i64;\n@@ -3892,7 +3911,7 @@ pub mod consts {\n         }\n     }\n \n-    #[cfg(target_os = \"openbsd\")]\n+    #[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -3980,11 +3999,11 @@ pub mod consts {\n             pub const MCL_CURRENT : c_int = 0x0001;\n             pub const MCL_FUTURE : c_int = 0x0002;\n \n-            pub const MS_SYNC : c_int = 0x0002; // changed\n             pub const MS_ASYNC : c_int = 0x0001;\n-            pub const MS_INVALIDATE : c_int = 0x0004; // changed\n+            pub const MS_SYNC : c_int = 0x0002;\n+            pub const MS_INVALIDATE : c_int = 0x0004;\n \n-            pub const EPERM : c_int = 1; // not checked\n+            pub const EPERM : c_int = 1;\n             pub const ENOENT : c_int = 2;\n             pub const ESRCH : c_int = 3;\n             pub const EINTR : c_int = 4;\n@@ -4066,25 +4085,17 @@ pub mod consts {\n             pub const EFTYPE : c_int = 79;\n             pub const EAUTH : c_int = 80;\n             pub const ENEEDAUTH : c_int = 81;\n-            pub const EIDRM : c_int = 82;\n-            pub const ENOMSG : c_int = 83;\n-            pub const EOVERFLOW : c_int = 84;\n-            pub const ECANCELED : c_int = 85;\n-            pub const EILSEQ : c_int = 86;\n-            pub const ENOATTR : c_int = 87;\n-            pub const EDOOFUS : c_int = 88;\n-            pub const EBADMSG : c_int = 89;\n-            pub const EMULTIHOP : c_int = 90;\n-            pub const ENOLINK : c_int = 91;\n-            pub const EPROTO : c_int = 92;\n-            pub const ENOMEDIUM : c_int = 93;\n-            pub const EUNUSED94 : c_int = 94;\n-            pub const EUNUSED95 : c_int = 95;\n-            pub const EUNUSED96 : c_int = 96;\n-            pub const EUNUSED97 : c_int = 97;\n-            pub const EUNUSED98 : c_int = 98;\n-            pub const EASYNC : c_int = 99;\n-            pub const ELAST : c_int = 99;\n+            pub const EIPSEC : c_int = 82;\n+            pub const ENOATTR : c_int = 83;\n+            pub const EILSEQ : c_int = 84;\n+            pub const ENOMEDIUM : c_int = 85;\n+            pub const EMEDIUMTYPE : c_int = 86;\n+            pub const EOVERFLOW : c_int = 87;\n+            pub const ECANCELED : c_int = 88;\n+            pub const EIDRM : c_int = 89;\n+            pub const ENOMSG : c_int = 90;\n+            pub const ENOTSUP : c_int = 91;\n+            pub const ELAST : c_int = 91; // must be equal to largest errno\n         }\n         pub mod posix01 {\n             use types::os::arch::c95::{c_int, size_t};\n@@ -4094,6 +4105,12 @@ pub mod consts {\n             pub const F_SETFD : c_int = 2;\n             pub const F_GETFL : c_int = 3;\n             pub const F_SETFL : c_int = 4;\n+            pub const F_GETOWN : c_int = 5;\n+            pub const F_SETOWN : c_int = 6;\n+            pub const F_GETLK : c_int = 7;\n+            pub const F_SETLK : c_int = 8;\n+            pub const F_SETLKW : c_int = 9;\n+            pub const F_DUPFD_CLOEXEC : c_int = 10;\n \n             pub const SIGTRAP : c_int = 5;\n             pub const SIGPIPE: c_int = 13;\n@@ -4105,19 +4122,20 @@ pub mod consts {\n             pub const GLOB_MARK     : c_int = 0x0008;\n             pub const GLOB_NOCHECK  : c_int = 0x0010;\n             pub const GLOB_NOSORT   : c_int = 0x0020;\n-            pub const GLOB_NOESCAPE : c_int = 0x1000; // changed\n+            pub const GLOB_NOESCAPE : c_int = 0x1000;\n \n             pub const GLOB_NOSPACE  : c_int = -1;\n             pub const GLOB_ABORTED  : c_int = -2;\n             pub const GLOB_NOMATCH  : c_int = -3;\n+            pub const GLOB_NOSYS : c_int = -4;\n \n             pub const POSIX_MADV_NORMAL : c_int = 0;\n             pub const POSIX_MADV_RANDOM : c_int = 1;\n             pub const POSIX_MADV_SEQUENTIAL : c_int = 2;\n             pub const POSIX_MADV_WILLNEED : c_int = 3;\n             pub const POSIX_MADV_DONTNEED : c_int = 4;\n \n-            pub const _SC_IOV_MAX : c_int = 51; // all changed...\n+            pub const _SC_IOV_MAX : c_int = 51;\n             pub const _SC_GETGR_R_SIZE_MAX : c_int = 100;\n             pub const _SC_GETPW_R_SIZE_MAX : c_int = 101;\n             pub const _SC_LOGIN_NAME_MAX : c_int = 102;\n@@ -4144,14 +4162,13 @@ pub mod consts {\n             pub const _SC_XOPEN_SHM : c_int = 30;\n             pub const _SC_XOPEN_UNIX : c_int = 123;\n             pub const _SC_XOPEN_VERSION : c_int = 125;\n-            //pub const _SC_XOPEN_XCU_VERSION : c_int = ;\n \n-            pub const PTHREAD_CREATE_JOINABLE: c_int = 0;\n-            pub const PTHREAD_CREATE_DETACHED: c_int = 1;\n-            pub const PTHREAD_STACK_MIN: size_t = 2048;\n+            pub const PTHREAD_CREATE_JOINABLE : c_int = 0;\n+            pub const PTHREAD_CREATE_DETACHED : c_int = 1;\n+            pub const PTHREAD_STACK_MIN : size_t = 2048;\n \n-            pub const CLOCK_REALTIME: c_int = 0;\n-            pub const CLOCK_MONOTONIC: c_int = 3;\n+            pub const CLOCK_REALTIME : c_int = 0;\n+            pub const CLOCK_MONOTONIC : c_int = 3;\n         }\n         pub mod posix08 {\n         }\n@@ -4163,23 +4180,11 @@ pub mod consts {\n             pub const MADV_SEQUENTIAL : c_int = 2;\n             pub const MADV_WILLNEED : c_int = 3;\n             pub const MADV_DONTNEED : c_int = 4;\n-            pub const MADV_FREE : c_int = 6; // changed\n-            //pub const MADV_NOSYNC : c_int = ;\n-            //pub const MADV_AUTOSYNC : c_int = ;\n-            //pub const MADV_NOCORE : c_int = ;\n-            //pub const MADV_CORE : c_int = ;\n-            //pub const MADV_PROTECT : c_int = ;\n-\n-            //pub const MINCORE_INCORE : c_int =  ;\n-            //pub const MINCORE_REFERENCED : c_int = ;\n-            //pub const MINCORE_MODIFIED : c_int = ;\n-            //pub const MINCORE_REFERENCED_OTHER : c_int = ;\n-            //pub const MINCORE_MODIFIED_OTHER : c_int = ;\n-            //pub const MINCORE_SUPER : c_int = ;\n+            pub const MADV_FREE : c_int = 6;\n \n-            pub const AF_INET: c_int = 2;\n-            pub const AF_INET6: c_int = 24; // changed\n             pub const AF_UNIX: c_int = 1;\n+            pub const AF_INET: c_int = 2;\n+            pub const AF_INET6: c_int = 24;\n             pub const SOCK_STREAM: c_int = 1;\n             pub const SOCK_DGRAM: c_int = 2;\n             pub const SOCK_RAW: c_int = 3;\n@@ -4192,13 +4197,10 @@ pub mod consts {\n             pub const IP_HDRINCL: c_int = 2;\n             pub const IP_ADD_MEMBERSHIP: c_int = 12;\n             pub const IP_DROP_MEMBERSHIP: c_int = 13;\n-            // don't exist, keep same as IP_ADD_MEMBERSHIP\n-            pub const IPV6_ADD_MEMBERSHIP: c_int = 12;\n-            // don't exist, keep same as IP_DROP_MEMBERSHIP\n-            pub const IPV6_DROP_MEMBERSHIP: c_int = 13;\n+            pub const IPV6_ADD_MEMBERSHIP: c_int = 12; // don't exist\n+            pub const IPV6_DROP_MEMBERSHIP: c_int = 13; // don't exist\n \n-            pub const TCP_NODELAY: c_int = 1;\n-            //pub const TCP_KEEPIDLE: c_int = ;\n+            pub const TCP_NODELAY: c_int = 0x01;\n             pub const SOL_SOCKET: c_int = 0xffff;\n             pub const SO_KEEPALIVE: c_int = 0x0008;\n             pub const SO_BROADCAST: c_int = 0x0020;\n@@ -4214,20 +4216,21 @@ pub mod consts {\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n \n+            pub const O_DSYNC : c_int = 128; // same as SYNC\n             pub const O_SYNC : c_int = 128;\n             pub const O_NONBLOCK : c_int = 4;\n-            pub const CTL_KERN: c_int = 1;\n-            pub const KERN_PROC: c_int = 66;\n+            pub const CTL_KERN : c_int = 1;\n+            pub const KERN_PROC : c_int = 66;\n \n             pub const MAP_COPY : c_int = 0x0002;\n-            pub const MAP_RENAME : c_int = 0x0000; // changed\n-            pub const MAP_NORESERVE : c_int = 0x0000; // changed\n-            pub const MAP_HASSEMAPHORE : c_int = 0x0000; // changed\n-            //pub const MAP_STACK : c_int = ;\n-            //pub const MAP_NOSYNC : c_int = ;\n-            //pub const MAP_NOCORE : c_int = ;\n+            pub const MAP_RENAME : c_int = 0x0000;\n+            pub const MAP_NORESERVE : c_int = 0x0000;\n+            pub const MAP_NOEXTEND : c_int = 0x0000;\n+            pub const MAP_HASSEMAPHORE : c_int = 0x0000;\n \n             pub const IPPROTO_RAW : c_int = 255;\n+\n+            pub const PATH_MAX: c_int = 1024;\n         }\n         pub mod sysconf {\n             use types::os::arch::c95::c_int;\n@@ -4259,31 +4262,31 @@ pub mod consts {\n             pub const _SC_2_UPE : c_int = 25;\n             pub const _SC_STREAM_MAX : c_int = 26;\n             pub const _SC_TZNAME_MAX : c_int = 27;\n-            pub const _SC_ASYNCHRONOUS_IO : c_int = 45; // changed...\n+            pub const _SC_PAGESIZE : c_int = 28;\n+            pub const _SC_FSYNC : c_int = 29;\n+            pub const _SC_SEM_NSEMS_MAX : c_int = 31;\n+            pub const _SC_SEM_VALUE_MAX : c_int = 32;\n+            pub const _SC_AIO_LISTIO_MAX : c_int = 42;\n+            pub const _SC_AIO_MAX : c_int = 43;\n+            pub const _SC_AIO_PRIO_DELTA_MAX : c_int = 44;\n+            pub const _SC_ASYNCHRONOUS_IO : c_int = 45;\n+            pub const _SC_DELAYTIMER_MAX : c_int = 50;\n             pub const _SC_MAPPED_FILES : c_int = 53;\n             pub const _SC_MEMLOCK : c_int = 54;\n             pub const _SC_MEMLOCK_RANGE : c_int = 55;\n             pub const _SC_MEMORY_PROTECTION : c_int = 56;\n             pub const _SC_MESSAGE_PASSING : c_int = 57;\n+            pub const _SC_MQ_OPEN_MAX : c_int = 58;\n             pub const _SC_PRIORITIZED_IO : c_int = 60;\n             pub const _SC_PRIORITY_SCHEDULING : c_int = 61;\n             pub const _SC_REALTIME_SIGNALS : c_int = 64;\n+            pub const _SC_RTSIG_MAX : c_int = 66;\n             pub const _SC_SEMAPHORES : c_int = 67;\n-            pub const _SC_FSYNC : c_int = 29;\n             pub const _SC_SHARED_MEMORY_OBJECTS : c_int = 68;\n-            pub const _SC_SYNCHRONIZED_IO : c_int = 75;\n-            pub const _SC_TIMERS : c_int = 94; // ...changed\n-            pub const _SC_AIO_LISTIO_MAX : c_int = 42;\n-            pub const _SC_AIO_MAX : c_int = 43;\n-            pub const _SC_AIO_PRIO_DELTA_MAX : c_int = 44;\n-            pub const _SC_DELAYTIMER_MAX : c_int = 50; // changed...\n-            pub const _SC_MQ_OPEN_MAX : c_int = 58;\n-            pub const _SC_PAGESIZE : c_int = 28;\n-            pub const _SC_RTSIG_MAX : c_int = 66;\n-            pub const _SC_SEM_NSEMS_MAX : c_int = 31;\n-            pub const _SC_SEM_VALUE_MAX : c_int = 32;\n             pub const _SC_SIGQUEUE_MAX : c_int = 70;\n+            pub const _SC_SYNCHRONIZED_IO : c_int = 75;\n             pub const _SC_TIMER_MAX : c_int = 93;\n+            pub const _SC_TIMERS : c_int = 94;\n         }\n     }\n \n@@ -5005,6 +5008,7 @@ pub mod funcs {\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     pub mod posix88 {\n         pub mod stat_ {\n@@ -5019,6 +5023,7 @@ pub mod funcs {\n                 #[cfg(any(target_os = \"linux\",\n                           target_os = \"freebsd\",\n                           target_os = \"dragonfly\",\n+                          target_os = \"bitrig\",\n                           target_os = \"openbsd\",\n                           target_os = \"android\",\n                           target_os = \"ios\"))]\n@@ -5034,6 +5039,7 @@ pub mod funcs {\n                 #[cfg(any(target_os = \"linux\",\n                           target_os = \"freebsd\",\n                           target_os = \"dragonfly\",\n+                          target_os = \"bitrig\",\n                           target_os = \"openbsd\",\n                           target_os = \"android\",\n                           target_os = \"ios\"))]\n@@ -5228,6 +5234,7 @@ pub mod funcs {\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     pub mod posix01 {\n         pub mod stat_ {\n@@ -5238,6 +5245,7 @@ pub mod funcs {\n                 #[cfg(any(target_os = \"linux\",\n                           target_os = \"freebsd\",\n                           target_os = \"dragonfly\",\n+                          target_os = \"bitrig\",\n                           target_os = \"openbsd\",\n                           target_os = \"android\",\n                           target_os = \"ios\"))]\n@@ -5347,6 +5355,7 @@ pub mod funcs {\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     pub mod posix08 {\n         pub mod unistd {\n@@ -5434,6 +5443,7 @@ pub mod funcs {\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n@@ -5463,10 +5473,11 @@ pub mod funcs {\n                            -> c_int;\n             pub fn mincore(addr: *mut c_void, len: size_t, vec: *mut c_uchar)\n                            -> c_int;\n+            pub fn realpath(pathname: *const c_char, resolved: *mut c_char)\n+                            -> *mut c_char;\n         }\n     }\n \n-\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n@@ -5500,6 +5511,7 @@ pub mod funcs {\n \n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     pub mod extra {\n     }"}, {"sha": "7325e4e7a2ece9aa4a15bee6e35c2820e4159a0c", "filename": "src/librustc_back/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -61,7 +61,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsOpenbsd => {\n+          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "b46150f75d084516102e96252fc7017489955254", "filename": "src/librustc_back/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmips.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -56,7 +56,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsOpenbsd => {\n+          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd => {\n             \"E-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "c7fa7aa879ac272c440982fe5ece76fadd3a70c0", "filename": "src/librustc_back/mipsel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmipsel.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -56,7 +56,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a:0:64-n32\".to_string()\n           }\n \n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsOpenbsd => {\n+          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "80eb39b1ec8a2f568d575bf40c9b5356a3415b07", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -212,6 +212,7 @@ mod test {\n     #[test]\n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     fn test_rpath_relative() {\n         let config = &mut RPathConfig {"}, {"sha": "6e5a48c0ea16c55f26ba500d1bb21accf3cdcf7d", "filename": "src/librustc_back/target/bitrig_base.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::TargetOptions;\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        linker: \"cc\".to_string(),\n+        dynamic_linking: true,\n+        executables: true,\n+        morestack: false,\n+        linker_is_gnu: true,\n+        has_rpath: true,\n+        position_independent_executables: true,\n+        pre_link_args: vec!(\n+        ),\n+\n+        .. Default::default()\n+    }\n+}"}, {"sha": "70ae6137638585e45d5eae1d64091145a012c049", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -56,6 +56,7 @@ mod apple_base;\n mod apple_ios_base;\n mod freebsd_base;\n mod dragonfly_base;\n+mod bitrig_base;\n mod openbsd_base;\n \n mod armv7_apple_ios;\n@@ -80,6 +81,7 @@ mod x86_64_apple_ios;\n mod x86_64_pc_windows_gnu;\n mod x86_64_unknown_freebsd;\n mod x86_64_unknown_dragonfly;\n+mod x86_64_unknown_bitrig;\n mod x86_64_unknown_linux_gnu;\n mod x86_64_unknown_openbsd;\n \n@@ -361,6 +363,7 @@ impl Target {\n             i686_unknown_dragonfly,\n             x86_64_unknown_dragonfly,\n \n+            x86_64_unknown_bitrig,\n             x86_64_unknown_openbsd,\n \n             x86_64_apple_darwin,"}, {"sha": "7b7877c0c6995855c365d86bdb54601d4a8de870", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::bitrig_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    Target {\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n+                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n+        llvm_target: \"x86_64-unknown-bitrig\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"bitrig\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "1c6eacc355947850044b035fb5d6db4f8690a1c9", "filename": "src/librustc_back/x86.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -45,13 +45,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os)\n             \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n           }\n \n-          abi::OsFreebsd => {\n-            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-          abi::OsDragonfly => {\n-            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-          abi::OsOpenbsd => {\n+          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd => {\n             \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n           }\n "}, {"sha": "d016bd12c698fdd5646cafbf4f5c7e298ba10c7a", "filename": "src/librustc_back/x86_64.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -47,17 +47,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n           }\n \n-          abi::OsFreebsd => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-          abi::OsDragonfly => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-          abi::OsOpenbsd => {\n+          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd => {\n             \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n                 f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n                 s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()"}, {"sha": "6b2676eca3d026ef4061ca442ab265236c7f7402", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -64,7 +64,9 @@ mod imp {\n         pub const F_SETLKW: libc::c_int = 13;\n     }\n \n-    #[cfg(any(target_os = \"dragonfly\", target_os = \"openbsd\"))]\n+    #[cfg(any(target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n+              target_os = \"openbsd\"))]\n     mod os {\n         use libc;\n "}, {"sha": "fcae8e791604dd87011296eb52e2c9b8e6b431ae", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -165,6 +165,7 @@ mod test {\n               target_os = \"macos\",\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     fn test_errors_do_not_crash() {\n         // Open /dev/null as a library to get an error, and make sure\n@@ -183,6 +184,7 @@ mod test {\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n mod dl {\n     use prelude::v1::*;"}, {"sha": "0e1f5f2ba029403246b87e42491e094bb6bfc720", "filename": "src/libstd/env.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -655,6 +655,38 @@ pub mod consts {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n+/// Constants associated with the current target\n+#[cfg(target_os = \"bitrig\")]\n+pub mod consts {\n+    pub use super::arch_consts::ARCH;\n+\n+    pub const FAMILY: &'static str = \"unix\";\n+\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `bitrig`.\n+    pub const OS: &'static str = \"bitrig\";\n+\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.so`.\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `so`.\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n /// Constants associated with the current target\n #[cfg(target_os = \"openbsd\")]\n pub mod consts {\n@@ -663,7 +695,7 @@ pub mod consts {\n     pub const FAMILY: &'static str = \"unix\";\n \n     /// A string describing the specific operating system in use: in this\n-    /// case, `dragonfly`.\n+    /// case, `openbsd`.\n     pub const OS: &'static str = \"openbsd\";\n \n     /// Specifies the filename prefix used for shared libraries on this"}, {"sha": "ebbfb8d42be00688c84fc0036d62f6208b16e471", "filename": "src/libstd/os.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -641,6 +641,7 @@ fn real_args_as_bytes() -> Vec<Vec<u8>> {\n           target_os = \"android\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n fn real_args_as_bytes() -> Vec<Vec<u8>> {\n     use rt;\n@@ -1289,6 +1290,39 @@ pub mod consts {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n+#[cfg(target_os = \"bitrig\")]\n+#[deprecated(since = \"1.0.0\", reason = \"renamed to env::consts\")]\n+#[unstable(feature = \"os\")]\n+pub mod consts {\n+    pub use os::arch_consts::ARCH;\n+\n+    pub const FAMILY: &'static str = \"unix\";\n+\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `bitrig`.\n+    pub const SYSNAME: &'static str = \"bitrig\";\n+\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.so`.\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `so`.\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n #[cfg(target_os = \"openbsd\")]\n #[deprecated(since = \"1.0.0\", reason = \"renamed to env::consts\")]\n #[unstable(feature = \"os\")]"}, {"sha": "9da63405346e8470af85431ab163989ae475c499", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -43,6 +43,7 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"android\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n mod imp {\n     use prelude::v1::*;"}, {"sha": "3063d9d942a28c3c3a8edd3b23ec2f1c431dadf4", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -109,6 +109,10 @@ extern {}\n #[link(name = \"gcc_pic\")]\n extern {}\n \n+#[cfg(target_os = \"bitrig\")]\n+#[link(name = \"c++abi\")]\n+extern {}\n+\n extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link\n     // against corresponding routine (..._SjLj_...)"}, {"sha": "96c4bcec853dc28d8d687eae95b3b1e64f9f5a22", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -39,7 +39,9 @@ extern {}\n #[link(name = \"pthread\")]\n extern {}\n \n-#[cfg(any(target_os = \"dragonfly\", target_os = \"openbsd\"))]\n+#[cfg(any(target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n+          target_os = \"openbsd\"))]\n #[link(name = \"pthread\")]\n extern {}\n "}, {"sha": "b5cd42219e128f4f5c182079baf8a21dd67e414a", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -694,7 +694,8 @@ impl TcpStream {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_KEEPALIVE,\n                    seconds as libc::c_int)\n     }\n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+    #[cfg(any(target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     fn set_tcp_keepalive(&mut self, seconds: uint) -> IoResult<()> {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_KEEPIDLE,\n                    seconds as libc::c_int)"}, {"sha": "5ebc851e194efa28da8fc669fa4ebb4ebc1d5211", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -189,7 +189,8 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:24\" :: \"r\"(limit) :: \"volatile\")\n     }\n-    #[cfg(all(target_arch = \"x86_64\", target_os = \"dragonfly\"))] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"dragonfly\"))]\n+    #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:32\" :: \"r\"(limit) :: \"volatile\")\n     }\n@@ -233,6 +234,7 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     #[cfg(any(target_arch = \"aarch64\",\n               target_arch = \"powerpc\",\n               all(target_arch = \"arm\", target_os = \"ios\"),\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     unsafe fn target_record_sp_limit(_: uint) {\n     }\n@@ -276,14 +278,14 @@ pub unsafe fn get_sp_limit() -> uint {\n         asm!(\"movq %fs:24, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n-    #[cfg(all(target_arch = \"x86_64\", target_os = \"dragonfly\"))] #[inline(always)]\n+    #[cfg(all(target_arch = \"x86_64\", target_os = \"dragonfly\"))]\n+    #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movq %fs:32, $0\" : \"=r\"(limit) ::: \"volatile\");\n         return limit;\n     }\n \n-\n     // x86\n     #[cfg(all(target_arch = \"x86\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n@@ -331,6 +333,7 @@ pub unsafe fn get_sp_limit() -> uint {\n     #[cfg(any(target_arch = \"aarch64\",\n               target_arch = \"powerpc\",\n               all(target_arch = \"arm\", target_os = \"ios\"),\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {"}, {"sha": "6f07dea5279fdcaf72e95b207a918d07e6651ff5", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -319,6 +319,7 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n         if !STATE.is_null() { return STATE }\n         let selfname = if cfg!(target_os = \"freebsd\") ||\n                           cfg!(target_os = \"dragonfly\") ||\n+                          cfg!(target_os = \"bitrig\") ||\n                           cfg!(target_os = \"openbsd\") {\n             env::current_exe().ok()\n         } else {"}, {"sha": "14394a653b0ed5f4d848d51ca0143b43af8c7d03", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -24,6 +24,7 @@ use libc;\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n pub const FIONBIO: libc::c_ulong = 0x8004667e;\n #[cfg(any(all(target_os = \"linux\",\n@@ -43,6 +44,7 @@ pub const FIONBIO: libc::c_ulong = 0x667e;\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n pub const FIOCLEX: libc::c_ulong = 0x20006601;\n #[cfg(any(all(target_os = \"linux\",\n@@ -62,6 +64,7 @@ pub const FIOCLEX: libc::c_ulong = 0x6601;\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n pub const MSG_DONTWAIT: libc::c_int = 0x80;\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -75,7 +78,8 @@ pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 70;\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\"))]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 71;\n-#[cfg(target_os = \"openbsd\")]\n+#[cfg(any(target_os = \"bitrig\",\n+          target_os = \"openbsd\"))]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 101;\n #[cfg(target_os = \"android\")]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 0x0048;\n@@ -96,6 +100,7 @@ pub struct passwd {\n #[cfg(any(target_os = \"macos\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n pub struct passwd {\n     pub pw_name: *mut libc::c_char,\n@@ -177,6 +182,7 @@ mod select {\n #[cfg(any(target_os = \"android\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\",\n           target_os = \"linux\"))]\n mod select {\n@@ -302,8 +308,7 @@ mod signal {\n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"dragonfly\"))]\n mod signal {\n     use libc;\n \n@@ -317,8 +322,7 @@ mod signal {\n     pub const SIGCHLD: libc::c_int = 20;\n \n     #[cfg(any(target_os = \"macos\",\n-              target_os = \"ios\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"ios\"))]\n     pub type sigset_t = u32;\n     #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     #[repr(C)]\n@@ -345,3 +349,41 @@ mod signal {\n         pub sa_mask: sigset_t,\n     }\n }\n+\n+#[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n+mod signal {\n+    use libc;\n+\n+    pub const SA_ONSTACK: libc::c_int = 0x0001;\n+    pub const SA_RESTART: libc::c_int = 0x0002;\n+    pub const SA_RESETHAND: libc::c_int = 0x0004;\n+    pub const SA_NOCLDSTOP: libc::c_int = 0x0008;\n+    pub const SA_NODEFER: libc::c_int = 0x0010;\n+    pub const SA_NOCLDWAIT: libc::c_int = 0x0020;\n+    pub const SA_SIGINFO: libc::c_int = 0x0040;\n+    pub const SIGCHLD: libc::c_int = 20;\n+\n+    pub type sigset_t = libc::c_uint;\n+\n+    // This structure has more fields, but we're not all that interested in\n+    // them.\n+    #[repr(C)]\n+    pub struct siginfo {\n+        pub si_signo: libc::c_int,\n+        pub si_code: libc::c_int,\n+        pub si_errno: libc::c_int,\n+        // FIXME: Bitrig has a crazy union here in the siginfo, I think this\n+        // layout will still work tho.  The status might be off by the size of\n+        // a clock_t by my reading, but we can fix this later.\n+        pub pid: libc::pid_t,\n+        pub uid: libc::uid_t,\n+        pub status: libc::c_int,\n+    }\n+\n+    #[repr(C)]\n+    pub struct sigaction {\n+        pub sa_handler: extern fn(libc::c_int),\n+        pub sa_mask: sigset_t,\n+        pub sa_flags: libc::c_int,\n+    }\n+}"}, {"sha": "1c28d629d40f07f0c89f17290b72aae66a3c1bc6", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -291,6 +291,33 @@ fn mkstat(stat: &libc::stat) -> FileStat {\n     // FileStat times are in milliseconds\n     fn mktime(secs: u64, nsecs: u64) -> u64 { secs * 1000 + nsecs / 1000000 }\n \n+    #[cfg(target_os = \"bitrig\")]\n+    fn ctime(stat: &libc::stat) -> u64 {\n+      mktime(stat.st_ctim.tv_sec as u64, stat.st_ctim.tv_nsec as u64)\n+    }\n+    #[cfg(not(target_os = \"bitrig\"))]\n+    fn ctime(stat: &libc::stat) -> u64 {\n+      mktime(stat.st_ctime as u64, stat.st_ctime_nsec as u64)\n+    }\n+\n+    #[cfg(target_os = \"bitrig\")]\n+    fn atime(stat: &libc::stat) -> u64 {\n+      mktime(stat.st_atim.tv_sec as u64, stat.st_atim.tv_nsec as u64)\n+    }\n+    #[cfg(not(target_os = \"bitrig\"))]\n+    fn atime(stat: &libc::stat) -> u64 {\n+      mktime(stat.st_atime as u64, stat.st_atime_nsec as u64)\n+    }\n+\n+    #[cfg(target_os = \"bitrig\")]\n+    fn mtime(stat: &libc::stat) -> u64 {\n+      mktime(stat.st_mtim.tv_sec as u64, stat.st_mtim.tv_nsec as u64)\n+    }\n+    #[cfg(not(target_os = \"bitrig\"))]\n+    fn mtime(stat: &libc::stat) -> u64 {\n+      mktime(stat.st_mtime as u64, stat.st_mtime_nsec as u64)\n+    }\n+\n     #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n     fn flags(stat: &libc::stat) -> u64 { stat.st_flags as u64 }\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -312,9 +339,9 @@ fn mkstat(stat: &libc::stat) -> FileStat {\n             _ => old_io::FileType::Unknown,\n         },\n         perm: FilePermission::from_bits_truncate(stat.st_mode as u32),\n-        created: mktime(stat.st_ctime as u64, stat.st_ctime_nsec as u64),\n-        modified: mktime(stat.st_mtime as u64, stat.st_mtime_nsec as u64),\n-        accessed: mktime(stat.st_atime as u64, stat.st_atime_nsec as u64),\n+        created: ctime(stat),\n+        modified: mtime(stat),\n+        accessed: atime(stat),\n         unstable: UnstableFileStat {\n             device: stat.st_dev as u64,\n             inode: stat.st_ino as u64,"}, {"sha": "1f82d9a3d79c7f442ee0b932c3a4024d0a6531a4", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -42,6 +42,16 @@ pub fn errno() -> i32 {\n         __error()\n     }\n \n+    #[cfg(target_os = \"bitrig\")]\n+    fn errno_location() -> *const c_int {\n+        extern {\n+            fn __errno() -> *const c_int;\n+        }\n+        unsafe {\n+            __errno()\n+        }\n+    }\n+\n     #[cfg(target_os = \"dragonfly\")]\n     unsafe fn errno_location() -> *const c_int {\n         extern { fn __dfly_error() -> *const c_int; }\n@@ -194,10 +204,9 @@ pub fn current_exe() -> IoResult<Path> {\n     fs::readlink(&Path::new(\"/proc/curproc/file\"))\n }\n \n-#[cfg(target_os = \"openbsd\")]\n+#[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n pub fn current_exe() -> IoResult<Path> {\n     use sync::{StaticMutex, MUTEX_INIT};\n-\n     static LOCK: StaticMutex = MUTEX_INIT;\n \n     extern {\n@@ -336,6 +345,7 @@ pub fn args() -> Args {\n           target_os = \"android\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n pub fn args() -> Args {\n     use rt;"}, {"sha": "582fff2a26b7b90fdf7772cb98862e8393f55d0b", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -856,6 +856,7 @@ fn translate_status(status: c_int) -> ProcessExit {\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     mod imp {\n         pub fn WIFEXITED(status: i32) -> bool { (status & 0x7f) == 0 }"}, {"sha": "c2044c502b72fb4bf1ed42ada4132e0e28fb97ee", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -34,6 +34,7 @@ impl Drop for Handler {\n \n #[cfg(any(target_os = \"linux\",\n           target_os = \"macos\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n mod imp {\n     use core::prelude::*;\n@@ -205,7 +206,9 @@ mod imp {\n \n     }\n \n-    #[cfg(any(target_os = \"macos\", target_os = \"openbsd\"))]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"bitrig\",\n+              target_os = \"openbsd\"))]\n     mod signal {\n         use libc;\n         use super::sighandler_t;\n@@ -216,7 +219,7 @@ mod imp {\n \n         #[cfg(target_os = \"macos\")]\n         pub const SIGSTKSZ: libc::size_t = 131072;\n-        #[cfg(target_os = \"openbsd\")]\n+        #[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n         pub const SIGSTKSZ: libc::size_t = 40960;\n \n         pub const SIG_DFL: sighandler_t = 0 as sighandler_t;\n@@ -237,14 +240,14 @@ mod imp {\n             pub si_addr: *mut libc::c_void\n         }\n \n-        #[cfg(target_os = \"openbsd\")]\n+        #[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n         #[repr(C)]\n         pub struct siginfo {\n             pub si_signo: libc::c_int,\n             pub si_code: libc::c_int,\n             pub si_errno: libc::c_int,\n-            // union\n-            pub si_addr: *mut libc::c_void,\n+            //union\n+            pub si_addr: *mut libc::c_void\n         }\n \n         #[repr(C)]\n@@ -277,6 +280,7 @@ mod imp {\n \n #[cfg(not(any(target_os = \"linux\",\n               target_os = \"macos\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\")))]\n mod imp {\n     use libc;"}, {"sha": "c7d704922cb7fbdb0ac8e5c5267683e635d1b23b", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -46,6 +46,7 @@ extern {\n \n #[cfg(any(target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n mod os {\n     use libc;"}, {"sha": "c42d6d0e6416cef66b779371cb6a313c9530a826", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -34,6 +34,7 @@ pub extern fn thread_start(main: *mut libc::c_void) -> rust_thread_return {\n \n #[cfg(all(not(target_os = \"linux\"),\n           not(target_os = \"macos\"),\n+          not(target_os = \"bitrig\"),\n           not(target_os = \"openbsd\")))]\n pub mod guard {\n     pub unsafe fn current() -> uint {\n@@ -51,11 +52,13 @@ pub mod guard {\n \n #[cfg(any(target_os = \"linux\",\n           target_os = \"macos\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n pub mod guard {\n     use super::*;\n     #[cfg(any(target_os = \"linux\",\n               target_os = \"android\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     use mem;\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -72,7 +75,9 @@ pub mod guard {\n     static mut PAGE_SIZE: uint = 0;\n     static mut GUARD_PAGE: uint = 0;\n \n-    #[cfg(any(target_os = \"macos\", target_os = \"openbsd\"))]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"bitrig\",\n+              target_os = \"openbsd\"))]\n     unsafe fn get_stack_start() -> *mut libc::c_void {\n         current() as *mut libc::c_void\n     }\n@@ -190,6 +195,22 @@ pub mod guard {\n \n         stackaddr as uint + guardsize as uint\n     }\n+\n+    #[cfg(target_os = \"bitrig\")]\n+    pub unsafe fn current() -> uint {\n+      let mut current_stack: stack_t = mem::zeroed();\n+      if pthread_stackseg_np(pthread_self(), &mut current_stack) != 0 {\n+        panic!(\"failed to get current stack: pthread_stackseg_np\")\n+      }\n+\n+      if pthread_main_np() == 1 {\n+        // main thread\n+        current_stack.ss_sp as uint - current_stack.ss_size as uint + 3 * PAGE_SIZE as uint\n+      } else {\n+        // new thread\n+        current_stack.ss_sp as uint - current_stack.ss_size as uint\n+      }\n+    }\n }\n \n pub unsafe fn create(stack: uint, p: Thunk) -> io::Result<rust_thread> {\n@@ -252,6 +273,7 @@ pub unsafe fn set_name(name: &str) {\n \n #[cfg(any(target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n pub unsafe fn set_name(name: &str) {\n     // pthread_set_name_np() since almost forever on all BSDs\n@@ -334,14 +356,23 @@ extern {\n     fn pthread_setname_np(name: *const libc::c_char) -> libc::c_int;\n }\n \n+#[cfg(target_os = \"bitrig\")]\n+extern {\n+    pub fn pthread_self() -> libc::pthread_t;\n+    pub fn pthread_stackseg_np(thread: libc::pthread_t,\n+                              sinfo: *mut stack_t) -> libc::c_uint;\n+    pub fn pthread_main_np() -> libc::c_uint;\n+    fn pthread_set_name_np(tid: libc::pthread_t, name: *const libc::c_char);\n+}\n+\n #[cfg(target_os = \"openbsd\")]\n extern {\n         pub fn pthread_stackseg_np(thread: libc::pthread_t,\n                                    sinfo: *mut stack_t) -> libc::c_uint;\n         pub fn pthread_main_np() -> libc::c_uint;\n }\n \n-#[cfg(target_os = \"openbsd\")]\n+#[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n #[repr(C)]\n pub struct stack_t {\n     pub ss_sp: *mut libc::c_void,"}, {"sha": "9b7079ee10833de308a6cb70ba250e59f5a8d959", "filename": "src/libstd/sys/unix/thread_local.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -43,13 +43,15 @@ type pthread_key_t = ::libc::c_ulong;\n \n #[cfg(any(target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n type pthread_key_t = ::libc::c_int;\n \n #[cfg(not(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\")))]\n type pthread_key_t = ::libc::c_uint;\n "}, {"sha": "1104bc995c6ea7961e8b2d2a979590b75f3614d5", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -80,8 +80,11 @@ mod inner {\n     }\n \n     // Apparently android provides this in some other library?\n+    // Bitrig's RT extensions are in the C library, not a separate librt\n     // OpenBSD provide it via libc\n-    #[cfg(not(any(target_os = \"android\", target_os = \"openbsd\")))]\n+    #[cfg(not(any(target_os = \"android\",\n+                  target_os = \"bitrig\",\n+                  target_os = \"openbsd\")))]\n     #[link(name = \"rt\")]\n     extern {}\n "}, {"sha": "8e60bbf4cbd00a5e655fb1e6d477bb0fc239a788", "filename": "src/libstd/sys/unix/tty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftty.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -22,6 +22,7 @@ pub struct TTY {\n \n #[cfg(any(target_os = \"macos\",\n           target_os = \"freebsd\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n const TIOCGWINSZ: c_ulong = 0x40087468;\n \n@@ -55,6 +56,7 @@ impl TTY {\n               target_os = \"android\",\n               target_os = \"macos\",\n               target_os = \"freebsd\",\n+              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     pub fn get_winsize(&mut self) -> IoResult<(int, int)> {\n         unsafe {"}, {"sha": "2cf157bd245227f3710a0243b14c4b52919a0d4c", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -24,6 +24,7 @@ pub enum Os {\n     OsFreebsd,\n     OsiOS,\n     OsDragonfly,\n+    OsBitrig,\n     OsOpenbsd,\n }\n \n@@ -136,6 +137,7 @@ impl fmt::Display for Os {\n             OsAndroid => \"android\".fmt(f),\n             OsFreebsd => \"freebsd\".fmt(f),\n             OsDragonfly => \"dragonfly\".fmt(f),\n+            OsBitrig => \"bitrig\".fmt(f),\n             OsOpenbsd => \"openbsd\".fmt(f),\n         }\n     }"}, {"sha": "cf2b9b9f717c57ff13ff997c99a33e467cd26dd6", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -15,13 +15,13 @@\n \n #if defined(__APPLE__)\n #define EXHAUSTED               _rust_stack_exhausted\n-#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)\n+#elif defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__) || defined(__Bitrig__)\n #define EXHAUSTED               rust_stack_exhausted@PLT\n #else\n #define EXHAUSTED               rust_stack_exhausted\n #endif\n \n-#if defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__)\n+#if defined(__linux__) || defined(__FreeBSD__) || defined(__DragonFly__) || defined(__Bitrig__)\n \t.hidden MORESTACK\n #else\n #if defined(__APPLE__)"}, {"sha": "db1a602b404f60028282d84073bb3f7a2206dc98", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 279, "deletions": 3, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -47,8 +47,8 @@ extern char **environ;\n #endif\n #endif\n \n-#if defined(__FreeBSD__) || defined(__linux__) || defined(__ANDROID__) \\\n-  || defined(__DragonFly__) || defined(__OpenBSD__)\n+#if defined(__FreeBSD__) || defined(__linux__) || defined(__ANDROID__) || \\\n+    defined(__DragonFly__) || defined(__Bitrig__) || defined(__OpenBSD__)\n extern char **environ;\n #endif\n \n@@ -200,7 +200,282 @@ rust_unset_sigprocmask() {\n int *__dfly_error(void) { return __error(); }\n #endif\n \n-#if defined(__OpenBSD__)\n+#if defined(__Bitrig__)\n+#include <stdio.h>\n+#include <sys/param.h>\n+#include <sys/sysctl.h>\n+#include <limits.h>\n+\n+int rust_get_path(void *p, size_t* sz)\n+{\n+  int mib[4];\n+  char *eq = NULL;\n+  char *key = NULL;\n+  char *val = NULL;\n+  char **menv = NULL;\n+  size_t maxlen, len;\n+  int nenv = 0;\n+  int i;\n+\n+  if ((p == NULL) && (sz == NULL))\n+    return -1;\n+\n+  /* get the argv array */\n+  mib[0] = CTL_KERN;\n+  mib[1] = KERN_PROC_ARGS;\n+  mib[2] = getpid();\n+  mib[3] = KERN_PROC_ENV;\n+\n+  /* get the number of bytes needed to get the env */\n+  maxlen = 0;\n+  if (sysctl(mib, 4, NULL, &maxlen, NULL, 0) == -1)\n+    return -1;\n+\n+  /* allocate the buffer */\n+  if ((menv = calloc(maxlen, sizeof(char))) == NULL)\n+    return -1;\n+\n+  /* get the env array */\n+  if (sysctl(mib, 4, menv, &maxlen, NULL, 0) == -1)\n+  {\n+    free(menv);\n+    return -1;\n+  }\n+\n+  mib[3] = KERN_PROC_NENV;\n+  len = sizeof(int);\n+  /* get the length of env array */\n+  if (sysctl(mib, 4, &nenv, &len, NULL, 0) == -1)\n+  {\n+    free(menv);\n+    return -1;\n+  }\n+\n+  /* find _ key and resolve the value */\n+  for (i = 0; i < nenv; i++)\n+  {\n+    if ((eq = strstr(menv[i], \"=\")) == NULL)\n+      continue;\n+\n+    key = menv[i];\n+    val = eq + 1;\n+    *eq = '\\0';\n+\n+    if (strncmp(key, \"PATH\", maxlen) != 0)\n+      continue;\n+\n+    if (p == NULL)\n+    {\n+      /* return the length of the value + NUL */\n+      *sz = strnlen(val, maxlen) + 1;\n+      free(menv);\n+      return 0;\n+    }\n+    else\n+    {\n+      /* copy *sz bytes to the output buffer */\n+      memcpy(p, val, *sz);\n+      free(menv);\n+      return 0;\n+    }\n+  }\n+\n+  free(menv);\n+  return -1;\n+}\n+\n+int rust_get_path_array(void * p, size_t * sz)\n+{\n+  char *path, *str;\n+  char **buf;\n+  int i, num;\n+  size_t len;\n+\n+  if ((p == NULL) && (sz == NULL))\n+    return -1;\n+\n+  /* get the length of the PATH value */\n+  if (rust_get_path(NULL, &len) == -1)\n+    return -1;\n+\n+  if (len == 0)\n+    return -1;\n+\n+  /* allocate the buffer */\n+  if ((path = calloc(len, sizeof(char))) == NULL)\n+    return -1;\n+\n+  /* get the PATH value */\n+  if (rust_get_path(path, &len) == -1)\n+  {\n+    free(path);\n+    return -1;\n+  }\n+\n+  /* count the number of parts in the PATH */\n+  num = 1;\n+  for(str = path; *str != '\\0'; str++)\n+  {\n+    if (*str == ':')\n+      num++;\n+  }\n+\n+  /* calculate the size of the buffer for the 2D array */\n+  len = (num * sizeof(char*) + 1) + strlen(path) + 1;\n+\n+  if (p == NULL)\n+  {\n+    free(path);\n+    *sz = len;\n+    return 0;\n+  }\n+\n+  /* make sure we have enough buffer space */\n+  if (*sz < len)\n+  {\n+    free(path);\n+    return -1;\n+  }\n+\n+  /* zero out the buffer */\n+  buf = (char**)p;\n+  memset(buf, 0, *sz);\n+\n+  /* copy the data into the right place */\n+  str = p + ((num+1) * sizeof(char*));\n+  memcpy(str, path, strlen(path));\n+\n+  /* parse the path into it's parts */\n+  for (i = 0; i < num && (buf[i] = strsep(&str, \":\")) != NULL; i++) {;}\n+  buf[num] = NULL;\n+\n+  free(path);\n+  return 0;\n+}\n+\n+int rust_get_argv_zero(void* p, size_t* sz)\n+{\n+  int mib[4];\n+  char **argv = NULL;\n+  size_t len;\n+\n+  if ((p == NULL) && (sz == NULL))\n+    return -1;\n+\n+  /* get the argv array */\n+  mib[0] = CTL_KERN;\n+  mib[1] = KERN_PROC_ARGS;\n+  mib[2] = getpid();\n+  mib[3] = KERN_PROC_ARGV;\n+\n+  /* request KERN_PROC_ARGV size */\n+  len = 0;\n+  if (sysctl(mib, 4, NULL, &len, NULL, 0) == -1)\n+    return -1;\n+\n+  /* allocate buffer to receive the values */\n+  if ((argv = malloc(len)) == NULL)\n+    return -1;\n+\n+  /* get the argv array */\n+  if (sysctl(mib, 4, argv, &len, NULL, 0) == -1)\n+  {\n+    free(argv);\n+    return -1;\n+  }\n+\n+  /* get length of argv[0] */\n+  len = strnlen(argv[0], len) + 1;\n+\n+  if (p == NULL)\n+  {\n+    *sz = len;\n+    free(argv);\n+    return 0;\n+  }\n+\n+  if (*sz < len)\n+  {\n+    free(argv);\n+    return -1;\n+  }\n+\n+  memset(p, 0, len);\n+  memcpy(p, argv[0], len);\n+  free(argv);\n+  return 0;\n+}\n+\n+const char * rust_current_exe()\n+{\n+  static char *self = NULL;\n+  char *argv0;\n+  char **paths;\n+  size_t sz;\n+  int i;\n+  char buf[2*PATH_MAX], exe[2*PATH_MAX];\n+\n+  if (self != NULL)\n+    return self;\n+\n+  if (rust_get_argv_zero(NULL, &sz) == -1)\n+    return NULL;\n+  if ((argv0 = calloc(sz, sizeof(char))) == NULL)\n+    return NULL;\n+  if (rust_get_argv_zero(argv0, &sz) == -1)\n+  {\n+    free(argv0);\n+    return NULL;\n+  }\n+\n+  /* if argv0 is a relative or absolute path, resolve it with realpath */\n+  if ((*argv0 == '.') || (*argv0 == '/') || (strstr(argv0, \"/\") != NULL))\n+  {\n+    self = realpath(argv0, NULL);\n+    free(argv0);\n+    return self;\n+  }\n+\n+  /* get the path array */\n+  if (rust_get_path_array(NULL, &sz) == -1)\n+  {\n+    free(argv0);\n+    return NULL;\n+  }\n+  if ((paths = calloc(sz, sizeof(char))) == NULL)\n+  {\n+    free(argv0);\n+    return NULL;\n+  }\n+  if (rust_get_path_array(paths, &sz) == -1)\n+  {\n+    free(argv0);\n+    free(paths);\n+    return NULL;\n+  }\n+\n+  for(i = 0; paths[i] != NULL; i++)\n+  {\n+    snprintf(buf, 2*PATH_MAX, \"%s/%s\", paths[i], argv0);\n+    if (realpath(buf, exe) == NULL)\n+      continue;\n+\n+    if (access(exe, F_OK | X_OK) == -1)\n+      continue;\n+\n+    self = strdup(exe);\n+    free(argv0);\n+    free(paths);\n+    return self;\n+  }\n+\n+  free(argv0);\n+  free(paths);\n+  return NULL;\n+}\n+\n+#elif defined(__OpenBSD__)\n+\n #include <sys/param.h>\n #include <sys/sysctl.h>\n #include <limits.h>\n@@ -248,6 +523,7 @@ const char * rust_current_exe() {\n \n     return (self);\n }\n+\n #endif\n \n //"}, {"sha": "eb66423f1c7a7f0543678616f498aefae01f156d", "filename": "src/test/run-pass/dupe-first-attr.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -26,6 +26,9 @@ mod hello;\n #[cfg(target_os = \"dragonfly\")]\n mod hello;\n \n+#[cfg(target_os = \"bitrig\")]\n+mod hello;\n+\n #[cfg(target_os = \"android\")]\n mod hello;\n "}, {"sha": "4b0e9168e19bd35fac2a431dfc0dab09508aaf19", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -42,6 +42,18 @@ mod m {\n     }\n }\n \n+#[cfg(target_os = \"bitrig\")]\n+mod m {\n+    #[main]\n+    #[cfg(target_arch = \"x86_64\")]\n+    pub fn main() {\n+        unsafe {\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+        }\n+    }\n+}\n+\n #[cfg(target_os = \"windows\")]\n mod m {\n     #[main]"}, {"sha": "9c0da173f7fd3d3bd88390e65a3947f719d88782", "filename": "src/test/run-pass/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flang-item-public.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -37,7 +37,7 @@ extern {}\n #[link(name = \"c\")]\n extern {}\n \n-#[cfg(target_os = \"openbsd\")]\n+#[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n #[link(name = \"c\")]\n extern {}\n "}, {"sha": "41bf7fe2dfa637eab39b708d7949e7024d80cce9", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -12,6 +12,7 @@\n //ignore-freebsd\n //ignore-ios\n //ignore-dragonfly\n+//ignore-bitrig\n \n #![feature(asm)]\n "}, {"sha": "e4c7f4ef095222bdc2f64cc2d7ba9bfe63c00066", "filename": "src/test/run-pass/out-of-stack-no-split.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -13,6 +13,7 @@\n //ignore-freebsd\n //ignore-ios\n //ignore-dragonfly\n+//ignore-bitrig\n \n #![feature(asm)]\n "}, {"sha": "835b4c40f5ca76c5b48cb55a598453a9e9ac5dfe", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -55,6 +55,15 @@ mod m {\n     }\n }\n \n+#[cfg(target_os = \"bitrig\")]\n+mod m {\n+    #[cfg(target_arch = \"x86_64\")]\n+    pub mod m {\n+        pub fn align() -> uint { 8u }\n+        pub fn size() -> uint { 16u }\n+    }\n+}\n+\n #[cfg(target_os = \"windows\")]\n mod m {\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "dea58c8e86fbb8cbc1e2f6708c48d2fb6c770f1b", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b01a37ec38db9301239f0c0abcf3c695055b0ff/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=2b01a37ec38db9301239f0c0abcf3c695055b0ff", "patch": "@@ -34,6 +34,7 @@ pub fn main() {\n           target_os = \"linux\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n+          target_os = \"bitrig\",\n           target_os = \"openbsd\",\n           target_os = \"android\"))]\n pub fn main() { }"}]}