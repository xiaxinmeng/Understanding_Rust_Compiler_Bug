{"sha": "5c0d1923bc3e26da1b6e043be49147f68ee2444f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMGQxOTIzYmMzZTI2ZGExYjZlMDQzYmU0OTE0N2Y2OGVlMjQ0NGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T20:50:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T20:50:10Z"}, "message": "auto merge of #8515 : kballard/rust/saturating-checked, r=thestinger\n\nr? @thestinger", "tree": {"sha": "8a3804b174859bbbd3a918be7c74e0f902f4bcbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a3804b174859bbbd3a918be7c74e0f902f4bcbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0d1923bc3e26da1b6e043be49147f68ee2444f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0d1923bc3e26da1b6e043be49147f68ee2444f", "html_url": "https://github.com/rust-lang/rust/commit/5c0d1923bc3e26da1b6e043be49147f68ee2444f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0d1923bc3e26da1b6e043be49147f68ee2444f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc3297ff0574f5c4101e76e34c083c7f599cd956", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3297ff0574f5c4101e76e34c083c7f599cd956", "html_url": "https://github.com/rust-lang/rust/commit/fc3297ff0574f5c4101e76e34c083c7f599cd956"}, {"sha": "15159a5638d2cf415ea6687e88ea6f62e04bf2ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/15159a5638d2cf415ea6687e88ea6f62e04bf2ae", "html_url": "https://github.com/rust-lang/rust/commit/15159a5638d2cf415ea6687e88ea6f62e04bf2ae"}], "stats": {"total": 63, "additions": 25, "deletions": 38}, "files": [{"sha": "04a1cc11b26731f4e547c6294495f7a49c1fc09e", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5c0d1923bc3e26da1b6e043be49147f68ee2444f/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0d1923bc3e26da1b6e043be49147f68ee2444f/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=5c0d1923bc3e26da1b6e043be49147f68ee2444f", "patch": "@@ -468,55 +468,42 @@ impl<T: Zero> Zero for ~T {\n }\n \n /// Saturating math operations\n-pub trait Saturating: Int {\n+pub trait Saturating {\n     /// Saturating addition operator.\n     /// Returns a+b, saturating at the numeric bounds instead of overflowing.\n+    fn saturating_add(self, v: Self) -> Self;\n+\n+    /// Saturating subtraction operator.\n+    /// Returns a-b, saturating at the numeric bounds instead of overflowing.\n+    fn saturating_sub(self, v: Self) -> Self;\n+}\n+\n+impl<T: CheckedAdd+CheckedSub+Zero+Ord+Bounded> Saturating for T {\n     #[inline]\n-    fn saturating_add(self, v: Self) -> Self {\n-        let x = self + v;\n-        if v >= Zero::zero() {\n-            if x < self {\n-                // overflow\n-                Bounded::max_value::<Self>()\n-            } else { x }\n-        } else {\n-            if x > self {\n-                // underflow\n-                Bounded::min_value::<Self>()\n-            } else { x }\n+    fn saturating_add(self, v: T) -> T {\n+        match self.checked_add(&v) {\n+            Some(x) => x,\n+            None => if v >= Zero::zero() {\n+                Bounded::max_value::<T>()\n+            } else {\n+                Bounded::min_value::<T>()\n+            }\n         }\n     }\n \n-    /// Saturating subtraction operator.\n-    /// Returns a-b, saturating at the numeric bounds instead of overflowing.\n     #[inline]\n-    fn saturating_sub(self, v: Self) -> Self {\n-        let x = self - v;\n-        if v >= Zero::zero() {\n-            if x > self {\n-                // underflow\n-                Bounded::min_value::<Self>()\n-            } else { x }\n-        } else {\n-            if x < self {\n-                // overflow\n-                Bounded::max_value::<Self>()\n-            } else { x }\n+    fn saturating_sub(self, v: T) -> T {\n+        match self.checked_sub(&v) {\n+            Some(x) => x,\n+            None => if v >= Zero::zero() {\n+                Bounded::min_value::<T>()\n+            } else {\n+                Bounded::max_value::<T>()\n+            }\n         }\n     }\n }\n \n-impl Saturating for int {}\n-impl Saturating for i8 {}\n-impl Saturating for i16 {}\n-impl Saturating for i32 {}\n-impl Saturating for i64 {}\n-impl Saturating for uint {}\n-impl Saturating for u8 {}\n-impl Saturating for u16 {}\n-impl Saturating for u32 {}\n-impl Saturating for u64 {}\n-\n pub trait CheckedAdd: Add<Self, Self> {\n     fn checked_add(&self, v: &Self) -> Option<Self>;\n }"}]}