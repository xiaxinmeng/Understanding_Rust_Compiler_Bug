{"sha": "134d8190727c6dca40011f03686e7bb68f46a26b", "node_id": "C_kwDOAAsO6NoAKDEzNGQ4MTkwNzI3YzZkY2E0MDAxMWYwMzY4NmU3YmI2OGY0NmEyNmI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-25T18:34:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-02T23:20:29Z"}, "message": "Stop deaggegating MIR.", "tree": {"sha": "40015ba04bb43212f86df58e9a03276a893bfd58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40015ba04bb43212f86df58e9a03276a893bfd58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134d8190727c6dca40011f03686e7bb68f46a26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134d8190727c6dca40011f03686e7bb68f46a26b", "html_url": "https://github.com/rust-lang/rust/commit/134d8190727c6dca40011f03686e7bb68f46a26b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134d8190727c6dca40011f03686e7bb68f46a26b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "html_url": "https://github.com/rust-lang/rust/commit/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed"}], "stats": {"total": 132, "additions": 0, "deletions": 132}, "files": [{"sha": "10783c5ed1d1cd7389fd67f5aa72e83f74763108", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -1,77 +0,0 @@\n-use rustc_index::vec::Idx;\n-use rustc_middle::mir::*;\n-use rustc_middle::ty::{Ty, TyCtxt};\n-use rustc_target::abi::VariantIdx;\n-\n-use std::iter::TrustedLen;\n-\n-/// Expand `lhs = Rvalue::Aggregate(kind, operands)` into assignments to the fields.\n-///\n-/// Produces something like\n-/// ```ignore (ilustrative)\n-/// (lhs as Variant).field0 = arg0;     // We only have a downcast if this is an enum\n-/// (lhs as Variant).field1 = arg1;\n-/// discriminant(lhs) = variant_index;  // If lhs is an enum or generator.\n-/// ```\n-pub fn expand_aggregate<'tcx>(\n-    orig_lhs: Place<'tcx>,\n-    operands: impl Iterator<Item = (Operand<'tcx>, Ty<'tcx>)> + TrustedLen,\n-    kind: AggregateKind<'tcx>,\n-    source_info: SourceInfo,\n-    tcx: TyCtxt<'tcx>,\n-) -> impl Iterator<Item = Statement<'tcx>> + TrustedLen {\n-    let mut lhs = orig_lhs;\n-    let mut set_discriminant = None;\n-    let active_field_index = match kind {\n-        AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n-            let adt_def = tcx.adt_def(adt_did);\n-            if adt_def.is_enum() {\n-                set_discriminant = Some(Statement {\n-                    kind: StatementKind::SetDiscriminant {\n-                        place: Box::new(orig_lhs),\n-                        variant_index,\n-                    },\n-                    source_info,\n-                });\n-                lhs = tcx.mk_place_downcast(orig_lhs, adt_def, variant_index);\n-            }\n-            active_field_index\n-        }\n-        AggregateKind::Generator(..) => {\n-            // Right now we only support initializing generators to\n-            // variant 0 (Unresumed).\n-            let variant_index = VariantIdx::new(0);\n-            set_discriminant = Some(Statement {\n-                kind: StatementKind::SetDiscriminant { place: Box::new(orig_lhs), variant_index },\n-                source_info,\n-            });\n-\n-            // Operands are upvars stored on the base place, so no\n-            // downcast is necessary.\n-\n-            None\n-        }\n-        _ => None,\n-    };\n-\n-    let operands = operands.enumerate().map(move |(i, (op, ty))| {\n-        let lhs_field = if let AggregateKind::Array(_) = kind {\n-            let offset = u64::try_from(i).unwrap();\n-            tcx.mk_place_elem(\n-                lhs,\n-                ProjectionElem::ConstantIndex { offset, min_length: offset + 1, from_end: false },\n-            )\n-        } else {\n-            let field = Field::new(active_field_index.unwrap_or(i));\n-            tcx.mk_place_field(lhs, field, ty)\n-        };\n-        Statement {\n-            source_info,\n-            kind: StatementKind::Assign(Box::new((lhs_field, Rvalue::Use(op)))),\n-        }\n-    });\n-    [Statement { source_info, kind: StatementKind::Deinit(Box::new(orig_lhs)) }]\n-        .into_iter()\n-        .chain(operands)\n-        .chain(set_discriminant)\n-}"}, {"sha": "51735e33e0f7142c9536a9aec475ce764712ffd1", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/134d8190727c6dca40011f03686e7bb68f46a26b/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d8190727c6dca40011f03686e7bb68f46a26b/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=134d8190727c6dca40011f03686e7bb68f46a26b", "patch": "@@ -1,4 +1,3 @@\n-pub mod aggregate;\n mod alignment;\n mod call_kind;\n pub mod collect_writes;\n@@ -7,7 +6,6 @@ mod find_self_call;\n mod might_permit_raw_init;\n mod type_name;\n \n-pub use self::aggregate::expand_aggregate;\n pub use self::alignment::is_disaligned;\n pub use self::call_kind::{call_kind, CallDesugaringKind, CallKind};\n pub use self::compare_types::{is_equal_up_to_subtyping, is_subtype};"}, {"sha": "905e127b7cb8cc520392bf10efa916637f9db8cf", "filename": "compiler/rustc_mir_transform/src/deaggregator.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs?ref=6a0b218161ddeeeb4adac8caa8c0e6bae32a4bed", "patch": "@@ -1,49 +0,0 @@\n-use crate::util::expand_aggregate;\n-use crate::MirPass;\n-use rustc_hir::def::DefKind;\n-use rustc_middle::mir::*;\n-use rustc_middle::ty::TyCtxt;\n-\n-pub struct Deaggregator;\n-\n-impl<'tcx> MirPass<'tcx> for Deaggregator {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let basic_blocks = body.basic_blocks.as_mut_preserves_cfg();\n-        for bb in basic_blocks {\n-            bb.expand_statements(|stmt| {\n-                // FIXME(eddyb) don't match twice on `stmt.kind` (post-NLL).\n-                let StatementKind::Assign(box (\n-                    _, Rvalue::Aggregate(box ref kind, _))\n-                ) = stmt.kind else { return None };\n-\n-                // FIXME(#48193) Deaggregate arrays when it's cheaper to do so.\n-                if let AggregateKind::Array(_) = kind {\n-                    return None;\n-                }\n-\n-                if let AggregateKind::Adt(def_id, ..) = kind\n-                    && matches!(tcx.def_kind(def_id), DefKind::Enum)\n-                {\n-                    return None;\n-                }\n-\n-                let stmt = stmt.replace_nop();\n-                let source_info = stmt.source_info;\n-                let StatementKind::Assign(box (lhs, Rvalue::Aggregate(kind, operands))) = stmt.kind else {\n-                    bug!();\n-                };\n-\n-                Some(expand_aggregate(\n-                    lhs,\n-                    operands.into_iter().map(|op| {\n-                        let ty = op.ty(&body.local_decls, tcx);\n-                        (op, ty)\n-                    }),\n-                    *kind,\n-                    source_info,\n-                    tcx,\n-                ))\n-            });\n-        }\n-    }\n-}"}, {"sha": "9070a7368b168049c6bae014116324261b1d490e", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/134d8190727c6dca40011f03686e7bb68f46a26b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d8190727c6dca40011f03686e7bb68f46a26b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=134d8190727c6dca40011f03686e7bb68f46a26b", "patch": "@@ -60,7 +60,6 @@ mod coverage;\n mod ctfe_limit;\n mod dataflow_const_prop;\n mod dead_store_elimination;\n-mod deaggregator;\n mod deduce_param_attrs;\n mod deduplicate_blocks;\n mod deref_separator;\n@@ -523,9 +522,6 @@ fn run_runtime_lowering_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &elaborate_box_derefs::ElaborateBoxDerefs,\n         &generator::StateTransform,\n         &add_retag::AddRetag,\n-        // Deaggregator is necessary for const prop. We may want to consider implementing\n-        // CTFE support for aggregates.\n-        &deaggregator::Deaggregator,\n         &Lint(const_prop_lint::ConstProp),\n     ];\n     pm::run_passes_no_validate(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::Initial)));"}]}