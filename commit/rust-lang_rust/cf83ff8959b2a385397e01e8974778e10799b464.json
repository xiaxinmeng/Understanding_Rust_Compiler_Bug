{"sha": "cf83ff8959b2a385397e01e8974778e10799b464", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmODNmZjg5NTliMmEzODUzOTdlMDFlODk3NDc3OGUxMDc5OWI0NjQ=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-04-06T12:14:41Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-04-06T13:29:36Z"}, "message": "Add requirements of TotalEq and TotalOrd\n\nClarify that TotalEq needs an underlying equivalence relation and that TotalOrd\nneeds a total ordering and specifically named the required (and sufficient)\nattributes.", "tree": {"sha": "57df837a43b39da8f8ddbca2d9033542fe2c1ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57df837a43b39da8f8ddbca2d9033542fe2c1ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf83ff8959b2a385397e01e8974778e10799b464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf83ff8959b2a385397e01e8974778e10799b464", "html_url": "https://github.com/rust-lang/rust/commit/cf83ff8959b2a385397e01e8974778e10799b464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf83ff8959b2a385397e01e8974778e10799b464/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667f82a79b2275a696b21086ddf5148a617fe20a", "url": "https://api.github.com/repos/rust-lang/rust/commits/667f82a79b2275a696b21086ddf5148a617fe20a", "html_url": "https://github.com/rust-lang/rust/commit/667f82a79b2275a696b21086ddf5148a617fe20a"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "610b9b63d80289e5bc3d7f634b368f81651a7e37", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf83ff8959b2a385397e01e8974778e10799b464/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf83ff8959b2a385397e01e8974778e10799b464/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=cf83ff8959b2a385397e01e8974778e10799b464", "patch": "@@ -62,7 +62,18 @@ pub trait Eq {\n     fn ne(&self, other: &Self) -> bool { !self.eq(other) }\n }\n \n-/// Trait for equality comparisons where `a == b` and `a != b` are strict inverses.\n+/**\n+ * Trait for equality comparisons which are [equivalence relations](\n+ * https://en.wikipedia.org/wiki/Equivalence_relation).\n+ *\n+ * This means, that in addition to `a == b` and `a != b` being strict inverses,\n+ * the equality must be (for all `a`, `b` and `c`):\n+ *\n+ * - reflexive: `a == a`;\n+ * - symmetric: `a == b` implies `b == a`; and\n+ * - transitive: `a == b` and `b == c` implies `a == c`.\n+ */\n+\n pub trait TotalEq: Eq {\n     // FIXME #13101: this method is used solely by #[deriving] to\n     // assert that every component of a type implements #[deriving]\n@@ -111,7 +122,17 @@ pub enum Ordering {\n    Greater = 1\n }\n \n-/// Trait for types that form a total order.\n+/**\n+ * Trait for types that form a [total order](\n+ * https://en.wikipedia.org/wiki/Total_order).\n+ *\n+ * An order is a total order if it is (for all `a`, `b` and `c`):\n+ *\n+ * - total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b`\n+ *   is true; and\n+ * - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for\n+ *   both `==` and `>`.\n+ */\n pub trait TotalOrd: TotalEq + Ord {\n     /// This method returns an ordering between `self` and `other` values.\n     ///"}]}