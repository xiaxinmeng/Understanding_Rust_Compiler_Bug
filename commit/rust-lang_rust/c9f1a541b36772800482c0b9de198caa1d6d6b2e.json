{"sha": "c9f1a541b36772800482c0b9de198caa1d6d6b2e", "node_id": "C_kwDOAAsO6NoAKGM5ZjFhNTQxYjM2NzcyODAwNDgyYzBiOWRlMTk4Y2FhMWQ2ZDZiMmU", "commit": {"author": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2023-02-28T23:04:27Z"}, "committer": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2023-03-01T20:35:00Z"}, "message": "Run compiler test suite in parallel on Fuchsia", "tree": {"sha": "b92ad87e6962e159626d1007d210f499f20926b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b92ad87e6962e159626d1007d210f499f20926b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f1a541b36772800482c0b9de198caa1d6d6b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f1a541b36772800482c0b9de198caa1d6d6b2e", "html_url": "https://github.com/rust-lang/rust/commit/c9f1a541b36772800482c0b9de198caa1d6d6b2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f1a541b36772800482c0b9de198caa1d6d6b2e/comments", "author": null, "committer": null, "parents": [{"sha": "31f858d9a511f24fedb8ed997b28304fec809630", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f858d9a511f24fedb8ed997b28304fec809630", "html_url": "https://github.com/rust-lang/rust/commit/31f858d9a511f24fedb8ed997b28304fec809630"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "e7d1d9781d5c43acc9581f057961827726cef35c", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c9f1a541b36772800482c0b9de198caa1d6d6b2e/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/c9f1a541b36772800482c0b9de198caa1d6d6b2e/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=c9f1a541b36772800482c0b9de198caa1d6d6b2e", "patch": "@@ -9,6 +9,7 @@\n \n import argparse\n from dataclasses import dataclass\n+import fcntl\n import glob\n import hashlib\n import json\n@@ -146,6 +147,9 @@ def host_arch_triple(self):\n     def zxdb_script_path(self):\n         return os.path.join(self.tmp_dir(), \"zxdb_script\")\n \n+    def pm_lockfile_path(self):\n+        return os.path.join(self.tmp_dir(), \"pm.lock\")\n+\n     def log_info(self, msg):\n         print(msg)\n \n@@ -460,6 +464,9 @@ def start(self):\n             stderr=self.subprocess_output(),\n         )\n \n+        # Create lockfiles\n+        open(self.pm_lockfile_path(), 'a').close()\n+\n         # Write to file\n         self.write_to_file()\n \n@@ -676,19 +683,25 @@ def log(msg):\n             log(\"Publishing package to repo...\")\n \n             # Publish package to repo\n-            subprocess.check_call(\n-                [\n-                    self.tool_path(\"pm\"),\n-                    \"publish\",\n-                    \"-a\",\n-                    \"-repo\",\n-                    self.repo_dir(),\n-                    \"-f\",\n-                    far_path,\n-                ],\n-                stdout=log_file,\n-                stderr=log_file,\n-            )\n+            with open(self.pm_lockfile_path(), 'w') as pm_lockfile:\n+                fcntl.lockf(pm_lockfile.fileno(), fcntl.LOCK_EX)\n+                subprocess.check_call(\n+                    [\n+                        self.tool_path(\"pm\"),\n+                        \"publish\",\n+                        \"-a\",\n+                        \"-repo\",\n+                        self.repo_dir(),\n+                        \"-f\",\n+                        far_path,\n+                    ],\n+                    stdout=log_file,\n+                    stderr=log_file,\n+                )\n+                # This lock should be released automatically when the pm\n+                # lockfile is closed, but we'll be polite and unlock it now\n+                # since the spec leaves some wiggle room.\n+                fcntl.lockf(pm_lockfile.fileno(), fcntl.LOCK_UN)\n \n             log(\"Running ffx test...\")\n "}, {"sha": "2b244375f4015dc1987ea219bb8b8b373d9d4f5f", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9f1a541b36772800482c0b9de198caa1d6d6b2e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9f1a541b36772800482c0b9de198caa1d6d6b2e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=c9f1a541b36772800482c0b9de198caa1d6d6b2e", "patch": "@@ -717,7 +717,7 @@ run the full `tests/ui` test suite:\n     --stage=2                                                                 \\\n     test tests/ui                                                             \\\n     --target x86_64-unknown-fuchsia                                           \\\n-    --run=always --jobs 1                                                     \\\n+    --run=always                                                              \\\n     --test-args --target-rustcflags                                           \\\n     --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \\\n     --test-args --target-rustcflags                                           \\\n@@ -729,9 +729,6 @@ run the full `tests/ui` test suite:\n )\n ```\n \n-*Note: The test suite cannot be run in parallel at the moment, so `x.py`\n-must be run with `--jobs 1` to ensure only one test runs at a time.*\n-\n By default, `x.py` compiles test binaries with `panic=unwind`. If you built your\n Rust toolchain with `-Cpanic=abort`, you need to tell `x.py` to compile test\n binaries with `panic=abort` as well:\n@@ -908,7 +905,7 @@ through our `x.py` invocation. The full invocation is:\n     --stage=2                                                                 \\\n     test tests/${TEST}                                                        \\\n     --target x86_64-unknown-fuchsia                                           \\\n-    --run=always --jobs 1                                                     \\\n+    --run=always                                                              \\\n     --test-args --target-rustcflags                                           \\\n     --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \\\n     --test-args --target-rustcflags                                           \\"}]}