{"sha": "306035c21741928bef75b8915d2195cce400b70a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNjAzNWMyMTc0MTkyOGJlZjc1Yjg5MTVkMjE5NWNjZTQwMGI3MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-18T17:10:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-18T17:10:34Z"}, "message": "Auto merge of #39933 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\n- Successful merges: #39847, #39862, #39898, #39904, #39928\n- Failed merges:", "tree": {"sha": "4aa49cfb106dc1deb4b2b52a11ea577efa7b21db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aa49cfb106dc1deb4b2b52a11ea577efa7b21db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/306035c21741928bef75b8915d2195cce400b70a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/306035c21741928bef75b8915d2195cce400b70a", "html_url": "https://github.com/rust-lang/rust/commit/306035c21741928bef75b8915d2195cce400b70a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/306035c21741928bef75b8915d2195cce400b70a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f2fc9db15d41285619138900c6f65686bd32a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2fc9db15d41285619138900c6f65686bd32a2a", "html_url": "https://github.com/rust-lang/rust/commit/8f2fc9db15d41285619138900c6f65686bd32a2a"}, {"sha": "98c2cf2ae5ee9ec69d06b32964156a13c94f4402", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c2cf2ae5ee9ec69d06b32964156a13c94f4402", "html_url": "https://github.com/rust-lang/rust/commit/98c2cf2ae5ee9ec69d06b32964156a13c94f4402"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "079324d56d1e662ea82e280f2415155f902452b4", "filename": "src/doc/book/src/procedural-macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/306035c21741928bef75b8915d2195cce400b70a/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/306035c21741928bef75b8915d2195cce400b70a/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=306035c21741928bef75b8915d2195cce400b70a", "patch": "@@ -169,7 +169,7 @@ So this is where quotes comes in. The `ast` argument is a struct that gives us\n a representation of our type (which can be either a `struct` or an `enum`).\n Check out the [docs](https://docs.rs/syn/0.10.5/syn/struct.MacroInput.html),\n there is some useful information there. We are able to get the name of the\n-type using `ast.ident`. The `quote!` macro let's us write up the Rust code\n+type using `ast.ident`. The `quote!` macro lets us write up the Rust code\n that we wish to return and convert it into `Tokens`. `quote!` let's us use some\n really cool templating mechanics; we simply write `#name` and `quote!` will\n replace it with the variable named `name`. You can even do some repetition"}, {"sha": "e92eb4ff7bdd4b565b4a81543e09b366d9230dae", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/306035c21741928bef75b8915d2195cce400b70a/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306035c21741928bef75b8915d2195cce400b70a/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=306035c21741928bef75b8915d2195cce400b70a", "patch": "@@ -1250,17 +1250,17 @@ impl String {\n         self.len() == 0\n     }\n \n-    /// Divide one string into two at an index.\n+    /// Splits the string into two at the given index.\n     ///\n-    /// The argument, `mid`, should be a byte offset from the start of the string. It must also\n-    /// be on the boundary of a UTF-8 code point.\n+    /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and\n+    /// the returned `String` contains bytes `[at, len)`. `at` must be on the\n+    /// boundary of a UTF-8 code point.\n     ///\n-    /// The two strings returned go from the start of the string to `mid`, and from `mid` to the end\n-    /// of the string.\n+    /// Note that the capacity of `self` does not change.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `mid` is not on a `UTF-8` code point boundary, or if it is beyond the last\n+    /// Panics if `at` is not on a `UTF-8` code point boundary, or if it is beyond the last\n     /// code point of the string.\n     ///\n     /// # Examples\n@@ -1275,9 +1275,9 @@ impl String {\n     /// ```\n     #[inline]\n     #[stable(feature = \"string_split_off\", since = \"1.16.0\")]\n-    pub fn split_off(&mut self, mid: usize) -> String {\n-        assert!(self.is_char_boundary(mid));\n-        let other = self.vec.split_off(mid);\n+    pub fn split_off(&mut self, at: usize) -> String {\n+        assert!(self.is_char_boundary(at));\n+        let other = self.vec.split_off(at);\n         unsafe { String::from_utf8_unchecked(other) }\n     }\n "}, {"sha": "3785bbe9bb0e42ad3c5853daf46ae55a8ffad902", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/306035c21741928bef75b8915d2195cce400b70a/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306035c21741928bef75b8915d2195cce400b70a/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=306035c21741928bef75b8915d2195cce400b70a", "patch": "@@ -1603,12 +1603,12 @@ pub trait Iterator {\n         let mut i = self.len();\n \n         while let Some(v) = self.next_back() {\n-            if predicate(v) {\n-                return Some(i - 1);\n-            }\n             // No need for an overflow check here, because `ExactSizeIterator`\n             // implies that the number of elements fits into a `usize`.\n             i -= 1;\n+            if predicate(v) {\n+                return Some(i);\n+            }\n         }\n         None\n     }"}, {"sha": "dd4f1ff4f5ed7318c33850b9f341848fed948837", "filename": "src/libstd/env.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/306035c21741928bef75b8915d2195cce400b70a/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306035c21741928bef75b8915d2195cce400b70a/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=306035c21741928bef75b8915d2195cce400b70a", "patch": "@@ -96,7 +96,9 @@ pub struct VarsOs { inner: os_imp::Env }\n ///\n /// While iterating, the returned iterator will panic if any key or value in the\n /// environment is not valid unicode. If this is not desired, consider using the\n-/// `env::vars_os` function.\n+/// [`env::vars_os`] function.\n+///\n+/// [`env::vars_os`]: fn.vars_os.html\n ///\n /// # Examples\n ///\n@@ -171,9 +173,12 @@ impl fmt::Debug for VarsOs {\n \n /// Fetches the environment variable `key` from the current process.\n ///\n-/// The returned result is `Ok(s)` if the environment variable is present and is\n+/// The returned result is [`Ok(s)`] if the environment variable is present and is\n /// valid unicode. If the environment variable is not present, or it is not\n-/// valid unicode, then `Err` will be returned.\n+/// valid unicode, then [`Err`] will be returned.\n+///\n+/// [`Ok(s)`]: ../result/enum.Result.html#variant.Ok\n+/// [`Err`]: ../result/enum.Result.html#variant.Err\n ///\n /// # Examples\n ///\n@@ -199,7 +204,9 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n }\n \n /// Fetches the environment variable `key` from the current process, returning\n-/// `None` if the variable isn't set.\n+/// [`None`] if the variable isn't set.\n+///\n+/// [`None`]: ../option/enum.Option.html#variant.None\n ///\n /// # Examples\n ///"}, {"sha": "1e7394c0b09e7e88f9b52fb9e2f0f57efe702b9c", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/306035c21741928bef75b8915d2195cce400b70a/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306035c21741928bef75b8915d2195cce400b70a/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=306035c21741928bef75b8915d2195cce400b70a", "patch": "@@ -316,7 +316,7 @@ impl Once {\n                         }\n \n                         // Once we've enqueued ourselves, wait in a loop.\n-                        // Aftewards reload the state and continue with what we\n+                        // Afterwards reload the state and continue with what we\n                         // were doing from before.\n                         while !node.signaled.load(Ordering::SeqCst) {\n                             thread::park();"}, {"sha": "66f09a7069c130969b65a3c170c6b9f2ce64b08f", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/306035c21741928bef75b8915d2195cce400b70a/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306035c21741928bef75b8915d2195cce400b70a/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=306035c21741928bef75b8915d2195cce400b70a", "patch": "@@ -28,8 +28,8 @@ use mem;\n /// # Initialization and Destruction\n ///\n /// Initialization is dynamically performed on the first call to `with()`\n-/// within a thread, and values support destructors which will be run when a\n-/// thread exits.\n+/// within a thread, and values that implement `Drop` get destructed when a\n+/// thread exits. Some caveats apply, which are explained below.\n ///\n /// # Examples\n ///"}]}