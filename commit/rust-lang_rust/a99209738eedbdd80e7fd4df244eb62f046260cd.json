{"sha": "a99209738eedbdd80e7fd4df244eb62f046260cd", "node_id": "C_kwDOAAsO6NoAKGE5OTIwOTczOGVlZGJkZDgwZTdmZDRkZjI0NGViNjJmMDQ2MjYwY2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-26T22:24:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-26T22:24:01Z"}, "message": "Rollup merge of #111991 - BoxyUwU:change_error_term_display, r=compiler-errors\n\nChange ty and const error's pretty printing to be in braces\n\n`[const error]` and `[type error]` are slightly confusing since they look like either a slice with an error type for the element ty or a slice with a const argument as the type ???. This PR changes them to display as `{const error}` and `{type error}`  similar to `{integer}`.\n\nThis does not update the `Debug` impls for them which is done in #111988.\n\nI updated some error logic to avoid printing the substs of trait refs when unable to resolve an assoc item for them, this avoids emitting errors with `{type error}` in them. The substs are not relevant for these errors since we don't take into account the substs when resolving the assoc item.\n\nr? ``@compiler-errors``", "tree": {"sha": "9cab6819d78ffb21e704dbf9e7a75574784398a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cab6819d78ffb21e704dbf9e7a75574784398a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a99209738eedbdd80e7fd4df244eb62f046260cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkcTGBCRBK7hj4Ov3rIwAA9WUIADs2FnLaExzzH68ehL11Vv3r\no9vr8IdrwoJYekXwH1aKKDqAm0vt84YvOSLMf6ZNIo0o5n2PsHQN2HArVQQLc8C5\nVyGbdlHa5Pud6jyDnJwGWYB8VzGkSyfQtx51y52fZjsKQxHkB8RB4j4p7iYNaEB+\ntnpGaJmgMsIJaRA5viNvX4DcuBp2YcOuMxVNOvbNIod9JP8Mzsyfzkh0ZOF3dPPu\nLG6O7ddbbdSp5TzzAHtCDZdyJDaur4iX/5UewmYCkT4sy/eifjZB0/u0374DzA9Q\ntQ+rMuNZuDBqRliZqWqEuDePwsjPuV1f1sEh4g8dq+nrb187Xl2Q17QnDqMiVUk=\n=8J9z\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cab6819d78ffb21e704dbf9e7a75574784398a4\nparent dfdbf1b1333a920bd5ca25f47fbedea82df33b3e\nparent ad77bc8427cb181a4f0e61ba0f85c793139f9512\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685139841 +0200\ncommitter GitHub <noreply@github.com> 1685139841 +0200\n\nRollup merge of #111991 - BoxyUwU:change_error_term_display, r=compiler-errors\n\nChange ty and const error's pretty printing to be in braces\n\n`[const error]` and `[type error]` are slightly confusing since they look like either a slice with an error type for the element ty or a slice with a const argument as the type ???. This PR changes them to display as `{const error}` and `{type error}`  similar to `{integer}`.\n\nThis does not update the `Debug` impls for them which is done in #111988.\n\nI updated some error logic to avoid printing the substs of trait refs when unable to resolve an assoc item for them, this avoids emitting errors with `{type error}` in them. The substs are not relevant for these errors since we don't take into account the substs when resolving the assoc item.\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a99209738eedbdd80e7fd4df244eb62f046260cd", "html_url": "https://github.com/rust-lang/rust/commit/a99209738eedbdd80e7fd4df244eb62f046260cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a99209738eedbdd80e7fd4df244eb62f046260cd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfdbf1b1333a920bd5ca25f47fbedea82df33b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfdbf1b1333a920bd5ca25f47fbedea82df33b3e", "html_url": "https://github.com/rust-lang/rust/commit/dfdbf1b1333a920bd5ca25f47fbedea82df33b3e"}, {"sha": "ad77bc8427cb181a4f0e61ba0f85c793139f9512", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad77bc8427cb181a4f0e61ba0f85c793139f9512", "html_url": "https://github.com/rust-lang/rust/commit/ad77bc8427cb181a4f0e61ba0f85c793139f9512"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "2c60a0624605f983c03d0a8b9f2c318cc5420c86", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a99209738eedbdd80e7fd4df244eb62f046260cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99209738eedbdd80e7fd4df244eb62f046260cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=a99209738eedbdd80e7fd4df244eb62f046260cd", "patch": "@@ -1159,7 +1159,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // those that do.\n             self.one_bound_for_assoc_type(\n                 || traits::supertraits(tcx, trait_ref),\n-                trait_ref.print_only_trait_path(),\n+                trait_ref.skip_binder().print_only_trait_name(),\n                 binding.item_name,\n                 path_span,\n                 match binding.kind {"}, {"sha": "d6c88ea96ca4300bed186a848953cf0db081fd4c", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a99209738eedbdd80e7fd4df244eb62f046260cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99209738eedbdd80e7fd4df244eb62f046260cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a99209738eedbdd80e7fd4df244eb62f046260cd", "patch": "@@ -700,7 +700,7 @@ pub trait PrettyPrinter<'tcx>:\n                     if verbose { p!(write(\"{:?}\", infer_ty)) } else { p!(write(\"{}\", infer_ty)) }\n                 }\n             }\n-            ty::Error(_) => p!(\"[type error]\"),\n+            ty::Error(_) => p!(\"{{type error}}\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n                 ty::BoundTyKind::Anon => debug_bound_var(&mut self, debruijn, bound_ty.var)?,\n@@ -1379,8 +1379,8 @@ pub trait PrettyPrinter<'tcx>:\n             },\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n-            ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n-            ty::ConstKind::Error(_) => p!(\"[const error]\"),\n+            ty::ConstKind::Expr(_) => p!(\"{{const expr}}\"),\n+            ty::ConstKind::Error(_) => p!(\"{{const error}}\"),\n         };\n         Ok(self)\n     }"}, {"sha": "3d1197afd0f79a5d0b06d0e91b557f1aed109362", "filename": "tests/ui/const-generics/transmute-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a99209738eedbdd80e7fd4df244eb62f046260cd/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a99209738eedbdd80e7fd4df244eb62f046260cd/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr?ref=a99209738eedbdd80e7fd4df244eb62f046260cd", "patch": "@@ -4,8 +4,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[[u32; H+1]; W]` (generic size [const expr])\n-   = note: target type: `[[u32; W+1]; H]` (generic size [const expr])\n+   = note: source type: `[[u32; H+1]; W]` (generic size {const expr})\n+   = note: target type: `[[u32; W+1]; H]` (generic size {const expr})\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/transmute-fail.rs:16:5\n@@ -34,8 +34,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[[u32; H]; W]` (generic size [const expr])\n-   = note: target type: `[u32; W * H * H]` (generic size [const expr])\n+   = note: source type: `[[u32; H]; W]` (generic size {const expr})\n+   = note: target type: `[u32; W * H * H]` (generic size {const expr})\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/transmute-fail.rs:30:5"}, {"sha": "e7f7fdc513bb79bc37efb0c46deb8f87c03573d1", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a99209738eedbdd80e7fd4df244eb62f046260cd/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99209738eedbdd80e7fd4df244eb62f046260cd/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs?ref=a99209738eedbdd80e7fd4df244eb62f046260cd", "patch": "@@ -2,7 +2,7 @@\n \n trait One<A> { fn foo(&self) -> A; }\n \n-fn foo(_: &dyn One()) //~ ERROR associated type `Output` not found for `One<()>`\n+fn foo(_: &dyn One()) //~ ERROR associated type `Output` not found for `One`\n {}\n \n fn main() { }"}, {"sha": "e4772478bd91056e0ac4eb7075ee92515c2b4aaa", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a99209738eedbdd80e7fd4df244eb62f046260cd/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a99209738eedbdd80e7fd4df244eb62f046260cd/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr?ref=a99209738eedbdd80e7fd4df244eb62f046260cd", "patch": "@@ -1,4 +1,4 @@\n-error[E0220]: associated type `Output` not found for `One<()>`\n+error[E0220]: associated type `Output` not found for `One`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs:5:16\n    |\n LL | fn foo(_: &dyn One())"}, {"sha": "eb18b121957c4258fd49b5b26d5f2c72ac0efc18", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a99209738eedbdd80e7fd4df244eb62f046260cd/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a99209738eedbdd80e7fd4df244eb62f046260cd/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=a99209738eedbdd80e7fd4df244eb62f046260cd", "patch": "@@ -12,7 +12,7 @@ note: trait defined here, with 3 generic parameters: `A`, `B`, `C`\n LL | trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }\n    |       ^^^^^ - - -\n \n-error[E0220]: associated type `Output` not found for `Three<(), [type error], [type error]>`\n+error[E0220]: associated type `Output` not found for `Three`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())"}]}