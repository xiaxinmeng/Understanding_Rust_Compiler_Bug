{"sha": "22457deef7e4205b46127fbbe4d0c720aa60b999", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNDU3ZGVlZjdlNDIwNWI0NjEyN2ZiYmU0ZDBjNzIwYWE2MGI5OTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-06T11:52:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-06T11:52:15Z"}, "message": "make Lazy::new unsafe and check reentrancy condition in the callers", "tree": {"sha": "1349a8979095dd807a9a0d698fa26e74af897488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1349a8979095dd807a9a0d698fa26e74af897488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22457deef7e4205b46127fbbe4d0c720aa60b999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22457deef7e4205b46127fbbe4d0c720aa60b999", "html_url": "https://github.com/rust-lang/rust/commit/22457deef7e4205b46127fbbe4d0c720aa60b999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22457deef7e4205b46127fbbe4d0c720aa60b999/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "819645bfc461af9c02aa60a3385b008f490ed164", "url": "https://api.github.com/repos/rust-lang/rust/commits/819645bfc461af9c02aa60a3385b008f490ed164", "html_url": "https://github.com/rust-lang/rust/commit/819645bfc461af9c02aa60a3385b008f490ed164"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "9513cc7fb2d7ba97f8deb1b036ebd0ed9bd88f83", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22457deef7e4205b46127fbbe4d0c720aa60b999/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22457deef7e4205b46127fbbe4d0c720aa60b999/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=22457deef7e4205b46127fbbe4d0c720aa60b999", "patch": "@@ -26,7 +26,9 @@ const fn done<T>() -> *mut Arc<T> { 1_usize as *mut _ }\n unsafe impl<T> Sync for Lazy<T> {}\n \n impl<T: Send + Sync + 'static> Lazy<T> {\n-    pub const fn new(init: fn() -> Arc<T>) -> Lazy<T> {\n+    /// Safety: `init` must not call `get` on the variable that is being\n+    /// initialized.\n+    pub const unsafe fn new(init: fn() -> Arc<T>) -> Lazy<T> {\n         // `lock` is never initialized fully, so this mutex is reentrant!\n         // Do not use it in a way that might be reentrant, that could lead to\n         // aliasing `&mut`.\n@@ -66,7 +68,7 @@ impl<T: Send + Sync + 'static> Lazy<T> {\n         });\n         // This could reentrantly call `init` again, which is a problem\n         // because our `lock` allows reentrancy!\n-        // FIXME: Add argument why this is okay.\n+        // That's why `new` is unsafe and requires the caller to ensure no reentrancy happens.\n         let ret = (self.init)();\n         if registered.is_ok() {\n             self.ptr.set(Box::into_raw(Box::new(ret.clone())));"}, {"sha": "1f256f518c7ce083585f57b74ddccbfb95912b04", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22457deef7e4205b46127fbbe4d0c720aa60b999/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22457deef7e4205b46127fbbe4d0c720aa60b999/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=22457deef7e4205b46127fbbe4d0c720aa60b999", "patch": "@@ -197,12 +197,13 @@ pub struct StdinLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n-    static INSTANCE: Lazy<Mutex<BufReader<Maybe<StdinRaw>>>> = Lazy::new(stdin_init);\n+    static INSTANCE: Lazy<Mutex<BufReader<Maybe<StdinRaw>>>> = unsafe { Lazy::new(stdin_init) };\n     return Stdin {\n         inner: INSTANCE.get().expect(\"cannot access stdin during shutdown\"),\n     };\n \n     fn stdin_init() -> Arc<Mutex<BufReader<Maybe<StdinRaw>>>> {\n+        // This must not reentrantly access `INSTANCE`\n         let stdin = match stdin_raw() {\n             Ok(stdin) => Maybe::Real(stdin),\n             _ => Maybe::Fake\n@@ -396,12 +397,13 @@ pub struct StdoutLock<'a> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n     static INSTANCE: Lazy<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>>\n-        = Lazy::new(stdout_init);\n+        = unsafe { Lazy::new(stdout_init) };\n     return Stdout {\n         inner: INSTANCE.get().expect(\"cannot access stdout during shutdown\"),\n     };\n \n     fn stdout_init() -> Arc<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>> {\n+        // This must not reentrantly access `INSTANCE`\n         let stdout = match stdout_raw() {\n             Ok(stdout) => Maybe::Real(stdout),\n             _ => Maybe::Fake,\n@@ -531,12 +533,14 @@ pub struct StderrLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stderr() -> Stderr {\n-    static INSTANCE: Lazy<ReentrantMutex<RefCell<Maybe<StderrRaw>>>> = Lazy::new(stderr_init);\n+    static INSTANCE: Lazy<ReentrantMutex<RefCell<Maybe<StderrRaw>>>> =\n+        unsafe { Lazy::new(stderr_init) };\n     return Stderr {\n         inner: INSTANCE.get().expect(\"cannot access stderr during shutdown\"),\n     };\n \n     fn stderr_init() -> Arc<ReentrantMutex<RefCell<Maybe<StderrRaw>>>> {\n+        // This must not reentrantly access `INSTANCE`\n         let stderr = match stderr_raw() {\n             Ok(stderr) => Maybe::Real(stderr),\n             _ => Maybe::Fake,"}]}