{"sha": "feca2c229e209ceda1eda7306e6ea9ee0aaa9305", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlY2EyYzIyOWUyMDljZWRhMWVkYTczMDZlNmVhOWVlMGFhYTkzMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-23T08:23:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-23T08:23:00Z"}, "message": "Auto merge of #76659 - simonvandel:76432, r=oli-obk\n\nSimplifyComparisonIntegral: fix miscompilation\n\nFixes #76432\nOnly insert StorageDeads if we actually removed one.\nFixes an issue where we added StorageDead to a place with no StorageLive\n\nr? `@oli-obk`", "tree": {"sha": "b657aa952a045e1cc80f36c3b0409feca1bdee82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b657aa952a045e1cc80f36c3b0409feca1bdee82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feca2c229e209ceda1eda7306e6ea9ee0aaa9305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feca2c229e209ceda1eda7306e6ea9ee0aaa9305", "html_url": "https://github.com/rust-lang/rust/commit/feca2c229e209ceda1eda7306e6ea9ee0aaa9305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feca2c229e209ceda1eda7306e6ea9ee0aaa9305/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d59207ad56e24a2bfefa3544de48a0f6491363", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d59207ad56e24a2bfefa3544de48a0f6491363", "html_url": "https://github.com/rust-lang/rust/commit/f6d59207ad56e24a2bfefa3544de48a0f6491363"}, {"sha": "e5447a22222ecc6a650e75282cb9931b910854b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5447a22222ecc6a650e75282cb9931b910854b2", "html_url": "https://github.com/rust-lang/rust/commit/e5447a22222ecc6a650e75282cb9931b910854b2"}], "stats": {"total": 175, "additions": 154, "deletions": 21}, "files": [{"sha": "9b460c9ecb1be9eb4d7f270850f5e979afde17e2", "filename": "compiler/rustc_mir/src/transform/simplify_comparison_integral.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/feca2c229e209ceda1eda7306e6ea9ee0aaa9305/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feca2c229e209ceda1eda7306e6ea9ee0aaa9305/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs?ref=feca2c229e209ceda1eda7306e6ea9ee0aaa9305", "patch": "@@ -61,26 +61,6 @@ impl<'tcx> MirPass<'tcx> for SimplifyComparisonIntegral {\n                 _ => unreachable!(),\n             }\n \n-            let terminator = bb.terminator_mut();\n-\n-            // add StorageDead for the place switched on at the top of each target\n-            for bb_idx in new_targets.iter() {\n-                storage_deads_to_insert.push((\n-                    *bb_idx,\n-                    Statement {\n-                        source_info: terminator.source_info,\n-                        kind: StatementKind::StorageDead(opt.to_switch_on.local),\n-                    },\n-                ));\n-            }\n-\n-            terminator.kind = TerminatorKind::SwitchInt {\n-                discr: Operand::Move(opt.to_switch_on),\n-                switch_ty: opt.branch_value_ty,\n-                values: vec![new_value].into(),\n-                targets: new_targets,\n-            };\n-\n             // delete comparison statement if it the value being switched on was moved, which means it can not be user later on\n             if opt.can_remove_bin_op_stmt {\n                 bb.statements[opt.bin_op_stmt_idx].make_nop();\n@@ -106,14 +86,35 @@ impl<'tcx> MirPass<'tcx> for SimplifyComparisonIntegral {\n                 }\n             }\n \n+            let terminator = bb.terminator();\n+\n             // remove StorageDead (if it exists) being used in the assign of the comparison\n             for (stmt_idx, stmt) in bb.statements.iter().enumerate() {\n                 if !matches!(stmt.kind, StatementKind::StorageDead(local) if local == opt.to_switch_on.local)\n                 {\n                     continue;\n                 }\n-                storage_deads_to_remove.push((stmt_idx, opt.bb_idx))\n+                storage_deads_to_remove.push((stmt_idx, opt.bb_idx));\n+                // if we have StorageDeads to remove then make sure to insert them at the top of each target\n+                for bb_idx in new_targets.iter() {\n+                    storage_deads_to_insert.push((\n+                        *bb_idx,\n+                        Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::StorageDead(opt.to_switch_on.local),\n+                        },\n+                    ));\n+                }\n             }\n+\n+            let terminator = bb.terminator_mut();\n+\n+            terminator.kind = TerminatorKind::SwitchInt {\n+                discr: Operand::Move(opt.to_switch_on),\n+                switch_ty: opt.branch_value_ty,\n+                values: vec![new_value].into(),\n+                targets: new_targets,\n+            };\n         }\n \n         for (idx, bb_idx) in storage_deads_to_remove {"}, {"sha": "c8b405ca8eaaf374702246cd420f0a63eb9dd996", "filename": "src/test/mir-opt/issue_76432.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/feca2c229e209ceda1eda7306e6ea9ee0aaa9305/src%2Ftest%2Fmir-opt%2Fissue_76432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feca2c229e209ceda1eda7306e6ea9ee0aaa9305/src%2Ftest%2Fmir-opt%2Fissue_76432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.rs?ref=feca2c229e209ceda1eda7306e6ea9ee0aaa9305", "patch": "@@ -0,0 +1,16 @@\n+// Check that we do not insert StorageDead at each target if StorageDead was never seen\n+\n+// EMIT_MIR issue_76432.test.SimplifyComparisonIntegral.diff\n+use std::fmt::Debug;\n+\n+fn test<T: Copy + Debug + PartialEq>(x: T) {\n+    let v: &[T] = &[x, x, x];\n+    match v {\n+        [ref v1, ref v2, ref v3] => [v1 as *const _, v2 as *const _, v3 as *const _],\n+        _ => unreachable!(),\n+    };\n+}\n+\n+fn main() {\n+    test(0u32);\n+}"}, {"sha": "499134b69919fa11a7e822276aaa878bac2188fc", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/feca2c229e209ceda1eda7306e6ea9ee0aaa9305/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/feca2c229e209ceda1eda7306e6ea9ee0aaa9305/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=feca2c229e209ceda1eda7306e6ea9ee0aaa9305", "patch": "@@ -0,0 +1,116 @@\n+- // MIR for `test` before SimplifyComparisonIntegral\n++ // MIR for `test` after SimplifyComparisonIntegral\n+  \n+  fn test(_1: T) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/issue_76432.rs:6:38: 6:39\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_76432.rs:6:44: 6:44\n+      let _2: &[T];                        // in scope 0 at $DIR/issue_76432.rs:7:9: 7:10\n+      let mut _3: &[T; 3];                 // in scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+      let _4: &[T; 3];                     // in scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+      let _5: [T; 3];                      // in scope 0 at $DIR/issue_76432.rs:7:20: 7:29\n+      let mut _6: T;                       // in scope 0 at $DIR/issue_76432.rs:7:21: 7:22\n+      let mut _7: T;                       // in scope 0 at $DIR/issue_76432.rs:7:24: 7:25\n+      let mut _8: T;                       // in scope 0 at $DIR/issue_76432.rs:7:27: 7:28\n+      let _9: [*const T; 3];               // in scope 0 at $DIR/issue_76432.rs:8:5: 11:6\n+      let mut _10: usize;                  // in scope 0 at $DIR/issue_76432.rs:9:9: 9:33\n+      let mut _11: usize;                  // in scope 0 at $DIR/issue_76432.rs:9:9: 9:33\n+      let mut _12: bool;                   // in scope 0 at $DIR/issue_76432.rs:9:9: 9:33\n+      let mut _16: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:38: 9:52\n+      let mut _17: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:38: 9:52\n+      let mut _18: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:54: 9:68\n+      let mut _19: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:54: 9:68\n+      let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n+      let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n+      let mut _22: !;                      // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      scope 1 {\n+          debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:7:9: 7:10\n+          let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:9:10: 9:16\n+          let _14: &T;                     // in scope 1 at $DIR/issue_76432.rs:9:18: 9:24\n+          let _15: &T;                     // in scope 1 at $DIR/issue_76432.rs:9:26: 9:32\n+          scope 2 {\n+              debug v1 => _13;             // in scope 2 at $DIR/issue_76432.rs:9:10: 9:16\n+              debug v2 => _14;             // in scope 2 at $DIR/issue_76432.rs:9:18: 9:24\n+              debug v3 => _15;             // in scope 2 at $DIR/issue_76432.rs:9:26: 9:32\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_76432.rs:7:9: 7:10\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          StorageLive(_5);                 // scope 0 at $DIR/issue_76432.rs:7:20: 7:29\n+          StorageLive(_6);                 // scope 0 at $DIR/issue_76432.rs:7:21: 7:22\n+          _6 = _1;                         // scope 0 at $DIR/issue_76432.rs:7:21: 7:22\n+          StorageLive(_7);                 // scope 0 at $DIR/issue_76432.rs:7:24: 7:25\n+          _7 = _1;                         // scope 0 at $DIR/issue_76432.rs:7:24: 7:25\n+          StorageLive(_8);                 // scope 0 at $DIR/issue_76432.rs:7:27: 7:28\n+          _8 = _1;                         // scope 0 at $DIR/issue_76432.rs:7:27: 7:28\n+          _5 = [move _6, move _7, move _8]; // scope 0 at $DIR/issue_76432.rs:7:20: 7:29\n+          StorageDead(_8);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29\n+          StorageDead(_7);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29\n+          StorageDead(_6);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29\n+          _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          _3 = _4;                         // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29\n+          StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:7:29: 7:30\n+          StorageLive(_9);                 // scope 1 at $DIR/issue_76432.rs:8:5: 11:6\n+          _10 = Len((*_2));                // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          _11 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+-         _12 = Eq(move _10, const 3_usize); // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+-         switchInt(move _12) -> [false: bb1, otherwise: bb2]; // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n++         nop;                             // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n++         switchInt(move _10) -> [3_usize: bb2, otherwise: bb1]; // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+      }\n+  \n+      bb1: {\n+          StorageLive(_22);                // scope 1 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic::<&str>(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, size: Size { raw: 40 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 })\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, size: Size { raw: 40 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }\n+      }\n+  \n+      bb2: {\n+          StorageLive(_13);                // scope 1 at $DIR/issue_76432.rs:9:10: 9:16\n+          _13 = &(*_2)[0 of 3];            // scope 1 at $DIR/issue_76432.rs:9:10: 9:16\n+          StorageLive(_14);                // scope 1 at $DIR/issue_76432.rs:9:18: 9:24\n+          _14 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:9:18: 9:24\n+          StorageLive(_15);                // scope 1 at $DIR/issue_76432.rs:9:26: 9:32\n+          _15 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:9:26: 9:32\n+          StorageLive(_16);                // scope 2 at $DIR/issue_76432.rs:9:38: 9:52\n+          StorageLive(_17);                // scope 2 at $DIR/issue_76432.rs:9:38: 9:52\n+          _17 = &raw const (*_13);         // scope 2 at $DIR/issue_76432.rs:9:38: 9:40\n+          _16 = _17;                       // scope 2 at $DIR/issue_76432.rs:9:38: 9:52\n+          StorageLive(_18);                // scope 2 at $DIR/issue_76432.rs:9:54: 9:68\n+          StorageLive(_19);                // scope 2 at $DIR/issue_76432.rs:9:54: 9:68\n+          _19 = &raw const (*_14);         // scope 2 at $DIR/issue_76432.rs:9:54: 9:56\n+          _18 = _19;                       // scope 2 at $DIR/issue_76432.rs:9:54: 9:68\n+          StorageLive(_20);                // scope 2 at $DIR/issue_76432.rs:9:70: 9:84\n+          StorageLive(_21);                // scope 2 at $DIR/issue_76432.rs:9:70: 9:84\n+          _21 = &raw const (*_15);         // scope 2 at $DIR/issue_76432.rs:9:70: 9:72\n+          _20 = _21;                       // scope 2 at $DIR/issue_76432.rs:9:70: 9:84\n+          _9 = [move _16, move _18, move _20]; // scope 2 at $DIR/issue_76432.rs:9:37: 9:85\n+          StorageDead(_21);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_20);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_19);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_18);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_17);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_16);                // scope 2 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_15);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_14);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_13);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85\n+          StorageDead(_9);                 // scope 1 at $DIR/issue_76432.rs:11:6: 11:7\n+          _0 = const ();                   // scope 0 at $DIR/issue_76432.rs:6:44: 12:2\n+          StorageDead(_5);                 // scope 0 at $DIR/issue_76432.rs:12:1: 12:2\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_76432.rs:12:1: 12:2\n+          return;                          // scope 0 at $DIR/issue_76432.rs:12:2: 12:2\n+      }\n+  }\n+  "}]}