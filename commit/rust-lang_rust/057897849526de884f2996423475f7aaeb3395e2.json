{"sha": "057897849526de884f2996423475f7aaeb3395e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Nzg5Nzg0OTUyNmRlODg0ZjI5OTY0MjM0NzVmN2FhZWIzMzk1ZTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-12T22:51:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-12T22:51:11Z"}, "message": "Move phi-node generation into a helper that measures the liveness of each incoming edge. Factorial test now succeeds.", "tree": {"sha": "8503de04000ff54948e84e26a1db46c7216e505d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8503de04000ff54948e84e26a1db46c7216e505d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/057897849526de884f2996423475f7aaeb3395e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/057897849526de884f2996423475f7aaeb3395e2", "html_url": "https://github.com/rust-lang/rust/commit/057897849526de884f2996423475f7aaeb3395e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/057897849526de884f2996423475f7aaeb3395e2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ff0662eaef0af2a7a0173e5da53fe271c217e38", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff0662eaef0af2a7a0173e5da53fe271c217e38", "html_url": "https://github.com/rust-lang/rust/commit/2ff0662eaef0af2a7a0173e5da53fe271c217e38"}], "stats": {"total": 107, "additions": 64, "deletions": 43}, "files": [{"sha": "d1d039869014e4ed9482dd28029189206c49531d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 64, "deletions": 43, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/057897849526de884f2996423475f7aaeb3395e2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/057897849526de884f2996423475f7aaeb3395e2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=057897849526de884f2996423475f7aaeb3395e2", "patch": "@@ -584,18 +584,15 @@ impure fn trans_binary(@block_ctxt cx, ast.binop op,\n             auto rhs_cx = new_sub_block_ctxt(cx, \"rhs\");\n             auto rhs_res = trans_expr(rhs_cx, b);\n \n-            auto next_cx = new_sub_block_ctxt(cx, \"next\");\n-            rhs_res.bcx.build.Br(next_cx.llbb);\n+            auto lhs_false_cx = new_sub_block_ctxt(cx, \"lhs false\");\n+            auto lhs_false_res = res(lhs_false_cx, C_bool(false));\n \n             lhs_res.bcx.build.CondBr(lhs_res.val,\n                                      rhs_cx.llbb,\n-                                     next_cx.llbb);\n-            auto phi = next_cx.build.Phi(T_bool(),\n-                                         vec(lhs_res.val,\n-                                             rhs_res.val),\n-                                         vec(lhs_res.bcx.llbb,\n-                                             rhs_res.bcx.llbb));\n-            ret res(next_cx, phi);\n+                                     lhs_false_cx.llbb);\n+\n+            ret join_results(cx, T_bool(),\n+                             vec(lhs_false_res, rhs_res));\n         }\n \n         case (ast.or) {\n@@ -605,18 +602,15 @@ impure fn trans_binary(@block_ctxt cx, ast.binop op,\n             auto rhs_cx = new_sub_block_ctxt(cx, \"rhs\");\n             auto rhs_res = trans_expr(rhs_cx, b);\n \n-            auto next_cx = new_sub_block_ctxt(cx, \"next\");\n-            rhs_res.bcx.build.Br(next_cx.llbb);\n+            auto lhs_true_cx = new_sub_block_ctxt(cx, \"lhs true\");\n+            auto lhs_true_res = res(lhs_true_cx, C_bool(true));\n \n             lhs_res.bcx.build.CondBr(lhs_res.val,\n-                                     next_cx.llbb,\n+                                     lhs_true_cx.llbb,\n                                      rhs_cx.llbb);\n-            auto phi = next_cx.build.Phi(T_bool(),\n-                                         vec(lhs_res.val,\n-                                             rhs_res.val),\n-                                         vec(lhs_res.bcx.llbb,\n-                                             rhs_res.bcx.llbb));\n-            ret res(next_cx, phi);\n+\n+            ret join_results(cx, T_bool(),\n+                             vec(lhs_true_res, rhs_res));\n         }\n     }\n \n@@ -722,6 +716,48 @@ impure fn trans_binary(@block_ctxt cx, ast.binop op,\n     fail;\n }\n \n+fn join_results(@block_ctxt parent_cx,\n+                TypeRef t,\n+                vec[result] ins)\n+    -> result {\n+\n+    let vec[result] live = vec();\n+    let vec[ValueRef] vals = vec();\n+    let vec[BasicBlockRef] bbs = vec();\n+\n+    for (result r in ins) {\n+        if (! is_terminated(r.bcx)) {\n+            live += r;\n+            vals += r.val;\n+            bbs += r.bcx.llbb;\n+        }\n+    }\n+\n+    alt (_vec.len[result](live)) {\n+        case (0u) {\n+            // No incoming edges are live, so we're in dead-code-land.\n+            // Arbitrarily pick the first dead edge, since the caller\n+            // is just going to propagate it outward.\n+            check (_vec.len[result](ins) >= 1u);\n+            ret ins.(0);\n+        }\n+\n+        case (1u) {\n+            // Only one incoming edge is live, so we just feed that block\n+            // onward.\n+            ret live.(0);\n+        }\n+    }\n+\n+    // We have >1 incoming edges. Make a join block and br+phi them into it.\n+    auto join_cx = new_sub_block_ctxt(parent_cx, \"join\");\n+    for (result r in live) {\n+        r.bcx.build.Br(join_cx.llbb);\n+    }\n+    auto phi = join_cx.build.Phi(t, vals, bbs);\n+    ret res(join_cx, phi);\n+}\n+\n impure fn trans_if(@block_ctxt cx, &ast.expr cond,\n                    &ast.block thn, &option.t[ast.block] els) -> result {\n \n@@ -730,37 +766,22 @@ impure fn trans_if(@block_ctxt cx, &ast.expr cond,\n     auto then_cx = new_sub_block_ctxt(cx, \"then\");\n     auto then_res = trans_block(then_cx, thn);\n \n-    auto next_cx = new_sub_block_ctxt(cx, \"next\");\n-    then_res.bcx.build.Br(next_cx.llbb);\n-    auto phi;\n+    auto else_cx = new_sub_block_ctxt(cx, \"else\");\n+    auto else_res = res(else_cx, C_nil());\n \n     alt (els) {\n         case (some[ast.block](?eblk)) {\n-            auto else_cx = new_sub_block_ctxt(cx, \"else\");\n-            auto else_res = trans_block(else_cx, eblk);\n-            cond_res.bcx.build.CondBr(cond_res.val,\n-                                      then_cx.llbb,\n-                                      else_cx.llbb);\n-            else_res.bcx.build.Br(next_cx.llbb);\n-            phi = next_cx.build.Phi(T_nil(),\n-                                    vec(then_res.val,\n-                                        else_res.val),\n-                                    vec(then_res.bcx.llbb,\n-                                        else_res.bcx.llbb));\n-        }\n-\n-        case (_) {\n-            cond_res.bcx.build.CondBr(cond_res.val,\n-                                      then_cx.llbb,\n-                                      next_cx.llbb);\n-            phi = next_cx.build.Phi(T_nil(),\n-                                    vec(then_res.val, C_nil()),\n-                                    vec(then_res.bcx.llbb,\n-                                        cond_res.bcx.llbb));\n+            else_res = trans_block(else_cx, eblk);\n         }\n     }\n \n-    ret res(next_cx, phi);\n+    cond_res.bcx.build.CondBr(cond_res.val,\n+                              then_res.bcx.llbb,\n+                              else_res.bcx.llbb);\n+\n+    // FIXME: use inferred type when available.\n+    ret join_results(cx, T_nil(),\n+                     vec(then_res, else_res));\n }\n \n impure fn trans_while(@block_ctxt cx, &ast.expr cond,"}]}