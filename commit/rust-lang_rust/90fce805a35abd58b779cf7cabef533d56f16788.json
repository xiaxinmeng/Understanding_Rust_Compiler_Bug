{"sha": "90fce805a35abd58b779cf7cabef533d56f16788", "node_id": "C_kwDOAAsO6NoAKDkwZmNlODA1YTM1YWJkNThiNzc5Y2Y3Y2FiZWY1MzNkNTZmMTY3ODg", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-05-05T15:01:39Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-05-18T09:42:43Z"}, "message": "Add debug tracing to FilePathMapping::map_prefix", "tree": {"sha": "0c48267647bebb0e3fca64ef9688860a3df77821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c48267647bebb0e3fca64ef9688860a3df77821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90fce805a35abd58b779cf7cabef533d56f16788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90fce805a35abd58b779cf7cabef533d56f16788", "html_url": "https://github.com/rust-lang/rust/commit/90fce805a35abd58b779cf7cabef533d56f16788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90fce805a35abd58b779cf7cabef533d56f16788/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77972d2d0134fb597249b3b64dcf9510a790c34e", "url": "https://api.github.com/repos/rust-lang/rust/commits/77972d2d0134fb597249b3b64dcf9510a790c34e", "html_url": "https://github.com/rust-lang/rust/commit/77972d2d0134fb597249b3b64dcf9510a790c34e"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "03e82dde967ad6ba008845c6a4308fc2ab59444c", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/90fce805a35abd58b779cf7cabef533d56f16788/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fce805a35abd58b779cf7cabef533d56f16788/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=90fce805a35abd58b779cf7cabef533d56f16788", "patch": "@@ -1098,28 +1098,43 @@ impl FilePathMapping {\n     /// The return value is the remapped path and a boolean indicating whether\n     /// the path was affected by the mapping.\n     pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {\n-        // NOTE: We are iterating over the mapping entries from last to first\n-        //       because entries specified later on the command line should\n-        //       take precedence.\n-        for &(ref from, ref to) in self.mapping.iter().rev() {\n-            if let Ok(rest) = path.strip_prefix(from) {\n-                let remapped = if rest.as_os_str().is_empty() {\n-                    // This is subtle, joining an empty path onto e.g. `foo/bar` will\n-                    // result in `foo/bar/`, that is, there'll be an additional directory\n-                    // separator at the end. This can lead to duplicated directory separators\n-                    // in remapped paths down the line.\n-                    // So, if we have an exact match, we just return that without a call\n-                    // to `Path::join()`.\n-                    to.clone()\n-                } else {\n-                    to.join(rest)\n-                };\n+        if path.as_os_str().is_empty() {\n+            return (path, false);\n+        }\n \n-                return (remapped, true);\n+        return remap_path_prefix(&self.mapping, path);\n+\n+        #[instrument(level = \"debug\", skip(mapping))]\n+        fn remap_path_prefix(mapping: &[(PathBuf, PathBuf)], path: PathBuf) -> (PathBuf, bool) {\n+            // NOTE: We are iterating over the mapping entries from last to first\n+            //       because entries specified later on the command line should\n+            //       take precedence.\n+            for &(ref from, ref to) in mapping.iter().rev() {\n+                debug!(\"Trying to apply {:?} => {:?}\", from, to);\n+\n+                if let Ok(rest) = path.strip_prefix(from) {\n+                    let remapped = if rest.as_os_str().is_empty() {\n+                        // This is subtle, joining an empty path onto e.g. `foo/bar` will\n+                        // result in `foo/bar/`, that is, there'll be an additional directory\n+                        // separator at the end. This can lead to duplicated directory separators\n+                        // in remapped paths down the line.\n+                        // So, if we have an exact match, we just return that without a call\n+                        // to `Path::join()`.\n+                        to.clone()\n+                    } else {\n+                        to.join(rest)\n+                    };\n+                    debug!(\"Match - remapped {:?} => {:?}\", path, remapped);\n+\n+                    return (remapped, true);\n+                } else {\n+                    debug!(\"No match - prefix {:?} does not match {:?}\", from, path);\n+                }\n             }\n-        }\n \n-        (path, false)\n+            debug!(\"Path {:?} was not remapped\", path);\n+            (path, false)\n+        }\n     }\n \n     fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {"}]}