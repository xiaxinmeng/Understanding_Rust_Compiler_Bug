{"sha": "545b068a7720374a13e04db24e0bef6237822f2a", "node_id": "C_kwDOAAsO6NoAKDU0NWIwNjhhNzcyMDM3NGExM2UwNGRiMjRlMGJlZjYyMzc4MjJmMmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-07T15:09:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-07T15:09:42Z"}, "message": "Merge #10474\n\n10474: feat: Support `let...else` r=jonas-schievink a=jonas-schievink\n\nbors r+\r\n\r\ncloses https://github.com/rust-analyzer/rust-analyzer/issues/10469\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "a3a13e4412eb9402ad0e301bbbde6594c1402872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a13e4412eb9402ad0e301bbbde6594c1402872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/545b068a7720374a13e04db24e0bef6237822f2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXw22CRBK7hj4Ov3rIwAAbQsIAIHiasqyVQdD2gNK5+a4/qjN\nWRbRLgh44948vsktQ5mX8aHr6iilEUHdgnb2hkfhDntR9qrgUOhC8EcCpGaC4X4f\nLLk7UctFwev5rcuBSpBZJVSQ3Qmwk7Symscr1z7LS2QjcfrmfxEYCvxs102sfaH0\ndmE/zLElkLTlRTiFgq3tXZe45u1t5ALTZIlsoX3Wgg8CnxGJ+OYsdYRdMm3/WojA\nZlW8FPxgFQDOv6KlhtqjHGQXDAbBZrLqRm4pNqwSIB+P+oy3UfCYqq0HVdcyku7A\n0AbLKU97weTbCWl8i6lxzgF2Q7OK3WrG02wrHPAsy9Oh32Ld8UH/qStH9qlPglE=\n=nQ15\n-----END PGP SIGNATURE-----\n", "payload": "tree a3a13e4412eb9402ad0e301bbbde6594c1402872\nparent 4675410f07239d46ac636a008b4a9f3d77f41b43\nparent f8acae78955ed27cc569a14ac36c48d56f9cea58\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633619382 +0000\ncommitter GitHub <noreply@github.com> 1633619382 +0000\n\nMerge #10474\n\n10474: feat: Support `let...else` r=jonas-schievink a=jonas-schievink\n\nbors r+\r\n\r\ncloses https://github.com/rust-analyzer/rust-analyzer/issues/10469\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/545b068a7720374a13e04db24e0bef6237822f2a", "html_url": "https://github.com/rust-lang/rust/commit/545b068a7720374a13e04db24e0bef6237822f2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/545b068a7720374a13e04db24e0bef6237822f2a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4675410f07239d46ac636a008b4a9f3d77f41b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/4675410f07239d46ac636a008b4a9f3d77f41b43", "html_url": "https://github.com/rust-lang/rust/commit/4675410f07239d46ac636a008b4a9f3d77f41b43"}, {"sha": "f8acae78955ed27cc569a14ac36c48d56f9cea58", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8acae78955ed27cc569a14ac36c48d56f9cea58", "html_url": "https://github.com/rust-lang/rust/commit/f8acae78955ed27cc569a14ac36c48d56f9cea58"}], "stats": {"total": 170, "additions": 162, "deletions": 8}, "files": [{"sha": "5aba6387f0b7af282fccb1c13077b0ec12f31dc1", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -1761,9 +1761,9 @@ dependencies = [\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.14.6\"\n+version = \"1.14.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fb1cd6666863b2ff36bab1ced85c4b5e651638705f306f3cfad0a367f85ea715\"\n+checksum = \"403c1892ad46cacffb28c73550172999c6c75f70ca9c97bcafc8ce99d6421529\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "31362067612469658c0b3b2b18c7e99d4a53ee1a", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -639,7 +639,16 @@ impl ExprCollector<'_> {\n                 let type_ref =\n                     stmt.ty().map(|it| Interned::new(TypeRef::from_ast(&self.ctx(), it)));\n                 let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n-                self.statements_in_scope.push(Statement::Let { pat, type_ref, initializer });\n+                let else_branch = stmt\n+                    .let_else()\n+                    .and_then(|let_else| let_else.block_expr())\n+                    .map(|block| self.collect_block(block));\n+                self.statements_in_scope.push(Statement::Let {\n+                    pat,\n+                    type_ref,\n+                    initializer,\n+                    else_branch,\n+                });\n             }\n             ast::Stmt::ExprStmt(stmt) => {\n                 if let Some(expr) = stmt.expr() {"}, {"sha": "8a48ad91991ea46a8c3ae305bf9ec1bc5e845888", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -149,11 +149,15 @@ fn compute_block_scopes(\n ) {\n     for stmt in statements {\n         match stmt {\n-            Statement::Let { pat, initializer, .. } => {\n+            Statement::Let { pat, initializer, else_branch, .. } => {\n                 if let Some(expr) = initializer {\n                     scopes.set_scope(*expr, scope);\n                     compute_expr_scopes(*expr, body, scopes, scope);\n                 }\n+                if let Some(expr) = else_branch {\n+                    scopes.set_scope(*expr, scope);\n+                    compute_expr_scopes(*expr, body, scopes, scope);\n+                }\n                 scope = scopes.new_scope(scope);\n                 scopes.add_bindings(body, scope, *pat);\n             }"}, {"sha": "17af48b7bf6ce693a01b3b73219cd16c04de979f", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -208,8 +208,16 @@ pub struct RecordLitField {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Statement {\n-    Let { pat: PatId, type_ref: Option<Interned<TypeRef>>, initializer: Option<ExprId> },\n-    Expr { expr: ExprId, has_semi: bool },\n+    Let {\n+        pat: PatId,\n+        type_ref: Option<Interned<TypeRef>>,\n+        initializer: Option<ExprId>,\n+        else_branch: Option<ExprId>,\n+    },\n+    Expr {\n+        expr: ExprId,\n+        has_semi: bool,\n+    },\n }\n \n impl Expr {"}, {"sha": "ada5717f1a5de96e115d45897feac4a9cea9ba87", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -914,7 +914,7 @@ impl<'a> InferenceContext<'a> {\n     ) -> Ty {\n         for stmt in statements {\n             match stmt {\n-                Statement::Let { pat, type_ref, initializer } => {\n+                Statement::Let { pat, type_ref, initializer, else_branch } => {\n                     let decl_ty = type_ref\n                         .as_ref()\n                         .map(|tr| self.make_ty(tr))\n@@ -931,6 +931,13 @@ impl<'a> InferenceContext<'a> {\n                         }\n                     }\n \n+                    if let Some(expr) = else_branch {\n+                        self.infer_expr_coerce(\n+                            *expr,\n+                            &Expectation::has_type(Ty::new(&Interner, TyKind::Never)),\n+                        );\n+                    }\n+\n                     self.infer_pat(*pat, &ty, BindingMode::default());\n                 }\n                 Statement::Expr { expr, .. } => {"}, {"sha": "8be2b8ec1088df44e63aea3f55a10b1ae2d9ac5d", "filename": "crates/hir_ty/src/tests/never_type.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fnever_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fnever_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fnever_type.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -407,3 +407,39 @@ fn diverging_expression_3_break() {\n         \"]],\n     );\n }\n+\n+#[test]\n+fn let_else_must_diverge() {\n+    check_infer_with_mismatches(\n+        r#\"\n+        fn f() {\n+            let 1 = 2 else {\n+                return;\n+            };\n+        }\n+        \"#,\n+        expect![[r#\"\n+            7..54 '{     ...  }; }': ()\n+            17..18 '1': i32\n+            17..18 '1': i32\n+            21..22 '2': i32\n+            28..51 '{     ...     }': !\n+            38..44 'return': !\n+        \"#]],\n+    );\n+    check_infer_with_mismatches(\n+        r#\"\n+        fn f() {\n+            let 1 = 2 else {};\n+        }\n+        \"#,\n+        expect![[r#\"\n+            7..33 '{     ... {}; }': ()\n+            17..18 '1': i32\n+            17..18 '1': i32\n+            21..22 '2': i32\n+            28..30 '{}': ()\n+            28..30: expected !, got ()\n+        \"#]],\n+    );\n+}"}, {"sha": "54eb96d84e5a4bad52fd5d328830a753c698b299", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -102,6 +102,16 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n             expressions::expr(p);\n         }\n \n+        if p.at(T![else]) {\n+            // test let_else\n+            // fn f() { let Some(x) = opt else { return }; }\n+\n+            let m = p.start();\n+            p.bump(T![else]);\n+            block_expr(p);\n+            m.complete(p, LET_ELSE);\n+        }\n+\n         match with_semi {\n             StmtWithSemi::No => (),\n             StmtWithSemi::Optional => {"}, {"sha": "a9010c0c319571299257527caff3be55d1cb5c3e", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -234,6 +234,7 @@ pub enum SyntaxKind {\n     NAME,\n     NAME_REF,\n     LET_STMT,\n+    LET_ELSE,\n     EXPR_STMT,\n     GENERIC_PARAM_LIST,\n     GENERIC_PARAM,"}, {"sha": "fba5db9a93e0c1e4854924dc7635edcc6a776d61", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -29,7 +29,7 @@ rayon = \"1\"\n expect-test = \"1.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"=1.14.6\"\n+ungrammar = \"=1.14.8\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "15b8371c3eb4db4903a977d87d571eea0cf253f5", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -722,9 +722,19 @@ impl LetStmt {\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn let_else(&self) -> Option<LetElse> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct LetElse {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl LetElse {\n+    pub fn else_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![else]) }\n+    pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ArrayExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -2304,6 +2314,17 @@ impl AstNode for LetStmt {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for LetElse {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LET_ELSE }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for ArrayExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ARRAY_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -4320,6 +4341,11 @@ impl std::fmt::Display for LetStmt {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for LetElse {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for ArrayExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "2344fc59d16139ccc92316f32025b8ecd056b84f", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -198,6 +198,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"NAME\",\n         \"NAME_REF\",\n         \"LET_STMT\",\n+        \"LET_ELSE\",\n         \"EXPR_STMT\",\n         \"GENERIC_PARAM_LIST\",\n         \"GENERIC_PARAM\","}, {"sha": "ed0613a38f9af8d2a0a52b4c7ce803380aa6a1ce", "filename": "crates/syntax/test_data/parser/inline/ok/0194_let_else.rast", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_let_else.rast", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_let_else.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_let_else.rast?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -0,0 +1,51 @@\n+SOURCE_FILE@0..46\n+  FN@0..45\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    PARAM_LIST@4..6\n+      L_PAREN@4..5 \"(\"\n+      R_PAREN@5..6 \")\"\n+    WHITESPACE@6..7 \" \"\n+    BLOCK_EXPR@7..45\n+      STMT_LIST@7..45\n+        L_CURLY@7..8 \"{\"\n+        WHITESPACE@8..9 \" \"\n+        LET_STMT@9..43\n+          LET_KW@9..12 \"let\"\n+          WHITESPACE@12..13 \" \"\n+          TUPLE_STRUCT_PAT@13..20\n+            PATH@13..17\n+              PATH_SEGMENT@13..17\n+                NAME_REF@13..17\n+                  IDENT@13..17 \"Some\"\n+            L_PAREN@17..18 \"(\"\n+            IDENT_PAT@18..19\n+              NAME@18..19\n+                IDENT@18..19 \"x\"\n+            R_PAREN@19..20 \")\"\n+          WHITESPACE@20..21 \" \"\n+          EQ@21..22 \"=\"\n+          WHITESPACE@22..23 \" \"\n+          PATH_EXPR@23..26\n+            PATH@23..26\n+              PATH_SEGMENT@23..26\n+                NAME_REF@23..26\n+                  IDENT@23..26 \"opt\"\n+          WHITESPACE@26..27 \" \"\n+          LET_ELSE@27..42\n+            ELSE_KW@27..31 \"else\"\n+            WHITESPACE@31..32 \" \"\n+            BLOCK_EXPR@32..42\n+              STMT_LIST@32..42\n+                L_CURLY@32..33 \"{\"\n+                WHITESPACE@33..34 \" \"\n+                RETURN_EXPR@34..40\n+                  RETURN_KW@34..40 \"return\"\n+                WHITESPACE@40..41 \" \"\n+                R_CURLY@41..42 \"}\"\n+          SEMICOLON@42..43 \";\"\n+        WHITESPACE@43..44 \" \"\n+        R_CURLY@44..45 \"}\"\n+  WHITESPACE@45..46 \"\\n\""}, {"sha": "8303de06f1e8e38d55973841e7ece30ee28637b6", "filename": "crates/syntax/test_data/parser/inline/ok/0194_let_else.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545b068a7720374a13e04db24e0bef6237822f2a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_let_else.rs?ref=545b068a7720374a13e04db24e0bef6237822f2a", "patch": "@@ -0,0 +1 @@\n+fn f() { let Some(x) = opt else { return }; }"}]}