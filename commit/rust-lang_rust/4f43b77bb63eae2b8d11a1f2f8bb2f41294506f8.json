{"sha": "4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNDNiNzdiYjYzZWFlMmI4ZDExYTFmMmY4YmIyZjQxMjk0NTA2Zjg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-10T07:56:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T07:56:02Z"}, "message": "Rollup merge of #80820 - nagisa:nagisa/dcl-nixos, r=Mark-Simulacrum\n\nSupport `download-ci-llvm` on NixOS\n\nIn particular, the CI built `libLLVM-*.so` needs to have `libz.so`\nRPATHed so that binaries like `llvm-config` work at all.", "tree": {"sha": "a50d40766f2a858a46ebb6a53809ee2776419b2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a50d40766f2a858a46ebb6a53809ee2776419b2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+rMSCRBK7hj4Ov3rIwAAdHIIABwUJVATvpmLtC68kMHDSL8/\nu3QgyZy6OLCKvR5CPWRqPbZFhBQAE3nzkWNnhirbRe2Lr1EdFw1Hv3j66BBtdYS3\ndsf8xNGxsSxsR8s5NxlTaIj98RobD5+UamGGAwznZFnrLvZwGtg7KfEybL4VlzY0\nHkN0HoZYfJmaDrl2sIMERxI0H2uMgv/avxgaxZVo04+VTVSyS1LzUxAKspaG7COo\n6xEQFURKN3cUVCXRtO1EKPg1XA8v2OJNoNqFLtWVarkXtoWKdP9T2BptkYDkGKUG\nkIvbHvIGnm1KUEe8pqzafvilkM9XOnzfFsgHjJM64/T4/hWbmYcw7f9MH7T3oVA=\n=jlMX\n-----END PGP SIGNATURE-----\n", "payload": "tree a50d40766f2a858a46ebb6a53809ee2776419b2c\nparent c2bbd0c6979762ba8d713edf9195d6214e0120e2\nparent 15ade4d5043300b8fc0ac6e555a2998a6a8315b8\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610265362 +0900\ncommitter GitHub <noreply@github.com> 1610265362 +0900\n\nRollup merge of #80820 - nagisa:nagisa/dcl-nixos, r=Mark-Simulacrum\n\nSupport `download-ci-llvm` on NixOS\n\nIn particular, the CI built `libLLVM-*.so` needs to have `libz.so`\nRPATHed so that binaries like `llvm-config` work at all.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8", "html_url": "https://github.com/rust-lang/rust/commit/4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2bbd0c6979762ba8d713edf9195d6214e0120e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bbd0c6979762ba8d713edf9195d6214e0120e2", "html_url": "https://github.com/rust-lang/rust/commit/c2bbd0c6979762ba8d713edf9195d6214e0120e2"}, {"sha": "15ade4d5043300b8fc0ac6e555a2998a6a8315b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ade4d5043300b8fc0ac6e555a2998a6a8315b8", "html_url": "https://github.com/rust-lang/rust/commit/15ade4d5043300b8fc0ac6e555a2998a6a8315b8"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "6d2d7bbbef92c55993167d4d9588e7f05556e92e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=4f43b77bb63eae2b8d11a1f2f8bb2f41294506f8", "patch": "@@ -413,7 +413,7 @@ def download_stage0(self):\n             lib_dir = \"{}/lib\".format(self.bin_root())\n             for lib in os.listdir(lib_dir):\n                 if lib.endswith(\".so\"):\n-                    self.fix_bin_or_dylib(\"{}/{}\".format(lib_dir, lib))\n+                    self.fix_bin_or_dylib(os.path.join(lib_dir, lib), rpath_libz=True)\n             with output(self.rustc_stamp()) as rust_stamp:\n                 rust_stamp.write(self.date)\n \n@@ -451,10 +451,15 @@ def download_stage0(self):\n                 \"{}/src/bootstrap/download-ci-llvm-stamp\".format(top_level),\n             ]).decode(sys.getdefaultencoding()).strip()\n             llvm_assertions = self.get_toml('assertions', 'llvm') == 'true'\n+            llvm_root = self.llvm_root()\n+            llvm_lib = os.path.join(llvm_root, \"lib\")\n             if self.program_out_of_date(self.llvm_stamp(), llvm_sha + str(llvm_assertions)):\n                 self._download_ci_llvm(llvm_sha, llvm_assertions)\n                 for binary in [\"llvm-config\", \"FileCheck\"]:\n-                    self.fix_bin_or_dylib(\"{}/bin/{}\".format(self.llvm_root(), binary))\n+                    self.fix_bin_or_dylib(os.path.join(llvm_root, \"bin\", binary), rpath_libz=True)\n+                for lib in os.listdir(llvm_lib):\n+                    if lib.endswith(\".so\"):\n+                        self.fix_bin_or_dylib(os.path.join(llvm_lib, lib), rpath_libz=True)\n                 with output(self.llvm_stamp()) as llvm_stamp:\n                     llvm_stamp.write(llvm_sha + str(llvm_assertions))\n \n@@ -501,7 +506,7 @@ def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n                 match=\"rust-dev\",\n                 verbose=self.verbose)\n \n-    def fix_bin_or_dylib(self, fname):\n+    def fix_bin_or_dylib(self, fname, rpath_libz=False):\n         \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n         or the RPATH section, to fix the dynamic library search path\n \n@@ -571,20 +576,22 @@ def fix_bin_or_dylib(self, fname):\n             self.nix_deps_dir = nix_deps_dir\n \n         patchelf = \"{}/patchelf/bin/patchelf\".format(nix_deps_dir)\n+        patchelf_args = []\n \n-        if fname.endswith(\".so\"):\n-            # Dynamic library, patch RPATH to point to system dependencies.\n+        if rpath_libz:\n+            # Patch RPATH to add `zlib` dependency that stems from LLVM\n             dylib_deps = [\"zlib\"]\n             rpath_entries = [\n                 # Relative default, all binary and dynamic libraries we ship\n                 # appear to have this (even when `../lib` is redundant).\n                 \"$ORIGIN/../lib\",\n             ] + [\"{}/{}/lib\".format(nix_deps_dir, dep) for dep in dylib_deps]\n-            patchelf_args = [\"--set-rpath\", \":\".join(rpath_entries)]\n-        else:\n+            patchelf_args += [\"--set-rpath\", \":\".join(rpath_entries)]\n+        if not fname.endswith(\".so\"):\n+            # Finally, set the corret .interp for binaries\n             bintools_dir = \"{}/stdenv.cc.bintools\".format(nix_deps_dir)\n             with open(\"{}/nix-support/dynamic-linker\".format(bintools_dir)) as dynamic_linker:\n-                patchelf_args = [\"--set-interpreter\", dynamic_linker.read().rstrip()]\n+                patchelf_args += [\"--set-interpreter\", dynamic_linker.read().rstrip()]\n \n         try:\n             subprocess.check_output([patchelf] + patchelf_args + [fname])"}]}