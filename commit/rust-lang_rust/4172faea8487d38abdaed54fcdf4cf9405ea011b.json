{"sha": "4172faea8487d38abdaed54fcdf4cf9405ea011b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNzJmYWVhODQ4N2QzOGFiZGFlZDU0ZmNkZjRjZjk0MDVlYTAxMWI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-02T19:17:11Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-02T19:17:11Z"}, "message": "libsyntax: add some more explicit copies for vecs_implicitly_copyable)", "tree": {"sha": "7b0a7384b00ea73a0bc73a0987b369c1937755e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b0a7384b00ea73a0bc73a0987b369c1937755e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4172faea8487d38abdaed54fcdf4cf9405ea011b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4172faea8487d38abdaed54fcdf4cf9405ea011b", "html_url": "https://github.com/rust-lang/rust/commit/4172faea8487d38abdaed54fcdf4cf9405ea011b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4172faea8487d38abdaed54fcdf4cf9405ea011b/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afdd0b868a4b94e828ccf7e1f68a2b0017943e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/afdd0b868a4b94e828ccf7e1f68a2b0017943e2c", "html_url": "https://github.com/rust-lang/rust/commit/afdd0b868a4b94e828ccf7e1f68a2b0017943e2c"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "004acd406917614e4cd9691c32c7f4bb5459f2ba", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4172faea8487d38abdaed54fcdf4cf9405ea011b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4172faea8487d38abdaed54fcdf4cf9405ea011b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=4172faea8487d38abdaed54fcdf4cf9405ea011b", "patch": "@@ -140,7 +140,7 @@ pub fn count_names(ms: &[matcher]) -> uint {\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n-pub fn initial_matcher_pos(+ms: ~[matcher], sep: Option<Token>, lo: BytePos)\n+pub fn initial_matcher_pos(+ms: ~[matcher], +sep: Option<Token>, lo: BytePos)\n                         -> ~MatcherPos {\n     let mut match_idx_hi = 0u;\n     for ms.each |elt| {"}, {"sha": "370b838ab419db306457162d30a53ab136a94396", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4172faea8487d38abdaed54fcdf4cf9405ea011b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4172faea8487d38abdaed54fcdf4cf9405ea011b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=4172faea8487d38abdaed54fcdf4cf9405ea011b", "patch": "@@ -32,7 +32,7 @@ pub fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                          arg: ~[ast::token_tree]) -> base::MacResult {\n     // these spans won't matter, anyways\n     fn ms(m: matcher_) -> matcher {\n-        spanned { node: m, span: dummy_sp() }\n+        spanned { node: copy m, span: dummy_sp() }\n     }\n \n     let lhs_nm =  cx.parse_sess().interner.gensym(@~\"lhs\");"}, {"sha": "443c0b40390ce2a3149c475dea0d44dfb8fe0e58", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4172faea8487d38abdaed54fcdf4cf9405ea011b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4172faea8487d38abdaed54fcdf4cf9405ea011b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=4172faea8487d38abdaed54fcdf4cf9405ea011b", "patch": "@@ -85,7 +85,7 @@ pure fn dup_tt_frame(f: @mut TtFrame) -> @mut TtFrame {\n         readme: @mut (copy *f.readme),\n         idx: f.idx,\n         dotdotdoted: f.dotdotdoted,\n-        sep: f.sep,\n+        sep: copy f.sep,\n         up: match f.up {\n             Some(up_frame) => Some(dup_tt_frame(up_frame)),\n             None => None\n@@ -191,7 +191,7 @@ pub fn tt_next_token(r: @mut TtReader) -> TokenAndSpan {\n             r.cur.idx = 0u;\n             r.repeat_idx[r.repeat_idx.len() - 1u] += 1u;\n             match r.cur.sep {\n-              Some(tk) => {\n+              Some(copy tk) => {\n                 r.cur_tok = tk; /* repeat same span, I guess */\n                 return ret_val;\n               }\n@@ -219,7 +219,8 @@ pub fn tt_next_token(r: @mut TtReader) -> TokenAndSpan {\n             return ret_val;\n           }\n           tt_seq(sp, copy tts, copy sep, zerok) => {\n-            match lockstep_iter_size(tt_seq(sp, copy tts, sep, zerok), r) {\n+            let t = tt_seq(sp, copy tts, copy sep, zerok);\n+            match lockstep_iter_size(t, r) {\n               lis_unconstrained => {\n                 r.sp_diag.span_fatal(\n                     sp, /* blame macro writer */\n@@ -246,11 +247,11 @@ pub fn tt_next_token(r: @mut TtReader) -> TokenAndSpan {\n                     r.repeat_len.push(len);\n                     r.repeat_idx.push(0u);\n                     r.cur = @mut TtFrame {\n-                        readme: @mut copy tts,\n+                        readme: @mut tts,\n                         idx: 0u,\n                         dotdotdoted: true,\n                         sep: sep,\n-                        up: option::Some(r.cur)\n+                        up: Some(r.cur)\n                     };\n                 }\n               }"}]}