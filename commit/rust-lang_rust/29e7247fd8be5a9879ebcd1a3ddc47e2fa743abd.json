{"sha": "29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTcyNDdmZDhiZTVhOTg3OWViY2QxYTNkZGM0N2UyZmE3NDNhYmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-30T19:56:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-03T17:32:34Z"}, "message": "rpass: Remove io_error usage", "tree": {"sha": "388ad87fc66561c4927a16393439cb659d642e95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/388ad87fc66561c4927a16393439cb659d642e95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "html_url": "https://github.com/rust-lang/rust/commit/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6132f7f6660c29fe3fc02422b7047246033db84f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6132f7f6660c29fe3fc02422b7047246033db84f", "html_url": "https://github.com/rust-lang/rust/commit/6132f7f6660c29fe3fc02422b7047246033db84f"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "17cd8db9d39197671021097b75b8b1e00c03618c", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "patch": "@@ -43,5 +43,5 @@ fn main() {\n         debug!(\"debug\");\n         info!(\"info\");\n     });\n-    assert_eq!(r.read_to_str(), ~\"info\\n\");\n+    assert_eq!(r.read_to_str().unwrap(), ~\"info\\n\");\n }"}, {"sha": "f3ddc002333ddb765a4bd00016397c408eee01e9", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "patch": "@@ -27,8 +27,7 @@ fn test_destroy_once() {\n     #[cfg(target_os=\"android\")]\n     static PROG: &'static str = \"ls\"; // android don't have echo binary\n \n-    let mut p = run::Process::new(PROG, [], run::ProcessOptions::new())\n-        .expect(format!(\"failed to exec `{}`\", PROG));\n+    let mut p = run::Process::new(PROG, [], run::ProcessOptions::new()).unwrap();\n     p.destroy(); // this shouldn't crash (and nor should the destructor)\n }\n \n@@ -39,12 +38,12 @@ fn test_destroy_twice() {\n     #[cfg(target_os=\"android\")]\n     static PROG: &'static str = \"ls\"; // android don't have echo binary\n \n-    let mut p = run::Process::new(PROG, [], run::ProcessOptions::new())\n-        .expect(format!(\"failed to exec `{}`\", PROG));\n+    let mut p = match run::Process::new(PROG, [], run::ProcessOptions::new()) {\n+        Ok(p) => p,\n+        Err(e) => fail!(\"wut: {}\", e),\n+    };\n     p.destroy(); // this shouldnt crash...\n-    io::io_error::cond.trap(|_| {}).inside(|| {\n-        p.destroy(); // ...and nor should this (and nor should the destructor)\n-    })\n+    p.destroy(); // ...and nor should this (and nor should the destructor)\n }\n \n fn test_destroy_actually_kills(force: bool) {\n@@ -61,14 +60,14 @@ fn test_destroy_actually_kills(force: bool) {\n     #[cfg(unix,not(target_os=\"android\"))]\n     fn process_exists(pid: libc::pid_t) -> bool {\n         let run::ProcessOutput {output, ..} = run::process_output(\"ps\", [~\"-p\", pid.to_str()])\n-            .expect(\"failed to exec `ps`\");\n+            .unwrap();\n         str::from_utf8_owned(output).unwrap().contains(pid.to_str())\n     }\n \n     #[cfg(unix,target_os=\"android\")]\n     fn process_exists(pid: libc::pid_t) -> bool {\n         let run::ProcessOutput {output, ..} = run::process_output(\"/system/bin/ps\", [pid.to_str()])\n-            .expect(\"failed to exec `/system/bin/ps`\");\n+            .unwrap();\n         str::from_utf8_owned(output).unwrap().contains(~\"root\")\n     }\n \n@@ -93,7 +92,7 @@ fn test_destroy_actually_kills(force: bool) {\n \n     // this process will stay alive indefinitely trying to read from stdin\n     let mut p = run::Process::new(BLOCK_COMMAND, [], run::ProcessOptions::new())\n-        .expect(format!(\"failed to exec `{}`\", BLOCK_COMMAND));\n+        .unwrap();\n \n     assert!(process_exists(p.get_id()));\n "}, {"sha": "b66446b0cfe438aa75beed8fc3d5a25ab1002edd", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "patch": "@@ -12,6 +12,7 @@\n \n #[feature(macro_rules)];\n #[deny(warnings)];\n+#[allow(unused_must_use)];\n \n use std::fmt;\n use std::io::MemWriter;\n@@ -22,10 +23,14 @@ struct A;\n struct B;\n \n impl fmt::Signed for A {\n-    fn fmt(_: &A, f: &mut fmt::Formatter) { f.buf.write(\"aloha\".as_bytes()); }\n+    fn fmt(_: &A, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.buf.write(\"aloha\".as_bytes())\n+    }\n }\n impl fmt::Signed for B {\n-    fn fmt(_: &B, f: &mut fmt::Formatter) { f.buf.write(\"adios\".as_bytes()); }\n+    fn fmt(_: &B, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.buf.write(\"adios\".as_bytes())\n+    }\n }\n \n macro_rules! t(($a:expr, $b:expr) => { assert_eq!($a, $b.to_owned()) })\n@@ -286,9 +291,9 @@ fn test_format_args() {\n     let mut buf = MemWriter::new();\n     {\n         let w = &mut buf as &mut io::Writer;\n-        format_args!(|args| { fmt::write(w, args) }, \"{}\", 1);\n-        format_args!(|args| { fmt::write(w, args) }, \"test\");\n-        format_args!(|args| { fmt::write(w, args) }, \"{test}\", test=3);\n+        format_args!(|args| { fmt::write(w, args); }, \"{}\", 1);\n+        format_args!(|args| { fmt::write(w, args); }, \"test\");\n+        format_args!(|args| { fmt::write(w, args); }, \"{test}\", test=3);\n     }\n     let s = str::from_utf8_owned(buf.unwrap()).unwrap();\n     t!(s, \"1test3\");"}, {"sha": "0884db633264e4401654312e3958714226aaf958", "filename": "src/test/run-pass/issue-8398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8398.rs?ref=29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "patch": "@@ -11,7 +11,7 @@\n use std::io;\n \n fn foo(a: &mut io::Writer) {\n-    a.write([])\n+    a.write([]).unwrap();\n }\n \n pub fn main(){}"}, {"sha": "dccdc8ae3ba21652fca1950a6927eeca17f3cb71", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "patch": "@@ -17,10 +17,11 @@ use std::fmt;\n struct Foo(Cell<int>);\n \n impl fmt::Show for Foo {\n-    fn fmt(f: &Foo, _fmt: &mut fmt::Formatter) {\n+    fn fmt(f: &Foo, _fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Foo(ref f) = *f;\n         assert!(f.get() == 0);\n         f.set(1);\n+        Ok(())\n     }\n }\n "}, {"sha": "0e8ca4d99428b7f46546ccab6c997639e1ee8696", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "patch": "@@ -19,8 +19,7 @@ pub fn main() {\n         // Raise a segfault.\n         unsafe { *(0 as *mut int) = 0; }\n     } else {\n-        let status = run::process_status(args[0], [~\"signal\"])\n-            .expect(\"failed to exec `signal`\");\n+        let status = run::process_status(args[0], [~\"signal\"]).unwrap();\n         // Windows does not have signal, so we get exit status 0xC0000028 (STATUS_BAD_STACK).\n         match status {\n             process::ExitSignal(_) if cfg!(unix) => {},"}, {"sha": "7f04da0734d8fa59c555f39a5094b89cb48e6e29", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=29e7247fd8be5a9879ebcd1a3ddc47e2fa743abd", "patch": "@@ -21,8 +21,8 @@ pub fn main() {\n \n     {\n         match File::create(&path) {\n-            None => unreachable!(),\n-            Some(f) => {\n+            Err(..) => unreachable!(),\n+            Ok(f) => {\n                 let mut f = f;\n                 for _ in range(0u, 1000) {\n                     f.write([0]);\n@@ -32,5 +32,5 @@ pub fn main() {\n     }\n \n     assert!(path.exists());\n-    assert_eq!(path.stat().size, 1000);\n+    assert_eq!(path.stat().unwrap().size, 1000);\n }"}]}