{"sha": "80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZTFlZTVhZWVhZGY2YjFiZDVmMjcyYTljOTRmNjdiYTU3ZDYyNDg=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T05:02:23Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T06:49:18Z"}, "message": "Add `ty::BoundConstness`", "tree": {"sha": "4844f812b1a92659034d20418e499909b92f94d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4844f812b1a92659034d20418e499909b92f94d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEoivAACgkQAn35M4hi\nrd3rzQ/8CSyjp2qpqHBFlYisrCO0UXLwlyJ+c5U5aNCEN10kuISpzC4TnERTpRPw\ns3U9tVgjqdwSNd+bqknN1X3i7gaTZzQePoZNbIQUjL+xhKaqC9aqOAjxfKPREydf\nj5o3SdAK5hmZwsDwEZsitUAdAGv8enoLSbj7kmNuEjzb7UUU6UB289jfAOJvRzyj\nusoq/ym8Bat6EMYscUTtS8ohnu5a1O+xB3YWUElEWh7ohyEdx/1lYiBXY34VyZcP\nuWxZmqv19jHaSWJcAccIeu3fByEA9YUsnglzXf+FemEjPDLFvZyPoB6SpWZwd62n\n4LUpwi6aWnGJUe6OSzFNC1uqQrux7XPCIkm0XQab8OHV1CCNkbYq69UaYcRtCLwx\nTHqdsURExEIlIvsni+MrAo4S3avRoN7LylsB7Icl9h+XZa/HKS4iPXiVo1tPKVFG\nae6atun5hW3PNvw6sGBdsjvuAO3lS6sf2IYIlQnxj0C5LOo3rmaXgpiIPe+O9IgR\nBqWhgTp06b9LqCWlU5Tq1n8lhY3tHHi8yjESMiVQP9wGRni8k57BWKDqSjGsqz7U\n18eTOyaHHLszs4z9C8LtAs0Zw+ToV+BDo2zDIoc60hNnvwHZaCkqgJudRFkbhhTZ\ns8RyiI9gfPBRSl0CHR4lTyANdnMmQvTiHrjeq0Sr3FRR4g3Xf+o=\n=f3yd\n-----END PGP SIGNATURE-----", "payload": "tree 4844f812b1a92659034d20418e499909b92f94d6\nparent c75aeaac0bb2af593b9819cfeae6d518617d48cc\nauthor Deadbeef <ent3rm4n@gmail.com> 1630040543 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1630046958 +0000\n\nAdd `ty::BoundConstness`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "html_url": "https://github.com/rust-lang/rust/commit/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75aeaac0bb2af593b9819cfeae6d518617d48cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75aeaac0bb2af593b9819cfeae6d518617d48cc", "html_url": "https://github.com/rust-lang/rust/commit/c75aeaac0bb2af593b9819cfeae6d518617d48cc"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "676cb7fe41d979c2525208ee60294654b92fa94f", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -17,7 +17,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::Constness;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n@@ -497,7 +496,7 @@ pub enum ImplSource<'tcx, N> {\n     /// for some type parameter. The `Vec<N>` represents the\n     /// obligations incurred from normalizing the where-clause (if\n     /// any).\n-    Param(Vec<N>, Constness),\n+    Param(Vec<N>, ty::BoundConstness),\n \n     /// Virtual calls through an object.\n     Object(ImplSourceObjectData<'tcx, N>),"}, {"sha": "796ca650bdd77f55bd1f7c6df12175c39a300904", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -33,7 +33,7 @@ impl<T> ExpectedFound<T> {\n #[derive(Clone, Debug, TypeFoldable)]\n pub enum TypeError<'tcx> {\n     Mismatch,\n-    ConstnessMismatch(ExpectedFound<hir::Constness>),\n+    ConstnessMismatch(ExpectedFound<ty::BoundConstness>),\n     UnsafetyMismatch(ExpectedFound<hir::Unsafety>),\n     AbiMismatch(ExpectedFound<abi::Abi>),\n     Mutability,\n@@ -102,7 +102,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             CyclicConst(_) => write!(f, \"encountered a self-referencing constant\"),\n             Mismatch => write!(f, \"types differ\"),\n             ConstnessMismatch(values) => {\n-                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+                write!(f, \"expected {} bound, found {} bound\", values.expected, values.found)\n             }\n             UnsafetyMismatch(values) => {\n                 write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)"}, {"sha": "8aa27d4ca53e3fe21c3c0ff6c5273bc1927c839b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_INDEX};\n-use rustc_hir::{Constness, Node};\n+use rustc_hir::Node;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n@@ -181,6 +181,25 @@ pub enum Visibility {\n     Invisible,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]\n+pub enum BoundConstness {\n+    /// `T: Trait`\n+    NotConst,\n+    /// `T: ~const Trait`\n+    ///\n+    /// Requires resolving to const only when we are in a const context.\n+    ConstIfConst,\n+}\n+\n+impl fmt::Display for BoundConstness {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::NotConst => f.write_str(\"normal\"),\n+            Self::ConstIfConst => f.write_str(\"`~const`\"),\n+        }\n+    }\n+}\n+\n #[derive(\n     Clone,\n     Debug,\n@@ -628,9 +647,7 @@ impl<'tcx> Predicate<'tcx> {\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>,\n \n-    /// A trait predicate will have `Constness::Const` if it originates\n-    /// from a bound marked with `~const`.\n-    pub constness: hir::Constness,\n+    pub constness: BoundConstness,\n }\n \n pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n@@ -1299,26 +1316,26 @@ impl<'tcx> ParamEnv<'tcx> {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n pub struct ConstnessAnd<T> {\n-    pub constness: Constness,\n+    pub constness: BoundConstness,\n     pub value: T,\n }\n \n // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that\n // the constness of trait bounds is being propagated correctly.\n pub trait WithConstness: Sized {\n     #[inline]\n-    fn with_constness(self, constness: Constness) -> ConstnessAnd<Self> {\n+    fn with_constness(self, constness: BoundConstness) -> ConstnessAnd<Self> {\n         ConstnessAnd { constness, value: self }\n     }\n \n     #[inline]\n-    fn with_const(self) -> ConstnessAnd<Self> {\n-        self.with_constness(Constness::Const)\n+    fn with_const_if_const(self) -> ConstnessAnd<Self> {\n+        self.with_constness(BoundConstness::ConstIfConst)\n     }\n \n     #[inline]\n     fn without_const(self) -> ConstnessAnd<Self> {\n-        self.with_constness(Constness::NotConst)\n+        self.with_constness(BoundConstness::NotConst)\n     }\n }\n "}, {"sha": "44981f171d50a2a9b53aec7de2474d4d90795b78", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -200,12 +200,12 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n     }\n }\n \n-impl<'tcx> Relate<'tcx> for ast::Constness {\n+impl<'tcx> Relate<'tcx> for ty::BoundConstness {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n-        a: ast::Constness,\n-        b: ast::Constness,\n-    ) -> RelateResult<'tcx, ast::Constness> {\n+        a: ty::BoundConstness,\n+        b: ty::BoundConstness,\n+    ) -> RelateResult<'tcx, ty::BoundConstness> {\n         if a != b {\n             Err(TypeError::ConstnessMismatch(expected_found(relation, a, b)))\n         } else {"}, {"sha": "89ad99d9f0794f6d9f7805a4d7c96bd86dbdf7c5", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -8,7 +8,6 @@ use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n-use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -155,8 +154,8 @@ impl fmt::Debug for ty::ParamConst {\n \n impl fmt::Debug for ty::TraitPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if let hir::Constness::Const = self.constness {\n-            write!(f, \"const \")?;\n+        if let ty::BoundConstness::ConstIfConst = self.constness {\n+            write!(f, \"~const \")?;\n         }\n         write!(f, \"TraitPredicate({:?})\", self.trait_ref)\n     }\n@@ -241,6 +240,7 @@ TrivialTypeFoldableAndLiftImpls! {\n     crate::traits::Reveal,\n     crate::ty::adjustment::AutoBorrowMutability,\n     crate::ty::AdtKind,\n+    crate::ty::BoundConstness,\n     // Including `BoundRegionKind` is a *bit* dubious, but direct\n     // references to bound region appear in `ty::Error`, and aren't\n     // really meant to be folded. In general, we can only fold a fully"}, {"sha": "65dd61b63295cf2eef68df4c1a982057a952eb93", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -878,7 +878,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n         self.map_bound(|trait_ref| ty::TraitPredicate {\n             trait_ref,\n-            constness: hir::Constness::NotConst,\n+            constness: ty::BoundConstness::NotConst,\n         })\n     }\n }"}, {"sha": "b501716a899752b41db2117da612e6ada703ff34", "filename": "compiler/rustc_mir/src/borrow_check/type_check/canonical.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fcanonical.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -1,6 +1,5 @@\n use std::fmt;\n \n-use rustc_hir as hir;\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::mir::ConstraintCategory;\n@@ -88,7 +87,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.prove_predicates(\n             Some(ty::PredicateKind::Trait(ty::TraitPredicate {\n                 trait_ref,\n-                constness: hir::Constness::NotConst,\n+                constness: ty::BoundConstness::NotConst,\n             })),\n             locations,\n             category,"}, {"sha": "944b5ca898603e78f1b884948a1c72d9099f268d", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -821,7 +821,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                         param_env,\n                         Binder::dummy(TraitPredicate {\n                             trait_ref,\n-                            constness: hir::Constness::Const,\n+                            constness: ty::BoundConstness::ConstIfConst,\n                         }),\n                     );\n \n@@ -831,7 +831,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     });\n \n                     match implsrc {\n-                        Ok(Some(ImplSource::Param(_, hir::Constness::Const))) => {\n+                        Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => {\n                             debug!(\n                                 \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n                                  trait_ref, param_env"}, {"sha": "622c9edc4345035b2af384334f8109d424489ac8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -285,7 +285,7 @@ impl AutoTraitFinder<'tcx> {\n                 def_id: trait_did,\n                 substs: infcx.tcx.mk_substs_trait(ty, &[]),\n             },\n-            constness: hir::Constness::NotConst,\n+            constness: ty::BoundConstness::NotConst,\n         }));\n \n         let computed_preds = param_env.caller_bounds().iter();"}, {"sha": "cec07281d2abd9b1b27fb31ad040a549d276b06e", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -778,7 +778,7 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot(\n     let obligation = Obligation::new(\n         ObligationCause::dummy(),\n         ty::ParamEnv::reveal_all(),\n-        ty::Binder::dummy(ty::TraitPredicate { trait_ref, constness: hir::Constness::NotConst }),\n+        ty::Binder::dummy(ty::TraitPredicate { trait_ref, constness: ty::BoundConstness::NotConst }),\n     );\n \n     let implsrc = tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "6fae8173985be82c233b0ce04dcac77e09b7e55c", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -8,7 +8,6 @@\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::Constness;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n@@ -75,7 +74,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ProjectionCandidate(idx) => {\n                 let obligations = self.confirm_projection_candidate(obligation, idx)?;\n                 // FIXME(jschievink): constness\n-                Ok(ImplSource::Param(obligations, Constness::NotConst))\n+                Ok(ImplSource::Param(obligations, ty::BoundConstness::NotConst))\n             }\n \n             ObjectCandidate(idx) => {\n@@ -113,7 +112,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // This indicates something like `Trait + Send: Send`. In this case, we know that\n                 // this holds because that's what the object type is telling us, and there's really\n                 // no additional obligations to prove and no types in particular to unify, etc.\n-                Ok(ImplSource::Param(Vec::new(), Constness::NotConst))\n+                Ok(ImplSource::Param(Vec::new(), ty::BoundConstness::NotConst))\n             }\n \n             BuiltinUnsizeCandidate => {"}, {"sha": "40e413847e0373ea69d29762717f15a19f98689f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -32,7 +32,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::Constness;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n@@ -130,8 +129,8 @@ pub struct SelectionContext<'cx, 'tcx> {\n     /// and a negative impl\n     allow_negative_impls: bool,\n \n-    /// Do we only want const impls when we have a const trait predicate?\n-    const_impls_required: bool,\n+    /// Are we in a const context that needs `~const` bounds to be const?\n+    is_in_const_context: bool,\n \n     /// The mode that trait queries run in, which informs our error handling\n     /// policy. In essence, canonicalized queries need their errors propagated\n@@ -224,7 +223,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            const_impls_required: false,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -236,7 +235,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: true,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            const_impls_required: false,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -252,7 +251,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls,\n-            const_impls_required: false,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -268,7 +267,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            const_impls_required: false,\n+            is_in_const_context: false,\n             query_mode,\n         }\n     }\n@@ -283,7 +282,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n-            const_impls_required: matches!(constness, hir::Constness::Const),\n+            is_in_const_context: matches!(constness, hir::Constness::Const),\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -316,14 +315,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n+    /// Returns `true` if the trait predicate is considerd `const` to this selection context.\n+    pub fn is_trait_predicate_const(&self, pred: ty::TraitPredicate<'_>) -> bool {\n+        match pred.constness {\n+            ty::BoundConstness::ConstIfConst if self.is_in_const_context => true,\n+            _ => false\n+        }\n+    }\n+\n     /// Returns `true` if the predicate is considered `const` to\n     /// this selection context.\n     pub fn is_predicate_const(&self, pred: ty::Predicate<'_>) -> bool {\n         match pred.kind().skip_binder() {\n-            ty::PredicateKind::Trait(ty::TraitPredicate {\n-                constness: hir::Constness::Const,\n-                ..\n-            }) if self.const_impls_required => true,\n+            ty::PredicateKind::Trait(pred) => self.is_trait_predicate_const(pred),\n             _ => false,\n         }\n     }\n@@ -1074,8 +1078,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n         let tcx = self.tcx();\n         // Respect const trait obligations\n-        if self.const_impls_required {\n-            if let hir::Constness::Const = obligation.predicate.skip_binder().constness {\n+        if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n                 if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n                     != tcx.lang_items().sized_trait()\n                 // const Sized bounds are skipped\n@@ -1086,7 +1089,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n                         // const param\n                         ParamCandidate(ty::ConstnessAnd {\n-                            constness: hir::Constness::Const,\n+                            constness: ty::BoundConstness::ConstIfConst,\n                             ..\n                         }) => {}\n                         // auto trait impl\n@@ -1100,7 +1103,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         }\n                     }\n                 }\n-            }\n         }\n         // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n         if let ImplCandidate(def_id) = candidate {\n@@ -1495,7 +1497,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // probably best characterized as a \"hack\", since we might prefer to just do our\n                     // best to *not* create essentially duplicate candidates in the first place.\n                     other.value.bound_vars().len() <= victim.value.bound_vars().len()\n-                } else if other.value == victim.value && victim.constness == Constness::NotConst {\n+                } else if other.value == victim.value && victim.constness == ty::BoundConstness::NotConst {\n                     // Drop otherwise equivalent non-const candidates in favor of const candidates.\n                     true\n                 } else {"}, {"sha": "059e0cadd190cf649cf092fe4a291e48e6ebca11", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{Constness, GenericArg, GenericArgs};\n+use rustc_hir::{GenericArg, GenericArgs};\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, Ty, TyCtxt, TypeFoldable};\n@@ -47,8 +47,6 @@ pub trait AstConv<'tcx> {\n \n     fn item_def_id(&self) -> Option<DefId>;\n \n-    fn default_constness_for_trait_bounds(&self) -> Constness;\n-\n     /// Returns predicates in scope of the form `X: Foo<T>`, where `X`\n     /// is a type parameter `X` with the given id `def_id` and T\n     /// matches `assoc_name`. This is a subset of the full set of\n@@ -724,7 +722,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         trait_ref: &hir::TraitRef<'_>,\n         span: Span,\n-        constness: Constness,\n+        constness: ty::BoundConstness,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n@@ -795,7 +793,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let bound_vars = tcx.late_bound_vars(hir_id);\n         let poly_trait_ref =\n             ty::Binder::bind_with_vars(ty::TraitRef::new(trait_def_id, substs), bound_vars);\n-        bounds.trait_bounds.push((poly_trait_ref, span, Constness::NotConst));\n+        bounds.trait_bounds.push((poly_trait_ref, span, ty::BoundConstness::NotConst));\n \n         let mut dup_bindings = FxHashMap::default();\n         for binding in assoc_bindings {\n@@ -920,14 +918,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         bounds: &mut Bounds<'tcx>,\n         bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n     ) {\n-        let constness = self.default_constness_for_trait_bounds();\n         for ast_bound in ast_bounds {\n             match *ast_bound {\n                 hir::GenericBound::Trait(ref b, hir::TraitBoundModifier::None) => {\n                     self.instantiate_poly_trait_ref(\n                         &b.trait_ref,\n                         b.span,\n-                        Constness::NotConst,\n+                        ty::BoundConstness::NotConst,\n                         param_ty,\n                         bounds,\n                         false,\n@@ -937,7 +934,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.instantiate_poly_trait_ref(\n                         &b.trait_ref,\n                         b.span,\n-                        constness,\n+                        ty::BoundConstness::ConstIfConst,\n                         param_ty,\n                         bounds,\n                         false,\n@@ -1251,7 +1248,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             } = self.instantiate_poly_trait_ref(\n                 &trait_bound.trait_ref,\n                 trait_bound.span,\n-                Constness::NotConst,\n+                ty::BoundConstness::NotConst,\n                 dummy_self,\n                 &mut bounds,\n                 false,\n@@ -1330,7 +1327,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .filter(|(trait_ref, _, _)| !tcx.trait_is_auto(trait_ref.def_id()));\n \n         for (base_trait_ref, span, constness) in regular_traits_refs_spans {\n-            assert_eq!(constness, Constness::NotConst);\n+            assert_eq!(constness, ty::BoundConstness::NotConst);\n \n             for obligation in traits::elaborate_trait_ref(tcx, base_trait_ref) {\n                 debug!("}, {"sha": "24474e163b9daf23586c3d24e2efb063f652c596", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -1,7 +1,6 @@\n //! Bounds are restrictions applied to some types after they've been converted into the\n //! `ty` form from the HIR.\n \n-use rustc_hir::Constness;\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::Span;\n \n@@ -30,7 +29,7 @@ pub struct Bounds<'tcx> {\n \n     /// A list of trait bounds. So if you had `T: Debug` this would be\n     /// `T: Debug`. Note that the self-type is explicit here.\n-    pub trait_bounds: Vec<(ty::PolyTraitRef<'tcx>, Span, Constness)>,\n+    pub trait_bounds: Vec<(ty::PolyTraitRef<'tcx>, Span, ty::BoundConstness)>,\n \n     /// A list of projection equality bounds. So if you had `T:\n     /// Iterator<Item = u32>` this would include `<T as"}, {"sha": "9c70d2cb365b2714ff563cca9402aa7ff2c7b44d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -180,10 +180,6 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         None\n     }\n \n-    fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        self.tcx.hir().get(self.body_id).constness_for_typeck()\n-    }\n-\n     fn get_type_parameter_bounds(\n         &self,\n         _: Span,"}, {"sha": "f0f7f15a0a6cb6162e95502506281456e20a48c5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -365,10 +365,6 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         Some(self.item_def_id)\n     }\n \n-    fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        self.node().constness_for_typeck()\n-    }\n-\n     fn get_type_parameter_bounds(\n         &self,\n         span: Span,\n@@ -664,7 +660,6 @@ impl ItemCtxt<'tcx> {\n         only_self_bounds: OnlySelfBounds,\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-        let constness = self.default_constness_for_trait_bounds();\n         let from_ty_params = ast_generics\n             .params\n             .iter()\n@@ -677,7 +672,7 @@ impl ItemCtxt<'tcx> {\n                 Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n                 None => true,\n             })\n-            .flat_map(|b| predicates_from_bound(self, ty, b, constness));\n+            .flat_map(|b| predicates_from_bound(self, ty, b));\n \n         let from_where_clauses = ast_generics\n             .where_clause\n@@ -703,7 +698,7 @@ impl ItemCtxt<'tcx> {\n                     })\n                     .filter_map(move |b| bt.map(|bt| (bt, b)))\n             })\n-            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b, constness));\n+            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b));\n \n         from_ty_params.chain(from_where_clauses).collect()\n     }\n@@ -2031,7 +2026,6 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     let mut is_default_impl_trait = None;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n-    let constness = icx.default_constness_for_trait_bounds();\n \n     const NO_GENERICS: &hir::Generics<'_> = &hir::Generics::empty();\n \n@@ -2227,8 +2221,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     match bound {\n                         hir::GenericBound::Trait(poly_trait_ref, modifier) => {\n                             let constness = match modifier {\n-                                hir::TraitBoundModifier::None => hir::Constness::NotConst,\n-                                hir::TraitBoundModifier::MaybeConst => constness,\n+                                hir::TraitBoundModifier::None => ty::BoundConstness::NotConst,\n+                                hir::TraitBoundModifier::MaybeConst => ty::BoundConstness::ConstIfConst,\n                                 // We ignore `where T: ?Sized`, it is already part of\n                                 // type parameter `T`.\n                                 hir::TraitBoundModifier::Maybe => continue,\n@@ -2491,14 +2485,13 @@ fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx>,\n     param_ty: Ty<'tcx>,\n     bound: &'tcx hir::GenericBound<'tcx>,\n-    constness: hir::Constness,\n ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     match *bound {\n         hir::GenericBound::Trait(ref tr, modifier) => {\n             let constness = match modifier {\n                 hir::TraitBoundModifier::Maybe => return vec![],\n-                hir::TraitBoundModifier::MaybeConst => constness,\n-                hir::TraitBoundModifier::None => hir::Constness::NotConst,\n+                hir::TraitBoundModifier::MaybeConst => ty::BoundConstness::ConstIfConst,\n+                hir::TraitBoundModifier::None => ty::BoundConstness::NotConst,\n             };\n \n             let mut bounds = Bounds::default();"}, {"sha": "8ecd6034ad6951c1d7dd8a5908eb896c92169e2e", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -68,7 +68,6 @@\n use crate::constrained_generic_params as cgp;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n@@ -368,7 +367,7 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n         // items.\n         ty::PredicateKind::Trait(ty::TraitPredicate {\n             trait_ref,\n-            constness: hir::Constness::NotConst,\n+            constness: ty::BoundConstness::NotConst,\n         }) => {\n             if !matches!(\n                 trait_predicate_kind(tcx, predicate),\n@@ -399,7 +398,7 @@ fn trait_predicate_kind<'tcx>(\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Trait(ty::TraitPredicate {\n             trait_ref,\n-            constness: hir::Constness::NotConst,\n+            constness: ty::BoundConstness::NotConst,\n         }) => Some(tcx.trait_def(trait_ref.def_id).specialization_kind),\n         ty::PredicateKind::Trait(_)\n         | ty::PredicateKind::RegionOutlives(_)"}, {"sha": "749f681e92ed174750f70420ff063b70ccb10a41", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=80e1ee5aeeadf6b1bd5f272a9c94f67ba57d6248", "patch": "@@ -548,7 +548,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         &item_cx,\n         hir_trait,\n         DUMMY_SP,\n-        hir::Constness::NotConst,\n+        ty::BoundConstness::NotConst,\n         self_ty,\n         &mut bounds,\n         true,"}]}