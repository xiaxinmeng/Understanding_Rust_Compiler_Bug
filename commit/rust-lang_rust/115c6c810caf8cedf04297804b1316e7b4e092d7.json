{"sha": "115c6c810caf8cedf04297804b1316e7b4e092d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNWM2YzgxMGNhZjhjZWRmMDQyOTc4MDRiMTMxNmU3YjRlMDkyZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-28T19:27:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-28T19:27:27Z"}, "message": "Auto merge of #33217 - aochagavia:fileloader, r=nrc\n\nrustc_driver: Allow running the compiler with a FileLoader\n\ncc @nrc. I chose to implement this in such a way that it doesn't break anything. Please let me know if you want me to change anything.", "tree": {"sha": "34edabf51b1df601461f85839784009635a92f1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34edabf51b1df601461f85839784009635a92f1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/115c6c810caf8cedf04297804b1316e7b4e092d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/115c6c810caf8cedf04297804b1316e7b4e092d7", "html_url": "https://github.com/rust-lang/rust/commit/115c6c810caf8cedf04297804b1316e7b4e092d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/115c6c810caf8cedf04297804b1316e7b4e092d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02acf0917f88cf7896d663d3b2b16ade7fa0e64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/02acf0917f88cf7896d663d3b2b16ade7fa0e64f", "html_url": "https://github.com/rust-lang/rust/commit/02acf0917f88cf7896d663d3b2b16ade7fa0e64f"}, {"sha": "6c50c8877f9eb3cc57cfcb491614f489d82a3af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c50c8877f9eb3cc57cfcb491614f489d82a3af8", "html_url": "https://github.com/rust-lang/rust/commit/6c50c8877f9eb3cc57cfcb491614f489d82a3af8"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "5b78e4de18b576dc669fdb25ff0b1f820a76b539", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/115c6c810caf8cedf04297804b1316e7b4e092d7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/115c6c810caf8cedf04297804b1316e7b4e092d7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=115c6c810caf8cedf04297804b1316e7b4e092d7", "patch": "@@ -408,6 +408,19 @@ pub fn build_session(sopts: config::Options,\n                      registry: diagnostics::registry::Registry,\n                      cstore: Rc<for<'a> CrateStore<'a>>)\n                      -> Session {\n+    build_session_with_codemap(sopts,\n+                              local_crate_source_file,\n+                              registry,\n+                              cstore,\n+                              Rc::new(codemap::CodeMap::new()))\n+}\n+\n+pub fn build_session_with_codemap(sopts: config::Options,\n+                                  local_crate_source_file: Option<PathBuf>,\n+                                  registry: diagnostics::registry::Registry,\n+                                  cstore: Rc<for<'a> CrateStore<'a>>,\n+                                  codemap: Rc<codemap::CodeMap>)\n+                                  -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n     // later via the source code.\n@@ -419,7 +432,6 @@ pub fn build_session(sopts: config::Options,\n         .unwrap_or(true);\n     let treat_err_as_bug = sopts.treat_err_as_bug;\n \n-    let codemap = Rc::new(codemap::CodeMap::new());\n     let emitter: Box<Emitter> = match sopts.error_format {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(registry), codemap.clone()))"}, {"sha": "666432819302ec8ed85e81011659a7e4e62e2828", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/115c6c810caf8cedf04297804b1316e7b4e092d7/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/115c6c810caf8cedf04297804b1316e7b4e092d7/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=115c6c810caf8cedf04297804b1316e7b4e092d7", "patch": "@@ -66,7 +66,7 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_trans::back::link;\n-use rustc::session::{config, Session, build_session, CompileResult};\n+use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n use rustc::session::config::{get_unstable_features_setting, nightly_options};\n use rustc::middle::cstore::CrateStore;\n@@ -91,13 +91,11 @@ use std::thread;\n \n use rustc::session::early_error;\n \n-use syntax::ast;\n-use syntax::parse::{self, PResult};\n-use syntax::errors;\n+use syntax::{ast, errors, diagnostics};\n+use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::errors::emitter::Emitter;\n-use syntax::diagnostics;\n-use syntax::parse::token;\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n+use syntax::parse::{self, PResult, token};\n \n #[cfg(test)]\n pub mod test;\n@@ -148,11 +146,20 @@ pub fn run(args: Vec<String>) -> isize {\n     0\n }\n \n-// Parse args and run the compiler. This is the primary entry point for rustc.\n-// See comments on CompilerCalls below for details about the callbacks argument.\n pub fn run_compiler<'a>(args: &[String],\n                         callbacks: &mut CompilerCalls<'a>)\n                         -> (CompileResult, Option<Session>) {\n+    run_compiler_with_file_loader(args, callbacks, box RealFileLoader)\n+}\n+\n+// Parse args and run the compiler. This is the primary entry point for rustc.\n+// See comments on CompilerCalls below for details about the callbacks argument.\n+// The FileLoader provides a way to load files from sources other than the file system.\n+pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n+                                            callbacks: &mut CompilerCalls<'a>,\n+                                            loader: Box<L>)\n+                                            -> (CompileResult, Option<Session>)\n+    where L: FileLoader + 'static {\n     macro_rules! do_or_return {($expr: expr, $sess: expr) => {\n         match $expr {\n             Compilation::Stop => return (Ok(()), $sess),\n@@ -189,7 +196,12 @@ pub fn run_compiler<'a>(args: &[String],\n     };\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let sess = build_session(sopts, input_file_path, descriptions, cstore.clone());\n+    let codemap = Rc::new(CodeMap::with_file_loader(loader));\n+    let sess = session::build_session_with_codemap(sopts,\n+                                                   input_file_path,\n+                                                   descriptions,\n+                                                   cstore.clone(),\n+                                                   codemap);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let mut cfg = config::build_configuration(&sess);\n     target_features::add_configuration(&mut cfg, &sess);"}]}