{"sha": "ee5404c69ecd5ea1500bd14b854a2b08d1196d21", "node_id": "C_kwDOAAsO6NoAKGVlNTQwNGM2OWVjZDVlYTE1MDBiZDE0Yjg1NGEyYjA4ZDExOTZkMjE", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-09T14:01:07Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-13T17:17:08Z"}, "message": "Add additional options to `x setup`", "tree": {"sha": "36ab21691f6be3f3a1590871d259470672230add", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36ab21691f6be3f3a1590871d259470672230add"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee5404c69ecd5ea1500bd14b854a2b08d1196d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5404c69ecd5ea1500bd14b854a2b08d1196d21", "html_url": "https://github.com/rust-lang/rust/commit/ee5404c69ecd5ea1500bd14b854a2b08d1196d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee5404c69ecd5ea1500bd14b854a2b08d1196d21/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c40919b7a75f93ed7ef040361e82c656d246d41e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40919b7a75f93ed7ef040361e82c656d246d41e", "html_url": "https://github.com/rust-lang/rust/commit/c40919b7a75f93ed7ef040361e82c656d246d41e"}], "stats": {"total": 135, "additions": 114, "deletions": 21}, "files": [{"sha": "98998bfe5f28ecf019e02bb6bf798650f75a6c17", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5404c69ecd5ea1500bd14b854a2b08d1196d21/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5404c69ecd5ea1500bd14b854a2b08d1196d21/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ee5404c69ecd5ea1500bd14b854a2b08d1196d21", "patch": "@@ -793,7 +793,7 @@ impl<'a> Builder<'a> {\n                 run::CollectLicenseMetadata,\n                 run::GenerateCopyright,\n             ),\n-            Kind::Setup => describe!(setup::Profile),\n+            Kind::Setup => describe!(setup::Profile, setup::Hook, setup::Link, setup::Vscode),\n             Kind::Clean => describe!(clean::CleanAll, clean::Rustc, clean::Std),\n             // special-cased in Build::build()\n             Kind::Format => vec![],"}, {"sha": "30d96dd2d28f9cd12329f6ef560fe80ebecc52a1", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee5404c69ecd5ea1500bd14b854a2b08d1196d21/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5404c69ecd5ea1500bd14b854a2b08d1196d21/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=ee5404c69ecd5ea1500bd14b854a2b08d1196d21", "patch": "@@ -542,7 +542,8 @@ Arguments:\n             Kind::Setup => {\n                 subcommand_help.push_str(&format!(\n                     \"\\n\n-x.py setup creates a `config.toml` which changes the defaults for x.py itself.\n+x.py setup creates a `config.toml` which changes the defaults for x.py itself,\n+as well as setting up a git pre-push hook, VS code config and toolchain link.\n \n Arguments:\n     This subcommand accepts a 'profile' to use for builds. For example:\n@@ -552,7 +553,13 @@ Arguments:\n     The profile is optional and you will be prompted interactively if it is not given.\n     The following profiles are available:\n \n-{}\",\n+{}\n+\n+    To only set up the git hook, VS code or toolchain link, you may use\n+        ./x.py setup hook\n+        ./x.py setup vscode\n+        ./x.py setup link\n+\",\n                     Profile::all_for_help(\"        \").trim_end()\n                 ));\n             }\n@@ -625,7 +632,7 @@ Arguments:\n             }\n             Kind::Setup => {\n                 let profile = if paths.len() > 1 {\n-                    eprintln!(\"\\nerror: At most one profile can be passed to setup\\n\");\n+                    eprintln!(\"\\nerror: At most one option can be passed to setup\\n\");\n                     usage(1, &opts, verbose, &subcommand_help)\n                 } else if let Some(path) = paths.pop() {\n                     let profile_string = t!(path.into_os_string().into_string().map_err("}, {"sha": "28ae6e757895ae8291071cccbd9203175f518a36", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 103, "deletions": 17, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/ee5404c69ecd5ea1500bd14b854a2b08d1196d21/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5404c69ecd5ea1500bd14b854a2b08d1196d21/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=ee5404c69ecd5ea1500bd14b854a2b08d1196d21", "patch": "@@ -21,6 +21,7 @@ pub enum Profile {\n     Library,\n     Tools,\n     User,\n+    None,\n }\n \n /// A list of historical hashes of `src/etc/vscode_settings.json`.\n@@ -40,7 +41,7 @@ impl Profile {\n     pub fn all() -> impl Iterator<Item = Self> {\n         use Profile::*;\n         // N.B. these are ordered by how they are displayed, not alphabetically\n-        [Library, Compiler, Codegen, Tools, User].iter().copied()\n+        [Library, Compiler, Codegen, Tools, User, None].iter().copied()\n     }\n \n     pub fn purpose(&self) -> String {\n@@ -51,6 +52,7 @@ impl Profile {\n             Codegen => \"Contribute to the compiler, and also modify LLVM or codegen\",\n             Tools => \"Contribute to tools which depend on the compiler, but do not modify it directly (e.g. rustdoc, clippy, miri)\",\n             User => \"Install Rust from source\",\n+            None => \"Do not modify `config.toml`\"\n         }\n         .to_string()\n     }\n@@ -70,6 +72,7 @@ impl Profile {\n             Profile::Library => \"library\",\n             Profile::Tools => \"tools\",\n             Profile::User => \"user\",\n+            Profile::None => \"none\",\n         }\n     }\n }\n@@ -86,6 +89,7 @@ impl FromStr for Profile {\n             \"tools\" | \"tool\" | \"rustdoc\" | \"clippy\" | \"miri\" | \"rustfmt\" | \"rls\" => {\n                 Ok(Profile::Tools)\n             }\n+            \"none\" => Ok(Profile::None),\n             _ => Err(format!(\"unknown profile: '{}'\", s)),\n         }\n     }\n@@ -143,17 +147,8 @@ impl Step for Profile {\n }\n \n pub fn setup(config: &Config, profile: Profile) {\n-    let stage_path =\n-        [\"build\", config.build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n-\n-    if !rustup_installed() && profile != Profile::User {\n-        eprintln!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n-    } else if stage_dir_exists(&stage_path[..]) && !config.dry_run() {\n-        attempt_toolchain_link(&stage_path[..]);\n-    }\n-\n-    let suggestions = match profile {\n-        Profile::Codegen | Profile::Compiler => &[\"check\", \"build\", \"test\"][..],\n+    let suggestions: &[&str] = match profile {\n+        Profile::Codegen | Profile::Compiler | Profile::None => &[\"check\", \"build\", \"test\"],\n         Profile::Tools => &[\n             \"check\",\n             \"build\",\n@@ -166,11 +161,6 @@ pub fn setup(config: &Config, profile: Profile) {\n         Profile::User => &[\"dist\", \"build\"],\n     };\n \n-    if !config.dry_run() {\n-        t!(install_git_hook_maybe(&config));\n-        t!(create_vscode_settings_maybe(&config));\n-    }\n-\n     println!();\n \n     println!(\"To get started, try one of the following commands:\");\n@@ -189,6 +179,9 @@ pub fn setup(config: &Config, profile: Profile) {\n }\n \n fn setup_config_toml(path: &PathBuf, profile: Profile, config: &Config) {\n+    if profile == Profile::None {\n+        return;\n+    }\n     if path.exists() {\n         eprintln!();\n         eprintln!(\n@@ -216,6 +209,41 @@ fn setup_config_toml(path: &PathBuf, profile: Profile, config: &Config) {\n     println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n }\n \n+/// Creates a toolchain link for stage1 using `rustup`\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]\n+pub struct Link;\n+impl Step for Link {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.alias(\"link\")\n+    }\n+    fn make_run(run: RunConfig<'_>) {\n+        if run.builder.config.dry_run() {\n+            return;\n+        }\n+        if let [cmd] = &run.paths[..] {\n+            if cmd.assert_single_path().path.as_path().as_os_str() == \"link\" {\n+                run.builder.ensure(Link);\n+            }\n+        }\n+    }\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let config = &builder.config;\n+        if config.dry_run() {\n+            return;\n+        }\n+        let stage_path =\n+            [\"build\", config.build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n+\n+        if !rustup_installed() {\n+            eprintln!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n+        } else if stage_dir_exists(&stage_path[..]) && !config.dry_run() {\n+            attempt_toolchain_link(&stage_path[..]);\n+        }\n+    }\n+}\n+\n fn rustup_installed() -> bool {\n     Command::new(\"rustup\")\n         .arg(\"--version\")\n@@ -393,6 +421,35 @@ fn prompt_user(prompt: &str) -> io::Result<Option<PromptResult>> {\n     }\n }\n \n+/// Installs `src/etc/pre-push.sh` as a Git hook\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]\n+pub struct Hook;\n+\n+impl Step for Hook {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.alias(\"hook\")\n+    }\n+    fn make_run(run: RunConfig<'_>) {\n+        if run.builder.config.dry_run() {\n+            return;\n+        }\n+        if let [cmd] = &run.paths[..] {\n+            if cmd.assert_single_path().path.as_path().as_os_str() == \"hook\" {\n+                run.builder.ensure(Hook);\n+            }\n+        }\n+    }\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let config = &builder.config;\n+        if config.dry_run() {\n+            return;\n+        }\n+        t!(install_git_hook_maybe(&config));\n+    }\n+}\n+\n // install a git hook to automatically run tidy, if they want\n fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n     let git = t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n@@ -431,6 +488,35 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n     Ok(())\n }\n \n+/// Sets up or displays `src/etc/vscode_settings.json`\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]\n+pub struct Vscode;\n+\n+impl Step for Vscode {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.alias(\"vscode\")\n+    }\n+    fn make_run(run: RunConfig<'_>) {\n+        if run.builder.config.dry_run() {\n+            return;\n+        }\n+        if let [cmd] = &run.paths[..] {\n+            if cmd.assert_single_path().path.as_path().as_os_str() == \"vscode\" {\n+                run.builder.ensure(Vscode);\n+            }\n+        }\n+    }\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let config = &builder.config;\n+        if config.dry_run() {\n+            return;\n+        }\n+        t!(create_vscode_settings_maybe(&config));\n+    }\n+}\n+\n /// Create a `.vscode/settings.json` file for rustc development, or just print it\n fn create_vscode_settings_maybe(config: &Config) -> io::Result<()> {\n     let (current_hash, historical_hashes) = SETTINGS_HASHES.split_last().unwrap();"}]}