{"sha": "c716ad8af5cb78595cc410536f0e03e03a216b2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MTZhZDhhZjVjYjc4NTk1Y2M0MTA1MzZmMGUwM2UwM2EyMTZiMmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-12T20:18:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-17T14:38:49Z"}, "message": "pull out encode_field", "tree": {"sha": "5b6cf5a239084959a3f51a25f18f4e7b81326311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6cf5a239084959a3f51a25f18f4e7b81326311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c716ad8af5cb78595cc410536f0e03e03a216b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c716ad8af5cb78595cc410536f0e03e03a216b2d", "html_url": "https://github.com/rust-lang/rust/commit/c716ad8af5cb78595cc410536f0e03e03a216b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c716ad8af5cb78595cc410536f0e03e03a216b2d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35196326d09a9a632ad54efb9716f254dea5a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f35196326d09a9a632ad54efb9716f254dea5a3c", "html_url": "https://github.com/rust-lang/rust/commit/f35196326d09a9a632ad54efb9716f254dea5a3c"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "f17613cddefdbffe025a45c6927bb14573f7491d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c716ad8af5cb78595cc410536f0e03e03a216b2d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c716ad8af5cb78595cc410536f0e03e03a216b2d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c716ad8af5cb78595cc410536f0e03e03a216b2d", "patch": "@@ -203,10 +203,8 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n         debug!(\"encode_enum_variant_info(enum_did={:?})\", enum_did);\n         let ecx = self.ecx();\n         let def = ecx.tcx.lookup_adt_def(enum_did);\n+        self.encode_fields(enum_did);\n         for (i, variant) in def.variants.iter().enumerate() {\n-            for field in &variant.fields {\n-                self.encode_field(field);\n-            }\n             self.record(variant.did, |this| this.encode_enum_variant_info(enum_did, i, vis));\n         }\n     }\n@@ -415,25 +413,42 @@ fn encode_item_sort(rbml_w: &mut Encoder, sort: char) {\n }\n \n impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n+    fn encode_fields(&mut self,\n+                     adt_def_id: DefId) {\n+        let def = self.ecx.tcx.lookup_adt_def(adt_def_id);\n+        for (variant_index, variant) in def.variants.iter().enumerate() {\n+            for (field_index, field) in variant.fields.iter().enumerate() {\n+                self.record(field.did, |this| this.encode_field(adt_def_id,\n+                                                                variant_index,\n+                                                                field_index));\n+            }\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n     fn encode_field(&mut self,\n-                    field: ty::FieldDef<'tcx>) {\n+                    adt_def_id: DefId,\n+                    variant_index: usize,\n+                    field_index: usize) {\n         let ecx = self.ecx();\n+        let def = ecx.tcx.lookup_adt_def(adt_def_id);\n+        let variant = &def.variants[variant_index];\n+        let field = &variant.fields[field_index];\n \n         let nm = field.name;\n         let id = ecx.local_id(field.did);\n+        debug!(\"encode_field: encoding {} {}\", nm, id);\n \n-        self.record(field.did, |this| {\n-            debug!(\"encode_field: encoding {} {}\", nm, id);\n-            this.encode_struct_field_family(field.vis);\n-            encode_name(this.rbml_w, nm);\n-            this.encode_bounds_and_type_for_item(id);\n-            encode_def_id_and_key(ecx, this.rbml_w, field.did);\n+        self.encode_struct_field_family(field.vis);\n+        encode_name(self.rbml_w, nm);\n+        self.encode_bounds_and_type_for_item(id);\n+        encode_def_id_and_key(ecx, self.rbml_w, field.did);\n \n-            let stab = ecx.tcx.lookup_stability(field.did);\n-            let depr = ecx.tcx.lookup_deprecation(field.did);\n-            encode_stability(this.rbml_w, stab);\n-            encode_deprecation(this.rbml_w, depr);\n-        });\n+        let stab = ecx.tcx.lookup_stability(field.did);\n+        let depr = ecx.tcx.lookup_deprecation(field.did);\n+        encode_stability(self.rbml_w, stab);\n+        encode_deprecation(self.rbml_w, depr);\n     }\n }\n \n@@ -1064,9 +1079,7 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n         let def = ecx.tcx.lookup_adt_def(def_id);\n         let variant = def.struct_variant();\n \n-        for field in &variant.fields {\n-            self.encode_field(field);\n-        }\n+        self.encode_fields(def_id);\n \n         // If this is a tuple-like struct, encode the type of the constructor.\n         match variant.kind {"}]}