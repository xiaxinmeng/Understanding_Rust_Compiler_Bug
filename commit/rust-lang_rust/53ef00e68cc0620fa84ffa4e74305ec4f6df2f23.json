{"sha": "53ef00e68cc0620fa84ffa4e74305ec4f6df2f23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZWYwMGU2OGNjMDYyMGZhODRmZmE0ZTc0MzA1ZWM0ZjZkZjJmMjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-22T14:57:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-22T14:57:53Z"}, "message": "Fix JIT on macOS\n\nFixes #671", "tree": {"sha": "aab3a20717e235601f9717e73f9d321a29aa3a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aab3a20717e235601f9717e73f9d321a29aa3a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53ef00e68cc0620fa84ffa4e74305ec4f6df2f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53ef00e68cc0620fa84ffa4e74305ec4f6df2f23", "html_url": "https://github.com/rust-lang/rust/commit/53ef00e68cc0620fa84ffa4e74305ec4f6df2f23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53ef00e68cc0620fa84ffa4e74305ec4f6df2f23/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc30c202938e79126c4e94fc6719fc018f834cfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc30c202938e79126c4e94fc6719fc018f834cfb", "html_url": "https://github.com/rust-lang/rust/commit/cc30c202938e79126c4e94fc6719fc018f834cfb"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "056fc57989f6907185a8b5a1d0b1985512f1d03e", "filename": "src/driver.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53ef00e68cc0620fa84ffa4e74305ec4f6df2f23/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ef00e68cc0620fa84ffa4e74305ec4f6df2f23/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=53ef00e68cc0620fa84ffa4e74305ec4f6df2f23", "patch": "@@ -136,8 +136,15 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n             if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n                 return None;\n             }\n+            let dlsym_name = if cfg!(target_os = \"macos\") {\n+                // On macOS `dlsym` expects the name without leading `_`.\n+                assert!(name.starts_with(\"_\"), \"{:?}\", name);\n+                &name[1..]\n+            } else {\n+                &name\n+            };\n             let symbol: libloading::Symbol<*const u8> =\n-                unsafe { lib.get(name.as_bytes()) }.unwrap();\n+                unsafe { lib.get(dlsym_name.as_bytes()) }.unwrap();\n             Some((name, *symbol))\n         }));\n         std::mem::forget(lib)"}, {"sha": "e1cb1333649c3deadbc8895ab34fa83373c415e3", "filename": "test.sh", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53ef00e68cc0620fa84ffa4e74305ec4f6df2f23/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/53ef00e68cc0620fa84ffa4e74305ec4f6df2f23/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=53ef00e68cc0620fa84ffa4e74305ec4f6df2f23", "patch": "@@ -12,16 +12,6 @@ fi\n \n source config.sh\n \n-jit() {\n-    if [[ `uname` == 'Darwin' ]]; then\n-        # FIXME(#671) `dlsym` returns \"symbol not found\" for existing symbols on macOS.\n-        echo \"[JIT] $1 (Ignored on macOS)\"\n-    else\n-        echo \"[JIT] $1\"\n-        SHOULD_RUN=1 $RUSTC --crate-type bin -Cprefer-dynamic $2\n-    fi\n-}\n-\n rm -r target/out || true\n mkdir -p target/out/clif\n \n@@ -31,7 +21,8 @@ $RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib\n echo \"[BUILD] example\"\n $RUSTC example/example.rs --crate-type lib\n \n-#JIT_ARGS=\"abc bcd\" jit mini_core_hello_world example/mini_core_hello_world.rs\n+echo \"[JIT] mini_core_hello_world\"\n+JIT_ARGS=\"abc bcd\" SHOULD_RUN=1 $RUSTC --crate-type bin -Cprefer-dynamic example/mini_core_hello_world.rs\n \n echo \"[AOT] mini_core_hello_world\"\n $RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g\n@@ -49,7 +40,8 @@ echo \"[AOT] alloc_example\"\n $RUSTC example/alloc_example.rs --crate-type bin\n ./target/out/alloc_example\n \n-jit std_example example/std_example.rs\n+echo \"[JIT] std_example\"\n+SHOULD_RUN=1 $RUSTC --crate-type bin -Cprefer-dynamic example/std_example.rs\n \n echo \"[AOT] dst_field_align\"\n # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed."}]}