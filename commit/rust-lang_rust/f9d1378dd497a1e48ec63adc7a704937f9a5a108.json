{"sha": "f9d1378dd497a1e48ec63adc7a704937f9a5a108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDEzNzhkZDQ5N2ExZTQ4ZWM2M2FkYzdhNzA0OTM3ZjlhNWExMDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-26T12:32:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T12:32:17Z"}, "message": "Rollup merge of #70411 - ogoffart:fix-62691, r=eddyb\n\nFix for #62691: use the largest niche across all fields\n\nfixes #62691\n\n(The second commit is a small optimization but it makes the code less pretty and i don't know if it is worth it.)", "tree": {"sha": "9d221fbe0c96d1626060331a4aef0f559e7797d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d221fbe0c96d1626060331a4aef0f559e7797d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d1378dd497a1e48ec63adc7a704937f9a5a108", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefKDRCRBK7hj4Ov3rIwAAdHIIABQAW/o7BHJ13j3GoQ6s9G5u\n5dbGsREoVLUk4meUBu7+Tljd8L3SWOkcO3m5ZlHXvOgVAkjuR1CrwrrOE60Fo6eo\nsfGgO3xKE3WvEl5w0UOhde00RVYNZ1gL2th3XXRC/JVaq8Qt2+xkHiaxc2EqCT9B\ns1P2YwaNG9L2saoCXsn92lC9igOAsqQMOazoK1GfzYoGaL1oYolDVXqRis45uPpA\nG+g5f7BBirDXPS7zA7Hk6vwrxr1LJFOyU2a/zE3HIj9FGj3mKOYYgI2qlrICs509\nEb60IgMtZfnHkz+SBkIkzbRt0OxJYChzd5gIrbV8pafO8PIgB8MRyMT2lUDDVN4=\n=H3Bc\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d221fbe0c96d1626060331a4aef0f559e7797d2\nparent 20771ae5b9bf2601b39585444d808eaf8ab97460\nparent 0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585225937 +0100\ncommitter GitHub <noreply@github.com> 1585225937 +0100\n\nRollup merge of #70411 - ogoffart:fix-62691, r=eddyb\n\nFix for #62691: use the largest niche across all fields\n\nfixes #62691\n\n(The second commit is a small optimization but it makes the code less pretty and i don't know if it is worth it.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d1378dd497a1e48ec63adc7a704937f9a5a108", "html_url": "https://github.com/rust-lang/rust/commit/f9d1378dd497a1e48ec63adc7a704937f9a5a108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d1378dd497a1e48ec63adc7a704937f9a5a108/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20771ae5b9bf2601b39585444d808eaf8ab97460", "url": "https://api.github.com/repos/rust-lang/rust/commits/20771ae5b9bf2601b39585444d808eaf8ab97460", "html_url": "https://github.com/rust-lang/rust/commit/20771ae5b9bf2601b39585444d808eaf8ab97460"}, {"sha": "0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2", "html_url": "https://github.com/rust-lang/rust/commit/0b00c20465c2cacf34b4d3d1a5f4d0427f384cb2"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "ad4352c01057244b502098f5c7539299d669cb06", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9d1378dd497a1e48ec63adc7a704937f9a5a108/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d1378dd497a1e48ec63adc7a704937f9a5a108/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=f9d1378dd497a1e48ec63adc7a704937f9a5a108", "patch": "@@ -282,8 +282,6 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let mut align = if pack.is_some() { dl.i8_align } else { dl.aggregate_align };\n \n-        let mut sized = true;\n-        let mut offsets = vec![Size::ZERO; fields.len()];\n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n \n         let mut optimize = !repr.inhibit_struct_field_reordering_opt();\n@@ -320,6 +318,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // At the bottom of this function, we invert `inverse_memory_index` to\n         // produce `memory_index` (see `invert_mapping`).\n \n+        let mut sized = true;\n+        let mut offsets = vec![Size::ZERO; fields.len()];\n         let mut offset = Size::ZERO;\n         let mut largest_niche = None;\n         let mut largest_niche_available = 0;\n@@ -900,18 +900,19 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         let count = (niche_variants.end().as_u32()\n                             - niche_variants.start().as_u32()\n                             + 1) as u128;\n-                        // FIXME(#62691) use the largest niche across all fields,\n-                        // not just the first one.\n-                        for (field_index, &field) in variants[i].iter().enumerate() {\n-                            let niche = match &field.largest_niche {\n-                                Some(niche) => niche,\n-                                _ => continue,\n-                            };\n-                            let (niche_start, niche_scalar) = match niche.reserve(self, count) {\n-                                Some(pair) => pair,\n-                                None => continue,\n-                            };\n \n+                        // Find the field with the largest niche\n+                        let niche_candidate = variants[i]\n+                            .iter()\n+                            .enumerate()\n+                            .filter_map(|(j, &field)| Some((j, field.largest_niche.as_ref()?)))\n+                            .max_by_key(|(_, niche)| niche.available(dl));\n+\n+                        if let Some((field_index, niche, (niche_start, niche_scalar))) =\n+                            niche_candidate.and_then(|(field_index, niche)| {\n+                                Some((field_index, niche, niche.reserve(self, count)?))\n+                            })\n+                        {\n                             let mut align = dl.aggregate_align;\n                             let st = variants\n                                 .iter_enumerated()"}, {"sha": "1d332cc3bf7ba3081e00930c72b443a632286938", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9d1378dd497a1e48ec63adc7a704937f9a5a108/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d1378dd497a1e48ec63adc7a704937f9a5a108/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=f9d1378dd497a1e48ec63adc7a704937f9a5a108", "patch": "@@ -74,6 +74,11 @@ enum NicheFilledEnumWithAbsentVariant {\n     C,\n }\n \n+enum Option2<A, B> {\n+    Some(A, B),\n+    None\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -113,4 +118,6 @@ pub fn main() {\n \n     assert_eq!(size_of::<Option<Option<(bool, &())>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option<(&(), bool)>>>(), size_of::<(bool, &())>());\n+    assert_eq!(size_of::<Option<Option2<bool, &()>>>(), size_of::<(bool, &())>());\n+    assert_eq!(size_of::<Option<Option2<&(), bool>>>(), size_of::<(bool, &())>());\n }"}]}