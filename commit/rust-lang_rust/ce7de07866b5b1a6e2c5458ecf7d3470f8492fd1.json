{"sha": "ce7de07866b5b1a6e2c5458ecf7d3470f8492fd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlN2RlMDc4NjZiNWIxYTZlMmM1NDU4ZWNmN2QzNDcwZjg0OTJmZDE=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-12-28T12:47:19Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-02-09T02:28:50Z"}, "message": "Add `Box::into_inner`.", "tree": {"sha": "56053cc89728c4a4d08eb4b065d54c541308787b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56053cc89728c4a4d08eb4b065d54c541308787b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7de07866b5b1a6e2c5458ecf7d3470f8492fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7de07866b5b1a6e2c5458ecf7d3470f8492fd1", "html_url": "https://github.com/rust-lang/rust/commit/ce7de07866b5b1a6e2c5458ecf7d3470f8492fd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7de07866b5b1a6e2c5458ecf7d3470f8492fd1/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26438b473883ea607b30288e461187f0fb2fe589", "url": "https://api.github.com/repos/rust-lang/rust/commits/26438b473883ea607b30288e461187f0fb2fe589", "html_url": "https://github.com/rust-lang/rust/commit/26438b473883ea607b30288e461187f0fb2fe589"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "97cfae6875fdb19c1b6abab14f769cf33a4616b7", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce7de07866b5b1a6e2c5458ecf7d3470f8492fd1/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7de07866b5b1a6e2c5458ecf7d3470f8492fd1/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=ce7de07866b5b1a6e2c5458ecf7d3470f8492fd1", "patch": "@@ -495,6 +495,23 @@ impl<T, A: Allocator> Box<T, A> {\n         let (raw, alloc) = Box::into_raw_with_allocator(boxed);\n         unsafe { Box::from_raw_in(raw as *mut [T; 1], alloc) }\n     }\n+\n+    /// Consumes the `Box`, returning the wrapped value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(box_into_inner)]\n+    ///\n+    /// let c = Box::new(5);\n+    ///\n+    /// assert_eq!(Box::into_inner(c), 5);\n+    /// ```\n+    #[unstable(feature = \"box_into_inner\", issue = \"80437\")]\n+    #[inline]\n+    pub fn into_inner(boxed: Self) -> T {\n+        *boxed\n+    }\n }\n \n impl<T> Box<[T]> {"}]}