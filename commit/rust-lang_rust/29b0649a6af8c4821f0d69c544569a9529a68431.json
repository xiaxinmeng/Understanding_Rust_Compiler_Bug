{"sha": "29b0649a6af8c4821f0d69c544569a9529a68431", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjA2NDlhNmFmOGM0ODIxZjBkNjljNTQ0NTY5YTk1MjlhNjg0MzE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-27T13:53:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-27T14:20:42Z"}, "message": "Convert vec::{push, push_all, push_all_move} to methods.", "tree": {"sha": "2e6d658b35ee220ab729e60336f737267028b02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e6d658b35ee220ab729e60336f737267028b02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b0649a6af8c4821f0d69c544569a9529a68431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b0649a6af8c4821f0d69c544569a9529a68431", "html_url": "https://github.com/rust-lang/rust/commit/29b0649a6af8c4821f0d69c544569a9529a68431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b0649a6af8c4821f0d69c544569a9529a68431/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cb0a567d1209855b476689b0e449a832035f05b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb0a567d1209855b476689b0e449a832035f05b", "html_url": "https://github.com/rust-lang/rust/commit/1cb0a567d1209855b476689b0e449a832035f05b"}], "stats": {"total": 176, "additions": 82, "deletions": 94}, "files": [{"sha": "8f742d0d2100e92f57fd9caf338109567ae88d09", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b0649a6af8c4821f0d69c544569a9529a68431/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/29b0649a6af8c4821f0d69c544569a9529a68431/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=29b0649a6af8c4821f0d69c544569a9529a68431", "patch": "@@ -2620,7 +2620,7 @@ assert!(b != \"world\");\n \n The vector type constructor represents a homogeneous array of values of a given type.\n A vector has a fixed size.\n-(Operations like `vec::push` operate solely on owned vectors.)\n+(Operations like `vec.push` operate solely on owned vectors.)\n A vector type can be annotated with a _definite_ size,\n written with a trailing asterisk and integer literal, such as `[int * 10]`.\n Such a definite-sized vector type is a first-class type, since its size is known statically."}, {"sha": "d7c20ed2d50bbb2d0a35cfd4419fd2950826bcf6", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=29b0649a6af8c4821f0d69c544569a9529a68431", "patch": "@@ -763,8 +763,7 @@ pub fn get_provided_trait_methods(intr: @ident_interner, cdata: cmd,\n \n         if item_method_sort(mth) != 'p' { loop; }\n \n-        vec::push(&mut result,\n-                  @get_method(intr, cdata, did.node, tcx));\n+        result.push(@get_method(intr, cdata, did.node, tcx));\n     }\n \n     return result;"}, {"sha": "b839e22f9060f53a3cd976d8b9778f6fdc288012", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=29b0649a6af8c4821f0d69c544569a9529a68431", "patch": "@@ -4862,8 +4862,8 @@ impl Resolver {\n         while j != 0 {\n             j -= 1;\n             for this.value_ribs[j].bindings.each_key |&k| {\n-                vec::push(&mut maybes, this.session.str_of(k));\n-                vec::push(&mut values, uint::max_value);\n+                maybes.push(this.session.str_of(k));\n+                values.push(uint::max_value);\n             }\n         }\n "}, {"sha": "5d0fbfcb1bae98d68cce0626f1044b336c0145cd", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=29b0649a6af8c4821f0d69c544569a9529a68431", "patch": "@@ -788,7 +788,7 @@ impl CoherenceChecker {\n                              `%s` to impl\",\n                             provided_method.method_info\n                             .ident.repr(self.crate_context.tcx));\n-                        vec::push(all_methods, provided_method.method_info);\n+                        all_methods.push(provided_method.method_info);\n                     }\n                 }\n             }"}, {"sha": "165996f935e45a41d2da3b2a18805b9d78fc15f3", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=29b0649a6af8c4821f0d69c544569a9529a68431", "patch": "@@ -1140,7 +1140,7 @@ pub fn set_exit_status(code: int) {\n unsafe fn load_argc_and_argv(argc: c_int, argv: **c_char) -> ~[~str] {\n     let mut args = ~[];\n     for uint::range(0, argc as uint) |i| {\n-        vec::push(&mut args, str::raw::from_c_str(*argv.offset(i)));\n+        args.push(str::raw::from_c_str(*argv.offset(i)));\n     }\n     args\n }\n@@ -1186,8 +1186,7 @@ pub fn real_args() -> ~[~str] {\n             while *ptr.offset(len) != 0 { len += 1; }\n \n             // Push it onto the list.\n-            vec::push(&mut args,\n-                      vec::raw::buf_as_slice(ptr, len,\n+            args.push(vec::raw::buf_as_slice(ptr, len,\n                                              str::from_utf16));\n         }\n     }"}, {"sha": "f0c81f9c04bb6711d5f6631ddebd47a61763c6a5", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 75, "deletions": 85, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0649a6af8c4821f0d69c544569a9529a68431/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=29b0649a6af8c4821f0d69c544569a9529a68431", "patch": "@@ -438,86 +438,6 @@ pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n     }\n }\n \n-/// Append an element to a vector\n-#[inline]\n-pub fn push<T>(v: &mut ~[T], initval: T) {\n-    unsafe {\n-        let repr: **raw::VecRepr = transmute(&mut *v);\n-        let fill = (**repr).unboxed.fill;\n-        if (**repr).unboxed.alloc > fill {\n-            push_fast(v, initval);\n-        }\n-        else {\n-            push_slow(v, initval);\n-        }\n-    }\n-}\n-\n-// This doesn't bother to make sure we have space.\n-#[inline] // really pretty please\n-unsafe fn push_fast<T>(v: &mut ~[T], initval: T) {\n-    let repr: **mut raw::VecRepr = transmute(v);\n-    let fill = (**repr).unboxed.fill;\n-    (**repr).unboxed.fill += sys::nonzero_size_of::<T>();\n-    let p = to_unsafe_ptr(&((**repr).unboxed.data));\n-    let p = ptr::offset(p, fill) as *mut T;\n-    intrinsics::move_val_init(&mut(*p), initval);\n-}\n-\n-#[inline(never)]\n-fn push_slow<T>(v: &mut ~[T], initval: T) {\n-    let new_len = v.len() + 1;\n-    reserve_at_least(&mut *v, new_len);\n-    unsafe { push_fast(v, initval) }\n-}\n-\n-/// Iterates over the slice `rhs`, copies each element, and then appends it to\n-/// the vector provided `v`. The `rhs` vector is traversed in-order.\n-///\n-/// # Example\n-///\n-/// ~~~ {.rust}\n-/// let mut a = ~[1];\n-/// vec::push_all(&mut a, [2, 3, 4]);\n-/// assert!(a == ~[1, 2, 3, 4]);\n-/// ~~~\n-#[inline]\n-pub fn push_all<T:Copy>(v: &mut ~[T], rhs: &const [T]) {\n-    let new_len = v.len() + rhs.len();\n-    reserve(&mut *v, new_len);\n-\n-    for uint::range(0u, rhs.len()) |i| {\n-        push(&mut *v, unsafe { raw::get(rhs, i) })\n-    }\n-}\n-\n-/// Takes ownership of the vector `rhs`, moving all elements into the specified\n-/// vector `v`. This does not copy any elements, and it is illegal to use the\n-/// `rhs` vector after calling this method (because it is moved here).\n-///\n-/// # Example\n-///\n-/// ~~~ {.rust}\n-/// let mut a = ~[~1];\n-/// vec::push_all_move(&mut a, ~[~2, ~3, ~4]);\n-/// assert!(a == ~[~1, ~2, ~3, ~4]);\n-/// ~~~\n-#[inline]\n-pub fn push_all_move<T>(v: &mut ~[T], mut rhs: ~[T]) {\n-    let new_len = v.len() + rhs.len();\n-    reserve(&mut *v, new_len);\n-    unsafe {\n-        do as_mut_buf(rhs) |p, len| {\n-            for uint::range(0, len) |i| {\n-                let x = ptr::replace_ptr(ptr::mut_offset(p, i),\n-                                         intrinsics::uninit());\n-                push(&mut *v, x);\n-            }\n-        }\n-        raw::set_len(&mut rhs, 0);\n-    }\n-}\n-\n /// Shorten a vector, dropping excess elements.\n pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n     do as_mut_buf(*v) |p, oldlen| {\n@@ -1699,6 +1619,8 @@ impl<'self,T:Copy> ImmutableCopyableVector<T> for &'self [T] {\n #[allow(missing_doc)]\n pub trait OwnedVector<T> {\n     fn push(&mut self, t: T);\n+    unsafe fn push_fast(&mut self, t: T);\n+\n     fn push_all_move(&mut self, rhs: ~[T]);\n     fn pop(&mut self) -> T;\n     fn shift(&mut self) -> T;\n@@ -1716,14 +1638,67 @@ pub trait OwnedVector<T> {\n }\n \n impl<T> OwnedVector<T> for ~[T] {\n+    /// Append an element to a vector\n     #[inline]\n     fn push(&mut self, t: T) {\n-        push(self, t);\n+        unsafe {\n+            let repr: **raw::VecRepr = transmute(&mut *self);\n+            let fill = (**repr).unboxed.fill;\n+            if (**repr).unboxed.alloc <= fill {\n+                // need more space\n+                reserve_no_inline(self);\n+            }\n+\n+            self.push_fast(t);\n+        }\n+\n+        // this peculiar function is because reserve_at_least is very\n+        // large (because of reserve), and will be inlined, which\n+        // makes push too large.\n+        #[inline(never)]\n+        fn reserve_no_inline<T>(v: &mut ~[T]) {\n+            let new_len = v.len() + 1;\n+            reserve_at_least(v, new_len);\n+        }\n     }\n \n-    #[inline]\n-    fn push_all_move(&mut self, rhs: ~[T]) {\n-        push_all_move(self, rhs);\n+    // This doesn't bother to make sure we have space.\n+    #[inline] // really pretty please\n+    unsafe fn push_fast(&mut self, t: T) {\n+        let repr: **mut raw::VecRepr = transmute(self);\n+        let fill = (**repr).unboxed.fill;\n+        (**repr).unboxed.fill += sys::nonzero_size_of::<T>();\n+        let p = to_unsafe_ptr(&((**repr).unboxed.data));\n+        let p = ptr::offset(p, fill) as *mut T;\n+        intrinsics::move_val_init(&mut(*p), t);\n+    }\n+\n+    /// Takes ownership of the vector `rhs`, moving all elements into\n+    /// the current vector. This does not copy any elements, and it is\n+    /// illegal to use the `rhs` vector after calling this method\n+    /// (because it is moved here).\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    /// let mut a = ~[~1];\n+    /// a.push_all_move(~[~2, ~3, ~4]);\n+    /// assert!(a == ~[~1, ~2, ~3, ~4]);\n+    /// ~~~\n+    #[inline]\n+    fn push_all_move(&mut self, mut rhs: ~[T]) {\n+        let new_len = self.len() + rhs.len();\n+        reserve(self, new_len);\n+        unsafe {\n+            do as_mut_buf(rhs) |p, len| {\n+                for uint::range(0, len) |i| {\n+                    let x = ptr::replace_ptr(ptr::mut_offset(p, i),\n+                                             intrinsics::uninit());\n+                    self.push(x);\n+                }\n+            }\n+            raw::set_len(&mut rhs, 0);\n+        }\n     }\n \n     /// Remove the last element from a vector and return it\n@@ -1898,9 +1873,24 @@ pub trait OwnedCopyableVector<T:Copy> {\n }\n \n impl<T:Copy> OwnedCopyableVector<T> for ~[T] {\n+    /// Iterates over the slice `rhs`, copies each element, and then appends it to\n+    /// the vector provided `v`. The `rhs` vector is traversed in-order.\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    /// let mut a = ~[1];\n+    /// a.push_all([2, 3, 4]);\n+    /// assert!(a == ~[1, 2, 3, 4]);\n+    /// ~~~\n     #[inline]\n     fn push_all(&mut self, rhs: &const [T]) {\n-        push_all(self, rhs);\n+        let new_len = self.len() + rhs.len();\n+        reserve(self, new_len);\n+\n+        for uint::range(0u, rhs.len()) |i| {\n+            self.push(unsafe { raw::get(rhs, i) })\n+        }\n     }\n \n     #[inline]"}]}