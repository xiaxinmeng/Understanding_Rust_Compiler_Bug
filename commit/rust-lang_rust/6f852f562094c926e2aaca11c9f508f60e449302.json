{"sha": "6f852f562094c926e2aaca11c9f508f60e449302", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODUyZjU2MjA5NGM5MjZlMmFhY2ExMWM5ZjUwOGY2MGU0NDkzMDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-07T12:42:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-07T12:42:47Z"}, "message": "Rollup merge of #24059 - nikomatsakis:issue-22914-phantomdata-docs, r=huon\n\n This probably needs a bit more work, but I wanted to try and capture some common use cases and be a bit more helpful.\n\nr? @huonw\ncc @steveklabnik", "tree": {"sha": "14ddb8ddc806ea78865dba7839b7bd6f2fedba8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14ddb8ddc806ea78865dba7839b7bd6f2fedba8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f852f562094c926e2aaca11c9f508f60e449302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f852f562094c926e2aaca11c9f508f60e449302", "html_url": "https://github.com/rust-lang/rust/commit/6f852f562094c926e2aaca11c9f508f60e449302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f852f562094c926e2aaca11c9f508f60e449302/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf2e365cfecabcc5c62b09b5098fa95e614e98c", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf2e365cfecabcc5c62b09b5098fa95e614e98c", "html_url": "https://github.com/rust-lang/rust/commit/daf2e365cfecabcc5c62b09b5098fa95e614e98c"}, {"sha": "d16677282a35e92291ee048809afb6c8061ee3e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d16677282a35e92291ee048809afb6c8061ee3e5", "html_url": "https://github.com/rust-lang/rust/commit/d16677282a35e92291ee048809afb6c8061ee3e5"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "9b16bd6fe843ca65e7b941601c530fcc94381788", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6f852f562094c926e2aaca11c9f508f60e449302/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f852f562094c926e2aaca11c9f508f60e449302/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=6f852f562094c926e2aaca11c9f508f60e449302", "patch": "@@ -316,8 +316,49 @@ impl<A:?Sized,R:?Sized,T:?Sized> PhantomFn<A,R> for T { }\n ///\n /// # Examples\n ///\n-/// When handling external resources over a foreign function interface, `PhantomData<T>` can\n-/// prevent mismatches by enforcing types in the method implementations:\n+/// ## Unused lifetime parameter\n+///\n+/// Perhaps the most common time that `PhantomData` is required is\n+/// with a struct that has an unused lifetime parameter, typically as\n+/// part of some unsafe code. For example, here is a struct `Slice`\n+/// that has two pointers of type `*const T`, presumably pointing into\n+/// an array somewhere:\n+///\n+/// ```\n+/// struct Slice<'a, T> {\n+///     start: *const T,\n+///     end: *const T,\n+/// }\n+/// ```\n+///\n+/// The intention is that the underlying data is only valid for the\n+/// lifetime `'a`, so `Slice` should not outlive `'a`. However, this\n+/// intent is not expressed in the code, since there are no uses of\n+/// the lifetime `'a` and hence it is not clear what data it applies\n+/// to. We can correct this by telling the compiler to act *as if* the\n+/// `Slice` struct contained a borrowed reference `&'a T`:\n+///\n+/// ```\n+/// use std::marker::PhantomData;\n+///\n+/// struct Slice<'a, T:'a> {\n+///     start: *const T,\n+///     end: *const T,\n+///     phantom: PhantomData<&'a T>\n+/// }\n+/// ```\n+///\n+/// This also in turn requires that we annotate `T:'a`, indicating\n+/// that `T` is a type that can be borrowed for the lifetime `'a`.\n+///\n+/// ## Unused type parameters\n+///\n+/// It sometimes happens that there are unused type parameters that\n+/// indicate what type of data a struct is \"tied\" to, even though that\n+/// data is not actually found in the struct itself. Here is an\n+/// example where this arises when handling external resources over a\n+/// foreign function interface. `PhantomData<T>` can prevent\n+/// mismatches by enforcing types in the method implementations:\n ///\n /// ```\n /// # trait ResType { fn foo(&self); };\n@@ -351,13 +392,21 @@ impl<A:?Sized,R:?Sized,T:?Sized> PhantomFn<A,R> for T { }\n /// }\n /// ```\n ///\n-/// Another example: embedding a `PhantomData<T>` will inform the compiler\n-/// that one or more instances of the type `T` could be dropped when\n-/// instances of the type itself is dropped, though that may not be\n-/// apparent from the other structure of the type itself. This is\n-/// commonly necessary if the structure is using an unsafe pointer\n-/// like `*mut T` whose referent may be dropped when the type is\n-/// dropped, as a `*mut T` is otherwise not treated as owned.\n+/// ## Indicating ownership\n+///\n+/// Adding a field of type `PhantomData<T>` also indicates that your\n+/// struct owns data of type `T`. This in turn implies that when your\n+/// struct is dropped, it may in turn drop one or more instances of\n+/// the type `T`, though that may not be apparent from the other\n+/// structure of the type itself. This is commonly necessary if the\n+/// structure is using an unsafe pointer like `*mut T` whose referent\n+/// may be dropped when the type is dropped, as a `*mut T` is\n+/// otherwise not treated as owned.\n+///\n+/// If your struct does not in fact *own* the data of type `T`, it is\n+/// better to use a reference type, like `PhantomData<&'a T>`\n+/// (ideally) or `PhantomData<*const T>` (if no lifetime applies), so\n+/// as not to indicate ownership.\n #[lang=\"phantom_data\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T:?Sized>;"}]}