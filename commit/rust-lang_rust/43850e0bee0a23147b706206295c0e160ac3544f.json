{"sha": "43850e0bee0a23147b706206295c0e160ac3544f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzODUwZTBiZWUwYTIzMTQ3YjcwNjIwNjI5NWMwZTE2MGFjMzU0NGY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-06T19:06:00Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-07T10:08:52Z"}, "message": "Special case error message for thread-local statics.", "tree": {"sha": "8ab45c4d124af930d946b7a4ed7315196e9e98e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab45c4d124af930d946b7a4ed7315196e9e98e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43850e0bee0a23147b706206295c0e160ac3544f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAltpb7QACgkQAXYLT59T\n8VTVKBAAk3N/+NGAj2IbjOFqvx791yjEEFaP6H7PKfNB/B7Jk+edOZa5tWLNGA8G\nXHro7/eDWWheIoyCJhuVQp/+bZYwn/LMu/KcTQdrrnpRIjvaQbkTZgS/fZblxORh\ntFOfMMIq2wuf92mc0wHwHxbbe0C3yK0gpEMsttbbDpsVoUycjM4hzz88DFLSqwz/\nwmEaf9ae/XNG+F7ThGcLlAMyzSaA7fd0ecfH0yGEWFHT1xlA7pBcMsBULd22pey9\nkFwB/hjoZAjX8d9/BbTrWmQwh48mEC0y3TXTLdW0cns54DzcGs45MuyyYAHBQzan\n8hs2L7fYCpyDhf81yRDBGSNTeZfERWGo/UyXPWJHTzj0OLYUj2c621D+fkTYcv81\n5oCmtwoaVDZ5B5oVgUso1Hw8NPCb4yUWzav7A6f2PebzdTZKPCvJHA/apyhAnI+Z\n2Eoixet99QYPRqjF376451nC5uJLgyd69iwvTZnn20yutftH5VdRFdDAoKGnVuej\nuX6V15WjOImR1a9FNFX0RZ0Ipcrrj84kEoWPTOs0nyI+90vay21mc/Xg6UyVZy7Q\nZ6tGmuAhv2Kam4Afa/mCZ039abv7luhATq84F9OJVoV3ZK0U9SKoZ8fZde08RrqB\nGQhA1E0jXJBmVLsID5xchQBPXSR51Imv0+zS1r0kbY768TnJYLE=\n=zIlL\n-----END PGP SIGNATURE-----", "payload": "tree 8ab45c4d124af930d946b7a4ed7315196e9e98e1\nparent 4b8089daf8046d7999310d44e5c68ccff4ab255a\nauthor David Wood <david@davidtw.co> 1533582360 +0200\ncommitter David Wood <david@davidtw.co> 1533636532 +0200\n\nSpecial case error message for thread-local statics.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43850e0bee0a23147b706206295c0e160ac3544f", "html_url": "https://github.com/rust-lang/rust/commit/43850e0bee0a23147b706206295c0e160ac3544f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43850e0bee0a23147b706206295c0e160ac3544f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8089daf8046d7999310d44e5c68ccff4ab255a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8089daf8046d7999310d44e5c68ccff4ab255a", "html_url": "https://github.com/rust-lang/rust/commit/4b8089daf8046d7999310d44e5c68ccff4ab255a"}], "stats": {"total": 155, "additions": 104, "deletions": 51}, "files": [{"sha": "b55a7ff068c472d3705414a1efac3d9ef142543e", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/43850e0bee0a23147b706206295c0e160ac3544f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43850e0bee0a23147b706206295c0e160ac3544f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=43850e0bee0a23147b706206295c0e160ac3544f", "patch": "@@ -412,6 +412,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             .insert((root_place.clone(), borrow_span));\n \n         let mut err = match &self.describe_place(&borrow.borrowed_place) {\n+            Some(_) if self.is_place_thread_local(root_place) => {\n+                self.report_thread_local_value_does_not_live_long_enough(\n+                    drop_span,\n+                    borrow_span,\n+                )\n+            }\n             Some(name) => self.report_local_value_does_not_live_long_enough(\n                 context,\n                 name,\n@@ -455,9 +461,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             context, name, scope_tree, borrow, drop_span, borrow_span\n         );\n \n-        let tcx = self.tcx;\n-        let mut err =\n-            tcx.path_does_not_live_long_enough(borrow_span, &format!(\"`{}`\", name), Origin::Mir);\n+        let mut err = self.tcx.path_does_not_live_long_enough(\n+            borrow_span, &format!(\"`{}`\", name), Origin::Mir);\n+\n         err.span_label(borrow_span, \"borrowed value does not live long enough\");\n         err.span_label(\n             drop_span,\n@@ -468,6 +474,27 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err\n     }\n \n+    fn report_thread_local_value_does_not_live_long_enough(\n+        &mut self,\n+        drop_span: Span,\n+        borrow_span: Span,\n+    ) -> DiagnosticBuilder<'cx> {\n+        debug!(\n+            \"report_thread_local_value_does_not_live_long_enough(\\\n+             {:?}, {:?}\\\n+             )\",\n+            drop_span, borrow_span\n+        );\n+\n+        let mut err = self.tcx.thread_local_value_does_not_live_long_enough(\n+            borrow_span, Origin::Mir);\n+\n+        err.span_label(borrow_span,\n+                       \"thread-local variables cannot be borrowed beyond the end of the function\");\n+        err.span_label(drop_span, \"end of enclosing function is here\");\n+        err\n+    }\n+\n     fn report_temporary_value_does_not_live_long_enough(\n         &mut self,\n         context: Context,\n@@ -856,6 +883,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             },\n         }\n     }\n+\n+    /// Check if a place is a thread-local static.\n+    pub fn is_place_thread_local(&self, place: &Place<'tcx>) -> bool {\n+        if let Place::Static(statik) = place {\n+            let attrs = self.tcx.get_attrs(statik.def_id);\n+            let is_thread_local = attrs.iter().any(|attr| attr.check_name(\"thread_local\"));\n+\n+            debug!(\"is_place_thread_local: attrs={:?} is_thread_local={:?}\",\n+                   attrs, is_thread_local);\n+            is_thread_local\n+        } else {\n+            debug!(\"is_place_thread_local: no\");\n+            false\n+        }\n+    }\n }\n \n // The span(s) associated to a use of a place."}, {"sha": "967a8d90330968acdeb4106eb0931aa6b4a88a4f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43850e0bee0a23147b706206295c0e160ac3544f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43850e0bee0a23147b706206295c0e160ac3544f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=43850e0bee0a23147b706206295c0e160ac3544f", "patch": "@@ -1487,15 +1487,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // FIXME: allow thread-locals to borrow other thread locals?\n         let (might_be_alive, will_be_dropped) = match root_place {\n             Place::Promoted(_) => (true, false),\n-            Place::Static(statik) => {\n+            Place::Static(_) => {\n                 // Thread-locals might be dropped after the function exits, but\n                 // \"true\" statics will never be.\n-                let is_thread_local = self\n-                    .tcx\n-                    .get_attrs(statik.def_id)\n-                    .iter()\n-                    .any(|attr| attr.check_name(\"thread_local\"));\n-\n+                let is_thread_local = self.is_place_thread_local(&root_place);\n                 (true, is_thread_local)\n             }\n             Place::Local(_) => {"}, {"sha": "e72ef798612aea94513b9443f18331da8222bca1", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/43850e0bee0a23147b706206295c0e160ac3544f/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43850e0bee0a23147b706206295c0e160ac3544f/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=43850e0bee0a23147b706206295c0e160ac3544f", "patch": "@@ -2251,6 +2251,29 @@ unsafe { b.resume() };\n ```\n \"##,\n \n+E0712: r##\"\n+This error occurs because a borrow of a thread-local variable was made inside a\n+function which outlived the lifetime of the function.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0712\n+#![feature(nll)]\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static FOO: u8 = 3;\n+\n+fn main() {\n+    let a = &FOO; // error: thread-local variable borrowed past end of function\n+\n+    std::thread::spawn(move || {\n+        println!(\"{}\", a);\n+    });\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "7be6241b3f91e153b386bde27727dbefdb0f8e24", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43850e0bee0a23147b706206295c0e160ac3544f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43850e0bee0a23147b706206295c0e160ac3544f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=43850e0bee0a23147b706206295c0e160ac3544f", "patch": "@@ -675,6 +675,22 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n \n         self.cancel_if_wrong_origin(err, o)\n     }\n+\n+    fn thread_local_value_does_not_live_long_enough(\n+        self,\n+        span: Span,\n+        o: Origin,\n+    ) -> DiagnosticBuilder<'cx> {\n+        let err = struct_span_err!(\n+            self,\n+            span,\n+            E0712,\n+            \"thread-local variable borrowed past end of function{OGN}\",\n+            OGN = o\n+        );\n+\n+        self.cancel_if_wrong_origin(err, o)\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> BorrowckErrors<'cx> for TyCtxt<'cx, 'gcx, 'tcx> {"}, {"sha": "7aa02558446e39217ec068169b4de313bb0dbe95", "filename": "src/test/compile-fail/borrowck/borrowck-thread-local-static-borrow-outlives-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43850e0bee0a23147b706206295c0e160ac3544f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43850e0bee0a23147b706206295c0e160ac3544f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs?ref=43850e0bee0a23147b706206295c0e160ac3544f", "patch": "@@ -19,5 +19,5 @@ static FOO: u8 = 3;\n fn assert_static(_t: &'static u8) {}\n fn main() {\n      assert_static(&FOO); //[ast]~ ERROR [E0597]\n-                          //[mir]~^ ERROR [E0597]\n+                          //[mir]~^ ERROR [E0712]\n }"}, {"sha": "5cab7ca9e7a3fa6d7e6d405194923c3d9103327e", "filename": "src/test/ui/issue-17954.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b8089daf8046d7999310d44e5c68ccff4ab255a/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8089daf8046d7999310d44e5c68ccff4ab255a/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr?ref=4b8089daf8046d7999310d44e5c68ccff4ab255a", "patch": "@@ -1,14 +0,0 @@\n-error[E0597]: `FOO` does not live long enough\n-  --> $DIR/issue-17954.rs:20:13\n-   |\n-LL |     let a = &FOO;\n-   |             ^^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `FOO` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "5cab7ca9e7a3fa6d7e6d405194923c3d9103327e", "filename": "src/test/ui/issue-17954.mir.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b8089daf8046d7999310d44e5c68ccff4ab255a/src%2Ftest%2Fui%2Fissue-17954.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b8089daf8046d7999310d44e5c68ccff4ab255a/src%2Ftest%2Fui%2Fissue-17954.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.mir.stderr?ref=4b8089daf8046d7999310d44e5c68ccff4ab255a", "patch": "@@ -1,14 +0,0 @@\n-error[E0597]: `FOO` does not live long enough\n-  --> $DIR/issue-17954.rs:20:13\n-   |\n-LL |     let a = &FOO;\n-   |             ^^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `FOO` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "67a5e3eaec787c0b71184b8df7f199cec91495d2", "filename": "src/test/ui/issue-17954.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43850e0bee0a23147b706206295c0e160ac3544f/src%2Ftest%2Fui%2Fissue-17954.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43850e0bee0a23147b706206295c0e160ac3544f/src%2Ftest%2Fui%2Fissue-17954.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.nll.stderr?ref=43850e0bee0a23147b706206295c0e160ac3544f", "patch": "@@ -0,0 +1,12 @@\n+error[E0712]: thread-local variable borrowed past end of function\n+  --> $DIR/issue-17954.rs:17:13\n+   |\n+LL |     let a = &FOO;\n+   |             ^^^^ thread-local variables cannot be borrowed beyond the end of the function\n+...\n+LL | }\n+   | - end of enclosing function is here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0712`."}, {"sha": "ce554a7254812c46bda53cc0d0c50200bb6c49b1", "filename": "src/test/ui/issue-17954.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43850e0bee0a23147b706206295c0e160ac3544f/src%2Ftest%2Fui%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43850e0bee0a23147b706206295c0e160ac3544f/src%2Ftest%2Fui%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.rs?ref=43850e0bee0a23147b706206295c0e160ac3544f", "patch": "@@ -8,26 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(thread_local)]\n \n #[thread_local]\n static FOO: u8 = 3;\n \n fn main() {\n     let a = &FOO;\n-    //[mir]~^ ERROR `FOO` does not live long enough [E0597]\n-    //[mir]~| does not live long enough\n-    //[mir]~| NOTE borrowed value must be valid for the static lifetime\n-    //[ast]~^^^^ ERROR borrowed value does not live long enough\n-    //[ast]~| does not live long enough\n-    //[ast]~| NOTE borrowed value must be valid for the static lifetime\n+    //~^ ERROR borrowed value does not live long enough\n+    //~| does not live long enough\n+    //~| NOTE borrowed value must be valid for the static lifetime\n \n     std::thread::spawn(move || {\n         println!(\"{}\", a);\n     });\n }\n-//[mir]~^ `FOO` dropped here while still borrowed\n-//[ast]~^^ temporary value only lives until here\n+//~^ NOTE temporary value only lives until here"}, {"sha": "76858a9b097b20f670e4af2b013ef05cc3e09098", "filename": "src/test/ui/issue-17954.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43850e0bee0a23147b706206295c0e160ac3544f/src%2Ftest%2Fui%2Fissue-17954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43850e0bee0a23147b706206295c0e160ac3544f/src%2Ftest%2Fui%2Fissue-17954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.stderr?ref=43850e0bee0a23147b706206295c0e160ac3544f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/issue-17954.rs:20:14\n+  --> $DIR/issue-17954.rs:17:14\n    |\n LL |     let a = &FOO;\n    |              ^^^ temporary value does not live long enough", "previous_filename": "src/test/ui/issue-17954.ast.stderr"}]}