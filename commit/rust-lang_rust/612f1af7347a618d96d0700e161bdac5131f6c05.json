{"sha": "612f1af7347a618d96d0700e161bdac5131f6c05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMmYxYWY3MzQ3YTYxOGQ5NmQwNzAwZTE2MWJkYWM1MTMxZjZjMDU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-31T09:11:59Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-31T09:20:28Z"}, "message": "Use trim_tries to extract pre-comments over simple trim_matches", "tree": {"sha": "d5af3c60b811e1e553a31bef81000790a15beb24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5af3c60b811e1e553a31bef81000790a15beb24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/612f1af7347a618d96d0700e161bdac5131f6c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/612f1af7347a618d96d0700e161bdac5131f6c05", "html_url": "https://github.com/rust-lang/rust/commit/612f1af7347a618d96d0700e161bdac5131f6c05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/612f1af7347a618d96d0700e161bdac5131f6c05/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2880d59ec0441476323cf2048b911e53b0cf0c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/2880d59ec0441476323cf2048b911e53b0cf0c37", "html_url": "https://github.com/rust-lang/rust/commit/2880d59ec0441476323cf2048b911e53b0cf0c37"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "d93995c94845aa6821f2d4d1c2bc2009253367a1", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/612f1af7347a618d96d0700e161bdac5131f6c05/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612f1af7347a618d96d0700e161bdac5131f6c05/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=612f1af7347a618d96d0700e161bdac5131f6c05", "patch": "@@ -334,9 +334,8 @@ impl Chain {\n             // Pre-comment\n             if handle_comment {\n                 let pre_comment_span = mk_sp(prev_span_end, chain_item.span.lo());\n-                let pre_comment_snippet = context.snippet(pre_comment_span);\n-                let pre_comment_snippet = pre_comment_snippet.trim().trim_matches('?');\n-                let (pre_comment, _) = extract_pre_comment(pre_comment_snippet);\n+                let pre_comment_snippet = trim_tries(context.snippet(pre_comment_span));\n+                let (pre_comment, _) = extract_pre_comment(&pre_comment_snippet);\n                 match pre_comment {\n                     Some(ref comment) if !comment.is_empty() => {\n                         children.push(ChainItem::comment("}]}