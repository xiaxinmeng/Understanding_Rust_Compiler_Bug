{"sha": "bb491ed23937aef876622e4beb68ae95938b3bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNDkxZWQyMzkzN2FlZjg3NjYyMmU0YmViNjhhZTk1OTM4YjNiZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-23T21:03:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-23T21:03:57Z"}, "message": "Auto merge of #84490 - JohnTitor:rollup-wrdj4ko, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #80805 (Improve `Iterator::by_ref` example)\n - #84248 (Remove duplicated fn(Box<[T]>) -> Vec<T>)\n - #84321 (rustdoc: Convert sub-variant toggle to HTML)\n - #84359 (:arrow_up: rust-analyzer)\n - #84374 (Clean up .gitignore)\n - #84387 (Move `sys_common::poison` to `sync::poison`)\n - #84430 (doc/platform-support: clarify UEFI support)\n - #84433 (Prevent control, shift and alt keys to make search input lose focus)\n - #84444 (doc: Get rid of \"[+] show undocumented items\" toggle on numeric From impls)\n - #84456 (Fix ICE if original_span(fn_sig) returns a span not in body sourcefile)\n - #84469 (Update comment on `PrimTy::name_str`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d5383a2182442ee9c2dd0b0dae79dc04a2c98bc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5383a2182442ee9c2dd0b0dae79dc04a2c98bc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb491ed23937aef876622e4beb68ae95938b3bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb491ed23937aef876622e4beb68ae95938b3bf9", "html_url": "https://github.com/rust-lang/rust/commit/bb491ed23937aef876622e4beb68ae95938b3bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb491ed23937aef876622e4beb68ae95938b3bf9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481ba16439299eb07058a7107352c558fdba7f96", "url": "https://api.github.com/repos/rust-lang/rust/commits/481ba16439299eb07058a7107352c558fdba7f96", "html_url": "https://github.com/rust-lang/rust/commit/481ba16439299eb07058a7107352c558fdba7f96"}, {"sha": "62db03cd623c0c3a6cf13a1b8c3c13581a416fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/62db03cd623c0c3a6cf13a1b8c3c13581a416fcc", "html_url": "https://github.com/rust-lang/rust/commit/62db03cd623c0c3a6cf13a1b8c3c13581a416fcc"}], "stats": {"total": 212, "additions": 120, "deletions": 92}, "files": [{"sha": "0cd6b9f648d0fb4bfd0189a66969c39c58e55a40", "filename": ".gitignore", "status": "modified", "additions": 44, "deletions": 26, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -5,53 +5,71 @@\n # created during manual debugging and many people like to clean up instead of\n # having git ignore such leftovers. You can use `.git/info/exclude` to\n # configure your local ignore list.\n-# FIXME: This needs cleanup.\n-*~\n+\n+## File system\n+.DS_Store\n+desktop.ini\n+\n+## Editor\n *.swp\n *.swo\n-.#*\n-.DS_Store\n+Session.vim\n .cproject\n-.hg/\n-.hgignore\n .idea\n *.iml\n-__pycache__/\n-*.py[cod]\n-*$py.class\n+.vscode\n .project\n+.favorites.json\n .settings/\n+\n+## Tool\n .valgrindrc\n-.vscode\n-.favorites.json\n-/Makefile\n-/build/\n+.cargo\n+# Included because it is part of the test case\n+!/src/test/run-make/thumb-none-qemu/example/.cargo\n+\n+## Configuration\n /config.toml\n-/dist/\n+/Makefile\n+config.mk\n+config.stamp\n+no_llvm_build\n+\n+## Build\n /dl/\n /doc/\n /inst/\n /llvm/\n /mingw-build/\n-/src/tools/x/target\n-# Created by default with `src/ci/docker/run.sh`:\n-/obj/\n+/build/\n+/dist/\n /unicode-downloads\n /target\n-# Generated by compiletest for incremental:\n+/src/tools/x/target\n+# Generated by compiletest for incremental\n /tmp/\n+# Created by default with `src/ci/docker/run.sh`\n+/obj/\n+\n+## Temporary files\n+*~\n+\\#*\n+\\#*\\#\n+.#*\n+\n+## Tags\n tags\n tags.*\n TAGS\n TAGS.*\n-\\#*\n-\\#*\\#\n-config.mk\n-config.stamp\n-Session.vim\n-.cargo\n-!/src/test/run-make/thumb-none-qemu/example/.cargo\n-no_llvm_build\n+\n+## Python\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+## Node\n **node_modules\n **package-lock.json\n+\n # Before adding new lines, see the comment at the top."}, {"sha": "685429863faff2cae1809eae5cb54ac510af92f2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -2201,7 +2201,7 @@ impl PrimTy {\n \n     /// Like [`PrimTy::name`], but returns a &str instead of a symbol.\n     ///\n-    /// Used by rustdoc.\n+    /// Used by clippy.\n     pub fn name_str(self) -> &'static str {\n         match self {\n             PrimTy::Int(i) => i.name_str(),"}, {"sha": "60757178bec0b2bf27fb19ea6037471f8620eba3", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -111,7 +111,8 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let body_span = hir_body.value.span;\n         let source_file = source_map.lookup_source_file(body_span.lo());\n         let fn_sig_span = match some_fn_sig.filter(|fn_sig| {\n-            Lrc::ptr_eq(&source_file, &source_map.lookup_source_file(fn_sig.span.hi()))\n+            fn_sig.span.ctxt() == body_span.ctxt()\n+                && Lrc::ptr_eq(&source_file, &source_map.lookup_source_file(fn_sig.span.hi()))\n         }) {\n             Some(fn_sig) => fn_sig.span.with_hi(body_span.lo()),\n             None => body_span.shrink_to_lo(),"}, {"sha": "249f5e835cd78ddae823ff0fd42f3ffe032fffa9", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -240,13 +240,13 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     /// to be).\n     pub(super) fn generate_coverage_spans(\n         mir_body: &'a mir::Body<'tcx>,\n-        fn_sig_span: Span,\n+        fn_sig_span: Span, // Ensured to be same SourceFile and SyntaxContext as `body_span`\n         body_span: Span,\n         basic_coverage_blocks: &'a CoverageGraph,\n     ) -> Vec<CoverageSpan> {\n         let mut coverage_spans = CoverageSpans {\n             mir_body,\n-            fn_sig_span: fn_sig_source_span(fn_sig_span, body_span),\n+            fn_sig_span,\n             body_span,\n             basic_coverage_blocks,\n             sorted_spans_iter: None,\n@@ -731,11 +731,6 @@ pub(super) fn filtered_terminator_span(\n     }\n }\n \n-#[inline]\n-fn fn_sig_source_span(fn_sig_span: Span, body_span: Span) -> Span {\n-    original_sp(fn_sig_span, body_span).with_ctxt(body_span.ctxt())\n-}\n-\n #[inline]\n fn function_source_span(span: Span, body_span: Span) -> Span {\n     let span = original_sp(span, body_span).with_ctxt(body_span.ctxt());"}, {"sha": "e459442dfcfc5a926f21c9839a0a7198c78ce669", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -2810,8 +2810,7 @@ impl<T, A: Allocator> From<Box<[T], A>> for Vec<T, A> {\n     /// assert_eq!(Vec::from(b), vec![1, 2, 3]);\n     /// ```\n     fn from(s: Box<[T], A>) -> Self {\n-        let len = s.len();\n-        Self { buf: RawVec::from_box(s), len }\n+        s.into_vec()\n     }\n }\n "}, {"sha": "a522b7da3bd1c64df67e67a9e29557d5e06c85c5", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -45,8 +45,10 @@ impl_float_to_int!(f64 => u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize);\n macro_rules! impl_from {\n     ($Small: ty, $Large: ty, #[$attr:meta], $doc: expr) => {\n         #[$attr]\n-        #[doc = $doc]\n         impl From<$Small> for $Large {\n+            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n+            // Rustdocs on functions do not.\n+            #[doc = $doc]\n             #[inline]\n             fn from(small: $Small) -> Self {\n                 small as Self\n@@ -383,8 +385,10 @@ use crate::num::NonZeroUsize;\n macro_rules! nzint_impl_from {\n     ($Small: ty, $Large: ty, #[$attr:meta], $doc: expr) => {\n         #[$attr]\n-        #[doc = $doc]\n         impl From<$Small> for $Large {\n+            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n+            // Rustdocs on functions do not.\n+            #[doc = $doc]\n             #[inline]\n             fn from(small: $Small) -> Self {\n                 // SAFETY: input type guarantees the value is non-zero\n@@ -450,10 +454,12 @@ nzint_impl_from! { NonZeroU64, NonZeroI128, #[stable(feature = \"nz_int_conv\", si\n macro_rules! nzint_impl_try_from_int {\n     ($Int: ty, $NonZeroInt: ty, #[$attr:meta], $doc: expr) => {\n         #[$attr]\n-        #[doc = $doc]\n         impl TryFrom<$Int> for $NonZeroInt {\n             type Error = TryFromIntError;\n \n+            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n+            // Rustdocs on functions do not.\n+            #[doc = $doc]\n             #[inline]\n             fn try_from(value: $Int) -> Result<Self, Self::Error> {\n                 Self::new(value).ok_or(TryFromIntError(()))\n@@ -489,10 +495,12 @@ nzint_impl_try_from_int! { isize, NonZeroIsize, #[stable(feature = \"nzint_try_fr\n macro_rules! nzint_impl_try_from_nzint {\n     ($From:ty => $To:ty, $doc: expr) => {\n         #[stable(feature = \"nzint_try_from_nzint_conv\", since = \"1.49.0\")]\n-        #[doc = $doc]\n         impl TryFrom<$From> for $To {\n             type Error = TryFromIntError;\n \n+            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n+            // Rustdocs on functions do not.\n+            #[doc = $doc]\n             #[inline]\n             fn try_from(value: $From) -> Result<Self, Self::Error> {\n                 TryFrom::try_from(value.get()).map(|v| {"}, {"sha": "9b0f9544f8efc2fe06df43048a7a73f7d3953a5a", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -1646,31 +1646,16 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let a = [1, 2, 3];\n-    ///\n-    /// let iter = a.iter();\n-    ///\n-    /// let sum: i32 = iter.take(5).fold(0, |acc, i| acc + i);\n-    ///\n-    /// assert_eq!(sum, 6);\n-    ///\n-    /// // if we try to use iter again, it won't work. The following line\n-    /// // gives \"error: use of moved value: `iter`\n-    /// // assert_eq!(iter.next(), None);\n+    /// let mut words = vec![\"hello\", \"world\", \"of\", \"Rust\"].into_iter();\n     ///\n-    /// // let's try that again\n-    /// let a = [1, 2, 3];\n-    ///\n-    /// let mut iter = a.iter();\n-    ///\n-    /// // instead, we add in a .by_ref()\n-    /// let sum: i32 = iter.by_ref().take(2).fold(0, |acc, i| acc + i);\n+    /// // Take the first two words.\n+    /// let hello_world: Vec<_> = words.by_ref().take(2).collect();\n+    /// assert_eq!(hello_world, vec![\"hello\", \"world\"]);\n     ///\n-    /// assert_eq!(sum, 3);\n-    ///\n-    /// // now this is just fine:\n-    /// assert_eq!(iter.next(), Some(&3));\n-    /// assert_eq!(iter.next(), None);\n+    /// // Collect the rest of the words.\n+    /// // We can only do this because we used `by_ref` earlier.\n+    /// let of_rust: Vec<_> = words.collect();\n+    /// assert_eq!(of_rust, vec![\"of\", \"Rust\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self"}, {"sha": "2f0b32c90d0ee0a585190e264a452997dce0b903", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -2,9 +2,8 @@\n mod tests;\n \n use crate::fmt;\n-use crate::sync::{mutex, MutexGuard, PoisonError};\n+use crate::sync::{mutex, poison, LockResult, MutexGuard, PoisonError};\n use crate::sys_common::condvar as sys;\n-use crate::sys_common::poison::{self, LockResult};\n use crate::time::{Duration, Instant};\n \n /// A type indicating whether a timed wait on a condition variable returned"}, {"sha": "ee35598bab5fe1fb99b38155d4e770ffedf9a3bc", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -166,14 +166,15 @@ pub use self::mutex::{Mutex, MutexGuard};\n #[allow(deprecated)]\n pub use self::once::{Once, OnceState, ONCE_INIT};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::rwlock::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n+pub use self::poison::{LockResult, PoisonError, TryLockError, TryLockResult};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys_common::poison::{LockResult, PoisonError, TryLockError, TryLockResult};\n+pub use self::rwlock::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n \n pub mod mpsc;\n \n mod barrier;\n mod condvar;\n mod mutex;\n mod once;\n+mod poison;\n mod rwlock;"}, {"sha": "2615bea659253aaa7842e0b0fe207e00ca160304", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -6,8 +6,8 @@ use crate::fmt;\n use crate::mem;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n+use crate::sync::{poison, LockResult, TryLockError, TryLockResult};\n use crate::sys_common::mutex as sys;\n-use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n \n /// A mutual exclusion primitive useful for protecting shared data\n ///"}, {"sha": "05e1833c3e5677609c85ed25ced6cb8bfec9dc2d", "filename": "library/std/src/sync/poison.rs", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -3,9 +3,6 @@ use crate::fmt;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::thread;\n \n-#[allow(unused_imports)] // for intra-doc links\n-use crate::sync::{Mutex, RwLock};\n-\n pub struct Flag {\n     failed: AtomicBool,\n }\n@@ -80,6 +77,8 @@ pub struct Guard {\n ///     }\n /// };\n /// ```\n+/// [`Mutex`]: crate::sync::Mutex\n+/// [`RwLock`]: crate::sync::RwLock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PoisonError<T> {\n     guard: T,\n@@ -89,9 +88,11 @@ pub struct PoisonError<T> {\n /// can occur while trying to acquire a lock, from the [`try_lock`] method on a\n /// [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].\n ///\n-/// [`try_lock`]: Mutex::try_lock\n-/// [`try_read`]: RwLock::try_read\n-/// [`try_write`]: RwLock::try_write\n+/// [`try_lock`]: crate::sync::Mutex::try_lock\n+/// [`try_read`]: crate::sync::RwLock::try_read\n+/// [`try_write`]: crate::sync::RwLock::try_write\n+/// [`Mutex`]: crate::sync::Mutex\n+/// [`RwLock`]: crate::sync::RwLock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum TryLockError<T> {\n     /// The lock could not be acquired because another thread failed while holding\n@@ -149,7 +150,8 @@ impl<T> Error for PoisonError<T> {\n impl<T> PoisonError<T> {\n     /// Creates a `PoisonError`.\n     ///\n-    /// This is generally created by methods like [`Mutex::lock`] or [`RwLock::read`].\n+    /// This is generally created by methods like [`Mutex::lock`](crate::sync::Mutex::lock)\n+    /// or [`RwLock::read`](crate::sync::RwLock::read).\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n         PoisonError { guard }", "previous_filename": "library/std/src/sys_common/poison.rs"}, {"sha": "b01bcec1361d7c7986f94be9e856c5ad1ece88ed", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -6,7 +6,7 @@ use crate::fmt;\n use crate::mem;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n-use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n+use crate::sync::{poison, LockResult, TryLockError, TryLockResult};\n use crate::sys_common::rwlock as sys;\n \n /// A reader-writer lock"}, {"sha": "4979bc0b5af77b7179174051529398b3a0312dab", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -59,7 +59,6 @@ pub mod mutex;\n // when generating documentation.\n #[cfg(any(doc, not(windows)))]\n pub mod os_str_bytes;\n-pub mod poison;\n pub mod process;\n pub mod remutex;\n pub mod rwlock;"}, {"sha": "25b56b96ed20f8dd65a710ce7e86791ae808ea2d", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -179,7 +179,7 @@ target | std | host | notes\n `i386-apple-ios` | \u2713 |  | 32-bit x86 iOS\n `i686-apple-darwin` | \u2713 | \u2713 | 32-bit macOS (10.7+, Lion+)\n `i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n-`i686-unknown-uefi` | ? |  | 32-bit UEFI\n+`i686-unknown-uefi` | * |  | 32-bit UEFI\n `i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku\n `i686-unknown-netbsd` | \u2713 | \u2713 | NetBSD/i386 with SSE2\n `i686-unknown-openbsd` | \u2713 | \u2713 | 32-bit OpenBSD\n@@ -228,7 +228,7 @@ target | std | host | notes\n `x86_64-unknown-none-hermitkernel` | ? |  | HermitCore kernel\n `x86_64-unknown-l4re-uclibc` | ? |  |\n `x86_64-unknown-openbsd` | \u2713 | \u2713 | 64-bit OpenBSD\n-`x86_64-unknown-uefi` | ? |  |\n+`x86_64-unknown-uefi` | * |  | 64-bit UEFI\n `x86_64-uwp-windows-gnu` | \u2713 |  |\n `x86_64-uwp-windows-msvc` | \u2713 |  |\n `x86_64-wrs-vxworks` | ? |  |"}, {"sha": "9d7d8a7cb8aef567d06831a2aebebd84c1b57bf3", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -963,6 +963,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n \n             use crate::clean::Variant;\n             if let clean::VariantItem(Variant::Struct(ref s)) = *variant.kind {\n+                toggle_open(w, \"fields\");\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,\n@@ -996,6 +997,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                     }\n                 }\n                 w.write_str(\"</div></div>\");\n+                toggle_close(w);\n             }\n             render_stability_since(w, variant, it, cx.tcx());\n         }"}, {"sha": "5dfc206eb2e2dda2f69f1a38513e7d7f649c52bf", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -455,6 +455,15 @@ function hideThemeButtonState() {\n         handleHashes(ev);\n     }\n \n+    function openParentDetails(elem) {\n+        while (elem) {\n+            if (elem.tagName === \"DETAILS\") {\n+                elem.open = true;\n+            }\n+            elem = elem.parentNode;\n+        }\n+    }\n+\n     function expandSection(id) {\n         var elem = document.getElementById(id);\n         if (elem && isHidden(elem)) {\n@@ -469,6 +478,8 @@ function hideThemeButtonState() {\n                     // The element is not visible, we need to make it appear!\n                     collapseDocs(collapses[0], \"show\");\n                 }\n+                // Open all ancestor <details> to make this element visible.\n+                openParentDetails(h3.parentNode);\n             }\n         }\n     }\n@@ -1009,7 +1020,7 @@ function hideThemeButtonState() {\n             if (hasClass(relatedDoc, \"item-info\")) {\n                 relatedDoc = relatedDoc.nextElementSibling;\n             }\n-            if (hasClass(relatedDoc, \"docblock\") || hasClass(relatedDoc, \"sub-variant\")) {\n+            if (hasClass(relatedDoc, \"docblock\")) {\n                 if (mode === \"toggle\") {\n                     if (hasClass(relatedDoc, \"hidden-by-usual-hider\")) {\n                         action = \"show\";\n@@ -1318,8 +1329,6 @@ function hideThemeButtonState() {\n                 if (hasClass(e, \"type-decl\")) {\n                     // We do something special for these\n                     return;\n-                } else if (hasClass(e, \"sub-variant\")) {\n-                    otherMessage = \"&nbsp;Show&nbsp;fields\";\n                 } else if (hasClass(e, \"non-exhaustive\")) {\n                     otherMessage = \"&nbsp;This&nbsp;\";\n                     if (hasClass(e, \"non-exhaustive-struct\")) {\n@@ -1351,7 +1360,6 @@ function hideThemeButtonState() {\n         }\n \n         onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n-        onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n \n         autoCollapse(getSettingValue(\"collapse\") === \"true\");\n "}, {"sha": "44fb531100ae4dcc04e31b2ed011f52be7059398", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -1046,10 +1046,11 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n }\n \n .sub-variant, .sub-variant > h3 {\n-\tmargin-top: 1px !important;\n+\tmargin-top: 0px !important;\n+\tpadding-top: 1px;\n }\n \n-#main > .sub-variant > h3 {\n+#main > details > .sub-variant > h3 {\n \tfont-size: 15px;\n \tmargin-left: 25px;\n \tmargin-bottom: 5px;"}, {"sha": "9fab435de49c8b8c8739cbf7d3ec37224e7ab411", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -935,6 +935,9 @@ window.initSearch = function(rawSearchIndex) {\n                 });\n                 current += 1;\n             });\n+            var SHIFT = 16;\n+            var CTRL = 17;\n+            var ALT = 18;\n \n             var currentTab = searchState.currentTab;\n             if (e.which === 38) { // up\n@@ -967,10 +970,10 @@ window.initSearch = function(rawSearchIndex) {\n                 e.preventDefault();\n             } else if (e.which === 13) { // return\n                 if (actives[currentTab].length) {\n-                    document.location.href =\n-                        actives[currentTab][0].getElementsByTagName(\"a\")[0].href;\n+                    var elem = actives[currentTab][0].getElementsByTagName(\"a\")[0];\n+                    document.location.href = elem.href;\n                 }\n-            } else if (e.which === 16) { // shift\n+            } else if ([SHIFT, CTRL, ALT].indexOf(e.which) !== -1) {\n                 // Does nothing, it's just to avoid losing \"focus\" on the highlighted element.\n             } else if (actives[currentTab].length > 0) {\n                 removeClass(actives[currentTab][0], \"highlighted\");"}, {"sha": "eeba3e3f9070df5b75ea8ff101f5fd106c64c4be", "filename": "src/test/rustdoc-gui/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Ftest%2Frustdoc-gui%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Ftest%2Frustdoc-gui%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flib.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -29,7 +29,9 @@ pub struct Foo;\n \n impl Foo {\n     #[must_use]\n-    pub fn must_use(&self) -> bool { true }\n+    pub fn must_use(&self) -> bool {\n+        true\n+    }\n }\n \n /// Just a normal enum.\n@@ -85,3 +87,7 @@ pub trait AnotherOne {\n /// let x = 12;\n /// ```\n pub fn check_list_code_block() {}\n+\n+pub enum AnEnum {\n+    WithVariants { and: usize, sub: usize, variants: usize },\n+}"}, {"sha": "8986f72636a40bfd594e53e0e4d15e816b631bf6", "filename": "src/test/rustdoc/item-hide-threshold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb491ed23937aef876622e4beb68ae95938b3bf9/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -62,7 +62,8 @@ pub struct PrivStruct {\n }\n \n // @has 'item_hide_threshold/enum.Enum.html'\n-// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show fields'\n pub enum Enum {\n     A, B, C,\n     D {"}, {"sha": "7570212a544b8e973a7d57be3657aae6465028a7", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=bb491ed23937aef876622e4beb68ae95938b3bf9", "patch": "@@ -1 +1 @@\n-Subproject commit 7be06139b632ee615fc18af04dd67947e2c794b2\n+Subproject commit 7570212a544b8e973a7d57be3657aae6465028a7"}]}