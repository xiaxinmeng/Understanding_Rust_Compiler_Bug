{"sha": "aa6a72f4a5f53f7e81a5cb15f1f129e697667964", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNmE3MmY0YTVmNTNmN2U4MWE1Y2IxNWYxZjEyOWU2OTc2Njc5NjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T18:13:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-14T12:40:42Z"}, "message": "TAIT: use hack in ->HIR to avoid more changes", "tree": {"sha": "b13844576d0b4c66105335773659959e6d8bce3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b13844576d0b4c66105335773659959e6d8bce3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa6a72f4a5f53f7e81a5cb15f1f129e697667964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6a72f4a5f53f7e81a5cb15f1f129e697667964", "html_url": "https://github.com/rust-lang/rust/commit/aa6a72f4a5f53f7e81a5cb15f1f129e697667964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8e176b69d7f96da6c9832acf11ca9c95271815", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8e176b69d7f96da6c9832acf11ca9c95271815", "html_url": "https://github.com/rust-lang/rust/commit/0e8e176b69d7f96da6c9832acf11ca9c95271815"}], "stats": {"total": 77, "additions": 46, "deletions": 31}, "files": [{"sha": "9a840022a3de13a6db290ef3703297c95b9c7a11", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=aa6a72f4a5f53f7e81a5cb15f1f129e697667964", "patch": "@@ -452,7 +452,6 @@ impl<'a> LoweringContext<'a> {\n                     | ItemKind::Union(_, ref generics)\n                     | ItemKind::Enum(_, ref generics)\n                     | ItemKind::TyAlias(_, ref generics)\n-                    | ItemKind::OpaqueTy(_, ref generics)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics"}, {"sha": "356adcdf2a9aecc96c008bb5807dc2a725642029", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=aa6a72f4a5f53f7e81a5cb15f1f129e697667964", "patch": "@@ -335,20 +335,22 @@ impl LoweringContext<'_> {\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n-            ItemKind::TyAlias(ref t, ref generics) => hir::ItemKind::TyAlias(\n-                self.lower_ty(t, ImplTraitContext::disallowed()),\n-                self.lower_generics(generics, ImplTraitContext::disallowed()),\n-            ),\n-            ItemKind::OpaqueTy(ref b, ref generics) => hir::ItemKind::OpaqueTy(\n-                hir::OpaqueTy {\n-                    generics: self.lower_generics(generics,\n-                        ImplTraitContext::OpaqueTy(None)),\n-                    bounds: self.lower_param_bounds(b,\n-                        ImplTraitContext::OpaqueTy(None)),\n-                    impl_trait_fn: None,\n-                    origin: hir::OpaqueTyOrigin::TypeAlias,\n+            ItemKind::TyAlias(ref ty, ref generics) => match ty.kind.opaque_top_hack() {\n+                None => {\n+                    let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                    let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                    hir::ItemKind::TyAlias(ty, generics)\n                 },\n-            ),\n+                Some(bounds) => {\n+                    let ty = hir::OpaqueTy {\n+                        generics: self.lower_generics(generics, ImplTraitContext::OpaqueTy(None)),\n+                        bounds: self.lower_param_bounds(bounds, ImplTraitContext::OpaqueTy(None)),\n+                        impl_trait_fn: None,\n+                        origin: hir::OpaqueTyOrigin::TypeAlias,\n+                    };\n+                    hir::ItemKind::OpaqueTy(ty)\n+                }\n+            }\n             ItemKind::Enum(ref enum_definition, ref generics) => {\n                 hir::ItemKind::Enum(\n                     hir::EnumDef {\n@@ -914,16 +916,20 @@ impl LoweringContext<'_> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            ImplItemKind::TyAlias(ref ty) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n-                hir::ImplItemKind::TyAlias(self.lower_ty(ty, ImplTraitContext::disallowed())),\n-            ),\n-            ImplItemKind::OpaqueTy(ref bounds) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n-                hir::ImplItemKind::OpaqueTy(\n-                    self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n-                ),\n-            ),\n+            ImplItemKind::TyAlias(ref ty) => {\n+                let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n+                let kind = match ty.kind.opaque_top_hack() {\n+                    None => {\n+                        let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                        hir::ImplItemKind::TyAlias(ty)\n+                    }\n+                    Some(bs) => {\n+                        let bounds = self.lower_param_bounds(bs, ImplTraitContext::disallowed());\n+                        hir::ImplItemKind::OpaqueTy(bounds)\n+                    }\n+                };\n+                (generics, kind)\n+            },\n             ImplItemKind::Macro(..) => bug!(\"`TyMac` should have been expanded by now\"),\n         };\n \n@@ -948,11 +954,13 @@ impl LoweringContext<'_> {\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n-            kind: match i.kind {\n+            kind: match &i.kind {\n                 ImplItemKind::Const(..) => hir::AssocItemKind::Const,\n-                ImplItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n-                ImplItemKind::OpaqueTy(..) => hir::AssocItemKind::OpaqueTy,\n-                ImplItemKind::Method(ref sig, _) => hir::AssocItemKind::Method {\n+                ImplItemKind::TyAlias(ty) => match ty.kind.opaque_top_hack() {\n+                    None => hir::AssocItemKind::Type,\n+                    Some(_) => hir::AssocItemKind::OpaqueTy,\n+                },\n+                ImplItemKind::Method(sig, _) => hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n                 ImplItemKind::Macro(..) => unimplemented!(),"}, {"sha": "cfd90f50b1b044154a62fc3f0677a059ee34bec8", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=aa6a72f4a5f53f7e81a5cb15f1f129e697667964", "patch": "@@ -107,7 +107,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ItemKind::Mod(..) | ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n-            ItemKind::OpaqueTy(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n+            ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n             ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n             ItemKind::Fn(sig, generics, body) if sig.header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n@@ -239,8 +239,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ImplItemKind::Method(..) |\n             ImplItemKind::Const(..) => DefPathData::ValueNs(ii.ident.name),\n-            ImplItemKind::TyAlias(..) |\n-            ImplItemKind::OpaqueTy(..) => DefPathData::TypeNs(ii.ident.name),\n+            ImplItemKind::TyAlias(..) => DefPathData::TypeNs(ii.ident.name),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };\n "}, {"sha": "d358efbe54364d49ee323ee9b6022bb53916e7ba", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6a72f4a5f53f7e81a5cb15f1f129e697667964/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aa6a72f4a5f53f7e81a5cb15f1f129e697667964", "patch": "@@ -1815,6 +1815,15 @@ impl TyKind {\n             false\n         }\n     }\n+\n+    /// HACK(type_alias_impl_trait, Centril): A temporary crutch used\n+    /// in lowering to avoid making larger changes there and beyond.\n+    pub fn opaque_top_hack(&self) -> Option<&GenericBounds> {\n+        match self {\n+            Self::ImplTrait(_, bounds) => Some(bounds),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Syntax used to declare a trait object."}]}