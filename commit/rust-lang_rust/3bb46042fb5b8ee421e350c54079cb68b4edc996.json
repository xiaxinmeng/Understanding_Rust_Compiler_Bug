{"sha": "3bb46042fb5b8ee421e350c54079cb68b4edc996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYjQ2MDQyZmI1YjhlZTQyMWUzNTBjNTQwNzljYjY4YjRlZGM5OTY=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2020-05-01T15:59:24Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2020-05-01T15:59:24Z"}, "message": "Validate uses of self and super", "tree": {"sha": "d464e978f3bde80b73e57bc83adcf9154e7169c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d464e978f3bde80b73e57bc83adcf9154e7169c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bb46042fb5b8ee421e350c54079cb68b4edc996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb46042fb5b8ee421e350c54079cb68b4edc996", "html_url": "https://github.com/rust-lang/rust/commit/3bb46042fb5b8ee421e350c54079cb68b4edc996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bb46042fb5b8ee421e350c54079cb68b4edc996/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d49c7dfa3ae33e610905522caf5734c7cbca3ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d49c7dfa3ae33e610905522caf5734c7cbca3ac", "html_url": "https://github.com/rust-lang/rust/commit/6d49c7dfa3ae33e610905522caf5734c7cbca3ac"}], "stats": {"total": 253, "additions": 178, "deletions": 75}, "files": [{"sha": "2096f12f1b6ae5ba2ac6a9888142d8e7c533ce6b", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -1251,6 +1251,8 @@ pub struct PathSegment {\n impl PathSegment {\n     pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n     pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n+    pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n     pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn type_arg_list(&self) -> Option<TypeArgList> { support::child(&self.syntax) }"}, {"sha": "e075cd8017e2b5de4e1f1f93481ce0169c6f14ab", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 71, "deletions": 48, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -96,7 +96,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n                 ast::RecordField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n                 ast::Visibility(it) => validate_visibility(it, &mut errors),\n                 ast::RangeExpr(it) => validate_range_expr(it, &mut errors),\n-                ast::PathSegment(it) => validate_crate_keyword_in_path_segment(it, &mut errors),\n+                ast::PathSegment(it) => validate_path_keywords(it, &mut errors),\n                 _ => (),\n             }\n         }\n@@ -224,59 +224,82 @@ fn validate_range_expr(expr: ast::RangeExpr, errors: &mut Vec<SyntaxError>) {\n     }\n }\n \n-fn validate_crate_keyword_in_path_segment(\n-    segment: ast::PathSegment,\n-    errors: &mut Vec<SyntaxError>,\n-) {\n-    const ERR_MSG: &str = \"The `crate` keyword is only allowed as the first segment of a path\";\n+fn validate_path_keywords(segment: ast::PathSegment, errors: &mut Vec<SyntaxError>) {\n+    use ast::PathSegmentKind;\n \n-    let crate_token = match segment.crate_token() {\n-        None => return,\n-        Some(it) => it,\n-    };\n+    let path = segment.parent_path();\n+    let is_path_start = segment.coloncolon_token().is_none() && path.qualifier().is_none();\n+\n+    if let Some(token) = segment.self_token() {\n+        if !is_path_start {\n+            errors.push(SyntaxError::new(\n+                \"The `self` keyword is only allowed as the first segment of a path\",\n+                token.text_range(),\n+            ));\n+        }\n+    } else if let Some(token) = segment.crate_token() {\n+        if !is_path_start || use_prefix(path).is_some() {\n+            errors.push(SyntaxError::new(\n+                \"The `crate` keyword is only allowed as the first segment of a path\",\n+                token.text_range(),\n+            ));\n+        }\n+    } else if let Some(token) = segment.super_token() {\n+        if !all_supers(&path) {\n+            errors.push(SyntaxError::new(\n+                \"The `super` keyword may only be preceded by other `super`s\",\n+                token.text_range(),\n+            ));\n+            return;\n+        }\n \n-    // Disallow both ::crate and foo::crate\n-    let mut path = segment.parent_path();\n-    if segment.coloncolon_token().is_some() || path.qualifier().is_some() {\n-        errors.push(SyntaxError::new(ERR_MSG, crate_token.text_range()));\n-        return;\n+        let mut curr_path = path;\n+        while let Some(prefix) = use_prefix(curr_path) {\n+            if !all_supers(&prefix) {\n+                errors.push(SyntaxError::new(\n+                    \"The `super` keyword may only be preceded by other `super`s\",\n+                    token.text_range(),\n+                ));\n+                return;\n+            }\n+            curr_path = prefix;\n+        }\n     }\n \n-    // For expressions and types, validation is complete, but we still have\n-    // to handle invalid UseItems like this:\n-    //\n-    //      use foo:{crate::bar::baz};\n-    //\n-    // To handle this we must inspect the parent `UseItem`s and `UseTree`s\n-    // but right now we're looking deep inside the nested `Path` nodes because\n-    // `Path`s are left-associative:\n-    //\n-    //   ((crate)::bar)::baz)\n-    //       ^ current value of path\n-    //\n-    // So we need to climb to the top\n-    while let Some(parent) = path.parent_path() {\n-        path = parent;\n+    fn use_prefix(mut path: ast::Path) -> Option<ast::Path> {\n+        for node in path.syntax().ancestors().skip(1) {\n+            match_ast! {\n+                match node {\n+                    ast::UseTree(it) => if let Some(tree_path) = it.path() {\n+                        // Even a top-level path exists within a `UseTree` so we must explicitly\n+                        // allow our path but disallow anything else\n+                        if tree_path != path {\n+                            return Some(tree_path);\n+                        }\n+                    },\n+                    ast::UseTreeList(_it) => continue,\n+                    ast::Path(parent) => path = parent,\n+                    _ => return None,\n+                }\n+            };\n+        }\n+        return None;\n     }\n \n-    // Now that we've found the whole path we need to see if there's a prefix\n-    // somewhere in the UseTree hierarchy. This check is arbitrarily deep\n-    // because rust allows arbitrary nesting like so:\n-    //\n-    // use {foo::{{{{crate::bar::baz}}}}};\n-    for node in path.syntax().ancestors().skip(1) {\n-        match_ast! {\n-            match node {\n-                ast::UseTree(it) => if let Some(tree_path) = it.path() {\n-                    // Even a top-level path exists within a `UseTree` so we must explicitly\n-                    // allow our path but disallow anything else\n-                    if tree_path != path {\n-                        errors.push(SyntaxError::new(ERR_MSG, crate_token.text_range()));\n-                    }\n-                },\n-                ast::UseTreeList(_it) => continue,\n-                _ => return,\n-            }\n+    fn all_supers(path: &ast::Path) -> bool {\n+        let segment = match path.segment() {\n+            Some(it) => it,\n+            None => return false,\n         };\n+\n+        if segment.kind() != Some(PathSegmentKind::SuperKw) {\n+            return false;\n+        }\n+\n+        if let Some(ref subpath) = path.qualifier() {\n+            return all_supers(subpath);\n+        }\n+\n+        return true;\n     }\n }"}, {"sha": "d0360c4679b90282be6b00869ab14ed2f45aeb53", "filename": "crates/ra_syntax/test_data/parser/err/0041_illegal_super_keyword_location.rast", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rast?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -0,0 +1,70 @@\n+SOURCE_FILE@0..67\n+  USE_ITEM@0..12\n+    USE_KW@0..3 \"use\"\n+    WHITESPACE@3..4 \" \"\n+    USE_TREE@4..11\n+      PATH@4..11\n+        PATH_SEGMENT@4..11\n+          COLON2@4..6 \"::\"\n+          SUPER_KW@6..11 \"super\"\n+    SEMICOLON@11..12 \";\"\n+  WHITESPACE@12..13 \"\\n\"\n+  USE_ITEM@13..26\n+    USE_KW@13..16 \"use\"\n+    WHITESPACE@16..17 \" \"\n+    USE_TREE@17..25\n+      PATH@17..25\n+        PATH@17..18\n+          PATH_SEGMENT@17..18\n+            NAME_REF@17..18\n+              IDENT@17..18 \"a\"\n+        COLON2@18..20 \"::\"\n+        PATH_SEGMENT@20..25\n+          SUPER_KW@20..25 \"super\"\n+    SEMICOLON@25..26 \";\"\n+  WHITESPACE@26..27 \"\\n\"\n+  USE_ITEM@27..47\n+    USE_KW@27..30 \"use\"\n+    WHITESPACE@30..31 \" \"\n+    USE_TREE@31..46\n+      PATH@31..46\n+        PATH@31..39\n+          PATH@31..36\n+            PATH_SEGMENT@31..36\n+              SUPER_KW@31..36 \"super\"\n+          COLON2@36..38 \"::\"\n+          PATH_SEGMENT@38..39\n+            NAME_REF@38..39\n+              IDENT@38..39 \"a\"\n+        COLON2@39..41 \"::\"\n+        PATH_SEGMENT@41..46\n+          SUPER_KW@41..46 \"super\"\n+    SEMICOLON@46..47 \";\"\n+  WHITESPACE@47..48 \"\\n\"\n+  USE_ITEM@48..66\n+    USE_KW@48..51 \"use\"\n+    WHITESPACE@51..52 \" \"\n+    USE_TREE@52..65\n+      PATH@52..53\n+        PATH_SEGMENT@52..53\n+          NAME_REF@52..53\n+            IDENT@52..53 \"a\"\n+      COLON2@53..55 \"::\"\n+      USE_TREE_LIST@55..65\n+        L_CURLY@55..56 \"{\"\n+        USE_TREE@56..64\n+          PATH@56..64\n+            PATH@56..61\n+              PATH_SEGMENT@56..61\n+                SUPER_KW@56..61 \"super\"\n+            COLON2@61..63 \"::\"\n+            PATH_SEGMENT@63..64\n+              NAME_REF@63..64\n+                IDENT@63..64 \"b\"\n+        R_CURLY@64..65 \"}\"\n+    SEMICOLON@65..66 \";\"\n+  WHITESPACE@66..67 \"\\n\"\n+error 6..11: The `super` keyword may only be preceded by other `super`s\n+error 20..25: The `super` keyword may only be preceded by other `super`s\n+error 41..46: The `super` keyword may only be preceded by other `super`s\n+error 56..61: The `super` keyword may only be preceded by other `super`s"}, {"sha": "bd4d58042638c50925be17bc78fbe502298903a7", "filename": "crates/ra_syntax/test_data/parser/err/0041_illegal_super_keyword_location.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0041_illegal_super_keyword_location.rs?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -0,0 +1,4 @@\n+use ::super;\n+use a::super;\n+use super::a::super;\n+use a::{super::b};"}, {"sha": "4f382b06c4cc65ee326fb115200530249c820371", "filename": "crates/ra_syntax/test_data/parser/err/0042_illegal_self_keyword_location.rast", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rast?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -0,0 +1,27 @@\n+SOURCE_FILE@0..25\n+  USE_ITEM@0..11\n+    USE_KW@0..3 \"use\"\n+    WHITESPACE@3..4 \" \"\n+    USE_TREE@4..10\n+      PATH@4..10\n+        PATH_SEGMENT@4..10\n+          COLON2@4..6 \"::\"\n+          SELF_KW@6..10 \"self\"\n+    SEMICOLON@10..11 \";\"\n+  WHITESPACE@11..12 \"\\n\"\n+  USE_ITEM@12..24\n+    USE_KW@12..15 \"use\"\n+    WHITESPACE@15..16 \" \"\n+    USE_TREE@16..23\n+      PATH@16..23\n+        PATH@16..17\n+          PATH_SEGMENT@16..17\n+            NAME_REF@16..17\n+              IDENT@16..17 \"a\"\n+        COLON2@17..19 \"::\"\n+        PATH_SEGMENT@19..23\n+          SELF_KW@19..23 \"self\"\n+    SEMICOLON@23..24 \";\"\n+  WHITESPACE@24..25 \"\\n\"\n+error 6..10: The `self` keyword is only allowed as the first segment of a path\n+error 19..23: The `self` keyword is only allowed as the first segment of a path"}, {"sha": "b9e1d7d8be2c51acf40109edb284bd2603200807", "filename": "crates/ra_syntax/test_data/parser/err/0042_illegal_self_keyword_location.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0042_illegal_self_keyword_location.rs?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -0,0 +1,2 @@\n+use ::self;\n+use a::self;"}, {"sha": "05d9c05ad59892bd166d6d210749323ac6eb6dae", "filename": "crates/ra_syntax/test_data/parser/ok/0013_use_path_self_super.rast", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rast?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@0..65\n+SOURCE_FILE@0..38\n   USE_ITEM@0..14\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n@@ -31,27 +31,3 @@ SOURCE_FILE@0..65\n             IDENT@33..36 \"bar\"\n     SEMICOLON@36..37 \";\"\n   WHITESPACE@37..38 \"\\n\"\n-  USE_ITEM@38..64\n-    USE_KW@38..41 \"use\"\n-    WHITESPACE@41..42 \" \"\n-    USE_TREE@42..63\n-      PATH@42..63\n-        PATH@42..58\n-          PATH@42..51\n-            PATH@42..48\n-              PATH_SEGMENT@42..48\n-                COLON2@42..44 \"::\"\n-                SELF_KW@44..48 \"self\"\n-            COLON2@48..50 \"::\"\n-            PATH_SEGMENT@50..51\n-              NAME_REF@50..51\n-                IDENT@50..51 \"a\"\n-          COLON2@51..53 \"::\"\n-          PATH_SEGMENT@53..58\n-            SUPER_KW@53..58 \"super\"\n-        COLON2@58..60 \"::\"\n-        PATH_SEGMENT@60..63\n-          NAME_REF@60..63\n-            IDENT@60..63 \"bar\"\n-    SEMICOLON@63..64 \";\"\n-  WHITESPACE@64..65 \"\\n\""}, {"sha": "9d9eb99175b368177bb680ebaa6dcb78992e0e51", "filename": "crates/ra_syntax/test_data/parser/ok/0013_use_path_self_super.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0013_use_path_self_super.rs?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -1,3 +1,2 @@\n use self::foo;\n use super::super::bar;\n-use ::self::a::super::bar;"}, {"sha": "1abb62f6faecdde90dd13da2f75fe43e54097a40", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bb46042fb5b8ee421e350c54079cb68b4edc996/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb46042fb5b8ee421e350c54079cb68b4edc996/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=3bb46042fb5b8ee421e350c54079cb68b4edc996", "patch": "@@ -595,7 +595,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             qualifier: Path,\n         }\n         struct PathSegment {\n-            T![::], T![crate], T![<], NameRef, TypeArgList, ParamList, RetType, PathType, T![>]\n+            T![::], T![crate], T![self], T![super], T![<], NameRef, TypeArgList, ParamList, RetType, PathType, T![>]\n         }\n         struct TypeArgList {\n             T![::],"}]}