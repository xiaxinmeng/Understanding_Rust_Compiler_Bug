{"sha": "c7669dff2af371338004cb92cd7d757bc2961d21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NjY5ZGZmMmFmMzcxMzM4MDA0Y2I5MmNkN2Q3NTdiYzI5NjFkMjE=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-17T12:02:11Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:43Z"}, "message": "rustc_codegen_llvm: use safe references for ArchiveChild.", "tree": {"sha": "9e78d1a1bbd917b59a93a0dc919469c74003a799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e78d1a1bbd917b59a93a0dc919469c74003a799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7669dff2af371338004cb92cd7d757bc2961d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7669dff2af371338004cb92cd7d757bc2961d21", "html_url": "https://github.com/rust-lang/rust/commit/c7669dff2af371338004cb92cd7d757bc2961d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7669dff2af371338004cb92cd7d757bc2961d21/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e551ed90331e236dc8fa6dadeeaa49dcdcb0c2ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e551ed90331e236dc8fa6dadeeaa49dcdcb0c2ef", "html_url": "https://github.com/rust-lang/rust/commit/e551ed90331e236dc8fa6dadeeaa49dcdcb0c2ef"}], "stats": {"total": 94, "additions": 56, "deletions": 38}, "files": [{"sha": "d290753a5bc29580527f78060b15742c6ae1691d", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7669dff2af371338004cb92cd7d757bc2961d21/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7669dff2af371338004cb92cd7d757bc2961d21/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=c7669dff2af371338004cb92cd7d757bc2961d21", "patch": "@@ -14,7 +14,7 @@ use std::ffi::{CString, CStr};\n use std::io;\n use std::mem;\n use std::path::{Path, PathBuf};\n-use std::ptr::{self, NonNull};\n+use std::ptr;\n use std::str;\n \n use back::bytecode::RLIB_BYTECODE_EXTENSION;\n@@ -246,7 +246,7 @@ impl<'a> ArchiveBuilder<'a> {\n                     let name = CString::new(child_name)?;\n                     members.push(llvm::LLVMRustArchiveMemberNew(ptr::null(),\n                                                                 name.as_ptr(),\n-                                                                NonNull::new(child.raw())));\n+                                                                Some(child.raw)));\n                     strings.push(name);\n                 }\n             }\n@@ -284,7 +284,7 @@ impl<'a> ArchiveBuilder<'a> {\n                             let name = CString::new(child_name)?;\n                             let m = llvm::LLVMRustArchiveMemberNew(ptr::null(),\n                                                                    name.as_ptr(),\n-                                                                   NonNull::new(child.raw()));\n+                                                                   Some(child.raw));\n                             members.push(m);\n                             strings.push(name);\n                         }"}, {"sha": "324d52bbef4bcc836f3a7f1c883b8d63080fbd13", "filename": "src/librustc_codegen_llvm/llvm/archive_ro.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c7669dff2af371338004cb92cd7d757bc2961d21/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7669dff2af371338004cb92cd7d757bc2961d21/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs?ref=c7669dff2af371338004cb92cd7d757bc2961d21", "patch": "@@ -11,24 +11,22 @@\n //! A wrapper around LLVM's archive (.a) code\n \n use std::ffi::CString;\n-use std::marker;\n use std::path::Path;\n use std::slice;\n use std::str;\n \n pub struct ArchiveRO {\n-    raw: &'static mut super::Archive,\n+    pub raw: &'static mut super::Archive,\n }\n \n unsafe impl Send for ArchiveRO {}\n \n pub struct Iter<'a> {\n-    ptr: &'a mut super::ArchiveIterator<'a>,\n+    raw: &'a mut super::ArchiveIterator<'a>,\n }\n \n pub struct Child<'a> {\n-    ptr: super::ArchiveChildRef,\n-    _data: marker::PhantomData<&'a ArchiveRO>,\n+    pub raw: &'a mut super::ArchiveChild<'a>,\n }\n \n impl ArchiveRO {\n@@ -59,14 +57,10 @@ impl ArchiveRO {\n         }\n     }\n \n-    pub fn raw(&self) -> &super::Archive {\n-        self.raw\n-    }\n-\n     pub fn iter(&self) -> Iter {\n         unsafe {\n             Iter {\n-                ptr: super::LLVMRustArchiveIteratorNew(self.raw),\n+                raw: super::LLVMRustArchiveIteratorNew(self.raw),\n             }\n         }\n     }\n@@ -84,22 +78,19 @@ impl<'a> Iterator for Iter<'a> {\n     type Item = Result<Child<'a>, String>;\n \n     fn next(&mut self) -> Option<Result<Child<'a>, String>> {\n-        let ptr = unsafe { super::LLVMRustArchiveIteratorNext(self.ptr) };\n-        if ptr.is_null() {\n-            super::last_error().map(Err)\n-        } else {\n-            Some(Ok(Child {\n-                ptr,\n-                _data: marker::PhantomData,\n-            }))\n+        unsafe {\n+            match super::LLVMRustArchiveIteratorNext(self.raw) {\n+                Some(raw) => Some(Ok(Child { raw })),\n+                None => super::last_error().map(Err),\n+            }\n         }\n     }\n }\n \n impl<'a> Drop for Iter<'a> {\n     fn drop(&mut self) {\n         unsafe {\n-            super::LLVMRustArchiveIteratorFree(&mut *(self.ptr as *mut _));\n+            super::LLVMRustArchiveIteratorFree(&mut *(self.raw as *mut _));\n         }\n     }\n }\n@@ -108,7 +99,7 @@ impl<'a> Child<'a> {\n     pub fn name(&self) -> Option<&'a str> {\n         unsafe {\n             let mut name_len = 0;\n-            let name_ptr = super::LLVMRustArchiveChildName(self.ptr, &mut name_len);\n+            let name_ptr = super::LLVMRustArchiveChildName(self.raw, &mut name_len);\n             if name_ptr.is_null() {\n                 None\n             } else {\n@@ -121,23 +112,19 @@ impl<'a> Child<'a> {\n     pub fn data(&self) -> &'a [u8] {\n         unsafe {\n             let mut data_len = 0;\n-            let data_ptr = super::LLVMRustArchiveChildData(self.ptr, &mut data_len);\n+            let data_ptr = super::LLVMRustArchiveChildData(self.raw, &mut data_len);\n             if data_ptr.is_null() {\n                 panic!(\"failed to read data from archive child\");\n             }\n             slice::from_raw_parts(data_ptr as *const u8, data_len as usize)\n         }\n     }\n-\n-    pub fn raw(&self) -> super::ArchiveChildRef {\n-        self.ptr\n-    }\n }\n \n impl<'a> Drop for Child<'a> {\n     fn drop(&mut self) {\n         unsafe {\n-            super::LLVMRustArchiveChildFree(self.ptr);\n+            super::LLVMRustArchiveChildFree(&mut *(self.raw as *mut _));\n         }\n     }\n }"}, {"sha": "c139868544df78952f571dbb009f1cfa351f14f1", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c7669dff2af371338004cb92cd7d757bc2961d21/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7669dff2af371338004cb92cd7d757bc2961d21/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=c7669dff2af371338004cb92cd7d757bc2961d21", "patch": "@@ -25,7 +25,6 @@ use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_ulonglong, c_void};\n \n use std::marker::PhantomData;\n-use std::ptr::NonNull;\n \n use super::RustString;\n \n@@ -383,6 +382,7 @@ pub enum ThreadLocalMode {\n }\n \n extern { type Opaque; }\n+#[repr(C)]\n struct InvariantOpaque<'a> {\n     _marker: PhantomData<&'a mut &'a ()>,\n     _opaque: Opaque,\n@@ -397,22 +397,27 @@ extern { pub type Metadata; }\n extern { pub type BasicBlock; }\n extern { pub type Builder; }\n extern { pub type MemoryBuffer; }\n+#[repr(C)]\n pub struct PassManager<'a>(InvariantOpaque<'a>);\n extern { pub type PassManagerBuilder; }\n extern { pub type ObjectFile; }\n+#[repr(C)]\n pub struct SectionIterator<'a>(InvariantOpaque<'a>);\n extern { pub type Pass; }\n extern { pub type TargetMachine; }\n extern { pub type Archive; }\n+#[repr(C)]\n pub struct ArchiveIterator<'a>(InvariantOpaque<'a>);\n-extern { pub type ArchiveChild; }\n-pub type ArchiveChildRef = *mut ArchiveChild;\n+#[repr(C)]\n+pub struct ArchiveChild<'a>(InvariantOpaque<'a>);\n extern { pub type Twine; }\n extern { pub type DiagnosticInfo; }\n extern { pub type SMDiagnostic; }\n extern { pub type RustArchiveMember; }\n pub type RustArchiveMemberRef = *mut RustArchiveMember;\n+#[repr(C)]\n pub struct OperandBundleDef<'a>(InvariantOpaque<'a>);\n+#[repr(C)]\n pub struct Linker<'a>(InvariantOpaque<'a>);\n \n pub type DiagnosticHandler = unsafe extern \"C\" fn(&DiagnosticInfo, *mut c_void);\n@@ -474,7 +479,6 @@ pub mod debuginfo {\n \n extern { pub type ModuleBuffer; }\n \n-#[allow(improper_ctypes)] // TODO remove this (use for NonNull)\n extern \"C\" {\n     // Create and destroy contexts.\n     pub fn LLVMRustContextCreate(shouldDiscardNames: bool) -> &'static mut Context;\n@@ -1403,10 +1407,15 @@ extern \"C\" {\n                                                 -> &'a Value;\n     pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;\n     pub fn LLVMRustDIBuilderCreateOpPlusUconst() -> i64;\n+}\n \n+#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n+extern \"C\" {\n     pub fn LLVMRustWriteTypeToString(Type: &Type, s: &RustString);\n     pub fn LLVMRustWriteValueToString(value_ref: &Value, s: &RustString);\n+}\n \n+extern \"C\" {\n     pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&Value>;\n     pub fn LLVMIsAConstantFP(value_ref: &Value) -> Option<&Value>;\n \n@@ -1471,42 +1480,64 @@ extern \"C\" {\n \n     pub fn LLVMRustOpenArchive(path: *const c_char) -> Option<&'static mut Archive>;\n     pub fn LLVMRustArchiveIteratorNew(AR: &'a Archive) -> &'a mut ArchiveIterator<'a>;\n-    pub fn LLVMRustArchiveIteratorNext(AIR: &ArchiveIterator) -> ArchiveChildRef;\n-    pub fn LLVMRustArchiveChildName(ACR: ArchiveChildRef, size: &mut size_t) -> *const c_char;\n-    pub fn LLVMRustArchiveChildData(ACR: ArchiveChildRef, size: &mut size_t) -> *const c_char;\n-    pub fn LLVMRustArchiveChildFree(ACR: ArchiveChildRef);\n+    pub fn LLVMRustArchiveIteratorNext(AIR: &ArchiveIterator<'a>) -> Option<&'a mut ArchiveChild<'a>>;\n+    pub fn LLVMRustArchiveChildName(ACR: &ArchiveChild, size: &mut size_t) -> *const c_char;\n+    pub fn LLVMRustArchiveChildData(ACR: &ArchiveChild, size: &mut size_t) -> *const c_char;\n+    pub fn LLVMRustArchiveChildFree(ACR: &'a mut ArchiveChild<'a>);\n     pub fn LLVMRustArchiveIteratorFree(AIR: &'a mut ArchiveIterator<'a>);\n     pub fn LLVMRustDestroyArchive(AR: &'static mut Archive);\n \n     pub fn LLVMRustGetSectionName(SI: &SectionIterator, data: &mut *const c_char) -> size_t;\n+}\n \n+#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n+extern \"C\" {\n     pub fn LLVMRustWriteTwineToString(T: &Twine, s: &RustString);\n+}\n \n+extern \"C\" {\n     pub fn LLVMContextSetDiagnosticHandler(C: &Context,\n                                            Handler: DiagnosticHandler,\n                                            DiagnosticContext: *mut c_void);\n+}\n \n+#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n+extern \"C\" {\n     pub fn LLVMRustUnpackOptimizationDiagnostic(DI: &'a DiagnosticInfo,\n                                                 pass_name_out: &RustString,\n                                                 function_out: &mut Option<&'a Value>,\n                                                 loc_line_out: &mut c_uint,\n                                                 loc_column_out: &mut c_uint,\n                                                 loc_filename_out: &RustString,\n                                                 message_out: &RustString);\n+}\n+\n+extern \"C\" {\n     pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: &'a DiagnosticInfo,\n                                              cookie_out: &mut c_uint,\n                                              message_out: &mut Option<&'a Twine>,\n                                              instruction_out: &mut Option<&'a Value>);\n+}\n \n+#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n+extern \"C\" {\n     pub fn LLVMRustWriteDiagnosticInfoToString(DI: &DiagnosticInfo, s: &RustString);\n+}\n+\n+extern \"C\" {\n     pub fn LLVMRustGetDiagInfoKind(DI: &DiagnosticInfo) -> DiagnosticKind;\n \n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: &Context,\n                                                  H: InlineAsmDiagHandler,\n                                                  CX: *mut c_void);\n+}\n \n+#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n+extern \"C\" {\n     pub fn LLVMRustWriteSMDiagnosticToString(d: &SMDiagnostic, s: &RustString);\n+}\n \n+extern \"C\" {\n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,\n                                 Members: *const RustArchiveMemberRef,\n@@ -1515,7 +1546,7 @@ extern \"C\" {\n                                 -> LLVMRustResult;\n     pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,\n                                     Name: *const c_char,\n-                                    Child: Option<NonNull<ArchiveChild>>)\n+                                    Child: Option<&ArchiveChild>)\n                                     -> RustArchiveMemberRef;\n     pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n "}]}