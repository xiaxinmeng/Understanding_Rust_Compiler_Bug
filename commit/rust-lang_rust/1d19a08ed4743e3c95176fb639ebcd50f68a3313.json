{"sha": "1d19a08ed4743e3c95176fb639ebcd50f68a3313", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTlhMDhlZDQ3NDNlM2M5NTE3NmZiNjM5ZWJjZDUwZjY4YTMzMTM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-16T23:53:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-16T23:53:39Z"}, "message": "Format the last expression-statement as expression (#3631)", "tree": {"sha": "ded66ecd5fbd914809bfec3bfcda35bb8537b0ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded66ecd5fbd914809bfec3bfcda35bb8537b0ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d19a08ed4743e3c95176fb639ebcd50f68a3313", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdBtaDCRBK7hj4Ov3rIwAAdHIIAAu6IMi3Ug+Re5KTa2U86p6W\nrb2QEJRD3a+JUhpQBxxJ2Z2v6qmvLKYTH2m3b0dcKqBEhu7tvxFdd4cnUFi3ClwO\nblJPVSyWG8WBWs9Lo8S2sdJXIEmio5RHnKRrbluyCcq6I450z3rNd/i7S5ComLi9\nFi5CQDIGPSUadFOGS9fD9zVSQmnQgZDAA1dcvkJTsJEytmNY5VoybRtreqdK+PKr\nqhPgaOoRUTHXjT5bIbo9674rZEJYiFAHPljp5x4YP2K079ep8XxIlsaBQqQBS0Fk\n+94EwsbP0a7FyPLwaKjMYf88Ki+zJDgTZPzyhf92xYjxAph4fkggCEekTc/uG9I=\n=0uw4\n-----END PGP SIGNATURE-----\n", "payload": "tree ded66ecd5fbd914809bfec3bfcda35bb8537b0ed\nparent 84c23565901c0d9b7af41d372b9f2d1e2d6c6394\nauthor Seiichi Uchida <seuchida@gmail.com> 1560729219 +0900\ncommitter GitHub <noreply@github.com> 1560729219 +0900\n\nFormat the last expression-statement as expression (#3631)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d19a08ed4743e3c95176fb639ebcd50f68a3313", "html_url": "https://github.com/rust-lang/rust/commit/1d19a08ed4743e3c95176fb639ebcd50f68a3313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d19a08ed4743e3c95176fb639ebcd50f68a3313/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "html_url": "https://github.com/rust-lang/rust/commit/84c23565901c0d9b7af41d372b9f2d1e2d6c6394"}], "stats": {"total": 402, "additions": 315, "deletions": 87}, "files": [{"sha": "d7640bf98caf451340819bcb43fa0d6cf5a34db4", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -33,7 +33,7 @@ use crate::types::{rewrite_path, PathContext};\n use crate::utils::{\n     colon_spaces, contains_skip, count_newlines, first_line_ends_with, inner_attributes,\n     last_line_extendable, last_line_width, mk_sp, outer_attributes, ptr_vec_to_ref_vec,\n-    semicolon_for_expr, semicolon_for_stmt, unicode_str_width, wrap_str,\n+    semicolon_for_expr, unicode_str_width, wrap_str,\n };\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n@@ -568,28 +568,6 @@ fn rewrite_block(\n     result\n }\n \n-impl Rewrite for ast::Stmt {\n-    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        skip_out_of_file_lines_range!(context, self.span());\n-\n-        let result = match self.node {\n-            ast::StmtKind::Local(ref local) => local.rewrite(context, shape),\n-            ast::StmtKind::Expr(ref ex) | ast::StmtKind::Semi(ref ex) => {\n-                let suffix = if semicolon_for_stmt(context, self) {\n-                    \";\"\n-                } else {\n-                    \"\"\n-                };\n-\n-                let shape = shape.sub_width(suffix.len())?;\n-                format_expr(ex, ExprType::Statement, context, shape).map(|s| s + suffix)\n-            }\n-            ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) => None,\n-        };\n-        result.and_then(|res| recover_comment_removed(res, self.span(), context))\n-    }\n-}\n-\n // Rewrite condition if the given expression has one.\n pub(crate) fn rewrite_cond(\n     context: &RewriteContext<'_>,\n@@ -1189,16 +1167,6 @@ pub(crate) fn stmt_is_expr(stmt: &ast::Stmt) -> bool {\n     }\n }\n \n-pub(crate) fn stmt_is_if(stmt: &ast::Stmt) -> bool {\n-    match stmt.node {\n-        ast::StmtKind::Expr(ref e) => match e.node {\n-            ast::ExprKind::If(..) => true,\n-            _ => false,\n-        },\n-        _ => false,\n-    }\n-}\n-\n pub(crate) fn is_unsafe_block(block: &ast::Block) -> bool {\n     if let ast::BlockCheckMode::Unsafe(..) = block.rules {\n         true"}, {"sha": "1b7ac780129f80baa8c83baa0e02d806e93f117c", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -18,8 +18,7 @@ use crate::comment::{\n use crate::config::lists::*;\n use crate::config::{BraceStyle, Config, IndentStyle, Version};\n use crate::expr::{\n-    format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with,\n-    ExprType, RhsTactics,\n+    is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with, RhsTactics,\n };\n use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use crate::macros::{rewrite_macro, MacroPosition};\n@@ -28,6 +27,7 @@ use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::{Indent, Shape};\n use crate::source_map::{LineRangeUtils, SpanUtils};\n use crate::spanned::Spanned;\n+use crate::stmt::Stmt;\n use crate::utils::*;\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n@@ -394,20 +394,8 @@ impl<'a> FmtVisitor<'a> {\n             return None;\n         }\n \n-        let stmt = block.stmts.first()?;\n-        let res = match stmt_expr(stmt) {\n-            Some(e) => {\n-                let suffix = if semicolon_for_expr(&self.get_context(), e) {\n-                    \";\"\n-                } else {\n-                    \"\"\n-                };\n-\n-                format_expr(e, ExprType::Statement, &self.get_context(), self.shape())\n-                    .map(|s| s + suffix)?\n-            }\n-            None => stmt.rewrite(&self.get_context(), self.shape())?,\n-        };\n+        let res = Stmt::from_ast_node(block.stmts.first()?, true)\n+            .rewrite(&self.get_context(), self.shape())?;\n \n         let width = self.block_indent.width() + fn_str.len() + res.len() + 5;\n         if !res.contains('\\n') && width <= self.config.max_width() {"}, {"sha": "1b4ce66331372683fbe28c2316bbca2bddffc14b", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -72,6 +72,7 @@ mod shape;\n pub(crate) mod source_file;\n pub(crate) mod source_map;\n mod spanned;\n+mod stmt;\n mod string;\n #[cfg(test)]\n mod test;"}, {"sha": "dbda00f00ce9b62e4175febad44163604de62c6b", "filename": "src/stmt.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstmt.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -0,0 +1,112 @@\n+use syntax::ast;\n+use syntax_pos::Span;\n+\n+use crate::comment::recover_comment_removed;\n+use crate::config::Version;\n+use crate::expr::{format_expr, ExprType};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::LineRangeUtils;\n+use crate::spanned::Spanned;\n+use crate::utils::semicolon_for_stmt;\n+\n+pub(crate) struct Stmt<'a> {\n+    inner: &'a ast::Stmt,\n+    is_last: bool,\n+}\n+\n+impl<'a> Spanned for Stmt<'a> {\n+    fn span(&self) -> Span {\n+        self.inner.span()\n+    }\n+}\n+\n+impl<'a> Stmt<'a> {\n+    pub(crate) fn as_ast_node(&self) -> &ast::Stmt {\n+        self.inner\n+    }\n+\n+    pub(crate) fn to_item(&self) -> Option<&ast::Item> {\n+        match self.inner.node {\n+            ast::StmtKind::Item(ref item) => Some(&**item),\n+            _ => None,\n+        }\n+    }\n+\n+    pub(crate) fn from_ast_node(inner: &'a ast::Stmt, is_last: bool) -> Self {\n+        Stmt { inner, is_last }\n+    }\n+\n+    pub(crate) fn from_ast_nodes<I>(iter: I) -> Vec<Self>\n+    where\n+        I: Iterator<Item = &'a ast::Stmt>,\n+    {\n+        let mut result = vec![];\n+        let mut iter = iter.peekable();\n+        while iter.peek().is_some() {\n+            result.push(Stmt {\n+                inner: iter.next().unwrap(),\n+                is_last: iter.peek().is_none(),\n+            })\n+        }\n+        result\n+    }\n+\n+    fn is_last_expr(&self) -> bool {\n+        if !self.is_last {\n+            return false;\n+        }\n+\n+        match self.as_ast_node().node {\n+            ast::StmtKind::Expr(ref expr) => match expr.node {\n+                ast::ExprKind::Ret(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Break(..) => {\n+                    false\n+                }\n+                _ => true,\n+            },\n+            _ => false,\n+        }\n+    }\n+}\n+\n+impl<'a> Rewrite for Stmt<'a> {\n+    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        let expr_type = if context.config.version() == Version::Two && self.is_last_expr() {\n+            ExprType::SubExpression\n+        } else {\n+            ExprType::Statement\n+        };\n+        format_stmt(context, shape, self.as_ast_node(), expr_type)\n+    }\n+}\n+\n+impl Rewrite for ast::Stmt {\n+    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        format_stmt(context, shape, self, ExprType::Statement)\n+    }\n+}\n+\n+fn format_stmt(\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+    stmt: &ast::Stmt,\n+    expr_type: ExprType,\n+) -> Option<String> {\n+    skip_out_of_file_lines_range!(context, stmt.span());\n+\n+    let result = match stmt.node {\n+        ast::StmtKind::Local(ref local) => local.rewrite(context, shape),\n+        ast::StmtKind::Expr(ref ex) | ast::StmtKind::Semi(ref ex) => {\n+            let suffix = if semicolon_for_stmt(context, stmt) {\n+                \";\"\n+            } else {\n+                \"\"\n+            };\n+\n+            let shape = shape.sub_width(suffix.len())?;\n+            format_expr(ex, expr_type, context, shape).map(|s| s + suffix)\n+        }\n+        ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) => None,\n+    };\n+    result.and_then(|res| recover_comment_removed(res, stmt.span(), context))\n+}"}, {"sha": "19200f9592c5609569e5ed5046ba14e9227241ef", "filename": "src/visitor.rs", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -7,8 +7,7 @@ use syntax::{ast, visit};\n use crate::attr::*;\n use crate::comment::{CodeCharKind, CommentCodeSlices};\n use crate::config::file_lines::FileName;\n-use crate::config::{BraceStyle, Config, Version};\n-use crate::expr::{format_expr, ExprType};\n+use crate::config::{BraceStyle, Config};\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n     rewrite_associated_impl_type, rewrite_associated_type, rewrite_existential_impl_type,\n@@ -20,6 +19,7 @@ use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::{Indent, Shape};\n use crate::source_map::{LineRangeUtils, SpanUtils};\n use crate::spanned::Spanned;\n+use crate::stmt::Stmt;\n use crate::utils::{\n     self, contains_skip, count_newlines, depr_skip_annotation, get_skip_macro_names,\n     inner_attributes, mk_sp, ptr_vec_to_ref_vec, rewrite_ident, stmt_expr,\n@@ -89,23 +89,27 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         Shape::indented(self.block_indent, self.config)\n     }\n \n-    fn visit_stmt(&mut self, stmt: &ast::Stmt) {\n+    fn visit_stmt(&mut self, stmt: &Stmt<'_>) {\n         debug!(\n             \"visit_stmt: {:?} {:?}\",\n-            self.source_map.lookup_char_pos(stmt.span.lo()),\n-            self.source_map.lookup_char_pos(stmt.span.hi())\n+            self.source_map.lookup_char_pos(stmt.span().lo()),\n+            self.source_map.lookup_char_pos(stmt.span().hi())\n         );\n \n-        match stmt.node {\n+        match stmt.as_ast_node().node {\n             ast::StmtKind::Item(ref item) => {\n                 self.visit_item(item);\n                 // Handle potential `;` after the item.\n-                self.format_missing(stmt.span.hi());\n+                self.format_missing(stmt.span().hi());\n             }\n             ast::StmtKind::Local(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Semi(..) => {\n-                let attrs = get_attrs_from_stmt(stmt);\n+                let attrs = get_attrs_from_stmt(stmt.as_ast_node());\n                 if contains_skip(attrs) {\n-                    self.push_skipped_with_span(attrs, stmt.span(), get_span_without_attrs(stmt));\n+                    self.push_skipped_with_span(\n+                        attrs,\n+                        stmt.span(),\n+                        get_span_without_attrs(stmt.as_ast_node()),\n+                    );\n                 } else {\n                     let shape = self.shape();\n                     let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n@@ -115,11 +119,15 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             ast::StmtKind::Mac(ref mac) => {\n                 let (ref mac, _macro_style, ref attrs) = **mac;\n                 if self.visit_attrs(attrs, ast::AttrStyle::Outer) {\n-                    self.push_skipped_with_span(attrs, stmt.span(), get_span_without_attrs(stmt));\n+                    self.push_skipped_with_span(\n+                        attrs,\n+                        stmt.span(),\n+                        get_span_without_attrs(stmt.as_ast_node()),\n+                    );\n                 } else {\n                     self.visit_mac(mac, None, MacroPosition::Statement);\n                 }\n-                self.format_missing(stmt.span.hi());\n+                self.format_missing(stmt.span().hi());\n             }\n         }\n     }\n@@ -717,50 +725,29 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.visit_items_with_reordering(&ptr_vec_to_ref_vec(&m.items));\n     }\n \n-    fn walk_stmts(&mut self, stmts: &[ast::Stmt]) {\n-        fn to_stmt_item(stmt: &ast::Stmt) -> Option<&ast::Item> {\n-            match stmt.node {\n-                ast::StmtKind::Item(ref item) => Some(&**item),\n-                _ => None,\n-            }\n-        }\n-\n+    fn walk_stmts(&mut self, stmts: &[Stmt<'_>]) {\n         if stmts.is_empty() {\n             return;\n         }\n \n         // Extract leading `use ...;`.\n         let items: Vec<_> = stmts\n             .iter()\n-            .take_while(|stmt| to_stmt_item(stmt).map_or(false, is_use_item))\n-            .filter_map(|stmt| to_stmt_item(stmt))\n+            .take_while(|stmt| stmt.to_item().map_or(false, is_use_item))\n+            .filter_map(|stmt| stmt.to_item())\n             .collect();\n \n         if items.is_empty() {\n-            // The `if` expression at the end of the block should be formatted in a single\n-            // line if possible.\n-            if self.config.version() == Version::Two\n-                && stmts.len() == 1\n-                && crate::expr::stmt_is_if(&stmts[0])\n-                && !contains_skip(get_attrs_from_stmt(&stmts[0]))\n-            {\n-                let shape = self.shape();\n-                let rewrite = self.with_context(|ctx| {\n-                    format_expr(stmt_expr(&stmts[0])?, ExprType::SubExpression, ctx, shape)\n-                });\n-                self.push_rewrite(stmts[0].span(), rewrite);\n-            } else {\n-                self.visit_stmt(&stmts[0]);\n-                self.walk_stmts(&stmts[1..]);\n-            }\n+            self.visit_stmt(&stmts[0]);\n+            self.walk_stmts(&stmts[1..]);\n         } else {\n             self.visit_items_with_reordering(&items);\n             self.walk_stmts(&stmts[items.len()..]);\n         }\n     }\n \n     fn walk_block_stmts(&mut self, b: &ast::Block) {\n-        self.walk_stmts(&b.stmts)\n+        self.walk_stmts(&Stmt::from_ast_nodes(b.stmts.iter()))\n     }\n \n     fn format_mod("}, {"sha": "469ab621567b5ce959b8d5dfd72c1bc8fce8c13b", "filename": "tests/source/fn-single-line/version_one.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Fsource%2Ffn-single-line%2Fversion_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Fsource%2Ffn-single-line%2Fversion_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-single-line%2Fversion_one.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-fn_single_line: true\n+// rustfmt-version: One\n // Test single-line functions.\n \n fn foo_expr() {", "previous_filename": "tests/source/fn-single-line.rs"}, {"sha": "bf381ff106514a24fd93ffa2fa3c9092be272c9f", "filename": "tests/source/fn-single-line/version_two.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Fsource%2Ffn-single-line%2Fversion_two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Fsource%2Ffn-single-line%2Fversion_two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-single-line%2Fversion_two.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -0,0 +1,80 @@\n+// rustfmt-fn_single_line: true\n+// rustfmt-version: Two\n+// Test single-line functions.\n+\n+fn foo_expr() {\n+    1\n+}\n+\n+fn foo_stmt() {\n+    foo();\n+}\n+\n+fn foo_decl_local()  {\n+    let z = 5;\n+   }\n+\n+fn    foo_decl_item(x: &mut i32) {\n+    x = 3;\n+}\n+\n+   fn empty()     {\n+\n+}\n+\n+fn foo_return() -> String {\n+    \"yay\"\n+}\n+\n+fn foo_where() -> T where T: Sync {\n+    let x = 2;\n+}\n+\n+fn fooblock() {\n+    {\n+        \"inner-block\"\n+    }\n+}\n+\n+fn fooblock2(x: i32) {\n+    let z = match x {\n+        _ => 2,\n+    };\n+}\n+\n+fn comment() {\n+    // this is a test comment\n+    1\n+}\n+\n+fn comment2() {\n+    // multi-line comment\n+    let z = 2;\n+    1\n+}\n+\n+fn only_comment() {\n+    // Keep this here\n+}\n+\n+fn aaaaaaaaaaaaaaaaa_looooooooooooooooooooooong_name() {\n+    let z = \"aaaaaaawwwwwwwwwwwwwwwwwwwwwwwwwwww\";\n+}\n+\n+fn lots_of_space                      ()                                                           {\n+                           1                 \n+}\n+\n+fn mac() -> Vec<i32> { vec![] }\n+\n+trait CoolTypes {\n+    fn dummy(&self) {\n+    }\n+}\n+\n+trait CoolerTypes { fn dummy(&self) { \n+}\n+}\n+\n+fn Foo<T>() where T: Bar {\n+}"}, {"sha": "013b2cd72161536db814228137f3aa7a6d930da7", "filename": "tests/target/fn-single-line/version_one.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Ftarget%2Ffn-single-line%2Fversion_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Ftarget%2Ffn-single-line%2Fversion_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-single-line%2Fversion_one.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-fn_single_line: true\n+// rustfmt-version: One\n // Test single-line functions.\n \n fn foo_expr() { 1 }", "previous_filename": "tests/target/fn-single-line.rs"}, {"sha": "b8053d4c2f500a37cf1e5cf70abb54248e530e64", "filename": "tests/target/fn-single-line/version_two.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Ftarget%2Ffn-single-line%2Fversion_two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Ftarget%2Ffn-single-line%2Fversion_two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-single-line%2Fversion_two.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -0,0 +1,67 @@\n+// rustfmt-fn_single_line: true\n+// rustfmt-version: Two\n+// Test single-line functions.\n+\n+fn foo_expr() { 1 }\n+\n+fn foo_stmt() { foo(); }\n+\n+fn foo_decl_local() { let z = 5; }\n+\n+fn foo_decl_item(x: &mut i32) { x = 3; }\n+\n+fn empty() {}\n+\n+fn foo_return() -> String { \"yay\" }\n+\n+fn foo_where() -> T\n+where\n+    T: Sync,\n+{\n+    let x = 2;\n+}\n+\n+fn fooblock() { { \"inner-block\" } }\n+\n+fn fooblock2(x: i32) {\n+    let z = match x {\n+        _ => 2,\n+    };\n+}\n+\n+fn comment() {\n+    // this is a test comment\n+    1\n+}\n+\n+fn comment2() {\n+    // multi-line comment\n+    let z = 2;\n+    1\n+}\n+\n+fn only_comment() {\n+    // Keep this here\n+}\n+\n+fn aaaaaaaaaaaaaaaaa_looooooooooooooooooooooong_name() {\n+    let z = \"aaaaaaawwwwwwwwwwwwwwwwwwwwwwwwwwww\";\n+}\n+\n+fn lots_of_space() { 1 }\n+\n+fn mac() -> Vec<i32> { vec![] }\n+\n+trait CoolTypes {\n+    fn dummy(&self) {}\n+}\n+\n+trait CoolerTypes {\n+    fn dummy(&self) {}\n+}\n+\n+fn Foo<T>()\n+where\n+    T: Bar,\n+{\n+}"}, {"sha": "8ab28304732c1ae53cc131e3a628ae201452d2d0", "filename": "tests/target/issue-3614/version_one.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Ftarget%2Fissue-3614%2Fversion_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Ftarget%2Fissue-3614%2Fversion_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3614%2Fversion_one.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-version: One\n+\n+fn main() {\n+    let toto = || {\n+        if true {\n+            42\n+        } else {\n+            24\n+        }\n+    };\n+\n+    {\n+        T\n+    }\n+}"}, {"sha": "5d6f8e7a313b7f4ee0e24f41a8a1514bb18f813f", "filename": "tests/target/issue-3614/version_two.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Ftarget%2Fissue-3614%2Fversion_two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d19a08ed4743e3c95176fb639ebcd50f68a3313/tests%2Ftarget%2Fissue-3614%2Fversion_two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3614%2Fversion_two.rs?ref=1d19a08ed4743e3c95176fb639ebcd50f68a3313", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-version: Two\n+\n+fn main() {\n+    let toto = || {\n+        if true { 42 } else { 24 }\n+    };\n+    { T }\n+}"}]}