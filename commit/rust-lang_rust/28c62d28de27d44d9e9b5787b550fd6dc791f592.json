{"sha": "28c62d28de27d44d9e9b5787b550fd6dc791f592", "node_id": "C_kwDOAAsO6NoAKDI4YzYyZDI4ZGUyN2Q0NGQ5ZTliNTc4N2I1NTBmZDZkYzc5MWY1OTI", "commit": {"author": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-08-31T21:28:28Z"}, "committer": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-09-08T11:12:13Z"}, "message": "fix the suggestion of format for asm_sub_register\n\tmodified:   compiler/rustc_typeck/src/check/intrinsicck.rs\n\tmodified:   src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr\n\tmodified:   src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr\n\tmodified:   src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr\n\tmodified:   src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr\n\tmodified:   src/test/ui/asm/type-check-1.rs\n\tmodified:   src/test/ui/asm/type-check-1.stderr\n\tmodified:   src/test/ui/asm/x86_64/type-check-3.stderr", "tree": {"sha": "f621ad8438d99002096a6e9e4159e20e849afdbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f621ad8438d99002096a6e9e4159e20e849afdbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28c62d28de27d44d9e9b5787b550fd6dc791f592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28c62d28de27d44d9e9b5787b550fd6dc791f592", "html_url": "https://github.com/rust-lang/rust/commit/28c62d28de27d44d9e9b5787b550fd6dc791f592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28c62d28de27d44d9e9b5787b550fd6dc791f592/comments", "author": null, "committer": null, "parents": [{"sha": "4fd4de7ea358ad6fc28c5780533ea8ccc09e1006", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd4de7ea358ad6fc28c5780533ea8ccc09e1006", "html_url": "https://github.com/rust-lang/rust/commit/4fd4de7ea358ad6fc28c5780533ea8ccc09e1006"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "d8fe63dbf084aee940e8bfb7a283a647c6e6b754", "filename": "compiler/rustc_typeck/src/check/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28c62d28de27d44d9e9b5787b550fd6dc791f592/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c62d28de27d44d9e9b5787b550fd6dc791f592/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=28c62d28de27d44d9e9b5787b550fd6dc791f592", "patch": "@@ -333,10 +333,10 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                         let mut err = lint.build(msg);\n                         err.span_label(expr.span, \"for this argument\");\n                         err.help(&format!(\n-                            \"use the `{suggested_modifier}` modifier to have the register formatted as `{suggested_result}`\",\n+                            \"use `{{{idx}:{suggested_modifier}}}` to have the register formatted as `{suggested_result}`\",\n                         ));\n                         err.help(&format!(\n-                            \"or use the `{default_modifier}` modifier to keep the default formatting of `{default_result}`\",\n+                            \"or use `{{{idx}:{default_modifier}}}` to keep the default formatting of `{default_result}`\",\n                         ));\n                         err.emit();\n                     },"}, {"sha": "49292982eec7c99dfdc19dfde108d74a2b21026f", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=28c62d28de27d44d9e9b5787b550fd6dc791f592", "patch": "@@ -5,89 +5,89 @@ LL |         asm!(\"{}\", in(reg) 0u8);\n    |               ^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:50:15\n    |\n LL |         asm!(\"{}\", in(reg) 0u16);\n    |               ^^           ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:52:15\n    |\n LL |         asm!(\"{}\", in(reg) 0i32);\n    |               ^^           ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:54:15\n    |\n LL |         asm!(\"{}\", in(reg) 0f32);\n    |               ^^           ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:57:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0i16);\n    |               ^^            ---- for this argument\n    |\n-   = help: use the `h` modifier to have the register formatted as `h0`\n-   = help: or use the `v` modifier to keep the default formatting of `v0`\n+   = help: use `{0:h}` to have the register formatted as `h0`\n+   = help: or use `{0:v}` to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:59:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0f32);\n    |               ^^            ---- for this argument\n    |\n-   = help: use the `s` modifier to have the register formatted as `s0`\n-   = help: or use the `v` modifier to keep the default formatting of `v0`\n+   = help: use `{0:s}` to have the register formatted as `s0`\n+   = help: or use `{0:v}` to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:61:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0f64);\n    |               ^^            ---- for this argument\n    |\n-   = help: use the `d` modifier to have the register formatted as `d0`\n-   = help: or use the `v` modifier to keep the default formatting of `v0`\n+   = help: use `{0:d}` to have the register formatted as `d0`\n+   = help: or use `{0:v}` to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:63:15\n    |\n LL |         asm!(\"{}\", in(vreg_low16) 0f64);\n    |               ^^                  ---- for this argument\n    |\n-   = help: use the `d` modifier to have the register formatted as `d0`\n-   = help: or use the `v` modifier to keep the default formatting of `v0`\n+   = help: use `{0:d}` to have the register formatted as `d0`\n+   = help: or use `{0:v}` to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:66:15\n    |\n LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    |               ^^^ ^^^           ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:68:15\n    |\n LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n    |               ^^^                 ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n error: type `i128` cannot be used with this register class\n   --> $DIR/type-check-3.rs:73:28"}, {"sha": "5dac693cc2740063d03e182ad3fd4237b0284fe8", "filename": "src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=28c62d28de27d44d9e9b5787b550fd6dc791f592", "patch": "@@ -190,8 +190,8 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "5dac693cc2740063d03e182ad3fd4237b0284fe8", "filename": "src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=28c62d28de27d44d9e9b5787b550fd6dc791f592", "patch": "@@ -190,8 +190,8 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "b29b74bac80b1d075938ab02f2a5636181dc3d74", "filename": "src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=28c62d28de27d44d9e9b5787b550fd6dc791f592", "patch": "@@ -190,8 +190,8 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `e` modifier to have the register formatted as `eax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:e}` to have the register formatted as `eax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "b29b74bac80b1d075938ab02f2a5636181dc3d74", "filename": "src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=28c62d28de27d44d9e9b5787b550fd6dc791f592", "patch": "@@ -190,8 +190,8 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `e` modifier to have the register formatted as `eax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:e}` to have the register formatted as `eax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "366038fea2340ac5ddb2d6d6db1167c4c299f8c7", "filename": "src/test/ui/asm/x86_64/type-check-3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28c62d28de27d44d9e9b5787b550fd6dc791f592/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr?ref=28c62d28de27d44d9e9b5787b550fd6dc791f592", "patch": "@@ -45,35 +45,35 @@ LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    |               ^^^ ^^^           ---- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `x` modifier to have the register formatted as `ax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:x}` to have the register formatted as `ax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:36:15\n    |\n LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n    |               ^^^                 ---- for this argument\n    |\n-   = help: use the `x` modifier to have the register formatted as `ax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:x}` to have the register formatted as `ax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:38:15\n    |\n LL |         asm!(\"{}\", in(reg) 0i32);\n    |               ^^           ---- for this argument\n    |\n-   = help: use the `e` modifier to have the register formatted as `eax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:e}` to have the register formatted as `eax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:41:15\n    |\n LL |         asm!(\"{}\", in(ymm_reg) 0i64);\n    |               ^^               ---- for this argument\n    |\n-   = help: use the `x` modifier to have the register formatted as `xmm0`\n-   = help: or use the `y` modifier to keep the default formatting of `ymm0`\n+   = help: use `{0:x}` to have the register formatted as `xmm0`\n+   = help: or use `{0:y}` to keep the default formatting of `ymm0`\n \n error: type `i8` cannot be used with this register class\n   --> $DIR/type-check-3.rs:52:28"}]}