{"sha": "74204a0ce70eb8c0d128adc52fdad416d9c3fb86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MjA0YTBjZTcwZWI4YzBkMTI4YWRjNTJmZGFkNDE2ZDljM2ZiODY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-12T18:16:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-12T18:16:31Z"}, "message": "Rollup merge of #39740 - jimmycuadra:rustdoc-empty-stability, r=aturon\n\nrustdoc: Only include a stability span if needed.\n\nThis patch gets rid of the empty stability boxes in docs by only including the span that creates it when the item actually has a stability class.\n\nHere are images of the issue on `std::process::Output`:\n\nBefore:\n\n<img width=\"340\" alt=\"before\" src=\"https://cloud.githubusercontent.com/assets/122457/22853638/ff88d1b2-f010-11e6-90d6-bf3d10e2fffa.png\">\n\nAfter:\n\n<img width=\"333\" alt=\"after\" src=\"https://cloud.githubusercontent.com/assets/122457/22853639/06bfe7cc-f011-11e6-9892-f0ea2cc6ec90.png\">\n\nThis is my first non-trivial patch to Rust, so I'm sure some of my approach is not idiomatic. Let me know how you'd like me to adjust!", "tree": {"sha": "33ea3ee10442ca6ae7a542f68a1bc60fe08626ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ea3ee10442ca6ae7a542f68a1bc60fe08626ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74204a0ce70eb8c0d128adc52fdad416d9c3fb86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74204a0ce70eb8c0d128adc52fdad416d9c3fb86", "html_url": "https://github.com/rust-lang/rust/commit/74204a0ce70eb8c0d128adc52fdad416d9c3fb86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74204a0ce70eb8c0d128adc52fdad416d9c3fb86/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0095ec25cc3563e2f3d2237342b4504e0257f8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0095ec25cc3563e2f3d2237342b4504e0257f8a9", "html_url": "https://github.com/rust-lang/rust/commit/0095ec25cc3563e2f3d2237342b4504e0257f8a9"}, {"sha": "1fa9dbc00e8d5eff8f698097afb112c142bb8da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa9dbc00e8d5eff8f698097afb112c142bb8da0", "html_url": "https://github.com/rust-lang/rust/commit/1fa9dbc00e8d5eff8f698097afb112c142bb8da0"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "751ed7d443d290bc04652de2c7c783a7999cb79e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74204a0ce70eb8c0d128adc52fdad416d9c3fb86/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74204a0ce70eb8c0d128adc52fdad416d9c3fb86/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=74204a0ce70eb8c0d128adc52fdad416d9c3fb86", "patch": "@@ -327,17 +327,24 @@ impl Item {\n         }\n     }\n \n-    pub fn stability_class(&self) -> String {\n-        self.stability.as_ref().map(|ref s| {\n-            let mut base = match s.level {\n-                stability::Unstable => \"unstable\".to_string(),\n-                stability::Stable => String::new(),\n-            };\n+    pub fn stability_class(&self) -> Option<String> {\n+        self.stability.as_ref().and_then(|ref s| {\n+            let mut classes = Vec::with_capacity(2);\n+\n+            if s.level == stability::Unstable {\n+                classes.push(\"unstable\");\n+            }\n+\n             if !s.deprecated_since.is_empty() {\n-                base.push_str(\" deprecated\");\n+                classes.push(\"deprecated\");\n             }\n-            base\n-        }).unwrap_or(String::new())\n+\n+            if classes.len() != 0 {\n+                Some(classes.join(\" \"))\n+            } else {\n+                None\n+            }\n+        })\n     }\n \n     pub fn stable_since(&self) -> Option<&str> {"}, {"sha": "ae4c94d4b38c096feb09e98b92b86a48c0528ae6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74204a0ce70eb8c0d128adc52fdad416d9c3fb86/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74204a0ce70eb8c0d128adc52fdad416d9c3fb86/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=74204a0ce70eb8c0d128adc52fdad416d9c3fb86", "patch": "@@ -1827,7 +1827,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        stab_docs = stab_docs,\n                        docs = shorter(Some(&Markdown(doc_value).to_string())),\n                        class = myitem.type_(),\n-                       stab = myitem.stability_class(),\n+                       stab = myitem.stability_class().unwrap_or(\"\".to_string()),\n                        unsafety_flag = unsafety_flag,\n                        href = item_path(myitem.type_(), myitem.name.as_ref().unwrap()),\n                        title_type = myitem.type_(),\n@@ -2378,13 +2378,16 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 write!(w, \"<span id='{id}' class='{item_type}'>\n                            <span id='{ns_id}' class='invisible'>\n                            <code>{name}: {ty}</code>\n-                           </span></span><span class='stab {stab}'></span>\",\n+                           </span></span>\",\n                        item_type = ItemType::StructField,\n                        id = id,\n                        ns_id = ns_id,\n-                       stab = field.stability_class(),\n                        name = field.name.as_ref().unwrap(),\n                        ty = ty)?;\n+                if let Some(stability_class) = field.stability_class() {\n+                    write!(w, \"<span class='stab {stab}'></span>\",\n+                        stab = stability_class)?;\n+                }\n                 document(w, cx, field)?;\n             }\n         }\n@@ -2415,11 +2418,14 @@ fn item_union(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         write!(w, \"<h2 class='fields'>Fields</h2>\")?;\n         for (field, ty) in fields {\n             write!(w, \"<span id='{shortty}.{name}' class='{shortty}'><code>{name}: {ty}</code>\n-                       </span><span class='stab {stab}'></span>\",\n+                       </span>\",\n                    shortty = ItemType::StructField,\n-                   stab = field.stability_class(),\n                    name = field.name.as_ref().unwrap(),\n                    ty = ty)?;\n+            if let Some(stability_class) = field.stability_class() {\n+                write!(w, \"<span class='stab {stab}'></span>\",\n+                    stab = stability_class)?;\n+            }\n             document(w, cx, field)?;\n         }\n     }"}]}