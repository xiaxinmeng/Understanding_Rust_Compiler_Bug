{"sha": "ec93d566b3ef29d5b97acca520558b5b05104f20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjOTNkNTY2YjNlZjI5ZDViOTdhY2NhNTIwNTU4YjViMDUxMDRmMjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T00:08:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-17T00:08:54Z"}, "message": "Rollup merge of #73101 - jyn514:rustdoc-absolute-module, r=Manishearth\n\nResolve items for cross-crate imports relative to the original module\n\n~~Blocked on https://github.com/rust-lang/rust/pull/73103 and https://github.com/rust-lang/rust/pull/73566~~\n\nCloses https://github.com/rust-lang/rust/issues/65983.\n\nI tested on the following code (as mentioned in https://github.com/rust-lang/rust/issues/65983#issuecomment-640250993):\n\n```\npub use rand::Rng;\n```\nand rustdoc generated the following link: https://rust-random.github.io/rand/rand_core/trait.RngCore.html", "tree": {"sha": "8c6e9bfa8091682c56a32cccdab62329c16f0396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c6e9bfa8091682c56a32cccdab62329c16f0396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec93d566b3ef29d5b97acca520558b5b05104f20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEOwWCRBK7hj4Ov3rIwAAdHIIACnD1LxH/nYMXUdvymew70u6\nSGhIQz9KJJImnY6XvEzSM/hRQsQkcdRxrR6CYnqnAsxCPdM+rkkIY4OejL25XeVA\npNrhRyMZsRsKYBrvSePkEzThJF7OAm3SJcdqFs5501S/zSDe3rPAAyvb+Mny//9u\n+rwn7O/3wGylZXhk3w+sXf0QwHYCAFHVtOm6Kp1QQVeJeeg3+SQ+fXhm+nFs+VpW\n19QMYOFtnE4IyaSzCy2g/2wReqnWTBnkaMyxVOZthPKhfEMUZw8C1GXUWfBX7Bcd\nuv9KFqjd0sy529k/1cke0kQzP+tlaMEFtSvZv3eny40oT4CqrZhOdMojIHJ6vf8=\n=oJ7j\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c6e9bfa8091682c56a32cccdab62329c16f0396\nparent 5c9e5df3a097e094641f16dab501ab1c4da10e9f\nparent c46e0386c5c3dcd448975cfa551b93045b013ce4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594944534 -0700\ncommitter GitHub <noreply@github.com> 1594944534 -0700\n\nRollup merge of #73101 - jyn514:rustdoc-absolute-module, r=Manishearth\n\nResolve items for cross-crate imports relative to the original module\n\n~~Blocked on https://github.com/rust-lang/rust/pull/73103 and https://github.com/rust-lang/rust/pull/73566~~\n\nCloses https://github.com/rust-lang/rust/issues/65983.\n\nI tested on the following code (as mentioned in https://github.com/rust-lang/rust/issues/65983#issuecomment-640250993):\n\n```\npub use rand::Rng;\n```\nand rustdoc generated the following link: https://rust-random.github.io/rand/rand_core/trait.RngCore.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec93d566b3ef29d5b97acca520558b5b05104f20", "html_url": "https://github.com/rust-lang/rust/commit/ec93d566b3ef29d5b97acca520558b5b05104f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec93d566b3ef29d5b97acca520558b5b05104f20/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9e5df3a097e094641f16dab501ab1c4da10e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9e5df3a097e094641f16dab501ab1c4da10e9f", "html_url": "https://github.com/rust-lang/rust/commit/5c9e5df3a097e094641f16dab501ab1c4da10e9f"}, {"sha": "c46e0386c5c3dcd448975cfa551b93045b013ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46e0386c5c3dcd448975cfa551b93045b013ce4", "html_url": "https://github.com/rust-lang/rust/commit/c46e0386c5c3dcd448975cfa551b93045b013ce4"}], "stats": {"total": 281, "additions": 233, "deletions": 48}, "files": [{"sha": "45253fc878222affc6e6a60618b63e7f63a85834", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -111,12 +111,17 @@ impl<'a> Resolver<'a> {\n             (self.cstore().crate_name_untracked(def_id.krate), None)\n         } else {\n             let def_key = self.cstore().def_key(def_id);\n-            (\n-                // This unwrap is safe: crates must always have a name\n-                def_key.disambiguated_data.data.get_opt_name().unwrap(),\n-                // This unwrap is safe since we know this isn't the root\n-                Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })),\n-            )\n+            let name = def_key\n+                .disambiguated_data\n+                .data\n+                .get_opt_name()\n+                .expect(\"given a DefId that wasn't a module\");\n+            // This unwrap is safe since we know this isn't the root\n+            let parent = Some(self.get_module(DefId {\n+                index: def_key.parent.expect(\"failed to get parent for module\"),\n+                ..def_id\n+            }));\n+            (name, parent)\n         };\n \n         // Allocate and return a new module with the information we found"}, {"sha": "686385e24ece8052b6d86ddb6713c302450dfd3c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -2978,7 +2978,7 @@ impl<'a> Resolver<'a> {\n         span: Span,\n         path_str: &str,\n         ns: Namespace,\n-        module_id: LocalDefId,\n+        module_id: DefId,\n     ) -> Result<(ast::Path, Res), ()> {\n         let path = if path_str.starts_with(\"::\") {\n             ast::Path {\n@@ -2998,7 +2998,7 @@ impl<'a> Resolver<'a> {\n                     .collect(),\n             }\n         };\n-        let module = self.module_map.get(&module_id).copied().unwrap_or(self.graph_root);\n+        let module = self.get_module(module_id);\n         let parent_scope = &ParentScope::module(module);\n         let res = self.resolve_ast_path(&path, ns, parent_scope).map_err(|_| ())?;\n         Ok((path, res))"}, {"sha": "6a52974534f8b66d627718e18327772272986310", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -430,7 +430,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                 DUMMY_SP,\n                                 extern_name,\n                                 TypeNS,\n-                                LocalDefId { local_def_index: CRATE_DEF_INDEX },\n+                                LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id(),\n                             )\n                             .unwrap_or_else(|()| {\n                                 panic!(\"Unable to resolve external crate {}\", extern_name)"}, {"sha": "b1db1328392e7bdbda4c67591ece25a777d14a44", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 46, "deletions": 37, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::def::{\n     Namespace::{self, *},\n     PerNS, Res,\n };\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n@@ -50,7 +50,8 @@ enum ErrorKind {\n \n struct LinkCollector<'a, 'tcx> {\n     cx: &'a DocContext<'tcx>,\n-    mod_ids: Vec<hir::HirId>,\n+    // NOTE: this may not necessarily be a module in the current crate\n+    mod_ids: Vec<DefId>,\n }\n \n impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n@@ -62,7 +63,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         &self,\n         path_str: &str,\n         current_item: &Option<String>,\n-        module_id: LocalDefId,\n+        module_id: DefId,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n@@ -124,7 +125,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     }\n \n     /// Resolves a string as a macro.\n-    fn macro_resolve(&self, path_str: &str, parent_id: Option<hir::HirId>) -> Option<Res> {\n+    fn macro_resolve(&self, path_str: &str, parent_id: Option<DefId>) -> Option<Res> {\n         let cx = self.cx;\n         let path = ast::Path::from_ident(Ident::from_str(path_str));\n         cx.enter_resolver(|resolver| {\n@@ -142,8 +143,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             if let Some(res) = resolver.all_macros().get(&Symbol::intern(path_str)) {\n                 return Some(res.map_id(|_| panic!(\"unexpected id\")));\n             }\n-            if let Some(module_id) = parent_id.or(self.mod_ids.last().cloned()) {\n-                let module_id = cx.tcx.hir().local_def_id(module_id);\n+            if let Some(module_id) = parent_id {\n                 if let Ok((_, res)) =\n                     resolver.resolve_str_path_error(DUMMY_SP, path_str, MacroNS, module_id)\n                 {\n@@ -167,15 +167,14 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         disambiguator: Option<&str>,\n         ns: Namespace,\n         current_item: &Option<String>,\n-        parent_id: Option<hir::HirId>,\n+        parent_id: Option<DefId>,\n         extra_fragment: &Option<String>,\n         item_opt: Option<&Item>,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n         // In case we're in a module, try to resolve the relative path.\n-        if let Some(module_id) = parent_id.or(self.mod_ids.last().cloned()) {\n-            let module_id = cx.tcx.hir().local_def_id(module_id);\n+        if let Some(module_id) = parent_id {\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n             });\n@@ -445,40 +444,40 @@ fn is_derive_trait_collision<T>(ns: &PerNS<Option<(Res, T)>>) -> bool {\n \n impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n-        let item_hir_id = if item.is_mod() {\n-            if let Some(def_id) = item.def_id.as_local() {\n-                Some(self.cx.tcx.hir().as_local_hir_id(def_id))\n-            } else {\n-                debug!(\"attempting to fold on a non-local item: {:?}\", item);\n-                return self.fold_item_recur(item);\n-            }\n-        } else {\n-            None\n-        };\n+        use rustc_middle::ty::DefIdTree;\n \n-        // FIXME: get the resolver to work with non-local resolve scopes.\n-        let parent_node = self.cx.as_local_hir_id(item.def_id).and_then(|hir_id| {\n-            // FIXME: this fails hard for impls in non-module scope, but is necessary for the\n-            // current `resolve()` implementation.\n-            match self.cx.as_local_hir_id(self.cx.tcx.parent_module(hir_id).to_def_id()).unwrap() {\n-                id if id != hir_id => Some(id),\n-                _ => None,\n+        let parent_node = if item.is_fake() {\n+            // FIXME: is this correct?\n+            None\n+        } else {\n+            let mut current = item.def_id;\n+            // The immediate parent might not always be a module.\n+            // Find the first parent which is.\n+            loop {\n+                if let Some(parent) = self.cx.tcx.parent(current) {\n+                    if self.cx.tcx.def_kind(parent) == DefKind::Mod {\n+                        break Some(parent);\n+                    }\n+                    current = parent;\n+                } else {\n+                    break None;\n+                }\n             }\n-        });\n+        };\n \n         if parent_node.is_some() {\n-            debug!(\"got parent node for {:?} {:?}, id {:?}\", item.type_(), item.name, item.def_id);\n+            trace!(\"got parent node for {:?} {:?}, id {:?}\", item.type_(), item.name, item.def_id);\n         }\n \n         let current_item = match item.inner {\n             ModuleItem(..) => {\n                 if item.attrs.inner_docs {\n-                    if item_hir_id.unwrap() != hir::CRATE_HIR_ID { item.name.clone() } else { None }\n+                    if item.def_id.is_top_level_module() { item.name.clone() } else { None }\n                 } else {\n-                    match parent_node.or(self.mod_ids.last().cloned()) {\n-                        Some(parent) if parent != hir::CRATE_HIR_ID => {\n+                    match parent_node.or(self.mod_ids.last().copied()) {\n+                        Some(parent) if !parent.is_top_level_module() => {\n                             // FIXME: can we pull the parent module's name from elsewhere?\n-                            Some(self.cx.tcx.hir().name(parent).to_string())\n+                            Some(self.cx.tcx.item_name(parent).to_string())\n                         }\n                         _ => None,\n                     }\n@@ -488,18 +487,22 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 for_.def_id().map(|did| self.cx.tcx.item_name(did).to_string())\n             }\n             // we don't display docs on `extern crate` items anyway, so don't process them.\n-            ExternCrateItem(..) => return self.fold_item_recur(item),\n+            ExternCrateItem(..) => {\n+                debug!(\"ignoring extern crate item {:?}\", item.def_id);\n+                return self.fold_item_recur(item);\n+            }\n             ImportItem(Import::Simple(ref name, ..)) => Some(name.clone()),\n             MacroItem(..) => None,\n             _ => item.name.clone(),\n         };\n \n         if item.is_mod() && item.attrs.inner_docs {\n-            self.mod_ids.push(item_hir_id.unwrap());\n+            self.mod_ids.push(item.def_id);\n         }\n \n         let cx = self.cx;\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n+        trace!(\"got documentation '{}'\", dox);\n \n         look_for_tests(&cx, &dox, &item, true);\n \n@@ -541,6 +544,8 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         });\n \n         for (ori_link, link_range) in markdown_links(&dox) {\n+            trace!(\"considering link '{}'\", ori_link);\n+\n             // Bail early for real links.\n             if ori_link.contains('/') {\n                 continue;\n@@ -641,8 +646,11 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 // we've already pushed this node onto the resolution stack but\n                 // for outer comments we explicitly try and resolve against the\n                 // parent_node first.\n-                let base_node =\n-                    if item.is_mod() && item.attrs.inner_docs { None } else { parent_node };\n+                let base_node = if item.is_mod() && item.attrs.inner_docs {\n+                    self.mod_ids.last().copied()\n+                } else {\n+                    parent_node\n+                };\n \n                 // replace `Self` with suitable item's parent name\n                 if path_str.starts_with(\"Self::\") {\n@@ -826,7 +834,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         }\n \n         if item.is_mod() && !item.attrs.inner_docs {\n-            self.mod_ids.push(item_hir_id.unwrap());\n+            self.mod_ids.push(item.def_id);\n         }\n \n         if item.is_mod() {\n@@ -864,6 +872,7 @@ fn build_diagnostic(\n         Some(hir_id) => hir_id,\n         None => {\n             // If non-local, no need to check anything.\n+            info!(\"ignoring warning from parent crate: {}\", err_msg);\n             return;\n         }\n     };"}, {"sha": "86cf9fed3dab48cb176a2009969632bc26c7a647", "filename": "src/test/rustdoc-ui/intra-links-private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // revisions: public private\n // [private]compile-flags: --document-private-items\n-#![cfg_attr(private, deny(intra_doc_resolution_failure))]\n+#![cfg_attr(private, deny(intra_doc_link_resolution_failure))]\n \n /// docs [DontDocMe]\n //[public]~^ WARNING `[DontDocMe]` public documentation for `DocMe` links to a private item"}, {"sha": "adfa7f5754eb908320628b461947d12433550de4", "filename": "src/test/rustdoc/intra-doc-crate/additional_doc.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fadditional_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fadditional_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fadditional_doc.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:additional_doc.rs\n+// build-aux-docs\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+extern crate my_rand;\n+\n+// @has 'additional_doc/trait.Rng.html' '//a[@href=\"../additional_doc/trait.Rng.html\"]' 'Rng'\n+// @has 'additional_doc/trait.Rng.html' '//a[@href=\"../my_rand/trait.RngCore.html\"]' 'RngCore'\n+/// This is an [`Rng`].\n+pub use my_rand::Rng;"}, {"sha": "8b8793e75ed59002a85a5820c310d453a6c389b6", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/additional_doc.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fadditional_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fadditional_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fadditional_doc.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"my_rand\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+pub trait RngCore {}\n+/// Rng extends [`RngCore`].\n+pub trait Rng: RngCore {}"}, {"sha": "2ee5835a7df84c15509bed3a5f96a14a022b6574", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/intra-doc-basic.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fintra-doc-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fintra-doc-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fintra-doc-basic.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,7 @@\n+#![crate_name = \"a\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+pub struct Foo;\n+\n+/// Link to [Foo]\n+pub struct Bar;"}, {"sha": "abd41fec13016a96cd543afc108e860db0d8793a", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/macro_inner.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmacro_inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmacro_inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmacro_inner.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,10 @@\n+#![crate_name = \"macro_inner\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+pub struct Foo;\n+\n+/// See also [`Foo`]\n+#[macro_export]\n+macro_rules! my_macro {\n+    () => {}\n+}"}, {"sha": "5d63d7e37b64dc6e3fea28cd5f23dd9aad0f20bb", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/module.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fmodule.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,7 @@\n+#![crate_name = \"module_inner\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+/// [SomeType] links to [bar]\n+pub struct SomeType;\n+pub trait SomeTrait {}\n+/// [bar] links to [SomeTrait] and also [SomeType]\n+pub mod bar {}"}, {"sha": "0d5a954075df22c24bc813c3bccd7aaf6c2ac7ca", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/proc_macro.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fproc_macro.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,20 @@\n+// force-host\n+// no-prefer-dynamic\n+// compile-flags: --crate-type proc-macro\n+#![crate_type=\"proc-macro\"]\n+#![crate_name=\"proc_macro_inner\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+/// Links to [`OtherDerive`]\n+#[proc_macro_derive(DeriveA)]\n+pub fn a_derive(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(OtherDerive)]\n+pub fn other_derive(input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "3a22d13e673ac221aa84bb4ba69091240f90f445", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/submodule-inner.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fsubmodule-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fsubmodule-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fsubmodule-inner.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,12 @@\n+#![crate_name = \"a\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+pub mod bar {\n+   pub struct Bar;\n+}\n+\n+pub mod foo {\n+  use crate::bar;\n+  /// link to [bar::Bar]\n+  pub struct Foo;\n+}"}, {"sha": "b8ca4e44e1f16b7225a78cffd6e246272c0ead5c", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/submodule-outer.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fsubmodule-outer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fsubmodule-outer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fsubmodule-outer.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,13 @@\n+#![crate_name = \"bar\"]\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+pub trait Foo {\n+    /// [`Bar`] [`Baz`]\n+    fn foo();\n+}\n+\n+pub trait Bar {\n+}\n+\n+pub trait Baz {\n+}"}, {"sha": "c16e39d56f3d0d80dcb2b41e6457270ee18e0d9b", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/traits.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Ftraits.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,16 @@\n+#![crate_name = \"inner\"]\n+/// this is a trait\n+pub trait SomeTrait {\n+    /// this is a method for [a trait][SomeTrait]\n+    fn foo();\n+}\n+\n+pub mod bar {\n+    use super::SomeTrait;\n+\n+    pub struct BarStruct;\n+\n+    impl SomeTrait for BarStruct {\n+        fn foo() {}\n+    }\n+}"}, {"sha": "a245a0f84539c78cf46c572dc9d9ff7644a4e570", "filename": "src/test/rustdoc/intra-doc-crate/basic.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fbasic.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:intra-doc-basic.rs\n+// build-aux-docs\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+// from https://github.com/rust-lang/rust/issues/65983\n+extern crate a;\n+\n+// @has 'basic/struct.Bar.html' '//a[@href=\"../a/struct.Foo.html\"]' 'Foo'\n+pub use a::Bar;"}, {"sha": "72fd57b6b0c7f7c7c38e7ec68bae803f373b009f", "filename": "src/test/rustdoc/intra-doc-crate/macro.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmacro.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,12 @@\n+// ignore-tidy-linelength\n+// aux-build:macro_inner.rs\n+// aux-build:proc_macro.rs\n+// build-aux-docs\n+#![deny(intra_doc_link_resolution_failure)]\n+extern crate macro_inner;\n+extern crate proc_macro_inner;\n+\n+// @has 'macro/macro.my_macro.html' '//a[@href=\"../macro_inner/struct.Foo.html\"]' 'Foo'\n+pub use macro_inner::my_macro;\n+// @has 'macro/derive.DeriveA.html' '//a[@href=\"../proc_macro_inner/derive.OtherDerive.html\"]' 'OtherDerive'\n+pub use proc_macro_inner::DeriveA;"}, {"sha": "67fa7293f37fb49b32540aa49f0c09f39a611e69", "filename": "src/test/rustdoc/intra-doc-crate/module.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fmodule.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,8 @@\n+// outer.rs\n+// aux-build: module.rs\n+// build-aux-docs\n+#![deny(intra_doc_link_resolution_failure)]\n+extern crate module_inner;\n+// @has 'module/bar/index.html' '//a[@href=\"../../module_inner/trait.SomeTrait.html\"]' 'SomeTrait'\n+// @has 'module/bar/index.html' '//a[@href=\"../../module_inner/struct.SomeType.html\"]' 'SomeType'\n+pub use module_inner::bar;"}, {"sha": "b4b615bf9edada62d1f5749d1638060d1cf18be4", "filename": "src/test/rustdoc/intra-doc-crate/submodule-inner.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fsubmodule-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fsubmodule-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fsubmodule-inner.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:submodule-inner.rs\n+// build-aux-docs\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+extern crate a;\n+\n+// @has 'submodule_inner/struct.Foo.html' '//a[@href=\"../a/bar/struct.Bar.html\"]' 'Bar'\n+pub use a::foo::Foo;"}, {"sha": "6b30ef8b3dec87ab7586b7bca682653fe0efbcb8", "filename": "src/test/rustdoc/intra-doc-crate/submodule-outer.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fsubmodule-outer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fsubmodule-outer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fsubmodule-outer.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:submodule-outer.rs\n+// edition:2018\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+extern crate bar as bar_;\n+\n+// from https://github.com/rust-lang/rust/issues/60883\n+pub mod bar {\n+    pub use ::bar_::Bar;\n+}\n+\n+// NOTE: we re-exported both `Foo` and `Bar` here,\n+// NOTE: so they are inlined and therefore we link to the current module.\n+// @has 'submodule_outer/trait.Foo.html' '//a[@href=\"../submodule_outer/bar/trait.Bar.html\"]' 'Bar'\n+// @has 'submodule_outer/trait.Foo.html' '//a[@href=\"../submodule_outer/trait.Baz.html\"]' 'Baz'\n+pub use ::bar_::{Foo, Baz};"}, {"sha": "617331236902d947966062d856da433e89c7f922", "filename": "src/test/rustdoc/intra-doc-crate/traits.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -0,0 +1,17 @@\n+// ignore-test\n+// ^ this is https://github.com/rust-lang/rust/issues/73829\n+// aux-build:traits.rs\n+// build-aux-docs\n+// ignore-tidy-line-length\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+extern crate inner;\n+use inner::SomeTrait;\n+\n+pub struct SomeStruct;\n+\n+ // @has 'traits/struct.SomeStruct.html' '//a[@href=\"../inner/trait.SomeTrait.html\"]' 'SomeTrait'\n+impl SomeTrait for SomeStruct {\n+    // @has 'traits/struct.SomeStruct.html' '//a[@href=\"../inner/trait.SomeTrait.html\"]' 'a trait'\n+    fn foo() {}\n+}"}, {"sha": "d7ebb73b3be7d7b6dc5a6de2c08a0bd884aee477", "filename": "src/test/rustdoc/intra-link-prim-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec93d566b3ef29d5b97acca520558b5b05104f20/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs?ref=ec93d566b3ef29d5b97acca520558b5b05104f20", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-#![deny(intra_doc_resolution_failure)]\n+#![deny(intra_doc_link_resolution_failure)]\n \n pub mod char {}\n "}]}