{"sha": "55471015a0238f2fa2bf85adb38eb6bedf5ef26e", "node_id": "C_kwDOAAsO6NoAKDU1NDcxMDE1YTAyMzhmMmZhMmJmODVhZGIzOGViNmJlZGY1ZWYyNmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-15T20:31:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-15T20:31:00Z"}, "message": "Rollup merge of #108094 - kornelski:fsdocs, r=cuviper\n\nDemonstrate I/O in File examples\n\nI've noticed that some Rust novices unnecessarily reinvent `std::fs::{read,write}`, presumably because they search for equivalents of `fopen` + `fwrite`. I've added links to `std::fs::{read,write}` in the docs.\n\nThe `File` examples were only showing how to open a file, but not how to use the opened handle, unnecessarily leaving out the next step. I've added a variety of different uses of file handles to their examples in docs.", "tree": {"sha": "131dc4285eea8f12cb0c0be4151182a5ae6fc3ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/131dc4285eea8f12cb0c0be4151182a5ae6fc3ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55471015a0238f2fa2bf85adb38eb6bedf5ef26e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7UEECRBK7hj4Ov3rIwAA5zcIAIMI3LtBzjfI+5mSIEJOiKKa\nYnDkvBx7mN+ld/PPKn5B6Oc9pNlj733NcjFCHwYI3hNHQNFOtMFQC56DJlPcRVcV\n9998NSZZEwUPNQ/TU1N/mYQHi65aiuuIEjD78vQczVJK93EI5bB8yHKWncM9m/22\nUXUbuphrSTAXh16zLGVXGRcLLy5PtE9xC2yIgFtgtF/Q9satPPjVWPV2JNphQnY+\nDkxbbN9wheZRTofNXnXnlp68muc5A8tcWu1eIMClk94FmGZIgBt2W6MSRXMkeNIa\n1mvsY7zB7FJaBG9mPdeOdYbaq1B1k5G3ZjRCFFZhIT0nyRq8Ew8O1hgVDm8i0xg=\n=hkyu\n-----END PGP SIGNATURE-----\n", "payload": "tree 131dc4285eea8f12cb0c0be4151182a5ae6fc3ce\nparent 863cd151321987eeaa89026e7661a8a68cb9ad81\nparent 4c2d48ee800dd79bfb64b91ccee5262295fea9d5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676493060 +0100\ncommitter GitHub <noreply@github.com> 1676493060 +0100\n\nRollup merge of #108094 - kornelski:fsdocs, r=cuviper\n\nDemonstrate I/O in File examples\n\nI've noticed that some Rust novices unnecessarily reinvent `std::fs::{read,write}`, presumably because they search for equivalents of `fopen` + `fwrite`. I've added links to `std::fs::{read,write}` in the docs.\n\nThe `File` examples were only showing how to open a file, but not how to use the opened handle, unnecessarily leaving out the next step. I've added a variety of different uses of file handles to their examples in docs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55471015a0238f2fa2bf85adb38eb6bedf5ef26e", "html_url": "https://github.com/rust-lang/rust/commit/55471015a0238f2fa2bf85adb38eb6bedf5ef26e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55471015a0238f2fa2bf85adb38eb6bedf5ef26e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "863cd151321987eeaa89026e7661a8a68cb9ad81", "url": "https://api.github.com/repos/rust-lang/rust/commits/863cd151321987eeaa89026e7661a8a68cb9ad81", "html_url": "https://github.com/rust-lang/rust/commit/863cd151321987eeaa89026e7661a8a68cb9ad81"}, {"sha": "4c2d48ee800dd79bfb64b91ccee5262295fea9d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2d48ee800dd79bfb64b91ccee5262295fea9d5", "html_url": "https://github.com/rust-lang/rust/commit/4c2d48ee800dd79bfb64b91ccee5262295fea9d5"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "c550378e7d6b79ba680de269dc5db64ed327e4c4", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/55471015a0238f2fa2bf85adb38eb6bedf5ef26e/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55471015a0238f2fa2bf85adb38eb6bedf5ef26e/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=55471015a0238f2fa2bf85adb38eb6bedf5ef26e", "patch": "@@ -334,6 +334,10 @@ impl File {\n     ///\n     /// See the [`OpenOptions::open`] method for more details.\n     ///\n+    /// If you only need to read the entire file contents,\n+    /// consider [`std::fs::read()`][self::read] or\n+    /// [`std::fs::read_to_string()`][self::read_to_string] instead.\n+    ///\n     /// # Errors\n     ///\n     /// This function will return an error if `path` does not already exist.\n@@ -343,9 +347,12 @@ impl File {\n     ///\n     /// ```no_run\n     /// use std::fs::File;\n+    /// use std::io::Read;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let mut data = vec![];\n+    ///     f.read_to_end(&mut data)?;\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -361,16 +368,20 @@ impl File {\n     ///\n     /// Depending on the platform, this function may fail if the\n     /// full directory path does not exist.\n-    ///\n     /// See the [`OpenOptions::open`] function for more details.\n     ///\n+    /// See also [`std::fs::write()`][self::write] for a simple function to\n+    /// create a file with a given data.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n     /// use std::fs::File;\n+    /// use std::io::Write;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let mut f = File::create(\"foo.txt\")?;\n+    ///     f.write_all(&1234_u32.to_be_bytes())?;\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -397,9 +408,11 @@ impl File {\n     /// #![feature(file_create_new)]\n     ///\n     /// use std::fs::File;\n+    /// use std::io::Write;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let mut f = File::create_new(\"foo.txt\")?;\n+    ///     f.write_all(\"Hello, world!\".as_bytes())?;\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -426,9 +439,11 @@ impl File {\n     ///\n     /// ```no_run\n     /// use std::fs::File;\n+    /// use std::io::Write;\n     ///\n     /// fn main() -> std::io::Result<()> {\n     ///     let mut f = File::options().append(true).open(\"example.log\")?;\n+    ///     writeln!(&mut f, \"new line\")?;\n     ///     Ok(())\n     /// }\n     /// ```\n@@ -966,6 +981,9 @@ impl OpenOptions {\n     /// In order for the file to be created, [`OpenOptions::write`] or\n     /// [`OpenOptions::append`] access must be used.\n     ///\n+    /// See also [`std::fs::write()`][self::write] for a simple function to\n+    /// create a file with a given data.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run"}]}