{"sha": "0948f54e65227a95d386e429f4e1356d7dd3fba7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NDhmNTRlNjUyMjdhOTVkMzg2ZTQyOWY0ZTEzNTZkN2RkM2ZiYTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-09-05T21:16:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-09-05T21:22:16Z"}, "message": "std::rt: Add get_host_addresses function\n\nThis is a very simplistic method for host name resolution. It converts\na host name to a vector of IP addresses. Should be enough to get started.", "tree": {"sha": "fca9d4628b36c014022f0a27df489850d1cf2723", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca9d4628b36c014022f0a27df489850d1cf2723"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0948f54e65227a95d386e429f4e1356d7dd3fba7", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0948f54e65227a95d386e429f4e1356d7dd3fba7", "html_url": "https://github.com/rust-lang/rust/commit/0948f54e65227a95d386e429f4e1356d7dd3fba7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0948f54e65227a95d386e429f4e1356d7dd3fba7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c218694cece7c3018b4a809a52a35fcf3716d92e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c218694cece7c3018b4a809a52a35fcf3716d92e", "html_url": "https://github.com/rust-lang/rust/commit/c218694cece7c3018b4a809a52a35fcf3716d92e"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "5ceea8774536a96c89ca9d890c4f29c8c0d4f1fc", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0948f54e65227a95d386e429f4e1356d7dd3fba7/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0948f54e65227a95d386e429f4e1356d7dd3fba7/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=0948f54e65227a95d386e429f4e1356d7dd3fba7", "patch": "@@ -269,13 +269,7 @@ pub use self::extensions::WriterByteConversions;\n pub mod file;\n \n /// Synchronous, non-blocking network I/O.\n-pub mod net {\n-    pub mod tcp;\n-    pub mod udp;\n-    pub mod ip;\n-    #[cfg(unix)]\n-    pub mod unix;\n-}\n+pub mod net;\n \n /// Readers and Writers for memory buffers and strings.\n pub mod mem;"}, {"sha": "f44e879a63a2aa58a2b822267c70aeebb44e3415", "filename": "src/libstd/rt/io/net/mod.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0948f54e65227a95d386e429f4e1356d7dd3fba7/src%2Flibstd%2Frt%2Fio%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0948f54e65227a95d386e429f4e1356d7dd3fba7/src%2Flibstd%2Frt%2Fio%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fmod.rs?ref=0948f54e65227a95d386e429f4e1356d7dd3fba7", "patch": "@@ -8,14 +8,55 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use option::{Option, Some, None};\n+use result::{Ok, Err};\n+use rt::io::io_error;\n use rt::io::net::ip::IpAddr;\n+use rt::rtio::{IoFactory, IoFactoryObject};\n+use rt::local::Local;\n \n-fn get_host_addresses(host: &str) -> Option<~[IpAddr]> {\n+pub mod tcp;\n+pub mod udp;\n+pub mod ip;\n+#[cfg(unix)]\n+pub mod unix;\n+\n+/// Simplistic name resolution\n+pub fn get_host_addresses(host: &str) -> Option<~[IpAddr]> {\n     /*!\n      * Get the IP addresses for a given host name.\n      *\n      * Raises io_error on failure.\n      */\n \n-    fail!()\n+    let ipaddrs = unsafe {\n+        let io: *mut IoFactoryObject = Local::unsafe_borrow();\n+        (*io).get_host_addresses(host)\n+    };\n+\n+    match ipaddrs {\n+        Ok(i) => Some(i),\n+        Err(ioerr) => {\n+            io_error::cond.raise(ioerr);\n+            None\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use option::Some;\n+    use rt::io::net::ip::Ipv4Addr;\n+    use super::*;\n+\n+    #[test]\n+    fn dns_smoke_test() {\n+        let ipaddrs = get_host_addresses(\"localhost\").unwrap();\n+        let mut found_local = false;\n+        let local_addr = &Ipv4Addr(127, 0, 0, 1);\n+        for addr in ipaddrs.iter() {\n+            found_local = found_local || addr == local_addr;\n+        }\n+        assert!(found_local);\n+    }\n }"}, {"sha": "c9c402baaf0fa1d979149faffb9629c714e2db13", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0948f54e65227a95d386e429f4e1356d7dd3fba7/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0948f54e65227a95d386e429f4e1356d7dd3fba7/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=0948f54e65227a95d386e429f4e1356d7dd3fba7", "patch": "@@ -73,6 +73,7 @@ pub trait IoFactory {\n     fn fs_open<P: PathLike>(&mut self, path: &P, fm: FileMode, fa: FileAccess)\n         -> Result<~RtioFileStream, IoError>;\n     fn fs_unlink<P: PathLike>(&mut self, path: &P) -> Result<(), IoError>;\n+    fn get_host_addresses(&mut self, host: &str) -> Result<~[IpAddr], IoError>;\n }\n \n pub trait RtioTcpListener : RtioSocket {"}, {"sha": "b225513e94f1323ce83aef5859d907c0017de9d5", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0948f54e65227a95d386e429f4e1356d7dd3fba7/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0948f54e65227a95d386e429f4e1356d7dd3fba7/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=0948f54e65227a95d386e429f4e1356d7dd3fba7", "patch": "@@ -29,7 +29,8 @@ use rt::tube::Tube;\n use rt::task::SchedHome;\n use rt::uv::*;\n use rt::uv::idle::IdleWatcher;\n-use rt::uv::net::{UvIpv4SocketAddr, UvIpv6SocketAddr};\n+use rt::uv::net::{UvIpv4SocketAddr, UvIpv6SocketAddr, accum_sockaddrs};\n+use rt::uv::addrinfo::GetAddrInfoRequest;\n use unstable::sync::Exclusive;\n use super::super::io::support::PathLike;\n use libc::{lseek, off_t, O_CREAT, O_APPEND, O_TRUNC, O_RDWR, O_RDONLY, O_WRONLY,\n@@ -596,6 +597,37 @@ impl IoFactory for UvIoFactory {\n         assert!(!result_cell.is_empty());\n         return result_cell.take();\n     }\n+\n+    fn get_host_addresses(&mut self, host: &str) -> Result<~[IpAddr], IoError> {\n+        let result_cell = Cell::new_empty();\n+        let result_cell_ptr: *Cell<Result<~[IpAddr], IoError>> = &result_cell;\n+        let host_ptr: *&str = &host;\n+        let addrinfo_req = GetAddrInfoRequest::new();\n+        let addrinfo_req_cell = Cell::new(addrinfo_req);\n+        do task::unkillable { // FIXME(#8674)\n+            let scheduler: ~Scheduler = Local::take();\n+            do scheduler.deschedule_running_task_and_then |_, task| {\n+                let task_cell = Cell::new(task);\n+                let mut addrinfo_req = addrinfo_req_cell.take();\n+                unsafe {\n+                    do addrinfo_req.getaddrinfo(self.uv_loop(),\n+                                                Some(*host_ptr),\n+                                                None, None) |_, addrinfo, err| {\n+                        let res = match err {\n+                            None => Ok(accum_sockaddrs(addrinfo).map(|addr| addr.ip.clone())),\n+                            Some(err) => Err(uv_error_to_io_error(err))\n+                        };\n+                        (*result_cell_ptr).put_back(res);\n+                        let scheduler: ~Scheduler = Local::take();\n+                        scheduler.resume_blocked_task_immediately(task_cell.take());\n+                    }\n+                }\n+            }\n+        }\n+        addrinfo_req.delete();\n+        assert!(!result_cell.is_empty());\n+        return result_cell.take();\n+    }\n }\n \n pub struct UvTcpListener {"}]}