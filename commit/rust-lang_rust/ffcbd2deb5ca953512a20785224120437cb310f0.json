{"sha": "ffcbd2deb5ca953512a20785224120437cb310f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmY2JkMmRlYjVjYTk1MzUxMmEyMDc4NTIyNDEyMDQzN2NiMzEwZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-30T11:35:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-30T11:35:39Z"}, "message": "Auto merge of #35127 - Manishearth:rollup, r=Manishearth\n\nRollup of 8 pull requests\n\n- Successful merges: #35049, #35058, #35063, #35080, #35090, #35094, #35104, #35106\n- Failed merges:", "tree": {"sha": "b5aef208b408abcf0d7d05ba3dadc6b5cc82fb91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5aef208b408abcf0d7d05ba3dadc6b5cc82fb91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffcbd2deb5ca953512a20785224120437cb310f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcbd2deb5ca953512a20785224120437cb310f0", "html_url": "https://github.com/rust-lang/rust/commit/ffcbd2deb5ca953512a20785224120437cb310f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffcbd2deb5ca953512a20785224120437cb310f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7580534c3a142c79340576c109f3cd73950996c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7580534c3a142c79340576c109f3cd73950996c0", "html_url": "https://github.com/rust-lang/rust/commit/7580534c3a142c79340576c109f3cd73950996c0"}, {"sha": "0b64a561f630330ecf3e78b4ffb988d6e7328dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b64a561f630330ecf3e78b4ffb988d6e7328dce", "html_url": "https://github.com/rust-lang/rust/commit/0b64a561f630330ecf3e78b4ffb988d6e7328dce"}], "stats": {"total": 686, "additions": 338, "deletions": 348}, "files": [{"sha": "6842f02e0e19b1732d3ded4cc9a169f09c46b5c0", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -203,19 +203,22 @@ impl<T> LinkedList<T> {\n     /// ```\n     /// use std::collections::LinkedList;\n     ///\n-    /// let mut a = LinkedList::new();\n-    /// let mut b = LinkedList::new();\n-    /// a.push_back(1);\n-    /// a.push_back(2);\n-    /// b.push_back(3);\n-    /// b.push_back(4);\n+    /// let mut list1 = LinkedList::new();\n+    /// list1.push_back('a');\n     ///\n-    /// a.append(&mut b);\n+    /// let mut list2 = LinkedList::new();\n+    /// list2.push_back('b');\n+    /// list2.push_back('c');\n     ///\n-    /// for e in &a {\n-    ///     println!(\"{}\", e); // prints 1, then 2, then 3, then 4\n-    /// }\n-    /// println!(\"{}\", b.len()); // prints 0\n+    /// list1.append(&mut list2);\n+    ///\n+    /// let mut iter = list1.iter();\n+    /// assert_eq!(iter.next(), Some(&'a'));\n+    /// assert_eq!(iter.next(), Some(&'b'));\n+    /// assert_eq!(iter.next(), Some(&'c'));\n+    /// assert!(iter.next().is_none());\n+    ///\n+    /// assert!(list2.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn append(&mut self, other: &mut Self) {"}, {"sha": "1652fb5a88d80dc46d1089adbb277cf9fa330ba7", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -192,6 +192,17 @@ fn test_push_str() {\n     assert_eq!(&s[0..], \"abc\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n }\n \n+#[test]\n+fn test_add_assign() {\n+    let mut s = String::new();\n+    s += \"\";\n+    assert_eq!(s.as_str(), \"\");\n+    s += \"abc\";\n+    assert_eq!(s.as_str(), \"abc\");\n+    s += \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+    assert_eq!(s.as_str(), \"abc\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+}\n+\n #[test]\n fn test_push() {\n     let mut data = String::from(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");"}, {"sha": "4636811aa46da2c95f96d6c87bf9cdd3a06a09b6", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -611,6 +611,31 @@ macro_rules! int_impl {\n             if b {None} else {Some(a)}\n         }\n \n+        /// Checked absolute value. Computes `self.abs()`, returning `None` if\n+        /// `self == MIN`.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(no_panic_abs)]\n+        ///\n+        /// use std::i32;\n+        ///\n+        /// assert_eq!((-5i32).checked_abs(), Some(5));\n+        /// assert_eq!(i32::MIN.checked_abs(), None);\n+        /// ```\n+        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[inline]\n+        pub fn checked_abs(self) -> Option<Self> {\n+            if self.is_negative() {\n+                self.checked_neg()\n+            } else {\n+                Some(self)\n+            }\n+        }\n+\n         /// Saturating integer addition. Computes `self + other`, saturating at\n         /// the numeric bounds instead of overflowing.\n         ///\n@@ -863,6 +888,36 @@ macro_rules! int_impl {\n             self.overflowing_shr(rhs).0\n         }\n \n+        /// Wrapping (modular) absolute value. Computes `self.abs()`,\n+        /// wrapping around at the boundary of the type.\n+        ///\n+        /// The only case where such wrapping can occur is when one takes\n+        /// the absolute value of the negative minimal value for the type\n+        /// this is a positive value that is too large to represent in the\n+        /// type. In such a case, this function returns `MIN` itself.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(no_panic_abs)]\n+        ///\n+        /// assert_eq!(100i8.wrapping_abs(), 100);\n+        /// assert_eq!((-100i8).wrapping_abs(), 100);\n+        /// assert_eq!((-128i8).wrapping_abs(), -128);\n+        /// assert_eq!((-128i8).wrapping_abs() as u8, 128);\n+        /// ```\n+        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[inline(always)]\n+        pub fn wrapping_abs(self) -> Self {\n+            if self.is_negative() {\n+                self.wrapping_neg()\n+            } else {\n+                self\n+            }\n+        }\n+\n         /// Calculates `self` + `rhs`\n         ///\n         /// Returns a tuple of the addition along with a boolean indicating\n@@ -1071,6 +1126,35 @@ macro_rules! int_impl {\n             (self >> (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n         }\n \n+        /// Computes the absolute value of `self`.\n+        ///\n+        /// Returns a tuple of the absolute version of self along with a\n+        /// boolean indicating whether an overflow happened. If self is the\n+        /// minimum value (e.g. i32::MIN for values of type i32), then the\n+        /// minimum value will be returned again and true will be returned for\n+        /// an overflow happening.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(no_panic_abs)]\n+        ///\n+        /// assert_eq!(10i8.overflowing_abs(), (10,false));\n+        /// assert_eq!((-10i8).overflowing_abs(), (10,false));\n+        /// assert_eq!((-128i8).overflowing_abs(), (-128,true));\n+        /// ```\n+        #[unstable(feature = \"no_panic_abs\", issue = \"35057\")]\n+        #[inline]\n+        pub fn overflowing_abs(self) -> (Self, bool) {\n+            if self.is_negative() {\n+                self.overflowing_neg()\n+            } else {\n+                (self, false)\n+            }\n+        }\n+\n         /// Raises self to the power of `exp`, using exponentiation by squaring.\n         ///\n         /// # Examples"}, {"sha": "a06fc21764de4c068287c65320ae8ff984ef00a4", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 67, "deletions": 188, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -94,11 +94,14 @@ pub trait Visitor<'v> : Sized {\n \n     ///////////////////////////////////////////////////////////////////////////\n \n+    fn visit_id(&mut self, _node_id: NodeId) {\n+        // Nothing to do.\n+    }\n     fn visit_name(&mut self, _span: Span, _name: Name) {\n         // Nothing to do.\n     }\n-    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) {\n-        walk_mod(self, m)\n+    fn visit_mod(&mut self, m: &'v Mod, _s: Span, n: NodeId) {\n+        walk_mod(self, m, n)\n     }\n     fn visit_foreign_item(&mut self, i: &'v ForeignItem) {\n         walk_foreign_item(self, i)\n@@ -135,8 +138,8 @@ pub trait Visitor<'v> : Sized {\n     fn visit_where_predicate(&mut self, predicate: &'v WherePredicate) {\n         walk_where_predicate(self, predicate)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) {\n-        walk_fn(self, fk, fd, b, s)\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, id: NodeId) {\n+        walk_fn(self, fk, fd, b, s, id)\n     }\n     fn visit_trait_item(&mut self, ti: &'v TraitItem) {\n         walk_trait_item(self, ti)\n@@ -157,7 +160,7 @@ pub trait Visitor<'v> : Sized {\n                           s: &'v VariantData,\n                           _: Name,\n                           _: &'v Generics,\n-                          _: NodeId,\n+                          _parent_id: NodeId,\n                           _: Span) {\n         walk_struct_def(self, s)\n     }\n@@ -225,24 +228,28 @@ pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) {\n }\n \n pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) {\n+    visitor.visit_id(macro_def.id);\n     visitor.visit_name(macro_def.span, macro_def.name);\n     walk_opt_name(visitor, macro_def.span, macro_def.imported_from);\n     walk_list!(visitor, visit_attribute, &macro_def.attrs);\n }\n \n-pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod) {\n+pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod, mod_node_id: NodeId) {\n+    visitor.visit_id(mod_node_id);\n     for &item_id in &module.item_ids {\n         visitor.visit_nested_item(item_id);\n     }\n }\n \n pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n+    visitor.visit_id(local.id);\n     visitor.visit_pat(&local.pat);\n     walk_list!(visitor, visit_ty, &local.ty);\n     walk_list!(visitor, visit_expr, &local.init);\n }\n \n pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {\n+    visitor.visit_id(lifetime.id);\n     visitor.visit_name(lifetime.span, lifetime.name);\n }\n \n@@ -263,6 +270,7 @@ pub fn walk_poly_trait_ref<'v, V>(visitor: &mut V,\n pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef)\n     where V: Visitor<'v>\n {\n+    visitor.visit_id(trait_ref.ref_id);\n     visitor.visit_path(&trait_ref.path, trait_ref.ref_id)\n }\n \n@@ -271,9 +279,11 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n     visitor.visit_name(item.span, item.name);\n     match item.node {\n         ItemExternCrate(opt_name) => {\n+            visitor.visit_id(item.id);\n             walk_opt_name(visitor, item.span, opt_name)\n         }\n         ItemUse(ref vp) => {\n+            visitor.visit_id(item.id);\n             match vp.node {\n                 ViewPathSimple(name, ref path) => {\n                     visitor.visit_name(vp.span, name);\n@@ -292,6 +302,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemStatic(ref typ, _, ref expr) |\n         ItemConst(ref typ, ref expr) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_ty(typ);\n             visitor.visit_expr(expr);\n         }\n@@ -309,33 +320,41 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n                              item.id)\n         }\n         ItemMod(ref module) => {\n+            // visit_mod() takes care of visiting the Item's NodeId\n             visitor.visit_mod(module, item.span, item.id)\n         }\n         ItemForeignMod(ref foreign_module) => {\n+            visitor.visit_id(item.id);\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemTy(ref typ, ref type_parameters) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_ty(typ);\n             visitor.visit_generics(type_parameters)\n         }\n         ItemEnum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters);\n+            // visit_enum_def() takes care of visiting the Item's NodeId\n             visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n         }\n         ItemDefaultImpl(_, ref trait_ref) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_trait_ref(trait_ref)\n         }\n         ItemImpl(_, _, ref type_parameters, ref opt_trait_reference, ref typ, ref impl_items) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_generics(type_parameters);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_impl_item, impl_items);\n         }\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n+            visitor.visit_id(item.id);\n             visitor.visit_variant_data(struct_definition, item.name, generics, item.id, item.span);\n         }\n         ItemTrait(_, ref generics, ref bounds, ref methods) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item, methods);\n@@ -348,6 +367,7 @@ pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n                                          enum_definition: &'v EnumDef,\n                                          generics: &'v Generics,\n                                          item_id: NodeId) {\n+    visitor.visit_id(item_id);\n     walk_list!(visitor,\n                visit_variant,\n                &enum_definition.variants,\n@@ -358,18 +378,20 @@ pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n                                         generics: &'v Generics,\n-                                        item_id: NodeId) {\n+                                        parent_item_id: NodeId) {\n     visitor.visit_name(variant.span, variant.node.name);\n     visitor.visit_variant_data(&variant.node.data,\n                                variant.node.name,\n                                generics,\n-                               item_id,\n+                               parent_item_id,\n                                variant.span);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n+    visitor.visit_id(typ.id);\n+\n     match typ.node {\n         TyVec(ref ty) => {\n             visitor.visit_ty(ty)\n@@ -421,6 +443,7 @@ pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                _prefix: &'v Path,\n                                                item: &'v PathListItem) {\n+    visitor.visit_id(item.node.id());\n     walk_opt_name(visitor, item.span, item.node.name());\n     walk_opt_name(visitor, item.span, item.node.rename());\n }\n@@ -450,11 +473,13 @@ pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                    type_binding: &'v TypeBinding) {\n+    visitor.visit_id(type_binding.id);\n     visitor.visit_name(type_binding.span, type_binding.name);\n     visitor.visit_ty(&type_binding.ty);\n }\n \n pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n+    visitor.visit_id(pattern.id);\n     match pattern.node {\n         PatKind::TupleStruct(ref path, ref children, _) => {\n             visitor.visit_path(path, pattern.id);\n@@ -499,6 +524,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n }\n \n pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem) {\n+    visitor.visit_id(foreign_item.id);\n     visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_name(foreign_item.span, foreign_item.name);\n \n@@ -526,11 +552,13 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v TyPar\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n     for param in &generics.ty_params {\n+        visitor.visit_id(param.id);\n         visitor.visit_name(param.span, param.name);\n         walk_list!(visitor, visit_ty_param_bound, &param.bounds);\n         walk_list!(visitor, visit_ty, &param.default);\n     }\n     walk_list!(visitor, visit_lifetime_def, &generics.lifetimes);\n+    visitor.visit_id(generics.where_clause.id);\n     walk_list!(visitor, visit_where_predicate, &generics.where_clause.predicates);\n }\n \n@@ -557,6 +585,7 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n                                                       ref path,\n                                                       ref ty,\n                                                       ..}) => {\n+            visitor.visit_id(id);\n             visitor.visit_path(path, id);\n             visitor.visit_ty(ty);\n         }\n@@ -571,6 +600,7 @@ pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionR\n \n pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) {\n     for argument in &function_declaration.inputs {\n+        visitor.visit_id(argument.id);\n         visitor.visit_pat(&argument.pat);\n         visitor.visit_ty(&argument.ty)\n     }\n@@ -579,6 +609,7 @@ pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &\n \n pub fn walk_fn_decl_nopat<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) {\n     for argument in &function_declaration.inputs {\n+        visitor.visit_id(argument.id);\n         visitor.visit_ty(&argument.ty)\n     }\n     walk_fn_ret_ty(visitor, &function_declaration.output)\n@@ -600,7 +631,9 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n                                    function_kind: FnKind<'v>,\n                                    function_declaration: &'v FnDecl,\n                                    function_body: &'v Block,\n-                                   _span: Span) {\n+                                   _span: Span,\n+                                   id: NodeId) {\n+    visitor.visit_id(id);\n     walk_fn_decl(visitor, function_declaration);\n     walk_fn_kind(visitor, function_kind);\n     visitor.visit_block(function_body)\n@@ -611,10 +644,12 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n     match trait_item.node {\n         ConstTraitItem(ref ty, ref default) => {\n+            visitor.visit_id(trait_item.id);\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, default);\n         }\n         MethodTraitItem(ref sig, None) => {\n+            visitor.visit_id(trait_item.id);\n             visitor.visit_generics(&sig.generics);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n@@ -629,6 +664,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n                              trait_item.id);\n         }\n         TypeTraitItem(ref bounds, ref default) => {\n+            visitor.visit_id(trait_item.id);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n         }\n@@ -641,6 +677,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n     match impl_item.node {\n         ImplItemKind::Const(ref ty, ref expr) => {\n+            visitor.visit_id(impl_item.id);\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expr);\n         }\n@@ -655,31 +692,40 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n                              impl_item.id);\n         }\n         ImplItemKind::Type(ref ty) => {\n+            visitor.visit_id(impl_item.id);\n             visitor.visit_ty(ty);\n         }\n     }\n }\n \n pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData) {\n+    visitor.visit_id(struct_definition.id());\n     walk_list!(visitor, visit_struct_field, struct_definition.fields());\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {\n+    visitor.visit_id(struct_field.id);\n     visitor.visit_vis(&struct_field.vis);\n     visitor.visit_name(struct_field.span, struct_field.name);\n     visitor.visit_ty(&struct_field.ty);\n     walk_list!(visitor, visit_attribute, &struct_field.attrs);\n }\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {\n+    visitor.visit_id(block.id);\n     walk_list!(visitor, visit_stmt, &block.stmts);\n     walk_list!(visitor, visit_expr, &block.expr);\n }\n \n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n     match statement.node {\n-        StmtDecl(ref declaration, _) => visitor.visit_decl(declaration),\n-        StmtExpr(ref expression, _) | StmtSemi(ref expression, _) => {\n+        StmtDecl(ref declaration, id) => {\n+            visitor.visit_id(id);\n+            visitor.visit_decl(declaration)\n+        }\n+        StmtExpr(ref expression, id) |\n+        StmtSemi(ref expression, id) => {\n+            visitor.visit_id(id);\n             visitor.visit_expr(expression)\n         }\n     }\n@@ -693,6 +739,7 @@ pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) {\n }\n \n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n+    visitor.visit_id(expression.id);\n     match expression.node {\n         ExprBox(ref subexpression) => {\n             visitor.visit_expr(subexpression)\n@@ -815,6 +862,7 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n \n pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n     if let Visibility::Restricted { ref path, id } = *vis {\n+        visitor.visit_id(id);\n         visitor.visit_path(path, id)\n     }\n }\n@@ -837,15 +885,16 @@ impl IdRange {\n         self.min >= self.max\n     }\n \n+    pub fn contains(&self, id: NodeId) -> bool {\n+        id >= self.min && id < self.max\n+    }\n+\n     pub fn add(&mut self, id: NodeId) {\n         self.min = cmp::min(self.min, id);\n         self.max = cmp::max(self.max, id + 1);\n     }\n }\n \n-pub trait IdVisitingOperation {\n-    fn visit_id(&mut self, node_id: NodeId);\n-}\n \n pub struct IdRangeComputingVisitor {\n     pub result: IdRange,\n@@ -861,190 +910,20 @@ impl IdRangeComputingVisitor {\n     }\n }\n \n-impl IdVisitingOperation for IdRangeComputingVisitor {\n+impl<'v> Visitor<'v> for IdRangeComputingVisitor {\n     fn visit_id(&mut self, id: NodeId) {\n         self.result.add(id);\n     }\n }\n \n-pub struct IdVisitor<'a, O: 'a> {\n-    operation: &'a mut O,\n-\n-    // In general, the id visitor visits the contents of an item, but\n-    // not including nested trait/impl items, nor other nested items.\n-    // The base visitor itself always skips nested items, but not\n-    // trait/impl items. This means in particular that if you start by\n-    // visiting a trait or an impl, you should not visit the\n-    // trait/impl items respectively.  This is handled by setting\n-    // `skip_members` to true when `visit_item` is on the stack. This\n-    // way, if the user begins by calling `visit_trait_item`, we will\n-    // visit the trait item, but if they begin with `visit_item`, we\n-    // won't visit the (nested) trait items.\n-    skip_members: bool,\n-}\n-\n-impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {\n-    pub fn new(operation: &'a mut O) -> IdVisitor<'a, O> {\n-        IdVisitor { operation: operation, skip_members: false }\n-    }\n-\n-    fn visit_generics_helper(&mut self, generics: &Generics) {\n-        for type_parameter in generics.ty_params.iter() {\n-            self.operation.visit_id(type_parameter.id)\n-        }\n-        for lifetime in &generics.lifetimes {\n-            self.operation.visit_id(lifetime.lifetime.id)\n-        }\n-    }\n-}\n-\n-impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n-    fn visit_mod(&mut self, module: &Mod, _: Span, node_id: NodeId) {\n-        self.operation.visit_id(node_id);\n-        walk_mod(self, module)\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n-        self.operation.visit_id(foreign_item.id);\n-        walk_foreign_item(self, foreign_item)\n-    }\n-\n-    fn visit_item(&mut self, item: &Item) {\n-        assert!(!self.skip_members);\n-        self.skip_members = true;\n-\n-        self.operation.visit_id(item.id);\n-        match item.node {\n-            ItemUse(ref view_path) => {\n-                match view_path.node {\n-                    ViewPathSimple(_, _) |\n-                    ViewPathGlob(_) => {}\n-                    ViewPathList(_, ref paths) => {\n-                        for path in paths {\n-                            self.operation.visit_id(path.node.id())\n-                        }\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-        walk_item(self, item);\n-\n-        self.skip_members = false;\n-    }\n-\n-    fn visit_local(&mut self, local: &Local) {\n-        self.operation.visit_id(local.id);\n-        walk_local(self, local)\n-    }\n-\n-    fn visit_block(&mut self, block: &Block) {\n-        self.operation.visit_id(block.id);\n-        walk_block(self, block)\n-    }\n-\n-    fn visit_stmt(&mut self, statement: &Stmt) {\n-        self.operation.visit_id(statement.node.id());\n-        walk_stmt(self, statement)\n-    }\n-\n-    fn visit_pat(&mut self, pattern: &Pat) {\n-        self.operation.visit_id(pattern.id);\n-        walk_pat(self, pattern)\n-    }\n-\n-    fn visit_expr(&mut self, expression: &Expr) {\n-        self.operation.visit_id(expression.id);\n-        walk_expr(self, expression)\n-    }\n-\n-    fn visit_ty(&mut self, typ: &Ty) {\n-        self.operation.visit_id(typ.id);\n-        walk_ty(self, typ)\n-    }\n-\n-    fn visit_generics(&mut self, generics: &Generics) {\n-        self.visit_generics_helper(generics);\n-        walk_generics(self, generics)\n-    }\n-\n-    fn visit_fn(&mut self,\n-                function_kind: FnKind<'v>,\n-                function_declaration: &'v FnDecl,\n-                block: &'v Block,\n-                span: Span,\n-                node_id: NodeId) {\n-        self.operation.visit_id(node_id);\n-\n-        match function_kind {\n-            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n-                self.visit_generics_helper(generics)\n-            }\n-            FnKind::Method(_, sig, _, _) => {\n-                self.visit_generics_helper(&sig.generics)\n-            }\n-            FnKind::Closure(_) => {}\n-        }\n-\n-        for argument in &function_declaration.inputs {\n-            self.operation.visit_id(argument.id)\n-        }\n-\n-        walk_fn(self, function_kind, function_declaration, block, span);\n-    }\n-\n-    fn visit_struct_field(&mut self, struct_field: &StructField) {\n-        self.operation.visit_id(struct_field.id);\n-        walk_struct_field(self, struct_field)\n-    }\n-\n-    fn visit_variant_data(&mut self,\n-                          struct_def: &VariantData,\n-                          _: Name,\n-                          _: &Generics,\n-                          _: NodeId,\n-                          _: Span) {\n-        self.operation.visit_id(struct_def.id());\n-        walk_struct_def(self, struct_def);\n-    }\n-\n-    fn visit_trait_item(&mut self, ti: &TraitItem) {\n-        if !self.skip_members {\n-            self.operation.visit_id(ti.id);\n-            walk_trait_item(self, ti);\n-        }\n-    }\n-\n-    fn visit_impl_item(&mut self, ii: &ImplItem) {\n-        if !self.skip_members {\n-            self.operation.visit_id(ii.id);\n-            walk_impl_item(self, ii);\n-        }\n-    }\n-\n-    fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n-        self.operation.visit_id(lifetime.id);\n-    }\n-\n-    fn visit_lifetime_def(&mut self, def: &LifetimeDef) {\n-        self.visit_lifetime(&def.lifetime);\n-    }\n-\n-    fn visit_trait_ref(&mut self, trait_ref: &TraitRef) {\n-        self.operation.visit_id(trait_ref.ref_id);\n-        walk_trait_ref(self, trait_ref);\n-    }\n-}\n-\n /// Computes the id range for a single fn body, ignoring nested items.\n pub fn compute_id_range_for_fn_body(fk: FnKind,\n                                     decl: &FnDecl,\n                                     body: &Block,\n                                     sp: Span,\n                                     id: NodeId)\n                                     -> IdRange {\n-    let mut visitor = IdRangeComputingVisitor { result: IdRange::max() };\n-    let mut id_visitor = IdVisitor::new(&mut visitor);\n-    id_visitor.visit_fn(fk, decl, body, sp, id);\n-    id_visitor.operation.result\n+    let mut visitor = IdRangeComputingVisitor::new();\n+    visitor.visit_fn(fk, decl, body, sp, id);\n+    visitor.result()\n }"}, {"sha": "b3f222b22e8915314c1b1d7883b00a22aa8ac935", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -197,7 +197,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     fn visit_fn(&mut self, fk: intravisit::FnKind<'ast>, fd: &'ast FnDecl,\n                 b: &'ast Block, s: Span, id: NodeId) {\n         assert_eq!(self.parent_node, id);\n-        intravisit::walk_fn(self, fk, fd, b, s);\n+        intravisit::walk_fn(self, fk, fd, b, s, id);\n     }\n \n     fn visit_block(&mut self, block: &'ast Block) {"}, {"sha": "20bf4f7d3edbb68dc88517338e2be124937d8642", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -1362,9 +1362,9 @@ pub enum ViewPath_ {\n /// TraitRef's appear in impls.\n ///\n /// resolve maps each TraitRef's ref_id to its defining trait; that's all\n-/// that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n-/// If this impl is an ItemImpl, the impl_id is redundant (it could be the\n-/// same as the impl's node id).\n+/// that the ref_id is for. Note that ref_id's value is not the NodeId of the\n+/// trait being referred to but just a unique NodeId that serves as a key\n+/// within the DefMap.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TraitRef {\n     pub path: Path,"}, {"sha": "357276e31f5b0ea579e03a10ba19f77a955f4fee", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -45,7 +45,6 @@ use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n use hir;\n use hir::intravisit as hir_visit;\n-use hir::intravisit::{IdVisitor, IdVisitingOperation};\n use syntax::visit as ast_visit;\n \n /// Information about the registered lints.\n@@ -663,9 +662,11 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     }\n \n     fn visit_ids<F>(&mut self, f: F)\n-        where F: FnOnce(&mut IdVisitor<LateContext>)\n+        where F: FnOnce(&mut IdVisitor)\n     {\n-        let mut v = IdVisitor::new(self);\n+        let mut v = IdVisitor {\n+            cx: self\n+        };\n         f(&mut v);\n     }\n }\n@@ -779,7 +780,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_fn(&mut self, fk: hir_visit::FnKind<'v>, decl: &'v hir::FnDecl,\n                 body: &'v hir::Block, span: Span, id: ast::NodeId) {\n         run_lints!(self, check_fn, late_passes, fk, decl, body, span, id);\n-        hir_visit::walk_fn(self, fk, decl, body, span);\n+        hir_visit::walk_fn(self, fk, decl, body, span, id);\n         run_lints!(self, check_fn_post, late_passes, fk, decl, body, span, id);\n     }\n \n@@ -820,7 +821,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n \n     fn visit_mod(&mut self, m: &hir::Mod, s: Span, n: ast::NodeId) {\n         run_lints!(self, check_mod, late_passes, m, s, n);\n-        hir_visit::walk_mod(self, m);\n+        hir_visit::walk_mod(self, m, n);\n         run_lints!(self, check_mod_post, late_passes, m, s, n);\n     }\n \n@@ -859,7 +860,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n         self.with_lint_attrs(&trait_item.attrs, |cx| {\n             run_lints!(cx, check_trait_item, late_passes, trait_item);\n-            cx.visit_ids(|v| v.visit_trait_item(trait_item));\n+            cx.visit_ids(|v| hir_visit::walk_trait_item(v, trait_item));\n             hir_visit::walk_trait_item(cx, trait_item);\n             run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n         });\n@@ -868,7 +869,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n         self.with_lint_attrs(&impl_item.attrs, |cx| {\n             run_lints!(cx, check_impl_item, late_passes, impl_item);\n-            cx.visit_ids(|v| v.visit_impl_item(impl_item));\n+            cx.visit_ids(|v| hir_visit::walk_impl_item(v, impl_item));\n             hir_visit::walk_impl_item(cx, impl_item);\n             run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n         });\n@@ -1046,16 +1047,30 @@ impl<'a> ast_visit::Visitor for EarlyContext<'a> {\n     }\n }\n \n+struct IdVisitor<'a, 'b: 'a, 'tcx: 'a+'b> {\n+    cx: &'a mut LateContext<'b, 'tcx>\n+}\n+\n // Output any lints that were previously added to the session.\n-impl<'a, 'tcx> IdVisitingOperation for LateContext<'a, 'tcx> {\n+impl<'a, 'b, 'tcx, 'v> hir_visit::Visitor<'v> for IdVisitor<'a, 'b, 'tcx> {\n+\n     fn visit_id(&mut self, id: ast::NodeId) {\n-        if let Some(lints) = self.sess().lints.borrow_mut().remove(&id) {\n+        if let Some(lints) = self.cx.sess().lints.borrow_mut().remove(&id) {\n             debug!(\"LateContext::visit_id: id={:?} lints={:?}\", id, lints);\n             for (lint_id, span, msg) in lints {\n-                self.span_lint(lint_id.lint, span, &msg[..])\n+                self.cx.span_lint(lint_id.lint, span, &msg[..])\n             }\n         }\n     }\n+\n+    fn visit_trait_item(&mut self, _ti: &hir::TraitItem) {\n+        // Do not recurse into trait or impl items automatically. These are\n+        // processed separately by calling hir_visit::walk_trait_item()\n+    }\n+\n+    fn visit_impl_item(&mut self, _ii: &hir::ImplItem) {\n+        // See visit_trait_item()\n+    }\n }\n \n enum CheckLintNameResult {\n@@ -1172,7 +1187,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(&krate.attrs, |cx| {\n-        cx.visit_id(ast::CRATE_NODE_ID);\n         cx.visit_ids(|v| {\n             hir_visit::walk_crate(v, krate);\n         });"}, {"sha": "484aacfd9ecc01f22747d3db740c4821fc678556", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -44,7 +44,7 @@ use syntax::parse::token::InternedString;\n use syntax_pos::Span;\n use rustc_back::target::Target;\n use hir;\n-use hir::intravisit::{IdVisitor, IdVisitingOperation, Visitor};\n+use hir::intravisit::Visitor;\n \n pub use self::DefLike::{DlDef, DlField, DlImpl};\n pub use self::NativeLibraryKind::{NativeStatic, NativeFramework, NativeUnknown};\n@@ -292,11 +292,6 @@ impl InlinedItem {\n             InlinedItem::ImplItem(_, ref ii) => visitor.visit_impl_item(ii),\n         }\n     }\n-\n-    pub fn visit_ids<O: IdVisitingOperation>(&self, operation: &mut O) {\n-        let mut id_visitor = IdVisitor::new(operation);\n-        self.visit(&mut id_visitor);\n-    }\n }\n \n // FIXME: find a better place for this?"}, {"sha": "446767ecbcaba1e1cb1daf08da4c0602b2826fff", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n     fn visit_fn(&mut self, fn_kind: FnKind<'v>, fn_decl: &'v hir::FnDecl,\n-                block: &'v hir::Block, span: Span, _: ast::NodeId) {\n+                block: &'v hir::Block, span: Span, id: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n             FnKind::ItemFn(_, _, unsafety, _, _, _, _) =>\n@@ -96,7 +96,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n             self.unsafe_context = UnsafeContext::new(SafeContext)\n         }\n \n-        intravisit::walk_fn(self, fn_kind, fn_decl, block, span);\n+        intravisit::walk_fn(self, fn_kind, fn_decl, block, span, id);\n \n         self.unsafe_context = old_unsafe_context\n     }"}, {"sha": "1222b5f42a19f6aeca5de5d471cadc434a05f1a9", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -390,7 +390,7 @@ fn visit_fn(ir: &mut IrMaps,\n \n     // gather up the various local variables, significant expressions,\n     // and so forth:\n-    intravisit::walk_fn(&mut fn_maps, fk, decl, body, sp);\n+    intravisit::walk_fn(&mut fn_maps, fk, decl, body, sp, id);\n \n     // Special nodes and variables:\n     // - exit_ln represents the end of the fn, either by return or panic"}, {"sha": "60977a80946ff6e23950ef024d739eb4764a45a1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -974,7 +974,9 @@ impl fmt::Display for ty::InferTy {\n             ty::TyVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n             ty::IntVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n             ty::FloatVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n-            ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) => write!(f, \"_\"),\n+            ty::TyVar(_) => write!(f, \"_\"),\n+            ty::IntVar(_) => write!(f, \"{}\", \"{integer}\"),\n+            ty::FloatVar(_) => write!(f, \"{}\", \"{float}\"),\n             ty::FreshTy(v) => write!(f, \"FreshTy({})\", v),\n             ty::FreshIntTy(v) => write!(f, \"FreshIntTy({})\", v),\n             ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({})\", v)"}, {"sha": "1fe47cd4853876ae544d568f32e65ac0481ffab2", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -197,7 +197,7 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n                              decl,\n                              body);\n \n-    intravisit::walk_fn(this, fk, decl, body, sp);\n+    intravisit::walk_fn(this, fk, decl, body, sp, id);\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,"}, {"sha": "d3952de2fbe30eb1088c6cbaf1df0515d5264419", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -34,7 +34,7 @@ use std::iter::{FromIterator, IntoIterator, repeat};\n \n use rustc::hir;\n use rustc::hir::{Pat, PatKind};\n-use rustc::hir::intravisit::{self, IdVisitor, IdVisitingOperation, Visitor, FnKind};\n+use rustc::hir::intravisit::{self, Visitor, FnKind};\n use rustc_back::slice;\n \n use syntax::ast::{self, DUMMY_NODE_ID, NodeId};\n@@ -474,7 +474,7 @@ struct RenamingRecorder<'map> {\n     renaming_map: &'map mut FnvHashMap<(NodeId, Span), NodeId>\n }\n \n-impl<'map> IdVisitingOperation for RenamingRecorder<'map> {\n+impl<'v, 'map> Visitor<'v> for RenamingRecorder<'map> {\n     fn visit_id(&mut self, node_id: NodeId) {\n         let key = (node_id, self.origin_span);\n         self.renaming_map.insert(key, self.substituted_node_id);\n@@ -529,9 +529,7 @@ impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> {\n                 renaming_map: renaming_map,\n             };\n \n-            let mut id_visitor = IdVisitor::new(&mut renaming_recorder);\n-\n-            id_visitor.visit_expr(const_expr);\n+            renaming_recorder.visit_expr(const_expr);\n         }\n     }\n }\n@@ -1049,7 +1047,7 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n         _ => cx.param_env = ParameterEnvironment::for_item(cx.tcx, fn_id),\n     }\n \n-    intravisit::walk_fn(cx, kind, decl, body, sp);\n+    intravisit::walk_fn(cx, kind, decl, body, sp, fn_id);\n \n     for input in &decl.inputs {\n         check_irrefutable(cx, &input.pat, true);"}, {"sha": "bea6b7e28344e01e08d60337d81c102d80228ef1", "filename": "src/librustc_incremental/calculate_svh.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -385,9 +385,9 @@ mod svh_visitor {\n             SawItem.hash(self.st); visit::walk_item(self, i)\n         }\n \n-        fn visit_mod(&mut self, m: &'a Mod, _s: Span, _n: NodeId) {\n+        fn visit_mod(&mut self, m: &'a Mod, _s: Span, n: NodeId) {\n             debug!(\"visit_mod: st={:?}\", self.st);\n-            SawMod.hash(self.st); visit::walk_mod(self, m)\n+            SawMod.hash(self.st); visit::walk_mod(self, m, n)\n         }\n \n         fn visit_decl(&mut self, d: &'a Decl) {\n@@ -406,9 +406,9 @@ mod svh_visitor {\n         }\n \n         fn visit_fn(&mut self, fk: FnKind<'a>, fd: &'a FnDecl,\n-                    b: &'a Block, s: Span, _: NodeId) {\n+                    b: &'a Block, s: Span, n: NodeId) {\n             debug!(\"visit_fn: st={:?}\", self.st);\n-            SawFn.hash(self.st); visit::walk_fn(self, fk, fd, b, s)\n+            SawFn.hash(self.st); visit::walk_fn(self, fk, fd, b, s, n)\n         }\n \n         fn visit_trait_item(&mut self, ti: &'a TraitItem) {"}, {"sha": "454c805ab577e233ea8659a112bbd572b3cdddd8", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -18,7 +18,7 @@ use rustc::session::Session;\n use rustc::hir;\n use rustc::hir::fold;\n use rustc::hir::fold::Folder;\n-use rustc::hir::intravisit::{IdRange, IdRangeComputingVisitor, IdVisitingOperation};\n+use rustc::hir::intravisit::{Visitor, IdRangeComputingVisitor, IdRange};\n \n use common as c;\n use cstore;\n@@ -693,7 +693,7 @@ struct SideTableEncodingIdVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> {\n     rbml_w: &'a mut Encoder<'b>,\n }\n \n-impl<'a, 'b, 'c, 'tcx> IdVisitingOperation for\n+impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for\n         SideTableEncodingIdVisitor<'a, 'b, 'c, 'tcx> {\n     fn visit_id(&mut self, id: ast::NodeId) {\n         encode_side_tables_for_id(self.ecx, self.rbml_w, id)\n@@ -704,7 +704,7 @@ fn encode_side_tables_for_ii(ecx: &e::EncodeContext,\n                              rbml_w: &mut Encoder,\n                              ii: &InlinedItem) {\n     rbml_w.start_tag(c::tag_table as usize);\n-    ii.visit_ids(&mut SideTableEncodingIdVisitor {\n+    ii.visit(&mut SideTableEncodingIdVisitor {\n         ecx: ecx,\n         rbml_w: rbml_w\n     });\n@@ -1242,9 +1242,9 @@ fn copy_item_types(dcx: &DecodeContext, ii: &InlinedItem, orig_did: DefId) {\n     }\n }\n \n-fn inlined_item_id_range(v: &InlinedItem) -> IdRange {\n+fn inlined_item_id_range(ii: &InlinedItem) -> IdRange {\n     let mut visitor = IdRangeComputingVisitor::new();\n-    v.visit_ids(&mut visitor);\n+    ii.visit(&mut visitor);\n     visitor.result()\n }\n "}, {"sha": "11d6b0779275ee40f6f6a56ae6728fdb9d0c687f", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n             build::construct_fn(cx, id, arguments, fn_sig.output, body)\n         });\n \n-        intravisit::walk_fn(self, fk, decl, body, span);\n+        intravisit::walk_fn(self, fk, decl, body, span, id);\n     }\n }\n "}, {"sha": "1030a4b0116de5a07572ffa53fa974d909f4b6b7", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n \n         let qualif = self.with_mode(mode, |this| {\n             this.with_euv(Some(fn_id), |euv| euv.walk_fn(fd, b));\n-            intravisit::walk_fn(this, fk, fd, b, s);\n+            intravisit::walk_fn(this, fk, fd, b, s, fn_id);\n             this.qualif\n         });\n "}, {"sha": "2a5dc50cae92f4682044ffae57dc069e04ce409c", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n             let mut euv = euv::ExprUseVisitor::new(&mut delegate, &infcx);\n             euv.walk_fn(fd, b);\n         });\n-        intravisit::walk_fn(self, fk, fd, b, s)\n+        intravisit::walk_fn(self, fk, fd, b, s, fn_id)\n     }\n }\n "}, {"sha": "793e52d37920354be1a9373fbdd672920c0eaba5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -291,7 +291,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             }\n         }\n \n-        intravisit::walk_mod(self, m);\n+        intravisit::walk_mod(self, m, id);\n     }\n \n     fn visit_macro_def(&mut self, md: &'v hir::MacroDef) {"}, {"sha": "8c8cf1da467388cc98c3bec6d88c8cfda283e077", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -825,8 +825,6 @@ enum NameBindingKind<'a> {\n     Import {\n         binding: &'a NameBinding<'a>,\n         directive: &'a ImportDirective<'a>,\n-        // Some(error) if using this imported name causes the import to be a privacy error\n-        privacy_error: Option<Box<PrivacyError<'a>>>,\n     },\n }\n \n@@ -1206,16 +1204,11 @@ impl<'a> Resolver<'a> {\n             self.used_crates.insert(krate);\n         }\n \n-        let (directive, privacy_error) = match binding.kind {\n-            NameBindingKind::Import { directive, ref privacy_error, .. } =>\n-                (directive, privacy_error),\n+        let directive = match binding.kind {\n+            NameBindingKind::Import { directive, .. } => directive,\n             _ => return,\n         };\n \n-        if let Some(error) = privacy_error.as_ref() {\n-            self.privacy_errors.push((**error).clone());\n-        }\n-\n         if !self.make_glob_map {\n             return;\n         }"}, {"sha": "fc5e2a48e876ccc2eaf5391dd85a4e399f7ec2ee", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -73,13 +73,11 @@ pub struct ImportDirective<'a> {\n impl<'a> ImportDirective<'a> {\n     // Given the binding to which this directive resolves in a particular namespace,\n     // this returns the binding for the name this directive defines in that namespace.\n-    fn import(&'a self, binding: &'a NameBinding<'a>, privacy_error: Option<Box<PrivacyError<'a>>>)\n-              -> NameBinding<'a> {\n+    fn import(&'a self, binding: &'a NameBinding<'a>) -> NameBinding<'a> {\n         NameBinding {\n             kind: NameBindingKind::Import {\n                 binding: binding,\n                 directive: self,\n-                privacy_error: privacy_error,\n             },\n             span: self.span,\n             vis: self.vis,\n@@ -328,7 +326,7 @@ impl<'a> ::ModuleS<'a> {\n     fn define_in_glob_importers(&self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>) {\n         if !binding.is_importable() || !binding.is_pseudo_public() { return }\n         for &(importer, directive) in self.glob_importers.borrow_mut().iter() {\n-            let _ = importer.try_define_child(name, ns, directive.import(binding, None));\n+            let _ = importer.try_define_child(name, ns, directive.import(binding));\n         }\n     }\n }\n@@ -409,7 +407,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             });\n-            let dummy_binding = directive.import(dummy_binding, None);\n+            let dummy_binding = directive.import(dummy_binding);\n \n             let _ = source_module.try_define_child(target, ValueNS, dummy_binding.clone());\n             let _ = source_module.try_define_child(target, TypeNS, dummy_binding);\n@@ -494,38 +492,37 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             self.resolver.resolve_name_in_module(target_module, source, TypeNS, false, true);\n \n         let module_ = self.resolver.current_module;\n+        let mut privacy_error = true;\n         for &(ns, result, determined) in &[(ValueNS, &value_result, value_determined),\n                                            (TypeNS, &type_result, type_determined)] {\n-            if determined.get() { continue }\n-            if let Indeterminate = *result { continue }\n-\n-            determined.set(true);\n-            if let Success(binding) = *result {\n-                if !binding.is_importable() {\n+            match *result {\n+                Failed(..) if !determined.get() => {\n+                    determined.set(true);\n+                    module_.update_resolution(target, ns, |resolution| {\n+                        resolution.single_imports.directive_failed()\n+                    });\n+                }\n+                Success(binding) if !binding.is_importable() => {\n                     let msg = format!(\"`{}` is not directly importable\", target);\n                     span_err!(self.resolver.session, directive.span, E0253, \"{}\", &msg);\n                     // Do not import this illegal binding. Import a dummy binding and pretend\n                     // everything is fine\n                     self.import_dummy_binding(module_, directive);\n                     return Success(());\n                 }\n-\n-                let privacy_error = if !self.resolver.is_accessible(binding.vis) {\n-                    Some(Box::new(PrivacyError(directive.span, source, binding)))\n-                } else {\n-                    None\n-                };\n-\n-                let imported_binding = directive.import(binding, privacy_error);\n-                let conflict = module_.try_define_child(target, ns, imported_binding);\n-                if let Err(old_binding) = conflict {\n-                    let binding = &directive.import(binding, None);\n-                    self.resolver.report_conflict(module_, target, ns, binding, old_binding);\n+                Success(binding) if !self.resolver.is_accessible(binding.vis) => {}\n+                Success(binding) if !determined.get() => {\n+                    determined.set(true);\n+                    let imported_binding = directive.import(binding);\n+                    let conflict = module_.try_define_child(target, ns, imported_binding);\n+                    if let Err(old_binding) = conflict {\n+                        let binding = &directive.import(binding);\n+                        self.resolver.report_conflict(module_, target, ns, binding, old_binding);\n+                    }\n+                    privacy_error = false;\n                 }\n-            } else {\n-                module_.update_resolution(target, ns, |resolution| {\n-                    resolution.single_imports.directive_failed();\n-                });\n+                Success(_) => privacy_error = false,\n+                _ => {}\n             }\n         }\n \n@@ -556,6 +553,14 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             _ => (),\n         }\n \n+        if privacy_error {\n+            for &(ns, result) in &[(ValueNS, &value_result), (TypeNS, &type_result)] {\n+                let binding = match *result { Success(binding) => binding, _ => continue };\n+                self.resolver.privacy_errors.push(PrivacyError(directive.span, source, binding));\n+                let _ = module_.try_define_child(target, ns, directive.import(binding));\n+            }\n+        }\n+\n         match (&value_result, &type_result) {\n             (&Success(binding), _) if !binding.pseudo_vis()\n                                               .is_at_least(directive.vis, self.resolver) &&\n@@ -592,19 +597,6 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             _ => {}\n         }\n \n-        // Report a privacy error here if all successful namespaces are privacy errors.\n-        let mut privacy_error = None;\n-        for &ns in &[ValueNS, TypeNS] {\n-            privacy_error = match module_.resolve_name(target, ns, true) {\n-                Success(&NameBinding {\n-                    kind: NameBindingKind::Import { ref privacy_error, .. }, ..\n-                }) => privacy_error.as_ref().map(|error| (**error).clone()),\n-                _ => continue,\n-            };\n-            if privacy_error.is_none() { break }\n-        }\n-        privacy_error.map(|error| self.resolver.privacy_errors.push(error));\n-\n         // Record what this import resolves to for later uses in documentation,\n         // this may resolve to either a value or a type, but for documentation\n         // purposes it's good enough to just favor one over the other.\n@@ -652,7 +644,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }).collect::<Vec<_>>();\n         for ((name, ns), binding) in bindings {\n             if binding.is_importable() && binding.is_pseudo_public() {\n-                let _ = module_.try_define_child(name, ns, directive.import(binding, None));\n+                let _ = module_.try_define_child(name, ns, directive.import(binding));\n             }\n         }\n "}, {"sha": "6fdbc3282bccd01cb55ed792ab68ced9a3c65463", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx, 'v> Visitor<'v> for AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 span: Span,\n                 id: ast::NodeId)\n     {\n-        intravisit::walk_fn(self, fn_kind, decl, body, span);\n+        intravisit::walk_fn(self, fn_kind, decl, body, span, id);\n         self.analyze_closure(id, span, decl, body);\n     }\n }"}, {"sha": "1f6f57c70f72f09dd6186c8eb49449aafdd5fe99", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -406,7 +406,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                             let arg_idx = match arg_index_consumed.get_mut(i) {\n                                 None => 0, // error already emitted elsewhere\n                                 Some(offset) => {\n-                                    let arg_idx = self.arg_index_map[i][*offset];\n+                                    let ref idx_map = self.arg_index_map[i];\n+                                    // unwrap_or branch: error already emitted elsewhere\n+                                    let arg_idx = *idx_map.get(*offset).unwrap_or(&0);\n                                     *offset += 1;\n                                     arg_idx\n                                 }"}, {"sha": "0f171805bb0a988fb95853932fa3619b46b37627", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -193,6 +193,20 @@ impl MultiSpan {\n         }\n     }\n \n+    pub fn from_span(primary_span: Span) -> MultiSpan {\n+        MultiSpan {\n+            primary_spans: vec![primary_span],\n+            span_labels: vec![]\n+        }\n+    }\n+\n+    pub fn from_spans(vec: Vec<Span>) -> MultiSpan {\n+        MultiSpan {\n+            primary_spans: vec,\n+            span_labels: vec![]\n+        }\n+    }\n+\n     pub fn push_span_label(&mut self, span: Span, label: String) {\n         self.span_labels.push((span, label));\n     }\n@@ -240,10 +254,7 @@ impl MultiSpan {\n \n impl From<Span> for MultiSpan {\n     fn from(span: Span) -> MultiSpan {\n-        MultiSpan {\n-            primary_spans: vec![span],\n-            span_labels: vec![]\n-        }\n+        MultiSpan::from_span(span)\n     }\n }\n "}, {"sha": "47e1c09f380b89d6601257017e709657766ab559", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n     //~| expected type `i32`\n-    //~| found type `[_; 3]`\n+    //~| found type `[{integer}; 3]`\n     //~| expected i32, found array of 3 elements\n \n     let x: &[i32] = &[1, 2, 3];"}, {"sha": "5547d19868d34e2340473e9fc480a8092a59e9ae", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -11,6 +11,6 @@\n static i: String = 10;\n //~^ ERROR mismatched types\n //~| expected type `std::string::String`\n-//~| found type `_`\n+//~| found type `{integer}`\n //~| expected struct `std::string::String`, found integral variable\n fn main() { println!(\"{}\", i); }"}, {"sha": "86702a7463fd0872957e6f96f79c4462c512d3ec", "filename": "src/test/compile-fail/coerce-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     f(&x);\n     //~^ ERROR mismatched types\n     //~| expected type `&mut i32`\n-    //~| found type `&_`\n+    //~| found type `&{integer}`\n     //~| values differ in mutability\n }"}, {"sha": "a619f33468f4a94e068fe70d6a8aa26da03c6312", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n     //~| expected type `&[i32]`\n-    //~| found type `[_; 1]`\n+    //~| found type `[{integer}; 1]`\n     //~| expected &-ptr, found array of 1 elements\n }"}, {"sha": "1a7ceb2e7639e72392f34b352af61f0bd621e0c1", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     x = 5;\n     //~^ ERROR mismatched types\n     //~| expected type `std::option::Option<usize>`\n-    //~| found type `_`\n+    //~| found type `{integer}`\n     //~| expected enum `std::option::Option`, found integral variable\n }"}, {"sha": "40013a7ee43bb142495a317c1f5640b401209aa4", "filename": "src/test/compile-fail/if-let-arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n         //~^ expected (), found integral variable\n         //~| expected type `()`\n-        //~| found type `_`\n+        //~| found type `{integer}`\n         ()\n     } else {                //~ NOTE: `if let` arm with an incompatible type\n         1"}, {"sha": "59c61a42e077f22146391ed3a7eb62bb551c507e", "filename": "src/test/compile-fail/ifmt-bad-arg.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -41,6 +41,12 @@ fn main() {\n     //~^ ERROR invalid reference to argument `0` (no arguments given)\n     //~^^ ERROR invalid reference to argument `1` (no arguments given)\n \n+    // bad named arguments, #35082\n+\n+    format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+    //~^ ERROR there is no argument named `valueb`\n+    //~^^ ERROR named argument never used\n+\n     // bad syntax of the format string\n \n     format!(\"{\"); //~ ERROR: expected `'}'` but string was terminated"}, {"sha": "61d54b3f8e4fdf407ce95120cc313d55d0dbc2ef", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -13,7 +13,7 @@\n \n fn main() {\n     fn bar<T>(_: T) {}\n-    [0][0u8]; //~ ERROR: `[_]: std::ops::Index<u8>` is not satisfied\n+    [0][0u8]; //~ ERROR: `[{integer}]: std::ops::Index<u8>` is not satisfied\n \n     [0][0]; // should infer to be a usize\n "}, {"sha": "f2686ae4d196b432751df2d1abaffa2d7ab55b78", "filename": "src/test/compile-fail/integral-variable-unification-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let mut x = 2;\n     x = 5.0;\n     //~^ ERROR mismatched types\n-    //~| expected type `_`\n-    //~| found type `_`\n+    //~| expected type `{integer}`\n+    //~| found type `{float}`\n     //~| expected integral variable, found floating-point variable\n }"}, {"sha": "abddf6ba7a38d4550392a514e56cc7d51e45820e", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -17,13 +17,13 @@ pub fn main() {\n     let _x: usize = match Some(1) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<_>`\n+        //~| expected type `std::option::Option<{integer}>`\n         //~| found type `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<_>`\n+        //~| expected type `std::option::Option<{integer}>`\n         //~| found type `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     };"}, {"sha": "3ea136aca4becdc9da48b09ef452906a7377e5d9", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[{integer}]: std::marker::Sized` is not satisfied\n }"}, {"sha": "e07dfaf9fe59e1d7296c159925bd98f3ac7ed804", "filename": "src/test/compile-fail/issue-19991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -14,7 +14,7 @@\n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n                                            //~| expected type `()`\n-                                           //~| found type `_`\n+                                           //~| found type `{integer}`\n                                            //~| expected (), found integral variable\n         765\n     };"}, {"sha": "22772e596b19ec19a68c607ef399bc903502504b", "filename": "src/test/compile-fail/issue-26237.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -11,7 +11,7 @@\n macro_rules! macro_panic {\n     ($not_a_function:expr, $some_argument:ident) => {\n         $not_a_function($some_argument)\n-        //~^ ERROR expected function, found `_`\n+        //~^ ERROR expected function, found `{integer}`\n     }\n }\n "}, {"sha": "b1f668d9c5e217f8ac1b085ff8a1b3022be4842a", "filename": "src/test/compile-fail/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     } else if false {\n //~^ ERROR if may be missing an else clause\n //~| expected type `()`\n-//~| found type `_`\n+//~| found type `{integer}`\n //~| expected (), found integral variable\n         1\n     };"}, {"sha": "77588e5c221fd38a554989388f01c1e028b83509", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -14,7 +14,7 @@ const A: (isize,isize) = (4,2);\n fn main() {\n     match 42 { A => () }\n     //~^ ERROR mismatched types\n-    //~| expected type `_`\n+    //~| expected type `{integer}`\n     //~| found type `(isize, isize)`\n     //~| expected integral variable, found tuple\n }"}, {"sha": "ed465117344d407e682d5deabf14f9c70d9999ea", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -25,12 +25,12 @@ fn main() {\n     match &Some(42) {\n         Some(x) => (),\n         //~^ ERROR mismatched types\n-        //~| expected type `&std::option::Option<_>`\n+        //~| expected type `&std::option::Option<{integer}>`\n         //~| found type `std::option::Option<_>`\n         //~| expected &-ptr, found enum `std::option::Option`\n         None => ()\n         //~^ ERROR mismatched types\n-        //~| expected type `&std::option::Option<_>`\n+        //~| expected type `&std::option::Option<{integer}>`\n         //~| found type `std::option::Option<_>`\n         //~| expected &-ptr, found enum `std::option::Option`\n     }"}, {"sha": "a455a7b2d5d0f7b190f06542bc91619c4cf919e4", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -21,5 +21,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR `Box<_>: std::marker::Copy` is not satisfied\n+    //~^ ERROR `Box<{integer}>: std::marker::Copy` is not satisfied\n }"}, {"sha": "f89b3e39390d31de8b22d29cbea8c112ede25b71", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -20,14 +20,14 @@ fn main() {\n         10 ... \"what\" => ()\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n-    //~| start type: _\n+    //~| start type: {integer}\n     //~| end type: &'static str\n \n     match 5 {\n         'c' ... 100 => { }\n         _ => { }\n     };\n     //~^^^ ERROR mismatched types\n-    //~| expected type `_`\n+    //~| expected type `{integer}`\n     //~| found type `char`\n }"}, {"sha": "596cec167c218ac2ce674d1c7366c571143f2ce2", "filename": "src/test/compile-fail/match-vec-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     };\n \n     match &[0, 1, 2] {\n-        [..] => {} //~ ERROR expected an array or slice, found `&[_; 3]`\n+        [..] => {} //~ ERROR expected an array or slice, found `&[{integer}; 3]`\n     };\n \n     match &[0, 1, 2] {"}, {"sha": "03816362d46c34860aef664661f0898315338108", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -24,6 +24,6 @@ fn main() {\n                  //~| expected &-ptr, found struct `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n                       //~| expected type `&Foo`\n-                      //~| found type `&_`\n+                      //~| found type `&{integer}`\n                       //~| expected struct `Foo`, found integral variable\n }"}, {"sha": "318d121e4c2df45f20ceaecc3fd512f7b00ba203", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     // (separate lines to ensure the spans are accurate)\n \n      let &_ //~  ERROR mismatched types\n-            //~| expected type `&mut _`\n+            //~| expected type `&mut {integer}`\n             //~| found type `&_`\n             //~| values differ in mutability\n         = foo;\n@@ -23,7 +23,7 @@ fn main() {\n     let bar = &1;\n     let &_ = bar;\n     let &mut _ //~  ERROR mismatched types\n-               //~| expected type `&_`\n+               //~| expected type `&{integer}`\n                //~| found type `&mut _`\n                //~| values differ in mutability\n          = bar;"}, {"sha": "f31d3787334916bffb1565d63bd1eaf5df7067a8", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -15,5 +15,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5);\n     bar(x);\n-    //~^ ERROR `std::rc::Rc<_>: std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<{integer}>: std::marker::Send` is not satisfied\n }"}, {"sha": "7accf0ca8201c27da5c21be4463c7fe765572dac", "filename": "src/test/compile-fail/privacy-ns2.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -25,15 +25,15 @@ pub mod foo1 {\n }\n \n fn test_single1() {\n-    use foo1::Bar;  //~ ERROR function `Bar` is private\n+    use foo1::Bar;\n \n-    Bar();\n+    Bar(); //~ ERROR unresolved name `Bar`\n }\n \n fn test_list1() {\n-    use foo1::{Bar,Baz};  //~ ERROR `Bar` is private\n+    use foo1::{Bar,Baz};\n \n-    Bar();\n+    Bar(); //~ ERROR unresolved name `Bar`\n }\n \n // private type, public value\n@@ -46,15 +46,15 @@ pub mod foo2 {\n }\n \n fn test_single2() {\n-    use foo2::Bar;  //~ ERROR trait `Bar` is private\n+    use foo2::Bar;\n \n-    let _x : Box<Bar>;\n+    let _x : Box<Bar>; //~ ERROR type name `Bar` is undefined\n }\n \n fn test_list2() {\n-    use foo2::{Bar,Baz};  //~ ERROR `Bar` is private\n+    use foo2::{Bar,Baz};\n \n-    let _x: Box<Bar>;\n+    let _x: Box<Bar>; //~ ERROR type name `Bar` is undefined\n }\n \n // neither public"}, {"sha": "dc6833163a478b4f6d2ae342da44ce03d548de93", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -23,5 +23,5 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[{integer}]: std::marker::Sized` is not satisfied\n }"}, {"sha": "1758b28a32482555bb6911420f996ced91ed6330", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     let d = [0; 0.5];\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n-    //~| found type `_`\n+    //~| found type `{float}`\n     //~| expected usize, found floating-point variable\n     //~| ERROR expected usize for repeat count, found float [E0306]\n     let e = [0; \"foo\"];"}, {"sha": "2eba7c2e534e15abc2458d34ae90644577c5d0cf", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -16,8 +16,8 @@ fn main() {\n     match Foo(1.1, marker::PhantomData) {\n         1 => {}\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<_, _>`\n-    //~| found type `_`\n+    //~| expected type `Foo<{float}, _>`\n+    //~| found type `{integer}`\n     //~| expected struct `Foo`, found integral variable\n     }\n "}, {"sha": "2b2c23a3ce4e92c88fee61c0c242775e1a65cc7d", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let s: &str = \"hello\";\n-    let c: u8 = s[4]; //~ ERROR `str: std::ops::Index<_>` is not satisfied\n+    let c: u8 = s[4]; //~ ERROR `str: std::ops::Index<{integer}>` is not satisfied\n }"}, {"sha": "7e5510edb2c3377707469ca08fe23b0021103be2", "filename": "src/test/compile-fail/struct-base-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -24,6 +24,6 @@ fn main() {\n                                //~| expected struct `Foo`, found struct `Bar`\n     let f__isize = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n                                  //~| expected type `Foo`\n-                                 //~| found type `_`\n+                                 //~| found type `{integer}`\n                                  //~| expected struct `Foo`, found integral variable\n }"}, {"sha": "3703b15d4db836395e3407e816713d3a67ad4dc4", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -23,7 +23,7 @@ static foo: Foo = Foo { a: 2, ..bar }; //~  ERROR mismatched types\n                                        //~| expected struct `Foo`, found struct `Bar`\n static foo_i: Foo = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n                                        //~| expected type `Foo`\n-                                       //~| found type `_`\n+                                       //~| found type `{integer}`\n                                        //~| expected struct `Foo`, found integral variable\n \n fn main() {"}, {"sha": "777746a189c5feee96df9857b887b4e1bb824472", "filename": "src/test/compile-fail/traits-inductive-overflow-simultaneous.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -26,5 +26,5 @@ fn is_ee<T: Combo>(t: T) {\n \n fn main() {\n     is_ee(4);\n-    //~^ ERROR overflow evaluating the requirement `_: Tweedle\n+    //~^ ERROR overflow evaluating the requirement `{integer}: Tweedle\n }"}, {"sha": "a71f441029472229b37f3e0af7a09b5ea105a9a7", "filename": "src/test/compile-fail/tuple-arity-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     let y = first ((1,2.0,3));\n     //~^ ERROR mismatched types\n     //~| expected type `(isize, f64)`\n-    //~| found type `(isize, f64, _)`\n+    //~| found type `(isize, f64, {integer})`\n     //~| expected a tuple with 2 elements, found one with 3 elements\n \n     let y = first ((1,));"}, {"sha": "4597cf3d350c4167af32c3c32204cbd7ddaf9379", "filename": "src/test/compile-fail/tuple-index-out-of-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -20,5 +20,5 @@ fn main() {\n     tuple.0;\n     tuple.1;\n     tuple.2;\n-    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(_, _)`\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `({integer}, {integer})`\n }"}, {"sha": "9359c03595669a659160821689c8d16bd3f5b9e4", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -13,7 +13,7 @@\n fn main() { let a: bool = 1; let b: i32 = true; }\n //~^ ERROR mismatched types\n //~| expected type `bool`\n-//~| found type `_`\n+//~| found type `{integer}`\n //~| expected bool, found integral variable\n //~| ERROR mismatched types\n //~| expected i32, found bool"}, {"sha": "f0172777cdabb4e5828e6370afe614b5d5851390", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -27,7 +27,7 @@ fn test<T: Sync>(s: T) {}\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0)});\n     test(us);\n-    //~^ ERROR `std::cell::UnsafeCell<MySync<_>>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::UnsafeCell<MySync<{integer}>>: std::marker::Sync` is not satisfied\n \n     let uns = UnsafeCell::new(NoSync);\n     test(uns);"}, {"sha": "8b3e9369ece46d12e19234da3379b039a6ad006f", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -24,7 +24,7 @@ impl TraitB for isize {\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n     let y = 4;\n-    b.gimme_an_a(y) //~ ERROR `_: TraitA` is not satisfied\n+    b.gimme_an_a(y) //~ ERROR `{integer}: TraitA` is not satisfied\n }\n \n fn main() {"}, {"sha": "45638a65915c49901430f6a63d556b5aa0c13d28", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffcbd2deb5ca953512a20785224120437cb310f0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=ffcbd2deb5ca953512a20785224120437cb310f0", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n $DIR/issue-26480.rs:38:5: 38:19 note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n \n-error: non-scalar cast: `_` as `()`\n+error: non-scalar cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:33:19\n    |\n 33 |     ($x:expr) => ($x as ())"}]}