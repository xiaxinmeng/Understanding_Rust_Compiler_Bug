{"sha": "1ff860b93c972e0f8d3a8ee582c255fa59e9b284", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZjg2MGI5M2M5NzJlMGY4ZDNhOGVlNTgyYzI1NWZhNTllOWIyODQ=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2020-12-30T15:46:05Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2021-01-23T07:40:25Z"}, "message": "Implement fix, add tests", "tree": {"sha": "0533465ecb7329b6185c9259fb0f9c2b5ab0f7b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0533465ecb7329b6185c9259fb0f9c2b5ab0f7b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ff860b93c972e0f8d3a8ee582c255fa59e9b284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff860b93c972e0f8d3a8ee582c255fa59e9b284", "html_url": "https://github.com/rust-lang/rust/commit/1ff860b93c972e0f8d3a8ee582c255fa59e9b284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1316422a7c2ef26e9da78fa23f170407b1cb39bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1316422a7c2ef26e9da78fa23f170407b1cb39bb", "html_url": "https://github.com/rust-lang/rust/commit/1316422a7c2ef26e9da78fa23f170407b1cb39bb"}], "stats": {"total": 121, "additions": 66, "deletions": 55}, "files": [{"sha": "5343a036c0190f9f41c7d335f5a60939649a602c", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=1ff860b93c972e0f8d3a8ee582c255fa59e9b284", "patch": "@@ -7,12 +7,3 @@ pub use hir_ty::diagnostics::{\n     IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkOrSomeInTailExpr,\n     NoSuchField, RemoveThisSemicolon, ReplaceFilterMapNextWithFindMap,\n };\n-\n-// PHIL:\n-// hir/src/diagnostics.rs - just pub uses the type from hir_ty::diagnostics (DONE)\n-// hir_ty/src/diagnostics.rs - defines the type (DONE)\n-// hir_ty/src/diagnostics.rs - plus a test (DONE) <--- one example found, need to copy the not-applicable tests from the assist version\n-// ide/src/diagnostics.rs - define handler for when this diagnostic is raised (DONE)\n-\n-// ide/src/diagnostics/fixes.rs - pulls in type from hir, and impls DiagnosticWithFix (TODO)\n-// hir_ty/src/diagnostics/expr.rs - do the real work (TODO)"}, {"sha": "3d7663f6a36dc12d0158420920482beff1fcd9e1", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=1ff860b93c972e0f8d3a8ee582c255fa59e9b284", "patch": "@@ -392,7 +392,7 @@ impl Diagnostic for IncorrectCase {\n #[derive(Debug)]\n pub struct ReplaceFilterMapNextWithFindMap {\n     pub file: HirFileId,\n-    pub filter_map_expr: AstPtr<ast::Expr>,\n+    /// This expression is the whole method chain up to and including `.filter_map(..).next()`.\n     pub next_expr: AstPtr<ast::Expr>,\n }\n \n@@ -404,7 +404,7 @@ impl Diagnostic for ReplaceFilterMapNextWithFindMap {\n         \"replace filter_map(..).next() with find_map(..)\".to_string()\n     }\n     fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.filter_map_expr.clone().into() }\n+        InFile { file_id: self.file, value: self.next_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -671,15 +671,55 @@ fn foo() { break; }\n     }\n \n     #[test]\n-    fn replace_missing_filter_next_with_find_map() {\n+    fn replace_filter_next_with_find_map() {\n         check_diagnostics(\n             r#\"\n             fn foo() {\n-            let m = [1, 2, 3]\n-                .iter()\n-                .filter_map(|x| if *x == 2 { Some (4) } else { None })\n-                .next();\n-                //^^^ Replace .filter_map(..).next() with .find_map(..)\n+                let m = [1, 2, 3].iter().filter_map(|x| if *x == 2 { Some (4) } else { None }).next();\n+                      //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ replace filter_map(..).next() with find_map(..)\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_filter_next_with_find_map_no_diagnostic_without_next() {\n+        check_diagnostics(\n+            r#\"\n+            fn foo() {\n+                let m = [1, 2, 3]\n+                    .iter()\n+                    .filter_map(|x| if *x == 2 { Some (4) } else { None })\n+                    .len();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_filter_next_with_find_map_no_diagnostic_with_intervening_methods() {\n+        check_diagnostics(\n+            r#\"\n+            fn foo() {\n+                let m = [1, 2, 3]\n+                    .iter()\n+                    .filter_map(|x| if *x == 2 { Some (4) } else { None })\n+                    .map(|x| x + 2)\n+                    .len();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_filter_next_with_find_map_no_diagnostic_if_not_in_chain() {\n+        check_diagnostics(\n+            r#\"\n+            fn foo() {\n+                let m = [1, 2, 3]\n+                    .iter()\n+                    .filter_map(|x| if *x == 2 { Some (4) } else { None });\n+                let n = m.next();\n             }\n             \"#,\n         );"}, {"sha": "b87557ff5b8e7b10cfcb8ee216ff36a8de28c167", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=1ff860b93c972e0f8d3a8ee582c255fa59e9b284", "patch": "@@ -41,16 +41,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         ExprValidator { owner, infer, sink }\n     }\n \n-    fn bar() {\n-        // LOOK FOR THIS\n-        let m = [1, 2, 3]\n-            .iter()\n-            .filter_map(|x| if *x == 2 { Some(4) } else { None })\n-            .next();\n-    }\n-\n     pub(super) fn validate_body(&mut self, db: &dyn HirDatabase) {\n-        // DO NOT MERGE: just getting something working for now\n         self.check_for_filter_map_next(db);\n \n         let body = db.body(self.owner.into());\n@@ -169,24 +160,20 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         for (id, expr) in body.exprs.iter() {\n             if let Expr::MethodCall { receiver, method_name, args, .. } = expr {\n-                let method_name_hack_do_not_merge = format!(\"{}\", method_name);\n+                let method_name = format!(\"{}\", method_name);\n \n-                if method_name_hack_do_not_merge == \"filter_map\" && args.len() == 1 {\n-                    prev = Some((id, args[0]));\n+                if method_name == \"filter_map\" && args.len() == 1 {\n+                    prev = Some(id);\n                     continue;\n                 }\n \n-                if method_name_hack_do_not_merge == \"next\" {\n-                    if let Some((filter_map_id, filter_map_args)) = prev {\n+                if method_name == \"next\" {\n+                    if let Some(filter_map_id) = prev {\n                         if *receiver == filter_map_id {\n                             let (_, source_map) = db.body_with_source_map(self.owner.into());\n-                            if let (Ok(filter_map_source_ptr), Ok(next_source_ptr)) = (\n-                                source_map.expr_syntax(filter_map_id),\n-                                source_map.expr_syntax(id),\n-                            ) {\n+                            if let Ok(next_source_ptr) = source_map.expr_syntax(id) {\n                                 self.sink.push(ReplaceFilterMapNextWithFindMap {\n-                                    file: filter_map_source_ptr.file_id,\n-                                    filter_map_expr: filter_map_source_ptr.value,\n+                                    file: next_source_ptr.file_id,\n                                     next_expr: next_source_ptr.value,\n                                 });\n                             }"}, {"sha": "7bbf1d8c7703bec31c37dd680a6d26b52e077376", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff860b93c972e0f8d3a8ee582c255fa59e9b284/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=1ff860b93c972e0f8d3a8ee582c255fa59e9b284", "patch": "@@ -1,5 +1,6 @@\n //! Provides a way to attach fixes to the diagnostics.\n //! The same module also has all curret custom fixes for the diagnostics implemented.\n+use ast::MethodCallExpr;\n use hir::{\n     db::AstDatabase,\n     diagnostics::{\n@@ -13,11 +14,7 @@ use ide_db::{\n     source_change::{FileSystemEdit, SourceChange},\n     RootDatabase,\n };\n-use syntax::{\n-    algo,\n-    ast::{self, edit::IndentLevel, make},\n-    AstNode,\n-};\n+use syntax::{AstNode, TextRange, algo, ast::{self, ArgList, edit::IndentLevel, make}};\n use text_edit::TextEdit;\n \n use crate::{diagnostics::Fix, references::rename::rename_with_semantics, FilePosition};\n@@ -144,33 +141,29 @@ impl DiagnosticWithFix for IncorrectCase {\n     }\n }\n \n-// Bugs:\n-//  * Action is applicable for both iter() and filter_map() rows\n-//  * Action deletes the entire method chain\n impl DiagnosticWithFix for ReplaceFilterMapNextWithFindMap {\n     fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n         let root = sema.db.parse_or_expand(self.file)?;\n-\n         let next_expr = self.next_expr.to_node(&root);\n-        let next_expr_range = next_expr.syntax().text_range();\n+        let next_call = MethodCallExpr::cast(next_expr.syntax().clone())?;\n \n-        let filter_map_expr = self.filter_map_expr.to_node(&root);\n-        let filter_map_expr_range = filter_map_expr.syntax().text_range();\n+        let filter_map_call = MethodCallExpr::cast(next_call.receiver()?.syntax().clone())?;\n+        let filter_map_name_range = filter_map_call.name_ref()?.ident_token()?.text_range();\n+        let filter_map_args = filter_map_call.syntax().children().find_map(ArgList::cast)?;\n \n-        let edit = TextEdit::delete(next_expr_range);\n+        let range_to_replace = TextRange::new(filter_map_name_range.start(), next_expr.syntax().text_range().end());\n+        let replacement = format!(\"find_map{}\", filter_map_args.syntax().text());\n+        let trigger_range = next_expr.syntax().text_range();\n \n-        // This is the entire method chain, including the array literal\n-        eprintln!(\"NEXT EXPR: {:#?}\", next_expr);\n-        // This is the entire method chain except for the final next()\n-        eprintln!(\"FILTER MAP EXPR: {:#?}\", filter_map_expr);\n+        let edit = TextEdit::replace(range_to_replace, replacement);\n \n         let source_change =\n             SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n \n         Some(Fix::new(\n             \"Replace filter_map(..).next() with find_map()\",\n             source_change,\n-            filter_map_expr_range,\n+            trigger_range,\n         ))\n     }\n }"}]}