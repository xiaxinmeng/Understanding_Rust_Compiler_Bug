{"sha": "78f33437b66793b10eb2a72d0d20cbf2bf0eacb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjMzNDM3YjY2NzkzYjEwZWIyYTcyZDBkMjBjYmYyYmYwZWFjYjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-29T17:47:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-29T21:30:57Z"}, "message": "libstd: Fix merge fallout.", "tree": {"sha": "66132a53979403297cbe192ce936cfa7c5b3cb1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66132a53979403297cbe192ce936cfa7c5b3cb1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5", "html_url": "https://github.com/rust-lang/rust/commit/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c6dae081b72d33a2c51b5f46436e6350bb3682f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6dae081b72d33a2c51b5f46436e6350bb3682f", "html_url": "https://github.com/rust-lang/rust/commit/2c6dae081b72d33a2c51b5f46436e6350bb3682f"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "800144c0ca7bedf5f9477ea4431dbb69713504e1", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=78f33437b66793b10eb2a72d0d20cbf2bf0eacb5", "patch": "@@ -152,7 +152,6 @@ pub mod v4 {\n     use uv_ip4_name = uv::ll::ip4_name;\n \n     use core::cast::transmute;\n-    use core::ptr;\n     use core::result;\n     use core::str;\n     use core::uint;"}, {"sha": "47af3576c906210c5bafb57c215d1077ad5617fa", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=78f33437b66793b10eb2a72d0d20cbf2bf0eacb5", "patch": "@@ -11,7 +11,6 @@\n //! A priority queue implemented with a binary heap\n \n use core::old_iter::BaseIter;\n-use core::ptr::addr_of;\n \n #[abi = \"rust-intrinsic\"]\n extern \"rust-intrinsic\" mod rusti {"}, {"sha": "7e7931bbb606bcc554b4c76713cef7f730cee6f2", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f33437b66793b10eb2a72d0d20cbf2bf0eacb5/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=78f33437b66793b10eb2a72d0d20cbf2bf0eacb5", "patch": "@@ -569,19 +569,18 @@ mod test {\n         let parser = string_to_parser(@~\"b : int\");\n         assert_eq!(parser.parse_arg_general(true),\n                    ast::arg{\n-                       mode: ast::infer(1),\n                        is_mutbl: false,\n-                       ty: @ast::Ty{id:4, // fixme\n+                       ty: @ast::Ty{id:3, // fixme\n                                     node: ast::ty_path(@ast::Path{\n                                         span:sp(4,4), // this is bizarre...\n                                         // check this in the original parser?\n                                         global:false,\n                                         idents:~[mk_ident(105)],\n                                         rp: None,\n                                         types: ~[]},\n-                                                       3),\n+                                                       2),\n                                     span:sp(4,7)},\n-                       pat: @ast::pat{id:2,\n+                       pat: @ast::pat{id:1,\n                                       node: ast::pat_ident(ast::bind_by_copy,\n                                                            @ast::Path{\n                                                                span:sp(0,1),\n@@ -592,7 +591,7 @@ mod test {\n                                                            None // no idea\n                                                           ),\n                                       span: sp(0,3)}, // really?\n-                       id: 5 // fixme\n+                       id: 4 // fixme\n                    })\n     }\n \n@@ -604,21 +603,20 @@ mod test {\n                   Some(\n                       @ast::item{ident:mk_ident(100),\n                             attrs:~[],\n-                            id: 11, // fixme\n+                            id: 10, // fixme\n                             node: ast::item_fn(ast::fn_decl{\n                                 inputs: ~[ast::arg{\n-                                    mode: ast::infer(1),\n                                     is_mutbl: false,\n-                                    ty: @ast::Ty{id:4, // fixme\n+                                    ty: @ast::Ty{id:3, // fixme\n                                                 node: ast::ty_path(@ast::Path{\n                                         span:sp(10,13),\n                                         global:false,\n                                         idents:~[mk_ident(106)],\n                                         rp: None,\n                                         types: ~[]},\n-                                                       3),\n+                                                       2),\n                                                 span:sp(10,13)},\n-                                    pat: @ast::pat{id:2, // fixme\n+                                    pat: @ast::pat{id:1, // fixme\n                                                    node: ast::pat_ident(\n                                                        ast::bind_by_copy,\n                                                        @ast::Path{\n@@ -630,9 +628,9 @@ mod test {\n                                                        None // no idea\n                                                    ),\n                                                   span: sp(6,9)}, // bleah.\n-                                    id: 5 // fixme\n+                                    id: 4 // fixme\n                                 }],\n-                                output: @ast::Ty{id:6, // fixme\n+                                output: @ast::Ty{id:5, // fixme\n                                                  node: ast::ty_nil,\n                                                  span:sp(15,15)}, // not sure\n                                 cf: ast::return_val\n@@ -649,8 +647,8 @@ mod test {\n                                             view_items: ~[],\n                                             stmts: ~[@spanned{\n                                                 node: ast::stmt_semi(@ast::expr{\n-                                                    id: 7,\n-                                                    callee_id: 8,\n+                                                    id: 6,\n+                                                    callee_id: 7,\n                                                     node: ast::expr_path(\n                                                         @ast::Path{\n                                                             span:sp(17,18),\n@@ -659,10 +657,10 @@ mod test {\n                                                             rp:None,\n                                                             types: ~[]}),\n                                                     span: sp(17,18)},\n-                                                                     9), // fixme\n+                                                                     8), // fixme\n                                                 span: sp(17,18)}],\n                                             expr: None,\n-                                            id: 10, // fixme\n+                                            id: 9, // fixme\n                                             rules: ast::default_blk // no idea\n                                         }}),\n                             vis: ast::inherited,"}]}