{"sha": "957ab6ae52706e3428ca56e727eed9d3333d8170", "node_id": "C_kwDOAAsO6NoAKDk1N2FiNmFlNTI3MDZlMzQyOGNhNTZlNzI3ZWVkOWQzMzMzZDgxNzA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T21:51:55Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:48:55Z"}, "message": "Combine projection and opaque into alias", "tree": {"sha": "8bc3eecf8e15eee2ab0d04c4674cf8b4bc64b412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc3eecf8e15eee2ab0d04c4674cf8b4bc64b412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957ab6ae52706e3428ca56e727eed9d3333d8170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957ab6ae52706e3428ca56e727eed9d3333d8170", "html_url": "https://github.com/rust-lang/rust/commit/957ab6ae52706e3428ca56e727eed9d3333d8170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957ab6ae52706e3428ca56e727eed9d3333d8170/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b884054334c2f0334c4a6218fcb489813a6633", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b884054334c2f0334c4a6218fcb489813a6633", "html_url": "https://github.com/rust-lang/rust/commit/89b884054334c2f0334c4a6218fcb489813a6633"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "31183266acfcba44236911f54cd37d25113dc8ef", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=957ab6ae52706e3428ca56e727eed9d3333d8170", "patch": "@@ -1244,7 +1244,7 @@ fn is_mixed_projection_predicate<'tcx>(\n         let mut projection_ty = projection_predicate.projection_ty;\n         loop {\n             match projection_ty.self_ty().kind() {\n-                ty::Projection(inner_projection_ty) => {\n+                ty::Alias(ty::Projection, inner_projection_ty) => {\n                     projection_ty = *inner_projection_ty;\n                 }\n                 ty::Param(param_ty) => {\n@@ -1390,8 +1390,8 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n                 continue;\n             },\n             ty::Param(_) => TyPosition::new_deref_stable_for_result(precedence, ty),\n-            ty::Projection(_) if ty.has_non_region_param() => TyPosition::new_deref_stable_for_result(precedence, ty),\n-            ty::Infer(_) | ty::Error(_) | ty::Bound(..) | ty::Opaque(..) | ty::Placeholder(_) | ty::Dynamic(..) => {\n+            ty::Alias(ty::Projection, _) if ty.has_non_region_param() => TyPosition::new_deref_stable_for_result(precedence, ty),\n+            ty::Infer(_) | ty::Error(_) | ty::Bound(..) | ty::Alias(ty::Opaque, ..) | ty::Placeholder(_) | ty::Dynamic(..) => {\n                 Position::ReborrowStable(precedence).into()\n             },\n             ty::Adt(..) if ty.has_placeholders() || ty.has_opaque_types() => {\n@@ -1417,7 +1417,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Tuple(_)\n-            | ty::Projection(_) => {\n+            | ty::Alias(ty::Projection, _) => {\n                 Position::DerefStable(precedence, ty.is_sized(cx.tcx, cx.param_env.without_caller_bounds())).into()\n             },\n         };"}, {"sha": "fcdac90fc237ae1a1a18bd7ffcf3e722e53bb545", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=957ab6ae52706e3428ca56e727eed9d3333d8170", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{AliasTy, Clause, EarlyBinder, Opaque, PredicateKind};\n+use rustc_middle::ty::{self, AliasTy, Clause, EarlyBinder, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             return;\n         }\n         let ret_ty = return_ty(cx, hir_id);\n-        if let Opaque(AliasTy { def_id, substs }) = *ret_ty.kind() {\n+        if let ty::Alias(ty::Opaque, AliasTy { def_id, substs }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for &(p, _span) in preds {"}, {"sha": "73841f9aa9a2112a626dd86e95b34779d90b33ff", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=957ab6ae52706e3428ca56e727eed9d3333d8170", "patch": "@@ -493,7 +493,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n                 .filter_by_name_unhygienic(is_empty)\n                 .any(|item| is_is_empty(cx, item))\n         }),\n-        ty::Projection(ref proj) => has_is_empty_impl(cx, proj.def_id),\n+        ty::Alias(ty::Projection, ref proj) => has_is_empty_impl(cx, proj.def_id),\n         ty::Adt(id, _) => has_is_empty_impl(cx, id.did()),\n         ty::Array(..) | ty::Slice(..) | ty::Str => true,\n         _ => false,"}, {"sha": "8bf542ada04dd80ace50f751c29337d8ecdd71d4", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=957ab6ae52706e3428ca56e727eed9d3333d8170", "patch": "@@ -82,7 +82,7 @@ fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n             ty::Ref(_, _, hir::Mutability::Mut) => {\n                 return Err((span, \"mutable references in const fn are unstable\".into()));\n             },\n-            ty::Opaque(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n+            ty::Alias(ty::Opaque, ..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n             ty::FnPtr(..) => {\n                 return Err((span, \"function pointers in const fn are unstable\".into()));\n             },"}, {"sha": "33f3b3af3dc02d125223da58b3c9fc694805def0", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957ab6ae52706e3428ca56e727eed9d3333d8170/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=957ab6ae52706e3428ca56e727eed9d3333d8170", "patch": "@@ -79,7 +79,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                 return true;\n             }\n \n-            if let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = *inner_ty.kind() {\n+            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = *inner_ty.kind() {\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     match predicate.kind().skip_binder() {\n                         // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n@@ -250,7 +250,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             is_must_use_ty(cx, *ty)\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Opaque(ty::AliasTy { def_id, substs: _ }) => {\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n@@ -631,7 +631,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Opaque(ty::AliasTy { def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n@@ -650,7 +650,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n                 _ => None,\n             }\n         },\n-        ty::Projection(proj) => match cx.tcx.try_normalize_erasing_regions(cx.param_env, ty) {\n+        ty::Alias(ty::Projection, proj) => match cx.tcx.try_normalize_erasing_regions(cx.param_env, ty) {\n             Ok(normalized_ty) if normalized_ty != ty => ty_sig(cx, normalized_ty),\n             _ => sig_for_projection(cx, proj).or_else(|| sig_from_bounds(cx, ty, cx.param_env.caller_bounds(), None)),\n         },"}]}