{"sha": "689b791422b7c429e4efcd224b7412c0e47e0638", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWI3OTE0MjJiN2M0MjllNGVmY2QyMjRiNzQxMmMwZTQ3ZTA2Mzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-17T18:00:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "use approx. bounds to decide whether to add outlives obligations\n\nBefore, if we had a projection like `<T as Foo<'0>>::Bar: 'x` and a\nwhere clause like `<T as Foo<'a>>::Bar: 'a`, we considered those to\nhave nothing to do with one another. Therefore, we would use the\n\"overconstrained\" path of adding `T: 'x` and `'0: 'x` requirements. We\nnow do a \"fuzzy\" match where we erase regions first and hence we see\nthe env bound `'a`.", "tree": {"sha": "283f7137a47732ddabb42cb08025ac5fb58aef0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283f7137a47732ddabb42cb08025ac5fb58aef0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689b791422b7c429e4efcd224b7412c0e47e0638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689b791422b7c429e4efcd224b7412c0e47e0638", "html_url": "https://github.com/rust-lang/rust/commit/689b791422b7c429e4efcd224b7412c0e47e0638", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689b791422b7c429e4efcd224b7412c0e47e0638/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b193cb92aee0d57dc7bfcf5e22e8e168eec6975", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b193cb92aee0d57dc7bfcf5e22e8e168eec6975", "html_url": "https://github.com/rust-lang/rust/commit/4b193cb92aee0d57dc7bfcf5e22e8e168eec6975"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "80170a86c384103d85d1fc65fb248cb1870ae8a7", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/689b791422b7c429e4efcd224b7412c0e47e0638/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689b791422b7c429e4efcd224b7412c0e47e0638/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=689b791422b7c429e4efcd224b7412c0e47e0638", "patch": "@@ -89,7 +89,16 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         &self,\n         projection_ty: ty::ProjectionTy<'tcx>,\n     ) -> Vec<ty::Region<'tcx>> {\n-        self.declared_generic_bounds_from_env(GenericKind::Projection(projection_ty))\n+        let projection_ty = GenericKind::Projection(projection_ty).to_ty(self.tcx);\n+        let erased_projection_ty = self.tcx.erase_regions(&projection_ty);\n+        self.declared_generic_bounds_from_env_with_compare_fn(\n+            |ty| if let ty::Projection(..) = ty.sty {\n+                let erased_ty = self.tcx.erase_regions(&ty);\n+                erased_ty == erased_projection_ty\n+            } else {\n+                false\n+            },\n+        )\n     }\n \n     /// Searches the where clauses in scope for regions that"}, {"sha": "d525135f759ce5935b07a138726671ffb64e4b22", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/689b791422b7c429e4efcd224b7412c0e47e0638/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689b791422b7c429e4efcd224b7412c0e47e0638/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs?ref=689b791422b7c429e4efcd224b7412c0e47e0638", "patch": "@@ -85,8 +85,7 @@ where\n     // can do better here with a more involved verification step.\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR the parameter type `T` may not live long enough\n-    //~| ERROR\n+    //~^ ERROR\n }\n \n #[rustc_regions]"}, {"sha": "981320af3bb0e3a87f7422aaf6b809878aec12f1", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/689b791422b7c429e4efcd224b7412c0e47e0638/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/689b791422b7c429e4efcd224b7412c0e47e0638/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=689b791422b7c429e4efcd224b7412c0e47e0638", "patch": "@@ -119,8 +119,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n    = note: number of external vids: 4\n-   = note: where T: '_#3r\n-   = note: where '_#2r: '_#3r\n+   = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n   --> $DIR/projection-one-region-closure.rs:72:1\n@@ -130,7 +129,7 @@ LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n ...  |\n-LL | |     //~| ERROR\n+LL | |     //~^ ERROR\n LL | | }\n    | |_^\n    |\n@@ -140,27 +139,16 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the parameter type `T` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#5r>>::AssocType` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:87:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:87:29\n-   |\n-LL | fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n-   |                        --  -- lifetime `'b` defined here\n-   |                        |\n-   |                        lifetime `'a` defined here\n-...\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:99:29\n+  --> $DIR/projection-one-region-closure.rs:98:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -177,7 +165,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n-  --> $DIR/projection-one-region-closure.rs:93:1\n+  --> $DIR/projection-one-region-closure.rs:92:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -194,6 +182,6 @@ LL | | }\n                T\n            ]\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0309`."}, {"sha": "76d1eee5cb15b3fb0b04fc0dd0ad41bfbf5b52de", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/689b791422b7c429e4efcd224b7412c0e47e0638/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/689b791422b7c429e4efcd224b7412c0e47e0638/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=689b791422b7c429e4efcd224b7412c0e47e0638", "patch": "@@ -101,7 +101,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n    = note: number of external vids: 4\n-   = note: where '_#2r: '_#3r\n+   = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:62:1\n@@ -121,16 +121,13 @@ LL | | }\n                T\n            ]\n \n-error: unsatisfied lifetime constraints\n+error[E0309]: the associated type `<T as Anything<'_#5r>>::AssocType` may not live long enough\n   --> $DIR/projection-one-region-trait-bound-closure.rs:77:29\n    |\n-LL | fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n-   |                        --  -- lifetime `'b` defined here\n-   |                        |\n-   |                        lifetime `'a` defined here\n-...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:87:29\n@@ -200,3 +197,4 @@ LL | | }\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0309`."}]}