{"sha": "bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMTZiOGU5MmE4ZTdkY2YxNGI5Yzk0YjkyNDhiNWFkNjk1N2IxZjQ=", "commit": {"author": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-08T06:56:27Z"}, "committer": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-27T01:28:30Z"}, "message": "Port existing callers of `evaluate_obligation` to the new canonical trait query\n\nExcept the one in coherence, which needs support for intercrate mode.", "tree": {"sha": "2bf652a75171c966df7570fb64219bcc6e07ffd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bf652a75171c966df7570fb64219bcc6e07ffd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "html_url": "https://github.com/rust-lang/rust/commit/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/comments", "author": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9", "html_url": "https://github.com/rust-lang/rust/commit/3ab3a9f50994b6e15de7fe92acf5a196ea6575c9"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "2e271669ed77d0192f2e73fcb0767ced7aaf7402", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -155,6 +155,9 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n                                            predicate: p })\n                      .chain(obligations)\n                      .find(|o| !selcx.evaluate_obligation(o));\n+    // FIXME: the call to `selcx.evaluate_obligation` above should be ported\n+    // to the canonical trait query form, `infcx.predicate_may_hold`, once\n+    // the new system supports intercrate mode (which coherence needs).\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);"}, {"sha": "98684825d91f7f0ac71790ea54227b2837c8be5a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -660,8 +660,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 predicate: ty::Predicate::Trait(predicate),\n                                 .. obligation.clone()\n                             };\n-                            let mut selcx = SelectionContext::new(self);\n-                            if selcx.evaluate_obligation(&unit_obligation) {\n+                            if self.predicate_may_hold(&unit_obligation) {\n                                 err.note(\"the trait is implemented for `()`. \\\n                                          Possibly this error has been caused by changes to \\\n                                          Rust's type-inference algorithm \\\n@@ -877,7 +876,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 .count();\n \n             let mut trait_type = trait_ref.self_ty();\n-            let mut selcx = SelectionContext::new(self);\n \n             for refs_remaining in 0..refs_number {\n                 if let ty::TypeVariants::TyRef(_, ty::TypeAndMut{ ty: t_type, mutbl: _ }) =\n@@ -891,7 +889,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                          obligation.param_env,\n                                                          new_trait_ref.to_predicate());\n \n-                    if selcx.evaluate_obligation(&new_obligation) {\n+                    if self.predicate_may_hold(&new_obligation) {\n                         let sp = self.tcx.sess.codemap()\n                             .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n \n@@ -1327,7 +1325,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 cleaned_pred.to_predicate()\n             );\n \n-            selcx.evaluate_obligation(&obligation)\n+            self.predicate_may_hold(&obligation)\n         })\n     }\n "}, {"sha": "7bd0148b3c464a639e8ccbabbe51fea21ed0fafe", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -333,7 +333,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n             if data.is_global() {\n                 // no type variables present, can use evaluation for better caching.\n                 // FIXME: consider caching errors too.\n-                if selcx.evaluate_obligation_conservatively(&obligation) {\n+                if selcx.infcx().predicate_must_hold(&obligation) {\n                     debug!(\"selecting trait `{:?}` at depth {} evaluated to holds\",\n                            data, obligation.recursion_depth);\n                     return Ok(Some(vec![]))"}, {"sha": "f09981dd8fcabf8c8a45baa57ed7ae3bf4757d04", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -552,8 +552,7 @@ pub fn type_known_to_meet_bound<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx\n         predicate: trait_ref.to_predicate(),\n     };\n \n-    let result = SelectionContext::new(infcx)\n-        .evaluate_obligation_conservatively(&obligation);\n+    let result = infcx.predicate_must_hold(&obligation);\n     debug!(\"type_known_to_meet_ty={:?} bound={} => {:?}\",\n            ty, infcx.tcx.item_path_str(def_id), result);\n "}, {"sha": "3199ff17ae92697558cb3d699e1b7d60c8a4fb61", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -120,15 +120,15 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n \n         let cause = traits::ObligationCause::misc(self.span, self.fcx.body_id);\n \n-        let mut selcx = traits::SelectionContext::new(self.fcx);\n         let obligation = traits::Obligation::new(cause.clone(),\n                                                  self.fcx.param_env,\n                                                  trait_ref.to_predicate());\n-        if !selcx.evaluate_obligation(&obligation) {\n+        if !self.fcx.predicate_may_hold(&obligation) {\n             debug!(\"overloaded_deref_ty: cannot match obligation\");\n             return None;\n         }\n \n+        let mut selcx = traits::SelectionContext::new(self.fcx);\n         let normalized = traits::normalize_projection_type(&mut selcx,\n                                                            self.fcx.param_env,\n                                                            ty::ProjectionTy::from_ref_and_name("}, {"sha": "5f904a9419b1d6b85caf708d4460d5cd6682a428", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -277,8 +277,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                      poly_trait_ref.to_predicate());\n \n         // Now we want to know if this can be matched\n-        let mut selcx = traits::SelectionContext::new(self);\n-        if !selcx.evaluate_obligation(&obligation) {\n+        if !self.predicate_may_hold(&obligation) {\n             debug!(\"--> Cannot match obligation\");\n             return None; // Cannot be matched, no such method resolution is possible.\n         }"}, {"sha": "476ae6809737a33eeaa05c4713ed63491052b405", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -1173,7 +1173,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                     let predicate = trait_ref.to_predicate();\n                     let obligation =\n                         traits::Obligation::new(cause.clone(), self.param_env, predicate);\n-                    if !selcx.evaluate_obligation(&obligation) {\n+                    if !self.predicate_may_hold(&obligation) {\n                         if self.probe(|_| self.select_trait_candidate(trait_ref).is_err()) {\n                             // This candidate's primary obligation doesn't even\n                             // select - don't bother registering anything in\n@@ -1201,7 +1201,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             // Evaluate those obligations to see if they might possibly hold.\n             for o in candidate_obligations.into_iter().chain(sub_obligations) {\n                 let o = self.resolve_type_vars_if_possible(&o);\n-                if !selcx.evaluate_obligation(&o) {\n+                if !self.predicate_may_hold(&o) {\n                     result = ProbeResult::NoMatch;\n                     if let &ty::Predicate::Trait(ref pred) = &o.predicate {\n                         possibly_unsatisfied_predicates.push(pred.skip_binder().trait_ref);"}, {"sha": "2dc7c7fe71a89e7b2e08507541cf4b264e22caf5", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -19,7 +19,7 @@ use hir::def::Def;\n use hir::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::lang_items::FnOnceTraitLangItem;\n use namespace::Namespace;\n-use rustc::traits::{Obligation, SelectionContext};\n+use rustc::traits::Obligation;\n use util::nodemap::FxHashSet;\n \n use syntax::ast;\n@@ -65,7 +65,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                              self.body_id,\n                                              self.param_env,\n                                              poly_trait_ref.to_predicate());\n-                        SelectionContext::new(self).evaluate_obligation(&obligation)\n+                        self.predicate_may_hold(&obligation)\n                     })\n                 })\n             }"}, {"sha": "efa9a58d6331036e1f634923a141f120a32d8d43", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=bc16b8e92a8e7dcf14b9c94b9248b5ad6957b1f4", "patch": "@@ -34,6 +34,7 @@ error[E0391]: cycle detected when processing `cycle1`\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{impl-Trait}}`...\n   --> $DIR/auto-trait-leak.rs:49:16\n    |\n@@ -44,6 +45,7 @@ note: ...which requires processing `cycle2`...\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle1::{{impl-Trait}}`...\n   --> $DIR/auto-trait-leak.rs:42:16\n    |"}]}