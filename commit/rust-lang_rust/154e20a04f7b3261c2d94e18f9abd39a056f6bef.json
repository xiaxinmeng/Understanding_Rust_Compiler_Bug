{"sha": "154e20a04f7b3261c2d94e18f9abd39a056f6bef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NGUyMGEwNGY3YjMyNjFjMmQ5NGUxOGY5YWJkMzlhMDU2ZjZiZWY=", "commit": {"author": {"name": "Johann", "email": "git@johann-hofmann.com", "date": "2015-11-03T08:16:33Z"}, "committer": {"name": "Johann", "email": "git@johann-hofmann.com", "date": "2015-11-03T08:16:33Z"}, "message": "Address review concerns", "tree": {"sha": "c0582529fa12926570e6f59e155faa0bc14f987e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0582529fa12926570e6f59e155faa0bc14f987e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/154e20a04f7b3261c2d94e18f9abd39a056f6bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/154e20a04f7b3261c2d94e18f9abd39a056f6bef", "html_url": "https://github.com/rust-lang/rust/commit/154e20a04f7b3261c2d94e18f9abd39a056f6bef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/154e20a04f7b3261c2d94e18f9abd39a056f6bef/comments", "author": null, "committer": null, "parents": [{"sha": "fcc62cbbe0b7b5f3ba0b5e5f206d84b0ebb6c5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc62cbbe0b7b5f3ba0b5e5f206d84b0ebb6c5b7", "html_url": "https://github.com/rust-lang/rust/commit/fcc62cbbe0b7b5f3ba0b5e5f206d84b0ebb6c5b7"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "b8eacc2bcd01899434c3a21dfebf80e82b9fc545", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/154e20a04f7b3261c2d94e18f9abd39a056f6bef/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154e20a04f7b3261c2d94e18f9abd39a056f6bef/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=154e20a04f7b3261c2d94e18f9abd39a056f6bef", "patch": "@@ -77,8 +77,8 @@ fn execute() -> i32 {\n     opts.optflag(\"h\", \"help\", \"show this message\");\n     opts.optopt(\"\",\n                 \"write-mode\",\n-                \"mode to write in\",\n-                \"[replace|overwrite|display|plain|diff|coverage]\");\n+                \"mode to write in (not usable when piping from stdin)\",\n+                \"[replace|overwrite|display|diff|coverage]\");\n \n     let operation = determine_operation(&opts, env::args().skip(1));\n \n@@ -153,28 +153,15 @@ fn determine_operation<I>(opts: &Options, args: I) -> Operation\n     }\n \n     // if no file argument is supplied, read from stdin\n-    if matches.free.len() != 1 {\n-\n-        // make sure the write mode is plain or not set\n-        // (the other options would require a file)\n-        match matches.opt_str(\"write-mode\") {\n-            Some(mode) => {\n-                match mode.parse() {\n-                    Ok(WriteMode::Plain) => (),\n-                    _ => return Operation::InvalidInput(\"Using stdin requires write-mode to be \\\n-                                                         plain\"\n-                                                            .into()),\n-                }\n-            }\n-            _ => (),\n-        }\n+    if matches.free.len() == 0 {\n \n         let mut buffer = String::new();\n         match io::stdin().read_to_string(&mut buffer) {\n             Ok(..) => (),\n             Err(e) => return Operation::InvalidInput(e.to_string()),\n         }\n \n+        // WriteMode is always plain for Stdin\n         return Operation::Stdin(buffer, WriteMode::Plain);\n     }\n "}, {"sha": "3f1a867f38594700cfd722de548237595a2c4c4e", "filename": "src/filemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/154e20a04f7b3261c2d94e18f9abd39a056f6bef/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154e20a04f7b3261c2d94e18f9abd39a056f6bef/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=154e20a04f7b3261c2d94e18f9abd39a056f6bef", "patch": "@@ -102,14 +102,14 @@ pub fn write_file(text: &StringBuffer,\n         }\n         WriteMode::Plain => {\n             let stdout = stdout();\n-            let stdout_lock = stdout.lock();\n-            try!(write_system_newlines(stdout_lock, text, config));\n+            let stdout = stdout.lock();\n+            try!(write_system_newlines(stdout, text, config));\n         }\n         WriteMode::Display | WriteMode::Coverage => {\n             println!(\"{}:\\n\", filename);\n             let stdout = stdout();\n-            let stdout_lock = stdout.lock();\n-            try!(write_system_newlines(stdout_lock, text, config));\n+            let stdout = stdout.lock();\n+            try!(write_system_newlines(stdout, text, config));\n         }\n         WriteMode::Diff => {\n             println!(\"Diff of {}:\\n\", filename);"}]}