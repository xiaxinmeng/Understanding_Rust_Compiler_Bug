{"sha": "dcd80b80ae3fe2f327515e57fdc423a3927e44e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZDgwYjgwYWUzZmUyZjMyNzUxNWU1N2ZkYzQyM2EzOTI3ZTQ0ZTY=", "commit": {"author": {"name": "Arthur Silva", "email": "arthurprs@gmail.com", "date": "2016-11-10T21:02:44Z"}, "committer": {"name": "arthurprs", "email": "arthurprs@gmail.com", "date": "2016-11-10T21:26:50Z"}, "message": "Remove one bounds check from BufReader\n\nOtherwise the optimizer can't be sure that pos <= cap. Added a paranoid debug_assert to ensure correctness instead.", "tree": {"sha": "1f599f714118892c6a7807debe72001f1de9a269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f599f714118892c6a7807debe72001f1de9a269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcd80b80ae3fe2f327515e57fdc423a3927e44e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd80b80ae3fe2f327515e57fdc423a3927e44e6", "html_url": "https://github.com/rust-lang/rust/commit/dcd80b80ae3fe2f327515e57fdc423a3927e44e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcd80b80ae3fe2f327515e57fdc423a3927e44e6/comments", "author": {"login": "arthurprs", "id": 715958, "node_id": "MDQ6VXNlcjcxNTk1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/715958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurprs", "html_url": "https://github.com/arthurprs", "followers_url": "https://api.github.com/users/arthurprs/followers", "following_url": "https://api.github.com/users/arthurprs/following{/other_user}", "gists_url": "https://api.github.com/users/arthurprs/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurprs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurprs/subscriptions", "organizations_url": "https://api.github.com/users/arthurprs/orgs", "repos_url": "https://api.github.com/users/arthurprs/repos", "events_url": "https://api.github.com/users/arthurprs/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurprs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arthurprs", "id": 715958, "node_id": "MDQ6VXNlcjcxNTk1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/715958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurprs", "html_url": "https://github.com/arthurprs", "followers_url": "https://api.github.com/users/arthurprs/followers", "following_url": "https://api.github.com/users/arthurprs/following{/other_user}", "gists_url": "https://api.github.com/users/arthurprs/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurprs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurprs/subscriptions", "organizations_url": "https://api.github.com/users/arthurprs/orgs", "repos_url": "https://api.github.com/users/arthurprs/repos", "events_url": "https://api.github.com/users/arthurprs/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurprs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1cc1db6ddee8d57d20adc05b740e3b73649ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1cc1db6ddee8d57d20adc05b740e3b73649ab5", "html_url": "https://github.com/rust-lang/rust/commit/bc1cc1db6ddee8d57d20adc05b740e3b73649ab5"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "cd7a50d07e268e4ec03d5e882b2b7f846ccc8542", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dcd80b80ae3fe2f327515e57fdc423a3927e44e6/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd80b80ae3fe2f327515e57fdc423a3927e44e6/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=dcd80b80ae3fe2f327515e57fdc423a3927e44e6", "patch": "@@ -187,7 +187,10 @@ impl<R: Read> BufRead for BufReader<R> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> {\n         // If we've reached the end of our internal buffer then we need to fetch\n         // some more data from the underlying reader.\n-        if self.pos == self.cap {\n+        // Branch using `>=` instead of the more correct `==`\n+        // to tell the compiler that the pos..cap slice is always valid.\n+        if self.pos >= self.cap {\n+            debug_assert!(self.pos == self.cap);\n             self.cap = self.inner.read(&mut self.buf)?;\n             self.pos = 0;\n         }"}]}