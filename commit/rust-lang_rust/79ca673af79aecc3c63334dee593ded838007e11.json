{"sha": "79ca673af79aecc3c63334dee593ded838007e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5Y2E2NzNhZjc5YWVjYzNjNjMzMzRkZWU1OTNkZWQ4MzgwMDdlMTE=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-08T19:18:54Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-08T21:02:26Z"}, "message": "Adding more support for working with u64s.", "tree": {"sha": "3cc5ce72659f1d86460af68d8c0fac1ef1d4b45e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc5ce72659f1d86460af68d8c0fac1ef1d4b45e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ca673af79aecc3c63334dee593ded838007e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ca673af79aecc3c63334dee593ded838007e11", "html_url": "https://github.com/rust-lang/rust/commit/79ca673af79aecc3c63334dee593ded838007e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ca673af79aecc3c63334dee593ded838007e11/comments", "author": null, "committer": null, "parents": [{"sha": "4c309321e0979552f8c9230c6425c96b59ac80da", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c309321e0979552f8c9230c6425c96b59ac80da", "html_url": "https://github.com/rust-lang/rust/commit/4c309321e0979552f8c9230c6425c96b59ac80da"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "20d3e3f071fb526fccf9a7e9b8714ae9b2af0208", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79ca673af79aecc3c63334dee593ded838007e11/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/79ca673af79aecc3c63334dee593ded838007e11/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=79ca673af79aecc3c63334dee593ded838007e11", "patch": "@@ -12,6 +12,7 @@\n mod int;\n mod uint;\n mod u8;\n+mod u64;\n mod vec;\n mod ivec;\n mod str;"}, {"sha": "5bedd102c2a9e025bbf51984303742b1e830d750", "filename": "src/lib/u64.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/79ca673af79aecc3c63334dee593ded838007e11/src%2Flib%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ca673af79aecc3c63334dee593ded838007e11/src%2Flib%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu64.rs?ref=79ca673af79aecc3c63334dee593ded838007e11", "patch": "@@ -0,0 +1,39 @@\n+fn to_str(u64 n, uint radix) -> str {\n+    assert(0u < radix && radix <= 16u);\n+\n+    auto r64 = radix as u64;\n+    \n+    fn digit(u64 n) -> str {\n+        ret alt (n) {\n+            case (0u64) { \"0\" }\n+            case (1u64) { \"1\" }\n+            case (2u64) { \"2\" }\n+            case (3u64) { \"3\" }\n+            case (4u64) { \"4\" }\n+            case (5u64) { \"5\" }\n+            case (6u64) { \"6\" }\n+            case (7u64) { \"7\" }\n+            case (8u64) { \"8\" }\n+            case (9u64) { \"9\" }\n+            case (10u64) { \"a\" }\n+            case (11u64) { \"b\" }\n+            case (12u64) { \"c\" }\n+            case (13u64) { \"d\" }\n+            case (14u64) { \"e\" }\n+            case (15u64) { \"f\" }\n+            case (_) { fail }\n+        };\n+    }\n+\n+    if n == 0u64 { ret \"0\"; }\n+\n+    auto s = \"\";\n+\n+    while(n > 0u64) {\n+        s = digit(n % r64) + s;\n+        n /= r64;\n+    }\n+    ret s;\n+}\n+\n+fn str(u64 n) -> str { ret to_str(n, 10u); }"}, {"sha": "c63b8ae3c084ddcc22cc63077c58c9c6c9de97df", "filename": "src/test/bench/shootout/pfib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79ca673af79aecc3c63334dee593ded838007e11/src%2Ftest%2Fbench%2Fshootout%2Fpfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ca673af79aecc3c63334dee593ded838007e11/src%2Ftest%2Fbench%2Fshootout%2Fpfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout%2Fpfib.rs?ref=79ca673af79aecc3c63334dee593ded838007e11", "patch": "@@ -55,10 +55,15 @@ fn main(vec[str] argv) {\n         auto fibn = fib(n);\n         auto stop = time::precise_time_ns();\n \n-        auto elapsed = (stop - start) as int;\n-        auto us_task = elapsed / fibn / 1000; \n+        assert(stop >= start);\n \n-        log_err #fmt(\"Determined that fib(%d) = %d in %d ns (%d us / task)\",\n-                     n, fibn, elapsed, us_task);\n+        auto elapsed = stop - start;\n+        auto us_task = elapsed / (fibn as u64) / (1000 as u64); \n+\n+        log_err #fmt(\"Determined that fib(%d) = %d in %d%d ns (%d us / task)\",\n+                     n, fibn, \n+                     (elapsed / (1000000 as u64)) as int, \n+                     (elapsed % (1000000 as u64)) as int, \n+                     us_task as int);\n     }\n }"}, {"sha": "64ab42147e8e5d906f208447d8d3e04af43b27b7", "filename": "src/test/bench/task-perf/pfib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79ca673af79aecc3c63334dee593ded838007e11/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ca673af79aecc3c63334dee593ded838007e11/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs?ref=79ca673af79aecc3c63334dee593ded838007e11", "patch": "@@ -19,6 +19,7 @@ import std::int::range;\n import std::io;\n import std::getopts;\n import std::task;\n+import std::u64;\n \n fn recv[T](&port[T] p) -> T {\n     let T x;\n@@ -106,16 +107,17 @@ fn main(vec[str] argv) {\n             auto num_trials = 10;\n \n             auto out = io::stdout();\n-\n+            \n             for each(int n in range(1, max + 1)) {\n                 for each(int i in range(0, num_trials)) {\n                     auto start = time::precise_time_ns();\n                     auto fibn = fib(n);\n                     auto stop = time::precise_time_ns();\n \n-                    auto elapsed = (stop - start) as int;\n+                    auto elapsed = stop - start;\n             \n-                    out.write_line(#fmt(\"%d\\t%d\\t%d\", n, fibn, elapsed));\n+                    out.write_line(#fmt(\"%d\\t%d\\t%s\", n, fibn, \n+                                        u64::str(elapsed)));\n                 }\n             }\n         }"}]}