{"sha": "24ab3e80ca258a3db21bf263225c52d9995a2ea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YWIzZTgwY2EyNThhM2RiMjFiZjI2MzIyNWM1MmQ5OTk1YTJlYTA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-09T22:22:12Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T15:18:41Z"}, "message": "Resolve methods and functions better", "tree": {"sha": "8704eab78d09528e5d81a1fb328abb26fa448c01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8704eab78d09528e5d81a1fb328abb26fa448c01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ab3e80ca258a3db21bf263225c52d9995a2ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ab3e80ca258a3db21bf263225c52d9995a2ea0", "html_url": "https://github.com/rust-lang/rust/commit/24ab3e80ca258a3db21bf263225c52d9995a2ea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ab3e80ca258a3db21bf263225c52d9995a2ea0/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bf669860984a2c058b3bdc3e43b4993a0f25b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf669860984a2c058b3bdc3e43b4993a0f25b31", "html_url": "https://github.com/rust-lang/rust/commit/5bf669860984a2c058b3bdc3e43b4993a0f25b31"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "10984d8ade9ba02198f96032e53dea538e2a7004", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24ab3e80ca258a3db21bf263225c52d9995a2ea0/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab3e80ca258a3db21bf263225c52d9995a2ea0/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=24ab3e80ca258a3db21bf263225c52d9995a2ea0", "patch": "@@ -46,9 +46,9 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n \n     let name_ref_to_import =\n         path_under_caret.syntax().descendants().find_map(ast::NameRef::cast)?;\n-    if source_analyzer\n-        .resolve_path(ctx.db, &name_ref_to_import.syntax().ancestors().find_map(ast::Path::cast)?)\n-        .is_some()\n+    if dbg!(source_analyzer\n+        .resolve_path(ctx.db, &name_ref_to_import.syntax().ancestors().find_map(ast::Path::cast)?))\n+    .is_some()\n     {\n         return None;\n     }\n@@ -290,4 +290,21 @@ mod tests {\n             \",\n         );\n     }\n+\n+    #[test]\n+    fn not_applicable_for_imported_function() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            r\"\n+            pub mod test_mod {\n+                pub fn test_function() {}\n+            }\n+\n+            use test_mod::test_function;\n+            fn main() {\n+                test_function<|>\n+            }\n+            \",\n+        );\n+    }\n }"}, {"sha": "49e1a10e02146a5dd4f8db416744d076c3a63e71", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/24ab3e80ca258a3db21bf263225c52d9995a2ea0/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab3e80ca258a3db21bf263225c52d9995a2ea0/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=24ab3e80ca258a3db21bf263225c52d9995a2ea0", "patch": "@@ -20,16 +20,19 @@ use hir_def::{\n use hir_expand::{\n     hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile, MacroCallId, MacroCallKind,\n };\n-use hir_ty::{InEnvironment, InferenceResult, TraitEnvironment};\n+use hir_ty::{\n+    method_resolution::{iterate_method_candidates, LookupMode},\n+    Canonical, InEnvironment, InferenceResult, TraitEnvironment,\n+};\n use ra_syntax::{\n     ast::{self, AstNode},\n     AstPtr, SyntaxNode, SyntaxNodePtr, SyntaxToken, TextRange, TextUnit,\n };\n use rustc_hash::FxHashSet;\n \n use crate::{\n-    db::HirDatabase, Adt, Const, DefWithBody, EnumVariant, Function, Local, MacroDef, Name, Path,\n-    ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n+    db::HirDatabase, Adt, AssocItem, Const, DefWithBody, EnumVariant, Function, Local, MacroDef,\n+    ModuleDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -289,9 +292,11 @@ impl SourceAnalyzer {\n \n     pub fn resolve_path(&self, db: &impl HirDatabase, path: &ast::Path) -> Option<PathResolution> {\n         if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n-            let expr_id = self.expr_id(&path_expr.into())?;\n-            if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_expr(expr_id) {\n-                return Some(PathResolution::AssocItem(assoc.into()));\n+            let path_resolution = self\n+                .resolve_as_full_path(path_expr.clone())\n+                .or_else(|| self.resolve_as_path_to_method(db, &path_expr));\n+            if path_resolution.is_some() {\n+                return path_resolution;\n             }\n         }\n         if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n@@ -305,6 +310,49 @@ impl SourceAnalyzer {\n         self.resolve_hir_path(db, &hir_path)\n     }\n \n+    fn resolve_as_full_path(&self, path_expr: ast::PathExpr) -> Option<PathResolution> {\n+        let expr_id = self.expr_id(&path_expr.into())?;\n+        self.infer\n+            .as_ref()?\n+            .assoc_resolutions_for_expr(expr_id)\n+            .map(|assoc| PathResolution::AssocItem(assoc.into()))\n+    }\n+\n+    fn resolve_as_path_to_method(\n+        &self,\n+        db: &impl HirDatabase,\n+        path_expr: &ast::PathExpr,\n+    ) -> Option<PathResolution> {\n+        let full_path = path_expr.path()?;\n+        let path_to_method = full_path.qualifier()?;\n+        let method_name = full_path.segment()?.syntax().to_string();\n+        match self.resolve_path(db, &path_to_method)? {\n+            PathResolution::Def(ModuleDef::Adt(adt)) => {\n+                let ty = adt.ty(db);\n+                iterate_method_candidates(\n+                    &Canonical { value: ty.ty.value, num_vars: 0 },\n+                    db,\n+                    ty.ty.environment,\n+                    self.resolver.krate()?,\n+                    &self.resolver.traits_in_scope(db),\n+                    None,\n+                    LookupMode::Path,\n+                    |_, assoc_item_id| {\n+                        let assoc = assoc_item_id.into();\n+                        if let AssocItem::Function(function) = assoc {\n+                            if function.name(db).to_string() == method_name {\n+                                return Some(assoc);\n+                            }\n+                        }\n+                        None\n+                    },\n+                )\n+            }\n+            _ => None,\n+        }\n+        .map(PathResolution::AssocItem)\n+    }\n+\n     fn resolve_local_name(&self, name_ref: &ast::NameRef) -> Option<ScopeEntryWithSyntax> {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;"}]}