{"sha": "1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYzg4YmUyZWJjNjdlMWYwZTdmZjU3YzEyZGVjNDVlZjlhYmMyYWU=", "commit": {"author": {"name": "whitequark", "email": "whitequark@whitequark.org", "date": "2017-11-01T21:56:17Z"}, "committer": {"name": "whitequark", "email": "whitequark@whitequark.org", "date": "2017-11-01T22:21:29Z"}, "message": "De-stabilize core::slice::{from_ref, from_ref_mut}.", "tree": {"sha": "6521037d688b634702bf670a4c9b4f943e432f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6521037d688b634702bf670a4c9b4f943e432f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae", "html_url": "https://github.com/rust-lang/rust/commit/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae/comments", "author": {"login": "whitequark", "id": 54771, "node_id": "MDQ6VXNlcjU0Nzcx", "avatar_url": "https://avatars.githubusercontent.com/u/54771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitequark", "html_url": "https://github.com/whitequark", "followers_url": "https://api.github.com/users/whitequark/followers", "following_url": "https://api.github.com/users/whitequark/following{/other_user}", "gists_url": "https://api.github.com/users/whitequark/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitequark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitequark/subscriptions", "organizations_url": "https://api.github.com/users/whitequark/orgs", "repos_url": "https://api.github.com/users/whitequark/repos", "events_url": "https://api.github.com/users/whitequark/events{/privacy}", "received_events_url": "https://api.github.com/users/whitequark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whitequark", "id": 54771, "node_id": "MDQ6VXNlcjU0Nzcx", "avatar_url": "https://avatars.githubusercontent.com/u/54771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitequark", "html_url": "https://github.com/whitequark", "followers_url": "https://api.github.com/users/whitequark/followers", "following_url": "https://api.github.com/users/whitequark/following{/other_user}", "gists_url": "https://api.github.com/users/whitequark/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitequark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitequark/subscriptions", "organizations_url": "https://api.github.com/users/whitequark/orgs", "repos_url": "https://api.github.com/users/whitequark/repos", "events_url": "https://api.github.com/users/whitequark/events{/privacy}", "received_events_url": "https://api.github.com/users/whitequark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "843181172892af2fdb7755e77c39227aba252c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/843181172892af2fdb7755e77c39227aba252c83", "html_url": "https://github.com/rust-lang/rust/commit/843181172892af2fdb7755e77c39227aba252c83"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "f654a6b5ba4713f0ac01637b99f21cc3499180ef", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae", "patch": "@@ -93,6 +93,7 @@\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n+#![feature(from_ref)]\n #![feature(fundamental)]\n #![feature(fused)]\n #![feature(generic_param_attrs)]"}, {"sha": "0c5fec2cf74994379e343a3ac649725b89a257ed", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae", "patch": "@@ -119,7 +119,7 @@ pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};\n pub use core::slice::{RSplit, RSplitMut};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n-#[stable(feature = \"from_ref\", since = \"1.22.0\")]\n+#[unstable(feature = \"from_ref\", issue = \"45703\")]\n pub use core::slice::{from_ref, from_ref_mut};\n #[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n pub use core::slice::SliceIndex;"}, {"sha": "57e5ae28664e0ff2aa0841f9f29516cd41effcbe", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=1cc88be2ebc67e1f0e7ff57c12dec45ef9abc2ae", "patch": "@@ -2451,15 +2451,15 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n-#[stable(feature = \"from_ref\", since = \"1.22.0\")]\n+#[unstable(feature = \"from_ref\", issue = \"45703\")]\n pub fn from_ref<T>(s: &T) -> &[T] {\n     unsafe {\n         from_raw_parts(s, 1)\n     }\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n-#[stable(feature = \"from_ref\", since = \"1.22.0\")]\n+#[unstable(feature = \"from_ref\", issue = \"45703\")]\n pub fn from_ref_mut<T>(s: &mut T) -> &mut [T] {\n     unsafe {\n         from_raw_parts_mut(s, 1)"}]}