{"sha": "388ef349043f20a1a8a3011eaf49dee220485e0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OGVmMzQ5MDQzZjIwYTFhOGEzMDExZWFmNDlkZWUyMjA0ODVlMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-30T10:01:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-30T10:01:49Z"}, "message": "Auto merge of #78562 - JohnTitor:rollup-otg906u, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #77334 (Reorder benches const variable)\n - #77888 (Simplify a nested bool match)\n - #77921 (f64: Refactor collapsible_if)\n - #78523 (Revert invalid `fn` return type parsing change)\n - #78524 (Avoid BorrowMutError with RUSTC_LOG=debug)\n - #78545 (Make anonymous binders start at 0)\n - #78554 (Improve wording of `core::ptr::drop_in_place` docs)\n - #78556 (Link to pass docs from NRVO module docs)\n\nFailed merges:\n\n - #78424 (Fix some more clippy warnings)\n\nr? `@ghost`", "tree": {"sha": "0b2088eadcd8abe6302609612924f36fa7a88b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b2088eadcd8abe6302609612924f36fa7a88b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388ef349043f20a1a8a3011eaf49dee220485e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388ef349043f20a1a8a3011eaf49dee220485e0a", "html_url": "https://github.com/rust-lang/rust/commit/388ef349043f20a1a8a3011eaf49dee220485e0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388ef349043f20a1a8a3011eaf49dee220485e0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df58ae03a8fda8ed126c02fbc16b530d18344df", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df58ae03a8fda8ed126c02fbc16b530d18344df", "html_url": "https://github.com/rust-lang/rust/commit/8df58ae03a8fda8ed126c02fbc16b530d18344df"}, {"sha": "2471a7cdaabdc2cb910daba7cb536775e4d11acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2471a7cdaabdc2cb910daba7cb536775e4d11acc", "html_url": "https://github.com/rust-lang/rust/commit/2471a7cdaabdc2cb910daba7cb536775e4d11acc"}], "stats": {"total": 181, "additions": 84, "deletions": 97}, "files": [{"sha": "8be344140dee69624898dcbdbbe22c0aad7c728d", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -156,24 +156,13 @@ fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n         }\n     }\n     match tt {\n-        TokenTree::Token(token) => match token.kind {\n-            token::Comma => false,\n-            _ => true,\n-        },\n-        TokenTree::Delimited(_, DelimToken::Paren, _) => match prev {\n-            TokenTree::Token(token) => match token.kind {\n-                token::Ident(_, _) => false,\n-                _ => true,\n-            },\n-            _ => true,\n-        },\n-        TokenTree::Delimited(_, DelimToken::Bracket, _) => match prev {\n-            TokenTree::Token(token) => match token.kind {\n-                token::Pound => false,\n-                _ => true,\n-            },\n-            _ => true,\n-        },\n+        TokenTree::Token(token) => token.kind != token::Comma,\n+        TokenTree::Delimited(_, DelimToken::Paren, _) => {\n+            !matches!(prev, TokenTree::Token(Token { kind: token::Ident(..), .. }))\n+        }\n+        TokenTree::Delimited(_, DelimToken::Bracket, _) => {\n+            !matches!(prev, TokenTree::Token(Token { kind: token::Pound, .. }))\n+        }\n         TokenTree::Delimited(..) => true,\n     }\n }"}, {"sha": "26706cd2b1b770333f5a77ae607a17cf0ebcca3e", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -512,7 +512,7 @@ impl<T: Clone> Clone for Lock<T> {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub struct RwLock<T>(InnerRwLock<T>);\n \n impl<T> RwLock<T> {"}, {"sha": "2a81737e168d4cfc1d52bf0767942a0d1ea58ad1", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -2042,6 +2042,10 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     encoder.emit_raw_bytes(&[0, 0, 0, 0]);\n \n     let source_map_files = tcx.sess.source_map().files();\n+    let source_file_cache = (source_map_files[0].clone(), 0);\n+    let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));\n+    drop(source_map_files);\n+\n     let hygiene_ctxt = HygieneEncodeContext::default();\n \n     let mut ecx = EncodeContext {\n@@ -2052,13 +2056,12 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n         lazy_state: LazyState::NoNode,\n         type_shorthands: Default::default(),\n         predicate_shorthands: Default::default(),\n-        source_file_cache: (source_map_files[0].clone(), 0),\n+        source_file_cache,\n         interpret_allocs: Default::default(),\n-        required_source_files: Some(GrowableBitSet::with_capacity(source_map_files.len())),\n+        required_source_files,\n         is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),\n         hygiene_ctxt: &hygiene_ctxt,\n     };\n-    drop(source_map_files);\n \n     // Encode the rustc version string in a predictable location.\n     rustc_version().encode(&mut ecx).unwrap();"}, {"sha": "13bf24bf8cffb75cf01578cb36c303257901e8ed", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -684,7 +684,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Rewrite any late-bound regions so that they are anonymous. Region numbers are\n-    /// assigned starting at 1 and increasing monotonically in the order traversed\n+    /// assigned starting at 0 and increasing monotonically in the order traversed\n     /// by the fold operation.\n     ///\n     /// The chief purpose of this function is to canonicalize regions so that two\n@@ -698,8 +698,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut counter = 0;\n         Binder::bind(\n             self.replace_late_bound_regions(sig, |_| {\n+                let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(counter)));\n                 counter += 1;\n-                self.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(counter)))\n+                r\n             })\n             .0,\n         )"}, {"sha": "45b906bf542d5a37703c98e1d1ad7b039020664d", "filename": "compiler/rustc_mir/src/transform/nrvo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -1,3 +1,5 @@\n+//! See the docs for [`RenameReturnPlace`].\n+\n use rustc_hir::Mutability;\n use rustc_index::bit_set::HybridBitSet;\n use rustc_middle::mir::visit::{MutVisitor, NonUseContext, PlaceContext, Visitor};"}, {"sha": "26492d92a77e902853fc75cf16240d044401d26a", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -1666,19 +1666,10 @@ impl<'a> Parser<'a> {\n         req_name: ReqName,\n         ret_allow_plus: AllowPlus,\n     ) -> PResult<'a, P<FnDecl>> {\n-        let inputs = self.parse_fn_params(req_name)?;\n-        let output = self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?;\n-\n-        if let ast::FnRetTy::Ty(ty) = &output {\n-            if let TyKind::Path(_, Path { segments, .. }) = &ty.kind {\n-                if let [.., last] = &segments[..] {\n-                    // Detect and recover `fn foo() -> Vec<i32>> {}`\n-                    self.check_trailing_angle_brackets(last, &[&token::OpenDelim(token::Brace)]);\n-                }\n-            }\n-        }\n-\n-        Ok(P(FnDecl { inputs, output }))\n+        Ok(P(FnDecl {\n+            inputs: self.parse_fn_params(req_name)?,\n+            output: self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?,\n+        }))\n     }\n \n     /// Parses the parameter list of a function, including the `(` and `)` delimiters."}, {"sha": "f067cdb730864f40224b90b9172e9f5635b13134", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -12,7 +12,7 @@ pub use crate::*;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::{AtomicU32, Lock, LockGuard, Lrc, MappedLockGuard};\n+use rustc_data_structures::sync::{AtomicU32, Lrc, MappedReadGuard, ReadGuard, RwLock};\n use std::cmp;\n use std::convert::TryFrom;\n use std::hash::Hash;\n@@ -168,7 +168,7 @@ pub struct SourceMap {\n     /// The address space below this value is currently used by the files in the source map.\n     used_address_space: AtomicU32,\n \n-    files: Lock<SourceMapFiles>,\n+    files: RwLock<SourceMapFiles>,\n     file_loader: Box<dyn FileLoader + Sync + Send>,\n     // This is used to apply the file path remapping as specified via\n     // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.\n@@ -236,8 +236,8 @@ impl SourceMap {\n \n     // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate\n     // any existing indices pointing into `files`.\n-    pub fn files(&self) -> MappedLockGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {\n-        LockGuard::map(self.files.borrow(), |files| &mut files.source_files)\n+    pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {\n+        ReadGuard::map(self.files.borrow(), |files| &files.source_files)\n     }\n \n     pub fn source_file_by_stable_id("}, {"sha": "1ff043ae91ffb946ab1dc46b7707ff51750bb8a6", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -200,15 +200,9 @@ impl SymbolMangler<'tcx> {\n \n         let lifetimes = regions\n             .into_iter()\n-            .map(|br| {\n-                match br {\n-                    ty::BrAnon(i) => {\n-                        // FIXME(eddyb) for some reason, `anonymize_late_bound_regions` starts at `1`.\n-                        assert_ne!(i, 0);\n-                        i - 1\n-                    }\n-                    _ => bug!(\"symbol_names: non-anonymized region `{:?}` in `{:?}`\", br, value),\n-                }\n+            .map(|br| match br {\n+                ty::BrAnon(i) => i,\n+                _ => bug!(\"symbol_names: non-anonymized region `{:?}` in `{:?}`\", br, value),\n             })\n             .max()\n             .map_or(0, |max| max + 1);\n@@ -327,10 +321,6 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             // Late-bound lifetimes use indices starting at 1,\n             // see `BinderLevel` for more details.\n             ty::ReLateBound(debruijn, ty::BrAnon(i)) => {\n-                // FIXME(eddyb) for some reason, `anonymize_late_bound_regions` starts at `1`.\n-                assert_ne!(i, 0);\n-                let i = i - 1;\n-\n                 let binder = &self.binders[self.binders.len() - 1 - debruijn.index()];\n                 let depth = binder.lifetime_depths.start + i;\n "}, {"sha": "293a995887c26c042d756304a5803e6116c0167d", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -186,8 +186,9 @@ pub fn resolve_interior<'a, 'tcx>(\n                 // which means that none of the regions inside relate to any other, even if\n                 // typeck had previously found constraints that would cause them to be related.\n                 let folded = fcx.tcx.fold_regions(&erased, &mut false, |_, current_depth| {\n+                    let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)));\n                     counter += 1;\n-                    fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n+                    r\n                 });\n \n                 cause.ty = folded;"}, {"sha": "89893b6209c0a47d0ea3e9576b1e5449e9224209", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -570,6 +570,8 @@ fn bench_in_place_collect_droppable(b: &mut Bencher) {\n     })\n }\n \n+const LEN: usize = 16384;\n+\n #[bench]\n fn bench_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n@@ -613,8 +615,6 @@ pub fn map_fast(l: &[(u32, u32)]) -> Vec<u32> {\n     result\n }\n \n-const LEN: usize = 16384;\n-\n #[bench]\n fn bench_range_map_collect(b: &mut Bencher) {\n     b.iter(|| (0..LEN).map(|_| u32::default()).collect::<Vec<_>>());"}, {"sha": "9de2758767e3ea8406c266f76b833eaf47e18576", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -99,9 +99,9 @@ mod mut_ptr;\n ///   dropped normally.\n ///\n /// * It is friendlier to the optimizer to do this over [`ptr::read`] when\n-///   dropping manually allocated memory (e.g., when writing Box/Rc/Vec),\n-///   as the compiler doesn't need to prove that it's sound to elide the\n-///   copy.\n+///   dropping manually allocated memory (e.g., in the implementations of\n+///   `Box`/`Rc`/`Vec`), as the compiler doesn't need to prove that it's\n+///   sound to elide the copy.\n ///\n /// * It can be used to drop [pinned] data when `T` is not `repr(packed)`\n ///   (pinned data must not be moved before it is dropped)."}, {"sha": "db6255de906347d9636481f0715df877949d24a6", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -1,7 +1,7 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f32` floating point data type.\n //!\n-//! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n+//! *[See also the `f32` primitive type](primitive@f32).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!"}, {"sha": "966a0e8e183ae5e382357c35c620bb5866f2d88d", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -1,7 +1,7 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f64` floating point data type.\n //!\n-//! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n+//! *[See also the `f64` primitive type](primitive@f64).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n@@ -920,22 +920,20 @@ impl f64 {\n     fn log_wrapper<F: Fn(f64) -> f64>(self, log_fn: F) -> f64 {\n         if !cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n             log_fn(self)\n-        } else {\n-            if self.is_finite() {\n-                if self > 0.0 {\n-                    log_fn(self)\n-                } else if self == 0.0 {\n-                    Self::NEG_INFINITY // log(0) = -Inf\n-                } else {\n-                    Self::NAN // log(-n) = NaN\n-                }\n-            } else if self.is_nan() {\n-                self // log(NaN) = NaN\n-            } else if self > 0.0 {\n-                self // log(Inf) = Inf\n+        } else if self.is_finite() {\n+            if self > 0.0 {\n+                log_fn(self)\n+            } else if self == 0.0 {\n+                Self::NEG_INFINITY // log(0) = -Inf\n             } else {\n-                Self::NAN // log(-Inf) = NaN\n+                Self::NAN // log(-n) = NaN\n             }\n+        } else if self.is_nan() {\n+            self // log(NaN) = NaN\n+        } else if self > 0.0 {\n+            self // log(Inf) = Inf\n+        } else {\n+            Self::NAN // log(-Inf) = NaN\n         }\n     }\n }"}, {"sha": "daa8e9f495e06e1dff6c1904c4b58868e0ac574b", "filename": "src/test/ui/auxiliary/rustc-rust-log-aux.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fauxiliary%2Frustc-rust-log-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fauxiliary%2Frustc-rust-log-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Frustc-rust-log-aux.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -0,0 +1 @@\n+// rustc-env:RUSTC_LOG=debug"}, {"sha": "7a4ff779410528d996dc624ce435e43f0f352c99", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -6,7 +6,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n-note: the anonymous lifetime #2 defined on the body at 16:48...\n+note: the anonymous lifetime #1 defined on the body at 16:48...\n   --> $DIR/expect-fn-supply-fn.rs:16:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n@@ -30,7 +30,7 @@ note: the lifetime `'x` as defined on the function body at 13:36...\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 16:48\n+note: ...does not necessarily outlive the anonymous lifetime #1 defined on the body at 16:48\n   --> $DIR/expect-fn-supply-fn.rs:16:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});"}, {"sha": "07a67a6183462aa2a316120d1997f442e58ade5b", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -6,7 +6,7 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |\n    = note: expected reference `&u32`\n               found reference `&'x u32`\n-note: the anonymous lifetime #2 defined on the body at 14:29...\n+note: the anonymous lifetime #1 defined on the body at 14:29...\n   --> $DIR/expect-region-supply-region-2.rs:14:29\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {\n@@ -37,7 +37,7 @@ note: the lifetime `'x` as defined on the function body at 9:30...\n    |\n LL | fn expect_bound_supply_named<'x>() {\n    |                              ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 14:29\n+note: ...does not necessarily outlive the anonymous lifetime #1 defined on the body at 14:29\n   --> $DIR/expect-region-supply-region-2.rs:14:29\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {"}, {"sha": "ff51aa3acf4d4a9004de0ada6e7f5547e9ccaf8e", "filename": "src/test/ui/issues/issue-10291.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -4,7 +4,7 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         x\n    |         ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 2:69...\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 2:69...\n   --> $DIR/issue-10291.rs:2:69\n    |\n LL |       drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {"}, {"sha": "4247d551565c80eb5619feeb59126bea43deb2cd", "filename": "src/test/ui/issues/issue-52533-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -6,12 +6,12 @@ LL |     gimme(|x, y| y)\n    |\n    = note: expected reference `&Foo<'_, '_, u32>`\n               found reference `&Foo<'_, '_, u32>`\n-note: the anonymous lifetime #4 defined on the body at 9:11...\n+note: the anonymous lifetime #3 defined on the body at 9:11...\n   --> $DIR/issue-52533-1.rs:9:11\n    |\n LL |     gimme(|x, y| y)\n    |           ^^^^^^^^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the body at 9:11\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 9:11\n   --> $DIR/issue-52533-1.rs:9:11\n    |\n LL |     gimme(|x, y| y)"}, {"sha": "4e41620eecfdd7af50e96b01a6195e4006d91811", "filename": "src/test/ui/issues/issue-52533.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |     foo(|a, b| b)\n    |                ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 5:9...\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 5:9...\n   --> $DIR/issue-52533.rs:5:9\n    |\n LL |     foo(|a, b| b)\n    |         ^^^^^^^^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined on the body at 5:9\n+note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the body at 5:9\n   --> $DIR/issue-52533.rs:5:9\n    |\n LL |     foo(|a, b| b)"}, {"sha": "15590e324861cd6c1cbf25fa278d6dee2501a3a5", "filename": "src/test/ui/parser/fn-returns-fn-pointer.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fparser%2Ffn-returns-fn-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fparser%2Ffn-returns-fn-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-returns-fn-pointer.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+// Regression test for #78507.\n+fn foo() -> Option<fn() -> Option<bool>> {\n+    Some(|| Some(true))\n+}\n+fn main() {}"}, {"sha": "480d9bc2bade0d3506eec9a9bb0d9f704dbdd31a", "filename": "src/test/ui/parser/issue-24780.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -1,8 +1,8 @@\n // Verify that '>' is not both expected and found at the same time, as it used\n // to happen in #24780. For example, following should be an error:\n-// expected one of ..., `>`, ... found `>`. No longer exactly this, but keeping for posterity.\n+// expected one of ..., `>`, ... found `>`.\n \n-fn foo() -> Vec<usize>> { //~ ERROR unmatched angle bracket\n+fn foo() -> Vec<usize>> { //~ ERROR expected one of `!`, `+`, `::`, `;`, `where`, or `{`, found `>`\n     Vec::new()\n }\n "}, {"sha": "bdd089bb7a13934ee379928e7f7c646fd955e028", "filename": "src/test/ui/parser/issue-24780.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -1,8 +1,8 @@\n-error: unmatched angle bracket\n+error: expected one of `!`, `+`, `::`, `;`, `where`, or `{`, found `>`\n   --> $DIR/issue-24780.rs:5:23\n    |\n LL | fn foo() -> Vec<usize>> {\n-   |                       ^^ help: remove extra angle bracket\n+   |                       ^ expected one of `!`, `+`, `::`, `;`, `where`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "eeec0cc786267c6492eecf6d2dad915cb9efbfc7", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     let mut ay = &y;\n    |                  ^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 7:58...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 7:58...\n   --> $DIR/regions-nested-fns.rs:7:58\n    |\n LL |       ignore::<Box<dyn for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n@@ -19,7 +19,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         ay = z;\n    |              ^\n-note: but, the lifetime must be valid for the anonymous lifetime #2 defined on the body at 13:72...\n+note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the body at 13:72...\n   --> $DIR/regions-nested-fns.rs:13:72\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n@@ -48,7 +48,7 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         if false { return x; }\n    |                           ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 13:72...\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the body at 13:72...\n   --> $DIR/regions-nested-fns.rs:13:72\n    |\n LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {"}, {"sha": "bba968cfde43c1906db1cbb9b8808eb2c85e4854", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     with(|o| o)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 10:10...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 10:10...\n   --> $DIR/regions-ret-borrowed-1.rs:10:10\n    |\n LL |     with(|o| o)"}, {"sha": "4b93ca0ae67346b6f8f7d5f1008a19c58eefbd60", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     with(|o| o)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 13:10...\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 13:10...\n   --> $DIR/regions-ret-borrowed.rs:13:10\n    |\n LL |     with(|o| o)"}, {"sha": "8ceb24dd2afd28a85aa06e6dfeb1a439de1f282b", "filename": "src/test/ui/rustc-rust-log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Frustc-rust-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Frustc-rust-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-rust-log.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -8,7 +8,7 @@\n // dont-check-compiler-stdout\n // dont-check-compiler-stderr\n // compile-flags: --error-format human\n-\n+// aux-build: rustc-rust-log-aux.rs\n // rustc-env:RUSTC_LOG=debug\n \n fn main() {}"}, {"sha": "bd20fd26180cbb7145464cc35b8f04f7b882a997", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -4,15 +4,15 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         x.set(y);\n    |               ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #3 defined on the body at 16:14...\n+note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 16:14...\n   --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n LL | |     });\n    | |_____^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #4 defined on the body at 16:14\n+note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined on the body at 16:14\n   --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n    |\n LL |       doit(0, &|x, y| {"}, {"sha": "666e5d402ef1efb279460d4c2965ab938d6ef75d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ef349043f20a1a8a3011eaf49dee220485e0a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=388ef349043f20a1a8a3011eaf49dee220485e0a", "patch": "@@ -1775,6 +1775,11 @@ impl<'test> TestCx<'test> {\n         let mut aux_rustc =\n             aux_cx.make_compile_args(input_file, aux_output, EmitMetadata::No, AllowUnused::No);\n \n+        for key in &aux_props.unset_rustc_env {\n+            aux_rustc.env_remove(key);\n+        }\n+        aux_rustc.envs(aux_props.rustc_env.clone());\n+\n         let (dylib, crate_type) = if aux_props.no_prefer_dynamic {\n             (true, None)\n         } else if self.config.target.contains(\"cloudabi\")"}]}