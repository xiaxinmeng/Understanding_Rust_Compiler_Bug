{"sha": "cbe8da0655de948d7b405676d2e7001b0b35e9de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZThkYTA2NTVkZTk0OGQ3YjQwNTY3NmQyZTcwMDFiMGIzNWU5ZGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-07T22:51:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T21:39:24Z"}, "message": "make treatment of unchecked/unsafe blocks more uniform\n\nalso repair various errors in the parser related to such blocks.\nrename checked_blk to default_blk to reflect the fact that it\ninherits its purity from the surrounding context.", "tree": {"sha": "d74e536d9459b8e3c71b8778d94448a9ec8fc833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d74e536d9459b8e3c71b8778d94448a9ec8fc833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbe8da0655de948d7b405676d2e7001b0b35e9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe8da0655de948d7b405676d2e7001b0b35e9de", "html_url": "https://github.com/rust-lang/rust/commit/cbe8da0655de948d7b405676d2e7001b0b35e9de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbe8da0655de948d7b405676d2e7001b0b35e9de/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9569371f7bda9fee0c27d829e6faa7b502f6733", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9569371f7bda9fee0c27d829e6faa7b502f6733", "html_url": "https://github.com/rust-lang/rust/commit/e9569371f7bda9fee0c27d829e6faa7b502f6733"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "70985f108060d79945414c3ffa3a551a5728c849", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=cbe8da0655de948d7b405676d2e7001b0b35e9de", "patch": "@@ -184,7 +184,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n     let test_descs = mk_test_desc_vec(cx);\n \n     let body_: ast::blk_ =\n-        checked_block([], option::some(test_descs), cx.next_node_id());\n+        default_block([], option::some(test_descs), cx.next_node_id());\n     let body = nospan(body_);\n \n     let fn_ = {decl: decl, proto: proto, body: body};\n@@ -303,7 +303,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n     let test_main_call_expr = mk_test_main_call(cx);\n \n     let body_: ast::blk_ =\n-        checked_block([], option::some(test_main_call_expr),\n+        default_block([], option::some(test_main_call_expr),\n                       cx.next_node_id());\n     let body = {node: body_, span: dummy_sp()};\n "}, {"sha": "ec7c2537874e744566f0d46db38d97a070bc386b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=cbe8da0655de948d7b405676d2e7001b0b35e9de", "patch": "@@ -2090,13 +2090,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       }\n       ast::expr_block(b) {\n         // If this is an unchecked block, turn off purity-checking\n-        let fcx_for_block =\n-            alt b.node.rules {\n-              ast::unchecked_blk. { @{purity: ast::impure_fn with *fcx} }\n-              ast::unsafe_blk. { @{purity: ast::unsafe_fn with *fcx} }\n-              ast::checked_blk. { fcx }\n-            };\n-        bot = check_block(fcx_for_block, b);\n+        bot = check_block(fcx, b);\n         let typ =\n             alt b.node.expr {\n               some(expr) { expr_ty(tcx, expr) }\n@@ -2553,7 +2547,12 @@ fn check_stmt(fcx: @fn_ctxt, stmt: @ast::stmt) -> bool {\n     ret bot;\n }\n \n-fn check_block(fcx: @fn_ctxt, blk: ast::blk) -> bool {\n+fn check_block(fcx0: @fn_ctxt, blk: ast::blk) -> bool {\n+    let fcx = alt blk.node.rules {\n+      ast::unchecked_blk. { @{purity: ast::impure_fn with *fcx0} }\n+      ast::unsafe_blk. { @{purity: ast::unsafe_fn with *fcx0} }\n+      ast::default_blk. { fcx0 }\n+    };\n     let bot = false;\n     let warned = false;\n     for s: @ast::stmt in blk.node.stmts {"}, {"sha": "d9b5365db5fdbf7a703d60a0a7ac4668b4aa409f", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=cbe8da0655de948d7b405676d2e7001b0b35e9de", "patch": "@@ -174,7 +174,7 @@ type field_ = {mut: mutability, ident: ident, expr: @expr};\n \n type field = spanned<field_>;\n \n-tag blk_check_mode { checked_blk; unchecked_blk; unsafe_blk; }\n+tag blk_check_mode { default_blk; unchecked_blk; unsafe_blk; }\n \n tag expr_check_mode { claimed_expr; checked_expr; }\n "}, {"sha": "32c381d909015121a617112bbb23a855ac66981f", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=cbe8da0655de948d7b405676d2e7001b0b35e9de", "patch": "@@ -185,13 +185,13 @@ fn eq_ty(&&a: @ty, &&b: @ty) -> bool { ret std::box::ptr_eq(a, b); }\n fn hash_ty(&&t: @ty) -> uint { ret t.span.lo << 16u + t.span.hi; }\n \n fn block_from_expr(e: @expr) -> blk {\n-    let blk_ = checked_block([], option::some::<@expr>(e), e.id);\n+    let blk_ = default_block([], option::some::<@expr>(e), e.id);\n     ret {node: blk_, span: e.span};\n }\n \n-fn checked_block(stmts1: [@stmt], expr1: option::t<@expr>, id1: node_id) ->\n+fn default_block(stmts1: [@stmt], expr1: option::t<@expr>, id1: node_id) ->\n    blk_ {\n-    ret {stmts: stmts1, expr: expr1, id: id1, rules: checked_blk};\n+    ret {stmts: stmts1, expr: expr1, id: id1, rules: default_blk};\n }\n \n fn obj_field_from_anon_obj_field(f: anon_obj_field) -> obj_field {"}, {"sha": "ab573691720dbe07e772a59e5a6dffa0478b574b", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=cbe8da0655de948d7b405676d2e7001b0b35e9de", "patch": "@@ -828,7 +828,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n                       p.peek() == token::OROR {\n             ret parse_fn_block_expr(p);\n         } else {\n-            let blk = parse_block_tail(p, lo, ast::checked_blk);\n+            let blk = parse_block_tail(p, lo, ast::default_blk);\n             ret mk_expr(p, blk.span.lo, blk.span.hi, ast::expr_block(blk));\n         }\n     } else if eat_word(p, \"if\") {\n@@ -873,7 +873,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n     } else if p.peek() == token::POUND_LBRACE {\n         p.bump();\n         let blk = ast::mac_embed_block(\n-            parse_block_tail(p, lo, ast::checked_blk));\n+            parse_block_tail(p, lo, ast::default_blk));\n         ret mk_mac_expr(p, lo, p.get_hi_pos(), blk);\n     } else if p.peek() == token::ELLIPSIS {\n         p.bump();\n@@ -1320,7 +1320,7 @@ fn parse_fn_expr(p: parser, proto: ast::proto) -> @ast::expr {\n fn parse_fn_block_expr(p: parser) -> @ast::expr {\n     let lo = p.get_last_lo_pos();\n     let decl = parse_fn_block_decl(p);\n-    let body = parse_block_tail(p, lo, ast::checked_blk);\n+    let body = parse_block_tail(p, lo, ast::default_blk);\n     let _fn = {decl: decl, proto: ast::proto_block, body: body};\n     ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn));\n }\n@@ -1684,12 +1684,14 @@ fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n fn parse_block(p: parser) -> ast::blk {\n     let lo = p.get_lo_pos();\n     if eat_word(p, \"unchecked\") {\n+        expect(p, token::LBRACE);\n         be parse_block_tail(p, lo, ast::unchecked_blk);\n     } else if eat_word(p, \"unsafe\") {\n+        expect(p, token::LBRACE);\n         be parse_block_tail(p, lo, ast::unsafe_blk);\n     } else {\n         expect(p, token::LBRACE);\n-        be parse_block_tail(p, lo, ast::checked_blk);\n+        be parse_block_tail(p, lo, ast::default_blk);\n     }\n }\n "}, {"sha": "b806df75128d8f8c4b07ec4f86c2bd48037dc052", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=cbe8da0655de948d7b405676d2e7001b0b35e9de", "patch": "@@ -575,7 +575,7 @@ fn print_possibly_embedded_block(s: ps, blk: ast::blk, embedded: embed_type,\n     alt blk.node.rules {\n       ast::unchecked_blk. { word(s.s, \"unchecked\"); }\n       ast::unsafe_blk. { word(s.s, \"unsafe\"); }\n-      ast::checked_blk. { }\n+      ast::default_blk. { }\n     }\n \n     maybe_print_comment(s, blk.span.lo);"}, {"sha": "af2b09cc37aee777bea1cfcdb1bd3b4adddd9da1", "filename": "src/test/run-pass/unsafe-fn-called-from-unsafe-blk.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Ftest%2Frun-pass%2Funsafe-fn-called-from-unsafe-blk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe8da0655de948d7b405676d2e7001b0b35e9de/src%2Ftest%2Frun-pass%2Funsafe-fn-called-from-unsafe-blk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsafe-fn-called-from-unsafe-blk.rs?ref=cbe8da0655de948d7b405676d2e7001b0b35e9de", "patch": "@@ -4,8 +4,15 @@\n \n unsafe fn f() { ret; }\n \n-fn main() {\n+fn g() {\n     unsafe {\n         f();\n     }\n }\n+\n+fn h() unsafe {\n+    f();\n+}\n+\n+fn main() {\n+}"}]}