{"sha": "2e74ca18e43cbaa11300f24cfa0571d7c44d175e", "node_id": "C_kwDOAAsO6NoAKDJlNzRjYTE4ZTQzY2JhYTExMzAwZjI0Y2ZhMDU3MWQ3YzQ0ZDE3NWU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-21T23:29:49Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-03T22:24:10Z"}, "message": "Tweak the usage messages for `x.py build` and `x.py check`.\n\nThey're a bit out of date, and overly complicated.", "tree": {"sha": "7a18c2a48f45abafd43af2fa90aa7c542f9e0d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a18c2a48f45abafd43af2fa90aa7c542f9e0d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e74ca18e43cbaa11300f24cfa0571d7c44d175e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e74ca18e43cbaa11300f24cfa0571d7c44d175e", "html_url": "https://github.com/rust-lang/rust/commit/2e74ca18e43cbaa11300f24cfa0571d7c44d175e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e74ca18e43cbaa11300f24cfa0571d7c44d175e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e3d92306ad4022cff547aa1e02b13cdfab816d", "url": "https://api.github.com/repos/rust-lang/rust/commits/10e3d92306ad4022cff547aa1e02b13cdfab816d", "html_url": "https://github.com/rust-lang/rust/commit/10e3d92306ad4022cff547aa1e02b13cdfab816d"}], "stats": {"total": 34, "additions": 11, "deletions": 23}, "files": [{"sha": "9180c5f03af6810974234c15d830d8d9881fe148", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2e74ca18e43cbaa11300f24cfa0571d7c44d175e/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e74ca18e43cbaa11300f24cfa0571d7c44d175e/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=2e74ca18e43cbaa11300f24cfa0571d7c44d175e", "patch": "@@ -401,26 +401,19 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                     \"\\n\n Arguments:\n     This subcommand accepts a number of paths to directories to the crates\n-    and/or artifacts to compile. For example:\n-\n-        ./x.py build library/core\n-        ./x.py build library/core library/proc_macro\n-        ./x.py build library/std --stage 1\n-\n-    If no arguments are passed then the complete artifacts for that stage are\n-    also compiled.\n+    and/or artifacts to compile. For example, for a quick build of a usable\n+    compiler:\n \n-        ./x.py build\n-        ./x.py build --stage 1\n+        ./x.py build --stage 1 library/std\n \n-    For a quick build of a usable compiler, you can pass:\n+    This will build a compiler and standard library from the local source code.\n+    Once this is done, build/$ARCH/stage1 contains a usable compiler.\n \n-        ./x.py build --stage 1 library/test\n+    If no arguments are passed then the default artifacts for that stage are\n+    compiled. For example:\n \n-    This will first build everything once (like `--stage 0` without further\n-    arguments would), and then use the compiler built in stage 0 to build\n-    library/test and its dependencies.\n-    Once this is done, build/$ARCH/stage1 contains a usable compiler.\",\n+        ./x.py build --stage 0\n+        ./x.py build \",\n                 );\n             }\n             \"check\" | \"c\" => {\n@@ -430,14 +423,9 @@ Arguments:\n     This subcommand accepts a number of paths to directories to the crates\n     and/or artifacts to compile. For example:\n \n-        ./x.py check library/core\n-        ./x.py check library/core library/proc_macro\n+        ./x.py check library/std\n \n-    If no arguments are passed then the complete artifacts are compiled: std, test, and rustc. Note\n-    also that since we use `cargo check`, by default this will automatically enable incremental\n-    compilation, so there's no need to pass it separately, though it won't hurt. We also completely\n-    ignore the stage passed, as there's no way to compile in non-stage 0 without actually building\n-    the compiler.\",\n+    If no arguments are passed then many artifacts are checked.\",\n                 );\n             }\n             \"clippy\" => {"}]}