{"sha": "8ee2926aa2be9ac0e658386b91617e6563cc5d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZTI5MjZhYTJiZTlhYzBlNjU4Mzg2YjkxNjE3ZTY1NjNjYzVkNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-12T17:55:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-12T18:00:04Z"}, "message": "drop obsolete render test subcommand", "tree": {"sha": "c7fa74cbecd55426686b50679c9a7eef09887b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7fa74cbecd55426686b50679c9a7eef09887b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ee2926aa2be9ac0e658386b91617e6563cc5d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee2926aa2be9ac0e658386b91617e6563cc5d71", "html_url": "https://github.com/rust-lang/rust/commit/8ee2926aa2be9ac0e658386b91617e6563cc5d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ee2926aa2be9ac0e658386b91617e6563cc5d71/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "915489714baefac71f9dcc6c42c20a02645d7e23", "url": "https://api.github.com/repos/rust-lang/rust/commits/915489714baefac71f9dcc6c42c20a02645d7e23", "html_url": "https://github.com/rust-lang/rust/commit/915489714baefac71f9dcc6c42c20a02645d7e23"}], "stats": {"total": 31, "additions": 1, "deletions": 30}, "files": [{"sha": "038f5f3fe6cb02f93875f598f91777f0f79ec379", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8ee2926aa2be9ac0e658386b91617e6563cc5d71/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee2926aa2be9ac0e658386b91617e6563cc5d71/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=8ee2926aa2be9ac0e658386b91617e6563cc5d71", "patch": "@@ -1,11 +1,10 @@\n mod analysis_stats;\n \n-use std::{fs, io::Read, path::Path};\n+use std::io::Read;\n \n use clap::{App, Arg, SubCommand};\n use ra_ide_api::file_structure;\n use ra_syntax::{SourceFile, TreeArc, AstNode};\n-use tools::collect_tests;\n use flexi_logger::Logger;\n use ra_prof::profile;\n \n@@ -15,11 +14,6 @@ fn main() -> Result<()> {\n     Logger::with_env().start()?;\n     let matches = App::new(\"ra-cli\")\n         .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n-        .subcommand(\n-            SubCommand::with_name(\"render-test\")\n-                .arg(Arg::with_name(\"line\").long(\"--line\").required(true).takes_value(true))\n-                .arg(Arg::with_name(\"file\").long(\"--file\").required(true).takes_value(true)),\n-        )\n         .subcommand(SubCommand::with_name(\"parse\").arg(Arg::with_name(\"no-dump\").long(\"--no-dump\")))\n         .subcommand(SubCommand::with_name(\"symbols\"))\n         .subcommand(\n@@ -44,14 +38,6 @@ fn main() -> Result<()> {\n                 println!(\"{:?}\", s);\n             }\n         }\n-        (\"render-test\", Some(matches)) => {\n-            let file = matches.value_of(\"file\").unwrap();\n-            let file = Path::new(file);\n-            let line: usize = matches.value_of(\"line\").unwrap().parse()?;\n-            let line = line - 1;\n-            let (test, tree) = render_test(file, line)?;\n-            println!(\"{}\\n{}\", test, tree);\n-        }\n         (\"analysis-stats\", Some(matches)) => {\n             let verbose = matches.is_present(\"verbose\");\n             let path = matches.value_of(\"path\").unwrap_or(\"\");\n@@ -73,18 +59,3 @@ fn read_stdin() -> Result<String> {\n     ::std::io::stdin().read_to_string(&mut buff)?;\n     Ok(buff)\n }\n-\n-fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n-    let text = fs::read_to_string(file)?;\n-    let tests = collect_tests(&text);\n-    let test = tests.into_iter().find(|(start_line, t)| {\n-        *start_line <= line && line <= *start_line + t.text.lines().count()\n-    });\n-    let test = match test {\n-        None => failure::bail!(\"No test found at line {} at {}\", line, file.display()),\n-        Some((_start_line, test)) => test,\n-    };\n-    let file = SourceFile::parse(&test.text);\n-    let tree = file.syntax().debug_dump();\n-    Ok((test.text, tree))\n-}"}]}