{"sha": "5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTBkYmQ1ZTg2YTViYTY4ZWMwM2NlZjVkZDJjMjQxOGY1ODdkYmI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-29T17:00:23Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-03T19:42:15Z"}, "message": "Make `Candidate` private", "tree": {"sha": "b62b42b678367442016df7fa1b362f9197242890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62b42b678367442016df7fa1b362f9197242890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb", "html_url": "https://github.com/rust-lang/rust/commit/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "html_url": "https://github.com/rust-lang/rust/commit/c7e6f88926e746d310ca15ce9761b3fd434dbfd2"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "7e7035e89abee457a962f1eb14b7c79756469a1d", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb", "patch": "@@ -659,7 +659,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n }\n \n #[derive(Debug)]\n-crate struct Candidate<'pat, 'tcx> {\n+struct Candidate<'pat, 'tcx> {\n     /// `Span` of the original pattern that gave rise to this candidate\n     span: Span,\n "}, {"sha": "d3ed7c4daf7eb9312ee18e4b623282d80cd2218c", "filename": "src/librustc_mir_build/build/matches/simplify.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs?ref=5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb", "patch": "@@ -38,7 +38,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///\n     /// only generates a single switch. If this happens this method returns\n     /// `true`.\n-    crate fn simplify_candidate<'pat>(&mut self, candidate: &mut Candidate<'pat, 'tcx>) -> bool {\n+    pub(super) fn simplify_candidate<'pat>(\n+        &mut self,\n+        candidate: &mut Candidate<'pat, 'tcx>,\n+    ) -> bool {\n         // repeatedly simplify match pairs until fixed point is reached\n         loop {\n             let match_pairs = mem::take(&mut candidate.match_pairs);"}, {"sha": "dd0102e1c410f068d6bf8f2a50fb39f850ce3d27", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=5f90dbd5e86a5ba68ec03cef5dd2c2418f587dbb", "patch": "@@ -24,7 +24,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Identifies what test is needed to decide if `match_pair` is applicable.\n     ///\n     /// It is a bug to call this with a simplifiable pattern.\n-    crate fn test<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> Test<'tcx> {\n+    pub(super) fn test<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> Test<'tcx> {\n         match *match_pair.pattern.kind {\n             PatKind::Variant { ref adt_def, substs: _, variant_index: _, subpatterns: _ } => Test {\n                 span: match_pair.pattern.span,\n@@ -81,7 +81,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    crate fn add_cases_to_switch<'pat>(\n+    pub(super) fn add_cases_to_switch<'pat>(\n         &mut self,\n         test_place: &Place<'tcx>,\n         candidate: &Candidate<'pat, 'tcx>,\n@@ -125,7 +125,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    crate fn add_variants_to_switch<'pat>(\n+    pub(super) fn add_variants_to_switch<'pat>(\n         &mut self,\n         test_place: &Place<'tcx>,\n         candidate: &Candidate<'pat, 'tcx>,\n@@ -152,7 +152,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    crate fn perform_test(\n+    pub(super) fn perform_test(\n         &mut self,\n         block: BasicBlock,\n         place: &Place<'tcx>,\n@@ -498,7 +498,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// that it *doesn't* apply. For now, we return false, indicate that the\n     /// test does not apply to this candidate, but it might be we can get\n     /// tighter match code if we do something a bit different.\n-    crate fn sort_candidate<'pat>(\n+    pub(super) fn sort_candidate<'pat>(\n         &mut self,\n         test_place: &Place<'tcx>,\n         test: &Test<'tcx>,"}]}