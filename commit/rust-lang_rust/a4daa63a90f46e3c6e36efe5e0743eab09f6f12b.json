{"sha": "a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZGFhNjNhOTBmNDZlM2M2ZTM2ZWZlNWUwNzQzZWFiMDlmNmYxMmI=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-12-17T03:03:31Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2021-01-02T06:49:14Z"}, "message": "rustc_serialize: specialize opaque encoding of some u8 sequences", "tree": {"sha": "2faa2c8fb7246f61ed17dfb16379a64b478f06f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2faa2c8fb7246f61ed17dfb16379a64b478f06f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "html_url": "https://github.com/rust-lang/rust/commit/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "417fe4706595db10380fe989e77db431293f3155", "url": "https://api.github.com/repos/rust-lang/rust/commits/417fe4706595db10380fe989e77db431293f3155", "html_url": "https://github.com/rust-lang/rust/commit/417fe4706595db10380fe989e77db431293f3155"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "72bd4804e98c0b81e4f5e20a6228db87f74e07a6", "filename": "compiler/rustc_macros/src/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs?ref=a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "patch": "@@ -203,7 +203,7 @@ fn encodable_body(\n                                 #field_name,\n                                 #field_idx,\n                                 |__encoder|\n-                                ::rustc_serialize::Encodable::encode(#bind_ident, __encoder),\n+                                ::rustc_serialize::Encodable::<#encoder_ty>::encode(#bind_ident, __encoder),\n                             ) {\n                                 ::std::result::Result::Ok(()) => (),\n                                 ::std::result::Result::Err(__err)\n@@ -237,7 +237,7 @@ fn encodable_body(\n                                 __encoder,\n                                 #field_idx,\n                                 |__encoder|\n-                                ::rustc_serialize::Encodable::encode(#bind_ident, __encoder),\n+                                ::rustc_serialize::Encodable::<#encoder_ty>::encode(#bind_ident, __encoder),\n                             ) {\n                                 ::std::result::Result::Ok(()) => (),\n                                 ::std::result::Result::Err(__err)"}, {"sha": "4aa4ff72eb29dc6b264b46cde4aafd6098e8caa8", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "patch": "@@ -1149,6 +1149,16 @@ where\n     }\n }\n \n+// This ensures that the `Encodable<opaque::Encoder>::encode` specialization for byte slices\n+// is used when a `CacheEncoder` having an `opaque::Encoder` is passed to `Encodable::encode`.\n+// Unfortunately, we have to manually opt into specializations this way, given how `CacheEncoder`\n+// and the encoding traits currently work.\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx, opaque::Encoder>> for [u8] {\n+    fn encode(&self, e: &mut CacheEncoder<'a, 'tcx, opaque::Encoder>) -> opaque::EncodeResult {\n+        self.encode(e.encoder)\n+    }\n+}\n+\n // An integer that will always encode to 8 bytes.\n struct IntEncodedWithFixedSize(u64);\n "}, {"sha": "57082da29f2eb6cb7b89b030652d29b31af9c2c8", "filename": "compiler/rustc_serialize/src/collection_impls.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs?ref=a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "patch": "@@ -11,12 +11,8 @@ use smallvec::{Array, SmallVec};\n \n impl<S: Encoder, A: Array<Item: Encodable<S>>> Encodable<S> for SmallVec<A> {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s))?;\n-            }\n-            Ok(())\n-        })\n+        let slice: &[A::Item] = self;\n+        slice.encode(s)\n     }\n }\n \n@@ -292,12 +288,8 @@ where\n \n impl<E: Encoder, T: Encodable<E>> Encodable<E> for Rc<[T]> {\n     fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (index, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(index, |s| e.encode(s))?;\n-            }\n-            Ok(())\n-        })\n+        let slice: &[T] = self;\n+        slice.encode(s)\n     }\n }\n \n@@ -315,12 +307,8 @@ impl<D: Decoder, T: Decodable<D>> Decodable<D> for Rc<[T]> {\n \n impl<E: Encoder, T: Encodable<E>> Encodable<E> for Arc<[T]> {\n     fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (index, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(index, |s| e.encode(s))?;\n-            }\n-            Ok(())\n-        })\n+        let slice: &[T] = self;\n+        slice.encode(s)\n     }\n }\n "}, {"sha": "0e7974afff3775d2e0fe773757e21798778c4d46", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "patch": "@@ -14,6 +14,7 @@ Core encoding and decoding interfaces.\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]\n+#![feature(min_specialization)]\n #![cfg_attr(test, feature(test))]\n #![allow(rustc::internal)]\n "}, {"sha": "a41b01f453ee39df534231ab1377b9b59507cacd", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "patch": "@@ -316,3 +316,15 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n         err.to_string()\n     }\n }\n+\n+// Specialize encoding byte slices. The default implementation for slices encodes and emits each\n+// element individually. This isn't necessary for `u8` slices encoded with an `opaque::Encoder`,\n+// because each `u8` is emitted as-is. Therefore, we can use a more efficient implementation. This\n+// specialization applies to encoding `Vec<u8>`s, etc., since they call `encode` on their slices.\n+impl serialize::Encodable<Encoder> for [u8] {\n+    fn encode(&self, e: &mut Encoder) -> EncodeResult {\n+        serialize::Encoder::emit_usize(e, self.len())?;\n+        e.emit_raw_bytes(self);\n+        Ok(())\n+    }\n+}"}, {"sha": "ee8ab0e9e40563add56005bcb1d184b086065eae", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "patch": "@@ -527,7 +527,7 @@ impl<D: Decoder, T: Decodable<D>> Decodable<D> for Rc<T> {\n }\n \n impl<S: Encoder, T: Encodable<S>> Encodable<S> for [T] {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+    default fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_seq(self.len(), |s| {\n             for (i, e) in self.iter().enumerate() {\n                 s.emit_seq_elt(i, |s| e.encode(s))?"}]}