{"sha": "1d27a508d12a7ef1688579abb3e271b7fdcd917b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMjdhNTA4ZDEyYTdlZjE2ODg1NzlhYmIzZTI3MWI3ZmRjZDkxN2I=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2020-10-05T22:48:34Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2020-10-05T22:48:34Z"}, "message": "Test with non-fused iterators", "tree": {"sha": "d444d21aad9e9583d3cd8ccca7ebf9b98e02076e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d444d21aad9e9583d3cd8ccca7ebf9b98e02076e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d27a508d12a7ef1688579abb3e271b7fdcd917b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d27a508d12a7ef1688579abb3e271b7fdcd917b", "html_url": "https://github.com/rust-lang/rust/commit/1d27a508d12a7ef1688579abb3e271b7fdcd917b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d27a508d12a7ef1688579abb3e271b7fdcd917b/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcacfe1dbf80af7ea2e70b418e2f19c03ee09121", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcacfe1dbf80af7ea2e70b418e2f19c03ee09121", "html_url": "https://github.com/rust-lang/rust/commit/bcacfe1dbf80af7ea2e70b418e2f19c03ee09121"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "75ca897cadc918c55324277a957e083b1e721889", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1d27a508d12a7ef1688579abb3e271b7fdcd917b/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d27a508d12a7ef1688579abb3e271b7fdcd917b/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=1d27a508d12a7ef1688579abb3e271b7fdcd917b", "patch": "@@ -4,6 +4,43 @@ use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;\n \n+/// An iterator wrapper that panics whenever `next` or `next_back` is called\n+/// after `None` has been returned.\n+struct Unfuse<I> {\n+    iter: I,\n+    exhausted: bool,\n+}\n+\n+fn unfuse<I: IntoIterator>(iter: I) -> Unfuse<I::IntoIter> {\n+    Unfuse { iter: iter.into_iter(), exhausted: false }\n+}\n+\n+impl<I> Iterator for Unfuse<I>\n+where\n+    I: Iterator,\n+{\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        assert!(!self.exhausted);\n+        let next = self.iter.next();\n+        self.exhausted = next.is_none();\n+        next\n+    }\n+}\n+\n+impl<I> DoubleEndedIterator for Unfuse<I>\n+where\n+    I: DoubleEndedIterator,\n+{\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        assert!(!self.exhausted);\n+        let next = self.iter.next_back();\n+        self.exhausted = next.is_none();\n+        next\n+    }\n+}\n+\n #[test]\n fn test_lt() {\n     let empty: [isize; 0] = [];\n@@ -148,14 +185,14 @@ fn test_iterator_chain_advance_by() {\n         let len = xs.len() + ys.len();\n \n         for i in 0..xs.len() {\n-            let mut iter = xs.iter().chain(ys);\n+            let mut iter = unfuse(xs).chain(unfuse(ys));\n             iter.advance_by(i).unwrap();\n             assert_eq!(iter.next(), Some(&xs[i]));\n             assert_eq!(iter.advance_by(100), Err(len - i - 1));\n         }\n \n         for i in 0..ys.len() {\n-            let mut iter = xs.iter().chain(ys);\n+            let mut iter = unfuse(xs).chain(unfuse(ys));\n             iter.advance_by(xs.len() + i).unwrap();\n             assert_eq!(iter.next(), Some(&ys[i]));\n             assert_eq!(iter.advance_by(100), Err(ys.len() - i - 1));\n@@ -181,14 +218,14 @@ fn test_iterator_chain_advance_back_by() {\n         let len = xs.len() + ys.len();\n \n         for i in 0..ys.len() {\n-            let mut iter = xs.iter().chain(ys);\n+            let mut iter = unfuse(xs).chain(unfuse(ys));\n             iter.advance_back_by(i).unwrap();\n             assert_eq!(iter.next_back(), Some(&ys[ys.len() - i - 1]));\n             assert_eq!(iter.advance_back_by(100), Err(len - i - 1));\n         }\n \n         for i in 0..xs.len() {\n-            let mut iter = xs.iter().chain(ys);\n+            let mut iter = unfuse(xs).chain(unfuse(ys));\n             iter.advance_back_by(ys.len() + i).unwrap();\n             assert_eq!(iter.next_back(), Some(&xs[xs.len() - i - 1]));\n             assert_eq!(iter.advance_back_by(100), Err(xs.len() - i - 1));"}]}