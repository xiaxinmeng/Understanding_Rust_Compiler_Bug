{"sha": "cfd720d506bee262130f86db814d840fd1ef2495", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZDcyMGQ1MDZiZWUyNjIxMzBmODZkYjgxNGQ4NDBmZDFlZjI0OTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-16T20:17:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-16T20:17:11Z"}, "message": "Auto merge of #5563 - ThibsG:MergeLints, r=flip1995\n\nMerge some lints together\n\nThis PR merges following lints:\n\n- `block_in_if_condition_expr` and `block_in_if_condition_stmt` \u2192 `blocks_in_if_conditions`\n- `option_map_unwrap_or`, `option_map_unwrap_or_else` and `result_map_unwrap_or_else` \u2192 `map_unwrap`\n- `option_unwrap_used` and `result_unwrap_used` \u2192 `unwrap_used`\n- `option_expect_used` and `result_expect_used` \u2192 `expect_used`\n- `wrong_pub_self_convention` into `wrong_self_convention`\n- `for_loop_over_option` and `for_loop_over_result` \u2192 `for_loops_over_fallibles`\n\nLints that have already been merged since the issue was created:\n- [x] `new_without_default` and `new_without_default_derive` \u2192 `new_without_default`\n\nNeed more discussion:\n- `string_add` and `string_add_assign`: do we agree to merge them or not? Is there something more to do? \u2192 **not merge finally**\n- `identity_op` and `modulo_one` \u2192 `useless_arithmetic`: seems outdated, since `modulo_arithmetic` has been created.\n\nfixes #1078\n\nchangelog: Merging some lints together:\n- `block_in_if_condition_expr` and `block_in_if_condition_stmt` \u2192 `blocks_in_if_conditions`\n- `option_map_unwrap_or`, `option_map_unwrap_or_else` and `result_map_unwrap_or_else` \u2192 `map_unwrap_or`\n- `option_unwrap_used` and `result_unwrap_used` \u2192 `unwrap_used`\n- `option_expect_used` and `result_expect_used` \u2192 `expect_used`\n- `for_loop_over_option` and `for_loop_over_result` \u2192 `for_loops_over_fallibles`", "tree": {"sha": "eae07f663a84dae744e0272f41a24f2159c213a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae07f663a84dae744e0272f41a24f2159c213a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd720d506bee262130f86db814d840fd1ef2495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd720d506bee262130f86db814d840fd1ef2495", "html_url": "https://github.com/rust-lang/rust/commit/cfd720d506bee262130f86db814d840fd1ef2495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd720d506bee262130f86db814d840fd1ef2495/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9427309ce0c647ee32cd4c88ca5902b57fb7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9427309ce0c647ee32cd4c88ca5902b57fb7ee", "html_url": "https://github.com/rust-lang/rust/commit/0c9427309ce0c647ee32cd4c88ca5902b57fb7ee"}, {"sha": "ab87f87ba03518da23ca510249aa3f5908a42368", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab87f87ba03518da23ca510249aa3f5908a42368", "html_url": "https://github.com/rust-lang/rust/commit/ab87f87ba03518da23ca510249aa3f5908a42368"}], "stats": {"total": 715, "additions": 277, "deletions": 438}, "files": [{"sha": "d05819a973a5662a65329e7a4aee296c5d5053d5", "filename": "CHANGELOG.md", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -198,7 +198,7 @@ Released 2020-03-12\n \n ### Suggestion Improvements\n \n-* [`option_map_unwrap_or`] [#4634](https://github.com/rust-lang/rust-clippy/pull/4634)\n+* `option_map_unwrap_or` [#4634](https://github.com/rust-lang/rust-clippy/pull/4634)\n * [`wildcard_enum_match_arm`] [#4934](https://github.com/rust-lang/rust-clippy/pull/4934)\n * [`cognitive_complexity`] [#4935](https://github.com/rust-lang/rust-clippy/pull/4935)\n * [`decimal_literal_representation`] [#4956](https://github.com/rust-lang/rust-clippy/pull/4956)\n@@ -282,8 +282,8 @@ Released 2019-12-19\n   * [`panic`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n   * [`unreachable`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n   * [`todo`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n-  * [`option_expect_used`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n-  * [`result_expect_used`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n+  * `option_expect_used` [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n+  * `result_expect_used` [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n * Move `redundant_clone` to perf group [#4509](https://github.com/rust-lang/rust-clippy/pull/4509)\n * Move `manual_mul_add` to nursery group [#4736](https://github.com/rust-lang/rust-clippy/pull/4736)\n * Expand `unit_cmp` to also work with `assert_eq!`, `debug_assert_eq!`, `assert_ne!` and `debug_assert_ne!` [#4613](https://github.com/rust-lang/rust-clippy/pull/4613)\n@@ -395,7 +395,7 @@ Released 2019-08-15\n * Fix false positive in [`useless_attribute`] [#4107](https://github.com/rust-lang/rust-clippy/pull/4107)\n * Fix incorrect suggestion for [`float_cmp`] [#4214](https://github.com/rust-lang/rust-clippy/pull/4214)\n * Add suggestions for [`print_with_newline`] and [`write_with_newline`] [#4136](https://github.com/rust-lang/rust-clippy/pull/4136)\n-* Improve suggestions for [`option_map_unwrap_or_else`] and [`result_map_unwrap_or_else`] [#4164](https://github.com/rust-lang/rust-clippy/pull/4164)\n+* Improve suggestions for `option_map_unwrap_or_else` and `result_map_unwrap_or_else` [#4164](https://github.com/rust-lang/rust-clippy/pull/4164)\n * Improve suggestions for [`non_ascii_literal`] [#4119](https://github.com/rust-lang/rust-clippy/pull/4119)\n * Improve diagnostics for [`let_and_return`] [#4137](https://github.com/rust-lang/rust-clippy/pull/4137)\n * Improve diagnostics for [`trivially_copy_pass_by_ref`] [#4071](https://github.com/rust-lang/rust-clippy/pull/4071)\n@@ -448,7 +448,7 @@ Released 2019-05-20\n * Fix false positive in [`needless_range_loop`] pertaining to structs without a `.iter()`\n * Fix false positive in [`bool_comparison`] pertaining to non-bool types\n * Fix false positive in [`redundant_closure`] pertaining to differences in borrows\n-* Fix false positive in [`option_map_unwrap_or`] on non-copy types\n+* Fix false positive in `option_map_unwrap_or` on non-copy types\n * Fix false positives in [`missing_const_for_fn`] pertaining to macros and trait method impls\n * Fix false positive in [`needless_pass_by_value`] pertaining to procedural macros\n * Fix false positive in [`needless_continue`] pertaining to loop labels\n@@ -794,7 +794,7 @@ Released 2018-09-13\n \n ## 0.0.169\n * Rustup to *rustc 1.23.0-nightly (3b82e4c74 2017-11-05)*\n-* New lints: [`just_underscores_and_digits`], [`result_map_unwrap_or_else`], [`transmute_bytes_to_str`]\n+* New lints: [`just_underscores_and_digits`], `result_map_unwrap_or_else`, [`transmute_bytes_to_str`]\n \n ## 0.0.168\n * Rustup to *rustc 1.23.0-nightly (f0fe716db 2017-10-30)*\n@@ -1068,7 +1068,7 @@ Released 2018-09-13\n \n ## 0.0.93 \u2014 2016-10-03\n * Rustup to *rustc 1.14.0-nightly (144af3e97 2016-10-02)*\n-* [`option_map_unwrap_or`] and [`option_map_unwrap_or_else`] are now\n+* `option_map_unwrap_or` and `option_map_unwrap_or_else` are now\n   allowed by default.\n * New lint: [`explicit_into_iter_loop`]\n \n@@ -1087,8 +1087,8 @@ Released 2018-09-13\n ## 0.0.88 \u2014 2016-09-04\n * Rustup to *rustc 1.13.0-nightly (70598e04f 2016-09-03)*\n * The following lints are not new but were only usable through the `clippy`\n-  lint groups: [`filter_next`], [`for_loop_over_option`],\n-  [`for_loop_over_result`] and [`match_overlapping_arm`]. You should now be\n+  lint groups: [`filter_next`], `for_loop_over_option`,\n+  `for_loop_over_result` and [`match_overlapping_arm`]. You should now be\n   able to `#[allow/deny]` them individually and they are available directly\n   through `cargo clippy`.\n \n@@ -1274,8 +1274,7 @@ Released 2018-09-13\n [`await_holding_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n [`blacklisted_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name\n-[`block_in_if_condition_expr`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition_expr\n-[`block_in_if_condition_stmt`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition_stmt\n+[`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n@@ -1338,6 +1337,7 @@ Released 2018-09-13\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n [`exit`]: https://rust-lang.github.io/rust-clippy/master/index.html#exit\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n+[`expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_used\n [`expl_impl_clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n [`explicit_counter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\n [`explicit_deref_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_methods\n@@ -1361,8 +1361,7 @@ Released 2018-09-13\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n-[`for_loop_over_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_option\n-[`for_loop_over_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_result\n+[`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n@@ -1431,6 +1430,7 @@ Released 2018-09-13\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n+[`map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or\n [`match_as_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_as_ref\n [`match_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_bool\n [`match_on_vec_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items\n@@ -1497,13 +1497,9 @@ Released 2018-09-13\n [`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n [`option_as_ref_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref\n [`option_env_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_env_unwrap\n-[`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n-[`option_map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or\n-[`option_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or_else\n [`option_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_option\n-[`option_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_unwrap_used\n [`or_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n@@ -1540,11 +1536,8 @@ Released 2018-09-13\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n-[`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n-[`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n-[`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n@@ -1625,6 +1618,7 @@ Released 2018-09-13\n [`unused_label`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_label\n [`unused_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_self\n [`unused_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n+[`unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n [`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug\n [`use_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_self\n [`used_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding"}, {"sha": "8fa9b05ca32972224f8595da2fa34b92c309f55e", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "renamed", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -8,43 +8,40 @@ use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `if` conditions that use blocks to contain an\n-    /// expression.\n+    /// **What it does:** Checks for `if` conditions that use blocks containing an\n+    /// expression, statements or conditions that use closures with blocks.\n     ///\n-    /// **Why is this bad?** It isn't really Rust style, same as using parentheses\n-    /// to contain expressions.\n+    /// **Why is this bad?** Style, using blocks in the condition makes it hard to read.\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// **Example:**\n+    /// **Examples:**\n     /// ```rust\n+    /// // Bad\n     /// if { true } { /* ... */ }\n+    ///\n+    /// // Good\n+    /// if true { /* ... */ }\n     /// ```\n-    pub BLOCK_IN_IF_CONDITION_EXPR,\n-    style,\n-    \"braces that can be eliminated in conditions, e.g., `if { true } ...`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `if` conditions that use blocks containing\n-    /// statements, or conditions that use closures with blocks.\n     ///\n-    /// **Why is this bad?** Using blocks in the condition makes it hard to read.\n+    /// // or\n     ///\n-    /// **Known problems:** None.\n+    /// ```rust\n+    /// # fn somefunc() -> bool { true };\n     ///\n-    /// **Example:**\n-    /// ```rust,ignore\n-    /// if { let x = somefunc(); x } {}\n-    /// // or\n-    /// if somefunc(|x| { x == 47 }) {}\n+    /// // Bad\n+    /// if { let x = somefunc(); x } { /* ... */ }\n+    ///\n+    /// // Good\n+    /// let res = { let x = somefunc(); x };\n+    /// if res { /* ... */ }\n     /// ```\n-    pub BLOCK_IN_IF_CONDITION_STMT,\n+    pub BLOCKS_IN_IF_CONDITIONS,\n     style,\n-    \"complex blocks in conditions, e.g., `if { let x = true; x } ...`\"\n+    \"useless or complex blocks that can be eliminated in conditions\"\n }\n \n-declare_lint_pass!(BlockInIfCondition => [BLOCK_IN_IF_CONDITION_EXPR, BLOCK_IN_IF_CONDITION_STMT]);\n+declare_lint_pass!(BlocksInIfConditions => [BLOCKS_IN_IF_CONDITIONS]);\n \n struct ExVisitor<'a, 'tcx> {\n     found_block: Option<&'tcx Expr<'tcx>>,\n@@ -72,9 +69,9 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n \n const BRACED_EXPR_MESSAGE: &str = \"omit braces around single expression condition\";\n const COMPLEX_BLOCK_MESSAGE: &str = \"in an `if` condition, avoid complex blocks or closures with blocks; \\\n-                                     instead, move the block or closure higher and bind it with a `let`\";\n+                                    instead, move the block or closure higher and bind it with a `let`\";\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlocksInIfConditions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n@@ -92,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                             let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg(\n                                 cx,\n-                                BLOCK_IN_IF_CONDITION_EXPR,\n+                                BLOCKS_IN_IF_CONDITIONS,\n                                 cond.span,\n                                 BRACED_EXPR_MESSAGE,\n                                 \"try\",\n@@ -118,7 +115,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         let mut applicability = Applicability::MachineApplicable;\n                         span_lint_and_sugg(\n                             cx,\n-                            BLOCK_IN_IF_CONDITION_STMT,\n+                            BLOCKS_IN_IF_CONDITIONS,\n                             expr.span.with_hi(cond.span.hi()),\n                             COMPLEX_BLOCK_MESSAGE,\n                             \"try\",\n@@ -140,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                 let mut visitor = ExVisitor { found_block: None, cx };\n                 walk_expr(&mut visitor, cond);\n                 if let Some(block) = visitor.found_block {\n-                    span_lint(cx, BLOCK_IN_IF_CONDITION_STMT, block.span, COMPLEX_BLOCK_MESSAGE);\n+                    span_lint(cx, BLOCKS_IN_IF_CONDITIONS, block.span, COMPLEX_BLOCK_MESSAGE);\n                 }\n             }\n         }", "previous_filename": "clippy_lints/src/block_in_if_condition.rs"}, {"sha": "bda0d5c045891a0dc18e8be86ffad0ed8226f645", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -180,7 +180,7 @@ mod attrs;\n mod await_holding_lock;\n mod bit_mask;\n mod blacklisted_name;\n-mod block_in_if_condition;\n+mod blocks_in_if_conditions;\n mod booleans;\n mod bytecount;\n mod cargo_common_metadata;\n@@ -507,8 +507,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &bit_mask::INEFFECTIVE_BIT_MASK,\n         &bit_mask::VERBOSE_BIT_MASK,\n         &blacklisted_name::BLACKLISTED_NAME,\n-        &block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n-        &block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n+        &blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n         &booleans::LOGIC_BUG,\n         &booleans::NONMINIMAL_BOOL,\n         &bytecount::NAIVE_BYTECOUNT,\n@@ -616,8 +615,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::EXPLICIT_INTO_ITER_LOOP,\n         &loops::EXPLICIT_ITER_LOOP,\n         &loops::FOR_KV_MAP,\n-        &loops::FOR_LOOP_OVER_OPTION,\n-        &loops::FOR_LOOP_OVER_RESULT,\n+        &loops::FOR_LOOPS_OVER_FALLIBLES,\n         &loops::ITER_NEXT_LOOP,\n         &loops::MANUAL_MEMCPY,\n         &loops::MUT_RANGE_BOUND,\n@@ -658,6 +656,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::CLONE_ON_COPY,\n         &methods::CLONE_ON_REF_PTR,\n         &methods::EXPECT_FUN_CALL,\n+        &methods::EXPECT_USED,\n         &methods::FILETYPE_IS_FILE,\n         &methods::FILTER_MAP,\n         &methods::FILTER_MAP_NEXT,\n@@ -674,20 +673,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::ITER_SKIP_NEXT,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n         &methods::MAP_FLATTEN,\n+        &methods::MAP_UNWRAP_OR,\n         &methods::NEW_RET_NO_SELF,\n         &methods::OK_EXPECT,\n         &methods::OPTION_AND_THEN_SOME,\n         &methods::OPTION_AS_REF_DEREF,\n-        &methods::OPTION_EXPECT_USED,\n         &methods::OPTION_MAP_OR_NONE,\n-        &methods::OPTION_MAP_UNWRAP_OR,\n-        &methods::OPTION_MAP_UNWRAP_OR_ELSE,\n-        &methods::OPTION_UNWRAP_USED,\n         &methods::OR_FUN_CALL,\n-        &methods::RESULT_EXPECT_USED,\n         &methods::RESULT_MAP_OR_INTO_OPTION,\n-        &methods::RESULT_MAP_UNWRAP_OR_ELSE,\n-        &methods::RESULT_UNWRAP_USED,\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n         &methods::SINGLE_CHAR_PATTERN,\n@@ -698,6 +691,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::UNINIT_ASSUMED_INIT,\n         &methods::UNNECESSARY_FILTER_MAP,\n         &methods::UNNECESSARY_FOLD,\n+        &methods::UNWRAP_USED,\n         &methods::USELESS_ASREF,\n         &methods::WRONG_PUB_SELF_CONVENTION,\n         &methods::WRONG_SELF_CONVENTION,\n@@ -900,7 +894,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box mut_reference::UnnecessaryMutPassed);\n     store.register_late_pass(|| box len_zero::LenZero);\n     store.register_late_pass(|| box attrs::Attributes);\n-    store.register_late_pass(|| box block_in_if_condition::BlockInIfCondition);\n+    store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n     store.register_late_pass(|| box unicode::Unicode);\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n@@ -1090,12 +1084,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::WILDCARD_ENUM_MATCH_ARM),\n         LintId::of(&mem_forget::MEM_FORGET),\n         LintId::of(&methods::CLONE_ON_REF_PTR),\n+        LintId::of(&methods::EXPECT_USED),\n         LintId::of(&methods::FILETYPE_IS_FILE),\n         LintId::of(&methods::GET_UNWRAP),\n-        LintId::of(&methods::OPTION_EXPECT_USED),\n-        LintId::of(&methods::OPTION_UNWRAP_USED),\n-        LintId::of(&methods::RESULT_EXPECT_USED),\n-        LintId::of(&methods::RESULT_UNWRAP_USED),\n+        LintId::of(&methods::UNWRAP_USED),\n         LintId::of(&methods::WRONG_PUB_SELF_CONVENTION),\n         LintId::of(&misc::FLOAT_CMP_CONST),\n         LintId::of(&misc_early::UNNEEDED_FIELD_PATTERN),\n@@ -1153,9 +1145,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FIND_MAP),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::MAP_FLATTEN),\n-        LintId::of(&methods::OPTION_MAP_UNWRAP_OR),\n-        LintId::of(&methods::OPTION_MAP_UNWRAP_OR_ELSE),\n-        LintId::of(&methods::RESULT_MAP_UNWRAP_OR_ELSE),\n+        LintId::of(&methods::MAP_UNWRAP_OR),\n         LintId::of(&misc::USED_UNDERSCORE_BINDING),\n         LintId::of(&misc_early::UNSEPARATED_LITERAL_SUFFIX),\n         LintId::of(&mut_mut::MUT_MUT),\n@@ -1209,8 +1199,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT),\n+        LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&booleans::LOGIC_BUG),\n         LintId::of(&booleans::NONMINIMAL_BOOL),\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n@@ -1274,8 +1263,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n-        LintId::of(&loops::FOR_LOOP_OVER_OPTION),\n-        LintId::of(&loops::FOR_LOOP_OVER_RESULT),\n+        LintId::of(&loops::FOR_LOOPS_OVER_FALLIBLES),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n@@ -1455,8 +1443,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT),\n+        LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&doc::MISSING_SAFETY_DOC),\n@@ -1650,8 +1637,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(&loops::FOR_LOOP_OVER_OPTION),\n-        LintId::of(&loops::FOR_LOOP_OVER_RESULT),\n+        LintId::of(&loops::FOR_LOOPS_OVER_FALLIBLES),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n@@ -1798,6 +1784,17 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::new_without_default_derive\", \"clippy::new_without_default\");\n     ls.register_renamed(\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\");\n     ls.register_renamed(\"clippy::const_static_lifetime\", \"clippy::redundant_static_lifetimes\");\n+    ls.register_renamed(\"clippy::block_in_if_condition_expr\", \"clippy::blocks_in_if_conditions\");\n+    ls.register_renamed(\"clippy::block_in_if_condition_stmt\", \"clippy::blocks_in_if_conditions\");\n+    ls.register_renamed(\"clippy::option_map_unwrap_or\", \"clippy::map_unwrap_or\");\n+    ls.register_renamed(\"clippy::option_map_unwrap_or_else\", \"clippy::map_unwrap_or\");\n+    ls.register_renamed(\"clippy::result_map_unwrap_or_else\", \"clippy::map_unwrap_or\");\n+    ls.register_renamed(\"clippy::option_unwrap_used\", \"clippy::unwrap_used\");\n+    ls.register_renamed(\"clippy::result_unwrap_used\", \"clippy::unwrap_used\");\n+    ls.register_renamed(\"clippy::option_expect_used\", \"clippy::expect_used\");\n+    ls.register_renamed(\"clippy::result_expect_used\", \"clippy::expect_used\");\n+    ls.register_renamed(\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\");\n+    ls.register_renamed(\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "9c9d1a84003e9c2561742a40f8cfa323266a8446", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -168,55 +168,46 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `for` loops over `Option` values.\n+    /// **What it does:** Checks for `for` loops over `Option` or `Result` values.\n     ///\n     /// **Why is this bad?** Readability. This is more clearly expressed as an `if\n     /// let`.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// for x in option {\n-    ///     ..\n+    /// ```rust\n+    /// # let opt = Some(1);\n+    ///\n+    /// // Bad\n+    /// for x in opt {\n+    ///     // ..\n     /// }\n-    /// ```\n     ///\n-    /// This should be\n-    /// ```ignore\n-    /// if let Some(x) = option {\n-    ///     ..\n+    /// // Good\n+    /// if let Some(x) = opt {\n+    ///     // ..\n     /// }\n     /// ```\n-    pub FOR_LOOP_OVER_OPTION,\n-    correctness,\n-    \"for-looping over an `Option`, which is more clearly expressed as an `if let`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `for` loops over `Result` values.\n     ///\n-    /// **Why is this bad?** Readability. This is more clearly expressed as an `if\n-    /// let`.\n+    /// // or\n     ///\n-    /// **Known problems:** None.\n+    /// ```rust\n+    /// # let res: Result<i32, std::io::Error> = Ok(1);\n     ///\n-    /// **Example:**\n-    /// ```ignore\n-    /// for x in result {\n-    ///     ..\n+    /// // Bad\n+    /// for x in &res {\n+    ///     // ..\n     /// }\n-    /// ```\n     ///\n-    /// This should be\n-    /// ```ignore\n-    /// if let Ok(x) = result {\n-    ///     ..\n+    /// // Good\n+    /// if let Ok(x) = res {\n+    ///     // ..\n     /// }\n     /// ```\n-    pub FOR_LOOP_OVER_RESULT,\n+    pub FOR_LOOPS_OVER_FALLIBLES,\n     correctness,\n-    \"for-looping over a `Result`, which is more clearly expressed as an `if let`\"\n+    \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n }\n \n declare_clippy_lint! {\n@@ -435,8 +426,7 @@ declare_lint_pass!(Loops => [\n     EXPLICIT_ITER_LOOP,\n     EXPLICIT_INTO_ITER_LOOP,\n     ITER_NEXT_LOOP,\n-    FOR_LOOP_OVER_RESULT,\n-    FOR_LOOP_OVER_OPTION,\n+    FOR_LOOPS_OVER_FALLIBLES,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n     EXPLICIT_COUNTER_LOOP,\n@@ -1283,7 +1273,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n                     ITER_NEXT_LOOP,\n                     expr.span,\n                     \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n-                     probably not what you want\",\n+                    probably not what you want\",\n                 );\n                 next_loop_linted = true;\n             }\n@@ -1300,11 +1290,11 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     if is_type_diagnostic_item(cx, ty, sym!(option_type)) {\n         span_lint_and_help(\n             cx,\n-            FOR_LOOP_OVER_OPTION,\n+            FOR_LOOPS_OVER_FALLIBLES,\n             arg.span,\n             &format!(\n                 \"for loop over `{0}`, which is an `Option`. This is more readably written as an \\\n-                 `if let` statement.\",\n+                `if let` statement.\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n             None,\n@@ -1317,11 +1307,11 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     } else if is_type_diagnostic_item(cx, ty, sym!(result_type)) {\n         span_lint_and_help(\n             cx,\n-            FOR_LOOP_OVER_RESULT,\n+            FOR_LOOPS_OVER_FALLIBLES,\n             arg.span,\n             &format!(\n                 \"for loop over `{0}`, which is a `Result`. This is more readably written as an \\\n-                 `if let` statement.\",\n+                `if let` statement.\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n             None,"}, {"sha": "e6094edc5d704c17958e904538c4fc1feb14bb15", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 76, "deletions": 147, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -33,40 +33,15 @@ use crate::utils::{\n };\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `.unwrap()` calls on `Option`s.\n+    /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n     ///\n-    /// **Why is this bad?** Usually it is better to handle the `None` case, or to\n-    /// at least call `.expect(_)` with a more helpful message. Still, for a lot of\n+    /// **Why is this bad?** It is better to handle the `None` or `Err` case,\n+    /// or at least call `.expect(_)` with a more helpful message. Still, for a lot of\n     /// quick-and-dirty code, `unwrap` is a good choice, which is why this lint is\n     /// `Allow` by default.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n-    /// Using unwrap on an `Option`:\n-    ///\n-    /// ```rust\n-    /// let opt = Some(1);\n-    /// opt.unwrap();\n-    /// ```\n-    ///\n-    /// Better:\n-    ///\n-    /// ```rust\n-    /// let opt = Some(1);\n-    /// opt.expect(\"more helpful message\");\n-    /// ```\n-    pub OPTION_UNWRAP_USED,\n-    restriction,\n-    \"using `Option.unwrap()`, which should at least get a better message using `expect()`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `.unwrap()` calls on `Result`s.\n-    ///\n-    /// **Why is this bad?** `result.unwrap()` will let the thread panic on `Err`\n-    /// values. Normally, you want to implement more sophisticated error handling,\n+    /// `result.unwrap()` will let the thread panic on `Err` values.\n+    /// Normally, you want to implement more sophisticated error handling,\n     /// and propagate errors upwards with `?` operator.\n     ///\n     /// Even if you want to panic on errors, not all `Error`s implement good\n@@ -75,81 +50,73 @@ declare_clippy_lint! {\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// **Example:**\n-    /// Using unwrap on an `Result`:\n-    ///\n+    /// **Examples:**\n     /// ```rust\n-    /// let res: Result<usize, ()> = Ok(1);\n-    /// res.unwrap();\n+    /// # let opt = Some(1);\n+    ///\n+    /// // Bad\n+    /// opt.unwrap();\n+    ///\n+    /// // Good\n+    /// opt.expect(\"more helpful message\");\n     /// ```\n     ///\n-    /// Better:\n+    /// // or\n     ///\n     /// ```rust\n-    /// let res: Result<usize, ()> = Ok(1);\n+    /// # let res: Result<usize, ()> = Ok(1);\n+    ///\n+    /// // Bad\n+    /// res.unwrap();\n+    ///\n+    /// // Good\n     /// res.expect(\"more helpful message\");\n     /// ```\n-    pub RESULT_UNWRAP_USED,\n+    pub UNWRAP_USED,\n     restriction,\n-    \"using `Result.unwrap()`, which might be better handled\"\n+    \"using `.unwrap()` on `Result` or `Option`, which should at least get a better message using `expect()`\"\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `.expect()` calls on `Option`s.\n+    /// **What it does:** Checks for `.expect()` calls on `Option`s and `Result`s.\n     ///\n-    /// **Why is this bad?** Usually it is better to handle the `None` case. Still,\n-    ///  for a lot of quick-and-dirty code, `expect` is a good choice, which is why\n-    ///  this lint is `Allow` by default.\n+    /// **Why is this bad?** Usually it is better to handle the `None` or `Err` case.\n+    /// Still, for a lot of quick-and-dirty code, `expect` is a good choice, which is why\n+    /// this lint is `Allow` by default.\n     ///\n-    /// **Known problems:** None.\n+    /// `result.expect()` will let the thread panic on `Err`\n+    /// values. Normally, you want to implement more sophisticated error handling,\n+    /// and propagate errors upwards with `?` operator.\n     ///\n-    /// **Example:**\n+    /// **Known problems:** None.\n     ///\n-    /// Using expect on an `Option`:\n+    /// **Examples:**\n+    /// ```rust,ignore\n+    /// # let opt = Some(1);\n     ///\n-    /// ```rust\n-    /// let opt = Some(1);\n+    /// // Bad\n     /// opt.expect(\"one\");\n-    /// ```\n     ///\n-    /// Better:\n-    ///\n-    /// ```rust,ignore\n+    /// // Good\n     /// let opt = Some(1);\n     /// opt?;\n     /// ```\n-    pub OPTION_EXPECT_USED,\n-    restriction,\n-    \"using `Option.expect()`, which might be better handled\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `.expect()` calls on `Result`s.\n-    ///\n-    /// **Why is this bad?** `result.expect()` will let the thread panic on `Err`\n-    /// values. Normally, you want to implement more sophisticated error handling,\n-    /// and propagate errors upwards with `?` operator.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// Using expect on an `Result`:\n+    /// // or\n     ///\n     /// ```rust\n-    /// let res: Result<usize, ()> = Ok(1);\n-    /// res.expect(\"one\");\n-    /// ```\n+    /// # let res: Result<usize, ()> = Ok(1);\n     ///\n-    /// Better:\n+    /// // Bad\n+    /// res.expect(\"one\");\n     ///\n-    /// ```rust\n-    /// let res: Result<usize, ()> = Ok(1);\n+    /// // Good\n     /// res?;\n     /// # Ok::<(), ()>(())\n     /// ```\n-    pub RESULT_EXPECT_USED,\n+    pub EXPECT_USED,\n     restriction,\n-    \"using `Result.expect()`, which might be better handled\"\n+    \"using `.expect()` on `Result` or `Option`, which might be better handled\"\n }\n \n declare_clippy_lint! {\n@@ -257,59 +224,40 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map(_).unwrap_or(_)`.\n+    /// **What it does:** Checks for usage of `option.map(_).unwrap_or(_)` or `option.map(_).unwrap_or_else(_)` or\n+    /// `result.map(_).unwrap_or_else(_)`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.map_or(_, _)`.\n+    /// **Why is this bad?** Readability, these can be written more concisely (resp.) as\n+    /// `option.map_or(_, _)`, `option.map_or_else(_, _)` and `result.map_or_else(_, _)`.\n     ///\n     /// **Known problems:** The order of the arguments is not in execution order\n     ///\n-    /// **Example:**\n+    /// **Examples:**\n     /// ```rust\n     /// # let x = Some(1);\n-    /// x.map(|a| a + 1).unwrap_or(0);\n-    /// ```\n-    pub OPTION_MAP_UNWRAP_OR,\n-    pedantic,\n-    \"using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map(_).unwrap_or_else(_)`.\n-    ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.map_or_else(_, _)`.\n     ///\n-    /// **Known problems:** The order of the arguments is not in execution order.\n+    /// // Bad\n+    /// x.map(|a| a + 1).unwrap_or(0);\n     ///\n-    /// **Example:**\n-    /// ```rust\n-    /// # let x = Some(1);\n-    /// # fn some_function() -> usize { 1 }\n-    /// x.map(|a| a + 1).unwrap_or_else(some_function);\n+    /// // Good\n+    /// x.map_or(0, |a| a + 1);\n     /// ```\n-    pub OPTION_MAP_UNWRAP_OR_ELSE,\n-    pedantic,\n-    \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `result.map(_).unwrap_or_else(_)`.\n-    ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `result.map_or_else(_, _)`.\n     ///\n-    /// **Known problems:** None.\n+    /// // or\n     ///\n-    /// **Example:**\n     /// ```rust\n     /// # let x: Result<usize, ()> = Ok(1);\n     /// # fn some_function(foo: ()) -> usize { 1 }\n+    ///\n+    /// // Bad\n     /// x.map(|a| a + 1).unwrap_or_else(some_function);\n+    ///\n+    /// // Good\n+    /// x.map_or_else(some_function, |a| a + 1);\n     /// ```\n-    pub RESULT_MAP_UNWRAP_OR_ELSE,\n+    pub MAP_UNWRAP_OR,\n     pedantic,\n-    \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.map_or_else(g, f)`\"\n+    \"using `.map(f).unwrap_or(a)` or `.map(f).unwrap_or_else(func)`, which are more succinctly expressed as `map_or(a, f)` or `map_or_else(a, f)`\"\n }\n \n declare_clippy_lint! {\n@@ -1286,17 +1234,13 @@ declare_clippy_lint! {\n }\n \n declare_lint_pass!(Methods => [\n-    OPTION_UNWRAP_USED,\n-    RESULT_UNWRAP_USED,\n-    OPTION_EXPECT_USED,\n-    RESULT_EXPECT_USED,\n+    UNWRAP_USED,\n+    EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n     WRONG_SELF_CONVENTION,\n     WRONG_PUB_SELF_CONVENTION,\n     OK_EXPECT,\n-    OPTION_MAP_UNWRAP_OR,\n-    OPTION_MAP_UNWRAP_OR_ELSE,\n-    RESULT_MAP_UNWRAP_OR_ELSE,\n+    MAP_UNWRAP_OR,\n     RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n     OPTION_AND_THEN_SOME,\n@@ -1503,9 +1447,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                             cx,\n                             lint,\n                             first_arg.pat.span,\n-                            &format!(\n-                               \"methods called `{}` usually take {}; consider choosing a less \\\n-                                 ambiguous name\",\n+                            &format!(\"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n                                 conv,\n                                 &self_kinds\n                                     .iter()\n@@ -1678,7 +1620,7 @@ fn lint_or_fun_call<'a, 'tcx>(\n             let self_ty = cx.tables.expr_ty(self_expr);\n \n             if let Some(&(_, fn_has_arguments, poss, suffix)) =\n-                   know_types.iter().find(|&&i| match_type(cx, self_ty, i.0));\n+                know_types.iter().find(|&&i| match_type(cx, self_ty, i.0));\n \n             if poss.contains(&name);\n \n@@ -1931,7 +1873,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n                 CLONE_DOUBLE_REF,\n                 expr.span,\n                 \"using `clone` on a double-reference; \\\n-                 this will copy the reference instead of cloning the inner type\",\n+                this will copy the reference instead of cloning the inner type\",\n                 |diag| {\n                     if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n                         let mut ty = innermost;\n@@ -2121,7 +2063,7 @@ fn lint_iter_cloned_collect<'a, 'tcx>(\n                 ITER_CLONED_COLLECT,\n                 to_replace,\n                 \"called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n-                 more readable\",\n+                more readable\",\n                 \"try\",\n                 \".to_vec()\".to_string(),\n                 Applicability::MachineApplicable,\n@@ -2420,9 +2362,9 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n     let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&unwrap_args[0]));\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n-        Some((OPTION_UNWRAP_USED, \"an Option\", \"None\"))\n+        Some((UNWRAP_USED, \"an Option\", \"None\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym!(result_type)) {\n-        Some((RESULT_UNWRAP_USED, \"a Result\", \"Err\"))\n+        Some((UNWRAP_USED, \"a Result\", \"Err\"))\n     } else {\n         None\n     };\n@@ -2436,7 +2378,7 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n             None,\n             &format!(\n                 \"if you don't want to handle the `{}` case gracefully, consider \\\n-                 using `expect()` to provide a better panic message\",\n+                using `expect()` to provide a better panic message\",\n                 none_value,\n             ),\n         );\n@@ -2448,9 +2390,9 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n     let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&expect_args[0]));\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n-        Some((OPTION_EXPECT_USED, \"an Option\", \"None\"))\n+        Some((EXPECT_USED, \"an Option\", \"None\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym!(result_type)) {\n-        Some((RESULT_EXPECT_USED, \"a Result\", \"Err\"))\n+        Some((EXPECT_USED, \"a Result\", \"Err\"))\n     } else {\n         None\n     };\n@@ -2494,7 +2436,7 @@ fn lint_map_flatten<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<\n     // lint if caller of `.map().flatten()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `map(..).flatten()` on an `Iterator`. \\\n-                   This is more succinctly expressed by calling `.flat_map(..)`\";\n+                    This is more succinctly expressed by calling `.flat_map(..)`\";\n         let self_snippet = snippet(cx, map_args[0].span, \"..\");\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n         let hint = format!(\"{0}.flat_map({1})\", self_snippet, func_snippet);\n@@ -2555,10 +2497,10 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n         // lint message\n         let msg = if is_option {\n             \"called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling \\\n-             `map_or_else(g, f)` instead\"\n+            `map_or_else(g, f)` instead\"\n         } else {\n             \"called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling \\\n-             `.map_or_else(g, f)` instead\"\n+            `.map_or_else(g, f)` instead\"\n         };\n         // get snippets for args to map() and unwrap_or_else()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n@@ -2570,11 +2512,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n         if same_span && !multiline {\n             span_lint_and_note(\n                 cx,\n-                if is_option {\n-                    OPTION_MAP_UNWRAP_OR_ELSE\n-                } else {\n-                    RESULT_MAP_UNWRAP_OR_ELSE\n-                },\n+                MAP_UNWRAP_OR,\n                 expr.span,\n                 msg,\n                 None,\n@@ -2584,16 +2522,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n                 ),\n             );\n         } else if same_span && multiline {\n-            span_lint(\n-                cx,\n-                if is_option {\n-                    OPTION_MAP_UNWRAP_OR_ELSE\n-                } else {\n-                    RESULT_MAP_UNWRAP_OR_ELSE\n-                },\n-                expr.span,\n-                msg,\n-            );\n+            span_lint(cx, MAP_UNWRAP_OR, expr.span, msg);\n         };\n     }\n }"}, {"sha": "20c60ef33189dc45f41ffa9f421b369a2648af00", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::hir::map::Map;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n \n-use super::OPTION_MAP_UNWRAP_OR;\n+use super::MAP_UNWRAP_OR;\n \n /// lint use of `map().unwrap_or()` for `Option`s\n pub(super) fn lint<'a, 'tcx>(\n@@ -62,11 +62,11 @@ pub(super) fn lint<'a, 'tcx>(\n         };\n         let msg = &format!(\n             \"called `map(f).unwrap_or({})` on an `Option` value. \\\n-             This can be done more directly by calling `{}` instead\",\n+            This can be done more directly by calling `{}` instead\",\n             arg, suggest\n         );\n \n-        span_lint_and_then(cx, OPTION_MAP_UNWRAP_OR, expr.span, msg, |diag| {\n+        span_lint_and_then(cx, MAP_UNWRAP_OR, expr.span, msg, |diag| {\n             let map_arg_span = map_args[1].span;\n \n             let mut suggestion = vec!["}, {"sha": "e5e3bf453a08ac46ca510dc2f8c79b702350608a", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 26, "deletions": 68, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -74,18 +74,11 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"blacklisted_name\",\n     },\n     Lint {\n-        name: \"block_in_if_condition_expr\",\n+        name: \"blocks_in_if_conditions\",\n         group: \"style\",\n-        desc: \"braces that can be eliminated in conditions, e.g., `if { true } ...`\",\n+        desc: \"useless or complex blocks that can be eliminated in conditions\",\n         deprecation: None,\n-        module: \"block_in_if_condition\",\n-    },\n-    Lint {\n-        name: \"block_in_if_condition_stmt\",\n-        group: \"style\",\n-        desc: \"complex blocks in conditions, e.g., `if { let x = true; x } ...`\",\n-        deprecation: None,\n-        module: \"block_in_if_condition\",\n+        module: \"blocks_in_if_conditions\",\n     },\n     Lint {\n         name: \"bool_comparison\",\n@@ -521,6 +514,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"expect_used\",\n+        group: \"restriction\",\n+        desc: \"using `.expect()` on `Result` or `Option`, which might be better handled\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"expl_impl_clone_on_copy\",\n         group: \"pedantic\",\n@@ -676,16 +676,9 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"loops\",\n     },\n     Lint {\n-        name: \"for_loop_over_option\",\n+        name: \"for_loops_over_fallibles\",\n         group: \"correctness\",\n-        desc: \"for-looping over an `Option`, which is more clearly expressed as an `if let`\",\n-        deprecation: None,\n-        module: \"loops\",\n-    },\n-    Lint {\n-        name: \"for_loop_over_result\",\n-        group: \"correctness\",\n-        desc: \"for-looping over a `Result`, which is more clearly expressed as an `if let`\",\n+        desc: \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\",\n         deprecation: None,\n         module: \"loops\",\n     },\n@@ -1144,6 +1137,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"map_unwrap_or\",\n+        group: \"pedantic\",\n+        desc: \"using `.map(f).unwrap_or(a)` or `.map(f).unwrap_or_else(func)`, which are more succinctly expressed as `map_or(a, f)` or `map_or_else(a, f)`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"match_as_ref\",\n         group: \"complexity\",\n@@ -1599,13 +1599,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"option_env_unwrap\",\n     },\n-    Lint {\n-        name: \"option_expect_used\",\n-        group: \"restriction\",\n-        desc: \"using `Option.expect()`, which might be better handled\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"option_map_or_none\",\n         group: \"style\",\n@@ -1620,34 +1613,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n-    Lint {\n-        name: \"option_map_unwrap_or\",\n-        group: \"pedantic\",\n-        desc: \"using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n-    Lint {\n-        name: \"option_map_unwrap_or_else\",\n-        group: \"pedantic\",\n-        desc: \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"option_option\",\n         group: \"pedantic\",\n         desc: \"usage of `Option<Option<T>>`\",\n         deprecation: None,\n         module: \"types\",\n     },\n-    Lint {\n-        name: \"option_unwrap_used\",\n-        group: \"restriction\",\n-        desc: \"using `Option.unwrap()`, which should at least get a better message using `expect()`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"or_fun_call\",\n         group: \"perf\",\n@@ -1886,13 +1858,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"matches\",\n     },\n-    Lint {\n-        name: \"result_expect_used\",\n-        group: \"restriction\",\n-        desc: \"using `Result.expect()`, which might be better handled\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"result_map_or_into_option\",\n         group: \"style\",\n@@ -1907,20 +1872,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n-    Lint {\n-        name: \"result_map_unwrap_or_else\",\n-        group: \"pedantic\",\n-        desc: \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.map_or_else(g, f)`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n-    Lint {\n-        name: \"result_unwrap_used\",\n-        group: \"restriction\",\n-        desc: \"using `Result.unwrap()`, which might be better handled\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"reversed_empty_ranges\",\n         group: \"correctness\",\n@@ -2425,6 +2376,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"returns\",\n     },\n+    Lint {\n+        name: \"unwrap_used\",\n+        group: \"restriction\",\n+        desc: \"using `.unwrap()` on `Result` or `Option`, which should at least get a better message using `expect()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"use_debug\",\n         group: \"restriction\","}, {"sha": "9040552cefc42ac07b9e1f7aaeb3684fc84247ce", "filename": "tests/ui/blocks_in_if_conditions.fixed", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.fixed?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n-#![warn(clippy::block_in_if_condition_expr)]\n-#![warn(clippy::block_in_if_condition_stmt)]\n+#![warn(clippy::blocks_in_if_conditions)]\n #![allow(unused, clippy::let_and_return)]\n #![warn(clippy::nonminimal_bool)]\n ", "previous_filename": "tests/ui/block_in_if_condition.fixed"}, {"sha": "2fe409b22d31fc6ce8b5a4e354e7f6cd8883e5d1", "filename": "tests/ui/blocks_in_if_conditions.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n-#![warn(clippy::block_in_if_condition_expr)]\n-#![warn(clippy::block_in_if_condition_stmt)]\n+#![warn(clippy::blocks_in_if_conditions)]\n #![allow(unused, clippy::let_and_return)]\n #![warn(clippy::nonminimal_bool)]\n ", "previous_filename": "tests/ui/block_in_if_condition.rs"}, {"sha": "9bdddc8e15248bb3a6a53c37875c37bb7d9a4321", "filename": "tests/ui/blocks_in_if_conditions.stderr", "status": "renamed", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.stderr?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,13 +1,13 @@\n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition.rs:27:5\n+  --> $DIR/blocks_in_if_conditions.rs:26:5\n    |\n LL | /     if {\n LL | |         let x = 3;\n LL | |         x == 3\n LL | |     } {\n    | |_____^\n    |\n-   = note: `-D clippy::block-in-if-condition-stmt` implied by `-D warnings`\n+   = note: `-D clippy::blocks-in-if-conditions` implied by `-D warnings`\n help: try\n    |\n LL |     let res = {\n@@ -17,15 +17,13 @@ LL |     }; if res {\n    |\n \n error: omit braces around single expression condition\n-  --> $DIR/block_in_if_condition.rs:38:8\n+  --> $DIR/blocks_in_if_conditions.rs:37:8\n    |\n LL |     if { true } {\n    |        ^^^^^^^^ help: try: `true`\n-   |\n-   = note: `-D clippy::block-in-if-condition-expr` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n-  --> $DIR/block_in_if_condition.rs:47:8\n+  --> $DIR/blocks_in_if_conditions.rs:46:8\n    |\n LL |     if true && x == 3 {\n    |        ^^^^^^^^^^^^^^ help: try: `x == 3`", "previous_filename": "tests/ui/block_in_if_condition.stderr"}, {"sha": "acbabfa20d737495708db8f9cc1380a24e9349c5", "filename": "tests/ui/blocks_in_if_conditions_closure.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions_closure.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,5 +1,4 @@\n-#![warn(clippy::block_in_if_condition_expr)]\n-#![warn(clippy::block_in_if_condition_stmt)]\n+#![warn(clippy::blocks_in_if_conditions)]\n #![allow(unused, clippy::let_and_return)]\n \n fn predicate<F: FnOnce(T) -> bool, T>(pfn: F, val: T) -> bool {\n@@ -10,7 +9,7 @@ fn pred_test() {\n     let v = 3;\n     let sky = \"blue\";\n     // This is a sneaky case, where the block isn't directly in the condition,\n-    // but is actually nside a closure that the condition is using.\n+    // but is actually inside a closure that the condition is using.\n     // The same principle applies -- add some extra expressions to make sure\n     // linter isn't confused by them.\n     if v == 3", "previous_filename": "tests/ui/block_in_if_condition_closure.rs"}, {"sha": "941d604dd5f9118fcf8ea93d2a2ad0e7f1bce0a5", "filename": "tests/ui/blocks_in_if_conditions_closure.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fblocks_in_if_conditions_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions_closure.stderr?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,5 +1,5 @@\n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition_closure.rs:19:17\n+  --> $DIR/blocks_in_if_conditions_closure.rs:18:17\n    |\n LL |               |x| {\n    |  _________________^\n@@ -8,10 +8,10 @@ LL | |                 x == target\n LL | |             },\n    | |_____________^\n    |\n-   = note: `-D clippy::block-in-if-condition-stmt` implied by `-D warnings`\n+   = note: `-D clippy::blocks-in-if-conditions` implied by `-D warnings`\n \n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition_closure.rs:28:13\n+  --> $DIR/blocks_in_if_conditions_closure.rs:27:13\n    |\n LL |           |x| {\n    |  _____________^", "previous_filename": "tests/ui/block_in_if_condition_closure.stderr"}, {"sha": "1073acf6f0cd66b51c33588bfa7296e1a9364a57", "filename": "tests/ui/expect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::option_expect_used, clippy::result_expect_used)]\n+#![warn(clippy::expect_used)]\n \n fn expect_option() {\n     let opt = Some(0);"}, {"sha": "9d3fc7df15cc7a9de6f73efca2de52e3f4a93a3c", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -4,7 +4,7 @@ error: used `expect()` on `an Option` value\n LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::option-expect-used` implied by `-D warnings`\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n    = help: if this value is an `None`, it will panic\n \n error: used `expect()` on `a Result` value\n@@ -13,7 +13,6 @@ error: used `expect()` on `a Result` value\n LL |     let _ = res.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::result-expect-used` implied by `-D warnings`\n    = help: if this value is an `Err`, it will panic\n \n error: aborting due to 2 previous errors"}, {"sha": "1b9dde87cd5a2ab05460badc2374fc5d947449cf", "filename": "tests/ui/for_loops_over_fallibles.rs", "status": "renamed", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,18 +1,16 @@\n-#![warn(clippy::for_loop_over_option, clippy::for_loop_over_result)]\n+#![warn(clippy::for_loops_over_fallibles)]\n \n-/// Tests for_loop_over_result and for_loop_over_option\n-\n-fn for_loop_over_option_and_result() {\n+fn for_loops_over_fallibles() {\n     let option = Some(1);\n     let result = option.ok_or(\"x not found\");\n     let v = vec![0, 1, 2];\n \n-    // check FOR_LOOP_OVER_OPTION lint\n+    // check over an `Option`\n     for x in option {\n         println!(\"{}\", x);\n     }\n \n-    // check FOR_LOOP_OVER_RESULT lint\n+    // check over a `Result`\n     for x in result {\n         println!(\"{}\", x);\n     }", "previous_filename": "tests/ui/for_loop_over_option_result.rs"}, {"sha": "bef228d4b93afbcaaff12e6cab7537ca068af694", "filename": "tests/ui/for_loops_over_fallibles.stderr", "status": "renamed", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.stderr?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,55 +1,54 @@\n error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:11:14\n+  --> $DIR/for_loops_over_fallibles.rs:9:14\n    |\n LL |     for x in option {\n    |              ^^^^^^\n    |\n-   = note: `-D clippy::for-loop-over-option` implied by `-D warnings`\n+   = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n    = help: consider replacing `for x in option` with `if let Some(x) = option`\n \n error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:16:14\n+  --> $DIR/for_loops_over_fallibles.rs:14:14\n    |\n LL |     for x in result {\n    |              ^^^^^^\n    |\n-   = note: `-D clippy::for-loop-over-result` implied by `-D warnings`\n    = help: consider replacing `for x in result` with `if let Ok(x) = result`\n \n error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:20:14\n+  --> $DIR/for_loops_over_fallibles.rs:18:14\n    |\n LL |     for x in option.ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop_over_option_result.rs:26:14\n+  --> $DIR/for_loops_over_fallibles.rs:24:14\n    |\n LL |     for x in v.iter().next() {\n    |              ^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::iter_next_loop)]` on by default\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:31:14\n+  --> $DIR/for_loops_over_fallibles.rs:29:14\n    |\n LL |     for x in v.iter().next().and(Some(0)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n \n error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_option_result.rs:35:14\n+  --> $DIR/for_loops_over_fallibles.rs:33:14\n    |\n LL |     for x in v.iter().next().ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n \n error: this loop never actually loops\n-  --> $DIR/for_loop_over_option_result.rs:47:5\n+  --> $DIR/for_loops_over_fallibles.rs:45:5\n    |\n LL | /     while let Some(x) = option {\n LL | |         println!(\"{}\", x);\n@@ -60,7 +59,7 @@ LL | |     }\n    = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n-  --> $DIR/for_loop_over_option_result.rs:53:5\n+  --> $DIR/for_loops_over_fallibles.rs:51:5\n    |\n LL | /     while let Ok(x) = result {\n LL | |         println!(\"{}\", x);", "previous_filename": "tests/ui/for_loop_over_option_result.stderr"}, {"sha": "585944032e70d73bf6d144d580169b39ebbd1ea1", "filename": "tests/ui/map_unwrap_or.rs", "status": "renamed", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,21 +1,18 @@\n // FIXME: Add \"run-rustfix\" once it's supported for multipart suggestions\n // aux-build:option_helpers.rs\n \n-#![warn(clippy::option_map_unwrap_or, clippy::option_map_unwrap_or_else)]\n+#![warn(clippy::map_unwrap_or)]\n \n #[macro_use]\n extern crate option_helpers;\n \n use std::collections::HashMap;\n \n-/// Checks implementation of the following lints:\n-/// * `OPTION_MAP_UNWRAP_OR`\n-/// * `OPTION_MAP_UNWRAP_OR_ELSE`\n #[rustfmt::skip]\n fn option_methods() {\n     let opt = Some(1);\n \n-    // Check `OPTION_MAP_UNWRAP_OR`.\n+    // Check for `option.map(_).unwrap_or(_)` use.\n     // Single line case.\n     let _ = opt.map(|x| x + 1)\n         // Should lint even though this call is on a separate line.\n@@ -49,7 +46,7 @@ fn option_methods() {\n     let id: String = \"identifier\".to_string();\n     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n \n-    // Check OPTION_MAP_UNWRAP_OR_ELSE\n+    // Check for `option.map(_).unwrap_or_else(_)` use.\n     // single line case\n     let _ = opt.map(|x| x + 1)\n         // Should lint even though this call is on a separate line.\n@@ -83,6 +80,20 @@ fn option_methods() {\n     }\n }\n \n+fn result_methods() {\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    // Check for `result.map(_).unwrap_or_else(_)` use.\n+    // single line case\n+    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+                                                      // multi line cases\n+    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+    // macro case\n+    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|e| 0); // should not lint\n+}\n+\n fn main() {\n     option_methods();\n+    result_methods();\n }", "previous_filename": "tests/ui/option_map_unwrap_or.rs"}, {"sha": "b62080a073f352dc0760d2b63318ecc27cf86b9a", "filename": "tests/ui/map_unwrap_or.stderr", "status": "renamed", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,20 +1,20 @@\n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:20:13\n+  --> $DIR/map_unwrap_or.rs:17:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n LL | |         // Should lint even though this call is on a separate line.\n LL | |         .unwrap_or(0);\n    | |_____________________^\n    |\n-   = note: `-D clippy::option-map-unwrap-or` implied by `-D warnings`\n+   = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n help: use `map_or(a, f)` instead\n    |\n LL |     let _ = opt.map_or(0, |x| x + 1);\n    |                 ^^^^^^ ^^          --\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:24:13\n+  --> $DIR/map_unwrap_or.rs:21:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -32,7 +32,7 @@ LL |     );\n    |\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:28:13\n+  --> $DIR/map_unwrap_or.rs:25:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -49,7 +49,7 @@ LL |         }, |x| x + 1);\n    |\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:33:13\n+  --> $DIR/map_unwrap_or.rs:30:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     let _ = opt.and_then(|x| Some(x + 1));\n    |                 ^^^^^^^^                --\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:35:13\n+  --> $DIR/map_unwrap_or.rs:32:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -78,7 +78,7 @@ LL |     );\n    |\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:39:13\n+  --> $DIR/map_unwrap_or.rs:36:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -92,7 +92,7 @@ LL |         .and_then(|x| Some(x + 1));\n    |          ^^^^^^^^                --\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:50:13\n+  --> $DIR/map_unwrap_or.rs:47:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -103,19 +103,18 @@ LL |     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |                            ^^^^^^ ^^^                      --\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:54:13\n+  --> $DIR/map_unwrap_or.rs:51:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n LL | |         // Should lint even though this call is on a separate line.\n LL | |         .unwrap_or_else(|| 0);\n    | |_____________________________^\n    |\n-   = note: `-D clippy::option-map-unwrap-or-else` implied by `-D warnings`\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:58:13\n+  --> $DIR/map_unwrap_or.rs:55:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -125,7 +124,7 @@ LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:62:13\n+  --> $DIR/map_unwrap_or.rs:59:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -134,5 +133,29 @@ LL | |             0\n LL | |         );\n    | |_________^\n \n-error: aborting due to 10 previous errors\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+  --> $DIR/map_unwrap_or.rs:88:13\n+   |\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+  --> $DIR/map_unwrap_or.rs:90:13\n+   |\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+  --> $DIR/map_unwrap_or.rs:91:13\n+   |\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+\n+error: aborting due to 13 previous errors\n ", "previous_filename": "tests/ui/option_map_unwrap_or.stderr"}, {"sha": "40751bfebe6c926e602eafbae9e9662aefdf32d2", "filename": "tests/ui/result_map_unwrap_or_else.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0c9427309ce0c647ee32cd4c88ca5902b57fb7ee/tests%2Fui%2Fresult_map_unwrap_or_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9427309ce0c647ee32cd4c88ca5902b57fb7ee/tests%2Fui%2Fresult_map_unwrap_or_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unwrap_or_else.rs?ref=0c9427309ce0c647ee32cd4c88ca5902b57fb7ee", "patch": "@@ -1,23 +0,0 @@\n-// aux-build:option_helpers.rs\n-\n-//! Checks implementation of `RESULT_MAP_UNWRAP_OR_ELSE`\n-\n-#![warn(clippy::result_map_unwrap_or_else)]\n-\n-#[macro_use]\n-extern crate option_helpers;\n-\n-fn result_methods() {\n-    let res: Result<i32, ()> = Ok(1);\n-\n-    // Check RESULT_MAP_UNWRAP_OR_ELSE\n-    // single line case\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n-                                                      // multi line cases\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-    // macro case\n-    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|e| 0); // should not lint\n-}\n-\n-fn main() {}"}, {"sha": "ec7bc8f12414f05258c2e0feb2336cd289c3e5f6", "filename": "tests/ui/result_map_unwrap_or_else.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0c9427309ce0c647ee32cd4c88ca5902b57fb7ee/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c9427309ce0c647ee32cd4c88ca5902b57fb7ee/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unwrap_or_else.stderr?ref=0c9427309ce0c647ee32cd4c88ca5902b57fb7ee", "patch": "@@ -1,27 +0,0 @@\n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:15:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::result-map-unwrap-or-else` implied by `-D warnings`\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n-\n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:17:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n-\n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:18:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "a4a3cd1d37977d3dcb16181db4ad8c20a54ffaab", "filename": "tests/ui/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.rs?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::option_unwrap_used, clippy::result_unwrap_used)]\n+#![warn(clippy::unwrap_used)]\n \n fn unwrap_option() {\n     let opt = Some(0);"}, {"sha": "4f0858005f6e7f140cd0c69bcea3c9111e82b673", "filename": "tests/ui/unwrap.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd720d506bee262130f86db814d840fd1ef2495/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=cfd720d506bee262130f86db814d840fd1ef2495", "patch": "@@ -4,7 +4,7 @@ error: used `unwrap()` on `an Option` value\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: used `unwrap()` on `a Result` value\n@@ -13,7 +13,6 @@ error: used `unwrap()` on `a Result` value\n LL |     let _ = res.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::result-unwrap-used` implied by `-D warnings`\n    = help: if you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message\n \n error: aborting due to 2 previous errors"}]}