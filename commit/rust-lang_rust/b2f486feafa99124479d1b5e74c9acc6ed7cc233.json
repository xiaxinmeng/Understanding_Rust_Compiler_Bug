{"sha": "b2f486feafa99124479d1b5e74c9acc6ed7cc233", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZjQ4NmZlYWZhOTkxMjQ0NzlkMWI1ZTc0YzlhY2M2ZWQ3Y2MyMzM=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-13T02:47:25Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-13T04:35:27Z"}, "message": "Improve wording for the \"Trait objects\" section of the reference.", "tree": {"sha": "b62ac27c6c18afe0e0bac45df3af51ebeb2500a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62ac27c6c18afe0e0bac45df3af51ebeb2500a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2f486feafa99124479d1b5e74c9acc6ed7cc233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f486feafa99124479d1b5e74c9acc6ed7cc233", "html_url": "https://github.com/rust-lang/rust/commit/b2f486feafa99124479d1b5e74c9acc6ed7cc233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2f486feafa99124479d1b5e74c9acc6ed7cc233/comments", "author": null, "committer": null, "parents": [{"sha": "857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd", "html_url": "https://github.com/rust-lang/rust/commit/857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "764468761607aa7aed5b3794ce3d26f2e21efbb1", "filename": "src/doc/reference.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b2f486feafa99124479d1b5e74c9acc6ed7cc233/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2f486feafa99124479d1b5e74c9acc6ed7cc233/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=b2f486feafa99124479d1b5e74c9acc6ed7cc233", "patch": "@@ -3510,13 +3510,21 @@ more of the closure traits:\n \n ### Trait objects\n \n-Every trait item (see [traits](#traits)) defines a type with the same name as\n-the trait. This type is called the _trait object_ of the trait. Trait objects\n-permit \"late binding\" of methods, dispatched using _virtual method tables_\n-(\"vtables\"). Whereas most calls to trait methods are \"early bound\" (statically\n-resolved) to specific implementations at compile time, a call to a method on an\n-trait objects is only resolved to a vtable entry at compile time. The actual\n-implementation for each vtable entry can vary on an object-by-object basis.\n+In Rust, a type like `&SomeTrait` or `Box<SomeTrait>` is called a _trait object_.\n+Each instance of a trait object includes:\n+\n+ - a pointer to an instance of a type `T` that implements `SomeTrait`\n+ - a _virtual method table_, often just called a _vtable_, which contains, for\n+   each method of `SomeTrait` that `T` implements, a pointer to `T`'s\n+   implementation (i.e. a function pointer).\n+\n+The purpose of trait objects is to permit \"late binding\" of methods. A call to\n+a method on a trait object is only resolved to a vtable entry at compile time.\n+The actual implementation for each vtable entry can vary on an object-by-object\n+basis.\n+\n+Note that for a trait object to be instantiated, the trait must be\n+_object-safe_. Object safety rules are defined in [RFC 255][rfc255].\n \n Given a pointer-typed expression `E` of type `&T` or `Box<T>`, where `T`\n implements trait `R`, casting `E` to the corresponding pointer type `&R` or"}]}