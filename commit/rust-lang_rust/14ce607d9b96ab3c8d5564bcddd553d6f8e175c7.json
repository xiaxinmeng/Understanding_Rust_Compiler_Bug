{"sha": "14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0Y2U2MDdkOWI5NmFiM2M4ZDU1NjRiY2RkZDU1M2Q2ZjhlMTc1Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-09T07:01:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-09T07:01:09Z"}, "message": "Auto merge of #23200 - Manishearth:rollup, r=Manishearth", "tree": {"sha": "2cc4a6652586480e7595005e7ce88e71308d85e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cc4a6652586480e7595005e7ce88e71308d85e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "html_url": "https://github.com/rust-lang/rust/commit/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c3612f5ceae0fb9df4127bc94a5b443874d1ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c3612f5ceae0fb9df4127bc94a5b443874d1ca", "html_url": "https://github.com/rust-lang/rust/commit/36c3612f5ceae0fb9df4127bc94a5b443874d1ca"}, {"sha": "3797827460bde2044acb17415a51c0351b5d2dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3797827460bde2044acb17415a51c0351b5d2dec", "html_url": "https://github.com/rust-lang/rust/commit/3797827460bde2044acb17415a51c0351b5d2dec"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "68ca1cb72170ad1b7507da0bb78fc0b30ee7925a", "filename": "src/doc/grammar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "patch": "@@ -514,7 +514,7 @@ field_expr : expr '.' ident ;\n ### Array expressions\n \n ```antlr\n-array_expr : '[' \"mut\" ? vec_elems? ']' ;\n+array_expr : '[' \"mut\" ? array_elems? ']' ;\n \n array_elems : [expr [',' expr]*] | [expr ',' \"..\" expr] ;\n ```"}, {"sha": "3cb48eed891c2467b198634a50b9cdef0a4bd063", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "patch": "@@ -2847,7 +2847,7 @@ automatically dereferenced to make the field access possible.\n ### Array expressions\n \n ```{.ebnf .gram}\n-array_expr : '[' \"mut\" ? vec_elems? ']' ;\n+array_expr : '[' \"mut\" ? array_elems? ']' ;\n \n array_elems : [expr [',' expr]*] | [expr ';' expr] ;\n ```"}, {"sha": "c65389287fbb8a19e4202689b8ea9d0d242dab7a", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "patch": "@@ -16,11 +16,11 @@\n     * [Standard Input](standard-input.md)\n     * [Guessing Game](guessing-game.md)\n * [II: Intermediate Rust](intermediate.md)\n-    * [More Strings](more-strings.md)\n     * [Crates and Modules](crates-and-modules.md)\n     * [Testing](testing.md)\n     * [Pointers](pointers.md)\n     * [Ownership](ownership.md)\n+    * [More Strings](more-strings.md)\n     * [Patterns](patterns.md)\n     * [Method Syntax](method-syntax.md)\n     * [Closures](closures.md)"}, {"sha": "9b6d6ca67f6c840c2328e986ed03ed9696e724a9", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "patch": "@@ -223,15 +223,8 @@ method which has this signature:\n fn lock(&self) -> LockResult<MutexGuard<T>>\n ```\n \n-If we [look at the code for MutexGuard](https://github.com/rust-lang/rust/blob/ca4b9674c26c1de07a2042cb68e6a062d7184cef/src/libstd/sync/mutex.rs#L172), we'll see\n-this:\n-\n-```ignore\n-__marker: marker::NoSend,\n-```\n-\n-Because our guard is `NoSend`, it's not `Send`. Which means we can't actually\n-transfer the guard across thread boundaries, which gives us our error.\n+Because `Send` is not implemented for `MutexGuard<T>`, we can't transfer the\n+guard across thread boundaries, which gives us our error.\n \n We can use `Arc<T>` to fix this. Here's the working version:\n "}, {"sha": "0625d649e3086b6de909a0c06632f41c0fe02775", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "patch": "@@ -50,7 +50,29 @@ You can think of this first parameter as being the `x` in `x.foo()`. The three\n variants correspond to the three kinds of thing `x` could be: `self` if it's\n just a value on the stack, `&self` if it's a reference, and `&mut self` if it's\n a mutable reference. We should default to using `&self`, as it's the most\n-common.\n+common. Here's an example of all three variants:\n+\n+```rust\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn reference(&self) {\n+       println!(\"taking self by reference!\"); \n+    }\n+\n+    fn mutable_reference(&mut self) {\n+       println!(\"taking self by mutable reference!\"); \n+    }\n+\n+    fn takes_ownership(self) {\n+       println!(\"taking ownership of self!\"); \n+    }\n+}\n+```\n \n Finally, as you may remember, the value of the area of a circle is `\u03c0*r\u00b2`.\n Because we took the `&self` parameter to `area`, we can use it just like any"}, {"sha": "6567cd448f998611ee7bdaecc9a8067fddec7921", "filename": "src/doc/trpl/more-strings.md", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmore-strings.md?ref=14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "patch": "@@ -278,7 +278,18 @@ This will print:\n \n Many more bytes than graphemes!\n \n-# Other Documentation\n+# `Deref` coercions\n \n-* [the `&str` API documentation](../std/str/index.html)\n-* [the `String` API documentation](../std/string/index.html)\n+References to `String`s will automatically coerce into `&str`s. Like this:\n+\n+```\n+fn hello(s: &str) {\n+   println!(\"Hello, {}!\", s);\n+}\n+\n+let slice = \"Steve\";\n+let string = \"Steve\".to_string();\n+\n+hello(slice);\n+hello(&string);\n+```"}, {"sha": "930a40c5050db4c001f0d306d4aa8e671000fa3d", "filename": "src/doc/trpl/pointers.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2Fpointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Fdoc%2Ftrpl%2Fpointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpointers.md?ref=14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "patch": "@@ -634,8 +634,8 @@ use-case for boxes.\n ### Returning data\n \n This is important enough to have its own section entirely. The TL;DR is this:\n-you don't generally want to return pointers, even when you might in a language\n-like C or C++.\n+you don't want to return pointers, even when you might in a language like C or\n+C++.\n \n See [Returning Pointers](#returning-pointers) below for more.\n "}, {"sha": "d4392a0740a90132ec1dbb566710571ae056e95d", "filename": "src/libstd/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ce607d9b96ab3c8d5564bcddd553d6f8e175c7/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=14ce607d9b96ab3c8d5564bcddd553d6f8e175c7", "patch": "@@ -264,7 +264,7 @@ impl Command {\n     /// By default, stdin, stdout and stderr are captured (and used to\n     /// provide the resulting output).\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// # #![feature(process)]\n@@ -275,8 +275,8 @@ impl Command {\n     /// });\n     ///\n     /// println!(\"status: {}\", output.status);\n-    /// println!(\"stdout: {}\", String::from_utf8_lossy(output.stdout.as_slice()));\n-    /// println!(\"stderr: {}\", String::from_utf8_lossy(output.stderr.as_slice()));\n+    /// println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+    /// println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn output(&mut self) -> io::Result<Output> {"}]}