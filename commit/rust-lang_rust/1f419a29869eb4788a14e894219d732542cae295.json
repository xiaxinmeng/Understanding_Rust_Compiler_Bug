{"sha": "1f419a29869eb4788a14e894219d732542cae295", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNDE5YTI5ODY5ZWI0Nzg4YTE0ZTg5NDIxOWQ3MzI1NDJjYWUyOTU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-07T16:33:11Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-07T16:33:24Z"}, "message": "Add missing suggestions and help message to tests", "tree": {"sha": "10c27051edf4785a911d6a5adfa42881a67f638f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c27051edf4785a911d6a5adfa42881a67f638f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f419a29869eb4788a14e894219d732542cae295", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXVvdWAAoJEF5CfHlMukXo+X8QAIN7vM1qRnJxsKFXiV5CPSFX\nQcsnL7Bon0ans8ARVYImdweYZn+qxKe1Pf9dfgixxm4QiZUIcdW0+/t11JzLhTgk\nWKT4fY4wot9TnEU7CqyzZ4gl2PzgxTTA21CrrD5JGMej4y9tcOMqlhO/kOvTI9jB\nUzFU9awKeCnr6GLo2TmFwKRzHC37rQIfiIhqivL9CH2jwcTMZxACrAUyZP0VQHFq\nNKPIf9V4Eeg4tHzKw3bFU+Jw/7dgMrMffNYWkyynsCGUX/L/oES/vubnqqljjrZB\n2UiDC+lztAvDmz/PsHocNhOzb6WC5nsJoUAA2EMLztVj9M2CeuNkeM3RHJpKetym\n/h5JzQYk/dTkJ6rNcm3YmzY+CCxjwhgiHDyLa0gMD9KRS2DmpyyXUHongPIWmrYD\ntjM5Z+g2bOzpO8J/DDAL+nFw/3Vsy6FzX5pYjap0m3qDhiDmRdg7dvKOOq3/07iK\nCCZsLFuWd5NKvz+jI7uMkcvJUyEJ8Popoo0YWNJ77ADb3B+BwZdEv+uLziuOlfMg\nEr3wYP3Ur5R0naU0F8xg04zSu2O4YO3ggu1HV2W+PlE4evO1yyTiv8uftwTHsLRv\noFb1JgGJZR2TV5tlIFzfTEAVUv9CNsZtzTr8O8+nvfnd5V9fTtax+aZKRIflLJFz\n/pGOnP/7c0Zdy8ShAmEe\n=uRa1\n-----END PGP SIGNATURE-----", "payload": "tree 10c27051edf4785a911d6a5adfa42881a67f638f\nparent dd3fd41a037c32098815adab6f6734202f1510c8\nauthor mcarton <cartonmartin+git@gmail.com> 1465317191 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1465317204 +0200\n\nAdd missing suggestions and help message to tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f419a29869eb4788a14e894219d732542cae295", "html_url": "https://github.com/rust-lang/rust/commit/1f419a29869eb4788a14e894219d732542cae295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f419a29869eb4788a14e894219d732542cae295/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3fd41a037c32098815adab6f6734202f1510c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3fd41a037c32098815adab6f6734202f1510c8", "html_url": "https://github.com/rust-lang/rust/commit/dd3fd41a037c32098815adab6f6734202f1510c8"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "89267462f5dfcac76cd9093af5cdaf50b4237627", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f419a29869eb4788a14e894219d732542cae295/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f419a29869eb4788a14e894219d732542cae295/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=1f419a29869eb4788a14e894219d732542cae295", "patch": "@@ -356,13 +356,19 @@ fn starts_with() {\n \n fn use_extend_from_slice() {\n     let mut v : Vec<&'static str> = vec![];\n-    v.extend(&[\"Hello\", \"World\"]); //~ERROR use of `extend`\n+    v.extend(&[\"Hello\", \"World\"]);\n+    //~^ ERROR use of `extend`\n+    //~| HELP try this\n+    //~| SUGGESTION v.extend_from_slice(&[\"Hello\", \"World\"]);\n     v.extend(&vec![\"Some\", \"more\"]);\n-    //~^ERROR use of `extend`\n+    //~^ ERROR use of `extend`\n     //~| HELP try this\n     //~| SUGGESTION v.extend_from_slice(&vec![\"Some\", \"more\"]);\n \n-    v.extend(vec![\"And\", \"even\", \"more\"].iter()); //~ERROR use of `extend`\n+    v.extend(vec![\"And\", \"even\", \"more\"].iter());\n+    //~^ ERROR use of `extend`\n+    //~| HELP try this\n+    //FIXME: the suggestion if broken because of the macro\n     let o : Option<&'static str> = None;\n     v.extend(o);\n     v.extend(Some(\"Bye\"));"}, {"sha": "80fed2818ef54505846ece77a7c50aee51d72772", "filename": "tests/compile-fail/needless_return.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1f419a29869eb4788a14e894219d732542cae295/tests%2Fcompile-fail%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f419a29869eb4788a14e894219d732542cae295/tests%2Fcompile-fail%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_return.rs?ref=1f419a29869eb4788a14e894219d732542cae295", "patch": "@@ -23,26 +23,41 @@ fn test_no_semicolon() -> bool {\n \n fn test_if_block() -> bool {\n     if true {\n-        return true;       //~ERROR unneeded return statement\n+        return true;\n+        //~^ ERROR unneeded return statement\n+        //~| HELP remove `return` as shown\n+        //~| SUGGESTION true\n     } else {\n-        return false;      //~ERROR unneeded return statement\n+        return false;\n+        //~^ ERROR unneeded return statement\n+        //~| HELP remove `return` as shown\n+        //~| SUGGESTION false\n     }\n }\n \n fn test_match(x: bool) -> bool {\n     match x {\n         true => {\n-            return false;  //~ERROR unneeded return statement\n+            return false;\n+            //~^ ERROR unneeded return statement\n+            //~| HELP remove `return` as shown\n+            //~| SUGGESTION false\n         }\n         false => {\n-            return true;   //~ERROR unneeded return statement\n+            return true;\n+            //~^ ERROR unneeded return statement\n+            //~| HELP remove `return` as shown\n+            //~| SUGGESTION true\n         }\n     }\n }\n \n fn test_closure() {\n     let _ = || {\n-        return true;       //~ERROR unneeded return statement\n+        return true;\n+        //~^ ERROR unneeded return statement\n+        //~| HELP remove `return` as shown\n+        //~| SUGGESTION true\n     };\n }\n "}, {"sha": "d08f8b891bc9907a7faf30561bec88a6e4570994", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f419a29869eb4788a14e894219d732542cae295/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f419a29869eb4788a14e894219d732542cae295/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=1f419a29869eb4788a14e894219d732542cae295", "patch": "@@ -63,8 +63,11 @@ fn main() {\n     add_assign_only();\n     both();\n \n-    // the add is only caught for String\n+    // the add is only caught for `String`\n     let mut x = 1;\n-    x = x + 1; //~ WARN assign_op_pattern\n+    ; x = x + 1;\n+    //~^ WARN assign_op_pattern\n+    //~| HELP replace\n+    //~| SUGGESTION ; x += 1;\n     assert_eq!(2, x);\n }"}, {"sha": "4c1090876b40c007005b4ef0901a7b2cb57c1249", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f419a29869eb4788a14e894219d732542cae295/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f419a29869eb4788a14e894219d732542cae295/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=1f419a29869eb4788a14e894219d732542cae295", "patch": "@@ -80,17 +80,26 @@ fn main() {\n     }\n \n     let mut iter = 1..20;\n-    while let Option::Some(x) = iter.next() { //~ERROR this loop could be written as a `for` loop\n+    while let Option::Some(x) = iter.next() {\n+    //~^ ERROR this loop could be written as a `for` loop\n+    //~| HELP try\n+    //~| SUGGESTION for x in iter {\n         println!(\"{}\", x);\n     }\n \n     let mut iter = 1..20;\n-    while let Some(x) = iter.next() { //~ERROR this loop could be written as a `for` loop\n+    while let Some(x) = iter.next() {\n+    //~^ ERROR this loop could be written as a `for` loop\n+    //~| HELP try\n+    //~| SUGGESTION for x in iter {\n         println!(\"{}\", x);\n     }\n \n     let mut iter = 1..20;\n-    while let Some(_) = iter.next() {} //~ERROR this loop could be written as a `for` loop\n+    while let Some(_) = iter.next() {}\n+    //~^ ERROR this loop could be written as a `for` loop\n+    //~| HELP try\n+    //~| SUGGESTION for _ in iter {\n \n     let mut iter = 1..20;\n     while let None = iter.next() {} // this is fine (if nonsensical)\n@@ -130,7 +139,10 @@ fn main() {\n // cause this function to trigger it\n fn no_panic<T>(slice: &[T]) {\n     let mut iter = slice.iter();\n-    loop { //~ERROR\n+    loop {\n+    //~^ ERROR\n+    //~| HELP try\n+    //~| SUGGESTION while let Some(ele) = iter.next() { .. }\n         let _ = match iter.next() {\n             Some(ele) => ele,\n             None => break"}]}