{"sha": "5b40f2ae5b4357a9488bd97da011bd07aebf6aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNDBmMmFlNWI0MzU3YTk0ODhiZDk3ZGEwMTFiZDA3YWViZjZhYWE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-01T03:30:40Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-01T03:30:40Z"}, "message": "pass exchange_malloc an alignment, not a tydesc", "tree": {"sha": "a18f2744b792d5698140b397247f45978e89c953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a18f2744b792d5698140b397247f45978e89c953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa", "html_url": "https://github.com/rust-lang/rust/commit/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7799d3048eea4039d59c0cca98449e1c52a561", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7799d3048eea4039d59c0cca98449e1c52a561", "html_url": "https://github.com/rust-lang/rust/commit/0d7799d3048eea4039d59c0cca98449e1c52a561"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "411cbcbe9eb76a9caf34801347728638f73b5f3e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5b40f2ae5b4357a9488bd97da011bd07aebf6aaa", "patch": "@@ -258,25 +258,43 @@ pub fn malloc_raw_dyn(bcx: block,\n         }\n     };\n \n-    // Grab the TypeRef type of box_ptr_ty.\n-    let box_ptr_ty = mk_fn(bcx.tcx(), t);\n-    let llty = type_of(ccx, box_ptr_ty);\n-\n-    // Get the tydesc for the body:\n-    let static_ti = get_tydesc(ccx, t);\n-    glue::lazily_emit_all_tydesc_glue(ccx, static_ti);\n-\n-    // Allocate space:\n-    let tydesc = PointerCast(bcx, static_ti.tydesc, Type::i8p());\n-    let rval = alloca(bcx, Type::i8p());\n-    let bcx = callee::trans_lang_call(\n-        bcx,\n-        langcall,\n-        [tydesc, size],\n-        expr::SaveIn(rval));\n-    let r = rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty));\n-    maybe_set_managed_unique_rc(r.bcx, r.val, heap);\n-    r\n+    if heap == heap_exchange {\n+        // Grab the TypeRef type of box_ptr_ty.\n+        let box_ptr_ty = mk_fn(bcx.tcx(), t);\n+        let llty = type_of(ccx, box_ptr_ty);\n+\n+        let llty_value = type_of::type_of(ccx, t);\n+        let llalign = llalign_of_min(ccx, llty_value);\n+\n+        // Allocate space:\n+        let rval = alloca(bcx, Type::i8p());\n+        let bcx = callee::trans_lang_call(\n+            bcx,\n+            langcall,\n+            [C_i32(llalign as i32), size],\n+            expr::SaveIn(rval));\n+        rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty))\n+    } else {\n+        // Grab the TypeRef type of box_ptr_ty.\n+        let box_ptr_ty = mk_fn(bcx.tcx(), t);\n+        let llty = type_of(ccx, box_ptr_ty);\n+\n+        // Get the tydesc for the body:\n+        let static_ti = get_tydesc(ccx, t);\n+        glue::lazily_emit_all_tydesc_glue(ccx, static_ti);\n+\n+        // Allocate space:\n+        let tydesc = PointerCast(bcx, static_ti.tydesc, Type::i8p());\n+        let rval = alloca(bcx, Type::i8p());\n+        let bcx = callee::trans_lang_call(\n+            bcx,\n+            langcall,\n+            [tydesc, size],\n+            expr::SaveIn(rval));\n+        let r = rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty));\n+        maybe_set_managed_unique_rc(r.bcx, r.val, heap);\n+        r\n+    }\n }\n \n // malloc_raw: expects an unboxed type and returns a pointer to"}, {"sha": "1020580d52c008de48056ed273e45fbf93f3517e", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=5b40f2ae5b4357a9488bd97da011bd07aebf6aaa", "patch": "@@ -80,13 +80,8 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n #[cfg(not(stage0), not(test))]\n #[lang=\"exchange_malloc\"]\n #[inline]\n-pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n-    let td = td as *TyDesc;\n-    let size = size as uint;\n-\n-    assert!(td.is_not_null());\n-\n-    let total_size = get_box_size(size, (*td).align);\n+pub unsafe fn exchange_malloc(align: u32, size: uintptr_t) -> *c_char {\n+    let total_size = get_box_size(size as uint, align as uint);\n     malloc_raw(total_size as uint) as *c_char\n }\n "}]}