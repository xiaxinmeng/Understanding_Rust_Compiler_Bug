{"sha": "d4e71da6ca1cd6953f3a8698cca5e16a9aadf0eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTcxZGE2Y2ExY2Q2OTUzZjNhODY5OGNjYTVlMTZhOWFhZGYwZWI=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2013-01-26T12:00:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-16T02:04:11Z"}, "message": "rustpkg: Fix do listeners and support custom test logic", "tree": {"sha": "08e638fad8ceaaf06d9e94415de55e87733723d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e638fad8ceaaf06d9e94415de55e87733723d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e71da6ca1cd6953f3a8698cca5e16a9aadf0eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e71da6ca1cd6953f3a8698cca5e16a9aadf0eb", "html_url": "https://github.com/rust-lang/rust/commit/d4e71da6ca1cd6953f3a8698cca5e16a9aadf0eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e71da6ca1cd6953f3a8698cca5e16a9aadf0eb/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "html_url": "https://github.com/rust-lang/rust/commit/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "1d537976e5fbcd67b616bc03efe8f650f1683eff", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d4e71da6ca1cd6953f3a8698cca5e16a9aadf0eb/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d4e71da6ca1cd6953f3a8698cca5e16a9aadf0eb/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=d4e71da6ca1cd6953f3a8698cca5e16a9aadf0eb", "patch": "@@ -222,20 +222,20 @@ impl PackageScript {\n \n     // Build the bootstrap and run a command\n     // FIXME (#4432): Use workcache to only compile the script when changed\n-    fn run(cmd: ~str) -> int {\n+    fn run(cmd: ~str, test: bool) -> int {\n         let work_dir = self.work_dir();\n         let input = self.input;\n         let sess = self.sess;\n         let cfg = self.cfg;\n         let crate = util::ready_crate(sess, self.crate);\n         let outputs = driver::build_output_filenames(input, &Some(work_dir),\n                                                      &None, sess);\n-        let exe = work_dir.push(~\"package\" + util::exe_suffix());\n+        let exe = work_dir.push(~\"pkg\" + util::exe_suffix());\n         let root = filesearch::get_rustpkg_sysroot().get().pop().pop();\n \n         driver::compile_rest(sess, cfg, driver::cu_parse,\n-                         Some(outputs), Some(crate));\n-        run::run_program(exe.to_str(), ~[root.to_str(), cmd])\n+                             Some(outputs), Some(crate));\n+        run::run_program(exe.to_str(), ~[root.to_str(), cmd, test.to_str()])\n     }\n \n     fn hash() -> ~str {\n@@ -338,10 +338,13 @@ impl Ctx {\n     }\n \n     fn do_cmd(cmd: ~str) -> bool {\n-        if cmd == ~\"build\" {\n-            util::error(~\"the build cmd is reserved\");\n+        match cmd {\n+            ~\"build\" | ~\"test\" => {\n+                util::error(~\"that command cannot be manually called\");\n \n-            return false;\n+                return false;\n+            }\n+            _ => {}\n         }\n \n         let cwd = &os::getcwd();\n@@ -353,9 +356,9 @@ impl Ctx {\n                 return false;\n             }\n         };\n-        let status = script.run(cmd);\n+        let status = script.run(cmd, false);\n \n-        if status == 1 {\n+        if status == 42 {\n             util::error(~\"no fns are listening for that cmd\");\n \n             return false;\n@@ -406,12 +409,16 @@ impl Ctx {\n         // Build imperative crates\n         os::change_dir(dir);\n \n-        if script.custom && script.run(~\"build\") != 0 {\n-            util::error(\n-                fmt!(\"building %s v%s failed: custom build logic failed\",\n-                     script.name, script.vers.to_str()));\n+        if script.custom {\n+            let status = script.run(~\"build\", test);\n \n-            return None;\n+            if status != 0 && status != 42 {\n+                util::error(\n+                    fmt!(\"building %s v%s failed: custom logic failed (%d)\",\n+                         script.name, script.vers.to_str(), status));\n+\n+                return None;\n+            }\n         }\n \n         os::change_dir(cwd);\n@@ -748,6 +755,19 @@ impl Ctx {\n             }\n         }\n \n+        // Run custom test listener\n+        if script.custom {\n+            let status = script.run(~\"test\", false);\n+\n+            if status != 0 && status != 42 {\n+                util::error(\n+                    fmt!(\"testing %s v%s failed: custom logic failed (%d)\",\n+                         script.name, script.vers.to_str(), status));\n+\n+                os::set_exit_status(status);\n+            }\n+        }\n+\n         util::note(fmt!(\"tested %s v%s\", script.name, script.vers.to_str()));\n \n         true\n@@ -888,7 +908,6 @@ pub fn main() {\n     }.run(cmd, args);\n }\n \n-\n /// A crate is a unit of Rust code to be compiled into a binary or library\n pub struct Crate {\n     file: ~str,\n@@ -918,7 +937,7 @@ pub fn run(listeners: ~[Listener]) {\n     }\n \n     if !found {\n-        os::set_exit_status(1);\n+        os::set_exit_status(42);\n     }\n }\n \n@@ -982,10 +1001,12 @@ pub fn src_dir() -> Path {\n \n /// Build a set of crates, should be called once\n pub fn build(crates: ~[Crate]) -> bool {\n+    let args = os::args();\n     let dir = src_dir();\n     let work_dir = work_dir();\n     let mut success = true;\n-    let sysroot = Path(os::args()[1]);\n+    let sysroot = Path(args[1]);\n+    let test = args[3] == ~\"true\";\n \n     for crates.each |&crate| {\n         let path = &dir.push_rel(&Path(crate.file)).normalize();\n@@ -994,13 +1015,13 @@ pub fn build(crates: ~[Crate]) -> bool {\n \n         success = util::compile_crate(Some(sysroot), path, &work_dir,\n                                       crate.flags, crate.cfgs,\n-                                      false, false);\n+                                      false, test);\n \n         if !success { break; }\n     }\n \n     if !success {\n-        os::set_exit_status(2);\n+        os::set_exit_status(101);\n     }\n \n     success"}]}