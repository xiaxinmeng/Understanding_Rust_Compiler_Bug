{"sha": "af243d4d91400e071a5b8fe5041f55f07fd8a928", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMjQzZDRkOTE0MDBlMDcxYTViOGZlNTA0MWY1NWYwN2ZkOGE5Mjg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-21T22:01:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-21T22:01:50Z"}, "message": "Avoid relying on const parameters to function\n\nLLVM seems to at least sometimes optimize better when the length comes directly\nfrom the `len()` of the array vs. an equivalent integer.\n\nAlso, this allows easier copy/pasting of the function into compiler explorer for\nexperimentation.", "tree": {"sha": "102c4febd72514917382c580a0c4f06082ff0d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/102c4febd72514917382c580a0c4f06082ff0d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af243d4d91400e071a5b8fe5041f55f07fd8a928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af243d4d91400e071a5b8fe5041f55f07fd8a928", "html_url": "https://github.com/rust-lang/rust/commit/af243d4d91400e071a5b8fe5041f55f07fd8a928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af243d4d91400e071a5b8fe5041f55f07fd8a928/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7ec6f8fe0fb10fa91ac40f68beccd2675cba50c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ec6f8fe0fb10fa91ac40f68beccd2675cba50c", "html_url": "https://github.com/rust-lang/rust/commit/a7ec6f8fe0fb10fa91ac40f68beccd2675cba50c"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "660b91b6025d11b041c06ba83247c4f6c75e22e1", "filename": "src/libcore/unicode/unicode_data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af243d4d91400e071a5b8fe5041f55f07fd8a928/src%2Flibcore%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af243d4d91400e071a5b8fe5041f55f07fd8a928/src%2Flibcore%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode_data.rs?ref=af243d4d91400e071a5b8fe5041f55f07fd8a928", "patch": "@@ -27,11 +27,11 @@ fn range_search<\n     } else {\n         return false;\n     };\n-    let idx = bitset_chunk_idx[(chunk_idx as usize)][chunk_piece] as usize;\n-    let word = if idx < CANONICAL {\n-        bitset_canonical[idx]\n+    let idx = bitset_chunk_idx[chunk_idx as usize][chunk_piece] as usize;\n+    let word = if let Some(word) = bitset_canonical.get(idx) {\n+        *word\n     } else {\n-        let (real_idx, mapping) = bitset_canonicalized[idx - CANONICAL];\n+        let (real_idx, mapping) = bitset_canonicalized[idx - bitset_canonical.len()];\n         let mut word = bitset_canonical[real_idx as usize];\n         let should_invert = mapping & (1 << 6) != 0;\n         if should_invert {"}, {"sha": "b57fd2c1d8623ee588351c328a7308a0a8ad693b", "filename": "src/tools/unicode-table-generator/src/range_search.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af243d4d91400e071a5b8fe5041f55f07fd8a928/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af243d4d91400e071a5b8fe5041f55f07fd8a928/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs?ref=af243d4d91400e071a5b8fe5041f55f07fd8a928", "patch": "@@ -25,11 +25,11 @@ fn range_search<\n     } else {\n         return false;\n     };\n-    let idx = bitset_chunk_idx[(chunk_idx as usize)][chunk_piece] as usize;\n-    let word = if idx < CANONICAL {\n-        bitset_canonical[idx]\n+    let idx = bitset_chunk_idx[chunk_idx as usize][chunk_piece] as usize;\n+    let word = if let Some(word) = bitset_canonical.get(idx) {\n+        *word\n     } else {\n-        let (real_idx, mapping) = bitset_canonicalized[idx - CANONICAL];\n+        let (real_idx, mapping) = bitset_canonicalized[idx - bitset_canonical.len()];\n         let mut word = bitset_canonical[real_idx as usize];\n         let should_invert = mapping & (1 << 6) != 0;\n         if should_invert {"}]}