{"sha": "9bb5b549aa152550c9a79007d630792ff5b2a63f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYjViNTQ5YWExNTI1NTBjOWE3OTAwN2Q2MzA3OTJmZjViMmE2M2Y=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-15T06:09:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-03T01:24:08Z"}, "message": "Add docs", "tree": {"sha": "b78f07cc605aeac726f8ef2ac7bc7c693e77b036", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b78f07cc605aeac726f8ef2ac7bc7c693e77b036"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bb5b549aa152550c9a79007d630792ff5b2a63f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb5b549aa152550c9a79007d630792ff5b2a63f", "html_url": "https://github.com/rust-lang/rust/commit/9bb5b549aa152550c9a79007d630792ff5b2a63f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bb5b549aa152550c9a79007d630792ff5b2a63f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "html_url": "https://github.com/rust-lang/rust/commit/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "4b0b648b3b483fb5de01df62407b7ee4a2572eca", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9bb5b549aa152550c9a79007d630792ff5b2a63f/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb5b549aa152550c9a79007d630792ff5b2a63f/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=9bb5b549aa152550c9a79007d630792ff5b2a63f", "patch": "@@ -584,6 +584,19 @@ impl<T> Trait<T> for X {\n         false\n     }\n \n+    /// An associated type was expected and a different type was found.\n+    ///\n+    /// We perform a few different checks to see what we can suggest:\n+    ///\n+    ///  - In the current item, look for associated functions that return the expected type and\n+    ///    suggest calling them. (Not a structured suggestion.)\n+    ///  - If any of the item's generic bounds can be constrained, we suggest constraining the\n+    ///    associated type to the found type.\n+    ///  - If the associated type has a default type and was expected inside of a `trait`, we\n+    ///    mention that this is disallowed.\n+    ///  - If all other things fail, and the error is not because of a mismatch between the `trait`\n+    ///    and the `impl`, we provide a generic `help` to constrain the assoc type or call an assoc\n+    ///    fn that returns the type.\n     fn expected_projection(\n         &self,\n         db: &mut DiagnosticBuilder<'_>,\n@@ -600,6 +613,7 @@ impl<T> Trait<T> for X {\n         let body_owner = self.hir().get_if_local(body_owner_def_id);\n         let current_method_ident = body_owner.and_then(|n| n.ident()).map(|i| i.name);\n \n+        // We don't want to suggest calling an assoc fn in a scope where that isn't feasible.\n         let callable_scope = match body_owner {\n             Some(\n                 hir::Node::Item(hir::Item {\n@@ -784,6 +798,8 @@ fn foo(&self) -> Self::T { String::new() }\n         }\n     }\n \n+    /// Given a slice of `hir::GenericBound`s, if any of them corresponds to the `trait_ref`\n+    /// requirement, provide a strucuted suggestion to constrain it to a given type `ty`.\n     fn constrain_generic_bound_associated_type_structured_suggestion(\n         &self,\n         db: &mut DiagnosticBuilder<'_>,\n@@ -812,6 +828,8 @@ fn foo(&self) -> Self::T { String::new() }\n         false\n     }\n \n+    /// Given a span corresponding to a bound, provide a structured suggestion to set an\n+    /// associated type to a given type `ty`.\n     fn constrain_associated_type_structured_suggestion(\n         &self,\n         db: &mut DiagnosticBuilder<'_>,"}]}