{"sha": "f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57", "node_id": "C_kwDOAAsO6NoAKGY5NGZhNjJkNjlmYWY1YmQ2M2IzNzcyZDNlYzRmMGM3NmNmMmRiNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-29T08:45:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-29T08:45:15Z"}, "message": "Auto merge of #12409 - lowr:fix/usize-overflow, r=Veykril\n\nfix overflow during type inference for tuple struct patterns\n\nThe following code causes integer overflow during type inference for (malformed) tuple struct patterns.\n\n```rust\nstruct S(usize);\nlet S(.., a, b) = S(1);\n```\n\nIt has been panicking only in debug builds, and working in a way in release builds but it was inconsistent with type inference for tuple patterns:\n\n```rust\nstruct S(usize);\nlet S(.., a, b) = S(1); // a -> unknown, b -> usize\nlet (.., a, b) = (1,);  // a -> usize, b -> unknown\n```\n\nWith this PR, the overflow no longer happens by utilizing `saturating_sub()` like in other places and type inference for tuple struct patterns is in line with that for tuple patterns.", "tree": {"sha": "8981372169c9dfa5dcc6c6025af06d7e2a282d10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8981372169c9dfa5dcc6c6025af06d7e2a282d10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57", "html_url": "https://github.com/rust-lang/rust/commit/f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9fc4fec2193ebfa7ed7eb163b6eea925b56f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9fc4fec2193ebfa7ed7eb163b6eea925b56f7b", "html_url": "https://github.com/rust-lang/rust/commit/6c9fc4fec2193ebfa7ed7eb163b6eea925b56f7b"}, {"sha": "be2fa2b31b9e6b01ed96f41061a231ea45a54216", "url": "https://api.github.com/repos/rust-lang/rust/commits/be2fa2b31b9e6b01ed96f41061a231ea45a54216", "html_url": "https://github.com/rust-lang/rust/commit/be2fa2b31b9e6b01ed96f41061a231ea45a54216"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "c06d262f5e3c2f2fcf6656939b725b163864eae6", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57", "patch": "@@ -42,7 +42,7 @@ impl<'a> InferenceContext<'a> {\n             Some(idx) => subpats.split_at(idx),\n             None => (subpats, &[][..]),\n         };\n-        let post_idx_offset = field_tys.iter().count() - post.len();\n+        let post_idx_offset = field_tys.iter().count().saturating_sub(post.len());\n \n         let pre_iter = pre.iter().enumerate();\n         let post_iter = (post_idx_offset..).zip(post.iter());"}, {"sha": "93f765f703ca0354dc4e6620a26d3148aee16f99", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57", "patch": "@@ -1620,3 +1620,30 @@ pub trait Destruct {}\n \"#,\n     );\n }\n+\n+#[test]\n+fn tuple_struct_pattern_with_unmatched_args_crash() {\n+    check_infer(\n+        r#\"\n+struct S(usize);\n+fn main() {\n+    let S(.., a, b) = S(1);\n+    let (.., a, b) = (1,);\n+}\n+        \"#,\n+        expect![[r#\"\n+        27..85 '{     ...1,); }': ()\n+        37..48 'S(.., a, b)': S\n+        43..44 'a': usize\n+        46..47 'b': {unknown}\n+        51..52 'S': S(usize) -> S\n+        51..55 'S(1)': S\n+        53..54 '1': usize\n+        65..75 '(.., a, b)': (i32, {unknown})\n+        70..71 'a': i32\n+        73..74 'b': {unknown}\n+        78..82 '(1,)': (i32,)\n+        79..80 '1': i32\n+        \"#]],\n+    );\n+}"}]}