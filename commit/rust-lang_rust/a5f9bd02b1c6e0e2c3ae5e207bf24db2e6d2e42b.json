{"sha": "a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZjliZDAyYjFjNmUwZTJjM2FlNWUyMDdiZjI0ZGIyZTZkMmU0MmI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-17T17:00:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-18T10:58:39Z"}, "message": "resolve: Future-proof against imports referring to local variables and generic parameters", "tree": {"sha": "843f3750344173e193b870502d921398ab5b3e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/843f3750344173e193b870502d921398ab5b3e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "html_url": "https://github.com/rust-lang/rust/commit/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fc3c13e326e16e378910352fd243a84a0406a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc3c13e326e16e378910352fd243a84a0406a53", "html_url": "https://github.com/rust-lang/rust/commit/4fc3c13e326e16e378910352fd243a84a0406a53"}], "stats": {"total": 135, "additions": 134, "deletions": 1}, "files": [{"sha": "84ce0892b6b4f79aa710800ed6af75cf6e746bc1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "patch": "@@ -2364,6 +2364,36 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         });\n     }\n \n+    fn future_proof_import(&mut self, use_tree: &ast::UseTree) {\n+        if !self.session.rust_2018() {\n+            return;\n+        }\n+\n+        let segments = &use_tree.prefix.segments;\n+        if !segments.is_empty() {\n+            let ident = segments[0].ident;\n+            if ident.is_path_segment_keyword() {\n+                return;\n+            }\n+\n+            let nss = match use_tree.kind {\n+                ast::UseTreeKind::Simple(..) if segments.len() == 1 => &[TypeNS, ValueNS][..],\n+                _ => &[TypeNS],\n+            };\n+            for &ns in nss {\n+                if let Some(LexicalScopeBinding::Def(..)) =\n+                        self.resolve_ident_in_lexical_scope(ident, ns, None, use_tree.prefix.span) {\n+                    let what = if ns == TypeNS { \"type parameters\" } else { \"local variables\" };\n+                    self.session.span_err(ident.span, &format!(\"imports cannot refer to {}\", what));\n+                }\n+            }\n+        } else if let ast::UseTreeKind::Nested(use_trees) = &use_tree.kind {\n+            for (use_tree, _) in use_trees {\n+                self.future_proof_import(use_tree);\n+            }\n+        }\n+    }\n+\n     fn resolve_item(&mut self, item: &Item) {\n         let name = item.ident.name;\n         debug!(\"(resolving item) resolving {}\", name);\n@@ -2457,7 +2487,11 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 });\n             }\n \n-            ItemKind::Use(..) | ItemKind::ExternCrate(..) |\n+            ItemKind::Use(ref use_tree) => {\n+                self.future_proof_import(use_tree);\n+            }\n+\n+            ItemKind::ExternCrate(..) |\n             ItemKind::MacroDef(..) | ItemKind::GlobalAsm(..) => {\n                 // do nothing, these are just around to be encoded\n             }"}, {"sha": "d2e6dbbb95412ac260d8bb55407d3f7b976cd571", "filename": "src/test/ui/rust-2018/future-proofing-locals.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs?ref=a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "patch": "@@ -0,0 +1,49 @@\n+// edition:2018\n+\n+#![feature(uniform_paths, underscore_imports)]\n+\n+mod T {\n+    pub struct U;\n+}\n+mod x {\n+    pub struct y;\n+}\n+\n+fn type_param<T>() {\n+    use T as _; //~ ERROR imports cannot refer to type parameters\n+    use T::U; //~ ERROR imports cannot refer to type parameters\n+    use T::*; //~ ERROR imports cannot refer to type parameters\n+}\n+\n+fn self_import<T>() {\n+    use T; // FIXME Should be an error, but future-proofing fails due to `T` being \"self-shadowed\"\n+}\n+\n+fn let_binding() {\n+    let x = 10;\n+\n+    use x as _; //~ ERROR imports cannot refer to local variables\n+    use x::y; // OK\n+    use x::*; // OK\n+}\n+\n+fn param_binding(x: u8) {\n+    use x; //~ ERROR imports cannot refer to local variables\n+}\n+\n+fn match_binding() {\n+    match 0 {\n+        x => {\n+            use x; //~ ERROR imports cannot refer to local variables\n+        }\n+    }\n+}\n+\n+fn nested<T>() {\n+    let x = 10;\n+\n+    use {T as _, x}; //~ ERROR imports cannot refer to type parameters\n+                     //~| ERROR imports cannot refer to local variables\n+}\n+\n+fn main() {}"}, {"sha": "68354b332a9c68036c366f45b69f3efd787a8b20", "filename": "src/test/ui/rust-2018/future-proofing-locals.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr?ref=a5f9bd02b1c6e0e2c3ae5e207bf24db2e6d2e42b", "patch": "@@ -0,0 +1,50 @@\n+error: imports cannot refer to type parameters\n+  --> $DIR/future-proofing-locals.rs:13:9\n+   |\n+LL |     use T as _; //~ ERROR imports cannot refer to type parameters\n+   |         ^\n+\n+error: imports cannot refer to type parameters\n+  --> $DIR/future-proofing-locals.rs:14:9\n+   |\n+LL |     use T::U; //~ ERROR imports cannot refer to type parameters\n+   |         ^\n+\n+error: imports cannot refer to type parameters\n+  --> $DIR/future-proofing-locals.rs:15:9\n+   |\n+LL |     use T::*; //~ ERROR imports cannot refer to type parameters\n+   |         ^\n+\n+error: imports cannot refer to local variables\n+  --> $DIR/future-proofing-locals.rs:25:9\n+   |\n+LL |     use x as _; //~ ERROR imports cannot refer to local variables\n+   |         ^\n+\n+error: imports cannot refer to local variables\n+  --> $DIR/future-proofing-locals.rs:31:9\n+   |\n+LL |     use x; //~ ERROR imports cannot refer to local variables\n+   |         ^\n+\n+error: imports cannot refer to local variables\n+  --> $DIR/future-proofing-locals.rs:37:17\n+   |\n+LL |             use x; //~ ERROR imports cannot refer to local variables\n+   |                 ^\n+\n+error: imports cannot refer to type parameters\n+  --> $DIR/future-proofing-locals.rs:45:10\n+   |\n+LL |     use {T as _, x}; //~ ERROR imports cannot refer to type parameters\n+   |          ^\n+\n+error: imports cannot refer to local variables\n+  --> $DIR/future-proofing-locals.rs:45:18\n+   |\n+LL |     use {T as _, x}; //~ ERROR imports cannot refer to type parameters\n+   |                  ^\n+\n+error: aborting due to 8 previous errors\n+"}]}