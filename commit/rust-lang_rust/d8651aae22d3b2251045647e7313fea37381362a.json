{"sha": "d8651aae22d3b2251045647e7313fea37381362a", "node_id": "C_kwDOAAsO6NoAKGQ4NjUxYWFlMjJkM2IyMjUxMDQ1NjQ3ZTczMTNmZWEzNzM4MTM2MmE", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-02T15:39:00Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-02T22:06:23Z"}, "message": "Don't generate unecessary `&&self.field` in deriving Debug", "tree": {"sha": "8c9fb12ff021c34c4da30ccec61f9e0e802c5750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c9fb12ff021c34c4da30ccec61f9e0e802c5750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8651aae22d3b2251045647e7313fea37381362a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8651aae22d3b2251045647e7313fea37381362a", "html_url": "https://github.com/rust-lang/rust/commit/d8651aae22d3b2251045647e7313fea37381362a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8651aae22d3b2251045647e7313fea37381362a/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9985cf172e7cb8ab5c58ce2818752c3572754fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9985cf172e7cb8ab5c58ce2818752c3572754fc", "html_url": "https://github.com/rust-lang/rust/commit/a9985cf172e7cb8ab5c58ce2818752c3572754fc"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "74e2597830e7ed27a1fd0fae301052628d9ffb9e", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8651aae22d3b2251045647e7313fea37381362a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8651aae22d3b2251045647e7313fea37381362a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=d8651aae22d3b2251045647e7313fea37381362a", "patch": "@@ -76,6 +76,21 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n     // The number of fields that can be handled without an array.\n     const CUTOFF: usize = 5;\n \n+    fn expr_for_field(\n+        cx: &ExtCtxt<'_>,\n+        field: &FieldInfo,\n+        index: usize,\n+        len: usize,\n+    ) -> ast::ptr::P<ast::Expr> {\n+        if index < len - 1 {\n+            field.self_expr.clone()\n+        } else {\n+            // Unsized types need an extra indirection, but only the last field\n+            // may be unsized.\n+            cx.expr_addr_of(field.span, field.self_expr.clone())\n+        }\n+    }\n+\n     if fields.is_empty() {\n         // Special case for no fields.\n         let fn_path_write_str = cx.std_path(&[sym::fmt, sym::Formatter, sym::write_str]);\n@@ -98,8 +113,8 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n                 let name = cx.expr_str(field.span, field.name.unwrap().name);\n                 args.push(name);\n             }\n-            // Use an extra indirection to make sure this works for unsized types.\n-            let field = cx.expr_addr_of(field.span, field.self_expr.clone());\n+\n+            let field = expr_for_field(cx, field, i, fields.len());\n             args.push(field);\n         }\n         let expr = cx.expr_call_global(span, fn_path_debug, args);\n@@ -109,13 +124,13 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         let mut name_exprs = Vec::with_capacity(fields.len());\n         let mut value_exprs = Vec::with_capacity(fields.len());\n \n-        for field in fields {\n+        for i in 0..fields.len() {\n+            let field = &fields[i];\n             if is_struct {\n                 name_exprs.push(cx.expr_str(field.span, field.name.unwrap().name));\n             }\n \n-            // Use an extra indirection to make sure this works for unsized types.\n-            let field = cx.expr_addr_of(field.span, field.self_expr.clone());\n+            let field = expr_for_field(cx, field, i, fields.len());\n             value_exprs.push(field);\n         }\n "}, {"sha": "5bca83e87f878b2ed1eac5c0bf1773a6bb18e429", "filename": "tests/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d8651aae22d3b2251045647e7313fea37381362a/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d8651aae22d3b2251045647e7313fea37381362a/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=d8651aae22d3b2251045647e7313fea37381362a", "patch": "@@ -98,7 +98,7 @@ impl ::core::marker::Copy for Point { }\n impl ::core::fmt::Debug for Point {\n     fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n         ::core::fmt::Formatter::debug_struct_field2_finish(f, \"Point\", \"x\",\n-            &&self.x, \"y\", &&self.y)\n+            &self.x, \"y\", &&self.y)\n     }\n }\n #[automatically_derived]\n@@ -183,7 +183,7 @@ impl ::core::marker::Copy for PackedPoint { }\n impl ::core::fmt::Debug for PackedPoint {\n     fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n         ::core::fmt::Formatter::debug_struct_field2_finish(f, \"PackedPoint\",\n-            \"x\", &&{ self.x }, \"y\", &&{ self.y })\n+            \"x\", &{ self.x }, \"y\", &&{ self.y })\n     }\n }\n #[automatically_derived]\n@@ -277,8 +277,8 @@ impl ::core::fmt::Debug for Big {\n         let names: &'static _ =\n             &[\"b1\", \"b2\", \"b3\", \"b4\", \"b5\", \"b6\", \"b7\", \"b8\"];\n         let values: &[&dyn ::core::fmt::Debug] =\n-            &[&&self.b1, &&self.b2, &&self.b3, &&self.b4, &&self.b5,\n-                        &&self.b6, &&self.b7, &&self.b8];\n+            &[&self.b1, &self.b2, &self.b3, &self.b4, &self.b5, &self.b6,\n+                        &self.b7, &&self.b8];\n         ::core::fmt::Formatter::debug_struct_fields_finish(f, \"Big\", names,\n             values)\n     }\n@@ -565,7 +565,7 @@ impl<T: ::core::fmt::Debug + Trait, U: ::core::fmt::Debug> ::core::fmt::Debug\n     for Generic<T, U> where T::A: ::core::fmt::Debug {\n     fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n         ::core::fmt::Formatter::debug_struct_field3_finish(f, \"Generic\", \"t\",\n-            &&self.t, \"ta\", &&self.ta, \"u\", &&self.u)\n+            &self.t, \"ta\", &self.ta, \"u\", &&self.u)\n     }\n }\n #[automatically_derived]\n@@ -682,7 +682,7 @@ impl<T: ::core::fmt::Debug + ::core::marker::Copy + Trait,\n     {\n     fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n         ::core::fmt::Formatter::debug_tuple_field3_finish(f, \"PackedGeneric\",\n-            &&{ self.0 }, &&{ self.1 }, &&{ self.2 })\n+            &{ self.0 }, &{ self.1 }, &&{ self.2 })\n     }\n }\n #[automatically_derived]\n@@ -1084,7 +1084,7 @@ impl ::core::fmt::Debug for Mixed {\n                     &__self_0),\n             Mixed::S { d1: __self_0, d2: __self_1 } =>\n                 ::core::fmt::Formatter::debug_struct_field2_finish(f, \"S\",\n-                    \"d1\", &__self_0, \"d2\", &__self_1),\n+                    \"d1\", __self_0, \"d2\", &__self_1),\n         }\n     }\n }"}]}