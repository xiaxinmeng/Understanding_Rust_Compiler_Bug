{"sha": "eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "node_id": "C_kwDOAAsO6NoAKGVlYWQ1OGU3NWJiM2ExZDlmMDBiNWE5ODg3MDQzMjhmZWQ2YmIyYzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T13:39:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T13:39:43Z"}, "message": "Auto merge of #96736 - oli-obk:tait_missing_wf_check, r=davidtwco\n\nCheck hidden types for well formedness at the definition site instead of only at the opaque type itself\n\nwork towards #90409 . We'll need to look into closure and generator bodies of closures and generators nested inside the hidden type in order to fix that. In hindsight this PR is not necessary for that, but it may be a bit easier with it and we'll get better diagnostics from it on its own.", "tree": {"sha": "29033965d2dd69bf3cda1adb019fb1179d59135e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29033965d2dd69bf3cda1adb019fb1179d59135e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "html_url": "https://github.com/rust-lang/rust/commit/eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51871c469f7ed3b35ae25d7e6e77bc73fbdd0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51871c469f7ed3b35ae25d7e6e77bc73fbdd0e3", "html_url": "https://github.com/rust-lang/rust/commit/c51871c469f7ed3b35ae25d7e6e77bc73fbdd0e3"}, {"sha": "f667e952f85911fb2983f98d0808d40242db7b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/f667e952f85911fb2983f98d0808d40242db7b47", "html_url": "https://github.com/rust-lang/rust/commit/f667e952f85911fb2983f98d0808d40242db7b47"}], "stats": {"total": 441, "additions": 301, "deletions": 140}, "files": [{"sha": "f3d37a6be7b48a2b4642d83fbdc7fbcaef8aa537", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -110,6 +110,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let remapped_type = infcx.infer_opaque_definition_from_instantiation(\n                 opaque_type_key,\n                 universal_concrete_type,\n+                origin,\n             );\n             let ty = if check_opaque_type_parameter_valid(\n                 infcx.tcx,"}, {"sha": "74f5185d6723632d3356c2d0f03a6f7ea899e52c", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,18 +1,23 @@\n use crate::traits;\n+use crate::traits::error_reporting::InferCtxtExt as _;\n+use crate::traits::TraitEngineExt as _;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n-use rustc_infer::infer::InferCtxt;\n+use rustc_infer::infer::{InferCtxt, TyCtxtInferExt as _};\n+use rustc_infer::traits::{Obligation, ObligationCause, TraitEngine};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts};\n-use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt};\n+use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, ToPredicate, Ty, TyCtxt};\n use rustc_span::Span;\n \n pub trait InferCtxtExt<'tcx> {\n     fn infer_opaque_definition_from_instantiation(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         instantiated_ty: OpaqueHiddenType<'tcx>,\n+        origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx>;\n }\n \n@@ -45,6 +50,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         instantiated_ty: OpaqueHiddenType<'tcx>,\n+        origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n         if self.is_tainted_by_errors() {\n             return self.tcx.ty_error();\n@@ -76,7 +82,69 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         ));\n         debug!(?definition_ty);\n \n-        definition_ty\n+        // Only check this for TAIT. RPIT already supports `src/test/ui/impl-trait/nested-return-type2.rs`\n+        // on stable and we'd break that.\n+        if let OpaqueTyOrigin::TyAlias = origin {\n+            // This logic duplicates most of `check_opaque_meets_bounds`.\n+            // FIXME(oli-obk): Also do region checks here and then consider removing `check_opaque_meets_bounds` entirely.\n+            let param_env = self.tcx.param_env(def_id);\n+            let body_id = self.tcx.local_def_id_to_hir_id(def_id.as_local().unwrap());\n+            self.tcx.infer_ctxt().enter(move |infcx| {\n+                // Require the hidden type to be well-formed with only the generics of the opaque type.\n+                // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n+                // hidden type is well formed even without those bounds.\n+                let predicate =\n+                    ty::Binder::dummy(ty::PredicateKind::WellFormed(definition_ty.into()))\n+                        .to_predicate(infcx.tcx);\n+                let mut fulfillment_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n+\n+                // Require that the hidden type actually fulfills all the bounds of the opaque type, even without\n+                // the bounds that the function supplies.\n+                match infcx.register_hidden_type(\n+                    OpaqueTypeKey { def_id, substs: id_substs },\n+                    ObligationCause::misc(instantiated_ty.span, body_id),\n+                    param_env,\n+                    definition_ty,\n+                    origin,\n+                ) {\n+                    Ok(infer_ok) => {\n+                        for obligation in infer_ok.obligations {\n+                            fulfillment_cx.register_predicate_obligation(&infcx, obligation);\n+                        }\n+                    }\n+                    Err(err) => {\n+                        infcx\n+                            .report_mismatched_types(\n+                                &ObligationCause::misc(instantiated_ty.span, body_id),\n+                                self.tcx.mk_opaque(def_id, id_substs),\n+                                definition_ty,\n+                                err,\n+                            )\n+                            .emit();\n+                    }\n+                }\n+\n+                fulfillment_cx.register_predicate_obligation(\n+                    &infcx,\n+                    Obligation::misc(instantiated_ty.span, body_id, param_env, predicate),\n+                );\n+\n+                // Check that all obligations are satisfied by the implementation's\n+                // version.\n+                let errors = fulfillment_cx.select_all_or_error(&infcx);\n+\n+                let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+\n+                if errors.is_empty() {\n+                    definition_ty\n+                } else {\n+                    infcx.report_fulfillment_errors(&errors, None, false);\n+                    self.tcx.ty_error()\n+                }\n+            })\n+        } else {\n+            definition_ty\n+        }\n     }\n }\n "}, {"sha": "55b4dc8dc232b39a35a57a8d94c422d41e79b955", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -4,10 +4,10 @@\n #![feature(type_alias_impl_trait)]\n \n type X<T> = impl Clone;\n-//~^ ERROR the trait bound `T: Clone` is not satisfied\n \n fn f<T: Clone>(t: T) -> X<T> {\n     t\n+    //~^ ERROR the trait bound `T: Clone` is not satisfied\n }\n \n fn g<T>(o: Option<X<T>>) -> Option<X<T>> {"}, {"sha": "8678e9b33b5eac3b2e7ec4a13b37c0ee35bc945d", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/bounds-are-checked-2.rs:6:13\n+  --> $DIR/bounds-are-checked-2.rs:9:5\n    |\n-LL | type X<T> = impl Clone;\n-   |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n+LL |     t\n+   |     ^ the trait `Clone` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "cf46add124cb30a68658f3d1b1ea20c7fcaa6e40", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -15,6 +15,7 @@ type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n     t\n     //~^ ERROR non-defining opaque type use in defining scope\n+    //~| ERROR `U` doesn't implement `Debug`\n }\n \n fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {"}, {"sha": "d661196e1bf190dbaa6fae69ace72ef959ff0cbb", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,3 +1,14 @@\n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use.rs:16:5\n+   |\n+LL |     t\n+   |     ^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+help: consider restricting type parameter `U`\n+   |\n+LL | type TwoTys<T, U: std::fmt::Debug> = impl Debug;\n+   |                 +++++++++++++++++\n+\n error: non-defining opaque type use in defining scope\n   --> $DIR/generic_duplicate_param_use.rs:16:5\n    |\n@@ -11,7 +22,7 @@ LL | type TwoTys<T, U> = impl Debug;\n    |             ^  ^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:21:5\n+  --> $DIR/generic_duplicate_param_use.rs:22:5\n    |\n LL |     t\n    |     ^\n@@ -23,7 +34,7 @@ LL | type TwoLifetimes<'a, 'b> = impl Debug;\n    |                   ^^  ^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:26:5\n+  --> $DIR/generic_duplicate_param_use.rs:27:5\n    |\n LL |     t\n    |     ^\n@@ -34,5 +45,6 @@ note: constant used multiple times\n LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n    |                ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "201535efe153240c5778936de663a0adad5d8fe4", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -6,8 +6,8 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n-//~^ ERROR `T` doesn't implement `Debug`\n \n fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n     t\n+    //~^ ERROR `T` doesn't implement `Debug`\n }"}, {"sha": "3dbfff7453fd07735c93457970ed48799ca1fbd0", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use2.rs:8:18\n+  --> $DIR/generic_duplicate_param_use2.rs:11:5\n    |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     t\n+   |     ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "e7a25fc7240053cfe8f356888ef4f628fcc99311", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -6,13 +6,13 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n-//~^ ERROR `T` doesn't implement `Debug`\n \n fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n     t\n+    //~^ ERROR `T` doesn't implement `Debug`\n }\n \n fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n     u\n-    //~^ ERROR concrete type differs from previous defining opaque type use\n+    //~^ ERROR `U` doesn't implement `Debug`\n }"}, {"sha": "7bec3822071f30b51c62a3b83a8cd7f2ab8f246c", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,26 +1,25 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use3.rs:16:5\n-   |\n-LL |     u\n-   |     ^ expected `T`, got `U`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use3.rs:12:5\n-   |\n-LL |     t\n-   |     ^\n-\n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use3.rs:8:18\n+  --> $DIR/generic_duplicate_param_use3.rs:11:5\n    |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     t\n+   |     ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           +++++++++++++++++\n \n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use3.rs:16:5\n+   |\n+LL |     u\n+   |     ^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+help: consider restricting type parameter `U`\n+   |\n+LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n+   |              +++++++++++++++++\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d1e5a0f0198b610ec6dbc6e04ec594d95bf05fa2", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -6,8 +6,8 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n-//~^ ERROR `U` doesn't implement `Debug`\n \n fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n     u\n+    //~^ ERROR `U` doesn't implement `Debug`\n }"}, {"sha": "21a5369d9fff98ddbee75c03bafcf7819c3a460c", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use4.rs:8:18\n+  --> $DIR/generic_duplicate_param_use4.rs:11:5\n    |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     u\n+   |     ^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n help: consider restricting type parameter `U`\n    |"}, {"sha": "3bd1dda63314ab854bb1f0e2636661206ed9de3c", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -6,14 +6,15 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n-//~^ ERROR `T` doesn't implement `Debug`\n-//~| ERROR `U` doesn't implement `Debug`\n \n fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (t, u)\n+    //~^ ERROR `T` doesn't implement `Debug`\n+    //~| ERROR `U` doesn't implement `Debug`\n }\n \n fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (u, t)\n-    //~^ concrete type differs from previous\n+    //~^ ERROR `T` doesn't implement `Debug`\n+    //~| ERROR `U` doesn't implement `Debug`\n }"}, {"sha": "2768f0c3ab768cda9d46613d1f1f54ff5ca8d3f6", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.stderr", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,20 +1,8 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:17:5\n-   |\n-LL |     (u, t)\n-   |     ^^^^^^ expected `(T, U)`, got `(U, T)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:13:5\n-   |\n-LL |     (t, u)\n-   |     ^^^^^^\n-\n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:8:18\n+  --> $DIR/generic_duplicate_param_use5.rs:11:5\n    |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     (t, u)\n+   |     ^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n help: consider restricting type parameter `T`\n@@ -23,17 +11,41 @@ LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           +++++++++++++++++\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:8:18\n+  --> $DIR/generic_duplicate_param_use5.rs:11:5\n    |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     (t, u)\n+   |     ^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n help: consider restricting type parameter `U`\n    |\n LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n    |              +++++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use5.rs:17:5\n+   |\n+LL |     (u, t)\n+   |     ^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(U, T)`\n+help: consider restricting type parameter `U`\n+   |\n+LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n+   |              +++++++++++++++++\n+\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use5.rs:17:5\n+   |\n+LL |     (u, t)\n+   |     ^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(U, T)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           +++++++++++++++++\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "5120925e5a4a5efb05e45c60a4c8b172f72a839c", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -6,13 +6,14 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n-//~^ ERROR `T` doesn't implement `Debug`\n \n fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (t, t)\n+    //~^ ERROR `T` doesn't implement `Debug`\n }\n \n fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (u, t)\n-    //~^ ERROR concrete type differs from previous\n+    //~^ ERROR `T` doesn't implement `Debug`\n+    //~| ERROR `U` doesn't implement `Debug`\n }"}, {"sha": "c1712ca2efb6a2fb0bc9228ed702ae460997d218", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,27 +1,39 @@\n-error: concrete type differs from previous defining opaque type use\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use6.rs:11:5\n+   |\n+LL |     (t, t)\n+   |     ^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           +++++++++++++++++\n+\n+error[E0277]: `U` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use6.rs:16:5\n    |\n LL |     (u, t)\n-   |     ^^^^^^ expected `(T, T)`, got `(U, T)`\n+   |     ^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:12:5\n+   = note: required because of the requirements on the impl of `Debug` for `(U, T)`\n+help: consider restricting type parameter `U`\n    |\n-LL |     (t, t)\n-   |     ^^^^^^\n+LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n+   |              +++++++++++++++++\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use6.rs:8:18\n+  --> $DIR/generic_duplicate_param_use6.rs:16:5\n    |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     (u, t)\n+   |     ^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n+   = note: required because of the requirements on the impl of `Debug` for `(U, T)`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           +++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "3a4b5047b41e2579000176014553849998c5c171", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -5,13 +5,13 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<T, U> = impl Debug;\n-//~^ ERROR `T` doesn't implement `Debug`\n \n fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n     (t, 4u32)\n+    //~^ ERROR `T` doesn't implement `Debug`\n }\n \n fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n     (u, 4u32)\n-    //~^ concrete type differs from previous\n+    //~^ ERROR `U` doesn't implement `Debug`\n }"}, {"sha": "b83105c45f26c891b672a0a4db9efdfe42c560e5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,27 +1,27 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:15:5\n-   |\n-LL |     (u, 4u32)\n-   |     ^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:11:5\n-   |\n-LL |     (t, 4u32)\n-   |     ^^^^^^^^^\n-\n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use8.rs:7:18\n+  --> $DIR/generic_duplicate_param_use8.rs:10:5\n    |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     (t, 4u32)\n+   |     ^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           +++++++++++++++++\n \n+error[E0277]: `U` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use8.rs:15:5\n+   |\n+LL |     (u, 4u32)\n+   |     ^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(U, u32)`\n+help: consider restricting type parameter `U`\n+   |\n+LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n+   |              +++++++++++++++++\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "6afcdfe4d1c3dea32ae19899edca25c19aa1ae71", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -5,9 +5,6 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<A, B> = impl Debug;\n-//~^ ERROR the trait bound `A: Foo` is not satisfied\n-//~| ERROR `A` doesn't implement `Debug`\n-//~| ERROR `B` doesn't implement `Debug`\n \n trait Foo {\n     type Bar: Debug;\n@@ -16,8 +13,13 @@ trait Foo {\n \n fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (t, u, T::BAR)\n+    //~^ ERROR the trait bound `A: Foo` is not satisfied\n+    //~| ERROR `A` doesn't implement `Debug`\n+    //~| ERROR `B` doesn't implement `Debug`\n }\n \n fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-    (t, u, 42) //~ ERROR concrete type differs from previous\n+    (t, u, 42)\n+    //~^ ERROR `A` doesn't implement `Debug`\n+    //~| ERROR `B` doesn't implement `Debug`\n }"}, {"sha": "50cf982733bb4db151b510fb949765c97ddf4efb", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,31 +1,19 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:22:5\n-   |\n-LL |     (t, u, 42)\n-   |     ^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:18:5\n-   |\n-LL |     (t, u, T::BAR)\n-   |     ^^^^^^^^^^^^^^\n-\n error[E0277]: the trait bound `A: Foo` is not satisfied\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+  --> $DIR/generic_duplicate_param_use9.rs:15:5\n    |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+LL |     (t, u, T::BAR)\n+   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n    |\n help: consider restricting type parameter `A`\n    |\n LL | type Two<A: Foo, B> = impl Debug;\n    |           +++++\n \n error[E0277]: `A` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+  --> $DIR/generic_duplicate_param_use9.rs:15:5\n    |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     (t, u, T::BAR)\n+   |     ^^^^^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required because of the requirements on the impl of `Debug` for `(A, B, _)`\n help: consider restricting type parameter `A`\n@@ -34,17 +22,41 @@ LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n    |           +++++++++++++++++\n \n error[E0277]: `B` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+  --> $DIR/generic_duplicate_param_use9.rs:15:5\n    |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     (t, u, T::BAR)\n+   |     ^^^^^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required because of the requirements on the impl of `Debug` for `(A, B, _)`\n help: consider restricting type parameter `B`\n    |\n LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n    |              +++++++++++++++++\n \n-error: aborting due to 4 previous errors\n+error[E0277]: `A` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use9.rs:22:5\n+   |\n+LL |     (t, u, 42)\n+   |     ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, i32)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n+   |           +++++++++++++++++\n+\n+error[E0277]: `B` doesn't implement `Debug`\n+  --> $DIR/generic_duplicate_param_use9.rs:22:5\n+   |\n+LL |     (t, u, 42)\n+   |     ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, i32)`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n+   |              +++++++++++++++++\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "159d3ccd27e0150aca3723c807cd1bd21e2e6889", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,11 +1,11 @@\n #![feature(type_alias_impl_trait)]\n \n type Foo<T> = impl Default;\n-//~^ ERROR: the trait bound `T: Default` is not satisfied\n \n #[allow(unused)]\n fn foo<T: Default>(t: T) -> Foo<T> {\n     t\n+    //~^ ERROR: the trait bound `T: Default` is not satisfied\n }\n \n struct NotDefault;"}, {"sha": "acd40f9804ea03cab481a7fda5f5b8135f1d645d", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Default` is not satisfied\n-  --> $DIR/issue-52843.rs:3:15\n+  --> $DIR/issue-52843.rs:7:5\n    |\n-LL | type Foo<T> = impl Default;\n-   |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`\n+LL |     t\n+   |     ^ the trait `Default` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "0aeebae639e91811cfcda603e03fb34b96f42521", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -19,6 +19,7 @@ where\n     fn iter_bits(self, n: u8) -> Self::BitsIter {\n         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n         //~^ ERROR non-defining opaque type use in defining scope\n+        //~| ERROR type mismatch resolving\n     }\n }\n "}, {"sha": "9cb07cbbb44082d0572b9b367b7594e298596ab5", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,3 +1,16 @@\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-60564.rs:20:28: 20:100] as FnOnce<(u8,)>>::Output == I`\n+  --> $DIR/issue-60564.rs:20:9\n+   |\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                         - this type parameter\n+...\n+LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u8`, found type parameter `I`\n+   |\n+   = note:        expected type `u8`\n+           found type parameter `I`\n+   = note: required because of the requirements on the impl of `Iterator` for `Map<Rev<std::ops::Range<u8>>, [closure@$DIR/issue-60564.rs:20:28: 20:100]>`\n+\n error: non-defining opaque type use in defining scope\n   --> $DIR/issue-60564.rs:20:9\n    |\n@@ -10,5 +23,6 @@ note: used non-generic type `u8` for generic parameter\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    |                         ^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "bffff8787e4a2b3fe49cd0a57c9e016dae1d5050", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -8,6 +8,7 @@ type Alias<'a, U> = impl Trait<U>;\n \n fn f<'a>() -> Alias<'a, ()> {}\n //~^ ERROR non-defining opaque type use in defining scope\n+//~| ERROR the trait bound `(): Trait<U>` is not satisfied\n \n fn main() {}\n "}, {"sha": "b79d638ad9951d57817be996f5d83b2e5b2ed0fd", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,3 +1,14 @@\n+error[E0277]: the trait bound `(): Trait<U>` is not satisfied\n+  --> $DIR/issue-68368-non-defining-use.rs:9:29\n+   |\n+LL | fn f<'a>() -> Alias<'a, ()> {}\n+   |                             ^^ the trait `Trait<U>` is not implemented for `()`\n+   |\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | type Alias<'a, U> = impl Trait<U> where (): Trait<U>;\n+   |                                   ++++++++++++++++++\n+\n error: non-defining opaque type use in defining scope\n   --> $DIR/issue-68368-non-defining-use.rs:9:29\n    |\n@@ -10,5 +21,6 @@ note: used non-generic type `()` for generic parameter\n LL | type Alias<'a, U> = impl Trait<U>;\n    |                ^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "de070fc9debdb05b40af6245049b2a7560a1d2c7", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -5,7 +5,6 @@\n use std::future::Future;\n \n type G<'a, T> = impl Future<Output = ()>;\n-//~^ ERROR: the trait bound `T: Trait` is not satisfied\n \n trait Trait {\n     type F: Future<Output = ()>;\n@@ -17,6 +16,7 @@ trait Trait {\n         Self: Sized,\n     {\n         async move { self.f().await }\n+        //~^ ERROR: the trait bound `T: Trait` is not satisfied\n     }\n }\n "}, {"sha": "b636ada8b75b1ea911c2495f457ff1c2de40c655", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/issue-89686.rs:7:17\n+  --> $DIR/issue-89686.rs:18:9\n    |\n-LL | type G<'a, T> = impl Future<Output = ()>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+LL |         async move { self.f().await }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "fa47d13f5164cc0784495054f2534e5a97022c0e", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -5,10 +5,10 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<T, U> = impl Debug;\n-//~^ ERROR `T` doesn't implement `Debug`\n \n fn three<T: Debug, U>(t: T) -> Two<T, U> {\n     (t, 5i8)\n+    //~^ ERROR `T` doesn't implement `Debug`\n }\n \n trait Bar {\n@@ -23,7 +23,8 @@ impl Bar for u32 {\n \n fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n     (t, <U as Bar>::FOO)\n-    //~^ ERROR concrete type differs from previous\n+    //~^ ERROR `U: Bar` is not satisfied\n+    //~| ERROR `T` doesn't implement `Debug`\n }\n \n fn is_sync<T: Sync>() {}"}, {"sha": "a5ac38c38d44643be5b6d74b6108fabcf2baf20c", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,27 +1,38 @@\n-error: concrete type differs from previous defining opaque type use\n+error[E0277]: `T` doesn't implement `Debug`\n+  --> $DIR/not_a_defining_use.rs:10:5\n+   |\n+LL |     (t, 5i8)\n+   |     ^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(T, i8)`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           +++++++++++++++++\n+\n+error[E0277]: the trait bound `U: Bar` is not satisfied\n   --> $DIR/not_a_defining_use.rs:25:5\n    |\n LL |     (t, <U as Bar>::FOO)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `U`\n    |\n-note: previous use here\n-  --> $DIR/not_a_defining_use.rs:11:5\n+help: consider restricting type parameter `U`\n    |\n-LL |     (t, 5i8)\n-   |     ^^^^^^^^\n+LL | type Two<T, U: Bar> = impl Debug;\n+   |              +++++\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/not_a_defining_use.rs:7:18\n+  --> $DIR/not_a_defining_use.rs:25:5\n    |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+LL |     (t, <U as Bar>::FOO)\n+   |     ^^^^^^^^^^^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, i8)`\n+   = note: required because of the requirements on the impl of `Debug` for `(T, _)`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           +++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "aa537dfc9176c2972fbc2adba1bdf63e5d9800b3", "filename": "src/test/ui/type-alias-impl-trait/underconstrained_generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.rs?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -17,10 +17,10 @@ impl<X: Trait> ProofForConversion<X> for () {\n }\n \n type Converter<T> = impl ProofForConversion<T>;\n-//~^ ERROR the trait bound `T: Trait` is not satisfied\n \n fn _defining_use<T: Trait>() -> Converter<T> {\n     ()\n+    //~^ ERROR the trait bound `T: Trait` is not satisfied\n }\n \n "}, {"sha": "e70916573f694812b83c2e215175a465da83913c", "filename": "src/test/ui/type-alias-impl-trait/underconstrained_generic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eead58e75bb3a1d9f00b5a988704328fed6bb2c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr?ref=eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/underconstrained_generic.rs:19:21\n+  --> $DIR/underconstrained_generic.rs:22:5\n    |\n-LL | type Converter<T> = impl ProofForConversion<T>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+LL |     ()\n+   |     ^^ the trait `Trait` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `ProofForConversion<T>` for `()`\n   --> $DIR/underconstrained_generic.rs:13:16"}]}