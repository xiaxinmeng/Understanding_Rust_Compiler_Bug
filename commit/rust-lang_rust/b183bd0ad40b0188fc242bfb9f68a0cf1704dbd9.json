{"sha": "b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxODNiZDBhZDQwYjAxODhmYzI0MmJmYjlmNjhhMGNmMTcwNGRiZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-08T12:25:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-08T12:25:01Z"}, "message": "Auto merge of #50490 - nrc:method-docs, r=eddyb\n\nsave-analysis: emit correct docs for methods\n\ncc https://github.com/rust-lang-nursery/rls/issues/446\n\nr? @eddyb", "tree": {"sha": "9a8a462e2e98b57c28ff4aaf5fa8b9c4b2063e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a8a462e2e98b57c28ff4aaf5fa8b9c4b2063e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9", "html_url": "https://github.com/rust-lang/rust/commit/b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697a989ec05ad7445bacd68983fd807e159ea717", "url": "https://api.github.com/repos/rust-lang/rust/commits/697a989ec05ad7445bacd68983fd807e159ea717", "html_url": "https://github.com/rust-lang/rust/commit/697a989ec05ad7445bacd68983fd807e159ea717"}, {"sha": "d4c53ac827831720876c227d9071eee17ef75ee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c53ac827831720876c227d9071eee17ef75ee0", "html_url": "https://github.com/rust-lang/rust/commit/d4c53ac827831720876c227d9071eee17ef75ee0"}], "stats": {"total": 66, "additions": 30, "deletions": 36}, "files": [{"sha": "cf12302d9896978cf459ee5fb54f0e8b560ad3ef", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9", "patch": "@@ -40,7 +40,7 @@ mod sig;\n \n use rustc::hir;\n use rustc::hir::def::Def as HirDef;\n-use rustc::hir::map::{Node, NodeItem};\n+use rustc::hir::map::{Node, NodeTraitItem, NodeImplItem};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::CrateType::CrateTypeExecutable;\n@@ -418,34 +418,30 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 Some(impl_id) => match self.tcx.hir.get_if_local(impl_id) {\n                     Some(Node::NodeItem(item)) => match item.node {\n                         hir::ItemImpl(.., ref ty, _) => {\n-                            let mut result = String::from(\"<\");\n-                            result.push_str(&self.tcx.hir.node_to_pretty_string(ty.id));\n+                            let mut qualname = String::from(\"<\");\n+                            qualname.push_str(&self.tcx.hir.node_to_pretty_string(ty.id));\n \n                             let mut trait_id = self.tcx.trait_id_of_impl(impl_id);\n                             let mut decl_id = None;\n+                            let mut docs = String::new();\n+                            let mut attrs = vec![];\n+                            if let Some(NodeImplItem(item)) = self.tcx.hir.find(id) {\n+                                docs = self.docs_for_attrs(&item.attrs);\n+                                attrs = item.attrs.to_vec();\n+                            }\n+\n                             if let Some(def_id) = trait_id {\n-                                result.push_str(\" as \");\n-                                result.push_str(&self.tcx.item_path_str(def_id));\n+                                // A method in a trait impl.\n+                                qualname.push_str(\" as \");\n+                                qualname.push_str(&self.tcx.item_path_str(def_id));\n                                 self.tcx\n                                     .associated_items(def_id)\n                                     .find(|item| item.name == name)\n                                     .map(|item| decl_id = Some(item.def_id));\n-                            } else {\n-                                if let Some(NodeItem(item)) = self.tcx.hir.find(id) {\n-                                    if let hir::ItemImpl(_, _, _, _, _, ref ty, _) = item.node {\n-                                        trait_id = self.lookup_ref_id(ty.id);\n-                                    }\n-                                }\n                             }\n-                            result.push_str(\">\");\n-\n-                            (\n-                                result,\n-                                trait_id,\n-                                decl_id,\n-                                self.docs_for_attrs(&item.attrs),\n-                                item.attrs.to_vec(),\n-                            )\n+                            qualname.push_str(\">\");\n+\n+                            (qualname, trait_id, decl_id, docs, attrs)\n                         }\n                         _ => {\n                             span_bug!(\n@@ -467,25 +463,23 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     }\n                 },\n                 None => match self.tcx.trait_of_item(self.tcx.hir.local_def_id(id)) {\n-                    Some(def_id) => match self.tcx.hir.get_if_local(def_id) {\n-                        Some(Node::NodeItem(item)) => (\n+                    Some(def_id) => {\n+                        let mut docs = String::new();\n+                        let mut attrs = vec![];\n+\n+                        if let Some(NodeTraitItem(item)) = self.tcx.hir.find(id) {\n+                            docs = self.docs_for_attrs(&item.attrs);\n+                            attrs = item.attrs.to_vec();\n+                        }\n+\n+                        (\n                             format!(\"::{}\", self.tcx.item_path_str(def_id)),\n                             Some(def_id),\n                             None,\n-                            self.docs_for_attrs(&item.attrs),\n-                            item.attrs.to_vec(),\n-                        ),\n-                        r => {\n-                            span_bug!(\n-                                span,\n-                                \"Could not find container {:?} for \\\n-                                 method {}, got {:?}\",\n-                                def_id,\n-                                id,\n-                                r\n-                            );\n-                        }\n-                    },\n+                            docs,\n+                            attrs,\n+                        )\n+                    }\n                     None => {\n                         debug!(\"Could not find container for method {} at {:?}\", id, span);\n                         // This is not necessarily a bug, if there was a compilation error,"}]}