{"sha": "35ddd46a2d679b471b7c30bc4eb97de03396e838", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZGRkNDZhMmQ2NzliNDcxYjdjMzBiYzRlYjk3ZGUwMzM5NmU4Mzg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-03T16:20:20Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Refactor confirm.rs", "tree": {"sha": "aaadd5d66a32962b4007afa47e5beb5314772089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaadd5d66a32962b4007afa47e5beb5314772089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35ddd46a2d679b471b7c30bc4eb97de03396e838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35ddd46a2d679b471b7c30bc4eb97de03396e838", "html_url": "https://github.com/rust-lang/rust/commit/35ddd46a2d679b471b7c30bc4eb97de03396e838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35ddd46a2d679b471b7c30bc4eb97de03396e838/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84edc0a089d164ffc121d0566358718046c4a06d", "url": "https://api.github.com/repos/rust-lang/rust/commits/84edc0a089d164ffc121d0566358718046c4a06d", "html_url": "https://github.com/rust-lang/rust/commit/84edc0a089d164ffc121d0566358718046c4a06d"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "aa2147e9450f6dfb7716652465b8da5c7d37600e", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/35ddd46a2d679b471b7c30bc4eb97de03396e838/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ddd46a2d679b471b7c30bc4eb97de03396e838/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=35ddd46a2d679b471b7c30bc4eb97de03396e838", "patch": "@@ -322,41 +322,32 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method.\n         assert_eq!(method_generics.parent_count, parent_substs.len());\n-        let provided = &segment.args;\n-        let own_counts = method_generics.own_counts();\n-        // FIXME(varkor): Separating out the parameters is messy.\n-        let lifetimes: Vec<_> = provided.iter().flat_map(|data| {\n-                data.args.iter().filter_map(|arg| match arg {\n-                GenericArg::Lifetime(ty) => Some(ty),\n-                _ => None,\n-            })\n-        }).collect();\n-        let types: Vec<_> = provided.iter().flat_map(|data| {\n-                data.args.iter().filter_map(|arg| match arg {\n-                GenericArg::Type(ty) => Some(ty),\n-                _ => None,\n-            })\n-        }).collect();\n+\n         Substs::for_item(self.tcx, pick.item.def_id, |param, _| {\n             let i = param.index as usize;\n             if i < parent_substs.len() {\n                 parent_substs[i]\n             } else {\n-                match param.kind {\n-                    GenericParamDefKind::Lifetime => {\n-                        let idx = i - parent_substs.len();\n-                        if let Some(lifetime) = lifetimes.get(idx) {\n-                            return AstConv::ast_region_to_region(\n-                                self.fcx, lifetime, Some(param)).into();\n-                        }\n-                    }\n-                    GenericParamDefKind::Type { .. } => {\n-                        let idx = i - parent_substs.len() - own_counts.lifetimes;\n-                        if let Some(ast_ty) = types.get(idx) {\n-                            return self.to_ty(ast_ty).into();\n+                let param_idx = i - parent_substs.len();\n+\n+                if let Some(ref data) = segment.args {\n+                    if let Some(arg) = data.args.get(param_idx) {\n+                        match param.kind {\n+                            GenericParamDefKind::Lifetime => match arg {\n+                                GenericArg::Lifetime(lt) => {\n+                                    return AstConv::ast_region_to_region(\n+                                        self.fcx, lt, Some(param)).into();\n+                                }\n+                                _ => {}\n+                            }\n+                            GenericParamDefKind::Type { .. } => match arg {\n+                                GenericArg::Type(ty) => return self.to_ty(ty).into(),\n+                                _ => {}\n+                            }\n                         }\n                     }\n                 }\n+\n                 self.var_for_def(self.span, param)\n             }\n         })"}]}