{"sha": "8987e68247ed6df47624f9eeb35430fc92d54f15", "node_id": "C_kwDOAAsO6NoAKDg5ODdlNjgyNDdlZDZkZjQ3NjI0ZjllZWIzNTQzMGZjOTJkNTRmMTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-08T03:03:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-09T17:22:37Z"}, "message": "Implement a dummy drop-in-favor-of for the new solver", "tree": {"sha": "f03b99bd5dc1cf4d7799d2c651c1ec6feed7f1ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f03b99bd5dc1cf4d7799d2c651c1ec6feed7f1ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8987e68247ed6df47624f9eeb35430fc92d54f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8987e68247ed6df47624f9eeb35430fc92d54f15", "html_url": "https://github.com/rust-lang/rust/commit/8987e68247ed6df47624f9eeb35430fc92d54f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8987e68247ed6df47624f9eeb35430fc92d54f15/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c67ecd1245daef98a2667bd1672fe47ff16927a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c67ecd1245daef98a2667bd1672fe47ff16927a", "html_url": "https://github.com/rust-lang/rust/commit/8c67ecd1245daef98a2667bd1672fe47ff16927a"}], "stats": {"total": 93, "additions": 65, "deletions": 28}, "files": [{"sha": "bdf1550fab90ee1a5767ab39ca7ba7f097b9e6a0", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8987e68247ed6df47624f9eeb35430fc92d54f15/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8987e68247ed6df47624f9eeb35430fc92d54f15/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=8987e68247ed6df47624f9eeb35430fc92d54f15", "patch": "@@ -3,7 +3,7 @@ use crate::traits::{specialization_graph, translate_substs};\n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n use super::trait_goals::structural_traits;\n-use super::{Certainty, EvalCtxt, Goal, QueryResult};\n+use super::{Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n@@ -182,11 +182,17 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 // If there are *STILL* multiple candidates, give up\n                 // and report ambiguity.\n                 i += 1;\n-                if i > 1 {\n-                    debug!(\"multiple matches, ambig\");\n-                    // FIXME: return overflow if all candidates overflow, otherwise return ambiguity.\n-                    unimplemented!();\n-                }\n+            }\n+\n+            if candidates.len() > 1 {\n+                let certainty = if candidates.iter().all(|x| {\n+                    matches!(x.result.value.certainty, Certainty::Maybe(MaybeCause::Overflow))\n+                }) {\n+                    Certainty::Maybe(MaybeCause::Overflow)\n+                } else {\n+                    Certainty::AMBIGUOUS\n+                };\n+                return self.make_canonical_response(certainty);\n             }\n         }\n \n@@ -203,7 +209,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             (CandidateSource::Impl(_), _)\n             | (CandidateSource::ParamEnv(_), _)\n             | (CandidateSource::BuiltinImpl, _)\n-            | (CandidateSource::AliasBound, _) => unimplemented!(),\n+            | (CandidateSource::AliasBound, _) => false,\n         }\n     }\n }\n@@ -452,7 +458,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n                     ));\n \n-                    let is_sized_certainty = ecx.evaluate_goal(goal.with(tcx, sized_predicate))?.1;\n+                    let (_, is_sized_certainty) =\n+                        ecx.evaluate_goal(goal.with(tcx, sized_predicate))?;\n                     return ecx.eq_term_and_make_canonical_response(\n                         goal,\n                         is_sized_certainty,"}, {"sha": "6e1e993b2decc3d9aa83b99911e680b4eb5248b1", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8987e68247ed6df47624f9eeb35430fc92d54f15/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8987e68247ed6df47624f9eeb35430fc92d54f15/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=8987e68247ed6df47624f9eeb35430fc92d54f15", "patch": "@@ -4,7 +4,7 @@ use std::iter;\n \n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n-use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, QueryResult};\n+use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n@@ -511,11 +511,17 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 // If there are *STILL* multiple candidates, give up\n                 // and report ambiguity.\n                 i += 1;\n-                if i > 1 {\n-                    debug!(\"multiple matches, ambig\");\n-                    // FIXME: return overflow if all candidates overflow, otherwise return ambiguity.\n-                    unimplemented!();\n-                }\n+            }\n+\n+            if candidates.len() > 1 {\n+                let certainty = if candidates.iter().all(|x| {\n+                    matches!(x.result.value.certainty, Certainty::Maybe(MaybeCause::Overflow))\n+                }) {\n+                    Certainty::Maybe(MaybeCause::Overflow)\n+                } else {\n+                    Certainty::AMBIGUOUS\n+                };\n+                return self.make_canonical_response(certainty);\n             }\n         }\n \n@@ -532,17 +538,18 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             (CandidateSource::Impl(_), _)\n             | (CandidateSource::ParamEnv(_), _)\n             | (CandidateSource::AliasBound, _)\n-            | (CandidateSource::BuiltinImpl, _) => unimplemented!(),\n+            | (CandidateSource::BuiltinImpl, _) => false,\n         }\n     }\n \n-    fn discard_reservation_impl(&self, candidate: Candidate<'tcx>) -> Candidate<'tcx> {\n+    fn discard_reservation_impl(&self, mut candidate: Candidate<'tcx>) -> Candidate<'tcx> {\n         if let CandidateSource::Impl(def_id) = candidate.source {\n             if let ty::ImplPolarity::Reservation = self.tcx().impl_polarity(def_id) {\n                 debug!(\"Selected reservation impl\");\n-                // FIXME: reduce candidate to ambiguous\n-                // FIXME: replace `var_values` with identity, yeet external constraints.\n-                unimplemented!()\n+                // We assemble all candidates inside of a probe so by\n+                // making a new canonical response here our result will\n+                // have no constraints.\n+                candidate.result = self.make_canonical_response(Certainty::AMBIGUOUS).unwrap();\n             }\n         }\n "}, {"sha": "254ab356ad89c2f8610a1bf2fff75ec5bc135bdb", "filename": "tests/ui/traits/new-solver/provisional-result-done.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8987e68247ed6df47624f9eeb35430fc92d54f15/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8987e68247ed6df47624f9eeb35430fc92d54f15/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs?ref=8987e68247ed6df47624f9eeb35430fc92d54f15", "patch": "@@ -1,9 +1,5 @@\n // known-bug: unknown\n // compile-flags: -Ztrait-solver=next\n-// failure-status: 101\n-// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n-// rustc-env:RUST_BACKTRACE=0\n \n // This tests checks that we update results in the provisional cache when\n // we pop a goal from the stack."}, {"sha": "5bd0613d25911612d5757accb5200e92354002d7", "filename": "tests/ui/traits/new-solver/provisional-result-done.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8987e68247ed6df47624f9eeb35430fc92d54f15/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8987e68247ed6df47624f9eeb35430fc92d54f15/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr?ref=8987e68247ed6df47624f9eeb35430fc92d54f15", "patch": "@@ -1,6 +1,11 @@\n-error: the compiler unexpectedly panicked. this is a bug.\n+error[E0283]: type annotations needed: cannot satisfy `Bar<T>: Coinductive`\n+  --> $DIR/provisional-result-done.rs:16:25\n+   |\n+LL | impl<T> Coinductive for Bar<T>\n+   |                         ^^^^^^\n+   |\n+   = note: cannot satisfy `Bar<T>: Coinductive`\n \n-query stack during panic:\n-#0 [check_well_formed] checking that `<impl at $DIR/provisional-result-done.rs:20:1: 20:31>` is well-formed\n-#1 [check_mod_type_wf] checking that types are well-formed in top-level module\n-end of query stack\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "18ee05457009b736a5ae53778972223f356d6bd7", "filename": "tests/ui/traits/new-solver/temporary-ambiguity.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8987e68247ed6df47624f9eeb35430fc92d54f15/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8987e68247ed6df47624f9eeb35430fc92d54f15/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs?ref=8987e68247ed6df47624f9eeb35430fc92d54f15", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+// Checks that we don't explode when we assemble >1 candidate for a goal.\n+\n+struct Wrapper<T>(T);\n+\n+trait Foo {}\n+\n+impl Foo for Wrapper<i32> {}\n+\n+impl Foo for Wrapper<()> {}\n+\n+fn needs_foo(_: impl Foo) {}\n+\n+fn main() {\n+    let mut x = Default::default();\n+    let w = Wrapper(x);\n+    needs_foo(w);\n+    x = 1;\n+    drop(x);\n+}"}]}