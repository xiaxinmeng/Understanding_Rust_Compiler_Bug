{"sha": "2e1094429d3b122fa6805760180dbd45ad5d1500", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMTA5NDQyOWQzYjEyMmZhNjgwNTc2MDE4MGRiZDQ1YWQ1ZDE1MDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-14T19:31:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-14T19:31:56Z"}, "message": "Rollup merge of #57570 - Xanewok:querify-some, r=Zoxc\n\nQuerify local `plugin_registrar_fn` and `proc_macro_decls_static`\n\nInstead of calculating them as part of the `Session`, we do that in the query system.\nIt's also nice that these queries are already defined for external crates - here, we provide the queries for the local crate.\n\nr? @nikomatsakis", "tree": {"sha": "c9c39d6e8d3bb203843b7a3317443f5c2ba92797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c39d6e8d3bb203843b7a3317443f5c2ba92797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e1094429d3b122fa6805760180dbd45ad5d1500", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPOOsCRBK7hj4Ov3rIwAAdHIIABJIceB7+vN8+uUZU7j629wD\nIpuicFSJyntHbWiYGdh2PxT2xJXgnDehSdRfcfHgT50hX1sPvDTS4rl3dApEuBv7\nbOzn3y4bzKWrYJ0oJIOT6Cx4YuBl1pCHIdUBjQL2Ra+ILlQZATSJqFrW0z30dH+6\n7I7gQJ4ODkqRci6VFdPGejv6G6YVXPyPK8Zyrl8PZOQFXe53EwxxPvZ3MZsk8yJE\n0fkFhNEAKUwVPpgPfRjDSn8uyAmxyNEubOwaCDbLDrWllJFc2/Ef5VG83PCehQcK\nqvxK5hRtucjtUEnlSKeVhaTd/hvWSLv84PT8hLfmaBqhqywELH/h6kn1c33iLbg=\n=XQXq\n-----END PGP SIGNATURE-----\n", "payload": "tree c9c39d6e8d3bb203843b7a3317443f5c2ba92797\nparent 2f7a226c4dfd8fe71a7451063b6724166b705cf2\nparent 707a9a08bf3f048ca3c3b0dd752c2b1022242333\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547494316 +0100\ncommitter GitHub <noreply@github.com> 1547494316 +0100\n\nRollup merge of #57570 - Xanewok:querify-some, r=Zoxc\n\nQuerify local `plugin_registrar_fn` and `proc_macro_decls_static`\n\nInstead of calculating them as part of the `Session`, we do that in the query system.\nIt's also nice that these queries are already defined for external crates - here, we provide the queries for the local crate.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1094429d3b122fa6805760180dbd45ad5d1500", "html_url": "https://github.com/rust-lang/rust/commit/2e1094429d3b122fa6805760180dbd45ad5d1500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e1094429d3b122fa6805760180dbd45ad5d1500/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f7a226c4dfd8fe71a7451063b6724166b705cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7a226c4dfd8fe71a7451063b6724166b705cf2", "html_url": "https://github.com/rust-lang/rust/commit/2f7a226c4dfd8fe71a7451063b6724166b705cf2"}, {"sha": "707a9a08bf3f048ca3c3b0dd752c2b1022242333", "url": "https://api.github.com/repos/rust-lang/rust/commits/707a9a08bf3f048ca3c3b0dd752c2b1022242333", "html_url": "https://github.com/rust-lang/rust/commit/707a9a08bf3f048ca3c3b0dd752c2b1022242333"}], "stats": {"total": 107, "additions": 66, "deletions": 41}, "files": [{"sha": "7363b8b3a78fa89aedf9288ddee6b78489fa3615", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -69,8 +69,6 @@ pub struct Session {\n     pub parse_sess: ParseSess,\n     /// For a library crate, this is always none\n     pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n-    pub plugin_registrar_fn: Once<Option<ast::NodeId>>,\n-    pub proc_macro_decls_static: Once<Option<ast::NodeId>>,\n     pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n@@ -1177,8 +1175,6 @@ pub fn build_session_(\n         parse_sess: p_s,\n         // For a library crate, this is always none\n         entry_fn: Once::new(),\n-        plugin_registrar_fn: Once::new(),\n-        proc_macro_decls_static: Once::new(),\n         sysroot,\n         local_crate_source_file,\n         working_dir,"}, {"sha": "bf69089a254a4feb0e9f19e42269e684d77a79ba", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -147,14 +147,12 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         })\n         .collect();\n \n-    if let Some(id) = *tcx.sess.proc_macro_decls_static.get() {\n-        let def_id = tcx.hir().local_def_id(id);\n-        reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.proc_macro_decls_static(LOCAL_CRATE) {\n+        reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n-    if let Some(id) = *tcx.sess.plugin_registrar_fn.get() {\n-        let def_id = tcx.hir().local_def_id(id);\n-        reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.plugin_registrar_fn(LOCAL_CRATE) {\n+        reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n     Lrc::new(reachable_non_generics)"}, {"sha": "9267f14f2423456e7de2dc19a023d10b2b55a271", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -242,12 +242,12 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n \n     let node_id = tcx.hir().as_local_node_id(def_id);\n \n-    if let Some(id) = node_id {\n-        if *tcx.sess.plugin_registrar_fn.get() == Some(id) {\n+    if def_id.is_local() {\n+        if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }\n-        if *tcx.sess.proc_macro_decls_static.get() == Some(id) {\n+        if tcx.proc_macro_decls_static(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_proc_macro_decls_symbol(disambiguator);\n         }"}, {"sha": "3b7de37ae4b3f3f474dd6ea9c1b076f28f480b0d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1158,6 +1158,8 @@ where\n }\n \n pub fn default_provide(providers: &mut ty::query::Providers) {\n+    proc_macro_decls::provide(providers);\n+    plugin::build::provide(providers);\n     hir::provide(providers);\n     borrowck::provide(providers);\n     mir::provide(providers);\n@@ -1212,13 +1214,6 @@ where\n         middle::entry::find_entry_point(sess, &hir_map, name)\n     });\n \n-    sess.plugin_registrar_fn\n-        .set(time(sess, \"looking for plugin registrar\", || {\n-            plugin::build::find_plugin_registrar(sess.diagnostic(), &hir_map)\n-        }));\n-    sess.proc_macro_decls_static\n-        .set(proc_macro_decls::find(&hir_map));\n-\n     let mut local_providers = ty::query::Providers::default();\n     default_provide(&mut local_providers);\n     codegen_backend.provide(&mut local_providers);\n@@ -1248,6 +1243,14 @@ where\n             // tcx available.\n             time(sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n \n+            time(sess, \"looking for plugin registrar\", || {\n+                plugin::build::find_plugin_registrar(tcx)\n+            });\n+\n+            time(sess, \"looking for derive registrar\", || {\n+                proc_macro_decls::find(tcx)\n+            });\n+\n             time(sess, \"loop checking\", || loops::check_crate(tcx));\n \n             time(sess, \"attribute checking\", || {"}, {"sha": "093d15b7e3c577c4c9212bf4b1b658ff21057708", "filename": "src/librustc_driver/proc_macro_decls.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_driver%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_driver%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fproc_macro_decls.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,15 +1,25 @@\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::map::Map;\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir;\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n use syntax::ast;\n use syntax::attr;\n \n-pub fn find(hir_map: &Map) -> Option<ast::NodeId> {\n-    let krate = hir_map.krate();\n+pub fn find<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> Option<DefId> {\n+    tcx.proc_macro_decls_static(LOCAL_CRATE)\n+}\n+\n+fn proc_macro_decls_static<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    cnum: CrateNum,\n+) -> Option<DefId> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = Finder { decls: None };\n-    krate.visit_all_item_likes(&mut finder);\n-    finder.decls\n+    tcx.hir().krate().visit_all_item_likes(&mut finder);\n+\n+    finder.decls.map(|id| tcx.hir().local_def_id(id))\n }\n \n struct Finder {\n@@ -30,3 +40,9 @@ impl<'v> ItemLikeVisitor<'v> for Finder {\n     }\n }\n \n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        proc_macro_decls_static,\n+        ..*providers\n+    };\n+}"}, {"sha": "72bcf8edfdd2183585be10f7d3da9e9c9217c55c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -19,7 +19,7 @@\n //! a `pub fn new()`.\n \n use rustc::hir::def::Def;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::{self, Ty};\n use hir::Node;\n use util::nodemap::NodeSet;\n@@ -860,7 +860,7 @@ impl LintPass for PluginAsLibrary {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        if cx.sess().plugin_registrar_fn.get().is_some() {\n+        if cx.tcx.plugin_registrar_fn(LOCAL_CRATE).is_some() {\n             // We're compiling a plugin; it's fine to link other plugins.\n             return;\n         }"}, {"sha": "2de1637fb0d9d11e24e47757a8305d6f3d975af8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -482,13 +482,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             has_global_allocator: has_global_allocator,\n             has_panic_handler: has_panic_handler,\n             has_default_lib_allocator: has_default_lib_allocator,\n-            plugin_registrar_fn: tcx.sess\n-                .plugin_registrar_fn\n-                .get()\n-                .map(|id| tcx.hir().local_def_id(id).index),\n+            plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_decls_static: if is_proc_macro {\n-                let id = tcx.sess.proc_macro_decls_static.get().unwrap();\n-                Some(tcx.hir().local_def_id(id).index)\n+                let id = tcx.proc_macro_decls_static(LOCAL_CRATE).unwrap();\n+                Some(id.index)\n             } else {\n                 None\n             },"}, {"sha": "46c452668c3c8b509f6e26a6ce383b4de969527a", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -2,11 +2,12 @@\n \n use syntax::ast;\n use syntax::attr;\n-use errors;\n use syntax_pos::Span;\n-use rustc::hir::map::Map;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n \n struct RegistrarFinder {\n     registrars: Vec<(ast::NodeId, Span)> ,\n@@ -30,21 +31,27 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n }\n \n /// Find the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n-                             hir_map: &Map)\n-                             -> Option<ast::NodeId> {\n-    let krate = hir_map.krate();\n+pub fn find_plugin_registrar<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> Option<DefId> {\n+    tcx.plugin_registrar_fn(LOCAL_CRATE)\n+}\n+\n+fn plugin_registrar_fn<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    cnum: CrateNum,\n+) -> Option<DefId> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };\n-    krate.visit_all_item_likes(&mut finder);\n+    tcx.hir().krate().visit_all_item_likes(&mut finder);\n \n     match finder.registrars.len() {\n         0 => None,\n         1 => {\n             let (node_id, _) = finder.registrars.pop().unwrap();\n-            Some(node_id)\n+            Some(tcx.hir().local_def_id(node_id))\n         },\n         _ => {\n+            let diagnostic = tcx.sess.diagnostic();\n             let mut e = diagnostic.struct_err(\"multiple plugin registration functions found\");\n             for &(_, span) in &finder.registrars {\n                 e.span_note(span, \"one is here\");\n@@ -55,3 +62,11 @@ pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n         }\n     }\n }\n+\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        plugin_registrar_fn,\n+        ..*providers\n+    };\n+}"}]}