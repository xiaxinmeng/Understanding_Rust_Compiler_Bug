{"sha": "033d1df19b3835c184dabfa1c7cab42337fa36b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzM2QxZGYxOWIzODM1YzE4NGRhYmZhMWM3Y2FiNDIzMzdmYTM2YjY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-15T17:19:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-18T07:41:28Z"}, "message": "Retire BraceStructLiftImpl.", "tree": {"sha": "84fade608bf268deecd674005c1cd154bdfee9f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84fade608bf268deecd674005c1cd154bdfee9f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033d1df19b3835c184dabfa1c7cab42337fa36b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033d1df19b3835c184dabfa1c7cab42337fa36b6", "html_url": "https://github.com/rust-lang/rust/commit/033d1df19b3835c184dabfa1c7cab42337fa36b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033d1df19b3835c184dabfa1c7cab42337fa36b6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2add2075dee5308e6cf4991aabe446c4ab313397", "url": "https://api.github.com/repos/rust-lang/rust/commits/2add2075dee5308e6cf4991aabe446c4ab313397", "html_url": "https://github.com/rust-lang/rust/commit/2add2075dee5308e6cf4991aabe446c4ab313397"}], "stats": {"total": 222, "additions": 26, "deletions": 196}, "files": [{"sha": "b0f65ac6e1b3437440221c98ada4d8adc9fde09e", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 5, "deletions": 33, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -32,7 +32,7 @@ use std::ops::Index;\n use syntax::source_map::Span;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::GenericArg;\n-use crate::ty::{self, BoundVar, Lift, List, Region, TyCtxt};\n+use crate::ty::{self, BoundVar, List, Region, TyCtxt};\n \n mod canonicalizer;\n \n@@ -44,7 +44,7 @@ mod substitute;\n /// variables have been rewritten to \"canonical vars\". These are\n /// numbered starting from 0 in order of first appearance.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, Lift)]\n pub struct Canonical<'tcx, V> {\n     pub max_universe: ty::UniverseIndex,\n     pub variables: CanonicalVarInfos<'tcx>,\n@@ -65,7 +65,7 @@ impl<'tcx> UseSpecializedDecodable for CanonicalVarInfos<'tcx> {}\n /// variables. You will need to supply it later to instantiate the\n /// canonicalized query response.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, Lift)]\n pub struct CanonicalVarValues<'tcx> {\n     pub var_values: IndexVec<BoundVar, GenericArg<'tcx>>,\n }\n@@ -188,15 +188,15 @@ pub enum CanonicalTyVarKind {\n /// After we execute a query with a canonicalized key, we get back a\n /// `Canonical<QueryResponse<..>>`. You can use\n /// `instantiate_query_result` to access the data in this result.\n-#[derive(Clone, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct QueryResponse<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n     pub region_constraints: QueryRegionConstraints<'tcx>,\n     pub certainty: Certainty,\n     pub value: R,\n }\n \n-#[derive(Clone, Debug, Default, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, Default, HashStable, TypeFoldable, Lift)]\n pub struct QueryRegionConstraints<'tcx> {\n     pub outlives: Vec<QueryOutlivesConstraint<'tcx>>,\n     pub member_constraints: Vec<MemberConstraint<'tcx>>,\n@@ -469,13 +469,6 @@ CloneTypeFoldableImpls! {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx, T> Lift<'tcx> for Canonical<'a, T> {\n-        type Lifted = Canonical<'tcx, T::Lifted>;\n-        max_universe, variables, value\n-    } where T: Lift<'tcx>\n-}\n-\n impl<'tcx> CanonicalVarValues<'tcx> {\n     pub fn len(&self) -> usize {\n         self.var_values.len()\n@@ -521,27 +514,6 @@ impl<'a, 'tcx> IntoIterator for &'a CanonicalVarValues<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for CanonicalVarValues<'a> {\n-        type Lifted = CanonicalVarValues<'tcx>;\n-        var_values,\n-    }\n-}\n-\n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx, R> Lift<'tcx> for QueryResponse<'a, R> {\n-        type Lifted = QueryResponse<'tcx, R::Lifted>;\n-        var_values, region_constraints, certainty, value\n-    } where R: Lift<'tcx>\n-}\n-\n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for QueryRegionConstraints<'a> {\n-        type Lifted = QueryRegionConstraints<'tcx>;\n-        outlives, member_constraints\n-    }\n-}\n-\n impl<'tcx> Index<BoundVar> for CanonicalVarValues<'tcx> {\n     type Output = GenericArg<'tcx>;\n "}, {"sha": "402449ce6cc2032cb0465f1e61ba56f4cf506194", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -151,7 +151,7 @@ impl Constraint<'_> {\n /// ```\n /// R0 member of [O1..On]\n /// ```\n-#[derive(Debug, Clone, HashStable, TypeFoldable)]\n+#[derive(Debug, Clone, HashStable, TypeFoldable, Lift)]\n pub struct MemberConstraint<'tcx> {\n     /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n     pub opaque_type_def_id: DefId,\n@@ -169,13 +169,6 @@ pub struct MemberConstraint<'tcx> {\n     pub choice_regions: Lrc<Vec<Region<'tcx>>>,\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for MemberConstraint<'a> {\n-        type Lifted = MemberConstraint<'tcx>;\n-        opaque_type_def_id, definition_span, hidden_ty, member_region, choice_regions\n-    }\n-}\n-\n /// `VerifyGenericBound(T, _, R, RS)`: the parameter type `T` (or\n /// associated type) must outlive the region `R`. `T` is known to\n /// outlive `RS`. Therefore, verify that `R <= RS[i]` for some"}, {"sha": "f04030050aade5a9efb50ec77f7203dacbadfc1c", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -253,25 +253,6 @@ macro_rules! CloneTypeFoldableAndLiftImpls {\n     }\n }\n \n-#[macro_export]\n-macro_rules! BraceStructLiftImpl {\n-    (impl<$($p:tt),*> Lift<$tcx:tt> for $s:path {\n-        type Lifted = $lifted:ty;\n-        $($field:ident),* $(,)?\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::Lift<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            type Lifted = $lifted;\n-\n-            fn lift_to_tcx(&self, tcx: TyCtxt<$tcx>) -> Option<$lifted> {\n-                $(let $field = tcx.lift(&self.$field)?;)*\n-                Some(Self::Lifted { $($field),* })\n-            }\n-        }\n-    };\n-}\n-\n #[macro_export]\n macro_rules! EnumLiftImpl {\n     (impl<$($p:tt),*> Lift<$tcx:tt> for $s:path {"}, {"sha": "31c50610ac4e245b307085f206b81bab1b722ae6", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -124,7 +124,8 @@ use rustc_macros::HashStable;\n use byteorder::{WriteBytesExt, ReadBytesExt, LittleEndian, BigEndian};\n \n /// Uniquely identifies a specific constant or static.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, Lift)]\n pub struct GlobalId<'tcx> {\n     /// For a constant or static, the `Instance` of the item itself.\n     /// For a promoted global, the `Instance` of the function they belong to."}, {"sha": "93f56804a9f4f6524764a0f991bebce16f00d240", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -79,7 +79,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, Default, TypeFoldable)]\n+#[derive(Clone, Debug, Default, TypeFoldable, Lift)]\n pub struct DropckOutlivesResult<'tcx> {\n     pub kinds: Vec<GenericArg<'tcx>>,\n     pub overflows: Vec<Ty<'tcx>>,\n@@ -152,13 +152,6 @@ impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n         result\n     }\n }\n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for DropckOutlivesResult<'a> {\n-        type Lifted = DropckOutlivesResult<'tcx>;\n-        kinds, overflows\n-    }\n-}\n-\n impl_stable_hash_for!(struct DropckOutlivesResult<'tcx> {\n     kinds, overflows\n });"}, {"sha": "30528dcebdae9c3ae695055a8cb3fe15f7d7fc92", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -66,7 +66,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n }\n \n /// Result from the `normalize_projection_ty` query.\n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, Lift)]\n pub struct NormalizationResult<'tcx> {\n     /// Result of normalization.\n     pub normalized_ty: Ty<'tcx>,\n@@ -194,13 +194,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for NormalizationResult<'a> {\n-        type Lifted = NormalizationResult<'tcx>;\n-        normalized_ty\n-    }\n-}\n-\n impl_stable_hash_for!(struct NormalizationResult<'tcx> {\n     normalized_ty\n });"}, {"sha": "8b0ee5feed7bc0d376829f0625ee288ee2f6960f", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -4,7 +4,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n use crate::ty::subst::UserSubsts;\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n pub struct AscribeUserType<'tcx> {\n     pub mir_ty: Ty<'tcx>,\n     pub def_id: DefId,\n@@ -39,13 +39,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for AscribeUserType<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for AscribeUserType<'a> {\n-        type Lifted = AscribeUserType<'tcx>;\n-        mir_ty, def_id, user_substs\n-    }\n-}\n-\n impl_stable_hash_for! {\n     struct AscribeUserType<'tcx> {\n         mir_ty, def_id, user_substs"}, {"sha": "5086994fbb6edaca7b1b17223b0e6dc2c700864a", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n pub struct Eq<'tcx> {\n     pub a: Ty<'tcx>,\n     pub b: Ty<'tcx>,\n@@ -36,14 +36,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Eq<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for Eq<'a> {\n-        type Lifted = Eq<'tcx>;\n-        a,\n-        b,\n-    }\n-}\n-\n impl_stable_hash_for! {\n     struct Eq<'tcx> { a, b }\n }"}, {"sha": "f97b34f9e9a5aa9751c6eb84c042edb7f0c75832", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, Lift)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n@@ -40,13 +40,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for ImpliedOutlivesBounds<'a> {\n-        type Lifted = ImpliedOutlivesBounds<'tcx>;\n-        ty,\n-    }\n-}\n-\n impl_stable_hash_for! {\n     struct ImpliedOutlivesBounds<'tcx> { ty }\n }"}, {"sha": "798fc5224ccc6a0a0fedfaeaedf06e9e78fca2e1", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -4,7 +4,7 @@ use crate::traits::query::Fallible;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n pub struct Normalize<T> {\n     pub value: T,\n }\n@@ -83,13 +83,6 @@ impl Normalizable<'tcx> for ty::FnSig<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'tcx, T> Lift<'tcx> for Normalize<T> {\n-        type Lifted = Normalize<T::Lifted>;\n-        value,\n-    } where T: Lift<'tcx>,\n-}\n-\n impl_stable_hash_for! {\n     impl<T> for struct Normalize<T> {\n         value"}, {"sha": "d2a7fdc8946df0632506654cd448a853956a1922", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::dropck_outlives::{DropckOutlivesResult, trivial_dropck\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, Lift)]\n pub struct DropckOutlives<'tcx> {\n     dropped_ty: Ty<'tcx>,\n }\n@@ -54,13 +54,6 @@ impl super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for DropckOutlives<'a> {\n-        type Lifted = DropckOutlives<'tcx>;\n-        dropped_ty\n-    }\n-}\n-\n impl_stable_hash_for! {\n     struct DropckOutlives<'tcx> { dropped_ty }\n }"}, {"sha": "cbf485fcfe02fbef331f2d7d898c0ecdd63cf222", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n pub struct ProvePredicate<'tcx> {\n     pub predicate: Predicate<'tcx>,\n }\n@@ -45,13 +45,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for ProvePredicate<'a> {\n-        type Lifted = ProvePredicate<'tcx>;\n-        predicate,\n-    }\n-}\n-\n impl_stable_hash_for! {\n     struct ProvePredicate<'tcx> { predicate }\n }"}, {"sha": "bd53e234a6a4906d83c7ab3bc0e667432d674894", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, TypeFoldable, Lift)]\n pub struct Subtype<'tcx> {\n     pub sub: Ty<'tcx>,\n     pub sup: Ty<'tcx>,\n@@ -36,14 +36,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Subtype<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for Subtype<'a> {\n-        type Lifted = Subtype<'tcx>;\n-        sub,\n-        sup,\n-    }\n-}\n-\n impl_stable_hash_for! {\n     struct Subtype<'tcx> { sub, sup }\n }"}, {"sha": "870a21c0489b965dcc0f3e2c76c8f2fb9ecdc12e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -826,20 +826,13 @@ rustc_index::newtype_index! {\n pub type CanonicalUserTypeAnnotations<'tcx> =\n     IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable, Lift)]\n pub struct CanonicalUserTypeAnnotation<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n     pub span: Span,\n     pub inferred_ty: Ty<'tcx>,\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for CanonicalUserTypeAnnotation<'a> {\n-        type Lifted = CanonicalUserTypeAnnotation<'tcx>;\n-        user_ty, span, inferred_ty\n-    }\n-}\n-\n /// Canonicalized user type annotation.\n pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;\n "}, {"sha": "7eee0a5e2b52cc5ddbe9ab9f1e8d3aa30045a216", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -12,7 +12,8 @@ use rustc_macros::HashStable;\n use std::fmt;\n use std::iter;\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, Lift)]\n pub struct Instance<'tcx> {\n     pub def: InstanceDef<'tcx>,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "ccac7720914fcce7e5294d71781e0e228e67a161", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -1,7 +1,6 @@\n //! This module contains implements of the `Lift` and `TypeFoldable`\n //! traits for various types in the Rust compiler. Most are written by\n-//! hand, though we've recently added some macros (e.g.,\n-//! `BraceStructLiftImpl!`) to help with the tedium.\n+//! hand, though we've recently added some macros and proc-macros to help with the tedium.\n \n use crate::hir::def::Namespace;\n use crate::mir::ProjectionKind;\n@@ -779,27 +778,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for ty::TypeAndMut<'a> {\n-        type Lifted = ty::TypeAndMut<'tcx>;\n-        ty, mutbl\n-    }\n-}\n-\n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for ty::Instance<'a> {\n-        type Lifted = ty::Instance<'tcx>;\n-        def, substs\n-    }\n-}\n-\n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for interpret::GlobalId<'a> {\n-        type Lifted = interpret::GlobalId<'tcx>;\n-        instance, promoted\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n //"}, {"sha": "fa22709d66fc4dffd63a2a3ed3902a5262b047eb", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -30,7 +30,7 @@ use self::InferTy::*;\n use self::TyKind::*;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, Lift)]\n pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: hir::Mutability,"}, {"sha": "a8a17fe9d7d8808bfd69fc6fabe2209fbeb285ab", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -731,7 +731,7 @@ pub type CanonicalUserSubsts<'tcx> = Canonical<'tcx, UserSubsts<'tcx>>;\n /// Stores the user-given substs to reach some fully qualified path\n /// (e.g., `<T>::Item` or `<T as Trait>::Item`).\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, Lift)]\n pub struct UserSubsts<'tcx> {\n     /// The substitutions for the item as given by the user.\n     pub substs: SubstsRef<'tcx>,\n@@ -741,14 +741,6 @@ pub struct UserSubsts<'tcx> {\n     pub user_self_ty: Option<UserSelfTy<'tcx>>,\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for UserSubsts<'a> {\n-        type Lifted = UserSubsts<'tcx>;\n-        substs,\n-        user_self_ty,\n-    }\n-}\n-\n /// Specifies the user-given self type. In the case of a path that\n /// refers to a member in an inherent impl, this self type is\n /// sometimes needed to constrain the type parameters on the impl. For\n@@ -766,16 +758,8 @@ BraceStructLiftImpl! {\n /// the self type, giving `Foo<?A>`. Finally, we unify that with\n /// the self type here, which contains `?A` to be `&'static u32`\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, Lift)]\n pub struct UserSelfTy<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,\n }\n-\n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for UserSelfTy<'a> {\n-        type Lifted = UserSelfTy<'tcx>;\n-        impl_def_id,\n-        self_ty,\n-    }\n-}"}, {"sha": "b0dcdc7486e0795238d38c943f28792236583217", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033d1df19b3835c184dabfa1c7cab42337fa36b6/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=033d1df19b3835c184dabfa1c7cab42337fa36b6", "patch": "@@ -38,7 +38,7 @@ use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{GenericArg, GenericArgKind};\n use syntax_pos::DUMMY_SP;\n-use rustc_macros::TypeFoldable;\n+use rustc_macros::{TypeFoldable, Lift};\n \n use std::fmt::{self, Debug};\n use std::marker::PhantomData;\n@@ -66,7 +66,7 @@ crate struct UniverseMap;\n \n crate type RegionConstraint<'tcx> = ty::OutlivesPredicate<GenericArg<'tcx>, ty::Region<'tcx>>;\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, TypeFoldable, Lift)]\n crate struct ConstrainedSubst<'tcx> {\n     subst: CanonicalVarValues<'tcx>,\n     constraints: Vec<RegionConstraint<'tcx>>,\n@@ -581,14 +581,6 @@ impl ExClauseFold<'tcx> for ChalkArenas<'tcx> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for ConstrainedSubst<'a> {\n-        type Lifted = ConstrainedSubst<'tcx>;\n-\n-        subst, constraints\n-    }\n-}\n-\n trait Upcast<'tcx>: 'tcx {\n     type Upcasted: 'tcx;\n "}]}