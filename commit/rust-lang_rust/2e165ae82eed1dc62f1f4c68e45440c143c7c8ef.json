{"sha": "2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMTY1YWU4MmVlZDFkYzYyZjFmNGM2OGU0NTQ0MGMxNDNjN2M4ZWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T14:49:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T14:49:45Z"}, "message": "logging", "tree": {"sha": "4148d68878bbd05a0c7b7f4ace803083f23293fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4148d68878bbd05a0c7b7f4ace803083f23293fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "html_url": "https://github.com/rust-lang/rust/commit/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7c5a6f3081c2e7266620779d3c32067f947b959", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c5a6f3081c2e7266620779d3c32067f947b959", "html_url": "https://github.com/rust-lang/rust/commit/d7c5a6f3081c2e7266620779d3c32067f947b959"}], "stats": {"total": 348, "additions": 233, "deletions": 115}, "files": [{"sha": "55dd9165ca045a730a1335ae30ba76f7335d5b47", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -5,7 +5,7 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n license = \"MIT OR Apache-2.0\"\n \n [workspace]\n-members = [ \"tools\", \"cli\", \"libeditor\", \"libanalysis\" ]\n+members = [ \"tools\", \"cli\", \"libeditor\", \"libanalysis\", \"codeless/server\" ]\n \n [dependencies]\n unicode-xid = \"0.1.0\""}, {"sha": "45e0a1e4f726c8bcfbdee9332eb6d561eb44ce30", "filename": "cli/src/main.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2Fsrc%2Fmain.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -10,7 +10,7 @@ use std::{\n };\n use clap::{App, Arg, SubCommand};\n use tools::collect_tests;\n-use libeditor::File;\n+use libeditor::{ast, syntax_tree, symbols};\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -44,14 +44,14 @@ fn main() -> Result<()> {\n             let file = file()?;\n             let elapsed = start.elapsed();\n             if !matches.is_present(\"no-dump\") {\n-                println!(\"{}\", file.syntax_tree());\n+                println!(\"{}\", syntax_tree(&file));\n             }\n             eprintln!(\"parsing: {:?}\", elapsed);\n             ::std::mem::forget(file);\n         }\n         (\"symbols\", _) => {\n             let file = file()?;\n-            for s in file.symbols() {\n+            for s in symbols(&file) {\n                 println!(\"{:?}\", s);\n             }\n         }\n@@ -68,9 +68,9 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n-fn file() -> Result<File> {\n+fn file() -> Result<ast::File> {\n     let text = read_stdin()?;\n-    Ok(File::new(&text))\n+    Ok(ast::File::parse(&text))\n }\n \n fn read_stdin() -> Result<String> {\n@@ -89,7 +89,7 @@ fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n         None => bail!(\"No test found at line {} at {}\", line, file.display()),\n         Some((_start_line, test)) => test,\n     };\n-    let file = File::new(&test.text);\n-    let tree = file.syntax_tree();\n+    let file = ast::File::parse(&test.text);\n+    let tree = syntax_tree(&file);\n     Ok((test.text, tree))\n }"}, {"sha": "5a50b7f98af55f170e1fdf31eb39caff1e628297", "filename": "codeless/server/.gitignore", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2F.gitignore?ref=d7c5a6f3081c2e7266620779d3c32067f947b959", "patch": "@@ -1 +0,0 @@\n-/target/*"}, {"sha": "f5c32b8787b790a01b6406428c71501ade9efee7", "filename": "codeless/server/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2FCargo.toml?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -2,7 +2,6 @@\n name = \"m\"\n version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n-[workspace]\n \n [dependencies]\n failure = \"0.1.2\"\n@@ -12,5 +11,8 @@ serde = \"1.0.71\"\n serde_derive = \"1.0.71\"\n drop_bomb = \"0.1.0\"\n crossbeam-channel = \"0.2.4\"\n+threadpool = \"1.7.1\"\n+flexi_logger = \"0.9.0\"\n+log = \"0.4.3\"\n libeditor = { path = \"../../libeditor\" }\n libanalysis = { path = \"../../libanalysis\" }"}, {"sha": "ee87fa6c3103cd8cdc8cd01ce806a60dde37c299", "filename": "codeless/server/src/dispatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fserver%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fserver%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Fdispatch.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -24,8 +24,8 @@ impl<R: Request> Responder<R>\n         R::Params: DeserializeOwned,\n         R::Result: Serialize,\n {\n-    pub fn respond_with(self, io: &mut Io, f: impl FnOnce() -> Result<R::Result>) -> Result<()> {\n-        match f() {\n+    pub fn response(self, io: &mut Io, resp: Result<R::Result>) -> Result<()> {\n+        match resp {\n             Ok(res) => self.result(io, res)?,\n             Err(e) => {\n                 self.error(io)?;"}, {"sha": "5eafc6942259f9e13e190dce4a9538ad608c509e", "filename": "codeless/server/src/io.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fserver%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fserver%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Fio.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -49,16 +49,21 @@ impl MsgReceiver {\n         match self.chan.recv() {\n             Some(msg) => Ok(msg),\n             None => {\n-                self.thread\n-                    .take()\n-                    .ok_or_else(|| format_err!(\"MsgReceiver thread panicked\"))?\n-                    .join()\n-                    .map_err(|_| format_err!(\"MsgReceiver thread panicked\"))??;\n-                bail!(\"client disconnected\")\n+                self.cleanup()?;\n+                unreachable!()\n             }\n         }\n     }\n \n+    fn cleanup(&mut self) -> Result<()> {\n+        self.thread\n+            .take()\n+            .ok_or_else(|| format_err!(\"MsgReceiver thread panicked\"))?\n+            .join()\n+            .map_err(|_| format_err!(\"MsgReceiver thread panicked\"))??;\n+        bail!(\"client disconnected\")\n+    }\n+\n     fn stop(self) -> Result<()> {\n         // Can't really self.thread.join() here, b/c it might be\n         // blocking on read\n@@ -68,36 +73,22 @@ impl MsgReceiver {\n \n struct MsgSender {\n     chan: Sender<RawMsg>,\n-    thread: Option<thread::JoinHandle<Result<()>>>,\n+    thread: thread::JoinHandle<Result<()>>,\n }\n \n impl MsgSender {\n     fn send(&mut self, msg: RawMsg) {\n         self.chan.send(msg)\n     }\n \n-    fn stop(mut self) -> Result<()> {\n-        if let Some(thread) = self.thread.take() {\n-            thread.join()\n-                .map_err(|_| format_err!(\"MsgSender thread panicked\"))??\n-        }\n+    fn stop(self) -> Result<()> {\n+        drop(self.chan);\n+        self.thread.join()\n+            .map_err(|_| format_err!(\"MsgSender thread panicked\"))??;\n         Ok(())\n     }\n }\n \n-impl Drop for MsgSender {\n-    fn drop(&mut self) {\n-        if let Some(thread) = self.thread.take() {\n-            let res = thread.join();\n-            if thread::panicking() {\n-                drop(res)\n-            } else {\n-                res.unwrap().unwrap()\n-            }\n-        }\n-    }\n-}\n-\n pub struct Io {\n     receiver: MsgReceiver,\n     sender: MsgSender,\n@@ -109,7 +100,7 @@ impl Io {\n             let (tx, rx) = bounded(16);\n             MsgSender {\n                 chan: tx,\n-                thread: Some(thread::spawn(move || {\n+                thread: thread::spawn(move || {\n                     let stdout = stdout();\n                     let mut stdout = stdout.lock();\n                     for msg in rx {\n@@ -126,7 +117,7 @@ impl Io {\n                         write_msg_text(&mut stdout, &text)?;\n                     }\n                     Ok(())\n-                })),\n+                }),\n             }\n         };\n         let receiver = {\n@@ -155,6 +146,14 @@ impl Io {\n         self.receiver.recv()\n     }\n \n+    pub fn receiver(&mut self) -> &mut Receiver<RawMsg> {\n+        &mut self.receiver.chan\n+    }\n+\n+    pub fn cleanup_receiver(&mut self) -> Result<()> {\n+        self.receiver.cleanup()\n+    }\n+\n     pub fn stop(self) -> Result<()> {\n         self.receiver.stop()?;\n         self.sender.stop()?;\n@@ -190,10 +189,12 @@ fn read_msg_text(inp: &mut impl BufRead) -> Result<Option<String>> {\n     buf.resize(size, 0);\n     inp.read_exact(&mut buf)?;\n     let buf = String::from_utf8(buf)?;\n+    debug!(\"< {}\", buf);\n     Ok(Some(buf))\n }\n \n fn write_msg_text(out: &mut impl Write, msg: &str) -> Result<()> {\n+    debug!(\"> {}\", msg);\n     write!(out, \"Content-Length: {}\\r\\n\\r\\n\", msg.len())?;\n     out.write_all(msg.as_bytes())?;\n     out.flush()?;"}, {"sha": "92f6a400ca214d56d43d5684d0895d3091094f7d", "filename": "codeless/server/src/main.rs", "status": "modified", "additions": 112, "deletions": 14, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Fmain.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -6,7 +6,12 @@ extern crate serde;\n extern crate serde_json;\n extern crate languageserver_types;\n extern crate drop_bomb;\n+#[macro_use]\n extern crate crossbeam_channel;\n+extern crate threadpool;\n+#[macro_use]\n+extern crate log;\n+extern crate flexi_logger;\n extern crate libeditor;\n extern crate libanalysis;\n \n@@ -16,16 +21,50 @@ mod req;\n mod dispatch;\n \n use languageserver_types::InitializeResult;\n+use threadpool::ThreadPool;\n+use crossbeam_channel::{bounded, Sender, Receiver};\n+use flexi_logger::Logger;\n use libanalysis::WorldState;\n-use self::io::{Io, RawMsg};\n+\n+use ::{\n+    io::{Io, RawMsg},\n+};\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n \n fn main() -> Result<()> {\n+    Logger::with_env_or_str(\"m=trace\")\n+        .log_to_file()\n+        .directory(\"log\")\n+        .start()?;\n+    info!(\"starting server\");\n+    match ::std::panic::catch_unwind(|| main_inner()) {\n+        Ok(res) => {\n+            info!(\"shutting down: {:?}\", res);\n+            res\n+        }\n+        Err(_) => {\n+            error!(\"server panicked\");\n+            bail!(\"server panicked\")\n+        },\n+    }\n+}\n+\n+fn main_inner() -> Result<()> {\n     let mut io = Io::from_stdio();\n-    initialize(&mut io)?;\n-    io.stop()?;\n-    Ok(())\n+    let res = initialize(&mut io);\n+    info!(\"shutting down IO...\");\n+    let io_res = io.stop();\n+    info!(\"... IO is down\");\n+    match (res, io_res) {\n+        (Ok(()), Ok(())) => Ok(()),\n+        (res, Ok(())) => res,\n+        (Ok(()), io_res) => io_res,\n+        (res, Err(io_err)) => {\n+            error!(\"shutdown error: {:?}\", io_err);\n+            res\n+        }\n+    }\n }\n \n fn initialize(io: &mut Io) -> Result<()> {\n@@ -59,20 +98,69 @@ fn initialize(io: &mut Io) -> Result<()> {\n     }\n }\n \n+type Thunk = Box<for<'a> FnBox<&'a mut Io, Result<()>>>;\n+\n fn initialized(io: &mut Io) -> Result<()> {\n-    eprintln!(\"initialized\");\n-    let world = WorldState::new();\n+    let mut world = WorldState::new();\n+    let mut pool = ThreadPool::new(4);\n+    let (sender, receiver) = bounded::<Thunk>(16);\n+    let res = main_loop(io, &mut world, &mut pool, sender, receiver.clone());\n+    info!(\"waiting for background jobs to finish...\");\n+    receiver.for_each(drop);\n+    info!(\"...background jobs have finished\");\n+    res\n+}\n+\n+fn main_loop(\n+    io: &mut Io,\n+    world: &mut WorldState,\n+    pool: &mut ThreadPool,\n+    sender: Sender<Thunk>,\n+    receiver: Receiver<Thunk>,\n+) -> Result<()> {\n+    info!(\"server initialized, serving requests\");\n     loop {\n-        match io.recv()? {\n+        enum Event {\n+            Msg(RawMsg),\n+            Thunk(Thunk),\n+            ReceiverDead,\n+        }\n+\n+        let event = select! {\n+            recv(io.receiver(), msg) => match msg {\n+                Some(msg) => Event::Msg(msg),\n+                None => Event::ReceiverDead,\n+            },\n+            recv(receiver, thunk) => Event::Thunk(thunk.unwrap()),\n+        };\n+\n+        let msg = match event {\n+            Event::ReceiverDead => {\n+                io.cleanup_receiver()?;\n+                unreachable!();\n+            }\n+            Event::Thunk(thunk) => {\n+                thunk.call_box(io)?;\n+                continue;\n+            }\n+            Event::Msg(msg) => msg,\n+        };\n+\n+        match msg {\n             RawMsg::Request(req) => {\n-                let world = world.snapshot();\n                 if let Some((params, resp)) = dispatch::expect::<req::SyntaxTree>(io, req)? {\n-                    resp.respond_with(io, || {\n-                        let path = params.text_document.uri.to_file_path()\n-                            .map_err(|()| format_err!(\"invalid path\"))?;\n-                        let file = world.file_syntax(&path)?;\n-                        Ok(libeditor::syntax_tree(&file))\n-                    })?\n+                    let world = world.snapshot();\n+                    let sender = sender.clone();\n+                    pool.execute(move || {\n+                        let res: Result<String> = (|| {\n+                            let path = params.text_document.uri.to_file_path()\n+                                .map_err(|()| format_err!(\"invalid path\"))?;\n+                            let file = world.file_syntax(&path)?;\n+                            Ok(libeditor::syntax_tree(&file))\n+                        })();\n+\n+                        sender.send(Box::new(|io: &mut Io| resp.response(io, res)))\n+                    });\n                 }\n             }\n             msg => {\n@@ -82,3 +170,13 @@ fn initialized(io: &mut Io) -> Result<()> {\n     }\n }\n \n+\n+trait FnBox<A, R>: Send {\n+    fn call_box(self: Box<Self>, a: A) -> R;\n+}\n+\n+impl<A, R, F: FnOnce(A) -> R + Send> FnBox<A, R> for F {\n+    fn call_box(self: Box<F>, a: A) -> R {\n+        (*self)(a)\n+    }\n+}"}, {"sha": "a37ac20112713c1c5cb09864cb026179d7a2aaef", "filename": "codeless/server/target/.rustc_info.json", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2Ftarget%2F.rustc_info.json", "raw_url": "https://github.com/rust-lang/rust/raw/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2Ftarget%2F.rustc_info.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Ftarget%2F.rustc_info.json?ref=d7c5a6f3081c2e7266620779d3c32067f947b959", "patch": "@@ -1 +0,0 @@\n-{\"rustc_fingerprint\":11898242945176772229,\"outputs\":{\"15337506775154344876\":[\"___\\nlib___.rlib\\nlib___.so\\nlib___.so\\nlib___.a\\nlib___.so\\n/home/matklad/.rustup/toolchains/stable-x86_64-unknown-linux-gnu\\ndebug_assertions\\nproc_macro\\ntarget_arch=\\\"x86_64\\\"\\ntarget_endian=\\\"little\\\"\\ntarget_env=\\\"gnu\\\"\\ntarget_family=\\\"unix\\\"\\ntarget_feature=\\\"fxsr\\\"\\ntarget_feature=\\\"sse\\\"\\ntarget_feature=\\\"sse2\\\"\\ntarget_os=\\\"linux\\\"\\ntarget_pointer_width=\\\"64\\\"\\nunix\\n\",\"\"],\"1617349019360157463\":[\"___\\nlib___.rlib\\nlib___.so\\nlib___.so\\nlib___.a\\nlib___.so\\n/home/matklad/.rustup/toolchains/stable-x86_64-unknown-linux-gnu\\ndebug_assertions\\nproc_macro\\ntarget_arch=\\\"x86_64\\\"\\ntarget_endian=\\\"little\\\"\\ntarget_env=\\\"gnu\\\"\\ntarget_family=\\\"unix\\\"\\ntarget_feature=\\\"fxsr\\\"\\ntarget_feature=\\\"sse\\\"\\ntarget_feature=\\\"sse2\\\"\\ntarget_os=\\\"linux\\\"\\ntarget_pointer_width=\\\"64\\\"\\nunix\\n\",\"\"],\"1164083562126845933\":[\"rustc 1.28.0 (9634041f0 2018-07-30)\\nbinary: rustc\\ncommit-hash: 9634041f0e8c0f3191d2867311276f19d0a42564\\ncommit-date: 2018-07-30\\nhost: x86_64-unknown-linux-gnu\\nrelease: 1.28.0\\nLLVM version: 6.0\\n\",\"\"]}}\n\\ No newline at end of file"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "codeless/server/target/debug/.cargo-lock", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2Ftarget%2Fdebug%2F.cargo-lock", "raw_url": "https://github.com/rust-lang/rust/raw/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2Ftarget%2Fdebug%2F.cargo-lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Ftarget%2Fdebug%2F.cargo-lock?ref=d7c5a6f3081c2e7266620779d3c32067f947b959"}, {"sha": "04d8bb9ed7f59c9e54ba7259956e3784d82dc5f8", "filename": "codeless/server/target/debug/libm.d", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2Ftarget%2Fdebug%2Flibm.d", "raw_url": "https://github.com/rust-lang/rust/raw/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2Ftarget%2Fdebug%2Flibm.d", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Ftarget%2Fdebug%2Flibm.d?ref=d7c5a6f3081c2e7266620779d3c32067f947b959", "patch": "@@ -1 +0,0 @@\n-/home/matklad/projects/libsyntax2/codeless/server/target/debug/libm.rmeta: /home/matklad/projects/libsyntax2/codeless/server/src/caps.rs /home/matklad/projects/libsyntax2/codeless/server/src/dispatch.rs /home/matklad/projects/libsyntax2/codeless/server/src/io.rs /home/matklad/projects/libsyntax2/codeless/server/src/main.rs /home/matklad/projects/libsyntax2/codeless/server/src/req.rs /home/matklad/projects/libsyntax2/libanalysis/src/lib.rs /home/matklad/projects/libsyntax2/libeditor/src/extend_selection.rs /home/matklad/projects/libsyntax2/libeditor/src/lib.rs /home/matklad/projects/libsyntax2/src/algo/mod.rs /home/matklad/projects/libsyntax2/src/algo/walk.rs /home/matklad/projects/libsyntax2/src/ast/generated.rs /home/matklad/projects/libsyntax2/src/ast/mod.rs /home/matklad/projects/libsyntax2/src/grammar/attributes.rs /home/matklad/projects/libsyntax2/src/grammar/expressions/atom.rs /home/matklad/projects/libsyntax2/src/grammar/expressions/mod.rs /home/matklad/projects/libsyntax2/src/grammar/items/consts.rs /home/matklad/projects/libsyntax2/src/grammar/items/mod.rs /home/matklad/projects/libsyntax2/src/grammar/items/structs.rs /home/matklad/projects/libsyntax2/src/grammar/items/traits.rs /home/matklad/projects/libsyntax2/src/grammar/items/use_item.rs /home/matklad/projects/libsyntax2/src/grammar/mod.rs /home/matklad/projects/libsyntax2/src/grammar/params.rs /home/matklad/projects/libsyntax2/src/grammar/paths.rs /home/matklad/projects/libsyntax2/src/grammar/patterns.rs /home/matklad/projects/libsyntax2/src/grammar/type_args.rs /home/matklad/projects/libsyntax2/src/grammar/type_params.rs /home/matklad/projects/libsyntax2/src/grammar/types.rs /home/matklad/projects/libsyntax2/src/lexer/classes.rs /home/matklad/projects/libsyntax2/src/lexer/comments.rs /home/matklad/projects/libsyntax2/src/lexer/mod.rs /home/matklad/projects/libsyntax2/src/lexer/numbers.rs /home/matklad/projects/libsyntax2/src/lexer/ptr.rs /home/matklad/projects/libsyntax2/src/lexer/strings.rs /home/matklad/projects/libsyntax2/src/lib.rs /home/matklad/projects/libsyntax2/src/parser_api.rs /home/matklad/projects/libsyntax2/src/parser_impl/event.rs /home/matklad/projects/libsyntax2/src/parser_impl/input.rs /home/matklad/projects/libsyntax2/src/parser_impl/mod.rs /home/matklad/projects/libsyntax2/src/smol_str.rs /home/matklad/projects/libsyntax2/src/syntax_kinds/generated.rs /home/matklad/projects/libsyntax2/src/syntax_kinds/mod.rs /home/matklad/projects/libsyntax2/src/utils.rs /home/matklad/projects/libsyntax2/src/yellow/builder.rs /home/matklad/projects/libsyntax2/src/yellow/green.rs /home/matklad/projects/libsyntax2/src/yellow/mod.rs /home/matklad/projects/libsyntax2/src/yellow/red.rs /home/matklad/projects/libsyntax2/src/yellow/syntax.rs"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "codeless/server/target/debug/libm.rmeta", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2Ftarget%2Fdebug%2Flibm.rmeta", "raw_url": "https://github.com/rust-lang/rust/raw/d7c5a6f3081c2e7266620779d3c32067f947b959/codeless%2Fserver%2Ftarget%2Fdebug%2Flibm.rmeta", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Ftarget%2Fdebug%2Flibm.rmeta?ref=d7c5a6f3081c2e7266620779d3c32067f947b959"}, {"sha": "c64065e6bfc6cbaf9682ec83b0204d4408c6d73d", "filename": "codeless/src/extension.ts", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/codeless%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fsrc%2Fextension.ts?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -43,10 +43,8 @@ export function deactivate(): Thenable<void> {\n function startServer() {\n     let run: Executable = {\n         command: \"cargo\",\n-        args: [\"run\"],\n-        options: {\n-            cwd: \"./server\"\n-        }\n+        args: [\"run\", \"--package\", \"m\"],\n+        options: { cwd: \".\" }\n     }\n     let serverOptions: ServerOptions = {\n         run,"}, {"sha": "4e9631a8b89b6c47b6cdb9f472435e1c9d731667", "filename": "libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/libeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/libeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Fsrc%2Flib.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -6,9 +6,8 @@ use libsyntax2::{\n     SyntaxNodeRef, AstNode,\n     algo::walk,\n     SyntaxKind::*,\n-    ast,\n };\n-pub use libsyntax2::{TextRange, TextUnit};\n+pub use libsyntax2::{TextRange, TextUnit, ast};\n \n #[derive(Debug)]\n pub struct HighlightedRange {"}, {"sha": "2a84c50806bb58325cba3f5756d519d31d44fa63", "filename": "libeditor/tests/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/libeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/libeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Ftests%2Ftest.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -3,7 +3,7 @@ extern crate itertools;\n \n use std::fmt;\n use itertools::Itertools;\n-use libeditor::{File, TextRange};\n+use libeditor::{ast, highlight, runnables, extend_selection, TextRange};\n \n #[test]\n fn test_extend_selection() {\n@@ -12,9 +12,9 @@ fn test_extend_selection() {\n }\n \"#);\n     let range = TextRange::offset_len(18.into(), 0.into());\n-    let range = file.extend_selection(range).unwrap();\n+    let range = extend_selection(&file, range).unwrap();\n     assert_eq!(range, TextRange::from_to(17.into(), 18.into()));\n-    let range = file.extend_selection(range).unwrap();\n+    let range = extend_selection(&file, range).unwrap();\n     assert_eq!(range, TextRange::from_to(15.into(), 20.into()));\n }\n \n@@ -25,7 +25,7 @@ fn test_highlighting() {\n fn main() {}\n     println!(\"Hello, {}!\", 92);\n \"#);\n-    let hls = file.highlight();\n+    let hls = highlight(&file);\n     dbg_eq(\n         &hls,\n         r#\"[HighlightedRange { range: [1; 11), tag: \"comment\" },\n@@ -49,7 +49,7 @@ fn test_foo() {}\n #[ignore]\n fn test_foo() {}\n \"#);\n-    let runnables = file.runnables();\n+    let runnables = runnables(&file);\n     dbg_eq(\n         &runnables,\n         r#\"[Runnable { range: [1; 13), kind: Bin },\n@@ -58,8 +58,8 @@ fn test_foo() {}\n     )\n }\n \n-fn file(text: &str) -> File {\n-    File::new(text)\n+fn file(text: &str) -> ast::File {\n+    ast::File::parse(text)\n }\n \n fn dbg_eq(actual: &impl fmt::Debug, expected: &str) {"}, {"sha": "f505b26d7a2bf974986d1a1dd3b1e98e17a9cd28", "filename": "src/yellow/green.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -56,12 +56,6 @@ impl GreenNode {\n     }\n }\n \n-#[test]\n-fn assert_send_sync() {\n-    fn f<T: Send + Sync>() {}\n-    f::<GreenNode>();\n-}\n-\n #[derive(Clone, Debug)]\n pub(crate) struct GreenBranch {\n     text_len: TextUnit,"}, {"sha": "ff3bb221b229ffc59d85ea937053e06a65a7a0a7", "filename": "src/yellow/mod.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/src%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/src%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fmod.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -3,9 +3,60 @@ mod green;\n mod red;\n mod syntax;\n \n-pub use self::syntax::{SyntaxNode, SyntaxNodeRef, SyntaxRoot, TreeRoot, SyntaxError};\n+use std::{\n+    ops::Deref,\n+    sync::Arc,\n+    ptr,\n+};\n+pub use self::syntax::{SyntaxNode, SyntaxNodeRef, SyntaxError};\n pub(crate) use self::{\n     builder::GreenBuilder,\n     green::GreenNode,\n     red::RedNode,\n };\n+\n+pub trait TreeRoot: Deref<Target=SyntaxRoot> + Clone + Send + Sync {}\n+\n+#[derive(Debug)]\n+pub struct SyntaxRoot {\n+    red: RedNode,\n+    pub(crate) errors: Vec<SyntaxError>,\n+}\n+\n+impl TreeRoot for Arc<SyntaxRoot> {}\n+\n+impl<'a> TreeRoot for &'a SyntaxRoot {}\n+\n+impl SyntaxRoot {\n+    pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> SyntaxRoot {\n+        SyntaxRoot {\n+            red: RedNode::new_root(green),\n+            errors,\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub(crate) struct RedPtr(ptr::NonNull<RedNode>);\n+\n+unsafe impl Send for RedPtr {}\n+\n+unsafe impl Sync for RedPtr {}\n+\n+impl RedPtr {\n+    fn new(red: &RedNode) -> RedPtr {\n+        RedPtr(red.into())\n+    }\n+\n+    unsafe fn get<'a>(self, _root: &'a impl TreeRoot) -> &'a RedNode {\n+        &*self.0.as_ptr()\n+    }\n+}\n+\n+#[test]\n+fn assert_send_sync() {\n+    fn f<T: Send + Sync>() {}\n+    f::<GreenNode>();\n+    f::<RedNode>();\n+    f::<SyntaxNode>();\n+}"}, {"sha": "13ad44c65cf9f5c32d61f9a180e1175709202546", "filename": "src/yellow/red.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/src%2Fyellow%2Fred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/src%2Fyellow%2Fred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fred.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -1,7 +1,5 @@\n-use std::ptr;\n-\n use parking_lot::RwLock;\n-use {yellow::GreenNode, TextUnit};\n+use {yellow::{GreenNode, RedPtr}, TextUnit};\n \n #[derive(Debug)]\n pub(crate) struct RedNode {\n@@ -12,7 +10,7 @@ pub(crate) struct RedNode {\n \n #[derive(Debug)]\n struct ParentData {\n-    parent: ptr::NonNull<RedNode>,\n+    parent: RedPtr,\n     start_offset: TextUnit,\n     index_in_parent: usize,\n }\n@@ -24,7 +22,7 @@ impl RedNode {\n \n     fn new_child(\n         green: GreenNode,\n-        parent: ptr::NonNull<RedNode>,\n+        parent: RedPtr,\n         start_offset: TextUnit,\n         index_in_parent: usize,\n     ) -> RedNode {\n@@ -64,12 +62,12 @@ impl RedNode {\n         self.green.children().len()\n     }\n \n-    pub(crate) fn get_child(&self, idx: usize) -> Option<ptr::NonNull<RedNode>> {\n+    pub(crate) fn get_child(&self, idx: usize) -> Option<RedPtr> {\n         if idx >= self.n_children() {\n             return None;\n         }\n         match &self.children.read()[idx] {\n-            Some(child) => return Some(child.into()),\n+            Some(child) => return Some(RedPtr::new(child)),\n             None => (),\n         };\n         let green_children = self.green.children();\n@@ -79,15 +77,15 @@ impl RedNode {\n             .map(|x| x.text_len())\n             .sum::<TextUnit>();\n         let child =\n-            RedNode::new_child(green_children[idx].clone(), self.into(), start_offset, idx);\n+            RedNode::new_child(green_children[idx].clone(), RedPtr::new(self), start_offset, idx);\n         let mut children = self.children.write();\n         if children[idx].is_none() {\n             children[idx] = Some(child)\n         }\n-        Some(children[idx].as_ref().unwrap().into())\n+        Some(RedPtr::new(children[idx].as_ref().unwrap()))\n     }\n \n-    pub(crate) fn parent(&self) -> Option<ptr::NonNull<RedNode>> {\n+    pub(crate) fn parent(&self) -> Option<RedPtr> {\n         Some(self.parent.as_ref()?.parent)\n     }\n     pub(crate) fn index_in_parent(&self) -> Option<usize> {"}, {"sha": "6e33310f1b7f269873ce215dd720fdeb09d85f19", "filename": "src/yellow/syntax.rs", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/src%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef/src%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fsyntax.rs?ref=2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "patch": "@@ -1,25 +1,23 @@\n-use std::{fmt, ops::Deref, ptr, sync::Arc};\n+use std::{fmt, sync::Arc};\n \n use {\n-    yellow::{GreenNode, RedNode},\n+    yellow::{RedNode, TreeRoot, SyntaxRoot, RedPtr},\n     SyntaxKind::{self, *},\n     TextRange, TextUnit,\n };\n \n-pub trait TreeRoot: Deref<Target = SyntaxRoot> + Clone {}\n-\n-impl TreeRoot for Arc<SyntaxRoot> {}\n-\n-impl<'a> TreeRoot for &'a SyntaxRoot {}\n \n #[derive(Clone, Copy)]\n pub struct SyntaxNode<R: TreeRoot = Arc<SyntaxRoot>> {\n     pub(crate) root: R,\n     // Guaranteed to not dangle, because `root` holds a\n     // strong reference to red's ancestor\n-    red: ptr::NonNull<RedNode>,\n+    red: RedPtr,\n }\n \n+unsafe impl<R: TreeRoot> Send for SyntaxNode<R> {}\n+unsafe impl<R: TreeRoot> Sync for SyntaxNode<R> {}\n+\n impl<R1: TreeRoot, R2: TreeRoot> PartialEq<SyntaxNode<R1>> for SyntaxNode<R2> {\n     fn eq(&self, other: &SyntaxNode<R1>) -> bool {\n         self.red == other.red\n@@ -30,21 +28,6 @@ impl<R: TreeRoot> Eq for SyntaxNode<R> {}\n \n pub type SyntaxNodeRef<'a> = SyntaxNode<&'a SyntaxRoot>;\n \n-#[derive(Debug)]\n-pub struct SyntaxRoot {\n-    red: RedNode,\n-    pub(crate) errors: Vec<SyntaxError>,\n-}\n-\n-impl SyntaxRoot {\n-    pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> SyntaxRoot {\n-        SyntaxRoot {\n-            red: RedNode::new_root(green),\n-            errors,\n-        }\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n pub struct SyntaxError {\n     pub msg: String,\n@@ -54,19 +37,16 @@ pub struct SyntaxError {\n impl SyntaxNode<Arc<SyntaxRoot>> {\n     pub(crate) fn new_owned(root: SyntaxRoot) -> Self {\n         let root = Arc::new(root);\n-        let red_weak = ptr::NonNull::from(&root.red);\n-        SyntaxNode {\n-            root,\n-            red: red_weak,\n-        }\n+        let red = RedPtr::new(&root.red);\n+        SyntaxNode { root, red }\n     }\n }\n \n impl<R: TreeRoot> SyntaxNode<R> {\n     pub fn as_ref<'a>(&'a self) -> SyntaxNode<&'a SyntaxRoot> {\n         SyntaxNode {\n             root: &*self.root,\n-            red: ptr::NonNull::clone(&self.red),\n+            red: self.red,\n         }\n     }\n \n@@ -120,7 +100,7 @@ impl<R: TreeRoot> SyntaxNode<R> {\n     }\n \n     fn red(&self) -> &RedNode {\n-        unsafe { self.red.as_ref() }\n+        unsafe { self.red.get(&self.root) }\n     }\n }\n "}]}