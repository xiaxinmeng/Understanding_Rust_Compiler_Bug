{"sha": "d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjRjNDhiNDk5MjliOWQ1ZGU3ZDY1YzYwOGEyNDRhMWI1ZjllODE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-25T19:48:12Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-25T23:19:00Z"}, "message": "rustdoc: Render visibilities succinctly", "tree": {"sha": "c194a947cc417b06d9f507ef450921f2c31f9b32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c194a947cc417b06d9f507ef450921f2c31f9b32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "html_url": "https://github.com/rust-lang/rust/commit/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d10d3e49d9784ba3833ccf5d56d0a4d15bb36f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d10d3e49d9784ba3833ccf5d56d0a4d15bb36f6", "html_url": "https://github.com/rust-lang/rust/commit/3d10d3e49d9784ba3833ccf5d56d0a4d15bb36f6"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "4fca6416ce2939a765315201bc0d6bfa0f997625", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "patch": "@@ -2299,14 +2299,14 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n             if matchers.len() <= 1 {\n                 format!(\n                     \"{}macro {}{} {{\\n    ...\\n}}\",\n-                    vis.print_with_space(cx.tcx),\n+                    vis.print_with_space(cx.tcx, item.hir_id.owner),\n                     name,\n                     matchers.iter().map(|span| span.to_src(cx)).collect::<String>(),\n                 )\n             } else {\n                 format!(\n                     \"{}macro {} {{\\n{}}}\",\n-                    vis.print_with_space(cx.tcx),\n+                    vis.print_with_space(cx.tcx, item.hir_id.owner),\n                     name,\n                     matchers\n                         .iter()"}, {"sha": "bd5f5a3c6cc88225922c711291756307eafd7115", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "patch": "@@ -12,7 +12,7 @@ use std::fmt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_span::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::{self, PrimitiveType};\n@@ -1085,12 +1085,21 @@ impl Function<'_> {\n }\n \n impl clean::Visibility {\n-    crate fn print_with_space<'tcx>(self, tcx: TyCtxt<'tcx>) -> impl fmt::Display + 'tcx {\n+    crate fn print_with_space<'tcx>(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        item_did: LocalDefId,\n+    ) -> impl fmt::Display + 'tcx {\n         use rustc_span::symbol::kw;\n \n         display_fn(move |f| match self {\n             clean::Public => f.write_str(\"pub \"),\n             clean::Inherited => Ok(()),\n+            clean::Visibility::Restricted(did)\n+                if did.index == tcx.parent_module_from_def_id(item_did).local_def_index =>\n+            {\n+                Ok(())\n+            }\n             clean::Visibility::Restricted(did) if did.index == CRATE_DEF_INDEX => {\n                 write!(f, \"pub(crate) \")\n             }"}, {"sha": "2d87b0c104f28d4216aa36a9c4e60bd81618630c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f4c48b49929b9d5de7d65c608a244a1b5f9e81/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d3f4c48b49929b9d5de7d65c608a244a1b5f9e81", "patch": "@@ -2157,14 +2157,14 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     Some(ref src) => write!(\n                         w,\n                         \"<tr><td><code>{}extern crate {} as {};\",\n-                        myitem.visibility.print_with_space(cx.tcx()),\n+                        myitem.visibility.print_with_space(cx.tcx(), myitem.def_id.expect_local()),\n                         anchor(myitem.def_id, &*src.as_str()),\n                         name\n                     ),\n                     None => write!(\n                         w,\n                         \"<tr><td><code>{}extern crate {};\",\n-                        myitem.visibility.print_with_space(cx.tcx()),\n+                        myitem.visibility.print_with_space(cx.tcx(), myitem.def_id.expect_local()),\n                         anchor(myitem.def_id, &*name.as_str())\n                     ),\n                 }\n@@ -2175,7 +2175,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 write!(\n                     w,\n                     \"<tr><td><code>{}{}</code></td></tr>\",\n-                    myitem.visibility.print_with_space(cx.tcx()),\n+                    myitem.visibility.print_with_space(cx.tcx(), myitem.def_id.expect_local()),\n                     import.print()\n                 );\n             }\n@@ -2392,7 +2392,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n     write!(\n         w,\n         \"{vis}const {name}: {typ}\",\n-        vis = it.visibility.print_with_space(cx.tcx()),\n+        vis = it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n         name = it.name.as_ref().unwrap(),\n         typ = c.type_.print(),\n     );\n@@ -2426,7 +2426,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n     write!(\n         w,\n         \"{vis}static {mutability}{name}: {typ}</pre>\",\n-        vis = it.visibility.print_with_space(cx.tcx()),\n+        vis = it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n         mutability = s.mutability.print_with_space(),\n         name = it.name.as_ref().unwrap(),\n         typ = s.type_.print()\n@@ -2437,7 +2437,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::Function) {\n     let header_len = format!(\n         \"{}{}{}{}{:#}fn {}{:#}\",\n-        it.visibility.print_with_space(cx.tcx()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n         f.header.constness.print_with_space(),\n         f.header.asyncness.print_with_space(),\n         f.header.unsafety.print_with_space(),\n@@ -2452,7 +2452,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n          {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n-        vis = it.visibility.print_with_space(cx.tcx()),\n+        vis = it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n         unsafety = f.header.unsafety.print_with_space(),\n@@ -2578,7 +2578,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         write!(\n             w,\n             \"{}{}{}trait {}{}{}\",\n-            it.visibility.print_with_space(cx.tcx()),\n+            it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n             t.unsafety.print_with_space(),\n             if t.is_auto { \"auto \" } else { \"\" },\n             it.name.as_ref().unwrap(),\n@@ -2896,7 +2896,7 @@ fn assoc_const(\n         w,\n         \"{}{}const <a href=\\\"{}\\\" class=\\\"constant\\\"><b>{}</b></a>: {}\",\n         extra,\n-        it.visibility.print_with_space(cx.tcx()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n         naive_assoc_href(it, link),\n         it.name.as_ref().unwrap(),\n         ty.print()\n@@ -3015,7 +3015,7 @@ fn render_assoc_item(\n         };\n         let mut header_len = format!(\n             \"{}{}{}{}{}{:#}fn {}{:#}\",\n-            meth.visibility.print_with_space(cx.tcx()),\n+            meth.visibility.print_with_space(cx.tcx(), meth.def_id.expect_local()),\n             header.constness.print_with_space(),\n             header.asyncness.print_with_space(),\n             header.unsafety.print_with_space(),\n@@ -3037,7 +3037,7 @@ fn render_assoc_item(\n             \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n-            meth.visibility.print_with_space(cx.tcx()),\n+            meth.visibility.print_with_space(cx.tcx(), meth.def_id.expect_local()),\n             header.constness.print_with_space(),\n             header.asyncness.print_with_space(),\n             header.unsafety.print_with_space(),\n@@ -3189,7 +3189,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n         write!(\n             w,\n             \"{}enum {}{}{}\",\n-            it.visibility.print_with_space(cx.tcx()),\n+            it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n             it.name.as_ref().unwrap(),\n             e.generics.print(),\n             WhereClause { gens: &e.generics, indent: 0, end_newline: true }\n@@ -3364,7 +3364,7 @@ fn render_struct(\n     write!(\n         w,\n         \"{}{}{}\",\n-        it.visibility.print_with_space(cx.tcx()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n         if structhead { \"struct \" } else { \"\" },\n         it.name.as_ref().unwrap()\n     );\n@@ -3384,7 +3384,7 @@ fn render_struct(\n                         w,\n                         \"\\n{}    {}{}: {},\",\n                         tab,\n-                        field.visibility.print_with_space(cx.tcx()),\n+                        field.visibility.print_with_space(cx.tcx(), field.def_id.expect_local()),\n                         field.name.as_ref().unwrap(),\n                         ty.print()\n                     );\n@@ -3413,7 +3413,14 @@ fn render_struct(\n                 match field.kind {\n                     clean::StrippedItem(box clean::StructFieldItem(..)) => write!(w, \"_\"),\n                     clean::StructFieldItem(ref ty) => {\n-                        write!(w, \"{}{}\", field.visibility.print_with_space(cx.tcx()), ty.print())\n+                        write!(\n+                            w,\n+                            \"{}{}\",\n+                            field\n+                                .visibility\n+                                .print_with_space(cx.tcx(), field.def_id.expect_local()),\n+                            ty.print()\n+                        )\n                     }\n                     _ => unreachable!(),\n                 }\n@@ -3446,7 +3453,7 @@ fn render_union(\n     write!(\n         w,\n         \"{}{}{}\",\n-        it.visibility.print_with_space(cx.tcx()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n         if structhead { \"union \" } else { \"\" },\n         it.name.as_ref().unwrap()\n     );\n@@ -3461,7 +3468,7 @@ fn render_union(\n             write!(\n                 w,\n                 \"    {}{}: {},\\n{}\",\n-                field.visibility.print_with_space(cx.tcx()),\n+                field.visibility.print_with_space(cx.tcx(), field.def_id.expect_local()),\n                 field.name.as_ref().unwrap(),\n                 ty.print(),\n                 tab\n@@ -4100,7 +4107,7 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, cache:\n     write!(\n         w,\n         \"    {}type {};\\n}}</pre>\",\n-        it.visibility.print_with_space(cx.tcx()),\n+        it.visibility.print_with_space(cx.tcx(), it.def_id.expect_local()),\n         it.name.as_ref().unwrap(),\n     );\n "}]}