{"sha": "67cccaff4858eef5e78793f5a123ac33e5cf3704", "node_id": "C_kwDOAAsO6NoAKDY3Y2NjYWZmNDg1OGVlZjVlNzg3OTNmNWExMjNhYzMzZTVjZjM3MDQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-11T07:32:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-23T11:31:32Z"}, "message": "expand: Pass everything by reference to pre-expansion lint callback", "tree": {"sha": "c8caaec6057b9aa932aea2efc65fec8b7866178b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8caaec6057b9aa932aea2efc65fec8b7866178b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67cccaff4858eef5e78793f5a123ac33e5cf3704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67cccaff4858eef5e78793f5a123ac33e5cf3704", "html_url": "https://github.com/rust-lang/rust/commit/67cccaff4858eef5e78793f5a123ac33e5cf3704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67cccaff4858eef5e78793f5a123ac33e5cf3704/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "url": "https://api.github.com/repos/rust-lang/rust/commits/05cd75504b6bfce9e8ea9cc57dcef1120b98acde", "html_url": "https://github.com/rust-lang/rust/commit/05cd75504b6bfce9e8ea9cc57dcef1120b98acde"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "258320aeb636ad5403e4bb7ec4963fcfa005b249", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/67cccaff4858eef5e78793f5a123ac33e5cf3704/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccaff4858eef5e78793f5a123ac33e5cf3704/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=67cccaff4858eef5e78793f5a123ac33e5cf3704", "patch": "@@ -925,6 +925,20 @@ pub trait ResolverExpand {\n     fn registered_tools(&self) -> &FxHashSet<Ident>;\n }\n \n+pub trait LintStoreExpand {\n+    fn pre_expansion_lint(\n+        &self,\n+        sess: &Session,\n+        registered_tools: &FxHashSet<Ident>,\n+        node_id: NodeId,\n+        attrs: &[Attribute],\n+        items: &[P<Item>],\n+        name: &str,\n+    );\n+}\n+\n+type LintStoreExpandDyn<'a> = Option<&'a (dyn LintStoreExpand + 'a)>;\n+\n #[derive(Clone, Default)]\n pub struct ModuleData {\n     /// Path to the module starting from the crate name, like `my_crate::foo::bar`.\n@@ -959,10 +973,6 @@ pub struct ExpansionData {\n     pub is_trailing_mac: bool,\n }\n \n-type OnExternModLoaded<'a> = Option<\n-    &'a dyn Fn(NodeId, Vec<Attribute>, Vec<P<Item>>, Symbol) -> (Vec<Attribute>, Vec<P<Item>>),\n->;\n-\n /// One of these is made during expansion and incrementally updated as we go;\n /// when a macro expansion occurs, the resulting nodes have the `backtrace()\n /// -> expn_data` of their expansion context stored into their span.\n@@ -977,10 +987,8 @@ pub struct ExtCtxt<'a> {\n     /// (or during eager expansion, but that's a hack).\n     pub force_mode: bool,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n-    /// Called directly after having parsed an external `mod foo;` in expansion.\n-    ///\n-    /// `Ident` is the module name.\n-    pub(super) extern_mod_loaded: OnExternModLoaded<'a>,\n+    /// Used for running pre-expansion lints on freshly loaded modules.\n+    pub(super) lint_store: LintStoreExpandDyn<'a>,\n     /// When we 'expand' an inert attribute, we leave it\n     /// in the AST, but insert it here so that we know\n     /// not to expand it again.\n@@ -992,14 +1000,14 @@ impl<'a> ExtCtxt<'a> {\n         sess: &'a Session,\n         ecfg: expand::ExpansionConfig<'a>,\n         resolver: &'a mut dyn ResolverExpand,\n-        extern_mod_loaded: OnExternModLoaded<'a>,\n+        lint_store: LintStoreExpandDyn<'a>,\n     ) -> ExtCtxt<'a> {\n         ExtCtxt {\n             sess,\n             ecfg,\n             reduced_recursion_limit: None,\n             resolver,\n-            extern_mod_loaded,\n+            lint_store,\n             root_path: PathBuf::new(),\n             current_expansion: ExpansionData {\n                 id: LocalExpnId::ROOT,"}, {"sha": "9a4daa6d7500a57565fd4dd94316a4f6c7c0b675", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67cccaff4858eef5e78793f5a123ac33e5cf3704/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccaff4858eef5e78793f5a123ac33e5cf3704/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=67cccaff4858eef5e78793f5a123ac33e5cf3704", "patch": "@@ -1097,7 +1097,7 @@ impl InvocationCollectorNode for P<ast::Item> {\n             ModKind::Unloaded => {\n                 // We have an outline `mod foo;` so we need to parse the file.\n                 let old_attrs_len = attrs.len();\n-                let ParsedExternalMod { mut items, inner_span, file_path, dir_path, dir_ownership } =\n+                let ParsedExternalMod { items, inner_span, file_path, dir_path, dir_ownership } =\n                     parse_external_mod(\n                         &ecx.sess,\n                         ident,\n@@ -1107,12 +1107,14 @@ impl InvocationCollectorNode for P<ast::Item> {\n                         &mut attrs,\n                     );\n \n-                if let Some(extern_mod_loaded) = ecx.extern_mod_loaded {\n-                    (attrs, items) = extern_mod_loaded(\n+                if let Some(lint_store) = ecx.lint_store {\n+                    lint_store.pre_expansion_lint(\n+                        ecx.sess,\n+                        ecx.resolver.registered_tools(),\n                         ecx.current_expansion.lint_node_id,\n-                        attrs,\n-                        items,\n-                        ident.name,\n+                        &attrs,\n+                        &items,\n+                        ident.name.as_str(),\n                     );\n                 }\n "}, {"sha": "be31eb89f1b92b67a4a9bcaf1dcb5349c6343f43", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/67cccaff4858eef5e78793f5a123ac33e5cf3704/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cccaff4858eef5e78793f5a123ac33e5cf3704/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=67cccaff4858eef5e78793f5a123ac33e5cf3704", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{Applicability, ErrorReported, PResult};\n-use rustc_expand::base::{ExtCtxt, ResolverExpand};\n+use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n use rustc_lint::{EarlyCheckNode, LintStore};\n@@ -253,6 +253,23 @@ fn pre_expansion_lint<'a>(\n     });\n }\n \n+// Cannot implement directly for `LintStore` due to trait coherence.\n+struct LintStoreExpandImpl<'a>(&'a LintStore);\n+\n+impl LintStoreExpand for LintStoreExpandImpl<'_> {\n+    fn pre_expansion_lint(\n+        &self,\n+        sess: &Session,\n+        registered_tools: &RegisteredTools,\n+        node_id: ast::NodeId,\n+        attrs: &[ast::Attribute],\n+        items: &[rustc_ast::ptr::P<ast::Item>],\n+        name: &str,\n+    ) {\n+        pre_expansion_lint(sess, self.0, registered_tools, (node_id, attrs, items), name);\n+    }\n+}\n+\n /// Runs the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins,\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n /// harness if one is to be provided, injection of a dependency on the\n@@ -321,18 +338,8 @@ pub fn configure_and_expand(\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n-        let registered_tools = resolver.registered_tools().clone();\n-        let extern_mod_loaded = |node_id, attrs: Vec<_>, items: Vec<_>, name: Symbol| {\n-            pre_expansion_lint(\n-                sess,\n-                lint_store,\n-                &registered_tools,\n-                (node_id, &*attrs, &*items),\n-                name.as_str(),\n-            );\n-            (attrs, items)\n-        };\n-        let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&extern_mod_loaded));\n+        let lint_store = LintStoreExpandImpl(lint_store);\n+        let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&lint_store));\n \n         // Expand macros now!\n         let krate = sess.time(\"expand_crate\", || ecx.monotonic_expander().expand_crate(krate));"}]}