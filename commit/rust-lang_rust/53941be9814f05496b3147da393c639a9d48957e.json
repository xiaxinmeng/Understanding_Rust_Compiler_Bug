{"sha": "53941be9814f05496b3147da393c639a9d48957e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTQxYmU5ODE0ZjA1NDk2YjMxNDdkYTM5M2M2MzlhOWQ0ODk1N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-28T21:48:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-28T21:48:40Z"}, "message": "Auto merge of #25744 - SimonSapin:cell-eq, r=alexcrichton\n\n`core::cell::Cell<T>` and `core::cell::RefCell<T>` currently implement `PartialEq` when `T` does, and just defer to comparing `T` values. There is no reason the same shouldn\u2019t apply to `Eq`.\r\n\r\nThis enables `#[derive(Eq, PartialEq)]` on e.g. structs that have a `RefCell` field.\r\n\r\nr? @alexcrichton \r\n\r\nI\u2019m unsure what to do with `#[stable]` attributes on `impl`s. `impl`s generated by `#[derive]` don\u2019t have them.", "tree": {"sha": "656a5ed0e798a67558b18d57ff4560b3a74d6a1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/656a5ed0e798a67558b18d57ff4560b3a74d6a1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53941be9814f05496b3147da393c639a9d48957e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53941be9814f05496b3147da393c639a9d48957e", "html_url": "https://github.com/rust-lang/rust/commit/53941be9814f05496b3147da393c639a9d48957e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53941be9814f05496b3147da393c639a9d48957e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efebe45cc0f3265ee8bb6396952e93a2004128c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/efebe45cc0f3265ee8bb6396952e93a2004128c8", "html_url": "https://github.com/rust-lang/rust/commit/efebe45cc0f3265ee8bb6396952e93a2004128c8"}, {"sha": "bbf8ba7c2351caba1b585346e5709f8eb476f169", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf8ba7c2351caba1b585346e5709f8eb476f169", "html_url": "https://github.com/rust-lang/rust/commit/bbf8ba7c2351caba1b585346e5709f8eb476f169"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "3eb1fa4a558ea6660592287badb48a6d249c4a7a", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53941be9814f05496b3147da393c639a9d48957e/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53941be9814f05496b3147da393c639a9d48957e/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=53941be9814f05496b3147da393c639a9d48957e", "patch": "@@ -143,7 +143,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use clone::Clone;\n-use cmp::PartialEq;\n+use cmp::{PartialEq, Eq};\n use default::Default;\n use marker::{Copy, Send, Sync, Sized};\n use ops::{Deref, DerefMut, Drop};\n@@ -263,6 +263,9 @@ impl<T:PartialEq + Copy> PartialEq for Cell<T> {\n     }\n }\n \n+#[stable(feature = \"cell_eq\", since = \"1.2.0\")]\n+impl<T:Eq + Copy> Eq for Cell<T> {}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](index.html) for more.\n@@ -273,7 +276,7 @@ pub struct RefCell<T: ?Sized> {\n }\n \n /// An enumeration of values returned from the `state` method on a `RefCell<T>`.\n-#[derive(Copy, Clone, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[unstable(feature = \"std_misc\")]\n pub enum BorrowState {\n     /// The cell is currently being read, there is at least one active `borrow`.\n@@ -479,6 +482,9 @@ impl<T: ?Sized + PartialEq> PartialEq for RefCell<T> {\n     }\n }\n \n+#[stable(feature = \"cell_eq\", since = \"1.2.0\")]\n+impl<T: ?Sized + Eq> Eq for RefCell<T> {}\n+\n struct BorrowRef<'b> {\n     _borrow: &'b Cell<BorrowFlag>,\n }"}]}