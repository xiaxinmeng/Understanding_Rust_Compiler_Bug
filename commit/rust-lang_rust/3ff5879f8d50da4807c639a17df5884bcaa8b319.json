{"sha": "3ff5879f8d50da4807c639a17df5884bcaa8b319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZjU4NzlmOGQ1MGRhNDgwN2M2MzlhMTdkZjU4ODRiY2FhOGIzMTk=", "commit": {"author": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2020-05-30T18:55:38Z"}, "committer": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2020-06-20T14:53:39Z"}, "message": "core/time: Add Duration methods for zero\n\nThis patch adds two methods to `Duration`. The first, `Duration::zero`,\nprovides a `const` constructor for getting an zero-length duration. This\nis also what `Default` provides (this was clarified in the docs), though\n`default` is not `const`.\n\nThe second, `Duration::is_zero`, returns true if a `Duration` spans no\ntime (i.e., because its components are all zero). Previously, the way to\ndo this was either to compare both `as_secs` and `subsec_nanos` to 0, to\ncompare against `Duration::new(0, 0)`, or to use the `u128` method\n`as_nanos`, none of which were particularly elegant.", "tree": {"sha": "0ebd8636f594bf7e6ff882a2df3a08efde1d008b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ebd8636f594bf7e6ff882a2df3a08efde1d008b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ff5879f8d50da4807c639a17df5884bcaa8b319", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRMIcpUBeYB4tqnGeM8sexUWnBjGAUCXu4i8wAKCRA8sexUWnBj\nGGhoAPwI5whOmEB2t6WbC4f5bQUAOE8go0XXdVg5aCFLv6B6mwD/Z2VXrkhxp49+\njkI18VQbVqzRW6HzER1j76fIKgdTfAg=\n=zdEQ\n-----END PGP SIGNATURE-----", "payload": "tree 0ebd8636f594bf7e6ff882a2df3a08efde1d008b\nparent 033013cab3a861224fd55f494c8be1cb0349eb49\nauthor Jon Gjengset <jon@thesquareplanet.com> 1590864938 -0400\ncommitter Jon Gjengset <jon@thesquareplanet.com> 1592664819 -0400\n\ncore/time: Add Duration methods for zero\n\nThis patch adds two methods to `Duration`. The first, `Duration::zero`,\nprovides a `const` constructor for getting an zero-length duration. This\nis also what `Default` provides (this was clarified in the docs), though\n`default` is not `const`.\n\nThe second, `Duration::is_zero`, returns true if a `Duration` spans no\ntime (i.e., because its components are all zero). Previously, the way to\ndo this was either to compare both `as_secs` and `subsec_nanos` to 0, to\ncompare against `Duration::new(0, 0)`, or to use the `u128` method\n`as_nanos`, none of which were particularly elegant.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff5879f8d50da4807c639a17df5884bcaa8b319", "html_url": "https://github.com/rust-lang/rust/commit/3ff5879f8d50da4807c639a17df5884bcaa8b319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ff5879f8d50da4807c639a17df5884bcaa8b319/comments", "author": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "cf88ff2e10fb71b1c5838875ffa70110726910c9", "filename": "src/libcore/time.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3ff5879f8d50da4807c639a17df5884bcaa8b319/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ff5879f8d50da4807c639a17df5884bcaa8b319/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=3ff5879f8d50da4807c639a17df5884bcaa8b319", "patch": "@@ -31,7 +31,7 @@ const MICROS_PER_SEC: u64 = 1_000_000;\n /// the number of nanoseconds.\n ///\n /// `Duration`s implement many common traits, including [`Add`], [`Sub`], and other\n-/// [`ops`] traits.\n+/// [`ops`] traits. It implements `Default` by returning a zero-length `Duration`.\n ///\n /// [`Add`]: ../../std/ops/trait.Add.html\n /// [`Sub`]: ../../std/ops/trait.Sub.html\n@@ -223,6 +223,47 @@ impl Duration {\n         }\n     }\n \n+    /// Creates a new `Duration` that spans no time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::zero();\n+    /// assert!(duration.is_zero());\n+    ///\n+    /// const IMMEDIATELY: Duration = Duration::zero();\n+    /// assert!(IMMEDIATELY.is_zero());\n+    /// ```\n+    #[unstable(feature = \"duration_zero\", issue = \"none\")]\n+    #[inline]\n+    pub const fn zero() -> Duration {\n+        Duration { secs: 0, nanos: 0 }\n+    }\n+\n+    /// Returns true if this `Duration` spans no time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::Duration;\n+    ///\n+    /// assert!(Duration::zero().is_zero());\n+    /// assert!(Duration::new(0, 0).is_zero());\n+    /// assert!(Duration::from_nanos(0).is_zero());\n+    /// assert!(Duration::from_secs(0).is_zero());\n+    ///\n+    /// assert!(!Duration::new(1, 1).is_zero());\n+    /// assert!(!Duration::from_nanos(1).is_zero());\n+    /// assert!(!Duration::from_secs(1).is_zero());\n+    /// ```\n+    #[unstable(feature = \"duration_zero\", issue = \"none\")]\n+    #[inline]\n+    pub const fn is_zero(&self) -> bool {\n+        self.secs == 0 && self.nanos == 0\n+    }\n+\n     /// Returns the number of _whole_ seconds contained by this `Duration`.\n     ///\n     /// The returned value does not include the fractional (nanosecond) part of the"}]}