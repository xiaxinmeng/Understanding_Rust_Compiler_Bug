{"sha": "c4e00f7bd525dd480341c1790d10276274eed9a6", "node_id": "C_kwDOAAsO6NoAKGM0ZTAwZjdiZDUyNWRkNDgwMzQxYzE3OTBkMTAyNzYyNzRlZWQ5YTY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-24T19:14:35Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-24T19:14:35Z"}, "message": "rustdoc-search: add slices and arrays to index\n\nThis indexes them as primitives with generics, so `slice<u32>` is\nhow you search for `[u32]`, and `array<u32>` for `[u32; 1]`.\nA future commit will desugar the square bracket syntax to search\nboth arrays and slices at once.", "tree": {"sha": "55d4de701b8cc56fb5c173f907d044b4615df9eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55d4de701b8cc56fb5c173f907d044b4615df9eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e00f7bd525dd480341c1790d10276274eed9a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e00f7bd525dd480341c1790d10276274eed9a6", "html_url": "https://github.com/rust-lang/rust/commit/c4e00f7bd525dd480341c1790d10276274eed9a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e00f7bd525dd480341c1790d10276274eed9a6/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b72460fe46a873da0c40582636c26e7675e92288", "url": "https://api.github.com/repos/rust-lang/rust/commits/b72460fe46a873da0c40582636c26e7675e92288", "html_url": "https://github.com/rust-lang/rust/commit/b72460fe46a873da0c40582636c26e7675e92288"}], "stats": {"total": 111, "additions": 109, "deletions": 2}, "files": [{"sha": "a3be6dd52690963377ca1a2abea92e9760b296fa", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c4e00f7bd525dd480341c1790d10276274eed9a6/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e00f7bd525dd480341c1790d10276274eed9a6/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=c4e00f7bd525dd480341c1790d10276274eed9a6", "patch": "@@ -391,12 +391,14 @@ fn get_index_type_id(clean_type: &clean::Type) -> Option<RenderTypeId> {\n         clean::BorrowedRef { ref type_, .. } | clean::RawPointer(_, ref type_) => {\n             get_index_type_id(type_)\n         }\n+        // The type parameters are converted to generics in `add_generics_and_bounds_as_types`\n+        clean::Slice(_) => Some(RenderTypeId::Primitive(clean::PrimitiveType::Slice)),\n+        clean::Array(_, _) => Some(RenderTypeId::Primitive(clean::PrimitiveType::Array)),\n+        // Not supported yet\n         clean::BareFunction(_)\n         | clean::Generic(_)\n         | clean::ImplTrait(_)\n         | clean::Tuple(_)\n-        | clean::Slice(_)\n-        | clean::Array(_, _)\n         | clean::QPath { .. }\n         | clean::Infer => None,\n     }\n@@ -563,6 +565,30 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n             }\n         }\n         insert_ty(res, arg.clone(), ty_generics);\n+    } else if let Type::Slice(ref ty) = *arg {\n+        let mut ty_generics = Vec::new();\n+        add_generics_and_bounds_as_types(\n+            self_,\n+            generics,\n+            &ty,\n+            tcx,\n+            recurse + 1,\n+            &mut ty_generics,\n+            cache,\n+        );\n+        insert_ty(res, arg.clone(), ty_generics);\n+    } else if let Type::Array(ref ty, _) = *arg {\n+        let mut ty_generics = Vec::new();\n+        add_generics_and_bounds_as_types(\n+            self_,\n+            generics,\n+            &ty,\n+            tcx,\n+            recurse + 1,\n+            &mut ty_generics,\n+            cache,\n+        );\n+        insert_ty(res, arg.clone(), ty_generics);\n     } else {\n         // This is not a type parameter. So for example if we have `T, U: Option<T>`, and we're\n         // looking at `Option`, we enter this \"else\" condition, otherwise if it's `T`, we don't."}, {"sha": "8c21e06dc4e4f913912b7ca87c9641c86057dd79", "filename": "tests/rustdoc-js/slice-array.js", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c4e00f7bd525dd480341c1790d10276274eed9a6/tests%2Frustdoc-js%2Fslice-array.js", "raw_url": "https://github.com/rust-lang/rust/raw/c4e00f7bd525dd480341c1790d10276274eed9a6/tests%2Frustdoc-js%2Fslice-array.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fslice-array.js?ref=c4e00f7bd525dd480341c1790d10276274eed9a6", "patch": "@@ -0,0 +1,65 @@\n+// exact-check\n+\n+const QUERY = [\n+    'R<primitive:slice<P>>',\n+    'primitive:slice<R<P>>',\n+    'R<primitive:slice<Q>>',\n+    'primitive:slice<R<Q>>',\n+    'R<primitive:array<Q>>',\n+    'primitive:array<R<Q>>',\n+    'primitive:array<TraitCat>',\n+    'primitive:array<TraitDog>',\n+];\n+\n+const EXPECTED = [\n+    {\n+        // R<primitive:slice<P>>\n+        'returned': [],\n+        'in_args': [\n+            { 'path': 'slice_array', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        // primitive:slice<R<P>>\n+        'returned': [\n+            { 'path': 'slice_array', 'name': 'alef' },\n+        ],\n+        'in_args': [],\n+    },\n+    {\n+        // R<primitive:slice<Q>>\n+        'returned': [],\n+        'in_args': [],\n+    },\n+    {\n+        // primitive:slice<R<Q>>\n+        'returned': [],\n+        'in_args': [],\n+    },\n+    {\n+        // R<primitive:array<Q>>\n+        'returned': [\n+            { 'path': 'slice_array', 'name': 'bet' },\n+        ],\n+        'in_args': [],\n+    },\n+    {\n+        // primitive:array<R<Q>>\n+        'returned': [],\n+        'in_args': [\n+            { 'path': 'slice_array', 'name': 'beta' },\n+        ],\n+    },\n+    {\n+        // primitive::array<TraitCat>\n+        'in_args': [\n+            { 'path': 'slice_array', 'name': 'gamma' },\n+        ],\n+    },\n+    {\n+        // primitive::array<TraitDog>\n+        'in_args': [\n+            { 'path': 'slice_array', 'name': 'gamma' },\n+        ],\n+    },\n+];"}, {"sha": "2523b21cfaa5099acb43a028cce4cde3d9df11a8", "filename": "tests/rustdoc-js/slice-array.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4e00f7bd525dd480341c1790d10276274eed9a6/tests%2Frustdoc-js%2Fslice-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e00f7bd525dd480341c1790d10276274eed9a6/tests%2Frustdoc-js%2Fslice-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fslice-array.rs?ref=c4e00f7bd525dd480341c1790d10276274eed9a6", "patch": "@@ -0,0 +1,16 @@\n+pub struct P;\n+pub struct Q;\n+pub struct R<T>(T);\n+\n+// returns test\n+pub fn alef() -> &'static [R<P>] { loop {} }\n+pub fn bet() -> R<[Q; 32]> { loop {} }\n+\n+// in_args test\n+pub fn alpha(_x: R<&'static [P]>) { loop {} }\n+pub fn beta(_x: [R<Q>; 32]) { loop {} }\n+\n+pub trait TraitCat {}\n+pub trait TraitDog {}\n+\n+pub fn gamma<T: TraitCat + TraitDog>(t: [T; 32]) {}"}]}