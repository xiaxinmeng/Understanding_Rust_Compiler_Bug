{"sha": "d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOWNmNDZkMzI0NzQwMWY2YzZkZGQ4NzFjYTc5YWMwYThiYzJmMmQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-04T13:02:05Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-18T17:35:37Z"}, "message": "Update UI tests to be platform independent", "tree": {"sha": "b00d88da8d4d6a3d5ade4aff3cd92f2794bd9372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b00d88da8d4d6a3d5ade4aff3cd92f2794bd9372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "html_url": "https://github.com/rust-lang/rust/commit/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "effa869cabc1408b11eb46f55bf5e4f21994bc91", "url": "https://api.github.com/repos/rust-lang/rust/commits/effa869cabc1408b11eb46f55bf5e4f21994bc91", "html_url": "https://github.com/rust-lang/rust/commit/effa869cabc1408b11eb46f55bf5e4f21994bc91"}], "stats": {"total": 183, "additions": 108, "deletions": 75}, "files": [{"sha": "f180ae53b8ae1926868ad9794595f772c8e31f85", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> ExprVisitor<'a, 'tcx> {\n             // `Option<typeof(function)>` to present a clearer error.\n             let from = unpack_option_like(self.tcx.global_tcx(), from);\n             if let (&ty::TyFnDef(..), SizeSkeleton::Known(size_to)) = (&from.sty, sk_to) {\n-                if size_to == Pointer.size(self.tcx) => {\n+                if size_to == Pointer.size(self.tcx) {\n                     struct_span_err!(self.tcx.sess, span, E0591,\n                                      \"can't transmute zero-sized type\")\n                         .note(&format!(\"source type: {}\", from))"}, {"sha": "d5968a388dc1d933ea5e7b54876928e8b9eaf6ba", "filename": "src/test/ui/transmute/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs?ref=d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "patch": "@@ -7,6 +7,12 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// ignore-x86\n+// ignore-arm\n+// ignore-emscripten\n+// ignore 32-bit platforms (test output is different)\n+\n #![feature(untagged_unions)]\n use std::mem::transmute;\n "}, {"sha": "c5d5a4ed8a6239631d2985df674f9002414779c4", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "patch": "@@ -1,34 +1,34 @@\n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/main.rs:20:5\n+  --> $DIR/main.rs:26:5\n    |\n-20 |     transmute(x) //~ ERROR transmute called with types of different sizes\n+26 |     transmute(x) //~ ERROR transmute called with types of different sizes\n    |     ^^^^^^^^^\n    |\n    = note: source type: <C as TypeConstructor<'a>>::T (size can vary because of <C as TypeConstructor>::T)\n    = note: target type: <C as TypeConstructor<'b>>::T (size can vary because of <C as TypeConstructor>::T)\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/main.rs:24:17\n+  --> $DIR/main.rs:30:17\n    |\n-24 |     let x: u8 = transmute(10u16); //~ ERROR transmute called with types of different sizes\n+30 |     let x: u8 = transmute(10u16); //~ ERROR transmute called with types of different sizes\n    |                 ^^^^^^^^^\n    |\n    = note: source type: u16 (16 bits)\n    = note: target type: u8 (8 bits)\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/main.rs:28:17\n+  --> $DIR/main.rs:34:17\n    |\n-28 |     let x: u8 = transmute(\"test\"); //~ ERROR transmute called with types of different sizes\n+34 |     let x: u8 = transmute(\"test\"); //~ ERROR transmute called with types of different sizes\n    |                 ^^^^^^^^^\n    |\n    = note: source type: &str (128 bits)\n    = note: target type: u8 (8 bits)\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/main.rs:33:18\n+  --> $DIR/main.rs:39:18\n    |\n-33 |     let x: Foo = transmute(10); //~ ERROR transmute called with types of different sizes\n+39 |     let x: Foo = transmute(10); //~ ERROR transmute called with types of different sizes\n    |                  ^^^^^^^^^\n    |\n    = note: source type: i32 (32 bits)"}, {"sha": "98d2e1e3628f280f6847abdc6c31dba484f22bf7", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.rs?ref=d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "patch": "@@ -8,9 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-x86\n+// ignore-arm\n+// ignore-emscripten\n+// ignore 32-bit platforms (test output is different)\n+\n use std::mem;\n \n-unsafe fn foo() -> (isize, *const (), Option<fn()>) {\n+unsafe fn foo() -> (i32, *const (), Option<fn()>) {\n     let i = mem::transmute(bar);\n     //~^ ERROR is zero-sized and can't be transmuted\n     //~^^ NOTE cast with `as` to a pointer instead\n@@ -41,7 +46,7 @@ unsafe fn bar() {\n     //~^^ NOTE cast with `as` to a pointer instead\n \n     // No error if a coercion would otherwise occur.\n-    mem::transmute::<fn(), usize>(main);\n+    mem::transmute::<fn(), u32>(main);\n }\n \n unsafe fn baz() {\n@@ -58,7 +63,7 @@ unsafe fn baz() {\n     //~^^ NOTE cast with `as` to a pointer instead\n \n     // No error if a coercion would otherwise occur.\n-    mem::transmute::<Option<fn()>, usize>(Some(main));\n+    mem::transmute::<Option<fn()>, u32>(Some(main));\n }\n \n fn main() {"}, {"sha": "61ee5cf61283fa2937b16ad0307a40b46d72a679", "filename": "src/test/ui/transmute/transmute-from-fn-item-types-error.stderr", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-from-fn-item-types-error.stderr?ref=d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "patch": "@@ -1,91 +1,108 @@\n-error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:14:13\n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-from-fn-item-types-error.rs:19:13\n    |\n-14 |     let i = mem::transmute(bar);\n+19 |     let i = mem::transmute(bar);\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() {bar}\n-   = note: target type: isize\n-   = help: cast with `as` to a pointer instead\n+   = note: source type: unsafe fn() {bar} (0 bits)\n+   = note: target type: i32 (32 bits)\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:18:13\n+  --> $DIR/transmute-from-fn-item-types-error.rs:23:13\n    |\n-18 |     let p = mem::transmute(foo);\n+23 |     let p = mem::transmute(foo);\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (isize, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *const ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:22:14\n+  --> $DIR/transmute-from-fn-item-types-error.rs:27:14\n    |\n-22 |     let of = mem::transmute(main);\n+27 |     let of = mem::transmute(main);\n    |              ^^^^^^^^^^^^^^\n    |\n    = note: source type: fn() {main}\n    = note: target type: std::option::Option<fn()>\n    = help: cast with `as` to a pointer instead\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-from-fn-item-types-error.rs:31:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:36:5\n    |\n-31 |     mem::transmute::<_, u8>(main);\n+36 |     mem::transmute::<_, u8>(main);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: fn() {main} (0 bits)\n    = note: target type: u8 (8 bits)\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:35:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:40:5\n    |\n-35 |     mem::transmute::<_, *mut ()>(foo);\n+40 |     mem::transmute::<_, *mut ()>(foo);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (isize, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *mut ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:39:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:44:5\n    |\n-39 |     mem::transmute::<_, fn()>(bar);\n+44 |     mem::transmute::<_, fn()>(bar);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {bar}\n    = note: target type: fn()\n    = help: cast with `as` to a pointer instead\n \n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-from-fn-item-types-error.rs:49:5\n+   |\n+49 |     mem::transmute::<fn(), u32>(main);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: fn() (64 bits)\n+   = note: target type: u32 (32 bits)\n+\n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:48:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:53:5\n    |\n-48 |     mem::transmute::<_, *mut ()>(Some(foo));\n+53 |     mem::transmute::<_, *mut ()>(Some(foo));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: unsafe fn() -> (isize, *const (), std::option::Option<fn()>) {foo}\n+   = note: source type: unsafe fn() -> (i32, *const (), std::option::Option<fn()>) {foo}\n    = note: target type: *mut ()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:52:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:57:5\n    |\n-52 |     mem::transmute::<_, fn()>(Some(bar));\n+57 |     mem::transmute::<_, fn()>(Some(bar));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {bar}\n    = note: target type: fn()\n    = help: cast with `as` to a pointer instead\n \n error[E0591]: can't transmute zero-sized type\n-  --> $DIR/transmute-from-fn-item-types-error.rs:56:5\n+  --> $DIR/transmute-from-fn-item-types-error.rs:61:5\n    |\n-56 |     mem::transmute::<_, Option<fn()>>(Some(baz));\n+61 |     mem::transmute::<_, Option<fn()>>(Some(baz));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: unsafe fn() {baz}\n    = note: target type: std::option::Option<fn()>\n    = help: cast with `as` to a pointer instead\n \n+error[E0512]: transmute called with types of different sizes\n+  --> $DIR/transmute-from-fn-item-types-error.rs:66:5\n+   |\n+66 |     mem::transmute::<Option<fn()>, u32>(Some(main));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: std::option::Option<fn()> (64 bits)\n+   = note: target type: u32 (32 bits)\n+\n error: aborting due to previous error(s)\n "}, {"sha": "fa83a10dc48e88da1512ba3db41a2ba2bdad22ea", "filename": "src/test/ui/transmute/transmute-type-parameters.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.rs?ref=d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "patch": "@@ -8,32 +8,37 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-x86\n+// ignore-arm\n+// ignore-emscripten\n+// ignore 32-bit platforms (test output is different)\n+\n // Tests that `transmute` cannot be called on type parameters.\n \n use std::mem::transmute;\n \n unsafe fn f<T>(x: T) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: T (size can vary) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: T (size can vary) to i32\n }\n \n-unsafe fn g<T>(x: (T, isize)) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: (T, isize) (size can vary because of T) to isize\n+unsafe fn g<T>(x: (T, i32)) {\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: (T, i32) (size can vary because of T) to i32\n }\n \n unsafe fn h<T>(x: [T; 10]) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: [T; 10] (size can vary because of T) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: [T; 10] (size can vary because of T) to i32\n }\n \n struct Bad<T> {\n     f: T,\n }\n \n unsafe fn i<T>(x: Bad<T>) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: Bad<T> (size can vary because of T) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: Bad<T> (size can vary because of T) to i32\n }\n \n enum Worse<T> {\n@@ -42,13 +47,13 @@ enum Worse<T> {\n }\n \n unsafe fn j<T>(x: Worse<T>) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: Worse<T> (size can vary because of T) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: Worse<T> (size can vary because of T) to i32\n }\n \n unsafe fn k<T>(x: Option<T>) {\n-    let _: isize = transmute(x);\n-//~^ ERROR differently sized types: std::option::Option<T> (size can vary because of T) to isize\n+    let _: i32 = transmute(x);\n+//~^ ERROR differently sized types: std::option::Option<T> (size can vary because of T) to i32\n }\n \n fn main() {}"}, {"sha": "bb21cfd3e4c9d462adc5b1e731f22a13a86c2982", "filename": "src/test/ui/transmute/transmute-type-parameters.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-type-parameters.stderr?ref=d09cf46d3247401f6c6ddd871ca79ac0a8bc2f2d", "patch": "@@ -1,56 +1,56 @@\n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-type-parameters.rs:16:20\n+  --> $DIR/transmute-type-parameters.rs:21:18\n    |\n-16 |     let _: isize = transmute(x);\n-   |                    ^^^^^^^^^\n+21 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n    |\n    = note: source type: T (this type's size can vary)\n-   = note: target type: isize (64 bits)\n+   = note: target type: i32 (32 bits)\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-type-parameters.rs:21:20\n+  --> $DIR/transmute-type-parameters.rs:26:18\n    |\n-21 |     let _: isize = transmute(x);\n-   |                    ^^^^^^^^^\n+26 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n    |\n-   = note: source type: (T, isize) (size can vary because of T)\n-   = note: target type: isize (64 bits)\n+   = note: source type: (T, i32) (size can vary because of T)\n+   = note: target type: i32 (32 bits)\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-type-parameters.rs:26:20\n+  --> $DIR/transmute-type-parameters.rs:31:18\n    |\n-26 |     let _: isize = transmute(x);\n-   |                    ^^^^^^^^^\n+31 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n    |\n    = note: source type: [T; 10] (size can vary because of T)\n-   = note: target type: isize (64 bits)\n+   = note: target type: i32 (32 bits)\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-type-parameters.rs:35:20\n+  --> $DIR/transmute-type-parameters.rs:40:18\n    |\n-35 |     let _: isize = transmute(x);\n-   |                    ^^^^^^^^^\n+40 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n    |\n    = note: source type: Bad<T> (size can vary because of T)\n-   = note: target type: isize (64 bits)\n+   = note: target type: i32 (32 bits)\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-type-parameters.rs:45:20\n+  --> $DIR/transmute-type-parameters.rs:50:18\n    |\n-45 |     let _: isize = transmute(x);\n-   |                    ^^^^^^^^^\n+50 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n    |\n    = note: source type: Worse<T> (size can vary because of T)\n-   = note: target type: isize (64 bits)\n+   = note: target type: i32 (32 bits)\n \n error[E0512]: transmute called with types of different sizes\n-  --> $DIR/transmute-type-parameters.rs:50:20\n+  --> $DIR/transmute-type-parameters.rs:55:18\n    |\n-50 |     let _: isize = transmute(x);\n-   |                    ^^^^^^^^^\n+55 |     let _: i32 = transmute(x);\n+   |                  ^^^^^^^^^\n    |\n    = note: source type: std::option::Option<T> (size can vary because of T)\n-   = note: target type: isize (64 bits)\n+   = note: target type: i32 (32 bits)\n \n error: aborting due to previous error(s)\n "}]}