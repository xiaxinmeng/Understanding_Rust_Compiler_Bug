{"sha": "be2641a61f2d34fe4f937a49dacfcb82bf0b9075", "node_id": "C_kwDOAAsO6NoAKGJlMjY0MWE2MWYyZDM0ZmU0ZjkzN2E0OWRhY2ZjYjgyYmYwYjkwNzU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-17T18:22:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-17T18:22:52Z"}, "message": "Fortify check for const generics.", "tree": {"sha": "8676db11d489dbe535c416319eb62d27b9fe8d8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8676db11d489dbe535c416319eb62d27b9fe8d8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2641a61f2d34fe4f937a49dacfcb82bf0b9075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2641a61f2d34fe4f937a49dacfcb82bf0b9075", "html_url": "https://github.com/rust-lang/rust/commit/be2641a61f2d34fe4f937a49dacfcb82bf0b9075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2641a61f2d34fe4f937a49dacfcb82bf0b9075/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b162141631e900f760752eacdd6d5e510ac4e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b162141631e900f760752eacdd6d5e510ac4e42", "html_url": "https://github.com/rust-lang/rust/commit/4b162141631e900f760752eacdd6d5e510ac4e42"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "5bb02bc246caf28bf5c05136bf6418a515747109", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/be2641a61f2d34fe4f937a49dacfcb82bf0b9075/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2641a61f2d34fe4f937a49dacfcb82bf0b9075/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=be2641a61f2d34fe4f937a49dacfcb82bf0b9075", "patch": "@@ -1453,16 +1453,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .enumerate()\n                     .skip(1) // Remove `Self` for `ExistentialPredicate`.\n                     .map(|(index, arg)| {\n-                        if let ty::GenericArgKind::Type(ty) = arg.unpack() {\n-                            debug!(?ty);\n-                            if ty == dummy_self {\n-                                let param = &generics.params[index];\n-                                missing_type_params.push(param.name);\n-                                return tcx.ty_error().into();\n-                            } else if ty.walk().any(|arg| arg == dummy_self.into()) {\n-                                references_self = true;\n-                                return tcx.ty_error().into();\n-                            }\n+                        if arg == dummy_self.into() {\n+                            let param = &generics.params[index];\n+                            missing_type_params.push(param.name);\n+                            return tcx.ty_error().into();\n+                        } else if arg.walk().any(|arg| arg == dummy_self.into()) {\n+                            references_self = true;\n+                            return tcx.ty_error().into();\n                         }\n                         arg\n                     })\n@@ -1509,10 +1506,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // Like for trait refs, verify that `dummy_self` did not leak inside default type\n                 // parameters.\n                 let references_self = b.projection_ty.substs.iter().skip(1).any(|arg| {\n-                    if let ty::GenericArgKind::Type(ty) = arg.unpack() {\n-                        if ty == dummy_self || ty.walk().any(|arg| arg == dummy_self.into()) {\n-                            return true;\n-                        }\n+                    if arg.walk().any(|arg| arg == dummy_self.into()) {\n+                        return true;\n                     }\n                     false\n                 });\n@@ -1524,7 +1519,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         .substs\n                         .iter()\n                         .map(|arg| {\n-                            if let ty::GenericArgKind::Type(_) = arg.unpack() {\n+                            if arg.walk().any(|arg| arg == dummy_self.into()) {\n                                 return tcx.ty_error().into();\n                             }\n                             arg"}]}