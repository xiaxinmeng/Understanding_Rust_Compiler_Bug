{"sha": "3e89753283a3d08704ab293b337d255e5d5e5210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlODk3NTMyODNhM2QwODcwNGFiMjkzYjMzN2QyNTVlNWQ1ZTUyMTA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-13T11:32:37Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:19:04Z"}, "message": "Rename PathParameter(s) to GenericArg(s)", "tree": {"sha": "95cc12665f619cc3d4666802c6fffc3ba9ce0301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95cc12665f619cc3d4666802c6fffc3ba9ce0301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e89753283a3d08704ab293b337d255e5d5e5210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e89753283a3d08704ab293b337d255e5d5e5210", "html_url": "https://github.com/rust-lang/rust/commit/3e89753283a3d08704ab293b337d255e5d5e5210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e89753283a3d08704ab293b337d255e5d5e5210/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e05ad4f31a6440d78588912ef76c4ba454b1b539", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05ad4f31a6440d78588912ef76c4ba454b1b539", "html_url": "https://github.com/rust-lang/rust/commit/e05ad4f31a6440d78588912ef76c4ba454b1b539"}], "stats": {"total": 397, "additions": 194, "deletions": 203}, "files": [{"sha": "9b5b53e891bafec88e7ea9e85427f3a6e6cc7492", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -344,10 +344,10 @@ pub trait Visitor<'v> : Sized {\n     fn visit_label(&mut self, label: &'v Label) {\n         walk_label(self, label)\n     }\n-    fn visit_path_param(&mut self, path_param: &'v PathParam) {\n-        match path_param {\n-            PathParam::Lifetime(lt) => self.visit_lifetime(lt),\n-            PathParam::Type(ty) => self.visit_ty(ty),\n+    fn visit_generic_arg(&mut self, generic_arg: &'v GenericArg) {\n+        match generic_arg {\n+            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n+            GenericArg::Type(ty) => self.visit_ty(ty),\n         }\n     }\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n@@ -362,8 +362,8 @@ pub trait Visitor<'v> : Sized {\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) {\n         walk_path_segment(self, path_span, path_segment)\n     }\n-    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) {\n-        walk_path_parameters(self, path_span, path_parameters)\n+    fn visit_generic_args(&mut self, path_span: Span, generic_args: &'v GenericArgs) {\n+        walk_generic_args(self, path_span, generic_args)\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding) {\n         walk_assoc_type_binding(self, type_binding)\n@@ -649,15 +649,15 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              segment: &'v PathSegment) {\n     visitor.visit_name(path_span, segment.name);\n     if let Some(ref parameters) = segment.parameters {\n-        visitor.visit_path_parameters(path_span, parameters);\n+        visitor.visit_generic_args(path_span, parameters);\n     }\n }\n \n-pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n+pub fn walk_generic_args<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                 _path_span: Span,\n-                                                path_parameters: &'v PathParameters) {\n-    walk_list!(visitor, visit_path_param, &path_parameters.parameters);\n-    walk_list!(visitor, visit_assoc_type_binding, &path_parameters.bindings);\n+                                                generic_args: &'v GenericArgs) {\n+    walk_list!(visitor, visit_generic_arg, &generic_args.parameters);\n+    walk_list!(visitor, visit_assoc_type_binding, &generic_args.bindings);\n }\n \n pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,"}, {"sha": "4b090e88c404615b9e9e4cd5dc4de0815081630a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -46,7 +46,7 @@ use hir::HirVec;\n use hir::map::{DefKey, DefPathData, Definitions};\n use hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n use hir::def::{Def, PathResolution, PerNS};\n-use hir::PathParam;\n+use hir::GenericArg;\n use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES};\n use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -1038,16 +1038,16 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_path_param(&mut self,\n+    fn lower_generic_arg(&mut self,\n                         p: &AngleBracketedParam,\n                         itctx: ImplTraitContext)\n-                        -> PathParam {\n+                        -> GenericArg {\n         match p {\n             AngleBracketedParam::Lifetime(lt) => {\n-                PathParam::Lifetime(self.lower_lifetime(&lt))\n+                GenericArg::Lifetime(self.lower_lifetime(&lt))\n             }\n             AngleBracketedParam::Type(ty) => {\n-                PathParam::Type(self.lower_ty(&ty, itctx))\n+                GenericArg::Type(self.lower_ty(&ty, itctx))\n             }\n         }\n     }\n@@ -1322,15 +1322,15 @@ impl<'a> LoweringContext<'a> {\n                 hir::intravisit::NestedVisitorMap::None\n             }\n \n-            fn visit_path_parameters(&mut self, span: Span, parameters: &'v hir::PathParameters) {\n+            fn visit_generic_args(&mut self, span: Span, parameters: &'v hir::GenericArgs) {\n                 // Don't collect elided lifetimes used inside of `Fn()` syntax.\n                 if parameters.parenthesized {\n                     let old_collect_elided_lifetimes = self.collect_elided_lifetimes;\n                     self.collect_elided_lifetimes = false;\n-                    hir::intravisit::walk_path_parameters(self, span, parameters);\n+                    hir::intravisit::walk_generic_args(self, span, parameters);\n                     self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n                 } else {\n-                    hir::intravisit::walk_path_parameters(self, span, parameters);\n+                    hir::intravisit::walk_generic_args(self, span, parameters);\n                 }\n             }\n \n@@ -1567,7 +1567,7 @@ impl<'a> LoweringContext<'a> {\n                         assert!(!def_id.is_local());\n                         let item_generics =\n                             self.cstore.item_generics_cloned_untracked(def_id, self.sess);\n-                        let n = item_generics.own_counts().lifetimes();\n+                        let n = item_generics.own_counts().lifetimes;\n                         self.type_def_lifetime_params.insert(def_id, n);\n                         n\n                     });\n@@ -1684,13 +1684,14 @@ impl<'a> LoweringContext<'a> {\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n         itctx: ImplTraitContext,\n     ) -> hir::PathSegment {\n-        let (mut parameters, infer_types) = if let Some(ref parameters) = segment.parameters {\n+        let (mut generic_args, infer_types) =\n+            if let Some(ref generic_args) = segment.parameters {\n             let msg = \"parenthesized parameters may only be used with a trait\";\n-            match **path_params {\n-                PathParameters::AngleBracketed(ref data) => {\n+            match **generic_args {\n+                GenericArgs::AngleBracketed(ref data) => {\n                     self.lower_angle_bracketed_parameter_data(data, param_mode, itctx)\n                 }\n-                PathParameters::Parenthesized(ref data) => match parenthesized_generic_args {\n+                GenericArgs::Parenthesized(ref data) => match parenthesized_generic_args {\n                     ParenthesizedGenericArgs::Ok => self.lower_parenthesized_parameter_data(data),\n                     ParenthesizedGenericArgs::Warn => {\n                         self.sess.buffer_lint(\n@@ -1699,30 +1700,30 @@ impl<'a> LoweringContext<'a> {\n                             data.span,\n                             msg.into(),\n                         );\n-                        (hir::PathParameters::none(), true)\n+                        (hir::GenericArgs::none(), true)\n                     }\n                     ParenthesizedGenericArgs::Err => {\n                         struct_span_err!(self.sess, data.span, E0214, \"{}\", msg)\n                             .span_label(data.span, \"only traits may use parentheses\")\n                             .emit();\n-                        (hir::PathParameters::none(), true)\n+                        (hir::GenericArgs::none(), true)\n                     }\n                 },\n             }\n         } else {\n             self.lower_angle_bracketed_parameter_data(&Default::default(), param_mode, itctx)\n         };\n \n-        if !parameters.parenthesized && parameters.lifetimes.is_empty() {\n-            path_params.parameters = (0..expected_lifetimes).map(|_| {\n-                PathParam::Lifetime(self.elided_lifetime(path_span))\n-            }).chain(path_params.parameters.into_iter()).collect();\n+        if !generic_args.parenthesized && generic_args.lifetimes().count() == 0 {\n+            generic_args.parameters = (0..expected_lifetimes).map(|_| {\n+                GenericArg::Lifetime(self.elided_lifetime(path_span))\n+            }).chain(generic_args.parameters.into_iter()).collect();\n         }\n \n         hir::PathSegment::new(\n-            self.lower_ident(segment.ident),\n-            path_params,\n-            infer_types,\n+            self.lower_ident(segment.identifier),\n+            generic_args,\n+            infer_types\n         )\n     }\n \n@@ -1731,14 +1732,14 @@ impl<'a> LoweringContext<'a> {\n         data: &AngleBracketedParameterData,\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n-    ) -> (hir::PathParameters, bool) {\n+    ) -> (hir::GenericArgs, bool) {\n         let &AngleBracketedParameterData { ref parameters, ref bindings, .. } = data;\n-        (hir::PathParameters {\n-            parameters: parameters.iter().map(|p| self.lower_path_param(p, itctx)).collect(),\n+        (hir::GenericArgs {\n+            parameters: parameters.iter().map(|p| self.lower_generic_arg(p, itctx)).collect(),\n             bindings: bindings.iter().map(|b| self.lower_ty_binding(b, itctx)).collect(),\n             parenthesized: false,\n         },\n-        types.is_empty() && param_mode == ParamMode::Optional)\n+        data.types().count() == 0 && param_mode == ParamMode::Optional)\n     }\n \n     fn lower_parenthesized_parameter_data(\n@@ -1774,8 +1775,8 @@ impl<'a> LoweringContext<'a> {\n                 };\n \n                 (\n-                    hir::PathParameters {\n-                        parameters: hir_vec![PathParam::Type(mk_tup(this, inputs, span))],\n+                    hir::GenericArgs {\n+                        parameters: hir_vec![GenericArg::Type(mk_tup(this, inputs, span))],\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n                                 id: this.next_id().node_id,"}, {"sha": "38a894df3cd5a45cd76bb31fc3e60eb6a0226958", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -327,7 +327,7 @@ pub struct PathSegment {\n     /// this is more than just simple syntactic sugar; the use of\n     /// parens affects the region binding rules, so we preserve the\n     /// distinction.\n-    pub parameters: Option<P<PathParameters>>,\n+    pub parameters: Option<P<GenericArgs>>,\n \n     /// Whether to infer remaining type parameters, if any.\n     /// This only applies to expression and pattern paths, and\n@@ -346,7 +346,7 @@ impl PathSegment {\n         }\n     }\n \n-    pub fn new(name: Name, parameters: PathParameters, infer_types: bool) -> Self {\n+    pub fn new(name: Name, parameters: GenericArgs, infer_types: bool) -> Self {\n         PathSegment {\n             name,\n             infer_types,\n@@ -359,11 +359,11 @@ impl PathSegment {\n     }\n \n     // FIXME: hack required because you can't create a static\n-    // PathParameters, so you can't just return a &PathParameters.\n+    // GenericArgs, so you can't just return a &GenericArgs.\n     pub fn with_parameters<F, R>(&self, f: F) -> R\n-        where F: FnOnce(&PathParameters) -> R\n+        where F: FnOnce(&GenericArgs) -> R\n     {\n-        let dummy = PathParameters::none();\n+        let dummy = GenericArgs::none();\n         f(if let Some(ref params) = self.parameters {\n             &params\n         } else {\n@@ -373,15 +373,15 @@ impl PathSegment {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum PathParam {\n+pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(P<Ty>),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct PathParameters {\n+pub struct GenericArgs {\n     /// The generic parameters for this path segment.\n-    pub parameters: HirVec<PathParam>,\n+    pub parameters: HirVec<GenericArg>,\n     /// Bindings (equality constraints) on associated types, if present.\n     /// E.g., `Foo<A=Bar>`.\n     pub bindings: HirVec<TypeBinding>,\n@@ -391,7 +391,7 @@ pub struct PathParameters {\n     pub parenthesized: bool,\n }\n \n-impl PathParameters {\n+impl GenericArgs {\n     pub fn none() -> Self {\n         Self {\n             parameters: HirVec::new(),\n@@ -406,33 +406,33 @@ impl PathParameters {\n \n     pub fn inputs(&self) -> &[P<Ty>] {\n         if self.parenthesized {\n-            if let Some(ref ty) = self.types().get(0) {\n+            if let Some(ref ty) = self.types().next() {\n                 if let TyTup(ref tys) = ty.node {\n                     return tys;\n                 }\n             }\n         }\n-        bug!(\"PathParameters::inputs: not a `Fn(T) -> U`\");\n+        bug!(\"GenericArgs::inputs: not a `Fn(T) -> U`\");\n     }\n \n-    pub fn lifetimes(&self) -> Vec<&Lifetime> {\n+    pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &Lifetime> {\n         self.parameters.iter().filter_map(|p| {\n-            if let PathParam::Lifetime(lt) = p {\n+            if let GenericArg::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n                 None\n             }\n-        }).collect()\n+        })\n     }\n \n-    pub fn types(&self) -> Vec<&P<Ty>> {\n+    pub fn types(&self) -> impl DoubleEndedIterator<Item = &P<Ty>> {\n         self.parameters.iter().filter_map(|p| {\n-            if let PathParam::Type(ty) = p {\n+            if let GenericArg::Type(ty) = p {\n                 Some(ty)\n             } else {\n                 None\n             }\n-        }).collect()\n+        })\n     }\n }\n \n@@ -562,11 +562,11 @@ impl Generics {\n         self.params.iter().any(|param| param.is_type_param())\n     }\n \n-    pub fn lifetimes<'a>(&'a self) -> impl Iterator<Item = &'a LifetimeDef> {\n+    pub fn lifetimes<'a>(&'a self) -> impl DoubleEndedIterator<Item = &'a LifetimeDef> {\n         self.params.lifetimes()\n     }\n \n-    pub fn ty_params<'a>(&'a self) -> impl Iterator<Item = &'a TyParam> {\n+    pub fn ty_params<'a>(&'a self) -> impl DoubleEndedIterator<Item = &'a TyParam> {\n         self.params.ty_params()\n     }\n }"}, {"sha": "f7e98591c112b4ec52ce6401fa1aacd0216ba050", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 25, "deletions": 35, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -25,7 +25,7 @@ use syntax_pos::{self, BytePos, FileName};\n \n use hir;\n use hir::{PatKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier, RangeEnd};\n-use hir::PathParam;\n+use hir::GenericArg;\n \n use std::cell::Cell;\n use std::io::{self, Write, Read};\n@@ -1273,7 +1273,7 @@ impl<'a> State<'a> {\n             if !parameters.parameters.is_empty() ||\n                 !parameters.bindings.is_empty()\n             {\n-                self.print_path_parameters(&parameters, segment.infer_types, true)\n+                self.print_generic_args(&parameters, segment.infer_types, true)\n             } else {\n                 Ok(())\n             }\n@@ -1642,7 +1642,7 @@ impl<'a> State<'a> {\n                segment.name != keywords::DollarCrate.name() {\n                self.print_name(segment.name)?;\n                segment.with_parameters(|parameters| {\n-                   self.print_path_parameters(parameters,\n+                   self.print_generic_args(parameters,\n                                               segment.infer_types,\n                                               colons_before_params)\n                })?;\n@@ -1674,7 +1674,7 @@ impl<'a> State<'a> {\n                        segment.name != keywords::DollarCrate.name() {\n                         self.print_name(segment.name)?;\n                         segment.with_parameters(|parameters| {\n-                            self.print_path_parameters(parameters,\n+                            self.print_generic_args(parameters,\n                                                        segment.infer_types,\n                                                        colons_before_params)\n                         })?;\n@@ -1686,7 +1686,7 @@ impl<'a> State<'a> {\n                 let item_segment = path.segments.last().unwrap();\n                 self.print_name(item_segment.name)?;\n                 item_segment.with_parameters(|parameters| {\n-                    self.print_path_parameters(parameters,\n+                    self.print_generic_args(parameters,\n                                                item_segment.infer_types,\n                                                colons_before_params)\n                 })\n@@ -1698,27 +1698,27 @@ impl<'a> State<'a> {\n                 self.s.word(\"::\")?;\n                 self.print_name(item_segment.name)?;\n                 item_segment.with_parameters(|parameters| {\n-                    self.print_path_parameters(parameters,\n+                    self.print_generic_args(parameters,\n                                                item_segment.infer_types,\n                                                colons_before_params)\n                 })\n             }\n         }\n     }\n \n-    fn print_path_parameters(&mut self,\n-                             path_params: &hir::PathParameters,\n+    fn print_generic_args(&mut self,\n+                             generic_args: &hir::GenericArgs,\n                              infer_types: bool,\n                              colons_before_params: bool)\n                              -> io::Result<()> {\n-        if path_params.parenthesized {\n+        if generic_args.parenthesized {\n             self.s.word(\"(\")?;\n-            self.commasep(Inconsistent, path_params.inputs(), |s, ty| s.print_type(&ty))?;\n+            self.commasep(Inconsistent, generic_args.inputs(), |s, ty| s.print_type(&ty))?;\n             self.s.word(\")\")?;\n \n             self.space_if_not_bol()?;\n             self.word_space(\"->\")?;\n-            self.print_type(&path_params.bindings[0].ty)?;\n+            self.print_type(&generic_args.bindings[0].ty)?;\n         } else {\n             let start = if colons_before_params { \"::<\" } else { \"<\" };\n             let empty = Cell::new(true);\n@@ -1731,30 +1731,20 @@ impl<'a> State<'a> {\n                 }\n             };\n \n-            let elide_lifetimes = path_params.parameters.iter().all(|p| {\n-                if let PathParam::Lifetime(lt) = p {\n-                    if !lt.is_elided() {\n-                        return false;\n-                    }\n-                }\n-                true\n-            });\n-\n-            self.commasep(Inconsistent, &path_params.parameters, |s, p| {\n-                match p {\n-                    PathParam::Lifetime(lt) => {\n-                        if !elide_lifetimes {\n-                            s.print_lifetime(lt)\n-                        } else {\n-                            Ok(())\n-                        }\n+            let elide_lifetimes = generic_args.lifetimes().all(|lt| lt.is_elided());\n+            if !elide_lifetimes {\n+                start_or_comma(self)?;\n+                self.commasep(Inconsistent, &generic_args.parameters, |s, p| {\n+                    match p {\n+                        GenericArg::Lifetime(lt) => s.print_lifetime(lt),\n+                        GenericArg::Type(ty) => s.print_type(ty),\n                     }\n-                    PathParam::Type(ty) => s.print_type(ty),\n-                }\n-            })?;\n-\n-            if !path_params.parameters.is_empty() {\n-                empty.set(false);\n+                })?;\n+            } else if generic_args.types().count() != 0 {\n+                start_or_comma(self)?;\n+                self.commasep(Inconsistent,\n+                              &generic_args.types().collect::<Vec<_>>(),\n+                              |s, ty| s.print_type(&ty))?;\n             }\n \n             // FIXME(eddyb) This would leak into error messages, e.g.:\n@@ -1764,7 +1754,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"..\")?;\n             }\n \n-            for binding in path_params.bindings.iter() {\n+            for binding in generic_args.bindings.iter() {\n                 start_or_comma(self)?;\n                 self.print_name(binding.name)?;\n                 self.s.space()?;"}, {"sha": "6f65562867804e55aa4d013f64948c1e66a891be", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -180,12 +180,12 @@ impl_stable_hash_for!(struct hir::PathSegment {\n     parameters\n });\n \n-impl_stable_hash_for!(enum hir::PathParam {\n+impl_stable_hash_for!(enum hir::GenericArg {\n     Lifetime(lt),\n     Type(ty)\n });\n \n-impl_stable_hash_for!(struct hir::PathParameters {\n+impl_stable_hash_for!(struct hir::GenericArgs {\n     parameters,\n     bindings,\n     parenthesized"}, {"sha": "69818068e9c920f8499a81626663331df0b27b63", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -1603,7 +1603,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         &mut self,\n         def: Def,\n         depth: usize,\n-        params: &'tcx hir::PathParameters,\n+        params: &'tcx hir::GenericArgs,\n     ) {\n         if params.parenthesized {\n             let was_in_fn_syntax = self.is_in_fn_syntax;\n@@ -1613,10 +1613,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             return;\n         }\n \n-        if params.lifetimes().iter().all(|l| l.is_elided()) {\n-            self.resolve_elided_lifetimes(params.lifetimes(), true);\n+        if params.lifetimes().all(|l| l.is_elided()) {\n+            self.resolve_elided_lifetimes(params.lifetimes().collect(), true);\n         } else {\n-            for l in &params.lifetimes() {\n+            for l in params.lifetimes() {\n                 self.visit_lifetime(l);\n             }\n         }\n@@ -1688,13 +1688,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     } else {\n                         Some(Region::Static)\n                     },\n-                    Set1::One(r) => r.subst(params.lifetimes(), map),\n+                    Set1::One(r) => r.subst(params.lifetimes().collect(), map),\n                     Set1::Many => None,\n                 })\n                 .collect()\n         });\n \n-        for (i, ty) in params.types().iter().enumerate() {\n+        for (i, ty) in params.types().enumerate() {\n             if let Some(&lt) = object_lifetime_defaults.get(i) {\n                 let scope = Scope::ObjectLifetimeDefault {\n                     lifetime: lt,"}, {"sha": "447267adfcdd076ad305c5d258d97401d1e33e3f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -1009,24 +1009,24 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }\n     }\n \n-    pub fn lifetimes(&self) -> Vec<&RegionParameterDef> {\n+    pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &RegionParameterDef> {\n         self.parameters.iter().filter_map(|p| {\n             if let GenericParam::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n                 None\n             }\n-        }).collect()\n+        })\n     }\n \n-    pub fn types(&self) -> Vec<&TypeParameterDef> {\n+    pub fn types(&self) -> impl DoubleEndedIterator<Item = &TypeParameterDef> {\n         self.parameters.iter().filter_map(|p| {\n             if let GenericParam::Type(ty) = p {\n                 Some(ty)\n             } else {\n                 None\n             }\n-        }).collect()\n+        })\n     }\n \n     pub fn parent_lifetimes(&self) -> u32 {"}, {"sha": "932f082c87cb0824b6cc217b7481949d337bae56", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -105,6 +105,10 @@ impl<'tcx> From<Ty<'tcx>> for Kind<'tcx> {\n     }\n }\n \n+impl<'tcx> Into<Kind<'tcx>> for ty::Region<'tcx> {}\n+\n+impl<'tcx> Into<Kind<'tcx>> for Ty<'tcx> {}\n+\n impl<'tcx> Kind<'tcx> {\n     #[inline]\n     pub fn unpack(self) -> UnpackedKind<'tcx> {"}, {"sha": "834bd0c32ed8fed265aebedd12a137157dd96b61", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -679,10 +679,10 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n                     ast::TyKind::Path(_, ref path) => path.segments.iter().any(|seg| {\n                         match seg.parameters.as_ref().map(|p| &**p) {\n                             None => false,\n-                            Some(&ast::PathParameters::AngleBracketed(ref data)) =>\n+                            Some(&ast::GenericArgs::AngleBracketed(ref data)) =>\n                                 any_involves_impl_trait(data.types().into_iter()) ||\n                                 any_involves_impl_trait(data.bindings.iter().map(|b| &b.ty)),\n-                            Some(&ast::PathParameters::Parenthesized(ref data)) =>\n+                            Some(&ast::GenericArgs::Parenthesized(ref data)) =>\n                                 any_involves_impl_trait(data.inputs.iter()) ||\n                                 any_involves_impl_trait(data.output.iter()),\n                         }"}, {"sha": "6d13548b9adffff006251b65695b7445dba0e3ef", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -822,10 +822,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         for seg in &path.segments {\n             if let Some(ref params) = seg.parameters {\n                 match **params {\n-                    ast::PathParameters::AngleBracketed(ref data) => for t in data.types() {\n+                    ast::GenericArgs::AngleBracketed(ref data) => for t in data.types() {\n                         self.visit_ty(t);\n                     },\n-                    ast::PathParameters::Parenthesized(ref data) => {\n+                    ast::GenericArgs::Parenthesized(ref data) => {\n                         for t in &data.inputs {\n                             self.visit_ty(t);\n                         }\n@@ -906,7 +906,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n         // Explicit types in the turbo-fish.\n         if let Some(ref params) = seg.parameters {\n-            if let ast::PathParameters::AngleBracketed(ref data) = **params {\n+            if let ast::GenericArgs::AngleBracketed(ref data) = **params {\n                 for t in data.types() {\n                     self.visit_ty(t);\n                 }"}, {"sha": "c1022c09de35ab60fbd92792f2f1fc5fd185fe19", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -693,7 +693,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 return false;\n             }\n             if let Some(ref params) = path.segments[0].parameters {\n-                if let ast::PathParameters::Parenthesized(_) = **params {\n+                if let ast::GenericArgs::Parenthesized(_) = **params {\n                     return true;\n                 }\n             }"}, {"sha": "656045c970f9ceb36d18f931c57564f50e7942cf", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -199,7 +199,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     fn create_substs_for_ast_path(&self,\n         span: Span,\n         def_id: DefId,\n-        parameters: &hir::PathParameters,\n+        parameters: &hir::GenericArgs,\n         infer_types: bool,\n         self_ty: Option<Ty<'tcx>>)\n         -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>)\n@@ -973,13 +973,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             segment.with_parameters(|params| {\n                 for p in &params.parameters {\n                     let (mut span_err, span, kind) = match p {\n-                        hir::PathParam::Lifetime(lt) => {\n+                        hir::GenericArg::Lifetime(lt) => {\n                             (struct_span_err!(self.tcx().sess, lt.span, E0110,\n                                               \"lifetime parameters are not allowed on this type\"),\n                              lt.span,\n                              \"lifetime\")\n                         }\n-                        hir::PathParam::Type(ty) => {\n+                        hir::GenericArg::Type(ty) => {\n                             (struct_span_err!(self.tcx().sess, ty.span, E0109,\n                                               \"type parameters are not allowed on this type\"),\n                              ty.span,"}, {"sha": "3274c449daa4ae1ca6aa8931e7f00a1e8b9de1d6", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         let method_generics = self.tcx.generics_of(pick.item.def_id);\n         let mut fn_segment = Some((segment, method_generics));\n         let supress_mismatch = self.fcx.check_impl_trait(self.span, fn_segment);\n-        self.fcx.check_path_parameter_count(self.span, &mut fn_segment, true, supress_mismatch);\n+        self.fcx.check_generic_arg_count(self.span, &mut fn_segment, true, supress_mismatch);\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method."}, {"sha": "ef61c99ae01cf19d37ce5ee917fe39464cfc0acd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -4800,8 +4800,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n         let supress_mismatch = self.check_impl_trait(span, fn_segment);\n-        self.check_path_parameter_count(span, &mut type_segment, false, supress_mismatch);\n-        self.check_path_parameter_count(span, &mut fn_segment, false, supress_mismatch);\n+        self.check_generic_arg_count(span, &mut type_segment, false, supress_mismatch);\n+        self.check_generic_arg_count(span, &mut fn_segment, false, supress_mismatch);\n \n         let (fn_start, has_self) = match (type_segment, fn_segment) {\n             (_, Some((_, generics))) => {\n@@ -4955,7 +4955,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Report errors if the provided parameters are too few or too many.\n-    fn check_path_parameter_count(&self,\n+    fn check_generic_arg_count(&self,\n                                   span: Span,\n                                   segment: &mut Option<(&hir::PathSegment, &ty::Generics)>,\n                                   is_method_call: bool,\n@@ -4964,7 +4964,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             (vec![], vec![], true, &[][..]),\n             |(s, _)| s.parameters.as_ref().map_or(\n                 (vec![], vec![], s.infer_types, &[][..]),\n-                |p| (p.lifetimes(), p.types(),\n+                |p| (p.lifetimes().collect(), p.types().collect(),\n                      s.infer_types, &p.bindings[..])));\n         let infer_lifetimes = lifetimes.len() == 0;\n "}, {"sha": "f454136026f430026db5a8c2d3c7d563b662b5a6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -1558,8 +1558,8 @@ impl Clean<TyParamBound> for hir::TyParamBound {\n     }\n }\n \n-fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: bool,\n-                        bindings: Vec<TypeBinding>, substs: &Substs) -> PathParameters {\n+fn external_generic_args(cx: &DocContext, trait_did: Option<DefId>, has_self: bool,\n+                        bindings: Vec<TypeBinding>, substs: &Substs) -> GenericArgs {\n     let lifetimes = substs.regions().filter_map(|v| v.clean(cx)).collect();\n     let types = substs.types().skip(has_self as usize).collect::<Vec<_>>();\n \n@@ -1570,7 +1570,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n             let inputs = match types[0].sty {\n                 ty::TyTuple(ref tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n                 _ => {\n-                    return PathParameters::AngleBracketed {\n+                    return GenericArgs::AngleBracketed {\n                         lifetimes,\n                         types: types.clean(cx),\n                         bindings,\n@@ -1583,13 +1583,13 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n             //     ty::TyTuple(ref v) if v.is_empty() => None, // -> ()\n             //     _ => Some(types[1].clean(cx))\n             // };\n-            PathParameters::Parenthesized {\n+            GenericArgs::Parenthesized {\n                 inputs,\n                 output,\n             }\n         },\n         _ => {\n-            PathParameters::AngleBracketed {\n+            GenericArgs::AngleBracketed {\n                 lifetimes,\n                 types: types.clean(cx),\n                 bindings,\n@@ -1607,7 +1607,7 @@ fn external_path(cx: &DocContext, name: &str, trait_did: Option<DefId>, has_self\n         def: Def::Err,\n         segments: vec![PathSegment {\n             name: name.to_string(),\n-            params: external_path_params(cx, trait_did, has_self, bindings, substs)\n+            params: external_generic_args(cx, trait_did, has_self, bindings, substs)\n         }],\n     }\n }\n@@ -2656,7 +2656,7 @@ impl Type {\n         match *self {\n             ResolvedPath { ref path, .. } => {\n                 path.segments.last().and_then(|seg| {\n-                    if let PathParameters::AngleBracketed { ref types, .. } = seg.params {\n+                    if let GenericArgs::AngleBracketed { ref types, .. } = seg.params {\n                         Some(&**types)\n                     } else {\n                         None\n@@ -3447,7 +3447,7 @@ impl Path {\n             def: Def::Err,\n             segments: vec![PathSegment {\n                 name,\n-                params: PathParameters::AngleBracketed {\n+                params: GenericArgs::AngleBracketed {\n                     lifetimes: Vec::new(),\n                     types: Vec::new(),\n                     bindings: Vec::new(),\n@@ -3471,8 +3471,8 @@ impl Clean<Path> for hir::Path {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n-pub enum PathParameters {\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eg, Debug, Hash)]\n+pub enum GenericArgs {\n     AngleBracketed {\n         lifetimes: Vec<Lifetime>,\n         types: Vec<Type>,\n@@ -3484,22 +3484,22 @@ pub enum PathParameters {\n     }\n }\n \n-impl Clean<PathParameters> for hir::PathParameters {\n-    fn clean(&self, cx: &DocContext) -> PathParameters {\n+impl Clean<GenericArgs> for hir::GenericArgs {\n+    fn clean(&self, cx: &DocContext) -> GenericArgs {\n         if self.parenthesized {\n             let output = self.bindings[0].ty.clean(cx);\n-            PathParameters::Parenthesized {\n+            GenericArgs::Parenthesized {\n                 inputs: self.inputs().clean(cx),\n                 output: if output != Type::Tuple(Vec::new()) { Some(output) } else { None }\n             }\n         } else {\n-            PathParameters::AngleBracketed {\n-                lifetimes: if self.lifetimes().iter().all(|lt| lt.is_elided()) {\n+            GenericArgs::AngleBracketed {\n+                lifetimes: if self.lifetimes().all(|lt| lt.is_elided()) {\n                     vec![]\n                 } else {\n-                    self.lifetimes().iter().map(|lp| lp.clean(cx)).collect()\n+                    self.lifetimes().map(|lp| lp.clean(cx)).collect()\n                 },\n-                types: self.types().iter().map(|tp| tp.clean(cx)).collect(),\n+                types: self.types().map(|tp| tp.clean(cx)).collect(),\n                 bindings: self.bindings.clean(cx),\n             }\n         }\n@@ -3509,7 +3509,7 @@ impl Clean<PathParameters> for hir::PathParameters {\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub struct PathSegment {\n     pub name: String,\n-    pub params: PathParameters,\n+    pub params: GenericArgs,\n }\n \n impl Clean<PathSegment> for hir::PathSegment {"}, {"sha": "1dd57465996674412c738a68b2801cd243286d14", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -27,7 +27,7 @@ use std::collections::BTreeMap;\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n \n-use clean::PathParameters as PP;\n+use clean::GenericArgs as PP;\n use clean::WherePredicate as WP;\n use clean;\n use core::DocContext;"}, {"sha": "de5c0eeffc98c143c3587a40f3228b08b55bdafa", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -288,10 +288,10 @@ impl fmt::Display for clean::TyParamBound {\n     }\n }\n \n-impl fmt::Display for clean::PathParameters {\n+impl fmt::Display for clean::GenericArgs {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::PathParameters::AngleBracketed {\n+            clean::GenericArgs::AngleBracketed {\n                 ref lifetimes, ref types, ref bindings\n             } => {\n                 if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n@@ -337,7 +337,7 @@ impl fmt::Display for clean::PathParameters {\n                     }\n                 }\n             }\n-            clean::PathParameters::Parenthesized { ref inputs, ref output } => {\n+            clean::GenericArgs::Parenthesized { ref inputs, ref output } => {\n                 f.write_str(\"(\")?;\n                 let mut comma = false;\n                 for ty in inputs {"}, {"sha": "7bcaf9bbd5246f0db913000f9e59413289f9675c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -12,7 +12,7 @@\n \n pub use self::TyParamBound::*;\n pub use self::UnsafeSource::*;\n-pub use self::PathParameters::*;\n+pub use self::GenericArgs::*;\n pub use symbol::{Ident, Symbol as Name};\n pub use util::ThinVec;\n pub use util::parser::ExprPrecedence;\n@@ -135,7 +135,7 @@ pub struct PathSegment {\n     /// `Some` means that parameter list is supplied (`Path<X, Y>`)\n     /// but it can be empty (`Path<>`).\n     /// `P` is used as a size optimization for the common case with no parameters.\n-    pub parameters: Option<P<PathParameters>>,\n+    pub parameters: Option<P<GenericArgs>>,\n }\n \n impl PathSegment {\n@@ -151,14 +151,14 @@ impl PathSegment {\n ///\n /// E.g. `<A, B>` as in `Foo<A, B>` or `(A, B)` as in `Foo(A, B)`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum PathParameters {\n+pub enum GenericArgs {\n     /// The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`\n     AngleBracketed(AngleBracketedParameterData),\n     /// The `(A,B)` and `C` in `Foo(A,B) -> C`\n     Parenthesized(ParenthesizedParameterData),\n }\n \n-impl PathParameters {\n+impl GenericArgs {\n     pub fn span(&self) -> Span {\n         match *self {\n             AngleBracketed(ref data) => data.span,\n@@ -187,36 +187,36 @@ pub struct AngleBracketedParameterData {\n }\n \n impl AngleBracketedParameterData {\n-    pub fn lifetimes(&self) -> Vec<&Lifetime> {\n+    pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &Lifetime> {\n         self.parameters.iter().filter_map(|p| {\n             if let AngleBracketedParam::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n                 None\n             }\n-        }).collect()\n+        })\n     }\n \n-    pub fn types(&self) -> Vec<&P<Ty>> {\n+    pub fn types(&self) -> impl DoubleEndedIterator<Item = &P<Ty>> {\n         self.parameters.iter().filter_map(|p| {\n             if let AngleBracketedParam::Type(ty) = p {\n                 Some(ty)\n             } else {\n                 None\n             }\n-        }).collect()\n+        })\n     }\n }\n \n-impl Into<Option<P<PathParameters>>> for AngleBracketedParameterData {\n-    fn into(self) -> Option<P<PathParameters>> {\n-        Some(P(PathParameters::AngleBracketed(self)))\n+impl Into<Option<P<GenericArgs>>> for AngleBracketedParameterData {\n+    fn into(self) -> Option<P<GenericArgs>> {\n+        Some(P(GenericArgs::AngleBracketed(self)))\n     }\n }\n \n-impl Into<Option<P<PathParameters>>> for ParenthesizedParameterData {\n-    fn into(self) -> Option<P<PathParameters>> {\n-        Some(P(PathParameters::Parenthesized(self)))\n+impl Into<Option<P<GenericArgs>>> for ParenthesizedParameterData {\n+    fn into(self) -> Option<P<GenericArgs>> {\n+        Some(P(GenericArgs::Parenthesized(self)))\n     }\n }\n "}, {"sha": "decb7e56132f1be41f5064acc130072a845c5bed", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -133,7 +133,11 @@ pub trait Folder : Sized {\n     }\n \n     fn fold_param(&mut self, p: AngleBracketedParam) -> AngleBracketedParam {\n-        noop_fold_param(p, self)\n+        match p {\n+            AngleBracketedParam::Lifetime(lt) =>\n+                AngleBracketedParam::Lifetime(self.fold_lifetime(lt)),\n+            AngleBracketedParam::Type(ty) => AngleBracketedParam::Type(self.fold_ty(ty)),\n+        }\n     }\n \n     fn fold_ty(&mut self, t: P<Ty>) -> P<Ty> {\n@@ -176,8 +180,8 @@ pub trait Folder : Sized {\n         noop_fold_qpath(qs, p, self)\n     }\n \n-    fn fold_path_parameters(&mut self, p: PathParameters) -> PathParameters {\n-        noop_fold_path_parameters(p, self)\n+    fn fold_generic_args(&mut self, p: GenericArgs) -> GenericArgs {\n+        noop_fold_generic_args(p, self)\n     }\n \n     fn fold_angle_bracketed_parameter_data(&mut self, p: AngleBracketedParameterData)\n@@ -357,19 +361,6 @@ pub fn noop_fold_ty_binding<T: Folder>(b: TypeBinding, fld: &mut T) -> TypeBindi\n     }\n }\n \n-pub fn noop_fold_param<T: Folder>(p: AngleBracketedParam,\n-                                  fld: &mut T)\n-                                  -> AngleBracketedParam {\n-    match p {\n-        AngleBracketedParam::Lifetime(lt) => {\n-            AngleBracketedParam::Lifetime(noop_fold_lifetime(lt, fld))\n-        }\n-        AngleBracketedParam::Type(ty) => {\n-            AngleBracketedParam::Type(noop_fold_ty(ty, fld))\n-        }\n-    }\n-}\n-\n pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n     t.map(|Ty {id, node, span}| Ty {\n         id: fld.new_id(id),\n@@ -452,7 +443,7 @@ pub fn noop_fold_path<T: Folder>(Path { segments, span }: Path, fld: &mut T) ->\n     Path {\n         segments: segments.move_map(|PathSegment {ident, parameters}| PathSegment {\n             ident: fld.fold_ident(ident),\n-            parameters: parameters.map(|ps| ps.map(|ps| fld.fold_path_parameters(ps))),\n+            parameters: parameters.map(|ps| ps.map(|ps| fld.fold_generic_args(ps))),\n         }),\n         span: fld.new_span(span)\n     }\n@@ -471,14 +462,14 @@ pub fn noop_fold_qpath<T: Folder>(qself: Option<QSelf>,\n     (qself, fld.fold_path(path))\n }\n \n-pub fn noop_fold_path_parameters<T: Folder>(path_parameters: PathParameters, fld: &mut T)\n-                                            -> PathParameters\n+pub fn noop_fold_generic_args<T: Folder>(generic_args: GenericArgs, fld: &mut T)\n+                                         -> GenericArgs\n {\n-    match path_parameters {\n-        PathParameters::AngleBracketed(data) =>\n-            PathParameters::AngleBracketed(fld.fold_angle_bracketed_parameter_data(data)),\n-        PathParameters::Parenthesized(data) =>\n-            PathParameters::Parenthesized(fld.fold_parenthesized_parameter_data(data)),\n+    match generic_args {\n+        GenericArgs::AngleBracketed(data) =>\n+            GenericArgs::AngleBracketed(fld.fold_angle_bracketed_parameter_data(data)),\n+        GenericArgs::Parenthesized(data) =>\n+            GenericArgs::Parenthesized(fld.fold_parenthesized_parameter_data(data)),\n     }\n }\n \n@@ -1201,7 +1192,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                     PathSegment {\n                         ident: folder.fold_ident(seg.ident),\n                         parameters: seg.parameters.map(|ps| {\n-                            ps.map(|ps| folder.fold_path_parameters(ps))\n+                            ps.map(|ps| folder.fold_generic_args(ps))\n                         }),\n                     },\n                     folder.fold_exprs(args))"}, {"sha": "287fe0b636f1c0a3bfb031b4619a8622fc37d31f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -1992,7 +1992,7 @@ impl<'a> State<'a> {\n         self.s.word(\".\")?;\n         self.print_ident(segment.ident)?;\n         if let Some(ref parameters) = segment.parameters {\n-            self.print_path_parameters(parameters, true)?;\n+            self.print_generic_args(parameters, true)?;\n         }\n         self.print_call_post(base_args)\n     }\n@@ -2436,7 +2436,7 @@ impl<'a> State<'a> {\n            segment.ident.name != keywords::DollarCrate.name() {\n             self.print_ident(segment.ident)?;\n             if let Some(ref parameters) = segment.parameters {\n-                self.print_path_parameters(parameters, colons_before_params)?;\n+                self.print_generic_args(parameters, colons_before_params)?;\n             }\n         } else if segment.ident.name == keywords::DollarCrate.name() {\n             self.print_dollar_crate(segment.ident.span.ctxt())?;\n@@ -2463,13 +2463,13 @@ impl<'a> State<'a> {\n         let item_segment = path.segments.last().unwrap();\n         self.print_ident(item_segment.ident)?;\n         match item_segment.parameters {\n-            Some(ref parameters) => self.print_path_parameters(parameters, colons_before_params),\n+            Some(ref parameters) => self.print_generic_args(parameters, colons_before_params),\n             None => Ok(()),\n         }\n     }\n \n-    fn print_path_parameters(&mut self,\n-                             parameters: &ast::PathParameters,\n+    fn print_generic_args(&mut self,\n+                             parameters: &ast::GenericArgs,\n                              colons_before_params: bool)\n                              -> io::Result<()>\n     {\n@@ -2478,7 +2478,7 @@ impl<'a> State<'a> {\n         }\n \n         match *parameters {\n-            ast::PathParameters::AngleBracketed(ref data) => {\n+            ast::GenericArgs::AngleBracketed(ref data) => {\n                 self.s.word(\"<\")?;\n \n                 self.commasep(Inconsistent, &data.parameters, |s, p| s.print_param(p))?;\n@@ -2499,7 +2499,7 @@ impl<'a> State<'a> {\n                 self.s.word(\">\")?\n             }\n \n-            ast::PathParameters::Parenthesized(ref data) => {\n+            ast::GenericArgs::Parenthesized(ref data) => {\n                 self.s.word(\"(\")?;\n                 self.commasep(\n                     Inconsistent,"}, {"sha": "95ae9f9bcf80247e4d8c3d8ca986a4cbea666feb", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -137,9 +137,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_use_tree(self, use_tree, id)\n     }\n-    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &PathParameters) {\n+    fn visit_generic_args(&mut self, path_span: Span, generic_args: &GenericArgs) {\n         self.count += 1;\n-        walk_path_parameters(self, path_span, path_parameters)\n+        walk_generic_args(self, path_span, generic_args)\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &TypeBinding) {\n         self.count += 1;"}, {"sha": "6dc61f3058a5c2a65739abf8f34a40ddc5e20a0e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -128,8 +128,14 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'ast PathSegment) {\n         walk_path_segment(self, path_span, path_segment)\n     }\n-    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'ast PathParameters) {\n-        walk_path_parameters(self, path_span, path_parameters)\n+    fn visit_generic_args(&mut self, path_span: Span, generic_args: &'ast GenericArgs) {\n+        walk_generic_args(self, path_span, generic_args)\n+    }\n+    fn visit_angle_bracketed_param(&mut self, param: &'ast AngleBracketedParam) {\n+        match param {\n+            AngleBracketedParam::Lifetime(lt) => self.visit_lifetime(lt),\n+            AngleBracketedParam::Type(ty)     => self.visit_ty(ty),\n+        }\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'ast TypeBinding) {\n         walk_assoc_type_binding(self, type_binding)\n@@ -376,22 +382,21 @@ pub fn walk_path_segment<'a, V: Visitor<'a>>(visitor: &mut V,\n                                              segment: &'a PathSegment) {\n     visitor.visit_ident(segment.ident);\n     if let Some(ref parameters) = segment.parameters {\n-        visitor.visit_path_parameters(path_span, parameters);\n+        visitor.visit_generic_args(path_span, parameters);\n     }\n }\n \n-pub fn walk_path_parameters<'a, V>(visitor: &mut V,\n-                                   _path_span: Span,\n-                                   path_parameters: &'a PathParameters)\n+pub fn walk_generic_args<'a, V>(visitor: &mut V,\n+                                _path_span: Span,\n+                                generic_args: &'a GenericArgs)\n     where V: Visitor<'a>,\n {\n-    match *path_parameters {\n-        PathParameters::AngleBracketed(ref data) => {\n-            walk_list!(visitor, visit_lifetime, data.lifetimes());\n-            walk_list!(visitor, visit_ty, data.types());\n+    match *generic_args {\n+        GenericArgs::AngleBracketed(ref data) => {\n+            walk_list!(visitor, visit_angle_bracketed_param, &data.parameters);\n             walk_list!(visitor, visit_assoc_type_binding, &data.bindings);\n         }\n-        PathParameters::Parenthesized(ref data) => {\n+        GenericArgs::Parenthesized(ref data) => {\n             walk_list!(visitor, visit_ty, &data.inputs);\n             walk_list!(visitor, visit_ty, &data.output);\n         }"}, {"sha": "4df46c0e2e1e7377cc514d93e22a8c11f5f14996", "filename": "src/test/run-pass/issue-22777.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Ftest%2Frun-pass%2Fissue-22777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Ftest%2Frun-pass%2Fissue-22777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22777.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -32,8 +32,8 @@ struct S04_TyParamBound(S05_PolyTraitRef);\n struct S05_PolyTraitRef(S06_TraitRef);\n struct S06_TraitRef(S07_Path);\n struct S07_Path(Vec<S08_PathSegment>);\n-struct S08_PathSegment(S09_PathParameters);\n-struct S09_PathParameters(P<S10_ParenthesizedParameterData>);\n+struct S08_PathSegment(S09_GenericArgs);\n+struct S09_GenericArgs(P<S10_ParenthesizedParameterData>);\n struct S10_ParenthesizedParameterData(Option<P<S11_Ty>>);\n struct S11_Ty(P<S12_Expr>);\n struct S12_Expr(P<S13_Block>);"}, {"sha": "3f69de3de834f8d3ca61be8d84c9b5c92401c563", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e89753283a3d08704ab293b337d255e5d5e5210/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=3e89753283a3d08704ab293b337d255e5d5e5210", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(generic_associated_types)]\n \n-//FIXME(#44265): \"lifetime parameter not allowed on this type\" errors will be addressed in a\n+//FIXME(#44265): \"lifetime parameter not allowed\" errors will be addressed in a\n // follow-up PR\n \n use std::fmt::Display;"}]}