{"sha": "69e2f23a41f3bb5cb49e3dc66160f3888d871917", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZTJmMjNhNDFmM2JiNWNiNDllM2RjNjYxNjBmMzg4OGQ4NzE5MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-07T00:01:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-07T00:01:10Z"}, "message": "Auto merge of #86080 - GuillaumeGomez:rollup-vb5g14e, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #83433 (Pass --cfg=bootstrap for proc macros built by stage0)\n - #84940 (Don't run sanity checks for `x.py setup`)\n - #85912 (Use `Iterator::any` and `filter_map` instead of open-coding them)\n - #85965 (Remove dead code from `LocalAnalyzer`)\n - #86010 (Fix two ICEs in the parser)\n - #86040 (Fix display for search results)\n - #86058 (Remove `_`  from E0121 diagnostic suggestions)\n - #86077 (Fix corrected example in E0759.md)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "66314bbf9882c29571d0cb590d532e28f47f3be3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66314bbf9882c29571d0cb590d532e28f47f3be3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69e2f23a41f3bb5cb49e3dc66160f3888d871917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69e2f23a41f3bb5cb49e3dc66160f3888d871917", "html_url": "https://github.com/rust-lang/rust/commit/69e2f23a41f3bb5cb49e3dc66160f3888d871917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69e2f23a41f3bb5cb49e3dc66160f3888d871917/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35fff69d043b1c0f5c29894e7f4b0da8b039c131", "url": "https://api.github.com/repos/rust-lang/rust/commits/35fff69d043b1c0f5c29894e7f4b0da8b039c131", "html_url": "https://github.com/rust-lang/rust/commit/35fff69d043b1c0f5c29894e7f4b0da8b039c131"}, {"sha": "487200b4380b478a5052ab5bc14a63d03bd89b92", "url": "https://api.github.com/repos/rust-lang/rust/commits/487200b4380b478a5052ab5bc14a63d03bd89b92", "html_url": "https://github.com/rust-lang/rust/commit/487200b4380b478a5052ab5bc14a63d03bd89b92"}], "stats": {"total": 353, "additions": 232, "deletions": 121}, "files": [{"sha": "8a22a74f97c34ad23577e3fc971a279c7531ef3f", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -7,9 +7,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::traversal;\n-use rustc_middle::mir::visit::{\n-    MutatingUseContext, NonMutatingUseContext, NonUseContext, PlaceContext, Visitor,\n-};\n+use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Location, TerminatorKind};\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_target::abi::LayoutOf;\n@@ -20,7 +18,9 @@ pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n \n-    analyzer.visit_body(&mir);\n+    for (bb, data) in mir.basic_blocks().iter_enumerated() {\n+        analyzer.visit_basic_block_data(bb, data);\n+    }\n \n     for (local, decl) in mir.local_decls.iter_enumerated() {\n         let ty = fx.monomorphize(decl.ty);\n@@ -141,36 +141,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n \n             if let mir::ProjectionElem::Deref = elem {\n                 // Deref projections typically only read the pointer.\n-                // (the exception being `VarDebugInfo` contexts, handled below)\n                 base_context = PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy);\n-\n-                // Indirect debuginfo requires going through memory, that only\n-                // the debugger accesses, following our emitted DWARF pointer ops.\n-                //\n-                // FIXME(eddyb) Investigate the possibility of relaxing this, but\n-                // note that `llvm.dbg.declare` *must* be used for indirect places,\n-                // even if we start using `llvm.dbg.value` for all other cases,\n-                // as we don't necessarily know when the value changes, but only\n-                // where it lives in memory.\n-                //\n-                // It's possible `llvm.dbg.declare` could support starting from\n-                // a pointer that doesn't point to an `alloca`, but this would\n-                // only be useful if we know the pointer being `Deref`'d comes\n-                // from an immutable place, and if `llvm.dbg.declare` calls\n-                // must be at the very start of the function, then only function\n-                // arguments could contain such pointers.\n-                if context == PlaceContext::NonUse(NonUseContext::VarDebugInfo) {\n-                    // We use `NonUseContext::VarDebugInfo` for the base,\n-                    // which might not force the base local to memory,\n-                    // so we have to do it manually.\n-                    self.visit_local(&place_ref.local, context, location);\n-                }\n-            }\n-\n-            // `NonUseContext::VarDebugInfo` needs to flow all the\n-            // way down to the base local (see `visit_local`).\n-            if context == PlaceContext::NonUse(NonUseContext::VarDebugInfo) {\n-                base_context = context;\n             }\n \n             self.process_place(&place_base, base_context, location);\n@@ -185,20 +156,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n                 );\n             }\n         } else {\n-            // FIXME this is super_place code, is repeated here to avoid cloning place or changing\n-            // visit_place API\n-            let mut context = context;\n-\n-            if !place_ref.projection.is_empty() {\n-                context = if context.is_mutating_use() {\n-                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                } else {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                };\n-            }\n-\n             self.visit_local(&place_ref.local, context, location);\n-            self.visit_projection(*place_ref, context, location);\n         }\n     }\n }"}, {"sha": "6b16a7d415aa61e17af426913e183271cd229a78", "filename": "compiler/rustc_error_codes/src/error_codes/E0759.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0759.md", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0759.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0759.md?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -16,13 +16,13 @@ fn bar(x: &i32) -> Box<dyn Debug> { // error!\n \n Add `'static` requirement to fix them:\n \n-```compile_fail,E0759\n+```\n # use std::fmt::Debug;\n-fn foo(x: &i32) -> impl Debug + 'static { // ok!\n+fn foo(x: &'static i32) -> impl Debug + 'static { // ok!\n     x\n }\n \n-fn bar(x: &i32) -> Box<dyn Debug + 'static> { // ok!\n+fn bar(x: &'static i32) -> Box<dyn Debug + 'static> { // ok!\n     Box::new(x)\n }\n ```"}, {"sha": "9050ae6f5231c9c9dd29ffd4c69dab5cc799890a", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -711,15 +711,10 @@ fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKi\n                 return false;\n             }\n \n-            for variant in &def.variants {\n-                if let Some(field) = transparent_newtype_field(cx.tcx, variant) {\n-                    if ty_is_known_nonnull(cx, field.ty(tcx, substs), mode) {\n-                        return true;\n-                    }\n-                }\n-            }\n-\n-            false\n+            def.variants\n+                .iter()\n+                .filter_map(|variant| transparent_newtype_field(cx.tcx, variant))\n+                .any(|field| ty_is_known_nonnull(cx, field.ty(tcx, substs), mode))\n         }\n         _ => false,\n     }"}, {"sha": "953c6915068afd49409201f91b0ad485cb94c953", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -352,49 +352,59 @@ impl<'a> Parser<'a> {\n         debug!(\"parse_generic_args_with_leading_angle_bracket_recovery: (snapshotting)\");\n         match self.parse_angle_args() {\n             Ok(args) => Ok(args),\n-            Err(ref mut e) if is_first_invocation && self.unmatched_angle_bracket_count > 0 => {\n-                // Cancel error from being unable to find `>`. We know the error\n-                // must have been this due to a non-zero unmatched angle bracket\n-                // count.\n-                e.cancel();\n-\n+            Err(mut e) if is_first_invocation && self.unmatched_angle_bracket_count > 0 => {\n                 // Swap `self` with our backup of the parser state before attempting to parse\n                 // generic arguments.\n                 let snapshot = mem::replace(self, snapshot.unwrap());\n \n-                debug!(\n-                    \"parse_generic_args_with_leading_angle_bracket_recovery: (snapshot failure) \\\n-                     snapshot.count={:?}\",\n-                    snapshot.unmatched_angle_bracket_count,\n-                );\n-\n                 // Eat the unmatched angle brackets.\n-                for _ in 0..snapshot.unmatched_angle_bracket_count {\n-                    self.eat_lt();\n-                }\n-\n-                // Make a span over ${unmatched angle bracket count} characters.\n-                let span = lo.with_hi(lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count));\n-                self.struct_span_err(\n-                    span,\n-                    &format!(\n-                        \"unmatched angle bracket{}\",\n-                        pluralize!(snapshot.unmatched_angle_bracket_count)\n-                    ),\n-                )\n-                .span_suggestion(\n-                    span,\n-                    &format!(\n-                        \"remove extra angle bracket{}\",\n-                        pluralize!(snapshot.unmatched_angle_bracket_count)\n-                    ),\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+                let all_angle_brackets = (0..snapshot.unmatched_angle_bracket_count)\n+                    .fold(true, |a, _| a && self.eat_lt());\n+\n+                if !all_angle_brackets {\n+                    // If there are other tokens in between the extraneous `<`s, we cannot simply\n+                    // suggest to remove them. This check also prevents us from accidentally ending\n+                    // up in the middle of a multibyte character (issue #84104).\n+                    let _ = mem::replace(self, snapshot);\n+                    Err(e)\n+                } else {\n+                    // Cancel error from being unable to find `>`. We know the error\n+                    // must have been this due to a non-zero unmatched angle bracket\n+                    // count.\n+                    e.cancel();\n+\n+                    debug!(\n+                        \"parse_generic_args_with_leading_angle_bracket_recovery: (snapshot failure) \\\n+                         snapshot.count={:?}\",\n+                        snapshot.unmatched_angle_bracket_count,\n+                    );\n+\n+                    // Make a span over ${unmatched angle bracket count} characters.\n+                    // This is safe because `all_angle_brackets` ensures that there are only `<`s,\n+                    // i.e. no multibyte characters, in this range.\n+                    let span =\n+                        lo.with_hi(lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count));\n+                    self.struct_span_err(\n+                        span,\n+                        &format!(\n+                            \"unmatched angle bracket{}\",\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n+                        ),\n+                    )\n+                    .span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"remove extra angle bracket{}\",\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n+                        ),\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n \n-                // Try again without unmatched angle bracket characters.\n-                self.parse_angle_args()\n+                    // Try again without unmatched angle bracket characters.\n+                    self.parse_angle_args()\n+                }\n             }\n             Err(e) => Err(e),\n         }"}, {"sha": "de5a5632600e4ee39a1f6c0dd90d01f92fb5ed46", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -334,7 +334,6 @@ impl<'a> Parser<'a> {\n         mut bounds: GenericBounds,\n         plus: bool,\n     ) -> PResult<'a, TyKind> {\n-        assert_ne!(self.token, token::Question);\n         if plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n             bounds.append(&mut self.parse_generic_bounds(Some(self.prev_token.span))?);"}, {"sha": "19c35ebd011b1307bd91220847740e158648bdc0", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -766,7 +766,7 @@ fn infer_placeholder_type(\n             if !ty.references_error() {\n                 diag.span_suggestion(\n                     span,\n-                    \"replace `_` with the correct type\",\n+                    \"replace with the correct type\",\n                     ty.to_string(),\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "ac8bbfe102dfea63efb4f7491c99946f06cc4046", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -124,6 +124,13 @@ fn main() {\n                 cmd.arg(\"-C\").arg(\"target-feature=-crt-static\");\n             }\n         }\n+\n+        if stage == \"0\" {\n+            // Cargo doesn't pass RUSTFLAGS to proc_macros:\n+            // https://github.com/rust-lang/cargo/issues/4423\n+            // Set `--cfg=bootstrap` explicitly instead.\n+            cmd.arg(\"--cfg=bootstrap\");\n+        }\n     }\n \n     if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {"}, {"sha": "21c7dd11d248bbbaf41ff58702234e532bb60674", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -444,8 +444,13 @@ impl Build {\n \n         build.verbose(\"finding compilers\");\n         cc_detect::find(&mut build);\n-        build.verbose(\"running sanity check\");\n-        sanity::check(&mut build);\n+        // When running `setup`, the profile is about to change, so any requirements we have now may\n+        // be different on the next invocation. Don't check for them until the next time x.py is\n+        // run. This is ok because `setup` never runs any build commands, so it won't fail if commands are missing.\n+        if !matches!(build.config.cmd, Subcommand::Setup { .. }) {\n+            build.verbose(\"running sanity check\");\n+            sanity::check(&mut build);\n+        }\n \n         // If local-rust is the same major.minor as the current version, then force a\n         // local-rebuild"}, {"sha": "578e8ce5acbefd1bd9c6c8e05edfbce8e1587300", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -800,6 +800,8 @@ a {\n \n .search-results .result-name > span {\n \tdisplay: inline-block;\n+\tmargin: 0;\n+\tfont-weight: normal;\n }\n \n body.blur > :not(#help) {"}, {"sha": "246f69558ff0d46224d4061c3ba903d496545ad9", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -14,7 +14,7 @@ LL | static BAR: _ = \"test\";\n    |             ^\n    |             |\n    |             not allowed in type signatures\n-   |             help: replace `_` with the correct type: `&str`\n+   |             help: replace with the correct type: `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a84c048fab967dd72ce6fcaa40523a652c123dae", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -37,7 +37,7 @@ LL |               const A = \"A\".$fn();\n    |                     ^\n    |                     |\n    |                     not allowed in type signatures\n-   |                     help: replace `_` with the correct type: `bool`\n+   |                     help: replace with the correct type: `bool`\n ...\n LL | / suite! {\n LL | |     len;"}, {"sha": "998949b94a4baf1456b6c1cfc77306c642a45dfc", "filename": "src/test/ui/parser/issue-84104.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,3 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected one of\n+#[i=i::<\u069a\u0716<"}, {"sha": "aff31f2c97149210580a801c7d96b7da442aa065", "filename": "src/test/ui/parser/issue-84104.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,16 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-84104.rs:3:13\n+   |\n+LL | #[i=i::<\u069a\u0716<\n+   |  -          ^\n+   |  |\n+   |  unclosed delimiter\n+\n+error: expected one of `>`, a const expression, lifetime, or type, found `]`\n+  --> $DIR/issue-84104.rs:3:13\n+   |\n+LL | #[i=i::<\u069a\u0716<\n+   |             ^ expected one of `>`, a const expression, lifetime, or type\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "25f7ba4d1f88e8920b6beb754c9fb3d3ad97b24c", "filename": "src/test/ui/parser/issue-84148-1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,4 @@\n+fn f(t:for<>t?)\n+//~^ ERROR: expected parameter name\n+//~| ERROR: expected one of\n+//~| ERROR: expected one of"}, {"sha": "98506568d82c233519b4d7f75b908925a1bce198", "filename": "src/test/ui/parser/issue-84148-1.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,23 @@\n+error: expected parameter name, found `?`\n+  --> $DIR/issue-84148-1.rs:1:14\n+   |\n+LL | fn f(t:for<>t?)\n+   |              ^ expected parameter name\n+\n+error: expected one of `(`, `)`, `+`, `,`, `::`, or `<`, found `?`\n+  --> $DIR/issue-84148-1.rs:1:14\n+   |\n+LL | fn f(t:for<>t?)\n+   |              ^\n+   |              |\n+   |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n+   |              help: missing `,`\n+\n+error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+  --> $DIR/issue-84148-1.rs:1:15\n+   |\n+LL | fn f(t:for<>t?)\n+   |               ^ expected one of `->`, `;`, `where`, or `{`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "257a3fd67207ec2bd1a045fc7d88117eb787d5fe", "filename": "src/test/ui/parser/issue-84148-2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,4 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected parameter name\n+// error-pattern: expected one of\n+fn f(t:for<>t?"}, {"sha": "6f314da436070371a5f23f93b12aa709dbabe576", "filename": "src/test/ui/parser/issue-84148-2.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,31 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-84148-2.rs:4:16\n+   |\n+LL | fn f(t:for<>t?\n+   |     -          ^\n+   |     |\n+   |     unclosed delimiter\n+\n+error: expected parameter name, found `?`\n+  --> $DIR/issue-84148-2.rs:4:14\n+   |\n+LL | fn f(t:for<>t?\n+   |              ^ expected parameter name\n+\n+error: expected one of `(`, `)`, `+`, `,`, `::`, or `<`, found `?`\n+  --> $DIR/issue-84148-2.rs:4:14\n+   |\n+LL | fn f(t:for<>t?\n+   |              ^\n+   |              |\n+   |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n+   |              help: missing `,`\n+\n+error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+  --> $DIR/issue-84148-2.rs:4:16\n+   |\n+LL | fn f(t:for<>t?\n+   |                ^ expected one of `->`, `;`, `where`, or `{`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "fdf2ae398014b4e22716eca583dd301ba37f9809", "filename": "src/test/ui/parser/unmatched-langle-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,9 @@\n+// Check that a suggestion is issued if there are too many `<`s in a\n+// generic argument list, and that the parser recovers properly.\n+\n+fn main() {\n+    foo::<<<<Ty<i32>>();\n+    //~^ ERROR: unmatched angle brackets\n+    //~| ERROR: cannot find function `foo` in this scope [E0425]\n+    //~| ERROR: cannot find type `Ty` in this scope [E0412]\n+}"}, {"sha": "c8072b4c59ad279f2c4863efe6546e29879fea78", "filename": "src/test/ui/parser/unmatched-langle-1.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,22 @@\n+error: unmatched angle brackets\n+  --> $DIR/unmatched-langle-1.rs:5:10\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |          ^^^ help: remove extra angle brackets\n+\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/unmatched-langle-1.rs:5:5\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |     ^^^ not found in this scope\n+\n+error[E0412]: cannot find type `Ty` in this scope\n+  --> $DIR/unmatched-langle-1.rs:5:14\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |              ^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0412, E0425.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "8de0d7d89e4e72b2134b7e140b142c46a4f363a7", "filename": "src/test/ui/parser/unmatched-langle-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,15 @@\n+// When there are too many opening `<`s, the compiler would previously\n+// suggest nonsense if the `<`s were interspersed with other tokens:\n+//\n+//   error: unmatched angle brackets\n+//    --> unmatched-langle.rs:2:10\n+//     |\n+//   2 |     foo::<Ty<<<i32>();\n+//     |          ^^^ help: remove extra angle brackets\n+//\n+// This test makes sure that this is no longer happening.\n+\n+fn main() {\n+    foo::<Ty<<<i32>();\n+    //~^ ERROR: expected `::`, found `(`\n+}"}, {"sha": "773bb33d8d3f3956b15850baf503bd62625b1b60", "filename": "src/test/ui/parser/unmatched-langle-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -0,0 +1,8 @@\n+error: expected `::`, found `(`\n+  --> $DIR/unmatched-langle-2.rs:13:20\n+   |\n+LL |     foo::<Ty<<<i32>();\n+   |                    ^ expected `::`\n+\n+error: aborting due to previous error\n+"}, {"sha": "bd7cbd444d70409e6f75db1332a4452fd206de87", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.full_tait.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -79,7 +79,7 @@ LL | static TEST3: _ = \"test\";\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct type: `&str`\n+   |               help: replace with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:19:15\n@@ -88,7 +88,7 @@ LL | static TEST4: _ = 145;\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct type: `i32`\n+   |               help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:22:15\n@@ -210,7 +210,7 @@ LL |     static B: _ = 42;\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct type: `i32`\n+   |               help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:80:15\n@@ -244,7 +244,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n-   |                      help: replace `_` with the correct type: `&str`\n+   |                      help: replace with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:92:22\n@@ -253,7 +253,7 @@ LL |     static FN_TEST4: _ = 145;\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n-   |                      help: replace `_` with the correct type: `i32`\n+   |                      help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:95:22\n@@ -435,7 +435,7 @@ LL | const _: Option<_> = map(value);\n    |          ^^^^^^^^^\n    |          |\n    |          not allowed in type signatures\n-   |          help: replace `_` with the correct type: `Option<u8>`\n+   |          help: replace with the correct type: `Option<u8>`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:144:31\n@@ -526,7 +526,7 @@ LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace `_` with the correct type: `i32`\n+   |              help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:201:26\n@@ -639,7 +639,7 @@ LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace `_` with the correct type: `i32`\n+   |              help: replace with the correct type: `i32`\n \n error: aborting due to 69 previous errors; 1 warning emitted\n "}, {"sha": "afd6aaf4e55ab6b81a3036fe4093a931e065f931", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.min_tait.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -70,7 +70,7 @@ LL | static TEST3: _ = \"test\";\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct type: `&str`\n+   |               help: replace with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:19:15\n@@ -79,7 +79,7 @@ LL | static TEST4: _ = 145;\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct type: `i32`\n+   |               help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:22:15\n@@ -201,7 +201,7 @@ LL |     static B: _ = 42;\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct type: `i32`\n+   |               help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:80:15\n@@ -235,7 +235,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n-   |                      help: replace `_` with the correct type: `&str`\n+   |                      help: replace with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:92:22\n@@ -244,7 +244,7 @@ LL |     static FN_TEST4: _ = 145;\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n-   |                      help: replace `_` with the correct type: `i32`\n+   |                      help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:95:22\n@@ -426,7 +426,7 @@ LL | const _: Option<_> = map(value);\n    |          ^^^^^^^^^\n    |          |\n    |          not allowed in type signatures\n-   |          help: replace `_` with the correct type: `Option<u8>`\n+   |          help: replace with the correct type: `Option<u8>`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:144:31\n@@ -517,7 +517,7 @@ LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace `_` with the correct type: `i32`\n+   |              help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:201:26\n@@ -630,7 +630,7 @@ LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace `_` with the correct type: `i32`\n+   |              help: replace with the correct type: `i32`\n \n error: aborting due to 69 previous errors\n "}, {"sha": "2b64df774b08f2f6b23b6060240ab994ffee1cc4", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69e2f23a41f3bb5cb49e3dc66160f3888d871917/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=69e2f23a41f3bb5cb49e3dc66160f3888d871917", "patch": "@@ -14,7 +14,7 @@ LL | const TEST2: _ = 42u32;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace `_` with the correct type: `u32`\n+   |              help: replace with the correct type: `u32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item_help.rs:10:14\n@@ -23,7 +23,7 @@ LL | const TEST3: _ = Some(42);\n    |              ^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace `_` with the correct type: `Option<i32>`\n+   |              help: replace with the correct type: `Option<i32>`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item_help.rs:13:22\n@@ -38,7 +38,7 @@ LL |     const TEST5: _ = 42;\n    |                  ^\n    |                  |\n    |                  not allowed in type signatures\n-   |                  help: replace `_` with the correct type: `i32`\n+   |                  help: replace with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item_help.rs:24:18\n@@ -47,7 +47,7 @@ LL |     const TEST6: _ = 13;\n    |                  ^\n    |                  |\n    |                  not allowed in type signatures\n-   |                  help: replace `_` with the correct type: `i32`\n+   |                  help: replace with the correct type: `i32`\n \n error: aborting due to 6 previous errors\n "}]}