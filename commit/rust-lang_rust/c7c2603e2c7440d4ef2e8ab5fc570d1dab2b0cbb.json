{"sha": "c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YzI2MDNlMmM3NDQwZDRlZjJlOGFiNWZjNTcwZDFkYWIyYjBjYmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-07T18:18:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:51Z"}, "message": "factor out `free_region_binding_scope` helper", "tree": {"sha": "2c89b5def5a01f42bff42ce15ae749d0d43f0c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c89b5def5a01f42bff42ce15ae749d0d43f0c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb", "html_url": "https://github.com/rust-lang/rust/commit/c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cea0539d1cee8497bcaf48a22fe61e2aca17fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cea0539d1cee8497bcaf48a22fe61e2aca17fa4", "html_url": "https://github.com/rust-lang/rust/commit/8cea0539d1cee8497bcaf48a22fe61e2aca17fa4"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "d22eb20e70a88a8b588f3c4be6fafb58423174fa", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb", "patch": "@@ -177,13 +177,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             ty::ReEarlyBound(_) |\n             ty::ReFree(_) => {\n-                let scope = match *region {\n-                    ty::ReEarlyBound(ref br) => {\n-                        self.parent_def_id(br.def_id).unwrap()\n-                    }\n-                    ty::ReFree(ref fr) => fr.scope,\n-                    _ => bug!()\n-                };\n+                let scope = region.free_region_binding_scope(self);\n                 let prefix = match *region {\n                     ty::ReEarlyBound(ref br) => {\n                         format!(\"the lifetime {} as defined on\", br.name)"}, {"sha": "65406c3d16cc579abbd2b71d83f1961108c6288b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c7c2603e2c7440d4ef2e8ab5fc570d1dab2b0cbb", "patch": "@@ -1050,6 +1050,35 @@ impl RegionKind {\n \n         flags\n     }\n+\n+    /// Given an early-bound or free region, returns the def-id where it was bound.\n+    /// For example, consider the regions in this snippet of code:\n+    ///\n+    /// ```\n+    /// impl<'a> Foo {\n+    ///      ^^ -- early bound, declared on an impl\n+    ///\n+    ///     fn bar<'b, 'c>(x: &self, y: &'b u32, z: &'c u64) where 'static: 'c\n+    ///            ^^  ^^     ^ anonymous, late-bound\n+    ///            |   early-bound, appears in where-clauses\n+    ///            late-bound, appears only in fn args\n+    ///     {..}\n+    /// }\n+    /// ```\n+    ///\n+    /// Here, `free_region_binding_scope('a)` would return the def-id\n+    /// of the impl, and for all the other highlighted regions, it\n+    /// would return the def-id of the function. In other cases (not shown), this\n+    /// function might return the def-id of a closure.\n+    pub fn free_region_binding_scope(&self, tcx: TyCtxt<'_, '_, '_>) -> DefId {\n+        match self {\n+            ty::ReEarlyBound(br) => {\n+                tcx.parent_def_id(br.def_id).unwrap()\n+            }\n+            ty::ReFree(fr) => fr.scope,\n+            _ => bug!(\"free_region_binding_scope invoked on inappropriate region: {:?}\", self),\n+        }\n+    }\n }\n \n /// Type utilities"}]}