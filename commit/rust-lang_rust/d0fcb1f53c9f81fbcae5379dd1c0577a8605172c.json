{"sha": "d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZmNiMWY1M2M5ZjgxZmJjYWU1Mzc5ZGQxYzA1NzdhODYwNTE3MmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-03T08:42:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-03T11:31:16Z"}, "message": "Rollup merge of #22990 - japaric:privATe, r=alexcrichton\n\n Associated types are now treated as part of the public API by the privacy checker.\n\nIf you were exposing a private type in your public API via an associated type, make that type public:\n\n``` diff\n  pub struct PublicType { .. }\n\n- struct Struct { .. }\n+ pub struct Struct { .. }\n\n  pub trait PublicTrait {\n      type Output;\n\n      fn foo(&self) -> Self::Output;\n  }\n\n  impl PublicTrait for PublicType {\n      type Output = Struct;\n\n      fn foo(&self) -> Struct {  // `Struct` is part of the public API, it must be marked as `pub`lic\n          ..\n      }\n  }\n```\n\n[breaking-change]\n\n---\n\nr? @nikomatsakis\ncloses #22912", "tree": {"sha": "0a7781a0d484eaf5a994196bbf47a75826805517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a7781a0d484eaf5a994196bbf47a75826805517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "html_url": "https://github.com/rust-lang/rust/commit/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea208a87a5d54d58ddf10302b8c3fad479afcae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea208a87a5d54d58ddf10302b8c3fad479afcae0", "html_url": "https://github.com/rust-lang/rust/commit/ea208a87a5d54d58ddf10302b8c3fad479afcae0"}, {"sha": "89776aee49a8d896521c62eb6e33b88b9122880c", "url": "https://api.github.com/repos/rust-lang/rust/commits/89776aee49a8d896521c62eb6e33b88b9122880c", "html_url": "https://github.com/rust-lang/rust/commit/89776aee49a8d896521c62eb6e33b88b9122880c"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "ab3b56c31b62a93d70d5147e23478e8ac8d6167c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "patch": "@@ -1376,10 +1376,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                             }\n                         }\n                         Some(ref tr) => {\n-                            // Any private types in a trait impl fall into two\n+                            // Any private types in a trait impl fall into three\n                             // categories.\n                             // 1. mentioned in the trait definition\n                             // 2. mentioned in the type params/generics\n+                            // 3. mentioned in the associated types of the impl\n                             //\n                             // Those in 1. can only occur if the trait is in\n                             // this crate and will've been warned about on the\n@@ -1389,6 +1390,16 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                             // Those in 2. are warned via walk_generics and this\n                             // call here.\n                             visit::walk_path(self, &tr.path);\n+\n+                            // Those in 3. are warned with this call.\n+                            for impl_item in impl_items {\n+                                match *impl_item {\n+                                    ast::MethodImplItem(..) => {},\n+                                    ast::TypeImplItem(ref typedef) => {\n+                                        self.visit_ty(&typedef.typ);\n+                                    }\n+                                }\n+                            }\n                         }\n                     }\n                 } else if trait_ref.is_none() && self_is_public_path {"}, {"sha": "f4536ceb8ed69c3570a5bb2310a20a13048f3955", "filename": "src/test/compile-fail/issue-22912.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22912.rs?ref=d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct PublicType;\n+struct PrivateType;\n+\n+pub trait PublicTrait {\n+    type Item;\n+}\n+\n+trait PrivateTrait {\n+    type Item;\n+}\n+\n+impl PublicTrait for PublicType {\n+    type Item = PrivateType;  //~ ERROR private type in exported type signature\n+}\n+\n+// OK\n+impl PublicTrait for PrivateType {\n+    type Item = PrivateType;\n+}\n+\n+// OK\n+impl PrivateTrait for PublicType {\n+    type Item = PrivateType;\n+}\n+\n+// OK\n+impl PrivateTrait for PrivateType {\n+    type Item = PrivateType;\n+}\n+\n+fn main() {}"}, {"sha": "c6c66f1c75c5432d477fdf980389b348a4bf38e4", "filename": "src/test/run-pass/associated-types-binding-in-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs?ref=d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "patch": "@@ -16,7 +16,7 @@ pub trait Foo {\n }\n \n #[derive(PartialEq)]\n-struct Bar;\n+pub struct Bar;\n \n impl Foo for int {\n     type A = uint;"}, {"sha": "901b3c0d96b010c78b50cd1c8f6ddfc797968722", "filename": "src/test/run-pass/associated-types-eq-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs?ref=d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "patch": "@@ -15,7 +15,7 @@ pub trait Foo {\n     fn boo(&self) -> <Self as Foo>::A;\n }\n \n-struct Bar;\n+pub struct Bar;\n \n impl Foo for char {\n     type A = Bar;"}, {"sha": "8ae550be3fc6672dfe1ee51acc5df4a7cd33d733", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0fcb1f53c9f81fbcae5379dd1c0577a8605172c/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=d0fcb1f53c9f81fbcae5379dd1c0577a8605172c", "patch": "@@ -16,7 +16,7 @@ pub trait Foo {\n }\n \n #[derive(PartialEq)]\n-struct Bar;\n+pub struct Bar;\n \n impl Foo for int {\n     type A = uint;"}]}