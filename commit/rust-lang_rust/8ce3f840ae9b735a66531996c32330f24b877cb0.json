{"sha": "8ce3f840ae9b735a66531996c32330f24b877cb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZTNmODQwYWU5YjczNWE2NjUzMTk5NmMzMjMzMGYyNGI4NzdjYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T12:30:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T12:30:45Z"}, "message": "Auto merge of #70729 - nnethercote:a-big-options-clean-up, r=petrochenkov\n\nA big options clean-up\n\nLots of improvements here.\n\nr? @Centril", "tree": {"sha": "bb5966a154805aef3cfc2148cbb32278af124078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb5966a154805aef3cfc2148cbb32278af124078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ce3f840ae9b735a66531996c32330f24b877cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce3f840ae9b735a66531996c32330f24b877cb0", "html_url": "https://github.com/rust-lang/rust/commit/8ce3f840ae9b735a66531996c32330f24b877cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ce3f840ae9b735a66531996c32330f24b877cb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2", "html_url": "https://github.com/rust-lang/rust/commit/4ca5fd2d7b6b1d75b6cb8f679e8523fb3e7b19e2"}, {"sha": "3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f", "html_url": "https://github.com/rust-lang/rust/commit/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f"}], "stats": {"total": 718, "additions": 339, "deletions": 379}, "files": [{"sha": "5dda5ec2cb890d164ba5d8ccb2eb94562f7845e5", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 89, "deletions": 83, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -9,10 +9,10 @@ This option is deprecated and does nothing.\n \n ## linker\n \n-This flag lets you control which linker `rustc` invokes to link your code. It\n-takes a path to the linker executable. If this flag is not specified, the\n-linker will be inferred based on the target. See also the\n-[linker-flavor](#linker-flavor) flag for another way to specify the linker.\n+This flag controls which linker `rustc` invokes to link your code. It takes a\n+path to the linker executable. If this flag is not specified, the linker will\n+be inferred based on the target. See also the [linker-flavor](#linker-flavor)\n+flag for another way to specify the linker.\n \n ## link-arg\n \n@@ -27,49 +27,52 @@ options should be separated by spaces.\n \n ## linker-flavor\n \n-This flag lets you control the linker flavor used by `rustc`. If a linker is given with the\n-[`-C linker` flag](#linker), then the linker flavor is inferred from the value provided. If no\n-linker is given then the linker flavor is used to determine the linker to use. Every `rustc` target\n-defaults to some linker flavor. Valid options are:\n-\n-* `em`: Uses [Emscripten `emcc`](https://emscripten.org/docs/tools_reference/emcc.html).\n-* `gcc`: Uses the `cc` executable, which is typically gcc or clang on many systems.\n-* `ld`: Uses the `ld` executable.\n-* `msvc`: Uses the `link.exe` executable from Microsoft Visual Studio MSVC.\n-* `ptx-linker`: Uses\n+This flag controls the linker flavor used by `rustc`. If a linker is given with\n+the [`-C linker` flag](#linker), then the linker flavor is inferred from the\n+value provided. If no linker is given then the linker flavor is used to\n+determine the linker to use. Every `rustc` target defaults to some linker\n+flavor. Valid options are:\n+\n+* `em`: use [Emscripten `emcc`](https://emscripten.org/docs/tools_reference/emcc.html).\n+* `gcc`: use the `cc` executable, which is typically gcc or clang on many systems.\n+* `ld`: use the `ld` executable.\n+* `msvc`: use the `link.exe` executable from Microsoft Visual Studio MSVC.\n+* `ptx-linker`: use\n   [`rust-ptx-linker`](https://github.com/denzp/rust-ptx-linker) for Nvidia\n   NVPTX GPGPU support.\n-* `wasm-ld`: Uses the [`wasm-ld`](https://lld.llvm.org/WebAssembly.html)\n+* `wasm-ld`: use the [`wasm-ld`](https://lld.llvm.org/WebAssembly.html)\n   executable, a port of LLVM `lld` for WebAssembly.\n-* `ld64.lld`: Uses the LLVM `lld` executable with the [`-flavor darwin`\n+* `ld64.lld`: use the LLVM `lld` executable with the [`-flavor darwin`\n   flag][lld-flavor] for Apple's `ld`.\n-* `ld.lld`: Uses the LLVM `lld` executable with the [`-flavor gnu`\n+* `ld.lld`: use the LLVM `lld` executable with the [`-flavor gnu`\n   flag][lld-flavor] for GNU binutils' `ld`.\n-* `lld-link`: Uses the LLVM `lld` executable with the [`-flavor link`\n+* `lld-link`: use the LLVM `lld` executable with the [`-flavor link`\n   flag][lld-flavor] for Microsoft's `link.exe`.\n \n [lld-flavor]: https://lld.llvm.org/Driver.html\n \n ## link-dead-code\n \n-Normally, the linker will remove dead code. This flag disables this behavior.\n+This flag controls whether the linker will keep dead code. It takes one of\n+the following values:\n+\n+* `y`, `yes`, `on`, or no value: keep dead code.\n+* `n`, `no`, or `off`: remove dead code (the default).\n \n An example of when this flag might be useful is when trying to construct code coverage\n metrics.\n \n ## lto\n \n-This flag instructs LLVM to use [link time\n+This flag controls whether LLVM uses [link time\n optimizations](https://llvm.org/docs/LinkTimeOptimization.html) to produce\n better optimized code, using whole-program analysis, at the cost of longer\n-linking time.\n+linking time. It takes one of the following values:\n \n-This flag may take one of the following values:\n-\n-* `y`, `yes`, `on`, `fat`, or no value: Performs \"fat\" LTO which attempts to\n+* `y`, `yes`, `on`, `fat`, or no value: perform \"fat\" LTO which attempts to\n   perform optimizations across all crates within the dependency graph.\n-* `n`, `no`, `off`: Disables LTO.\n-* `thin`: Performs [\"thin\"\n+* `n`, `no`, `off`: disables LTO.\n+* `thin`: perform [\"thin\"\n   LTO](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html).\n   This is similar to \"fat\", but takes substantially less time to run while\n   still achieving performance gains similar to \"fat\".\n@@ -81,22 +84,22 @@ disabled if codegen units is 1 or optimizations are disabled ([`-C\n opt-level=0`](#opt-level)). That is:\n \n * When `-C lto` is not specified:\n-  * `codegen-units=1`: Disables LTO.\n-  * `opt-level=0`: Disables LTO.\n+  * `codegen-units=1`: disable LTO.\n+  * `opt-level=0`: disable LTO.\n * When `-C lto=true`:\n-  * `lto=true`: 16 codegen units, performs fat LTO across crates.\n+  * `lto=true`: 16 codegen units, perform fat LTO across crates.\n   * `codegen-units=1` + `lto=true`: 1 codegen unit, fat LTO across crates.\n \n See also [linker-plugin-lto](#linker-plugin-lto) for cross-language LTO.\n \n ## linker-plugin-lto\n \n-Defers LTO optimizations to the linker. See\n-[linkger-plugin-LTO](../linker-plugin-lto.md) for more details. Takes one of\n+This flag defers LTO optimizations to the linker. See\n+[linker-plugin-LTO](../linker-plugin-lto.md) for more details. It takes one of\n the following values:\n \n-* `y`, `yes`, `on`, or no value: Enabled.\n-* `n`, `no`, or `off`: Disabled (default).\n+* `y`, `yes`, `on`, or no value: enable linker plugin LTO.\n+* `n`, `no`, or `off`: disable linker plugin LTO (the default).\n * A path to the linker plugin.\n \n ## target-cpu\n@@ -148,14 +151,19 @@ Pass `--help` to see a list of options.\n \n ## save-temps\n \n-`rustc` will generate temporary files during compilation; normally it will\n-delete them after it's done with its work. This option will cause them to be\n-preserved instead of removed.\n+This flag controls whether temporary files generated during compilation are\n+deleted once compilation finishes. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: save temporary files.\n+* `n`, `no`, or `off`: delete temporary files (the default).\n \n ## rpath\n \n-This option allows you to enable\n-[`rpath`](https://en.wikipedia.org/wiki/Rpath).\n+This flag controls whether [`rpath`](https://en.wikipedia.org/wiki/Rpath) is\n+enabled. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: enable rpath.\n+* `n`, `no`, or `off`: disable rpath (the default).\n \n ## overflow-checks\n \n@@ -164,35 +172,35 @@ overflow](../../reference/expressions/operator-expr.md#overflow). When\n overflow-checks are enabled, a panic will occur on overflow. This flag takes\n one of the following values:\n \n-* `y`, `yes`, `on`, or no value: Enable overflow checks.\n-* `n`, `no`, or `off`: Disable overflow checks.\n+* `y`, `yes`, `on`, or no value: enable overflow checks.\n+* `n`, `no`, or `off`: disable overflow checks.\n \n If not specified, overflow checks are enabled if\n [debug-assertions](#debug-assertions) are enabled, disabled otherwise.\n \n ## no-prepopulate-passes\n \n-The pass manager comes pre-populated with a list of passes; this flag\n-ensures that list is empty.\n+This flag tells the pass manager to use an empty list of passes, instead of the\n+usual pre-populated list of passes.\n \n ## no-vectorize-loops\n \n-By default, `rustc` will attempt to [vectorize\n-loops](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer). This\n-flag will turn that behavior off.\n+This flag disables [loop\n+vectorization](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer).\n \n ## no-vectorize-slp\n \n-By default, `rustc` will attempt to vectorize code using [superword-level\n-parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer). This\n-flag will turn that behavior off.\n+This flag disables vectorization using\n+[superword-level\n+parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer).\n \n ## soft-float\n \n-This option will make `rustc` generate code using \"soft floats.\" By default,\n-a lot of hardware supports floating point instructions, and so the code generated\n-will take advantage of this. \"soft floats\" emulate floating point instructions\n-in software.\n+This option controls whether `rustc` generates code that emulates floating\n+point instructions in software. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: use soft floats.\n+* `n`, `no`, or `off`: use hardware floats (the default).\n \n ## prefer-dynamic\n \n@@ -201,24 +209,21 @@ indicate that dynamic linking should be used if possible if both a static and\n dynamic versions of a library are available. There is an internal algorithm\n for determining whether or not it is possible to statically or dynamically\n link with a dependency. For example, `cdylib` crate types may only use static\n-linkage.\n+linkage. This flag takes one of the following values:\n \n-## no-integrated-as\n-\n-`rustc` normally uses the LLVM internal assembler to create object code. This\n-flag will disable the internal assembler and emit assembly code to be\n-translated using an external assembler, currently the linker such as `cc`.\n+* `y`, `yes`, `on`, or no value: use dynamic linking.\n+* `n`, `no`, or `off`: use static linking (the default).\n \n ## no-redzone\n \n This flag allows you to disable [the\n-red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). This flag can\n-be passed one of the following options:\n+red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). It takes one\n+of the following values:\n \n-* `y`, `yes`, `on`, or no value: Disables the red zone.\n-* `n`, `no`, or `off`: Enables the red zone.\n+* `y`, `yes`, `on`, or no value: disable the red zone.\n+* `n`, `no`, or `off`: enable the red zone.\n \n-The default if not specified depends on the target.\n+The default behaviour, if the flag is not specified, depends on the target.\n \n ## relocation-model\n \n@@ -257,7 +262,7 @@ them in parallel. Increasing parallelism may speed up compile times, but may\n also produce slower code. Setting this to 1 may improve the performance of\n generated code, but may be slower to compile.\n \n-The default, if not specified, is 16 for non-incremental builds. For\n+The default value, if not specified, is 16 for non-incremental builds. For\n incremental builds the default is 256 which allows caching to be more granular.\n \n ## remark\n@@ -274,23 +279,25 @@ This option is deprecated and does nothing.\n \n ## debuginfo\n \n-This flag lets you control debug information:\n+This flag controls the generation of debug information. It takes one of the\n+following values:\n \n-* `0`: no debug info at all (default)\n-* `1`: line tables only\n-* `2`: full debug info\n+* `0`: no debug info at all (the default).\n+* `1`: line tables only.\n+* `2`: full debug info.\n \n Note: The [`-g` flag][option-g-debug] is an alias for `-C debuginfo=2`.\n \n ## opt-level\n \n-This flag lets you control the optimization level.\n+This flag controls the optimization level.\n \n-* `0`: no optimizations, also turns on [`cfg(debug_assertions)`](#debug-assertions).\n-* `1`: basic optimizations\n-* `2`: some optimizations\n-* `3`: all optimizations\n-* `s`: optimize for binary size\n+* `0`: no optimizations, also turns on\n+  [`cfg(debug_assertions)`](#debug-assertions) (the default).\n+* `1`: basic optimizations.\n+* `2`: some optimizations.\n+* `3`: all optimizations.\n+* `s`: optimize for binary size.\n * `z`: optimize for binary size, but also turn off loop vectorization.\n \n Note: The [`-O` flag][option-o-optimize] is an alias for `-C opt-level=2`.\n@@ -303,8 +310,8 @@ This flag lets you turn `cfg(debug_assertions)` [conditional\n compilation](../../reference/conditional-compilation.md#debug_assertions) on\n or off. It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: Enable debug-assertions.\n-* `n`, `no`, or `off`: Disable debug-assertions.\n+* `y`, `yes`, `on`, or no value: enable debug-assertions.\n+* `n`, `no`, or `off`: disable debug-assertions.\n \n If not specified, debug assertions are automatically enabled only if the\n [opt-level](#opt-level) is 0.\n@@ -362,25 +369,24 @@ to a valid `.profdata` file. See the chapter on\n This flag forces the use of frame pointers. It takes one of the following\n values:\n \n-* `y`, `yes`, `on`, or no value: Frame pointers are forced to be enabled.\n-* `n`, `no`, or `off`: Frame pointers are not forced to be enabled. This does\n+* `y`, `yes`, `on`, or no value: force-enable frame pointers.\n+* `n`, `no`, or `off`: do not force-enable frame pointers. This does\n   not necessarily mean frame pointers will be removed.\n \n-The default if not specified depends on the target.\n+The default behaviour, if frame pointers are not force-enabled, depends on the\n+target.\n \n ## default-linker-libraries\n \n This flag controls whether or not the linker includes its default libraries.\n It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: Default libraries are included.\n-* `n`, `no`, or `off`: Default libraries are **not** included.\n+* `y`, `yes`, `on`, or no value: include default libraries (the default).\n+* `n`, `no`, or `off`: exclude default libraries.\n \n For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n the linker.\n \n-The default is `yes` if not specified.\n-\n [option-emit]: ../command-line-arguments.md#option-emit\n [option-o-optimize]: ../command-line-arguments.md#option-o-optimize\n [profile-guided optimization]: ../profile-guided-optimization.md"}, {"sha": "b57ad102d634876a1a3b141229bdb4b8ded886bc", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -347,7 +347,7 @@ pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n     }\n \n     // The new pass manager is disabled by default.\n-    config.new_llvm_pass_manager.unwrap_or(false)\n+    config.new_llvm_pass_manager\n }\n \n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager("}, {"sha": "8725bfaa025753746be91c2c8e9bfe9424bb3877", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -858,18 +858,7 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     // *not* running dsymutil then the object files are the only source of truth\n     // for debug information, so we must preserve them.\n     if sess.target.target.options.is_like_osx {\n-        match sess.opts.debugging_opts.run_dsymutil {\n-            // dsymutil is not being run, preserve objects\n-            Some(false) => return true,\n-\n-            // dsymutil is being run, no need to preserve the objects\n-            Some(true) => return false,\n-\n-            // The default historical behavior was to always run dsymutil, so\n-            // we're preserving that temporarily, but we're likely to switch the\n-            // default soon.\n-            None => return false,\n-        }\n+        return !sess.opts.debugging_opts.run_dsymutil;\n     }\n \n     false\n@@ -1324,11 +1313,11 @@ fn link_local_crate_native_libs_and_dependent_crate_libs<'a, B: ArchiveBuilder<'\n     // If -Zlink-native-libraries=false is set, then the assumption is that an\n     // external build system already has the native dependencies defined, and it\n     // will provide them to the linker itself.\n-    if sess.opts.debugging_opts.link_native_libraries.unwrap_or(true) {\n+    if sess.opts.debugging_opts.link_native_libraries {\n         add_local_native_libraries(cmd, sess, codegen_results);\n     }\n     add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);\n-    if sess.opts.debugging_opts.link_native_libraries.unwrap_or(true) {\n+    if sess.opts.debugging_opts.link_native_libraries {\n         add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n     }\n }\n@@ -1534,9 +1523,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // OBJECT-FILES-NO, AUDIT-ORDER\n     // We want to prevent the compiler from accidentally leaking in any system libraries,\n     // so by default we tell linkers not to link to any default libraries.\n-    if !sess.opts.cg.default_linker_libraries.unwrap_or(false)\n-        && sess.target.target.options.no_default_libraries\n-    {\n+    if !sess.opts.cg.default_linker_libraries && sess.target.target.options.no_default_libraries {\n         cmd.no_default_libraries();\n     }\n "}, {"sha": "9ca8f743f658661ab7437ef53b9e24e8ab969147", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -384,7 +384,7 @@ impl<'a> Linker for GccLinker<'a> {\n             // If we are building without debuginfo enabled and we were called with\n             // `-Zstrip-debuginfo-if-disabled=yes`, tell the linker to strip any debuginfo\n             // found when linking to get rid of symbols from libstd.\n-            if let Some(true) = self.sess.opts.debugging_opts.strip_debuginfo_if_disabled {\n+            if self.sess.opts.debugging_opts.strip_debuginfo_if_disabled {\n                 self.linker_arg(\"-S\");\n             }\n         };"}, {"sha": "d81a767abd447ead9a8b2e2aa02fae102ea12403", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -115,7 +115,7 @@ pub struct ModuleConfig {\n     pub vectorize_slp: bool,\n     pub merge_functions: bool,\n     pub inline_threshold: Option<usize>,\n-    pub new_llvm_pass_manager: Option<bool>,\n+    pub new_llvm_pass_manager: bool,\n }\n \n impl ModuleConfig {"}, {"sha": "fff86ba819450fa71235be72f013ba409c576332", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -955,32 +955,17 @@ fn describe_codegen_flags() {\n \n fn print_flag_list<T>(\n     cmdline_opt: &str,\n-    flag_list: &[(&'static str, T, Option<&'static str>, &'static str)],\n+    flag_list: &[(&'static str, T, &'static str, &'static str)],\n ) {\n-    let max_len = flag_list\n-        .iter()\n-        .map(|&(name, _, opt_type_desc, _)| {\n-            let extra_len = match opt_type_desc {\n-                Some(..) => 4,\n-                None => 0,\n-            };\n-            name.chars().count() + extra_len\n-        })\n-        .max()\n-        .unwrap_or(0);\n+    let max_len = flag_list.iter().map(|&(name, _, _, _)| name.chars().count()).max().unwrap_or(0);\n \n-    for &(name, _, opt_type_desc, desc) in flag_list {\n-        let (width, extra) = match opt_type_desc {\n-            Some(..) => (max_len - 4, \"=val\"),\n-            None => (max_len, \"\"),\n-        };\n+    for &(name, _, _, desc) in flag_list {\n         println!(\n-            \"    {} {:>width$}{} -- {}\",\n+            \"    {} {:>width$}=val -- {}\",\n             cmdline_opt,\n             name.replace(\"_\", \"-\"),\n-            extra,\n             desc,\n-            width = width\n+            width = max_len\n         );\n     }\n }"}, {"sha": "13c0c8f46b9b0f93c5acc0b49936ce1b136750e1", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -375,7 +375,7 @@ fn test_codegen_options_tracking_hash() {\n     let mut opts = Options::default();\n \n     // Make sure the changing an [UNTRACKED] option leaves the hash unchanged\n-    opts.cg.ar = Some(String::from(\"abc\"));\n+    opts.cg.ar = String::from(\"abc\");\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts.cg.linker = Some(PathBuf::from(\"linker\"));\n@@ -479,11 +479,11 @@ fn test_codegen_options_tracking_hash() {\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debuginfo = Some(0xdeadbeef);\n+    opts.cg.debuginfo = 0xdeadbeef;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debuginfo = Some(0xba5eba11);\n+    opts.cg.debuginfo = 0xba5eba11;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();"}, {"sha": "6b7672a57f0551704b38ad91fc3c38609e1ba1f4", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -2182,9 +2182,7 @@ where\n                         //\n                         // For now, do not enable mutable_noalias by default at all, while the\n                         // issue is being figured out.\n-                        let mutable_noalias =\n-                            tcx.sess.opts.debugging_opts.mutable_noalias.unwrap_or(false);\n-                        if mutable_noalias {\n+                        if tcx.sess.opts.debugging_opts.mutable_noalias {\n                             PointerKind::UniqueBorrowed\n                         } else {\n                             PointerKind::Shared"}, {"sha": "2513cfa73e56ce25639c00008732ba3ef2aa5811", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -617,18 +617,14 @@ impl Options {\n }\n \n impl DebuggingOptions {\n-    pub fn ui_testing(&self) -> bool {\n-        self.ui_testing.unwrap_or(false)\n-    }\n-\n     pub fn diagnostic_handler_flags(&self, can_emit_warnings: bool) -> HandlerFlags {\n         HandlerFlags {\n             can_emit_warnings,\n             treat_err_as_bug: self.treat_err_as_bug,\n             dont_buffer_diagnostics: self.dont_buffer_diagnostics,\n             report_delayed_bugs: self.report_delayed_bugs,\n             macro_backtrace: self.macro_backtrace,\n-            deduplicate_diagnostics: self.deduplicate_diagnostics.unwrap_or(true),\n+            deduplicate_diagnostics: self.deduplicate_diagnostics,\n         }\n     }\n }\n@@ -1395,15 +1391,14 @@ fn parse_opt_level(\n     if max_o > max_c {\n         OptLevel::Default\n     } else {\n-        match cg.opt_level.as_ref().map(String::as_ref) {\n-            None => OptLevel::No,\n-            Some(\"0\") => OptLevel::No,\n-            Some(\"1\") => OptLevel::Less,\n-            Some(\"2\") => OptLevel::Default,\n-            Some(\"3\") => OptLevel::Aggressive,\n-            Some(\"s\") => OptLevel::Size,\n-            Some(\"z\") => OptLevel::SizeMin,\n-            Some(arg) => {\n+        match cg.opt_level.as_ref() {\n+            \"0\" => OptLevel::No,\n+            \"1\" => OptLevel::Less,\n+            \"2\" => OptLevel::Default,\n+            \"3\" => OptLevel::Aggressive,\n+            \"s\" => OptLevel::Size,\n+            \"z\" => OptLevel::SizeMin,\n+            arg => {\n                 early_error(\n                     error_format,\n                     &format!(\n@@ -1436,10 +1431,10 @@ fn select_debuginfo(\n         DebugInfo::Full\n     } else {\n         match cg.debuginfo {\n-            None | Some(0) => DebugInfo::None,\n-            Some(1) => DebugInfo::Limited,\n-            Some(2) => DebugInfo::Full,\n-            Some(arg) => {\n+            0 => DebugInfo::None,\n+            1 => DebugInfo::Limited,\n+            2 => DebugInfo::Full,\n+            arg => {\n                 early_error(\n                     error_format,\n                     &format!(\n@@ -1502,10 +1497,10 @@ fn parse_libs(\n }\n \n fn parse_borrowck_mode(dopts: &DebuggingOptions, error_format: ErrorOutputType) -> BorrowckMode {\n-    match dopts.borrowck.as_ref().map(|s| &s[..]) {\n-        None | Some(\"migrate\") => BorrowckMode::Migrate,\n-        Some(\"mir\") => BorrowckMode::Mir,\n-        Some(m) => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n+    match dopts.borrowck.as_ref() {\n+        \"migrate\" => BorrowckMode::Migrate,\n+        \"mir\" => BorrowckMode::Mir,\n+        m => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n     }\n }\n "}, {"sha": "5e17fc989856bdbdff7f47412c1b045f9d4b7f67", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 211, "deletions": 222, "changes": 433, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -181,27 +181,22 @@ macro_rules! options {\n             let value = iter.next();\n             let option_to_lookup = key.replace(\"-\", \"_\");\n             let mut found = false;\n-            for &(candidate, setter, opt_type_desc, _) in $stat {\n+            for &(candidate, setter, type_desc, _) in $stat {\n                 if option_to_lookup != candidate { continue }\n                 if !setter(&mut op, value) {\n-                    match (value, opt_type_desc) {\n-                        (Some(..), None) => {\n-                            early_error(error_format, &format!(\"{} option `{}` takes no \\\n-                                                                value\", $outputname, key))\n-                        }\n-                        (None, Some(type_desc)) => {\n+                    match value {\n+                        None => {\n                             early_error(error_format, &format!(\"{0} option `{1}` requires \\\n                                                                 {2} ({3} {1}=<value>)\",\n                                                                $outputname, key,\n                                                                type_desc, $prefix))\n                         }\n-                        (Some(value), Some(type_desc)) => {\n+                        Some(value) => {\n                             early_error(error_format, &format!(\"incorrect value `{}` for {} \\\n                                                                 option `{}` - {} was expected\",\n                                                                value, $outputname,\n                                                                key, type_desc))\n                         }\n-                        (None, None) => panic!()\n                     }\n                 }\n                 found = true;\n@@ -231,61 +226,45 @@ macro_rules! options {\n     }\n \n     pub type $setter_name = fn(&mut $struct_name, v: Option<&str>) -> bool;\n-    pub const $stat: &[(&str, $setter_name, Option<&str>, &str)] =\n+    pub const $stat: &[(&str, $setter_name, &str, &str)] =\n         &[ $( (stringify!($opt), $mod_set::$opt, $mod_desc::$parse, $desc) ),* ];\n \n     #[allow(non_upper_case_globals, dead_code)]\n     mod $mod_desc {\n-        pub const parse_bool: Option<&str> = None;\n-        pub const parse_opt_bool: Option<&str> =\n-            Some(\"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\");\n-        pub const parse_string: Option<&str> = Some(\"a string\");\n-        pub const parse_string_push: Option<&str> = Some(\"a string\");\n-        pub const parse_pathbuf_push: Option<&str> = Some(\"a path\");\n-        pub const parse_opt_string: Option<&str> = Some(\"a string\");\n-        pub const parse_opt_pathbuf: Option<&str> = Some(\"a path\");\n-        pub const parse_list: Option<&str> = Some(\"a space-separated list of strings\");\n-        pub const parse_opt_list: Option<&str> = Some(\"a space-separated list of strings\");\n-        pub const parse_opt_comma_list: Option<&str> = Some(\"a comma-separated list of strings\");\n-        pub const parse_threads: Option<&str> = Some(\"a number\");\n-        pub const parse_uint: Option<&str> = Some(\"a number\");\n-        pub const parse_passes: Option<&str> =\n-            Some(\"a space-separated list of passes, or `all`\");\n-        pub const parse_opt_uint: Option<&str> =\n-            Some(\"a number\");\n-        pub const parse_panic_strategy: Option<&str> =\n-            Some(\"either `unwind` or `abort`\");\n-        pub const parse_relro_level: Option<&str> =\n-            Some(\"one of: `full`, `partial`, or `off`\");\n-        pub const parse_sanitizer: Option<&str> =\n-            Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n-        pub const parse_sanitizer_list: Option<&str> =\n-            Some(\"comma separated list of sanitizers\");\n-        pub const parse_sanitizer_memory_track_origins: Option<&str> = None;\n-        pub const parse_cfguard: Option<&str> =\n-            Some(\"either `disabled`, `nochecks`, or `checks`\");\n-        pub const parse_linker_flavor: Option<&str> =\n-            Some(::rustc_target::spec::LinkerFlavor::one_of());\n-        pub const parse_optimization_fuel: Option<&str> =\n-            Some(\"crate=integer\");\n-        pub const parse_unpretty: Option<&str> =\n-            Some(\"`string` or `string=string`\");\n-        pub const parse_treat_err_as_bug: Option<&str> =\n-            Some(\"either no value or a number bigger than 0\");\n-        pub const parse_lto: Option<&str> =\n-            Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, \\\n-                  `fat`, or omitted\");\n-        pub const parse_linker_plugin_lto: Option<&str> =\n-            Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n-                  or the path to the linker plugin\");\n-        pub const parse_switch_with_opt_path: Option<&str> =\n-            Some(\"an optional path to the profiling data output directory\");\n-        pub const parse_merge_functions: Option<&str> =\n-            Some(\"one of: `disabled`, `trampolines`, or `aliases`\");\n-        pub const parse_symbol_mangling_version: Option<&str> =\n-            Some(\"either `legacy` or `v0` (RFC 2603)\");\n-        pub const parse_src_file_hash: Option<&str> =\n-            Some(\"either `md5`, or `sha1`\");\n+        pub const parse_no_flag: &str = \"no value\";\n+        pub const parse_bool: &str = \"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\";\n+        pub const parse_opt_bool: &str = parse_bool;\n+        pub const parse_string: &str = \"a string\";\n+        pub const parse_opt_string: &str = parse_string;\n+        pub const parse_string_push: &str = parse_string;\n+        pub const parse_opt_pathbuf: &str = \"a path\";\n+        pub const parse_pathbuf_push: &str = parse_opt_pathbuf;\n+        pub const parse_list: &str = \"a space-separated list of strings\";\n+        pub const parse_opt_list: &str = parse_list;\n+        pub const parse_opt_comma_list: &str = \"a comma-separated list of strings\";\n+        pub const parse_uint: &str = \"a number\";\n+        pub const parse_opt_uint: &str = parse_uint;\n+        pub const parse_threads: &str = parse_uint;\n+        pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n+        pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n+        pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n+        pub const parse_sanitizer: &str = \"one of: `address`, `leak`, `memory` or `thread`\";\n+        pub const parse_sanitizer_list: &str = \"comma separated list of sanitizers\";\n+        pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n+        pub const parse_cfguard: &str = \"either `disabled`, `nochecks`, or `checks`\";\n+        pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n+        pub const parse_optimization_fuel: &str = \"crate=integer\";\n+        pub const parse_unpretty: &str = \"`string` or `string=string`\";\n+        pub const parse_treat_err_as_bug: &str = \"either no value or a number bigger than 0\";\n+        pub const parse_lto: &str =\n+            \"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted\";\n+        pub const parse_linker_plugin_lto: &str =\n+            \"either a boolean (`yes`, `no`, `on`, `off`, etc), or the path to the linker plugin\";\n+        pub const parse_switch_with_opt_path: &str =\n+            \"an optional path to the profiling data output directory\";\n+        pub const parse_merge_functions: &str = \"one of: `disabled`, `trampolines`, or `aliases`\";\n+        pub const parse_symbol_mangling_version: &str = \"either `legacy` or `v0` (RFC 2603)\";\n+        pub const parse_src_file_hash: &str = \"either `md5` or `sha1`\";\n     }\n \n     #[allow(dead_code)]\n@@ -310,52 +289,54 @@ macro_rules! options {\n             }\n         )*\n \n-        /// Set a flag to true. Note that it cannot set the flag to false, so\n-        /// using this parser in combination with a flag that defaults to true\n-        /// is useless; the flag will always be true.\n-        fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool {\n+        /// This is for boolean options that don't take a value and start with\n+        /// `no-`. This style of option is deprecated.\n+        fn parse_no_flag(slot: &mut bool, v: Option<&str>) -> bool {\n             match v {\n-                Some(..) => false,\n                 None => { *slot = true; true }\n+                Some(_) => false,\n             }\n         }\n \n-        fn parse_opt_bool(slot: &mut Option<bool>, v: Option<&str>) -> bool {\n+        /// Use this for any boolean option that has a static default.\n+        fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => {\n-                    match s {\n-                        \"n\" | \"no\" | \"off\" => {\n-                            *slot = Some(false);\n-                        }\n-                        \"y\" | \"yes\" | \"on\" => {\n-                            *slot = Some(true);\n-                        }\n-                        _ => { return false; }\n-                    }\n+                Some(\"y\") | Some(\"yes\") | Some(\"on\") | None => { *slot = true; true }\n+                Some(\"n\") | Some(\"no\") | Some(\"off\") => { *slot = false; true }\n+                _ => false,\n+            }\n+        }\n \n-                    true\n-                },\n-                None => { *slot = Some(true); true }\n+        /// Use this for any boolean option that lacks a static default. (The\n+        /// actions taken when such an option is not specified will depend on\n+        /// other factors, such as other options, or target options.)\n+        fn parse_opt_bool(slot: &mut Option<bool>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"y\") | Some(\"yes\") | Some(\"on\") | None => { *slot = Some(true); true }\n+                Some(\"n\") | Some(\"no\") | Some(\"off\") => { *slot = Some(false); true }\n+                _ => false,\n             }\n         }\n \n-        fn parse_opt_string(slot: &mut Option<String>, v: Option<&str>) -> bool {\n+        /// Use this for any string option that has a static default.\n+        fn parse_string(slot: &mut String, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => { *slot = Some(s.to_string()); true },\n+                Some(s) => { *slot = s.to_string(); true },\n                 None => false,\n             }\n         }\n \n-        fn parse_opt_pathbuf(slot: &mut Option<PathBuf>, v: Option<&str>) -> bool {\n+        /// Use this for any string option that lacks a static default.\n+        fn parse_opt_string(slot: &mut Option<String>, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => { *slot = Some(PathBuf::from(s)); true },\n+                Some(s) => { *slot = Some(s.to_string()); true },\n                 None => false,\n             }\n         }\n \n-        fn parse_string(slot: &mut String, v: Option<&str>) -> bool {\n+        fn parse_opt_pathbuf(slot: &mut Option<PathBuf>, v: Option<&str>) -> bool {\n             match v {\n-                Some(s) => { *slot = s.to_string(); true },\n+                Some(s) => { *slot = Some(PathBuf::from(s)); true },\n                 None => false,\n             }\n         }\n@@ -417,17 +398,19 @@ macro_rules! options {\n             }\n         }\n \n+        /// Use this for any uint option that has a static default.\n         fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool {\n             match v.and_then(|s| s.parse().ok()) {\n                 Some(i) => { *slot = i; true },\n                 None => false\n             }\n         }\n \n+        /// Use this for any uint option that lacks a static default.\n         fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => { *slot = s.parse().ok(); slot.is_some() }\n-                None => { *slot = None; false }\n+                None => false\n             }\n         }\n \n@@ -498,18 +481,11 @@ macro_rules! options {\n         }\n \n         fn parse_sanitizer_memory_track_origins(slot: &mut usize, v: Option<&str>) -> bool {\n-            match v.map(|s| s.parse()) {\n-                None => {\n-                    *slot = 2;\n-                    true\n-                }\n-                Some(Ok(i)) if i <= 2 => {\n-                    *slot = i;\n-                    true\n-                }\n-                _ => {\n-                    false\n-                }\n+            match v {\n+                Some(\"2\") | None => { *slot = 2; true }\n+                Some(\"1\") => { *slot = 1; true }\n+                Some(\"0\") => { *slot = 0; true }\n+                Some(_) => false,\n             }\n         }\n \n@@ -647,7 +623,7 @@ macro_rules! options {\n options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n           build_codegen_options, \"C\", \"codegen\",\n           CG_OPTIONS, cg_type_desc, cgsetters,\n-    ar: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+    ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n@@ -656,7 +632,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: bool = (false, parse_bool, [UNTRACKED],\n-        \"don't let linker strip dead code (turning it on can be used for code coverage)\"),\n+        \"keep dead code at link time (useful for code coverage) (default: no)\"),\n     lto: LtoCli = (LtoCli::Unspecified, parse_lto, [TRACKED],\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n@@ -669,21 +645,21 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     llvm_args: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of arguments to pass to LLVM (space separated)\"),\n     save_temps: bool = (false, parse_bool, [UNTRACKED],\n-        \"save all temporary output files during compilation\"),\n+        \"save all temporary output files during compilation (default: no)\"),\n     rpath: bool = (false, parse_bool, [UNTRACKED],\n-        \"set rpath values in libs/exes\"),\n+        \"set rpath values in libs/exes (default: no)\"),\n     overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use overflow checks for integer arithmetic\"),\n-    no_prepopulate_passes: bool = (false, parse_bool, [TRACKED],\n-        \"don't pre-populate the pass manager with a list of passes\"),\n-    no_vectorize_loops: bool = (false, parse_bool, [TRACKED],\n-        \"don't run the loop vectorization optimization passes\"),\n-    no_vectorize_slp: bool = (false, parse_bool, [TRACKED],\n-        \"don't run LLVM's SLP vectorization pass\"),\n+    no_prepopulate_passes: bool = (false, parse_no_flag, [TRACKED],\n+        \"give an empty list of passes to the pass manager\"),\n+    no_vectorize_loops: bool = (false, parse_no_flag, [TRACKED],\n+        \"disable loop vectorization optimization passes\"),\n+    no_vectorize_slp: bool = (false, parse_no_flag, [TRACKED],\n+        \"disable LLVM's SLP vectorization pass\"),\n     soft_float: bool = (false, parse_bool, [TRACKED],\n-        \"use soft float ABI (*eabihf targets only)\"),\n+        \"use soft float ABI (*eabihf targets only) (default: no)\"),\n     prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n-        \"prefer dynamic linking to static linking\"),\n+        \"prefer dynamic linking to static linking (default: no)\"),\n     no_redzone: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n@@ -698,30 +674,30 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"divide crate into N units to optimize in parallel\"),\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n-    no_stack_check: bool = (false, parse_bool, [UNTRACKED],\n-        \"the `--no-stack-check` flag is deprecated and does nothing\"),\n-    debuginfo: Option<usize> = (None, parse_opt_uint, [TRACKED],\n-        \"debug info emission level, 0 = no debug info, 1 = line tables only, \\\n-         2 = full debug info with variable and type information\"),\n-    opt_level: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"optimize with possible levels 0-3, s, or z\"),\n+    no_stack_check: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"this option is deprecated and does nothing\"),\n+    debuginfo: usize = (0, parse_uint, [TRACKED],\n+        \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n+         2 = full debug info with variable and type information; default: 0)\"),\n+    opt_level: String = (\"0\".to_string(), parse_string, [TRACKED],\n+        \"optimization level (0-3, s, or z; default: 0)\"),\n     force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force use of the frame pointers\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"explicitly enable the `cfg(debug_assertions)` directive\"),\n     inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n-        \"set the threshold for inlining a function (default: 225)\"),\n+        \"set the threshold for inlining a function\"),\n     panic: Option<PanicStrategy> = (None, parse_panic_strategy,\n         [TRACKED], \"panic strategy to compile crate with\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n-    default_linker_libraries: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n-        \"allow the linker to link its default libraries\"),\n+    default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n+        \"allow the linker to link its default libraries (default: no)\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"linker flavor\"),\n     linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n         parse_linker_plugin_lto, [TRACKED],\n-        \"generate build artifacts that are compatible with linker-based LTO.\"),\n+        \"generate build artifacts that are compatible with linker-based LTO\"),\n     profile_generate: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [TRACKED],\n         \"compile the program with profiling instrumentation\"),\n@@ -735,112 +711,117 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n-        \"in general, enable more debug printouts\"),\n+        \"in general, enable more debug printouts (default: no)\"),\n+    // o/w tests have closure@path\n     span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n-        \"when debug-printing compiler state, do not include spans\"), // o/w tests have closure@path\n+        \"exclude spans when debug-printing compiler state (default: no)\"),\n     identify_regions: bool = (false, parse_bool, [UNTRACKED],\n-        \"make unnamed regions display as '# (where # is some non-ident unique id)\"),\n-    borrowck: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-        \"select which borrowck is used (`mir` or `migrate`)\"),\n+        \"display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\"),\n+    borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n+        \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of each rustc pass\"),\n+        \"measure time of each rustc pass (default: no)\"),\n     time: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of rustc processes\"),\n+        \"measure time of rustc processes (default: no)\"),\n     time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of each LLVM pass\"),\n+        \"measure time of each LLVM pass (default: no)\"),\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\n-        \"generate JSON tracing data file from LLVM data\"),\n+        \"generate JSON tracing data file from LLVM data (default: no)\"),\n     input_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather statistics about the input\"),\n+        \"gather statistics about the input (default: no)\"),\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n-        \"generate comments into the assembly (may change behavior)\"),\n+        \"generate comments into the assembly (may change behavior) (default: no)\"),\n     verify_llvm_ir: bool = (false, parse_bool, [TRACKED],\n-        \"verify LLVM IR\"),\n+        \"verify LLVM IR (default: no)\"),\n     borrowck_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather borrowck statistics\"),\n-    no_landing_pads: bool = (false, parse_bool, [TRACKED],\n+        \"gather borrowck statistics (default: no)\"),\n+    no_landing_pads: bool = (false, parse_no_flag, [TRACKED],\n         \"omit landing pads for unwinding\"),\n     fewer_names: bool = (false, parse_bool, [TRACKED],\n-        \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR)\"),\n+        \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\\n+        (default: no)\"),\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather metadata statistics\"),\n+        \"gather metadata statistics (default: no)\"),\n     print_link_args: bool = (false, parse_bool, [UNTRACKED],\n-        \"print the arguments passed to the linker\"),\n+        \"print the arguments passed to the linker (default: no)\"),\n     print_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"prints the LLVM optimization passes being run\"),\n+        \"print the LLVM optimization passes being run (default: no)\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n-        \"print the AST as JSON and halt\"),\n+        \"print the AST as JSON and halt (default: no)\"),\n     // We default to 1 here since we want to behave like\n     // a sequential compiler for now. This'll likely be adjusted\n     // in the future. Note that -Zthreads=0 is the way to get\n     // the num_cpus behavior.\n     threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],\n-        \"print the pre-expansion AST as JSON and halt\"),\n+        \"print the pre-expansion AST as JSON and halt (default: no)\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n-        \"list the symbols defined by a library crate\"),\n+        \"list the symbols defined by a library crate (default: no)\"),\n     save_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"write syntax and type analysis (in JSON format) information, in \\\n-         addition to normal output\"),\n+         addition to normal output (default: no)\"),\n     print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"prints region inference graph. \\\n-         Use with RUST_REGION_GRAPH=help for more info\"),\n+         Use with RUST_REGION_GRAPH=help for more info (default: no)\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n-        \"parse only; do not compile, assemble, or link\"),\n+        \"parse only; do not compile, assemble, or link (default: no)\"),\n     dual_proc_macros: bool = (false, parse_bool, [TRACKED],\n-        \"load proc macros for both target and host, but only link to the target\"),\n-    no_codegen: bool = (false, parse_bool, [TRACKED],\n+        \"load proc macros for both target and host, but only link to the target (default: no)\"),\n+    no_codegen: bool = (false, parse_no_flag, [TRACKED],\n         \"run all passes except codegen; no output\"),\n     treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n         \"treat error number `val` that occurs as bug\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n-        \"immediately print bugs registered with `delay_span_bug`\"),\n+        \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-        \"show macro backtraces\"),\n+        \"show macro backtraces (default: no)\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n-        \"show extended diagnostic help\"),\n+        \"show extended diagnostic help (default: no)\"),\n     terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"set the current terminal width\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n-        \"support compiling tests with panic=abort\"),\n+        \"support compiling tests with panic=abort (default: no)\"),\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],\n-        \"print tasks that execute and the color their dep node gets (requires debug build)\"),\n+        \"print tasks that execute and the color their dep node gets (requires debug build) \\\n+        (default: no)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],\n-        \"print high-level information about incremental reuse (or the lack thereof)\"),\n+        \"print high-level information about incremental reuse (or the lack thereof) \\\n+        (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n-        \"verify incr. comp. hashes of green query instances\"),\n+        \"verify incr. comp. hashes of green query instances (default: no)\"),\n     incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n-        \"ignore spans during ICH computation -- used for testing\"),\n+        \"ignore spans during ICH computation -- used for testing (default: no)\"),\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n-        \"insert function instrument code for mcount-based tracing\"),\n+        \"insert function instrument code for mcount-based tracing (default: no)\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-        \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n+        \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) \\\n+        (default: no)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-        \"enable queries of the dependency graph for regression testing\"),\n-    no_analysis: bool = (false, parse_bool, [UNTRACKED],\n+        \"enable queries of the dependency graph for regression testing (default: no)\"),\n+    no_analysis: bool = (false, parse_no_flag, [UNTRACKED],\n         \"parse and expand the source, but run no analysis\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n-        \"adds unstable command line options to rustc interface\"),\n+        \"adds unstable command line options to rustc interface (default: no)\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force overflow checks on or off\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n-        \"for every macro invocation, print its name and arguments\"),\n+        \"for every macro invocation, print its name and arguments (default: no)\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n-        \"emit line numbers debug info inside macros\"),\n-    no_generate_arange_section: bool = (false, parse_bool, [TRACKED],\n-        \"don't generate DWARF address ranges that give faster lookups\"),\n+        \"emit line numbers debug info inside macros (default: no)\"),\n+    no_generate_arange_section: bool = (false, parse_no_flag, [TRACKED],\n+        \"omit DWARF address ranges that give faster lookups\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n-        \"don't clear the hygiene data after analysis\"),\n+        \"keep hygiene data after analysis (default: no)\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"show spans for compiler debugging (expr|pat|ty)\"),\n     print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n-        \"print layout information for each type encountered\"),\n+        \"print layout information for each type encountered (default: no)\"),\n     print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"print the result of the monomorphization collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n-        \"set the MIR optimization level (0-3, default: 1)\"),\n-    mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"MIR optimization level (0-3; default: 1)\"),\n+    mutable_noalias: bool = (false, parse_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: no)\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"dump MIR state to file.\n@@ -850,56 +831,58 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n         `foo | bar` all passes for function names containing 'foo' or 'bar'.\"),\n \n-    dump_mir_dir: String = (String::from(\"mir_dump\"), parse_string, [UNTRACKED],\n-        \"the directory the MIR is dumped into\"),\n+    dump_mir_dir: String = (\"mir_dump\".to_string(), parse_string, [UNTRACKED],\n+        \"the directory the MIR is dumped into (default: `mir_dump`)\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n-        \"in addition to `.mir` files, create graphviz `.dot` files\"),\n+        \"in addition to `.mir` files, create graphviz `.dot` files (default: no)\"),\n     dump_mir_dataflow: bool = (false, parse_bool, [UNTRACKED],\n-        \"in addition to `.mir` files, create graphviz `.dot` files with dataflow results\"),\n+        \"in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\"),\n     dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\n-        \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n+        \"exclude the pass number when dumping MIR (used in tests) (default: no)\"),\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n-        \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0\"),\n+        \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n+        (default: no)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some performance-related statistics\"),\n+        \"print some performance-related statistics (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some statistics about the query system\"),\n+        \"print some statistics about the query system (default: no)\"),\n     hir_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some statistics about AST and HIR\"),\n+        \"print some statistics about AST and HIR (default: no)\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n-        \"encode MIR of all functions into the crate metadata\"),\n+        \"encode MIR of all functions into the crate metadata (default: no)\"),\n     unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n-        \"take the breaks off const evaluation. NOTE: this is unsound\"),\n+        \"take the brakes off const evaluation. NOTE: this is unsound (default: no)\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n-        \"pass `-install_name @rpath/...` to the macOS linker\"),\n+        \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n-                                    \"use a sanitizer\"),\n+        \"use a sanitizer\"),\n     sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n-        \"Enable recovery for selected sanitizers\"),\n+        \"enable recovery for selected sanitizers\"),\n     sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n-        \"Enable origins tracking in MemorySanitizer\"),\n+        \"enable origins tracking in MemorySanitizer\"),\n     fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n         \"set the optimization fuel quota for a crate\"),\n     print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"make rustc print the total optimization fuel used by a crate\"),\n     force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n-        \"force all crates to be `rustc_private` unstable\"),\n+        \"force all crates to be `rustc_private` unstable (default: no)\"),\n     pre_link_arg: (/* redirected to pre_link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n     pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n-                     \"insert profiling code\"),\n-    no_profiler_runtime: bool = (false, parse_bool, [TRACKED],\n-        \"don't automatically inject the profiler_builtins crate\"),\n+        \"insert profiling code (default: no)\"),\n+    no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n+        \"prevent automatic injection of the profiler_builtins crate\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],\n-                       \"dump facts from NLL analysis into side files\"),\n+        \"dump facts from NLL analysis into side files (default: no)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n-        \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting).\"),\n+        \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) \\\n+        (default: no)\"),\n     polonius: bool = (false, parse_bool, [UNTRACKED],\n-        \"enable polonius-based borrow-checker\"),\n+        \"enable polonius-based borrow-checker (default: no)\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n@@ -908,12 +891,12 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n-         the max/min integer respectively, and NaN is mapped to 0\"),\n+         the max/min integer respectively, and NaN is mapped to 0 (default: no)\"),\n     human_readable_cgu_names: bool = (false, parse_bool, [TRACKED],\n-        \"generate human-readable, predictable names for codegen units\"),\n+        \"generate human-readable, predictable names for codegen units (default: no)\"),\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n         \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n-         themselves\"),\n+         themselves (default: no)\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n         \"present the input source, unstable (and less-pretty) variants;\n         valid types are any of the types for `--pretty`, as well as:\n@@ -924,64 +907,70 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `hir,typed` (HIR with types for each node),\n         `hir-tree` (dump the raw HIR),\n         `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n-    run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"run `dsymutil` and delete intermediate object files\"),\n-    ui_testing: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n-        \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n+    // The default historical behavior was to always run dsymutil, so we're\n+    // preserving that temporarily, but we're likely to switch the default\n+    // soon.\n+    run_dsymutil: bool = (true, parse_bool, [TRACKED],\n+        \"if on Mac, run `dsymutil` and delete intermediate object files (default: yes)\"),\n+    ui_testing: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit compiler diagnostics in a form suitable for UI testing (default: no)\"),\n     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n-        \"embed LLVM bitcode in object files\"),\n-    strip_debuginfo_if_disabled: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"tell the linker to strip debuginfo when building without debuginfo enabled.\"),\n+        \"embed LLVM bitcode in object files (default: no)\"),\n+    strip_debuginfo_if_disabled: bool = (false, parse_bool, [TRACKED],\n+        \"tell the linker to strip debuginfo when building without debuginfo enabled \\\n+        (default: no)\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n-    no_parallel_llvm: bool = (false, parse_bool, [UNTRACKED],\n-        \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n-    no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n-        \"disables the 'leak check' for subtyping; unsound, but useful for tests\"),\n-    no_interleave_lints: bool = (false, parse_bool, [UNTRACKED],\n-        \"don't interleave execution of lints; allows benchmarking individual lints\"),\n+    no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n+    no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"disable the 'leak check' for subtyping; unsound, but useful for tests\"),\n+    no_interleave_lints: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"execute lints separately; allows benchmarking individual lints\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     self_profile: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n     // keep this in sync with the event filter names in librustc_data_structures/profiling.rs\n     self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n-        \"specifies which kinds of events get recorded by the self profiler;\n+        \"specify the events recorded by the self profiler;\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n                      query-blocked, incr-cache-load, query-keys, function-args, args, llvm\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n-        \"emits a section containing stack size metadata\"),\n+        \"emit a section containing stack size metadata (default: no)\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"whether to use the PLT when calling into shared libraries;\n-          only has effect for PIC code on systems with ELF binaries\n-          (default: PLT is disabled if full relro is enabled)\"),\n+        \"whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\"),\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n-        \"control the operation of the MergeFunctions LLVM pass, taking\n+        \"control the operation of the MergeFunctions LLVM pass, taking \\\n          the same values as the target option of the same name\"),\n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n     symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names\"),\n     binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n-        \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info\"),\n+        \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n+        (default: no)\"),\n     insert_sideeffect: bool = (false, parse_bool, [TRACKED],\n         \"fix undefined behavior when a thread doesn't eventually make progress \\\n-         (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n-    deduplicate_diagnostics: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n-        \"deduplicate identical diagnostics\"),\n+         (such as entering an empty infinite loop) by inserting llvm.sideeffect \\\n+         (default: no)\"),\n+    deduplicate_diagnostics: bool = (true, parse_bool, [UNTRACKED],\n+        \"deduplicate identical diagnostics (default: yes)\"),\n     control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n         \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n-    no_link: bool = (false, parse_bool, [TRACKED],\n+    no_link: bool = (false, parse_no_flag, [TRACKED],\n         \"compile without linking\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n-        \"link the `.rlink` file generated by `-Z no-link`\"),\n-    new_llvm_pass_manager: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"use new LLVM pass manager\"),\n-    link_native_libraries: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n-        \"Link native libraries in the linker invocation.\"),\n+        \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n+    new_llvm_pass_manager: bool = (false, parse_bool, [TRACKED],\n+        \"use new LLVM pass manager (default: no)\"),\n+    link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n+        \"link native libraries in the linker invocation (default: yes)\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n         \"hash algorithm of source files in debug info (`md5`, or `sha1`)\"),\n }"}, {"sha": "f0bbe1d0a18bce11a1cc86eab7bd36a61449a9bf", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -899,7 +899,7 @@ fn default_emitter(\n                     short,\n                     macro_backtrace,\n                 );\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n+                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n             } else {\n                 let emitter = match dst {\n                     None => EmitterWriter::stderr(\n@@ -920,7 +920,7 @@ fn default_emitter(\n                         macro_backtrace,\n                     ),\n                 };\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n+                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n             }\n         }\n         (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n@@ -931,7 +931,7 @@ fn default_emitter(\n                 json_rendered,\n                 macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing()),\n+            .ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n@@ -942,7 +942,7 @@ fn default_emitter(\n                 json_rendered,\n                 macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing()),\n+            .ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n     }\n }"}, {"sha": "fe2727c962c7668b4ae02c5a3828dec5c0f30c40", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce3f840ae9b735a66531996c32330f24b877cb0/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8ce3f840ae9b735a66531996c32330f24b877cb0", "patch": "@@ -185,7 +185,7 @@ pub fn new_handler(\n                     debugging_opts.terminal_width,\n                     false,\n                 )\n-                .ui_testing(debugging_opts.ui_testing()),\n+                .ui_testing(debugging_opts.ui_testing),\n             )\n         }\n         ErrorOutputType::Json { pretty, json_rendered } => {\n@@ -194,7 +194,7 @@ pub fn new_handler(\n             });\n             Box::new(\n                 JsonEmitter::stderr(None, source_map, pretty, json_rendered, false)\n-                    .ui_testing(debugging_opts.ui_testing()),\n+                    .ui_testing(debugging_opts.ui_testing),\n             )\n         }\n     };"}]}