{"sha": "3a907cee97e9e2b7bc7f5947028e05b3133123ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOTA3Y2VlOTdlOWUyYjdiYzdmNTk0NzAyOGUwNWIzMTMzMTIzYWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-26T01:50:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-26T01:50:24Z"}, "message": "Rollup merge of #60284 - varkor:const-param-of-type-param, r=cramertj\n\nDo not allow const generics to depend on type parameters\n\nFixes https://github.com/rust-lang/rust/issues/60264. In https://github.com/rust-lang/rust/pull/58191/files/b534cf992d0189032207f395c27ed092c89b40c7#diff-aeb0880081a991f34aef2ab889e1fb7a, it was suggested that there might be a better place for this error, but as this bug already affects stable, it's probably worth merging this now, and refactoring afterwards (I can open an issue for this).", "tree": {"sha": "f698c9b5b0ddfe4a55713183bf6086435a1b9dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f698c9b5b0ddfe4a55713183bf6086435a1b9dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a907cee97e9e2b7bc7f5947028e05b3133123ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcwmPgCRBK7hj4Ov3rIwAAdHIIAHxdgpGARlQWm05Z6Lr59SJR\nUW5UpFn8GWAGAflNJss0+KQXmbsf5coJMUAM3ZgFpDp/VhVhngQuSI3O48/9OMIE\nbJdp83xXamUw9w0e/S0RHbyotZ6ZmUUA4G4fdNmsfpxONQyf6H3sGDUUXichLHn6\nGQzA2TImQa0V7YlLMRjBCTV4M1U5CzduSI0EpzjNQfnRWNVFxFJqMnzmpg6tYV/3\nQkTW7uQQFHYhzBU1hTm8WsidJQsXhtZ/JLiXPA08he/ANWEB7vsF7dlDi1SDyYqM\nZHBYmTK67AKWgT1ROt2J0L9qa9qe/SG30Vn/rGTo3dBEYemeP9zAjMHnvSOe88w=\n=8O1D\n-----END PGP SIGNATURE-----\n", "payload": "tree f698c9b5b0ddfe4a55713183bf6086435a1b9dc6\nparent 4387f99fc53ca6874c738c8588382adb89f3bbbf\nparent 6d7c7940b581e8a7f311327e9b48203ce97b8137\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556243424 +0200\ncommitter GitHub <noreply@github.com> 1556243424 +0200\n\nRollup merge of #60284 - varkor:const-param-of-type-param, r=cramertj\n\nDo not allow const generics to depend on type parameters\n\nFixes https://github.com/rust-lang/rust/issues/60264. In https://github.com/rust-lang/rust/pull/58191/files/b534cf992d0189032207f395c27ed092c89b40c7#diff-aeb0880081a991f34aef2ab889e1fb7a, it was suggested that there might be a better place for this error, but as this bug already affects stable, it's probably worth merging this now, and refactoring afterwards (I can open an issue for this).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a907cee97e9e2b7bc7f5947028e05b3133123ad", "html_url": "https://github.com/rust-lang/rust/commit/3a907cee97e9e2b7bc7f5947028e05b3133123ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a907cee97e9e2b7bc7f5947028e05b3133123ad/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4387f99fc53ca6874c738c8588382adb89f3bbbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4387f99fc53ca6874c738c8588382adb89f3bbbf", "html_url": "https://github.com/rust-lang/rust/commit/4387f99fc53ca6874c738c8588382adb89f3bbbf"}, {"sha": "6d7c7940b581e8a7f311327e9b48203ce97b8137", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7c7940b581e8a7f311327e9b48203ce97b8137", "html_url": "https://github.com/rust-lang/rust/commit/6d7c7940b581e8a7f311327e9b48203ce97b8137"}], "stats": {"total": 119, "additions": 117, "deletions": 2}, "files": [{"sha": "7cd26dce1447c9d93657a3d87498458f0eb3ce52", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=3a907cee97e9e2b7bc7f5947028e05b3133123ad", "patch": "@@ -1642,6 +1642,19 @@ fn main() {\n ```\n \"##,\n \n+E0671: r##\"\n+Const parameters cannot depend on type parameters.\n+The following is therefore invalid:\n+```compile_fail,E0671\n+#![feature(const_generics)]\n+\n+fn const_id<T, const N: T>() -> T { // error: const parameter\n+                                    // depends on type parameter\n+    N\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "80b82bc4dbd8490a18653016fb2f1ddad3947161", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3a907cee97e9e2b7bc7f5947028e05b3133123ad", "patch": "@@ -185,6 +185,8 @@ enum ResolutionError<'a> {\n     BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    /// Error E0671: const parameter cannot depend on type parameter.\n+    ConstParamDependentOnTypeParam,\n }\n \n /// Combines an error with provided span and emits it.\n@@ -440,6 +442,16 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                 span, \"defaulted type parameters cannot be forward declared\".to_string());\n             err\n         }\n+        ResolutionError::ConstParamDependentOnTypeParam => {\n+            let mut err = struct_span_err!(\n+                resolver.session,\n+                span,\n+                E0671,\n+                \"const parameters cannot depend on type parameters\"\n+            );\n+            err.span_label(span, format!(\"const parameter depends on type parameter\"));\n+            err\n+        }\n     }\n }\n \n@@ -915,6 +927,18 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                 }\n             }));\n \n+        // We also ban access to type parameters for use as the types of const parameters.\n+        let mut const_ty_param_ban_rib = Rib::new(TyParamAsConstParamTy);\n+        const_ty_param_ban_rib.bindings.extend(generics.params.iter()\n+            .filter(|param| {\n+                if let GenericParamKind::Type { .. } = param.kind {\n+                    true\n+                } else {\n+                    false\n+                }\n+            })\n+            .map(|param| (Ident::with_empty_ctxt(param.ident.name), Def::Err)));\n+\n         for param in &generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n@@ -933,11 +957,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                     default_ban_rib.bindings.remove(&Ident::with_empty_ctxt(param.ident.name));\n                 }\n                 GenericParamKind::Const { ref ty } => {\n+                    self.ribs[TypeNS].push(const_ty_param_ban_rib);\n+\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n \n                     self.visit_ty(ty);\n+\n+                    const_ty_param_ban_rib = self.ribs[TypeNS].pop().unwrap();\n                 }\n             }\n         }\n@@ -994,6 +1022,9 @@ enum RibKind<'a> {\n     /// from the default of a type parameter because they're not declared\n     /// before said type parameter. Also see the `visit_generics` override.\n     ForwardTyParamBanRibKind,\n+\n+    /// We forbid the use of type parameters as the types of const parameters.\n+    TyParamAsConstParamTy,\n }\n \n /// A single local scope.\n@@ -3944,6 +3975,15 @@ impl<'a> Resolver<'a> {\n             return Def::Err;\n         }\n \n+        // An invalid use of a type parameter as the type of a const parameter.\n+        if let TyParamAsConstParamTy = self.ribs[ns][rib_index].kind {\n+            if record_used {\n+                resolve_error(self, span, ResolutionError::ConstParamDependentOnTypeParam);\n+            }\n+            assert_eq!(def, Def::Err);\n+            return Def::Err;\n+        }\n+\n         match def {\n             Def::Upvar(..) => {\n                 span_bug!(span, \"unexpected {:?} in bindings\", def)\n@@ -3955,7 +3995,7 @@ impl<'a> Resolver<'a> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | ModuleRibKind(..) | MacroDefinition(..) |\n-                        ForwardTyParamBanRibKind => {\n+                        ForwardTyParamBanRibKind | TyParamAsConstParamTy => {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n@@ -4013,7 +4053,7 @@ impl<'a> Resolver<'a> {\n                     match rib.kind {\n                         NormalRibKind | TraitOrImplItemRibKind | ClosureRibKind(..) |\n                         ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind |\n-                        ConstantItemRibKind => {\n+                        ConstantItemRibKind | TyParamAsConstParamTy => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind | FnItemRibKind => {"}, {"sha": "af5e8f49754e819ee8cb97fbe554ae156e80c2aa", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=3a907cee97e9e2b7bc7f5947028e05b3133123ad", "patch": "@@ -0,0 +1,6 @@\n+use std::marker::PhantomData;\n+\n+struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n+//~^ ERROR const parameters cannot depend on type parameters\n+\n+fn main() {}"}, {"sha": "e3adbcfe60204647e674b4ece694c31099a2921d", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=3a907cee97e9e2b7bc7f5947028e05b3133123ad", "patch": "@@ -0,0 +1,19 @@\n+error[E0671]: const parameters cannot depend on type parameters\n+  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n+   |\n+LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n+   |                      ^ const parameter depends on type parameter\n+\n+error[E0658]: const generics are unstable\n+  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:19\n+   |\n+LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n+   |                   ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = help: add #![feature(const_generics)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0658, E0671.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "28e0d6c2bb7e7b219f13353cf92f2c03bfceb419", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=3a907cee97e9e2b7bc7f5947028e05b3133123ad", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+// Currently, const parameters cannot depend on type parameters, because there is no way to\n+// enforce the `structural_match` property on an arbitrary type parameter. This restriction\n+// may be relaxed in the future. See https://github.com/rust-lang/rfcs/pull/2000 for more\n+// details.\n+\n+pub struct Dependent<T, const X: T>([(); X]);\n+//~^ ERROR const parameters cannot depend on type parameters\n+//~^^ ERROR parameter `T` is never used\n+\n+fn main() {}"}, {"sha": "c7dcbe1354266fde863fd807a784ab0bf642d765", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a907cee97e9e2b7bc7f5947028e05b3133123ad/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=3a907cee97e9e2b7bc7f5947028e05b3133123ad", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0671]: const parameters cannot depend on type parameters\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+   |\n+LL | pub struct Dependent<T, const X: T>([(); X]);\n+   |                                  ^ const parameter depends on type parameter\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:22\n+   |\n+LL | pub struct Dependent<T, const X: T>([(); X]);\n+   |                      ^ unused parameter\n+   |\n+   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0392, E0671.\n+For more information about an error, try `rustc --explain E0392`."}]}