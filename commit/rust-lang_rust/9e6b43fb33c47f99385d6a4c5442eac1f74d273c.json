{"sha": "9e6b43fb33c47f99385d6a4c5442eac1f74d273c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNmI0M2ZiMzNjNDdmOTkzODVkNmE0YzU0NDJlYWMxZjc0ZDI3M2M=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-06T22:04:57Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-06T22:04:57Z"}, "message": "Rip out a bunch more append code from trans.", "tree": {"sha": "32a96cd8407488661e42a98335b571932ab043f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32a96cd8407488661e42a98335b571932ab043f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e6b43fb33c47f99385d6a4c5442eac1f74d273c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6b43fb33c47f99385d6a4c5442eac1f74d273c", "html_url": "https://github.com/rust-lang/rust/commit/9e6b43fb33c47f99385d6a4c5442eac1f74d273c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e6b43fb33c47f99385d6a4c5442eac1f74d273c/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702f0cd73456cc72e030c1c936f83ec2523d9b0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/702f0cd73456cc72e030c1c936f83ec2523d9b0f", "html_url": "https://github.com/rust-lang/rust/commit/702f0cd73456cc72e030c1c936f83ec2523d9b0f"}], "stats": {"total": 90, "additions": 0, "deletions": 90}, "files": [{"sha": "377dac6120fdee62fa05e7722dce025f874fc8db", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e6b43fb33c47f99385d6a4c5442eac1f74d273c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6b43fb33c47f99385d6a4c5442eac1f74d273c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9e6b43fb33c47f99385d6a4c5442eac1f74d273c", "patch": "@@ -1755,28 +1755,7 @@ fn trans_assign_op(bcx: block, ex: @ast::expr, op: ast::binop,\n       _ {}\n     }\n \n-    // Special case for `+= ~[x]`\n-    alt ty::get(t).struct {\n-      ty::ty_vec(_) {\n-        alt src.node {\n-          ast::expr_vec(args, _) {\n-            ret tvec::trans_append_literal(lhs_res.bcx,\n-                                           lhs_res.val, t, args);\n-          }\n-          _ { }\n-        }\n-      }\n-      _ { }\n-    }\n     let {bcx, val: rhs_val} = trans_temp_expr(lhs_res.bcx, src);\n-    if ty::type_is_sequence(t) {\n-        alt op {\n-          ast::add {\n-            ret tvec::trans_append(bcx, t, lhs_res.val, rhs_val);\n-          }\n-          _ { }\n-        }\n-    }\n     ret trans_eager_binop(bcx, ex.span,\n                           op, Load(bcx, lhs_res.val), t, rhs_val, t,\n                           save_in(lhs_res.val));"}, {"sha": "f7725cdb0771d5caa178444ba8c172c8f118e5a2", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9e6b43fb33c47f99385d6a4c5442eac1f74d273c/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6b43fb33c47f99385d6a4c5442eac1f74d273c/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=9e6b43fb33c47f99385d6a4c5442eac1f74d273c", "patch": "@@ -306,75 +306,6 @@ fn trans_estr(bcx: block, s: @str, vstore: ast::vstore,\n     base::store_in_dest(bcx, c, dest)\n }\n \n-fn trans_append(bcx: block, vec_ty: ty::t, lhsptr: ValueRef,\n-                rhs: ValueRef) -> block {\n-    let _icx = bcx.insn_ctxt(\"tvec::trans_append\");\n-    // Cast to opaque interior vector types if necessary.\n-    let ccx = bcx.ccx();\n-    let unit_ty = ty::sequence_element_type(ccx.tcx, vec_ty);\n-    let strings = ty::type_is_str(vec_ty);\n-\n-    let lhs = Load(bcx, lhsptr);\n-    let self_append = ICmp(bcx, lib::llvm::IntEQ, lhs, rhs);\n-    let lfill = get_fill(bcx, get_bodyptr(bcx, lhs));\n-    let rfill = get_fill(bcx, get_bodyptr(bcx, rhs));\n-    let mut new_fill = Add(bcx, lfill, rfill);\n-    if strings { new_fill = Sub(bcx, new_fill, C_int(ccx, 1)); }\n-    let opaque_lhs = PointerCast(bcx, lhsptr,\n-                                 T_ptr(T_ptr(T_i8())));\n-    Call(bcx, ccx.upcalls.vec_grow,\n-         ~[opaque_lhs, new_fill]);\n-    // Was overwritten if we resized\n-    let lhs = Load(bcx, lhsptr);\n-    let rhs = Select(bcx, self_append, lhs, rhs);\n-\n-    let lbody = get_bodyptr(bcx, lhs);\n-\n-    let lhs_data = get_dataptr(bcx, lbody);\n-    let mut lhs_off = lfill;\n-    if strings { lhs_off = Sub(bcx, lhs_off, C_int(ccx, 1)); }\n-    let write_ptr = pointer_add(bcx, lhs_data, lhs_off);\n-    let write_ptr_ptr = do_spill_noroot(bcx, write_ptr);\n-    iter_vec_uniq(bcx, rhs, vec_ty, rfill, |bcx, addr, _ty| {\n-        let write_ptr = Load(bcx, write_ptr_ptr);\n-        let bcx = copy_val(bcx, INIT, write_ptr,\n-                           load_if_immediate(bcx, addr, unit_ty), unit_ty);\n-        Store(bcx, InBoundsGEP(bcx, write_ptr, ~[C_int(ccx, 1)]),\n-              write_ptr_ptr);\n-        bcx\n-    })\n-}\n-\n-fn trans_append_literal(bcx: block, vptrptr: ValueRef, vec_ty: ty::t,\n-                        vals: ~[@ast::expr]) -> block {\n-    let _icx = bcx.insn_ctxt(\"tvec::trans_append_literal\");\n-    let mut bcx = bcx, ccx = bcx.ccx();\n-    let elt_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n-    let elt_llty = type_of::type_of(ccx, elt_ty);\n-    let elt_sz = shape::llsize_of(ccx, elt_llty);\n-    let scratch = base::alloca(bcx, elt_llty);\n-    for vec::each(vals) |val| {\n-        bcx = base::trans_expr_save_in(bcx, val, scratch);\n-        let vptr = get_bodyptr(bcx, Load(bcx, vptrptr));\n-        let old_fill = get_fill(bcx, vptr);\n-        let new_fill = Add(bcx, old_fill, elt_sz);\n-        let do_grow = ICmp(bcx, lib::llvm::IntUGT, new_fill,\n-                           get_alloc(bcx, vptr));\n-        bcx = do base::with_cond(bcx, do_grow) |bcx| {\n-            let pt = PointerCast(bcx, vptrptr,\n-                                 T_ptr(T_ptr(T_i8())));\n-            Call(bcx, ccx.upcalls.vec_grow, ~[pt, new_fill]);\n-            bcx\n-        };\n-        let vptr = get_bodyptr(bcx, Load(bcx, vptrptr));\n-        set_fill(bcx, vptr, new_fill);\n-        let targetptr = pointer_add(bcx, get_dataptr(bcx, vptr),\n-                                    old_fill);\n-        call_memmove(bcx, targetptr, scratch, elt_sz);\n-    }\n-    bcx\n-}\n-\n type val_and_ty_fn = fn@(block, ValueRef, ty::t) -> result;\n \n type iter_vec_block = fn(block, ValueRef, ty::t) -> block;"}]}