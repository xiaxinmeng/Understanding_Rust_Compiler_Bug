{"sha": "ea47c2b6b349d7f252a6a734ced8204e6ef70546", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDdjMmI2YjM0OWQ3ZjI1MmE2YTczNGNlZDgyMDRlNmVmNzA1NDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-01T15:47:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-13T12:19:15Z"}, "message": "Unify structures and enum variants in AST", "tree": {"sha": "ded8a90ea9cac7d2899257365cec7305c130c0e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded8a90ea9cac7d2899257365cec7305c130c0e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea47c2b6b349d7f252a6a734ced8204e6ef70546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea47c2b6b349d7f252a6a734ced8204e6ef70546", "html_url": "https://github.com/rust-lang/rust/commit/ea47c2b6b349d7f252a6a734ced8204e6ef70546", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea47c2b6b349d7f252a6a734ced8204e6ef70546/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4362da562a4b591a7d120c6677e14ea713481a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4362da562a4b591a7d120c6677e14ea713481a", "html_url": "https://github.com/rust-lang/rust/commit/ec4362da562a4b591a7d120c6677e14ea713481a"}], "stats": {"total": 319, "additions": 95, "deletions": 224}, "files": [{"sha": "bd5f7cf3c626eba2c81dba90444a1e7f9f1198fb", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -267,14 +267,13 @@ pub fn lower_variant(_lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n             id: v.node.id,\n             name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n-            kind: match v.node.kind {\n-                TupleVariantKind(ref variant_args) => {\n-                    hir::TupleVariantKind(variant_args.iter()\n-                                                      .map(|ref x| lower_variant_arg(_lctx, x))\n-                                                      .collect())\n-                }\n-                StructVariantKind(ref struct_def) => {\n-                    hir::StructVariantKind(lower_struct_def(_lctx, struct_def))\n+            kind: {\n+                if v.node.def.ctor_id.is_none() {\n+                    hir::StructVariantKind(lower_struct_def(_lctx, &v.node.def))\n+                } else {\n+                    hir::TupleVariantKind(v.node.def.fields.iter().map(|ref field| {\n+                        hir::VariantArg { id: field.node.id, ty: lower_ty(_lctx, &field.node.ty) }\n+                    }).collect())\n                 }\n             },\n             disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(_lctx, e)),\n@@ -567,13 +566,6 @@ fn lower_bounds(_lctx: &LoweringContext, bounds: &TyParamBounds) -> hir::TyParam\n     bounds.iter().map(|bound| lower_ty_param_bound(_lctx, bound)).collect()\n }\n \n-fn lower_variant_arg(_lctx: &LoweringContext, va: &VariantArg) -> hir::VariantArg {\n-    hir::VariantArg {\n-        id: va.id,\n-        ty: lower_ty(_lctx, &va.ty),\n-    }\n-}\n-\n pub fn lower_block(_lctx: &LoweringContext, b: &Block) -> P<hir::Block> {\n     P(hir::Block {\n         id: b.id,"}, {"sha": "983f04643c3628f02ffa7d67794b8f77026779f8", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 14, "deletions": 34, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -504,40 +504,20 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             qualname.push_str(\"::\");\n             qualname.push_str(name);\n             let val = self.span.snippet(variant.span);\n-            match variant.node.kind {\n-                ast::TupleVariantKind(ref args) => {\n-                    // first ident in span is the variant's name\n-                    self.fmt.tuple_variant_str(variant.span,\n-                                               self.span.span_for_first_ident(variant.span),\n-                                               variant.node.id,\n-                                               name,\n-                                               &qualname,\n-                                               &enum_data.qualname,\n-                                               &val,\n-                                               enum_data.id);\n-                    for arg in args {\n-                        self.visit_ty(&*arg.ty);\n-                    }\n-                }\n-                ast::StructVariantKind(ref struct_def) => {\n-                    let ctor_id = match struct_def.ctor_id {\n-                        Some(node_id) => node_id,\n-                        None => ast::DUMMY_NODE_ID,\n-                    };\n-                    self.fmt.struct_variant_str(variant.span,\n-                                                self.span.span_for_first_ident(variant.span),\n-                                                variant.node.id,\n-                                                ctor_id,\n-                                                &qualname,\n-                                                &enum_data.qualname,\n-                                                &val,\n-                                                enum_data.id);\n-\n-                    for field in &struct_def.fields {\n-                        self.process_struct_field_def(field, variant.node.id);\n-                        self.visit_ty(&*field.node.ty);\n-                    }\n-                }\n+\n+            let ctor_id = variant.node.def.ctor_id.unwrap_or(ast::DUMMY_NODE_ID);\n+            self.fmt.struct_variant_str(variant.span,\n+                                        self.span.span_for_first_ident(variant.span),\n+                                        variant.node.id,\n+                                        ctor_id,\n+                                        &qualname,\n+                                        &enum_data.qualname,\n+                                        &val,\n+                                        enum_data.id);\n+\n+            for field in &variant.node.def.fields {\n+                self.process_struct_field_def(field, variant.node.id);\n+                self.visit_ty(&*field.node.ty);\n             }\n         }\n         self.process_generic_params(ty_params, item.span, &enum_data.qualname, enum_data.id);"}, {"sha": "57d9837e1aaccbbbac0721e9b0f6745b833d34cd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -1594,7 +1594,7 @@ pub struct EnumDef {\n pub struct Variant_ {\n     pub name: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub kind: VariantKind,\n+    pub def: P<StructDef>,\n     pub id: NodeId,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,"}, {"sha": "0accf34202ed736016ac98e0cd8b688b17bbbb5e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -140,19 +140,14 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                 if !(cx.in_cfg)(&v.node.attrs) {\n                     None\n                 } else {\n-                    Some(v.map(|Spanned {node: ast::Variant_ {id, name, attrs, kind,\n+                    Some(v.map(|Spanned {node: ast::Variant_ {id, name, attrs, def,\n                                                               disr_expr}, span}| {\n                         Spanned {\n                             node: ast::Variant_ {\n                                 id: id,\n                                 name: name,\n                                 attrs: attrs,\n-                                kind: match kind {\n-                                    ast::TupleVariantKind(..) => kind,\n-                                    ast::StructVariantKind(def) => {\n-                                        ast::StructVariantKind(fold_struct(cx, def))\n-                                    }\n-                                },\n+                                def: fold_struct(cx, def),\n                                 disr_expr: disr_expr,\n                             },\n                             span: span"}, {"sha": "d448eb63204ebd7f278e880e450c49b7d6f5b8e2", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -993,15 +993,20 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn variant(&self, span: Span, name: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant {\n-        let args = tys.into_iter().map(|ty| {\n-            ast::VariantArg { ty: ty, id: ast::DUMMY_NODE_ID }\n+        let fields = tys.into_iter().map(|ty| {\n+            Spanned { span: ty.span, node: ast::StructField_ {\n+                ty: ty,\n+                kind: ast::UnnamedField(ast::Inherited),\n+                attrs: Vec::new(),\n+                id: ast::DUMMY_NODE_ID,\n+            }}\n         }).collect();\n \n         respan(span,\n                ast::Variant_ {\n                    name: name,\n                    attrs: Vec::new(),\n-                   kind: ast::TupleVariantKind(args),\n+                   def: P(ast::StructDef { fields: fields, ctor_id: Some(ast::DUMMY_NODE_ID) }),\n                    id: ast::DUMMY_NODE_ID,\n                    disr_expr: None,\n                })"}, {"sha": "f6ea6aef108a165d2aaa440175c1db0c999888c8", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -700,16 +700,8 @@ impl<'a> TraitDef<'a> {\n         let mut field_tys = Vec::new();\n \n         for variant in &enum_def.variants {\n-            match variant.node.kind {\n-                ast::VariantKind::TupleVariantKind(ref args) => {\n-                    field_tys.extend(args.iter()\n-                        .map(|arg| arg.ty.clone()));\n-                }\n-                ast::VariantKind::StructVariantKind(ref args) => {\n-                    field_tys.extend(args.fields.iter()\n-                        .map(|field| field.node.ty.clone()));\n-                }\n-            }\n+            field_tys.extend(variant.node.def.fields.iter()\n+                .map(|field| field.node.ty.clone()));\n         }\n \n         let methods = self.methods.iter().map(|method_def| {\n@@ -1413,14 +1405,7 @@ impl<'a> MethodDef<'a> {\n         -> P<Expr> {\n         let summary = enum_def.variants.iter().map(|v| {\n             let ident = v.node.name;\n-            let summary = match v.node.kind {\n-                ast::TupleVariantKind(ref args) => {\n-                    Unnamed(args.iter().map(|va| trait_.set_expn_info(cx, va.ty.span)).collect())\n-                }\n-                ast::StructVariantKind(ref struct_def) => {\n-                    trait_.summarise_struct(cx, &**struct_def)\n-                }\n-            };\n+            let summary = trait_.summarise_struct(cx, &v.node.def);\n             (ident, v.span, summary)\n         }).collect();\n         self.call_substructure_method(cx, trait_, type_ident,\n@@ -1560,34 +1545,7 @@ impl<'a> TraitDef<'a> {\n         -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n         let variant_ident = variant.node.name;\n         let variant_path = cx.path(variant.span, vec![enum_ident, variant_ident]);\n-        match variant.node.kind {\n-            ast::TupleVariantKind(ref variant_args) => {\n-                if variant_args.is_empty() {\n-                    return (cx.pat_enum(variant.span, variant_path, vec![]), vec![]);\n-                }\n-\n-                let mut paths = Vec::new();\n-                let mut ident_expr: Vec<(_, _, _, &'a [ast::Attribute])> = Vec::new();\n-                for (i, va) in variant_args.iter().enumerate() {\n-                    let sp = self.set_expn_info(cx, va.ty.span);\n-                    let ident = cx.ident_of(&format!(\"{}_{}\", prefix, i));\n-                    let path1 = codemap::Spanned{span: sp, node: ident};\n-                    paths.push(path1);\n-                    let expr_path = cx.expr_path(cx.path_ident(sp, ident));\n-                    let val = cx.expr(sp, ast::ExprParen(cx.expr_deref(sp, expr_path)));\n-                    ident_expr.push((sp, None, val, &[]));\n-                }\n-\n-                let subpats = self.create_subpatterns(cx, paths, mutbl);\n-\n-                (cx.pat_enum(variant.span, variant_path, subpats),\n-                 ident_expr)\n-            }\n-            ast::StructVariantKind(ref struct_def) => {\n-                self.create_struct_pattern(cx, variant_path, &**struct_def,\n-                                           prefix, mutbl)\n-            }\n-        }\n+        self.create_struct_pattern(cx, variant_path, &variant.node.def, prefix, mutbl)\n     }\n }\n "}, {"sha": "2fdaa9b7550b5402d7cdd751457886ad6b591c2a", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 25, "deletions": 35, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -94,45 +94,35 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n             let mut arms = Vec::new();\n \n             for variant in &enum_def.variants {\n-                match variant.node.kind {\n-                    ast::TupleVariantKind(ref args) => {\n-                        if !args.is_empty() {\n-                            cx.span_err(trait_span,\n-                                        \"`FromPrimitive` cannot be derived for \\\n-                                        enum variants with arguments\");\n-                            return cx.expr_fail(trait_span,\n-                                                InternedString::new(\"\"));\n-                        }\n-                        let span = variant.span;\n+                let def = &variant.node.def;\n+                if def.ctor_id.is_none() || !def.fields.is_empty() {\n+                    cx.span_err(trait_span, \"`FromPrimitive` cannot be derived \\\n+                                             for enums with non-unit variants\");\n+                    return cx.expr_fail(trait_span,\n+                                        InternedString::new(\"\"));\n+                }\n \n-                        // expr for `$n == $variant as $name`\n-                        let path = cx.path(span, vec![substr.type_ident, variant.node.name]);\n-                        let variant = cx.expr_path(path);\n-                        let ty = cx.ty_ident(span, cx.ident_of(name));\n-                        let cast = cx.expr_cast(span, variant.clone(), ty);\n-                        let guard = cx.expr_binary(span, ast::BiEq, n.clone(), cast);\n+                let span = variant.span;\n \n-                        // expr for `Some($variant)`\n-                        let body = cx.expr_some(span, variant);\n+                // expr for `$n == $variant as $name`\n+                let path = cx.path(span, vec![substr.type_ident, variant.node.name]);\n+                let variant = cx.expr_path(path);\n+                let ty = cx.ty_ident(span, cx.ident_of(name));\n+                let cast = cx.expr_cast(span, variant.clone(), ty);\n+                let guard = cx.expr_binary(span, ast::BiEq, n.clone(), cast);\n \n-                        // arm for `_ if $guard => $body`\n-                        let arm = ast::Arm {\n-                            attrs: vec!(),\n-                            pats: vec!(cx.pat_wild(span)),\n-                            guard: Some(guard),\n-                            body: body,\n-                        };\n+                // expr for `Some($variant)`\n+                let body = cx.expr_some(span, variant);\n \n-                        arms.push(arm);\n-                    }\n-                    ast::StructVariantKind(_) => {\n-                        cx.span_err(trait_span,\n-                                    \"`FromPrimitive` cannot be derived for enums \\\n-                                    with struct variants\");\n-                        return cx.expr_fail(trait_span,\n-                                            InternedString::new(\"\"));\n-                    }\n-                }\n+                // arm for `_ if $guard => $body`\n+                let arm = ast::Arm {\n+                    attrs: vec!(),\n+                    pats: vec!(cx.pat_wild(span)),\n+                    guard: Some(guard),\n+                    body: body,\n+                };\n+\n+                arms.push(arm);\n             }\n \n             // arm for `_ => None`"}, {"sha": "88781c3664ab20d143e8d9298e3872ca115f5113", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -450,20 +450,12 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {id, name, attrs, def, disr_expr}, span}| Spanned {\n         node: Variant_ {\n             id: fld.new_id(id),\n             name: name,\n             attrs: fold_attrs(attrs, fld),\n-            kind: match kind {\n-                TupleVariantKind(variant_args) => {\n-                    TupleVariantKind(variant_args.move_map(|x|\n-                        fld.fold_variant_arg(x)))\n-                }\n-                StructVariantKind(struct_def) => {\n-                    StructVariantKind(fld.fold_struct_def(struct_def))\n-                }\n-            },\n+            def: fld.fold_struct_def(def),\n             disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n         },\n         span: fld.new_span(span),"}, {"sha": "0748c898a828b32687ae7e36a0e0cd6b0e97335f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -46,11 +46,11 @@ use ast::PatWildSingle;\n use ast::{PolyTraitRef, QSelf};\n use ast::{Return, BiShl, BiShr, Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, StructDef, StructField};\n-use ast::{StructVariantKind, BiSub, StrStyle};\n+use ast::{BiSub, StrStyle};\n use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{TtDelimited, TtSequence, TtToken};\n-use ast::{TupleVariantKind, Ty, Ty_, TypeBinding};\n+use ast::{Ty, Ty_, TypeBinding};\n use ast::{TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr};\n@@ -5131,22 +5131,13 @@ impl<'a> Parser<'a> {\n             let variant_attrs = self.parse_outer_attributes();\n             let vlo = self.span.lo;\n \n-            let kind;\n-            let mut args = Vec::new();\n+            let struct_def;\n             let mut disr_expr = None;\n             let ident = try!(self.parse_ident());\n             if try!(self.eat(&token::OpenDelim(token::Brace)) ){\n                 // Parse a struct variant.\n                 all_nullary = false;\n-                let start_span = self.span;\n-                let struct_def = try!(self.parse_struct_def());\n-                if struct_def.fields.is_empty() {\n-                    self.span_err(start_span,\n-                        &format!(\"unit-like struct variant should be written \\\n-                                 without braces, as `{},`\",\n-                                ident));\n-                }\n-                kind = StructVariantKind(struct_def);\n+                struct_def = try!(self.parse_struct_def());\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n                 all_nullary = false;\n                 let arg_tys = try!(self.parse_enum_variant_seq(\n@@ -5155,25 +5146,31 @@ impl<'a> Parser<'a> {\n                     seq_sep_trailing_allowed(token::Comma),\n                     |p| p.parse_ty_sum()\n                 ));\n+                let mut fields = Vec::new();\n                 for ty in arg_tys {\n-                    args.push(ast::VariantArg {\n+                    fields.push(Spanned { span: ty.span, node: ast::StructField_ {\n                         ty: ty,\n+                        kind: ast::UnnamedField(ast::Inherited),\n+                        attrs: Vec::new(),\n                         id: ast::DUMMY_NODE_ID,\n-                    });\n+                    }});\n                 }\n-                kind = TupleVariantKind(args);\n+                struct_def = P(StructDef { fields: fields,\n+                                           ctor_id: Some(ast::DUMMY_NODE_ID) });\n             } else if try!(self.eat(&token::Eq) ){\n                 disr_expr = Some(try!(self.parse_expr_nopanic()));\n                 any_disr = disr_expr.as_ref().map(|expr| expr.span);\n-                kind = TupleVariantKind(args);\n+                struct_def = P(StructDef { fields: Vec::new(),\n+                                           ctor_id: Some(ast::DUMMY_NODE_ID) });\n             } else {\n-                kind = TupleVariantKind(Vec::new());\n+                struct_def = P(StructDef { fields: Vec::new(),\n+                                           ctor_id: Some(ast::DUMMY_NODE_ID) });\n             }\n \n             let vr = ast::Variant_ {\n                 name: ident,\n                 attrs: variant_attrs,\n-                kind: kind,\n+                def: struct_def,\n                 id: ast::DUMMY_NODE_ID,\n                 disr_expr: disr_expr,\n             };"}, {"sha": "678b8e0489741334861a3b3ed088891cd833a4f7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -1223,7 +1223,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemStruct(ref struct_def, ref generics) => {\n                 try!(self.head(&visibility_qualified(item.vis,\"struct\")));\n-                try!(self.print_struct(&**struct_def, generics, item.ident, item.span));\n+                try!(self.print_struct(&struct_def, generics, item.ident, item.span, true));\n             }\n \n             ast::ItemDefaultImpl(unsafety, ref trait_ref) => {\n@@ -1388,7 +1388,8 @@ impl<'a> State<'a> {\n                         struct_def: &ast::StructDef,\n                         generics: &ast::Generics,\n                         ident: ast::Ident,\n-                        span: codemap::Span) -> io::Result<()> {\n+                        span: codemap::Span,\n+                        print_finalizer: bool) -> io::Result<()> {\n         try!(self.print_ident(ident));\n         try!(self.print_generics(generics));\n         if ast_util::struct_def_is_tuple_like(struct_def) {\n@@ -1410,7 +1411,9 @@ impl<'a> State<'a> {\n                 try!(self.pclose());\n             }\n             try!(self.print_where_clause(&generics.where_clause));\n-            try!(word(&mut self.s, \";\"));\n+            if print_finalizer {\n+                try!(word(&mut self.s, \";\"));\n+            }\n             try!(self.end());\n             self.end() // close the outer-box\n         } else {\n@@ -1505,23 +1508,9 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_variant(&mut self, v: &ast::Variant) -> io::Result<()> {\n-        match v.node.kind {\n-            ast::TupleVariantKind(ref args) => {\n-                try!(self.print_ident(v.node.name));\n-                if !args.is_empty() {\n-                    try!(self.popen());\n-                    try!(self.commasep(Consistent,\n-                                       &args[..],\n-                                       |s, arg| s.print_type(&*arg.ty)));\n-                    try!(self.pclose());\n-                }\n-            }\n-            ast::StructVariantKind(ref struct_def) => {\n-                try!(self.head(\"\"));\n-                let generics = ast_util::empty_generics();\n-                try!(self.print_struct(&**struct_def, &generics, v.node.name, v.span));\n-            }\n-        }\n+        try!(self.head(\"\"));\n+        let generics = ast_util::empty_generics();\n+        try!(self.print_struct(&v.node.def, &generics, v.node.name, v.span, false));\n         match v.node.disr_expr {\n             Some(ref d) => {\n                 try!(space(&mut self.s));\n@@ -3103,6 +3092,7 @@ mod tests {\n     use ast_util;\n     use codemap;\n     use parse::token;\n+    use ptr::P;\n \n     #[test]\n     fn test_fun_to_string() {\n@@ -3129,7 +3119,7 @@ mod tests {\n             name: ident,\n             attrs: Vec::new(),\n             // making this up as I go.... ?\n-            kind: ast::TupleVariantKind(Vec::new()),\n+            def: P(ast::StructDef { fields: Vec::new(), ctor_id: Some(ast::DUMMY_NODE_ID) }),\n             id: 0,\n             disr_expr: None,\n         });"}, {"sha": "fe64f87e68174ff8296a0d7eeab0e9f810cc1ced", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -315,20 +315,7 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n                                         generics: &'v Generics) {\n     visitor.visit_ident(variant.span, variant.node.name);\n-\n-    match variant.node.kind {\n-        TupleVariantKind(ref variant_arguments) => {\n-            for variant_argument in variant_arguments {\n-                visitor.visit_ty(&variant_argument.ty)\n-            }\n-        }\n-        StructVariantKind(ref struct_definition) => {\n-            visitor.visit_struct_def(struct_definition,\n-                                     variant.node.name,\n-                                     generics,\n-                                     variant.node.id)\n-        }\n-    }\n+    visitor.visit_struct_def(&variant.node.def, variant.node.name, generics, variant.node.id);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }"}, {"sha": "e8e37d8804986b60894687371c1fa997363475de", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47c2b6b349d7f252a6a734ced8204e6ef70546/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=ea47c2b6b349d7f252a6a734ced8204e6ef70546", "patch": "@@ -23,12 +23,12 @@ struct B(isize);\n \n #[derive(FromPrimitive)]\n enum C { Foo(isize), Bar(usize) }\n-//~^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n-//~^^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n+//~^^ ERROR `FromPrimitive` cannot be derived for enums with non-unit variants\n+//~^^^ ERROR `FromPrimitive` cannot be derived for enums with non-unit variants\n \n #[derive(FromPrimitive)]\n enum D { Baz { x: isize } }\n-//~^^ ERROR `FromPrimitive` cannot be derived for enums with struct variants\n-//~^^^ ERROR `FromPrimitive` cannot be derived for enums with struct variants\n+//~^^ ERROR `FromPrimitive` cannot be derived for enums with non-unit variants\n+//~^^^ ERROR `FromPrimitive` cannot be derived for enums with non-unit variants\n \n pub fn main() {}"}, {"sha": "68cf661e218050ade1cb0fc17b9b229a45179f32", "filename": "src/test/parse-fail/struct-variant-no-fields.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec4362da562a4b591a7d120c6677e14ea713481a/src%2Ftest%2Fparse-fail%2Fstruct-variant-no-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4362da562a4b591a7d120c6677e14ea713481a/src%2Ftest%2Fparse-fail%2Fstruct-variant-no-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-variant-no-fields.rs?ref=ec4362da562a4b591a7d120c6677e14ea713481a", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-enum Foo {\n-    Bar {} //~ ERROR unit-like struct variant should be written without braces, as `Bar,`\n-}"}]}