{"sha": "4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNWFjYzRlZDcyZjJjZDZjZjRkMmM0Y2E2ODJkNTJhMTE3YTk4ZDA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-21T21:01:31Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-26T13:34:26Z"}, "message": "Return values up to 128 bits in registers", "tree": {"sha": "c2dad4e1252a49620c472d2746a1a5c3e23c9e30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2dad4e1252a49620c472d2746a1a5c3e23c9e30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0", "html_url": "https://github.com/rust-lang/rust/commit/4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "html_url": "https://github.com/rust-lang/rust/commit/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "ee669ed22896912291961ff067a98e14ee1c1da9", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0", "patch": "@@ -2735,6 +2735,7 @@ where\n             can_unwind: fn_can_unwind(cx.tcx().sess.panic_strategy(), codegen_fn_attr_flags, conv),\n         };\n         fn_abi.adjust_for_abi(cx, sig.abi);\n+        debug!(\"FnAbi::new_internal = {:?}\", fn_abi);\n         fn_abi\n     }\n \n@@ -2748,7 +2749,7 @@ where\n             || abi == SpecAbi::RustIntrinsic\n             || abi == SpecAbi::PlatformIntrinsic\n         {\n-            let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>| {\n+            let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>, is_ret: bool| {\n                 if arg.is_ignore() {\n                     return;\n                 }\n@@ -2786,8 +2787,11 @@ where\n                     _ => return,\n                 }\n \n+                let max_by_val_size =\n+                    if is_ret { call::max_ret_by_val(cx) } else { Pointer.size(cx) };\n                 let size = arg.layout.size;\n-                if arg.layout.is_unsized() || size > Pointer.size(cx) {\n+\n+                if arg.layout.is_unsized() || size > max_by_val_size {\n                     arg.make_indirect();\n                 } else {\n                     // We want to pass small aggregates as immediates, but using\n@@ -2796,9 +2800,9 @@ where\n                     arg.cast_to(Reg { kind: RegKind::Integer, size });\n                 }\n             };\n-            fixup(&mut self.ret);\n+            fixup(&mut self.ret, true);\n             for arg in &mut self.args {\n-                fixup(arg);\n+                fixup(arg, false);\n             }\n             if let PassMode::Indirect(ref mut attrs, _) = self.ret.mode {\n                 attrs.set(ArgAttribute::StructRet);"}, {"sha": "602c424a043f7a25f7668f5741bb5d2d35de4555", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=4c5acc4ed72f2cd6cf4d2c4ca682d52a117a98d0", "patch": "@@ -610,3 +610,15 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n         Ok(())\n     }\n }\n+\n+/// Returns the maximum size of return values to be passed by value in the Rust ABI.\n+///\n+/// Return values beyond this size will use an implicit out-pointer instead.\n+pub fn max_ret_by_val<C: HasTargetSpec + HasDataLayout>(spec: &C) -> Size {\n+    match spec.target_spec().arch.as_str() {\n+        // System-V will pass return values up to 128 bits in RAX/RDX.\n+        \"x86_64\" => Size::from_bits(128),\n+\n+        _ => spec.data_layout().pointer_size,\n+    }\n+}"}]}