{"sha": "1dbc78112f29d12175ff56c9271ac47c042a718a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYmM3ODExMmYyOWQxMjE3NWZmNTZjOTI3MWFjNDdjMDQyYTcxOGE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-14T15:40:04Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:10:01Z"}, "message": "Handle equivalence classes of length-1 ranges", "tree": {"sha": "01cb6c29bd431fc372a7becf0e1d4820ffd7b924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01cb6c29bd431fc372a7becf0e1d4820ffd7b924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbc78112f29d12175ff56c9271ac47c042a718a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc78112f29d12175ff56c9271ac47c042a718a", "html_url": "https://github.com/rust-lang/rust/commit/1dbc78112f29d12175ff56c9271ac47c042a718a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc78112f29d12175ff56c9271ac47c042a718a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c8361cc6433161e9578673ed266fdf5f676049", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c8361cc6433161e9578673ed266fdf5f676049", "html_url": "https://github.com/rust-lang/rust/commit/e9c8361cc6433161e9578673ed266fdf5f676049"}], "stats": {"total": 95, "additions": 64, "deletions": 31}, "files": [{"sha": "449e37489769f5cc4b644c76c972b59160a8d257", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc78112f29d12175ff56c9271ac47c042a718a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc78112f29d12175ff56c9271ac47c042a718a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=1dbc78112f29d12175ff56c9271ac47c042a718a", "patch": "@@ -166,7 +166,7 @@ use self::Constructor::*;\n use self::Usefulness::*;\n use self::WitnessPreference::*;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n use super::{FieldPattern, Pattern, PatternKind};\n@@ -321,7 +321,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n             tcx,\n             module,\n             pattern_arena: &pattern_arena,\n-            byte_array_map: FxHashMap(),\n+            byte_array_map: FxHashMap::default(),\n         })\n     }\n \n@@ -1422,50 +1422,77 @@ fn split_grouped_constructors<'p, 'a: 'p, 'tcx: 'a>(\n                 }\n                 // We're going to collect all the endpoints in the new pattern so we can create\n                 // subranges between them.\n-                let mut points = FxHashSet::default();\n+                // If there's a single point, we need to identify it as belonging\n+                // to a length-1 range, so it can be treated as an individual\n+                // constructor, rather than as an endpoint. To do this, we keep track of which\n+                // endpoint a point corresponds to. Whenever a point corresponds to both a start\n+                // and an end, then we create a unit range for it.\n+                #[derive(PartialEq, Clone, Copy, Debug)]\n+                enum Endpoint {\n+                    Start,\n+                    End,\n+                    Both,\n+                };\n+                let mut points = FxHashMap::default();\n+                let add_endpoint = |points: &mut FxHashMap<_, _>, x, endpoint| {\n+                    points.entry(x).and_modify(|ex_x| {\n+                        if *ex_x != endpoint {\n+                            *ex_x = Endpoint::Both\n+                        }\n+                    }).or_insert(endpoint);\n+                };\n+                let add_endpoints = |points: &mut FxHashMap<_, _>, lo, hi| {\n+                    // Insert the endpoints, taking care to keep track of to\n+                    // which endpoints a point corresponds.\n+                    add_endpoint(points, lo, Endpoint::Start);\n+                    add_endpoint(points, hi, Endpoint::End);\n+                };\n                 let (lo, hi) = (*ctor_range.range.start(), *ctor_range.range.end());\n-                points.insert(lo);\n-                points.insert(hi);\n+                add_endpoints(&mut points, lo, hi);\n                 // We're going to iterate through every row pattern, adding endpoints in.\n                 for row in m.iter() {\n                     if let Some(r) = IntRange::from_pat(tcx, row[0]) {\n                         // We're only interested in endpoints that lie (at least partially)\n                         // within the subrange domain.\n                         if let Some(r) = ctor_range.intersection(&r) {\n                             let (r_lo, r_hi) = r.range.into_inner();\n-                            // Insert the endpoints.\n-                            points.insert(r_lo);\n-                            points.insert(r_hi);\n-                            // There's a slight subtlety here, which involves the fact we're using\n-                            // inclusive ranges everywhere. When we subdivide the range into\n-                            // subranges, they can't overlap, or the subranges effectively\n-                            // coalesce. We need hard boundaries between subranges. The simplest\n-                            // way to do this is by adding extra \"boundary points\" to prevent this\n-                            // intersection. Technically this means we occasionally check a few more\n-                            // cases for usefulness than we need to (because they're part of another\n-                            // equivalence class), but it's still linear and very simple to verify,\n-                            // which is handy when it comes to matching, which can often be quite\n-                            // fiddly.\n-                            if r_lo > lo {\n-                                points.insert(r_lo - 1);\n-                            }\n-                            if r_hi < hi {\n-                                points.insert(r_hi + 1);\n-                            }\n+                            add_endpoints(&mut points, r_lo, r_hi);\n                         }\n                     }\n                 }\n \n                 // The patterns were iterated in an arbitrary order (i.e. in the order the user\n                 // wrote them), so we need to make sure our endpoints are sorted.\n-                let mut points: Vec<_> = points.into_iter().collect();\n-                points.sort();\n+                let mut points: Vec<(u128, Endpoint)> = points.into_iter().collect();\n+                points.sort_unstable_by_key(|(x, _)| *x);\n                 let mut points = points.into_iter();\n-                let mut start = points.next().unwrap();\n+                let mut a = points.next().unwrap();\n+\n                 // Iterate through pairs of points, adding the subranges to `split_ctors`.\n-                while let Some(end) = points.next() {\n-                    split_ctors.push(IntRange::range_to_ctor(tcx, ty, start..=end));\n-                    start = end;\n+                // We have to be careful about the orientation of the points as endpoints, to make\n+                // sure we're enumerating precisely the correct ranges. Too few and the matching is\n+                // actually incorrect. Too many and our diagnostics are poorer. This involves some\n+                // case analysis.\n+                while let Some(b) = points.next() {\n+                    // a < b (strictly)\n+                    if let Endpoint::Both = a.1 {\n+                        split_ctors.push(IntRange::range_to_ctor(tcx, ty, a.0..=a.0));\n+                    }\n+                    let c = match a.1 {\n+                        Endpoint::Start => a.0,\n+                        Endpoint::End | Endpoint::Both => a.0 + 1,\n+                    };\n+                    let d = match b.1 {\n+                        Endpoint::Start | Endpoint::Both => b.0 - 1,\n+                        Endpoint::End => b.0,\n+                    };\n+                    // In some cases, we won't need an intermediate range between two ranges\n+                    // lie immediately adjacent to one another.\n+                    if c <= d {\n+                        split_ctors.push(IntRange::range_to_ctor(tcx, ty, c..=d));\n+                    }\n+\n+                    a = b;\n                 }\n             }\n             // Any other constructor can be used unchanged."}, {"sha": "6e2bebc86ad033e8f8f940c43d17cb44d2665792", "filename": "src/test/ui/exhaustive_integer_patterns.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc78112f29d12175ff56c9271ac47c042a718a/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc78112f29d12175ff56c9271ac47c042a718a/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs?ref=1dbc78112f29d12175ff56c9271ac47c042a718a", "patch": "@@ -145,10 +145,16 @@ fn main() {\n         (0..=255, true) => {}\n     }\n \n-    match (0u8, true) {\n+    match (0u8, true) { // ok\n         (0..=125, false) => {}\n         (128..=255, false) => {}\n         (0..=255, true) => {}\n         (125..128, false) => {}\n     }\n+\n+    match 0u8 { // ok\n+        0..2 => {}\n+        1..=2 => {}\n+        _ => {}\n+    }\n }"}]}