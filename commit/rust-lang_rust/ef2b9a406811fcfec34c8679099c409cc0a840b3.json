{"sha": "ef2b9a406811fcfec34c8679099c409cc0a840b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMmI5YTQwNjgxMWZjZmVjMzRjODY3OTA5OWM0MDljYzBhODQwYjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-08-23T22:21:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-08-23T22:21:21Z"}, "message": "x.py fmt", "tree": {"sha": "be0ec2508867bed64ea0c2e849de6a15cef83d11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be0ec2508867bed64ea0c2e849de6a15cef83d11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef2b9a406811fcfec34c8679099c409cc0a840b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2b9a406811fcfec34c8679099c409cc0a840b3", "html_url": "https://github.com/rust-lang/rust/commit/ef2b9a406811fcfec34c8679099c409cc0a840b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef2b9a406811fcfec34c8679099c409cc0a840b3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49323b07dd0a53318e2336f579fe9dd45c0741f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e49323b07dd0a53318e2336f579fe9dd45c0741f", "html_url": "https://github.com/rust-lang/rust/commit/e49323b07dd0a53318e2336f579fe9dd45c0741f"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "01227cad334fc783e12d0f79ef97b63a5150ae32", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b9a406811fcfec34c8679099c409cc0a840b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b9a406811fcfec34c8679099c409cc0a840b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=ef2b9a406811fcfec34c8679099c409cc0a840b3", "patch": "@@ -14,7 +14,7 @@ use rustc_trait_selection::traits::{\n };\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    #[instrument(skip(self), level=\"debug\")]\n+    #[instrument(skip(self), level = \"debug\")]\n     pub fn check_match(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,"}, {"sha": "17a81486048ed1788cab6a1149234e5b898fead1", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b9a406811fcfec34c8679099c409cc0a840b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b9a406811fcfec34c8679099c409cc0a840b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=ef2b9a406811fcfec34c8679099c409cc0a840b3", "patch": "@@ -1328,7 +1328,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     /// The inner coercion \"engine\". If `expression` is `None`, this\n     /// is a forced-unit case, and hence `expression_ty` must be\n     /// `Nil`.\n-    #[instrument(skip(self,fcx,augment_error,label_expression_as_expected), level=\"debug\")]\n+    #[instrument(skip(self, fcx, augment_error, label_expression_as_expected), level = \"debug\")]\n     crate fn coerce_inner<'a>(\n         &mut self,\n         fcx: &FnCtxt<'a, 'tcx>,"}, {"sha": "eaf24552355d453d0ef42a97b1fd8875fe6c9561", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b9a406811fcfec34c8679099c409cc0a840b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b9a406811fcfec34c8679099c409cc0a840b3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=ef2b9a406811fcfec34c8679099c409cc0a840b3", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Note that inspecting a type's structure *directly* may expose the fact\n     /// that there are actually multiple representations for `Error`, so avoid\n     /// that when err needs to be handled differently.\n-    #[instrument(skip(self), level=\"debug\")]\n+    #[instrument(skip(self), level = \"debug\")]\n     pub(super) fn check_expr_with_expectation(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n@@ -176,7 +176,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            }\n+        }\n \n         // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block\n         // without the final expr (e.g. `try { return; }`). We don't want to generate an\n@@ -1066,9 +1066,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Ok(cast_check) => {\n                     debug!(\n                         \"check_expr_cast: deferring cast from {:?} to {:?}: {:?}\",\n-                        t_cast,\n-                        t_expr,\n-                        cast_check,\n+                        t_cast, t_expr, cast_check,\n                     );\n                     deferred_cast_checks.push(cast_check);\n                     t_cast"}]}