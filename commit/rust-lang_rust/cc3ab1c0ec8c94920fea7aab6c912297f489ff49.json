{"sha": "cc3ab1c0ec8c94920fea7aab6c912297f489ff49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjM2FiMWMwZWM4Yzk0OTIwZmVhN2FhYjZjOTEyMjk3ZjQ4OWZmNDk=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-12T05:28:17Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-08T15:50:22Z"}, "message": "Move linked_list to its own module", "tree": {"sha": "e8fc18dfa644da7cea47687492a11f9344621bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fc18dfa644da7cea47687492a11f9344621bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc3ab1c0ec8c94920fea7aab6c912297f489ff49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc3ab1c0ec8c94920fea7aab6c912297f489ff49", "html_url": "https://github.com/rust-lang/rust/commit/cc3ab1c0ec8c94920fea7aab6c912297f489ff49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc3ab1c0ec8c94920fea7aab6c912297f489ff49/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59c879fc9e508b4e9a08babf2e4004f396833bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59c879fc9e508b4e9a08babf2e4004f396833bb", "html_url": "https://github.com/rust-lang/rust/commit/b59c879fc9e508b4e9a08babf2e4004f396833bb"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "74be8959fa498f93843e11d1aea43b3129b7de9c", "filename": "clippy_lints/src/types/linked_list.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc3ab1c0ec8c94920fea7aab6c912297f489ff49/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc3ab1c0ec8c94920fea7aab6c912297f489ff49/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs?ref=cc3ab1c0ec8c94920fea7aab6c912297f489ff49", "patch": "@@ -0,0 +1,20 @@\n+use rustc_hir::{self as hir, def_id::DefId};\n+use rustc_lint::LateContext;\n+\n+use crate::utils::{match_def_path, paths, span_lint_and_help};\n+\n+pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, def_id: DefId) -> bool {\n+    if match_def_path(cx, def_id, &paths::LINKED_LIST) {\n+        span_lint_and_help(\n+            cx,\n+            super::LINKEDLIST,\n+            hir_ty.span,\n+            \"you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\",\n+            None,\n+            \"a `VecDeque` might work\",\n+        );\n+        true\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "86a12b8ffa984e2a65f08578ce36430e475b790b", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cc3ab1c0ec8c94920fea7aab6c912297f489ff49/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc3ab1c0ec8c94920fea7aab6c912297f489ff49/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=cc3ab1c0ec8c94920fea7aab6c912297f489ff49", "patch": "@@ -1,6 +1,7 @@\n #![allow(rustc::default_hash_types)]\n \n mod box_vec;\n+mod linked_list;\n mod option_option;\n mod rc_buffer;\n mod redundant_allocation;\n@@ -39,10 +40,9 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_hir_ty_cfg_dependant,\n-    is_ty_param_diagnostic_item, is_type_diagnostic_item, match_def_path, match_path, meets_msrv, method_chain_args,\n-    multispan_sugg, numeric_literal::NumericLiteral, reindent_multiline, sext, snippet, snippet_opt,\n-    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    span_lint_and_then, unsext,\n+    is_type_diagnostic_item, match_path, meets_msrv, method_chain_args, multispan_sugg,\n+    numeric_literal::NumericLiteral, reindent_multiline, sext, snippet, snippet_opt, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -313,7 +313,6 @@ impl Types {\n     ///\n     /// The parameter `is_local` distinguishes the context of the type; types from\n     /// local bindings should only be checked for the `BORROWED_BOX` lint.\n-    #[allow(clippy::too_many_lines)]\n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, is_local: bool) {\n         if hir_ty.span.from_expansion() {\n             return;\n@@ -329,18 +328,7 @@ impl Types {\n                     triggered |= rc_buffer::check(cx, hir_ty, qpath, def_id);\n                     triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n                     triggered |= option_option::check(cx, hir_ty, qpath, def_id);\n-\n-                    if match_def_path(cx, def_id, &paths::LINKED_LIST) {\n-                        span_lint_and_help(\n-                            cx,\n-                            LINKEDLIST,\n-                            hir_ty.span,\n-                            \"you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\",\n-                            None,\n-                            \"a `VecDeque` might work\",\n-                        );\n-                        return; // don't recurse into the type\n-                    }\n+                    triggered |= linked_list::check(cx, hir_ty, def_id);\n \n                     if triggered {\n                         return;\n@@ -389,7 +377,6 @@ impl Types {\n                 }\n             },\n             TyKind::Rptr(ref lt, ref mut_ty) => self.check_ty_rptr(cx, hir_ty, is_local, lt, mut_ty),\n-            // recurse\n             TyKind::Slice(ref ty) | TyKind::Array(ref ty, _) | TyKind::Ptr(MutTy { ref ty, .. }) => {\n                 self.check_ty(cx, ty, is_local)\n             },"}, {"sha": "d91132aaeb2bd99007441f608a8b4a15ff69ebd0", "filename": "clippy_lints/src/types/option_option.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc3ab1c0ec8c94920fea7aab6c912297f489ff49/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc3ab1c0ec8c94920fea7aab6c912297f489ff49/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs?ref=cc3ab1c0ec8c94920fea7aab6c912297f489ff49", "patch": "@@ -2,13 +2,11 @@ use rustc_hir::{self as hir, def_id::DefId, QPath};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n-use crate::utils::span_lint;\n-\n-use super::utils;\n+use crate::utils::{is_ty_param_diagnostic_item, span_lint};\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n     if cx.tcx.is_diagnostic_item(sym::option_type, def_id) {\n-        if utils::is_ty_param_diagnostic_item(cx, qpath, sym::option_type).is_some() {\n+        if is_ty_param_diagnostic_item(cx, qpath, sym::option_type).is_some() {\n             span_lint(\n                 cx,\n                 super::OPTION_OPTION,"}]}