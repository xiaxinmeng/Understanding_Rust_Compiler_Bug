{"sha": "c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5", "node_id": "C_kwDOAAsO6NoAKGMxZWRkYmM3ZmVmZTM0YmIwMjEzMjYxY2I0YWExOGY0YmMxMWIxYzU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-28T00:22:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-28T00:50:45Z"}, "message": "show int2ptr warning once for each span (but don't duplicate the long help)", "tree": {"sha": "2689e0cef3144b7451cb7735c3dcf9549bd87671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2689e0cef3144b7451cb7735c3dcf9549bd87671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5", "html_url": "https://github.com/rust-lang/rust/commit/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e89b53e24d6bdf56d5c063f2c8997ab7d2381f", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e89b53e24d6bdf56d5c063f2c8997ab7d2381f", "html_url": "https://github.com/rust-lang/rust/commit/67e89b53e24d6bdf56d5c063f2c8997ab7d2381f"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "83949a75dee05fdd87298c9e7bc0f5f227dbb713", "filename": "src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5", "patch": "@@ -69,7 +69,9 @@ pub enum NonHaltingDiagnostic {\n     FreedAlloc(AllocId),\n     RejectedIsolatedOp(String),\n     ProgressReport,\n-    Int2Ptr,\n+    Int2Ptr {\n+        details: bool,\n+    },\n }\n \n /// Level of Miri specific diagnostics\n@@ -451,13 +453,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         format!(\"{op} was made to return an error due to isolation\"),\n                     ProgressReport =>\n                         format!(\"progress report: current operation being executed is here\"),\n-                    Int2Ptr => format!(\"integer-to-pointer cast\"),\n+                    Int2Ptr { .. } => format!(\"integer-to-pointer cast\"),\n                 };\n \n                 let (title, diag_level) = match e {\n                     RejectedIsolatedOp(_) =>\n                         (\"operation rejected by isolation\", DiagLevel::Warning),\n-                    Int2Ptr => (\"integer-to-pointer cast\", DiagLevel::Warning),\n+                    Int2Ptr { .. } => (\"integer-to-pointer cast\", DiagLevel::Warning),\n                     CreatedPointerTag(..)\n                     | PoppedPointerTag(..)\n                     | CreatedCallId(..)\n@@ -467,7 +469,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n \n                 let helps = match e {\n-                    Int2Ptr =>\n+                    Int2Ptr { details: true } =>\n                         vec![\n                             (None, format!(\"this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\")),\n                             (None, format!(\"which means that Miri might miss pointer bugs in this program\")),"}, {"sha": "a95b20868d2127b03f682e84d44abaff16ff1108", "filename": "src/intptrcast.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5", "patch": "@@ -5,6 +5,7 @@ use log::trace;\n use rand::Rng;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_span::Span;\n use rustc_target::abi::{HasDataLayout, Size};\n \n use crate::*;\n@@ -140,12 +141,18 @@ impl<'mir, 'tcx> GlobalStateInner {\n \n         match global_state.provenance_mode {\n             ProvenanceMode::Default => {\n-                // The first time this happens, print a warning.\n-                use std::sync::atomic::{AtomicBool, Ordering};\n-                static FIRST_WARNING: AtomicBool = AtomicBool::new(true);\n-                if FIRST_WARNING.swap(false, Ordering::Relaxed) {\n-                    register_diagnostic(NonHaltingDiagnostic::Int2Ptr);\n+                // The first time this happens at a particular location, print a warning.\n+                thread_local! {\n+                    // `Span` is non-`Send`, so we use a thread-local instead.\n+                    static PAST_WARNINGS: RefCell<FxHashSet<Span>> = RefCell::default();\n                 }\n+                PAST_WARNINGS.with_borrow_mut(|past_warnings| {\n+                    let first = past_warnings.is_empty();\n+                    if past_warnings.insert(ecx.cur_span()) {\n+                        // Newly inserted, so first time we see this span.\n+                        register_diagnostic(NonHaltingDiagnostic::Int2Ptr { details: first });\n+                    }\n+                });\n             }\n             ProvenanceMode::Strict => {\n                 throw_unsup_format!("}, {"sha": "e199fae31ee82dce8f3d0208b086f11d68f69606", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5", "patch": "@@ -8,6 +8,7 @@\n #![feature(yeet_expr)]\n #![feature(is_some_with)]\n #![feature(nonzero_ops)]\n+#![feature(local_key_cell_methods)]\n #![warn(rust_2018_idioms)]\n #![allow(\n     clippy::collapsible_else_if,"}, {"sha": "d821fcd9d15134a805038194ea8bc908240cb63d", "filename": "tests/pass/box.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/tests%2Fpass%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5/tests%2Fpass%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fbox.stderr?ref=c1eddbc7fefe34bb0213261cb4aa18f4bc11b1c5", "patch": "@@ -18,3 +18,16 @@ note: inside `main` at $DIR/box.rs:LL:CC\n LL |     into_raw();\n    |     ^^^^^^^^^^\n \n+warning: integer-to-pointer cast\n+  --> $DIR/box.rs:LL:CC\n+   |\n+LL |         let r = ((u.as_ptr() as usize) + 0) as *mut i32;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n+   |\n+   = note: inside `into_unique` at $DIR/box.rs:LL:CC\n+note: inside `main` at $DIR/box.rs:LL:CC\n+  --> $DIR/box.rs:LL:CC\n+   |\n+LL |     into_unique();\n+   |     ^^^^^^^^^^^^^\n+"}]}