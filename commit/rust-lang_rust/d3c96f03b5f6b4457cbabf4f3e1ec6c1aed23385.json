{"sha": "d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzk2ZjAzYjVmNmI0NDU3Y2JhYmY0ZjNlMWVjNmMxYWVkMjMzODU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-10T17:19:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-20T16:24:41Z"}, "message": "Suggest `-> impl Trait` and `-> Box<dyn Trait>` on fn that doesn't return\n\nDuring development, a function could have a return type set that is a\nbare trait object by accident. We already suggest using either a boxed\ntrait object or `impl Trait` if the return paths will allow it. We now\ndo so too when there are *no* return paths or they all resolve to `!`.\nWe still don't handle cases where the trait object is *not* the entirety\nof the return type gracefully.", "tree": {"sha": "3cb4cc1be1ab808110ed3b17374b2a73a5824cc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb4cc1be1ab808110ed3b17374b2a73a5824cc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "html_url": "https://github.com/rust-lang/rust/commit/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce3f840ae9b735a66531996c32330f24b877cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce3f840ae9b735a66531996c32330f24b877cb0", "html_url": "https://github.com/rust-lang/rust/commit/8ce3f840ae9b735a66531996c32330f24b877cb0"}], "stats": {"total": 143, "additions": 101, "deletions": 42}, "files": [{"sha": "abebbe9e903dcc883eaa2389621a2968238e032e", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 60, "deletions": 25, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "patch": "@@ -826,12 +826,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             .iter()\n             .filter_map(|expr| tables.node_type_opt(expr.hir_id))\n             .map(|ty| self.resolve_vars_if_possible(&ty));\n-        let (last_ty, all_returns_have_same_type) = ret_types.clone().fold(\n-            (None, true),\n-            |(last_ty, mut same): (std::option::Option<Ty<'_>>, bool), ty| {\n+        let (last_ty, all_returns_have_same_type, count) = ret_types.clone().fold(\n+            (None, true, 0),\n+            |(last_ty, mut same, count): (std::option::Option<Ty<'_>>, bool, usize), ty| {\n                 let ty = self.resolve_vars_if_possible(&ty);\n                 same &= last_ty.map_or(true, |last_ty| last_ty == ty) && ty.kind != ty::Error;\n-                (Some(ty), same)\n+                (Some(ty), same, count + 1)\n             },\n         );\n         let all_returns_conform_to_trait =\n@@ -846,7 +846,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 let obl = Obligation::new(cause.clone(), param_env, pred);\n                                 self.predicate_may_hold(&obl)\n                             })\n-                        })\n+                        }) || count == 0\n                     }\n                     _ => false,\n                 }\n@@ -855,21 +855,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             };\n \n         let sm = self.tcx.sess.source_map();\n-        let (snippet, last_ty) =\n-            if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true, Some(last_ty)) = (\n-                // Verify that we're dealing with a return `dyn Trait`\n-                ret_ty.span.overlaps(span),\n-                &ret_ty.kind,\n-                sm.span_to_snippet(ret_ty.span),\n-                // If any of the return types does not conform to the trait, then we can't\n-                // suggest `impl Trait` nor trait objects, it is a type mismatch error.\n-                all_returns_conform_to_trait,\n-                last_ty,\n-            ) {\n-                (snippet, last_ty)\n-            } else {\n-                return false;\n-            };\n+        let snippet = if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true) = (\n+            // Verify that we're dealing with a return `dyn Trait`\n+            ret_ty.span.overlaps(span),\n+            &ret_ty.kind,\n+            sm.span_to_snippet(ret_ty.span),\n+            // If any of the return types does not conform to the trait, then we can't\n+            // suggest `impl Trait` nor trait objects, it is a type mismatch error.\n+            all_returns_conform_to_trait,\n+        ) {\n+            snippet\n+        } else {\n+            return false;\n+        };\n         err.code(error_code!(E0746));\n         err.set_primary_message(\"return type cannot have an unboxed trait object\");\n         err.children.clear();\n@@ -881,13 +879,50 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             #using-trait-objects-that-allow-for-values-of-different-types>\";\n         let has_dyn = snippet.split_whitespace().next().map_or(false, |s| s == \"dyn\");\n         let trait_obj = if has_dyn { &snippet[4..] } else { &snippet[..] };\n-        if all_returns_have_same_type {\n+        if count == 0 {\n+            // No return paths. Suggest `-> T`, `-> impl Trait`, and if `Trait` is object safe,\n+            // `-> Box<dyn Trait>`.\n+            err.note(\n+                \"currently nothing is being returned, depending on the final implementation \\\n+                 you could change the return type in different ways\",\n+            );\n+            err.span_suggestion(\n+                ret_ty.span,\n+                \"you could use some type `T` that is `T: Sized` as the return type if all return \\\n+                 paths will have the same type\",\n+                \"T\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+            err.span_suggestion(\n+                ret_ty.span,\n+                &format!(\n+                    \"you could use `impl {}` as the return type if all return paths will have the \\\n+                     same type but you want to expose only the trait in the signature\",\n+                    trait_obj,\n+                ),\n+                format!(\"impl {}\", trait_obj),\n+                Applicability::MaybeIncorrect,\n+            );\n+            err.note(impl_trait_msg);\n+            if is_object_safe {\n+                err.span_suggestion(\n+                    ret_ty.span,\n+                    &format!(\n+                        \"you could use a boxed trait object if all return paths `impl` trait `{}`\",\n+                        trait_obj,\n+                    ),\n+                    format!(\"Box<dyn {}>\", trait_obj),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                err.note(trait_obj_msg);\n+            }\n+        } else if let (Some(last_ty), true) = (last_ty, all_returns_have_same_type) {\n             // Suggest `-> impl Trait`.\n             err.span_suggestion(\n                 ret_ty.span,\n                 &format!(\n-                    \"return `impl {1}` instead, as all return paths are of type `{}`, \\\n-                        which implements `{1}`\",\n+                    \"use `impl {1}` as the return type, as all return paths are of type `{}`, \\\n+                     which implements `{1}`\",\n                     last_ty, trait_obj,\n                 ),\n                 format!(\"impl {}\", trait_obj),\n@@ -925,8 +960,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             err.note(trait_obj_msg);\n             err.note(&format!(\n-                \"if all the returned values were of the same type you could use \\\n-                    `impl {}` as the return type\",\n+                \"if all the returned values were of the same type you could use `impl {}` as the \\\n+                 return type\",\n                 trait_obj,\n             ));\n             err.note(impl_trait_msg);"}, {"sha": "3757ed6d0926eb1b45e5686ab500e1620a28186a", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> dyn Trait { Struct }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn foo() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL | fn bar() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bar() -> impl Trait {\n    |             ^^^^^^^^^^"}, {"sha": "af368203de021bc075245e2f4bfa253f68dfb666", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs?ref=d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "patch": "@@ -14,7 +14,7 @@ fn bap() -> Trait { Struct }\n //~^ ERROR E0746\n fn ban() -> dyn Trait { Struct }\n //~^ ERROR E0746\n-fn bak() -> dyn Trait { unimplemented!() } //~ ERROR E0277\n+fn bak() -> dyn Trait { unimplemented!() } //~ ERROR E0746\n // Suggest using `Box<dyn Trait>`\n fn bal() -> dyn Trait { //~ ERROR E0746\n     if true {"}, {"sha": "a01bfc4a81f478330887d0a7a27b1fb0ddf29059", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "patch": "@@ -49,7 +49,7 @@ LL | fn bap() -> Trait { Struct }\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn bap() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n@@ -61,20 +61,32 @@ LL | fn ban() -> dyn Trait { Struct }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn ban() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n \n-error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:17:13\n    |\n LL | fn bak() -> dyn Trait { unimplemented!() }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: the return type of a function must have a statically known size\n+   = note: currently nothing is being returned, depending on the final implementation you could change the return type in different ways\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n+help: you could use some type `T` that is `T: Sized` as the return type if all return paths will have the same type\n+   |\n+LL | fn bak() -> T { unimplemented!() }\n+   |             ^\n+help: you could use `impl Trait` as the return type if all return paths will have the same type but you want to expose only the trait in the signature\n+   |\n+LL | fn bak() -> impl Trait { unimplemented!() }\n+   |             ^^^^^^^^^^\n+help: you could use a boxed trait object if all return paths `impl` trait `Trait`\n+   |\n+LL | fn bak() -> Box<dyn Trait> { unimplemented!() }\n+   |             ^^^^^^^^^^^^^^\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:19:13\n@@ -249,7 +261,7 @@ LL | fn bat() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bat() -> impl Trait {\n    |             ^^^^^^^^^^\n@@ -261,7 +273,7 @@ LL | fn bay() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bay() -> impl Trait {\n    |             ^^^^^^^^^^"}, {"sha": "4bf5b6c0f30322fa7562a4dfbcb11617cdc8cd25", "filename": "src/test/ui/issues/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs?ref=d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "patch": "@@ -2,7 +2,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     dyn AbstractRenderer\n-//~^ ERROR the size for values of type\n+//~^ ERROR return type cannot have an unboxed trait object\n {\n     match 0 {\n         _ => unimplemented!()"}, {"sha": "08785ffa73a9fb339153e44d0cf80489103c5630", "filename": "src/test/ui/issues/issue-18107.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr?ref=d3c96f03b5f6b4457cbabf4f3e1ec6c1aed23385", "patch": "@@ -1,13 +1,25 @@\n-error[E0277]: the size for values of type `(dyn AbstractRenderer + 'static)` cannot be known at compilation time\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/issue-18107.rs:4:5\n    |\n LL |     dyn AbstractRenderer\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `(dyn AbstractRenderer + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: the return type of a function must have a statically known size\n+   = note: currently nothing is being returned, depending on the final implementation you could change the return type in different ways\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n+help: you could use some type `T` that is `T: Sized` as the return type if all return paths will have the same type\n+   |\n+LL |     T\n+   |\n+help: you could use `impl AbstractRenderer` as the return type if all return paths will have the same type but you want to expose only the trait in the signature\n+   |\n+LL |     impl AbstractRenderer\n+   |\n+help: you could use a boxed trait object if all return paths `impl` trait `AbstractRenderer`\n+   |\n+LL |     Box<dyn AbstractRenderer>\n+   |\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0746`."}]}