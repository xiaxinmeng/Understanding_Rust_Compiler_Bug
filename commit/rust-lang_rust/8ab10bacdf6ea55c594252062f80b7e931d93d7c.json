{"sha": "8ab10bacdf6ea55c594252062f80b7e931d93d7c", "node_id": "C_kwDOAAsO6NoAKDhhYjEwYmFjZGY2ZWE1NWM1OTQyNTIwNjJmODBiN2U5MzFkOTNkN2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-17T18:51:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-01T18:03:59Z"}, "message": "remove search_for_adt_const_param_violation", "tree": {"sha": "91004379eb5bf483485bdbebc620df496903b23d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91004379eb5bf483485bdbebc620df496903b23d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab10bacdf6ea55c594252062f80b7e931d93d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab10bacdf6ea55c594252062f80b7e931d93d7c", "html_url": "https://github.com/rust-lang/rust/commit/8ab10bacdf6ea55c594252062f80b7e931d93d7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab10bacdf6ea55c594252062f80b7e931d93d7c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbf41279fad5bf1604b9cf3f9575c76a00254114", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf41279fad5bf1604b9cf3f9575c76a00254114", "html_url": "https://github.com/rust-lang/rust/commit/bbf41279fad5bf1604b9cf3f9575c76a00254114"}], "stats": {"total": 74, "additions": 19, "deletions": 55}, "files": [{"sha": "c2f94cb6385662468db95eef64aa92eeebeba0b4", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ab10bacdf6ea55c594252062f80b7e931d93d7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab10bacdf6ea55c594252062f80b7e931d93d7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=8ab10bacdf6ea55c594252062f80b7e931d93d7c", "patch": "@@ -62,9 +62,7 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{\n     specialization_graph, translate_substs, translate_substs_with_cause, OverlapError,\n };\n-pub use self::structural_match::{\n-    search_for_adt_const_param_violation, search_for_structural_match_violation,\n-};\n+pub use self::structural_match::search_for_structural_match_violation;\n pub use self::structural_normalize::StructurallyNormalizeExt;\n pub use self::util::elaborate;\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};"}, {"sha": "420f8c5dceb50a06842996458f06229879d127f4", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 18, "deletions": 52, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8ab10bacdf6ea55c594252062f80b7e931d93d7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab10bacdf6ea55c594252062f80b7e931d93d7c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=8ab10bacdf6ea55c594252062f80b7e931d93d7c", "patch": "@@ -34,24 +34,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<Ty<'tcx>> {\n-    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), adt_const_param: false })\n-        .break_value()\n-}\n-\n-/// This method traverses the structure of `ty`, trying to find any\n-/// types that are not allowed to be used in a const generic.\n-///\n-/// This is either because the type does not implement `StructuralEq`\n-/// and `StructuralPartialEq`, or because the type is intentionally\n-/// not supported in const generics (such as floats and raw pointers,\n-/// which are allowed in match blocks).\n-pub fn search_for_adt_const_param_violation<'tcx>(\n-    span: Span,\n-    tcx: TyCtxt<'tcx>,\n-    ty: Ty<'tcx>,\n-) -> Option<Ty<'tcx>> {\n-    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), adt_const_param: true })\n-        .break_value()\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default() }).break_value()\n }\n \n /// This implements the traversal over the structure of a given type to try to\n@@ -65,11 +48,6 @@ struct Search<'tcx> {\n     /// Tracks ADTs previously encountered during search, so that\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n-\n-    // Additionally deny things that have been allowed in patterns,\n-    // but are not allowed in adt const params, such as floats and\n-    // fn ptrs.\n-    adt_const_param: bool,\n }\n \n impl<'tcx> Search<'tcx> {\n@@ -124,41 +102,29 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for Search<'tcx> {\n             }\n \n             ty::FnPtr(..) => {\n-                if !self.adt_const_param {\n-                    return ControlFlow::Continue(());\n-                } else {\n-                    return ControlFlow::Break(ty);\n-                }\n+                return ControlFlow::Continue(());\n             }\n \n             ty::RawPtr(..) => {\n-                if !self.adt_const_param {\n-                    // structural-match ignores substructure of\n-                    // `*const _`/`*mut _`, so skip `super_visit_with`.\n-                    //\n-                    // For example, if you have:\n-                    // ```\n-                    // struct NonStructural;\n-                    // #[derive(PartialEq, Eq)]\n-                    // struct T(*const NonStructural);\n-                    // const C: T = T(std::ptr::null());\n-                    // ```\n-                    //\n-                    // Even though `NonStructural` does not implement `PartialEq`,\n-                    // structural equality on `T` does not recur into the raw\n-                    // pointer. Therefore, one can still use `C` in a pattern.\n-                    return ControlFlow::Continue(());\n-                } else {\n-                    return ControlFlow::Break(ty);\n-                }\n+                // structural-match ignores substructure of\n+                // `*const _`/`*mut _`, so skip `super_visit_with`.\n+                //\n+                // For example, if you have:\n+                // ```\n+                // struct NonStructural;\n+                // #[derive(PartialEq, Eq)]\n+                // struct T(*const NonStructural);\n+                // const C: T = T(std::ptr::null());\n+                // ```\n+                //\n+                // Even though `NonStructural` does not implement `PartialEq`,\n+                // structural equality on `T` does not recur into the raw\n+                // pointer. Therefore, one can still use `C` in a pattern.\n+                return ControlFlow::Continue(());\n             }\n \n             ty::Float(_) => {\n-                if !self.adt_const_param {\n-                    return ControlFlow::Continue(());\n-                } else {\n-                    return ControlFlow::Break(ty);\n-                }\n+                return ControlFlow::Continue(());\n             }\n \n             ty::Array(..) | ty::Slice(_) | ty::Ref(..) | ty::Tuple(..) => {"}]}