{"sha": "c14daba3b2f3218438a6928ed0676986c6339d48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNGRhYmEzYjJmMzIxODQzOGE2OTI4ZWQwNjc2OTg2YzYzMzlkNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-03T15:06:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-03T15:06:04Z"}, "message": "auto merge of #8947 : thestinger/rust/name, r=huonw\n\nStoring the type name in the `tydesc` aims to avoid the need to pass a type name in almost every single visitor method.\r\n\r\nIt would likely be much saner for `repr` to simply be passed the `TyDesc` corresponding to the function or just the type name, but this is good enough for now.", "tree": {"sha": "62c821dd7caa500db2da6dea3ab3190d218a3953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c821dd7caa500db2da6dea3ab3190d218a3953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c14daba3b2f3218438a6928ed0676986c6339d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c14daba3b2f3218438a6928ed0676986c6339d48", "html_url": "https://github.com/rust-lang/rust/commit/c14daba3b2f3218438a6928ed0676986c6339d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c14daba3b2f3218438a6928ed0676986c6339d48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac8e8885bb1917f71ce432dcf181253b47f0bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac8e8885bb1917f71ce432dcf181253b47f0bca", "html_url": "https://github.com/rust-lang/rust/commit/1ac8e8885bb1917f71ce432dcf181253b47f0bca"}, {"sha": "a6a993ee7137cf1640a7b16ddcd516a6d78f91be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6a993ee7137cf1640a7b16ddcd516a6d78f91be", "html_url": "https://github.com/rust-lang/rust/commit/a6a993ee7137cf1640a7b16ddcd516a6d78f91be"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "2d5a4b4edb78c44f107bdc11b49c0d8ecc1964cb", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=c14daba3b2f3218438a6928ed0676986c6339d48", "patch": "@@ -47,7 +47,8 @@ pub static tydesc_field_drop_glue: uint = 3u;\n pub static tydesc_field_free_glue: uint = 4u;\n pub static tydesc_field_visit_glue: uint = 5u;\n pub static tydesc_field_borrow_offset: uint = 6u;\n-pub static n_tydesc_fields: uint = 7u;\n+pub static tydesc_field_name_offset: uint = 7u;\n+pub static n_tydesc_fields: uint = 8u;\n \n // The two halves of a closure: code and environment.\n pub static fn_field_code: uint = 0u;"}, {"sha": "fb80cfe3485ebeae066376e178ee4acd05717021", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c14daba3b2f3218438a6928ed0676986c6339d48", "patch": "@@ -56,6 +56,7 @@ pub struct tydesc_info {\n     size: ValueRef,\n     align: ValueRef,\n     borrow_offset: ValueRef,\n+    name: ValueRef,\n     take_glue: Option<ValueRef>,\n     drop_glue: Option<ValueRef>,\n     free_glue: Option<ValueRef>,"}, {"sha": "910d743d182193e013ce5560ffa1a4fe696a0fb2", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=c14daba3b2f3218438a6928ed0676986c6339d48", "patch": "@@ -678,12 +678,16 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n             llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type.to_ref(), buf)\n         }\n     };\n+\n+    let ty_name = C_estr_slice(ccx, ppaux::ty_to_str(ccx.tcx, t).to_managed());\n+\n     let inf = @mut tydesc_info {\n         ty: t,\n         tydesc: gvar,\n         size: llsize,\n         align: llalign,\n         borrow_offset: borrow_offset,\n+        name: ty_name,\n         take_glue: None,\n         drop_glue: None,\n         free_glue: None,\n@@ -809,14 +813,14 @@ pub fn emit_tydescs(ccx: &mut CrateContext) {\n                                      drop_glue, // drop_glue\n                                      free_glue, // free_glue\n                                      visit_glue, // visit_glue\n-                                     ti.borrow_offset]); // borrow_offset\n+                                     ti.borrow_offset, // borrow_offset\n+                                     ti.name]); // name\n \n         unsafe {\n             let gvar = ti.tydesc;\n             llvm::LLVMSetInitializer(gvar, tydesc);\n             llvm::LLVMSetGlobalConstant(gvar, True);\n             lib::llvm::SetLinkage(gvar, lib::llvm::InternalLinkage);\n-\n         }\n     };\n }"}, {"sha": "281c047641c6bd8a0f4f24381cc2c6c6d19b5d67", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=c14daba3b2f3218438a6928ed0676986c6339d48", "patch": "@@ -216,8 +216,8 @@ impl Type {\n                      glue_fn_ty, // drop\n                      glue_fn_ty, // free\n                      glue_fn_ty, // visit\n-                     int_ty];    // borrow_offset\n-\n+                     int_ty, // borrow_offset\n+                     Type::struct_([Type::i8p(), Type::int(arch)], false)]; // name\n         tydesc.set_struct_body(elems, false);\n \n         return tydesc;"}, {"sha": "7141a17d13311d696d179188690ea033e966c874", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=c14daba3b2f3218438a6928ed0676986c6339d48", "patch": "@@ -566,14 +566,22 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n         true\n     }\n \n-    fn visit_fn_input(&mut self, _i: uint, _mode: uint, _inner: *TyDesc) -> bool {\n-        // FIXME: #8917: should print out the parameter types here, separated by commas\n+    fn visit_fn_input(&mut self, i: uint, _mode: uint, inner: *TyDesc) -> bool {\n+        if i != 0 {\n+            self.writer.write(\", \".as_bytes());\n+        }\n+        let name = unsafe { (*inner).name };\n+        self.writer.write(name.as_bytes());\n         true\n     }\n \n-    fn visit_fn_output(&mut self, _retstyle: uint, _inner: *TyDesc) -> bool {\n+    fn visit_fn_output(&mut self, _retstyle: uint, inner: *TyDesc) -> bool {\n         self.writer.write(\")\".as_bytes());\n-        // FIXME: #8917: should print out the output type here, as `-> T`\n+        let name = unsafe { (*inner).name };\n+        if name != \"()\" {\n+            self.writer.write(\" -> \".as_bytes());\n+            self.writer.write(name.as_bytes());\n+        }\n         true\n     }\n \n@@ -620,6 +628,8 @@ fn test_repr() {\n     use str;\n     use str::Str;\n     use rt::io::Decorator;\n+    use util::swap;\n+    use char::is_alphabetic;\n \n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::mem::MemWriter::new();\n@@ -674,7 +684,9 @@ fn test_repr() {\n     exact_test(&(10u64, ~\"hello\"),\n                \"(10u64, ~\\\"hello\\\")\");\n \n-    exact_test(&(&println), \"&fn()\");\n+    exact_test(&println, \"fn(&str)\");\n+    exact_test(&swap::<int>, \"fn(&mut int, &mut int)\");\n+    exact_test(&is_alphabetic, \"fn(char) -> bool\");\n     exact_test(&(~5 as ~ToStr), \"~to_str::ToStr:Send\");\n \n     struct Foo;"}, {"sha": "c3791d18b384657d5dadcee6ed981c4cf459eaa1", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=c14daba3b2f3218438a6928ed0676986c6339d48", "patch": "@@ -66,6 +66,9 @@ pub struct TyDesc {\n     // `U`, but in the case of `@Trait` or `~Trait` objects, the type\n     // `U` is unknown.\n     borrow_offset: uint,\n+\n+    // Name corresponding to the type\n+    name: &'static str\n }\n \n #[lang=\"opaque\"]"}, {"sha": "fe3c946a40b30de69e9a8ebbb973ecf17c0cd4f9", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/c14daba3b2f3218438a6928ed0676986c6339d48/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=c14daba3b2f3218438a6928ed0676986c6339d48", "patch": "@@ -52,6 +52,11 @@ static inline void *box_body(rust_opaque_box *box) {\n     return (void*)(box + 1);\n }\n \n+struct slice {\n+    void *data;\n+    size_t length;\n+};\n+\n struct type_desc {\n     size_t size;\n     size_t align;\n@@ -60,6 +65,7 @@ struct type_desc {\n     glue_fn *free_glue;\n     glue_fn *visit_glue;\n     size_t borrow_offset;\n+    slice name;\n };\n \n #endif"}]}