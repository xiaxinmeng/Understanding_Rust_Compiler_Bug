{"sha": "7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3", "node_id": "C_kwDOAAsO6NoAKDdkOTkwYThjMTgzOGExOGM1NGE0YjhhOWY1ZmU3NGVhNTA3ZWNiYjM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-31T18:11:22Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-29T22:28:42Z"}, "message": "Bless tests.", "tree": {"sha": "a82ffb47f7f3325af3e003ff52e7e4983a450939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a82ffb47f7f3325af3e003ff52e7e4983a450939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3", "html_url": "https://github.com/rust-lang/rust/commit/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865d0fef2f49de54c89132672946cefb8b8a8f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/865d0fef2f49de54c89132672946cefb8b8a8f10", "html_url": "https://github.com/rust-lang/rust/commit/865d0fef2f49de54c89132672946cefb8b8a8f10"}], "stats": {"total": 292, "additions": 225, "deletions": 67}, "files": [{"sha": "88d9ed46e1ad3a8251b2924881bf1d089be35778", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 212, "deletions": 63, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3", "patch": "@@ -16,53 +16,8 @@ LL |     let _: [u8; bar::<N>()];\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:24:23\n-   |\n-LL |     let _ = [0; bar::<N>()];\n-   |                       ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:29:24\n-   |\n-LL |     let _: Foo<{ foo::<T>() }>;\n-   |                        ^ cannot perform const operation using `T`\n-   |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:30:24\n-   |\n-LL |     let _: Foo<{ bar::<N>() }>;\n-   |                        ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:35:27\n-   |\n-LL |     let _ = Foo::<{ foo::<T>() }>;\n-   |                           ^ cannot perform const operation using `T`\n-   |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:36:27\n-   |\n-LL |     let _ = Foo::<{ bar::<N>() }>;\n-   |                           ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:15:23\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n@@ -71,7 +26,7 @@ LL |     let _: [u8; faz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:16:23\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; baz::<'a>(&())];\n    |                       ^^\n@@ -80,7 +35,7 @@ LL |     let _: [u8; baz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:17:23\n+  --> $DIR/const-arg-in-const-arg.rs:19:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n@@ -89,16 +44,25 @@ LL |     let _: [u8; faz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:18:23\n+  --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; baz::<'b>(&())];\n    |                       ^^\n    |\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:24:23\n+   |\n+LL |     let _ = [0; bar::<N>()];\n+   |                       ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:25:23\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n@@ -107,7 +71,7 @@ LL |     let _ = [0; faz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:26:23\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n    |\n LL |     let _ = [0; baz::<'a>(&())];\n    |                       ^^\n@@ -116,7 +80,7 @@ LL |     let _ = [0; baz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:27:23\n+  --> $DIR/const-arg-in-const-arg.rs:29:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n@@ -125,16 +89,34 @@ LL |     let _ = [0; faz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:28:23\n+  --> $DIR/const-arg-in-const-arg.rs:31:23\n    |\n LL |     let _ = [0; baz::<'b>(&())];\n    |                       ^^\n    |\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:32:24\n+   |\n+LL |     let _: Foo<{ foo::<T>() }>;\n+   |                        ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:33:24\n+   |\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |                        ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:31:24\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n@@ -143,7 +125,7 @@ LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:32:24\n+  --> $DIR/const-arg-in-const-arg.rs:37:24\n    |\n LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    |                        ^^\n@@ -152,7 +134,7 @@ LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:33:24\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n@@ -161,16 +143,34 @@ LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:34:24\n+  --> $DIR/const-arg-in-const-arg.rs:40:24\n    |\n LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    |                        ^^\n    |\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:41:27\n+   |\n+LL |     let _ = Foo::<{ foo::<T>() }>;\n+   |                           ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:42:27\n+   |\n+LL |     let _ = Foo::<{ bar::<N>() }>;\n+   |                           ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:37:27\n+  --> $DIR/const-arg-in-const-arg.rs:44:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n@@ -179,7 +179,7 @@ LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:38:27\n+  --> $DIR/const-arg-in-const-arg.rs:46:27\n    |\n LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    |                           ^^\n@@ -188,7 +188,7 @@ LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:39:27\n+  --> $DIR/const-arg-in-const-arg.rs:47:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^\n@@ -197,14 +197,163 @@ LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:40:27\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n    |                           ^^\n    |\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n-error: aborting due to 23 previous errors\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-arg-in-const-arg.rs:14:23\n+   |\n+LL |     let _: [u8; bar::<N>()];\n+   |                       ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     let _: [u8; bar::<{ N }>()];\n+   |                       +   +\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n+   |\n+LL |     let _: [u8; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:19:23\n+   |\n+LL |     let _: [u8; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-arg-in-const-arg.rs:24:23\n+   |\n+LL |     let _ = [0; bar::<N>()];\n+   |                       ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     let _ = [0; bar::<{ N }>()];\n+   |                       +   +\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n+   |\n+LL |     let _ = [0; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:29:23\n+   |\n+LL |     let _ = [0; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-arg-in-const-arg.rs:33:24\n+   |\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |                        ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     let _: Foo<{ bar::<{ N }>() }>;\n+   |                        +   +\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n+   |\n+LL |     let _: Foo<{ faz::<'a>(&()) }>;\n+   |                        ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n+   |\n+LL |     let _: Foo<{ faz::<'b>(&()) }>;\n+   |                        ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/const-arg-in-const-arg.rs:23:17\n+   |\n+LL |     let _ = [0; foo::<T>()];\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-arg-in-const-arg.rs:42:27\n+   |\n+LL |     let _ = Foo::<{ bar::<N>() }>;\n+   |                           ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     let _ = Foo::<{ bar::<{ N }>() }>;\n+   |                           +   +\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:44:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n+   |                           ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:47:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n+   |                           ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: aborting due to 36 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0658, E0747.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "b9daadb547493fcebb7c55d7d0011b5646102eb8", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=7d990a8c1838a18c54a4b8a9f5fe74ea507ecbb3", "patch": "@@ -12,31 +12,40 @@ struct Foo<const N: usize>;\n fn test<'a, 'b, T, const N: usize>() where &'b (): Sized {\n     let _: [u8; foo::<T>()]; //~ ERROR generic parameters may not\n     let _: [u8; bar::<N>()]; //~ ERROR generic parameters may not\n+                             //~^ ERROR unresolved item provided when a constant was expected\n     let _: [u8; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+                                 //~^ ERROR cannot specify lifetime arguments\n     let _: [u8; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n     let _: [u8; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+                                 //~^ ERROR cannot specify lifetime arguments\n     let _: [u8; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n \n-    // NOTE: This can be a future compat warning instead of an error,\n-    // so we stop compilation before emitting this error in this test.\n-    let _ = [0; foo::<T>()];\n-\n+    let _ = [0; foo::<T>()]; //~ ERROR constant expression depends on a generic parameter\n     let _ = [0; bar::<N>()]; //~ ERROR generic parameters may not\n+                             //~^ ERROR unresolved item provided when a constant was expected\n     let _ = [0; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+                                 //~^ ERROR cannot specify lifetime arguments\n     let _ = [0; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n     let _ = [0; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+                                 //~^ ERROR cannot specify lifetime arguments\n     let _ = [0; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n     let _: Foo<{ foo::<T>() }>; //~ ERROR generic parameters may not\n     let _: Foo<{ bar::<N>() }>; //~ ERROR generic parameters may not\n+                                //~^ ERROR unresolved item provided when a constant was expected\n     let _: Foo<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+                                    //~^ ERROR cannot specify lifetime arguments\n     let _: Foo<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n     let _: Foo<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+                                    //~^ ERROR cannot specify lifetime arguments\n     let _: Foo<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n     let _ = Foo::<{ foo::<T>() }>; //~ ERROR generic parameters may not\n     let _ = Foo::<{ bar::<N>() }>; //~ ERROR generic parameters may not\n+                                   //~^ ERROR unresolved item provided when a constant was expected\n     let _ = Foo::<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+                                       //~^ ERROR cannot specify lifetime arguments\n     let _ = Foo::<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n     let _ = Foo::<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+                                       //~^ ERROR cannot specify lifetime arguments\n     let _ = Foo::<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n }\n "}]}