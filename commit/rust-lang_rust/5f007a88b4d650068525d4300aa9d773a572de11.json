{"sha": "5f007a88b4d650068525d4300aa9d773a572de11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMDA3YTg4YjRkNjUwMDY4NTI1ZDQzMDBhYTlkNzczYTU3MmRlMTE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-11-24T11:17:43Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-12T06:31:04Z"}, "message": "Extract method", "tree": {"sha": "20fa9011b801e59dfcdb46c65b255ff657544cf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20fa9011b801e59dfcdb46c65b255ff657544cf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f007a88b4d650068525d4300aa9d773a572de11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwQqygACgkQtvoGpuDi\nZlvlTxAAnih75THTrcrfihxrt+TxKTwIWpvIOhQDeFtUgQvJIXFtWppwgEzvcdn7\nIcJFNBttsxIGF3CtsFB9C8tMYcOMz0/EvunfAGlHidU/wO7vy8oL3NTAq5RUQ2Sv\n0Qso3qas+4Ir0GFBDyGOED+2xZ46NDW5pjZebDzC/yCuO6iCJP66QQPoZtWHauOQ\nPQzisZ+xfOmfDgncpFq9sQZh/0jcuQA4P7lDyH8YvjSvddVisDANuEDNQGH07m3Z\n089BcMcU+n+O20Aoyg/lNCwfiPoNBP5z6gx//hmVXN/8icthmp2y0S6LwuWEjAG2\nUGFvB9bTEsd9SP9defDpNAROiJj9L61kDlXG70+BurS90LDlDXizfxw3EtrkmdBj\nlU1Lt49zzFRAAMAgqGfA8nAoWUGUTcmMeL55hG4EKrkOGgFa0x93LlsQWCun8rJO\neDn4NzxQOrEAWDjwWG89HCIXUJk8qvaQbfsu0Dk9roy3NhImFcI70Ko4sPCRTkR2\njHg+UO2OOcRGSLGBjP7wVFYiZDqekCfRbk3OTEMaSexIWHovQpyw5fJ1eC69NmY0\nxeHrFg8ks/q/Pwo8rKZ/8Z0xCsUTYF1T9+iCUpqYzPsCauUBgQtU+qLdw+t7NlQO\nJaRXxpCqVfDysMqpd5mUhdx1fIyoGPhp4YYP3+psLnJhealpc1A=\n=Z6wd\n-----END PGP SIGNATURE-----", "payload": "tree 20fa9011b801e59dfcdb46c65b255ff657544cf0\nparent 7e7a33c72695bae3316bf8b211e4bfb698ed7686\nauthor Philipp Hansch <dev@phansch.net> 1543058263 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1544596264 +0100\n\nExtract method\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f007a88b4d650068525d4300aa9d773a572de11", "html_url": "https://github.com/rust-lang/rust/commit/5f007a88b4d650068525d4300aa9d773a572de11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f007a88b4d650068525d4300aa9d773a572de11/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7a33c72695bae3316bf8b211e4bfb698ed7686", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7a33c72695bae3316bf8b211e4bfb698ed7686", "html_url": "https://github.com/rust-lang/rust/commit/7e7a33c72695bae3316bf8b211e4bfb698ed7686"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "996dc126ec17d64396976b5734c87b742d9b3784", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f007a88b4d650068525d4300aa9d773a572de11/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f007a88b4d650068525d4300aa9d773a572de11/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=5f007a88b4d650068525d4300aa9d773a572de11", "patch": "@@ -51,15 +51,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if unwrap_args.len() > 0;\n             if let ExprKind::MethodCall(ref write_fun, _, ref write_args) =\n                 unwrap_args[0].node;\n-            // Obtain the string that should be printed\n-            if write_args.len() > 1;\n-            if let ExprKind::Call(_, ref output_args) = write_args[1].node;\n-            if output_args.len() > 0;\n-            if let ExprKind::AddrOf(_, ref output_string_expr) = output_args[0].node;\n-            if let ExprKind::Array(ref string_exprs) = output_string_expr.node;\n-            if string_exprs.len() > 0;\n-            if let ExprKind::Lit(ref lit) = string_exprs[0].node;\n-            if let LitKind::Str(ref write_output, _) = lit.node;\n             if write_fun.ident.name == \"write_fmt\";\n             // match calls to std::io::stdout() / std::io::stderr ()\n             if write_args.len() > 0;\n@@ -94,7 +85,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 // We need to remove the last trailing newline from the string because the\n                 // underlying `fmt::write` function doesn't know wether `println!` or `print!` was\n                 // used.\n-                let mut write_output: String = write_output.to_string();\n+                let mut write_output: String = write_output_string(write_args).unwrap();\n                 if write_output.ends_with('\\n') {\n                     write_output.truncate(write_output.len() - 1)\n                 }\n@@ -125,3 +116,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         }\n     }\n }\n+\n+// Extract the output string from the given `write_args`.\n+fn write_output_string(write_args: &HirVec<Expr>) -> Option<String> {\n+    if_chain! {\n+        // Obtain the string that should be printed\n+        if write_args.len() > 1;\n+        if let ExprKind::Call(_, ref output_args) = write_args[1].node;\n+        if output_args.len() > 0;\n+        if let ExprKind::AddrOf(_, ref output_string_expr) = output_args[0].node;\n+        if let ExprKind::Array(ref string_exprs) = output_string_expr.node;\n+        if string_exprs.len() > 0;\n+        if let ExprKind::Lit(ref lit) = string_exprs[0].node;\n+        if let LitKind::Str(ref write_output, _) = lit.node;\n+        then {\n+            return Some(write_output.to_string())\n+        }\n+    }\n+    None\n+}"}]}