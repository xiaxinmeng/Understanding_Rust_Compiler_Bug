{"sha": "ac38021da14cb22f95e63b41dea2d5f1967f34d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMzgwMjFkYTE0Y2IyMmY5NWU2M2I0MWRlYTJkNWYxOTY3ZjM0ZDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-17T23:54:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-19T00:22:18Z"}, "message": "Port entry code to `visit_all_items` -- since this was tracking whether\nthe main fn appeared at the top level, if now consults the `DefPath` to\nget this information", "tree": {"sha": "e9af6dabbe9396a17666e001778bdae91b5902b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9af6dabbe9396a17666e001778bdae91b5902b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac38021da14cb22f95e63b41dea2d5f1967f34d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac38021da14cb22f95e63b41dea2d5f1967f34d6", "html_url": "https://github.com/rust-lang/rust/commit/ac38021da14cb22f95e63b41dea2d5f1967f34d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac38021da14cb22f95e63b41dea2d5f1967f34d6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ff9f71dbb8c3edaa855928442954a06f2d19de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ff9f71dbb8c3edaa855928442954a06f2d19de", "html_url": "https://github.com/rust-lang/rust/commit/e4ff9f71dbb8c3edaa855928442954a06f2d19de"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "ecf16aaed836a699c72457bb2781a120fce1e7d1", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ac38021da14cb22f95e63b41dea2d5f1967f34d6/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac38021da14cb22f95e63b41dea2d5f1967f34d6/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=ac38021da14cb22f95e63b41dea2d5f1967f34d6", "patch": "@@ -10,20 +10,19 @@\n \n \n use front::map as ast_map;\n+use middle::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n use syntax::ast::NodeId;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::entry::EntryPointType;\n use rustc_front::hir::{Item, ItemFn};\n-use rustc_front::visit;\n-use rustc_front::visit::Visitor;\n+use rustc_front::intravisit::Visitor;\n \n-struct EntryContext<'a> {\n+struct EntryContext<'a, 'tcx: 'a> {\n     session: &'a Session,\n \n-    // The current depth in the ast\n-    depth: usize,\n+    map: &'a ast_map::Map<'tcx>,\n \n     // The top-level function called 'main'\n     main_fn: Option<(NodeId, Span)>,\n@@ -39,11 +38,12 @@ struct EntryContext<'a> {\n     non_main_fns: Vec<(NodeId, Span)> ,\n }\n \n-impl<'a, 'v> Visitor<'v> for EntryContext<'a> {\n-    fn visit_item(&mut self, item: &Item) {\n-        self.depth += 1;\n-        find_item(item, self);\n-        self.depth -= 1;\n+impl<'a, 'tcx> Visitor<'tcx> for EntryContext<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &'tcx Item) {\n+        let def_id = self.map.local_def_id(item.id);\n+        let def_key = self.map.def_key(def_id);\n+        let at_root = def_key.parent == Some(CRATE_DEF_INDEX);\n+        find_item(item, self, at_root);\n     }\n }\n \n@@ -64,29 +64,29 @@ pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) {\n \n     let mut ctxt = EntryContext {\n         session: session,\n-        depth: 0,\n+        map: ast_map,\n         main_fn: None,\n         attr_main_fn: None,\n         start_fn: None,\n         non_main_fns: Vec::new(),\n     };\n \n-    visit::walk_crate(&mut ctxt, ast_map.krate());\n+    ast_map.krate().visit_all_items(&mut ctxt);\n \n     configure_main(&mut ctxt);\n }\n \n // Beware, this is duplicated in libsyntax/entry.rs, make sure to keep\n // them in sync.\n-fn entry_point_type(item: &Item, depth: usize) -> EntryPointType {\n+fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType {\n     match item.node {\n         ItemFn(..) => {\n             if attr::contains_name(&item.attrs, \"start\") {\n                 EntryPointType::Start\n             } else if attr::contains_name(&item.attrs, \"main\") {\n                 EntryPointType::MainAttr\n             } else if item.name.as_str() == \"main\" {\n-                if depth == 1 {\n+                if at_root {\n                     // This is a top-level function so can be 'main'\n                     EntryPointType::MainNamed\n                 } else {\n@@ -101,8 +101,8 @@ fn entry_point_type(item: &Item, depth: usize) -> EntryPointType {\n }\n \n \n-fn find_item(item: &Item, ctxt: &mut EntryContext) {\n-    match entry_point_type(item, ctxt.depth) {\n+fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n+    match entry_point_type(item, at_root) {\n         EntryPointType::MainNamed => {\n             if ctxt.main_fn.is_none() {\n                 ctxt.main_fn = Some((item.id, item.span));\n@@ -132,8 +132,6 @@ fn find_item(item: &Item, ctxt: &mut EntryContext) {\n         },\n         EntryPointType::None => ()\n     }\n-\n-    visit::walk_item(ctxt, item);\n }\n \n fn configure_main(this: &mut EntryContext) {"}]}