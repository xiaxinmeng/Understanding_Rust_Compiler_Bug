{"sha": "c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "node_id": "C_kwDOAAsO6NoAKGM2ZmNkYjY5MDYwOTc2OWEyNDBmYzhhYjBkZTBjZTY4ZDVlYTdkYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T19:49:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T19:49:51Z"}, "message": "Auto merge of #105416 - nnethercote:more-linting-tweaks, r=cjgillot\n\nMore linting tweaks\n\nSqueeze a little more blood from this stone.\n\nr? `@cjgillot`", "tree": {"sha": "78032d3da111d1776f3fb9bc09335353ee75cf13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78032d3da111d1776f3fb9bc09335353ee75cf13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "html_url": "https://github.com/rust-lang/rust/commit/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32da2305880765a4c76180086959a2d5da131565", "url": "https://api.github.com/repos/rust-lang/rust/commits/32da2305880765a4c76180086959a2d5da131565", "html_url": "https://github.com/rust-lang/rust/commit/32da2305880765a4c76180086959a2d5da131565"}, {"sha": "d049be30cf3f53ecba2bde4ad5c832866965eb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d049be30cf3f53ecba2bde4ad5c832866965eb0a", "html_url": "https://github.com/rust-lang/rust/commit/d049be30cf3f53ecba2bde4ad5c832866965eb0a"}], "stats": {"total": 138, "additions": 80, "deletions": 58}, "files": [{"sha": "0932eee92373d764361d9a87249d6693c9c353cd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "patch": "@@ -97,6 +97,7 @@ fn pierce_parens(mut expr: &ast::Expr) -> &ast::Expr {\n }\n \n impl EarlyLintPass for WhileTrue {\n+    #[inline]\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         if let ast::ExprKind::While(cond, _, label) = &e.kind\n             && let cond = pierce_parens(cond)\n@@ -361,6 +362,7 @@ impl EarlyLintPass for UnsafeCode {\n         }\n     }\n \n+    #[inline]\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         if let ast::ExprKind::Block(ref blk, _) = e.kind {\n             // Don't warn about generated blocks; that'll just pollute the output.\n@@ -583,6 +585,7 @@ impl MissingDoc {\n }\n \n impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n+    #[inline]\n     fn enter_lint_attrs(&mut self, _cx: &LateContext<'_>, attrs: &[ast::Attribute]) {\n         let doc_hidden = self.doc_hidden()\n             || attrs.iter().any(|attr| {"}, {"sha": "5d81370c35acfc71bf1d06cc5e65dbaa0e952dcc", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "patch": "@@ -37,7 +37,9 @@ pub struct EarlyContextAndPasses<'a> {\n }\n \n impl<'a> EarlyContextAndPasses<'a> {\n-    fn check_id(&mut self, id: ast::NodeId) {\n+    // This always-inlined function is for the hot call site.\n+    #[inline(always)]\n+    fn inlined_check_id(&mut self, id: ast::NodeId) {\n         for early_lint in self.context.buffered.take(id) {\n             let BufferedEarlyLint { span, msg, node_id: _, lint_id, diagnostic } = early_lint;\n             self.context.lookup_with_diagnostics(\n@@ -50,6 +52,11 @@ impl<'a> EarlyContextAndPasses<'a> {\n         }\n     }\n \n+    // This non-inlined function is for the cold call sites.\n+    fn check_id(&mut self, id: ast::NodeId) {\n+        self.inlined_check_id(id)\n+    }\n+\n     /// Merge the lints specified by any lint attributes into the\n     /// current lint context, call the provided function, then reset the\n     /// lints in effect to their previous state.\n@@ -61,7 +68,7 @@ impl<'a> EarlyContextAndPasses<'a> {\n         debug!(?id);\n         let push = self.context.builder.push(attrs, is_crate_node, None);\n \n-        self.check_id(id);\n+        self.inlined_check_id(id);\n         debug!(\"early context: enter_attrs({:?})\", attrs);\n         run_early_passes!(self, enter_lint_attrs, attrs);\n         f(self);"}, {"sha": "dc2f5c0e2967e86e45c838e288272132b5eb4bf4", "filename": "compiler/rustc_lint/src/hidden_unicode_codepoints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs?ref=c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "patch": "@@ -121,6 +121,7 @@ impl EarlyLintPass for HiddenUnicodeCodepoints {\n         }\n     }\n \n+    #[inline]\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         // byte strings are already handled well enough by `EscapeError::NonAsciiCharInByteString`\n         match &expr.kind {"}, {"sha": "1990a74841bc2211ed1dc272a14abb1f35f11ee9", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "patch": "@@ -127,6 +127,7 @@ fn lint_mod(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     late::late_lint_mod(tcx, module_def_id, BuiltinCombinedModuleLateLintPass::new());\n }\n \n+// See the comment on `BuiltinCombinedEarlyLintPass`, which is similar.\n early_lint_methods!(\n     declare_combined_early_lint_pass,\n     [\n@@ -137,6 +138,9 @@ early_lint_methods!(\n     ]\n );\n \n+// Declare `BuiltinCombinedEarlyLintPass`, a lint pass that combines multiple\n+// lint passes into a single pass for maximum speed. Each `check_foo` method\n+// within this pass simply calls `check_foo` once per listed lint.\n early_lint_methods!(\n     declare_combined_early_lint_pass,\n     [\n@@ -162,7 +166,9 @@ early_lint_methods!(\n     ]\n );\n \n-// FIXME: Make a separate lint type which do not require typeck tables\n+// FIXME: Make a separate lint type which does not require typeck tables.\n+\n+// See the comment on `BuiltinCombinedEarlyLintPass`, which is similar.\n late_lint_methods!(\n     declare_combined_late_lint_pass,\n     [\n@@ -179,10 +185,10 @@ late_lint_methods!(\n             // Keeps a global list of foreign declarations.\n             ClashingExternDeclarations: ClashingExternDeclarations::new(),\n         ]\n-    ],\n-    ['tcx]\n+    ]\n );\n \n+// See the comment on `BuiltinCombinedEarlyLintPass`, which is similar.\n late_lint_methods!(\n     declare_combined_late_lint_pass,\n     [\n@@ -229,8 +235,7 @@ late_lint_methods!(\n             NamedAsmLabels: NamedAsmLabels,\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n         ]\n-    ],\n-    ['tcx]\n+    ]\n );\n \n pub fn new_lint_store(internal_lints: bool) -> LintStore {"}, {"sha": "00922cef38462963380b7dddd502e4fdc20bf3da", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 55, "deletions": 51, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "patch": "@@ -9,49 +9,49 @@ use rustc_span::Span;\n \n #[macro_export]\n macro_rules! late_lint_methods {\n-    ($macro:path, $args:tt, [$hir:tt]) => (\n-        $macro!($args, [$hir], [\n-            fn check_body(a: &$hir hir::Body<$hir>);\n-            fn check_body_post(a: &$hir hir::Body<$hir>);\n+    ($macro:path, $args:tt) => (\n+        $macro!($args, [\n+            fn check_body(a: &'tcx hir::Body<'tcx>);\n+            fn check_body_post(a: &'tcx hir::Body<'tcx>);\n             fn check_crate();\n             fn check_crate_post();\n-            fn check_mod(a: &$hir hir::Mod<$hir>, b: hir::HirId);\n-            fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);\n-            fn check_item(a: &$hir hir::Item<$hir>);\n-            fn check_item_post(a: &$hir hir::Item<$hir>);\n-            fn check_local(a: &$hir hir::Local<$hir>);\n-            fn check_block(a: &$hir hir::Block<$hir>);\n-            fn check_block_post(a: &$hir hir::Block<$hir>);\n-            fn check_stmt(a: &$hir hir::Stmt<$hir>);\n-            fn check_arm(a: &$hir hir::Arm<$hir>);\n-            fn check_pat(a: &$hir hir::Pat<$hir>);\n-            fn check_expr(a: &$hir hir::Expr<$hir>);\n-            fn check_expr_post(a: &$hir hir::Expr<$hir>);\n-            fn check_ty(a: &$hir hir::Ty<$hir>);\n-            fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n-            fn check_generics(a: &$hir hir::Generics<$hir>);\n-            fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>);\n+            fn check_mod(a: &'tcx hir::Mod<'tcx>, b: hir::HirId);\n+            fn check_foreign_item(a: &'tcx hir::ForeignItem<'tcx>);\n+            fn check_item(a: &'tcx hir::Item<'tcx>);\n+            fn check_item_post(a: &'tcx hir::Item<'tcx>);\n+            fn check_local(a: &'tcx hir::Local<'tcx>);\n+            fn check_block(a: &'tcx hir::Block<'tcx>);\n+            fn check_block_post(a: &'tcx hir::Block<'tcx>);\n+            fn check_stmt(a: &'tcx hir::Stmt<'tcx>);\n+            fn check_arm(a: &'tcx hir::Arm<'tcx>);\n+            fn check_pat(a: &'tcx hir::Pat<'tcx>);\n+            fn check_expr(a: &'tcx hir::Expr<'tcx>);\n+            fn check_expr_post(a: &'tcx hir::Expr<'tcx>);\n+            fn check_ty(a: &'tcx hir::Ty<'tcx>);\n+            fn check_generic_param(a: &'tcx hir::GenericParam<'tcx>);\n+            fn check_generics(a: &'tcx hir::Generics<'tcx>);\n+            fn check_poly_trait_ref(a: &'tcx hir::PolyTraitRef<'tcx>);\n             fn check_fn(\n-                a: rustc_hir::intravisit::FnKind<$hir>,\n-                b: &$hir hir::FnDecl<$hir>,\n-                c: &$hir hir::Body<$hir>,\n+                a: rustc_hir::intravisit::FnKind<'tcx>,\n+                b: &'tcx hir::FnDecl<'tcx>,\n+                c: &'tcx hir::Body<'tcx>,\n                 d: Span,\n                 e: hir::HirId);\n-            fn check_trait_item(a: &$hir hir::TraitItem<$hir>);\n-            fn check_impl_item(a: &$hir hir::ImplItem<$hir>);\n-            fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n-            fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n-            fn check_field_def(a: &$hir hir::FieldDef<$hir>);\n-            fn check_variant(a: &$hir hir::Variant<$hir>);\n-            fn check_path(a: &hir::Path<$hir>, b: hir::HirId);\n-            fn check_attribute(a: &$hir ast::Attribute);\n+            fn check_trait_item(a: &'tcx hir::TraitItem<'tcx>);\n+            fn check_impl_item(a: &'tcx hir::ImplItem<'tcx>);\n+            fn check_impl_item_post(a: &'tcx hir::ImplItem<'tcx>);\n+            fn check_struct_def(a: &'tcx hir::VariantData<'tcx>);\n+            fn check_field_def(a: &'tcx hir::FieldDef<'tcx>);\n+            fn check_variant(a: &'tcx hir::Variant<'tcx>);\n+            fn check_path(a: &hir::Path<'tcx>, b: hir::HirId);\n+            fn check_attribute(a: &'tcx ast::Attribute);\n \n             /// Called when entering a syntax node that can have lint attributes such\n             /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n-            fn enter_lint_attrs(a: &$hir [ast::Attribute]);\n+            fn enter_lint_attrs(a: &'tcx [ast::Attribute]);\n \n             /// Counterpart to `enter_lint_attrs`.\n-            fn exit_lint_attrs(a: &$hir [ast::Attribute]);\n+            fn exit_lint_attrs(a: &'tcx [ast::Attribute]);\n         ]);\n     )\n }\n@@ -66,21 +66,23 @@ macro_rules! late_lint_methods {\n // contains a few lint-specific methods with no equivalent in `Visitor`.\n \n macro_rules! declare_late_lint_pass {\n-    ([], [$hir:tt], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n-        pub trait LateLintPass<$hir>: LintPass {\n-            $(#[inline(always)] fn $name(&mut self, _: &LateContext<$hir>, $(_: $arg),*) {})*\n+    ([], [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n+        pub trait LateLintPass<'tcx>: LintPass {\n+            $(#[inline(always)] fn $name(&mut self, _: &LateContext<'tcx>, $(_: $arg),*) {})*\n         }\n     )\n }\n \n-late_lint_methods!(declare_late_lint_pass, [], ['tcx]);\n+// Declare the `LateLintPass` trait, which contains empty default definitions\n+// for all the `check_*` methods.\n+late_lint_methods!(declare_late_lint_pass, []);\n \n impl LateLintPass<'_> for HardwiredLints {}\n \n #[macro_export]\n macro_rules! expand_combined_late_lint_pass_method {\n-    ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({\n-        $($self.$passes.$name $params;)*\n+    ([$($pass:ident),*], $self: ident, $name: ident, $params:tt) => ({\n+        $($self.$pass.$name $params;)*\n     })\n }\n \n@@ -95,28 +97,28 @@ macro_rules! expand_combined_late_lint_pass_methods {\n \n #[macro_export]\n macro_rules! declare_combined_late_lint_pass {\n-    ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], [$hir:tt], $methods:tt) => (\n+    ([$v:vis $name:ident, [$($pass:ident: $constructor:expr,)*]], $methods:tt) => (\n         #[allow(non_snake_case)]\n         $v struct $name {\n-            $($passes: $passes,)*\n+            $($pass: $pass,)*\n         }\n \n         impl $name {\n             $v fn new() -> Self {\n                 Self {\n-                    $($passes: $constructor,)*\n+                    $($pass: $constructor,)*\n                 }\n             }\n \n             $v fn get_lints() -> LintArray {\n                 let mut lints = Vec::new();\n-                $(lints.extend_from_slice(&$passes::get_lints());)*\n+                $(lints.extend_from_slice(&$pass::get_lints());)*\n                 lints\n             }\n         }\n \n         impl<'tcx> LateLintPass<'tcx> for $name {\n-            expand_combined_late_lint_pass_methods!([$($passes),*], $methods);\n+            expand_combined_late_lint_pass_methods!([$($pass),*], $methods);\n         }\n \n         #[allow(rustc::lint_pass_impl_without_macro)]\n@@ -176,12 +178,14 @@ macro_rules! declare_early_lint_pass {\n     )\n }\n \n+// Declare the `EarlyLintPass` trait, which contains empty default definitions\n+// for all the `check_*` methods.\n early_lint_methods!(declare_early_lint_pass, []);\n \n #[macro_export]\n macro_rules! expand_combined_early_lint_pass_method {\n-    ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({\n-        $($self.$passes.$name $params;)*\n+    ([$($pass:ident),*], $self: ident, $name: ident, $params:tt) => ({\n+        $($self.$pass.$name $params;)*\n     })\n }\n \n@@ -196,28 +200,28 @@ macro_rules! expand_combined_early_lint_pass_methods {\n \n #[macro_export]\n macro_rules! declare_combined_early_lint_pass {\n-    ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], $methods:tt) => (\n+    ([$v:vis $name:ident, [$($pass:ident: $constructor:expr,)*]], $methods:tt) => (\n         #[allow(non_snake_case)]\n         $v struct $name {\n-            $($passes: $passes,)*\n+            $($pass: $pass,)*\n         }\n \n         impl $name {\n             $v fn new() -> Self {\n                 Self {\n-                    $($passes: $constructor,)*\n+                    $($pass: $constructor,)*\n                 }\n             }\n \n             $v fn get_lints() -> LintArray {\n                 let mut lints = Vec::new();\n-                $(lints.extend_from_slice(&$passes::get_lints());)*\n+                $(lints.extend_from_slice(&$pass::get_lints());)*\n                 lints\n             }\n         }\n \n         impl EarlyLintPass for $name {\n-            expand_combined_early_lint_pass_methods!([$($passes),*], $methods);\n+            expand_combined_early_lint_pass_methods!([$($pass),*], $methods);\n         }\n \n         #[allow(rustc::lint_pass_impl_without_macro)]"}, {"sha": "dc352778f1d1bcdab92dea9ea4f68f698fc02f2e", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "patch": "@@ -949,6 +949,7 @@ impl UnusedParens {\n }\n \n impl EarlyLintPass for UnusedParens {\n+    #[inline]\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         match e.kind {\n             ExprKind::Let(ref pat, _, _) | ExprKind::ForLoop(ref pat, ..) => {\n@@ -1167,6 +1168,7 @@ impl EarlyLintPass for UnusedBraces {\n         <Self as UnusedDelimLint>::check_stmt(self, cx, s)\n     }\n \n+    #[inline]\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         <Self as UnusedDelimLint>::check_expr(self, cx, e);\n "}]}