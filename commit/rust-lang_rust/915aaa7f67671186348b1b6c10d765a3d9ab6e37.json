{"sha": "915aaa7f67671186348b1b6c10d765a3d9ab6e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNWFhYTdmNjc2NzExODYzNDhiMWI2YzEwZDc2NWEzZDlhYjZlMzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-19T07:39:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-19T07:39:10Z"}, "message": "std::rt: Set the process exit code", "tree": {"sha": "b5b6e0c11a29b90ec86dfd8b0042c7f8e67e5d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b6e0c11a29b90ec86dfd8b0042c7f8e67e5d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915aaa7f67671186348b1b6c10d765a3d9ab6e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915aaa7f67671186348b1b6c10d765a3d9ab6e37", "html_url": "https://github.com/rust-lang/rust/commit/915aaa7f67671186348b1b6c10d765a3d9ab6e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915aaa7f67671186348b1b6c10d765a3d9ab6e37/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "html_url": "https://github.com/rust-lang/rust/commit/29ad8e15a2b7e2024941d74ea4ce261cb501ded9"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "899fa171b727e5d5ea23cc47cdcf5fa23c2c993e", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/915aaa7f67671186348b1b6c10d765a3d9ab6e37/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915aaa7f67671186348b1b6c10d765a3d9ab6e37/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=915aaa7f67671186348b1b6c10d765a3d9ab6e37", "patch": "@@ -74,6 +74,8 @@ use rt::task::Task;\n use rt::thread::Thread;\n use rt::work_queue::WorkQueue;\n use rt::uv::uvio::UvEventLoop;\n+use unstable::atomics::{AtomicInt, SeqCst};\n+use unstable::sync::UnsafeAtomicRcBox;\n use vec::{OwnedVector, MutableVector};\n \n /// The global (exchange) heap.\n@@ -174,10 +176,10 @@ pub mod util;\n pub fn start(_argc: int, _argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n     init(crate_map);\n-    run(main);\n+    let exit_code = run(main);\n     cleanup();\n \n-    return 0;\n+    return exit_code;\n }\n \n /// One-time runtime initialization. Currently all this does is set up logging\n@@ -190,7 +192,9 @@ pub fn cleanup() {\n     global_heap::cleanup();\n }\n \n-pub fn run(main: ~fn()) {\n+pub fn run(main: ~fn()) -> int {\n+    static DEFAULT_ERROR_CODE: int = 101;\n+\n     let nthreads = match os::getenv(\"RUST_THREADS\") {\n         Some(nstr) => FromStr::from_str(nstr).get(),\n         None => unsafe {\n@@ -216,18 +220,24 @@ pub fn run(main: ~fn()) {\n         scheds.push(sched);\n     }\n \n+    let exit_code = UnsafeAtomicRcBox::new(AtomicInt::new(0));\n+    let exit_code_clone = exit_code.clone();\n+\n     let main_cell = Cell::new(main);\n     let handles = Cell::new(handles);\n     let mut new_task = ~Task::new_root();\n-    let on_exit: ~fn(bool) = |exit_status| {\n+    let on_exit: ~fn(bool) = |exit_success| {\n \n         let mut handles = handles.take();\n         // Tell schedulers to exit\n         for handles.mut_iter().advance |handle| {\n             handle.send(Shutdown);\n         }\n \n-        rtassert!(exit_status);\n+        unsafe {\n+            let exit_code = if exit_success { 0 } else { DEFAULT_ERROR_CODE };\n+            (*exit_code_clone.get()).store(exit_code, SeqCst);\n+        }\n     };\n     new_task.on_exit = Some(on_exit);\n     let main_task = ~Coroutine::with_task(&mut scheds[0].stack_pool,\n@@ -249,6 +259,10 @@ pub fn run(main: ~fn()) {\n \n     // Wait for schedulers\n     let _threads = threads;\n+\n+    unsafe {\n+        (*exit_code.get()).load(SeqCst)\n+    }\n }\n \n /// Possible contexts in which Rust code may be executing."}]}