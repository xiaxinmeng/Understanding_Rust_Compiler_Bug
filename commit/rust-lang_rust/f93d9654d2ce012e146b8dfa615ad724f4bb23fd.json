{"sha": "f93d9654d2ce012e146b8dfa615ad724f4bb23fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5M2Q5NjU0ZDJjZTAxMmUxNDZiOGRmYTYxNWFkNzI0ZjRiYjIzZmQ=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-13T16:21:53Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-13T16:21:53Z"}, "message": "Address comments from PR review\n\nAlso: enable tests for cargo-clippy", "tree": {"sha": "6187863f0c2347f5b70323e7968c7f32e3625080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6187863f0c2347f5b70323e7968c7f32e3625080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f93d9654d2ce012e146b8dfa615ad724f4bb23fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f93d9654d2ce012e146b8dfa615ad724f4bb23fd", "html_url": "https://github.com/rust-lang/rust/commit/f93d9654d2ce012e146b8dfa615ad724f4bb23fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f93d9654d2ce012e146b8dfa615ad724f4bb23fd/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9695543ea8f3973a2be2936df0efc724de1c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9695543ea8f3973a2be2936df0efc724de1c16", "html_url": "https://github.com/rust-lang/rust/commit/cc9695543ea8f3973a2be2936df0efc724de1c16"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "7f9d22e594b9c0f4af731ae72e91219b85bd819e", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f93d9654d2ce012e146b8dfa615ad724f4bb23fd/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f93d9654d2ce012e146b8dfa615ad724f4bb23fd/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f93d9654d2ce012e146b8dfa615ad724f4bb23fd", "patch": "@@ -20,7 +20,6 @@ publish = false\n \n [[bin]]\n name = \"cargo-clippy\"\n-test = false\n path = \"src/main.rs\"\n \n [[bin]]"}, {"sha": "1c0e04689a9fe495edbfc7ef1a276a9d524ba2b6", "filename": "src/main.rs", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f93d9654d2ce012e146b8dfa615ad724f4bb23fd/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d9654d2ce012e146b8dfa615ad724f4bb23fd/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=f93d9654d2ce012e146b8dfa615ad724f4bb23fd", "patch": "@@ -1,4 +1,5 @@\n #![feature(bool_to_option)]\n+#![feature(command_access)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n@@ -63,12 +64,11 @@ struct ClippyCmd {\n     unstable_options: bool,\n     cargo_subcommand: &'static str,\n     args: Vec<String>,\n-    rustflags: Option<String>,\n     clippy_args: Option<String>,\n }\n \n impl ClippyCmd {\n-    fn new<I>(mut old_args: I, rustflags: Option<String>) -> Self\n+    fn new<I>(mut old_args: I) -> Self\n     where\n         I: Iterator<Item = String>,\n     {\n@@ -111,8 +111,6 @@ impl ClippyCmd {\n             unstable_options,\n             cargo_subcommand,\n             args,\n-            rustflags: has_args\n-                .then(|| rustflags.map_or_else(|| clippy_args.clone(), |flags| format!(\"{} {}\", clippy_args, flags))),\n             clippy_args: has_args.then_some(clippy_args),\n         }\n     }\n@@ -153,7 +151,7 @@ impl ClippyCmd {\n             .map(|p| (\"CARGO_TARGET_DIR\", p))\n     }\n \n-    fn into_std_cmd(self) -> Command {\n+    fn into_std_cmd(self, rustflags: Option<String>) -> Command {\n         let mut cmd = Command::new(\"cargo\");\n \n         cmd.env(self.path_env(), Self::path())\n@@ -163,9 +161,12 @@ impl ClippyCmd {\n \n         // HACK: pass Clippy args to the driver *also* through RUSTFLAGS.\n         // This guarantees that new builds will be triggered when Clippy flags change.\n-        if let (Some(clippy_args), Some(rustflags)) = (self.clippy_args, self.rustflags) {\n+        if let Some(clippy_args) = self.clippy_args {\n+            cmd.env(\n+                \"RUSTFLAGS\",\n+                rustflags.map_or(clippy_args.clone(), |flags| format!(\"{} {}\", clippy_args, flags)),\n+            );\n             cmd.env(\"CLIPPY_ARGS\", clippy_args);\n-            cmd.env(\"RUSTFLAGS\", rustflags);\n         }\n \n         cmd\n@@ -176,9 +177,9 @@ fn process<I>(old_args: I) -> Result<(), i32>\n where\n     I: Iterator<Item = String>,\n {\n-    let cmd = ClippyCmd::new(old_args, env::var(\"RUSTFLAGS\").ok());\n+    let cmd = ClippyCmd::new(old_args);\n \n-    let mut cmd = cmd.into_std_cmd();\n+    let mut cmd = cmd.into_std_cmd(env::var(\"RUSTFLAGS\").ok());\n \n     let exit_status = cmd\n         .spawn()\n@@ -196,20 +197,21 @@ where\n #[cfg(test)]\n mod tests {\n     use super::ClippyCmd;\n+    use std::ffi::OsStr;\n \n     #[test]\n     #[should_panic]\n     fn fix_without_unstable() {\n         let args = \"cargo clippy --fix\".split_whitespace().map(ToString::to_string);\n-        let _ = ClippyCmd::new(args, None);\n+        let _ = ClippyCmd::new(args);\n     }\n \n     #[test]\n     fn fix_unstable() {\n         let args = \"cargo clippy --fix -Zunstable-options\"\n             .split_whitespace()\n             .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args, None);\n+        let cmd = ClippyCmd::new(args);\n \n         assert_eq!(\"fix\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n@@ -221,7 +223,7 @@ mod tests {\n         let args = \"cargo clippy --fix -Zunstable-options\"\n             .split_whitespace()\n             .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args, None);\n+        let cmd = ClippyCmd::new(args);\n \n         assert!(cmd.clippy_args.unwrap().contains(\"--no-deps\"));\n     }\n@@ -231,15 +233,15 @@ mod tests {\n         let args = \"cargo clippy --fix -Zunstable-options -- --no-deps\"\n             .split_whitespace()\n             .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args, None);\n+        let cmd = ClippyCmd::new(args);\n \n         assert_eq!(1, cmd.clippy_args.unwrap().matches(\"--no-deps\").count());\n     }\n \n     #[test]\n     fn check() {\n         let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args, None);\n+        let cmd = ClippyCmd::new(args);\n \n         assert_eq!(\"check\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WRAPPER\", cmd.path_env());\n@@ -250,7 +252,7 @@ mod tests {\n         let args = \"cargo clippy -Zunstable-options\"\n             .split_whitespace()\n             .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args, None);\n+        let cmd = ClippyCmd::new(args);\n \n         assert_eq!(\"check\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n@@ -261,43 +263,53 @@ mod tests {\n         let args = \"cargo clippy -- -W clippy::as_conversions\"\n             .split_whitespace()\n             .map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+\n         let rustflags = None;\n-        let cmd = ClippyCmd::new(args, rustflags);\n+        let cmd = cmd.into_std_cmd(rustflags);\n \n-        assert_eq!(\"-W clippy::as_conversions\", cmd.rustflags.unwrap());\n+        assert!(cmd\n+            .get_envs()\n+            .any(|(key, val)| key == \"RUSTFLAGS\" && val == Some(OsStr::new(\"-W clippy::as_conversions\"))));\n     }\n \n     #[test]\n     fn clippy_args_respect_existing_rustflags() {\n         let args = \"cargo clippy -- -D clippy::await_holding_lock\"\n             .split_whitespace()\n             .map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+\n         let rustflags = Some(r#\"--cfg feature=\"some_feat\"\"#.into());\n-        let cmd = ClippyCmd::new(args, rustflags);\n+        let cmd = cmd.into_std_cmd(rustflags);\n \n-        assert_eq!(\n-            r#\"-D clippy::await_holding_lock --cfg feature=\"some_feat\"\"#,\n-            cmd.rustflags.unwrap()\n-        );\n+        assert!(cmd.get_envs().any(|(key, val)| key == \"RUSTFLAGS\"\n+            && val == Some(OsStr::new(r#\"-D clippy::await_holding_lock --cfg feature=\"some_feat\"\"#))));\n     }\n \n     #[test]\n     fn no_env_change_if_no_clippy_args() {\n         let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+\n         let rustflags = Some(r#\"--cfg feature=\"some_feat\"\"#.into());\n-        let cmd = ClippyCmd::new(args, rustflags);\n+        let cmd = cmd.into_std_cmd(rustflags);\n \n-        assert!(cmd.clippy_args.is_none());\n-        assert!(cmd.rustflags.is_none());\n+        assert!(!cmd\n+            .get_envs()\n+            .any(|(key, _)| key == \"RUSTFLAGS\" || key == \"CLIPPY_ARGS\"));\n     }\n \n     #[test]\n     fn no_env_change_if_no_clippy_args_nor_rustflags() {\n         let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n+        let cmd = ClippyCmd::new(args);\n+\n         let rustflags = None;\n-        let cmd = ClippyCmd::new(args, rustflags);\n+        let cmd = cmd.into_std_cmd(rustflags);\n \n-        assert!(cmd.clippy_args.is_none());\n-        assert!(cmd.rustflags.is_none());\n+        assert!(!cmd\n+            .get_envs()\n+            .any(|(key, _)| key == \"RUSTFLAGS\" || key == \"CLIPPY_ARGS\"))\n     }\n }"}]}