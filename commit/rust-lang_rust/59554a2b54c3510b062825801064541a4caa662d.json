{"sha": "59554a2b54c3510b062825801064541a4caa662d", "node_id": "C_kwDOAAsO6NoAKDU5NTU0YTJiNTRjMzUxMGIwNjI4MjU4MDEwNjQ1NDFhNGNhYTY2MmQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T15:25:04Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T10:06:08Z"}, "message": "Avoid rendering empty annotations", "tree": {"sha": "761ab5e9a5860b7d87dd9022326a9c5dc01f4094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/761ab5e9a5860b7d87dd9022326a9c5dc01f4094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59554a2b54c3510b062825801064541a4caa662d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59554a2b54c3510b062825801064541a4caa662d", "html_url": "https://github.com/rust-lang/rust/commit/59554a2b54c3510b062825801064541a4caa662d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59554a2b54c3510b062825801064541a4caa662d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2a4797a26b0effe15815b403be4ba752cc7a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2a4797a26b0effe15815b403be4ba752cc7a0b", "html_url": "https://github.com/rust-lang/rust/commit/2e2a4797a26b0effe15815b403be4ba752cc7a0b"}], "stats": {"total": 289, "additions": 94, "deletions": 195}, "files": [{"sha": "c62e358e804cade724910bb8f95020b3853dfc84", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -1408,51 +1408,58 @@ impl EmitterWriter {\n             if !sm.ensure_source_file_source_present(annotated_file.file.clone()) {\n                 if !self.short_message {\n                     // We'll just print an unannotated message.\n-                    for (annotation_id, line) in annotated_file.lines.into_iter().enumerate() {\n+                    for (annotation_id, line) in annotated_file.lines.iter().enumerate() {\n                         let mut annotations = line.annotations.clone();\n                         annotations.sort_by_key(|a| Reverse(a.start_col));\n                         let mut line_idx = buffer.num_lines();\n-                        buffer.append(\n-                            line_idx,\n-                            &format!(\n-                                \"{}:{}:{}\",\n-                                sm.filename_for_diagnostics(&annotated_file.file.name),\n-                                sm.doctest_offset_line(&annotated_file.file.name, line.line_index),\n-                                annotations[0].start_col + 1,\n-                            ),\n-                            Style::LineAndColumn,\n-                        );\n-                        if annotation_id == 0 {\n-                            buffer.prepend(line_idx, \"--> \", Style::LineNumber);\n+\n+                        let labels: Vec<_> = annotations\n+                            .iter()\n+                            .filter_map(|a| Some((a.label.as_ref()?, a.is_primary)))\n+                            .filter(|(l, _)| !l.is_empty())\n+                            .collect();\n+\n+                        if annotation_id == 0 || !labels.is_empty() {\n+                            buffer.append(\n+                                line_idx,\n+                                &format!(\n+                                    \"{}:{}:{}\",\n+                                    sm.filename_for_diagnostics(&annotated_file.file.name),\n+                                    sm.doctest_offset_line(\n+                                        &annotated_file.file.name,\n+                                        line.line_index\n+                                    ),\n+                                    annotations[0].start_col + 1,\n+                                ),\n+                                Style::LineAndColumn,\n+                            );\n+                            if annotation_id == 0 {\n+                                buffer.prepend(line_idx, \"--> \", Style::LineNumber);\n+                            } else {\n+                                buffer.prepend(line_idx, \"::: \", Style::LineNumber);\n+                            }\n                             for _ in 0..max_line_num_len {\n                                 buffer.prepend(line_idx, \" \", Style::NoStyle);\n                             }\n                             line_idx += 1;\n-                        };\n-                        for (i, annotation) in annotations.into_iter().enumerate() {\n-                            if let Some(label) = &annotation.label {\n-                                if !label.is_empty() {\n-                                    let style = if annotation.is_primary {\n-                                        Style::LabelPrimary\n-                                    } else {\n-                                        Style::LabelSecondary\n-                                    };\n-                                    if annotation_id == 0 {\n-                                        buffer.prepend(line_idx, \" |\", Style::LineNumber);\n-                                        for _ in 0..max_line_num_len {\n-                                            buffer.prepend(line_idx, \" \", Style::NoStyle);\n-                                        }\n-                                        line_idx += 1;\n-                                        buffer.append(line_idx + i, \" = note: \", style);\n-                                        for _ in 0..max_line_num_len {\n-                                            buffer.prepend(line_idx, \" \", Style::NoStyle);\n-                                        }\n-                                    } else {\n-                                        buffer.append(line_idx + i, \": \", style);\n-                                    }\n-                                    buffer.append(line_idx + i, label, style);\n-                                }\n+                        }\n+                        for (label, is_primary) in labels.into_iter() {\n+                            let style = if is_primary {\n+                                Style::LabelPrimary\n+                            } else {\n+                                Style::LabelSecondary\n+                            };\n+                            buffer.prepend(line_idx, \" |\", Style::LineNumber);\n+                            for _ in 0..max_line_num_len {\n+                                buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                            }\n+                            line_idx += 1;\n+                            buffer.append(line_idx, \" = note: \", style);\n+                            for _ in 0..max_line_num_len {\n+                                buffer.prepend(line_idx, \" \", Style::NoStyle);\n                             }\n+                            buffer.append(line_idx, label, style);\n+                            line_idx += 1;\n                         }\n                     }\n                 }"}, {"sha": "87a5d67a420c498c2a7926dfbaf6f4300eb83d5f", "filename": "src/test/ui/closures/closure-expected.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -10,9 +10,6 @@ LL |     let y = x.or_else(4);\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Option::<T>::or_else`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n \n error: aborting due to previous error\n "}, {"sha": "64e3b51ea713bf25e60f05b4ab0a9befcba53042", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -19,10 +19,6 @@ LL |     let t = thread::spawn(|| {\n    |                           ^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n \n error[E0277]: `Sender<()>` cannot be shared between threads safely\n   --> $DIR/closure-move-sync.rs:18:19\n@@ -41,10 +37,6 @@ LL |     thread::spawn(|| tx.send(()).unwrap());\n    |                   ^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n \n error: aborting due to 2 previous errors\n "}, {"sha": "449cd0b317757bfef4d48f71d1fd4e9d1a84fa6c", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -10,9 +10,6 @@ LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n \n error: aborting due to previous error\n "}, {"sha": "e829bac196f7962b27bb1ef0554b7717356d0879", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -6,8 +6,12 @@ LL |     match x { }\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |"}, {"sha": "0f179259356d50430ed09f38bf96f01e2762ed25", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -8,7 +8,9 @@ LL |     let Some(y) = x;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "903422f3b9b8a59ba9b02f526ce33cd634bde089", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -6,7 +6,9 @@ LL |     for Some(x) in xs {}\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n \n error: aborting due to previous error"}, {"sha": "2f9d10d70a2fea087ef955ca6a2ad9e22dcb4108", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -22,9 +22,6 @@ LL | |     });\n    = help: the trait `FnOnce<({integer},)>` is not implemented for `Option<_>`\n note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e253e4791e8bd095b8941ffc4ce6f5a3f47e20fa", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -8,7 +8,9 @@ LL |     let Ok(_x) = foo();\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, !>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-$SRC_DIR/core/src/result.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, !>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "01b37f2acaa14444d7b043e2d1ab7c31572b7772", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -12,9 +12,6 @@ LL |         .get(&\"key\".into())\n              where T: ?Sized;\n note: required by a bound in `HashMap::<K, V, S>::get`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-$SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-$SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-$SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n help: consider specifying the generic argument\n    |\n LL |         .get::<Q>(&\"key\".into())"}, {"sha": "fd7d061b6b2e5627459e5ea11968c9539c345ff8", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -37,10 +37,6 @@ LL |     const_eval_select((), 42, 0xDEADBEEF);\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n \n error: this argument must be a function item\n   --> $DIR/const-eval-select-bad.rs:10:31\n@@ -63,10 +59,6 @@ LL |     const_eval_select((), 42, 0xDEADBEEF);\n    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n \n error[E0271]: expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it returns `bool`\n   --> $DIR/const-eval-select-bad.rs:32:34\n@@ -78,10 +70,6 @@ LL |     const_eval_select((1,), foo, bar);\n    |\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/const-eval-select-bad.rs:37:32\n@@ -98,10 +86,6 @@ LL |     const_eval_select((true,), foo, baz);\n               found function signature `fn(i32) -> _`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n-$SRC_DIR/core/src/intrinsics.rs:LL:COL\n \n error: this argument must be a `const fn`\n   --> $DIR/const-eval-select-bad.rs:42:29"}, {"sha": "1c5b76fbfc10b1e730ce7c738f264d4d5a05c998", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -6,8 +6,6 @@ LL |     b.sort();\n    |\n note: required by a bound in `slice::<impl [T]>::sort`\n   --> $SRC_DIR/alloc/src/slice.rs:LL:COL\n-$SRC_DIR/alloc/src/slice.rs:LL:COL\n-$SRC_DIR/alloc/src/slice.rs:LL:COL\n help: consider annotating `X` with `#[derive(Ord)]`\n    |\n LL | #[derive(Ord)]"}, {"sha": "8f934481d85db6be1d86ae91290db0ab1fc87930", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -9,9 +9,6 @@ LL |     \"\".chars().fold(|_, _| (), ());\n    = help: the trait `FnMut<(_, char)>` is not implemented for `()`\n note: required by a bound in `fold`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to previous error\n "}, {"sha": "b667ae0a789375cf62cf29eb460968793be24459", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -8,9 +8,6 @@ LL |         .cloned()\n                    found type `u8`\n note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:12:10"}, {"sha": "49702c47658638bd28315df55d7b44ff327b5667", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -8,9 +8,6 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n                   found tuple `(&_, &_)`\n note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14"}, {"sha": "9d2c315e4dbca92721686334dc03c64e4135aa47", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -32,8 +32,6 @@ LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_rece\n    |                                    `Iterator::Item` is `&(_, _, _)` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cec482a53baa91b3e962056d017c836247f8742a", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -15,8 +15,6 @@ LL |     let x2: Vec<f64> = x1.into_iter().collect();\n    |                           ^^^^^^^^^^^ `Iterator::Item` is `&f64` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n   --> $DIR/issue-66923-show-error-for-correct-call.rs:12:29\n@@ -36,8 +34,6 @@ LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n    |                 ^^^^^^^^^^^ `Iterator::Item` is `&f64` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e38745cc10e1f3840e1081acc2e500700d827d15", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -7,8 +7,6 @@ LL |     let whatever: [u32; 10] = (0..10).collect();\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[u32; 10]`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to previous error\n "}, {"sha": "29fff8c51c63be7ca4ee0b096c52f1ee5d522bb5", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -17,8 +17,6 @@ LL |     let some_generated_vec = (0..10).collect();\n    = help: the trait `Sized` is not implemented for `[i32]`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n   --> $DIR/collect-into-slice.rs:6:38\n@@ -29,8 +27,6 @@ LL |     let some_generated_vec = (0..10).collect();\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[i32]`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to 3 previous errors\n "}, {"sha": "84bac7833f67b029b56e09e1b5c54ac2d4eaf946", "filename": "src/test/ui/iterators/invalid-iterator-chain.stderr", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -22,9 +22,6 @@ LL | |         });\n    | |__________^ `Iterator::Item` changed to `()` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:18:14\n@@ -57,9 +54,6 @@ LL |             .map(|x| { x; })\n    |              ^^^^^^^^^^^^^^^ `Iterator::Item` changed to `()` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `f64`\n   --> $DIR/invalid-iterator-chain.rs:28:14\n@@ -88,9 +82,6 @@ LL |             .map(|x| { x + 1.0 })\n    |              -------------------- `Iterator::Item` remains `f64` here\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:30:54\n@@ -112,9 +103,6 @@ LL |     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>());\n    |                    this expression has type `Vec<{integer}>`\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `&()`\n   --> $DIR/invalid-iterator-chain.rs:31:40\n@@ -135,9 +123,6 @@ LL |     println!(\"{}\", vec![(), ()].iter().sum::<i32>());\n    |                    this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a value of type `Vec<i32>` cannot be built from an iterator over elements of type `()`\n   --> $DIR/invalid-iterator-chain.rs:40:25\n@@ -167,8 +152,6 @@ LL |       let f = e.filter(|_| false);\n    |                 ----------------- `Iterator::Item` remains `()` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0b206f31e7b6ebdd1f3c083c63eaa4bb9a947ce9", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -7,8 +7,6 @@ LL |         std::iter::empty().collect()\n    = help: the trait `FromIterator<_>` is not implemented for `Bar`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to previous error\n "}, {"sha": "d8ac39a4f27a37869e5b72fab32d9d38730e42a3", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion4.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -7,8 +7,6 @@ LL |     x = std::iter::empty().collect();\n    = help: the trait `FromIterator<_>` is not implemented for `Foo`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a value of type `impl Debug` cannot be built from an iterator over elements of type `_`\n   --> $DIR/recursion4.rs:19:28\n@@ -19,8 +17,6 @@ LL |     x = std::iter::empty().collect();\n    = help: the trait `FromIterator<_>` is not implemented for `impl Debug`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ecab9f024a123a2de0b9d45eac0b9846ddfb9e8", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -128,9 +128,6 @@ LL | fn foo() {}\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n   --> $DIR/closure-arg-count.rs:27:57\n@@ -144,9 +141,6 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:29:57\n@@ -161,9 +155,6 @@ LL | fn qux(x: usize, y: usize) {}\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n   --> $DIR/closure-arg-count.rs:32:45\n@@ -175,9 +166,6 @@ LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n    |\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:35:10"}, {"sha": "ebff0c19e2bd2cf69e5712a020ad4aae0eeb0159", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -10,9 +10,6 @@ LL |     a.iter().map(|_: (u32, u32)| 45);\n               found closure signature `fn((u32, u32)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14\n@@ -26,9 +23,6 @@ LL |     a.iter().map(|_: &(u16, u16)| 45);\n               found closure signature `for<'a> fn(&'a (u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:5:14\n@@ -42,9 +36,6 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n               found closure signature `fn((u16, u16)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4afe0e6a664d472eaaaa28b25c414cb31f3e4def", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -10,9 +10,6 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n               found closure signature `for<'a> fn(&'a str) -> _`\n note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:48]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55"}, {"sha": "a5f38dd53666151a272d2893d6c2447b0895f5e8", "filename": "src/test/ui/mismatched_types/issue-47706-trait.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706-trait.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -10,9 +10,6 @@ LL |         None::<()>.map(Self::f);\n    |\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n \n error: aborting due to previous error\n "}, {"sha": "d9d408844d0a49140737ca05f8007dfa68541174", "filename": "src/test/ui/mismatched_types/issue-47706.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -11,9 +11,6 @@ LL |         self.foo.map(Foo::new)\n    |\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9"}, {"sha": "d3b7525072ff4748addf112f24b185d8ac0e0238", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -8,8 +8,6 @@ LL |     a.unwrap();\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`\n note: required by a bound in `Result::<T, E>::unwrap`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-$SRC_DIR/core/src/result.rs:LL:COL\n-$SRC_DIR/core/src/result.rs:LL:COL\n help: consider annotating `Foo` with `#[derive(Debug)]`\n    |\n LL | #[derive(Debug)]"}, {"sha": "75561f4119aa543d432b53da3df5bdf2957a5074", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -31,10 +31,6 @@ LL |     thread::spawn(move|| {\n    |                   ^^^^^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n-$SRC_DIR/std/src/thread/mod.rs:LL:COL\n \n error: aborting due to previous error\n "}, {"sha": "2a316dba778fe8f0163c50c5178e3ae22e287f7f", "filename": "src/test/ui/on-unimplemented/sum.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -17,9 +17,6 @@ LL |     vec![(), ()].iter().sum::<i32>();\n    |     this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::sum`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error[E0277]: a value of type `i32` cannot be made by multiplying all elements of type `&()` from an iterator\n   --> $DIR/sum.rs:7:25\n@@ -40,9 +37,6 @@ LL |     vec![(), ()].iter().product::<i32>();\n    |     this expression has type `Vec<()>`\n note: required by a bound in `std::iter::Iterator::product`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-$SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2a016048f2f7a03c38464de94af8c4ba0d0021a0", "filename": "src/test/ui/pattern/suggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -6,7 +6,9 @@ LL |     match Some(1) {\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "17e1a2304a13c0c8011481553170e1886fc11e5e", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -66,7 +66,9 @@ LL |     match None {\n    |\n note: `Option<HiddenEnum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<HiddenEnum>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |"}, {"sha": "59d7bcd4b5e799d443b90374b7b18d6b2eef5d10", "filename": "src/test/ui/pattern/usefulness/issue-3601.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -6,9 +6,6 @@ LL |         box NodeKind::Element(ed) => match ed.kind {\n    |\n note: `Box<ElementKind>` defined here\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL\n    = note: the matched value is of type `Box<ElementKind>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "e4dd35a59958ef37f2dc2ed58508168472bec0af", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -19,8 +19,11 @@ LL |     match Some(Some(North)) {\n    |\n note: `Option<Option<Direction>>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n-: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<Option<Direction>>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "86f75d15cfde7736c2294be1373bd6c9b605993b", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -6,7 +6,9 @@ LL |     match private::DATA {\n    |\n note: `Option<Private>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<Private>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "e2260f50bfef2b462fa795ace1352d6a714f7916", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -36,7 +36,9 @@ LL |     match Some(10) {\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-$SRC_DIR/core/src/option.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "79f2001da005510f915eb3f696d550df0364f3c8", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -14,10 +14,6 @@ LL | | }\n    = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `ProcMacro::custom_derive`\n   --> $SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n-$SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n-$SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n-$SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n-$SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n \n error: aborting due to previous error\n "}, {"sha": "86ad6aa847c9fe5adfeb0947cd19d921ffe62b3d", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -8,7 +8,9 @@ LL |     let Ok(x) = res;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, &R<'_>>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-$SRC_DIR/core/src/result.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, &R<'_>>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "ca4b86ba3065b79af5c536f86b0f061e3743cd8e", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -63,9 +63,6 @@ LL |     s.get_unchecked_mut(1);\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n-$SRC_DIR/core/src/str/mod.rs:LL:COL\n-$SRC_DIR/core/src/str/mod.rs:LL:COL\n-$SRC_DIR/core/src/str/mod.rs:LL:COL\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:7"}, {"sha": "8ab6414d4d8e3a73ae973ff0bb569edd6d63efdb", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -12,9 +12,6 @@ LL |     opts.get(opt.as_ref());\n              where T: ?Sized;\n note: required by a bound in `HashMap::<K, V, S>::get`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-$SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-$SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n-$SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n help: consider specifying the generic argument\n    |\n LL |     opts.get::<Q>(opt.as_ref());"}, {"sha": "d33a61ca8485cbf36db95e3b18ee082188679d02", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -6,7 +6,9 @@ LL |     let _ = match x {\n    |\n note: `Result<u32, &Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-$SRC_DIR/core/src/result.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, &Void>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n@@ -83,7 +85,9 @@ LL |     let _ = match x {\n    |\n note: `Result<u32, Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-$SRC_DIR/core/src/result.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, Void>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n@@ -101,7 +105,9 @@ LL |     let Ok(x) = x;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-$SRC_DIR/core/src/result.rs:LL:COL: not covered\n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+   = note: not covered\n    = note: the matched value is of type `Result<u32, Void>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |"}, {"sha": "db42ed9baf1ed4e3fe6d1655866f02847c37b4d1", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -10,9 +10,9 @@ LL |   trait Foo {\n LL |       let _z = y.clone();\n    |                  ^^^^^ method cannot be called on `Box<dyn Foo>` due to unsatisfied trait bounds\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL: doesn't satisfy `Box<dyn Foo>: Clone`\n+  ::: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+   = note: doesn't satisfy `Box<dyn Foo>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n            `dyn Foo: Sized`"}, {"sha": "de6611324cac137c006a4ff24f9ad56470c9c13b", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59554a2b54c3510b062825801064541a4caa662d/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=59554a2b54c3510b062825801064541a4caa662d", "patch": "@@ -7,9 +7,9 @@ LL |   struct R {\n LL |       let _j = i.clone();\n    |                  ^^^^^ method cannot be called on `Box<R>` due to unsatisfied trait bounds\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL: doesn't satisfy `Box<R>: Clone`\n+  ::: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+   = note: doesn't satisfy `Box<R>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n            `R: Clone`"}]}