{"sha": "df3ea680eae217a9677495d690dbf768ad7614e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmM2VhNjgwZWFlMjE3YTk2Nzc0OTVkNjkwZGJmNzY4YWQ3NjE0ZTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T15:50:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T15:50:56Z"}, "message": "Tidy lexer.", "tree": {"sha": "e15da77f6fee6eaecfec0b15b0cb1decf6dc87b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15da77f6fee6eaecfec0b15b0cb1decf6dc87b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df3ea680eae217a9677495d690dbf768ad7614e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df3ea680eae217a9677495d690dbf768ad7614e0", "html_url": "https://github.com/rust-lang/rust/commit/df3ea680eae217a9677495d690dbf768ad7614e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df3ea680eae217a9677495d690dbf768ad7614e0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2745a5ebb2a174b2d71be32da7d4b95295eb41e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2745a5ebb2a174b2d71be32da7d4b95295eb41e8", "html_url": "https://github.com/rust-lang/rust/commit/2745a5ebb2a174b2d71be32da7d4b95295eb41e8"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "8885e6e0dff939e658b57bbf119d525fc216f8e7", "filename": "src/comp/fe/lexer.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/df3ea680eae217a9677495d690dbf768ad7614e0/src%2Fcomp%2Ffe%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3ea680eae217a9677495d690dbf768ad7614e0/src%2Fcomp%2Ffe%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Flexer.rs?ref=df3ea680eae217a9677495d690dbf768ad7614e0", "patch": "@@ -56,16 +56,24 @@ fn next_token(stdio_reader rdr) -> token.token {\n     auto accum_str = \"\";\n     auto accum_int = 0;\n \n+    fn next(stdio_reader rdr) -> char {\n+        ret rdr.getc() as char;\n+    }\n+\n+    fn forget(stdio_reader rdr, char c) {\n+        rdr.ungetc(c as int);\n+    }\n+\n     c = consume_any_whitespace(rdr, c);\n \n     if (c == eof) { ret token.EOF(); }\n \n     if (is_alpha(c)) {\n         while (is_alpha(c)) {\n             accum_str += (c as u8);\n-            c = rdr.getc() as char;\n+            c = next(rdr);\n         }\n-        rdr.ungetc(c as int);\n+        forget(rdr, c);\n         ret token.IDENT(accum_str);\n     }\n \n@@ -75,9 +83,9 @@ fn next_token(stdio_reader rdr) -> token.token {\n             while (is_dec_digit(c)) {\n                 accum_int *= 10;\n                 accum_int += (c as int) - ('0' as int);\n-                c = rdr.getc() as char;\n+                c = next(rdr);\n             }\n-            rdr.ungetc(c as int);\n+            forget(rdr, c);\n             ret token.LIT_INT(accum_int);\n         }\n     }\n@@ -88,7 +96,7 @@ fn next_token(stdio_reader rdr) -> token.token {\n         if (c2 == '=') {\n             ret token.OPEQ(op);\n         } else {\n-            rdr.ungetc(c2 as int);\n+            forget(rdr, c2);\n             ret token.OP(op);\n         }\n     }\n@@ -109,17 +117,17 @@ fn next_token(stdio_reader rdr) -> token.token {\n \n         // Multi-byte tokens.\n         case ('=') {\n-            auto c2 = rdr.getc() as char;\n+            auto c2 = next(rdr);\n             if (c2 == '=') {\n                 ret token.OP(token.EQEQ());\n             } else {\n-                rdr.ungetc(c2 as int);\n+                forget(rdr, c2);\n                 ret token.OP(token.EQ());\n             }\n         }\n \n         case ('-') {\n-            auto c2 = rdr.getc() as char;\n+            auto c2 = next(rdr);\n             if (c2 == '>') {\n                 ret token.RARROW();\n             } else {\n@@ -128,7 +136,7 @@ fn next_token(stdio_reader rdr) -> token.token {\n         }\n \n         case ('&') {\n-            auto c2 = rdr.getc() as char;\n+            auto c2 = next(rdr);\n             if (c2 == '&') {\n                 ret token.OP(token.ANDAND());\n             } else {\n@@ -137,27 +145,27 @@ fn next_token(stdio_reader rdr) -> token.token {\n         }\n \n         case ('+') {\n-            ret op_or_opeq(rdr, rdr.getc() as char, token.PLUS());\n+            ret op_or_opeq(rdr, next(rdr), token.PLUS());\n         }\n \n         case ('*') {\n-            ret op_or_opeq(rdr, rdr.getc() as char, token.STAR());\n+            ret op_or_opeq(rdr, next(rdr), token.STAR());\n         }\n \n         case ('/') {\n-            ret op_or_opeq(rdr, rdr.getc() as char, token.STAR());\n+            ret op_or_opeq(rdr, next(rdr), token.STAR());\n         }\n \n         case ('!') {\n-            ret op_or_opeq(rdr, rdr.getc() as char, token.NOT());\n+            ret op_or_opeq(rdr, next(rdr), token.NOT());\n         }\n \n         case ('^') {\n-            ret op_or_opeq(rdr, rdr.getc() as char, token.CARET());\n+            ret op_or_opeq(rdr, next(rdr), token.CARET());\n         }\n \n         case ('%') {\n-            ret op_or_opeq(rdr, rdr.getc() as char, token.PERCENT());\n+            ret op_or_opeq(rdr, next(rdr), token.PERCENT());\n         }\n \n     }"}]}