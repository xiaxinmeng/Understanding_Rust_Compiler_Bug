{"sha": "24dbf9c1123716ab0589772b301468d34a7a8a9b", "node_id": "C_kwDOAAsO6NoAKDI0ZGJmOWMxMTIzNzE2YWIwNTg5NzcyYjMwMTQ2OGQzNGE3YThhOWI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-07T14:32:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-08T14:40:37Z"}, "message": "Only assign value in remove_const.", "tree": {"sha": "21f57fe05c71936e1f1179ba3017d582eb6ada31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21f57fe05c71936e1f1179ba3017d582eb6ada31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24dbf9c1123716ab0589772b301468d34a7a8a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24dbf9c1123716ab0589772b301468d34a7a8a9b", "html_url": "https://github.com/rust-lang/rust/commit/24dbf9c1123716ab0589772b301468d34a7a8a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24dbf9c1123716ab0589772b301468d34a7a8a9b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081bc75743c1d6f4a3f41df4444f70f82fbb79ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/081bc75743c1d6f4a3f41df4444f70f82fbb79ab", "html_url": "https://github.com/rust-lang/rust/commit/081bc75743c1d6f4a3f41df4444f70f82fbb79ab"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "1cc4e21ea51d920bb541a82abe9d44ceacd67c44", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24dbf9c1123716ab0589772b301468d34a7a8a9b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dbf9c1123716ab0589772b301468d34a7a8a9b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=24dbf9c1123716ab0589772b301468d34a7a8a9b", "patch": "@@ -1,8 +1,6 @@\n //! Propagates constants for early reporting of statically known\n //! assertion failures\n \n-use std::cell::Cell;\n-\n use either::Right;\n \n use rustc_const_eval::const_eval::CheckAlignment;\n@@ -25,8 +23,8 @@ use rustc_trait_selection::traits;\n use crate::MirPass;\n use rustc_const_eval::interpret::{\n     self, compile_time_machine, AllocId, ConstAllocation, ConstValue, CtfeValidationMode, Frame,\n-    ImmTy, Immediate, InterpCx, InterpResult, LocalState, LocalValue, MemoryKind, OpTy, PlaceTy,\n-    Pointer, Scalar, StackPopCleanup, StackPopUnwind,\n+    ImmTy, Immediate, InterpCx, InterpResult, LocalValue, MemoryKind, OpTy, PlaceTy, Pointer,\n+    Scalar, StackPopCleanup, StackPopUnwind,\n };\n \n /// The maximum number of bytes that we'll allocate space for a local or the return value.\n@@ -437,10 +435,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// Remove `local` from the pool of `Locals`. Allows writing to them,\n     /// but not reading from them anymore.\n     fn remove_const(ecx: &mut InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>, local: Local) {\n-        ecx.frame_mut().locals[local] = LocalState {\n-            value: LocalValue::Live(interpret::Operand::Immediate(interpret::Immediate::Uninit)),\n-            layout: Cell::new(None),\n-        };\n+        ecx.frame_mut().locals[local].value =\n+            LocalValue::Live(interpret::Operand::Immediate(interpret::Immediate::Uninit));\n     }\n \n     /// Returns the value, if any, of evaluating `c`."}, {"sha": "f89454170067bb933e821e06db925ea5990524a0", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24dbf9c1123716ab0589772b301468d34a7a8a9b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dbf9c1123716ab0589772b301468d34a7a8a9b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=24dbf9c1123716ab0589772b301468d34a7a8a9b", "patch": "@@ -1,13 +1,11 @@\n //! Propagates constants for early reporting of statically known\n //! assertion failures\n \n-use std::cell::Cell;\n-\n use either::{Left, Right};\n \n use rustc_const_eval::interpret::Immediate;\n use rustc_const_eval::interpret::{\n-    self, InterpCx, InterpResult, LocalState, LocalValue, MemoryKind, OpTy, Scalar, StackPopCleanup,\n+    self, InterpCx, InterpResult, LocalValue, MemoryKind, OpTy, Scalar, StackPopCleanup,\n };\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n@@ -254,10 +252,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// Remove `local` from the pool of `Locals`. Allows writing to them,\n     /// but not reading from them anymore.\n     fn remove_const(ecx: &mut InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>, local: Local) {\n-        ecx.frame_mut().locals[local] = LocalState {\n-            value: LocalValue::Live(interpret::Operand::Immediate(interpret::Immediate::Uninit)),\n-            layout: Cell::new(None),\n-        };\n+        ecx.frame_mut().locals[local].value =\n+            LocalValue::Live(interpret::Operand::Immediate(interpret::Immediate::Uninit));\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {"}]}