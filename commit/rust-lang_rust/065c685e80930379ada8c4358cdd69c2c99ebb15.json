{"sha": "065c685e80930379ada8c4358cdd69c2c99ebb15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NWM2ODVlODA5MzAzNzlhZGE4YzQzNThjZGQ2OWMyYzk5ZWJiMTU=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-06T03:41:25Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-06T04:31:18Z"}, "message": "Update E0223 to the new format", "tree": {"sha": "e063d51cdace0b694869fb7cc6a0cd2602c6ae65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e063d51cdace0b694869fb7cc6a0cd2602c6ae65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/065c685e80930379ada8c4358cdd69c2c99ebb15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/065c685e80930379ada8c4358cdd69c2c99ebb15", "html_url": "https://github.com/rust-lang/rust/commit/065c685e80930379ada8c4358cdd69c2c99ebb15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/065c685e80930379ada8c4358cdd69c2c99ebb15/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b30eff7ba72a78e31acd61a2b6931919a0ad62e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30eff7ba72a78e31acd61a2b6931919a0ad62e8", "html_url": "https://github.com/rust-lang/rust/commit/b30eff7ba72a78e31acd61a2b6931919a0ad62e8"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "953c6b56948cb194480fef7d6a5a8c5273b9a1c7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=065c685e80930379ada8c4358cdd69c2c99ebb15", "patch": "@@ -1211,10 +1211,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                         type_str: &str,\n                                         trait_str: &str,\n                                         name: &str) {\n-        span_err!(self.tcx().sess, span, E0223,\n-                  \"ambiguous associated type; specify the type using the syntax \\\n-                   `<{} as {}>::{}`\",\n-                  type_str, trait_str, name);\n+        struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\")\n+            .span_label(span, &format!(\"ambiguous associated type\"))\n+            .note(&format!(\"specify the type using the syntax `<{} as {}>::{}`\",\n+                  type_str, trait_str, name))\n+            .emit();\n+\n     }\n \n     // Search for a bound on a type parameter which includes the associated item"}, {"sha": "56057b372599dc284593b08489ae84eeab283dd1", "filename": "src/test/compile-fail/E0223.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2FE0223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2FE0223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0223.rs?ref=065c685e80930379ada8c4358cdd69c2c99ebb15", "patch": "@@ -11,5 +11,8 @@\n trait MyTrait { type X; }\n \n fn main() {\n-    let foo: MyTrait::X; //~ ERROR E0223\n+    let foo: MyTrait::X;\n+    //~^ ERROR ambiguous associated type\n+    //~| NOTE ambiguous associated type\n+    //~| NOTE specify the type using the syntax `<Type as MyTrait>::X`\n }"}, {"sha": "ff886e63dc59ef1aebab668fe16ce51d5edcd29c", "filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs?ref=065c685e80930379ada8c4358cdd69c2c99ebb15", "patch": "@@ -15,15 +15,21 @@ trait Get {\n \n fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n //~^ ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<Type as Get>::Value`\n \n trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;\n     //~^ ERROR ambiguous associated type\n+    //~| NOTE ambiguous associated type\n+    //~| NOTE specify the type using the syntax `<Type as Grab>::Value`\n }\n \n type X = std::ops::Deref::Target;\n //~^ ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<Type as std::ops::Deref>::Target`\n \n fn main() {\n }"}, {"sha": "5e3b777cc0b62cd845cb9af92176b3c64a590d8c", "filename": "src/test/compile-fail/issue-34209.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs?ref=065c685e80930379ada8c4358cdd69c2c99ebb15", "patch": "@@ -15,7 +15,9 @@ enum S {\n fn bug(l: S) {\n     match l {\n         S::B{ } => { },\n-        //~^ ERROR ambiguous associated type; specify the type using the syntax `<S as Trait>::B`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<S as Trait>::B`\n     }\n }\n "}, {"sha": "e685ebc272098b1264366b8a59b0905305a4829e", "filename": "src/test/compile-fail/qualified-path-params-2.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs?ref=065c685e80930379ada8c4358cdd69c2c99ebb15", "patch": "@@ -25,7 +25,11 @@ impl S {\n     fn f<T>() {}\n }\n \n-type A = <S as Tr>::A::f<u8>; //~ ERROR type parameters are not allowed on this type\n-//~^ ERROR ambiguous associated type; specify the type using the syntax `<<S as Tr>::A as Trait>::f`\n+type A = <S as Tr>::A::f<u8>;\n+//~^ ERROR type parameters are not allowed on this type\n+//~| NOTE type parameter not allowed\n+//~| ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<<S as Tr>::A as Trait>::f`\n \n fn main() {}"}, {"sha": "860e69fcaec4d46b6f0b43d12d17f4adc0ef8989", "filename": "src/test/compile-fail/self-impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2Fself-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065c685e80930379ada8c4358cdd69c2c99ebb15/src%2Ftest%2Fcompile-fail%2Fself-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself-impl.rs?ref=065c685e80930379ada8c4358cdd69c2c99ebb15", "patch": "@@ -31,9 +31,13 @@ impl SuperFoo for Bar {\n impl Bar {\n     fn f() {\n         let _: <Self>::Baz = true;\n-//~^ERROR: ambiguous associated type; specify the type using the syntax `<Bar as Trait>::Baz`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<Bar as Trait>::Baz`\n         let _: Self::Baz = true;\n-//~^ERROR: ambiguous associated type; specify the type using the syntax `<Bar as Trait>::Baz`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<Bar as Trait>::Baz`\n     }\n }\n "}]}