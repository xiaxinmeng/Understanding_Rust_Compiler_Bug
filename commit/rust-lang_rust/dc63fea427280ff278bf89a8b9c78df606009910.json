{"sha": "dc63fea427280ff278bf89a8b9c78df606009910", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNjNmZWE0MjcyODBmZjI3OGJmODlhOGI5Yzc4ZGY2MDYwMDk5MTA=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-11T12:06:33Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-11T12:25:19Z"}, "message": "Add basic support for array lengths in types\n\nThis recognizes `let a = [1u8, 2, 3]` as having type `[u8; 3]` instead\nof the previous `[u8; _]`. Byte strings and `[0u8; 2]` kinds of range\narray declarations are unsupported as before.\n\nI don't know why a bunch of our rustc tests had single quotes inside\nstrings un-escaped by `UPDATE_EXPECT=1 cargo t`, but I don't think it's\nbad? Maybe something in a nightly?", "tree": {"sha": "5fb6eae3df58a7c5bc3bc5a1220dd9a5d6d3ea86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb6eae3df58a7c5bc3bc5a1220dd9a5d6d3ea86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc63fea427280ff278bf89a8b9c78df606009910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc63fea427280ff278bf89a8b9c78df606009910", "html_url": "https://github.com/rust-lang/rust/commit/dc63fea427280ff278bf89a8b9c78df606009910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc63fea427280ff278bf89a8b9c78df606009910/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f0c92fd8311bccc001ddaf9eb72662d35e9836", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f0c92fd8311bccc001ddaf9eb72662d35e9836", "html_url": "https://github.com/rust-lang/rust/commit/77f0c92fd8311bccc001ddaf9eb72662d35e9836"}], "stats": {"total": 265, "additions": 155, "deletions": 110}, "files": [{"sha": "77d2a7a055e82061d63163a077bb89c616c578d2", "filename": "crates/hir_ty/src/consts.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsts.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -0,0 +1,20 @@\n+//! Handling of concrete const values\n+\n+/// A concrete constant value\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum ConstScalar {\n+    // for now, we only support the trivial case of constant evaluating the length of an array\n+    Usize(usize),\n+\n+    /// Case of an unknown value that rustc might know but we don't\n+    Unknown,\n+}\n+\n+impl std::fmt::Display for ConstScalar {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n+        match self {\n+            ConstScalar::Usize(us) => write!(fmt, \"{}\", us),\n+            ConstScalar::Unknown => write!(fmt, \"_\"),\n+        }\n+    }\n+}"}, {"sha": "8a42966973166b9cbe1d8167115257dab19e78c8", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -308,7 +308,7 @@ impl HirDisplay for Const {\n                 let param_data = &generics.params.consts[id.local_id];\n                 write!(f, \"{}\", param_data.name)\n             }\n-            ConstValue::Concrete(_) => write!(f, \"_\"),\n+            ConstValue::Concrete(c) => write!(f, \"{}\", c.interned),\n         }\n     }\n }"}, {"sha": "9aec8a236f3179188dab3cd3b6d8533f2799c6a2", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -3,7 +3,7 @@\n use std::iter::{repeat, repeat_with};\n use std::{mem, sync::Arc};\n \n-use chalk_ir::{cast::Cast, fold::Shift, Mutability, TyVariableKind};\n+use chalk_ir::{cast::Cast, fold::Shift, ConstData, Mutability, TyVariableKind};\n use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n@@ -15,15 +15,17 @@ use stdx::always;\n use syntax::ast::RangeOp;\n \n use crate::{\n-    autoderef, dummy_usize_const,\n+    autoderef,\n+    consts::ConstScalar,\n+    dummy_usize_const,\n     lower::lower_to_chalk_mutability,\n     mapping::from_chalk,\n     method_resolution, op,\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     traits::FnTrait,\n     utils::{generics, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n+    AdtId, Binders, CallableDefId, ConstValue, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n     ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n };\n \n@@ -717,11 +719,12 @@ impl<'a> InferenceContext<'a> {\n                     _ => self.table.new_type_var(),\n                 };\n \n-                match array {\n+                let len = match array {\n                     Array::ElementList(items) => {\n                         for expr in items.iter() {\n                             self.infer_expr_coerce(*expr, &Expectation::has_type(elem_ty.clone()));\n                         }\n+                        Some(items.len())\n                     }\n                     Array::Repeat { initializer, repeat } => {\n                         self.infer_expr_coerce(\n@@ -734,10 +737,20 @@ impl<'a> InferenceContext<'a> {\n                                 TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n                             ),\n                         );\n+                        // FIXME: support length for Repeat array expressions\n+                        None\n                     }\n-                }\n+                };\n \n-                TyKind::Array(elem_ty, dummy_usize_const()).intern(&Interner)\n+                let cd = ConstData {\n+                    ty: TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n+                    value: ConstValue::Concrete(chalk_ir::ConcreteConst {\n+                        interned: len\n+                            .map(|len| ConstScalar::Usize(len))\n+                            .unwrap_or(ConstScalar::Unknown),\n+                    }),\n+                };\n+                TyKind::Array(elem_ty, cd.intern(&Interner)).intern(&Interner)\n             }\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n@@ -747,6 +760,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 Literal::ByteString(..) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(&Interner);\n+\n                     let array_type =\n                         TyKind::Array(byte_type, dummy_usize_const()).intern(&Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(&Interner)"}, {"sha": "4cbc9cd4fa5877d18af34dd15310501777e7f029", "filename": "crates/hir_ty/src/interner.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -1,7 +1,7 @@\n //! Implementation of the Chalk `Interner` trait, which allows customizing the\n //! representation of the various objects Chalk deals with (types, goals etc.).\n \n-use crate::{chalk_db, tls, GenericArg};\n+use crate::{chalk_db, consts::ConstScalar, tls, GenericArg};\n use base_db::salsa::InternId;\n use chalk_ir::{Goal, GoalData};\n use hir_def::{\n@@ -31,6 +31,7 @@ impl_internable!(\n     InternedWrapper<chalk_ir::TyData<Interner>>,\n     InternedWrapper<chalk_ir::LifetimeData<Interner>>,\n     InternedWrapper<chalk_ir::ConstData<Interner>>,\n+    InternedWrapper<ConstScalar>,\n     InternedWrapper<Vec<chalk_ir::CanonicalVarKind<Interner>>>,\n     InternedWrapper<Vec<chalk_ir::ProgramClause<Interner>>>,\n     InternedWrapper<Vec<chalk_ir::QuantifiedWhereClause<Interner>>>,\n@@ -41,7 +42,7 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Interned<InternedWrapper<chalk_ir::TyData<Interner>>>;\n     type InternedLifetime = Interned<InternedWrapper<chalk_ir::LifetimeData<Self>>>;\n     type InternedConst = Interned<InternedWrapper<chalk_ir::ConstData<Self>>>;\n-    type InternedConcreteConst = ();\n+    type InternedConcreteConst = ConstScalar;\n     type InternedGenericArg = chalk_ir::GenericArgData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n     type InternedGoals = Vec<Goal<Self>>;\n@@ -245,10 +246,15 @@ impl chalk_ir::interner::Interner for Interner {\n     fn const_eq(\n         &self,\n         _ty: &Self::InternedType,\n-        _c1: &Self::InternedConcreteConst,\n-        _c2: &Self::InternedConcreteConst,\n+        c1: &Self::InternedConcreteConst,\n+        c2: &Self::InternedConcreteConst,\n     ) -> bool {\n-        true\n+        match (c1, c2) {\n+            (&ConstScalar::Usize(a), &ConstScalar::Usize(b)) => a == b,\n+            // we were previously assuming this to be true, I'm not whether true or false on\n+            // unknown values is safer.\n+            (_, _) => true,\n+        }\n     }\n \n     fn intern_generic_arg("}, {"sha": "d23eff513bdf06addcae66ac99b8862b30f6f04f", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -12,6 +12,7 @@ mod chalk_db;\n mod chalk_ext;\n mod infer;\n mod interner;\n+mod consts;\n mod lower;\n mod mapping;\n mod op;\n@@ -39,7 +40,7 @@ use chalk_ir::{\n };\n use hir_def::{expr::ExprId, type_ref::Rawness, TypeParamId};\n \n-use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n+use crate::{consts::ConstScalar, db::HirDatabase, display::HirDisplay, utils::generics};\n \n pub use autoderef::autoderef;\n pub use builder::TyBuilder;\n@@ -250,7 +251,9 @@ pub fn dummy_usize_const() -> Const {\n     let usize_ty = chalk_ir::TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner);\n     chalk_ir::ConstData {\n         ty: usize_ty,\n-        value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst { interned: () }),\n+        value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst {\n+            interned: ConstScalar::Unknown,\n+        }),\n     }\n     .intern(&Interner)\n }"}, {"sha": "9751b45e46f703c58a4458a28bd8fa0bb358ce5b", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -174,6 +174,8 @@ impl<'a> TyLoweringContext<'a> {\n             }\n             TypeRef::Array(inner) => {\n                 let inner_ty = self.lower_ty(inner);\n+                // FIXME: we don't have length info here because we don't store an expression for\n+                // the length\n                 TyKind::Array(inner_ty, dummy_usize_const()).intern(&Interner)\n             }\n             TypeRef::Slice(inner) => {"}, {"sha": "aad3d610e273a696aaab4ec9290d1f3561338fa2", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -55,7 +55,7 @@ fn coerce_places() {\n         impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n         impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             30..31 '_': &[T]\n             44..55 '{ loop {} }': T\n             46..53 'loop {}': !\n@@ -72,8 +72,8 @@ fn coerce_places() {\n             165..170 'gen()': *mut [U; _]\n             185..419 '{     ...rr); }': ()\n             195..198 'arr': &[u8; _]\n-            211..215 '&[1]': &[u8; _]\n-            212..215 '[1]': [u8; _]\n+            211..215 '&[1]': &[u8; 1]\n+            212..215 '[1]': [u8; 1]\n             213..214 '1': u8\n             226..227 'a': &[u8]\n             236..239 'arr': &[u8; _]\n@@ -90,7 +90,7 @@ fn coerce_places() {\n             302..314 'S { a: arr }': S<&[u8]>\n             309..312 'arr': &[u8; _]\n             325..326 'e': [&[u8]; _]\n-            340..345 '[arr]': [&[u8]; _]\n+            340..345 '[arr]': [&[u8]; 1]\n             341..344 'arr': &[u8; _]\n             355..356 'f': [&[u8]; _]\n             370..378 '[arr; 2]': [&[u8]; _]\n@@ -100,7 +100,7 @@ fn coerce_places() {\n             406..416 '(arr, arr)': (&[u8], &[u8])\n             407..410 'arr': &[u8; _]\n             412..415 'arr': &[u8; _]\n-        \"]],\n+        \"#]],\n     );\n }\n \n@@ -113,17 +113,17 @@ fn infer_let_stmt_coerce() {\n             let x: *const [isize] = &[1];\n         }\n         \",\n-        expect![[r\"\n+        expect![[r#\"\n             10..75 '{     ...[1]; }': ()\n             20..21 'x': &[isize]\n-            34..38 '&[1]': &[isize; _]\n-            35..38 '[1]': [isize; _]\n+            34..38 '&[1]': &[isize; 1]\n+            35..38 '[1]': [isize; 1]\n             36..37 '1': isize\n             48..49 'x': *const [isize]\n-            68..72 '&[1]': &[isize; _]\n-            69..72 '[1]': [isize; _]\n+            68..72 '&[1]': &[isize; 1]\n+            69..72 '[1]': [isize; 1]\n             70..71 '1': isize\n-        \"]],\n+        \"#]],\n     );\n }\n \n@@ -208,7 +208,7 @@ fn infer_if_coerce() {\n         #[lang = \"unsize\"]\n         pub trait Unsize<T: ?Sized> {}\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             10..11 'x': &[T]\n             27..38 '{ loop {} }': &[T]\n             29..36 'loop {}': !\n@@ -220,14 +220,14 @@ fn infer_if_coerce() {\n             71..96 '{     ...     }': &[i32]\n             81..84 'foo': fn foo<i32>(&[i32]) -> &[i32]\n             81..90 'foo(&[1])': &[i32]\n-            85..89 '&[1]': &[i32; _]\n-            86..89 '[1]': [i32; _]\n+            85..89 '&[1]': &[i32; 1]\n+            86..89 '[1]': [i32; 1]\n             87..88 '1': i32\n-            102..122 '{     ...     }': &[i32; _]\n-            112..116 '&[1]': &[i32; _]\n-            113..116 '[1]': [i32; _]\n+            102..122 '{     ...     }': &[i32; 1]\n+            112..116 '&[1]': &[i32; 1]\n+            113..116 '[1]': [i32; 1]\n             114..115 '1': i32\n-        \"]],\n+        \"#]],\n     );\n }\n \n@@ -254,7 +254,7 @@ fn infer_if_else_coerce() {\n         impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n         impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             10..11 'x': &[T]\n             27..38 '{ loop {} }': &[T]\n             29..36 'loop {}': !\n@@ -263,17 +263,17 @@ fn infer_if_else_coerce() {\n             59..60 'x': &[i32]\n             63..122 'if tru...     }': &[i32]\n             66..70 'true': bool\n-            71..91 '{     ...     }': &[i32; _]\n-            81..85 '&[1]': &[i32; _]\n-            82..85 '[1]': [i32; _]\n+            71..91 '{     ...     }': &[i32; 1]\n+            81..85 '&[1]': &[i32; 1]\n+            82..85 '[1]': [i32; 1]\n             83..84 '1': i32\n             97..122 '{     ...     }': &[i32]\n             107..110 'foo': fn foo<i32>(&[i32]) -> &[i32]\n             107..116 'foo(&[1])': &[i32]\n-            111..115 '&[1]': &[i32; _]\n-            112..115 '[1]': [i32; _]\n+            111..115 '&[1]': &[i32; 1]\n+            112..115 '[1]': [i32; 1]\n             113..114 '1': i32\n-        \"]],\n+        \"#]],\n     )\n }\n \n@@ -295,7 +295,7 @@ fn infer_match_first_coerce() {\n         #[lang = \"unsize\"]\n         pub trait Unsize<T: ?Sized> {}\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             10..11 'x': &[T]\n             27..38 '{ loop {} }': &[T]\n             29..36 'loop {}': !\n@@ -309,19 +309,19 @@ fn infer_match_first_coerce() {\n             87..88 '2': i32\n             92..95 'foo': fn foo<i32>(&[i32]) -> &[i32]\n             92..101 'foo(&[2])': &[i32]\n-            96..100 '&[2]': &[i32; _]\n-            97..100 '[2]': [i32; _]\n+            96..100 '&[2]': &[i32; 1]\n+            97..100 '[2]': [i32; 1]\n             98..99 '2': i32\n             111..112 '1': i32\n             111..112 '1': i32\n-            116..120 '&[1]': &[i32; _]\n-            117..120 '[1]': [i32; _]\n+            116..120 '&[1]': &[i32; 1]\n+            117..120 '[1]': [i32; 1]\n             118..119 '1': i32\n             130..131 '_': i32\n-            135..139 '&[3]': &[i32; _]\n-            136..139 '[3]': [i32; _]\n+            135..139 '&[3]': &[i32; 1]\n+            136..139 '[3]': [i32; 1]\n             137..138 '3': i32\n-    \"]],\n+        \"#]],\n     );\n }\n \n@@ -348,7 +348,7 @@ fn infer_match_second_coerce() {\n         impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n         impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             10..11 'x': &[T]\n             27..38 '{ loop {} }': &[T]\n             29..36 'loop {}': !\n@@ -360,21 +360,21 @@ fn infer_match_second_coerce() {\n             75..76 'i': i32\n             87..88 '1': i32\n             87..88 '1': i32\n-            92..96 '&[1]': &[i32; _]\n-            93..96 '[1]': [i32; _]\n+            92..96 '&[1]': &[i32; 1]\n+            93..96 '[1]': [i32; 1]\n             94..95 '1': i32\n             106..107 '2': i32\n             106..107 '2': i32\n             111..114 'foo': fn foo<i32>(&[i32]) -> &[i32]\n             111..120 'foo(&[2])': &[i32]\n-            115..119 '&[2]': &[i32; _]\n-            116..119 '[2]': [i32; _]\n+            115..119 '&[2]': &[i32; 1]\n+            116..119 '[2]': [i32; 1]\n             117..118 '2': i32\n             130..131 '_': i32\n-            135..139 '&[3]': &[i32; _]\n-            136..139 '[3]': [i32; _]\n+            135..139 '&[3]': &[i32; 1]\n+            136..139 '[3]': [i32; 1]\n             137..138 '3': i32\n-    \"]],\n+        \"#]],\n     );\n }\n \n@@ -685,15 +685,15 @@ fn coerce_unsize_array() {\n             let f: &[usize] = &[1, 2, 3];\n         }\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             161..198 '{     ... 3]; }': ()\n             171..172 'f': &[usize]\n-            185..195 '&[1, 2, 3]': &[usize; _]\n-            186..195 '[1, 2, 3]': [usize; _]\n+            185..195 '&[1, 2, 3]': &[usize; 3]\n+            186..195 '[1, 2, 3]': [usize; 3]\n             187..188 '1': usize\n             190..191 '2': usize\n             193..194 '3': usize\n-        \"]],\n+        \"#]],\n     );\n }\n "}, {"sha": "33305f208f50c510b70fa0cfbf302eee07ba40fd", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -243,8 +243,8 @@ fn infer_pattern_match_slice() {\n         expect![[r#\"\n             10..209 '{     ...   } }': ()\n             20..25 'slice': &[f64]\n-            36..42 '&[0.0]': &[f64; _]\n-            37..42 '[0.0]': [f64; _]\n+            36..42 '&[0.0]': &[f64; 1]\n+            37..42 '[0.0]': [f64; 1]\n             38..41 '0.0': f64\n             48..207 'match ...     }': ()\n             54..59 'slice': &[f64]\n@@ -346,7 +346,7 @@ fn infer_pattern_match_arr() {\n         expect![[r#\"\n             10..179 '{     ...   } }': ()\n             20..23 'arr': [f64; _]\n-            36..46 '[0.0, 1.0]': [f64; _]\n+            36..46 '[0.0, 1.0]': [f64; 2]\n             37..40 '0.0': f64\n             42..45 '1.0': f64\n             52..177 'match ...     }': ()"}, {"sha": "769809edf0cd94104c2d683ae393246dd26c26f1", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -99,7 +99,7 @@ fn recursive_vars() {\n             10..47 '{     ...&y]; }': ()\n             20..21 'y': &{unknown}\n             24..31 'unknown': &{unknown}\n-            37..44 '[y, &y]': [&&{unknown}; _]\n+            37..44 '[y, &y]': [&&{unknown}; 2]\n             38..39 'y': &{unknown}\n             41..43 '&y': &&{unknown}\n             42..43 'y': &{unknown}\n@@ -123,7 +123,7 @@ fn recursive_vars_2() {\n             24..31 'unknown': &&{unknown}\n             41..42 'y': &&{unknown}\n             45..52 'unknown': &&{unknown}\n-            58..76 '[(x, y..., &x)]': [(&&&{unknown}, &&&{unknown}); _]\n+            58..76 '[(x, y..., &x)]': [(&&&{unknown}, &&&{unknown}); 2]\n             59..65 '(x, y)': (&&&{unknown}, &&&{unknown})\n             60..61 'x': &&{unknown}\n             63..64 'y': &&{unknown}\n@@ -175,8 +175,8 @@ fn infer_std_crash_2() {\n         \"#,\n         expect![[r#\"\n             22..52 '{     ...n']; }': ()\n-            28..49 '&[0, b...b'\\n']': &[u8; _]\n-            29..49 '[0, b'...b'\\n']': [u8; _]\n+            28..49 '&[0, b...b'\\n']': &[u8; 4]\n+            29..49 '[0, b'...b'\\n']': [u8; 4]\n             30..31 '0': u8\n             33..38 'b'\\n'': u8\n             40..41 '1': u8\n@@ -336,8 +336,8 @@ fn infer_array_macro_call() {\n         expect![[r#\"\n             !0..4 '0u32': u32\n             44..69 '{     ...()]; }': ()\n-            54..55 'a': [u32; _]\n-            58..66 '[bar!()]': [u32; _]\n+            54..55 'a': [u32; 1]\n+            58..66 '[bar!()]': [u32; 1]\n         \"#]],\n     );\n }"}, {"sha": "8b09f2e4a0f7e948616f95d9ff8b42fec07b9cc8", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -11,7 +11,7 @@ fn test() {\n     let x = box 1;\n     let t = (x, box x, box &1, box [1]);\n     t;\n-} //^ (Box<i32>, Box<Box<i32>>, Box<&i32>, Box<[i32; _]>)\n+} //^ (Box<i32>, Box<Box<i32>>, Box<&i32>, Box<[i32; 1]>)\n \n //- /std.rs crate:std\n #[prelude_import] use prelude::*;\n@@ -36,7 +36,7 @@ fn test() {\n     let x = box 1;\n     let t = (x, box x, box &1, box [1]);\n     t;\n-} //^ (Box<i32, {unknown}>, Box<Box<i32, {unknown}>, {unknown}>, Box<&i32, {unknown}>, Box<[i32; _], {unknown}>)\n+} //^ (Box<i32, {unknown}>, Box<Box<i32, {unknown}>, {unknown}>, Box<&i32, {unknown}>, Box<[i32; 1], {unknown}>)\n \n //- /std.rs crate:std\n #[prelude_import] use prelude::*;\n@@ -1266,55 +1266,55 @@ fn infer_array() {\n             8..9 'x': &str\n             17..18 'y': isize\n             27..292 '{     ... []; }': ()\n-            37..38 'a': [&str; _]\n-            41..44 '[x]': [&str; _]\n+            37..38 'a': [&str; 1]\n+            41..44 '[x]': [&str; 1]\n             42..43 'x': &str\n-            54..55 'b': [[&str; _]; _]\n-            58..64 '[a, a]': [[&str; _]; _]\n-            59..60 'a': [&str; _]\n-            62..63 'a': [&str; _]\n-            74..75 'c': [[[&str; _]; _]; _]\n-            78..84 '[b, b]': [[[&str; _]; _]; _]\n-            79..80 'b': [[&str; _]; _]\n-            82..83 'b': [[&str; _]; _]\n-            95..96 'd': [isize; _]\n-            99..111 '[y, 1, 2, 3]': [isize; _]\n+            54..55 'b': [[&str; 1]; 2]\n+            58..64 '[a, a]': [[&str; 1]; 2]\n+            59..60 'a': [&str; 1]\n+            62..63 'a': [&str; 1]\n+            74..75 'c': [[[&str; 1]; 2]; 2]\n+            78..84 '[b, b]': [[[&str; 1]; 2]; 2]\n+            79..80 'b': [[&str; 1]; 2]\n+            82..83 'b': [[&str; 1]; 2]\n+            95..96 'd': [isize; 4]\n+            99..111 '[y, 1, 2, 3]': [isize; 4]\n             100..101 'y': isize\n             103..104 '1': isize\n             106..107 '2': isize\n             109..110 '3': isize\n-            121..122 'd': [isize; _]\n-            125..137 '[1, y, 2, 3]': [isize; _]\n+            121..122 'd': [isize; 4]\n+            125..137 '[1, y, 2, 3]': [isize; 4]\n             126..127 '1': isize\n             129..130 'y': isize\n             132..133 '2': isize\n             135..136 '3': isize\n-            147..148 'e': [isize; _]\n-            151..154 '[y]': [isize; _]\n+            147..148 'e': [isize; 1]\n+            151..154 '[y]': [isize; 1]\n             152..153 'y': isize\n-            164..165 'f': [[isize; _]; _]\n-            168..174 '[d, d]': [[isize; _]; _]\n-            169..170 'd': [isize; _]\n-            172..173 'd': [isize; _]\n-            184..185 'g': [[isize; _]; _]\n-            188..194 '[e, e]': [[isize; _]; _]\n-            189..190 'e': [isize; _]\n-            192..193 'e': [isize; _]\n-            205..206 'h': [i32; _]\n-            209..215 '[1, 2]': [i32; _]\n+            164..165 'f': [[isize; 4]; 2]\n+            168..174 '[d, d]': [[isize; 4]; 2]\n+            169..170 'd': [isize; 4]\n+            172..173 'd': [isize; 4]\n+            184..185 'g': [[isize; 1]; 2]\n+            188..194 '[e, e]': [[isize; 1]; 2]\n+            189..190 'e': [isize; 1]\n+            192..193 'e': [isize; 1]\n+            205..206 'h': [i32; 2]\n+            209..215 '[1, 2]': [i32; 2]\n             210..211 '1': i32\n             213..214 '2': i32\n-            225..226 'i': [&str; _]\n-            229..239 '[\"a\", \"b\"]': [&str; _]\n+            225..226 'i': [&str; 2]\n+            229..239 '[\"a\", \"b\"]': [&str; 2]\n             230..233 '\"a\"': &str\n             235..238 '\"b\"': &str\n-            250..251 'b': [[&str; _]; _]\n-            254..264 '[a, [\"b\"]]': [[&str; _]; _]\n-            255..256 'a': [&str; _]\n-            258..263 '[\"b\"]': [&str; _]\n+            250..251 'b': [[&str; 1]; 2]\n+            254..264 '[a, [\"b\"]]': [[&str; 1]; 2]\n+            255..256 'a': [&str; 1]\n+            258..263 '[\"b\"]': [&str; 1]\n             259..262 '\"b\"': &str\n             274..275 'x': [u8; _]\n-            287..289 '[]': [u8; _]\n+            287..289 '[]': [u8; 0]\n         \"#]],\n     );\n }\n@@ -2429,20 +2429,20 @@ fn infer_operator_overload() {\n             394..395 '1': i32\n             406..408 'V2': V2([f32; _]) -> V2\n             406..416 'V2([x, y])': V2\n-            409..415 '[x, y]': [f32; _]\n+            409..415 '[x, y]': [f32; 2]\n             410..411 'x': f32\n             413..414 'y': f32\n             436..519 '{     ... vb; }': ()\n             446..448 'va': V2\n             451..453 'V2': V2([f32; _]) -> V2\n             451..465 'V2([0.0, 1.0])': V2\n-            454..464 '[0.0, 1.0]': [f32; _]\n+            454..464 '[0.0, 1.0]': [f32; 2]\n             455..458 '0.0': f32\n             460..463 '1.0': f32\n             475..477 'vb': V2\n             480..482 'V2': V2([f32; _]) -> V2\n             480..494 'V2([0.0, 1.0])': V2\n-            483..493 '[0.0, 1.0]': [f32; _]\n+            483..493 '[0.0, 1.0]': [f32; 2]\n             484..487 '0.0': f32\n             489..492 '1.0': f32\n             505..506 'r': V2\n@@ -2593,8 +2593,8 @@ fn test() {\n             658..661 'vec': Vec<i32, Global>\n             664..679 '<[_]>::into_vec': fn into_vec<i32, Global>(Box<[i32], Global>) -> Vec<i32, Global>\n             664..691 '<[_]>:...1i32])': Vec<i32, Global>\n-            680..690 'box [1i32]': Box<[i32; _], Global>\n-            684..690 '[1i32]': [i32; _]\n+            680..690 'box [1i32]': Box<[i32; 1], Global>\n+            684..690 '[1i32]': [i32; 1]\n             685..689 '1i32': i32\n         \"#]],\n     )"}, {"sha": "47a1455fd05f2935fcbc4d76811346f867d00d7b", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -531,7 +531,7 @@ fn indexing_arrays() {\n         expect![[r#\"\n             10..26 '{ &mut...[2]; }': ()\n             12..23 '&mut [9][2]': &mut {unknown}\n-            17..20 '[9]': [i32; _]\n+            17..20 '[9]': [i32; 1]\n             17..23 '[9][2]': {unknown}\n             18..19 '9': i32\n             21..22 '2': i32"}, {"sha": "960d169f48a97aca4f33a832778f07b8f70a3baa", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc63fea427280ff278bf89a8b9c78df606009910/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=dc63fea427280ff278bf89a8b9c78df606009910", "patch": "@@ -1126,7 +1126,7 @@ fn main() {\n             r#\"\n fn main() {\n     let data = &[1i32, 2, 3];\n-      //^^^^ &[i32; _]\n+      //^^^^ &[i32; 3]\n     for i\n }\"#,\n         );"}]}