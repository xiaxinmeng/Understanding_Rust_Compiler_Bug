{"sha": "db3a06d01eb517448954ec0eaccd68f88be988e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiM2EwNmQwMWViNTE3NDQ4OTU0ZWMwZWFjY2Q2OGY4OGJlOTg4ZTA=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-04-13T03:13:19Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-05-11T16:55:31Z"}, "message": "Fix a few small things", "tree": {"sha": "a101acb955d00f986648ecf5d93fcbab5184dfe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a101acb955d00f986648ecf5d93fcbab5184dfe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db3a06d01eb517448954ec0eaccd68f88be988e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db3a06d01eb517448954ec0eaccd68f88be988e0", "html_url": "https://github.com/rust-lang/rust/commit/db3a06d01eb517448954ec0eaccd68f88be988e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db3a06d01eb517448954ec0eaccd68f88be988e0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9615d6dd48489a4700b31b301fe1a45cfa3e536e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9615d6dd48489a4700b31b301fe1a45cfa3e536e", "html_url": "https://github.com/rust-lang/rust/commit/9615d6dd48489a4700b31b301fe1a45cfa3e536e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "1fe445b2ea1ba89cb095060588656b0274476e62", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db3a06d01eb517448954ec0eaccd68f88be988e0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3a06d01eb517448954ec0eaccd68f88be988e0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=db3a06d01eb517448954ec0eaccd68f88be988e0", "patch": "@@ -837,7 +837,7 @@ fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::T\n     // we need #14072 to make sense of the generics.\n     render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n \n-    document_ty_layout(w, cx, def_id);\n+    document_type_layout(w, cx, def_id);\n }\n \n fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Union) {\n@@ -886,7 +886,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n     }\n     let def_id = it.def_id.expect_real();\n     render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n-    document_ty_layout(w, cx, def_id);\n+    document_type_layout(w, cx, def_id);\n }\n \n fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum) {\n@@ -1023,7 +1023,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n     }\n     let def_id = it.def_id.expect_real();\n     render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n-    document_ty_layout(w, cx, def_id);\n+    document_type_layout(w, cx, def_id);\n }\n \n fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Macro) {\n@@ -1164,7 +1164,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n     }\n     let def_id = it.def_id.expect_real();\n     render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n-    document_ty_layout(w, cx, def_id);\n+    document_type_layout(w, cx, def_id);\n }\n \n fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n@@ -1535,7 +1535,7 @@ fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n     }\n }\n \n-fn document_ty_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n+fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n     if !cx.shared.show_type_layout {\n         return;\n     }\n@@ -1560,7 +1560,7 @@ fn document_ty_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n             } else {\n                 writeln!(\n                     w,\n-                    \"<strong>Size:</strong> {size} byte{pl}\",\n+                    \"<p><strong>Size:</strong> {size} byte{pl}</p>\",\n                     size = ty_layout.layout.size.bytes(),\n                     pl = if ty_layout.layout.size.bytes() == 1 { \"\" } else { \"s\" },\n                 );"}]}