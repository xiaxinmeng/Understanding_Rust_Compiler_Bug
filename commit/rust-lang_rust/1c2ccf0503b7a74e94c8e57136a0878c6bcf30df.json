{"sha": "1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMmNjZjA1MDNiN2E3NGU5NGM4ZTU3MTM2YTA4NzhjNmJjZjMwZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-31T09:11:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-31T09:11:34Z"}, "message": "auto merge of #13221 : thestinger/rust/append, r=alexcrichton\n\nThese were only free functions on `~[T]` because taking self by-value\r\nused to be broken.", "tree": {"sha": "b97966317ad36940e4bdc1eb15aee335ac7c3c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97966317ad36940e4bdc1eb15aee335ac7c3c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "html_url": "https://github.com/rust-lang/rust/commit/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abb616209d23f0883f4e96253c4233c29741fc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/abb616209d23f0883f4e96253c4233c29741fc7d", "html_url": "https://github.com/rust-lang/rust/commit/abb616209d23f0883f4e96253c4233c29741fc7d"}, {"sha": "cbbc1fc843a0bea0191f66b76ff6fcc9005d7b0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbc1fc843a0bea0191f66b76ff6fcc9005d7b0f", "html_url": "https://github.com/rust-lang/rust/commit/cbbc1fc843a0bea0191f66b76ff6fcc9005d7b0f"}], "stats": {"total": 348, "additions": 126, "deletions": 222}, "files": [{"sha": "4ab3a1ef596819ad91415b86c67d4bccfb8cfa82", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -11,7 +11,6 @@\n use std::os;\n use std::str;\n use std::io::process::{ProcessExit, Process, ProcessConfig, ProcessOutput};\n-use std::vec;\n \n #[cfg(target_os = \"win32\")]\n fn target_env(lib_path: &str, prog: &str) -> Vec<(~str,~str)> {\n@@ -66,8 +65,7 @@ pub fn run(lib_path: &str,\n            env: Vec<(~str, ~str)> ,\n            input: Option<~str>) -> Option<Result> {\n \n-    let env = vec::append(env.clone(),\n-                             target_env(lib_path, prog).as_slice());\n+    let env = env.clone().append(target_env(lib_path, prog).as_slice());\n     let mut opt_process = Process::configure(ProcessConfig {\n         program: prog,\n         args: args,\n@@ -98,8 +96,7 @@ pub fn run_background(lib_path: &str,\n            env: Vec<(~str, ~str)> ,\n            input: Option<~str>) -> Option<Process> {\n \n-    let env = vec::append(env.clone(),\n-                             target_env(lib_path, prog).as_slice());\n+    let env = env.clone().append(target_env(lib_path, prog).as_slice());\n     let opt_process = Process::configure(ProcessConfig {\n         program: prog,\n         args: args,"}, {"sha": "b07588a914d12bed0c36b3d97fbacc0f0b37cc8f", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -33,7 +33,6 @@ use std::os;\n use std::str;\n use std::task;\n use std::slice;\n-use std::vec;\n use test::MetricMap;\n \n pub fn run(config: config, testfile: ~str) {\n@@ -683,7 +682,7 @@ fn compile_test_(config: &config, props: &TestProps,\n     let link_args = vec!(~\"-L\", aux_dir.as_str().unwrap().to_owned());\n     let args = make_compile_args(config,\n                                  props,\n-                                 vec::append(link_args, extra_args),\n+                                 link_args.append(extra_args),\n                                  |a, b| ThisFile(make_exe_name(a, b)), testfile);\n     compose_and_run_compiler(config, props, testfile, args, None)\n }\n@@ -734,8 +733,7 @@ fn compose_and_run_compiler(\n         let aux_args =\n             make_compile_args(config,\n                               &aux_props,\n-                              vec::append(crate_type,\n-                                             extra_link_args.as_slice()),\n+                              crate_type.append(extra_link_args.as_slice()),\n                               |a,b| {\n                                   let f = make_lib_name(a, b, testfile);\n                                   ThisDirectory(f.dir_path())\n@@ -1108,8 +1106,7 @@ fn compile_test_and_save_bitcode(config: &config, props: &TestProps,\n     let llvm_args = vec!(~\"--emit=obj\", ~\"--crate-type=lib\", ~\"-C\", ~\"save-temps\");\n     let args = make_compile_args(config,\n                                  props,\n-                                 vec::append(link_args,\n-                                                llvm_args.as_slice()),\n+                                 link_args.append(llvm_args.as_slice()),\n                                  |a, b| ThisFile(make_o_name(a, b)), testfile);\n     compose_and_run_compiler(config, props, testfile, args, None)\n }"}, {"sha": "11d28398bea3d9f4d3f59c902eb0d2040ecc5f43", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -28,7 +28,6 @@ use rand::Rng;\n use std::str;\n use std::uint;\n use std::{i64, u64};\n-use std::vec;\n \n /**\n A `BigDigit` is a `BigUint`'s composing element.\n@@ -747,8 +746,7 @@ impl BigUint {\n     fn shl_unit(&self, n_unit: uint) -> BigUint {\n         if n_unit == 0 || self.is_zero() { return (*self).clone(); }\n \n-        return BigUint::new(vec::append(Vec::from_elem(n_unit, ZERO_BIG_DIGIT),\n-                                           self.data.as_slice()));\n+        BigUint::new(Vec::from_elem(n_unit, ZERO_BIG_DIGIT).append(self.data.as_slice()))\n     }\n \n     #[inline]"}, {"sha": "28720871c8e7b49c1a9df984a3d5989c39d2a6c3", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -37,7 +37,6 @@ use std::io::fs;\n use std::io::MemReader;\n use std::mem::drop;\n use std::os;\n-use std::vec;\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use syntax::ast;\n@@ -137,8 +136,7 @@ pub fn build_configuration(sess: &Session) -> ast::CrateConfig {\n     } else {\n         InternedString::new(\"nogc\")\n     });\n-    return vec::append(user_cfg.move_iter().collect(),\n-                          default_cfg.as_slice());\n+    user_cfg.move_iter().collect::<Vec<_>>().append(default_cfg.as_slice())\n }\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n@@ -836,9 +834,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> session::Options {\n \n         let level_short = level_name.slice_chars(0, 1);\n         let level_short = level_short.to_ascii().to_upper().into_str();\n-        let flags = vec::append(matches.opt_strs(level_short)\n-                                          .move_iter()\n-                                          .collect(),\n+        let flags = matches.opt_strs(level_short).move_iter().collect::<Vec<_>>().append(\n                                    matches.opt_strs(level_name).as_slice());\n         for lint_name in flags.iter() {\n             let lint_name = lint_name.replace(\"-\", \"_\");"}, {"sha": "9182f19130cb174f2266661ff5b5e42d91e5b812", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -11,7 +11,6 @@\n \n use driver::session::Session;\n \n-use std::vec;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::DUMMY_SP;\n@@ -173,7 +172,7 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n             span: DUMMY_SP,\n         };\n \n-        let vis = vec::append(vec!(vi2), module.view_items.as_slice());\n+        let vis = (vec!(vi2)).append(module.view_items.as_slice());\n \n         // FIXME #2543: Bad copy.\n         let new_module = ast::Mod {"}, {"sha": "e39a4a9cc51f2c5d4365d419368ab2bf5e98becc", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -272,7 +272,7 @@ fn should_fail(i: @ast::Item) -> bool {\n fn add_test_module(cx: &TestCtxt, m: &ast::Mod) -> ast::Mod {\n     let testmod = mk_test_module(cx);\n     ast::Mod {\n-        items: vec::append_one(m.items.clone(), testmod),\n+        items: m.items.clone().append_one(testmod),\n         ..(*m).clone()\n     }\n }"}, {"sha": "59b08d90ca07bde0d07f5aa4976392604937fbe2", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -54,7 +54,6 @@ use std::io;\n use std::os;\n use std::str;\n use std::task;\n-use std::vec;\n use syntax::ast;\n use syntax::diagnostic::Emitter;\n use syntax::diagnostic;\n@@ -239,9 +238,7 @@ pub fn run_compiler(args: &[~str]) {\n         return;\n     }\n \n-    let lint_flags = vec::append(matches.opt_strs(\"W\")\n-                                           .move_iter()\n-                                           .collect(),\n+    let lint_flags = matches.opt_strs(\"W\").move_iter().collect::<Vec<_>>().append(\n                                     matches.opt_strs(\"warn\").as_slice());\n     if lint_flags.iter().any(|x| x == &~\"help\") {\n         describe_warnings();"}, {"sha": "52c9964750ff1e27bb21d7457227f2e6fed5a5be", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -20,7 +20,6 @@ use middle::typeck;\n \n use reader = serialize::ebml::reader;\n use std::rc::Rc;\n-use std::vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::diagnostic::expect;\n@@ -93,8 +92,7 @@ pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem>\n \n     // FIXME #1920: This path is not always correct if the crate is not linked\n     // into the root namespace.\n-    vec::append(vec!(ast_map::PathMod(token::intern(cdata.name))),\n-                   path.as_slice())\n+    (vec!(ast_map::PathMod(token::intern(cdata.name)))).append(path.as_slice())\n }\n \n pub enum found_ast {"}, {"sha": "39ea9e17b26c7d21fb0003d575381a19daf3bf1f", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -12,7 +12,6 @@\n  * Computes the restrictions that result from a borrow.\n  */\n \n-use std::vec;\n use middle::borrowck::*;\n use mc = middle::mem_categorization;\n use middle::ty;\n@@ -173,11 +172,7 @@ impl<'a> RestrictionsContext<'a> {\n             Safe => Safe,\n             SafeIf(base_lp, base_vec) => {\n                 let lp = @LpExtend(base_lp, mc, elem);\n-                SafeIf(lp, vec::append_one(base_vec,\n-                                              Restriction {\n-                                                  loan_path: lp,\n-                                                  set: restrictions\n-                                              }))\n+                SafeIf(lp, base_vec.append_one(Restriction { loan_path: lp, set: restrictions }))\n             }\n         }\n     }"}, {"sha": "c4cb76620bfd5ba9fa4a90e865e0a748f510bfb7", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -21,7 +21,6 @@ use util::ppaux::ty_to_str;\n \n use std::cmp;\n use std::iter;\n-use std::vec;\n use syntax::ast::*;\n use syntax::ast_util::{unguarded_pat, walk_pat};\n use syntax::codemap::{DUMMY_SP, Span};\n@@ -560,11 +559,10 @@ fn specialize(cx: &MatchCheckCtxt,\n         Pat{id: pat_id, node: n, span: pat_span} =>\n             match n {\n             PatWild => {\n-                Some(vec::append(Vec::from_elem(arity, wild()), r.tail()))\n+                Some(Vec::from_elem(arity, wild()).append(r.tail()))\n             }\n             PatWildMulti => {\n-                Some(vec::append(Vec::from_elem(arity, wild_multi()),\n-                                    r.tail()))\n+                Some(Vec::from_elem(arity, wild_multi()).append(r.tail()))\n             }\n             PatIdent(_, _, _) => {\n                 let opt_def = cx.tcx.def_map.borrow().find_copy(&pat_id);\n@@ -615,12 +613,7 @@ fn specialize(cx: &MatchCheckCtxt,\n                         }\n                     }\n                     _ => {\n-                        Some(\n-                            vec::append(\n-                                Vec::from_elem(arity, wild()),\n-                                r.tail()\n-                            )\n-                        )\n+                        Some(Vec::from_elem(arity, wild()).append(r.tail()))\n                     }\n                 }\n             }\n@@ -667,7 +660,7 @@ fn specialize(cx: &MatchCheckCtxt,\n                             Some(args) => args.iter().map(|x| *x).collect(),\n                             None => Vec::from_elem(arity, wild())\n                         };\n-                        Some(vec::append(args, r.tail()))\n+                        Some(args.append(r.tail()))\n                     }\n                     DefVariant(_, _, _) => None,\n \n@@ -680,7 +673,7 @@ fn specialize(cx: &MatchCheckCtxt,\n                             }\n                             None => new_args = Vec::from_elem(arity, wild())\n                         }\n-                        Some(vec::append(new_args, r.tail()))\n+                        Some(new_args.append(r.tail()))\n                     }\n                     _ => None\n                 }\n@@ -697,8 +690,8 @@ fn specialize(cx: &MatchCheckCtxt,\n                                     Some(f) => f.pat,\n                                     _ => wild()\n                                 }\n-                            }).collect();\n-                            Some(vec::append(args, r.tail()))\n+                            }).collect::<Vec<_>>();\n+                            Some(args.append(r.tail()))\n                         } else {\n                             None\n                         }\n@@ -728,16 +721,16 @@ fn specialize(cx: &MatchCheckCtxt,\n                                 Some(f) => f.pat,\n                                 _ => wild()\n                             }\n-                        }).collect();\n-                        Some(vec::append(args, r.tail()))\n+                        }).collect::<Vec<_>>();\n+                        Some(args.append(r.tail()))\n                     }\n                 }\n             }\n             PatTup(args) => {\n-                Some(vec::append(args.iter().map(|x| *x).collect(), r.tail()))\n+                Some(args.iter().map(|x| *x).collect::<Vec<_>>().append(r.tail()))\n             }\n             PatUniq(a) | PatRegion(a) => {\n-                Some(vec::append(vec!(a), r.tail()))\n+                Some((vec!(a)).append(r.tail()))\n             }\n             PatLit(expr) => {\n                 let e_v = eval_const_expr(cx.tcx, expr);"}, {"sha": "b27c46dae8cc948f8f50bda0ab94f7e8933b948d", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -225,7 +225,6 @@ use util::ppaux::{Repr, vec_map_to_str};\n \n use collections::HashMap;\n use std::cell::Cell;\n-use std::vec;\n use syntax::ast;\n use syntax::ast::Ident;\n use syntax::ast_util::path_to_ident;\n@@ -478,11 +477,9 @@ fn expand_nested_bindings<'r,'b>(\n     m.iter().map(|br| {\n         match br.pats.get(col).node {\n             ast::PatIdent(_, ref path, Some(inner)) => {\n-                let pats = vec::append(\n-                    Vec::from_slice(br.pats.slice(0u, col)),\n-                    vec::append(vec!(inner),\n-                                br.pats.slice(col + 1u,\n-                                           br.pats.len())).as_slice());\n+                let pats = Vec::from_slice(br.pats.slice(0u, col))\n+                           .append((vec!(inner))\n+                                   .append(br.pats.slice(col + 1u, br.pats.len())).as_slice());\n \n                 let mut res = Match {\n                     pats: pats,\n@@ -527,10 +524,8 @@ fn enter_match<'r,'b>(\n     for br in m.iter() {\n         match e(*br.pats.get(col)) {\n             Some(sub) => {\n-                let pats =\n-                    vec::append(\n-                        vec::append(sub, br.pats.slice(0u, col)),\n-                        br.pats.slice(col + 1u, br.pats.len()));\n+                let pats = sub.append(br.pats.slice(0u, col))\n+                              .append(br.pats.slice(col + 1u, br.pats.len()));\n \n                 let this = *br.pats.get(col);\n                 let mut bound_ptrs = br.bound_ptrs.clone();\n@@ -1557,8 +1552,7 @@ fn compile_submatch_continue<'r,\n     let tcx = bcx.tcx();\n     let dm = tcx.def_map;\n \n-    let vals_left = vec::append(Vec::from_slice(vals.slice(0u, col)),\n-                                   vals.slice(col + 1u, vals.len()));\n+    let vals_left = Vec::from_slice(vals.slice(0u, col)).append(vals.slice(col + 1u, vals.len()));\n     let ccx = bcx.fcx.ccx;\n     let mut pat_id = 0;\n     for br in m.iter() {\n@@ -1581,7 +1575,7 @@ fn compile_submatch_continue<'r,\n                 let rec_vals = rec_fields.iter().map(|field_name| {\n                         let ix = ty::field_idx_strict(tcx, field_name.name, field_tys);\n                         adt::trans_field_ptr(bcx, pat_repr, val, discr, ix)\n-                        }).collect();\n+                        }).collect::<Vec<_>>();\n                 compile_submatch(\n                         bcx,\n                         enter_rec_or_struct(bcx,\n@@ -1590,8 +1584,7 @@ fn compile_submatch_continue<'r,\n                                             col,\n                                             rec_fields.as_slice(),\n                                             val).as_slice(),\n-                        vec::append(rec_vals,\n-                                       vals_left.as_slice()).as_slice(),\n+                        rec_vals.append(vals_left.as_slice()).as_slice(),\n                         chk);\n             });\n             return;\n@@ -1616,8 +1609,7 @@ fn compile_submatch_continue<'r,\n                                    col,\n                                    val,\n                                    n_tup_elts).as_slice(),\n-                         vec::append(tup_vals,\n-                                        vals_left.as_slice()).as_slice(),\n+                         tup_vals.append(vals_left.as_slice()).as_slice(),\n                          chk);\n         return;\n     }\n@@ -1642,8 +1634,7 @@ fn compile_submatch_continue<'r,\n         compile_submatch(bcx,\n                          enter_tuple_struct(bcx, dm, m, col, val,\n                                             struct_element_count).as_slice(),\n-                         vec::append(llstructvals,\n-                                        vals_left.as_slice()).as_slice(),\n+                         llstructvals.append(vals_left.as_slice()).as_slice(),\n                          chk);\n         return;\n     }\n@@ -1652,8 +1643,7 @@ fn compile_submatch_continue<'r,\n         let llbox = Load(bcx, val);\n         compile_submatch(bcx,\n                          enter_uniq(bcx, dm, m, col, val).as_slice(),\n-                         vec::append(vec!(llbox),\n-                                        vals_left.as_slice()).as_slice(),\n+                         (vec!(llbox)).append(vals_left.as_slice()).as_slice(),\n                          chk);\n         return;\n     }\n@@ -1662,8 +1652,7 @@ fn compile_submatch_continue<'r,\n         let loaded_val = Load(bcx, val);\n         compile_submatch(bcx,\n                          enter_region(bcx, dm, m, col, val).as_slice(),\n-                         vec::append(vec!(loaded_val),\n-                                        vals_left.as_slice()).as_slice(),\n+                         (vec!(loaded_val)).append(vals_left.as_slice()).as_slice(),\n                          chk);\n         return;\n     }\n@@ -1844,7 +1833,7 @@ fn compile_submatch_continue<'r,\n             lit(_) | range(_, _) => ()\n         }\n         let opt_ms = enter_opt(opt_cx, m, opt, col, size, val);\n-        let opt_vals = vec::append(unpacked, vals_left.as_slice());\n+        let opt_vals = unpacked.append(vals_left.as_slice());\n \n         match branch_chk {\n             None => {"}, {"sha": "192453ca583da6c3590a67af7a5c815c8325bda5", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -57,7 +57,6 @@ use middle::trans::type_::Type;\n use middle::trans::type_of;\n use middle::ty;\n use middle::ty::Disr;\n-use std::vec;\n use syntax::abi::{X86, X86_64, Arm, Mips};\n use syntax::ast;\n use syntax::attr;\n@@ -220,9 +219,7 @@ fn represent_type_uncached(cx: &CrateContext, t: ty::t) -> Repr {\n             let ity = range_to_inttype(cx, hint, &bounds);\n             return General(ity, cases.iter().map(|c| {\n                 let discr = vec!(ty_of_inttype(ity));\n-                mk_struct(cx,\n-                          vec::append(discr, c.tys.as_slice()).as_slice(),\n-                          false)\n+                mk_struct(cx, discr.append(c.tys.as_slice()).as_slice(), false)\n             }).collect())\n         }\n         _ => cx.sess().bug(\"adt::represent_type called on non-ADT type\")\n@@ -753,12 +750,8 @@ pub fn trans_const(ccx: &CrateContext, r: &Repr, discr: Disr,\n             let lldiscr = C_integral(ll_inttype(ccx, ity), discr as u64, true);\n             let contents = build_const_struct(ccx,\n                                               case,\n-                                              vec::append(\n-                                                  vec!(lldiscr),\n-                                                  vals).as_slice());\n-            C_struct(ccx, vec::append(\n-                        contents,\n-                        &[padding(ccx, max_sz - case.size)]).as_slice(),\n+                                              (vec!(lldiscr)).append(vals).as_slice());\n+            C_struct(ccx, contents.append([padding(ccx, max_sz - case.size)]).as_slice(),\n                      false)\n         }\n         Univariant(ref st, _dro) => {"}, {"sha": "8055d63dfff4309992a95b5e35367378d0d3e728", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -49,7 +49,6 @@ use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n-use std::vec;\n use syntax::ast;\n use syntax::abi::AbiSet;\n use syntax::ast_map;\n@@ -227,8 +226,7 @@ fn resolve_default_method_vtables(bcx: &Block,\n         None => slice::from_elem(num_method_vtables, @Vec::new())\n     };\n \n-    let param_vtables = @(vec::append((*trait_vtables_fixed).clone(),\n-                                          method_vtables));\n+    let param_vtables = @((*trait_vtables_fixed).clone().append(method_vtables));\n \n     let self_vtables = resolve_param_vtables_under_param_substs(\n         bcx.tcx(), param_substs, impl_res.self_vtables);"}, {"sha": "6aaae564fdf6d4a1f4f415263d31ad28f6a5d74a", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -36,7 +36,6 @@ use std::c_str::ToCStr;\n use std::libc::c_uint;\n use std::slice;\n use std::vec::Vec;\n-use std::vec;\n use syntax::{ast, ast_util};\n \n pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)\n@@ -295,7 +294,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n         exprs.iter().map(|&e| const_expr(cx, e, is_local))\n              .fold((Vec::new(), true),\n                    |(l, all_inlineable), (val, inlineable)| {\n-                (vec::append_one(l, val), all_inlineable && inlineable)\n+                (l.append_one(val), all_inlineable && inlineable)\n              })\n     };\n     unsafe {"}, {"sha": "3d4a33c217d813daffb748e491f1535a8a55f1fd", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -34,7 +34,6 @@ use util::common::indenter;\n use util::ppaux::Repr;\n \n use std::c_str::ToCStr;\n-use std::vec;\n use syntax::parse::token;\n use syntax::{ast, ast_map, visit};\n \n@@ -319,8 +318,7 @@ fn combine_impl_and_methods_tps(bcx: &Block,\n     let node_substs = node_id_type_params(bcx, node);\n     debug!(\"rcvr_substs={:?}\", rcvr_substs.repr(ccx.tcx()));\n     let ty_substs\n-        = vec::append(Vec::from_slice(rcvr_substs),\n-                         node_substs.tailn(node_substs.len() - n_m_tps));\n+        = Vec::from_slice(rcvr_substs).append(node_substs.tailn(node_substs.len() - n_m_tps));\n     debug!(\"n_m_tps={:?}\", n_m_tps);\n     debug!(\"node_substs={:?}\", node_substs.repr(ccx.tcx()));\n     debug!(\"ty_substs={:?}\", ty_substs.repr(ccx.tcx()));\n@@ -338,8 +336,8 @@ fn combine_impl_and_methods_tps(bcx: &Block,\n         None => @Vec::from_elem(node_substs.len(), @Vec::new())\n     };\n     let vtables\n-        = @vec::append(Vec::from_slice(rcvr_origins.as_slice()),\n-                          r_m_origins.tailn(r_m_origins.len() - n_m_tps));\n+        = @Vec::from_slice(rcvr_origins.as_slice())\n+                           .append(r_m_origins.tailn(r_m_origins.len() - n_m_tps));\n \n     (ty_substs, vtables)\n }"}, {"sha": "01e52fda4cb34ae9b170645d75014cbaa4bd6a06", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -27,7 +27,6 @@ use util::ppaux::ty_to_str;\n \n use arena::TypedArena;\n use std::libc::c_uint;\n-use std::vec;\n use syntax::ast::DefId;\n use syntax::ast;\n use syntax::ast_map;\n@@ -132,9 +131,7 @@ impl<'a> Reflector<'a> {\n                                  -> (~str, Vec<ValueRef> ) {\n         match vstore {\n             ty::vstore_fixed(n) => {\n-                let extra = vec::append(vec!(self.c_uint(n)),\n-                                           self.c_size_and_align(t)\n-                                               .as_slice());\n+                let extra = (vec!(self.c_uint(n))).append(self.c_size_and_align(t).as_slice());\n                 (~\"fixed\", extra)\n             }\n             ty::vstore_slice(_) => (~\"slice\", Vec::new()),\n@@ -182,7 +179,7 @@ impl<'a> Reflector<'a> {\n           }\n           ty::ty_vec(ref mt, vst) => {\n               let (name, extra) = self.vstore_name_and_extra(t, vst);\n-              let extra = vec::append(extra, self.c_mt(mt).as_slice());\n+              let extra = extra.append(self.c_mt(mt).as_slice());\n               self.visit(~\"evec_\" + name, extra.as_slice())\n           }\n           // Should remove mt from box and uniq.\n@@ -210,8 +207,8 @@ impl<'a> Reflector<'a> {\n           }\n \n           ty::ty_tup(ref tys) => {\n-              let extra = vec::append(vec!(self.c_uint(tys.len())),\n-                                         self.c_size_and_align(t).as_slice());\n+              let extra = (vec!(self.c_uint(tys.len())))\n+                          .append(self.c_size_and_align(t).as_slice());\n               self.bracketed(\"tup\", extra.as_slice(), |this| {\n                   for (i, t) in tys.iter().enumerate() {\n                       let extra = vec!(this.c_uint(i), this.c_tydesc(*t));\n@@ -258,19 +255,19 @@ impl<'a> Reflector<'a> {\n                       special_idents::unnamed_field.name;\n               }\n \n-              let extra = vec::append(vec!(\n+              let extra = (vec!(\n                   self.c_slice(token::intern_and_get_ident(ty_to_str(tcx,\n                                                                      t))),\n                   self.c_bool(named_fields),\n                   self.c_uint(fields.len())\n-              ), self.c_size_and_align(t).as_slice());\n+              )).append(self.c_size_and_align(t).as_slice());\n               self.bracketed(\"class\", extra.as_slice(), |this| {\n                   for (i, field) in fields.iter().enumerate() {\n-                      let extra = vec::append(vec!(\n+                      let extra = (vec!(\n                         this.c_uint(i),\n                         this.c_slice(token::get_ident(field.ident)),\n                         this.c_bool(named_fields)\n-                      ), this.c_mt(&field.mt).as_slice());\n+                      )).append(this.c_mt(&field.mt).as_slice());\n                       this.visit(\"class_field\", extra.as_slice());\n                   }\n               })\n@@ -319,10 +316,8 @@ impl<'a> Reflector<'a> {\n                 llfdecl\n             };\n \n-            let enum_args = vec::append(vec!(self.c_uint(variants.len()),\n-                                                make_get_disr()),\n-                                           self.c_size_and_align(t)\n-                                               .as_slice());\n+            let enum_args = (vec!(self.c_uint(variants.len()), make_get_disr()))\n+                            .append(self.c_size_and_align(t).as_slice());\n             self.bracketed(\"enum\", enum_args.as_slice(), |this| {\n                 for (i, v) in variants.iter().enumerate() {\n                     let name = token::get_ident(v.name);"}, {"sha": "d179dc62df0b70d46986efeab862099e76bd07ce", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -40,7 +40,6 @@ use std::fmt;\n use std::hash::{Hash, sip};\n use std::ops;\n use std::rc::Rc;\n-use std::vec;\n use collections::{HashMap, HashSet};\n use syntax::ast::*;\n use syntax::ast_util::{is_local, lit_is_str};\n@@ -2880,7 +2879,7 @@ pub fn replace_closure_return_type(tcx: &ctxt, fn_type: t, ret_type: t) -> t {\n \n // Returns a vec of all the input and output types of fty.\n pub fn tys_in_fn_sig(sig: &FnSig) -> Vec<t> {\n-    vec::append_one(sig.inputs.iter().map(|a| *a).collect(), sig.output)\n+    sig.inputs.iter().map(|a| *a).collect::<Vec<_>>().append_one(sig.output)\n }\n \n // Type accessors for AST nodes\n@@ -3213,11 +3212,8 @@ pub fn method_call_type_param_defs(tcx: &ctxt, origin: typeck::MethodOrigin)\n             // trait itself.  This ought to be harmonized.\n             let trait_type_param_defs =\n                 lookup_trait_def(tcx, trt_id).generics.type_param_defs();\n-            Rc::new(vec::append(\n-                Vec::from_slice(trait_type_param_defs),\n-                ty::trait_method(tcx,\n-                                 trt_id,\n-                                 n_mth).generics.type_param_defs()))\n+            Rc::new(Vec::from_slice(trait_type_param_defs).append(\n+                        ty::trait_method(tcx, trt_id, n_mth).generics.type_param_defs()))\n         }\n     }\n }"}, {"sha": "07ebcf7ee9406e843cdaff5c46eaf4668e4a7038", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -97,7 +97,6 @@ use util::ppaux::Repr;\n \n use collections::HashSet;\n use std::result;\n-use std::vec;\n use syntax::ast::{DefId, SelfValue, SelfRegion};\n use syntax::ast::{SelfUniq, SelfStatic};\n use syntax::ast::{MutMutable, MutImmutable};\n@@ -1122,8 +1121,7 @@ impl<'a> LookupContext<'a> {\n         // Construct the full set of type parameters for the method,\n         // which is equal to the class tps + the method tps.\n         let all_substs = substs {\n-            tps: vec::append(candidate.rcvr_substs.tps.clone(),\n-                                m_substs.as_slice()),\n+            tps: candidate.rcvr_substs.tps.clone().append(m_substs.as_slice()),\n             regions: NonerasedRegions(OwnedSlice::from_vec(all_regions)),\n             self_ty: candidate.rcvr_substs.self_ty,\n         };"}, {"sha": "6a6ed9a754598b5ffe0570467948f9f87ae71f75", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -120,7 +120,6 @@ use std::mem::replace;\n use std::result;\n use std::slice;\n use std::vec::Vec;\n-use std::vec;\n use syntax::abi::AbiSet;\n use syntax::ast::{Provided, Required};\n use syntax::ast;\n@@ -903,7 +902,7 @@ fn compare_impl_method(tcx: &ty::ctxt,\n                 bound_region: ty::BrNamed(l.def_id, l.name)})).\n         collect();\n     let dummy_substs = ty::substs {\n-        tps: vec::append(dummy_impl_tps, dummy_method_tps.as_slice()),\n+        tps: dummy_impl_tps.append(dummy_method_tps.as_slice()),\n         regions: ty::NonerasedRegions(dummy_impl_regions),\n         self_ty: None };\n \n@@ -930,7 +929,7 @@ fn compare_impl_method(tcx: &ty::ctxt,\n                      self_ty: self_ty } = trait_substs.subst(tcx, &dummy_substs);\n         let substs = substs {\n             regions: trait_regions,\n-            tps: vec::append(trait_tps, dummy_method_tps.as_slice()),\n+            tps: trait_tps.append(dummy_method_tps.as_slice()),\n             self_ty: self_ty,\n         };\n         debug!(\"trait_fty (pre-subst): {} substs={}\","}, {"sha": "284e0108a6b0b50bfb99bd0d7ab3de820885c603", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -48,7 +48,6 @@ use syntax::visit;\n use collections::HashSet;\n use std::cell::RefCell;\n use std::rc::Rc;\n-use std::vec;\n \n struct UniversalQuantificationResult {\n     monotype: t,\n@@ -345,9 +344,7 @@ impl<'a> CoherenceChecker<'a> {\n             // construct the polytype for the method based on the method_ty\n             let new_generics = ty::Generics {\n                 type_param_defs:\n-                    Rc::new(vec::append(\n-                        Vec::from_slice(impl_poly_type.generics\n-                                                      .type_param_defs()),\n+                    Rc::new(Vec::from_slice(impl_poly_type.generics.type_param_defs()).append(\n                             new_method_ty.generics.type_param_defs())),\n                 region_param_defs:\n                     impl_poly_type.generics.region_param_defs.clone()"}, {"sha": "ca7706153958347f84270ac58746a12419215692", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -46,7 +46,6 @@ use util::ppaux;\n use util::ppaux::Repr;\n \n use std::rc::Rc;\n-use std::vec;\n use collections::HashSet;\n \n use syntax::abi::AbiSet;\n@@ -320,8 +319,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         let substs = substs {\n             regions: ty::NonerasedRegions(rps_from_trait),\n             self_ty: Some(self_param),\n-            tps: vec::append(non_shifted_trait_tps,\n-                                shifted_method_tps.as_slice())\n+            tps: non_shifted_trait_tps.append(shifted_method_tps.as_slice())\n         };\n \n         // create the type of `foo`, applying the substitution above\n@@ -490,13 +488,10 @@ fn convert_methods(ccx: &CrateCtxt,\n             // itself\n             ty_param_bounds_and_ty {\n                 generics: ty::Generics {\n-                    type_param_defs: Rc::new(vec::append(\n-                        Vec::from_slice(\n-                            rcvr_ty_generics.type_param_defs()),\n-                        m_ty_generics.type_param_defs())),\n-                    region_param_defs: Rc::new(vec::append(\n-                            Vec::from_slice(rcvr_ty_generics.region_param_defs()),\n-                            m_ty_generics.region_param_defs())),\n+                    type_param_defs: Rc::new(Vec::from_slice(rcvr_ty_generics.type_param_defs())\n+                                             .append(m_ty_generics.type_param_defs())),\n+                    region_param_defs: Rc::new(Vec::from_slice(rcvr_ty_generics.region_param_defs())\n+                                               .append(m_ty_generics.region_param_defs())),\n                 },\n                 ty: fty\n             });"}, {"sha": "62fb52fccf96ee2b5e9346d4c3db36cd9895284f", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -166,6 +166,22 @@ impl<T> Vec<T> {\n }\n \n impl<T: Clone> Vec<T> {\n+    /// Iterates over the `second` vector, copying each element and appending it to\n+    /// the `first`. Afterwards, the `first` is then returned for use again.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let vec = vec!(1, 2);\n+    /// let vec = vec.append([3, 4]);\n+    /// assert_eq!(vec, vec!(1, 2, 3, 4));\n+    /// ```\n+    #[inline]\n+    pub fn append(mut self, second: &[T]) -> Vec<T> {\n+        self.push_all(second);\n+        self\n+    }\n+\n     /// Constructs a `Vec` by cloning elements of a slice.\n     ///\n     /// # Example\n@@ -518,6 +534,22 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    /// Appends one element to the vector provided. The vector itself is then\n+    /// returned for use again.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let vec = vec!(1, 2);\n+    /// let vec = vec.append_one(3);\n+    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// ```\n+    #[inline]\n+    pub fn append_one(mut self, x: T) -> Vec<T> {\n+        self.push(x);\n+        self\n+    }\n+\n     /// Shorten a vector, dropping excess elements.\n     ///\n     /// If `len` is greater than the vector's current length, this has no\n@@ -1248,38 +1280,6 @@ impl<T> Vector<T> for Vec<T> {\n     }\n }\n \n-/// Iterates over the `second` vector, copying each element and appending it to\n-/// the `first`. Afterwards, the `first` is then returned for use again.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// let vec = vec!(1, 2);\n-/// let vec = std::vec::append(vec, [3, 4]);\n-/// assert_eq!(vec, vec!(1, 2, 3, 4));\n-/// ```\n-#[inline]\n-pub fn append<T:Clone>(mut first: Vec<T>, second: &[T]) -> Vec<T> {\n-    first.push_all(second);\n-    first\n-}\n-\n-/// Appends one element to the vector provided. The vector itself is then\n-/// returned for use again.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// let vec = vec!(1, 2);\n-/// let vec = std::vec::append_one(vec, 3);\n-/// assert_eq!(vec, vec!(1, 2, 3));\n-/// ```\n-#[inline]\n-pub fn append_one<T>(mut lhs: Vec<T>, x: T) -> Vec<T> {\n-    lhs.push(x);\n-    lhs\n-}\n-\n #[unsafe_destructor]\n impl<T> Drop for Vec<T> {\n     fn drop(&mut self) {"}, {"sha": "63e9a466a8e877e15b451cb595ea5daf794e0456", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -187,8 +187,6 @@ use codemap::Span;\n use owned_slice::OwnedSlice;\n use parse::token::InternedString;\n \n-use std::vec;\n-\n pub use self::ty::*;\n mod ty;\n \n@@ -411,7 +409,7 @@ impl<'a> TraitDef<'a> {\n         cx.item(\n             self.span,\n             ident,\n-            vec::append(vec!(attr), self.attributes.as_slice()),\n+            (vec!(attr)).append(self.attributes.as_slice()),\n             ast::ItemImpl(trait_generics, opt_trait_ref,\n                           self_type, methods))\n     }"}, {"sha": "bf96983cc7fa984b9ee74d2317d465f4826b08f4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -81,7 +81,6 @@ use collections::HashSet;\n use std::kinds::marker;\n use std::mem::replace;\n use std::rc::Rc;\n-use std::vec;\n \n #[allow(non_camel_case_types)]\n #[deriving(Eq)]\n@@ -262,7 +261,7 @@ fn maybe_append(lhs: Vec<Attribute> , rhs: Option<Vec<Attribute> >)\n              -> Vec<Attribute> {\n     match rhs {\n         None => lhs,\n-        Some(ref attrs) => vec::append(lhs, attrs.as_slice())\n+        Some(ref attrs) => lhs.append(attrs.as_slice())\n     }\n }\n \n@@ -398,10 +397,7 @@ impl<'a> Parser<'a> {\n         } else if inedible.contains(&self.token) {\n             // leave it in the input\n         } else {\n-            let expected = vec::append(edible.iter()\n-                                                .map(|x| (*x).clone())\n-                                                .collect(),\n-                                          inedible);\n+            let expected = edible.iter().map(|x| (*x).clone()).collect::<Vec<_>>().append(inedible);\n             let expect = tokens_to_str(expected.as_slice());\n             let actual = self.this_token_to_str();\n             self.fatal(\n@@ -440,10 +436,8 @@ impl<'a> Parser<'a> {\n         match e.node {\n             ExprPath(..) => {\n                 // might be unit-struct construction; check for recoverableinput error.\n-                let expected = vec::append(edible.iter()\n-                                                    .map(|x| (*x).clone())\n-                                                    .collect(),\n-                                              inedible);\n+                let expected = edible.iter().map(|x| (*x).clone()).collect::<Vec<_>>()\n+                              .append(inedible);\n                 self.check_for_erroneous_unit_struct_expecting(\n                     expected.as_slice());\n             }\n@@ -463,10 +457,8 @@ impl<'a> Parser<'a> {\n         debug!(\"commit_stmt {:?}\", s);\n         let _s = s; // unused, but future checks might want to inspect `s`.\n         if self.last_token.as_ref().map_or(false, |t| is_ident_or_path(*t)) {\n-            let expected = vec::append(edible.iter()\n-                                                .map(|x| (*x).clone())\n-                                                .collect(),\n-                                          inedible.as_slice());\n+            let expected = edible.iter().map(|x| (*x).clone()).collect::<Vec<_>>()\n+                           .append(inedible.as_slice());\n             self.check_for_erroneous_unit_struct_expecting(\n                 expected.as_slice());\n         }\n@@ -1107,7 +1099,7 @@ impl<'a> Parser<'a> {\n                 debug!(\"parse_trait_methods(): parsing provided method\");\n                 let (inner_attrs, body) =\n                     p.parse_inner_attrs_and_block();\n-                let attrs = vec::append(attrs, inner_attrs.as_slice());\n+                let attrs = attrs.append(inner_attrs.as_slice());\n                 Provided(@ast::Method {\n                     ident: ident,\n                     attrs: attrs,\n@@ -3816,7 +3808,7 @@ impl<'a> Parser<'a> {\n \n         let (inner_attrs, body) = self.parse_inner_attrs_and_block();\n         let hi = body.span.hi;\n-        let attrs = vec::append(attrs, inner_attrs.as_slice());\n+        let attrs = attrs.append(inner_attrs.as_slice());\n         @ast::Method {\n             ident: ident,\n             attrs: attrs,\n@@ -4048,8 +4040,7 @@ impl<'a> Parser<'a> {\n         while self.token != term {\n             let mut attrs = self.parse_outer_attributes();\n             if first {\n-                attrs = vec::append(attrs_remaining.clone(),\n-                                       attrs.as_slice());\n+                attrs = attrs_remaining.clone().append(attrs.as_slice());\n                 first = false;\n             }\n             debug!(\"parse_mod_items: parse_item_or_view_item(attrs={:?})\",\n@@ -4192,7 +4183,7 @@ impl<'a> Parser<'a> {\n                                      &path,\n                                      id_sp);\n         let (inner, next) = p0.parse_inner_attrs_and_next();\n-        let mod_attrs = vec::append(outer_attrs, inner.as_slice());\n+        let mod_attrs = outer_attrs.append(inner.as_slice());\n         let first_item_outer_attrs = next;\n         let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n         self.sess.included_mod_stack.borrow_mut().pop();\n@@ -4512,7 +4503,7 @@ impl<'a> Parser<'a> {\n         match self.token {\n             INTERPOLATED(token::NtItem(item)) => {\n                 self.bump();\n-                let new_attrs = vec::append(attrs, item.attrs.as_slice());\n+                let new_attrs = attrs.append(item.attrs.as_slice());\n                 return IoviItem(@Item {\n                     attrs: new_attrs,\n                     ..(*item).clone()\n@@ -4940,9 +4931,7 @@ impl<'a> Parser<'a> {\n                                   mut extern_mod_allowed: bool,\n                                   macros_allowed: bool)\n                                   -> ParsedItemsAndViewItems {\n-        let mut attrs = vec::append(first_item_attrs,\n-                                       self.parse_outer_attributes()\n-                                           .as_slice());\n+        let mut attrs = first_item_attrs.append(self.parse_outer_attributes().as_slice());\n         // First, parse view items.\n         let mut view_items : Vec<ast::ViewItem> = Vec::new();\n         let mut items = Vec::new();\n@@ -5022,9 +5011,7 @@ impl<'a> Parser<'a> {\n     fn parse_foreign_items(&mut self, first_item_attrs: Vec<Attribute> ,\n                            macros_allowed: bool)\n         -> ParsedItemsAndViewItems {\n-        let mut attrs = vec::append(first_item_attrs,\n-                                       self.parse_outer_attributes()\n-                                           .as_slice());\n+        let mut attrs = first_item_attrs.append(self.parse_outer_attributes().as_slice());\n         let mut foreign_items = Vec::new();\n         loop {\n             match self.parse_foreign_item(attrs, macros_allowed) {"}, {"sha": "b80297174d8c79b16b1641136996ee39a124e6bb", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -598,10 +598,8 @@ mod test {\n             assert!(res.is_err(),\n                     \"Op {} succeeded incorrectly with 0 stack entries\", *cap);\n             let p = if *cap == \"%s\" || *cap == \"%l\" { String(~\"foo\") } else { Number(97) };\n-            let res = expand(vec::append(bytes!(\"%p1\").iter()\n-                                                         .map(|x| *x)\n-                                                         .collect(),\n-                                            cap.as_bytes()).as_slice(),\n+            let res = expand(bytes!(\"%p1\").iter().map(|x| *x).collect::<Vec<_>>()\n+                             .append(cap.as_bytes()).as_slice(),\n                              [p],\n                              vars);\n             assert!(res.is_ok(),\n@@ -612,18 +610,14 @@ mod test {\n             let res = expand(cap.as_bytes(), [], vars);\n             assert!(res.is_err(),\n                     \"Binop {} succeeded incorrectly with 0 stack entries\", *cap);\n-            let res = expand(vec::append(bytes!(\"%{1}\").iter()\n-                                                          .map(|x| *x)\n-                                                          .collect(),\n-                                             cap.as_bytes()).as_slice(),\n+            let res = expand(bytes!(\"%{1}\").iter().map(|x| *x).collect::<Vec<_>>()\n+                             .append(cap.as_bytes()).as_slice(),\n                               [],\n                               vars);\n             assert!(res.is_err(),\n                     \"Binop {} succeeded incorrectly with 1 stack entry\", *cap);\n-            let res = expand(vec::append(bytes!(\"%{1}%{2}\").iter()\n-                                                              .map(|x| *x)\n-                                                              .collect(),\n-                                            cap.as_bytes()).as_slice(),\n+            let res = expand(bytes!(\"%{1}%{2}\").iter().map(|x| *x).collect::<Vec<_>>()\n+                             .append(cap.as_bytes()).as_slice(),\n                              [],\n                              vars);\n             assert!(res.is_ok(),"}, {"sha": "730078b01a2ae5e5897d8694a6a9a3e35d34b6b8", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -92,7 +92,7 @@ fn vec_plus() {\n         if r.gen() {\n             v.push_all_move(rv);\n         } else {\n-            v = vec::append(rv.clone(), v.as_slice());\n+            v = rv.clone().append(v.as_slice());\n         }\n         i += 1;\n     }\n@@ -106,10 +106,10 @@ fn vec_append() {\n     while i < 1500 {\n         let rv = Vec::from_elem(r.gen_range(0u, i + 1), i);\n         if r.gen() {\n-            v = vec::append(v.clone(), rv.as_slice());\n+            v = v.clone().append(rv.as_slice());\n         }\n         else {\n-            v = vec::append(rv.clone(), v.as_slice());\n+            v = rv.clone().append(v.as_slice());\n         }\n         i += 1;\n     }"}, {"sha": "9da32707ef1ee3435d699ec6d5a569a2bdd14fec", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -126,8 +126,7 @@ fn make_sequence_processor(sz: uint,\n       line = from_parent.recv();\n       if line == Vec::new() { break; }\n \n-       carry = windows_with_carry(vec::append(carry,\n-                                                 line.as_slice()).as_slice(),\n+       carry = windows_with_carry(carry.append(line.as_slice()).as_slice(),\n                                   sz,\n                                   |window| {\n          update_freq(&mut freqs, window);"}, {"sha": "4ebe885246d91f1201c97c7a71c475be3c78a264", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -97,8 +97,7 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n                 unique: ~Cons((), @*st.unique),\n                 tuple: (@Cons((), st.tuple.ref0().clone()),\n                         ~Cons((), @*st.tuple.ref1().clone())),\n-                vec: vec::append(st.vec.clone(),\n-                     &[@Cons((), *st.vec.last().unwrap())]),\n+                vec: st.vec.clone().append(&[@Cons((), *st.vec.last().unwrap())]),\n                 res: r(@Cons((), st.res._l))\n             }\n           }"}, {"sha": "5bcf5b054c19fd8e5a9572ae13a5285c673a9b36", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     for _i in range(0u, 10u) {\n         arr.push(@~\"key stuff\");\n         map.insert(arr.clone(),\n-                   vec::append(arr.clone(), &[@~\"value stuff\"]));\n+                   arr.clone().append([@~\"value stuff\"]));\n         if arr.len() == 5 {\n             fail!();\n         }"}, {"sha": "a0400a9dcc5792edbc0ce49769e6beeb47002f0b", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "patch": "@@ -13,7 +13,7 @@ use std::vec;\n pub fn main() {\n     let a: Vec<int> = vec!(1, 2, 3, 4, 5);\n     let b: Vec<int> = vec!(6, 7, 8, 9, 0);\n-    let v: Vec<int> = vec::append(a, b.as_slice());\n+    let v: Vec<int> = a.append(b.as_slice());\n     println!(\"{}\", *v.get(9));\n     assert_eq!(*v.get(0), 1);\n     assert_eq!(*v.get(7), 8);"}]}