{"sha": "ddc637c16120fb352183698f635fc93a68580f7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYzYzN2MxNjEyMGZiMzUyMTgzNjk4ZjYzNWZjOTNhNjg1ODBmN2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-30T12:22:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-30T12:23:38Z"}, "message": "Lexer: start numbers", "tree": {"sha": "288f1497551f2667af693157f2451be40c25d697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/288f1497551f2667af693157f2451be40c25d697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddc637c16120fb352183698f635fc93a68580f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc637c16120fb352183698f635fc93a68580f7b", "html_url": "https://github.com/rust-lang/rust/commit/ddc637c16120fb352183698f635fc93a68580f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddc637c16120fb352183698f635fc93a68580f7b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8103772a10f00378c4dcdd09f9af310c23146933", "url": "https://api.github.com/repos/rust-lang/rust/commits/8103772a10f00378c4dcdd09f9af310c23146933", "html_url": "https://github.com/rust-lang/rust/commit/8103772a10f00378c4dcdd09f9af310c23146933"}], "stats": {"total": 188, "additions": 176, "deletions": 12}, "files": [{"sha": "a86fe693fc1286ab126b56b801e76adc238a3d4b", "filename": "grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc637c16120fb352183698f635fc93a68580f7b/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ddc637c16120fb352183698f635fc93a68580f7b/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=ddc637c16120fb352183698f635fc93a68580f7b", "patch": "@@ -4,5 +4,7 @@ Grammar(\n         \"IDENT\",\n         \"UNDERSCORE\",\n         \"WHITESPACE\",\n+        \"INT_NUMBER\",\n+        \"FLOAT_NUMBER\",\n     ]\n )\n\\ No newline at end of file"}, {"sha": "4235d2648ad3a903ab9d71655d16bdf70323f7ba", "filename": "src/lexer/classes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddc637c16120fb352183698f635fc93a68580f7b/src%2Flexer%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc637c16120fb352183698f635fc93a68580f7b/src%2Flexer%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fclasses.rs?ref=ddc637c16120fb352183698f635fc93a68580f7b", "patch": "@@ -20,3 +20,7 @@ pub fn is_whitespace(c: char) -> bool {\n     //https://github.com/behnam/rust-unic/issues/192\n     c.is_whitespace()\n }\n+\n+pub fn is_dec_digit(c: char) -> bool {\n+    '0' <= c && c <= '9'\n+}"}, {"sha": "afbbee4d0d9f5c6595ea1aed30975a7743194ca1", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 81, "deletions": 10, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/ddc637c16120fb352183698f635fc93a68580f7b/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc637c16120fb352183698f635fc93a68580f7b/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=ddc637c16120fb352183698f635fc93a68580f7b", "patch": "@@ -22,26 +22,97 @@ fn next_token_inner(c: char, ptr: &mut Ptr) -> SyntaxKind {\n     // They are not identifiers, and are handled further down.\n     let ident_start = is_ident_start(c) && !string_literal_start(c, ptr.next(), ptr.nnext());\n     if ident_start {\n-        let is_single_letter = match ptr.next() {\n-            None => true,\n-            Some(c) if !is_ident_continue(c) => true,\n-            _ => false,\n-        };\n-        if is_single_letter {\n-            return if c == '_' { UNDERSCORE } else { IDENT };\n-        }\n-        ptr.bump_while(is_ident_continue);\n-        return IDENT;\n+        return scan_ident(c, ptr);\n     }\n \n     if is_whitespace(c) {\n         ptr.bump_while(is_whitespace);\n         return WHITESPACE;\n     }\n \n+    if is_dec_digit(c) {\n+        return scan_number(c, ptr);\n+    }\n+\n     ERROR\n }\n \n+fn scan_ident(c: char, ptr: &mut Ptr) -> SyntaxKind {\n+    let is_single_letter = match ptr.next() {\n+        None => true,\n+        Some(c) if !is_ident_continue(c) => true,\n+        _ => false,\n+    };\n+    if is_single_letter {\n+        return if c == '_' { UNDERSCORE } else { IDENT };\n+    }\n+    ptr.bump_while(is_ident_continue);\n+    IDENT\n+}\n+\n+fn scan_number(c: char, ptr: &mut Ptr) -> SyntaxKind {\n+    if c == '0' {\n+        match ptr.next().unwrap_or('\\0') {\n+            'b' | 'o' => {\n+                ptr.bump();\n+                scan_digits(ptr, false);\n+            }\n+            'x' => {\n+                ptr.bump();\n+                scan_digits(ptr, true);\n+            }\n+            '0'...'9' | '_' | '.' | 'e' | 'E' => {\n+                scan_digits(ptr, true);\n+            }\n+            _ => return INT_NUMBER,\n+        }\n+    } else {\n+        scan_digits(ptr, false);\n+    }\n+\n+    // might be a float, but don't be greedy if this is actually an\n+    // integer literal followed by field/method access or a range pattern\n+    // (`0..2` and `12.foo()`)\n+    if ptr.next_is('.') && !(ptr.nnext_is('.') || ptr.nnext_is_p(is_ident_start)) {\n+        // might have stuff after the ., and if it does, it needs to start\n+        // with a number\n+        ptr.bump();\n+        scan_digits(ptr, false);\n+        scan_float_exponent(ptr);\n+        return FLOAT_NUMBER;\n+    }\n+    // it might be a float if it has an exponent\n+    if ptr.next_is('e') || ptr.next_is('E') {\n+        scan_float_exponent(ptr);\n+        return FLOAT_NUMBER;\n+    }\n+    INT_NUMBER\n+}\n+\n+fn scan_digits(ptr: &mut Ptr, allow_hex: bool) {\n+    while let Some(c) = ptr.next() {\n+        match c {\n+            '_' | '0'...'9' => {\n+                ptr.bump();\n+            }\n+            'a'...'f' | 'A' ... 'F' if allow_hex => {\n+                ptr.bump();\n+            }\n+            _ => return\n+        }\n+    }\n+}\n+\n+fn scan_float_exponent(ptr: &mut Ptr) {\n+    if ptr.next_is('e') || ptr.next_is('E') {\n+        ptr.bump();\n+        if ptr.next_is('-') || ptr.next_is('+') {\n+            ptr.bump();\n+        }\n+        scan_digits(ptr, false);\n+    }\n+}\n+\n fn string_literal_start(c: char, c1: Option<char>, c2: Option<char>) -> bool {\n     match (c, c1, c2) {\n         ('r', Some('\"'), _) |"}, {"sha": "d441b826bc691ce946e175bbeeea0a7245a0068d", "filename": "src/lexer/ptr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddc637c16120fb352183698f635fc93a68580f7b/src%2Flexer%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc637c16120fb352183698f635fc93a68580f7b/src%2Flexer%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fptr.rs?ref=ddc637c16120fb352183698f635fc93a68580f7b", "patch": "@@ -26,6 +26,18 @@ impl<'s> Ptr<'s> {\n         chars.next()\n     }\n \n+    pub fn next_is(&self, c: char) -> bool {\n+        self.next() == Some(c)\n+    }\n+\n+    pub fn nnext_is(&self, c: char) -> bool {\n+        self.nnext() == Some(c)\n+    }\n+\n+    pub fn nnext_is_p<P: Fn(char) -> bool>(&self, p: P) -> bool {\n+        self.nnext().map(p) == Some(true)\n+    }\n+\n     pub fn bump(&mut self) -> Option<char> {\n         let ch = self.chars().next()?;\n         self.len += TextUnit::len_of_char(ch);"}, {"sha": "bd1265bdead63f87f9dfdad38c08b450093d0393", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddc637c16120fb352183698f635fc93a68580f7b/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc637c16120fb352183698f635fc93a68580f7b/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=ddc637c16120fb352183698f635fc93a68580f7b", "patch": "@@ -5,12 +5,16 @@ pub const ERROR: SyntaxKind = SyntaxKind(0);\n pub const IDENT: SyntaxKind = SyntaxKind(1);\n pub const UNDERSCORE: SyntaxKind = SyntaxKind(2);\n pub const WHITESPACE: SyntaxKind = SyntaxKind(3);\n+pub const INT_NUMBER: SyntaxKind = SyntaxKind(4);\n+pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(5);\n \n-static INFOS: [SyntaxInfo; 4] = [\n+static INFOS: [SyntaxInfo; 6] = [\n     SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n     SyntaxInfo { name: \"UNDERSCORE\" },\n     SyntaxInfo { name: \"WHITESPACE\" },\n+    SyntaxInfo { name: \"INT_NUMBER\" },\n+    SyntaxInfo { name: \"FLOAT_NUMBER\" },\n ];\n \n pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {"}, {"sha": "af53ff2cd13b1c055c72701c28fdc03974496a96", "filename": "tests/data/lexer/0004_number.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddc637c16120fb352183698f635fc93a68580f7b/tests%2Fdata%2Flexer%2F0004_number.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc637c16120fb352183698f635fc93a68580f7b/tests%2Fdata%2Flexer%2F0004_number.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0004_number.rs?ref=ddc637c16120fb352183698f635fc93a68580f7b", "patch": "@@ -0,0 +1,7 @@\n+0 0b 0o 0x 00 0_ 0. 0e 0E 0z\n+01790 0b1790 0o1790 0x1790aAbBcCdDeEfF 001279 0_1279 0.1279 0e1279 0E1279\n+0..2\n+0.foo()\n+0e+1\n+0.e+1\n+0.0E-2"}, {"sha": "e9ad8410d780baa0514881d2137d51d0e1361219", "filename": "tests/data/lexer/0004_number.txt", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ddc637c16120fb352183698f635fc93a68580f7b/tests%2Fdata%2Flexer%2F0004_number.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ddc637c16120fb352183698f635fc93a68580f7b/tests%2Fdata%2Flexer%2F0004_number.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0004_number.txt?ref=ddc637c16120fb352183698f635fc93a68580f7b", "patch": "@@ -0,0 +1,62 @@\n+INT_NUMBER 1\n+WHITESPACE 1\n+INT_NUMBER 2\n+WHITESPACE 1\n+INT_NUMBER 2\n+WHITESPACE 1\n+INT_NUMBER 2\n+WHITESPACE 1\n+INT_NUMBER 2\n+WHITESPACE 1\n+INT_NUMBER 2\n+WHITESPACE 1\n+FLOAT_NUMBER 2\n+WHITESPACE 1\n+INT_NUMBER 2\n+WHITESPACE 1\n+INT_NUMBER 2\n+WHITESPACE 1\n+INT_NUMBER 1\n+IDENT 1\n+WHITESPACE 1\n+INT_NUMBER 5\n+WHITESPACE 1\n+INT_NUMBER 6\n+WHITESPACE 1\n+INT_NUMBER 6\n+WHITESPACE 1\n+INT_NUMBER 18\n+WHITESPACE 1\n+INT_NUMBER 6\n+WHITESPACE 1\n+INT_NUMBER 6\n+WHITESPACE 1\n+FLOAT_NUMBER 6\n+WHITESPACE 1\n+INT_NUMBER 6\n+WHITESPACE 1\n+INT_NUMBER 6\n+WHITESPACE 1\n+INT_NUMBER 1\n+ERROR 1\n+ERROR 1\n+INT_NUMBER 1\n+WHITESPACE 1\n+INT_NUMBER 1\n+ERROR 1\n+IDENT 3\n+ERROR 1\n+ERROR 1\n+WHITESPACE 1\n+INT_NUMBER 2\n+ERROR 1\n+INT_NUMBER 1\n+WHITESPACE 1\n+INT_NUMBER 1\n+ERROR 1\n+IDENT 1\n+ERROR 1\n+INT_NUMBER 1\n+WHITESPACE 1\n+FLOAT_NUMBER 6\n+WHITESPACE 1"}, {"sha": "b21ffebd5411854d1ec9c116179044691f30491d", "filename": "validation.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddc637c16120fb352183698f635fc93a68580f7b/validation.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddc637c16120fb352183698f635fc93a68580f7b/validation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/validation.md?ref=ddc637c16120fb352183698f635fc93a68580f7b", "patch": "@@ -1,5 +1,7 @@\n Fixmes:\n \n-* Fix `is_whitespace`, add more test\n+* Fix `is_whitespace`, add more tests\n * Add more thorough tests for idents for XID_Start & XID_Continue\n+* Validate that float and integer literals use digits only of the appropriate\n+  base, and are in range\n "}]}