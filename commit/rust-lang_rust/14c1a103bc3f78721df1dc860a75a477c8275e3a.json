{"sha": "14c1a103bc3f78721df1dc860a75a477c8275e3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YzFhMTAzYmMzZjc4NzIxZGYxZGM4NjBhNzVhNDc3YzgyNzVlM2E=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-07T08:32:50Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T07:31:51Z"}, "message": "Revise rt::unwind", "tree": {"sha": "183d003481cc5c7f96f59432bc52805c5d801178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/183d003481cc5c7f96f59432bc52805c5d801178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14c1a103bc3f78721df1dc860a75a477c8275e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14c1a103bc3f78721df1dc860a75a477c8275e3a", "html_url": "https://github.com/rust-lang/rust/commit/14c1a103bc3f78721df1dc860a75a477c8275e3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14c1a103bc3f78721df1dc860a75a477c8275e3a/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e4780b0b59636cd979a60434a407142e407ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e4780b0b59636cd979a60434a407142e407ac9", "html_url": "https://github.com/rust-lang/rust/commit/d8e4780b0b59636cd979a60434a407142e407ac9"}], "stats": {"total": 76, "additions": 30, "deletions": 46}, "files": [{"sha": "44794d2b957ce1a40a109ec115eab0bd7f5d9a43", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14c1a103bc3f78721df1dc860a75a477c8275e3a/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c1a103bc3f78721df1dc860a75a477c8275e3a/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=14c1a103bc3f78721df1dc860a75a477c8275e3a", "patch": "@@ -72,10 +72,6 @@ mod macros;\n \n // These should be refactored/moved/made private over time\n pub mod util;\n-<<<<<<< HEAD\n-=======\n-pub mod task;\n->>>>>>> Remove rt::{local, local_data, thread_local_storage}\n pub mod unwind;\n \n mod args;"}, {"sha": "decf7cfb60a2775e48cd451769bb3ef8ea72f3e9", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/14c1a103bc3f78721df1dc860a75a477c8275e3a/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c1a103bc3f78721df1dc860a75a477c8275e3a/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=14c1a103bc3f78721df1dc860a75a477c8275e3a", "patch": "@@ -72,16 +72,9 @@ use mem;\n use raw::Closure;\n use libc::c_void;\n \n-use rt::local::Local;\n-use rt::task::Task;\n-\n+use sys_common::thread_info;\n use rt::libunwind as uw;\n \n-#[allow(missing_copy_implementations)]\n-pub struct Unwinder {\n-    unwinding: bool,\n-}\n-\n struct Exception {\n     uwe: uw::_Unwind_Exception,\n     cause: Option<Box<Any + Send>>,\n@@ -104,18 +97,6 @@ static CALLBACKS: [atomic::AtomicUint, ..MAX_CALLBACKS] =\n          atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT];\n static CALLBACK_CNT: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n \n-impl Unwinder {\n-    pub fn new() -> Unwinder {\n-        Unwinder {\n-            unwinding: false,\n-        }\n-    }\n-\n-    pub fn unwinding(&self) -> bool {\n-        self.unwinding\n-    }\n-}\n-\n /// Invoke a closure, capturing the cause of panic if one occurs.\n ///\n /// This function will return `None` if the closure did not panic, and will\n@@ -556,7 +537,7 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, uint)) ->\n /// we need the `Any` object anyway, we're not just creating it to\n /// avoid being generic.)\n ///\n-/// Do this split took the LLVM IR line counts of `fn main() { panic!()\n+/// Doing this split took the LLVM IR line counts of `fn main() { panic!()\n /// }` from ~1900/3700 (-O/no opts) to 180/590.\n #[inline(never)] #[cold] // this is the slow path, please never inline this\n fn begin_unwind_inner(msg: Box<Any + Send>, file_line: &(&'static str, uint)) -> ! {\n@@ -583,27 +564,16 @@ fn begin_unwind_inner(msg: Box<Any + Send>, file_line: &(&'static str, uint)) ->\n     };\n \n     // Now that we've run all the necessary unwind callbacks, we actually\n-    // perform the unwinding. If we don't have a task, then it's time to die\n-    // (hopefully someone printed something about this).\n-    let mut task: Box<Task> = match Local::try_take() {\n-        Some(task) => task,\n-        None => rust_panic(msg),\n-    };\n-\n-    if task.unwinder.unwinding {\n-        // If a task panics while it's already unwinding then we\n+    // perform the unwinding.\n+    if thread_info::unwinding() {\n+        // If a thread panics while it's already unwinding then we\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the task cleanly.\n         rterrln!(\"task failed during unwinding. aborting.\");\n         unsafe { intrinsics::abort() }\n     }\n-    task.unwinder.unwinding = true;\n-\n-    // Put the task back in TLS because the unwinding process may run code which\n-    // requires the task. We need a handle to its unwinder, however, so after\n-    // this we unsafely extract it and continue along.\n-    Local::put(task);\n+    thread_info::set_unwinding(true);\n     rust_panic(msg);\n }\n "}, {"sha": "f88fd49ab99f5b61a5e33703fab782430576cf68", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14c1a103bc3f78721df1dc860a75a477c8275e3a/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c1a103bc3f78721df1dc860a75a477c8275e3a/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=14c1a103bc3f78721df1dc860a75a477c8275e3a", "patch": "@@ -8,30 +8,36 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::prelude::*;\n+\n+use thread::Thread;\n+use cell::RefCell;\n+use string::String;\n+\n struct ThreadInfo {\n     // This field holds the known bounds of the stack in (lo, hi)\n     // form. Not all threads necessarily know their precise bounds,\n     // hence this is optional.\n     stack_bounds: (uint, uint),\n     stack_guard: uint,\n-    unwinder: Unwinder,\n+    unwinding: bool,\n     thread: Thread,\n }\n \n-thread_local!(static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None));\n+thread_local!(static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None))\n \n impl ThreadInfo {\n-    fn with<R>(f: |&ThreadInfo| -> R) -> R {\n+    fn with<R>(f: |&mut ThreadInfo| -> R) -> R {\n         THREAD_INFO.with(|c| {\n             if c.borrow().is_none() {\n                 *c.borrow_mut() = Some(ThreadInfo {\n                     stack_bounds: (0, 0),\n                     stack_guard: 0,\n-                    unwinder: Unwinder::new(),\n+                    unwinder: false,\n                     thread: Thread::new(None),\n                 })\n             }\n-            f(c.borrow().as_ref().unwrap())\n+            f(c.borrow_mut().as_ref().unwrap())\n         })\n     }\n }\n@@ -44,12 +50,24 @@ pub fn panicking() -> bool {\n     ThreadInfo::with(|info| info.unwinder.unwinding())\n }\n \n+pub fn stack_guard() -> uint {\n+    ThreadInfo::with(|info| info.stack_guard)\n+}\n+\n+pub fn unwinding() -> bool {\n+    ThreadInfo::with(|info| info.unwinder.unwinding)\n+}\n+\n+pub fn set_unwinding(unwinding: bool) {\n+    ThreadInfo::with(|info| info.unwinding = unwinding)\n+}\n+\n pub fn set(stack_bounds: (uint, uint), stack_guard: uint, thread: Thread) {\n     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n     THREAD_INFO.with(|c| *c.borrow_mut() = Some(ThreadInfo{\n         stack_bounds: stack_bounds,\n         stack_guard: stack_guard,\n-        unwinder: Unwinder::new(),\n+        unwinding: false,\n         thread: thread,\n     }));\n }"}]}