{"sha": "3a79370367b6b606c5682b17cf601f34df9690fd", "node_id": "C_kwDOAAsO6NoAKDNhNzkzNzAzNjdiNmI2MDZjNTY4MmIxN2NmNjAxZjM0ZGY5NjkwZmQ", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-10-25T17:43:55Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-10-25T18:13:43Z"}, "message": "rustdoc: use better highlighting for *const, *mut, and &mut\n\nThis generates more consistent HTML for these RefKeyWord combinations.\n\nBefore:\n\n![image](https://user-images.githubusercontent.com/1593513/138742752-7e00a3f7-4621-4c62-82d1-3e4c2ef503d1.png)\n\nAfter:\n\n![image](https://user-images.githubusercontent.com/1593513/138743955-90abcdcd-fc88-4e2f-95bb-c1b1635c0001.png)", "tree": {"sha": "900d8118c4788e553c00095e1c0432751caafd1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/900d8118c4788e553c00095e1c0432751caafd1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a79370367b6b606c5682b17cf601f34df9690fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a79370367b6b606c5682b17cf601f34df9690fd", "html_url": "https://github.com/rust-lang/rust/commit/3a79370367b6b606c5682b17cf601f34df9690fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a79370367b6b606c5682b17cf601f34df9690fd/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c2a8505dcdfa0e38e05f72066480ea51ba9cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c2a8505dcdfa0e38e05f72066480ea51ba9cbd", "html_url": "https://github.com/rust-lang/rust/commit/84c2a8505dcdfa0e38e05f72066480ea51ba9cbd"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "de194d5e5d2988b7a3888f1367249431b0866c51", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3a79370367b6b606c5682b17cf601f34df9690fd/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a79370367b6b606c5682b17cf601f34df9690fd/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=3a79370367b6b606c5682b17cf601f34df9690fd", "patch": "@@ -469,22 +469,37 @@ impl<'a> Classifier<'a> {\n             // Assume that '&' or '*' is the reference or dereference operator\n             // or a reference or pointer type. Unless, of course, it looks like\n             // a logical and or a multiplication operator: `&&` or `* `.\n-            TokenKind::Star => match self.peek() {\n-                Some(TokenKind::Whitespace) => Class::Op,\n+            TokenKind::Star => match self.tokens.peek() {\n+                Some((TokenKind::Whitespace, _)) => Class::Op,\n+                Some((TokenKind::Ident, \"mut\")) => {\n+                    self.next();\n+                    sink(Highlight::Token { text: \"*mut\", class: Some(Class::RefKeyWord) });\n+                    return;\n+                }\n+                Some((TokenKind::Ident, \"const\")) => {\n+                    self.next();\n+                    sink(Highlight::Token { text: \"*const\", class: Some(Class::RefKeyWord) });\n+                    return;\n+                }\n                 _ => Class::RefKeyWord,\n             },\n-            TokenKind::And => match lookahead {\n-                Some(TokenKind::And) => {\n+            TokenKind::And => match self.tokens.peek() {\n+                Some((TokenKind::And, _)) => {\n                     self.next();\n                     sink(Highlight::Token { text: \"&&\", class: Some(Class::Op) });\n                     return;\n                 }\n-                Some(TokenKind::Eq) => {\n+                Some((TokenKind::Eq, _)) => {\n                     self.next();\n                     sink(Highlight::Token { text: \"&=\", class: Some(Class::Op) });\n                     return;\n                 }\n-                Some(TokenKind::Whitespace) => Class::Op,\n+                Some((TokenKind::Whitespace, _)) => Class::Op,\n+                Some((TokenKind::Ident, \"mut\")) => {\n+                    self.next();\n+                    sink(Highlight::Token { text: \"&mut\", class: Some(Class::RefKeyWord) });\n+                    return;\n+                }\n                 _ => Class::RefKeyWord,\n             },\n "}, {"sha": "b117a12e39f4a45bf1e0938ce9f4eb51e1d13e1c", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a79370367b6b606c5682b17cf601f34df9690fd/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/3a79370367b6b606c5682b17cf601f34df9690fd/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=3a79370367b6b606c5682b17cf601f34df9690fd", "patch": "@@ -15,11 +15,11 @@\n <span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> <span class=\"op\">=</span> <span class=\"string\">&quot;linux&quot;</span>)]</span>\n <span class=\"kw\">fn</span> <span class=\"ident\">main</span>() -&gt; () {\n     <span class=\"kw\">let</span> <span class=\"ident\">foo</span> <span class=\"op\">=</span> <span class=\"bool-val\">true</span> <span class=\"op\">&amp;&amp;</span> <span class=\"bool-val\">false</span> <span class=\"op\">|</span><span class=\"op\">|</span> <span class=\"bool-val\">true</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*</span><span class=\"kw\">const</span> () <span class=\"op\">=</span> <span class=\"number\">0</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*const</span> () <span class=\"op\">=</span> <span class=\"number\">0</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"op\">&amp;&amp;</span><span class=\"ident\">foo</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n-    <span class=\"macro\">mac!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;</span><span class=\"kw-2\">mut</span> <span class=\"ident\">bar</span>);\n+    <span class=\"macro\">mac!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;mut</span> <span class=\"ident\">bar</span>);\n     <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> <span class=\"op\">&lt;</span> <span class=\"ident\">N</span> <span class=\"op\">&amp;&amp;</span> <span class=\"ident\">index</span> <span class=\"op\">&lt;</span><span class=\"op\">=</span> <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n     <span class=\"ident\">::std::env::var</span>(<span class=\"string\">&quot;gateau&quot;</span>).<span class=\"ident\">is_ok</span>();\n     <span class=\"attribute\">#[<span class=\"ident\">rustfmt::skip</span>]</span>"}]}