{"sha": "c2e83dce57c41363095cac253c5255070afcd667", "node_id": "C_kwDOAAsO6NoAKGMyZTgzZGNlNTdjNDEzNjMwOTVjYWMyNTNjNTI1NTA3MGFmY2Q2Njc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-03T18:27:18Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T02:59:37Z"}, "message": "Destruct landing_pad return value before passing it to cg_ssa", "tree": {"sha": "87bbb2ebfea0ad7cea822abc227a5a54a8d15c17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87bbb2ebfea0ad7cea822abc227a5a54a8d15c17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2e83dce57c41363095cac253c5255070afcd667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e83dce57c41363095cac253c5255070afcd667", "html_url": "https://github.com/rust-lang/rust/commit/c2e83dce57c41363095cac253c5255070afcd667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2e83dce57c41363095cac253c5255070afcd667/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c2db89ce4951014a7fbec62ae81bda9abcf3657", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2db89ce4951014a7fbec62ae81bda9abcf3657", "html_url": "https://github.com/rust-lang/rust/commit/7c2db89ce4951014a7fbec62ae81bda9abcf3657"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "70a93cb06d13d2d52d86163c8997715cefe6ae63", "filename": "src/builder.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2e83dce57c41363095cac253c5255070afcd667/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e83dce57c41363095cac253c5255070afcd667/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=c2e83dce57c41363095cac253c5255070afcd667", "patch": "@@ -1199,7 +1199,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     #[cfg(feature=\"master\")]\n-    fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n+    fn cleanup_landing_pad(&mut self, pers_fn: RValue<'gcc>) -> (RValue<'gcc>, RValue<'gcc>) {\n         self.set_personality_fn(pers_fn);\n \n         // NOTE: insert the current block in a variable so that a later call to invoke knows to\n@@ -1223,29 +1223,27 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     #[cfg(not(feature=\"master\"))]\n-    fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n+    fn cleanup_landing_pad(&mut self, _pers_fn: RValue<'gcc>) -> (RValue<'gcc>, RValue<'gcc>) {\n         let field1 = self.context.new_field(None, self.u8_type.make_pointer(), \"landing_pad_field_1\");\n         let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n-        let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n-        self.current_func().new_local(None, struct_type.as_type(), \"landing_pad\")\n-            .to_rvalue()\n+        (field1, field2)\n     }\n \n     #[cfg(feature=\"master\")]\n-    fn resume(&mut self, exn: RValue<'gcc>) {\n+    fn resume(&mut self, exn0: RValue<'gcc>, _exn1: RValue<'gcc>) {\n         // TODO(antoyo): check if this is normal that we need to dereference the value.\n         // NOTE: the type is wrong, so in order to get a pointer for parameter, cast it to a\n         // pointer of pointer that is later dereferenced.\n-        let exn_type = exn.get_type().make_pointer();\n-        let exn = self.context.new_cast(None, exn, exn_type);\n+        let exn_type = exn0.get_type().make_pointer();\n+        let exn = self.context.new_cast(None, exn0, exn_type);\n         let exn = exn.dereference(None).to_rvalue();\n         let unwind_resume = self.context.get_target_builtin_function(\"__builtin_unwind_resume\");\n         self.llbb().add_eval(None, self.context.new_call(None, unwind_resume, &[exn]));\n         self.unreachable();\n     }\n \n     #[cfg(not(feature=\"master\"))]\n-    fn resume(&mut self, _exn: RValue<'gcc>) {\n+    fn resume(&mut self, _exn0: RValue<'gcc>, _exn1: RValue<'gcc>) {\n         self.unreachable();\n     }\n "}]}