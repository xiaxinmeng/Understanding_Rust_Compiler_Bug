{"sha": "6a7fc76b89dca4d1b4e3e50047183535aee98627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhN2ZjNzZiODlkY2E0ZDFiNGUzZTUwMDQ3MTgzNTM1YWVlOTg2Mjc=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-04-17T17:41:37Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-04-17T17:42:36Z"}, "message": "Fix type equality for dyn Trait\n\nFixes a lot of false type mismatches.\n\n(And as always when touching the unification code, I have to say I'm looking\nforward to replacing it by Chalk's...)", "tree": {"sha": "54d7d20ef4dc585bf85d176173f6d59273699681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d7d20ef4dc585bf85d176173f6d59273699681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a7fc76b89dca4d1b4e3e50047183535aee98627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7fc76b89dca4d1b4e3e50047183535aee98627", "html_url": "https://github.com/rust-lang/rust/commit/6a7fc76b89dca4d1b4e3e50047183535aee98627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a7fc76b89dca4d1b4e3e50047183535aee98627/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f11236e511ec8470276180fa728f4e00c17ee3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11236e511ec8470276180fa728f4e00c17ee3fb", "html_url": "https://github.com/rust-lang/rust/commit/f11236e511ec8470276180fa728f4e00c17ee3fb"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "89200255a28702c45c8ebc0d50ab6de88a54bd24", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a7fc76b89dca4d1b4e3e50047183535aee98627/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a7fc76b89dca4d1b4e3e50047183535aee98627/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=6a7fc76b89dca4d1b4e3e50047183535aee98627", "patch": "@@ -51,7 +51,7 @@ impl<'a> InferenceContext<'a> {\n             // Trivial cases, this should go after `never` check to\n             // avoid infer result type to be never\n             _ => {\n-                if self.table.unify_inner_trivial(&from_ty, &to_ty) {\n+                if self.table.unify_inner_trivial(&from_ty, &to_ty, 0) {\n                     return true;\n                 }\n             }\n@@ -175,7 +175,7 @@ impl<'a> InferenceContext<'a> {\n                     return self.table.unify_substs(st1, st2, 0);\n                 }\n                 _ => {\n-                    if self.table.unify_inner_trivial(&derefed_ty, &to_ty) {\n+                    if self.table.unify_inner_trivial(&derefed_ty, &to_ty, 0) {\n                         return true;\n                     }\n                 }"}, {"sha": "ab0bc8b70b652e09fb74277e14de8546272d4bc6", "filename": "crates/ra_hir_ty/src/infer/unify.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6a7fc76b89dca4d1b4e3e50047183535aee98627/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a7fc76b89dca4d1b4e3e50047183535aee98627/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs?ref=6a7fc76b89dca4d1b4e3e50047183535aee98627", "patch": "@@ -8,7 +8,8 @@ use test_utils::tested_by;\n \n use super::{InferenceContext, Obligation};\n use crate::{\n-    BoundVar, Canonical, DebruijnIndex, InEnvironment, InferTy, Substs, Ty, TypeCtor, TypeWalk,\n+    BoundVar, Canonical, DebruijnIndex, GenericPredicate, InEnvironment, InferTy, Substs, Ty,\n+    TypeCtor, TypeWalk,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -226,16 +227,26 @@ impl InferenceTable {\n             (Ty::Apply(a_ty1), Ty::Apply(a_ty2)) if a_ty1.ctor == a_ty2.ctor => {\n                 self.unify_substs(&a_ty1.parameters, &a_ty2.parameters, depth + 1)\n             }\n-            _ => self.unify_inner_trivial(&ty1, &ty2),\n+\n+            _ => self.unify_inner_trivial(&ty1, &ty2, depth),\n         }\n     }\n \n-    pub(super) fn unify_inner_trivial(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n+    pub(super) fn unify_inner_trivial(&mut self, ty1: &Ty, ty2: &Ty, depth: usize) -> bool {\n         match (ty1, ty2) {\n             (Ty::Unknown, _) | (_, Ty::Unknown) => true,\n \n             (Ty::Placeholder(p1), Ty::Placeholder(p2)) if *p1 == *p2 => true,\n \n+            (Ty::Dyn(dyn1), Ty::Dyn(dyn2)) if dyn1.len() == dyn2.len() => {\n+                for (pred1, pred2) in dyn1.iter().zip(dyn2.iter()) {\n+                    if !self.unify_preds(pred1, pred2, depth + 1) {\n+                        return false;\n+                    }\n+                }\n+                true\n+            }\n+\n             (Ty::Infer(InferTy::TypeVar(tv1)), Ty::Infer(InferTy::TypeVar(tv2)))\n             | (Ty::Infer(InferTy::IntVar(tv1)), Ty::Infer(InferTy::IntVar(tv2)))\n             | (Ty::Infer(InferTy::FloatVar(tv1)), Ty::Infer(InferTy::FloatVar(tv2)))\n@@ -268,6 +279,31 @@ impl InferenceTable {\n         }\n     }\n \n+    fn unify_preds(\n+        &mut self,\n+        pred1: &GenericPredicate,\n+        pred2: &GenericPredicate,\n+        depth: usize,\n+    ) -> bool {\n+        match (pred1, pred2) {\n+            (GenericPredicate::Implemented(tr1), GenericPredicate::Implemented(tr2))\n+                if tr1.trait_ == tr2.trait_ =>\n+            {\n+                self.unify_substs(&tr1.substs, &tr2.substs, depth + 1)\n+            }\n+            (GenericPredicate::Projection(proj1), GenericPredicate::Projection(proj2))\n+                if proj1.projection_ty.associated_ty == proj2.projection_ty.associated_ty =>\n+            {\n+                self.unify_substs(\n+                    &proj1.projection_ty.parameters,\n+                    &proj2.projection_ty.parameters,\n+                    depth + 1,\n+                ) && self.unify_inner(&proj1.ty, &proj2.ty, depth + 1)\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     /// If `ty` is a type variable with known type, returns that type;\n     /// otherwise, return ty.\n     pub fn resolve_ty_shallow<'b>(&mut self, ty: &'b Ty) -> Cow<'b, Ty> {"}, {"sha": "f6e3e07cde1217e1f2512d80d32145f0d78591fa", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a7fc76b89dca4d1b4e3e50047183535aee98627/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a7fc76b89dca4d1b4e3e50047183535aee98627/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=6a7fc76b89dca4d1b4e3e50047183535aee98627", "patch": "@@ -2378,3 +2378,27 @@ fn main() {\n     );\n     assert_eq!(t, \"Foo\");\n }\n+\n+#[test]\n+fn trait_object_no_coercion() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+trait Foo {}\n+\n+fn foo(x: &dyn Foo) {}\n+\n+fn test(x: &dyn Foo) {\n+    foo(x);\n+}\n+\"#, true),\n+        @r###\"\n+    [22; 23) 'x': &dyn Foo\n+    [35; 37) '{}': ()\n+    [47; 48) 'x': &dyn Foo\n+    [60; 75) '{     foo(x); }': ()\n+    [66; 69) 'foo': fn foo(&dyn Foo)\n+    [66; 72) 'foo(x)': ()\n+    [70; 71) 'x': &dyn Foo\n+    \"###\n+    );\n+}"}]}