{"sha": "535581185921ebb2602d4f42604e54436052fc1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNTU4MTE4NTkyMWViYjI2MDJkNGY0MjYwNGU1NDQzNjA1MmZjMWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-08T22:17:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-08T22:21:49Z"}, "message": "rustc: Add the ability to fold over annotations", "tree": {"sha": "425d25af988c7c72faff4e8ec0af7989b101ec2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/425d25af988c7c72faff4e8ec0af7989b101ec2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/535581185921ebb2602d4f42604e54436052fc1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/535581185921ebb2602d4f42604e54436052fc1f", "html_url": "https://github.com/rust-lang/rust/commit/535581185921ebb2602d4f42604e54436052fc1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/535581185921ebb2602d4f42604e54436052fc1f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad7aff8203c5ad1d5a287e3205e8e6bbd6695fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7aff8203c5ad1d5a287e3205e8e6bbd6695fb3", "html_url": "https://github.com/rust-lang/rust/commit/ad7aff8203c5ad1d5a287e3205e8e6bbd6695fb3"}], "stats": {"total": 119, "additions": 83, "deletions": 36}, "files": [{"sha": "048e69bea7d5206df1c0a55421154cc79cef4658", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 83, "deletions": 36, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/535581185921ebb2602d4f42604e54436052fc1f/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535581185921ebb2602d4f42604e54436052fc1f/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=535581185921ebb2602d4f42604e54436052fc1f", "patch": "@@ -288,6 +288,9 @@ type ast_fold[ENV] =\n \n      (fn(&ENV e, &span sp, ident i) -> @view_item) fold_view_item_export,\n \n+     // Annotation folds.\n+     (fn(&ENV e, ann a) -> ann)                   fold_ann,\n+\n      // Additional nodes.\n      (fn(&ENV e, &span sp,\n          &ast.block_) -> block)                   fold_block,\n@@ -536,15 +539,17 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n     alt (e.node) {\n         case (ast.expr_vec(?es, ?mut, ?t)) {\n             auto ees = fold_exprs(env_, fld, es);\n-            ret fld.fold_expr_vec(env_, e.span, ees, mut, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_vec(env_, e.span, ees, mut, t2);\n         }\n \n         case (ast.expr_tup(?es, ?t)) {\n             let vec[ast.elt] elts = vec();\n             for (ast.elt e in es) {\n                 elts += vec(fold_tup_elt[ENV](env, fld, e));\n             }\n-            ret fld.fold_expr_tup(env_, e.span, elts, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_tup(env_, e.span, elts, t2);\n         }\n \n         case (ast.expr_rec(?fs, ?base, ?t)) {\n@@ -559,17 +564,20 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n                     b = some[@expr](fold_expr(env_, fld, eb));\n                 }\n             }\n-            ret fld.fold_expr_rec(env_, e.span, fields, b, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_rec(env_, e.span, fields, b, t2);\n         }\n \n         case (ast.expr_call(?f, ?args, ?t)) {\n             auto ff = fold_expr(env_, fld, f);\n             auto aargs = fold_exprs(env_, fld, args);\n-            ret fld.fold_expr_call(env_, e.span, ff, aargs, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_call(env_, e.span, ff, aargs, t2);\n         }\n \n         case (ast.expr_self_method(?ident, ?t)) {\n-            ret fld.fold_expr_self_method(env_, e.span, ident, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_self_method(env_, e.span, ident, t2);\n         }\n \n         case (ast.expr_bind(?f, ?args_opt, ?t)) {\n@@ -586,34 +594,40 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n                     case (none[@ast.expr]) { /* empty */ }\n                 }\n             }\n-            ret fld.fold_expr_bind(env_, e.span, ff, aargs_opt, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_bind(env_, e.span, ff, aargs_opt, t2);\n         }\n \n         case (ast.expr_spawn(?dom, ?name, ?f, ?args, ?t)) {\n             auto ff = fold_expr(env_, fld, f);\n             auto aargs = fold_exprs(env_, fld, args);\n-            ret fld.fold_expr_spawn(env_, e.span, dom, name, ff, aargs, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_spawn(env_, e.span, dom, name, ff, aargs, t2);\n         }\n \n         case (ast.expr_binary(?op, ?a, ?b, ?t)) {\n             auto aa = fold_expr(env_, fld, a);\n             auto bb = fold_expr(env_, fld, b);\n-            ret fld.fold_expr_binary(env_, e.span, op, aa, bb, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_binary(env_, e.span, op, aa, bb, t2);\n         }\n \n         case (ast.expr_unary(?op, ?a, ?t)) {\n             auto aa = fold_expr(env_, fld, a);\n-            ret fld.fold_expr_unary(env_, e.span, op, aa, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_unary(env_, e.span, op, aa, t2);\n         }\n \n         case (ast.expr_lit(?lit, ?t)) {\n-            ret fld.fold_expr_lit(env_, e.span, lit, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_lit(env_, e.span, lit, t2);\n         }\n \n         case (ast.expr_cast(?e, ?t, ?at)) {\n             auto ee = fold_expr(env_, fld, e);\n             auto tt = fold_ty(env, fld, t);\n-            ret fld.fold_expr_cast(env_, e.span, ee, tt, at);\n+            auto at2 = fld.fold_ann(env_, at);\n+            ret fld.fold_expr_cast(env_, e.span, ee, tt, at2);\n         }\n \n         case (ast.expr_if(?cnd, ?thn, ?els, ?t)) {\n@@ -626,33 +640,38 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n                 }\n                 case (_) { /* fall through */  }\n             }\n-            ret fld.fold_expr_if(env_, e.span, ccnd, tthn, eels, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_if(env_, e.span, ccnd, tthn, eels, t2);\n         }\n \n         case (ast.expr_for(?decl, ?seq, ?body, ?t)) {\n             auto ddecl = fold_decl(env_, fld, decl);\n             auto sseq = fold_expr(env_, fld, seq);\n             auto bbody = fold_block(env_, fld, body);\n-            ret fld.fold_expr_for(env_, e.span, ddecl, sseq, bbody, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_for(env_, e.span, ddecl, sseq, bbody, t2);\n         }\n \n         case (ast.expr_for_each(?decl, ?seq, ?body, ?t)) {\n             auto ddecl = fold_decl(env_, fld, decl);\n             auto sseq = fold_expr(env_, fld, seq);\n             auto bbody = fold_block(env_, fld, body);\n-            ret fld.fold_expr_for_each(env_, e.span, ddecl, sseq, bbody, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_for_each(env_, e.span, ddecl, sseq, bbody, t2);\n         }\n \n         case (ast.expr_while(?cnd, ?body, ?t)) {\n             auto ccnd = fold_expr(env_, fld, cnd);\n             auto bbody = fold_block(env_, fld, body);\n-            ret fld.fold_expr_while(env_, e.span, ccnd, bbody, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_while(env_, e.span, ccnd, bbody, t2);\n         }\n \n         case (ast.expr_do_while(?body, ?cnd, ?t)) {\n             auto bbody = fold_block(env_, fld, body);\n             auto ccnd = fold_expr(env_, fld, cnd);\n-            ret fld.fold_expr_do_while(env_, e.span, bbody, ccnd, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_do_while(env_, e.span, bbody, ccnd, t2);\n         }\n \n         case (ast.expr_alt(?expr, ?arms, ?t)) {\n@@ -661,72 +680,85 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             for (ast.arm a in arms) {\n                 aarms += vec(fold_arm(env_, fld, a));\n             }\n-            ret fld.fold_expr_alt(env_, e.span, eexpr, aarms, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_alt(env_, e.span, eexpr, aarms, t2);\n         }\n \n         case (ast.expr_block(?b, ?t)) {\n             auto bb = fold_block(env_, fld, b);\n-            ret fld.fold_expr_block(env_, e.span, bb, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_block(env_, e.span, bb, t2);\n         }\n \n         case (ast.expr_assign(?lhs, ?rhs, ?t)) {\n             auto llhs = fold_expr(env_, fld, lhs);\n             auto rrhs = fold_expr(env_, fld, rhs);\n-            ret fld.fold_expr_assign(env_, e.span, llhs, rrhs, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_assign(env_, e.span, llhs, rrhs, t2);\n         }\n \n         case (ast.expr_assign_op(?op, ?lhs, ?rhs, ?t)) {\n             auto llhs = fold_expr(env_, fld, lhs);\n             auto rrhs = fold_expr(env_, fld, rhs);\n-            ret fld.fold_expr_assign_op(env_, e.span, op, llhs, rrhs, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_assign_op(env_, e.span, op, llhs, rrhs, t2);\n         }\n \n         case (ast.expr_send(?lhs, ?rhs, ?t)) {\n             auto llhs = fold_expr(env_, fld, lhs);\n             auto rrhs = fold_expr(env_, fld, rhs);\n-            ret fld.fold_expr_send(env_, e.span, llhs, rrhs, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_send(env_, e.span, llhs, rrhs, t2);\n         }\n \n         case (ast.expr_recv(?lhs, ?rhs, ?t)) {\n             auto llhs = fold_expr(env_, fld, lhs);\n             auto rrhs = fold_expr(env_, fld, rhs);\n-            ret fld.fold_expr_recv(env_, e.span, llhs, rrhs, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_recv(env_, e.span, llhs, rrhs, t2);\n         }\n \n         case (ast.expr_field(?e, ?i, ?t)) {\n             auto ee = fold_expr(env_, fld, e);\n-            ret fld.fold_expr_field(env_, e.span, ee, i, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_field(env_, e.span, ee, i, t2);\n         }\n \n         case (ast.expr_index(?e, ?ix, ?t)) {\n             auto ee = fold_expr(env_, fld, e);\n             auto iix = fold_expr(env_, fld, ix);\n-            ret fld.fold_expr_index(env_, e.span, ee, iix, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_index(env_, e.span, ee, iix, t2);\n         }\n \n         case (ast.expr_path(?p, ?r, ?t)) {\n             auto p_ = fold_path(env_, fld, p);\n-            ret fld.fold_expr_path(env_, e.span, p_, r, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_path(env_, e.span, p_, r, t2);\n         }\n \n         case (ast.expr_ext(?p, ?args, ?body, ?expanded, ?t)) {\n             // Only fold the expanded expression, not the\n             // expressions involved in syntax extension\n             auto exp = fold_expr(env_, fld, expanded);\n+            auto t2 = fld.fold_ann(env_, t);\n             ret fld.fold_expr_ext(env_, e.span, p, args, body,\n-                                  exp, t);\n+                                  exp, t2);\n         }\n \n         case (ast.expr_fail(?t)) {\n-            ret fld.fold_expr_fail(env_, e.span, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_fail(env_, e.span, t2);\n         }\n \n         case (ast.expr_break(?t)) {\n-            ret fld.fold_expr_break(env_, e.span, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_break(env_, e.span, t2);\n         }\n \n         case (ast.expr_cont(?t)) {\n-            ret fld.fold_expr_cont(env_, e.span, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_cont(env_, e.span, t2);\n         }\n \n         case (ast.expr_ret(?oe, ?t)) {\n@@ -737,7 +769,8 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n                 }\n                 case (_) { /* fall through */  }\n             }\n-            ret fld.fold_expr_ret(env_, e.span, oee, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_ret(env_, e.span, oee, t2);\n         }\n \n         case (ast.expr_put(?oe, ?t)) {\n@@ -748,31 +781,37 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n                 }\n                 case (_) { /* fall through */  }\n             }\n-            ret fld.fold_expr_put(env_, e.span, oee, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_put(env_, e.span, oee, t2);\n         }\n \n         case (ast.expr_be(?x, ?t)) {\n             auto ee = fold_expr(env_, fld, x);\n-            ret fld.fold_expr_be(env_, e.span, ee, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_be(env_, e.span, ee, t2);\n         }\n \n         case (ast.expr_log(?x, ?t)) {\n             auto ee = fold_expr(env_, fld, x);\n-            ret fld.fold_expr_log(env_, e.span, ee, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_log(env_, e.span, ee, t2);\n         }\n \n         case (ast.expr_check_expr(?x, ?t)) {\n             auto ee = fold_expr(env_, fld, x);\n-            ret fld.fold_expr_check_expr(env_, e.span, ee, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_check_expr(env_, e.span, ee, t2);\n         }\n \n         case (ast.expr_port(?t)) {\n-            ret fld.fold_expr_port(env_, e.span, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_port(env_, e.span, t2);\n         }\n \n         case (ast.expr_chan(?x, ?t)) {\n             auto ee = fold_expr(env_, fld, x);\n-            ret fld.fold_expr_chan(env_, e.span, ee, t);\n+            auto t2 = fld.fold_ann(env_, t);\n+            ret fld.fold_expr_chan(env_, e.span, ee, t2);\n         }\n     }\n \n@@ -1475,6 +1514,12 @@ fn identity_fold_view_item_export[ENV](&ENV e, &span sp, ident i)\n     ret @respan(sp, ast.view_item_export(i));\n }\n \n+// Annotation folding.\n+\n+fn identity_fold_ann[ENV](&ENV e, ann a) -> ann {\n+    ret a;\n+}\n+\n // Additional identities.\n \n fn identity_fold_block[ENV](&ENV e, &span sp, &ast.block_ blk) -> block {\n@@ -1668,6 +1713,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_view_item_export =\n              bind identity_fold_view_item_export[ENV](_,_,_),\n \n+         fold_ann = bind identity_fold_ann[ENV](_,_),\n+\n          fold_block = bind identity_fold_block[ENV](_,_,_),\n          fold_fn = bind identity_fold_fn[ENV](_,_,_,_),\n          fold_fn_decl = bind identity_fold_fn_decl[ENV](_,_,_,_),"}]}