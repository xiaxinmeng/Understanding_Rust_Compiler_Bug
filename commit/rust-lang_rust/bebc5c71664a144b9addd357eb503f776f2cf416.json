{"sha": "bebc5c71664a144b9addd357eb503f776f2cf416", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYmM1YzcxNjY0YTE0NGI5YWRkZDM1N2ViNTAzZjc3NmYyY2Y0MTY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-13T21:04:04Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-13T21:04:04Z"}, "message": "Merge #1271\n\n1271: make AstId untyped r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a7e95d622803bd745a93713dbce396be11846543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e95d622803bd745a93713dbce396be11846543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bebc5c71664a144b9addd357eb503f776f2cf416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bebc5c71664a144b9addd357eb503f776f2cf416", "html_url": "https://github.com/rust-lang/rust/commit/bebc5c71664a144b9addd357eb503f776f2cf416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bebc5c71664a144b9addd357eb503f776f2cf416/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "d7a4ae43f9308f683ddb3ca89104c5eb12d8d6b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a4ae43f9308f683ddb3ca89104c5eb12d8d6b3", "html_url": "https://github.com/rust-lang/rust/commit/d7a4ae43f9308f683ddb3ca89104c5eb12d8d6b3"}, {"sha": "549728bba87ed8f4375f27bb9a77223bf8f65452", "url": "https://api.github.com/repos/rust-lang/rust/commits/549728bba87ed8f4375f27bb9a77223bf8f65452", "html_url": "https://github.com/rust-lang/rust/commit/549728bba87ed8f4375f27bb9a77223bf8f65452"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "d4152577944b6ae7fa4d21f446d805de7b23d285", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -1,6 +1,6 @@\n use std::{fmt, any::Any};\n \n-use ra_syntax::{SyntaxNodePtr, TreeArc, AstPtr, TextRange, ast, SyntaxNode};\n+use ra_syntax::{SyntaxNodePtr, TreeArc, AstPtr, TextRange, ast, SyntaxNode, AstNode};\n use relative_path::RelativePathBuf;\n \n use crate::{HirFileId, HirDatabase, Name};\n@@ -30,7 +30,7 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n impl dyn Diagnostic {\n     pub fn syntax_node(&self, db: &impl HirDatabase) -> TreeArc<SyntaxNode> {\n         let source_file = db.hir_parse(self.file());\n-        self.syntax_node_ptr().to_node(&source_file).to_owned()\n+        self.syntax_node_ptr().to_node(source_file.syntax()).to_owned()\n     }\n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n         self.as_any().downcast_ref()"}, {"sha": "aebed6788b8513dbc4c8aa31f684d48d38cf701d", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let source_file = db.parse(file_id.original_file(db));\n             if let Some(field_list_node) = source_map\n                 .expr_syntax(id)\n-                .map(|ptr| ptr.to_node(&source_file))\n+                .map(|ptr| ptr.to_node(source_file.syntax()))\n                 .and_then(StructLit::cast)\n                 .and_then(|lit| lit.named_field_list())\n             {"}, {"sha": "51fa491c3405c64e1b82a38c69576c579f0a6d57", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -34,7 +34,7 @@ impl ImplSourceMap {\n             ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n         };\n \n-        self.map[impl_id].to_node(file).to_owned()\n+        self.map[impl_id].to_node(file.syntax()).to_owned()\n     }\n }\n "}, {"sha": "211e02068155da79821105a855f203eeea4c1371", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -39,7 +39,10 @@ type ImportSource = Either<TreeArc<ast::UseTree>, TreeArc<ast::ExternCrateItem>>\n \n impl ImportSourcePtr {\n     fn to_node(self, file: &SourceFile) -> ImportSource {\n-        self.map(|ptr| ptr.to_node(file).to_owned(), |ptr| ptr.to_node(file).to_owned())\n+        self.map(\n+            |ptr| ptr.to_node(file.syntax()).to_owned(),\n+            |ptr| ptr.to_node(file.syntax()).to_owned(),\n+        )\n     }\n }\n "}, {"sha": "7a39be77987ebf3ee58403bb498625eec587cefc", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -1,7 +1,7 @@\n use std::{marker::PhantomData, sync::Arc, hash::{Hash, Hasher}};\n \n use ra_arena::{Arena, RawId, impl_arena_id};\n-use ra_syntax::{SyntaxNodePtr, TreeArc, SyntaxNode, SourceFile, AstNode, ast};\n+use ra_syntax::{SyntaxNodePtr, TreeArc, SyntaxNode, AstNode, ast};\n \n use crate::{HirFileId, DefDatabase};\n \n@@ -89,7 +89,7 @@ pub struct AstIdMap {\n impl AstIdMap {\n     pub(crate) fn ast_id_map_query(db: &impl DefDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n         let source_file = db.hir_parse(file_id);\n-        Arc::new(AstIdMap::from_source_file(&source_file))\n+        Arc::new(AstIdMap::from_source(source_file.syntax()))\n     }\n \n     pub(crate) fn file_item_query(\n@@ -98,7 +98,7 @@ impl AstIdMap {\n         ast_id: ErasedFileAstId,\n     ) -> TreeArc<SyntaxNode> {\n         let source_file = db.hir_parse(file_id);\n-        db.ast_id_map(file_id).arena[ast_id].to_node(&source_file).to_owned()\n+        db.ast_id_map(file_id).arena[ast_id].to_node(source_file.syntax()).to_owned()\n     }\n \n     pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {\n@@ -115,13 +115,14 @@ impl AstIdMap {\n         FileAstId { raw, _ty: PhantomData }\n     }\n \n-    fn from_source_file(source_file: &SourceFile) -> AstIdMap {\n+    fn from_source(node: &SyntaxNode) -> AstIdMap {\n+        assert!(node.parent().is_none());\n         let mut res = AstIdMap { arena: Arena::default() };\n         // By walking the tree in bread-first order we make sure that parents\n         // get lower ids then children. That is, adding a new child does not\n         // change parent's id. This means that, say, adding a new function to a\n         // trait does not change ids of top-level items, which helps caching.\n-        bfs(source_file.syntax(), |it| {\n+        bfs(node, |it| {\n             if let Some(module_item) = ast::ModuleItem::cast(it) {\n                 res.alloc(module_item.syntax());\n             } else if let Some(macro_call) = ast::MacroCall::cast(it) {"}, {"sha": "f8364203daff2e0d6c2b2827631e83b081e41107", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -2715,7 +2715,7 @@ fn infer(content: &str) -> String {\n         // sort ranges for consistency\n         types.sort_by_key(|(ptr, _)| (ptr.range().start(), ptr.range().end()));\n         for (syntax_ptr, ty) in &types {\n-            let node = syntax_ptr.to_node(&source_file);\n+            let node = syntax_ptr.to_node(source_file.syntax());\n             let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node) {\n                 (self_param.self_kw_token().range(), \"self\".to_string())\n             } else {"}, {"sha": "e23d178b095943058db9d3941048d2e704af9168", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let file_id = d.file().original_file(db);\n         let source_file = db.parse(file_id);\n         let syntax_node = d.syntax_node_ptr();\n-        let node = NamedFieldList::cast(syntax_node.to_node(&source_file)).unwrap();\n+        let node = NamedFieldList::cast(syntax_node.to_node(source_file.syntax())).unwrap();\n         let mut ast_editor = AstEditor::new(node);\n         for f in d.missed_fields.iter() {\n             ast_editor.append_field(&AstBuilder::<NamedField>::from_name(f));\n@@ -281,7 +281,7 @@ mod tests {\n                 one: i32,\n                 two: i64,\n             }\n-            \n+\n             fn test_fn() {\n                 let one = 1;\n                 let s = TestStruct{ one, two: 2 };\n@@ -298,7 +298,7 @@ mod tests {\n                 one: i32,\n                 two: i64,\n             }\n-            \n+\n             fn test_fn() {\n                 let one = 1;\n                 let s = TestStruct{ ..a };"}, {"sha": "7ea336c50f1deecf26048a7f7db4a5ae9269b879", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -81,7 +81,7 @@ impl NavigationTarget {\n     ) -> NavigationTarget {\n         let file = db.parse(file_id);\n         let (name, full_range) = match pat {\n-            Either::A(pat) => match pat.to_node(&file).kind() {\n+            Either::A(pat) => match pat.to_node(file.syntax()).kind() {\n                 ast::PatKind::BindPat(pat) => {\n                     return NavigationTarget::from_bind_pat(file_id, &pat)\n                 }"}, {"sha": "d5c2b08ca0000fef80cc326656989269e882844c", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -86,7 +86,7 @@ pub(crate) fn find_all_refs(\n         let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n         let resolved = analyzer.resolve_local_name(name_ref)?;\n         if let Either::A(ptr) = resolved.ptr() {\n-            if let ast::PatKind::BindPat(binding) = ptr.to_node(source_file).kind() {\n+            if let ast::PatKind::BindPat(binding) = ptr.to_node(source_file.syntax()).kind() {\n                 return Some((binding, analyzer));\n             }\n         }"}, {"sha": "cee9503ca9d6cd909bb59f3e23d789dea483c74d", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -3,7 +3,7 @@ use std::{\n     iter::successors,\n };\n use crate::{\n-    AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n+    AstNode, SyntaxKind, SyntaxNode, TextRange,\n };\n \n /// A pointer to a syntax node inside a file. It can be used to remember a\n@@ -19,8 +19,9 @@ impl SyntaxNodePtr {\n         SyntaxNodePtr { range: node.range(), kind: node.kind() }\n     }\n \n-    pub fn to_node(self, source_file: &SourceFile) -> &SyntaxNode {\n-        successors(Some(source_file.syntax()), |&node| {\n+    pub fn to_node(self, root: &SyntaxNode) -> &SyntaxNode {\n+        assert!(root.parent().is_none());\n+        successors(Some(root), |&node| {\n             node.children().find(|it| self.range.is_subrange(&it.range()))\n         })\n         .find(|it| it.range() == self.range && it.kind() == self.kind)\n@@ -55,8 +56,8 @@ impl<N: AstNode> AstPtr<N> {\n         AstPtr { raw: SyntaxNodePtr::new(node.syntax()), _ty: PhantomData }\n     }\n \n-    pub fn to_node(self, source_file: &SourceFile) -> &N {\n-        let syntax_node = self.raw.to_node(source_file);\n+    pub fn to_node(self, root: &SyntaxNode) -> &N {\n+        let syntax_node = self.raw.to_node(root);\n         N::cast(syntax_node).unwrap()\n     }\n \n@@ -73,11 +74,11 @@ impl<N: AstNode> From<AstPtr<N>> for SyntaxNodePtr {\n \n #[test]\n fn test_local_syntax_ptr() {\n-    use crate::{ast, AstNode};\n+    use crate::{ast, AstNode, SourceFile};\n \n     let file = SourceFile::parse(\"struct Foo { f: u32, }\");\n     let field = file.syntax().descendants().find_map(ast::NamedFieldDef::cast).unwrap();\n     let ptr = SyntaxNodePtr::new(field.syntax());\n-    let field_syntax = ptr.to_node(&file);\n+    let field_syntax = ptr.to_node(file.syntax());\n     assert_eq!(field.syntax(), &*field_syntax);\n }"}, {"sha": "80054f529a00b5235de23938d05addac8da29761", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebc5c71664a144b9addd357eb503f776f2cf416/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=bebc5c71664a144b9addd357eb503f776f2cf416", "patch": "@@ -392,7 +392,7 @@ impl SyntaxNode {\n         // `range` private afterwards\n         let mut ptr = SyntaxNodePtr::new(self);\n         ptr.range = TextRange::offset_len(ptr.range().start(), len);\n-        return ptr.to_node(&file).to_owned();\n+        return ptr.to_node(file.syntax()).to_owned();\n     }\n \n     fn position_of_child(&self, child: SyntaxElement) -> usize {"}]}