{"sha": "57967269e9946945dedd360e8e8654f5dd76ebd1", "node_id": "C_kwDOAAsO6NoAKDU3OTY3MjY5ZTk5NDY5NDVkZWRkMzYwZThlODY1NGY1ZGQ3NmViZDE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-04-23T23:41:36Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-05-03T02:00:38Z"}, "message": "When suggesting to import an item, also suggest changing the path if appropriate\n\nWhen we don't find an item we search all of them for an appropriate\nimport and suggest `use`ing it. This is sometimes done for expressions\nthat have paths with more than one segment. We now also suggest changing\nthat path to work with the `use`.\n\nFix #95413", "tree": {"sha": "19a8e48a54cf5ac759a9354027ae8b94e876bf7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a8e48a54cf5ac759a9354027ae8b94e876bf7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57967269e9946945dedd360e8e8654f5dd76ebd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57967269e9946945dedd360e8e8654f5dd76ebd1", "html_url": "https://github.com/rust-lang/rust/commit/57967269e9946945dedd360e8e8654f5dd76ebd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57967269e9946945dedd360e8e8654f5dd76ebd1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0ac7ea23888438752957eeeb5aa2b73b4fda72", "html_url": "https://github.com/rust-lang/rust/commit/3d0ac7ea23888438752957eeeb5aa2b73b4fda72"}], "stats": {"total": 166, "additions": 149, "deletions": 17}, "files": [{"sha": "f75ea583d852e744d87880de7adb186d1c5dd413", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -117,7 +117,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn report_with_use_injections(&mut self, krate: &Crate) {\n-        for UseError { mut err, candidates, def_id, instead, suggestion } in\n+        for UseError { mut err, candidates, def_id, instead, suggestion, path } in\n             self.use_injections.drain(..)\n         {\n             let (span, found_use) = if let Some(def_id) = def_id.as_local() {\n@@ -135,6 +135,7 @@ impl<'a> Resolver<'a> {\n                     if instead { Instead::Yes } else { Instead::No },\n                     found_use,\n                     IsPattern::No,\n+                    path,\n                 );\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n                 err.span_suggestion(span, msg, sugg, appl);\n@@ -702,6 +703,7 @@ impl<'a> Resolver<'a> {\n                         Instead::No,\n                         FoundUse::Yes,\n                         IsPattern::Yes,\n+                        vec![],\n                     );\n                 }\n                 err\n@@ -1482,6 +1484,7 @@ impl<'a> Resolver<'a> {\n             Instead::No,\n             FoundUse::Yes,\n             IsPattern::No,\n+            vec![],\n         );\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n@@ -2448,6 +2451,7 @@ fn show_candidates(\n     instead: Instead,\n     found_use: FoundUse,\n     is_pattern: IsPattern,\n+    path: Vec<Segment>,\n ) {\n     if candidates.is_empty() {\n         return;\n@@ -2480,14 +2484,15 @@ fn show_candidates(\n             (\"one of these\", \"items\", String::new())\n         };\n \n+        let tail = if path.len() > 1 { \"...\" } else { \"\" };\n         let instead = if let Instead::Yes = instead { \" instead\" } else { \"\" };\n         let mut msg = if let IsPattern::Yes = is_pattern {\n             format!(\n-                \"if you meant to match on {}{}{}, use the full path in the pattern\",\n-                kind, instead, name\n+                \"if you meant to match on {}{}{}, use the full path in the pattern{}\",\n+                kind, instead, name, tail\n             )\n         } else {\n-            format!(\"consider importing {} {}{}\", determiner, kind, instead)\n+            format!(\"consider importing {} {}{}{}\", determiner, kind, instead, tail)\n         };\n \n         for note in accessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n@@ -2515,6 +2520,14 @@ fn show_candidates(\n                 accessible_path_strings.into_iter().map(|a| a.0),\n                 Applicability::MaybeIncorrect,\n             );\n+            if let [first, .., last] = &path[..] {\n+                err.span_suggestion_verbose(\n+                    first.ident.span.until(last.ident.span),\n+                    \"...and refer to it directly\",\n+                    String::new(),\n+                    Applicability::Unspecified,\n+                );\n+            }\n         } else {\n             msg.push(':');\n "}, {"sha": "21c9461a83d9a866968fa577a55e647cd6d6cfad", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -2682,6 +2682,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     def_id,\n                     instead,\n                     suggestion,\n+                    path: path.into(),\n                 });\n             }\n \n@@ -2745,6 +2746,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     def_id,\n                     instead: false,\n                     suggestion: None,\n+                    path: path.into(),\n                 });\n             } else {\n                 err.cancel();"}, {"sha": "ff11aba49d83613d7e92fed5ee48ff828ec067d6", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -696,6 +696,9 @@ struct UseError<'a> {\n     instead: bool,\n     /// Extra free-form suggestion.\n     suggestion: Option<(Span, &'static str, String, Applicability)>,\n+    /// Path `Segment`s at the place of use that failed. Used for accurate suggestion after telling\n+    /// the user to import the item directly.\n+    path: Vec<Segment>,\n }\n \n #[derive(Clone, Copy, PartialEq, Debug)]"}, {"sha": "a9fb79b7b27cfb73a721b625162c001a28d86411", "filename": "src/test/ui/macros/macro-outer-attributes.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -4,10 +4,15 @@ error[E0425]: cannot find function `bar` in module `a`\n LL |     a::bar();\n    |        ^^^ not found in `a`\n    |\n-help: consider importing this function\n+help: consider importing this function...\n    |\n LL | use b::bar;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     a::bar();\n+LL +     bar();\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "dd9c969fc82fe6ee69374753015e0660aff856f1", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -12,12 +12,17 @@ help: a tuple struct with a similar name exists\n    |\n LL |     check(m1::TS);\n    |               ~~\n-help: consider importing one of these items instead\n+help: consider importing one of these items instead...\n    |\n LL | use m2::S;\n    |\n LL | use xm2::S;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     check(m1::S);\n+LL +     check(S);\n+   | \n \n error[E0423]: expected value, found type alias `xm1::S`\n   --> $DIR/namespace-mix.rs:40:11\n@@ -35,12 +40,17 @@ help: a tuple struct with a similar name exists\n    |\n LL |     check(xm1::TS);\n    |                ~~\n-help: consider importing one of these items instead\n+help: consider importing one of these items instead...\n    |\n LL | use m2::S;\n    |\n LL | use xm2::S;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     check(xm1::S);\n+LL +     check(S);\n+   | \n \n error[E0423]: expected value, found struct variant `m7::V`\n   --> $DIR/namespace-mix.rs:100:11\n@@ -61,12 +71,17 @@ help: a tuple variant with a similar name exists\n    |\n LL |     check(m7::TV);\n    |               ~~\n-help: consider importing one of these items instead\n+help: consider importing one of these items instead...\n    |\n LL | use m8::V;\n    |\n LL | use xm8::V;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     check(m7::V);\n+LL +     check(V);\n+   | \n \n error[E0423]: expected value, found struct variant `xm7::V`\n   --> $DIR/namespace-mix.rs:106:11\n@@ -89,12 +104,17 @@ help: a tuple variant with a similar name exists\n    |\n LL |     check(xm7::TV);\n    |                ~~\n-help: consider importing one of these items instead\n+help: consider importing one of these items instead...\n    |\n LL | use m8::V;\n    |\n LL | use xm8::V;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     check(xm7::V);\n+LL +     check(V);\n+   | \n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:11"}, {"sha": "f6f3babc2d5e3361cfb3accf020fd4f4eb60834c", "filename": "src/test/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -10,10 +10,15 @@ error[E0425]: cannot find function `hi_str` in module `circular_modules_main`\n LL |     println!(\"{}\", circular_modules_main::hi_str());\n    |                                           ^^^^^^ not found in `circular_modules_main`\n    |\n-help: consider importing this function\n+help: consider importing this function...\n    |\n LL | use hi_str;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     println!(\"{}\", circular_modules_main::hi_str());\n+LL +     println!(\"{}\", hi_str());\n+   | \n \n error: aborting due to 2 previous errors\n "}, {"sha": "f501683ebc95f49cb89133f92edfe97c7870cdcd", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -4,32 +4,47 @@ error[E0425]: cannot find value `A` in crate `namespaced_enums`\n LL |     let _ = namespaced_enums::A;\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: consider importing this unit variant\n+help: consider importing this unit variant...\n    |\n LL | use namespaced_enums::Foo::A;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     let _ = namespaced_enums::A;\n+LL +     let _ = A;\n+   | \n \n error[E0425]: cannot find function, tuple struct or tuple variant `B` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:7:31\n    |\n LL |     let _ = namespaced_enums::B(10);\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: consider importing this tuple variant\n+help: consider importing this tuple variant...\n    |\n LL | use namespaced_enums::Foo::B;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     let _ = namespaced_enums::B(10);\n+LL +     let _ = B(10);\n+   | \n \n error[E0422]: cannot find struct, variant or union type `C` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:9:31\n    |\n LL |     let _ = namespaced_enums::C { a: 10 };\n    |                               ^ not found in `namespaced_enums`\n    |\n-help: consider importing this variant\n+help: consider importing this variant...\n    |\n LL | use namespaced_enums::Foo::C;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     let _ = namespaced_enums::C { a: 10 };\n+LL +     let _ = C { a: 10 };\n+   | \n \n error: aborting due to 3 previous errors\n "}, {"sha": "ef0b30d98d8841d9d9620d80139589abdf861526", "filename": "src/test/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -4,12 +4,17 @@ error[E0425]: cannot find value `LOG10_2` in module `std::f64`\n LL |     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n    |                                                ^^^^^^^ not found in `std::f64`\n    |\n-help: consider importing one of these items\n+help: consider importing one of these items...\n    |\n LL | use std::f32::consts::LOG10_2;\n    |\n LL | use std::f64::consts::LOG10_2;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n+LL +     const M: usize = (f64::from(N) * LOG10_2) as usize;\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "265f370494aa72559595c6cc767357755472f773", "filename": "src/test/ui/resolve/missing-in-namespace.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -4,10 +4,15 @@ error[E0433]: failed to resolve: could not find `hahmap` in `std`\n LL |     let _map = std::hahmap::HashMap::new();\n    |                             ^^^^^^^ not found in `std::hahmap`\n    |\n-help: consider importing this struct\n+help: consider importing this struct...\n    |\n LL | use std::collections::HashMap;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     let _map = std::hahmap::HashMap::new();\n+LL +     let _map = HashMap::new();\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "4ac18c0e7959965a52c999411cd11ff88735f87f", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -99,12 +99,17 @@ help: a function with a similar name exists\n    |\n LL |     let _: E = m::f;\n    |                   ~\n-help: consider importing one of these items instead\n+help: consider importing one of these items instead...\n    |\n LL | use std::f32::consts::E;\n    |\n LL | use std::f64::consts::E;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     let _: E = m::E;\n+LL +     let _: E = E;\n+   | \n \n error[E0423]: expected value, found struct variant `m::E::Struct`\n   --> $DIR/privacy-enum-ctor.rs:45:16"}, {"sha": "3db3706ecf51dcbba3b4f86cbb053cba2662c7e1", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -10,10 +10,15 @@ error[E0412]: cannot find type `u8` in the crate root\n LL |     let _: ::u8;\n    |              ^^ not found in the crate root\n    |\n-help: consider importing this builtin type\n+help: consider importing this builtin type...\n    |\n LL | use std::primitive::u8;\n    |\n+help: ...and refer to it directly\n+   |\n+LL -     let _: ::u8;\n+LL +     let _: u8;\n+   | \n \n error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5"}, {"sha": "39e90d7a3f786d32b65dc0f77cc98078883bec74", "filename": "src/test/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.fixed?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![allow(non_snake_case)]\n+mod A {\n+    pub trait Trait {}\n+    impl Trait for i32 {}\n+}\n+\n+mod B {\n+    use A::Trait;\n+\n+pub struct A<H: Trait>(pub H); //~ ERROR cannot find trait\n+}\n+\n+fn main() {\n+    let _ = B::A(42);\n+}"}, {"sha": "ee6ed0cae671cb111e1d0df19e212897df49e71e", "filename": "src/test/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.rs?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![allow(non_snake_case)]\n+mod A {\n+    pub trait Trait {}\n+    impl Trait for i32 {}\n+}\n+\n+mod B {\n+    pub struct A<H: A::Trait>(pub H); //~ ERROR cannot find trait\n+}\n+\n+fn main() {\n+    let _ = B::A(42);\n+}"}, {"sha": "413a0c8d60e2c3397a62f7fa3b8b801ce98370d9", "filename": "src/test/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57967269e9946945dedd360e8e8654f5dd76ebd1/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr?ref=57967269e9946945dedd360e8e8654f5dd76ebd1", "patch": "@@ -0,0 +1,19 @@\n+error[E0405]: cannot find trait `Trait` in `A`\n+  --> $DIR/shadowed-path-in-trait-bound-suggestion.rs:9:24\n+   |\n+LL |     pub struct A<H: A::Trait>(pub H);\n+   |                        ^^^^^ not found in `A`\n+   |\n+help: consider importing this trait...\n+   |\n+LL |     use A::Trait;\n+   |\n+help: ...and refer to it directly\n+   |\n+LL -     pub struct A<H: A::Trait>(pub H);\n+LL +     pub struct A<H: Trait>(pub H);\n+   | \n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0405`."}]}