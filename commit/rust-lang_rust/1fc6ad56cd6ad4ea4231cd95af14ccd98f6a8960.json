{"sha": "1fc6ad56cd6ad4ea4231cd95af14ccd98f6a8960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYzZhZDU2Y2Q2YWQ0ZWE0MjMxY2Q5NWFmMTRjY2Q5OGY2YTg5NjA=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-01-07T22:17:37Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-01-07T22:17:37Z"}, "message": "Add HashMap::remove_entry\n\nImplements #46344", "tree": {"sha": "42d4fdc464e503983f69b705c0ab0e762d2e3429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d4fdc464e503983f69b705c0ab0e762d2e3429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fc6ad56cd6ad4ea4231cd95af14ccd98f6a8960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc6ad56cd6ad4ea4231cd95af14ccd98f6a8960", "html_url": "https://github.com/rust-lang/rust/commit/1fc6ad56cd6ad4ea4231cd95af14ccd98f6a8960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fc6ad56cd6ad4ea4231cd95af14ccd98f6a8960/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8724337c233f593e9961609d8b0855d0ec2357a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8724337c233f593e9961609d8b0855d0ec2357a0", "html_url": "https://github.com/rust-lang/rust/commit/8724337c233f593e9961609d8b0855d0ec2357a0"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "4e5385c17e9857678b07a04be842e4930288d814", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1fc6ad56cd6ad4ea4231cd95af14ccd98f6a8960/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fc6ad56cd6ad4ea4231cd95af14ccd98f6a8960/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1fc6ad56cd6ad4ea4231cd95af14ccd98f6a8960", "patch": "@@ -1241,6 +1241,46 @@ impl<K, V, S> HashMap<K, V, S>\n         self.search_mut(k).into_occupied_bucket().map(|bucket| pop_internal(bucket).1)\n     }\n \n+    /// Removes a key from the map, returning the stored key and value if the\n+    /// key was previously in the map.\n+    ///\n+    /// The key may be any borrowed form of the map's key type, but\n+    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n+    /// the key type.\n+    ///\n+    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n+    /// [`Hash`]: ../../std/hash/trait.Hash.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(hash_map_remove_entry)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// # fn main() {\n+    /// let mut map = HashMap::new();\n+    /// map.insert(1, \"a\");\n+    /// assert_eq!(map.remove_entry(&1), Some((1, \"a\")));\n+    /// assert_eq!(map.remove(&1), None);\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"hash_map_remove_entry\", issue = \"46344\")]\n+    pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>\n+        where K: Borrow<Q>,\n+              Q: Hash + Eq\n+    {\n+        if self.table.size() == 0 {\n+            return None;\n+        }\n+\n+        self.search_mut(k)\n+            .into_occupied_bucket()\n+            .map(|bucket| {\n+                let (k, v, _) = pop_internal(bucket);\n+                (k, v)\n+            })\n+    }\n+\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.\n@@ -3040,13 +3080,21 @@ mod test_map {\n     }\n \n     #[test]\n-    fn test_pop() {\n+    fn test_remove() {\n         let mut m = HashMap::new();\n         m.insert(1, 2);\n         assert_eq!(m.remove(&1), Some(2));\n         assert_eq!(m.remove(&1), None);\n     }\n \n+    #[test]\n+    fn test_remove_entry() {\n+        let mut m = HashMap::new();\n+        m.insert(1, 2);\n+        assert_eq!(m.remove_entry(&1), Some((1, 2)));\n+        assert_eq!(m.remove(&1), None);\n+    }\n+\n     #[test]\n     fn test_iterate() {\n         let mut m = HashMap::with_capacity(4);"}]}