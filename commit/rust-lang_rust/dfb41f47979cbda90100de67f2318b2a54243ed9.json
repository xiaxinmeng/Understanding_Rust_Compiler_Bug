{"sha": "dfb41f47979cbda90100de67f2318b2a54243ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjQxZjQ3OTc5Y2JkYTkwMTAwZGU2N2YyMzE4YjJhNTQyNDNlZDk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-22T22:46:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-13T01:32:33Z"}, "message": "Separate out a `hir::Impl` struct\n\nThis makes it possible to pass the `Impl` directly to functions, instead\nof having to pass each of the many fields one at a time. It also\nsimplifies matches in many cases.", "tree": {"sha": "05bbec16289658a43db48b48a978c30693d08baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05bbec16289658a43db48b48a978c30693d08baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb41f47979cbda90100de67f2318b2a54243ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb41f47979cbda90100de67f2318b2a54243ed9", "html_url": "https://github.com/rust-lang/rust/commit/dfb41f47979cbda90100de67f2318b2a54243ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb41f47979cbda90100de67f2318b2a54243ed9/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e45a23ab9d0fb48f69405d580f44151783e18f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e45a23ab9d0fb48f69405d580f44151783e18f3", "html_url": "https://github.com/rust-lang/rust/commit/9e45a23ab9d0fb48f69405d580f44151783e18f3"}], "stats": {"total": 130, "additions": 61, "deletions": 69}, "files": [{"sha": "a7aa2cb35c1c141efe9bb1657d2e997f6c7cb5f2", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{is_copy, match_path, paths, span_lint_and_note};\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -33,10 +33,10 @@ declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n \n impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n "}, {"sha": "b55f59f021dffffadbb2f29fb84b57466dfb36f6", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -7,7 +7,7 @@ use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n+    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Item, ItemKind, Impl, TraitRef, UnsafeSource, Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n@@ -164,10 +164,10 @@ declare_lint_pass!(Derive => [\n \n impl<'tcx> LateLintPass<'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);"}, {"sha": "f518da55cd76fcb014202e5c4f5ca2f65ad22759", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -182,11 +182,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                     lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n                 }\n             },\n-            hir::ItemKind::Impl {\n-                of_trait: ref trait_ref,\n-                ..\n-            } => {\n-                self.in_trait_impl = trait_ref.is_some();\n+            hir::ItemKind::Impl(ref impl_) => {\n+                self.in_trait_impl = impl_.of_trait.is_some();\n             },\n             _ => {},\n         }"}, {"sha": "550876978129ec262b6a98785e0749457f221d01", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::intravisit;\n-use rustc_hir::{self, Body, FnDecl, HirId, HirIdSet, ItemKind, Node};\n+use rustc_hir::{self, Body, FnDecl, HirId, HirIdSet, ItemKind, Impl, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         let parent_node = cx.tcx.hir().find(parent_id);\n \n         if let Some(Node::Item(item)) = parent_node {\n-            if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = item.kind {\n                 return;\n             }\n         }"}, {"sha": "9f389c8d2f9e71fc472c74258dd8f0351164a90f", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -57,11 +57,11 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n-            if let hir::ItemKind::Impl{ items: impl_items, .. } = item.kind;\n+            if let hir::ItemKind::Impl(impl_) = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n             if match_def_path(cx, impl_trait_ref.def_id, &FROM_TRAIT);\n             then {\n-                lint_impl_body(cx, item.span, impl_items);\n+                lint_impl_body(cx, item.span, impl_.items);\n             }\n         }\n     }"}, {"sha": "e287aecb044f570bbcb654db6c88838f93c89984", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -2,7 +2,7 @@\n \n use crate::utils::{in_macro, span_lint_and_then};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{def_id, Crate, Item, ItemKind};\n+use rustc_hir::{def_id, Crate, Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -49,11 +49,11 @@ impl_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);\n \n impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n     fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             ref generics,\n             of_trait: None,\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             // Remember for each inherent implementation encountered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)"}, {"sha": "5474b30bdec80474b959681160b42985e63febb1", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, ImplItemRef, Item, ItemKind, TraitItemRef};\n+use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, ImplItemRef, Item, ItemKind, Impl, TraitItemRef};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -115,11 +115,11 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n \n         match item.kind {\n             ItemKind::Trait(_, _, _, _, ref trait_items) => check_trait_items(cx, item, trait_items),\n-            ItemKind::Impl {\n+            ItemKind::Impl(Impl {\n                 of_trait: None,\n                 items: ref impl_items,\n                 ..\n-            } => check_impl_items(cx, item, impl_items),\n+            }) => check_impl_items(cx, item, impl_items),\n             _ => (),\n         }\n     }"}, {"sha": "2658c365e1357bc7f9cd2b5c3bc1304e768cebce", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -1626,7 +1626,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let self_ty = cx.tcx.type_of(def_id);\n \n         // if this impl block implements a trait, lint in trait definition instead\n-        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+        if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return;\n         }\n "}, {"sha": "a435f86bfd8d56af2f8892b53517127bbd622c7a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, ItemKind, Node, PatKind, QPath, TyKind};\n+use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, ItemKind, Impl, Node, PatKind, QPath, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, TypeFoldable};\n@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "bd3dac663fe273514bfc7c7c8fe75ef5ffa9f56a", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -60,9 +60,9 @@ impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n     #[allow(clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if let hir::ItemKind::Impl {\n+        if let hir::ItemKind::Impl(hir::Impl {\n             of_trait: None, items, ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             for assoc_item in items {\n                 if let hir::AssocItemKind::Fn { has_self: false } = assoc_item.kind {"}, {"sha": "3a9aa6ced03ba7558d89d7c3ee82af6ce46dca6d", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -7,7 +7,7 @@ use std::ptr;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{\n-    BodyId, Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n+    BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n use rustc_infer::traits::specialization_graph;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n@@ -275,10 +275,10 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n \n             match &item.kind {\n-                ItemKind::Impl {\n+                ItemKind::Impl(Impl {\n                     of_trait: Some(of_trait_ref),\n                     ..\n-                } => {\n+                }) => {\n                     if_chain! {\n                         // Lint a trait impl item only when the definition is a generic type,\n                         // assuming a assoc const is not meant to be a interior mutable type.\n@@ -317,7 +317,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                         }\n                     }\n                 },\n-                ItemKind::Impl { of_trait: None, .. } => {\n+                ItemKind::Impl(Impl { of_trait: None, .. }) => {\n                     let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                     // Normalize assoc types originated from generic params.\n                     let normalized = cx.tcx.normalize_erasing_regions(cx.param_env, ty);"}, {"sha": "04b6e5d58478b32b0a5c013badce3c4c9440af04", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{is_automatically_derived, span_lint_hir};\n use if_chain::if_chain;\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -34,7 +34,7 @@ declare_lint_pass!(PartialEqNeImpl => [PARTIALEQ_NE_IMPL]);\n impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n-            if let ItemKind::Impl{ of_trait: Some(ref trait_ref), items: impl_items, .. } = item.kind;\n+            if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n             if !is_automatically_derived(&*item.attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;"}, {"sha": "7814065e31a1a33e1810383adbb322de15ad0d0c", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::attr;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, ItemKind, MutTy, Mutability, Node, PatKind};\n+use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, ItemKind, MutTy, Mutability, Node, PatKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -246,7 +246,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "b832add009f86501b440e26c522756c8f1baebcb", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -8,7 +8,7 @@ use crate::utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n+    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Impl,\n     Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -132,7 +132,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n         if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n-                if let ItemKind::Impl { of_trait: Some(_), .. } = it.kind {\n+                if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = it.kind {\n                     return; // ignore trait impls\n                 }\n             }"}, {"sha": "ca4fd9f35597f10af4fff1b0ae32be3ff441776d", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{get_trait_def_id, paths, span_lint};\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -22,11 +22,11 @@ declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n \n impl<'tcx> LateLintPass<'tcx> for SerdeAPI {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             items,\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let did = trait_ref.path.res.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {"}, {"sha": "675eaf4277a4392b04cd2c90c62e593ff0f4b545", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{match_def_path, match_trait_method, paths, qpath_res, span_lint};\n use if_chain::if_chain;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind};\n+use rustc_hir::{Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -111,7 +111,7 @@ impl LateLintPass<'_> for ToStringInDisplay {\n \n fn is_display_impl(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n     if_chain! {\n-        if let ItemKind::Impl { of_trait: Some(trait_ref), .. } = &item.kind;\n+        if let ItemKind::Impl(Impl { of_trait: Some(trait_ref), .. }) = &item.kind;\n         if let Some(did) = trait_ref.trait_def_id();\n         then {\n             match_def_path(cx, did, &paths::DISPLAY_TRAIT)"}, {"sha": "2696c5e781abcaa01c67ac3bddac7cd1753530fc", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -258,7 +258,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n         // Skip trait implementations; see issue #605.\n         if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id)) {\n-            if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n                 return;\n             }\n         }\n@@ -2558,21 +2558,16 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n         }\n \n         match item.kind {\n-            ItemKind::Impl {\n-                ref generics,\n-                self_ty: ref ty,\n-                ref items,\n-                ..\n-            } => {\n+            ItemKind::Impl(ref impl_) => {\n                 let mut vis = ImplicitHasherTypeVisitor::new(cx);\n-                vis.visit_ty(ty);\n+                vis.visit_ty(impl_.self_ty);\n \n                 for target in &vis.found {\n                     if differing_macro_contexts(item.span, target.span()) {\n                         return;\n                     }\n \n-                    let generics_suggestion_span = generics.span.substitute_dummy({\n+                    let generics_suggestion_span = impl_.generics.span.substitute_dummy({\n                         let pos = snippet_opt(cx, item.span.until(target.span()))\n                             .and_then(|snip| Some(item.span.lo() + BytePos(snip.find(\"impl\")? as u32 + 4)));\n                         if let Some(pos) = pos {\n@@ -2583,7 +2578,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                     });\n \n                     let mut ctr_vis = ImplicitHasherConstructorVisitor::new(cx, target);\n-                    for item in items.iter().map(|item| cx.tcx.hir().impl_item(item.id)) {\n+                    for item in impl_.items.iter().map(|item| cx.tcx.hir().impl_item(item.id)) {\n                         ctr_vis.visit_impl_item(item);\n                     }\n \n@@ -2596,7 +2591,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                             target.type_name()\n                         ),\n                         move |diag| {\n-                            suggestion(cx, diag, generics.span, generics_suggestion_span, target, ctr_vis);\n+                            suggestion(cx, diag, impl_.generics.span, generics_suggestion_span, target, ctr_vis);\n                         },\n                     );\n                 }"}, {"sha": "07cd752184bbcbc93dc8051b5ac178788e38c922", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -5,7 +5,7 @@ use crate::utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Node};\n+use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Impl, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "a61717943110745db3a85ca9377c7df9674f9c4f", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n-use rustc_hir::{HirId, ImplItem, ImplItemKind, ItemKind, Path};\n+use rustc_hir::{HirId, ImplItem, ImplItemKind, ItemKind, Impl, Path};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n         let assoc_item = cx.tcx.associated_item(def_id);\n         if_chain! {\n-            if let ItemKind::Impl { of_trait: None, .. } = parent_item.kind;\n+            if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n             let body = cx.tcx.hir().body(*body_id);"}, {"sha": "b82ea66190fcfde3f9656d5ad78bdb82dfb98d99", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -181,8 +181,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             return;\n         }\n         if_chain! {\n-            if let ItemKind::Impl{ self_ty: ref item_type, items: refs, .. } = item.kind;\n-            if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.kind;\n+            if let ItemKind::Impl(impl_) = &item.kind;\n+            if let TyKind::Path(QPath::Resolved(_, ref item_path)) = impl_.self_ty.kind;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n                 let should_check = parameters.as_ref().map_or(\n@@ -200,7 +200,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                     let impl_trait_ref = cx.tcx.impl_trait_ref(impl_def_id);\n \n                     if let Some(impl_trait_ref) = impl_trait_ref {\n-                        for impl_item_ref in refs {\n+                        for impl_item_ref in impl_.items {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                             if let ImplItemKind::Fn(FnSig{ decl: impl_decl, .. }, impl_body_id)\n                                     = &impl_item.kind {\n@@ -213,7 +213,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                             }\n                         }\n                     } else {\n-                        for impl_item_ref in refs {\n+                        for impl_item_ref in impl_.items {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                             visitor.visit_impl_item(impl_item);\n                         }"}, {"sha": "a02c0a3f44d717d473991d18835ed8d0b7fe7737", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -423,13 +423,13 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n         hir::ItemKind::TraitAlias(..) => {\n             println!(\"trait alias\");\n         },\n-        hir::ItemKind::Impl {\n+        hir::ItemKind::Impl(hir::Impl {\n             of_trait: Some(ref _trait_ref),\n             ..\n-        } => {\n+        }) => {\n             println!(\"trait impl\");\n         },\n-        hir::ItemKind::Impl { of_trait: None, .. } => {\n+        hir::ItemKind::Impl(hir::Impl { of_trait: None, .. }) => {\n             println!(\"impl\");\n         },\n     }"}, {"sha": "407f06f4894206d3abf51ed7c4d7b72e96acd4ad", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -352,11 +352,11 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n         } else if is_expn_of(item.span, \"impl_lint_pass\").is_some()\n             || is_expn_of(item.span, \"declare_lint_pass\").is_some()\n         {\n-            if let hir::ItemKind::Impl {\n+            if let hir::ItemKind::Impl(hir::Impl {\n                 of_trait: None,\n                 items: ref impl_item_refs,\n                 ..\n-            } = item.kind\n+            }) = item.kind\n             {\n                 let mut collector = LintCollector {\n                     output: &mut self.registered_lints,"}, {"sha": "87f99019d72da213afe659c856a4083f3cd05a2b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -439,8 +439,8 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n     if_chain! {\n         if parent_impl != hir::CRATE_HIR_ID;\n         if let hir::Node::Item(item) = cx.tcx.hir().get(parent_impl);\n-        if let hir::ItemKind::Impl{ of_trait: trait_ref, .. } = &item.kind;\n-        then { return trait_ref.as_ref(); }\n+        if let hir::ItemKind::Impl(impl_) = &item.kind;\n+        then { return impl_.of_trait.as_ref(); }\n     }\n     None\n }\n@@ -1530,7 +1530,7 @@ pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n /// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-        matches!(item.kind, ItemKind::Impl { of_trait: Some(_), .. })\n+        matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n     } else {\n         false\n     }"}, {"sha": "9761e822a7a007ab55d9601b084e1b7aab8dca99", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb41f47979cbda90100de67f2318b2a54243ed9/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=dfb41f47979cbda90100de67f2318b2a54243ed9", "patch": "@@ -62,7 +62,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n     if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(parent_id)) {\n-        if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+        if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;\n         }\n     }"}]}