{"sha": "1fa712d0ba4e1db6fa22cad00182d009afeb7770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYTcxMmQwYmE0ZTFkYjZmYTIyY2FkMDAxODJkMDA5YWZlYjc3NzA=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-26T09:25:01Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:52Z"}, "message": "Make assoc types work with `?const `opt=out", "tree": {"sha": "7083c8dba065ee5e9ff36c77dda492b978ab4ca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7083c8dba065ee5e9ff36c77dda492b978ab4ca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fa712d0ba4e1db6fa22cad00182d009afeb7770", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1QACgkQAn35M4hi\nrd0xchAAhWWG2TTZKZNV2vnpFL8kPgucmcr1GR4/KOTyDoUtenZnSat7muf2wAw7\nQLXzSwtk8Mzz0r8U9V2QBgiNzmFkIa8Jwwh7o0lGcGaXKDGDk/AOj+6wOYHflSkJ\niEJlN9tKtwhJ/irqqGsbRo9NZhtmy6rLy6jqnqu9CX/NXkhidd+o+oiwHSy+VzXn\nNRqtpPOcuEraNqvuwKUbZnXrCiv56L/nDjyK088Adc1jSlrB30+Xml/ykzh+6p1M\nwKxY2r3o6WfEYMC0FXI8l3KZIeCeS0vTAyvb0fyW+ZAJV8huQLKEhr7+0qX0N7/0\nGZjeRUwgxWdRFH8wZAYBeIZRSbBHJWEPe/RU8RvmipbBIo2nRNh3ad2P+imgsUUz\nVj9NB8rfE+l2dv3+SRee2t/eurcW93cuN3DWIenuZgQkfs4BiKHfMcQeMAwX8L1j\nESQR5GTfuXwEl/uReK4/5uV7/FklvQ5g7n5vOkG5Ij9vmmXKJKkfx+5CJoG8K5mo\nlRMsHsSxYj8uWZEp62JFFguy15qUhGc7I2BWHMUA5EHdDO7wJITFITl3yWOgVL4E\nnhIw0BLeg6sEvMR7+C15ItWTqAFdqDPz8eAjUAWHBiPAOKp+rAtrA3fDBinYW5gg\nSb7YwD2a7c1w5k6b6DgRORdYrKxR4XIHWJXC7m0tNsbH6UCS27k=\n=VP+I\n-----END PGP SIGNATURE-----", "payload": "tree 7083c8dba065ee5e9ff36c77dda492b978ab4ca6\nparent 8c2a1e8e432d092896cf0487eca5de324fc06bfc\nauthor Deadbeef <ent3rm4n@gmail.com> 1627291501 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846932 +0000\n\nMake assoc types work with `?const `opt=out\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa712d0ba4e1db6fa22cad00182d009afeb7770", "html_url": "https://github.com/rust-lang/rust/commit/1fa712d0ba4e1db6fa22cad00182d009afeb7770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fa712d0ba4e1db6fa22cad00182d009afeb7770/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c2a1e8e432d092896cf0487eca5de324fc06bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2a1e8e432d092896cf0487eca5de324fc06bfc", "html_url": "https://github.com/rust-lang/rust/commit/8c2a1e8e432d092896cf0487eca5de324fc06bfc"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "3879d6052922a6959b3f442fbd1ccf3b60125153", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1fa712d0ba4e1db6fa22cad00182d009afeb7770", "patch": "@@ -3261,8 +3261,13 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n-    /// Returns `Constness::Const` when this node is a const fn/impl/item.\n-    pub fn constness(&self) -> Constness {\n+    /// Returns `Constness::Const` when this node is a const fn/impl/item,\n+    ///\n+    /// HACK(fee1-dead): or an associated type in a trait. This works because\n+    /// only typeck cares about const trait predicates, so although the predicates\n+    /// query would return const predicates when it does not need to be const,\n+    /// it wouldn't have any effect.\n+    pub fn constness_for_typeck(&self) -> Constness {\n         match self {\n             Node::Item(Item {\n                 kind: ItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n@@ -3280,6 +3285,7 @@ impl<'hir> Node<'hir> {\n \n             Node::Item(Item { kind: ItemKind::Const(..), .. })\n             | Node::TraitItem(TraitItem { kind: TraitItemKind::Const(..), .. })\n+            | Node::TraitItem(TraitItem { kind: TraitItemKind::Type(..), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Const(..), .. }) => Constness::Const,\n \n             _ => Constness::NotConst,"}, {"sha": "316a097556aec685f1c7502ceabe40cf22bb10b6", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=1fa712d0ba4e1db6fa22cad00182d009afeb7770", "patch": "@@ -1292,28 +1292,12 @@ pub fn check_type_bounds<'tcx>(\n     };\n \n     tcx.infer_ctxt().enter(move |infcx| {\n-        // if the item is inside a const impl, we transform the predicates to be const.\n         let constness = impl_ty\n             .container\n             .impl_def_id()\n             .map(|did| tcx.impl_constness(did))\n             .unwrap_or(hir::Constness::NotConst);\n \n-        let pred_map = match constness {\n-            hir::Constness::NotConst => |p, _| p,\n-            hir::Constness::Const => |p: ty::Predicate<'tcx>, tcx: TyCtxt<'tcx>| {\n-                p.kind()\n-                    .map_bound(|kind| match kind {\n-                        ty::PredicateKind::Trait(mut tp) => {\n-                            tp.constness = hir::Constness::Const;\n-                            ty::PredicateKind::Trait(tp)\n-                        }\n-                        kind => kind,\n-                    })\n-                    .to_predicate(tcx)\n-            },\n-        };\n-\n         let inh = Inherited::with_constness(infcx, impl_ty.def_id.expect_local(), constness);\n         let infcx = &inh.infcx;\n         let mut selcx = traits::SelectionContext::new(&infcx);\n@@ -1332,7 +1316,7 @@ pub fn check_type_bounds<'tcx>(\n             .explicit_item_bounds(trait_ty.def_id)\n             .iter()\n             .map(|&(bound, span)| {\n-                let concrete_ty_bound = pred_map(bound.subst(tcx, rebased_substs), tcx);\n+                let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n                 debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n \n                 traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n@@ -1350,10 +1334,7 @@ pub fn check_type_bounds<'tcx>(\n             debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n             obligation.predicate = normalized_predicate;\n \n-            inh.register_predicates(obligations.into_iter().map(|mut o| {\n-                o.predicate = pred_map(o.predicate, tcx);\n-                o\n-            }));\n+            inh.register_predicates(obligations);\n             inh.register_predicate(obligation);\n         }\n "}, {"sha": "c0ecee155c6dd0b381e15f5699b87d186f2db938", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=1fa712d0ba4e1db6fa22cad00182d009afeb7770", "patch": "@@ -174,7 +174,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        self.tcx.hir().get(self.body_id).constness()\n+        self.tcx.hir().get(self.body_id).constness_for_typeck()\n     }\n \n     fn get_type_parameter_bounds("}, {"sha": "6006c8f7513d70d91eb3cd77187685c578273146", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=1fa712d0ba4e1db6fa22cad00182d009afeb7770", "patch": "@@ -98,7 +98,7 @@ impl Inherited<'a, 'tcx> {\n     pub(super) fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        Self::with_constness(infcx, def_id, tcx.hir().get(item_id).constness())\n+        Self::with_constness(infcx, def_id, tcx.hir().get(item_id).constness_for_typeck())\n     }\n \n     pub(super) fn with_constness("}, {"sha": "9fbf5ab85334f8584b3e884f3b08bba54c07839b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa712d0ba4e1db6fa22cad00182d009afeb7770/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1fa712d0ba4e1db6fa22cad00182d009afeb7770", "patch": "@@ -364,7 +364,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        self.node().constness()\n+        self.node().constness_for_typeck()\n     }\n \n     fn get_type_parameter_bounds("}, {"sha": "1dbd000afd73ebf0debdf5058268f79e35c7d310", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fa712d0ba4e1db6fa22cad00182d009afeb7770/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa712d0ba4e1db6fa22cad00182d009afeb7770/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=1fa712d0ba4e1db6fa22cad00182d009afeb7770", "patch": "@@ -1,5 +1,7 @@\n // FIXME(fee1-dead): this should have a better error message\n #![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n \n struct NonConstAdd(i32);\n \n@@ -20,4 +22,12 @@ impl const Foo for NonConstAdd {\n     //~^ ERROR\n }\n \n+trait Baz {\n+    type Qux: ?const std::ops::Add;\n+}\n+\n+impl const Baz for NonConstAdd {\n+    type Qux = NonConstAdd; // OK\n+}\n+\n fn main() {}"}, {"sha": "0cbeb71d23538cdcf3f346f7e68378e004e0e607", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fa712d0ba4e1db6fa22cad00182d009afeb7770/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fa712d0ba4e1db6fa22cad00182d009afeb7770/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=1fa712d0ba4e1db6fa22cad00182d009afeb7770", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: cannot add `NonConstAdd` to `NonConstAdd`\n-  --> $DIR/assoc-type.rs:19:5\n+  --> $DIR/assoc-type.rs:21:5\n    |\n LL |     type Bar: std::ops::Add;\n    |               ------------- required by this bound in `Foo::Bar`"}]}