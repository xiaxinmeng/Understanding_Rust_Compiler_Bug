{"sha": "5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "node_id": "C_kwDOAAsO6NoAKDViZmNmZWVlMmFjOWRhNmE2OWJmNjJhNThkYjNlNWY4MGVlMGE4MjM", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-30T06:46:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-01T18:09:26Z"}, "message": "Merge multiple mutable borrows of immutable binding errors\n\nFix #53466.", "tree": {"sha": "62afefb89c89103316349f851ea27d2adaff3cff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62afefb89c89103316349f851ea27d2adaff3cff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "html_url": "https://github.com/rust-lang/rust/commit/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6e76df06dcbdb96e634eb28a49f161d70ab844", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e76df06dcbdb96e634eb28a49f161d70ab844", "html_url": "https://github.com/rust-lang/rust/commit/bb6e76df06dcbdb96e634eb28a49f161d70ab844"}], "stats": {"total": 292, "additions": 199, "deletions": 93}, "files": [{"sha": "e4942f9b666e0e837389503cd2d1099895b318da", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -12,7 +12,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         place: &str,\n         borrow_place: &str,\n         value_place: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         self.infcx.tcx.sess.create_err(crate::session_diagnostics::MoveBorrow {\n             place,\n             span,\n@@ -28,7 +28,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         desc: &str,\n         borrow_span: Span,\n         borrow_desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -50,7 +50,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         old_loan_span: Span,\n         old_opt_via: &str,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let via =\n             |msg: &str| if msg.is_empty() { \"\".to_string() } else { format!(\" (via {})\", msg) };\n         let mut err = struct_span_err!(\n@@ -98,7 +98,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         desc: &str,\n         old_loan_span: Span,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -269,7 +269,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0594, \"cannot assign to {}\", desc)\n     }\n \n@@ -348,7 +348,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         path: &str,\n         reason: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0596, \"cannot borrow {} as mutable{}\", path, reason,)\n     }\n \n@@ -359,7 +359,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         immutable_place: &str,\n         immutable_section: &str,\n         action: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             mutate_span,\n@@ -378,7 +378,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         yield_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -392,7 +392,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     pub(crate) fn cannot_borrow_across_destructor(\n         &self,\n         borrow_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(\n             self,\n             borrow_span,\n@@ -405,7 +405,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         path: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0597, \"{} does not live long enough\", path,)\n     }\n \n@@ -415,7 +415,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         return_kind: &str,\n         reference_desc: &str,\n         path_desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -440,7 +440,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         closure_kind: &str,\n         borrowed_path: &str,\n         capture_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             closure_span,\n@@ -458,14 +458,14 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     pub(crate) fn thread_local_value_does_not_live_long_enough(\n         &self,\n         span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0712, \"thread-local variable borrowed past end of function\",)\n     }\n \n     pub(crate) fn temporary_value_borrowed_for_too_long(\n         &self,\n         span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0716, \"temporary value dropped while borrowed\",)\n     }\n "}, {"sha": "b04b11e7c9bda9ec987123a74356d9c4f53bc191", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 69, "deletions": 21, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -180,6 +180,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         // the verbs used in some diagnostic messages.\n         let act;\n         let acted_on;\n+        let mut suggest = true;\n+        let mut mut_error = None;\n+        let mut count = 1;\n \n         let span = match error_access {\n             AccessKind::Mutate => {\n@@ -194,15 +197,50 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 let borrow_spans = self.borrow_spans(span, location);\n                 let borrow_span = borrow_spans.args_or_use();\n-                err = self.cannot_borrow_path_as_mutable_because(borrow_span, &item_msg, &reason);\n-                borrow_spans.var_span_label(\n-                    &mut err,\n-                    format!(\n-                        \"mutable borrow occurs due to use of {} in closure\",\n-                        self.describe_any_place(access_place.as_ref()),\n-                    ),\n-                    \"mutable\",\n-                );\n+                match the_place_err {\n+                    PlaceRef { local, projection: [] }\n+                        if self.body.local_decls[local].can_be_made_mutable() =>\n+                    {\n+                        let span = self.body.local_decls[local].source_info.span;\n+                        mut_error = Some(span);\n+                        if let Some((buffer, c)) = self.get_buffered_mut_error(span) {\n+                            // We've encountered a second (or more) attempt to mutably borrow an\n+                            // immutable binding, so the likely problem is with the binding\n+                            // declaration, not the use. We collect these in a single diagnostic\n+                            // and make the binding the primary span of the error.\n+                            err = buffer;\n+                            count = c + 1;\n+                            if count == 2 {\n+                                err.replace_span_with(span, false);\n+                                err.span_label(span, \"not mutable\");\n+                            }\n+                            suggest = false;\n+                        } else {\n+                            err = self.cannot_borrow_path_as_mutable_because(\n+                                borrow_span,\n+                                &item_msg,\n+                                &reason,\n+                            );\n+                        }\n+                    }\n+                    _ => {\n+                        err = self.cannot_borrow_path_as_mutable_because(\n+                            borrow_span,\n+                            &item_msg,\n+                            &reason,\n+                        );\n+                    }\n+                }\n+                if suggest {\n+                    borrow_spans.var_span_label(\n+                        &mut err,\n+                        format!(\n+                            \"mutable borrow occurs due to use of {} in closure\",\n+                            self.describe_any_place(access_place.as_ref()),\n+                        ),\n+                        \"mutable\",\n+                    );\n+                }\n                 borrow_span\n             }\n         };\n@@ -276,7 +314,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 pat_span: _,\n                             },\n                         )))) => {\n-                            err.span_note(sp, \"the binding is already a mutable borrow\");\n+                            if suggest {\n+                                err.span_note(sp, \"the binding is already a mutable borrow\");\n+                            }\n                         }\n                         _ => {\n                             err.span_note(\n@@ -333,16 +373,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let local_decl = &self.body.local_decls[local];\n                 assert_eq!(local_decl.mutability, Mutability::Not);\n \n-                err.span_label(span, format!(\"cannot {act}\"));\n-                err.span_suggestion(\n-                    local_decl.source_info.span,\n-                    \"consider changing this to be mutable\",\n-                    format!(\"mut {}\", self.local_names[local].unwrap()),\n-                    Applicability::MachineApplicable,\n-                );\n-                let tcx = self.infcx.tcx;\n-                if let ty::Closure(id, _) = *the_place_err.ty(self.body, tcx).ty.kind() {\n-                    self.show_mutating_upvar(tcx, id.expect_local(), the_place_err, &mut err);\n+                if count < 10 {\n+                    err.span_label(span, format!(\"cannot {act}\"));\n+                }\n+                if suggest {\n+                    err.span_suggestion(\n+                        local_decl.source_info.span,\n+                        \"consider changing this to be mutable\",\n+                        format!(\"mut {}\", self.local_names[local].unwrap()),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    let tcx = self.infcx.tcx;\n+                    if let ty::Closure(id, _) = *the_place_err.ty(self.body, tcx).ty.kind() {\n+                        self.show_mutating_upvar(tcx, id.expect_local(), the_place_err, &mut err);\n+                    }\n                 }\n             }\n \n@@ -615,7 +659,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        self.buffer_error(err);\n+        if let Some(span) = mut_error {\n+            self.buffer_mut_error(span, err, count);\n+        } else {\n+            self.buffer_error(err);\n+        }\n     }\n \n     fn suggest_map_index_mut_alternatives(&self, ty: Ty<'tcx>, err: &mut Diagnostic, span: Span) {"}, {"sha": "ae1bea008b6cede53a067e4a3dddf619752478ce", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -2270,6 +2270,7 @@ mod error {\n         /// same primary span come out in a consistent order.\n         buffered_move_errors:\n             BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorGuaranteed>)>,\n+        buffered_mut_errors: FxHashMap<Span, (DiagnosticBuilder<'tcx, ErrorGuaranteed>, usize)>,\n         /// Diagnostics to be reported buffer.\n         buffered: Vec<Diagnostic>,\n         /// Set to Some if we emit an error during borrowck\n@@ -2281,6 +2282,7 @@ mod error {\n             BorrowckErrors {\n                 tcx,\n                 buffered_move_errors: BTreeMap::new(),\n+                buffered_mut_errors: Default::default(),\n                 buffered: Default::default(),\n                 tainted_by_errors: None,\n             }\n@@ -2331,12 +2333,34 @@ mod error {\n             }\n         }\n \n+        pub fn get_buffered_mut_error(\n+            &mut self,\n+            span: Span,\n+        ) -> Option<(DiagnosticBuilder<'tcx, ErrorGuaranteed>, usize)> {\n+            self.errors.buffered_mut_errors.remove(&span)\n+        }\n+\n+        pub fn buffer_mut_error(\n+            &mut self,\n+            span: Span,\n+            t: DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+            count: usize,\n+        ) {\n+            self.errors.buffered_mut_errors.insert(span, (t, count));\n+        }\n+\n         pub fn emit_errors(&mut self) -> Option<ErrorGuaranteed> {\n             // Buffer any move errors that we collected and de-duplicated.\n             for (_, (_, diag)) in std::mem::take(&mut self.errors.buffered_move_errors) {\n                 // We have already set tainted for this error, so just buffer it.\n                 diag.buffer(&mut self.errors.buffered);\n             }\n+            for (_, (mut diag, count)) in std::mem::take(&mut self.errors.buffered_mut_errors) {\n+                if count > 10 {\n+                    diag.note(&format!(\"...and {} other attempted mutable borrows\", count - 10));\n+                }\n+                diag.buffer(&mut self.errors.buffered);\n+            }\n \n             if !self.errors.buffered.is_empty() {\n                 self.errors.buffered.sort_by_key(|diag| diag.sort_span);"}, {"sha": "e19a6fe0ee9bff2d5a0a5c28a7ace6c976c2fa9a", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -365,12 +365,12 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn replace_span_with(&mut self, after: Span) -> &mut Self {\n+    pub fn replace_span_with(&mut self, after: Span, keep_label: bool) -> &mut Self {\n         let before = self.span.clone();\n         self.set_span(after);\n         for span_label in before.span_labels() {\n             if let Some(label) = span_label.label {\n-                if span_label.is_primary {\n+                if span_label.is_primary && keep_label {\n                     self.span.push_span_label(after, label);\n                 } else {\n                     self.span.push_span_label(span_label.span, label);"}, {"sha": "3a38d7a966960bb8857ebe489d959a4cabdbe65f", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -198,12 +198,12 @@ pub(super) fn emit_frag_parse_err(\n         );\n         if !e.span.is_dummy() {\n             // early end of macro arm (#52866)\n-            e.replace_span_with(parser.token.span.shrink_to_hi());\n+            e.replace_span_with(parser.token.span.shrink_to_hi(), true);\n         }\n     }\n     if e.span.is_dummy() {\n         // Get around lack of span in error (#30128)\n-        e.replace_span_with(site_span);\n+        e.replace_span_with(site_span, true);\n         if !parser.sess.source_map().is_imported(arm_span) {\n             e.span_label(arm_span, \"in this macro arm\");\n         }"}, {"sha": "7c21a1047bcbfc5c3a04de884663780a3b56f66f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -3237,7 +3237,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         })) = call_node\n         {\n             if Some(rcvr.span) == err.span.primary_span() {\n-                err.replace_span_with(path.ident.span);\n+                err.replace_span_with(path.ident.span, true);\n             }\n         }\n         if let Some(Node::Expr(hir::Expr {"}, {"sha": "1d579ccc90eec1eaaf9eb58209dc79f247c99c80", "filename": "src/test/ui/asm/x86_64/type-check-5.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -22,11 +22,10 @@ fn main() {\n         // Outputs require mutable places\n \n         let v: Vec<u64> = vec![0, 1, 2];\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n         asm!(\"{}\", in(reg) v[0]);\n         asm!(\"{}\", out(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n         asm!(\"{}\", inout(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n \n         // Sym operands must point to a function or static\n "}, {"sha": "af89e5e91174e9e9d10ae65b4e360f3691e5de3d", "filename": "src/test/ui/asm/x86_64/type-check-5.stderr", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -25,24 +25,20 @@ LL |         let mut y: u64 = 0;\n    |                        +++\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-5.rs:26:29\n+  --> $DIR/type-check-5.rs:24:13\n    |\n LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-LL |         asm!(\"{}\", in(reg) v[0]);\n-LL |         asm!(\"{}\", out(reg) v[0]);\n-   |                             ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-5.rs:28:31\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n+   |             ^\n+   |             |\n+   |             not mutable\n+   |             help: consider changing this to be mutable: `mut v`\n ...\n+LL |         asm!(\"{}\", out(reg) v[0]);\n+   |                             - cannot borrow as mutable\n LL |         asm!(\"{}\", inout(reg) v[0]);\n-   |                               ^ cannot borrow as mutable\n+   |                               - cannot borrow as mutable\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0381, E0596.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "3e6ea9d25d9105660ca61aa019f0b30b06a7c940", "filename": "src/test/ui/borrowck/many-mutable-borrows.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -0,0 +1,18 @@\n+fn main() {\n+    let v = Vec::new(); //~ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+}"}, {"sha": "25755d9432362603b17e1329970512dce14e973a", "filename": "src/test/ui/borrowck/many-mutable-borrows.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.stderr?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -0,0 +1,32 @@\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/many-mutable-borrows.rs:2:9\n+   |\n+LL |     let v = Vec::new();\n+   |         ^\n+   |         |\n+   |         not mutable\n+   |         help: consider changing this to be mutable: `mut v`\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+   |\n+   = note: ...and 5 other attempted mutable borrows\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "477a2aa48d5dcb42e3eab13b0ab0f5562327dab9", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -2,15 +2,14 @@\n #![crate_type = \"rlib\"]\n \n pub fn f(b: &mut i32) {\n-    //~^ NOTE the binding is already a mutable borrow\n+    //~^ ERROR cannot borrow\n+    //~| NOTE not mutable\n     //~| NOTE the binding is already a mutable borrow\n     h(&mut b);\n-    //~^ ERROR cannot borrow\n-    //~| NOTE cannot borrow as mutable\n+    //~^ NOTE cannot borrow as mutable\n     //~| HELP try removing `&mut` here\n     g(&mut &mut b);\n-    //~^ ERROR cannot borrow\n-    //~| NOTE cannot borrow as mutable\n+    //~^ NOTE cannot borrow as mutable\n     //~| HELP try removing `&mut` here\n }\n "}, {"sha": "c6f75b1c0d022f5b7fb83d38a382a7fb4e3efc7a", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -1,8 +1,14 @@\n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:7:7\n+  --> $DIR/mut-borrow-of-mut-ref.rs:4:10\n    |\n+LL | pub fn f(b: &mut i32) {\n+   |          ^ not mutable\n+...\n LL |     h(&mut b);\n-   |       ^^^^^^ cannot borrow as mutable\n+   |       ------ cannot borrow as mutable\n+...\n+LL |     g(&mut &mut b);\n+   |            ------ cannot borrow as mutable\n    |\n note: the binding is already a mutable borrow\n   --> $DIR/mut-borrow-of-mut-ref.rs:4:13\n@@ -14,32 +20,20 @@ help: try removing `&mut` here\n LL -     h(&mut b);\n LL +     h(b);\n    |\n-\n-error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:11:12\n-   |\n-LL |     g(&mut &mut b);\n-   |            ^^^^^^ cannot borrow as mutable\n-   |\n-note: the binding is already a mutable borrow\n-  --> $DIR/mut-borrow-of-mut-ref.rs:4:13\n-   |\n-LL | pub fn f(b: &mut i32) {\n-   |             ^^^^^^^^\n help: try removing `&mut` here\n    |\n LL -     g(&mut &mut b);\n LL +     g(&mut b);\n    |\n \n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:18:12\n+  --> $DIR/mut-borrow-of-mut-ref.rs:17:12\n    |\n LL |     h(&mut &mut b);\n    |            ^^^^^^ cannot borrow as mutable\n    |\n note: the binding is already a mutable borrow\n-  --> $DIR/mut-borrow-of-mut-ref.rs:17:13\n+  --> $DIR/mut-borrow-of-mut-ref.rs:16:13\n    |\n LL | pub fn g(b: &mut i32) {\n    |             ^^^^^^^^\n@@ -50,7 +44,7 @@ LL +     h(&mut b);\n    |\n \n error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:35:5\n+  --> $DIR/mut-borrow-of-mut-ref.rs:34:5\n    |\n LL |     f.bar();\n    |     ^^^^^^^ cannot borrow as mutable\n@@ -60,6 +54,6 @@ help: consider making the binding mutable\n LL | pub fn baz(mut f: &mut String) {\n    |            +++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "82116425f06ca478b24ae570c54fd6287b8402bb", "filename": "src/test/ui/borrowck/mutability-errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -50,9 +50,9 @@ fn ref_closure(mut x: (i32,)) {\n     });\n }\n \n-fn imm_local(x: (i32,)) {\n-    &mut x; //~ ERROR\n-    &mut x.0; //~ ERROR\n+fn imm_local(x: (i32,)) { //~ ERROR\n+    &mut x;\n+    &mut x.0;\n }\n \n fn imm_capture(x: (i32,)) {"}, {"sha": "5da8e60db75932f201b113193a099fea4b42e445", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=5bfcfeee2ac9da6a69bf62a58db3e5f80ee0a823", "patch": "@@ -245,21 +245,17 @@ LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/mutability-errors.rs:54:5\n+  --> $DIR/mutability-errors.rs:53:14\n    |\n LL | fn imm_local(x: (i32,)) {\n-   |              - help: consider changing this to be mutable: `mut x`\n-LL |     &mut x;\n-   |     ^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n-  --> $DIR/mutability-errors.rs:55:5\n-   |\n-LL | fn imm_local(x: (i32,)) {\n-   |              - help: consider changing this to be mutable: `mut x`\n+   |              ^\n+   |              |\n+   |              not mutable\n+   |              help: consider changing this to be mutable: `mut x`\n LL |     &mut x;\n+   |     ------ cannot borrow as mutable\n LL |     &mut x.0;\n-   |     ^^^^^^^^ cannot borrow as mutable\n+   |     -------- cannot borrow as mutable\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:60:9\n@@ -357,7 +353,7 @@ error[E0596]: cannot borrow `X.0` as mutable, as `X` is an immutable static item\n LL |     &mut X.0;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 37 previous errors\n \n Some errors have detailed explanations: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}]}