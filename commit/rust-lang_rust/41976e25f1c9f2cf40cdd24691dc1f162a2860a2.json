{"sha": "41976e25f1c9f2cf40cdd24691dc1f162a2860a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOTc2ZTI1ZjFjOWYyY2Y0MGNkZDI0NjkxZGMxZjE2MmEyODYwYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-22T00:51:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-22T00:51:17Z"}, "message": "Auto merge of #42140 - anderspapitto:doc-typo-fixes, r=Mark-Simulacrum\n\nbootstrap: fix minor comment typos in lib.rs\n\nI noticed these while reading through the build system\ndocumentation. They're hardly worth fixing, but I'm also using this to\nget my feet wet with the rustc contribution system.", "tree": {"sha": "73bd5ddc919d4dcdf305eadb1bafe57e1b323f53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bd5ddc919d4dcdf305eadb1bafe57e1b323f53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41976e25f1c9f2cf40cdd24691dc1f162a2860a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41976e25f1c9f2cf40cdd24691dc1f162a2860a2", "html_url": "https://github.com/rust-lang/rust/commit/41976e25f1c9f2cf40cdd24691dc1f162a2860a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41976e25f1c9f2cf40cdd24691dc1f162a2860a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6cc40f16843cd733b1a93de1f3218e4faacaf50", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cc40f16843cd733b1a93de1f3218e4faacaf50", "html_url": "https://github.com/rust-lang/rust/commit/f6cc40f16843cd733b1a93de1f3218e4faacaf50"}, {"sha": "558dd9ce906a8557e566ccbac8979044e339e5b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/558dd9ce906a8557e566ccbac8979044e339e5b1", "html_url": "https://github.com/rust-lang/rust/commit/558dd9ce906a8557e566ccbac8979044e339e5b1"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "665b9ee49c02d5597ed3261be23f344007c7da65", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41976e25f1c9f2cf40cdd24691dc1f162a2860a2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41976e25f1c9f2cf40cdd24691dc1f162a2860a2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=41976e25f1c9f2cf40cdd24691dc1f162a2860a2", "patch": "@@ -211,7 +211,7 @@ pub enum Mode {\n     /// output in the \"stageN-rustc\" directory.\n     Librustc,\n \n-    /// This cargo is going to some build tool, placing output in the\n+    /// This cargo is going to build some tool, placing output in the\n     /// \"stageN-tools\" directory.\n     Tool,\n }\n@@ -424,7 +424,7 @@ impl Build {\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n-        // There are two invariants we try must maintain:\n+        // There are two invariants we must maintain:\n         // * stable crates cannot depend on unstable crates (general Rust rule),\n         // * crates that end up in the sysroot must be unstable (rustbuild rule).\n         //\n@@ -438,7 +438,7 @@ impl Build {\n         // feature and opt-in to `rustc_private`.\n         //\n         // We can't always pass `rustbuild` because crates which are outside of\n-        // the comipiler, libs, and tests are stable and we don't want to make\n+        // the compiler, libs, and tests are stable and we don't want to make\n         // their deps unstable (since this would break the first invariant\n         // above).\n         //\n@@ -448,7 +448,7 @@ impl Build {\n         }\n \n         // Ignore incremental modes except for stage0, since we're\n-        // not guaranteeing correctness acros builds if the compiler\n+        // not guaranteeing correctness across builds if the compiler\n         // is changing under your feet.`\n         if self.flags.incremental && compiler.stage == 0 {\n             let incr_dir = self.incremental_dir(compiler);\n@@ -489,7 +489,7 @@ impl Build {\n             cargo.env_remove(\"MAKEFLAGS\");\n         }\n \n-        // Environment variables *required* needed throughout the build\n+        // Environment variables *required* throughout the build\n         //\n         // FIXME: should update code to not require this env var\n         cargo.env(\"CFG_COMPILER_HOST_TRIPLE\", target);\n@@ -647,7 +647,7 @@ impl Build {\n     }\n \n     /// Returns the root output directory for all Cargo output in a given stage,\n-    /// running a particular comipler, wehther or not we're building the\n+    /// running a particular compiler, wehther or not we're building the\n     /// standard library, and targeting the specified architecture.\n     fn cargo_out(&self,\n                  compiler: &Compiler,"}]}