{"sha": "2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDJmOWNmYWYwNGExMjhmMTE3OTcwM2Y4ZjdjM2FhZjBiMDY1OGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T10:50:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-15T08:53:26Z"}, "message": "fix error for unsized packed struct field", "tree": {"sha": "848636ce1aa3bcab67754a25bf85eb9f6a1183c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/848636ce1aa3bcab67754a25bf85eb9f6a1183c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "html_url": "https://github.com/rust-lang/rust/commit/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd0a2f2499ff66e74236c5b06d3ab9ab87dd3d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd0a2f2499ff66e74236c5b06d3ab9ab87dd3d3", "html_url": "https://github.com/rust-lang/rust/commit/afd0a2f2499ff66e74236c5b06d3ab9ab87dd3d3"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "99b2f3e59feb66253d2f4bbffe67a5a6fc2af0bc", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "patch": "@@ -1472,11 +1472,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::StructInitializerSized => {\n                 err.note(\"structs must have a statically known size to be initialized\");\n             }\n-            ObligationCauseCode::FieldSized(ref item) => {\n+            ObligationCauseCode::FieldSized { adt_kind: ref item, last } => {\n                 match *item {\n                     AdtKind::Struct => {\n-                        err.note(\"only the last field of a struct may have a dynamically \\\n-                                  sized type\");\n+                        if last {\n+                            err.note(\"the last field of a packed struct may only have a \\\n+                                      dynamically sized type if it does not need drop to be run\");\n+                        } else {\n+                            err.note(\"only the last field of a struct may have a dynamically \\\n+                                      sized type\");\n+                        }\n                     }\n                     AdtKind::Union => {\n                         err.note(\"no field of a union may have a dynamically sized type\");"}, {"sha": "08434b5f24ef9d2e19503a06fb4ae76bb5a89f78", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "patch": "@@ -192,8 +192,8 @@ pub enum ObligationCauseCode<'tcx> {\n     /// [T,..n] --> T must be Copy\n     RepeatVec,\n \n-    /// Types of fields (other than the last) in a struct must be sized.\n-    FieldSized(AdtKind),\n+    /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n+    FieldSized { adt_kind: AdtKind, last: bool },\n \n     /// Constant expressions must be sized.\n     ConstSized,"}, {"sha": "544e3f03c03b1c3d936999c31b0ffc8a4b5d5c39", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "patch": "@@ -206,7 +206,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),\n             super::RepeatVec => Some(super::RepeatVec),\n-            super::FieldSized(item) => Some(super::FieldSized(item)),\n+            super::FieldSized { adt_kind, last } => Some(super::FieldSized { adt_kind, last }),\n             super::ConstSized => Some(super::ConstSized),\n             super::SharedStatic => Some(super::SharedStatic),\n             super::BuiltinDerivedObligation(ref cause) => {"}, {"sha": "4b609779540f02f674e9645dab463195e7e4874e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "patch": "@@ -258,25 +258,35 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     ty.needs_drop(fcx_tcx, fcx_tcx.param_env(def_id))\n                 }\n             };\n-            let unsized_len = if\n+            let all_sized =\n                 all_sized ||\n                 variant.fields.is_empty() ||\n-                needs_drop_copy()\n-            {\n+                needs_drop_copy();\n+            let unsized_len = if all_sized {\n                 0\n             } else {\n                 1\n             };\n-            for field in &variant.fields[..variant.fields.len() - unsized_len] {\n+            for (idx, field) in variant.fields[..variant.fields.len() - unsized_len]\n+                .iter()\n+                .enumerate()\n+            {\n+                let last = idx == variant.fields.len() - 1;\n                 fcx.register_bound(\n                     field.ty,\n                     fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n-                    traits::ObligationCause::new(field.span,\n-                                                    fcx.body_id,\n-                                                    traits::FieldSized(match item.node.adt_kind() {\n-                                                    Some(i) => i,\n-                                                    None => bug!(),\n-                                                    })));\n+                    traits::ObligationCause::new(\n+                        field.span,\n+                        fcx.body_id,\n+                        traits::FieldSized {\n+                            adt_kind: match item.node.adt_kind() {\n+                                Some(i) => i,\n+                                None => bug!(),\n+                            },\n+                            last\n+                        }\n+                    )\n+                );\n             }\n \n             // All field types must be well-formed."}, {"sha": "c9a29ac2199c0a4ecc773a4b02adca17281d2ba6", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=2fd2f9cfaf04a128f1179703f8f7c3aaf0b0658d", "patch": "@@ -7,7 +7,7 @@ LL |     data: T, //~ ERROR the size for values of type\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n-   = note: only the last field of a struct may have a dynamically sized type\n+   = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n \n error: aborting due to previous error\n "}]}