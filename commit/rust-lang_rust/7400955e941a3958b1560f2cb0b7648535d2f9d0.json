{"sha": "7400955e941a3958b1560f2cb0b7648535d2f9d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDA5NTVlOTQxYTM5NThiMTU2MGYyY2IwYjc2NDg1MzVkMmY5ZDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T16:13:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-25T14:53:53Z"}, "message": "add usize methods for Size getters", "tree": {"sha": "fd01fdd31adbbdf37c4163bb7fdc4fc017606feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd01fdd31adbbdf37c4163bb7fdc4fc017606feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7400955e941a3958b1560f2cb0b7648535d2f9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7400955e941a3958b1560f2cb0b7648535d2f9d0", "html_url": "https://github.com/rust-lang/rust/commit/7400955e941a3958b1560f2cb0b7648535d2f9d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7400955e941a3958b1560f2cb0b7648535d2f9d0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7db7320ad7a0f07074276c76fe3d1ecc23b08ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7db7320ad7a0f07074276c76fe3d1ecc23b08ef", "html_url": "https://github.com/rust-lang/rust/commit/b7db7320ad7a0f07074276c76fe3d1ecc23b08ef"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "26b9e1be2f5d4542d1896f3e77fe6098356c3b1e", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7400955e941a3958b1560f2cb0b7648535d2f9d0/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7400955e941a3958b1560f2cb0b7648535d2f9d0/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=7400955e941a3958b1560f2cb0b7648535d2f9d0", "patch": "@@ -110,7 +110,7 @@ impl<Tag> Allocation<Tag> {\n \n     pub fn undef(size: Size, align: Align) -> Self {\n         Allocation {\n-            bytes: vec![0; usize::try_from(size.bytes()).unwrap()],\n+            bytes: vec![0; size.bytes_usize()],\n             relocations: Relocations::new(),\n             undef_mask: UndefMask::new(size, false),\n             size,\n@@ -153,7 +153,7 @@ impl Allocation<(), ()> {\n /// Raw accessors. Provide access to otherwise private bytes.\n impl<Tag, Extra> Allocation<Tag, Extra> {\n     pub fn len(&self) -> usize {\n-        usize::try_from(self.size.bytes()).unwrap()\n+        self.size.bytes_usize()\n     }\n \n     /// Looks at a slice which may describe undefined bytes or describe a relocation. This differs\n@@ -192,7 +192,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n             size.bytes(),\n             self.len()\n         );\n-        usize::try_from(offset.bytes()).unwrap()..end\n+        offset.bytes_usize()..end\n     }\n \n     /// The last argument controls whether we error out when there are undefined\n@@ -290,7 +290,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n     ) -> InterpResult<'tcx, &[u8]> {\n-        let offset = usize::try_from(ptr.offset.bytes()).unwrap();\n+        let offset = ptr.offset.bytes_usize();\n         Ok(match self.bytes[offset..].iter().position(|&c| c == 0) {\n             Some(size) => {\n                 let size_with_null = Size::from_bytes(size) + Size::from_bytes(1);"}, {"sha": "49b9018fd1725730b383f5b66d7c0e22191d1e18", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7400955e941a3958b1560f2cb0b7648535d2f9d0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7400955e941a3958b1560f2cb0b7648535d2f9d0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=7400955e941a3958b1560f2cb0b7648535d2f9d0", "patch": "@@ -668,7 +668,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n             if alloc.undef_mask().is_range_defined(i, i + Size::from_bytes(1)).is_ok() {\n                 // this `as usize` is fine, since `i` came from a `usize`\n-                let i = usize::try_from(i.bytes()).unwrap();\n+                let i = i.bytes_usize();\n \n                 // Checked definedness (and thus range) and relocations. This access also doesn't\n                 // influence interpreter execution but is only for debugging.\n@@ -693,8 +693,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             let mut pos = Size::ZERO;\n             let relocation_width = (self.pointer_size().bytes() - 1) * 3;\n             for (i, target_id) in relocations {\n-                // this `as usize` is fine, since we can't print more chars than `usize::MAX`\n-                write!(msg, \"{:1$}\", \"\", ((i - pos) * 3).bytes() as usize).unwrap();\n+                write!(msg, \"{:1$}\", \"\", ((i - pos) * 3).bytes_usize()).unwrap();\n                 let target = format!(\"({})\", target_id);\n                 // this `as usize` is fine, since we can't print more chars than `usize::MAX`\n                 write!(msg, \"\u2514{0:\u2500^1$}\u2518 \", target, relocation_width as usize).unwrap();\n@@ -924,16 +923,16 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 for i in 0..length {\n                     ptr::copy(\n                         src_bytes,\n-                        dest_bytes.offset(isize::try_from((size * i).bytes()).unwrap()), // `Size` multiplication\n-                        usize::try_from(size.bytes()).unwrap(),\n+                        dest_bytes.add((size * i).bytes_usize()), // `Size` multiplication\n+                        size.bytes_usize(),\n                     );\n                 }\n             } else {\n                 for i in 0..length {\n                     ptr::copy_nonoverlapping(\n                         src_bytes,\n-                        dest_bytes.offset(isize::try_from((size * i).bytes()).unwrap()), // `Size` multiplication\n-                        usize::try_from(size.bytes()).unwrap(),\n+                        dest_bytes.add((size * i).bytes_usize()), // `Size` multiplication\n+                        size.bytes_usize(),\n                     );\n                 }\n             }"}, {"sha": "74d9817d2779bd709008ae25fef4f13c53842833", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7400955e941a3958b1560f2cb0b7648535d2f9d0/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7400955e941a3958b1560f2cb0b7648535d2f9d0/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=7400955e941a3958b1560f2cb0b7648535d2f9d0", "patch": "@@ -260,13 +260,23 @@ impl Size {\n         self.raw\n     }\n \n+    #[inline]\n+    pub fn bytes_usize(self) -> usize {\n+        self.bytes().try_into().unwrap()\n+    }\n+\n     #[inline]\n     pub fn bits(self) -> u64 {\n         self.bytes().checked_mul(8).unwrap_or_else(|| {\n             panic!(\"Size::bits: {} bytes in bits doesn't fit in u64\", self.bytes())\n         })\n     }\n \n+    #[inline]\n+    pub fn bits_usize(self) -> usize {\n+        self.bits().try_into().unwrap()\n+    }\n+\n     #[inline]\n     pub fn align_to(self, align: Align) -> Size {\n         let mask = align.bytes() - 1;"}]}