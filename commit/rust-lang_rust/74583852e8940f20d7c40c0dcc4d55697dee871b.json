{"sha": "74583852e8940f20d7c40c0dcc4d55697dee871b", "node_id": "C_kwDOAAsO6NoAKDc0NTgzODUyZTg5NDBmMjBkN2M0MGMwZGNjNGQ1NTY5N2RlZTg3MWI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-28T19:59:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-30T11:55:17Z"}, "message": "Save colon span to suggest bounds.", "tree": {"sha": "4155c42d2d03a22d57ba7688f377354fa8c9815c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4155c42d2d03a22d57ba7688f377354fa8c9815c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74583852e8940f20d7c40c0dcc4d55697dee871b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74583852e8940f20d7c40c0dcc4d55697dee871b", "html_url": "https://github.com/rust-lang/rust/commit/74583852e8940f20d7c40c0dcc4d55697dee871b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74583852e8940f20d7c40c0dcc4d55697dee871b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03bbb98019fc447c4afd71d03f6990dcc0c7f160", "url": "https://api.github.com/repos/rust-lang/rust/commits/03bbb98019fc447c4afd71d03f6990dcc0c7f160", "html_url": "https://github.com/rust-lang/rust/commit/03bbb98019fc447c4afd71d03f6990dcc0c7f160"}], "stats": {"total": 116, "additions": 63, "deletions": 53}, "files": [{"sha": "cdcd221e811a77c2f21888b6eccd617897b94f2f", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -397,6 +397,7 @@ pub struct GenericParam {\n     pub bounds: GenericBounds,\n     pub is_placeholder: bool,\n     pub kind: GenericParamKind,\n+    pub colon_span: Option<Span>,\n }\n \n impl GenericParam {"}, {"sha": "d7b1bc6a7f580bc514f0b47ca4ab4590df04e156", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -867,9 +867,12 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n     mut param: GenericParam,\n     vis: &mut T,\n ) -> SmallVec<[GenericParam; 1]> {\n-    let GenericParam { id, ident, attrs, bounds, kind, is_placeholder: _ } = &mut param;\n+    let GenericParam { id, ident, attrs, bounds, kind, colon_span, is_placeholder: _ } = &mut param;\n     vis.visit_id(id);\n     vis.visit_ident(ident);\n+    if let Some(ref mut colon_span) = colon_span {\n+        vis.visit_span(colon_span);\n+    }\n     visit_thin_attrs(attrs, vis);\n     visit_vec(bounds, |bound| noop_visit_param_bound(bound, vis));\n     match kind {"}, {"sha": "d433775f85cf3eeae2670ae182b19c7b096bdf2a", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -707,6 +707,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             span: self.lower_span(ident.span),\n             pure_wrt_drop: false,\n             kind: hir::GenericParamKind::Lifetime { kind },\n+            colon_span: None,\n         })\n     }\n \n@@ -1304,6 +1305,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             pure_wrt_drop: false,\n                             span: self.lower_span(span),\n                             kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n+                            colon_span: None,\n                         });\n                         if let Some(preds) = self.lower_generic_bound_predicate(\n                             ident,\n@@ -1396,6 +1398,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         span,\n                         pure_wrt_drop: false,\n                         kind: hir::GenericParamKind::Lifetime { kind },\n+                        colon_span: None,\n                     }\n                 },\n             ));\n@@ -1735,6 +1738,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         span,\n                         pure_wrt_drop: false,\n                         kind: hir::GenericParamKind::Lifetime { kind },\n+                        colon_span: None,\n                     }\n                 }));\n             debug!(\"lower_async_fn_ret_ty: generic_params={:#?}\", generic_params);\n@@ -2006,6 +2010,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             span: self.lower_span(param.span()),\n             pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n             kind,\n+            colon_span: param.colon_span.map(|s| self.lower_span(s)),\n         }\n     }\n "}, {"sha": "391c46d18132feb7d1ff29fdee3d1e72fcb3d29b", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -95,6 +95,7 @@ fn dummy_annotatable() -> Annotatable {\n         bounds: Default::default(),\n         is_placeholder: false,\n         kind: GenericParamKind::Lifetime,\n+        colon_span: None,\n     })\n }\n "}, {"sha": "301c67f70264502cd06244ad36dc287f045b8cea", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -113,6 +113,7 @@ impl<'a> ExtCtxt<'a> {\n             bounds,\n             kind: ast::GenericParamKind::Type { default },\n             is_placeholder: false,\n+            colon_span: None,\n         }\n     }\n "}, {"sha": "0d5d6ee07944f4a002e1fad66a6eda38f4146906", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -149,6 +149,7 @@ pub fn placeholder(\n                 ident,\n                 is_placeholder: true,\n                 kind: ast::GenericParamKind::Lifetime,\n+                colon_span: None,\n             }\n         }]),\n         AstFragmentKind::Params => AstFragment::Params(smallvec![ast::Param {"}, {"sha": "eef9947f867f7e8cbf017753cd2833a9712ac24f", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -17,7 +17,7 @@ use rustc_error_messages::MultiSpan;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::source_map::{SourceMap, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{def_id::LocalDefId, BytePos, Span, DUMMY_SP};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n@@ -499,6 +499,7 @@ pub struct GenericParam<'hir> {\n     pub span: Span,\n     pub pure_wrt_drop: bool,\n     pub kind: GenericParamKind<'hir>,\n+    pub colon_span: Option<Span>,\n }\n \n impl<'hir> GenericParam<'hir> {\n@@ -515,40 +516,6 @@ impl<'hir> GenericParam<'hir> {\n     pub fn is_elided_lifetime(&self) -> bool {\n         matches!(self.kind, GenericParamKind::Lifetime { kind: LifetimeParamKind::Elided })\n     }\n-\n-    /// Returns the span of `:` after a generic parameter.\n-    ///\n-    /// For example:\n-    ///\n-    /// ```text\n-    /// fn a<T:>()\n-    ///       ^\n-    ///       |      here\n-    ///       here   |\n-    ///              v\n-    /// fn b<T       :>()\n-    ///\n-    /// fn c<T\n-    ///\n-    /// :>()\n-    /// ^\n-    /// |\n-    /// here\n-    /// ```\n-    pub fn colon_span_for_suggestions(&self, source_map: &SourceMap) -> Option<Span> {\n-        let sp = source_map\n-            .span_extend_while(self.span.shrink_to_hi(), |c| c.is_whitespace() || c == ':')\n-            .ok()?;\n-\n-        let snippet = source_map.span_to_snippet(sp).ok()?;\n-        let offset = snippet.find(':')?;\n-\n-        let colon_sp = sp\n-            .with_lo(BytePos(sp.lo().0 + offset as u32))\n-            .with_hi(BytePos(sp.lo().0 + (offset + ':'.len_utf8()) as u32));\n-\n-        Some(colon_sp)\n-    }\n }\n \n #[derive(Default)]"}, {"sha": "f53dc0000ca3e8c28dcf33cbd0721758ca9a2140", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -363,6 +363,19 @@ pub fn suggest_constraining_type_params<'a>(\n             continue;\n         }\n \n+        // If user has provided a colon, don't suggest adding another:\n+        //\n+        //   fn foo<T:>(t: T) { ... }\n+        //            - insert: consider restricting this type parameter with `T: Foo`\n+        if let Some(colon_span) = param.colon_span {\n+            suggestions.push((\n+                colon_span.shrink_to_hi(),\n+                format!(\" {}\", constraint),\n+                SuggestChangingConstraintsMessage::RestrictType { ty: param_name },\n+            ));\n+            continue;\n+        }\n+\n         // If user hasn't provided any bounds, suggest adding a new one:\n         //\n         //   fn foo<T>(t: T) { ... }"}, {"sha": "8081bac7cfd920a46155b7909557900e7ea0c630", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -30,8 +30,10 @@ impl<'a> Parser<'a> {\n         let ident = self.parse_ident()?;\n \n         // Parse optional colon and param bounds.\n+        let mut colon_span = None;\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_generic_bounds(Some(self.prev_token.span))?\n+            colon_span = Some(self.prev_token.span);\n+            self.parse_generic_bounds(colon_span)?\n         } else {\n             Vec::new()\n         };\n@@ -45,6 +47,7 @@ impl<'a> Parser<'a> {\n             bounds,\n             kind: GenericParamKind::Type { default },\n             is_placeholder: false,\n+            colon_span,\n         })\n     }\n \n@@ -69,6 +72,7 @@ impl<'a> Parser<'a> {\n             bounds: Vec::new(),\n             kind: GenericParamKind::Const { ty, kw_span: const_span, default },\n             is_placeholder: false,\n+            colon_span: None,\n         })\n     }\n \n@@ -97,10 +101,10 @@ impl<'a> Parser<'a> {\n                     let param = if this.check_lifetime() {\n                         let lifetime = this.expect_lifetime();\n                         // Parse lifetime parameter.\n-                        let bounds = if this.eat(&token::Colon) {\n-                            this.parse_lt_param_bounds()\n+                        let (colon_span, bounds) = if this.eat(&token::Colon) {\n+                            (Some(this.prev_token.span), this.parse_lt_param_bounds())\n                         } else {\n-                            Vec::new()\n+                            (None, Vec::new())\n                         };\n                         Some(ast::GenericParam {\n                             ident: lifetime.ident,\n@@ -109,6 +113,7 @@ impl<'a> Parser<'a> {\n                             bounds,\n                             kind: ast::GenericParamKind::Lifetime,\n                             is_placeholder: false,\n+                            colon_span,\n                         })\n                     } else if this.check_keyword(kw::Const) {\n                         // Parse const parameter."}, {"sha": "640dccf66b0b4672293d7266743e0b170c3a0219", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -1868,18 +1868,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // instead we suggest `T: Foo + Bar` in that case.\n                     match hir.get(id) {\n                         Node::GenericParam(param) => {\n-                            let impl_trait = matches!(\n-                                param.kind,\n-                                hir::GenericParamKind::Type { synthetic: true, .. },\n-                            );\n+                            enum Introducer {\n+                                Plus,\n+                                Colon,\n+                                Nothing,\n+                            }\n                             let ast_generics = hir.get_generics(id.owner).unwrap();\n-                            let (sp, has_bounds) = if let Some(span) =\n+                            let (sp, mut introducer) = if let Some(span) =\n                                 ast_generics.bounds_span_for_suggestions(def_id)\n                             {\n-                                (span, true)\n+                                (span, Introducer::Plus)\n+                            } else if let Some(colon_span) = param.colon_span {\n+                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n                             } else {\n-                                (hir.span(id).shrink_to_hi(), false)\n+                                (param.span.shrink_to_hi(), Introducer::Colon)\n                             };\n+                            if matches!(\n+                                param.kind,\n+                                hir::GenericParamKind::Type { synthetic: true, .. },\n+                            ) {\n+                                introducer = Introducer::Plus\n+                            }\n                             let trait_def_ids: FxHashSet<DefId> = ast_generics\n                                 .bounds_for_param(def_id)\n                                 .flat_map(|bp| bp.bounds.iter())\n@@ -1895,7 +1904,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     candidates.iter().map(|t| {\n                                         format!(\n                                             \"{} {}\",\n-                                            if has_bounds || impl_trait { \" +\" } else { \":\" },\n+                                            match introducer {\n+                                                Introducer::Plus => \" +\",\n+                                                Introducer::Colon => \":\",\n+                                                Introducer::Nothing => \"\",\n+                                            },\n                                             self.tcx.def_path_str(t.def_id),\n                                         )\n                                     }),"}, {"sha": "ba1b745ba84229115cbcd68041bef850ab1f8fa2", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -70,7 +70,7 @@ where\n }\n \n #[rustfmt::skip]\n-fn existing_colon<T: Copy:>(t: T) {\n+fn existing_colon<T: Copy>(t: T) {\n     //~^ HELP consider restricting type parameter `T`\n     [t, t]; //~ use of moved value: `t`\n }"}, {"sha": "2353cd079a3704fab897aab06c24a99f19ae64b2", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -171,8 +171,8 @@ LL |     [t, t];\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn existing_colon<T: Copy:>(t: T) {\n-   |                    ++++++\n+LL | fn existing_colon<T: Copy>(t: T) {\n+   |                      ++++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "0a58ad4b663eb3ee4174c802dbd289308bae4bfa", "filename": "src/test/ui/traits/issue-95898.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74583852e8940f20d7c40c0dcc4d55697dee871b/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74583852e8940f20d7c40c0dcc4d55697dee871b/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr?ref=74583852e8940f20d7c40c0dcc4d55697dee871b", "patch": "@@ -7,8 +7,8 @@ LL |     t.clone();\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n help: the following trait defines an item `clone`, perhaps you need to restrict type parameter `T` with it:\n    |\n-LL | fn foo<T: Clone:>(t: T) {\n-   |         +++++++\n+LL | fn foo<T: Clone>(t: T) {\n+   |           +++++\n \n error: aborting due to previous error\n "}]}