{"sha": "b8f981a149ddbfdfa943d05a30710bafdf2f9522", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Zjk4MWExNDlkZGJmZGZhOTQzZDA1YTMwNzEwYmFmZGYyZjk1MjI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-10-16T13:45:23Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-10-17T15:06:20Z"}, "message": "Generate FirstStatementIndex using newtype_index macro", "tree": {"sha": "2f243725e15e24cdb607b8d9b4ca9dc90642db61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f243725e15e24cdb607b8d9b4ca9dc90642db61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8f981a149ddbfdfa943d05a30710bafdf2f9522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f981a149ddbfdfa943d05a30710bafdf2f9522", "html_url": "https://github.com/rust-lang/rust/commit/b8f981a149ddbfdfa943d05a30710bafdf2f9522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8f981a149ddbfdfa943d05a30710bafdf2f9522/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe7c87eefe4a15b7e83feb6b8962ae15452c16c", "html_url": "https://github.com/rust-lang/rust/commit/abe7c87eefe4a15b7e83feb6b8962ae15452c16c"}], "stats": {"total": 33, "additions": 9, "deletions": 24}, "files": [{"sha": "50f7e4ba176e5ddf6d3236bb5576485d21962b29", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f981a149ddbfdfa943d05a30710bafdf2f9522/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f981a149ddbfdfa943d05a30710bafdf2f9522/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=b8f981a149ddbfdfa943d05a30710bafdf2f9522", "patch": "@@ -518,7 +518,7 @@ impl_stable_hash_for!(enum ty::cast::CastKind {\n     FnPtrAddrCast\n });\n \n-impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { idx });\n+impl_stable_hash_for!(tuple_struct ::middle::region::FirstStatementIndex { idx });\n impl_stable_hash_for!(struct ::middle::region::Scope { id, code });\n \n impl<'gcx> ToStableHashKey<StableHashingContext<'gcx>> for region::Scope {"}, {"sha": "1d18c465179c19efb9a3ba3f0aa6e4689fe9d442", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b8f981a149ddbfdfa943d05a30710bafdf2f9522/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f981a149ddbfdfa943d05a30710bafdf2f9522/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=b8f981a149ddbfdfa943d05a30710bafdf2f9522", "patch": "@@ -156,26 +156,11 @@ pub struct BlockRemainder {\n     pub first_statement_index: FirstStatementIndex,\n }\n \n-#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n-         RustcDecodable, Copy)]\n-pub struct FirstStatementIndex { pub idx: u32 }\n-\n-impl Idx for FirstStatementIndex {\n-    fn new(idx: usize) -> Self {\n-        assert!(idx <= SCOPE_DATA_REMAINDER_MAX as usize);\n-        FirstStatementIndex { idx: idx as u32 }\n-    }\n-\n-    fn index(self) -> usize {\n-        self.idx as usize\n-    }\n-}\n-\n-impl fmt::Debug for FirstStatementIndex {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&self.index(), formatter)\n-    }\n-}\n+newtype_index!(FirstStatementIndex\n+    {\n+        DEBUG_NAME = \"\",\n+        MAX = SCOPE_DATA_REMAINDER_MAX,\n+    });\n \n impl From<ScopeData> for Scope {\n     #[inline]\n@@ -208,7 +193,7 @@ impl Scope {\n             SCOPE_DATA_DESTRUCTION => ScopeData::Destruction(self.id),\n             idx => ScopeData::Remainder(BlockRemainder {\n                 block: self.id,\n-                first_statement_index: FirstStatementIndex { idx }\n+                first_statement_index: FirstStatementIndex::new(idx as usize)\n             })\n         }\n     }"}, {"sha": "1d1b367de200eead52088b3b4440ebb678b5b377", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f981a149ddbfdfa943d05a30710bafdf2f9522/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f981a149ddbfdfa943d05a30710bafdf2f9522/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=b8f981a149ddbfdfa943d05a30710bafdf2f9522", "patch": "@@ -65,7 +65,7 @@ macro_rules! newtype_index {\n     (@type[$type:ident] @max[$max:expr] @debug_name[$debug_name:expr]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n             RustcEncodable, RustcDecodable)]\n-        pub struct $type(u32);\n+        pub struct $type(pub u32);\n \n         impl Idx for $type {\n             fn new(value: usize) -> Self {\n@@ -99,7 +99,7 @@ macro_rules! newtype_index {\n     // Replace existing default for max\n     (@type[$type:ident] @max[$_max:expr] @debug_name[$debug_name:expr]\n             MAX = $max:expr, $($tokens:tt)*) => (\n-        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $(tokens)*);\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $($tokens)*);\n     );\n \n     // Replace existing default for debug_name"}]}