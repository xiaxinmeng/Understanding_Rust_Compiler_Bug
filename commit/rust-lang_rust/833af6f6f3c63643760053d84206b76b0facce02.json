{"sha": "833af6f6f3c63643760053d84206b76b0facce02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzM2FmNmY2ZjNjNjM2NDM3NjAwNTNkODQyMDZiNzZiMGZhY2NlMDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-13T03:16:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-13T03:16:08Z"}, "message": "Revert \"rustc: Propagate types for vector, tuple, record, assignment, and if expressions downward\" due to test bustage\n\nThis reverts commit 1cdf42dd63a5ba790d91edabf131ca9347aa52ee.", "tree": {"sha": "6fc2ed53eaace008b6f6c24fe71d61cfff2adc59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc2ed53eaace008b6f6c24fe71d61cfff2adc59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/833af6f6f3c63643760053d84206b76b0facce02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/833af6f6f3c63643760053d84206b76b0facce02", "html_url": "https://github.com/rust-lang/rust/commit/833af6f6f3c63643760053d84206b76b0facce02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/833af6f6f3c63643760053d84206b76b0facce02/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08b5bc3d4d1c836e0372f3f5744ae1989f682a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08b5bc3d4d1c836e0372f3f5744ae1989f682a3", "html_url": "https://github.com/rust-lang/rust/commit/d08b5bc3d4d1c836e0372f3f5744ae1989f682a3"}], "stats": {"total": 83, "additions": 12, "deletions": 71}, "files": [{"sha": "cc2abcb05ef26bea3d590b094670bf5813ff003c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 71, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/833af6f6f3c63643760053d84206b76b0facce02/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833af6f6f3c63643760053d84206b76b0facce02/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=833af6f6f3c63643760053d84206b76b0facce02", "patch": "@@ -1160,63 +1160,17 @@ fn demand_expr(&fn_ctxt fcx, @ty expected, @ast.expr e) -> @ast.expr {\n     auto e_1 = ast.expr_vec(v, ast.ann_none);\n \n     alt (e.node) {\n-        case (ast.expr_vec(?es_0, ?ann)) {\n+        case (ast.expr_vec(?es, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n-            let vec[@ast.expr] es_1 = vec();\n-            alt (t.struct) {\n-                case (ty_vec(?subty)) {\n-                    for (@ast.expr e_0 in es_0) {\n-                        es_1 += vec(demand_expr(fcx, subty, e_0));\n-                    }\n-                }\n-                case (_) {\n-                    log \"vec expr doesn't have a vec type!\";\n-                    fail;\n-                }\n-            }\n-            e_1 = ast.expr_vec(es_1, ast.ann_type(t));\n+            e_1 = ast.expr_vec(es, ast.ann_type(t));\n         }\n-        case (ast.expr_tup(?es_0, ?ann)) {\n+        case (ast.expr_tup(?es, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n-            let vec[ast.elt] elts_1 = vec();\n-            alt (t.struct) {\n-                case (ty_tup(?subtys)) {\n-                    auto i = 0u;\n-                    for (ast.elt elt_0 in es_0) {\n-                        auto e_1 = demand_expr(fcx, subtys.(i), elt_0.expr);\n-                        elts_1 += vec(rec(mut=elt_0.mut, expr=e_1));\n-                        i += 1u;\n-                    }\n-                }\n-                case (_) {\n-                    log \"tup expr doesn't have a tup type!\";\n-                    fail;\n-                }\n-            }\n-            e_1 = ast.expr_tup(elts_1, ast.ann_type(t));\n+            e_1 = ast.expr_tup(es, ast.ann_type(t));\n         }\n-        case (ast.expr_rec(?fields_0, ?ann)) {\n+        case (ast.expr_rec(?es, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n-            let vec[ast.field] fields_1 = vec();\n-            alt (t.struct) {\n-                case (ty_rec(?field_tys)) {\n-                    auto i = 0u;\n-                    for (ast.field field_0 in fields_0) {\n-                        check (_str.eq(field_0.ident, field_tys.(i).ident));\n-                        auto e_1 = demand_expr(fcx, field_tys.(i).ty,\n-                                               field_0.expr);\n-                        fields_0 += vec(rec(mut=field_0.mut,\n-                                            ident=field_0.ident,\n-                                            expr=e_1));\n-                        i += 1u;\n-                    }\n-                }\n-                case (_) {\n-                    log \"rec expr doesn't have a rec type!\";\n-                    fail;\n-                }\n-            }\n-            e_1 = ast.expr_rec(fields_1, ast.ann_type(t));\n+            e_1 = ast.expr_rec(es, ast.ann_type(t));\n         }\n         case (ast.expr_call(?sube, ?es, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n@@ -1238,18 +1192,9 @@ fn demand_expr(&fn_ctxt fcx, @ty expected, @ast.expr e) -> @ast.expr {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n             e_1 = ast.expr_cast(sube, ast_ty, ast.ann_type(t));\n         }\n-        case (ast.expr_if(?cond, ?then_0, ?else_0, ?ann)) {\n+        case (ast.expr_if(?cond, ?then, ?els, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n-            auto then_1 = demand_block(fcx, expected, then_0);\n-            auto else_1;\n-            alt (else_0) {\n-                case (none[ast.block]) { else_1 = none[ast.block]; }\n-                case (some[ast.block](?b_0)) {\n-                    auto b_1 = demand_block(fcx, expected, b_0);\n-                    else_1 = some[ast.block](b_1);\n-                }\n-            }\n-            e_1 = ast.expr_if(cond, then_1, else_1, ast.ann_type(t));\n+            e_1 = ast.expr_if(cond, then, els, ast.ann_type(t));\n         }\n         case (ast.expr_while(?cond, ?bloc, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n@@ -1263,17 +1208,13 @@ fn demand_expr(&fn_ctxt fcx, @ty expected, @ast.expr e) -> @ast.expr {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n             e_1 = ast.expr_block(bloc, ast.ann_type(t));\n         }\n-        case (ast.expr_assign(?lhs_0, ?rhs_0, ?ann)) {\n+        case (ast.expr_assign(?lhs, ?rhs, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n-            auto lhs_1 = demand_expr(fcx, expected, lhs_0);\n-            auto rhs_1 = demand_expr(fcx, expected, rhs_0);\n-            e_1 = ast.expr_assign(lhs_1, rhs_1, ast.ann_type(t));\n+            e_1 = ast.expr_assign(lhs, rhs, ast.ann_type(t));\n         }\n-        case (ast.expr_assign_op(?op, ?lhs_0, ?rhs_0, ?ann)) {\n+        case (ast.expr_assign_op(?op, ?lhs, ?rhs, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n-            auto lhs_1 = demand_expr(fcx, expected, lhs_0);\n-            auto rhs_1 = demand_expr(fcx, expected, rhs_0);\n-            e_1 = ast.expr_assign_op(op, lhs_1, rhs_1, ast.ann_type(t));\n+            e_1 = ast.expr_assign_op(op, lhs, rhs, ast.ann_type(t));\n         }\n         case (ast.expr_field(?lhs, ?rhs, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));"}]}