{"sha": "5511e73eb4ec853df757e9f1f60fde988778a3a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MTFlNzNlYjRlYzg1M2RmNzU3ZTlmMWY2MGZkZTk4ODc3OGEzYTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-29T23:43:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-29T23:43:44Z"}, "message": "Rollup merge of #75885 - jumbatm:issue75739-clashing-extern-declarations-transparent-nonzero, r=lcnr\n\nFix another clashing_extern_declarations false positive.\n\nFixes #75739.\n\nFix another clashing_extern_declarations false positive, this time for transparent newtype with a non-zero member.\n\nr? @lcnr", "tree": {"sha": "6f3088f622bfe7b3fce1217f6e0f224415a6cfde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f3088f622bfe7b3fce1217f6e0f224415a6cfde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5511e73eb4ec853df757e9f1f60fde988778a3a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfSugwCRBK7hj4Ov3rIwAAdHIIAGIF+EAEaOSKCq3SzGdYmVVC\n5m8SQHIzeF4fAy1hlJTXn7UxzD5aw4l4cfhvV+1Vt6Pa7fWvJ28CwWNc+tHsqX3w\nG1NTrojIWm2YYQ1hRU21kL1yK0/9Cs7RwV5QkoOuEMJTxK/Q9+DmWsLSmWi6+S2v\nowUM0fD1bQfZbxcXl03hiz04KPK6WyE4GNmCa3GITHxImmMOfY1ANo2bv/hIXrqI\nFuQ5qOExdOk69xoWsvQgInDoZWyjUxf7MPuYSTvElhx1gbAgg9qy5O6XIFsNwpje\nf5i7TRzk/5xAJEuTrjGrNpNjNy7U0aNRMs8OtM+jahcczBVkf9FGFOore4v/b8s=\n=LHxd\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f3088f622bfe7b3fce1217f6e0f224415a6cfde\nparent f35eb5cced453e87d0ee9e648928cba6729b15ba\nparent 352df40df53e0b559ecefcd5a4409ec43143c645\nauthor Dylan DPC <dylan.dpc@gmail.com> 1598744624 +0200\ncommitter GitHub <noreply@github.com> 1598744624 +0200\n\nRollup merge of #75885 - jumbatm:issue75739-clashing-extern-declarations-transparent-nonzero, r=lcnr\n\nFix another clashing_extern_declarations false positive.\n\nFixes #75739.\n\nFix another clashing_extern_declarations false positive, this time for transparent newtype with a non-zero member.\n\nr? @lcnr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5511e73eb4ec853df757e9f1f60fde988778a3a9", "html_url": "https://github.com/rust-lang/rust/commit/5511e73eb4ec853df757e9f1f60fde988778a3a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5511e73eb4ec853df757e9f1f60fde988778a3a9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35eb5cced453e87d0ee9e648928cba6729b15ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f35eb5cced453e87d0ee9e648928cba6729b15ba", "html_url": "https://github.com/rust-lang/rust/commit/f35eb5cced453e87d0ee9e648928cba6729b15ba"}, {"sha": "352df40df53e0b559ecefcd5a4409ec43143c645", "url": "https://api.github.com/repos/rust-lang/rust/commits/352df40df53e0b559ecefcd5a4409ec43143c645", "html_url": "https://github.com/rust-lang/rust/commit/352df40df53e0b559ecefcd5a4409ec43143c645"}], "stats": {"total": 156, "additions": 135, "deletions": 21}, "files": [{"sha": "ea624b9ed300320005f09a304256ecfde485f372", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5511e73eb4ec853df757e9f1f60fde988778a3a9/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5511e73eb4ec853df757e9f1f60fde988778a3a9/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5511e73eb4ec853df757e9f1f60fde988778a3a9", "patch": "@@ -38,6 +38,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n use rustc_hir::{HirId, HirIdSet, Node};\n+use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n@@ -2162,6 +2163,40 @@ impl ClashingExternDeclarations {\n             ckind: CItemKind,\n         ) -> bool {\n             debug!(\"structurally_same_type_impl(cx, a = {:?}, b = {:?})\", a, b);\n+            let tcx = cx.tcx;\n+\n+            // Given a transparent newtype, reach through and grab the inner\n+            // type unless the newtype makes the type non-null.\n+            let non_transparent_ty = |ty: Ty<'tcx>| -> Ty<'tcx> {\n+                let mut ty = ty;\n+                loop {\n+                    if let ty::Adt(def, substs) = ty.kind {\n+                        let is_transparent = def.subst(tcx, substs).repr.transparent();\n+                        let is_non_null = crate::types::nonnull_optimization_guaranteed(tcx, &def);\n+                        debug!(\n+                            \"non_transparent_ty({:?}) -- type is transparent? {}, type is non-null? {}\",\n+                            ty, is_transparent, is_non_null\n+                        );\n+                        if is_transparent && !is_non_null {\n+                            debug_assert!(def.variants.len() == 1);\n+                            let v = &def.variants[VariantIdx::new(0)];\n+                            ty = v\n+                                .transparent_newtype_field(tcx)\n+                                .expect(\n+                                    \"single-variant transparent structure with zero-sized field\",\n+                                )\n+                                .ty(tcx, substs);\n+                            continue;\n+                        }\n+                    }\n+                    debug!(\"non_transparent_ty -> {:?}\", ty);\n+                    return ty;\n+                }\n+            };\n+\n+            let a = non_transparent_ty(a);\n+            let b = non_transparent_ty(b);\n+\n             if !seen_types.insert((a, b)) {\n                 // We've encountered a cycle. There's no point going any further -- the types are\n                 // structurally the same."}, {"sha": "35c462c24c8e88a0b229e182e4c20a65e313dfac", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5511e73eb4ec853df757e9f1f60fde988778a3a9/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5511e73eb4ec853df757e9f1f60fde988778a3a9/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=5511e73eb4ec853df757e9f1f60fde988778a3a9", "patch": "@@ -11,7 +11,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::interpret::{sign_extend, truncate};\n use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n@@ -527,22 +527,26 @@ enum FfiResult<'tcx> {\n     FfiUnsafe { ty: Ty<'tcx>, reason: String, help: Option<String> },\n }\n \n+crate fn nonnull_optimization_guaranteed<'tcx>(tcx: TyCtxt<'tcx>, def: &ty::AdtDef) -> bool {\n+    tcx.get_attrs(def.did)\n+        .iter()\n+        .any(|a| tcx.sess.check_name(a, sym::rustc_nonnull_optimization_guaranteed))\n+}\n+\n /// Is type known to be non-null?\n-fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKind) -> bool {\n+crate fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKind) -> bool {\n     let tcx = cx.tcx;\n     match ty.kind {\n         ty::FnPtr(_) => true,\n         ty::Ref(..) => true,\n         ty::Adt(def, _) if def.is_box() && matches!(mode, CItemKind::Definition) => true,\n         ty::Adt(def, substs) if def.repr.transparent() && !def.is_union() => {\n-            let guaranteed_nonnull_optimization = tcx\n-                .get_attrs(def.did)\n-                .iter()\n-                .any(|a| tcx.sess.check_name(a, sym::rustc_nonnull_optimization_guaranteed));\n+            let marked_non_null = nonnull_optimization_guaranteed(tcx, &def);\n \n-            if guaranteed_nonnull_optimization {\n+            if marked_non_null {\n                 return true;\n             }\n+\n             for variant in &def.variants {\n                 if let Some(field) = variant.transparent_newtype_field(tcx) {\n                     if ty_is_known_nonnull(cx, field.ty(tcx, substs), mode) {"}, {"sha": "41f0baecf24a892704d45d95beaed02c808b5fea", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/5511e73eb4ec853df757e9f1f60fde988778a3a9/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5511e73eb4ec853df757e9f1f60fde988778a3a9/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=5511e73eb4ec853df757e9f1f60fde988778a3a9", "patch": "@@ -182,7 +182,9 @@ mod same_sized_members_clash {\n             y: f32,\n             z: f32,\n         }\n-        extern \"C\" { fn origin() -> Point3; }\n+        extern \"C\" {\n+            fn origin() -> Point3;\n+        }\n     }\n     mod b {\n         #[repr(C)]\n@@ -191,8 +193,9 @@ mod same_sized_members_clash {\n             y: i32,\n             z: i32, // NOTE: Incorrectly redeclared as i32\n         }\n-        extern \"C\" { fn origin() -> Point3; }\n-        //~^ WARN `origin` redeclared with a different signature\n+        extern \"C\" {\n+            fn origin() -> Point3; //~ WARN `origin` redeclared with a different signature\n+        }\n     }\n }\n \n@@ -258,6 +261,78 @@ mod non_zero_and_non_null {\n     }\n }\n \n+// See #75739\n+mod non_zero_transparent {\n+    mod a1 {\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            fn f1() -> NonZeroUsize;\n+        }\n+    }\n+\n+    mod b1 {\n+        #[repr(transparent)]\n+        struct X(NonZeroUsize);\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            fn f1() -> X;\n+        }\n+    }\n+\n+    mod a2 {\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            fn f2() -> NonZeroUsize;\n+        }\n+    }\n+\n+    mod b2 {\n+        #[repr(transparent)]\n+        struct X1(NonZeroUsize);\n+\n+        #[repr(transparent)]\n+        struct X(X1);\n+\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            // Same case as above, but with two layers of newtyping.\n+            fn f2() -> X;\n+        }\n+    }\n+\n+    mod a3 {\n+        #[repr(transparent)]\n+        struct X(core::ptr::NonNull<i32>);\n+\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            fn f3() -> X;\n+        }\n+    }\n+\n+    mod b3 {\n+        extern \"C\" {\n+            fn f3() -> core::ptr::NonNull<i32>;\n+        }\n+    }\n+\n+    mod a4 {\n+        #[repr(transparent)]\n+        enum E {\n+            X(std::num::NonZeroUsize),\n+        }\n+        extern \"C\" {\n+            fn f4() -> E;\n+        }\n+    }\n+\n+    mod b4 {\n+        extern \"C\" {\n+            fn f4() -> std::num::NonZeroUsize;\n+        }\n+    }\n+}\n+\n mod null_optimised_enums {\n     mod a {\n         extern \"C\" {"}, {"sha": "0a18f05ba2903ca915219a80db4fd94fbd35ede1", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5511e73eb4ec853df757e9f1f60fde988778a3a9/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5511e73eb4ec853df757e9f1f60fde988778a3a9/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=5511e73eb4ec853df757e9f1f60fde988778a3a9", "patch": "@@ -106,19 +106,19 @@ LL |             fn draw_point(p: Point);\n               found `unsafe extern \"C\" fn(sameish_members::b::Point)`\n \n warning: `origin` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:194:22\n+  --> $DIR/clashing-extern-fn.rs:197:13\n    |\n-LL |         extern \"C\" { fn origin() -> Point3; }\n-   |                      ---------------------- `origin` previously declared here\n+LL |             fn origin() -> Point3;\n+   |             ---------------------- `origin` previously declared here\n ...\n-LL |         extern \"C\" { fn origin() -> Point3; }\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+LL |             fn origin() -> Point3;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n    = note: expected `unsafe extern \"C\" fn() -> same_sized_members_clash::a::Point3`\n               found `unsafe extern \"C\" fn() -> same_sized_members_clash::b::Point3`\n \n warning: `transparent_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:217:13\n+  --> $DIR/clashing-extern-fn.rs:220:13\n    |\n LL |             fn transparent_incorrect() -> T;\n    |             -------------------------------- `transparent_incorrect` previously declared here\n@@ -130,7 +130,7 @@ LL |             fn transparent_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `missing_return_type` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:235:13\n+  --> $DIR/clashing-extern-fn.rs:238:13\n    |\n LL |             fn missing_return_type() -> usize;\n    |             ---------------------------------- `missing_return_type` previously declared here\n@@ -142,7 +142,7 @@ LL |             fn missing_return_type();\n               found `unsafe extern \"C\" fn()`\n \n warning: `non_zero_usize` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:253:13\n+  --> $DIR/clashing-extern-fn.rs:256:13\n    |\n LL |             fn non_zero_usize() -> core::num::NonZeroUsize;\n    |             ----------------------------------------------- `non_zero_usize` previously declared here\n@@ -154,7 +154,7 @@ LL |             fn non_zero_usize() -> usize;\n               found `unsafe extern \"C\" fn() -> usize`\n \n warning: `non_null_ptr` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:255:13\n+  --> $DIR/clashing-extern-fn.rs:258:13\n    |\n LL |             fn non_null_ptr() -> core::ptr::NonNull<usize>;\n    |             ----------------------------------------------- `non_null_ptr` previously declared here\n@@ -166,7 +166,7 @@ LL |             fn non_null_ptr() -> *const usize;\n               found `unsafe extern \"C\" fn() -> *const usize`\n \n warning: `option_non_zero_usize_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:281:13\n+  --> $DIR/clashing-extern-fn.rs:356:13\n    |\n LL |             fn option_non_zero_usize_incorrect() -> usize;\n    |             ---------------------------------------------- `option_non_zero_usize_incorrect` previously declared here\n@@ -178,7 +178,7 @@ LL |             fn option_non_zero_usize_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `option_non_null_ptr_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:283:13\n+  --> $DIR/clashing-extern-fn.rs:358:13\n    |\n LL |             fn option_non_null_ptr_incorrect() -> *const usize;\n    |             --------------------------------------------------- `option_non_null_ptr_incorrect` previously declared here"}]}