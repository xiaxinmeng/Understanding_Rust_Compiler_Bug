{"sha": "dbb0cee682cdff796561cd6cca9bb6925a7b1ca2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYjBjZWU2ODJjZGZmNzk2NTYxY2Q2Y2NhOWJiNjkyNWE3YjFjYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-14T23:01:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-14T23:01:17Z"}, "message": "auto merge of #16474 : MatejLach/rust/cargorun_fix, r=steveklabnik\n\nThis fixes #16451.\r\n\r\nWhile moving things around, I also removed a bunch of unnecessary whitespace, however I can put it back in if that's undesired. \r\n\r\nThanks.", "tree": {"sha": "f0a6db52e72fe0cfb13ce1e60ff243bfe58d9ed3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0a6db52e72fe0cfb13ce1e60ff243bfe58d9ed3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbb0cee682cdff796561cd6cca9bb6925a7b1ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb0cee682cdff796561cd6cca9bb6925a7b1ca2", "html_url": "https://github.com/rust-lang/rust/commit/dbb0cee682cdff796561cd6cca9bb6925a7b1ca2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbb0cee682cdff796561cd6cca9bb6925a7b1ca2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e0ede92157995665c7caf4ae115354139be46d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e0ede92157995665c7caf4ae115354139be46d", "html_url": "https://github.com/rust-lang/rust/commit/f8e0ede92157995665c7caf4ae115354139be46d"}, {"sha": "bede9ecdfe64ae59e054df455ff22b6563ac0512", "url": "https://api.github.com/repos/rust-lang/rust/commits/bede9ecdfe64ae59e054df455ff22b6563ac0512", "html_url": "https://github.com/rust-lang/rust/commit/bede9ecdfe64ae59e054df455ff22b6563ac0512"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "2593ddc556b433c01845c8a068390d3e84e91ac7", "filename": "src/doc/guide.md", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dbb0cee682cdff796561cd6cca9bb6925a7b1ca2/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbb0cee682cdff796561cd6cca9bb6925a7b1ca2/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=dbb0cee682cdff796561cd6cca9bb6925a7b1ca2", "patch": "@@ -1360,7 +1360,7 @@ while !done {\n ```\n \n `while` loops are the correct choice when you're not sure how many times\n-you need to loop. \n+you need to loop.\n \n If you need an infinite loop, you may be tempted to write this:\n \n@@ -1650,7 +1650,7 @@ a full line of input. Nice and easy.\n .ok().expect(\"Failed to read line\");\n ```\n \n-Do you remember this code? \n+Do you remember this code?\n \n ```\n enum OptionalInt {\n@@ -1796,6 +1796,21 @@ Excellent! Open up your `src/main.rs` again. We'll be writing all of\n our code in this file. We'll talk about multiple-file projects later on in the\n guide.\n \n+Before we move on, let me show you one more Cargo command: `run`. `cargo run`\n+is kind of like `cargo build`, but it also then runs the produced exectuable.\n+Try it out:\n+\n+```{notrust,ignore}\n+$ cargo run\n+   Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n+     Running `target/guessing_game`\n+Hello, world!\n+$\n+```\n+\n+Great! The `run` command comes in handy when you need to rapidly iterate on a project.\n+Our game is just such a project, we need to quickly test each iteration before moving on to the next one.\n+\n ## Processing a Guess\n \n Let's get to it! The first thing we need to do for our guessing game is\n@@ -1933,19 +1948,19 @@ $\n Excellent! Try running our new program a few times:\n \n ```{notrust,ignore}\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: 7\n Please input your guess.\n 4\n You guessed: 4\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: 83\n Please input your guess.\n 5\n You guessed: 5\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: -29\n Please input your guess.\n@@ -1986,7 +2001,7 @@ And trying it out:\n ```{notrust,ignore}\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: 57\n Please input your guess.\n@@ -2022,7 +2037,7 @@ fn main() {\n \n     println!(\"You guessed: {}\", input);\n \n-    match cmp(input, secret_number) { \n+    match cmp(input, secret_number) {\n         Less    => println!(\"Too small!\"),\n         Greater => println!(\"Too big!\"),\n         Equal   => { println!(\"You win!\"); },\n@@ -2106,7 +2121,7 @@ a `String` instead! That's because our `input` variable is coming from the\n standard input, and you can guess anything. Try it:\n \n ```{notrust,ignore}\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: 73\n Please input your guess.\n@@ -2257,7 +2272,7 @@ print an error message and return. Let's give this a shot:\n ```{notrust,ignore}\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: 17\n Please input your guess.\n@@ -2323,7 +2338,7 @@ Let's try it!\n ```{notrust,ignore}\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: 58\n Please input your guess.\n@@ -2401,7 +2416,7 @@ that `return`? If we give a non-number answer, we'll `return` and quit. Observe:\n ```{notrust,ignore}\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: 59\n Please input your guess.\n@@ -2534,7 +2549,7 @@ Now we should be good! Let's try:\n ```{rust,ignore}\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n-$ ./target/guessing_game \n+$ ./target/guessing_game\n Guess the number!\n The secret number is: 61\n Please input your guess.\n@@ -2731,16 +2746,6 @@ mod hello {\n \n This will work:\n \n-```{notrust,ignore}\n-$ cargo build\n-   Compiling modules v0.1.0 (file:/home/you/projects/modules)\n-$\n-```\n-\n-Before we move on, let me show you one more Cargo command: `run`. `cargo run`\n-is kind of like `cargo build`, but it also then runs the produced exectuable.\n-Try it out:\n-\n ```{notrust,ignore}\n $ cargo run\n    Compiling modules v0.1.0 (file:/home/steve/tmp/modules)\n@@ -3647,14 +3652,14 @@ In order to truly understand this error, we have to learn a few new concepts:\n All of our references so far have been to variables we've created on the stack.\n In Rust, the simplest way to allocate heap variables is using a *box*.  To\n create a box, use the `box` keyword:\n- \n+\n ```{rust}\n let x = box 5i;\n ```\n \n This allocates an integer `5` on the heap, and creates a binding `x` that\n refers to it.. The great thing about boxed pointers is that we don't have to\n-manually free this allocation! If we write \n+manually free this allocation! If we write\n \n ```{rust}\n {\n@@ -4189,7 +4194,7 @@ the match:\n \n ```{rust,ignore}\n let x = inverse(25.0f64);\n-println!(\"{}\", x + 2.0f64); // error: binary operation `+` cannot be applied \n+println!(\"{}\", x + 2.0f64); // error: binary operation `+` cannot be applied\n            // to type `core::result::Result<f64,collections::string::String>`\n ```\n \n@@ -4700,4 +4705,3 @@ fail.\n # Macros\n \n # Unsafe\n-"}]}