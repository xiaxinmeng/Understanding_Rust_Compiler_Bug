{"sha": "68d320a680b5df802b2c3e7dad5d890e3309ed60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDMyMGE2ODBiNWRmODAyYjJjM2U3ZGFkNWQ4OTBlMzMwOWVkNjA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-15T23:05:28Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-15T23:05:28Z"}, "message": "Merge #544\n\n544: Implement rudimentary type inference for unary operators r=marcusklaas a=marcusklaas\n\n\n\nCo-authored-by: Marcus Klaas de Vries <mail@marcusklaas.nl>", "tree": {"sha": "f38fafe9cbc4efea5574afa6c40a0fea403bf34c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f38fafe9cbc4efea5574afa6c40a0fea403bf34c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d320a680b5df802b2c3e7dad5d890e3309ed60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d320a680b5df802b2c3e7dad5d890e3309ed60", "html_url": "https://github.com/rust-lang/rust/commit/68d320a680b5df802b2c3e7dad5d890e3309ed60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d320a680b5df802b2c3e7dad5d890e3309ed60/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "ab46f8abf195a78c018d8b23896eb920d16b028b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab46f8abf195a78c018d8b23896eb920d16b028b", "html_url": "https://github.com/rust-lang/rust/commit/ab46f8abf195a78c018d8b23896eb920d16b028b"}, {"sha": "a2b6d3da30020421c97100d7c8699a3b4f8cd6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b6d3da30020421c97100d7c8699a3b4f8cd6fb", "html_url": "https://github.com/rust-lang/rust/commit/a2b6d3da30020421c97100d7c8699a3b4f8cd6fb"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "663338844758c9a4b09895f0551225264d1033f9", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68d320a680b5df802b2c3e7dad5d890e3309ed60/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d320a680b5df802b2c3e7dad5d890e3309ed60/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=68d320a680b5df802b2c3e7dad5d890e3309ed60", "patch": "@@ -182,7 +182,7 @@ pub enum Expr {\n     },\n     UnaryOp {\n         expr: ExprId,\n-        op: Option<UnaryOp>,\n+        op: UnaryOp,\n     },\n     BinaryOp {\n         lhs: ExprId,\n@@ -612,8 +612,11 @@ impl ExprCollector {\n             }\n             ast::ExprKind::PrefixExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let op = e.op();\n-                self.alloc_expr(Expr::UnaryOp { expr, op }, syntax_ptr)\n+                if let Some(op) = e.op() {\n+                    self.alloc_expr(Expr::UnaryOp { expr, op }, syntax_ptr)\n+                } else {\n+                    self.alloc_expr(Expr::Missing, syntax_ptr)\n+                }\n             }\n             ast::ExprKind::LambdaExpr(e) => {\n                 let mut args = Vec::new();"}, {"sha": "85d4dc05ce811bbeb74c4ad13edc92e6b91cab51", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68d320a680b5df802b2c3e7dad5d890e3309ed60/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d320a680b5df802b2c3e7dad5d890e3309ed60/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=68d320a680b5df802b2c3e7dad5d890e3309ed60", "patch": "@@ -1051,15 +1051,28 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::UnaryOp { expr, op } => {\n                 let inner_ty = self.infer_expr(*expr, &Expectation::none());\n                 match op {\n-                    Some(UnaryOp::Deref) => {\n+                    UnaryOp::Deref => {\n                         if let Some(derefed_ty) = inner_ty.builtin_deref() {\n                             derefed_ty\n                         } else {\n                             // TODO Deref::deref\n                             Ty::Unknown\n                         }\n                     }\n-                    _ => Ty::Unknown,\n+                    UnaryOp::Neg => {\n+                        match inner_ty {\n+                            Ty::Int(primitive::UncertainIntTy::Unknown)\n+                            | Ty::Int(primitive::UncertainIntTy::Signed(..))\n+                            | Ty::Infer(InferTy::IntVar(..))\n+                            | Ty::Infer(InferTy::FloatVar(..))\n+                            | Ty::Float(..) => inner_ty,\n+                            // TODO: resolve ops::Neg trait\n+                            _ => Ty::Unknown,\n+                        }\n+                    }\n+                    UnaryOp::Not if inner_ty == Ty::Bool => Ty::Bool,\n+                    // TODO: resolve ops::Not trait for inner_ty\n+                    UnaryOp::Not => Ty::Unknown,\n                 }\n             }\n             Expr::BinaryOp { lhs, rhs, op } => match op {"}, {"sha": "5d7bc25cc4bc11c91f8ccb74e478127b846fec76", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/68d320a680b5df802b2c3e7dad5d890e3309ed60/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d320a680b5df802b2c3e7dad5d890e3309ed60/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=68d320a680b5df802b2c3e7dad5d890e3309ed60", "patch": "@@ -158,6 +158,29 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_unary_op() {\n+    check_inference(\n+        r#\"\n+enum SomeType {}\n+\n+fn test(x: SomeType) {\n+    let b = false;\n+    let c = !b;\n+    let a = 100;\n+    let d: i128 = -a;\n+    let e = -100;\n+    let f = !!!true;\n+    -3.14;\n+    -x;\n+    !x;\n+    -\"hello\";\n+}\n+\"#,\n+        \"unary_op.txt\",\n+    );\n+}\n+\n #[test]\n fn infer_backwards() {\n     check_inference("}, {"sha": "203022e82967d013fbd983972cbc650f5eb6ebfb", "filename": "crates/ra_hir/src/ty/tests/data/unary_op.txt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68d320a680b5df802b2c3e7dad5d890e3309ed60/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Funary_op.txt", "raw_url": "https://github.com/rust-lang/rust/raw/68d320a680b5df802b2c3e7dad5d890e3309ed60/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Funary_op.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Funary_op.txt?ref=68d320a680b5df802b2c3e7dad5d890e3309ed60", "patch": "@@ -0,0 +1,28 @@\n+[27; 28) 'x': SomeType\n+[40; 197) '{     ...lo\"; }': ()\n+[50; 51) 'b': bool\n+[54; 59) 'false': bool\n+[69; 70) 'c': bool\n+[73; 75) '!b': bool\n+[74; 75) 'b': bool\n+[85; 86) 'a': i128\n+[89; 92) '100': i128\n+[102; 103) 'd': i128\n+[112; 114) '-a': i128\n+[113; 114) 'a': i128\n+[124; 125) 'e': i32\n+[128; 132) '-100': i32\n+[129; 132) '100': i32\n+[142; 143) 'f': bool\n+[146; 153) '!!!true': bool\n+[147; 153) '!!true': bool\n+[148; 153) '!true': bool\n+[149; 153) 'true': bool\n+[159; 164) '-3.14': f64\n+[160; 164) '3.14': f64\n+[170; 172) '-x': [unknown]\n+[171; 172) 'x': SomeType\n+[178; 180) '!x': [unknown]\n+[179; 180) 'x': SomeType\n+[186; 194) '-\"hello\"': [unknown]\n+[187; 194) '\"hello\"': &str"}]}