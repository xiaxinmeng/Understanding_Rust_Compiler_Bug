{"sha": "4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "node_id": "C_kwDOAAsO6NoAKDRmN2NkM2Q0NTkxYWVmYzRlZGVjMTAzOWFjNDliZWY5NGQ2NWRlYjE", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-16T20:42:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-16T20:50:23Z"}, "message": "Add `try_canonicalize` to `rustc_fs_util` and use it over `fs::canonicalize`", "tree": {"sha": "744a3b3b42c26c924c69c42ce5e75589a164198b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/744a3b3b42c26c924c69c42ce5e75589a164198b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "html_url": "https://github.com/rust-lang/rust/commit/4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac4b82ddd596a218cac8cd6b88a91b54fcdcf13", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac4b82ddd596a218cac8cd6b88a91b54fcdcf13", "html_url": "https://github.com/rust-lang/rust/commit/7ac4b82ddd596a218cac8cd6b88a91b54fcdcf13"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "2394aa6e4531f6327f488c33b84652215e9ee28a", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -4826,6 +4826,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n+ \"rustc_fs_util\",\n  \"rustc_hir\",\n  \"rustc_hir_analysis\",\n  \"rustc_hir_typeck\",\n@@ -4950,6 +4951,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_expand\",\n  \"rustc_feature\",\n+ \"rustc_fs_util\",\n  \"rustc_hir\",\n  \"rustc_hir_pretty\",\n  \"rustc_index\",\n@@ -5334,6 +5336,7 @@ dependencies = [\n  \"rustc_abi\",\n  \"rustc_data_structures\",\n  \"rustc_feature\",\n+ \"rustc_fs_util\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "81d6333814544b84fd8e8a10f85bb3a394d437b2", "filename": "compiler/rustc_fs_util/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -1,10 +1,11 @@\n+#![feature(absolute_path)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n use std::ffi::CString;\n use std::fs;\n use std::io;\n-use std::path::{Path, PathBuf};\n+use std::path::{absolute, Path, PathBuf};\n \n // Unfortunately, on windows, it looks like msvcrt.dll is silently translating\n // verbatim paths under the hood to non-verbatim paths! This manifests itself as\n@@ -91,3 +92,8 @@ pub fn path_to_c_string(p: &Path) -> CString {\n pub fn path_to_c_string(p: &Path) -> CString {\n     CString::new(p.to_str().unwrap()).unwrap()\n }\n+\n+#[inline]\n+pub fn try_canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n+    fs::canonicalize(&path).or_else(|_| absolute(&path))\n+}"}, {"sha": "d6f83838a041783d5d0278573acefd3770e0cd07", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -108,7 +108,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n use rustc_errors::ErrorGuaranteed;\n-use rustc_fs_util::{link_or_copy, LinkOrCopy};\n+use rustc_fs_util::{link_or_copy, try_canonicalize, LinkOrCopy};\n use rustc_session::{Session, StableCrateId};\n use rustc_span::Symbol;\n \n@@ -223,7 +223,7 @@ pub fn prepare_session_directory(\n     // because, on windows, long paths can cause problems;\n     // canonicalization inserts this weird prefix that makes windows\n     // tolerate long paths.\n-    let crate_dir = match crate_dir.canonicalize() {\n+    let crate_dir = match try_canonicalize(&crate_dir) {\n         Ok(v) => v,\n         Err(err) => {\n             return Err(sess.emit_err(errors::CanonicalizePath { path: crate_dir, err }));\n@@ -867,7 +867,7 @@ fn all_except_most_recent(\n /// before passing it to std::fs::remove_dir_all(). This will convert the path\n /// into the '\\\\?\\' format, which supports much longer paths.\n fn safe_remove_dir_all(p: &Path) -> io::Result<()> {\n-    let canonicalized = match std_fs::canonicalize(p) {\n+    let canonicalized = match try_canonicalize(p) {\n         Ok(canonicalized) => canonicalized,\n         Err(err) if err.kind() == io::ErrorKind::NotFound => return Ok(()),\n         Err(err) => return Err(err),\n@@ -877,7 +877,7 @@ fn safe_remove_dir_all(p: &Path) -> io::Result<()> {\n }\n \n fn safe_remove_file(p: &Path) -> io::Result<()> {\n-    let canonicalized = match std_fs::canonicalize(p) {\n+    let canonicalized = match try_canonicalize(p) {\n         Ok(canonicalized) => canonicalized,\n         Err(err) if err.kind() == io::ErrorKind::NotFound => return Ok(()),\n         Err(err) => return Err(err),"}, {"sha": "96d6a1cb062ee4e3d0705e84e7e5c4a7fbe3d2a8", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -16,6 +16,7 @@ rustc_attr = { path = \"../rustc_attr\" }\n rustc_borrowck = { path = \"../rustc_borrowck\" }\n rustc_builtin_macros = { path = \"../rustc_builtin_macros\" }\n rustc_expand = { path = \"../rustc_expand\" }\n+rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "b392624a953620ed8cb02a15cd8f8ad7bc652003", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::PResult;\n use rustc_expand::base::{ExtCtxt, LintStoreExpand};\n+use rustc_fs_util::try_canonicalize;\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_lint::{unerased_lint_store, BufferedEarlyLint, EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n@@ -405,12 +406,12 @@ where\n }\n \n fn output_contains_path(output_paths: &[PathBuf], input_path: &Path) -> bool {\n-    let input_path = input_path.canonicalize().ok();\n+    let input_path = try_canonicalize(input_path).ok();\n     if input_path.is_none() {\n         return false;\n     }\n     let check = |output_path: &PathBuf| {\n-        if output_path.canonicalize().ok() == input_path { Some(()) } else { None }\n+        if try_canonicalize(output_path).ok() == input_path { Some(()) } else { None }\n     };\n     check_output(output_paths, check).is_some()\n }"}, {"sha": "4d7c133e09bc4f1e19291b2b71153933884bdc48", "filename": "compiler/rustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2FCargo.toml?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -18,6 +18,7 @@ rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_hir_pretty = { path = \"../rustc_hir_pretty\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "79c42a128e795a39c345e77e219b7fd502704ca0", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -222,6 +222,7 @@ use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{DiagnosticArgValue, FatalError, IntoDiagnosticArg};\n+use rustc_fs_util::try_canonicalize;\n use rustc_session::config::{self, CrateType};\n use rustc_session::cstore::{CrateSource, MetadataLoader};\n use rustc_session::filesearch::FileSearch;\n@@ -236,7 +237,7 @@ use snap::read::FrameDecoder;\n use std::borrow::Cow;\n use std::io::{Read, Result as IoResult, Write};\n use std::path::{Path, PathBuf};\n-use std::{cmp, fmt, fs};\n+use std::{cmp, fmt};\n \n #[derive(Clone)]\n pub(crate) struct CrateLocator<'a> {\n@@ -441,7 +442,7 @@ impl<'a> CrateLocator<'a> {\n                 info!(\"lib candidate: {}\", spf.path.display());\n \n                 let (rlibs, rmetas, dylibs) = candidates.entry(hash.to_string()).or_default();\n-                let path = fs::canonicalize(&spf.path).unwrap_or_else(|_| spf.path.clone());\n+                let path = try_canonicalize(&spf.path).unwrap_or_else(|_| spf.path.clone());\n                 if seen_paths.contains(&path) {\n                     continue;\n                 };\n@@ -636,7 +637,7 @@ impl<'a> CrateLocator<'a> {\n             // as well.\n             if let Some((prev, _)) = &ret {\n                 let sysroot = self.sysroot;\n-                let sysroot = sysroot.canonicalize().unwrap_or_else(|_| sysroot.to_path_buf());\n+                let sysroot = try_canonicalize(sysroot).unwrap_or_else(|_| sysroot.to_path_buf());\n                 if prev.starts_with(&sysroot) {\n                     continue;\n                 }"}, {"sha": "6ac05c3f122bcda705e2000ffc95c0951f3a4ea9", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -1,5 +1,6 @@\n //! A module for searching for libraries\n \n+use rustc_fs_util::try_canonicalize;\n use smallvec::{smallvec, SmallVec};\n use std::env;\n use std::fs;\n@@ -122,7 +123,7 @@ pub fn sysroot_candidates() -> SmallVec<[PathBuf; 2]> {\n     let target = crate::config::host_triple();\n     let mut sysroot_candidates: SmallVec<[PathBuf; 2]> =\n         smallvec![get_or_default_sysroot().expect(\"Failed finding sysroot\")];\n-    let path = current_dll_path().and_then(|s| s.canonicalize().map_err(|e| e.to_string()));\n+    let path = current_dll_path().and_then(|s| try_canonicalize(s).map_err(|e| e.to_string()));\n     if let Ok(dll) = path {\n         // use `parent` twice to chop off the file name and then also the\n         // directory containing the dll which should be either `lib` or `bin`.\n@@ -157,7 +158,7 @@ pub fn sysroot_candidates() -> SmallVec<[PathBuf; 2]> {\n pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n     // Follow symlinks. If the resolved path is relative, make it absolute.\n     fn canonicalize(path: PathBuf) -> PathBuf {\n-        let path = fs::canonicalize(&path).unwrap_or(path);\n+        let path = try_canonicalize(&path).unwrap_or(path);\n         // See comments on this target function, but the gist is that\n         // gcc chokes on verbatim paths which fs::canonicalize generates\n         // so we try to avoid those kinds of paths."}, {"sha": "47fe9a990d36a0763654b76ae2f55d28690ce198", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -1,5 +1,6 @@\n use crate::session::Session;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n+use rustc_fs_util::try_canonicalize;\n use std::path::{Path, PathBuf};\n \n impl Session {\n@@ -91,7 +92,7 @@ pub struct CanonicalizedPath {\n \n impl CanonicalizedPath {\n     pub fn new(path: &Path) -> Self {\n-        Self { original: path.to_owned(), canonicalized: std::fs::canonicalize(path).ok() }\n+        Self { original: path.to_owned(), canonicalized: try_canonicalize(path).ok() }\n     }\n \n     pub fn canonicalized(&self) -> &PathBuf {"}, {"sha": "4e7a8d166ae69fbbf38b8b40aa6cbed8d3231f77", "filename": "compiler/rustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2FCargo.toml?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -7,6 +7,7 @@ edition = \"2021\"\n bitflags = \"1.2.1\"\n tracing = \"0.1\"\n serde_json = \"1.0.59\"\n+rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_abi = { path = \"../rustc_abi\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_feature = { path = \"../rustc_feature\" }"}, {"sha": "2553b11d8789b95c2cf4534b569be9c883378d03", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7cd3d4591aefc4edec1039ac49bef94d65deb1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=4f7cd3d4591aefc4edec1039ac49bef94d65deb1", "patch": "@@ -40,6 +40,7 @@ use crate::json::{Json, ToJson};\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_fs_util::try_canonicalize;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::symbol::{sym, Symbol};\n use serde_json::Value;\n@@ -2949,7 +2950,7 @@ impl TargetTriple {\n \n     /// Creates a target triple from the passed target path.\n     pub fn from_path(path: &Path) -> Result<Self, io::Error> {\n-        let canonicalized_path = path.canonicalize()?;\n+        let canonicalized_path = try_canonicalize(path)?;\n         let contents = std::fs::read_to_string(&canonicalized_path).map_err(|err| {\n             io::Error::new(\n                 io::ErrorKind::InvalidInput,"}]}