{"sha": "3e265e784225a6f74c21dd3cc8cc0a28947dddba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjY1ZTc4NDIyNWE2Zjc0YzIxZGQzY2M4Y2MwYTI4OTQ3ZGRkYmE=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-07-02T06:37:11Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-07-02T06:37:11Z"}, "message": "Small documentation changes\n\nI'm leaving the Sized kind undocumented since it isn't fully implemented\nyet.", "tree": {"sha": "6e59ca861a108b77ae0bc908d484d328814b1822", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e59ca861a108b77ae0bc908d484d328814b1822"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e265e784225a6f74c21dd3cc8cc0a28947dddba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e265e784225a6f74c21dd3cc8cc0a28947dddba", "html_url": "https://github.com/rust-lang/rust/commit/3e265e784225a6f74c21dd3cc8cc0a28947dddba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e265e784225a6f74c21dd3cc8cc0a28947dddba/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "451c94343f2c49cfcc790816fd8587bfdc7ecfb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/451c94343f2c49cfcc790816fd8587bfdc7ecfb8", "html_url": "https://github.com/rust-lang/rust/commit/451c94343f2c49cfcc790816fd8587bfdc7ecfb8"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "c61cbe6476ce8af468e7a38030111f1b2bd74233", "filename": "doc/rust.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e265e784225a6f74c21dd3cc8cc0a28947dddba/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e265e784225a6f74c21dd3cc8cc0a28947dddba/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3e265e784225a6f74c21dd3cc8cc0a28947dddba", "patch": "@@ -2869,9 +2869,6 @@ The kinds are:\n   : Types of this kind can be safely sent between tasks.\n     This kind includes scalars, owning pointers, owned closures, and\n     structural types containing only other owned types. All `Send` types are `Static`.\n-`Static`\n-  : Types of this kind do not contain any borrowed pointers;\n-    this can be a useful guarantee for code that breaks borrowing assumptions using [`unsafe` operations](#unsafe-functions).\n `Copy`\n   : This kind includes all types that can be copied. All types with\n     sendable kind are copyable, as are managed boxes, managed closures,"}, {"sha": "b0b586df4b58edcd6daa4d40d53301a00ea64b77", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e265e784225a6f74c21dd3cc8cc0a28947dddba/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e265e784225a6f74c21dd3cc8cc0a28947dddba/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=3e265e784225a6f74c21dd3cc8cc0a28947dddba", "patch": "@@ -122,6 +122,7 @@ pub fn xor(a: bool, b: bool) -> bool { (a && !b) || (!a && b) }\n * ~~~ {.rust}\n * rusti> std::bool::implies(true, true)\n * true\n+* ~~~\n *\n * ~~~ {.rust}\n * rusti> std::bool::implies(true, false)"}, {"sha": "6c16ecc0d4ef8bc5ef84b1774d2727e0c560bafd", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e265e784225a6f74c21dd3cc8cc0a28947dddba/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e265e784225a6f74c21dd3cc8cc0a28947dddba/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=3e265e784225a6f74c21dd3cc8cc0a28947dddba", "patch": "@@ -18,7 +18,7 @@ intrinsic properties of the type. These classifications, often called\n They cannot be implemented by user code, but are instead implemented\n by the compiler automatically for the types to which they apply.\n \n-The 4 kinds are\n+The 3 kinds are\n \n * Copy - types that may be copied without allocation. This includes\n   scalar types and managed pointers, and exludes owned pointers. It"}]}