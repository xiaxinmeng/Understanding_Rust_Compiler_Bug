{"sha": "97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YTAzMmViYjRmODdiYjVhMGE3NDc4NTI4ZDRkZmI2ZDJjNjNkZGQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-24T09:48:23Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Simplify bitwise operations", "tree": {"sha": "fbc09a493f52f7f34ad0ed6761e089219e77ab55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbc09a493f52f7f34ad0ed6761e089219e77ab55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd", "html_url": "https://github.com/rust-lang/rust/commit/97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c388c11a60213152229b43b389a81ee828591fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c388c11a60213152229b43b389a81ee828591fc0", "html_url": "https://github.com/rust-lang/rust/commit/c388c11a60213152229b43b389a81ee828591fc0"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "86f0e95a9032a67a2b9901abcdc38e521a2a4b44", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 42, "deletions": 27, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd", "patch": "@@ -483,11 +483,11 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         ty::TyUint(_) if exhaustive_integer_patterns => {\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(pcx.ty))\n-                             .unwrap().size.bits() as u32;\n-            let max = (!0u128).wrapping_shr(128 - bits);\n+                             .unwrap().size.bits() as u128;\n+            let max = !0u128 >> (128 - bits);\n             value_constructors = true;\n-            vec![ConstantRange(ty::Const::from_bits(cx.tcx, 0u128, pcx.ty),\n-                               ty::Const::from_bits(cx.tcx, max as u128, pcx.ty),\n+            vec![ConstantRange(ty::Const::from_bits(cx.tcx, 0, pcx.ty),\n+                               ty::Const::from_bits(cx.tcx, max, pcx.ty),\n                                RangeEnd::Included)]\n         }\n         _ => {\n@@ -604,21 +604,21 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n }\n \n /// An inclusive interval, used for precise integer exhaustiveness checking.\n-/// `Interval`s always store a contiguous range of integers. This means that\n-/// signed values are encoded by offsetting them such that `0` represents the\n-/// minimum value for the integer, regardless of sign.\n-/// For example, the range `-128...127` is encoded as `0...255`.\n+/// `IntRange`s always store a contiguous range. This means that values are\n+/// encoded such that `0` encodes the minimum value for the integer,\n+/// regardless of the signedness.\n+/// For example, the pattern `-128...127i8` is encoded as `0..=255`.\n /// This makes comparisons and arithmetic on interval endpoints much more\n-/// straightforward. See `offset_sign` for the conversion technique.\n-struct Interval<'tcx> {\n+/// straightforward. See `encode` and `decode` for details.\n+struct IntRange<'tcx> {\n     pub range: RangeInclusive<u128>,\n     pub ty: Ty<'tcx>,\n }\n \n-impl<'tcx> Interval<'tcx> {\n+impl<'tcx> IntRange<'tcx> {\n     fn from_ctor(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n                  ctor: &Constructor<'tcx>)\n-                 -> Option<Interval<'tcx>> {\n+                 -> Option<IntRange<'tcx>> {\n         match ctor {\n             ConstantRange(lo, hi, end) => {\n                 assert_eq!(lo.ty, hi.ty);\n@@ -627,13 +627,13 @@ impl<'tcx> Interval<'tcx> {\n                     if let Some(hi) = hi.assert_bits(ty) {\n                         // Perform a shift if the underlying types are signed,\n                         // which makes the interval arithmetic simpler.\n-                        let (lo, hi) = Self::offset_sign(tcx, ty, lo..=hi, true);\n+                        let (lo, hi) = Self::encode(tcx, ty, lo..=hi);\n                         // Make sure the interval is well-formed.\n                         return if lo > hi || lo == hi && *end == RangeEnd::Excluded {\n                             None\n                         } else {\n                             let offset = (*end == RangeEnd::Excluded) as u128;\n-                            Some(Interval { range: lo..=(hi - offset), ty })\n+                            Some(IntRange { range: lo..=(hi - offset), ty })\n                         };\n                     }\n                 }\n@@ -642,8 +642,8 @@ impl<'tcx> Interval<'tcx> {\n             ConstantValue(val) => {\n                 let ty = val.ty;\n                 if let Some(val) = val.assert_bits(ty) {\n-                    let (lo, hi) = Self::offset_sign(tcx, ty, val..=val, true);\n-                    Some(Interval { range: lo..=hi, ty })\n+                    let (lo, hi) = Self::encode(tcx, ty, val..=val);\n+                    Some(IntRange { range: lo..=hi, ty })\n                 } else {\n                     None\n                 }\n@@ -654,11 +654,11 @@ impl<'tcx> Interval<'tcx> {\n         }\n     }\n \n-    fn offset_sign(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-                   ty: Ty<'tcx>,\n-                   range: RangeInclusive<u128>,\n-                   encode: bool)\n-                   -> (u128, u128) {\n+    fn convert(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+               ty: Ty<'tcx>,\n+               range: RangeInclusive<u128>,\n+               encode: bool)\n+               -> (u128, u128) {\n         // We ensure that all integer values are contiguous: that is, that their\n         // minimum value is represented by 0, so that comparisons and increments/\n         // decrements on interval endpoints work consistently whether the endpoints\n@@ -670,13 +670,14 @@ impl<'tcx> Interval<'tcx> {\n                 let bits = tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n                                  .unwrap().size.bits() as u128;\n                 let min = 1u128 << (bits - 1);\n-                let shift = 1u128.overflowing_shl(bits as u32);\n-                let mask = shift.0.wrapping_sub(1 + (shift.1 as u128));\n+                let mask = !0u128 >> (128 - bits);\n                 if encode {\n                     let offset = |x: u128| x.wrapping_sub(min) & mask;\n                     (offset(lo), offset(hi))\n                 } else {\n                     let offset = |x: u128| {\n+                        // FIXME: this shouldn't be necessary once `print_miri_value`\n+                        // sign-extends `TyInt`.\n                         interpret::sign_extend(tcx, x.wrapping_add(min) & mask, ty)\n                                   .expect(\"layout error for TyInt\")\n                     };\n@@ -686,10 +687,24 @@ impl<'tcx> Interval<'tcx> {\n             ty::TyUint(_) | ty::TyChar => {\n                 (lo, hi)\n             }\n-            _ => bug!(\"`Interval` should only contain integer types\")\n+            _ => bug!(\"`IntRange` should only contain integer types\")\n         }\n     }\n \n+    fn encode(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+              ty: Ty<'tcx>,\n+              range: RangeInclusive<u128>)\n+              -> (u128, u128) {\n+        Self::convert(tcx, ty, range, true)\n+    }\n+\n+    fn decode(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+              ty: Ty<'tcx>,\n+              range: RangeInclusive<u128>)\n+              -> (u128, u128) {\n+        Self::convert(tcx, ty, range, false)\n+    }\n+\n     fn into_inner(self) -> (u128, u128) {\n         self.range.into_inner()\n     }\n@@ -702,10 +717,10 @@ fn ranges_subtract_pattern<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                      pat_ctor: &Constructor<'tcx>,\n                                      ranges: Vec<Constructor<'tcx>>)\n                                      -> Vec<Constructor<'tcx>> {\n-    if let Some(pat_interval) = Interval::from_ctor(cx.tcx, pat_ctor) {\n+    if let Some(pat_interval) = IntRange::from_ctor(cx.tcx, pat_ctor) {\n         let mut remaining_ranges = vec![];\n         let mut ranges: Vec<_> = ranges.into_iter().filter_map(|r| {\n-            Interval::from_ctor(cx.tcx, &r).map(|i| i.into_inner())\n+            IntRange::from_ctor(cx.tcx, &r).map(|i| i.into_inner())\n         }).collect();\n         let ty = pat_interval.ty;\n         let (pat_interval_lo, pat_interval_hi) = pat_interval.into_inner();\n@@ -729,7 +744,7 @@ fn ranges_subtract_pattern<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         }\n         // Convert the remaining ranges from pairs to inclusive `ConstantRange`s.\n         remaining_ranges.into_iter().map(|r| {\n-            let (lo, hi) = Interval::offset_sign(cx.tcx, ty, r, false);\n+            let (lo, hi) = IntRange::decode(cx.tcx, ty, r);\n             ConstantRange(ty::Const::from_bits(cx.tcx, lo, ty),\n                           ty::Const::from_bits(cx.tcx, hi, ty),\n                           RangeEnd::Included)"}]}