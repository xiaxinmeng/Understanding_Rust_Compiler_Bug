{"sha": "d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzY1MmUzM2MzN2NmYzk5NmJmZDE0NDI5NjBlZGYxZGYzYTBhOWQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2015-09-04T21:39:33Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2015-09-04T21:39:33Z"}, "message": "code improvements suggested by clippy", "tree": {"sha": "5387b6c13e92d7eb37baddba5603e40b45cd63ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5387b6c13e92d7eb37baddba5603e40b45cd63ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "html_url": "https://github.com/rust-lang/rust/commit/d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17302f8967f22919ff374cb8e57f81e3741a85f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/17302f8967f22919ff374cb8e57f81e3741a85f3", "html_url": "https://github.com/rust-lang/rust/commit/17302f8967f22919ff374cb8e57f81e3741a85f3"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "0db2aefe0131b4257b46e792c8b4ff9a7bb7b1a5", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "patch": "@@ -81,7 +81,7 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n     s\n }\n \n-fn left_trim_comment_line<'a>(line: &'a str) -> &'a str {\n+fn left_trim_comment_line(line: &str) -> &str {\n     if line.starts_with(\"/* \") || line.starts_with(\"// \") {\n         &line[3..]\n     } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\") {\n@@ -289,7 +289,7 @@ impl<T> Iterator for CharClasses<T> where T: Iterator, T::Item: RichChar {\n                 return Some((CodeCharKind::Comment, item));\n             }\n         };\n-        return Some((CodeCharKind::Normal, item));\n+        Some((CodeCharKind::Normal, item))\n     }\n }\n "}, {"sha": "8214012a908d19fbfc9111b995df3ab9754885a1", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "patch": "@@ -198,7 +198,7 @@ struct FormatReport {\n impl fmt::Display for FormatReport {\n     // Prints all the formatting errors.\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        for (file, errors) in self.file_error_map.iter() {\n+        for (file, errors) in &self.file_error_map {\n             for error in errors {\n                 try!(write!(fmt,\n                             \"{} {}:{}: {} {}\\n\",\n@@ -292,7 +292,7 @@ fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n             truncate_todo.push((f.to_owned(), text.len - newline_count + 1))\n         }\n \n-        for &(l, _, _) in trims.iter() {\n+        for &(l, _, _) in &trims {\n             errors.push(FormattingError {\n                 line: l,\n                 kind: ErrorKind::TrailingWhitespace"}, {"sha": "cc51e1286b999175611897e7d200a5d200a46f30", "filename": "src/lists.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "patch": "@@ -414,8 +414,8 @@ fn total_item_width(item: &ListItem) -> usize {\n }\n \n fn comment_len(comment: &Option<String>) -> usize {\n-    match comment {\n-        &Some(ref s) => {\n+    match *comment {\n+        Some(ref s) => {\n             let text_len = s.trim().len();\n             if text_len > 0 {\n                 // We'll put \" /*\" before and \" */\" after inline comments.\n@@ -424,6 +424,6 @@ fn comment_len(comment: &Option<String>) -> usize {\n                 text_len\n             }\n         }\n-        &None => 0,\n+        None => 0,\n     }\n }"}, {"sha": "b50c9e26895938ba981950ef73e4383e6c28728b", "filename": "src/modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "patch": "@@ -36,7 +36,7 @@ fn list_submodules<'a>(module: &'a ast::Mod,\n                        codemap: &codemap::CodeMap,\n                        result: &mut HashMap<PathBuf, &'a ast::Mod>) {\n     debug!(\"list_submodules: search_dir: {:?}\", search_dir);\n-    for item in module.items.iter() {\n+    for item in &module.items {\n         if let ast::ItemMod(ref sub_mod) = item.node {\n             if !utils::contains_skip(&item.attrs) {\n                 let is_internal = codemap.span_to_filename(item.span) =="}, {"sha": "0c0d9e54424ae74596adc5ff05b0578db1f1f6e4", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "patch": "@@ -265,8 +265,8 @@ impl Rewrite for ast::WherePredicate {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n         // TODO dead spans?\n         // TODO assumes we'll always fit on one line...\n-        Some(match self {\n-                &ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ref bound_lifetimes,\n+        Some(match *self {\n+                ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ref bound_lifetimes,\n                                                                           ref bounded_ty,\n                                                                           ref bounds,\n                                                                           ..}) => {\n@@ -299,15 +299,15 @@ impl Rewrite for ast::WherePredicate {\n                         format!(\"{}: {}\", type_str, bounds_str)\n                     }\n                 }\n-                &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n+                ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n                                                                             ref bounds,\n                                                                             ..}) => {\n                     format!(\"{}: {}\",\n                         pprust::lifetime_to_string(lifetime),\n                         bounds.iter().map(pprust::lifetime_to_string)\n                               .collect::<Vec<_>>().join(\" + \"))\n                 }\n-                &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n+                ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n                     let ty_str = pprust::ty_to_string(ty);\n                 // 3 = \" = \".len()\n                     let used_width = 3 + ty_str.len();"}, {"sha": "c2e4013e182de1b40ebcd6498ce062b9d145e27b", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c652e33c37cfc996bfd1442960edf1df3a0a9d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=d6c652e33c37cfc996bfd1442960edf1df3a0a9d", "patch": "@@ -49,10 +49,10 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n     fn visit_stmt(&mut self, stmt: &'v ast::Stmt) {\n         match stmt.node {\n             ast::Stmt_::StmtDecl(ref decl, _) => {\n-                return match decl.node {\n+                match decl.node {\n                     ast::Decl_::DeclLocal(ref local) => self.visit_let(local, stmt.span),\n                     ast::Decl_::DeclItem(..) => visit::walk_stmt(self, stmt),\n-                };\n+                }\n             }\n             ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n                 self.format_missing_with_indent(stmt.span.lo);"}]}