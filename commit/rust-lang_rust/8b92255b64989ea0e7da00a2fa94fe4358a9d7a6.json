{"sha": "8b92255b64989ea0e7da00a2fa94fe4358a9d7a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOTIyNTViNjQ5ODllYTBlN2RhMDBhMmZhOTRmZTQzNThhOWQ3YTY=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2017-03-25T09:03:22Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2017-03-25T09:06:14Z"}, "message": "Don't stutter in operator descriptions #29365", "tree": {"sha": "8164ededa71b35ffc9e13f1adc750ed767c35e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8164ededa71b35ffc9e13f1adc750ed767c35e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b92255b64989ea0e7da00a2fa94fe4358a9d7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b92255b64989ea0e7da00a2fa94fe4358a9d7a6", "html_url": "https://github.com/rust-lang/rust/commit/8b92255b64989ea0e7da00a2fa94fe4358a9d7a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b92255b64989ea0e7da00a2fa94fe4358a9d7a6/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c67bd632e961a57863805e5d0a400f97da9b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c67bd632e961a57863805e5d0a400f97da9b93", "html_url": "https://github.com/rust-lang/rust/commit/49c67bd632e961a57863805e5d0a400f97da9b93"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "d203b68c0dfd57fd1e8461968bf607a9089de01c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8b92255b64989ea0e7da00a2fa94fe4358a9d7a6/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b92255b64989ea0e7da00a2fa94fe4358a9d7a6/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=8b92255b64989ea0e7da00a2fa94fe4358a9d7a6", "patch": "@@ -196,7 +196,7 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n-/// The `Add` trait is used to specify the functionality of `+`.\n+/// The addition operator `+`.\n ///\n /// # Examples\n ///\n@@ -269,7 +269,7 @@ macro_rules! add_impl {\n \n add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `Sub` trait is used to specify the functionality of `-`.\n+/// The subtraction operator `-`.\n ///\n /// # Examples\n ///\n@@ -342,7 +342,7 @@ macro_rules! sub_impl {\n \n sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `Mul` trait is used to specify the functionality of `*`.\n+/// The multiplication operator `*`.\n ///\n /// # Examples\n ///\n@@ -464,7 +464,7 @@ macro_rules! mul_impl {\n \n mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `Div` trait is used to specify the functionality of `/`.\n+/// The division operator `/`.\n ///\n /// # Examples\n ///\n@@ -609,7 +609,7 @@ macro_rules! div_impl_float {\n \n div_impl_float! { f32 f64 }\n \n-/// The `Rem` trait is used to specify the functionality of `%`.\n+/// The remainder operator `%`.\n ///\n /// # Examples\n ///\n@@ -689,7 +689,7 @@ macro_rules! rem_impl_float {\n \n rem_impl_float! { f32 f64 }\n \n-/// The `Neg` trait is used to specify the functionality of unary `-`.\n+/// The unary negation operator `-`.\n ///\n /// # Examples\n ///\n@@ -768,7 +768,7 @@ macro_rules! neg_impl_unsigned {\n // neg_impl_unsigned! { usize u8 u16 u32 u64 }\n neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `Not` trait is used to specify the functionality of unary `!`.\n+/// The unary logical negation operator `!`.\n ///\n /// # Examples\n ///\n@@ -826,7 +826,7 @@ macro_rules! not_impl {\n \n not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitAnd` trait is used to specify the functionality of `&`.\n+/// The bitwise AND operator `&`.\n ///\n /// # Examples\n ///\n@@ -909,7 +909,7 @@ macro_rules! bitand_impl {\n \n bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitOr` trait is used to specify the functionality of `|`.\n+/// The bitwise OR operator `|`.\n ///\n /// # Examples\n ///\n@@ -992,7 +992,7 @@ macro_rules! bitor_impl {\n \n bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitXor` trait is used to specify the functionality of `^`.\n+/// The bitwise XOR operator `^`.\n ///\n /// # Examples\n ///\n@@ -1078,7 +1078,7 @@ macro_rules! bitxor_impl {\n \n bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `Shl` trait is used to specify the functionality of `<<`.\n+/// The left shift operator `<<`.\n ///\n /// # Examples\n ///\n@@ -1181,7 +1181,7 @@ macro_rules! shl_impl_all {\n \n shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n \n-/// The `Shr` trait is used to specify the functionality of `>>`.\n+/// The right shift operator `>>`.\n ///\n /// # Examples\n ///\n@@ -1284,7 +1284,7 @@ macro_rules! shr_impl_all {\n \n shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n-/// The `AddAssign` trait is used to specify the functionality of `+=`.\n+/// The addition assignment operator `+=`.\n ///\n /// # Examples\n ///\n@@ -1340,7 +1340,7 @@ macro_rules! add_assign_impl {\n \n add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `SubAssign` trait is used to specify the functionality of `-=`.\n+/// The subtraction assignment operator `-=`.\n ///\n /// # Examples\n ///\n@@ -1396,7 +1396,7 @@ macro_rules! sub_assign_impl {\n \n sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `MulAssign` trait is used to specify the functionality of `*=`.\n+/// The multiplication assignment operator `*=`.\n ///\n /// # Examples\n ///\n@@ -1441,7 +1441,7 @@ macro_rules! mul_assign_impl {\n \n mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `DivAssign` trait is used to specify the functionality of `/=`.\n+/// The division assignment operator `/=`.\n ///\n /// # Examples\n ///\n@@ -1485,7 +1485,7 @@ macro_rules! div_assign_impl {\n \n div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `RemAssign` trait is used to specify the functionality of `%=`.\n+/// The remainder assignment operator `%=`.\n ///\n /// # Examples\n ///\n@@ -1529,7 +1529,7 @@ macro_rules! rem_assign_impl {\n \n rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n-/// The `BitAndAssign` trait is used to specify the functionality of `&=`.\n+/// The bitwise AND assignment operator `&=`.\n ///\n /// # Examples\n ///\n@@ -1615,7 +1615,7 @@ macro_rules! bitand_assign_impl {\n \n bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitOrAssign` trait is used to specify the functionality of `|=`.\n+/// The bitwise OR assignment operator `|=`.\n ///\n /// # Examples\n ///\n@@ -1659,7 +1659,7 @@ macro_rules! bitor_assign_impl {\n \n bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `BitXorAssign` trait is used to specify the functionality of `^=`.\n+/// The bitwise XOR assignment operator `^=`.\n ///\n /// # Examples\n ///\n@@ -1703,7 +1703,7 @@ macro_rules! bitxor_assign_impl {\n \n bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The `ShlAssign` trait is used to specify the functionality of `<<=`.\n+/// The left shift assignment operator `<<=`.\n ///\n /// # Examples\n ///\n@@ -1768,7 +1768,7 @@ macro_rules! shl_assign_impl_all {\n \n shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n-/// The `ShrAssign` trait is used to specify the functionality of `>>=`.\n+/// The right shift assignment operator `>>=`.\n ///\n /// # Examples\n ///"}]}