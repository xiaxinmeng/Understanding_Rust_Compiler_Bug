{"sha": "5ebd077f54c735aeb634d18080c9f127016f1c87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYmQwNzdmNTRjNzM1YWViNjM0ZDE4MDgwYzlmMTI3MDE2ZjFjODc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T10:14:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T10:14:21Z"}, "message": "make it more obvious that the size is not relevant", "tree": {"sha": "c3989b9efe35caeebb635323ba1116bf4e8ac6a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3989b9efe35caeebb635323ba1116bf4e8ac6a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebd077f54c735aeb634d18080c9f127016f1c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebd077f54c735aeb634d18080c9f127016f1c87", "html_url": "https://github.com/rust-lang/rust/commit/5ebd077f54c735aeb634d18080c9f127016f1c87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebd077f54c735aeb634d18080c9f127016f1c87/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb17f717499132a23e1b54bf3fdd0727c09715ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb17f717499132a23e1b54bf3fdd0727c09715ff", "html_url": "https://github.com/rust-lang/rust/commit/bb17f717499132a23e1b54bf3fdd0727c09715ff"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "3dcd081edf9d9c208ae7748cf88b7d99af96b936", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd077f54c735aeb634d18080c9f127016f1c87/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd077f54c735aeb634d18080c9f127016f1c87/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=5ebd077f54c735aeb634d18080c9f127016f1c87", "patch": "@@ -353,9 +353,10 @@ where\n         // Offset may need adjustment for unsized fields\n         let (meta, offset) = if field_layout.is_unsized() {\n             // re-use parent metadata to determine dynamic field layout\n-            let (_, align) = self.size_and_align_of(base.meta, field_layout)?\n-                // If this is an extern type, we fall back to its static size and alignment.\n-                .unwrap_or_else(|| base.layout.size_and_align());\n+            let align = self.size_and_align_of(base.meta, field_layout)?\n+                .map(|(_, align)| align)\n+                // If this is an extern type, we fall back to its static alignment.\n+                .unwrap_or_else(|| base.layout.align);\n             (base.meta, offset.abi_align(align))\n         } else {\n             // base.meta could be present; we might be accessing a sized field of an unsized"}]}