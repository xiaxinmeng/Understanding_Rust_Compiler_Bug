{"sha": "da4ef044c1d0e8e58f2ab18459208469110c04be", "node_id": "C_kwDOAAsO6NoAKGRhNGVmMDQ0YzFkMGU4ZTU4ZjJhYjE4NDU5MjA4NDY5MTEwYzA0YmU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-21T13:53:00Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-23T13:58:44Z"}, "message": "Spin before blocking in Mutex::lock.", "tree": {"sha": "f2b21ef36e664e7d143d6be79e8c603e9f0d7f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2b21ef36e664e7d143d6be79e8c603e9f0d7f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da4ef044c1d0e8e58f2ab18459208469110c04be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da4ef044c1d0e8e58f2ab18459208469110c04be", "html_url": "https://github.com/rust-lang/rust/commit/da4ef044c1d0e8e58f2ab18459208469110c04be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da4ef044c1d0e8e58f2ab18459208469110c04be/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b6f3350820f05ab7aed5c9e2cf30bc34663668", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b6f3350820f05ab7aed5c9e2cf30bc34663668", "html_url": "https://github.com/rust-lang/rust/commit/10b6f3350820f05ab7aed5c9e2cf30bc34663668"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "ba37d58cc31b71a7e83b34516253e13a443cc548", "filename": "library/std/src/sys/unix/locks/futex.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/da4ef044c1d0e8e58f2ab18459208469110c04be/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4ef044c1d0e8e58f2ab18459208469110c04be/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs?ref=da4ef044c1d0e8e58f2ab18459208469110c04be", "patch": "@@ -39,14 +39,48 @@ impl Mutex {\n     }\n \n     fn lock_contended(&self) {\n+        // Spin first to speed things up if the lock is released quickly.\n+        let mut state = self.spin();\n+\n+        // If it's unlocked now, attempt to take the lock\n+        // without marking it as contended.\n+        if state == 0 {\n+            match self.futex.compare_exchange(0, 1, Acquire, Relaxed) {\n+                Ok(_) => return, // Locked!\n+                Err(s) => state = s,\n+            }\n+        }\n+\n         loop {\n-            // Put the lock in contended state, if it wasn't already.\n-            if self.futex.swap(2, Acquire) == 0 {\n-                // It was unlocked, so we just locked it.\n+            // Put the lock in contended state.\n+            // We avoid an unnecessary write if it as already set to 2,\n+            // to be friendlier for the caches.\n+            if state != 2 && self.futex.swap(2, Acquire) == 0 {\n+                // We changed it from 0 to 2, so we just succesfully locked it.\n                 return;\n             }\n-            // Wait for the futex to change state.\n+\n+            // Wait for the futex to change state, assuming it is still 2.\n             futex_wait(&self.futex, 2, None);\n+\n+            // Spin again after waking up.\n+            state = self.spin();\n+        }\n+    }\n+\n+    fn spin(&self) -> i32 {\n+        let mut spin = 100;\n+        loop {\n+            // We only use `load` (and not `swap` or `compare_exchange`)\n+            // while spinning, to be easier on the caches.\n+            let state = self.futex.load(Relaxed);\n+\n+            if state == 0 || spin == 0 {\n+                return state;\n+            }\n+\n+            crate::hint::spin_loop();\n+            spin -= 1;\n         }\n     }\n "}]}