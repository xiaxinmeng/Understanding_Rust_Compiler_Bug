{"sha": "aee196fb14207584ac384c502309b67d35d0555a", "node_id": "C_kwDOAAsO6NoAKGFlZTE5NmZiMTQyMDc1ODRhYzM4NGM1MDIzMDliNjdkMzVkMDU1NWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T17:10:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-21T17:10:02Z"}, "message": "Auto merge of #2899 - saethlin:measureme-cleanup, r=RalfJung\n\nTry to ensure measureme output is valid when the interpreter is interrupted\n\nDropping our `measureme::Profiler` will have the profiler flush its output buffer and write out its string table. If the profiler's `Drop` impl does not run, the output file is not usable.\n\nThis approach has zero runtime overhead.", "tree": {"sha": "e985c27c0c4f96e45f549ac9757e7e562d9b6baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e985c27c0c4f96e45f549ac9757e7e562d9b6baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee196fb14207584ac384c502309b67d35d0555a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee196fb14207584ac384c502309b67d35d0555a", "html_url": "https://github.com/rust-lang/rust/commit/aee196fb14207584ac384c502309b67d35d0555a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee196fb14207584ac384c502309b67d35d0555a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4fb4147ebd2816d7a756edd13cb4a285c083e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4fb4147ebd2816d7a756edd13cb4a285c083e77", "html_url": "https://github.com/rust-lang/rust/commit/a4fb4147ebd2816d7a756edd13cb4a285c083e77"}, {"sha": "56eb08735be451a3351543bf5c98d0e51c9fa036", "url": "https://api.github.com/repos/rust-lang/rust/commits/56eb08735be451a3351543bf5c98d0e51c9fa036", "html_url": "https://github.com/rust-lang/rust/commit/56eb08735be451a3351543bf5c98d0e51c9fa036"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "7bedb5d48f64ea783de6855b8fa4c56633235951", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aee196fb14207584ac384c502309b67d35d0555a/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aee196fb14207584ac384c502309b67d35d0555a/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=aee196fb14207584ac384c502309b67d35d0555a", "patch": "@@ -183,6 +183,16 @@ dependencies = [\n  \"cfg-if\",\n ]\n \n+[[package]]\n+name = \"ctrlc\"\n+version = \"3.2.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bbcf33c2a618cbe41ee43ae6e9f2e48368cd9f9db2896f10167d8d762679f639\"\n+dependencies = [\n+ \"nix\",\n+ \"windows-sys 0.45.0\",\n+]\n+\n [[package]]\n name = \"diff\"\n version = \"0.1.13\"\n@@ -421,6 +431,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"colored\",\n+ \"ctrlc\",\n  \"env_logger\",\n  \"getrandom\",\n  \"lazy_static\",\n@@ -437,6 +448,18 @@ dependencies = [\n  \"ui_test\",\n ]\n \n+[[package]]\n+name = \"nix\"\n+version = \"0.26.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bfdda3d196821d6af13126e40375cdf7da646a96114af134d5f417a9a1dc8e1a\"\n+dependencies = [\n+ \"bitflags\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"static_assertions\",\n+]\n+\n [[package]]\n name = \"object\"\n version = \"0.30.3\"\n@@ -713,6 +736,12 @@ version = \"1.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"\n \n+[[package]]\n+name = \"static_assertions\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n+\n [[package]]\n name = \"syn\"\n version = \"2.0.15\""}, {"sha": "683f99ca4de445875c20260102017a2f7e275d12", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aee196fb14207584ac384c502309b67d35d0555a/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aee196fb14207584ac384c502309b67d35d0555a/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=aee196fb14207584ac384c502309b67d35d0555a", "patch": "@@ -29,6 +29,7 @@ smallvec = \"1.7\"\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n measureme = \"10.0.0\"\n+ctrlc = \"3.2.5\"\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\""}, {"sha": "d85cac7bcbb58239ceb48b20584a4488cf3674ad", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aee196fb14207584ac384c502309b67d35d0555a/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee196fb14207584ac384c502309b67d35d0555a/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=aee196fb14207584ac384c502309b67d35d0555a", "patch": "@@ -3,6 +3,7 @@\n use std::cell::RefCell;\n use std::collections::hash_map::Entry;\n use std::num::TryFromIntError;\n+use std::sync::atomic::{AtomicBool, Ordering::Relaxed};\n use std::task::Poll;\n use std::time::{Duration, SystemTime};\n \n@@ -1012,8 +1013,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Run the core interpreter loop. Returns only when an interrupt occurs (an error or program\n     /// termination).\n     fn run_threads(&mut self) -> InterpResult<'tcx, !> {\n+        static SIGNALED: AtomicBool = AtomicBool::new(false);\n+        ctrlc::set_handler(move || {\n+            // Indicate that we have ben signaled to stop. If we were already signaled, exit\n+            // immediately. In our interpreter loop we try to consult this value often, but if for\n+            // whatever reason we don't get to that check or the cleanup we do upon finding that\n+            // this bool has become true takes a long time, the exit here will promptly exit the\n+            // process on the second Ctrl-C.\n+            if SIGNALED.swap(true, Relaxed) {\n+                std::process::exit(1);\n+            }\n+        })\n+        .unwrap();\n         let this = self.eval_context_mut();\n         loop {\n+            if SIGNALED.load(Relaxed) {\n+                this.machine.handle_abnormal_termination();\n+                std::process::exit(1);\n+            }\n             match this.machine.threads.schedule(&this.machine.clock)? {\n                 SchedulingAction::ExecuteStep => {\n                     if !this.step()? {"}, {"sha": "29f518fe58b580c55216bd370d7038efef4691e5", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aee196fb14207584ac384c502309b67d35d0555a/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee196fb14207584ac384c502309b67d35d0555a/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=aee196fb14207584ac384c502309b67d35d0555a", "patch": "@@ -713,6 +713,15 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let def_id = frame.instance.def_id();\n         def_id.is_local() || self.local_crates.contains(&def_id.krate)\n     }\n+\n+    /// Called when the interpreter is going to shut down abnormally, such as due to a Ctrl-C.\n+    pub(crate) fn handle_abnormal_termination(&mut self) {\n+        // All strings in the profile data are stored in a single string table which is not\n+        // written to disk until the profiler is dropped. If the interpreter exits without dropping\n+        // the profiler, it is not possible to interpret the profile data and all measureme tools\n+        // will panic when given the file.\n+        drop(self.profiler.take());\n+    }\n }\n \n impl VisitTags for MiriMachine<'_, '_> {"}]}