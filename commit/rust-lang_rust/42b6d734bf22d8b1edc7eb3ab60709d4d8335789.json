{"sha": "42b6d734bf22d8b1edc7eb3ab60709d4d8335789", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjZkNzM0YmYyMmQ4YjFlZGM3ZWIzYWI2MDcwOWQ0ZDgzMzU3ODk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-16T12:16:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-16T12:16:37Z"}, "message": "Rustup to rustc 1.31.0-nightly (46880f41b 2018-10-15)", "tree": {"sha": "2a32f53166593b6b6ba3476ac44e4616d88226c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a32f53166593b6b6ba3476ac44e4616d88226c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b6d734bf22d8b1edc7eb3ab60709d4d8335789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b6d734bf22d8b1edc7eb3ab60709d4d8335789", "html_url": "https://github.com/rust-lang/rust/commit/42b6d734bf22d8b1edc7eb3ab60709d4d8335789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b6d734bf22d8b1edc7eb3ab60709d4d8335789/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "086f3567eac8848f34b33251460826c4c8eff42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/086f3567eac8848f34b33251460826c4c8eff42b", "html_url": "https://github.com/rust-lang/rust/commit/086f3567eac8848f34b33251460826c4c8eff42b"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "5fa18d1b6b44e4997a3202c8b40a6aef619ce2a8", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42b6d734bf22d8b1edc7eb3ab60709d4d8335789/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b6d734bf22d8b1edc7eb3ab60709d4d8335789/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=42b6d734bf22d8b1edc7eb3ab60709d4d8335789", "patch": "@@ -1,11 +1,11 @@\n-use std::borrow::Cow;\n use cranelift_module::*;\n use crate::prelude::*;\n use crate::rustc::mir::interpret::{\n     read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n use crate::rustc::ty::Const;\n use crate::rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, OpTy, PlaceTy};\n+use std::borrow::Cow;\n \n #[derive(Default)]\n pub struct ConstantCx {\n@@ -283,7 +283,10 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<()>, Allocation<()>)>;\n     type PointerTag = ();\n     const STATIC_KIND: Option<()> = None;\n-    const ENFORCE_VALIDITY: bool = true;\n+\n+    fn enforce_validity(_: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n+        false\n+    }\n \n     fn before_terminator(_: &mut EvalContext<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx> {\n         panic!();"}, {"sha": "f0f2438a24182a31100b5271c7f9257c2d466d21", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b6d734bf22d8b1edc7eb3ab60709d4d8335789/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b6d734bf22d8b1edc7eb3ab60709d4d8335789/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=42b6d734bf22d8b1edc7eb3ab60709d4d8335789", "patch": "@@ -105,7 +105,7 @@ use crate::prelude::*;\n \n pub struct Caches<'tcx> {\n     pub context: Context,\n-    pub vtables: HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n+    pub vtables: HashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), DataId>,\n }\n \n impl<'tcx> Caches<'tcx> {"}, {"sha": "5bc92049381dd9c5457c760573bfbb70133f70cf", "filename": "src/vtable.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42b6d734bf22d8b1edc7eb3ab60709d4d8335789/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b6d734bf22d8b1edc7eb3ab60709d4d8335789/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=42b6d734bf22d8b1edc7eb3ab60709d4d8335789", "patch": "@@ -53,7 +53,7 @@ pub fn get_ptr_and_method_ref<'a, 'tcx: 'a>(\n pub fn get_vtable<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n-    trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+    trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n ) -> Value {\n     let data_id = if let Some(data_id) = fx.caches.vtables.get(&(ty, trait_ref)) {\n         *data_id\n@@ -72,7 +72,7 @@ pub fn get_vtable<'a, 'tcx: 'a>(\n fn build_vtable<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n-    trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+    trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n ) -> DataId {\n     let tcx = fx.tcx;\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n@@ -87,18 +87,16 @@ fn build_vtable<'a, 'tcx: 'a>(\n \n     let mut components: Vec<_> = vec![Some(drop_in_place_fn), None, None];\n \n-    if let Some(trait_ref) = trait_ref {\n-        let trait_ref = trait_ref.with_self_ty(tcx, ty);\n-        let methods = tcx.vtable_methods(trait_ref);\n-        let methods = methods.iter().cloned().map(|opt_mth| {\n-            opt_mth.map_or(None, |(def_id, substs)| {\n-                Some(fx.get_function_id(\n-                    Instance::resolve(tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n-                ))\n-            })\n-        });\n-        components.extend(methods);\n-    }\n+    let trait_ref = trait_ref.with_self_ty(tcx, ty);\n+    let methods = tcx.vtable_methods(trait_ref);\n+    let methods = methods.iter().cloned().map(|opt_mth| {\n+        opt_mth.map_or(None, |(def_id, substs)| {\n+            Some(fx.get_function_id(\n+                Instance::resolve(tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n+            ))\n+        })\n+    });\n+    components.extend(methods);\n \n     let mut data_ctx = DataContext::new();\n     let mut data = ::std::iter::repeat(0u8)"}]}