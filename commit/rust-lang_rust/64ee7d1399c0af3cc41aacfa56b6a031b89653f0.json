{"sha": "64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZWU3ZDEzOTljMGFmM2NjNDFhYWNmYTU2YjZhMDMxYjg5NjUzZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-12T23:01:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-12T23:01:34Z"}, "message": "Auto merge of #45233 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\n- Successful merges: #44989, #45005, #45049, #45105, #45121, #45166, #45172, #45190, #45231\n- Failed merges: #45138", "tree": {"sha": "6fcdd2c7abf09e9702b20c778b5c4aad19d4c0f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fcdd2c7abf09e9702b20c778b5c4aad19d4c0f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "html_url": "https://github.com/rust-lang/rust/commit/64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31", "html_url": "https://github.com/rust-lang/rust/commit/dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31"}, {"sha": "45e4c19d1f30054b23fe060c662e5e7e38e1bcf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e4c19d1f30054b23fe060c662e5e7e38e1bcf9", "html_url": "https://github.com/rust-lang/rust/commit/45e4c19d1f30054b23fe060c662e5e7e38e1bcf9"}], "stats": {"total": 313, "additions": 240, "deletions": 73}, "files": [{"sha": "fe67a1655f18de76a045398f12272a71110e2b72", "filename": "src/Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -199,7 +199,7 @@ dependencies = [\n  \"hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.6.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -759,7 +759,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"jobserver\"\n-version = \"0.1.6\"\n+version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1429,7 +1429,7 @@ dependencies = [\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_back 0.0.0\",\n@@ -1757,7 +1757,7 @@ dependencies = [\n  \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2530,7 +2530,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3fcaf2365eb14b28ec7603c98c06cc531f19de9eb283d89a3dff8417c8c99f5\"\n \"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n-\"checksum jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"443ae8bc0af6c106e6e8b77e04684faecc1a5ce94e058f4c2b0a037b0ea1b133\"\n+\"checksum jobserver 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"094f87ed101b6832def8632f43db43dc204d27897eb95aca69b26ce2e4011e84\"\n \"checksum jsonrpc-core 7.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1acd0f9934da94466d2370f36832b9b19271b4abdfdb5e69f0bcd991ebcd515\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum kuchiki 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef2ea4f2f7883cd7c6772b06c14abca01a2cc1f75c426cebffcf6b3b925ef9fc\""}, {"sha": "d18512b257d6aa9fcc08c037520a310dca995f7c", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -48,6 +48,14 @@ fn main() {\n         cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n     }\n \n+    // Bootstrap's Cargo-command builder sets this variable to the current Rust version; let's pick\n+    // it up so we can make rustdoc print this into the docs\n+    if let Some(version) = env::var_os(\"RUSTDOC_CRATE_VERSION\") {\n+        // This \"unstable-options\" can be removed when `--crate-version` is stabilized\n+        cmd.arg(\"-Z\").arg(\"unstable-options\")\n+           .arg(\"--crate-version\").arg(version);\n+    }\n+\n     std::process::exit(match cmd.status() {\n         Ok(s) => s.code().unwrap_or(1),\n         Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),"}, {"sha": "64f76aa2ef43f645b29d7d402fae63fb06b9507e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -302,6 +302,7 @@ def default_build_triple():\n \n     return \"{}-{}\".format(cputype, ostype)\n \n+\n class RustBuild(object):\n     \"\"\"Provide all the methods required to build Rust\"\"\"\n     def __init__(self):"}, {"sha": "1d63e112ca6fb357e9286bcef175cdb065dcbeae", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -418,7 +418,8 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n             .env(\"RUSTC_LIBDIR\", self.sysroot_libdir(compiler, self.build.build))\n             .env(\"CFG_RELEASE_CHANNEL\", &self.build.config.channel)\n-            .env(\"RUSTDOC_REAL\", self.rustdoc(host));\n+            .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n+            .env(\"RUSTDOC_CRATE_VERSION\", self.build.rust_version());\n         cmd\n     }\n \n@@ -574,6 +575,9 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n         }\n \n+        // For `cargo doc` invocations, make rustdoc print the Rust version into the docs\n+        cargo.env(\"RUSTDOC_CRATE_VERSION\", self.build.rust_version());\n+\n         // Environment variables *required* throughout the build\n         //\n         // FIXME: should update code to not require this env var"}, {"sha": "73ce82287e7ab5f4078a4e0124a7a071c8d3bdd9", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -19,21 +19,26 @@\n sys.path.append(os.path.join(rust_dir, \"src\", \"bootstrap\"))\n import bootstrap\n \n+\n class Option:\n     def __init__(self, name, rustbuild, desc, value):\n         self.name = name\n         self.rustbuild = rustbuild\n         self.desc = desc\n         self.value = value\n \n+\n options = []\n \n+\n def o(*args):\n     options.append(Option(*args, value=False))\n \n+\n def v(*args):\n     options.append(Option(*args, value=True))\n \n+\n o(\"debug\", \"rust.debug\", \"debug mode; disables optimization unless `--enable-optimize` given\")\n o(\"docs\", \"build.docs\", \"build standard library documentation\")\n o(\"compiler-docs\", \"build.compiler-docs\", \"build compiler documentation\")\n@@ -136,13 +141,16 @@ def v(*args):\n \n v(\"set\", None, \"set arbitrary key/value pairs in TOML configuration\")\n \n+\n def p(msg):\n     print(\"configure: \" + msg)\n \n+\n def err(msg):\n     print(\"configure: error: \" + msg)\n     sys.exit(1)\n \n+\n if '--help' in sys.argv or '-h' in sys.argv:\n     print('Usage: ./configure [options]')\n     print('')\n@@ -208,7 +216,7 @@ def err(msg):\n                 continue\n \n         found = True\n-        if not option.name in known_args:\n+        if option.name not in known_args:\n             known_args[option.name] = []\n         known_args[option.name].append((option, value))\n         break\n@@ -227,27 +235,30 @@ def err(msg):\n # TOML we're going to write out\n config = {}\n \n+\n def build():\n     if 'build' in known_args:\n         return known_args['build'][0][1]\n     return bootstrap.default_build_triple()\n \n+\n def set(key, value):\n-      s = \"{:20} := {}\".format(key, value)\n-      if len(s) < 70:\n-          p(s)\n-      else:\n-          p(s[:70] + \" ...\")\n-\n-      arr = config\n-      parts = key.split('.')\n-      for i, part in enumerate(parts):\n-          if i == len(parts) - 1:\n-              arr[part] = value\n-          else:\n-              if not part in arr:\n-                  arr[part] = {}\n-              arr = arr[part]\n+    s = \"{:20} := {}\".format(key, value)\n+    if len(s) < 70:\n+        p(s)\n+    else:\n+        p(s[:70] + \" ...\")\n+\n+    arr = config\n+    parts = key.split('.')\n+    for i, part in enumerate(parts):\n+        if i == len(parts) - 1:\n+            arr[part] = value\n+        else:\n+            if part not in arr:\n+                arr[part] = {}\n+            arr = arr[part]\n+\n \n for key in known_args:\n     # The `set` option is special and can be passed a bunch of times\n@@ -345,6 +356,7 @@ def set(key, value):\n     targets[target] = sections['target'][:]\n     targets[target][0] = targets[target][0].replace(\"x86_64-unknown-linux-gnu\", target)\n \n+\n # Here we walk through the constructed configuration we have from the parsed\n # command line arguments. We then apply each piece of configuration by\n # basically just doing a `sed` to change the various configuration line to what\n@@ -362,6 +374,7 @@ def to_toml(value):\n     else:\n         raise RuntimeError('no toml')\n \n+\n def configure_section(lines, config):\n     for key in config:\n         value = config[key]\n@@ -375,9 +388,10 @@ def configure_section(lines, config):\n         if not found:\n             raise RuntimeError(\"failed to find config line for {}\".format(key))\n \n+\n for section_key in config:\n     section_config = config[section_key]\n-    if not section_key in sections:\n+    if section_key not in sections:\n         raise RuntimeError(\"config key {} not in sections\".format(section_key))\n \n     if section_key == 'target':"}, {"sha": "ee24dd87d90c38a5438f1ec96c1027697c16cb06", "filename": "src/doc/unstable-book/src/language-features/optin-builtin-traits.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -0,0 +1,47 @@\n+# `optin_builtin_traits`\n+\n+The tracking issue for this feature is [#13231] \n+\n+[#13231]: https://github.com/rust-lang/rust/issues/13231\n+\n+----\n+\n+The `optin_builtin_traits` feature gate allows you to define auto traits.\n+\n+Auto traits, like [`Send`] or [`Sync`] in the standard library, are marker traits\n+that are automatically implemented for every type, unless the type, or a type it contains, \n+has explictly opted out via a negative impl. \n+\n+[`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n+[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n+\n+```rust,ignore\n+impl !Type for Trait\n+```\n+\n+Example:\n+\n+```rust\n+#![feature(optin_builtin_traits)]\n+\n+trait Valid {}\n+\n+impl Valid for .. {}\n+\n+struct True;\n+struct False;\n+\n+impl !Valid for False {}\n+\n+struct MaybeValid<T>(T);\n+\n+fn must_be_valid<T: Valid>(_t: T) { }\n+\n+fn main() {\n+    // works\n+    must_be_valid( MaybeValid(True) );\n+                \n+    // compiler error - trait bound not satisfied\n+    // must_be_valid( MaybeValid(False) );\n+}\n+```"}, {"sha": "0eaed7a1989c5ba0304b31c56fbfaa0fa4ad1aa3", "filename": "src/doc/unstable-book/src/language-features/unboxed-closures.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -0,0 +1,25 @@\n+# `unboxed_closures`\n+\n+The tracking issue for this feature is [#29625]\n+\n+See Also: [`fn_traits`](library-features/fn-traits.html)\n+\n+[#29625]: https://github.com/rust-lang/rust/issues/29625\n+\n+----\n+\n+The `unboxed_closures` feature allows you to write functions using the `\"rust-call\"` ABI,\n+required for implmenting the [`Fn*`] family of traits. `\"rust-call\"` functions must have \n+exactly one (non self) argument, a tuple representing the argument list.\n+\n+[`Fn*`]: https://doc.rust-lang.org/std/ops/trait.Fn.html\n+\n+```rust\n+#![feature(unboxed_closures)]\n+\n+extern \"rust-call\" fn add_args(args: (u32, u32)) -> u32 {\n+    args.0 + args.1\n+}\n+\n+fn main() {}\n+```"}, {"sha": "72a3f36c10b69ed1d6acc28e9577c085d71e9cd1", "filename": "src/doc/unstable-book/src/library-features/fn-traits.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -0,0 +1,35 @@\n+# `fn_traits`\n+\n+The tracking issue for this feature is [#29625]\n+\n+See Also: [`unboxed_closures`](language-features/unboxed-closures.html)\n+\n+[#29625]: https://github.com/rust-lang/rust/issues/29625\n+\n+----\n+\n+The `fn_traits` feature allows for implementation of the [`Fn*`] traits\n+for creating custom closure-like types.\n+\n+[`Fn*`]: https://doc.rust-lang.org/std/ops/trait.Fn.html\n+\n+```rust\n+#![feature(unboxed_closures)]\n+#![feature(fn_traits)]\n+\n+struct Adder {\n+    a: u32\n+}\n+\n+impl FnOnce<(u32, )> for Adder {\n+    type Output = u32;\n+    extern \"rust-call\" fn call_once(self, b: (u32, )) -> Self::Output {\n+        self.a + b.0\n+    }\n+}\n+\n+fn main() {\n+    let adder = Adder { a: 3 };\n+    assert_eq!(adder(2), 5);\n+}\n+```"}, {"sha": "670c2afa66f8597ae24e597cc6dff2faceefaf6e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -1405,16 +1405,6 @@ impl<'a> DoubleEndedIterator for LinesAny<'a> {\n #[allow(deprecated)]\n impl<'a> FusedIterator for LinesAny<'a> {}\n \n-/*\n-Section: Comparing strings\n-*/\n-\n-/// Bytewise slice equality\n-#[inline]\n-fn eq_slice(a: &str, b: &str) -> bool {\n-    a.as_bytes() == b.as_bytes()\n-}\n-\n /*\n Section: UTF-8 validation\n */\n@@ -1590,7 +1580,6 @@ mod traits {\n     use cmp::Ordering;\n     use ops;\n     use slice::{self, SliceIndex};\n-    use str::eq_slice;\n \n     /// Implements ordering of strings.\n     ///\n@@ -1611,7 +1600,7 @@ mod traits {\n     impl PartialEq for str {\n         #[inline]\n         fn eq(&self, other: &str) -> bool {\n-            eq_slice(self, other)\n+            self.as_bytes() == other.as_bytes()\n         }\n         #[inline]\n         fn ne(&self, other: &str) -> bool { !(*self).eq(other) }"}, {"sha": "2221ecf07b434913b079643d283b48afeeed7d5f", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -41,7 +41,7 @@ use super::intravisit::Visitor;\n ///    - Example: Lifetime resolution, which wants to bring lifetimes declared on the\n ///      impl into scope while visiting the impl-items, and then back out again.\n ///    - How: Implement `intravisit::Visitor` and override the\n-///      `visit_nested_map()` methods to return\n+///      `nested_visit_map()` methods to return\n ///      `NestedVisitorMap::All`. Walk your crate with\n ///      `intravisit::walk_crate()` invoked on `tcx.hir.krate()`.\n ///    - Pro: Visitor methods for any kind of HIR node, not just item-like things."}, {"sha": "89dca3e020d38b988bc80107a7df2f1802efcfbd", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -54,24 +54,24 @@ pub mod config;\n pub mod filesearch;\n pub mod search_paths;\n \n-// Represents the data associated with a compilation\n-// session for a single crate.\n+/// Represents the data associated with a compilation\n+/// session for a single crate.\n pub struct Session {\n     pub target: config::Config,\n     pub host: Target,\n     pub opts: config::Options,\n     pub parse_sess: ParseSess,\n-    // For a library crate, this is always none\n+    /// For a library crate, this is always none\n     pub entry_fn: RefCell<Option<(NodeId, Span)>>,\n     pub entry_type: Cell<Option<config::EntryFnType>>,\n     pub plugin_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub derive_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub default_sysroot: Option<PathBuf>,\n-    // The name of the root source file of the crate, in the local file system.\n-    // `None` means that there is no source file.\n+    /// The name of the root source file of the crate, in the local file system.\n+    /// `None` means that there is no source file.\n     pub local_crate_source_file: Option<String>,\n-    // The directory the compiler has been executed in plus a flag indicating\n-    // if the value stored here has been affected by path remapping.\n+    /// The directory the compiler has been executed in plus a flag indicating\n+    /// if the value stored here has been affected by path remapping.\n     pub working_dir: (String, bool),\n     pub lint_store: RefCell<lint::LintStore>,\n     pub buffered_lints: RefCell<Option<lint::LintBuffer>>,\n@@ -83,11 +83,11 @@ pub struct Session {\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n-    // The crate_disambiguator is constructed out of all the `-C metadata`\n-    // arguments passed to the compiler. Its value together with the crate-name\n-    // forms a unique global identifier for the crate. It is used to allow\n-    // multiple crates with the same name to coexist. See the\n-    // trans::back::symbol_names module for more information.\n+    /// The crate_disambiguator is constructed out of all the `-C metadata`\n+    /// arguments passed to the compiler. Its value together with the crate-name\n+    /// forms a unique global identifier for the crate. It is used to allow\n+    /// multiple crates with the same name to coexist. See the\n+    /// trans::back::symbol_names module for more information.\n     pub crate_disambiguator: RefCell<Option<Symbol>>,\n     pub features: RefCell<feature_gate::Features>,\n \n@@ -143,17 +143,17 @@ pub struct Session {\n }\n \n pub struct PerfStats {\n-    // The accumulated time needed for computing the SVH of the crate\n+    /// The accumulated time needed for computing the SVH of the crate\n     pub svh_time: Cell<Duration>,\n-    // The accumulated time spent on computing incr. comp. hashes\n+    /// The accumulated time spent on computing incr. comp. hashes\n     pub incr_comp_hashes_time: Cell<Duration>,\n-    // The number of incr. comp. hash computations performed\n+    /// The number of incr. comp. hash computations performed\n     pub incr_comp_hashes_count: Cell<u64>,\n-    // The number of bytes hashed when computing ICH values\n+    /// The number of bytes hashed when computing ICH values\n     pub incr_comp_bytes_hashed: Cell<u64>,\n-    // The accumulated time spent on computing symbol hashes\n+    /// The accumulated time spent on computing symbol hashes\n     pub symbol_hash_time: Cell<Duration>,\n-    // The accumulated time spent decoding def path tables from metadata\n+    /// The accumulated time spent decoding def path tables from metadata\n     pub decode_def_path_tables_time: Cell<Duration>,\n }\n \n@@ -804,24 +804,24 @@ pub fn build_session_(sopts: config::Options,\n /// Holds data on the current incremental compilation session, if there is one.\n #[derive(Debug)]\n pub enum IncrCompSession {\n-    // This is the state the session will be in until the incr. comp. dir is\n-    // needed.\n+    /// This is the state the session will be in until the incr. comp. dir is\n+    /// needed.\n     NotInitialized,\n-    // This is the state during which the session directory is private and can\n-    // be modified.\n+    /// This is the state during which the session directory is private and can\n+    /// be modified.\n     Active {\n         session_directory: PathBuf,\n         lock_file: flock::Lock,\n         load_dep_graph: bool,\n     },\n-    // This is the state after the session directory has been finalized. In this\n-    // state, the contents of the directory must not be modified any more.\n+    /// This is the state after the session directory has been finalized. In this\n+    /// state, the contents of the directory must not be modified any more.\n     Finalized {\n         session_directory: PathBuf,\n     },\n-    // This is an error state that is reached when some compilation error has\n-    // occurred. It indicates that the contents of the session directory must\n-    // not be used, since they might be invalid.\n+    /// This is an error state that is reached when some compilation error has\n+    /// occurred. It indicates that the contents of the session directory must\n+    /// not be used, since they might be invalid.\n     InvalidBecauseOfErrors {\n         session_directory: PathBuf,\n     }"}, {"sha": "e217978648efa21bc836f6aeeb8f9c905d67a62d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -112,6 +112,7 @@ impl<T: Clean<U>, U> Clean<Vec<U>> for P<[T]> {\n #[derive(Clone, Debug)]\n pub struct Crate {\n     pub name: String,\n+    pub version: Option<String>,\n     pub src: PathBuf,\n     pub module: Option<Item>,\n     pub externs: Vec<(CrateNum, ExternalCrate)>,\n@@ -183,6 +184,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n \n         Crate {\n             name,\n+            version: None,\n             src,\n             module: Some(module),\n             externs,"}, {"sha": "967a19e0e968fb103a3d4e783b4a025a32d44667", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -256,6 +256,9 @@ pub struct Cache {\n     // the access levels from crateanalysis.\n     pub access_levels: Arc<AccessLevels<DefId>>,\n \n+    /// The version of the crate being documented, if given fron the `--crate-version` flag.\n+    pub crate_version: Option<String>,\n+\n     // Private fields only used when initially crawling a crate to build a cache\n \n     stack: Vec<String>,\n@@ -534,6 +537,7 @@ pub fn run(mut krate: clean::Crate,\n         primitive_locations: FxHashMap(),\n         stripped_mod: false,\n         access_levels: krate.access_levels.clone(),\n+        crate_version: krate.version.take(),\n         orphan_impl_items: Vec::new(),\n         traits: mem::replace(&mut krate.external_traits, FxHashMap()),\n         deref_trait_did,\n@@ -3433,6 +3437,16 @@ impl<'a> fmt::Display for Sidebar<'a> {\n             write!(fmt, \"{}\", it.name.as_ref().unwrap())?;\n             write!(fmt, \"</p>\")?;\n \n+            if it.is_crate() {\n+                if let Some(ref version) = cache().crate_version {\n+                    write!(fmt,\n+                           \"<div class='block version'>\\\n+                            <p>Version {}</p>\\\n+                            </div>\",\n+                           version)?;\n+                }\n+            }\n+\n             match it.inner {\n                 clean::StructItem(ref s) => sidebar_struct(fmt, it, s)?,\n                 clean::TraitItem(ref t) => sidebar_trait(fmt, it, t)?,"}, {"sha": "61a3902098ffa6eab4c6139143f19e747880fbd7", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -203,6 +203,15 @@ nav.sub {\n \tword-wrap: break-word;\n }\n \n+.sidebar .version {\n+\tfont-size: 15px;\n+\ttext-align: center;\n+\tborder-bottom: #DDDDDD 1px solid;\n+\toverflow-wrap: break-word;\n+\tword-wrap: break-word; /* deprecated */\n+\tword-break: break-word; /* Chrome, non-standard */\n+}\n+\n .location:empty {\n \tborder: none;\n }"}, {"sha": "f8bf00ad73fcca1fb9fc417e80978d6a47e1e619", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -243,6 +243,9 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"display-warnings\", |o| {\n             o.optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n         }),\n+        unstable(\"crate-version\", |o| {\n+            o.optopt(\"\", \"crate-version\", \"crate version to print into documentation\", \"VERSION\")\n+        }),\n     ]\n }\n \n@@ -460,6 +463,7 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     let triple = matches.opt_str(\"target\");\n     let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n     let crate_name = matches.opt_str(\"crate-name\");\n+    let crate_version = matches.opt_str(\"crate-version\");\n     let plugin_path = matches.opt_str(\"plugin-path\");\n \n     let cr = PathBuf::from(cratefile);\n@@ -484,6 +488,8 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n             krate.name = name\n         }\n \n+        krate.version = crate_version;\n+\n         // Process all of the crate attributes, extracting plugin metadata along\n         // with the passes which we are supposed to run.\n         for attr in krate.module.as_ref().unwrap().attrs.lists(\"doc\") {"}, {"sha": "35afe8dd56d9335381734972e7b4da8ae417a2f6", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -144,7 +144,7 @@ const UNICODE_ARRAY: &'static [(char, &'static str, char)] = &[\n     ('\u2035', \"Reversed Prime\", '\\''),\n     ('\u055a', \"Armenian Apostrophe\", '\\''),\n     ('\u05f3', \"Hebrew Punctuation Geresh\", '\\''),\n-    ('`', \"Greek Accent\", '\\''),\n+    ('`', \"Grave Accent\", '\\''),\n     ('\u1fef', \"Greek Varia\", '\\''),\n     ('\uff40', \"Fullwidth Grave Accent\", '\\''),\n     ('\u00b4', \"Acute Accent\", '\\''),"}, {"sha": "6b999f3835835af47943f4f065fafc89bca17aed", "filename": "src/test/run-pass/specialization/defaultimpl/allowed-cross-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-allowed-cross-crate.rs"}, {"sha": "b99ba3d0f1c931987f4e5ec228c085eea8481568", "filename": "src/test/run-pass/specialization/defaultimpl/assoc-fns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fassoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fassoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fassoc-fns.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-assoc-fns.rs"}, {"sha": "71dd7c99009ea5a0920c0e35bf943e69c4316b55", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/cross_crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/specialization_cross_crate.rs"}, {"sha": "9d0ea64fed428d6cefe7beb02a8ddd0ee5f1ad4d", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/cross_crate_defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/specialization_cross_crate_defaults.rs"}, {"sha": "7daecc842f3f9fd8a2140a3785db00b2f34cbffc", "filename": "src/test/run-pass/specialization/defaultimpl/basics-unsafe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-basics-unsafe.rs"}, {"sha": "594f1e4fcdfc26b834c9bea5f57cd3482653b6d0", "filename": "src/test/run-pass/specialization/defaultimpl/basics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-basics.rs"}, {"sha": "19e1af15bdd5627ce8bd0f7dc7f5e26e716d21f8", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate-defaults.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:specialization_cross_crate_defaults.rs\n+// aux-build:cross_crate_defaults.rs\n \n #![feature(specialization)]\n \n-extern crate specialization_cross_crate_defaults;\n+extern crate cross_crate_defaults;\n \n-use specialization_cross_crate_defaults::*;\n+use cross_crate_defaults::*;\n \n struct LocalDefault;\n struct LocalOverride;", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-cross-crate-defaults.rs"}, {"sha": "67cc694ae12c7087121c76cacbf2a749273923a5", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate-no-gate.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -10,11 +10,11 @@\n \n // Test that specialization works even if only the upstream crate enables it\n \n-// aux-build:specialization_cross_crate.rs\n+// aux-build:cross_crate.rs\n \n-extern crate specialization_cross_crate;\n+extern crate cross_crate;\n \n-use specialization_cross_crate::*;\n+use cross_crate::*;\n \n fn  main() {\n     assert!(0u8.foo() == \"generic Clone\");", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-cross-crate-no-gate.rs"}, {"sha": "f1ad105db8f7c2bcd49476daca8e1ac14dedfbf0", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:specialization_cross_crate.rs\n+// aux-build:cross_crate.rs\n \n #![feature(specialization)]\n \n-extern crate specialization_cross_crate;\n+extern crate cross_crate;\n \n-use specialization_cross_crate::*;\n+use cross_crate::*;\n \n struct NotClone;\n ", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-cross-crate.rs"}, {"sha": "4ac9afc1c897fa27e4fcfe357475985563a4f588", "filename": "src/test/run-pass/specialization/defaultimpl/default-methods.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-default-methods.rs"}, {"sha": "f77b88e2f850ae622b604f8840e15e4ff0619896", "filename": "src/test/run-pass/specialization/defaultimpl/out-of-order.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-out-of-order.rs"}, {"sha": "500cded38c1adfc154a6dae17960e514c2d2d06c", "filename": "src/test/run-pass/specialization/defaultimpl/overlap-projection.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-overlap-projection.rs"}, {"sha": "2397c3e2bff5dbd5bde7a67a0ad79e168d5ea5cd", "filename": "src/test/run-pass/specialization/defaultimpl/projection-alias.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection-alias.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-projection-alias.rs"}, {"sha": "6a833ba6760f64ab7b6739904e1ee80e876cd9e4", "filename": "src/test/run-pass/specialization/defaultimpl/projection.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-projection.rs"}, {"sha": "07ab5ceedfa028dc068b3d692d76e000fde12e06", "filename": "src/test/rustdoc/crate-version.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frustdoc%2Fcrate-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee7d1399c0af3cc41aacfa56b6a031b89653f0/src%2Ftest%2Frustdoc%2Fcrate-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcrate-version.rs?ref=64ee7d1399c0af3cc41aacfa56b6a031b89653f0", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --crate-version=1.3.37 -Z unstable-options\n+\n+// @has 'crate_version/index.html' '//div[@class=\"block version\"]/p' 'Version 1.3.37'"}]}