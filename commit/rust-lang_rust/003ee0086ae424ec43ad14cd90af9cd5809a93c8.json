{"sha": "003ee0086ae424ec43ad14cd90af9cd5809a93c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwM2VlMDA4NmFlNDI0ZWM0M2FkMTRjZDkwYWY5Y2Q1ODA5YTkzYzg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-04T18:19:51Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-04T18:23:56Z"}, "message": "Intern `TypeRef`s in the containing `ItemTree`", "tree": {"sha": "91431506bde2965c819030eea14433926b82310f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91431506bde2965c819030eea14433926b82310f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003ee0086ae424ec43ad14cd90af9cd5809a93c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003ee0086ae424ec43ad14cd90af9cd5809a93c8", "html_url": "https://github.com/rust-lang/rust/commit/003ee0086ae424ec43ad14cd90af9cd5809a93c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003ee0086ae424ec43ad14cd90af9cd5809a93c8/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "663d404a4ee52cf96e0de793e45290be1a43dcb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/663d404a4ee52cf96e0de793e45290be1a43dcb5", "html_url": "https://github.com/rust-lang/rust/commit/663d404a4ee52cf96e0de793e45290be1a43dcb5"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "ed36c31096ce6b4f84852ad04e2dd8f6e3faf223", "filename": "crates/hir_def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ee0086ae424ec43ad14cd90af9cd5809a93c8/crates%2Fhir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ee0086ae424ec43ad14cd90af9cd5809a93c8/crates%2Fhir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fadt.rs?ref=003ee0086ae424ec43ad14cd90af9cd5809a93c8", "patch": "@@ -351,7 +351,7 @@ fn lower_field(\n ) -> FieldData {\n     FieldData {\n         name: field.name.clone(),\n-        type_ref: field.type_ref.clone(),\n+        type_ref: item_tree[field.type_ref].clone(),\n         visibility: item_tree[override_visibility.unwrap_or(field.visibility)].clone(),\n     }\n }"}, {"sha": "42fcca386aa75f0e0a3bbfac0932db315f383274", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/003ee0086ae424ec43ad14cd90af9cd5809a93c8/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ee0086ae424ec43ad14cd90af9cd5809a93c8/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=003ee0086ae424ec43ad14cd90af9cd5809a93c8", "patch": "@@ -41,8 +41,8 @@ impl FunctionData {\n \n         Arc::new(FunctionData {\n             name: func.name.clone(),\n-            params: func.params.to_vec(),\n-            ret_type: func.ret_type.clone(),\n+            params: func.params.iter().map(|id| item_tree[*id].clone()).collect(),\n+            ret_type: item_tree[func.ret_type].clone(),\n             attrs: item_tree.attrs(db, krate, ModItem::from(loc.id.value).into()).clone(),\n             has_self_param: func.has_self_param,\n             has_body: func.has_body,\n@@ -75,7 +75,7 @@ impl TypeAliasData {\n \n         Arc::new(TypeAliasData {\n             name: typ.name.clone(),\n-            type_ref: typ.type_ref.clone(),\n+            type_ref: typ.type_ref.map(|id| item_tree[id].clone()),\n             visibility: item_tree[typ.visibility].clone(),\n             is_extern: typ.is_extern,\n             bounds: typ.bounds.to_vec(),\n@@ -144,8 +144,8 @@ impl ImplData {\n \n         let item_tree = db.item_tree(impl_loc.id.file_id);\n         let impl_def = &item_tree[impl_loc.id.value];\n-        let target_trait = impl_def.target_trait.clone();\n-        let target_type = impl_def.target_type.clone();\n+        let target_trait = impl_def.target_trait.map(|id| item_tree[id].clone());\n+        let target_type = item_tree[impl_def.target_type].clone();\n         let is_negative = impl_def.is_negative;\n         let module_id = impl_loc.container.module(db);\n         let container = AssocContainerId::ImplId(id);\n@@ -182,7 +182,7 @@ impl ConstData {\n \n         Arc::new(ConstData {\n             name: konst.name.clone(),\n-            type_ref: konst.type_ref.clone(),\n+            type_ref: item_tree[konst.type_ref].clone(),\n             visibility: item_tree[konst.visibility].clone(),\n         })\n     }\n@@ -205,7 +205,7 @@ impl StaticData {\n \n         Arc::new(StaticData {\n             name: Some(statik.name.clone()),\n-            type_ref: statik.type_ref.clone(),\n+            type_ref: item_tree[statik.type_ref].clone(),\n             visibility: item_tree[statik.visibility].clone(),\n             mutable: statik.mutable,\n             is_extern: statik.is_extern,"}, {"sha": "4015569312b6b96064a8f66152af43a0f0e6759e", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/003ee0086ae424ec43ad14cd90af9cd5809a93c8/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ee0086ae424ec43ad14cd90af9cd5809a93c8/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=003ee0086ae424ec43ad14cd90af9cd5809a93c8", "patch": "@@ -146,6 +146,7 @@ impl ItemTree {\n                 macro_defs,\n                 vis,\n                 generics,\n+                type_refs,\n                 inner_items,\n             } = &mut **data;\n \n@@ -169,6 +170,8 @@ impl ItemTree {\n \n             vis.arena.shrink_to_fit();\n             generics.arena.shrink_to_fit();\n+            type_refs.arena.shrink_to_fit();\n+            type_refs.map.shrink_to_fit();\n \n             inner_items.shrink_to_fit();\n         }\n@@ -279,6 +282,32 @@ static EMPTY_GENERICS: GenericParams = GenericParams {\n     where_predicates: Vec::new(),\n };\n \n+/// `TypeRef` interner.\n+#[derive(Default, Debug, Eq, PartialEq)]\n+struct TypeRefStorage {\n+    arena: Arena<Arc<TypeRef>>,\n+    map: FxHashMap<Arc<TypeRef>, Idx<Arc<TypeRef>>>,\n+}\n+\n+impl TypeRefStorage {\n+    // Note: We lie about the `Idx<TypeRef>` to hide the interner details.\n+\n+    fn intern(&mut self, ty: TypeRef) -> Idx<TypeRef> {\n+        if let Some(id) = self.map.get(&ty) {\n+            return Idx::from_raw(id.into_raw());\n+        }\n+\n+        let ty = Arc::new(ty);\n+        let idx = self.arena.alloc(ty.clone());\n+        self.map.insert(ty, idx);\n+        Idx::from_raw(idx.into_raw())\n+    }\n+\n+    fn lookup(&self, id: Idx<TypeRef>) -> &TypeRef {\n+        &self.arena[Idx::from_raw(id.into_raw())]\n+    }\n+}\n+\n #[derive(Default, Debug, Eq, PartialEq)]\n struct ItemTreeData {\n     imports: Arena<Import>,\n@@ -301,6 +330,7 @@ struct ItemTreeData {\n \n     vis: ItemVisibilities,\n     generics: GenericParamsStorage,\n+    type_refs: TypeRefStorage,\n \n     inner_items: FxHashMap<FileAstId<ast::BlockExpr>, SmallVec<[ModItem; 1]>>,\n }\n@@ -489,6 +519,14 @@ impl Index<GenericParamsId> for ItemTree {\n     }\n }\n \n+impl Index<Idx<TypeRef>> for ItemTree {\n+    type Output = TypeRef;\n+\n+    fn index(&self, id: Idx<TypeRef>) -> &Self::Output {\n+        self.data().type_refs.lookup(id)\n+    }\n+}\n+\n impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n     type Output = N;\n     fn index(&self, id: FileItemTreeId<N>) -> &N {\n@@ -532,9 +570,9 @@ pub struct Function {\n     /// Whether the function is located in an `extern` block (*not* whether it is an\n     /// `extern \"abi\" fn`).\n     pub is_extern: bool,\n-    pub params: Box<[TypeRef]>,\n+    pub params: Box<[Idx<TypeRef>]>,\n     pub is_varargs: bool,\n-    pub ret_type: TypeRef,\n+    pub ret_type: Idx<TypeRef>,\n     pub ast_id: FileAstId<ast::Fn>,\n }\n \n@@ -581,7 +619,7 @@ pub struct Const {\n     /// const _: () = ();\n     pub name: Option<Name>,\n     pub visibility: RawVisibilityId,\n-    pub type_ref: TypeRef,\n+    pub type_ref: Idx<TypeRef>,\n     pub ast_id: FileAstId<ast::Const>,\n }\n \n@@ -592,7 +630,7 @@ pub struct Static {\n     pub mutable: bool,\n     /// Whether the static is in an `extern` block.\n     pub is_extern: bool,\n-    pub type_ref: TypeRef,\n+    pub type_ref: Idx<TypeRef>,\n     pub ast_id: FileAstId<ast::Static>,\n }\n \n@@ -609,8 +647,8 @@ pub struct Trait {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Impl {\n     pub generic_params: GenericParamsId,\n-    pub target_trait: Option<TypeRef>,\n-    pub target_type: TypeRef,\n+    pub target_trait: Option<Idx<TypeRef>>,\n+    pub target_type: Idx<TypeRef>,\n     pub is_negative: bool,\n     pub items: Box<[AssocItem]>,\n     pub ast_id: FileAstId<ast::Impl>,\n@@ -623,7 +661,7 @@ pub struct TypeAlias {\n     /// Bounds on the type alias itself. Only valid in trait declarations, eg. `type Assoc: Copy;`.\n     pub bounds: Box<[TypeBound]>,\n     pub generic_params: GenericParamsId,\n-    pub type_ref: Option<TypeRef>,\n+    pub type_ref: Option<Idx<TypeRef>>,\n     pub is_extern: bool,\n     pub ast_id: FileAstId<ast::TypeAlias>,\n }\n@@ -806,6 +844,6 @@ pub enum Fields {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Field {\n     pub name: Name,\n-    pub type_ref: TypeRef,\n+    pub type_ref: Idx<TypeRef>,\n     pub visibility: RawVisibilityId,\n }"}, {"sha": "93cdca55d2e083afc6b7dc50724406a0955e1798", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/003ee0086ae424ec43ad14cd90af9cd5809a93c8/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ee0086ae424ec43ad14cd90af9cd5809a93c8/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=003ee0086ae424ec43ad14cd90af9cd5809a93c8", "patch": "@@ -364,6 +364,7 @@ impl Ctx {\n                 params.push(type_ref);\n             }\n         }\n+        let params = params.into_iter().map(|param| self.data().type_refs.intern(param)).collect();\n \n         let mut is_varargs = false;\n         if let Some(params) = func.param_list() {\n@@ -385,6 +386,8 @@ impl Ctx {\n             ret_type\n         };\n \n+        let ret_type = self.data().type_refs.intern(ret_type);\n+\n         let has_body = func.body().is_some();\n \n         let ast_id = self.source_ast_id_map.ast_id(func);\n@@ -396,7 +399,7 @@ impl Ctx {\n             has_body,\n             is_unsafe: func.unsafe_token().is_some(),\n             is_extern: false,\n-            params: params.into_boxed_slice(),\n+            params,\n             is_varargs,\n             ret_type,\n             ast_id,\n@@ -657,6 +660,7 @@ impl Ctx {\n                 generics.fill(&self.body_ctx, sm, node);\n                 // lower `impl Trait` in arguments\n                 for param in &*func.params {\n+                    let param = self.data().type_refs.lookup(*param);\n                     generics.fill_implicit_impl_trait_args(param);\n                 }\n             }\n@@ -709,11 +713,15 @@ impl Ctx {\n         self.data().vis.alloc(vis)\n     }\n \n-    fn lower_type_ref(&self, type_ref: &ast::Type) -> TypeRef {\n-        TypeRef::from_ast(&self.body_ctx, type_ref.clone())\n+    fn lower_type_ref(&mut self, type_ref: &ast::Type) -> Idx<TypeRef> {\n+        let tyref = TypeRef::from_ast(&self.body_ctx, type_ref.clone());\n+        self.data().type_refs.intern(tyref)\n     }\n-    fn lower_type_ref_opt(&self, type_ref: Option<ast::Type>) -> TypeRef {\n-        type_ref.map(|ty| self.lower_type_ref(&ty)).unwrap_or(TypeRef::Error)\n+    fn lower_type_ref_opt(&mut self, type_ref: Option<ast::Type>) -> Idx<TypeRef> {\n+        match type_ref.map(|ty| self.lower_type_ref(&ty)) {\n+            Some(it) => it,\n+            None => self.data().type_refs.intern(TypeRef::Error),\n+        }\n     }\n \n     /// Forces the visibility `vis` to be used for all items lowered during execution of `f`."}]}