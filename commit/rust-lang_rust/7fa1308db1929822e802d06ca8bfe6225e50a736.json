{"sha": "7fa1308db1929822e802d06ca8bfe6225e50a736", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYTEzMDhkYjE5Mjk4MjJlODAyZDA2Y2E4YmZlNjIyNWU1MGE3MzY=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-13T20:08:03Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-13T20:08:03Z"}, "message": "Stabilize `maybe_uninit_ref`", "tree": {"sha": "f9e979483a815ced7c960811fab72ff650db8862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e979483a815ced7c960811fab72ff650db8862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fa1308db1929822e802d06ca8bfe6225e50a736", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDGZaMACgkQ2rpbBylh\nwYpSFQ/9EQEC3hYfDsW+CIG2nlJN/gM87FlIv/+ZxbETtNYAnGZZEVE6s/pVkj4R\nT4pWZCaojqG6CIG5/nZGvB3owJy0clz13XmcTzQplB4flSgKHceChkkoHbby6r47\nQ3IflfrSpTfzaFoSMQbP3K5AoeEYQ8jgfLmq3k8P5jYVUSLaqs1wqb2j3SWo0SS4\nl0vgq7czvfcYjMYFErdqS40en7mTldcBNVBsyfB3hgmjSlx2XJktEJCiak/F7TQq\n+86b9QblFAGXVQMtUhGXmvg8ychdO5jKkkur4e3l2UfoBzrXEXvzkGrrL5MCW/qM\nG4XANjbj+xtSIUSKrZ/eaawF+4U/TNxOgbFUt1S/MFTArAeoqD0n/H/gjoFQ6DC7\nBEJrHKkUd35c1OkvS5jo/kreIu49egF8J+FxT8AIWDQ9HRZqT15ruKEhDRseWtEx\nh7YzDkXMRZ5t1HPiOGwxcyMxw+hQmEPiqhy44FpQJi+E4BR30hi15DvcgEN1ekNG\nu+UbuIg3OtBNbtF3R55NoldNqtNYAdXsYv1+xgctkHPspyhxoPWrhAk83DK04JTv\nkKoXq4whcWE8ykFbBLxiXPBkhaSaHP+A0mfXhCVnHCzNjbs6ZzdpHFk3aFLKWeMD\nGVLbOXteBnY6hFVvO04mIwGEcSy1Y0/OC1HYAAgkygKtFca10qo=\n=ug6g\n-----END PGP SIGNATURE-----", "payload": "tree f9e979483a815ced7c960811fab72ff650db8862\nparent fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1623614883 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1623614883 +0900\n\nStabilize `maybe_uninit_ref`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa1308db1929822e802d06ca8bfe6225e50a736", "html_url": "https://github.com/rust-lang/rust/commit/7fa1308db1929822e802d06ca8bfe6225e50a736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fa1308db1929822e802d06ca8bfe6225e50a736/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "html_url": "https://github.com/rust-lang/rust/commit/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2"}], "stats": {"total": 16, "additions": 2, "deletions": 14}, "files": [{"sha": "7b0291c5f2efa5d3769e0fd6c2c7f2e4f03bd82e", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fa1308db1929822e802d06ca8bfe6225e50a736/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa1308db1929822e802d06ca8bfe6225e50a736/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=7fa1308db1929822e802d06ca8bfe6225e50a736", "patch": "@@ -109,7 +109,6 @@\n #![feature(iter_zip)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n-#![feature(maybe_uninit_ref)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "623fd745a5ee98a0457955b56c1669c9e493ede3", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fa1308db1929822e802d06ca8bfe6225e50a736/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa1308db1929822e802d06ca8bfe6225e50a736/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=7fa1308db1929822e802d06ca8bfe6225e50a736", "patch": "@@ -665,7 +665,6 @@ impl<T> MaybeUninit<T> {\n     /// ### Correct usage of this method:\n     ///\n     /// ```rust\n-    /// #![feature(maybe_uninit_ref)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n@@ -683,7 +682,6 @@ impl<T> MaybeUninit<T> {\n     /// ### *Incorrect* usages of this method:\n     ///\n     /// ```rust,no_run\n-    /// #![feature(maybe_uninit_ref)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n@@ -692,7 +690,6 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     ///\n     /// ```rust,no_run\n-    /// #![feature(maybe_uninit_ref)]\n     /// use std::{cell::Cell, mem::MaybeUninit};\n     ///\n     /// let b = MaybeUninit::<Cell<bool>>::uninit();\n@@ -703,7 +700,7 @@ impl<T> MaybeUninit<T> {\n     ///    // Reference to an uninitialized `Cell<bool>`: UB!\n     /// }\n     /// ```\n-    #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n+    #[stable(feature = \"maybe_uninit_ref\", since = \"1.55.0\")]\n     #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     pub const unsafe fn assume_init_ref(&self) -> &T {\n@@ -733,7 +730,6 @@ impl<T> MaybeUninit<T> {\n     /// ### Correct usage of this method:\n     ///\n     /// ```rust\n-    /// #![feature(maybe_uninit_ref)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// # unsafe extern \"C\" fn initialize_buffer(buf: *mut [u8; 1024]) { *buf = [0; 1024] }\n@@ -769,7 +765,6 @@ impl<T> MaybeUninit<T> {\n     /// You cannot use `.assume_init_mut()` to initialize a value:\n     ///\n     /// ```rust,no_run\n-    /// #![feature(maybe_uninit_ref)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut b = MaybeUninit::<bool>::uninit();\n@@ -785,7 +780,6 @@ impl<T> MaybeUninit<T> {\n     /// [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n     ///\n     /// ```rust,no_run\n-    /// #![feature(maybe_uninit_ref)]\n     /// use std::{io, mem::MaybeUninit};\n     ///\n     /// fn read_chunk (reader: &'_ mut dyn io::Read) -> io::Result<[u8; 64]>\n@@ -802,7 +796,6 @@ impl<T> MaybeUninit<T> {\n     /// Nor can you use direct field access to do field-by-field gradual initialization:\n     ///\n     /// ```rust,no_run\n-    /// #![feature(maybe_uninit_ref)]\n     /// use std::{mem::MaybeUninit, ptr};\n     ///\n     /// struct Foo {\n@@ -823,10 +816,7 @@ impl<T> MaybeUninit<T> {\n     ///     foo.assume_init()\n     /// };\n     /// ```\n-    // FIXME(#76092): We currently rely on the above being incorrect, i.e., we have references\n-    // to uninitialized data (e.g., in `libcore/fmt/float.rs`).  We should make\n-    // a final decision about the rules before stabilization.\n-    #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n+    #[stable(feature = \"maybe_uninit_ref\", since = \"1.55.0\")]\n     #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     pub const unsafe fn assume_init_mut(&mut self) -> &mut T {"}, {"sha": "6f94a0599ed3117f911d00ecfc7c035532aea7e8", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fa1308db1929822e802d06ca8bfe6225e50a736/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa1308db1929822e802d06ca8bfe6225e50a736/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7fa1308db1929822e802d06ca8bfe6225e50a736", "patch": "@@ -286,7 +286,6 @@\n #![feature(log_syntax)]\n #![feature(map_try_insert)]\n #![feature(maybe_uninit_extra)]\n-#![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]"}]}