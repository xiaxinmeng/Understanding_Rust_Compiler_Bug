{"sha": "0fcc4069c12a4cffa69397388a0be42d45afdd49", "node_id": "C_kwDOAAsO6NoAKDBmY2M0MDY5YzEyYTRjZmZhNjkzOTczODhhMGJlNDJkNDVhZmRkNDk", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-08-05T00:17:16Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-10-29T15:55:01Z"}, "message": "Fix pointer mutability casts and safety lints", "tree": {"sha": "4efa6dc1f44b83f6ac98a9d8cb2686a6af8014e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4efa6dc1f44b83f6ac98a9d8cb2686a6af8014e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fcc4069c12a4cffa69397388a0be42d45afdd49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcc4069c12a4cffa69397388a0be42d45afdd49", "html_url": "https://github.com/rust-lang/rust/commit/0fcc4069c12a4cffa69397388a0be42d45afdd49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fcc4069c12a4cffa69397388a0be42d45afdd49/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5db1ecc8209e90982cc4603514028ef2210e592", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5db1ecc8209e90982cc4603514028ef2210e592", "html_url": "https://github.com/rust-lang/rust/commit/e5db1ecc8209e90982cc4603514028ef2210e592"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "33878581e0b5fa8bd439a54acaea78f82787083a", "filename": "crates/core_simd/src/cast.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0fcc4069c12a4cffa69397388a0be42d45afdd49/crates%2Fcore_simd%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcc4069c12a4cffa69397388a0be42d45afdd49/crates%2Fcore_simd%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcast.rs?ref=0fcc4069c12a4cffa69397388a0be42d45afdd49", "patch": "@@ -1,23 +1,45 @@\n use crate::simd::SimdElement;\n \n /// Supporting trait for `Simd::cast`.  Typically doesn't need to be used directly.\n+///\n+/// # Safety\n+/// Implementing this trait asserts that the type is a valid vector element for the `simd_cast` or\n+/// `simd_as` intrinsics.\n pub unsafe trait SimdCast: SimdElement {}\n \n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for i8 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for i16 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for i32 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for i64 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for isize {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for u8 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for u16 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for u32 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for u64 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for usize {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for f32 {}\n+// Safety: primitive number types can be cast to other primitive number types\n unsafe impl SimdCast for f64 {}\n \n /// Supporting trait for `Simd::cast_ptr`.  Typically doesn't need to be used directly.\n+///\n+/// # Safety\n+/// Implementing this trait asserts that the type is a valid vector element for the `simd_cast_ptr`\n+/// intrinsic.\n pub unsafe trait SimdCastPtr: SimdElement {}\n \n+// Safety: pointers can be cast to other pointer types\n unsafe impl<T> SimdCastPtr for *const T {}\n+// Safety: pointers can be cast to other pointer types\n unsafe impl<T> SimdCastPtr for *mut T {}"}, {"sha": "7c856fd4332b8e60bc29b9fcf00bf8b87463d70f", "filename": "crates/core_simd/src/elements/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fcc4069c12a4cffa69397388a0be42d45afdd49/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcc4069c12a4cffa69397388a0be42d45afdd49/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs?ref=0fcc4069c12a4cffa69397388a0be42d45afdd49", "patch": "@@ -86,7 +86,7 @@ where\n \n     #[inline]\n     fn as_mut(self) -> Self::MutPtr {\n-        unsafe { intrinsics::simd_cast_ptr(self) }\n+        self.cast_ptr()\n     }\n \n     #[inline]\n@@ -111,11 +111,13 @@ where\n \n     #[inline]\n     fn expose_addr(self) -> Self::Usize {\n+        // Safety: `self` is a pointer vector\n         unsafe { intrinsics::simd_expose_addr(self) }\n     }\n \n     #[inline]\n     fn from_exposed_addr(addr: Self::Usize) -> Self {\n+        // Safety: `self` is a pointer vector\n         unsafe { intrinsics::simd_from_exposed_addr(addr) }\n     }\n "}, {"sha": "5e904d24a42e342a991c7ca1c05eacc20135b96d", "filename": "crates/core_simd/src/elements/mut_ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fcc4069c12a4cffa69397388a0be42d45afdd49/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcc4069c12a4cffa69397388a0be42d45afdd49/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs?ref=0fcc4069c12a4cffa69397388a0be42d45afdd49", "patch": "@@ -81,8 +81,7 @@ where\n \n     #[inline]\n     fn as_const(self) -> Self::ConstPtr {\n-        unimplemented!()\n-        //self.cast()\n+        self.cast_ptr()\n     }\n \n     #[inline]\n@@ -107,11 +106,13 @@ where\n \n     #[inline]\n     fn expose_addr(self) -> Self::Usize {\n+        // Safety: `self` is a pointer vector\n         unsafe { intrinsics::simd_expose_addr(self) }\n     }\n \n     #[inline]\n     fn from_exposed_addr(addr: Self::Usize) -> Self {\n+        // Safety: `self` is a pointer vector\n         unsafe { intrinsics::simd_from_exposed_addr(addr) }\n     }\n "}]}