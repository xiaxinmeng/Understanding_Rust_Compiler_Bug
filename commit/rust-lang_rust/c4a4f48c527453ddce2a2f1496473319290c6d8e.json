{"sha": "c4a4f48c527453ddce2a2f1496473319290c6d8e", "node_id": "C_kwDOAAsO6NoAKGM0YTRmNDhjNTI3NDUzZGRjZTJhMmYxNDk2NDczMzE5MjkwYzZkOGU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-11T12:29:32Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-11T12:29:32Z"}, "message": "Use compare_exchange_weak in futex rwlock implementation.", "tree": {"sha": "bbce8deb283a139794166c1af298964cf3f6ea16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbce8deb283a139794166c1af298964cf3f6ea16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a4f48c527453ddce2a2f1496473319290c6d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a4f48c527453ddce2a2f1496473319290c6d8e", "html_url": "https://github.com/rust-lang/rust/commit/c4a4f48c527453ddce2a2f1496473319290c6d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a4f48c527453ddce2a2f1496473319290c6d8e/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2c2bb24f88e9fd008ce130017cc1628626d296", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2c2bb24f88e9fd008ce130017cc1628626d296", "html_url": "https://github.com/rust-lang/rust/commit/1f2c2bb24f88e9fd008ce130017cc1628626d296"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "2862cdea7dad74370d3307cda6e20d0fd1bf09d6", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4a4f48c527453ddce2a2f1496473319290c6d8e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a4f48c527453ddce2a2f1496473319290c6d8e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=c4a4f48c527453ddce2a2f1496473319290c6d8e", "patch": "@@ -75,7 +75,13 @@ impl RwLock {\n \n     #[inline]\n     pub unsafe fn read(&self) {\n-        if !self.try_read() {\n+        let state = self.state.load(Relaxed);\n+        if !read_lockable(state)\n+            || self\n+                .state\n+                .compare_exchange_weak(state, state + READ_LOCKED, Acquire, Relaxed)\n+                .is_err()\n+        {\n             self.read_contended();\n         }\n     }\n@@ -101,7 +107,8 @@ impl RwLock {\n         loop {\n             // If we can lock it, lock it.\n             if read_lockable(state) {\n-                match self.state.compare_exchange(state, state + READ_LOCKED, Acquire, Relaxed) {\n+                match self.state.compare_exchange_weak(state, state + READ_LOCKED, Acquire, Relaxed)\n+                {\n                     Ok(_) => return, // Locked!\n                     Err(s) => {\n                         state = s;\n@@ -140,7 +147,7 @@ impl RwLock {\n \n     #[inline]\n     pub unsafe fn write(&self) {\n-        if !self.try_write() {\n+        if self.state.compare_exchange_weak(0, WRITE_LOCKED, Acquire, Relaxed).is_err() {\n             self.write_contended();\n         }\n     }\n@@ -165,7 +172,7 @@ impl RwLock {\n         loop {\n             // If it's unlocked, we try to lock it.\n             if unlocked(state) {\n-                match self.state.compare_exchange(\n+                match self.state.compare_exchange_weak(\n                     state,\n                     state | WRITE_LOCKED | other_writers_waiting,\n                     Acquire,"}]}