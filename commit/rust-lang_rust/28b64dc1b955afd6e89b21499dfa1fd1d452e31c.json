{"sha": "28b64dc1b955afd6e89b21499dfa1fd1d452e31c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YjY0ZGMxYjk1NWFmZDZlODliMjE0OTlkZmExZmQxZDQ1MmUzMWM=", "commit": {"author": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-11-27T16:59:36Z"}, "committer": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-11-27T16:59:36Z"}, "message": "Use keywords::Invalid", "tree": {"sha": "667475d2770ba45d9fae70c116a8adf0ea693c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/667475d2770ba45d9fae70c116a8adf0ea693c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28b64dc1b955afd6e89b21499dfa1fd1d452e31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28b64dc1b955afd6e89b21499dfa1fd1d452e31c", "html_url": "https://github.com/rust-lang/rust/commit/28b64dc1b955afd6e89b21499dfa1fd1d452e31c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28b64dc1b955afd6e89b21499dfa1fd1d452e31c/comments", "author": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc3fdf2bd6153ad640544776abb62ad17d6b6be", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc3fdf2bd6153ad640544776abb62ad17d6b6be", "html_url": "https://github.com/rust-lang/rust/commit/2dc3fdf2bd6153ad640544776abb62ad17d6b6be"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "919fc98e438c52a0ceb21bf41f38d2fecd48a274", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/28b64dc1b955afd6e89b21499dfa1fd1d452e31c/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b64dc1b955afd6e89b21499dfa1fd1d452e31c/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=28b64dc1b955afd6e89b21499dfa1fd1d452e31c", "patch": "@@ -35,11 +35,11 @@ use syntax::parse::token::{self, BinOpToken, DelimToken, Lit, Token};\n use syntax::parse::lexer::TokenAndSpan;\n use syntax_pos::Pos;\n \n-use syntax::symbol::Symbol;\n+use syntax::symbol::{Symbol, keywords};\n \n fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n     fn id() -> token::Token {\n-        Token::Ident(ast::Ident::with_empty_ctxt(Symbol::invalid()))\n+        Token::Ident(ast::Ident::with_empty_ctxt(keywords::Invalid.name()))\n     }\n \n     let mut res = HashMap::new();\n@@ -65,7 +65,7 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"SHL\"               => Token::BinOp(BinOpToken::Shl),\n             \"LBRACE\"            => Token::OpenDelim(DelimToken::Brace),\n             \"RARROW\"            => Token::RArrow,\n-            \"LIT_STR\"           => Token::Literal(Lit::Str_(Symbol::invalid()), None),\n+            \"LIT_STR\"           => Token::Literal(Lit::Str_(keywords::Invalid.name()), None),\n             \"DOTDOT\"            => Token::DotDot,\n             \"MOD_SEP\"           => Token::ModSep,\n             \"DOTDOTDOT\"         => Token::DotDotDot,\n@@ -75,21 +75,22 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"ANDAND\"            => Token::AndAnd,\n             \"AT\"                => Token::At,\n             \"LBRACKET\"          => Token::OpenDelim(DelimToken::Bracket),\n-            \"LIT_STR_RAW\"       => Token::Literal(Lit::StrRaw(Symbol::invalid(), 0), None),\n+            \"LIT_STR_RAW\"       => Token::Literal(Lit::StrRaw(keywords::Invalid.name(), 0), None),\n             \"RPAREN\"            => Token::CloseDelim(DelimToken::Paren),\n             \"SLASH\"             => Token::BinOp(BinOpToken::Slash),\n             \"COMMA\"             => Token::Comma,\n-            \"LIFETIME\"          => Token::Lifetime(ast::Ident::with_empty_ctxt(Symbol::invalid())),\n+            \"LIFETIME\"          => Token::Lifetime(\n+                                            ast::Ident::with_empty_ctxt(keywords::Invalid.name())),\n             \"CARET\"             => Token::BinOp(BinOpToken::Caret),\n             \"TILDE\"             => Token::Tilde,\n             \"IDENT\"             => id(),\n             \"PLUS\"              => Token::BinOp(BinOpToken::Plus),\n-            \"LIT_CHAR\"          => Token::Literal(Lit::Char(Symbol::invalid()), None),\n-            \"LIT_BYTE\"          => Token::Literal(Lit::Byte(Symbol::invalid()), None),\n+            \"LIT_CHAR\"          => Token::Literal(Lit::Char(keywords::Invalid.name()), None),\n+            \"LIT_BYTE\"          => Token::Literal(Lit::Byte(keywords::Invalid.name()), None),\n             \"EQ\"                => Token::Eq,\n             \"RBRACKET\"          => Token::CloseDelim(DelimToken::Bracket),\n             \"COMMENT\"           => Token::Comment,\n-            \"DOC_COMMENT\"       => Token::DocComment(Symbol::invalid()),\n+            \"DOC_COMMENT\"       => Token::DocComment(keywords::Invalid.name()),\n             \"DOT\"               => Token::Dot,\n             \"EQEQ\"              => Token::EqEq,\n             \"NE\"                => Token::Ne,\n@@ -99,9 +100,9 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"BINOP\"             => Token::BinOp(BinOpToken::Plus),\n             \"POUND\"             => Token::Pound,\n             \"OROR\"              => Token::OrOr,\n-            \"LIT_INTEGER\"       => Token::Literal(Lit::Integer(Symbol::invalid()), None),\n+            \"LIT_INTEGER\"       => Token::Literal(Lit::Integer(keywords::Invalid.name()), None),\n             \"BINOPEQ\"           => Token::BinOpEq(BinOpToken::Plus),\n-            \"LIT_FLOAT\"         => Token::Literal(Lit::Float(Symbol::invalid()), None),\n+            \"LIT_FLOAT\"         => Token::Literal(Lit::Float(keywords::Invalid.name()), None),\n             \"WHITESPACE\"        => Token::Whitespace,\n             \"UNDERSCORE\"        => Token::Underscore,\n             \"MINUS\"             => Token::BinOp(BinOpToken::Minus),\n@@ -111,10 +112,11 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"OR\"                => Token::BinOp(BinOpToken::Or),\n             \"GT\"                => Token::Gt,\n             \"LE\"                => Token::Le,\n-            \"LIT_BINARY\"        => Token::Literal(Lit::ByteStr(Symbol::invalid()), None),\n-            \"LIT_BINARY_RAW\"    => Token::Literal(Lit::ByteStrRaw(Symbol::invalid(), 0), None),\n+            \"LIT_BINARY\"        => Token::Literal(Lit::ByteStr(keywords::Invalid.name()), None),\n+            \"LIT_BINARY_RAW\"    => Token::Literal(\n+                                            Lit::ByteStrRaw(keywords::Invalid.name(), 0), None),\n             \"QUESTION\"          => Token::Question,\n-            \"SHEBANG\"           => Token::Shebang(Symbol::invalid()),\n+            \"SHEBANG\"           => Token::Shebang(keywords::Invalid.name()),\n             _                   => continue,\n         };\n "}, {"sha": "fe9a176179ce67aebc42f13398c418b104c7f4cd", "filename": "src/libsyntax/symbol.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28b64dc1b955afd6e89b21499dfa1fd1d452e31c/src%2Flibsyntax%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b64dc1b955afd6e89b21499dfa1fd1d452e31c/src%2Flibsyntax%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsymbol.rs?ref=28b64dc1b955afd6e89b21499dfa1fd1d452e31c", "patch": "@@ -35,10 +35,6 @@ impl Symbol {\n         with_interner(|interner| interner.gensym(string))\n     }\n \n-    pub fn invalid() -> Self {\n-        Symbol(0u32)\n-    }\n-\n     pub fn as_str(self) -> InternedString {\n         with_interner(|interner| unsafe {\n             InternedString {"}]}