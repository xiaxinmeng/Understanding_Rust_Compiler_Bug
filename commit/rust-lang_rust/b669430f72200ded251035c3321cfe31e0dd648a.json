{"sha": "b669430f72200ded251035c3321cfe31e0dd648a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Njk0MzBmNzIyMDBkZWQyNTEwMzVjMzMyMWNmZTMxZTBkZDY0OGE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-04T17:22:23Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-04T17:22:23Z"}, "message": "Use metadata to avoid always passing -Lrustllvm to the linker.", "tree": {"sha": "829cd2be3b2a7011b4cd319b317b8712322f8866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829cd2be3b2a7011b4cd319b317b8712322f8866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b669430f72200ded251035c3321cfe31e0dd648a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b669430f72200ded251035c3321cfe31e0dd648a", "html_url": "https://github.com/rust-lang/rust/commit/b669430f72200ded251035c3321cfe31e0dd648a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b669430f72200ded251035c3321cfe31e0dd648a/comments", "author": null, "committer": null, "parents": [{"sha": "6b1da80eb445fb4067938e411aa10cfa6d07abf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1da80eb445fb4067938e411aa10cfa6d07abf0", "html_url": "https://github.com/rust-lang/rust/commit/6b1da80eb445fb4067938e411aa10cfa6d07abf0"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "fc3cb7ce542c241c2c0466683df31d8466769d91", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b669430f72200ded251035c3321cfe31e0dd648a/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b669430f72200ded251035c3321cfe31e0dd648a/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b669430f72200ded251035c3321cfe31e0dd648a", "patch": "@@ -299,7 +299,7 @@ fn build_session(@session::options sopts) -> session::session {\n     auto target_crate_num = 0;\n     auto sess =\n         session::session(target_crate_num, target_cfg, sopts, crate_cache, [],\n-                         [], front::codemap::new_codemap(), 0u);\n+                         [], [], front::codemap::new_codemap(), 0u);\n     ret sess;\n }\n \n@@ -460,7 +460,7 @@ fn main(vec[str] args) {\n                 case (_) { rmext(filename) }\n             };\n         }\n-        \n+\n         for (str cratepath in sess.get_used_crate_files()) {\n             auto dir = fs::dirname(cratepath);\n             if (dir != \"\") {\n@@ -470,6 +470,7 @@ fn main(vec[str] args) {\n             gcc_args += [\"-l\" + libarg];\n         }\n \n+        gcc_args += sess.get_used_link_args();\n         auto used_libs = sess.get_used_libraries();\n         for (str l in used_libs) {\n             gcc_args += [\"-l\" + l];\n@@ -478,9 +479,8 @@ fn main(vec[str] args) {\n         if (sopts.shared) {\n             gcc_args += [shared_cmd];\n         } else {\n-            // FIXME: having -Lrustllvm hardcoded in here is hack\n-            // FIXME: same for -lm\n-            gcc_args += [\"-Lrustllvm\", \"-lm\", main];\n+            // FIXME: why do we hardcode -lm?\n+            gcc_args += [\"-lm\", main];\n         }\n         // We run 'gcc' here\n "}, {"sha": "8d296f355ae57b3e40e31d0515375ae9c2dba86e", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b669430f72200ded251035c3321cfe31e0dd648a/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b669430f72200ded251035c3321cfe31e0dd648a/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=b669430f72200ded251035c3321cfe31e0dd648a", "patch": "@@ -10,6 +10,7 @@ import std::map;\n import std::option;\n import std::option::some;\n import std::option::none;\n+import std::str;\n \n tag os { os_win32; os_macos; os_linux; }\n \n@@ -71,6 +72,7 @@ obj session(ast::crate_num cnum,\n             map::hashmap[int, crate_metadata] crates,\n             mutable vec[str] used_crate_files,\n             mutable vec[str] used_libraries,\n+            mutable vec[str] used_link_args,\n             codemap::codemap cm,\n             mutable uint err_count) {\n     fn get_targ_cfg() -> @config { ret targ_cfg; }\n@@ -130,18 +132,25 @@ obj session(ast::crate_num cnum,\n         crates.insert(num, metadata);\n     }\n     fn has_external_crate(int num) -> bool { ret crates.contains_key(num); }\n-    fn add_used_library(&str lib) {\n+    fn add_used_link_args(&str args) {\n+        used_link_args += str::split(args, ' ' as u8);\n+    }\n+    fn get_used_link_args() -> vec[str] {\n+        ret used_link_args;\n+    }\n+    fn add_used_library(&str lib) -> bool {\n         if (lib == \"\") {\n-            ret;\n+            ret false;\n         }\n         // A program has a small number of libraries, so a vector is probably\n         // a good data structure in here.\n         for (str l in used_libraries) {\n             if (l == lib) {\n-                ret;\n+                ret false;\n             }\n         }\n         used_libraries += [lib];\n+        ret true;\n     }\n     fn get_used_libraries() -> vec[str] {\n        ret used_libraries;"}, {"sha": "1cbd4c0a98cefa988866836807a6abf0d07ea441", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b669430f72200ded251035c3321cfe31e0dd648a/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b669430f72200ded251035c3321cfe31e0dd648a/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=b669430f72200ded251035c3321cfe31e0dd648a", "patch": "@@ -125,6 +125,7 @@ const uint LLVMRealULT = 12u;\n const uint LLVMRealULE = 13u;\n const uint LLVMRealUNE = 14u;\n \n+#[link_args = \"-Lrustllvm\"]\n native mod llvm = \"rustllvm\" {\n \n     type ModuleRef;"}, {"sha": "5e9cf52a282909cbaaa30b1478171850cfc9d174", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b669430f72200ded251035c3321cfe31e0dd648a/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b669430f72200ded251035c3321cfe31e0dd648a/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=b669430f72200ded251035c3321cfe31e0dd648a", "patch": "@@ -170,9 +170,25 @@ fn visit_view_item(env e, &@ast::view_item i) {\n fn visit_item(env e, &@ast::item i) {\n     alt (i.node) {\n         case (ast::item_native_mod(?m)) {\n-            if (m.abi == ast::native_abi_rust ||\n-                m.abi == ast::native_abi_cdecl) {\n-                e.sess.add_used_library(m.native_name);\n+            if (m.abi != ast::native_abi_rust &&\n+                m.abi != ast::native_abi_cdecl) {\n+                ret;\n+            }\n+            if (!e.sess.add_used_library(m.native_name)) {\n+                ret;\n+            }\n+            for (ast::attribute a in i.attrs) {\n+                auto v = a.node.value.node;\n+                alt (v) {\n+                    case (ast::meta_name_value(?i, ?s)) {\n+                        if (i != \"link_args\") {\n+                            cont;\n+                        }\n+                        e.sess.add_used_link_args(s);\n+                    }\n+                    case (_) {\n+                    }\n+                }\n             }\n         }\n         case (_) {"}]}