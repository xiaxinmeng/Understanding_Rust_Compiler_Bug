{"sha": "ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNzY5YTNiYzRiMzllYmNhNWU0ZjViOWQ4NDQ5YzFjYjhhYTBjZmY=", "commit": {"author": {"name": "Hidehito Yabuuchi", "email": "hdht.ybuc@gmail.com", "date": "2018-03-11T04:57:28Z"}, "committer": {"name": "Hidehito Yabuuchi", "email": "hdht.ybuc@gmail.com", "date": "2018-03-11T04:57:28Z"}, "message": "Ignore all macros in redundant_field_names", "tree": {"sha": "2cb4e03ef0ceb82126436084bf130df1dd31c09e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb4e03ef0ceb82126436084bf130df1dd31c09e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff", "html_url": "https://github.com/rust-lang/rust/commit/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/comments", "author": {"login": "ordovicia", "id": 8240952, "node_id": "MDQ6VXNlcjgyNDA5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8240952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ordovicia", "html_url": "https://github.com/ordovicia", "followers_url": "https://api.github.com/users/ordovicia/followers", "following_url": "https://api.github.com/users/ordovicia/following{/other_user}", "gists_url": "https://api.github.com/users/ordovicia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ordovicia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ordovicia/subscriptions", "organizations_url": "https://api.github.com/users/ordovicia/orgs", "repos_url": "https://api.github.com/users/ordovicia/repos", "events_url": "https://api.github.com/users/ordovicia/events{/privacy}", "received_events_url": "https://api.github.com/users/ordovicia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ordovicia", "id": 8240952, "node_id": "MDQ6VXNlcjgyNDA5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8240952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ordovicia", "html_url": "https://github.com/ordovicia", "followers_url": "https://api.github.com/users/ordovicia/followers", "following_url": "https://api.github.com/users/ordovicia/following{/other_user}", "gists_url": "https://api.github.com/users/ordovicia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ordovicia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ordovicia/subscriptions", "organizations_url": "https://api.github.com/users/ordovicia/orgs", "repos_url": "https://api.github.com/users/ordovicia/repos", "events_url": "https://api.github.com/users/ordovicia/events{/privacy}", "received_events_url": "https://api.github.com/users/ordovicia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6776e5123a4f471979aa64cf01f84085a4824b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/6776e5123a4f471979aa64cf01f84085a4824b72", "html_url": "https://github.com/rust-lang/rust/commit/6776e5123a4f471979aa64cf01f84085a4824b72"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "36457023d9280a0664c7912dc2401cca418cb9ac", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff", "patch": "@@ -49,6 +49,7 @@ lazy_static = \"1.0\"\n serde_derive = \"1.0\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }\n serde = \"1.0\"\n+derive-new = \"0.5\"\n \n [features]\n debugging = []"}, {"sha": "75dedc6b801d0a7031a88930104cd02a524a9766", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{is_range_expression, match_var, span_lint_and_sugg};\n+use utils::{in_macro, is_range_expression, match_var, span_lint_and_sugg};\n \n /// **What it does:** Checks for fields in struct literals where shorthands\n /// could be used.\n@@ -39,7 +39,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n         // Do not care about range expressions.\n         // They could have redundant field name when desugared to structs.\n         // e.g. `start..end` is desugared to `Range { start: start, end: end }`\n-        if is_range_expression(expr.span) {\n+        if in_macro(expr.span) || is_range_expression(expr.span) {\n             return;\n         }\n "}, {"sha": "98b6e16c450c4d28cf6b060982045a107c5b68ed", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff", "patch": "@@ -2,6 +2,9 @@\n #![allow(unused_variables)]\n #![feature(inclusive_range, inclusive_range_syntax)]\n \n+#[macro_use]\n+extern crate derive_new;\n+\n use std::ops::{Range, RangeFrom, RangeTo, RangeInclusive, RangeToInclusive};\n \n mod foo {\n@@ -16,6 +19,11 @@ struct Person {\n     foo: u8,\n }\n \n+#[derive(new)]\n+pub struct S {\n+    v: String,\n+}\n+\n fn main() {\n     let gender: u8 = 42;\n     let age = 0;"}, {"sha": "91db8a5f0d16c628d125d1125753b3d2716606eb", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=ed769a3bc4b39ebca5e4f5b9d8449c1cb8aa0cff", "patch": "@@ -1,57 +1,57 @@\n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:26:9\n+  --> $DIR/redundant_field_names.rs:34:9\n    |\n-26 |         gender: gender,\n+34 |         gender: gender,\n    |         ^^^^^^^^^^^^^^ help: replace it with: `gender`\n    |\n    = note: `-D redundant-field-names` implied by `-D warnings`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:27:9\n+  --> $DIR/redundant_field_names.rs:35:9\n    |\n-27 |         age: age,\n+35 |         age: age,\n    |         ^^^^^^^^ help: replace it with: `age`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:45:25\n+  --> $DIR/redundant_field_names.rs:53:25\n    |\n-45 |     let _ = RangeFrom { start: start };\n+53 |     let _ = RangeFrom { start: start };\n    |                         ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:46:23\n+  --> $DIR/redundant_field_names.rs:54:23\n    |\n-46 |     let _ = RangeTo { end: end };\n+54 |     let _ = RangeTo { end: end };\n    |                       ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:47:21\n+  --> $DIR/redundant_field_names.rs:55:21\n    |\n-47 |     let _ = Range { start: start, end: end };\n+55 |     let _ = Range { start: start, end: end };\n    |                     ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:47:35\n+  --> $DIR/redundant_field_names.rs:55:35\n    |\n-47 |     let _ = Range { start: start, end: end };\n+55 |     let _ = Range { start: start, end: end };\n    |                                   ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:48:30\n+  --> $DIR/redundant_field_names.rs:56:30\n    |\n-48 |     let _ = RangeInclusive { start: start, end: end };\n+56 |     let _ = RangeInclusive { start: start, end: end };\n    |                              ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:48:44\n+  --> $DIR/redundant_field_names.rs:56:44\n    |\n-48 |     let _ = RangeInclusive { start: start, end: end };\n+56 |     let _ = RangeInclusive { start: start, end: end };\n    |                                            ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:49:32\n+  --> $DIR/redundant_field_names.rs:57:32\n    |\n-49 |     let _ = RangeToInclusive { end: end };\n+57 |     let _ = RangeToInclusive { end: end };\n    |                                ^^^^^^^^ help: replace it with: `end`\n \n error: aborting due to 9 previous errors"}]}