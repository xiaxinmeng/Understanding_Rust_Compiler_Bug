{"sha": "23c4ef5aef025173f8eedf321f0faf1acb62bbef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYzRlZjVhZWYwMjUxNzNmOGVlZGYzMjFmMGZhZjFhY2I2MmJiZWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-02T15:14:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-02T15:14:44Z"}, "message": "Merge #3811\n\n3811: Add inference for literal and range patterns r=kjeremy a=flodiebold\n\n(cc @JoshMcguigan )\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "6852163b6354fb1154f65c110471abefea6b1e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6852163b6354fb1154f65c110471abefea6b1e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c4ef5aef025173f8eedf321f0faf1acb62bbef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehgFkCRBK7hj4Ov3rIwAAdHIIAEh9q+klc+BeCTJfR4NGhKsW\n4ZNII1zYJe79VCtSSRCjRQZaZXPtd6Nu/fVrKVdXov7HrzN1afAt5IljWfcO2G39\npUGOf0wUr+fqnC30IAoMhy+qG7eSKVKtYn+Er8Yr/QMNeq5ND2DrFvRPCGv1Iqj+\nrxJwz8SPCtSt+1tnKgsNnFWRshwc/kgMu/5e6DJPLfp9XW3JOsmwg7Ii8dlfRvJn\nP9ud8O5GFhlz6hdCMCq8DDz/xe9zSOjVHw51xpgBFacDry15uaRNavd/zX1WcMnR\nRxB1icivpN8Z8mUeVro3NG0hHVboBIraI6WcnKbn1dbfVbSGywM42Ycy1NmpLJ8=\n=8KxW\n-----END PGP SIGNATURE-----\n", "payload": "tree 6852163b6354fb1154f65c110471abefea6b1e60\nparent bda471a636302cdf2b7d96cb498bb34e50723e14\nparent b392a732d31f9be028e4b2dcf4752c5e4c7a9880\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585840484 +0000\ncommitter GitHub <noreply@github.com> 1585840484 +0000\n\nMerge #3811\n\n3811: Add inference for literal and range patterns r=kjeremy a=flodiebold\n\n(cc @JoshMcguigan )\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c4ef5aef025173f8eedf321f0faf1acb62bbef", "html_url": "https://github.com/rust-lang/rust/commit/23c4ef5aef025173f8eedf321f0faf1acb62bbef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c4ef5aef025173f8eedf321f0faf1acb62bbef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bda471a636302cdf2b7d96cb498bb34e50723e14", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda471a636302cdf2b7d96cb498bb34e50723e14", "html_url": "https://github.com/rust-lang/rust/commit/bda471a636302cdf2b7d96cb498bb34e50723e14"}, {"sha": "b392a732d31f9be028e4b2dcf4752c5e4c7a9880", "url": "https://api.github.com/repos/rust-lang/rust/commits/b392a732d31f9be028e4b2dcf4752c5e4c7a9880", "html_url": "https://github.com/rust-lang/rust/commit/b392a732d31f9be028e4b2dcf4752c5e4c7a9880"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "86acd27f8dfcf78a9cad28685a7e45b082d72b5f", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=23c4ef5aef025173f8eedf321f0faf1acb62bbef", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n use hir_expand::name::Name;\n use test_utils::tested_by;\n \n-use super::{BindingMode, InferenceContext};\n+use super::{BindingMode, Expectation, InferenceContext};\n use crate::{utils::variant_data, Substs, Ty, TypeCtor};\n \n impl<'a> InferenceContext<'a> {\n@@ -198,7 +198,14 @@ impl<'a> InferenceContext<'a> {\n \n                 Ty::apply_one(container_ty, elem_ty)\n             }\n-            _ => Ty::Unknown,\n+            Pat::Wild => expected.clone(),\n+            Pat::Range { start, end } => {\n+                let start_ty = self.infer_expr(*start, &Expectation::has_type(expected.clone()));\n+                let end_ty = self.infer_expr(*end, &Expectation::has_type(start_ty));\n+                end_ty\n+            }\n+            Pat::Lit(expr) => self.infer_expr(*expr, &Expectation::has_type(expected.clone())),\n+            Pat::Missing => Ty::Unknown,\n         };\n         // use a new type variable if we got Ty::Unknown here\n         let ty = self.insert_type_vars_shallow(ty);"}, {"sha": "3e3d55c041892185c4790d111ca22b830506602b", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=23c4ef5aef025173f8eedf321f0faf1acb62bbef", "patch": "@@ -275,12 +275,14 @@ fn test(i: i32) {\n     [70; 147) 'match ...     }': &[i32]\n     [76; 77) 'i': i32\n     [88; 89) '2': i32\n+    [88; 89) '2': i32\n     [93; 96) 'foo': fn foo<i32>(&[i32]) -> &[i32]\n     [93; 102) 'foo(&[2])': &[i32]\n     [97; 101) '&[2]': &[i32; _]\n     [98; 101) '[2]': [i32; _]\n     [99; 100) '2': i32\n     [112; 113) '1': i32\n+    [112; 113) '1': i32\n     [117; 121) '&[1]': &[i32; _]\n     [118; 121) '[1]': [i32; _]\n     [119; 120) '1': i32\n@@ -316,10 +318,12 @@ fn test(i: i32) {\n     [70; 147) 'match ...     }': &[i32]\n     [76; 77) 'i': i32\n     [88; 89) '1': i32\n+    [88; 89) '1': i32\n     [93; 97) '&[1]': &[i32; _]\n     [94; 97) '[1]': [i32; _]\n     [95; 96) '1': i32\n     [107; 108) '2': i32\n+    [107; 108) '2': i32\n     [112; 115) 'foo': fn foo<i32>(&[i32]) -> &[i32]\n     [112; 121) 'foo(&[2])': &[i32]\n     [116; 120) '&[2]': &[i32; _]\n@@ -357,9 +361,11 @@ fn test() {\n     [45; 142) 'match ...     }': *const i32\n     [51; 52) '1': i32\n     [63; 64) '1': i32\n+    [63; 64) '1': i32\n     [68; 69) 't': &mut i32\n     [68; 81) 't as *mut i32': *mut i32\n     [91; 92) '2': i32\n+    [91; 92) '2': i32\n     [96; 97) 't': &mut i32\n     [96; 105) 't as &i32': &i32\n     [115; 116) '_': i32"}, {"sha": "6e5d2247ca3d7fc69100a3b4e76d5d446c7f4267", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=23c4ef5aef025173f8eedf321f0faf1acb62bbef", "patch": "@@ -81,6 +81,90 @@ fn test(x: &i32) {\n     );\n }\n \n+#[test]\n+fn infer_literal_pattern() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+fn any<T>() -> T { loop {} }\n+fn test(x: &i32) {\n+    if let \"foo\" = any() {}\n+    if let 1 = any() {}\n+    if let 1u32 = any() {}\n+    if let 1f32 = any() {}\n+    if let 1.0 = any() {}\n+    if let true = any() {}\n+}\n+\"#, true),\n+        @r###\"\n+    [18; 29) '{ loop {} }': T\n+    [20; 27) 'loop {}': !\n+    [25; 27) '{}': ()\n+    [38; 39) 'x': &i32\n+    [47; 209) '{     ...) {} }': ()\n+    [53; 76) 'if let...y() {}': ()\n+    [60; 65) '\"foo\"': &str\n+    [60; 65) '\"foo\"': &str\n+    [68; 71) 'any': fn any<&str>() -> &str\n+    [68; 73) 'any()': &str\n+    [74; 76) '{}': ()\n+    [81; 100) 'if let...y() {}': ()\n+    [88; 89) '1': i32\n+    [88; 89) '1': i32\n+    [92; 95) 'any': fn any<i32>() -> i32\n+    [92; 97) 'any()': i32\n+    [98; 100) '{}': ()\n+    [105; 127) 'if let...y() {}': ()\n+    [112; 116) '1u32': u32\n+    [112; 116) '1u32': u32\n+    [119; 122) 'any': fn any<u32>() -> u32\n+    [119; 124) 'any()': u32\n+    [125; 127) '{}': ()\n+    [132; 154) 'if let...y() {}': ()\n+    [139; 143) '1f32': f32\n+    [139; 143) '1f32': f32\n+    [146; 149) 'any': fn any<f32>() -> f32\n+    [146; 151) 'any()': f32\n+    [152; 154) '{}': ()\n+    [159; 180) 'if let...y() {}': ()\n+    [166; 169) '1.0': f64\n+    [166; 169) '1.0': f64\n+    [172; 175) 'any': fn any<f64>() -> f64\n+    [172; 177) 'any()': f64\n+    [178; 180) '{}': ()\n+    [185; 207) 'if let...y() {}': ()\n+    [192; 196) 'true': bool\n+    [192; 196) 'true': bool\n+    [199; 202) 'any': fn any<bool>() -> bool\n+    [199; 204) 'any()': bool\n+    [205; 207) '{}': ()\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn infer_range_pattern() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+fn test(x: &i32) {\n+    if let 1..76 = 2u32 {}\n+    if let 1..=76 = 2u32 {}\n+}\n+\"#, true),\n+        @r###\"\n+    [9; 10) 'x': &i32\n+    [18; 76) '{     ...2 {} }': ()\n+    [24; 46) 'if let...u32 {}': ()\n+    [31; 36) '1..76': u32\n+    [39; 43) '2u32': u32\n+    [44; 46) '{}': ()\n+    [51; 74) 'if let...u32 {}': ()\n+    [58; 64) '1..=76': u32\n+    [67; 71) '2u32': u32\n+    [72; 74) '{}': ()\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_pattern_match_ergonomics() {\n     assert_snapshot!(\n@@ -212,6 +296,7 @@ fn test() {\n     [59; 62) 'arr': [f64; _]\n     [73; 81) '[1.0, a]': [f64; _]\n     [74; 77) '1.0': f64\n+    [74; 77) '1.0': f64\n     [79; 80) 'a': f64\n     [85; 111) '{     ...     }': ()\n     [99; 100) 'a': f64"}, {"sha": "2ee9b8f101bebb61ffd7d336aedfa8c0cab6d028", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=23c4ef5aef025173f8eedf321f0faf1acb62bbef", "patch": "@@ -206,7 +206,8 @@ pub fn compute() {\n     [24; 106) 'match ...     }': ()\n     [30; 37) 'nope!()': {unknown}\n     [48; 94) 'SizeSk...tail }': {unknown}\n-    [82; 86) 'true': {unknown}\n+    [82; 86) 'true': bool\n+    [82; 86) 'true': bool\n     [88; 92) 'tail': {unknown}\n     [98; 100) '{}': ()\n     \"###"}, {"sha": "a600b947d0af5819a503f51753d86d1b9ada1707", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c4ef5aef025173f8eedf321f0faf1acb62bbef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=23c4ef5aef025173f8eedf321f0faf1acb62bbef", "patch": "@@ -948,6 +948,7 @@ fn foo() {\n     [165; 247) 'match ...     }': i32\n     [171; 175) 'true': bool\n     [186; 190) 'true': bool\n+    [186; 190) 'true': bool\n     [194; 195) '3': i32\n     [205; 206) '_': bool\n     [210; 241) '{     ...     }': !\n@@ -956,6 +957,7 @@ fn foo() {\n     [263; 320) 'match ...     }': i32\n     [269; 273) 'true': bool\n     [284; 288) 'true': bool\n+    [284; 288) 'true': bool\n     [292; 293) '4': i32\n     [303; 304) '_': bool\n     [308; 314) 'return': !"}]}