{"sha": "69ba62e6cd5d3a637477310522acef6e599197fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YmE2MmU2Y2Q1ZDNhNjM3NDc3MzEwNTIyYWNlZjZlNTk5MTk3ZmI=", "commit": {"author": {"name": "m-ysk", "email": "myskjp@gmail.com", "date": "2020-11-07T09:47:25Z"}, "committer": {"name": "m-ysk", "email": "myskjp@gmail.com", "date": "2020-11-07T09:47:25Z"}, "message": "Minimize convert_integer_literal tests", "tree": {"sha": "f9e1f9805a3fea9e0d58a25b29ed6a2118081f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e1f9805a3fea9e0d58a25b29ed6a2118081f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ba62e6cd5d3a637477310522acef6e599197fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ba62e6cd5d3a637477310522acef6e599197fb", "html_url": "https://github.com/rust-lang/rust/commit/69ba62e6cd5d3a637477310522acef6e599197fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ba62e6cd5d3a637477310522acef6e599197fb/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa03bfb115f49a681fb1ea6a9ea1209c847ac0be", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa03bfb115f49a681fb1ea6a9ea1209c847ac0be", "html_url": "https://github.com/rust-lang/rust/commit/fa03bfb115f49a681fb1ea6a9ea1209c847ac0be"}], "stats": {"total": 370, "additions": 2, "deletions": 368}, "files": [{"sha": "66711538251420312518aeade8e71f9c44112288", "filename": "crates/assists/src/handlers/convert_integer_literal.rs", "status": "modified", "additions": 2, "deletions": 368, "changes": 370, "blob_url": "https://github.com/rust-lang/rust/blob/69ba62e6cd5d3a637477310522acef6e599197fb/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ba62e6cd5d3a637477310522acef6e599197fb/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs?ref=69ba62e6cd5d3a637477310522acef6e599197fb", "patch": "@@ -129,34 +129,6 @@ mod tests {\n         );\n     }\n \n-    // Decimal numbers under 3 digits have a special case where they return early because we can't fit a\n-    // other base's prefix, so we have a separate test for that.\n-    #[test]\n-    fn convert_small_decimal_integer() {\n-        let before = \"const _: i32 = 10<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1010;\",\n-            \"Convert 10 to 0b1010\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o12;\",\n-            \"Convert 10 to 0o12\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xA;\",\n-            \"Convert 10 to 0xA\",\n-        );\n-    }\n-\n     #[test]\n     fn convert_hexadecimal_integer() {\n         let before = \"const _: i32 = 0xFF<|>;\";\n@@ -236,7 +208,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn convert_decimal_integer_with_underscores() {\n+    fn convert_integer_with_underscores() {\n         let before = \"const _: i32 = 1_00_0<|>;\";\n \n         check_assist_by_label(\n@@ -262,111 +234,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn convert_small_decimal_integer_with_underscores() {\n-        let before = \"const _: i32 = 1_0<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1010;\",\n-            \"Convert 1_0 to 0b1010\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o12;\",\n-            \"Convert 1_0 to 0o12\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xA;\",\n-            \"Convert 1_0 to 0xA\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_hexadecimal_integer_with_underscores() {\n-        let before = \"const _: i32 = 0x_F_F<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111;\",\n-            \"Convert 0x_F_F to 0b11111111\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377;\",\n-            \"Convert 0x_F_F to 0o377\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255;\",\n-            \"Convert 0x_F_F to 255\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_binary_integer_with_underscores() {\n-        let before = \"const _: i32 = 0b1111_1111<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377;\",\n-            \"Convert 0b1111_1111 to 0o377\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255;\",\n-            \"Convert 0b1111_1111 to 255\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFF;\",\n-            \"Convert 0b1111_1111 to 0xFF\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_octal_integer_with_underscores() {\n-        let before = \"const _: i32 = 0o3_77<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111;\",\n-            \"Convert 0o3_77 to 0b11111111\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255;\",\n-            \"Convert 0o3_77 to 255\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFF;\",\n-            \"Convert 0o3_77 to 0xFF\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_decimal_integer_with_suffix() {\n+    fn convert_integer_with_suffix() {\n         let before = \"const _: i32 = 1000i32<|>;\";\n \n         check_assist_by_label(\n@@ -391,240 +259,6 @@ mod tests {\n         );\n     }\n \n-    #[test]\n-    fn convert_small_decimal_integer_with_suffix() {\n-        let before = \"const _: i32 = 10i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1010i32;\",\n-            \"Convert 10i32 to 0b1010i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o12i32;\",\n-            \"Convert 10i32 to 0o12i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xAi32;\",\n-            \"Convert 10i32 to 0xAi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_hexadecimal_integer_with_suffix() {\n-        let before = \"const _: i32 = 0xFFi32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0xFFi32 to 0b11111111i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377i32;\",\n-            \"Convert 0xFFi32 to 0o377i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0xFFi32 to 255i32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_binary_integer_with_suffix() {\n-        let before = \"const _: i32 = 0b11111111i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377i32;\",\n-            \"Convert 0b11111111i32 to 0o377i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0b11111111i32 to 255i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0b11111111i32 to 0xFFi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_octal_integer_with_suffix() {\n-        let before = \"const _: i32 = 0o377i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0o377i32 to 0b11111111i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0o377i32 to 255i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0o377i32 to 0xFFi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_decimal_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 1_00_0i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1111101000i32;\",\n-            \"Convert 1_00_0i32 to 0b1111101000i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o1750i32;\",\n-            \"Convert 1_00_0i32 to 0o1750i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0x3E8i32;\",\n-            \"Convert 1_00_0i32 to 0x3E8i32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_small_decimal_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 1_0i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1010i32;\",\n-            \"Convert 1_0i32 to 0b1010i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o12i32;\",\n-            \"Convert 1_0i32 to 0o12i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xAi32;\",\n-            \"Convert 1_0i32 to 0xAi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_hexadecimal_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 0x_F_Fi32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0x_F_Fi32 to 0b11111111i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377i32;\",\n-            \"Convert 0x_F_Fi32 to 0o377i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0x_F_Fi32 to 255i32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_binary_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 0b1111_1111i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377i32;\",\n-            \"Convert 0b1111_1111i32 to 0o377i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0b1111_1111i32 to 255i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0b1111_1111i32 to 0xFFi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_octal_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 0o3_77i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0o3_77i32 to 0b11111111i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0o3_77i32 to 255i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0o3_77i32 to 0xFFi32\",\n-        );\n-    }\n-\n     #[test]\n     fn convert_overflowing_literal() {\n         let before = \"const _: i32 ="}]}