{"sha": "e28a93365abfa6b506f2017eac2f0971fc839306", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOGE5MzM2NWFiZmE2YjUwNmYyMDE3ZWFjMmYwOTcxZmM4MzkzMDY=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-02T09:14:28Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-02T16:12:31Z"}, "message": "Correct `visit_region` implementation", "tree": {"sha": "86bc8a48ae4934a032457aba553d9724ee04ab20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86bc8a48ae4934a032457aba553d9724ee04ab20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e28a93365abfa6b506f2017eac2f0971fc839306", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDfOu8ACgkQ2rpbBylh\nwYq5AQ/9GmMa1QwXfLgqTumqf1+ZhGaKPAos6FYNaaU0pY574Kfc8fcJf2fB+QeR\nPb1Ml2vkZNTn211ENK9SU7VYeua4nAybNmKZM5INnPJ+Uc0EHLWE8HyWi+vbgNol\n0dC40t8Kw0CNnhliRxgNQXMDbuuJmAo+3rcoQkdm0RRvc44WKo6vk8X4RVSKLcO3\nhK2r/nD9p+Eu9ZHrsAaAb9v/kDjE7l4mjLbQO4FKthcAHhtKxRzL565s4FkjW+YY\nrXUudGLZoY+M645rfFhRB7GzWdtPZUsytVi60nDuQ88wOWpn7WCr/h7F8WDVHF6Q\nH4TiyLtrNkYJyVydiEfZT+pjUsvoPVq/L0ESNeEUAN/Xp9KJbVhMm3bSuyDwiEw9\nRvr4SMZ5J22dPGiPi2kJmX13/aNUHSYvESolFQaCH6dPQa6vV6PfTS3H2NsYU/N6\nm3EIu9fN3OAyQIPKnMidunoGFyPLtJf03trLpPaeqJLh3SiklONEpvwZkWFbSgtm\nzkDS1kmUytUNPusRWFZ2CHwb9iniW7iEX73Q11OLjKJSY6dEaCW0KV1vXyqX39bQ\neQz+IapURWTmdr3fRM2ir/Np6pAWmX/rLu+FA1wVVb6otTPHJ+wfhG2XwW6pzrlE\ns3WGbZZH/991xOqta06NoKPVJKUBJbe7FIRzDxEWmS68y3T3dn4=\n=giFr\n-----END PGP SIGNATURE-----", "payload": "tree 86bc8a48ae4934a032457aba553d9724ee04ab20\nparent 13e116f1f70cce9759ce7d957e23241895542ec9\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1625217268 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1625242351 +0900\n\nCorrect `visit_region` implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e28a93365abfa6b506f2017eac2f0971fc839306", "html_url": "https://github.com/rust-lang/rust/commit/e28a93365abfa6b506f2017eac2f0971fc839306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e28a93365abfa6b506f2017eac2f0971fc839306/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e116f1f70cce9759ce7d957e23241895542ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e116f1f70cce9759ce7d957e23241895542ec9", "html_url": "https://github.com/rust-lang/rust/commit/13e116f1f70cce9759ce7d957e23241895542ec9"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "0f507cfb997a5aa2650908354f91840139bb53e4", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e28a93365abfa6b506f2017eac2f0971fc839306/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28a93365abfa6b506f2017eac2f0971fc839306/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=e28a93365abfa6b506f2017eac2f0971fc839306", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n     }\n \n     fn into_vars(self, tcx: TyCtxt<'tcx>) -> &'tcx ty::List<ty::BoundVariableKind> {\n-        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or_else(|| 0);\n+        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or(0);\n         for i in 0..max {\n             if let None = self.vars.get(&i) {\n                 panic!(\"Unknown variable: {:?}\", i);\n@@ -90,6 +90,31 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        use std::collections::btree_map::Entry;\n+        match r {\n+            ty::ReLateBound(index, br) if *index == self.binder_index => match br.kind {\n+                ty::BrNamed(_def_id, _name) => {\n+                    // FIXME\n+                }\n+\n+                ty::BrAnon(var) => match self.vars.entry(var) {\n+                    Entry::Vacant(entry) => {\n+                        entry.insert(ty::BoundVariableKind::Region(br.kind));\n+                    }\n+                    Entry::Occupied(entry) => match entry.get() {\n+                        ty::BoundVariableKind::Region(_) => {}\n+                        _ => bug!(\"Conflicting bound vars\"),\n+                    },\n+                },\n+\n+                ty::BrEnv => {\n+                    // FIXME\n+                }\n+            },\n+\n+            _ => (),\n+        };\n+\n         r.super_visit_with(self)\n     }\n }"}]}