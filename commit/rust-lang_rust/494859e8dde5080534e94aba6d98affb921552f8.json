{"sha": "494859e8dde5080534e94aba6d98affb921552f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDg1OWU4ZGRlNTA4MDUzNGU5NGFiYTZkOThhZmZiOTIxNTUyZjg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-08T08:58:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:19:03Z"}, "message": "Consolidate PathParameters and AngleBracketedParameterData", "tree": {"sha": "661fcf1caa265de43643abf07b854460d966b862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/661fcf1caa265de43643abf07b854460d966b862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/494859e8dde5080534e94aba6d98affb921552f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/494859e8dde5080534e94aba6d98affb921552f8", "html_url": "https://github.com/rust-lang/rust/commit/494859e8dde5080534e94aba6d98affb921552f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/494859e8dde5080534e94aba6d98affb921552f8/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca43a7f977963ee497ca091fbdf3cea95abdf47", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca43a7f977963ee497ca091fbdf3cea95abdf47", "html_url": "https://github.com/rust-lang/rust/commit/cca43a7f977963ee497ca091fbdf3cea95abdf47"}], "stats": {"total": 539, "additions": 364, "deletions": 175}, "files": [{"sha": "79b433e3cb2c3b91b11c0947c711c2f9a6b51512", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -650,8 +650,8 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                 _path_span: Span,\n                                                 path_parameters: &'v PathParameters) {\n-    walk_list!(visitor, visit_lifetime, &path_parameters.lifetimes);\n-    walk_list!(visitor, visit_ty, &path_parameters.types);\n+    walk_list!(visitor, visit_lifetime, path_parameters.lifetimes());\n+    walk_list!(visitor, visit_ty, path_parameters.types());\n     walk_list!(visitor, visit_assoc_type_binding, &path_parameters.bindings);\n }\n "}, {"sha": "8e66ce3fd18251ee766bf7251d12cd3c97375e94", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -46,6 +46,7 @@ use hir::HirVec;\n use hir::map::{DefKey, DefPathData, Definitions};\n use hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n use hir::def::{Def, PathResolution, PerNS};\n+use hir::GenericPathParam;\n use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES};\n use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -1037,6 +1038,20 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_param(&mut self,\n+                   p: &GenericAngleBracketedParam,\n+                   itctx: ImplTraitContext)\n+                   -> GenericPathParam {\n+        match p {\n+            GenericAngleBracketedParam::Lifetime(lt) => {\n+                GenericPathParam::Lifetime(self.lower_lifetime(&lt))\n+            }\n+            GenericAngleBracketedParam::Type(ty) => {\n+                GenericPathParam::Type(self.lower_ty(&ty, itctx))\n+            }\n+        }\n+    }\n+\n     fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> P<hir::Ty> {\n         let kind = match t.node {\n             TyKind::Infer => hir::TyInfer,\n@@ -1552,7 +1567,7 @@ impl<'a> LoweringContext<'a> {\n                         assert!(!def_id.is_local());\n                         let item_generics =\n                             self.cstore.item_generics_cloned_untracked(def_id, self.sess);\n-                        let n = item_generics.own_counts().lifetimes;\n+                        let n = item_generics.own_counts().lifetimes();\n                         self.type_def_lifetime_params.insert(def_id, n);\n                         n\n                     });\n@@ -1671,7 +1686,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> hir::PathSegment {\n         let (mut parameters, infer_types) = if let Some(ref parameters) = segment.parameters {\n             let msg = \"parenthesized parameters may only be used with a trait\";\n-            match **parameters {\n+            match **path_params {\n                 PathParameters::AngleBracketed(ref data) => {\n                     self.lower_angle_bracketed_parameter_data(data, param_mode, itctx)\n                 }\n@@ -1699,12 +1714,14 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         if !parameters.parenthesized && parameters.lifetimes.is_empty() {\n-            parameters.lifetimes = self.elided_path_lifetimes(path_span, expected_lifetimes);\n+            path_params.parameters = (0..expected_lifetimes).map(|_| {\n+                GenericPathParam::Lifetime(self.elided_lifetime(path_span))\n+            }).chain(path_params.parameters.into_iter()).collect();\n         }\n \n         hir::PathSegment::new(\n             self.lower_ident(segment.ident),\n-            parameters,\n+            path_params,\n             infer_types,\n         )\n     }\n@@ -1715,24 +1732,13 @@ impl<'a> LoweringContext<'a> {\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n     ) -> (hir::PathParameters, bool) {\n-        let &AngleBracketedParameterData {\n-            ref lifetimes,\n-            ref types,\n-            ref bindings,\n-            ..\n-        } = data;\n-        (\n-            hir::PathParameters {\n-                lifetimes: self.lower_lifetimes(lifetimes),\n-                types: types.iter().map(|ty| self.lower_ty(ty, itctx)).collect(),\n-                bindings: bindings\n-                    .iter()\n-                    .map(|b| self.lower_ty_binding(b, itctx))\n-                    .collect(),\n-                parenthesized: false,\n-            },\n-            types.is_empty() && param_mode == ParamMode::Optional,\n-        )\n+        let &AngleBracketedParameterData { ref parameters, ref bindings, .. } = data;\n+        (hir::PathParameters {\n+            parameters: parameters.iter().map(|p| self.lower_param(p, itctx)).collect(),\n+            bindings: bindings.iter().map(|b| self.lower_ty_binding(b, itctx)).collect(),\n+            parenthesized: false,\n+        },\n+        types.is_empty() && param_mode == ParamMode::Optional)\n     }\n \n     fn lower_parenthesized_parameter_data(\n@@ -1769,8 +1775,7 @@ impl<'a> LoweringContext<'a> {\n \n                 (\n                     hir::PathParameters {\n-                        lifetimes: hir::HirVec::new(),\n-                        types: hir_vec![mk_tup(this, inputs, span)],\n+                        parameters: hir_vec![GenericPathParam::Type(mk_tup(this, inputs, span))],\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n                                 id: this.next_id().node_id,\n@@ -1971,7 +1976,7 @@ impl<'a> LoweringContext<'a> {\n \n         let def = hir::LifetimeDef {\n             lifetime: self.lower_lifetime(&l.lifetime),\n-            bounds: self.lower_lifetimes(&l.bounds),\n+            bounds: l.bounds.iter().map(|l| self.lower_lifetime(l)).collect(),\n             pure_wrt_drop: attr::contains_name(&l.attrs, \"may_dangle\"),\n             in_band: false,\n         };\n@@ -1981,10 +1986,6 @@ impl<'a> LoweringContext<'a> {\n         def\n     }\n \n-    fn lower_lifetimes(&mut self, lts: &Vec<Lifetime>) -> hir::HirVec<hir::Lifetime> {\n-        lts.iter().map(|l| self.lower_lifetime(l)).collect()\n-    }\n-\n     fn lower_generic_params(\n         &mut self,\n         params: &Vec<GenericParam>,"}, {"sha": "e69b824e779097518bd23b87038d3c22929776d8", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -372,12 +372,16 @@ impl PathSegment {\n     }\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum GenericPathParam {\n+    Lifetime(Lifetime),\n+    Type(P<Ty>),\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct PathParameters {\n-    /// The lifetime parameters for this path segment.\n-    pub lifetimes: HirVec<Lifetime>,\n-    /// The type parameters for this path segment, if present.\n-    pub types: HirVec<P<Ty>>,\n+    /// The generic parameters for this path segment.\n+    pub parameters: HirVec<GenericPathParam>,\n     /// Bindings (equality constraints) on associated types, if present.\n     /// E.g., `Foo<A=Bar>`.\n     pub bindings: HirVec<TypeBinding>,\n@@ -390,28 +394,46 @@ pub struct PathParameters {\n impl PathParameters {\n     pub fn none() -> Self {\n         Self {\n-            lifetimes: HirVec::new(),\n-            types: HirVec::new(),\n+            parameters: HirVec::new(),\n             bindings: HirVec::new(),\n             parenthesized: false,\n         }\n     }\n \n     pub fn is_empty(&self) -> bool {\n-        self.lifetimes.is_empty() && self.types.is_empty() &&\n-            self.bindings.is_empty() && !self.parenthesized\n+        self.parameters.is_empty() && self.bindings.is_empty() && !self.parenthesized\n     }\n \n     pub fn inputs(&self) -> &[P<Ty>] {\n         if self.parenthesized {\n-            if let Some(ref ty) = self.types.get(0) {\n+            if let Some(ref ty) = self.types().get(0) {\n                 if let TyTup(ref tys) = ty.node {\n                     return tys;\n                 }\n             }\n         }\n         bug!(\"PathParameters::inputs: not a `Fn(T) -> U`\");\n     }\n+\n+    pub fn lifetimes(&self) -> Vec<&Lifetime> {\n+        self.parameters.iter().filter_map(|p| {\n+            if let GenericPathParam::Lifetime(lt) = p {\n+                Some(lt)\n+            } else {\n+                None\n+            }\n+        }).collect()\n+    }\n+\n+    pub fn types(&self) -> Vec<&P<Ty>> {\n+        self.parameters.iter().filter_map(|p| {\n+            if let GenericPathParam::Type(ty) = p {\n+                Some(ty)\n+            } else {\n+                None\n+            }\n+        }).collect()\n+    }\n }\n \n /// The AST represents all type param bounds as types."}, {"sha": "9e3c103b97812dff5df0e6401ab7bf2da29c7dc9", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -25,6 +25,7 @@ use syntax_pos::{self, BytePos, FileName};\n \n use hir;\n use hir::{PatKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier, RangeEnd};\n+use hir::GenericPathParam;\n \n use std::cell::Cell;\n use std::io::{self, Write, Read};\n@@ -1269,8 +1270,7 @@ impl<'a> State<'a> {\n         self.print_name(segment.name)?;\n \n         segment.with_parameters(|parameters| {\n-            if !parameters.lifetimes.is_empty() ||\n-                !parameters.types.is_empty() ||\n+            if !parameters.parameters.is_empty() ||\n                 !parameters.bindings.is_empty()\n             {\n                 self.print_path_parameters(&parameters, segment.infer_types, true)\n@@ -1707,18 +1707,18 @@ impl<'a> State<'a> {\n     }\n \n     fn print_path_parameters(&mut self,\n-                             parameters: &hir::PathParameters,\n+                             path_params: &hir::PathParameters,\n                              infer_types: bool,\n                              colons_before_params: bool)\n                              -> io::Result<()> {\n-        if parameters.parenthesized {\n+        if path_params.parenthesized {\n             self.s.word(\"(\")?;\n-            self.commasep(Inconsistent, parameters.inputs(), |s, ty| s.print_type(&ty))?;\n+            self.commasep(Inconsistent, path_params.inputs(), |s, ty| s.print_type(&ty))?;\n             self.s.word(\")\")?;\n \n             self.space_if_not_bol()?;\n             self.word_space(\"->\")?;\n-            self.print_type(&parameters.bindings[0].ty)?;\n+            self.print_type(&path_params.bindings[0].ty)?;\n         } else {\n             let start = if colons_before_params { \"::<\" } else { \"<\" };\n             let empty = Cell::new(true);\n@@ -1731,17 +1731,27 @@ impl<'a> State<'a> {\n                 }\n             };\n \n-            if !parameters.lifetimes.iter().all(|lt| lt.is_elided()) {\n-                for lifetime in &parameters.lifetimes {\n-                    start_or_comma(self)?;\n-                    self.print_lifetime(lifetime)?;\n+            let elide_lifetimes = path_params.parameters.iter().all(|p| {\n+                if let GenericPathParam::Lifetime(lt) = p {\n+                    if !lt.is_elided() {\n+                        return false;\n+                    }\n                 }\n-            }\n-\n-            if !parameters.types.is_empty() {\n-                start_or_comma(self)?;\n-                self.commasep(Inconsistent, &parameters.types, |s, ty| s.print_type(&ty))?;\n-            }\n+                true\n+            });\n+\n+            self.commasep(Inconsistent, &path_params.parameters, |s, p| {\n+                match p {\n+                    GenericPathParam::Lifetime(lt) => {\n+                        if !elide_lifetimes {\n+                            s.print_lifetime(lt)\n+                        } else {\n+                            Ok(())\n+                        }\n+                    }\n+                    GenericPathParam::Type(ty) => s.print_type(ty),\n+                }\n+            })?;\n \n             // FIXME(eddyb) This would leak into error messages, e.g.:\n             // \"non-exhaustive patterns: `Some::<..>(_)` not covered\".\n@@ -1750,7 +1760,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"..\")?;\n             }\n \n-            for binding in parameters.bindings.iter() {\n+            for binding in path_params.bindings.iter() {\n                 start_or_comma(self)?;\n                 self.print_name(binding.name)?;\n                 self.s.space()?;"}, {"sha": "54e6989d55a2428a068698cffd3a84d47390f073", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -180,9 +180,13 @@ impl_stable_hash_for!(struct hir::PathSegment {\n     parameters\n });\n \n+impl_stable_hash_for!(enum hir::GenericPathParam {\n+    Lifetime(lt),\n+    Type(ty)\n+});\n+\n impl_stable_hash_for!(struct hir::PathParameters {\n-    lifetimes,\n-    types,\n+    parameters,\n     bindings,\n     parenthesized\n });"}, {"sha": "477c4c213ce40f64daaa7ac6d1f4c43282d5968d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -155,7 +155,7 @@ impl Region {\n         }\n     }\n \n-    fn subst(self, params: &[hir::Lifetime], map: &NamedRegionMap) -> Option<Region> {\n+    fn subst(self, params: Vec<&hir::Lifetime>, map: &NamedRegionMap) -> Option<Region> {\n         if let Region::EarlyBound(index, _, _) = self {\n             params\n                 .get(index as usize)\n@@ -820,7 +820,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         if lifetime_ref.is_elided() {\n-            self.resolve_elided_lifetimes(slice::from_ref(lifetime_ref), false);\n+            self.resolve_elided_lifetimes(vec![lifetime_ref], false);\n             return;\n         }\n         if lifetime_ref.is_static() {\n@@ -1613,10 +1613,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             return;\n         }\n \n-        if params.lifetimes.iter().all(|l| l.is_elided()) {\n-            self.resolve_elided_lifetimes(&params.lifetimes, true);\n+        if params.lifetimes().iter().all(|l| l.is_elided()) {\n+            self.resolve_elided_lifetimes(params.lifetimes(), true);\n         } else {\n-            for l in &params.lifetimes {\n+            for l in &params.lifetimes() {\n                 self.visit_lifetime(l);\n             }\n         }\n@@ -1688,13 +1688,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     } else {\n                         Some(Region::Static)\n                     },\n-                    Set1::One(r) => r.subst(&params.lifetimes, map),\n+                    Set1::One(r) => r.subst(params.lifetimes(), map),\n                     Set1::Many => None,\n                 })\n                 .collect()\n         });\n \n-        for (i, ty) in params.types.iter().enumerate() {\n+        for (i, ty) in params.types().iter().enumerate() {\n             if let Some(&lt) = object_lifetime_defaults.get(i) {\n                 let scope = Scope::ObjectLifetimeDefault {\n                     lifetime: lt,\n@@ -1981,7 +1981,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn resolve_elided_lifetimes(&mut self, lifetime_refs: &'tcx [hir::Lifetime], deprecated: bool) {\n+    fn resolve_elided_lifetimes(&mut self,\n+                                lifetime_refs: Vec<&'tcx hir::Lifetime>,\n+                                deprecated: bool) {\n         if lifetime_refs.is_empty() {\n             return;\n         }"}, {"sha": "d09be8e5c45054f36fff0ce5102e3bded355c14d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -885,6 +885,73 @@ pub struct GenericParamCount {\n     pub types: usize,\n }\n \n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub enum GenericParameterDef {\n+    Lifetime(RegionParameterDef),\n+    Type(TypeParameterDef),\n+}\n+\n+impl GenericParameterDef {\n+    pub fn index(&self) -> u32 {\n+        match self {\n+            GenericParameterDef::Lifetime(lt) => lt.index,\n+            GenericParameterDef::Type(ty)     => ty.index,\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub enum KindIndex {\n+    Lifetime,\n+    Type,\n+}\n+\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct KindIndexed<L, T> {\n+    pub lt: L,\n+    pub ty: T,\n+}\n+\n+impl<T> KindIndexed<T, T> {\n+    pub fn get(&self, idx: KindIndex) -> &T {\n+        match idx {\n+            KindIndex::Lifetime => &self.lt,\n+            KindIndex::Type     => &self.ty,\n+        }\n+    }\n+\n+    pub fn iter(&self) -> KindIndexIterator<T> {\n+        KindIndexIterator {\n+            index: self,\n+            next: Some(KindIndex::Lifetime),\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct KindIndexIterator<'a, T: 'a> {\n+    pub index: &'a KindIndexed<T, T>,\n+    pub next: Option<KindIndex>,\n+}\n+\n+impl<'a, T> Iterator for KindIndexIterator<'a, T> {\n+    type Item = &'a T;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        match self.next {\n+            Some(KindIndex::Lifetime) => {\n+                self.next = Some(KindIndex::Type);\n+                Some(&self.index.lt)\n+            }\n+            Some(KindIndex::Type) => {\n+                self.next = None;\n+                Some(&self.index.ty)\n+            },\n+            None => None,\n+        }\n+    }\n+}\n+\n /// Information about the formal type/lifetime parameters associated\n /// with an item or method. Analogous to hir::Generics.\n ///\n@@ -942,6 +1009,34 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }\n     }\n \n+    pub fn lifetimes(&self) -> Vec<&RegionParameterDef> {\n+        self.parameters.iter().filter_map(|p| {\n+            if let GenericParameterDef::Lifetime(lt) = p {\n+                Some(lt)\n+            } else {\n+                None\n+            }\n+        }).collect()\n+    }\n+\n+    pub fn types(&self) -> Vec<&TypeParameterDef> {\n+        self.parameters.iter().filter_map(|p| {\n+            if let GenericParameterDef::Type(ty) = p {\n+                Some(ty)\n+            } else {\n+                None\n+            }\n+        }).collect()\n+    }\n+\n+    pub fn parent_lifetimes(&self) -> u32 {\n+        *self.parent_parameters.get(KindIndex::Lifetime)\n+    }\n+\n+    pub fn parent_types(&self) -> u32 {\n+        *self.parent_parameters.get(KindIndex::Type)\n+    }\n+\n     pub fn region_param(&'tcx self,\n                         param: &EarlyBoundRegion,\n                         tcx: TyCtxt<'a, 'gcx, 'tcx>)"}, {"sha": "71ecc89380646179e37c48b215f01d85d91df39f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -680,7 +680,7 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n                         match seg.parameters.as_ref().map(|p| &**p) {\n                             None => false,\n                             Some(&ast::PathParameters::AngleBracketed(ref data)) =>\n-                                any_involves_impl_trait(data.types.iter()) ||\n+                                any_involves_impl_trait(data.types().into_iter()) ||\n                                 any_involves_impl_trait(data.bindings.iter().map(|b| &b.ty)),\n                             Some(&ast::PathParameters::Parenthesized(ref data)) =>\n                                 any_involves_impl_trait(data.inputs.iter()) ||"}, {"sha": "81a3617f0aabb76671bccb64870c9e6e29f35098", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -822,7 +822,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         for seg in &path.segments {\n             if let Some(ref params) = seg.parameters {\n                 match **params {\n-                    ast::PathParameters::AngleBracketed(ref data) => for t in &data.types {\n+                    ast::PathParameters::AngleBracketed(ref data) => for t in data.types() {\n                         self.visit_ty(t);\n                     },\n                     ast::PathParameters::Parenthesized(ref data) => {\n@@ -907,7 +907,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // Explicit types in the turbo-fish.\n         if let Some(ref params) = seg.parameters {\n             if let ast::PathParameters::AngleBracketed(ref data) = **params {\n-                for t in &data.types {\n+                for t in data.types() {\n                     self.visit_ty(t);\n                 }\n             }"}, {"sha": "005d088c4786f612c571bf5eace540f306736185", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -214,8 +214,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         // region with the current anon region binding (in other words,\n         // whatever & would get replaced with).\n         let decl_generics = tcx.generics_of(def_id);\n-        let ty_provided = parameters.types.len();\n-        let lt_provided = parameters.lifetimes.len();\n+        let ty_provided = parameters.types().len();\n+        let lt_provided = parameters.lifetimes().len();\n \n         let mut lt_accepted = 0;\n         let mut ty_params = ParamRange { required: 0, accepted: 0 };\n@@ -269,7 +269,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n                     let i = param.index as usize - own_self;\n-                    if let Some(lifetime) = parameters.lifetimes.get(i) {\n+                    if let Some(lifetime) = parameters.lifetimes().get(i) {\n                         self.ast_region_to_region(lifetime, Some(param)).into()\n                     } else {\n                         tcx.types.re_static.into()\n@@ -286,7 +286,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     let i = i - (lt_accepted + own_self);\n                     if i < ty_provided {\n                         // A provided type parameter.\n-                        self.ast_ty_to_ty(&parameters.types[i]).into()\n+                        self.ast_ty_to_ty(&parameters.types()[i]).into()\n                     } else if infer_types {\n                         // No type parameters were provided, we can infer all.\n                         if !default_needs_object_self(param) {\n@@ -970,23 +970,27 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     pub fn prohibit_type_params(&self, segments: &[hir::PathSegment]) {\n         for segment in segments {\n-            segment.with_parameters(|parameters| {\n-                for typ in &parameters.types {\n-                    struct_span_err!(self.tcx().sess, typ.span, E0109,\n-                                     \"type parameters are not allowed on this type\")\n-                        .span_label(typ.span, \"type parameter not allowed\")\n-                        .emit();\n-                    break;\n-                }\n-                for lifetime in &parameters.lifetimes {\n-                    struct_span_err!(self.tcx().sess, lifetime.span, E0110,\n-                                     \"lifetime parameters are not allowed on this type\")\n-                        .span_label(lifetime.span,\n-                                    \"lifetime parameter not allowed on this type\")\n-                        .emit();\n+            segment.with_parameters(|params| {\n+                for p in &params.parameters {\n+                    let (mut span_err, span, kind) = match p {\n+                        hir::GenericPathParam::Lifetime(lt) => {\n+                            (struct_span_err!(self.tcx().sess, lt.span, E0110,\n+                                              \"lifetime parameters are not allowed on this type\"),\n+                             lt.span,\n+                             \"lifetime\")\n+                        }\n+                        hir::GenericPathParam::Type(ty) => {\n+                            (struct_span_err!(self.tcx().sess, ty.span, E0109,\n+                                              \"type parameters are not allowed on this type\"),\n+                             ty.span,\n+                             \"type\")\n+                        }\n+                    };\n+                    span_err.span_label(span, format!(\"{} parameter not allowed\", kind))\n+                            .emit();\n                     break;\n                 }\n-                for binding in &parameters.bindings {\n+                for binding in &params.bindings {\n                     self.prohibit_projection(binding.span);\n                     break;\n                 }"}, {"sha": "33102757925df5b22c52bf9b7b95fb7aad5f8656", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -331,22 +331,23 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n                         if let Some(lifetime) = provided.as_ref().and_then(|p| {\n-                            p.lifetimes.get(i - parent_substs.len())\n+                            p.lifetimes().get(i - parent_substs.len())\n                         }) {\n                             return AstConv::ast_region_to_region(\n                                 self.fcx, lifetime, Some(param)).into();\n                         }\n                     }\n                     GenericParamDefKind::Type {..} => {\n                         if let Some(ast_ty) = provided.as_ref().and_then(|p| {\n-                            p.types.get(i - parent_substs.len() - own_counts.lifetimes)\n+                            p.types().get(i - parent_substs.len() - own_counts.lifetimes)\n                         }) {\n                             return self.to_ty(ast_ty).into();\n                         }\n                     }\n                 }\n                 self.var_for_def(self.span, param)\n             }\n+            self.type_var_for_def(self.span, def, cur_substs)\n         })\n     }\n "}, {"sha": "0f1b739cddf0ae21824be993c1829c3f9ca32361", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -4833,8 +4833,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n-                    let lifetimes = segment.map_or(&[][..], |(s, _)| {\n-                        s.parameters.as_ref().map_or(&[][..], |p| &p.lifetimes[..])\n+                    let lifetimes = segment.map_or(vec![], |(s, _)| {\n+                        s.parameters.as_ref().map_or(vec![], |p| p.lifetimes())\n                     });\n \n                     if let Some(lifetime) = lifetimes.get(i) {\n@@ -4844,8 +4844,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n                 GenericParamDefKind::Type {..} => {\n-                    let (types, infer_types) = segment.map_or((&[][..], true), |(s, _)| {\n-                        (s.parameters.as_ref().map_or(&[][..], |p| &p.types[..]), s.infer_types)\n+                    let (types, infer_types) = segment.map_or((vec![], true), |(s, _)| {\n+                        (s.parameters.as_ref().map_or(vec![], |p| |p| p.types()), s.infer_types)\n                     });\n \n                     // Skip over the lifetimes in the same segment.\n@@ -4961,10 +4961,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   is_method_call: bool,\n                                   supress_mismatch_error: bool) {\n         let (lifetimes, types, infer_types, bindings) = segment.map_or(\n-            (&[][..], &[][..], true, &[][..]),\n+            (vec![], vec![], true, &[][..]),\n             |(s, _)| s.parameters.as_ref().map_or(\n-                (&[][..], &[][..], s.infer_types, &[][..]),\n-                |p| (&p.lifetimes[..], &p.types[..],\n+                (vec![], vec![], s.infer_types, &[][..]),\n+                |p| (p.lifetimes(), p.types(),\n                      s.infer_types, &p.bindings[..])));\n         let infer_lifetimes = lifetimes.len() == 0;\n "}, {"sha": "6e323e5913aa14cc21e26359cddb4dd6ba4c2a71", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -973,6 +973,13 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       .map(|param| (param.def_id, param.index))\n                                       .collect();\n \n+    let parent_parameters = ty::KindIndexed { lt: parent_regions, ty: parent_types };\n+    let lifetimes: Vec<ty::GenericParameterDef> =\n+        regions.into_iter().map(|lt| ty::GenericParameterDef::Lifetime(lt)).collect();\n+    let types: Vec<ty::GenericParameterDef> =\n+        types.into_iter().map(|ty| ty::GenericParameterDef::Type(ty)).collect();\n+    let parameters = lifetimes.into_iter().chain(types.into_iter()).collect();\n+\n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,\n         parent_count,"}, {"sha": "1af4743cfe4cb2f07570027e266c63d6b106b8cb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -167,21 +167,47 @@ impl PathParameters {\n     }\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum GenericAngleBracketedParam {\n+    Lifetime(Lifetime),\n+    Type(P<Ty>),\n+}\n+\n /// A path like `Foo<'a, T>`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Default)]\n pub struct AngleBracketedParameterData {\n     /// Overall span\n     pub span: Span,\n-    /// The lifetime parameters for this path segment.\n-    pub lifetimes: Vec<Lifetime>,\n-    /// The type parameters for this path segment, if present.\n-    pub types: Vec<P<Ty>>,\n+    /// The parameters for this path segment.\n+    pub parameters: Vec<GenericAngleBracketedParam>,\n     /// Bindings (equality constraints) on associated types, if present.\n     ///\n     /// E.g., `Foo<A=Bar>`.\n     pub bindings: Vec<TypeBinding>,\n }\n \n+impl AngleBracketedParameterData {\n+    pub fn lifetimes(&self) -> Vec<&Lifetime> {\n+        self.parameters.iter().filter_map(|p| {\n+            if let GenericAngleBracketedParam::Lifetime(lt) = p {\n+                Some(lt)\n+            } else {\n+                None\n+            }\n+        }).collect()\n+    }\n+\n+    pub fn types(&self) -> Vec<&P<Ty>> {\n+        self.parameters.iter().filter_map(|p| {\n+            if let GenericAngleBracketedParam::Type(ty) = p {\n+                Some(ty)\n+            } else {\n+                None\n+            }\n+        }).collect()\n+    }\n+}\n+\n impl Into<Option<P<PathParameters>>> for AngleBracketedParameterData {\n     fn into(self) -> Option<P<PathParameters>> {\n         Some(P(PathParameters::AngleBracketed(self)))"}, {"sha": "02112517827a53147fe6ccacf427e399db49c5df", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -30,10 +30,9 @@ pub trait AstBuilder {\n     fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path;\n     fn path_all(&self, sp: Span,\n                 global: bool,\n-                idents: Vec<ast::Ident> ,\n-                lifetimes: Vec<ast::Lifetime>,\n-                types: Vec<P<ast::Ty>>,\n-                bindings: Vec<ast::TypeBinding> )\n+                idents: Vec<ast::Ident>,\n+                parameters: Vec<ast::GenericAngleBracketedParam>,\n+                bindings: Vec<ast::TypeBinding>)\n         -> ast::Path;\n \n     fn qpath(&self, self_type: P<ast::Ty>,\n@@ -43,8 +42,7 @@ pub trait AstBuilder {\n     fn qpath_all(&self, self_type: P<ast::Ty>,\n                 trait_path: ast::Path,\n                 ident: ast::Ident,\n-                lifetimes: Vec<ast::Lifetime>,\n-                types: Vec<P<ast::Ty>>,\n+                parameters: Vec<ast::GenericAngleBracketedParam>,\n                 bindings: Vec<ast::TypeBinding>)\n                 -> (ast::QSelf, ast::Path);\n \n@@ -304,20 +302,19 @@ pub trait AstBuilder {\n \n impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn path(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, false, strs, Vec::new(), Vec::new(), Vec::new())\n+        self.path_all(span, false, strs, Vec::new(), Vec::new())\n     }\n     fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path {\n         self.path(span, vec![id])\n     }\n     fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, true, strs, Vec::new(), Vec::new(), Vec::new())\n+        self.path_all(span, true, strs, Vec::new(), Vec::new())\n     }\n     fn path_all(&self,\n                 span: Span,\n                 global: bool,\n                 mut idents: Vec<ast::Ident> ,\n-                lifetimes: Vec<ast::Lifetime>,\n-                types: Vec<P<ast::Ty>>,\n+                parameters: Vec<ast::GenericAngleBracketedParam>,\n                 bindings: Vec<ast::TypeBinding> )\n                 -> ast::Path {\n         let last_ident = idents.pop().unwrap();\n@@ -326,8 +323,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         segments.extend(idents.into_iter().map(|ident| {\n             ast::PathSegment::from_ident(ident.with_span_pos(span))\n         }));\n-        let parameters = if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n-            ast::AngleBracketedParameterData { lifetimes, types, bindings, span }.into()\n+        let parameters = if !parameters.is_empty() !bindings.is_empty() {\n+            ast::AngleBracketedParameterData { parameters, bindings, span }.into()\n         } else {\n             None\n         };\n@@ -349,7 +346,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n              trait_path: ast::Path,\n              ident: ast::Ident)\n              -> (ast::QSelf, ast::Path) {\n-        self.qpath_all(self_type, trait_path, ident, vec![], vec![], vec![])\n+        self.qpath_all(self_type, trait_path, ident, vec![], vec![])\n     }\n \n     /// Constructs a qualified path.\n@@ -359,13 +356,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                  self_type: P<ast::Ty>,\n                  trait_path: ast::Path,\n                  ident: ast::Ident,\n-                 lifetimes: Vec<ast::Lifetime>,\n-                 types: Vec<P<ast::Ty>>,\n+                 parameters: Vec<ast::GenericAngleBracketedParam>,\n                  bindings: Vec<ast::TypeBinding>)\n                  -> (ast::QSelf, ast::Path) {\n         let mut path = trait_path;\n-        let parameters = if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n-            ast::AngleBracketedParameterData { lifetimes, types, bindings, span: ident.span }.into()\n+        let parameters = if !parameters.is_empty() || !bindings.is_empty() {\n+            ast::AngleBracketedParameterData { parameters, bindings, span: ident.span }.into()\n         } else {\n             None\n         };\n@@ -428,8 +424,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.path_all(DUMMY_SP,\n                           true,\n                           self.std_path(&[\"option\", \"Option\"]),\n-                          Vec::new(),\n-                          vec![ ty ],\n+                          vec![ ast::GenericAngleBracketedParam::Type(ty) ],\n                           Vec::new()))\n     }\n "}, {"sha": "b935425cdd40070718336dd8d16852162778064a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -132,6 +132,10 @@ pub trait Folder : Sized {\n         noop_fold_exprs(es, self)\n     }\n \n+    fn fold_param(&mut self, p: GenericAngleBracketedParam) -> GenericAngleBracketedParam {\n+        noop_fold_param(p, self)\n+    }\n+\n     fn fold_ty(&mut self, t: P<Ty>) -> P<Ty> {\n         noop_fold_ty(t, self)\n     }\n@@ -353,6 +357,19 @@ pub fn noop_fold_ty_binding<T: Folder>(b: TypeBinding, fld: &mut T) -> TypeBindi\n     }\n }\n \n+pub fn noop_fold_param<T: Folder>(p: GenericAngleBracketedParam,\n+                                  fld: &mut T)\n+                                  -> GenericAngleBracketedParam {\n+    match p {\n+        GenericAngleBracketedParam::Lifetime(lt) => {\n+            GenericAngleBracketedParam::Lifetime(noop_fold_lifetime(lt, fld))\n+        }\n+        GenericAngleBracketedParam::Type(ty) => {\n+            GenericAngleBracketedParam::Type(noop_fold_ty(ty, fld))\n+        }\n+    }\n+}\n+\n pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n     t.map(|Ty {id, node, span}| Ty {\n         id: fld.new_id(id),\n@@ -469,9 +486,8 @@ pub fn noop_fold_angle_bracketed_parameter_data<T: Folder>(data: AngleBracketedP\n                                                            fld: &mut T)\n                                                            -> AngleBracketedParameterData\n {\n-    let AngleBracketedParameterData { lifetimes, types, bindings, span } = data;\n-    AngleBracketedParameterData { lifetimes: lifetimes.move_map(|l| noop_fold_lifetime(l, fld)),\n-                                  types: types.move_map(|ty| fld.fold_ty(ty)),\n+    let AngleBracketedParameterData { parameters, bindings, span } = data;\n+    AngleBracketedParameterData { parameters: parameters.move_map(|p| fld.fold_param(p)),\n                                   bindings: bindings.move_map(|b| fld.fold_ty_binding(b)),\n                                   span: fld.new_span(span) }\n }"}, {"sha": "c205e9376110597930712a36165cb1c9dadb836e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -22,6 +22,7 @@ use ast::{Expr, ExprKind, RangeLimits};\n use ast::{Field, FnDecl};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n use ast::GenericParam;\n+use ast::GenericAngleBracketedParam;\n use ast::{Ident, ImplItem, IsAuto, Item, ItemKind};\n use ast::{Label, Lifetime, LifetimeDef, Lit, LitKind};\n use ast::Local;\n@@ -1971,10 +1972,10 @@ impl<'a> Parser<'a> {\n \n             let parameters = if self.eat_lt() {\n                 // `<'a, T, A = U>`\n-                let (lifetimes, types, bindings) = self.parse_generic_args()?;\n+                let (parameters, bindings) = self.parse_generic_args()?;\n                 self.expect_gt()?;\n                 let span = lo.to(self.prev_span);\n-                AngleBracketedParameterData { lifetimes, types, bindings, span }.into()\n+                AngleBracketedParameterData { parameters, bindings, span }.into()\n             } else {\n                 // `(T, U) -> R`\n                 self.bump(); // `(`\n@@ -4936,16 +4937,16 @@ impl<'a> Parser<'a> {\n \n     /// Parses (possibly empty) list of lifetime and type arguments and associated type bindings,\n     /// possibly including trailing comma.\n-    fn parse_generic_args(&mut self) -> PResult<'a, (Vec<Lifetime>, Vec<P<Ty>>, Vec<TypeBinding>)> {\n-        let mut lifetimes = Vec::new();\n-        let mut types = Vec::new();\n+    fn parse_generic_args(&mut self)\n+                          -> PResult<'a, (Vec<GenericAngleBracketedParam>, Vec<TypeBinding>)> {\n+        let mut parameters = Vec::new();\n         let mut bindings = Vec::new();\n         let mut seen_type = false;\n         let mut seen_binding = false;\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n-                lifetimes.push(self.expect_lifetime());\n+                parameters.push(GenericAngleBracketedParam::Lifetime(self.expect_lifetime()));\n                 if seen_type || seen_binding {\n                     self.span_err(self.prev_span,\n                         \"lifetime parameters must be declared prior to type parameters\");\n@@ -4965,11 +4966,12 @@ impl<'a> Parser<'a> {\n                 seen_binding = true;\n             } else if self.check_type() {\n                 // Parse type argument.\n-                types.push(self.parse_ty()?);\n+                let ty_param = self.parse_ty()?;\n                 if seen_binding {\n-                    self.span_err(types[types.len() - 1].span,\n+                    self.span_err(ty_param.span,\n                         \"type parameters must be declared prior to associated type bindings\");\n                 }\n+                parameters.push(GenericAngleBracketedParam::Type(ty_param));\n                 seen_type = true;\n             } else {\n                 break\n@@ -4979,7 +4981,7 @@ impl<'a> Parser<'a> {\n                 break\n             }\n         }\n-        Ok((lifetimes, types, bindings))\n+        Ok((parameters, bindings))\n     }\n \n     /// Parses an optional `where` clause and places it in `generics`."}, {"sha": "dc204e3d0ef6cfe461dc310f04511389b71a9e50", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -13,7 +13,7 @@ pub use self::AnnNode::*;\n use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n-use ast::{Attribute, MacDelimiter};\n+use ast::{Attribute, MacDelimiter, GenericAngleBracketedParam};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n use codemap::{self, CodeMap};\n@@ -1017,6 +1017,13 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n+    pub fn print_param(&mut self, param: &GenericAngleBracketedParam) -> io::Result<()> {\n+        match param {\n+            GenericAngleBracketedParam::Lifetime(lt) => self.print_lifetime(lt),\n+            GenericAngleBracketedParam::Type(ty) => self.print_type(ty),\n+        }\n+    }\n+\n     pub fn print_type(&mut self, ty: &ast::Ty) -> io::Result<()> {\n         self.maybe_print_comment(ty.span.lo())?;\n         self.ibox(0)?;\n@@ -2474,25 +2481,9 @@ impl<'a> State<'a> {\n             ast::PathParameters::AngleBracketed(ref data) => {\n                 self.s.word(\"<\")?;\n \n-                let mut comma = false;\n-                for lifetime in &data.lifetimes {\n-                    if comma {\n-                        self.word_space(\",\")?\n-                    }\n-                    self.print_lifetime(lifetime)?;\n-                    comma = true;\n-                }\n+                self.commasep(Inconsistent, &data.parameters, |s, p| s.print_param(p))?;\n \n-                if !data.types.is_empty() {\n-                    if comma {\n-                        self.word_space(\",\")?\n-                    }\n-                    self.commasep(\n-                        Inconsistent,\n-                        &data.types,\n-                        |s, ty| s.print_type(ty))?;\n-                        comma = true;\n-                }\n+                let mut comma = data.parameters.len() != 0;\n \n                 for binding in data.bindings.iter() {\n                     if comma {"}, {"sha": "a4b9e3d7d4519f1dc995732100e6ff0ac5b9a963", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -387,8 +387,8 @@ pub fn walk_path_parameters<'a, V>(visitor: &mut V,\n {\n     match *path_parameters {\n         PathParameters::AngleBracketed(ref data) => {\n-            walk_list!(visitor, visit_ty, &data.types);\n-            walk_list!(visitor, visit_lifetime, &data.lifetimes);\n+            walk_list!(visitor, visit_lifetime, data.lifetimes());\n+            walk_list!(visitor, visit_ty, data.types());\n             walk_list!(visitor, visit_assoc_type_binding, &data.bindings);\n         }\n         PathParameters::Parenthesized(ref data) => {"}, {"sha": "3a83922bc90c11591fb5407ca549115c11cbdc5a", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -13,6 +13,7 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, Generics, ItemKind, MetaItem, VariantData};\n+use syntax::ast::GenericAngleBracketedParam;\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n@@ -123,7 +124,7 @@ fn cs_clone_shallow(name: &str,\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[\"clone\", helper_name]),\n-                                        vec![], vec![ty], vec![]);\n+                                        vec![GenericAngleBracketedParam::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {"}, {"sha": "61b7e5b482d7614b3635354b9500ec9db27a964b", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -12,7 +12,7 @@ use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{self, Expr, MetaItem};\n+use syntax::ast::{self, Expr, MetaItem, GenericAngleBracketedParam};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n@@ -62,7 +62,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[\"cmp\", helper_name]),\n-                                        vec![], vec![ty], vec![]);\n+                                        vec![GenericAngleBracketedParam::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &ast::VariantData) {"}, {"sha": "7ab0acda4080a4ce2f210db8213acefbbcc62c99", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -192,10 +192,8 @@ use std::collections::HashSet;\n use std::vec;\n \n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{\n-    self, BinOpKind, EnumDef, Expr, GenericParam, Generics, Ident, PatKind, VariantData\n-};\n-\n+use syntax::ast::{self, BinOpKind, EnumDef, Expr, GenericParam, Generics, Ident, PatKind};\n+use syntax::ast::{VariantData, GenericAngleBracketedParam};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n@@ -667,7 +665,7 @@ impl<'a> TraitDef<'a> {\n         let trait_ref = cx.trait_ref(trait_path);\n \n         // Create the type parameters on the `self` path.\n-        let self_ty_params = generics.params\n+        let self_ty_params: Vec<P<ast::Ty>> = generics.params\n             .iter()\n             .filter_map(|param| match *param {\n                 GenericParam::Type(ref ty_param)\n@@ -684,12 +682,17 @@ impl<'a> TraitDef<'a> {\n             })\n             .collect();\n \n+        let self_params = self_lifetimes.into_iter()\n+                                        .map(|lt| GenericAngleBracketedParam::Lifetime(lt))\n+                                        .chain(self_ty_params.into_iter().map(|ty|\n+                                            GenericAngleBracketedParam::Type(ty)))\n+                                        .collect();\n+\n         // Create the type of `self`.\n         let self_type = cx.ty_path(cx.path_all(self.span,\n                                                false,\n                                                vec![type_ident],\n-                                               self_lifetimes,\n-                                               self_ty_params,\n+                                               self_params,\n                                                Vec::new()));\n \n         let attr = cx.attribute(self.span,"}, {"sha": "6387f2d8d98f04a15dc1712fff2e1160b1fe4d17", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -15,7 +15,7 @@ pub use self::PtrTy::*;\n pub use self::Ty::*;\n \n use syntax::ast;\n-use syntax::ast::{Expr, GenericParam, Generics, Ident, SelfKind};\n+use syntax::ast::{Expr, GenericParam, Generics, Ident, SelfKind, GenericAngleBracketedParam};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::codemap::{respan, DUMMY_SP};\n@@ -86,15 +86,20 @@ impl<'a> Path<'a> {\n                    -> ast::Path {\n         let mut idents = self.path.iter().map(|s| cx.ident_of(*s)).collect();\n         let lt = mk_lifetimes(cx, span, &self.lifetime);\n-        let tys = self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n+        let tys: Vec<P<ast::Ty>> =\n+            self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n+        let params = lt.into_iter()\n+                       .map(|lt| GenericAngleBracketedParam::Lifetime(lt))\n+                       .chain(tys.into_iter().map(|ty| GenericAngleBracketedParam::Type(ty)))\n+                       .collect();\n \n         match self.kind {\n-            PathKind::Global => cx.path_all(span, true, idents, lt, tys, Vec::new()),\n-            PathKind::Local => cx.path_all(span, false, idents, lt, tys, Vec::new()),\n+            PathKind::Global => cx.path_all(span, true, idents, params, Vec::new()),\n+            PathKind::Local => cx.path_all(span, false, idents, params, Vec::new()),\n             PathKind::Std => {\n                 let def_site = DUMMY_SP.apply_mark(cx.current_expansion.mark);\n                 idents.insert(0, Ident::new(keywords::DollarCrate.name(), def_site));\n-                cx.path_all(span, false, idents, lt, tys, Vec::new())\n+                cx.path_all(span, false, idents, params, Vec::new())\n             }\n         }\n \n@@ -184,7 +189,7 @@ impl<'a> Ty<'a> {\n                    -> ast::Path {\n         match *self {\n             Self_ => {\n-                let self_params = self_generics.params\n+                let ty_params: Vec<P<ast::Ty>> = self_generics.params\n                     .iter()\n                     .filter_map(|param| match *param {\n                         GenericParam::Type(ref ty_param) => Some(cx.ty_ident(span, ty_param.ident)),\n@@ -200,11 +205,16 @@ impl<'a> Ty<'a> {\n                     })\n                     .collect();\n \n+                let params = lifetimes.into_iter()\n+                                      .map(|lt| GenericAngleBracketedParam::Lifetime(lt))\n+                                      .chain(ty_params.into_iter().map(|ty|\n+                                            GenericAngleBracketedParam::Type(ty)))\n+                                      .collect();\n+\n                 cx.path_all(span,\n                             false,\n                             vec![self_ty],\n-                            lifetimes,\n-                            self_params,\n+                            params,\n                             Vec::new())\n             }\n             Literal(ref p) => p.to_path(cx, span, self_ty, self_generics),"}, {"sha": "c904cfcfdbff4e95d3c161566e99db1c3ed92402", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494859e8dde5080534e94aba6d98affb921552f8/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=494859e8dde5080534e94aba6d98affb921552f8", "patch": "@@ -13,7 +13,7 @@\n // interface.\n //\n \n-use syntax::ast::{self, Ident};\n+use syntax::ast::{self, Ident, GenericAngleBracketedParam};\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n@@ -39,8 +39,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n             cx.expr_path(cx.path_all(sp,\n                                      true,\n                                      cx.std_path(&[\"option\", \"Option\", \"None\"]),\n-                                     Vec::new(),\n-                                     vec![cx.ty_rptr(sp,\n+                                     vec![GenericAngleBracketedParam::Type(cx.ty_rptr(sp,\n                                                      cx.ty_ident(sp, Ident::from_str(\"str\")),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable)],"}]}