{"sha": "f2043989ca5fc829de1bed045460366a030e8904", "node_id": "C_kwDOAAsO6NoAKGYyMDQzOTg5Y2E1ZmM4MjlkZTFiZWQwNDU0NjAzNjZhMDMwZTg5MDQ", "commit": {"author": {"name": "TennyZhuang", "email": "zty0826@gmail.com", "date": "2022-10-02T09:53:58Z"}, "committer": {"name": "TennyZhuang", "email": "zty0826@gmail.com", "date": "2022-10-02T15:02:13Z"}, "message": "ignore the lint on some test files\n\nSigned-off-by: TennyZhuang <zty0826@gmail.com>", "tree": {"sha": "269f4ec348afd80d077cf41039ebce2a3c15a2ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/269f4ec348afd80d077cf41039ebce2a3c15a2ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2043989ca5fc829de1bed045460366a030e8904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2043989ca5fc829de1bed045460366a030e8904", "html_url": "https://github.com/rust-lang/rust/commit/f2043989ca5fc829de1bed045460366a030e8904", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2043989ca5fc829de1bed045460366a030e8904/comments", "author": {"login": "TennyZhuang", "id": 9161438, "node_id": "MDQ6VXNlcjkxNjE0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/9161438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TennyZhuang", "html_url": "https://github.com/TennyZhuang", "followers_url": "https://api.github.com/users/TennyZhuang/followers", "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}", "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions", "organizations_url": "https://api.github.com/users/TennyZhuang/orgs", "repos_url": "https://api.github.com/users/TennyZhuang/repos", "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/TennyZhuang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TennyZhuang", "id": 9161438, "node_id": "MDQ6VXNlcjkxNjE0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/9161438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TennyZhuang", "html_url": "https://github.com/TennyZhuang", "followers_url": "https://api.github.com/users/TennyZhuang/followers", "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}", "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions", "organizations_url": "https://api.github.com/users/TennyZhuang/orgs", "repos_url": "https://api.github.com/users/TennyZhuang/repos", "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/TennyZhuang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081f73954b24e87bbbd95ed20f9a504680b21d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/081f73954b24e87bbbd95ed20f9a504680b21d46", "html_url": "https://github.com/rust-lang/rust/commit/081f73954b24e87bbbd95ed20f9a504680b21d46"}], "stats": {"total": 174, "additions": 93, "deletions": 81}, "files": [{"sha": "b9e3d89c2b29df97ac35c61a6d85f66238cfa9e3", "filename": "tests/ui/floating_point_exp.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_exp.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_exp.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.fixed?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::imprecise_flops)]\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let x = 2f32;"}, {"sha": "ef008dd9be0554c0263346fab06c8bdc180569da", "filename": "tests/ui/floating_point_exp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.rs?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::imprecise_flops)]\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let x = 2f32;"}, {"sha": "b92fae56e421c778af67b887baf0263861e14202", "filename": "tests/ui/floating_point_exp.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_exp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_exp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.stderr?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,31 +1,31 @@\n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:6:13\n+  --> $DIR/floating_point_exp.rs:7:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n    |\n    = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:7:13\n+  --> $DIR/floating_point_exp.rs:8:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:8:13\n+  --> $DIR/floating_point_exp.rs:9:13\n    |\n LL |     let _ = (x as f32).exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:14:13\n+  --> $DIR/floating_point_exp.rs:15:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:15:13\n+  --> $DIR/floating_point_exp.rs:16:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`"}, {"sha": "ee540646160074b87a8b5dd11128e525f9e0424c", "filename": "tests/ui/floating_point_log.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_log.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_log.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.fixed?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(dead_code, clippy::double_parens)]\n+#![allow(dead_code, clippy::double_parens, clippy::unnecessary_cast)]\n #![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n \n const TWO: f32 = 2.0;"}, {"sha": "0590670a50bc799fc6ec2e1bea696630dbc6d627", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(dead_code, clippy::double_parens)]\n+#![allow(dead_code, clippy::double_parens, clippy::unnecessary_cast)]\n #![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n \n const TWO: f32 = 2.0;"}, {"sha": "7347bf72cbea6bc2346f5cdb07bc20ba02265191", "filename": "tests/ui/floating_point_logbase.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_logbase.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_logbase.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.fixed?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::suboptimal_flops)]\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let x = 3f32;"}, {"sha": "ba5b8d406928396e90caa41f79f944bc794057b8", "filename": "tests/ui/floating_point_logbase.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_logbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_logbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.rs?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::suboptimal_flops)]\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let x = 3f32;"}, {"sha": "9d736b5e1a2748ef7e46769220391cdcf99c423a", "filename": "tests/ui/floating_point_logbase.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_logbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_logbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.stderr?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,31 +1,31 @@\n error: log base can be expressed more clearly\n-  --> $DIR/floating_point_logbase.rs:7:13\n+  --> $DIR/floating_point_logbase.rs:8:13\n    |\n LL |     let _ = x.ln() / y.ln();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: log base can be expressed more clearly\n-  --> $DIR/floating_point_logbase.rs:8:13\n+  --> $DIR/floating_point_logbase.rs:9:13\n    |\n LL |     let _ = (x as f32).ln() / y.ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).log(y)`\n \n error: log base can be expressed more clearly\n-  --> $DIR/floating_point_logbase.rs:9:13\n+  --> $DIR/floating_point_logbase.rs:10:13\n    |\n LL |     let _ = x.log2() / y.log2();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: log base can be expressed more clearly\n-  --> $DIR/floating_point_logbase.rs:10:13\n+  --> $DIR/floating_point_logbase.rs:11:13\n    |\n LL |     let _ = x.log10() / y.log10();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: log base can be expressed more clearly\n-  --> $DIR/floating_point_logbase.rs:11:13\n+  --> $DIR/floating_point_logbase.rs:12:13\n    |\n LL |     let _ = x.log(5f32) / y.log(5f32);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`"}, {"sha": "f7f93de29577d0086a0845af15d93f8a95768caa", "filename": "tests/ui/floating_point_powf.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let x = 3f32;"}, {"sha": "499fc0e15e47832d8a360037beeef00cce7b147c", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let x = 3f32;"}, {"sha": "7c9d50db2f78e1e314fe0274d1622de48a2ab807", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,189 +1,189 @@\n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:6:13\n+  --> $DIR/floating_point_powf.rs:7:13\n    |\n LL |     let _ = 2f32.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:7:13\n+  --> $DIR/floating_point_powf.rs:8:13\n    |\n LL |     let _ = 2f32.powf(3.1);\n    |             ^^^^^^^^^^^^^^ help: consider using: `3.1f32.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:8:13\n+  --> $DIR/floating_point_powf.rs:9:13\n    |\n LL |     let _ = 2f32.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f32).exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:9:13\n+  --> $DIR/floating_point_powf.rs:10:13\n    |\n LL |     let _ = std::f32::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:10:13\n+  --> $DIR/floating_point_powf.rs:11:13\n    |\n LL |     let _ = std::f32::consts::E.powf(3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f32.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:11:13\n+  --> $DIR/floating_point_powf.rs:12:13\n    |\n LL |     let _ = std::f32::consts::E.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f32).exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:12:13\n+  --> $DIR/floating_point_powf.rs:13:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:13:13\n+  --> $DIR/floating_point_powf.rs:14:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n    |\n    = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:14:13\n+  --> $DIR/floating_point_powf.rs:15:13\n    |\n LL |     let _ = (x as f32).powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:15:13\n+  --> $DIR/floating_point_powf.rs:16:13\n    |\n LL |     let _ = x.powf(3.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:16:13\n+  --> $DIR/floating_point_powf.rs:17:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:17:13\n+  --> $DIR/floating_point_powf.rs:18:13\n    |\n LL |     let _ = x.powf(16_777_215.0);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(16_777_215)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:18:13\n+  --> $DIR/floating_point_powf.rs:19:13\n    |\n LL |     let _ = x.powf(-16_777_215.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-16_777_215)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:19:13\n+  --> $DIR/floating_point_powf.rs:20:13\n    |\n LL |     let _ = (x as f32).powf(-16_777_215.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).powi(-16_777_215)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:20:13\n+  --> $DIR/floating_point_powf.rs:21:13\n    |\n LL |     let _ = (x as f32).powf(3.0);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).powi(3)`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:21:13\n+  --> $DIR/floating_point_powf.rs:22:13\n    |\n LL |     let _ = (1.5_f32 + 1.0).powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(1.5_f32 + 1.0).cbrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:22:13\n+  --> $DIR/floating_point_powf.rs:23:13\n    |\n LL |     let _ = 1.5_f64.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.5_f64.cbrt()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:23:13\n+  --> $DIR/floating_point_powf.rs:24:13\n    |\n LL |     let _ = 1.5_f64.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.5_f64.sqrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:24:13\n+  --> $DIR/floating_point_powf.rs:25:13\n    |\n LL |     let _ = 1.5_f64.powf(3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `1.5_f64.powi(3)`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:33:13\n+  --> $DIR/floating_point_powf.rs:34:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:34:13\n+  --> $DIR/floating_point_powf.rs:35:13\n    |\n LL |     let _ = 2f64.powf(3.1);\n    |             ^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:35:13\n+  --> $DIR/floating_point_powf.rs:36:13\n    |\n LL |     let _ = 2f64.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:36:13\n+  --> $DIR/floating_point_powf.rs:37:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:37:13\n+  --> $DIR/floating_point_powf.rs:38:13\n    |\n LL |     let _ = std::f64::consts::E.powf(3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:38:13\n+  --> $DIR/floating_point_powf.rs:39:13\n    |\n LL |     let _ = std::f64::consts::E.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:39:13\n+  --> $DIR/floating_point_powf.rs:40:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:40:13\n+  --> $DIR/floating_point_powf.rs:41:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:41:13\n+  --> $DIR/floating_point_powf.rs:42:13\n    |\n LL |     let _ = x.powf(3.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:42:13\n+  --> $DIR/floating_point_powf.rs:43:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:43:13\n+  --> $DIR/floating_point_powf.rs:44:13\n    |\n LL |     let _ = x.powf(-2_147_483_648.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-2_147_483_648)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:44:13\n+  --> $DIR/floating_point_powf.rs:45:13\n    |\n LL |     let _ = x.powf(2_147_483_647.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2_147_483_647)`"}, {"sha": "68c81316930ceb6561578c2becd51068ceb32f18", "filename": "tests/ui/floating_point_powi.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::suboptimal_flops)]\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let one = 1;"}, {"sha": "96101a487ee88e1199e3fb2f3d26a64b280e2ab3", "filename": "tests/ui/floating_point_powi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::suboptimal_flops)]\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let one = 1;"}, {"sha": "a651954a5f81b5f9cfed4657c91b7816ce5131fc", "filename": "tests/ui/floating_point_powi.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,31 +1,31 @@\n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:9:13\n+  --> $DIR/floating_point_powi.rs:10:13\n    |\n LL |     let _ = x.powi(2) + y;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:10:13\n+  --> $DIR/floating_point_powi.rs:11:13\n    |\n LL |     let _ = x + y.powi(2);\n    |             ^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:11:13\n+  --> $DIR/floating_point_powi.rs:12:13\n    |\n LL |     let _ = x + (y as f32).powi(2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(y as f32).mul_add(y as f32, x)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:12:13\n+  --> $DIR/floating_point_powi.rs:13:13\n    |\n LL |     let _ = (x.powi(2) + y).sqrt();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:13:13\n+  --> $DIR/floating_point_powi.rs:14:13\n    |\n LL |     let _ = (x + y.powi(2)).sqrt();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`"}, {"sha": "e7f8cd878ca789076f28a8aff64eb95cdd336d4c", "filename": "tests/ui/manual_bits.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fmanual_bits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fmanual_bits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.fixed?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -6,7 +6,8 @@\n     clippy::useless_conversion,\n     path_statements,\n     unused_must_use,\n-    clippy::unnecessary_operation\n+    clippy::unnecessary_operation,\n+    clippy::unnecessary_cast\n )]\n \n use std::mem::{size_of, size_of_val};"}, {"sha": "7b1d15495287a6327058245c5121e7a348d9b1b4", "filename": "tests/ui/manual_bits.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.rs?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -6,7 +6,8 @@\n     clippy::useless_conversion,\n     path_statements,\n     unused_must_use,\n-    clippy::unnecessary_operation\n+    clippy::unnecessary_operation,\n+    clippy::unnecessary_cast\n )]\n \n use std::mem::{size_of, size_of_val};"}, {"sha": "652fafbc41d8107e717bc51ddc75adaf2478b10e", "filename": "tests/ui/manual_bits.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fmanual_bits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fmanual_bits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.stderr?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,175 +1,175 @@\n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:15:5\n+  --> $DIR/manual_bits.rs:16:5\n    |\n LL |     size_of::<i8>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `i8::BITS as usize`\n    |\n    = note: `-D clippy::manual-bits` implied by `-D warnings`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:16:5\n+  --> $DIR/manual_bits.rs:17:5\n    |\n LL |     size_of::<i16>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i16::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:17:5\n+  --> $DIR/manual_bits.rs:18:5\n    |\n LL |     size_of::<i32>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i32::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:18:5\n+  --> $DIR/manual_bits.rs:19:5\n    |\n LL |     size_of::<i64>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i64::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:19:5\n+  --> $DIR/manual_bits.rs:20:5\n    |\n LL |     size_of::<i128>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `i128::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:20:5\n+  --> $DIR/manual_bits.rs:21:5\n    |\n LL |     size_of::<isize>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `isize::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:22:5\n+  --> $DIR/manual_bits.rs:23:5\n    |\n LL |     size_of::<u8>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `u8::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:23:5\n+  --> $DIR/manual_bits.rs:24:5\n    |\n LL |     size_of::<u16>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u16::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:24:5\n+  --> $DIR/manual_bits.rs:25:5\n    |\n LL |     size_of::<u32>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u32::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:25:5\n+  --> $DIR/manual_bits.rs:26:5\n    |\n LL |     size_of::<u64>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u64::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:26:5\n+  --> $DIR/manual_bits.rs:27:5\n    |\n LL |     size_of::<u128>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:27:5\n+  --> $DIR/manual_bits.rs:28:5\n    |\n LL |     size_of::<usize>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `usize::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:29:5\n+  --> $DIR/manual_bits.rs:30:5\n    |\n LL |     8 * size_of::<i8>();\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `i8::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:30:5\n+  --> $DIR/manual_bits.rs:31:5\n    |\n LL |     8 * size_of::<i16>();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i16::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:31:5\n+  --> $DIR/manual_bits.rs:32:5\n    |\n LL |     8 * size_of::<i32>();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i32::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:32:5\n+  --> $DIR/manual_bits.rs:33:5\n    |\n LL |     8 * size_of::<i64>();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i64::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:33:5\n+  --> $DIR/manual_bits.rs:34:5\n    |\n LL |     8 * size_of::<i128>();\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `i128::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:34:5\n+  --> $DIR/manual_bits.rs:35:5\n    |\n LL |     8 * size_of::<isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `isize::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:36:5\n+  --> $DIR/manual_bits.rs:37:5\n    |\n LL |     8 * size_of::<u8>();\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `u8::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:37:5\n+  --> $DIR/manual_bits.rs:38:5\n    |\n LL |     8 * size_of::<u16>();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u16::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:38:5\n+  --> $DIR/manual_bits.rs:39:5\n    |\n LL |     8 * size_of::<u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u32::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:39:5\n+  --> $DIR/manual_bits.rs:40:5\n    |\n LL |     8 * size_of::<u64>();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u64::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:40:5\n+  --> $DIR/manual_bits.rs:41:5\n    |\n LL |     8 * size_of::<u128>();\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:41:5\n+  --> $DIR/manual_bits.rs:42:5\n    |\n LL |     8 * size_of::<usize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `usize::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:51:5\n+  --> $DIR/manual_bits.rs:52:5\n    |\n LL |     size_of::<Word>() * 8;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `Word::BITS as usize`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:55:18\n+  --> $DIR/manual_bits.rs:56:18\n    |\n LL |     let _: u32 = (size_of::<u128>() * 8) as u32;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:56:18\n+  --> $DIR/manual_bits.rs:57:18\n    |\n LL |     let _: u32 = (size_of::<u128>() * 8).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:57:13\n+  --> $DIR/manual_bits.rs:58:13\n    |\n LL |     let _ = (size_of::<u128>() * 8).pow(5);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(u128::BITS as usize)`\n \n error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n-  --> $DIR/manual_bits.rs:58:14\n+  --> $DIR/manual_bits.rs:59:14\n    |\n LL |     let _ = &(size_of::<u128>() * 8);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(u128::BITS as usize)`"}, {"sha": "c57e2990fb9519871024e969ab5d8fecdb08b2fd", "filename": "tests/ui/ptr_offset_with_cast.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fptr_offset_with_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fptr_offset_with_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.fixed?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let vec = vec![b'a', b'b', b'c'];"}, {"sha": "3de7997acddda2901c2e245715e65f555a18abff", "filename": "tests/ui/ptr_offset_with_cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.rs?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![allow(clippy::unnecessary_cast)]\n \n fn main() {\n     let vec = vec![b'a', b'b', b'c'];"}, {"sha": "3ba40593d6444148f63ee18bfd709af4e485d89e", "filename": "tests/ui/ptr_offset_with_cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fptr_offset_with_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2043989ca5fc829de1bed045460366a030e8904/tests%2Fui%2Fptr_offset_with_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.stderr?ref=f2043989ca5fc829de1bed045460366a030e8904", "patch": "@@ -1,13 +1,13 @@\n error: use of `offset` with a `usize` casted to an `isize`\n-  --> $DIR/ptr_offset_with_cast.rs:12:17\n+  --> $DIR/ptr_offset_with_cast.rs:13:17\n    |\n LL |         let _ = ptr.offset(offset_usize as isize);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.add(offset_usize)`\n    |\n    = note: `-D clippy::ptr-offset-with-cast` implied by `-D warnings`\n \n error: use of `wrapping_offset` with a `usize` casted to an `isize`\n-  --> $DIR/ptr_offset_with_cast.rs:16:17\n+  --> $DIR/ptr_offset_with_cast.rs:17:17\n    |\n LL |         let _ = ptr.wrapping_offset(offset_usize as isize);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.wrapping_add(offset_usize)`"}]}