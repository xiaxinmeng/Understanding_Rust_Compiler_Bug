{"sha": "e6aa92c4325e3da9a698010bb88e3cdb240ce142", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YWE5MmM0MzI1ZTNkYTlhNjk4MDEwYmI4OGUzY2RiMjQwY2UxNDI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-21T16:41:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-21T18:58:53Z"}, "message": "trans: Make names of internal symbols independent of CGU translation order.\n\nEvery codegen unit gets its own local counter for generating new symbol\nnames. This makes bitcode and object files reproducible at the binary\nlevel even when incremental compilation is used.", "tree": {"sha": "c966a2fc61294ba08618807e0e7f4e1912f4a50e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c966a2fc61294ba08618807e0e7f4e1912f4a50e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6aa92c4325e3da9a698010bb88e3cdb240ce142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6aa92c4325e3da9a698010bb88e3cdb240ce142", "html_url": "https://github.com/rust-lang/rust/commit/e6aa92c4325e3da9a698010bb88e3cdb240ce142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6aa92c4325e3da9a698010bb88e3cdb240ce142/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5b6467c33f7f86b4964b08b37726f7611a8f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5b6467c33f7f86b4964b08b37726f7611a8f0c", "html_url": "https://github.com/rust-lang/rust/commit/da5b6467c33f7f86b4964b08b37726f7611a8f0c"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "76b778fb61f258b9154eac81cc2f70dddc5d31aa", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6aa92c4325e3da9a698010bb88e3cdb240ce142/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6aa92c4325e3da9a698010bb88e3cdb240ce142/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=e6aa92c4325e3da9a698010bb88e3cdb240ce142", "patch": "@@ -799,9 +799,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> Va\n                                                 s.as_ptr() as *const c_char,\n                                                 s.len() as c_uint,\n                                                 !null_terminated as Bool);\n-\n-        let gsym = token::gensym(\"str\");\n-        let sym = format!(\"str{}\", gsym.0);\n+        let sym = cx.generate_local_symbol_name(\"str\");\n         let g = declare::define_global(cx, &sym[..], val_ty(sc)).unwrap_or_else(||{\n             bug!(\"symbol `{}` is already defined\", sym);\n         });"}, {"sha": "0dc10aa7759ea8bee754ed1f9f792ec61735ee60", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6aa92c4325e3da9a698010bb88e3cdb240ce142/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6aa92c4325e3da9a698010bb88e3cdb240ce142/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=e6aa92c4325e3da9a698010bb88e3cdb240ce142", "patch": "@@ -30,7 +30,6 @@ use rustc::hir;\n use std::ffi::{CStr, CString};\n use syntax::ast;\n use syntax::attr;\n-use syntax::parse::token;\n \n pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef {\n     unsafe {\n@@ -44,10 +43,7 @@ pub fn addr_of_mut(ccx: &CrateContext,\n                    kind: &str)\n                     -> ValueRef {\n     unsafe {\n-        // FIXME: this totally needs a better name generation scheme, perhaps a simple global\n-        // counter? Also most other uses of gensym in trans.\n-        let gsym = token::gensym(\"_\");\n-        let name = format!(\"{}{}\", kind, gsym.0);\n+        let name = ccx.generate_local_symbol_name(kind);\n         let gv = declare::define_global(ccx, &name[..], val_ty(cv)).unwrap_or_else(||{\n             bug!(\"symbol `{}` is already defined\", name);\n         });"}, {"sha": "2a72d42296d19b733c05fb300a967af1d43cb598", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e6aa92c4325e3da9a698010bb88e3cdb240ce142/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6aa92c4325e3da9a698010bb88e3cdb240ce142/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=e6aa92c4325e3da9a698010bb88e3cdb240ce142", "patch": "@@ -166,6 +166,9 @@ pub struct LocalCrateContext<'tcx> {\n     type_of_depth: Cell<usize>,\n \n     symbol_map: Rc<SymbolMap<'tcx>>,\n+\n+    /// A counter that is used for generating local symbol names\n+    local_gen_sym_counter: Cell<usize>,\n }\n \n // Implement DepTrackingMapConfig for `trait_cache`\n@@ -688,6 +691,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 n_llvm_insns: Cell::new(0),\n                 type_of_depth: Cell::new(0),\n                 symbol_map: symbol_map,\n+                local_gen_sym_counter: Cell::new(0),\n             };\n \n             let (int_type, opaque_vec_type, str_slice_ty, mut local_ccx) = {\n@@ -1021,6 +1025,16 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     pub fn empty_substs_for_def_id(&self, item_def_id: DefId) -> &'tcx Substs<'tcx> {\n         self.shared().empty_substs_for_def_id(item_def_id)\n     }\n+\n+    /// Generate a new symbol name with the given prefix. This symbol name must\n+    /// only be used for definitions with `internal` or `private` linkage.\n+    pub fn generate_local_symbol_name(&self, prefix: &str) -> String {\n+        let idx = self.local().local_gen_sym_counter.get();\n+        self.local().local_gen_sym_counter.set(idx + 1);\n+        // Include a '.' character, so there can be no accidental conflicts with\n+        // user defined names\n+        format!(\"{}.{}\", prefix, idx)\n+    }\n }\n \n pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'tcx>);"}]}