{"sha": "2fd15442f2f1c798718242eaa9817531a53c2134", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDE1NDQyZjJmMWM3OTg3MTgyNDJlYWE5ODE3NTMxYTUzYzIxMzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T17:03:38Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T17:00:01Z"}, "message": "ast: move Generics into AssocItemKinds", "tree": {"sha": "5fefb30a58a7ad8ba4acbc124e360fc6ec4bbd3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fefb30a58a7ad8ba4acbc124e360fc6ec4bbd3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd15442f2f1c798718242eaa9817531a53c2134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd15442f2f1c798718242eaa9817531a53c2134", "html_url": "https://github.com/rust-lang/rust/commit/2fd15442f2f1c798718242eaa9817531a53c2134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd15442f2f1c798718242eaa9817531a53c2134/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "html_url": "https://github.com/rust-lang/rust/commit/dbef35309d10bed2f09cd55b3e9ea980a58c62aa"}], "stats": {"total": 318, "additions": 155, "deletions": 163}, "files": [{"sha": "073f0c6bc4775c5f91f7492fc6bfd9fa94b2e3e0", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -760,31 +760,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(ref ty, ref default) => {\n-                let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n-                (\n-                    generics,\n-                    hir::TraitItemKind::Const(\n-                        ty,\n-                        default.as_ref().map(|x| self.lower_const_body(i.span, Some(x))),\n-                    ),\n-                )\n+                let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n+                (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n             }\n-            AssocItemKind::Fn(ref sig, None) => {\n+            AssocItemKind::Fn(ref sig, ref generics, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n-                    self.lower_method_sig(&i.generics, sig, trait_item_def_id, false, None);\n+                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n-            AssocItemKind::Fn(ref sig, Some(ref body)) => {\n+            AssocItemKind::Fn(ref sig, ref generics, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n-                    self.lower_method_sig(&i.generics, sig, trait_item_def_id, false, None);\n+                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n-            AssocItemKind::TyAlias(ref bounds, ref default) => {\n+            AssocItemKind::TyAlias(ref generics, ref bounds, ref default) => {\n                 let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n-                let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n+                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = hir::TraitItemKind::Type(\n                     self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n                     ty,\n@@ -806,10 +800,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n-        let (kind, has_default) = match i.kind {\n-            AssocItemKind::Const(_, ref default) => (hir::AssocItemKind::Const, default.is_some()),\n-            AssocItemKind::TyAlias(_, ref default) => (hir::AssocItemKind::Type, default.is_some()),\n-            AssocItemKind::Fn(ref sig, ref default) => {\n+        let (kind, has_default) = match &i.kind {\n+            AssocItemKind::Const(_, default) => (hir::AssocItemKind::Const, default.is_some()),\n+            AssocItemKind::TyAlias(_, _, default) => (hir::AssocItemKind::Type, default.is_some()),\n+            AssocItemKind::Fn(sig, _, default) => {\n                 (hir::AssocItemKind::Method { has_self: sig.decl.has_self() }, default.is_some())\n             }\n             AssocItemKind::Macro(..) => unimplemented!(),\n@@ -833,21 +827,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(ref ty, ref expr) => {\n-                let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 (\n-                    generics,\n+                    hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n                 )\n             }\n-            AssocItemKind::Fn(ref sig, ref body) => {\n+            AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n                 self.current_item = Some(i.span);\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n                     self.lower_maybe_async_body(i.span, &sig.decl, asyncness, body.as_deref());\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n                 let (generics, sig) = self.lower_method_sig(\n-                    &i.generics,\n+                    generics,\n                     sig,\n                     impl_item_def_id,\n                     impl_trait_return_allow,\n@@ -856,8 +849,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            AssocItemKind::TyAlias(_, ref ty) => {\n-                let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n+            AssocItemKind::TyAlias(ref generics, _, ref ty) => {\n+                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = match ty {\n                     None => {\n                         let ty = self.arena.alloc(self.ty(i.span, hir::TyKind::Err));\n@@ -902,13 +895,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n-                AssocItemKind::TyAlias(_, ty) => {\n+                AssocItemKind::TyAlias(_, _, ty) => {\n                     match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n                         None => hir::AssocItemKind::Type,\n                         Some(_) => hir::AssocItemKind::OpaqueTy,\n                     }\n                 }\n-                AssocItemKind::Fn(sig, _) => {\n+                AssocItemKind::Fn(sig, _, _) => {\n                     hir::AssocItemKind::Method { has_self: sig.decl.has_self() }\n                 }\n                 AssocItemKind::Macro(..) => unimplemented!(),"}, {"sha": "56d789b7a6a8b8f4b4d9bb09d7e3752b68e80f31", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -490,7 +490,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 self.lctx.allocate_hir_id_counter(item.id);\n                 let owner = match (&item.kind, ctxt) {\n                     // Ignore patterns in trait methods without bodies.\n-                    (AssocItemKind::Fn(_, None), AssocCtxt::Trait) => None,\n+                    (AssocItemKind::Fn(_, _, None), AssocCtxt::Trait) => None,\n                     _ => Some(item.id),\n                 };\n                 self.with_hir_id_owner(owner, |this| visit::walk_assoc_item(this, item, ctxt));"}, {"sha": "206cdefecc9901ff5c364771fc7a876b7c3023e8", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -1154,10 +1154,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 AssocItemKind::Const(_, body) => {\n                     self.check_impl_item_provided(item.span, body, \"constant\", \" = <expr>;\");\n                 }\n-                AssocItemKind::Fn(_, body) => {\n+                AssocItemKind::Fn(_, _, body) => {\n                     self.check_impl_item_provided(item.span, body, \"function\", \" { <body> }\");\n                 }\n-                AssocItemKind::TyAlias(bounds, body) => {\n+                AssocItemKind::TyAlias(_, bounds, body) => {\n                     self.check_impl_item_provided(item.span, body, \"type\", \" = <type>;\");\n                     self.check_impl_assoc_type_no_bounds(bounds);\n                 }\n@@ -1167,7 +1167,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Trait || self.in_trait_impl {\n             self.invalid_visibility(&item.vis, None);\n-            if let AssocItemKind::Fn(sig, _) = &item.kind {\n+            if let AssocItemKind::Fn(sig, _, _) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n                 self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }"}, {"sha": "32c91f4a63486f568c061299d6a09b2c31036380", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -548,12 +548,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         match i.kind {\n-            ast::AssocItemKind::Fn(ref sig, _) => {\n+            ast::AssocItemKind::Fn(ref sig, _, _) => {\n                 if let (ast::Const::Yes(_), AssocCtxt::Trait) = (sig.header.constness, ctxt) {\n                     gate_feature_post!(&self, const_fn, i.span, \"const fn is unstable\");\n                 }\n             }\n-            ast::AssocItemKind::TyAlias(_, ref ty) => {\n+            ast::AssocItemKind::TyAlias(ref generics, _, ref ty) => {\n                 if let (Some(_), AssocCtxt::Trait) = (ty, ctxt) {\n                     gate_feature_post!(\n                         &self,\n@@ -565,7 +565,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if let Some(ty) = ty {\n                     self.check_impl_trait(ty);\n                 }\n-                self.check_gat(&i.generics, i.span);\n+                self.check_gat(generics, i.span);\n             }\n             _ => {}\n         }"}, {"sha": "0fcda7f763eff96e2208c9d889caf455032394e1", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -1473,12 +1473,12 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Const(ty, expr) => {\n                 self.print_associated_const(item.ident, ty, expr.as_deref(), &item.vis);\n             }\n-            ast::AssocItemKind::Fn(sig, body) => {\n+            ast::AssocItemKind::Fn(sig, generics, body) => {\n                 let body = body.as_deref();\n-                self.print_fn_full(sig, item.ident, &item.generics, &item.vis, body, &item.attrs);\n+                self.print_fn_full(sig, item.ident, generics, &item.vis, body, &item.attrs);\n             }\n-            ast::AssocItemKind::TyAlias(bounds, ty) => {\n-                self.print_associated_type(item.ident, &item.generics, bounds, ty.as_deref());\n+            ast::AssocItemKind::TyAlias(generics, bounds, ty) => {\n+                self.print_associated_type(item.ident, generics, bounds, ty.as_deref());\n             }\n             ast::AssocItemKind::Macro(mac) => {\n                 self.print_mac(mac);"}, {"sha": "2e4cbd708a9f6a29b80707247771bc1bf2d54bd4", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -544,8 +544,8 @@ impl<'a> TraitDef<'a> {\n                 vis: respan(self.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n-                generics: Generics::default(),\n                 kind: ast::AssocItemKind::TyAlias(\n+                    Generics::default(),\n                     Vec::new(),\n                     Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n                 ),\n@@ -973,12 +973,11 @@ impl<'a> MethodDef<'a> {\n         P(ast::AssocItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n-            generics: fn_generics,\n             span: trait_.span,\n             vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            kind: ast::AssocItemKind::Fn(sig, Some(body_block)),\n+            kind: ast::AssocItemKind::Fn(sig, fn_generics, Some(body_block)),\n             tokens: None,\n         })\n     }"}, {"sha": "c96b394c7b5e2b959fd4d3453d312488678cb996", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -25,7 +25,6 @@ pub fn placeholder(\n \n     let ident = ast::Ident::invalid();\n     let attrs = Vec::new();\n-    let generics = ast::Generics::default();\n     let vis = vis.unwrap_or_else(|| dummy_spanned(ast::VisibilityKind::Inherited));\n     let span = DUMMY_SP;\n     let expr_placeholder = || {\n@@ -57,7 +56,6 @@ pub fn placeholder(\n             ident,\n             vis,\n             attrs,\n-            generics,\n             kind: ast::AssocItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n@@ -68,7 +66,6 @@ pub fn placeholder(\n             ident,\n             vis,\n             attrs,\n-            generics,\n             kind: ast::AssocItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,"}, {"sha": "df50fc5d3ed2413956f0f0bdc0a663f0328ba600", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -686,7 +686,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn flat_map_trait_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         let is_const = match i.kind {\n             ast::AssocItemKind::Const(..) => true,\n-            ast::AssocItemKind::Fn(ref sig, _) => Self::is_sig_const(sig),\n+            ast::AssocItemKind::Fn(ref sig, _, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_assoc_item(i, s))"}, {"sha": "207defa96a3e65415074ef4c67e2fdd65826ae16", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -640,7 +640,7 @@ declare_lint_pass!(\n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n         match it.kind {\n-            ast::AssocItemKind::Fn(ref sig, _) => {\n+            ast::AssocItemKind::Fn(ref sig, _, _) => {\n                 for arg in sig.decl.inputs.iter() {\n                     match arg.pat.kind {\n                         ast::PatKind::Ident(_, ident, None) => {"}, {"sha": "96b3cf797208eb0431ee1a4951c10f9b03ec0e45", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -665,46 +665,46 @@ impl<'a> Parser<'a> {\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let defaultness = self.parse_defaultness();\n \n-        let (ident, kind, generics) = if self.eat_keyword(kw::Type) {\n+        let (ident, kind) = if self.eat_keyword(kw::Type) {\n             self.parse_assoc_ty()?\n         } else if self.check_fn_front_matter() {\n             let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, req_name)?;\n-            (ident, AssocItemKind::Fn(sig, body), generics)\n+            (ident, AssocItemKind::Fn(sig, generics, body))\n         } else if self.check_keyword(kw::Const) {\n             self.parse_assoc_const()?\n         } else if self.isnt_macro_invocation() {\n             return Err(self.missing_assoc_item_kind_err(\"associated\", self.prev_span));\n         } else if self.token.is_path_start() {\n             let mac = self.parse_item_macro(&vis)?;\n             *at_end = true;\n-            (Ident::invalid(), AssocItemKind::Macro(mac), Generics::default())\n+            (Ident::invalid(), AssocItemKind::Macro(mac))\n         } else {\n             self.recover_attrs_no_item(&attrs)?;\n             self.unexpected()?\n         };\n \n         let span = lo.to(self.prev_span);\n         let id = DUMMY_NODE_ID;\n-        Ok(AssocItem { id, span, ident, attrs, vis, defaultness, generics, kind, tokens: None })\n+        Ok(AssocItem { id, span, ident, attrs, vis, defaultness, kind, tokens: None })\n     }\n \n     /// This parses the grammar:\n     ///\n     ///     AssocConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n-    fn parse_assoc_const(&mut self) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n+    fn parse_assoc_const(&mut self) -> PResult<'a, (Ident, AssocItemKind)> {\n         self.expect_keyword(kw::Const)?;\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         let expr = if self.eat(&token::Eq) { Some(self.parse_expr()?) } else { None };\n         self.expect_semi()?;\n-        Ok((ident, AssocItemKind::Const(ty, expr), Generics::default()))\n+        Ok((ident, AssocItemKind::Const(ty, expr)))\n     }\n \n     /// Parses the following grammar:\n     ///\n     ///     AssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n-    fn parse_assoc_ty(&mut self) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n+    fn parse_assoc_ty(&mut self) -> PResult<'a, (Ident, AssocItemKind)> {\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n \n@@ -716,7 +716,7 @@ impl<'a> Parser<'a> {\n         let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n         self.expect_semi()?;\n \n-        Ok((ident, AssocItemKind::TyAlias(bounds, default), generics))\n+        Ok((ident, AssocItemKind::TyAlias(generics, bounds, default)))\n     }\n \n     /// Parses a `UseTree`."}, {"sha": "280a7a8fdba4f1399c566625c562e267313dcb9e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -1252,7 +1252,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let item_def_id = self.r.definitions.local_def_id(item.id);\n         let (res, ns) = match item.kind {\n             AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n-            AssocItemKind::Fn(ref sig, _) => {\n+            AssocItemKind::Fn(ref sig, _, _) => {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);\n                 }"}, {"sha": "256b5ff4b9a89e8a522b754fcb13264e92a95e8c", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -215,13 +215,15 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_assoc_item(&mut self, i: &'a AssocItem, ctxt: visit::AssocCtxt) {\n         let def_data = match &i.kind {\n-            AssocItemKind::Fn(FnSig { header, decl }, body) if header.asyncness.is_async() => {\n+            AssocItemKind::Fn(FnSig { header, decl }, generics, body)\n+                if header.asyncness.is_async() =>\n+            {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n                     i.span,\n                     header,\n-                    &i.generics,\n+                    generics,\n                     decl,\n                     body.as_deref(),\n                 );"}, {"sha": "0e4e9c152867c07e2194a429248cd143e0eb60a2", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 90, "deletions": 90, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -826,41 +826,33 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         this.visit_generics(generics);\n                         walk_list!(this, visit_param_bound, bounds);\n \n-                        for trait_item in trait_items {\n+                        let walk_assoc_item = |this: &mut Self, generics, item| {\n+                            this.with_generic_param_rib(generics, AssocItemRibKind, |this| {\n+                                visit::walk_assoc_item(this, item, AssocCtxt::Trait)\n+                            });\n+                        };\n+\n+                        for item in trait_items {\n                             this.with_trait_items(trait_items, |this| {\n-                                this.with_generic_param_rib(\n-                                    &trait_item.generics,\n-                                    AssocItemRibKind,\n-                                    |this| {\n-                                        match trait_item.kind {\n-                                            AssocItemKind::Const(ref ty, ref default) => {\n-                                                this.visit_ty(ty);\n-\n-                                                // Only impose the restrictions of\n-                                                // ConstRibKind for an actual constant\n-                                                // expression in a provided default.\n-                                                if let Some(ref expr) = *default {\n-                                                    this.with_constant_rib(|this| {\n-                                                        this.visit_expr(expr);\n-                                                    });\n-                                                }\n-                                            }\n-                                            AssocItemKind::Fn(_, _) => visit::walk_assoc_item(\n-                                                this,\n-                                                trait_item,\n-                                                AssocCtxt::Trait,\n-                                            ),\n-                                            AssocItemKind::TyAlias(..) => visit::walk_assoc_item(\n-                                                this,\n-                                                trait_item,\n-                                                AssocCtxt::Trait,\n-                                            ),\n-                                            AssocItemKind::Macro(_) => {\n-                                                panic!(\"unexpanded macro in resolve!\")\n-                                            }\n-                                        };\n-                                    },\n-                                );\n+                                match &item.kind {\n+                                    AssocItemKind::Const(ty, default) => {\n+                                        this.visit_ty(ty);\n+                                        // Only impose the restrictions of `ConstRibKind` for an\n+                                        // actual constant expression in a provided default.\n+                                        if let Some(expr) = default {\n+                                            this.with_constant_rib(|this| this.visit_expr(expr));\n+                                        }\n+                                    }\n+                                    AssocItemKind::Fn(_, generics, _) => {\n+                                        walk_assoc_item(this, generics, item);\n+                                    }\n+                                    AssocItemKind::TyAlias(generics, _, _) => {\n+                                        walk_assoc_item(this, generics, item);\n+                                    }\n+                                    AssocItemKind::Macro(_) => {\n+                                        panic!(\"unexpanded macro in resolve!\")\n+                                    }\n+                                };\n                             });\n                         }\n                     });\n@@ -1021,7 +1013,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             trait_items\n                 .iter()\n                 .filter_map(|item| match &item.kind {\n-                    AssocItemKind::TyAlias(bounds, _) if bounds.len() == 0 => Some(item.ident),\n+                    AssocItemKind::TyAlias(_, bounds, _) if bounds.len() == 0 => Some(item.ident),\n                     _ => None,\n                 })\n                 .collect(),\n@@ -1113,66 +1105,74 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         this.with_current_self_type(self_type, |this| {\n                             this.with_self_rib_ns(ValueNS, Res::SelfCtor(item_def_id), |this| {\n                                 debug!(\"resolve_implementation with_self_rib_ns(ValueNS, ...)\");\n-                                for impl_item in impl_items {\n-                                    // We also need a new scope for the impl item type parameters.\n-                                    this.with_generic_param_rib(&impl_item.generics,\n-                                                                AssocItemRibKind,\n-                                                                |this| {\n-                                        use crate::ResolutionError::*;\n-                                        match impl_item.kind {\n-                                            AssocItemKind::Const(..) => {\n-                                                debug!(\n-                                                    \"resolve_implementation AssocItemKind::Const\",\n-                                                );\n-                                                // If this is a trait impl, ensure the const\n-                                                // exists in trait\n-                                                this.check_trait_item(\n-                                                    impl_item.ident,\n-                                                    ValueNS,\n-                                                    impl_item.span,\n-                                                    |n, s| ConstNotMemberOfTrait(n, s),\n-                                                );\n-\n-                                                this.with_constant_rib(|this| {\n+                                for item in impl_items {\n+                                    use crate::ResolutionError::*;\n+                                    match &item.kind {\n+                                        AssocItemKind::Const(..) => {\n+                                            debug!(\"resolve_implementation AssocItemKind::Const\",);\n+                                            // If this is a trait impl, ensure the const\n+                                            // exists in trait\n+                                            this.check_trait_item(\n+                                                item.ident,\n+                                                ValueNS,\n+                                                item.span,\n+                                                |n, s| ConstNotMemberOfTrait(n, s),\n+                                            );\n+\n+                                            this.with_constant_rib(|this| {\n+                                                visit::walk_assoc_item(this, item, AssocCtxt::Impl)\n+                                            });\n+                                        }\n+                                        AssocItemKind::Fn(_, generics, _) => {\n+                                            // We also need a new scope for the impl item type parameters.\n+                                            this.with_generic_param_rib(\n+                                                generics,\n+                                                AssocItemRibKind,\n+                                                |this| {\n+                                                    // If this is a trait impl, ensure the method\n+                                                    // exists in trait\n+                                                    this.check_trait_item(\n+                                                        item.ident,\n+                                                        ValueNS,\n+                                                        item.span,\n+                                                        |n, s| MethodNotMemberOfTrait(n, s),\n+                                                    );\n+\n                                                     visit::walk_assoc_item(\n                                                         this,\n-                                                        impl_item,\n+                                                        item,\n                                                         AssocCtxt::Impl,\n                                                     )\n-                                                });\n-                                            }\n-                                            AssocItemKind::Fn(..) => {\n-                                                // If this is a trait impl, ensure the method\n-                                                // exists in trait\n-                                                this.check_trait_item(impl_item.ident,\n-                                                                      ValueNS,\n-                                                                      impl_item.span,\n-                                                    |n, s| MethodNotMemberOfTrait(n, s));\n-\n-                                                visit::walk_assoc_item(\n-                                                    this,\n-                                                    impl_item,\n-                                                    AssocCtxt::Impl,\n-                                                )\n-                                            }\n-                                            AssocItemKind::TyAlias(_, _) => {\n-                                                // If this is a trait impl, ensure the type\n-                                                // exists in trait\n-                                                this.check_trait_item(impl_item.ident,\n-                                                                      TypeNS,\n-                                                                      impl_item.span,\n-                                                    |n, s| TypeNotMemberOfTrait(n, s));\n-\n-                                                visit::walk_assoc_item(\n-                                                    this,\n-                                                    impl_item,\n-                                                    AssocCtxt::Impl,\n-                                                )\n-                                            }\n-                                            AssocItemKind::Macro(_) =>\n-                                                panic!(\"unexpanded macro in resolve!\"),\n+                                                },\n+                                            );\n+                                        }\n+                                        AssocItemKind::TyAlias(generics, _, _) => {\n+                                            // We also need a new scope for the impl item type parameters.\n+                                            this.with_generic_param_rib(\n+                                                generics,\n+                                                AssocItemRibKind,\n+                                                |this| {\n+                                                    // If this is a trait impl, ensure the type\n+                                                    // exists in trait\n+                                                    this.check_trait_item(\n+                                                        item.ident,\n+                                                        TypeNS,\n+                                                        item.span,\n+                                                        |n, s| TypeNotMemberOfTrait(n, s),\n+                                                    );\n+\n+                                                    visit::walk_assoc_item(\n+                                                        this,\n+                                                        item,\n+                                                        AssocCtxt::Impl,\n+                                                    )\n+                                                },\n+                                            );\n+                                        }\n+                                        AssocItemKind::Macro(_) => {\n+                                            panic!(\"unexpanded macro in resolve!\")\n                                         }\n-                                    });\n+                                    }\n                                 }\n                             });\n                         });"}, {"sha": "561a4a83d2803a191247ad2528f04cfa7d5195c2", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -1015,18 +1015,18 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &trait_item.attrs,\n                 );\n             }\n-            ast::AssocItemKind::Fn(ref sig, ref body) => {\n+            ast::AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_ref().map(|x| &**x),\n                     trait_item.id,\n                     trait_item.ident,\n-                    &trait_item.generics,\n+                    generics,\n                     respan(vis_span, ast::VisibilityKind::Public),\n                     trait_item.span,\n                 );\n             }\n-            ast::AssocItemKind::TyAlias(ref bounds, ref default_ty) => {\n+            ast::AssocItemKind::TyAlias(_, ref bounds, ref default_ty) => {\n                 // FIXME do something with _bounds (for type refs)\n                 let name = trait_item.ident.name.to_string();\n                 let qualname = format!(\n@@ -1085,19 +1085,19 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &impl_item.attrs,\n                 );\n             }\n-            ast::AssocItemKind::Fn(ref sig, ref body) => {\n+            ast::AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_deref(),\n                     impl_item.id,\n                     impl_item.ident,\n-                    &impl_item.generics,\n+                    generics,\n                     impl_item.vis.clone(),\n                     impl_item.span,\n                 );\n             }\n-            ast::AssocItemKind::TyAlias(_, None) => {}\n-            ast::AssocItemKind::TyAlias(_, Some(ref ty)) => {\n+            ast::AssocItemKind::TyAlias(_, _, None) => {}\n+            ast::AssocItemKind::TyAlias(_, _, Some(ref ty)) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait."}, {"sha": "7f6e405fec69ce90c408e7591e63794534e2f4c6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -1616,7 +1616,6 @@ pub struct AssocItem {\n     pub ident: Ident,\n \n     pub defaultness: Defaultness,\n-    pub generics: Generics,\n     pub kind: AssocItemKind,\n     /// See `Item::tokens` for what this is.\n     pub tokens: Option<TokenStream>,\n@@ -1636,10 +1635,10 @@ pub enum AssocItemKind {\n     Const(P<Ty>, Option<P<Expr>>),\n \n     /// An associated function.\n-    Fn(FnSig, Option<P<Block>>),\n+    Fn(FnSig, Generics, Option<P<Block>>),\n \n     /// An associated type.\n-    TyAlias(GenericBounds, Option<P<Ty>>),\n+    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n \n     /// A macro expanding to an associated item.\n     Macro(Mac),"}, {"sha": "f3857b3a41437e67327898ca17ea4020909967ee", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -951,23 +951,24 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     mut item: P<AssocItem>,\n     visitor: &mut T,\n ) -> SmallVec<[P<AssocItem>; 1]> {\n-    let AssocItem { id, ident, vis, defaultness: _, attrs, generics, kind, span, tokens: _ } =\n+    let AssocItem { id, ident, vis, defaultness: _, attrs, kind, span, tokens: _ } =\n         item.deref_mut();\n     visitor.visit_id(id);\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n-    visitor.visit_generics(generics);\n     match kind {\n         AssocItemKind::Const(ty, expr) => {\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        AssocItemKind::Fn(sig, body) => {\n+        AssocItemKind::Fn(sig, generics, body) => {\n+            visitor.visit_generics(generics);\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        AssocItemKind::TyAlias(bounds, ty) => {\n+        AssocItemKind::TyAlias(generics, bounds, ty) => {\n+            visitor.visit_generics(generics);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }"}, {"sha": "edcfd7f4e7870982d124eb58f2a0119de720e672", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd15442f2f1c798718242eaa9817531a53c2134/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2fd15442f2f1c798718242eaa9817531a53c2134", "patch": "@@ -625,17 +625,18 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n     visitor.visit_vis(&item.vis);\n     visitor.visit_ident(item.ident);\n     walk_list!(visitor, visit_attribute, &item.attrs);\n-    visitor.visit_generics(&item.generics);\n     match item.kind {\n         AssocItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        AssocItemKind::Fn(ref sig, ref body) => {\n+        AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n+            visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), item.ident, sig, &item.vis, body.as_deref());\n             visitor.visit_fn(kind, item.span, item.id);\n         }\n-        AssocItemKind::TyAlias(ref bounds, ref ty) => {\n+        AssocItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n+            visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n         }"}]}