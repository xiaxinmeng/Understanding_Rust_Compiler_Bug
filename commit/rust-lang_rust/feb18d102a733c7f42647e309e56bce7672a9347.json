{"sha": "feb18d102a733c7f42647e309e56bce7672a9347", "node_id": "C_kwDOAAsO6NoAKGZlYjE4ZDEwMmE3MzNjN2Y0MjY0N2UzMDllNTZiY2U3NjcyYTkzNDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-13T14:03:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-13T14:03:22Z"}, "message": "Rollup merge of #96154 - lukaslueg:unreachablehint, r=scottmcm\n\nExpand core::hint::unreachable_unchecked() docs\n\nRework the docs for `unreachable_unchecked`, encouraging deliberate use, and providing a better example for action at a distance.\n\nFixes #95865", "tree": {"sha": "7b122ae998654ce06741d614eb9aaa4cf0315c14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b122ae998654ce06741d614eb9aaa4cf0315c14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb18d102a733c7f42647e309e56bce7672a9347", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJifmUqCRBK7hj4Ov3rIwAAx1oIAGhKqKrKmClx633BUX6/s/gt\nQVDAgmf4u7PhF5doJc+AUE4T+KfzvTj3UTIRbw03ppeb6xB0tvGAMgrPnGTyEwB2\nvkW+D9q+0bm63KUUrXV/IXNpFpF132ZzeWdT8h6UUwk2rcmzUV7IVsD5SPEVCMkr\nKA2BSDhS+vGw7U/UYlzuwLHaJSKeO6DqzUTKKx4EXLkemldl2N2zABXwcgtwbfeJ\nei9oanho5mw5kdwmVSLM/jiGXXIUGfPgMHxo77gM6iB/WoFFkXW36354gA7fNsmJ\nZyn5txUXsoLHJVUNhN+lf+T8sSOGnm2tS0xsZUONUyDiUESpExvpNOWyWyzugW8=\n=TU8s\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b122ae998654ce06741d614eb9aaa4cf0315c14\nparent a7d6408b05912396618dfdcc9cc713d3ace2aa9a\nparent cd1746b2b4275a3437581992e2cb38f104b74b6c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1652450602 +0200\ncommitter GitHub <noreply@github.com> 1652450602 +0200\n\nRollup merge of #96154 - lukaslueg:unreachablehint, r=scottmcm\n\nExpand core::hint::unreachable_unchecked() docs\n\nRework the docs for `unreachable_unchecked`, encouraging deliberate use, and providing a better example for action at a distance.\n\nFixes #95865\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb18d102a733c7f42647e309e56bce7672a9347", "html_url": "https://github.com/rust-lang/rust/commit/feb18d102a733c7f42647e309e56bce7672a9347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb18d102a733c7f42647e309e56bce7672a9347/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d6408b05912396618dfdcc9cc713d3ace2aa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d6408b05912396618dfdcc9cc713d3ace2aa9a", "html_url": "https://github.com/rust-lang/rust/commit/a7d6408b05912396618dfdcc9cc713d3ace2aa9a"}, {"sha": "cd1746b2b4275a3437581992e2cb38f104b74b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1746b2b4275a3437581992e2cb38f104b74b6c", "html_url": "https://github.com/rust-lang/rust/commit/cd1746b2b4275a3437581992e2cb38f104b74b6c"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "7ae1bfd4f351a1331d8fd14ddadaa2cefcd12ec9", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 66, "deletions": 15, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/feb18d102a733c7f42647e309e56bce7672a9347/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18d102a733c7f42647e309e56bce7672a9347/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=feb18d102a733c7f42647e309e56bce7672a9347", "patch": "@@ -5,27 +5,78 @@\n \n use crate::intrinsics;\n \n-/// Informs the compiler that this point in the code is not reachable, enabling\n-/// further optimizations.\n+/// Informs the compiler that the site which is calling this function is not\n+/// reachable, possibly enabling further optimizations.\n ///\n /// # Safety\n ///\n-/// Reaching this function is completely *undefined behavior* (UB). In\n-/// particular, the compiler assumes that all UB must never happen, and\n-/// therefore will eliminate all branches that reach to a call to\n-/// `unreachable_unchecked()`.\n+/// Reaching this function is *Undefined Behavior*.\n ///\n-/// Like all instances of UB, if this assumption turns out to be wrong, i.e., the\n-/// `unreachable_unchecked()` call is actually reachable among all possible\n-/// control flow, the compiler will apply the wrong optimization strategy, and\n-/// may sometimes even corrupt seemingly unrelated code, causing\n-/// difficult-to-debug problems.\n+/// As the compiler assumes that all forms of Undefined Behavior can never\n+/// happen, it will eliminate all branches in the surrounding code that it can\n+/// determine will invariably lead to a call to `unreachable_unchecked()`.\n ///\n-/// Use this function only when you can prove that the code will never call it.\n-/// Otherwise, consider using the [`unreachable!`] macro, which does not allow\n-/// optimizations but will panic when executed.\n+/// If the assumptions embedded in using this function turn out to be wrong -\n+/// that is, if the site which is calling `unreachable_unchecked()` is actually\n+/// reachable at runtime - the compiler may have generated nonsensical machine\n+/// instructions for this situation, including in seemingly unrelated code,\n+/// causing difficult-to-debug problems.\n ///\n-/// # Example\n+/// Use this function sparingly. Consider using the [`unreachable!`] macro,\n+/// which may prevent some optimizations but will safely panic in case it is\n+/// actually reached at runtime. Benchmark your code to find out if using\n+/// `unreachable_unchecked()` comes with a performance benefit.\n+///\n+/// # Examples\n+///\n+/// `unreachable_unchecked()` can be used in situations where the compiler\n+/// can't prove invariants that were previously established. Such situations\n+/// have a higher chance of occuring if those invariants are upheld by\n+/// external code that the compiler can't analyze.\n+/// ```\n+/// fn prepare_inputs(divisors: &mut Vec<u32>) {\n+///     // Note to future-self when making changes: The invariant established\n+///     // here is NOT checked in `do_computation()`; if this changes, you HAVE\n+///     // to change `do_computation()`.\n+///     divisors.retain(|divisor| *divisor != 0)\n+/// }\n+///\n+/// /// # Safety\n+/// /// All elements of `divisor` must be non-zero.\n+/// unsafe fn do_computation(i: u32, divisors: &[u32]) -> u32 {\n+///     divisors.iter().fold(i, |acc, divisor| {\n+///         // Convince the compiler that a division by zero can't happen here\n+///         // and a check is not needed below.\n+///         if *divisor == 0 {\n+///             // Safety: `divisor` can't be zero because of `prepare_inputs`,\n+///             // but the compiler does not know about this. We *promise*\n+///             // that we always call `prepare_inputs`.\n+///             std::hint::unreachable_unchecked()\n+///         }\n+///         // The compiler would normally introduce a check here that prevents\n+///         // a division by zero. However, if `divisor` was zero, the branch\n+///         // above would reach what we explicitly marked as unreachable.\n+///         // The compiler concludes that `divisor` can't be zero at this point\n+///         // and removes the - now proven useless - check.\n+///         acc / divisor\n+///     })\n+/// }\n+///\n+/// let mut divisors = vec![2, 0, 4];\n+/// prepare_inputs(&mut divisors);\n+/// let result = unsafe {\n+///     // Safety: prepare_inputs() guarantees that divisors is non-zero\n+///     do_computation(100, &divisors)\n+/// };\n+/// assert_eq!(result, 12);\n+///\n+/// ```\n+///\n+/// While using `unreachable_unchecked()` is perfectly sound in the following\n+/// example, the compiler is able to prove that a division by zero is not\n+/// possible. Benchmarking reveals that `unreachable_unchecked()` provides\n+/// no benefit over using [`unreachable!`], while the latter does not introduce\n+/// the possibility of Undefined Behavior.\n ///\n /// ```\n /// fn div_1(a: u32, b: u32) -> u32 {"}]}