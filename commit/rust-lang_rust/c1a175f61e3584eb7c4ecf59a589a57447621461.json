{"sha": "c1a175f61e3584eb7c4ecf59a589a57447621461", "node_id": "C_kwDOAAsO6NoAKGMxYTE3NWY2MWUzNTg0ZWI3YzRlY2Y1OWE1ODlhNTc0NDc2MjE0NjE", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-07-28T18:08:44Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-07-29T15:36:01Z"}, "message": "Generate rust type from json", "tree": {"sha": "ea9db56862b262aa308b2ae73822c9b1e50857af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea9db56862b262aa308b2ae73822c9b1e50857af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a175f61e3584eb7c4ecf59a589a57447621461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a175f61e3584eb7c4ecf59a589a57447621461", "html_url": "https://github.com/rust-lang/rust/commit/c1a175f61e3584eb7c4ecf59a589a57447621461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a175f61e3584eb7c4ecf59a589a57447621461/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d1c3e1385be65abc197115817c28fbeb3294d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d1c3e1385be65abc197115817c28fbeb3294d6", "html_url": "https://github.com/rust-lang/rust/commit/61d1c3e1385be65abc197115817c28fbeb3294d6"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "6c01b8a0dfd9896bc5ed579c678eec59cecfe598", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1a175f61e3584eb7c4ecf59a589a57447621461/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c1a175f61e3584eb7c4ecf59a589a57447621461/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c1a175f61e3584eb7c4ecf59a589a57447621461", "patch": "@@ -710,6 +710,7 @@ dependencies = [\n  \"ide-db\",\n  \"itertools\",\n  \"profile\",\n+ \"serde_json\",\n  \"sourcegen\",\n  \"stdx\",\n  \"syntax\","}, {"sha": "9b9e21a4ddb592d3519a6e2778e9ac6da003e257", "filename": "crates/ide-diagnostics/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1a175f61e3584eb7c4ecf59a589a57447621461/crates%2Fide-diagnostics%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1a175f61e3584eb7c4ecf59a589a57447621461/crates%2Fide-diagnostics%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2FCargo.toml?ref=c1a175f61e3584eb7c4ecf59a589a57447621461", "patch": "@@ -15,6 +15,7 @@ itertools = \"0.10.3\"\n \n \n either = \"1.7.0\"\n+serde_json = \"1.0.82\"\n \n profile = { path = \"../profile\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "aa7fcffb48ac3e2b67e11b66da4d3ecf35693881", "filename": "crates/ide-diagnostics/src/handlers/json_is_not_rust.rs", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/c1a175f61e3584eb7c4ecf59a589a57447621461/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a175f61e3584eb7c4ecf59a589a57447621461/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs?ref=c1a175f61e3584eb7c4ecf59a589a57447621461", "patch": "@@ -0,0 +1,201 @@\n+//! This diagnostic provides an assist for creating a struct definition from a JSON\n+//! example.\n+\n+use ide_db::{base_db::FileId, source_change::SourceChange};\n+use itertools::Itertools;\n+use stdx::format_to;\n+use syntax::{\n+    ast::{self, make},\n+    SyntaxKind, SyntaxNode,\n+};\n+use text_edit::TextEdit;\n+\n+use crate::{fix, Diagnostic, Severity};\n+\n+#[derive(Default)]\n+struct State {\n+    result: String,\n+    struct_counts: usize,\n+}\n+\n+impl State {\n+    fn generate_new_name(&mut self) -> ast::Name {\n+        self.struct_counts += 1;\n+        make::name(&format!(\"Struct{}\", self.struct_counts))\n+    }\n+\n+    fn build_struct(&mut self, value: &serde_json::Map<String, serde_json::Value>) -> ast::Type {\n+        let name = self.generate_new_name();\n+        let ty = make::ty(&name.to_string());\n+        let strukt = make::struct_(\n+            None,\n+            name,\n+            None,\n+            make::record_field_list(value.iter().sorted_unstable_by_key(|x| x.0).map(\n+                |(name, value)| make::record_field(None, make::name(name), self.type_of(value)),\n+            ))\n+            .into(),\n+        );\n+        format_to!(self.result, \"#[derive(Serialize, Deserialize)]\\n{}\\n\", strukt);\n+        ty\n+    }\n+\n+    fn type_of(&mut self, value: &serde_json::Value) -> ast::Type {\n+        match value {\n+            serde_json::Value::Null => make::ty_unit(),\n+            serde_json::Value::Bool(_) => make::ty(\"bool\"),\n+            serde_json::Value::Number(x) => make::ty(if x.is_i64() { \"i64\" } else { \"f64\" }),\n+            serde_json::Value::String(_) => make::ty(\"String\"),\n+            serde_json::Value::Array(x) => {\n+                let ty = match x.iter().next() {\n+                    Some(x) => self.type_of(x),\n+                    None => make::ty_placeholder(),\n+                };\n+                make::ty(&format!(\"Vec<{ty}>\"))\n+            }\n+            serde_json::Value::Object(x) => self.build_struct(x),\n+        }\n+    }\n+}\n+\n+pub(crate) fn json_in_items(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n+    if node.kind() == SyntaxKind::ERROR\n+        && node.first_token().map(|x| x.kind()) == Some(SyntaxKind::L_CURLY)\n+        && node.last_token().map(|x| x.kind()) == Some(SyntaxKind::R_CURLY)\n+    {\n+        let node_string = node.to_string();\n+        if let Ok(x) = serde_json::from_str(&node_string) {\n+            if let serde_json::Value::Object(x) = x {\n+                let range = node.text_range();\n+                let mut edit = TextEdit::builder();\n+                edit.delete(range);\n+                let mut state = State::default();\n+                state.build_struct(&x);\n+                edit.insert(range.start(), state.result);\n+                acc.push(\n+                    Diagnostic::new(\n+                        \"json-is-not-rust\",\n+                        \"JSON syntax is not valid as a Rust item\",\n+                        range,\n+                    )\n+                    .severity(Severity::WeakWarning)\n+                    .with_fixes(Some(vec![fix(\n+                        \"convert_json_to_struct\",\n+                        \"Convert JSON to struct\",\n+                        SourceChange::from_text_edit(file_id, edit.finish()),\n+                        range,\n+                    )])),\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        tests::{check_diagnostics_with_config, check_fix, check_no_fix},\n+        DiagnosticsConfig,\n+    };\n+\n+    #[test]\n+    fn diagnostic_for_simple_case() {\n+        let mut config = DiagnosticsConfig::default();\n+        config.disabled.insert(\"syntax-error\".to_string());\n+        check_diagnostics_with_config(\n+            config,\n+            r#\"\n+            { \"foo\": \"bar\" }\n+         // ^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: JSON syntax is not valid as a Rust item\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn types_of_primitives() {\n+        check_fix(\n+            r#\"\n+            {$0\n+                \"foo\": \"bar\",\n+                \"bar\": 2.3,\n+                \"baz\": null,\n+                \"bay\": 57,\n+                \"box\": true\n+            }\n+            \"#,\n+            r#\"\n+            #[derive(Serialize, Deserialize)]\n+            struct Struct1{ bar: f64, bay: i64, baz: (), r#box: bool, foo: String }\n+\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn nested_structs() {\n+        check_fix(\n+            r#\"\n+            {$0\n+                \"foo\": \"bar\",\n+                \"bar\": {\n+                    \"kind\": \"Object\",\n+                    \"value\": {}\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            #[derive(Serialize, Deserialize)]\n+            struct Struct3{  }\n+            #[derive(Serialize, Deserialize)]\n+            struct Struct2{ kind: String, value: Struct3 }\n+            #[derive(Serialize, Deserialize)]\n+            struct Struct1{ bar: Struct2, foo: String }\n+\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn arrays() {\n+        check_fix(\n+            r#\"\n+            {\n+                \"of_string\": [\"foo\", \"2\", \"x\"], $0\n+                \"of_object\": [{\n+                    \"x\": 10,\n+                    \"y\": 20\n+                }, {\n+                    \"x\": 10,\n+                    \"y\": 20\n+                }],\n+                \"nested\": [[[2]]],\n+                \"empty\": []\n+            }\n+            \"#,\n+            r#\"\n+            #[derive(Serialize, Deserialize)]\n+            struct Struct2{ x: i64, y: i64 }\n+            #[derive(Serialize, Deserialize)]\n+            struct Struct1{ empty: Vec<_>, nested: Vec<Vec<Vec<i64>>>, of_object: Vec<Struct2>, of_string: Vec<String> }\n+\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_emit_outside_of_item_position() {\n+        check_no_fix(\n+            r#\"\n+            fn foo() {\n+                let json = {$0\n+                    \"foo\": \"bar\",\n+                    \"bar\": {\n+                        \"kind\": \"Object\",\n+                        \"value\": {}\n+                    }\n+                };\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "7034f010e1b0c0dfdfc01870b3b04a7976b8b28e", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1a175f61e3584eb7c4ecf59a589a57447621461/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a175f61e3584eb7c4ecf59a589a57447621461/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=c1a175f61e3584eb7c4ecf59a589a57447621461", "patch": "@@ -50,6 +50,7 @@ mod handlers {\n     pub(crate) mod field_shorthand;\n     pub(crate) mod useless_braces;\n     pub(crate) mod unlinked_file;\n+    pub(crate) mod json_is_not_rust;\n }\n \n #[cfg(test)]\n@@ -175,6 +176,7 @@ pub fn diagnostics(\n     for node in parse.tree().syntax().descendants() {\n         handlers::useless_braces::useless_braces(&mut res, file_id, &node);\n         handlers::field_shorthand::field_shorthand(&mut res, file_id, &node);\n+        handlers::json_is_not_rust::json_in_items(&mut res, file_id, &node);\n     }\n \n     let module = sema.to_module_def(file_id);"}]}