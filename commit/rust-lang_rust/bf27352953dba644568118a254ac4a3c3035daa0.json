{"sha": "bf27352953dba644568118a254ac4a3c3035daa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMjczNTI5NTNkYmE2NDQ1NjgxMThhMjU0YWM0YTNjMzAzNWRhYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-15T00:34:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-15T00:34:38Z"}, "message": "auto merge of #4911 : lifthrasiir/rust/comment-exemptions, r=catamorphism\n\nThis is a natural extension of #4887, and handles the following three cases:\r\n\r\n~~~~\r\na line with only /s\r\n////////////////////////////////////////////\r\n\r\na line with only /s followed by whitespace\r\n////////////////////////////////////////////         \r\n\r\na block comment with only *s between two /s\r\n/********************************/\r\n~~~~", "tree": {"sha": "d57f840b31b65c3d5dcf4544cf5814fc9bac685c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57f840b31b65c3d5dcf4544cf5814fc9bac685c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf27352953dba644568118a254ac4a3c3035daa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf27352953dba644568118a254ac4a3c3035daa0", "html_url": "https://github.com/rust-lang/rust/commit/bf27352953dba644568118a254ac4a3c3035daa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf27352953dba644568118a254ac4a3c3035daa0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c07d037cd38204bda1ff9c564b6c1941c25138f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c07d037cd38204bda1ff9c564b6c1941c25138f", "html_url": "https://github.com/rust-lang/rust/commit/3c07d037cd38204bda1ff9c564b6c1941c25138f"}, {"sha": "5336bf6addc7091ed303a06246b43b99dc0c5cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5336bf6addc7091ed303a06246b43b99dc0c5cd1", "html_url": "https://github.com/rust-lang/rust/commit/5336bf6addc7091ed303a06246b43b99dc0c5cd1"}], "stats": {"total": 158, "additions": 109, "deletions": 49}, "files": [{"sha": "973b7deb960dbdc69cc834571996d072e37d426b", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bf27352953dba644568118a254ac4a3c3035daa0/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/bf27352953dba644568118a254ac4a3c3035daa0/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=bf27352953dba644568118a254ac4a3c3035daa0", "patch": "@@ -8,7 +8,8 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-license0 = \"\"\"// Copyright 2012-2013 The Rust Project Developers. See the\n+license0 = \"\"\"\\\n+// Copyright 2012-2013 The Rust Project Developers. See the\n // COPYRIGHT file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -19,7 +20,8 @@\n // except according to those terms.\n \"\"\"\n \n-license1 = \"\"\"// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+license1 = \"\"\"\\\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -30,7 +32,8 @@\n // except according to those terms.\n \"\"\"\n \n-license2 = \"\"\"// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+license2 = \"\"\"\\\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -41,7 +44,8 @@\n // except according to those terms.\n \"\"\"\n \n-license3 = \"\"\"# Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+license3 = \"\"\"\\\n+# Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #\n@@ -52,7 +56,19 @@\n # except according to those terms.\n \"\"\"\n \n-licenses = [license0, license1, license2, license3]\n+license4 = \"\"\"\\\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\"\"\"\n+\n+licenses = [license0, license1, license2, license3, license4]\n \n exceptions = [\n     \"rt/rust_android_dummy.cpp\", # BSD, chromium"}, {"sha": "d58d894b6a0af65e0c6aa19f236fd1c81d78b284", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bf27352953dba644568118a254ac4a3c3035daa0/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf27352953dba644568118a254ac4a3c3035daa0/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=bf27352953dba644568118a254ac4a3c3035daa0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -15,6 +15,7 @@ use codemap::{BytePos, CharPos, CodeMap, FileMap, Pos};\n use diagnostic;\n use parse::lexer::{is_whitespace, get_str_from, reader};\n use parse::lexer::{StringReader, bump, is_eof, nextch, TokenAndSpan};\n+use parse::lexer::{is_line_non_doc_comment, is_block_non_doc_comment};\n use parse::lexer;\n use parse::token;\n use parse;\n@@ -46,9 +47,9 @@ impl cmp::Eq for cmnt_style {\n pub type cmnt = {style: cmnt_style, lines: ~[~str], pos: BytePos};\n \n pub fn is_doc_comment(s: ~str) -> bool {\n-    s.starts_with(~\"///\") ||\n+    (s.starts_with(~\"///\") && !is_line_non_doc_comment(s)) ||\n     s.starts_with(~\"//!\") ||\n-    s.starts_with(~\"/**\") ||\n+    (s.starts_with(~\"/**\") && !is_block_non_doc_comment(s)) ||\n     s.starts_with(~\"/*!\")\n }\n \n@@ -231,47 +232,56 @@ fn read_block_comment(rdr: @mut StringReader,\n     bump(rdr);\n     bump(rdr);\n \n+    let mut curr_line = ~\"/*\";\n+\n     // doc-comments are not really comments, they are attributes\n     if rdr.curr == '*' || rdr.curr == '!' {\n         while !(rdr.curr == '*' && nextch(rdr) == '/') && !is_eof(rdr) {\n+            str::push_char(&mut curr_line, rdr.curr);\n             bump(rdr);\n         }\n         if !is_eof(rdr) {\n+            curr_line += ~\"*/\";\n             bump(rdr);\n             bump(rdr);\n         }\n-        return;\n-    }\n-\n-    let mut curr_line = ~\"/*\";\n-    let mut level: int = 1;\n-    while level > 0 {\n-        debug!(\"=== block comment level %d\", level);\n-        if is_eof(rdr) {(rdr as reader).fatal(~\"unterminated block comment\");}\n-        if rdr.curr == '\\n' {\n-            trim_whitespace_prefix_and_push_line(&mut lines, curr_line, col);\n-            curr_line = ~\"\";\n-            bump(rdr);\n-        } else {\n-            str::push_char(&mut curr_line, rdr.curr);\n-            if rdr.curr == '/' && nextch(rdr) == '*' {\n-                bump(rdr);\n+        if !is_block_non_doc_comment(curr_line) { return; }\n+        assert !curr_line.contains_char('\\n');\n+        lines.push(curr_line);\n+    } else {\n+        let mut level: int = 1;\n+        while level > 0 {\n+            debug!(\"=== block comment level %d\", level);\n+            if is_eof(rdr) {\n+                (rdr as reader).fatal(~\"unterminated block comment\");\n+            }\n+            if rdr.curr == '\\n' {\n+                trim_whitespace_prefix_and_push_line(&mut lines, curr_line,\n+                                                     col);\n+                curr_line = ~\"\";\n                 bump(rdr);\n-                curr_line += ~\"*\";\n-                level += 1;\n             } else {\n-                if rdr.curr == '*' && nextch(rdr) == '/' {\n+                str::push_char(&mut curr_line, rdr.curr);\n+                if rdr.curr == '/' && nextch(rdr) == '*' {\n                     bump(rdr);\n                     bump(rdr);\n-                    curr_line += ~\"/\";\n-                    level -= 1;\n-                } else { bump(rdr); }\n+                    curr_line += ~\"*\";\n+                    level += 1;\n+                } else {\n+                    if rdr.curr == '*' && nextch(rdr) == '/' {\n+                        bump(rdr);\n+                        bump(rdr);\n+                        curr_line += ~\"/\";\n+                        level -= 1;\n+                    } else { bump(rdr); }\n+                }\n             }\n         }\n+        if str::len(curr_line) != 0 {\n+            trim_whitespace_prefix_and_push_line(&mut lines, curr_line, col);\n+        }\n     }\n-    if str::len(curr_line) != 0 {\n-        trim_whitespace_prefix_and_push_line(&mut lines, curr_line, col);\n-    }\n+\n     let mut style = if code_to_the_left { trailing } else { isolated };\n     consume_non_eol_whitespace(rdr);\n     if !is_eof(rdr) && rdr.curr != '\\n' && vec::len(lines) == 1u {"}, {"sha": "cb9382ebbb6ccb2a05dcd262fca895709b12b3b9", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bf27352953dba644568118a254ac4a3c3035daa0/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf27352953dba644568118a254ac4a3c3035daa0/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=bf27352953dba644568118a254ac4a3c3035daa0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -253,6 +253,10 @@ fn consume_whitespace_and_comments(rdr: @mut StringReader)\n     return consume_any_line_comment(rdr);\n }\n \n+pub pure fn is_line_non_doc_comment(s: &str) -> bool {\n+    s.trim_right().all(|ch| ch == '/')\n+}\n+\n // PRECONDITION: rdr.curr is not whitespace\n // EFFECT: eats any kind of comment.\n // returns a Some(sugared-doc-attr) if one exists, None otherwise\n@@ -271,15 +275,18 @@ fn consume_any_line_comment(rdr: @mut StringReader)\n                     str::push_char(&mut acc, rdr.curr);\n                     bump(rdr);\n                 }\n-                return Some(TokenAndSpan{\n-                    tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n-                    sp: codemap::mk_sp(start_bpos, rdr.pos)\n-                });\n+                // but comments with only \"/\"s are not\n+                if !is_line_non_doc_comment(acc) {\n+                    return Some(TokenAndSpan{\n+                        tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n+                        sp: codemap::mk_sp(start_bpos, rdr.pos)\n+                    });\n+                }\n             } else {\n                 while rdr.curr != '\\n' && !is_eof(rdr) { bump(rdr); }\n-                // Restart whitespace munch.\n-                return consume_whitespace_and_comments(rdr);\n             }\n+            // Restart whitespace munch.\n+            return consume_whitespace_and_comments(rdr);\n           }\n           '*' => { bump(rdr); bump(rdr); return consume_block_comment(rdr); }\n           _ => ()\n@@ -298,6 +305,11 @@ fn consume_any_line_comment(rdr: @mut StringReader)\n     return None;\n }\n \n+pub pure fn is_block_non_doc_comment(s: &str) -> bool {\n+    assert s.len() >= 1u;\n+    str::all_between(s, 1u, s.len() - 1u, |ch| ch == '*')\n+}\n+\n // might return a sugared-doc-attr\n fn consume_block_comment(rdr: @mut StringReader)\n                       -> Option<TokenAndSpan> {\n@@ -315,10 +327,13 @@ fn consume_block_comment(rdr: @mut StringReader)\n             acc += ~\"*/\";\n             bump(rdr);\n             bump(rdr);\n-            return Some(TokenAndSpan{\n-                tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n-                sp: codemap::mk_sp(start_bpos, rdr.pos)\n-            });\n+            // but comments with only \"*\"s between two \"/\"s are not\n+            if !is_block_non_doc_comment(acc) {\n+                return Some(TokenAndSpan{\n+                    tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n+                    sp: codemap::mk_sp(start_bpos, rdr.pos)\n+                });\n+            }\n         }\n     } else {\n         loop {"}, {"sha": "a866afd240592fd0f699b4258f0a73cd0f73787d", "filename": "src/test/pretty/doc-comments.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bf27352953dba644568118a254ac4a3c3035daa0/src%2Ftest%2Fpretty%2Fdoc-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf27352953dba644568118a254ac4a3c3035daa0/src%2Ftest%2Fpretty%2Fdoc-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdoc-comments.rs?ref=bf27352953dba644568118a254ac4a3c3035daa0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -19,24 +19,43 @@ fn b() {\n     //! some single line inner-docs\n }\n \n+//////////////////////////////////\n+// some single-line non-doc comment preceded by a separator\n+\n+//////////////////////////////////           \n+/// some single-line outer-docs preceded by a separator\n+/// (and trailing whitespaces)\n+fn c() { }\n+\n /*\n  * some multi-line non-doc comment\n  */\n \n /**\n  * some multi-line outer-docs\n  */\n-fn c() { }\n+fn d() { }\n \n-fn d() {\n+fn e() {\n     /*!\n      * some multi-line inner-docs\n      */\n }\n \n+/********************************/\n+/*\n+ * some multi-line non-doc comment preceded by a separator\n+ */\n+\n+/********************************/\n+/**\n+ * some multi-line outer-docs preceded by a separator\n+ */\n+fn f() { }\n+\n #[doc = \"unsugared outer doc-comments work also\"]\n-fn e() { }\n+fn g() { }\n \n-fn f() {\n+fn h() {\n     #[doc = \"as do inner ones\"];\n }"}]}