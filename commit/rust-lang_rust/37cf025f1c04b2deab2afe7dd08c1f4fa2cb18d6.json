{"sha": "37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3Y2YwMjVmMWMwNGIyZGVhYjJhZmU3ZGQwOGMxZjRmYTJjYjE4ZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T05:05:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-11T05:05:20Z"}, "message": "Auto merge of #26154 - pmarcelll:master, r=Gankro\n\nVarious methods in both libcore/char.rs and librustc_unicode/char.rs were previously marked with #[inline], now every method is marked in char's impl blocks.\r\nPartially fixes #26124.\r\nEDIT: I'm not familiar with pull reqests (yet), apparently Github added my second commit to thit PR...\r\nFixes #26124", "tree": {"sha": "adb665019434fc36ab8f28af0a55d8a12b88dda6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adb665019434fc36ab8f28af0a55d8a12b88dda6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6", "html_url": "https://github.com/rust-lang/rust/commit/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbbd54afe4297032f521fa80ed0e5230d6e03e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbbd54afe4297032f521fa80ed0e5230d6e03e3", "html_url": "https://github.com/rust-lang/rust/commit/2fbbd54afe4297032f521fa80ed0e5230d6e03e3"}, {"sha": "e87c62fb12e6b02cfc39fc2a16c315615714757a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87c62fb12e6b02cfc39fc2a16c315615714757a", "html_url": "https://github.com/rust-lang/rust/commit/e87c62fb12e6b02cfc39fc2a16c315615714757a"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "6717f2f45fab5f7362ee210b096cb0596539003a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6", "patch": "@@ -468,24 +468,24 @@ impl String {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push(&mut self, ch: char) {\n-        if (ch as u32) < 0x80 {\n-            self.vec.push(ch as u8);\n-            return;\n-        }\n-\n-        let cur_len = self.len();\n-        // This may use up to 4 bytes.\n-        self.vec.reserve(4);\n+        match ch.len_utf8() {\n+            1 => self.vec.push(ch as u8),\n+            ch_len => {\n+                let cur_len = self.len();\n+                // This may use up to 4 bytes.\n+                self.vec.reserve(ch_len);\n \n-        unsafe {\n-            // Attempt to not use an intermediate buffer by just pushing bytes\n-            // directly onto this string.\n-            let slice = slice::from_raw_parts_mut (\n-                self.vec.as_mut_ptr().offset(cur_len as isize),\n-                4\n-            );\n-            let used = ch.encode_utf8(slice).unwrap_or(0);\n-            self.vec.set_len(cur_len + used);\n+                unsafe {\n+                    // Attempt to not use an intermediate buffer by just pushing bytes\n+                    // directly onto this string.\n+                    let slice = slice::from_raw_parts_mut (\n+                        self.vec.as_mut_ptr().offset(cur_len as isize),\n+                        ch_len\n+                    );\n+                    let used = ch.encode_utf8(slice).unwrap_or(0);\n+                    self.vec.set_len(cur_len + used);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "9938c2996158a6adea76ec39ee3fea6396cf9e9a", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6", "patch": "@@ -152,10 +152,12 @@ pub trait CharExt {\n }\n \n impl CharExt for char {\n+    #[inline]\n     fn is_digit(self, radix: u32) -> bool {\n         self.to_digit(radix).is_some()\n     }\n \n+    #[inline]\n     fn to_digit(self, radix: u32) -> Option<u32> {\n         if radix > 36 {\n             panic!(\"to_digit: radix is too high (maximum 36)\");\n@@ -170,10 +172,12 @@ impl CharExt for char {\n         else { None }\n     }\n \n+    #[inline]\n     fn escape_unicode(self) -> EscapeUnicode {\n         EscapeUnicode { c: self, state: EscapeUnicodeState::Backslash }\n     }\n \n+    #[inline]\n     fn escape_default(self) -> EscapeDefault {\n         let init_state = match self {\n             '\\t' => EscapeDefaultState::Backslash('t'),"}, {"sha": "a8bee00f4a9e0680030451b5970149f0aa48d611", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=37cf025f1c04b2deab2afe7dd08c1f4fa2cb18d6", "patch": "@@ -174,6 +174,7 @@ impl char {\n     /// assert_eq!('f'.to_digit(16), Some(15));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> { C::to_digit(self, radix) }\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape of a\n@@ -212,6 +213,7 @@ impl char {\n     /// assert_eq!(heart, r\"\\u{2764}\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn escape_unicode(self) -> EscapeUnicode { C::escape_unicode(self) }\n \n     /// Returns an iterator that yields the 'default' ASCII and\n@@ -250,6 +252,7 @@ impl char {\n     /// assert_eq!(quote, \"\\\\\\\"\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn escape_default(self) -> EscapeDefault { C::escape_default(self) }\n \n     /// Returns the number of bytes this character would need if encoded in\n@@ -263,6 +266,7 @@ impl char {\n     /// assert_eq!(n, 2);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn len_utf8(self) -> usize { C::len_utf8(self) }\n \n     /// Returns the number of 16-bit code units this character would need if\n@@ -276,6 +280,7 @@ impl char {\n     /// assert_eq!(n, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn len_utf16(self) -> usize { C::len_utf16(self) }\n \n     /// Encodes this character as UTF-8 into the provided byte buffer, and then\n@@ -310,6 +315,7 @@ impl char {\n     /// ```\n     #[unstable(feature = \"unicode\",\n                reason = \"pending decision about Iterator/Writer/Reader\")]\n+    #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> Option<usize> { C::encode_utf8(self, dst) }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer, and\n@@ -344,6 +350,7 @@ impl char {\n     /// ```\n     #[unstable(feature = \"unicode\",\n                reason = \"pending decision about Iterator/Writer/Reader\")]\n+    #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> Option<usize> { C::encode_utf16(self, dst) }\n \n     /// Returns whether the specified character is considered a Unicode\n@@ -527,5 +534,6 @@ impl char {\n                  since = \"1.0.0\")]\n     #[unstable(feature = \"unicode\",\n                reason = \"needs expert opinion. is_cjk flag stands out as ugly\")]\n+    #[inline]\n     pub fn width(self, is_cjk: bool) -> Option<usize> { charwidth::width(self, is_cjk) }\n }"}]}