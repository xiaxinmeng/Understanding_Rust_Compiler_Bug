{"sha": "f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "node_id": "C_kwDOAAsO6NoAKGY1N2NkODM4ZDgyOGNjMmE3M2FjN2UxMzNkZjBlOTY0MWRjYWM5YjU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-23T21:30:23Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-23T22:08:28Z"}, "message": "Don't run proc-macro-srv tests on the rust-analyzer repo\n\nproc-macro ABI breakage still affects the tests when a new stable version\nreleases. Ideally we'd still be able to run the tests on the rust-analyzer\nrepo without having to update the proc-macro ABI, but for now just to\nunblock CI we will ignore them here, as they are still run in upstream.", "tree": {"sha": "e7f4ee7206ae33cf1e1418542b2de484b83edb89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7f4ee7206ae33cf1e1418542b2de484b83edb89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "html_url": "https://github.com/rust-lang/rust/commit/f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b49745d009634170493a214364261e36228274b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b49745d009634170493a214364261e36228274b", "html_url": "https://github.com/rust-lang/rust/commit/5b49745d009634170493a214364261e36228274b"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "243972b04997cc6128a582d3e9b62f18a802655e", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fmod.rs?ref=f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "patch": "@@ -11,6 +11,8 @@ use proc_macro_api::ProcMacroKind;\n \n use super::PanicMessage;\n \n+pub use ra_server::TokenStream;\n+\n pub(crate) struct Abi {\n     exported_macros: Vec<proc_macro::bridge::client::ProcMacro>,\n }"}, {"sha": "2f854bc1595489e95ebf72041a28fb7c753b0489", "filename": "crates/proc-macro-srv/src/abis/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fmod.rs?ref=f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "patch": "@@ -32,8 +32,8 @@ mod abi_sysroot;\n include!(concat!(env!(\"OUT_DIR\"), \"/rustc_version.rs\"));\n \n // Used by `test/utils.rs`\n-#[cfg(test)]\n-pub(crate) use abi_1_63::TokenStream as TestTokenStream;\n+#[cfg(all(test, feature = \"sysroot-abi\"))]\n+pub(crate) use abi_sysroot::TokenStream as TestTokenStream;\n \n use super::dylib::LoadProcMacroDylibError;\n pub(crate) use abi_1_58::Abi as Abi_1_58;\n@@ -144,3 +144,10 @@ impl Abi {\n         }\n     }\n }\n+\n+#[test]\n+fn test_version_check() {\n+    let path = paths::AbsPathBuf::assert(crate::proc_macro_test_dylib_path());\n+    let info = proc_macro_api::read_dylib_info(&path).unwrap();\n+    assert!(info.version.1 >= 50);\n+}"}, {"sha": "72a2dfe72d3742f24049e2181e070e1159cbc98d", "filename": "crates/proc-macro-srv/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs?ref=f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "patch": "@@ -20,6 +20,8 @@\n mod dylib;\n mod abis;\n \n+pub mod cli;\n+\n use std::{\n     collections::{hash_map::Entry, HashMap},\n     env,\n@@ -149,7 +151,10 @@ impl EnvSnapshot {\n     }\n }\n \n-pub mod cli;\n+#[cfg(all(feature = \"sysroot-abi\", test))]\n+mod tests;\n \n #[cfg(test)]\n-mod tests;\n+pub fn proc_macro_test_dylib_path() -> std::path::PathBuf {\n+    proc_macro_test::PROC_MACRO_TEST_LOCATION.into()\n+}"}, {"sha": "b46cdddcf6b1090314e8fe4b513167cfc77877cc", "filename": "crates/proc-macro-srv/src/tests/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs?ref=f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "patch": "@@ -2,10 +2,10 @@\n \n #[macro_use]\n mod utils;\n-use expect_test::expect;\n-use paths::AbsPathBuf;\n use utils::*;\n \n+use expect_test::expect;\n+\n #[test]\n fn test_derive_empty() {\n     assert_expand(\"DeriveEmpty\", r#\"struct S;\"#, expect![[r#\"SUBTREE $\"#]]);\n@@ -157,10 +157,3 @@ fn list_test_macros() {\n         DeriveError [CustomDerive]\"#]]\n     .assert_eq(&res);\n }\n-\n-#[test]\n-fn test_version_check() {\n-    let path = AbsPathBuf::assert(fixtures::proc_macro_test_dylib_path());\n-    let info = proc_macro_api::read_dylib_info(&path).unwrap();\n-    assert!(info.version.1 >= 50);\n-}"}, {"sha": "44b1b6588da0a2c2ddddc50af9bdfb1789b92e54", "filename": "crates/proc-macro-srv/src/tests/utils.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Futils.rs?ref=f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "patch": "@@ -1,15 +1,9 @@\n //! utils used in proc-macro tests\n \n-use crate::dylib;\n-use crate::ProcMacroSrv;\n use expect_test::Expect;\n use std::str::FromStr;\n \n-pub mod fixtures {\n-    pub fn proc_macro_test_dylib_path() -> std::path::PathBuf {\n-        proc_macro_test::PROC_MACRO_TEST_LOCATION.into()\n-    }\n-}\n+use crate::{dylib, proc_macro_test_dylib_path, ProcMacroSrv};\n \n fn parse_string(code: &str) -> Option<crate::abis::TestTokenStream> {\n     // This is a bit strange. We need to parse a string into a token stream into\n@@ -30,7 +24,7 @@ pub fn assert_expand_attr(macro_name: &str, ra_fixture: &str, attr_args: &str, e\n }\n \n fn assert_expand_impl(macro_name: &str, input: &str, attr: Option<&str>, expect: Expect) {\n-    let path = fixtures::proc_macro_test_dylib_path();\n+    let path = proc_macro_test_dylib_path();\n     let expander = dylib::Expander::new(&path).unwrap();\n     let fixture = parse_string(input).unwrap();\n     let attr = attr.map(|attr| parse_string(attr).unwrap().into_subtree());\n@@ -40,7 +34,7 @@ fn assert_expand_impl(macro_name: &str, input: &str, attr: Option<&str>, expect:\n }\n \n pub(crate) fn list() -> Vec<String> {\n-    let dylib_path = fixtures::proc_macro_test_dylib_path();\n+    let dylib_path = proc_macro_test_dylib_path();\n     let mut srv = ProcMacroSrv::default();\n     let res = srv.list_macros(&dylib_path).unwrap();\n     res.into_iter().map(|(name, kind)| format!(\"{} [{:?}]\", name, kind)).collect()"}, {"sha": "3e3f1c162f52c298a4c588986c5725426f428263", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57cd838d828cc2a73ac7e133df0e9641dcac9b5/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=f57cd838d828cc2a73ac7e133df0e9641dcac9b5", "patch": "@@ -18,7 +18,6 @@ mod tidy;\n \n use std::{collections::HashMap, path::PathBuf, time::Instant};\n \n-use expect_test::expect;\n use lsp_types::{\n     notification::DidOpenTextDocument,\n     request::{\n@@ -821,7 +820,10 @@ fn main() {\n }\n \n #[test]\n+// FIXME: Re-enable once we can run proc-macro tests on rust-lang/rust-analyzer again\n+#[cfg(FALSE)]\n fn resolve_proc_macro() {\n+    use expect_test::expect;\n     if skip_slow_tests() {\n         return;\n     }"}]}