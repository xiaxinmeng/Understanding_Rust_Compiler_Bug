{"sha": "107767731a887cac817a4124d9fc52e62e54bd9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNzc2NzczMWE4ODdjYWM4MTdhNDEyNGQ5ZmM1MmU2MmU1NGJkOWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T19:01:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T19:01:34Z"}, "message": "rustc: Use only ast_ty_to_ty for region inference", "tree": {"sha": "e271b2b41c62ee3247ea345a6b79c367594e8a37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e271b2b41c62ee3247ea345a6b79c367594e8a37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107767731a887cac817a4124d9fc52e62e54bd9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107767731a887cac817a4124d9fc52e62e54bd9c", "html_url": "https://github.com/rust-lang/rust/commit/107767731a887cac817a4124d9fc52e62e54bd9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107767731a887cac817a4124d9fc52e62e54bd9c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "014dd547a03df624539c968ab99816d5e7c23363", "url": "https://api.github.com/repos/rust-lang/rust/commits/014dd547a03df624539c968ab99816d5e7c23363", "html_url": "https://github.com/rust-lang/rust/commit/014dd547a03df624539c968ab99816d5e7c23363"}], "stats": {"total": 31, "additions": 4, "deletions": 27}, "files": [{"sha": "73409893e5c8784b26727d5ff2eb38f09bc5c42e", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/107767731a887cac817a4124d9fc52e62e54bd9c/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107767731a887cac817a4124d9fc52e62e54bd9c/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=107767731a887cac817a4124d9fc52e62e54bd9c", "patch": "@@ -104,13 +104,13 @@ fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n \n     alt ty.node {\n         ast::ty_rptr({id: region_id, node: node}, _) {\n-            let region;\n             alt node {\n-                ast::re_inferred { region = inferred_region; }\n+                ast::re_inferred | ast::re_self { /* no-op */ }\n                 ast::re_named(ident) {\n                     // If at item scope, introduce or reuse a binding. If at\n                     // block scope, require that the binding be introduced.\n                     let bindings = cx.bindings;\n+                    let region;\n                     alt list::find(*bindings, {|b| ident == b.name}) {\n                         some(binding) { region = ty::re_named(binding.id); }\n                         none {\n@@ -138,34 +138,11 @@ fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n                             }\n                         }\n                     }\n-                }\n-\n-                ast::re_self {\n-                    // For blocks, \"self\" means \"the current block\".\n-                    //\n-                    // TODO: What do we do in an alt?\n-                    //\n-                    // FIXME: Doesn't work in type items.\n \n-                    alt cx.parent {\n-                        pa_item(item_id) | pa_nested_fn(item_id) {\n-                            let def_id = {crate: ast::local_crate,\n-                                          node: item_id};\n-                            region = ty::re_caller(def_id);\n-                        }\n-                        pa_block(block_id) {\n-                            region = ty::re_block(block_id);\n-                        }\n-                        pa_crate {\n-                            cx.sess.span_bug(ty.span,\n-                                             \"region type outside item?!\");\n-                        }\n-                    }\n+                    let ast_type_to_region = cx.region_map.ast_type_to_region;\n+                    ast_type_to_region.insert(region_id, region);\n                 }\n-\n             }\n-\n-            cx.region_map.ast_type_to_region.insert(region_id, region);\n         }\n         _ { /* nothing to do */ }\n     }"}]}