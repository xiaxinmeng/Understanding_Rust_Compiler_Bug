{"sha": "11ca975cd83351aae3b113ceb754dde4a304a6b5", "node_id": "C_kwDOAAsO6NoAKDExY2E5NzVjZDgzMzUxYWFlM2IxMTNjZWI3NTRkZGU0YTMwNGE2YjU", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-07T00:07:16Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:22Z"}, "message": "Move type definitions together and clarify fetch_store on empty buffer", "tree": {"sha": "1f0f2a587a17703227a74c5d3894c2c14472c2d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f0f2a587a17703227a74c5d3894c2c14472c2d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ca975cd83351aae3b113ceb754dde4a304a6b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRDoACgkQGBtJ+fOP\nM3TCpgwApku1iMD14YB0g2f5Kom0fxuUgh8APeAIL3f93ug3qXYzfb75YXJmuE5n\nN0sa1uaqvUjBdFZnL5CrJdh9LeWnFPGHR4Wk6RoGdGe5uIipDRCuCpb7Y8MzY4Ox\nQDBhhDlF2mbbLcCp7svosbQso1NlzddI7xbv5UxkgNMmGppYx/hLkRDYjzWFa1Pl\nN/A8ikmH5iXsFV9rm9IgwrnICDhrjO3IqjJPCNAEtuAA1YGt4a4EnXVVXHCL9bDZ\n4CSOJWXqh/ebtPyVyElQINtdUoqYp+KzqQIoI2C/EsVZi2Q88sgTEJRl2qDWiYBR\n/YhCUwzDyUKTEdYuxj5E8C2mPTnhy1cZUNUztYdP5rU+GsonhfT5lAGdVoTXb4vh\nVLkW+yU/LfVfYRSibNgA2T0fnY7BvvgMAWFPSx3ljlk94/4+9izSEIfmv27tMfgM\nA8TCY87xUWWaDdLYjV6n7Q0KJea81Xocm+/x2Ts1GrO7QZw90IlV4zmJJPuxgJeX\nx8VzjVUJ\n=nhdE\n-----END PGP SIGNATURE-----", "payload": "tree 1f0f2a587a17703227a74c5d3894c2c14472c2d0\nparent bf7fe68fba3a3bbfaef7fdbace268d0001e038cf\nauthor Andy Wang <cbeuw.andy@gmail.com> 1651882036 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539322 +0100\n\nMove type definitions together and clarify fetch_store on empty buffer\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ca975cd83351aae3b113ceb754dde4a304a6b5", "html_url": "https://github.com/rust-lang/rust/commit/11ca975cd83351aae3b113ceb754dde4a304a6b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ca975cd83351aae3b113ceb754dde4a304a6b5/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf7fe68fba3a3bbfaef7fdbace268d0001e038cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7fe68fba3a3bbfaef7fdbace268d0001e038cf", "html_url": "https://github.com/rust-lang/rust/commit/bf7fe68fba3a3bbfaef7fdbace268d0001e038cf"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "0d892a5b38db528ff6a9ae485877c104e8a722d7", "filename": "src/weak_memory.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/11ca975cd83351aae3b113ceb754dde4a304a6b5/src%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ca975cd83351aae3b113ceb754dde4a304a6b5/src%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fweak_memory.rs?ref=11ca975cd83351aae3b113ceb754dde4a304a6b5", "patch": "@@ -40,13 +40,40 @@ use crate::{\n \n pub type AllocExtra = StoreBufferAlloc;\n \n+const STORE_BUFFER_LIMIT: usize = 128;\n+\n #[derive(Debug, Clone)]\n pub struct StoreBufferAlloc {\n     /// Store buffer of each atomic object in this allocation\n     // Behind a RefCell because we need to allocate/remove on read access\n     store_buffer: RefCell<AllocationMap<StoreBuffer>>,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct StoreBuffer {\n+    // Stores to this location in modification order\n+    buffer: VecDeque<StoreElement>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct StoreElement {\n+    /// The identifier of the vector index, corresponding to a thread\n+    /// that performed the store.\n+    store_index: VectorIdx,\n+\n+    /// Whether this store is SC.\n+    is_seqcst: bool,\n+\n+    /// The timestamp of the storing thread when it performed the store\n+    timestamp: VTimestamp,\n+    /// The value of this store\n+    val: ScalarMaybeUninit<Tag>,\n+\n+    /// Timestamp of first loads from this store element by each thread\n+    /// Behind a RefCell to keep load op take &self\n+    loads: RefCell<FxHashMap<VectorIdx, VTimestamp>>,\n+}\n+\n impl StoreBufferAlloc {\n     pub fn new_allocation() -> Self {\n         Self { store_buffer: RefCell::new(AllocationMap::new()) }\n@@ -105,13 +132,6 @@ impl StoreBufferAlloc {\n     }\n }\n \n-const STORE_BUFFER_LIMIT: usize = 128;\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct StoreBuffer {\n-    // Stores to this location in modification order\n-    buffer: VecDeque<StoreElement>,\n-}\n-\n impl Default for StoreBuffer {\n     fn default() -> Self {\n         let mut buffer = VecDeque::new();\n@@ -175,7 +195,11 @@ impl<'mir, 'tcx: 'mir> StoreBuffer {\n \n     /// Selects a valid store element in the buffer.\n     /// The buffer does not contain the value used to initialise the atomic object\n-    /// so a fresh atomic object has an empty store buffer until an explicit store.\n+    /// so a fresh atomic object has an empty store buffer and this function\n+    /// will return `None`. In this case, the caller should ensure that the non-buffered\n+    /// value from `MiriEvalContext::read_scalar()` is observed by the program, which is\n+    /// the initial value of the atomic object. `MiriEvalContext::read_scalar()` is always\n+    /// the latest value in modification order so it is always correct to be observed by any thread.\n     fn fetch_store<R: rand::Rng + ?Sized>(\n         &self,\n         is_seqcst: bool,\n@@ -294,25 +318,6 @@ impl<'mir, 'tcx: 'mir> StoreBuffer {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct StoreElement {\n-    /// The identifier of the vector index, corresponding to a thread\n-    /// that performed the store.\n-    store_index: VectorIdx,\n-\n-    /// Whether this store is SC.\n-    is_seqcst: bool,\n-\n-    /// The timestamp of the storing thread when it performed the store\n-    timestamp: VTimestamp,\n-    /// The value of this store\n-    val: ScalarMaybeUninit<Tag>,\n-\n-    /// Timestamp of first loads from this store element by each thread\n-    /// Behind a RefCell to keep load op take &self\n-    loads: RefCell<FxHashMap<VectorIdx, VTimestamp>>,\n-}\n-\n impl StoreElement {\n     /// ATOMIC LOAD IMPL in the paper\n     /// Unlike the operational semantics in the paper, we don't need to keep track"}]}