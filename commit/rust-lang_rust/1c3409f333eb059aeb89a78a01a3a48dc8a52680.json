{"sha": "1c3409f333eb059aeb89a78a01a3a48dc8a52680", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMzQwOWYzMzNlYjA1OWFlYjg5YTc4YTAxYTNhNDhkYzhhNTI2ODA=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-07T15:06:07Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-12T23:08:35Z"}, "message": "Introduce NullOp::AlignOf", "tree": {"sha": "97a8f81da8c671c8018372133f5c6fc9575c5ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97a8f81da8c671c8018372133f5c6fc9575c5ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3409f333eb059aeb89a78a01a3a48dc8a52680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3409f333eb059aeb89a78a01a3a48dc8a52680", "html_url": "https://github.com/rust-lang/rust/commit/1c3409f333eb059aeb89a78a01a3a48dc8a52680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3409f333eb059aeb89a78a01a3a48dc8a52680/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b69fe57261086e70aea9d5b58819a1794bf7c121", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69fe57261086e70aea9d5b58819a1794bf7c121", "html_url": "https://github.com/rust-lang/rust/commit/b69fe57261086e70aea9d5b58819a1794bf7c121"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "d29558a4e1f651d5b5f8274c9b53e09be11374fe", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -726,15 +726,20 @@ fn codegen_stmt<'tcx>(\n                     let ptr = fx.bcx.inst_results(call)[0];\n                     lval.write_cvalue(fx, CValue::by_val(ptr, box_layout));\n                 }\n-                Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n+                Rvalue::NullaryOp(null_op, ty) => {\n                     assert!(\n                         lval.layout()\n                             .ty\n                             .is_sized(fx.tcx.at(stmt.source_info.span), ParamEnv::reveal_all())\n                     );\n-                    let ty_size = fx.layout_of(fx.monomorphize(ty)).size.bytes();\n+                    let layout = fx.layout_of(fx.monomorphize(ty));\n+                    let val = match null_op {\n+                        NullOp::SizeOf => layout.size.bytes(),\n+                        NullOp::AlignOf => layout.align.abi.bytes(),\n+                        NullOp::Box => unreachable!(),\n+                    };\n                     let val =\n-                        CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), ty_size.into());\n+                        CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);\n                 }\n                 Rvalue::Aggregate(ref kind, ref operands) => match kind.as_ref() {"}, {"sha": "19d9f077694316d93b72b231d796ed62c9768437", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -823,7 +823,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             dest.write_cvalue(fx, val);\n         };\n \n-        pref_align_of | min_align_of | needs_drop | type_id | type_name | variant_count, () {\n+        pref_align_of | needs_drop | type_id | type_name | variant_count, () {\n             let const_val =\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n             let val = crate::constant::codegen_const_value("}, {"sha": "f943157dc66fa200cd61315d87754c5e2a96b501", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -104,7 +104,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n             sym::pref_align_of\n-            | sym::min_align_of\n             | sym::needs_drop\n             | sym::type_id\n             | sym::type_name"}, {"sha": "ce04d3637f91aeec865ff39f9f04187c2ea10106", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -487,20 +487,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 )\n             }\n \n-            mir::Rvalue::NullaryOp(mir::NullOp::SizeOf, ty) => {\n-                let ty = self.monomorphize(ty);\n-                assert!(bx.cx().type_is_sized(ty));\n-                let val = bx.cx().const_usize(bx.cx().layout_of(ty).size.bytes());\n-                let tcx = self.cx.tcx();\n-                (\n-                    bx,\n-                    OperandRef {\n-                        val: OperandValue::Immediate(val),\n-                        layout: self.cx.layout_of(tcx.types.usize),\n-                    },\n-                )\n-            }\n-\n             mir::Rvalue::NullaryOp(mir::NullOp::Box, content_ty) => {\n                 let content_ty = self.monomorphize(content_ty);\n                 let content_layout = bx.cx().layout_of(content_ty);\n@@ -525,6 +511,27 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let operand = OperandRef { val: OperandValue::Immediate(val), layout: box_layout };\n                 (bx, operand)\n             }\n+\n+            mir::Rvalue::NullaryOp(null_op, ty) => {\n+                let ty = self.monomorphize(ty);\n+                assert!(bx.cx().type_is_sized(ty));\n+                let layout = bx.cx().layout_of(ty);\n+                let val = match null_op {\n+                    mir::NullOp::SizeOf => layout.size.bytes(),\n+                    mir::NullOp::AlignOf => layout.align.abi.bytes(),\n+                    mir::NullOp::Box => unreachable!(),\n+                };\n+                let val = bx.cx().const_usize(val);\n+                let tcx = self.cx.tcx();\n+                (\n+                    bx,\n+                    OperandRef {\n+                        val: OperandValue::Immediate(val),\n+                        layout: self.cx.layout_of(tcx.types.usize),\n+                    },\n+                )\n+            }\n+\n             mir::Rvalue::ThreadLocalRef(def_id) => {\n                 assert!(bx.cx().tcx().is_static(def_id));\n                 let static_ = bx.get_static(def_id);"}, {"sha": "7e1011456869e5098446bfe8bcc6010176ed64c9", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -160,17 +160,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(Scalar::from_machine_usize(result, self), dest)?;\n             }\n \n-            sym::min_align_of\n-            | sym::pref_align_of\n+            sym::pref_align_of\n             | sym::needs_drop\n             | sym::type_id\n             | sym::type_name\n             | sym::variant_count => {\n                 let gid = GlobalId { instance, promoted: None };\n                 let ty = match intrinsic_name {\n-                    sym::min_align_of | sym::pref_align_of | sym::variant_count => {\n-                        self.tcx.types.usize\n-                    }\n+                    sym::pref_align_of | sym::variant_count => self.tcx.types.usize,\n                     sym::needs_drop => self.tcx.types.bool,\n                     sym::type_id => self.tcx.types.u64,\n                     sym::type_name => self.tcx.mk_static_str(),"}, {"sha": "6e35b33188cd238b858d1f3e696cebe86f49f364", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -270,18 +270,23 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 M::box_alloc(self, &dest)?;\n             }\n \n-            NullaryOp(mir::NullOp::SizeOf, ty) => {\n+            NullaryOp(null_op, ty) => {\n                 let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty);\n                 let layout = self.layout_of(ty)?;\n                 if layout.is_unsized() {\n                     // FIXME: This should be a span_bug (#80742)\n                     self.tcx.sess.delay_span_bug(\n                         self.frame().current_span(),\n-                        &format!(\"SizeOf nullary MIR operator called for unsized type {}\", ty),\n+                        &format!(\"Nullary MIR operator called for unsized type {}\", ty),\n                     );\n                     throw_inval!(SizeOfUnsizedType(ty));\n                 }\n-                self.write_scalar(Scalar::from_machine_usize(layout.size.bytes(), self), &dest)?;\n+                let val = match null_op {\n+                    mir::NullOp::SizeOf => layout.size.bytes(),\n+                    mir::NullOp::AlignOf => layout.align.abi.bytes(),\n+                    mir::NullOp::Box => unreachable!(),\n+                };\n+                self.write_scalar(Scalar::from_machine_usize(val, self), &dest)?;\n             }\n \n             Cast(cast_kind, ref operand, cast_ty) => {"}, {"sha": "02b317b89810620357e2d88e0ef298b198845063", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -648,7 +648,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 }\n             }\n \n-            Rvalue::NullaryOp(NullOp::SizeOf, _) => {}\n+            Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n             Rvalue::NullaryOp(NullOp::Box, _) => self.check_op(ops::HeapAllocation),\n \n             Rvalue::UnaryOp(_, ref operand) => {"}, {"sha": "8c24c9fa9769cff229679c50544c1f126988a1e2", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -520,6 +520,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n             Rvalue::NullaryOp(op, _) => match op {\n                 NullOp::Box => return Err(Unpromotable),\n                 NullOp::SizeOf => {}\n+                NullOp::AlignOf => {}\n             },\n \n             Rvalue::UnaryOp(op, operand) => {"}, {"sha": "3acf60d8461ea732f164b35d9ae8a15ddd7d1b97", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -2278,6 +2278,8 @@ impl BinOp {\n pub enum NullOp {\n     /// Returns the size of a value of that type\n     SizeOf,\n+    /// Returns the minimum alignment of a type\n+    AlignOf,\n     /// Creates a new uninitialized box for a value of that type\n     Box,\n }"}, {"sha": "b48e8a868efdb1cf01a0b9e9abf5cf93fbbad603", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -196,7 +196,7 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Discriminant(ref place) => place.ty(local_decls, tcx).ty.discriminant_ty(tcx),\n             Rvalue::NullaryOp(NullOp::Box, t) => tcx.mk_box(t),\n-            Rvalue::NullaryOp(NullOp::SizeOf, _) => tcx.types.usize,\n+            Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => tcx.types.usize,\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n                 AggregateKind::Tuple => tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx))),"}, {"sha": "407ba739463013ddb2346298efcc0774134141d9", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -342,7 +342,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | Rvalue::AddressOf(..)\n             | Rvalue::Discriminant(..)\n             | Rvalue::Len(..)\n-            | Rvalue::NullaryOp(NullOp::SizeOf, _)\n+            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _)\n             | Rvalue::NullaryOp(NullOp::Box, _) => {\n                 // This returns an rvalue with uninitialized contents. We can't\n                 // move out of it here because it is an rvalue - assignments always"}, {"sha": "5848163af72fc22b0cc2d09f56f5f308e445852d", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -92,14 +92,19 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         // since their semantics depend on the value of overflow-checks flag used\n                         // during codegen. Issue #35310.\n                     }\n-                    sym::size_of => {\n+                    sym::size_of | sym::min_align_of => {\n                         if let Some((destination, target)) = *destination {\n                             let tp_ty = substs.type_at(0);\n+                            let null_op = match intrinsic_name {\n+                                sym::size_of => NullOp::SizeOf,\n+                                sym::min_align_of => NullOp::AlignOf,\n+                                _ => bug!(\"unexpected intrinsic\"),\n+                            };\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n                                 kind: StatementKind::Assign(Box::new((\n                                     destination,\n-                                    Rvalue::NullaryOp(NullOp::SizeOf, tp_ty),\n+                                    Rvalue::NullaryOp(null_op, tp_ty),\n                                 ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };"}, {"sha": "e9a9895cb746f39a6abece6de0aa7df4aa26ca92", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c3409f333eb059aeb89a78a01a3a48dc8a52680/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3409f333eb059aeb89a78a01a3a48dc8a52680/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=1c3409f333eb059aeb89a78a01a3a48dc8a52680", "patch": "@@ -192,7 +192,7 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n                 ))\n             }\n         },\n-        Rvalue::NullaryOp(NullOp::SizeOf, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => Ok(()),\n         Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);"}]}