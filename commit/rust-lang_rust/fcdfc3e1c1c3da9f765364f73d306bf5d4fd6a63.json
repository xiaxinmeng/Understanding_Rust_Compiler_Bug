{"sha": "fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "node_id": "C_kwDOAAsO6NoAKGZjZGZjM2UxYzFjM2RhOWY3NjUzNjRmNzNkMzA2YmY1ZDRmZDZhNjM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-05T17:31:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-05T17:31:51Z"}, "message": "interp: pass TyCtxt to Machine methods that do not take InterpCx", "tree": {"sha": "69d27512e32df3377f200229093191c9989cb84f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69d27512e32df3377f200229093191c9989cb84f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "html_url": "https://github.com/rust-lang/rust/commit/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634770c0a7f8598164ab825cfe419cc8b03c36e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/634770c0a7f8598164ab825cfe419cc8b03c36e5", "html_url": "https://github.com/rust-lang/rust/commit/634770c0a7f8598164ab825cfe419cc8b03c36e5"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "c44e27fc4a098bfee17adf1c52c14cb7ad2fb371", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "patch": "@@ -1,6 +1,6 @@\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::hash::Hash;\n@@ -471,6 +471,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn before_access_global(\n+        _tcx: TyCtxt<'tcx>,\n         machine: &Self,\n         alloc_id: AllocId,\n         alloc: ConstAllocation<'tcx>,"}, {"sha": "ddfbcbdd22e162495e2621d8ab67184c11ed4d68", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "patch": "@@ -7,7 +7,7 @@ use std::fmt::Debug;\n use std::hash::Hash;\n \n use rustc_middle::mir;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n@@ -246,6 +246,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// `def_id` is `Some` if this is the \"lazy\" allocation of a static.\n     #[inline]\n     fn before_access_global(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_id: AllocId,\n         _allocation: ConstAllocation<'tcx>,\n@@ -317,6 +318,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// need to mutate.\n     #[inline(always)]\n     fn memory_read(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_extra: &Self::AllocExtra,\n         _tag: Self::PointerTag,\n@@ -328,6 +330,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Hook for performing extra checks on a memory write access.\n     #[inline(always)]\n     fn memory_written(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &mut Self,\n         _alloc_extra: &mut Self::AllocExtra,\n         _tag: Self::PointerTag,\n@@ -339,6 +342,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Hook for performing extra operations on a memory deallocation.\n     #[inline(always)]\n     fn memory_deallocated(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &mut Self,\n         _alloc_extra: &mut Self::AllocExtra,\n         _tag: Self::PointerTag,"}, {"sha": "a02115a110b7b734d1ba6cf0f4ceb64e22612c56", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "patch": "@@ -327,6 +327,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Let the machine take some extra action\n         let size = alloc.size();\n         M::memory_deallocated(\n+            *self.tcx,\n             &mut self.machine,\n             &mut alloc.extra,\n             ptr.provenance,\n@@ -509,7 +510,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 (self.tcx.eval_static_initializer(def_id)?, Some(def_id))\n             }\n         };\n-        M::before_access_global(&self.machine, id, alloc, def_id, is_write)?;\n+        M::before_access_global(*self.tcx, &self.machine, id, alloc, def_id, is_write)?;\n         // We got tcx memory. Let the machine initialize its \"extra\" stuff.\n         let alloc = M::init_allocation_extra(\n             self,\n@@ -575,7 +576,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         )?;\n         if let Some((alloc_id, offset, ptr, alloc)) = ptr_and_alloc {\n             let range = alloc_range(offset, size);\n-            M::memory_read(&self.machine, &alloc.extra, ptr.provenance, range)?;\n+            M::memory_read(*self.tcx, &self.machine, &alloc.extra, ptr.provenance, range)?;\n             Ok(Some(AllocRef { alloc, range, tcx: *self.tcx, alloc_id }))\n         } else {\n             // Even in this branch we have to be sure that we actually access the allocation, in\n@@ -636,7 +637,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // We cannot call `get_raw_mut` inside `check_and_deref_ptr` as that would duplicate `&mut self`.\n             let (alloc, machine) = self.get_alloc_raw_mut(alloc_id)?;\n             let range = alloc_range(offset, size);\n-            M::memory_written(machine, &mut alloc.extra, ptr.provenance, range)?;\n+            M::memory_written(tcx, machine, &mut alloc.extra, ptr.provenance, range)?;\n             Ok(Some(AllocRefMut { alloc, range, tcx, alloc_id }))\n         } else {\n             Ok(None)\n@@ -1009,7 +1010,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         let src_alloc = self.get_alloc_raw(src_alloc_id)?;\n         let src_range = alloc_range(src_offset, size);\n-        M::memory_read(&self.machine, &src_alloc.extra, src.provenance, src_range)?;\n+        M::memory_read(*tcx, &self.machine, &src_alloc.extra, src.provenance, src_range)?;\n         // We need the `dest` ptr for the next operation, so we get it now.\n         // We already did the source checks and called the hooks so we are good to return early.\n         let Some((dest_alloc_id, dest_offset, dest)) = dest_parts else {\n@@ -1034,7 +1035,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Destination alloc preparations and access hooks.\n         let (dest_alloc, extra) = self.get_alloc_raw_mut(dest_alloc_id)?;\n         let dest_range = alloc_range(dest_offset, size * num_copies);\n-        M::memory_written(extra, &mut dest_alloc.extra, dest.provenance, dest_range)?;\n+        M::memory_written(*tcx, extra, &mut dest_alloc.extra, dest.provenance, dest_range)?;\n         let dest_bytes = dest_alloc\n             .get_bytes_mut_ptr(&tcx, dest_range)\n             .map_err(|e| e.to_interp_error(dest_alloc_id))?"}, {"sha": "a342aeed905e9ba17f097f5f03d0026e35f2da1e", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "patch": "@@ -265,6 +265,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     }\n \n     fn before_access_global(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_id: AllocId,\n         alloc: ConstAllocation<'tcx, Self::PointerTag, Self::AllocExtra>,"}, {"sha": "159503ad2d3f7c11878634a76ee90583b5c264e5", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=fcdfc3e1c1c3da9f765364f73d306bf5d4fd6a63", "patch": "@@ -261,6 +261,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     }\n \n     fn before_access_global(\n+        _tcx: TyCtxt<'tcx>,\n         _machine: &Self,\n         _alloc_id: AllocId,\n         alloc: ConstAllocation<'tcx, Self::PointerTag, Self::AllocExtra>,"}]}