{"sha": "c02c6e88e67e7c23a037f90569cc0072c37d12df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMmM2ZTg4ZTY3ZTdjMjNhMDM3ZjkwNTY5Y2MwMDcyYzM3ZDEyZGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-22T15:07:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-28T17:27:57Z"}, "message": "Move some other checks to AST sanity pass", "tree": {"sha": "07539dde65a36ecf0e0f3bf4d5ff34b03d84c083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07539dde65a36ecf0e0f3bf4d5ff34b03d84c083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02c6e88e67e7c23a037f90569cc0072c37d12df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02c6e88e67e7c23a037f90569cc0072c37d12df", "html_url": "https://github.com/rust-lang/rust/commit/c02c6e88e67e7c23a037f90569cc0072c37d12df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02c6e88e67e7c23a037f90569cc0072c37d12df/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2abdf963441dad5e5ec516af8ee2f9b459f9e47d", "html_url": "https://github.com/rust-lang/rust/commit/2abdf963441dad5e5ec516af8ee2f9b459f9e47d"}], "stats": {"total": 381, "additions": 169, "deletions": 212}, "files": [{"sha": "e22b3dfb81c52ba1a307fff23ff1f83a7c41cf4c", "filename": "src/librustc_passes/ast_sanity.rs", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_passes%2Fast_sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_passes%2Fast_sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_sanity.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -21,7 +21,7 @@ use rustc::session::Session;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::errors;\n-use syntax::parse::token::keywords;\n+use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n \n struct SanityChecker<'a> {\n@@ -44,6 +44,17 @@ impl<'a> SanityChecker<'a> {\n             );\n         }\n     }\n+\n+    fn invalid_visibility(&self, vis: &Visibility, span: Span, note: Option<&str>) {\n+        if vis != &Visibility::Inherited {\n+            let mut err = struct_span_err!(self.session, span, E0449,\n+                                           \"unnecessary visibility qualifier\");\n+            if let Some(note) = note {\n+                err.span_note(span, note);\n+            }\n+            err.emit();\n+        }\n+    }\n }\n \n impl<'a, 'v> Visitor<'v> for SanityChecker<'a> {\n@@ -72,6 +83,89 @@ impl<'a, 'v> Visitor<'v> for SanityChecker<'a> {\n \n         visit::walk_expr(self, expr)\n     }\n+\n+    fn visit_path(&mut self, path: &Path, id: NodeId) {\n+        if path.global && path.segments.len() > 0 {\n+            let ident = path.segments[0].identifier;\n+            if token::Ident(ident).is_path_segment_keyword() {\n+                self.session.add_lint(\n+                    lint::builtin::SUPER_OR_SELF_IN_GLOBAL_PATH, id, path.span,\n+                    format!(\"global paths cannot start with `{}`\", ident)\n+                );\n+            }\n+        }\n+\n+        visit::walk_path(self, path)\n+    }\n+\n+    fn visit_item(&mut self, item: &Item) {\n+        match item.node {\n+            ItemKind::Use(ref view_path) => {\n+                let path = view_path.node.path();\n+                if !path.segments.iter().all(|segment| segment.parameters.is_empty()) {\n+                    self.err_handler().span_err(path.span, \"type or lifetime parameters \\\n+                                                            in import path\");\n+                }\n+            }\n+            ItemKind::Impl(_, _, _, Some(..), _, ref impl_items) => {\n+                self.invalid_visibility(&item.vis, item.span, None);\n+                for impl_item in impl_items {\n+                    self.invalid_visibility(&impl_item.vis, impl_item.span, None);\n+                }\n+            }\n+            ItemKind::Impl(_, _, _, None, _, _) => {\n+                self.invalid_visibility(&item.vis, item.span, Some(\"place qualifiers on individual \\\n+                                                                    impl items instead\"));\n+            }\n+            ItemKind::DefaultImpl(..) => {\n+                self.invalid_visibility(&item.vis, item.span, None);\n+            }\n+            ItemKind::ForeignMod(..) => {\n+                self.invalid_visibility(&item.vis, item.span, Some(\"place qualifiers on individual \\\n+                                                                    foreign items instead\"));\n+            }\n+            ItemKind::Enum(ref def, _) => {\n+                for variant in &def.variants {\n+                    for field in variant.node.data.fields() {\n+                        self.invalid_visibility(&field.vis, field.span, None);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_item(self, item)\n+    }\n+\n+    fn visit_variant_data(&mut self, vdata: &VariantData, _: Ident,\n+                          _: &Generics, _: NodeId, span: Span) {\n+        if vdata.fields().is_empty() {\n+            if vdata.is_tuple() {\n+                self.err_handler().struct_span_err(span, \"empty tuple structs and enum variants \\\n+                                                          are not allowed, use unit structs and \\\n+                                                          enum variants instead\")\n+                                         .span_help(span, \"remove trailing `()` to make a unit \\\n+                                                           struct or unit enum variant\")\n+                                         .emit();\n+            }\n+        }\n+\n+        visit::walk_struct_def(self, vdata)\n+    }\n+\n+    fn visit_vis(&mut self, vis: &Visibility) {\n+        match *vis {\n+            Visibility::Restricted{ref path, ..} => {\n+                if !path.segments.iter().all(|segment| segment.parameters.is_empty()) {\n+                    self.err_handler().span_err(path.span, \"type or lifetime parameters \\\n+                                                            in visibility path\");\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_vis(self, vis)\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate) {"}, {"sha": "ebbbc89e57e23eb4f35fe6444f78a49bd7dae0fe", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -118,6 +118,46 @@ fn some_func() {\n ```\n \"##,\n \n+E0449: r##\"\n+A visibility qualifier was used when it was unnecessary. Erroneous code\n+examples:\n+\n+```compile_fail\n+struct Bar;\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+pub impl Bar {} // error: unnecessary visibility qualifier\n+\n+pub impl Foo for Bar { // error: unnecessary visibility qualifier\n+    pub fn foo() {} // error: unnecessary visibility qualifier\n+}\n+```\n+\n+To fix this error, please remove the visibility qualifier when it is not\n+required. Example:\n+\n+```ignore\n+struct Bar;\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+// Directly implemented methods share the visibility of the type itself,\n+// so `pub` is unnecessary here\n+impl Bar {}\n+\n+// Trait methods share the visibility of the trait, so `pub` is\n+// unnecessary in either case\n+pub impl Foo for Bar {\n+    pub fn foo() {}\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "ac33c23f023d81720ed72b2355dce230ad5ca658", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -9,6 +9,5 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "bc84827ddf4286cd4c573859bd6cf12897db590a", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -111,46 +111,6 @@ pub enum Foo {\n ```\n \"##,\n \n-E0449: r##\"\n-A visibility qualifier was used when it was unnecessary. Erroneous code\n-examples:\n-\n-```compile_fail\n-struct Bar;\n-\n-trait Foo {\n-    fn foo();\n-}\n-\n-pub impl Bar {} // error: unnecessary visibility qualifier\n-\n-pub impl Foo for Bar { // error: unnecessary visibility qualifier\n-    pub fn foo() {} // error: unnecessary visibility qualifier\n-}\n-```\n-\n-To fix this error, please remove the visibility qualifier when it is not\n-required. Example:\n-\n-```ignore\n-struct Bar;\n-\n-trait Foo {\n-    fn foo();\n-}\n-\n-// Directly implemented methods share the visibility of the type itself,\n-// so `pub` is unnecessary here\n-impl Bar {}\n-\n-// Trait methods share the visibility of the trait, so `pub` is\n-// unnecessary in either case\n-pub impl Foo for Bar {\n-    pub fn foo() {}\n-}\n-```\n-\"##,\n-\n E0450: r##\"\n A tuple constructor was invoked while some of its fields are private. Erroneous\n code example:"}, {"sha": "7e76842a9f4a789251b3ee864cd98079ff9dfa8b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 94, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -21,37 +21,26 @@\n #![feature(rustc_private)]\n #![feature(staged_api)]\n \n-#[macro_use] extern crate log;\n+extern crate rustc;\n #[macro_use] extern crate syntax;\n \n-#[macro_use] extern crate rustc;\n-\n-use std::cmp;\n-use std::mem::replace;\n-\n+use rustc::dep_graph::DepNode;\n use rustc::hir::{self, PatKind};\n+use rustc::hir::def::{self, Def};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n-use rustc::dep_graph::DepNode;\n use rustc::lint;\n-use rustc::hir::def::{self, Def};\n-use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::NodeSet;\n-use rustc::hir::map as ast_map;\n-\n use syntax::ast;\n use syntax::codemap::Span;\n \n-pub mod diagnostics;\n-\n-type Context<'a, 'tcx> = (&'a ty::MethodMap<'tcx>, &'a def::ExportMap);\n+use std::cmp;\n+use std::mem::replace;\n \n-/// Result of a checking operation - None => no errors were found. Some => an\n-/// error and contains the span and message for reporting that error and\n-/// optionally the same for a note about the error.\n-type CheckResult = Option<(Span, String, Option<(Span, String)>)>;\n+pub mod diagnostics;\n \n ////////////////////////////////////////////////////////////////////////////////\n /// The embargo visitor, used to determine the exports of the ast\n@@ -433,7 +422,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n             hir::ExprMethodCall(..) => {\n                 let method_call = ty::MethodCall::expr(expr.id);\n                 let method = self.tcx.tables.borrow().method_map[&method_call];\n-                debug!(\"(privacy checking) checking impl method\");\n                 self.check_method(expr.span, method.def_id);\n             }\n             hir::ExprStruct(..) => {\n@@ -518,74 +506,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n     }\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n-/// The privacy sanity check visitor, ensures unnecessary visibility isn't here\n-////////////////////////////////////////////////////////////////////////////////\n-\n-struct SanePrivacyVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-}\n-\n-impl<'a, 'tcx, 'v> Visitor<'v> for SanePrivacyVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n-        self.check_sane_privacy(item);\n-        intravisit::walk_item(self, item);\n-    }\n-}\n-\n-impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n-    /// Validate that items that shouldn't have visibility qualifiers don't have them.\n-    /// Such qualifiers can be set by syntax extensions even if the parser doesn't allow them,\n-    /// so we check things like variant fields too.\n-    fn check_sane_privacy(&self, item: &hir::Item) {\n-        let check_inherited = |sp, vis: &hir::Visibility, note: &str| {\n-            if *vis != hir::Inherited {\n-                let mut err = struct_span_err!(self.tcx.sess, sp, E0449,\n-                                               \"unnecessary visibility qualifier\");\n-                if !note.is_empty() {\n-                    err.span_note(sp, note);\n-                }\n-                err.emit();\n-            }\n-        };\n-\n-        match item.node {\n-            hir::ItemImpl(_, _, _, Some(..), _, ref impl_items) => {\n-                check_inherited(item.span, &item.vis,\n-                                \"visibility qualifiers have no effect on trait impls\");\n-                for impl_item in impl_items {\n-                    check_inherited(impl_item.span, &impl_item.vis,\n-                                    \"visibility qualifiers have no effect on trait impl items\");\n-                }\n-            }\n-            hir::ItemImpl(_, _, _, None, _, _) => {\n-                check_inherited(item.span, &item.vis,\n-                                \"place qualifiers on individual methods instead\");\n-            }\n-            hir::ItemDefaultImpl(..) => {\n-                check_inherited(item.span, &item.vis,\n-                                \"visibility qualifiers have no effect on trait impls\");\n-            }\n-            hir::ItemForeignMod(..) => {\n-                check_inherited(item.span, &item.vis,\n-                                \"place qualifiers on individual functions instead\");\n-            }\n-            hir::ItemEnum(ref def, _) => {\n-                for variant in &def.variants {\n-                    for field in variant.node.data.fields() {\n-                        check_inherited(field.span, &field.vis,\n-                                        \"visibility qualifiers have no effect on variant fields\");\n-                    }\n-                }\n-            }\n-            hir::ItemStruct(..) | hir::ItemTrait(..) |\n-            hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n-            hir::ItemMod(..) | hir::ItemExternCrate(..) |\n-            hir::ItemUse(..) | hir::ItemTy(..) => {}\n-        }\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////////\n /// Obsolete visitors for checking for private items in public interfaces.\n /// These visitors are supposed to be kept in frozen state and produce an\n@@ -626,7 +546,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n             // .. and it corresponds to a private type in the AST (this returns\n             // None for type parameters)\n             match self.tcx.map.find(node_id) {\n-                Some(ast_map::NodeItem(ref item)) => item.vis != hir::Public,\n+                Some(hir::map::NodeItem(ref item)) => item.vis != hir::Public,\n                 Some(_) | None => false,\n             }\n         } else {\n@@ -860,7 +780,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n         // any `visit_ty`'s will be called on things that are in\n         // public signatures, i.e. things that we're interested in for\n         // this visitor.\n-        debug!(\"VisiblePrivateTypesVisitor entering item {:?}\", item);\n         intravisit::walk_item(self, item);\n     }\n \n@@ -892,7 +811,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n     }\n \n     fn visit_ty(&mut self, t: &hir::Ty) {\n-        debug!(\"VisiblePrivateTypesVisitor checking ty {:?}\", t);\n         if let hir::TyPath(..) = t.node {\n             if self.path_is_private_type(t.id) {\n                 self.old_error_set.insert(t.id);\n@@ -1177,10 +1095,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let krate = tcx.map.krate();\n \n-    // Sanity check to make sure that all privacy usage is reasonable.\n-    let mut visitor = SanePrivacyVisitor { tcx: tcx };\n-    krate.visit_all_items(&mut visitor);\n-\n     // Use the parent map to check the privacy of everything\n     let mut visitor = PrivacyVisitor {\n         curitem: ast::DUMMY_NODE_ID,"}, {"sha": "c7b113689fde956a28fbfff64882d1bd3d6c3121", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -22,21 +22,20 @@ use Resolver;\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::middle::cstore::{ChildItem, DlDef};\n-use rustc::lint;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::ty::{self, VariantKind};\n \n-use syntax::ast::{Name, NodeId};\n+use syntax::ast::Name;\n use syntax::attr::AttrMetaMethods;\n-use syntax::parse::token::{self, keywords};\n+use syntax::parse::token;\n use syntax::codemap::{Span, DUMMY_SP};\n \n use syntax::ast::{Block, Crate, DeclKind};\n use syntax::ast::{ForeignItem, ForeignItemKind, Item, ItemKind};\n use syntax::ast::{Mutability, PathListItemKind};\n use syntax::ast::{Stmt, StmtKind, TraitItemKind};\n-use syntax::ast::{Variant, ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n+use syntax::ast::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::visit::{self, Visitor};\n \n trait ToNameBinding<'a> {\n@@ -95,36 +94,6 @@ impl<'b> Resolver<'b> {\n         block.stmts.iter().any(is_item)\n     }\n \n-    fn sanity_check_import(&self, view_path: &ViewPath, id: NodeId) {\n-        let path = match view_path.node {\n-            ViewPathSimple(_, ref path) |\n-            ViewPathGlob (ref path) |\n-            ViewPathList(ref path, _) => path\n-        };\n-\n-        // Check for type parameters\n-        let found_param = path.segments.iter().any(|segment| {\n-            !segment.parameters.types().is_empty() ||\n-            !segment.parameters.lifetimes().is_empty() ||\n-            !segment.parameters.bindings().is_empty()\n-        });\n-        if found_param {\n-            self.session.span_err(path.span, \"type or lifetime parameters in import path\");\n-        }\n-\n-        // Checking for special identifiers in path\n-        // prevent `self` or `super` at beginning of global path\n-        if path.global && path.segments.len() > 0 {\n-            let first = path.segments[0].identifier.name;\n-            if first == keywords::Super.name() || first == keywords::SelfValue.name() {\n-                self.session.add_lint(\n-                    lint::builtin::SUPER_OR_SELF_IN_GLOBAL_PATH, id, path.span,\n-                    format!(\"expected identifier, found keyword `{}`\", first)\n-                );\n-            }\n-        }\n-    }\n-\n     /// Constructs the reduced graph for one item.\n     fn build_reduced_graph_for_item(&mut self, item: &Item, parent_ref: &mut Module<'b>) {\n         let parent = *parent_ref;\n@@ -158,8 +127,6 @@ impl<'b> Resolver<'b> {\n                     }\n                 };\n \n-                self.sanity_check_import(view_path, item.id);\n-\n                 // Build up the import directives.\n                 let is_prelude = item.attrs.iter().any(|attr| attr.name() == \"prelude_import\");\n "}, {"sha": "cd735be9fdf188a5757e6b4159b3b479fecc522b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -1907,6 +1907,16 @@ pub enum ViewPath_ {\n     ViewPathList(Path, Vec<PathListItem>)\n }\n \n+impl ViewPath_ {\n+    pub fn path(&self) -> &Path {\n+        match *self {\n+            ViewPathSimple(_, ref path) |\n+            ViewPathGlob (ref path) |\n+            ViewPathList(ref path, _) => path\n+        }\n+    }\n+}\n+\n /// Meta-data associated with an item\n pub type Attribute = Spanned<Attribute_>;\n "}, {"sha": "ed9c49445a61e9bcc0a53eba590731e42d5ef242", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -952,22 +952,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_item(self, i);\n     }\n \n-    fn visit_variant_data(&mut self, s: &'v ast::VariantData, _: ast::Ident,\n-                          _: &'v ast::Generics, _: ast::NodeId, span: Span) {\n-        if s.fields().is_empty() {\n-            if s.is_tuple() {\n-                self.context.span_handler.struct_span_err(span, \"empty tuple structs and enum \\\n-                                                                 variants are not allowed, use \\\n-                                                                 unit structs and enum variants \\\n-                                                                 instead\")\n-                                         .span_help(span, \"remove trailing `()` to make a unit \\\n-                                                           struct or unit enum variant\")\n-                                         .emit();\n-            }\n-        }\n-        visit::walk_struct_def(self, s)\n-    }\n-\n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n         let links_to_llvm = match attr::first_attr_value_str_by_name(&i.attrs,\n                                                                      \"link_name\") {\n@@ -1138,22 +1122,12 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     fn visit_vis(&mut self, vis: &'v ast::Visibility) {\n         let span = match *vis {\n             ast::Visibility::Crate(span) => span,\n-            ast::Visibility::Restricted { ref path, .. } => {\n-                // Check for type parameters\n-                let found_param = path.segments.iter().any(|segment| {\n-                    !segment.parameters.types().is_empty() ||\n-                    !segment.parameters.lifetimes().is_empty() ||\n-                    !segment.parameters.bindings().is_empty()\n-                });\n-                if found_param {\n-                    self.context.span_handler.span_err(path.span, \"type or lifetime parameters \\\n-                                                                   in visibility path\");\n-                }\n-                path.span\n-            }\n+            ast::Visibility::Restricted { ref path, .. } => path.span,\n             _ => return,\n         };\n         gate_feature_post!(&self, pub_restricted, span, \"`pub(restricted)` syntax is experimental\");\n+\n+        visit::walk_vis(self, vis)\n     }\n }\n "}, {"sha": "80f551ebd1f7c9b2962db0c6df0cfc6fa7bcecf2", "filename": "src/test/compile-fail/issue-12560-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -21,5 +21,5 @@ enum Foo {\n }\n \n fn main() {\n-    println!(\"{}\", match Bar { Bar => 1, Baz => 2, Bazar => 3 })\n+    println!(\"{}\", match Bar { Bar => 1, Baz => 2, Bazar => 3 }) //~ ERROR unresolved name `Bar`\n }"}, {"sha": "bc09f61a754c2b081a04986205105bc4764c5cf3", "filename": "src/test/compile-fail/issue-29161.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -12,7 +12,7 @@ mod a {\n     struct A;\n \n     impl Default for A {\n-        pub fn default() -> A {\n+        pub fn default() -> A { //~ ERROR unnecessary visibility qualifier\n             A;\n         }\n     }"}, {"sha": "8901d8c08e50cef5e5375d001964b38a1eaab6cb", "filename": "src/test/compile-fail/priv-in-bad-locations.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub extern {\n-    //~^ ERROR unnecessary visibility\n+pub extern { //~ ERROR unnecessary visibility qualifier\n     pub fn bar();\n }\n \n@@ -19,10 +18,10 @@ trait A {\n \n struct B;\n \n-pub impl B {} //~ ERROR: unnecessary visibility\n+pub impl B {} //~ ERROR unnecessary visibility qualifier\n \n-pub impl A for B { //~ ERROR: unnecessary visibility\n-    pub fn foo(&self) {} //~ ERROR: unnecessary visibility\n+pub impl A for B { //~ ERROR unnecessary visibility qualifier\n+    pub fn foo(&self) {} //~ ERROR unnecessary visibility qualifier\n }\n \n pub fn main() {}"}, {"sha": "ae60c4366ee33521583cac84de334014064e3e92", "filename": "src/test/compile-fail/privacy/restricted/ty-params.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -16,9 +16,11 @@ macro_rules! m {\n \n struct S<T>(T);\n m!{ S<u8> } //~ ERROR type or lifetime parameters in visibility path\n+//~^ ERROR failed to resolve module path. Not a module `S`\n \n mod foo {\n     struct S(pub(foo<T>) ()); //~ ERROR type or lifetime parameters in visibility path\n+    //~^ ERROR type name `T` is undefined or not in scope\n }\n \n fn main() {}"}, {"sha": "c4d18a94eb2dc4441ac06a3ae824cc7c8b9e10b9", "filename": "src/test/compile-fail/use-super-global-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -12,7 +12,7 @@\n \n mod foo {\n     pub fn g() {\n-        use ::super::main; //~ WARN expected identifier, found keyword `super`\n+        use ::super::main; //~ WARN global paths cannot start with `super`\n         //~^ WARN this was previously accepted by the compiler but is being phased out\n         main();\n     }"}, {"sha": "064062df753b6761b5bf7557355e381e975fef05", "filename": "src/test/compile-fail/useless-pub.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c6e88e67e7c23a037f90569cc0072c37d12df/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs?ref=c02c6e88e67e7c23a037f90569cc0072c37d12df", "patch": "@@ -15,14 +15,12 @@ pub trait E {\n }\n \n impl E for A {\n-    pub fn foo(&self) {}             //~ ERROR: unnecessary visibility\n+    pub fn foo(&self) {} //~ ERROR: unnecessary visibility qualifier\n }\n \n enum Foo {\n     V1 { pub f: i32 }, //~ ERROR unnecessary visibility qualifier\n-                       //| NOTE visibility qualifiers have no effect on variant fields\n     V2(pub i32), //~ ERROR unnecessary visibility qualifier\n-                 //| NOTE visibility qualifiers have no effect on variant fields\n }\n \n fn main() {}"}]}