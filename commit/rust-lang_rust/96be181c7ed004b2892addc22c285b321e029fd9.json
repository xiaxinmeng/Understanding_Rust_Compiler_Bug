{"sha": "96be181c7ed004b2892addc22c285b321e029fd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmUxODFjN2VkMDA0YjI4OTJhZGRjMjJjMjg1YjMyMWUwMjlmZDk=", "commit": {"author": {"name": "Alex Gaynor", "email": "agaynor@mozilla.com", "date": "2019-02-28T21:34:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-28T21:34:03Z"}, "message": "Fixed a syntax error in the pin docs", "tree": {"sha": "1a138e348603c6dc52ba0b1993cc76454285ff35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a138e348603c6dc52ba0b1993cc76454285ff35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96be181c7ed004b2892addc22c285b321e029fd9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJceFPLCRBK7hj4Ov3rIwAAdHIIAIF2iCQrFA406kIYEl+3BGdN\ncKL8pFFoQrZZQz5Zltcii0terAxIHVE+bx7QfG5tqMK5ZjSArfeIY5rpOfZk7i/8\nJIA4wiubGwwJg3OfCONh/4etylhor5QaLIsDs/jHkrvL87gBtXvDhXYD94YhlA9l\nujiUPQ001xBmpCb0dCBqCaZq8oYrEw13gThaXaRksI4lPgHarS2JCSKVVVYzR+sW\nY2DG5T+0gudMDRk09ikDMpeVeGuj4nk215PP1tkX9IXvenj2YQcdaLeiwrqP5/7U\nzB8nAJSvvRcjafuEHIkinH8LbHcLY7GTC/6guvvh3yZEsgnQesJFQsO1BP3BsPc=\n=uHC3\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a138e348603c6dc52ba0b1993cc76454285ff35\nparent 1999a2288123173b2e487865c9a04386173025f7\nauthor Alex Gaynor <agaynor@mozilla.com> 1551389643 -0500\ncommitter GitHub <noreply@github.com> 1551389643 -0500\n\nFixed a syntax error in the pin docs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96be181c7ed004b2892addc22c285b321e029fd9", "html_url": "https://github.com/rust-lang/rust/commit/96be181c7ed004b2892addc22c285b321e029fd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96be181c7ed004b2892addc22c285b321e029fd9/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1999a2288123173b2e487865c9a04386173025f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1999a2288123173b2e487865c9a04386173025f7", "html_url": "https://github.com/rust-lang/rust/commit/1999a2288123173b2e487865c9a04386173025f7"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "835357b4e017c94b37e660bf15b9a527e68cabbf", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96be181c7ed004b2892addc22c285b321e029fd9/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96be181c7ed004b2892addc22c285b321e029fd9/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=96be181c7ed004b2892addc22c285b321e029fd9", "patch": "@@ -215,7 +215,7 @@\n //!     had a method `fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T>`.\n //!     Then we could do the following:\n //!     ```compile_fail\n-//!     fn exploit_ref_cell<T>(rc: Pin<&mut RefCell<T>) {\n+//!     fn exploit_ref_cell<T>(rc: Pin<&mut RefCell<T>>) {\n //!         { let p = rc.as_mut().get_pin_mut(); } // Here we get pinned access to the `T`.\n //!         let rc_shr: &RefCell<T> = rc.into_ref().get_ref();\n //!         let b = rc_shr.borrow_mut();"}]}