{"sha": "c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODQwOWRlMTMxZjNhODNmODM0M2U0ZmEzYTUxYWQ3OGNjNzZlMWI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-10T21:53:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-14T17:50:24Z"}, "message": "Suggest borrowing unsized argument types", "tree": {"sha": "80ad476d6a8e3c5973e3495212d5b7b91ec2f13d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80ad476d6a8e3c5973e3495212d5b7b91ec2f13d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "html_url": "https://github.com/rust-lang/rust/commit/c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c724b67e1b474262917a5154d74e7072267593fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c724b67e1b474262917a5154d74e7072267593fe", "html_url": "https://github.com/rust-lang/rust/commit/c724b67e1b474262917a5154d74e7072267593fe"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "db81dc19c08f416e6d8cd49b274c84c9afc064ab", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "patch": "@@ -215,7 +215,7 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Type of each variable must be `Sized`.\n     VariableType(hir::HirId),\n     /// Argument type must be `Sized`.\n-    SizedArgumentType,\n+    SizedArgumentType(Option<Span>),\n     /// Return type must be `Sized`.\n     SizedReturnType,\n     /// Yield type must be `Sized`."}, {"sha": "e2a0e3dfa30570008153bdb073910bb15f54fddb", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::VariableType(id) => Some(super::VariableType(id)),\n             super::ReturnValue(id) => Some(super::ReturnValue(id)),\n             super::ReturnType => Some(super::ReturnType),\n-            super::SizedArgumentType => Some(super::SizedArgumentType),\n+            super::SizedArgumentType(sp) => Some(super::SizedArgumentType(sp)),\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),\n             super::InlineAsmSized => Some(super::InlineAsmSized),"}, {"sha": "3c3b5bdf59ccf746be8064926fec2262a1744512", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "patch": "@@ -1823,9 +1823,21 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.help(\"unsized locals are gated as an unstable feature\");\n                 }\n             }\n-            ObligationCauseCode::SizedArgumentType => {\n-                err.note(\"all function arguments must have a statically known size\");\n-                if !self.tcx.features().unsized_locals {\n+            ObligationCauseCode::SizedArgumentType(sp) => {\n+                if let Some(span) = sp {\n+                    err.span_suggestion_verbose(\n+                        span.shrink_to_lo(),\n+                        \"function arguments must have a statically known size, borrowed types \\\n+                         always have a known size\",\n+                        \"&\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.note(\"all function arguments must have a statically known size\");\n+                }\n+                if tcx.sess.opts.unstable_features.is_nightly_build()\n+                    && !self.tcx.features().unsized_locals\n+                {\n                     err.help(\"unsized locals are gated as an unstable feature\");\n                 }\n             }"}, {"sha": "3956e91a1673460234d125870bc21ca8f3fe54cc", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "patch": "@@ -487,7 +487,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.require_type_is_sized_deferred(\n                         input,\n                         expr.span,\n-                        traits::SizedArgumentType,\n+                        traits::SizedArgumentType(None),\n                     );\n                 }\n             }"}, {"sha": "aa768f1d251b5dfcb196fa58cd7274a45bbff4b2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "patch": "@@ -1342,14 +1342,15 @@ fn check_fn<'a, 'tcx>(\n     let inputs_fn = fn_sig.inputs().iter().copied();\n     for (idx, (param_ty, param)) in inputs_fn.chain(maybe_va_list).zip(body.params).enumerate() {\n         // Check the pattern.\n-        fcx.check_pat_top(&param.pat, param_ty, try { inputs_hir?.get(idx)?.span }, false);\n+        let ty_span = try { inputs_hir?.get(idx)?.span };\n+        fcx.check_pat_top(&param.pat, param_ty, ty_span, false);\n \n         // Check that argument is Sized.\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n         if param.pat.simple_ident().is_none() && !tcx.features().unsized_locals {\n-            fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType);\n+            fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n         }\n \n         fcx.write_ty(param.hir_id, param_ty);"}, {"sha": "93133bc94bbcfb7d426e59fe89a1ec307a765cb9", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "patch": "@@ -6,8 +6,11 @@ LL | fn _test(ref _p: str) {}\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn _test(ref _p: &str) {}\n+   |                  ^\n \n error: aborting due to previous error\n "}, {"sha": "1b908ca49de4301afad5bd462c72861d6747569e", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "patch": "@@ -6,8 +6,11 @@ LL | pub fn example(ref s: str) {}\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | pub fn example(ref s: &str) {}\n+   |                       ^\n \n error: aborting due to previous error\n "}, {"sha": "58eb3afee81de3090135ef31d3b4e266153ddda7", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c88409de131f3a83f8343e4fa3a51ad78cc76e1b/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=c88409de131f3a83f8343e4fa3a51ad78cc76e1b", "patch": "@@ -6,12 +6,15 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n LL |     fn baz(_: Self::Target) where Self: Deref, <Self as std::ops::Deref>::Target: std::marker::Sized {}\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     fn baz(_: &Self::Target) where Self: Deref {}\n+   |               ^\n \n error[E0277]: the size for values of type `(dyn std::string::ToString + 'static)` cannot be known at compilation time\n   --> $DIR/issue-42312.rs:8:10\n@@ -21,8 +24,11 @@ LL | pub fn f(_: dyn ToString) {}\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | pub fn f(_: &dyn ToString) {}\n+   |             ^\n \n error: aborting due to 2 previous errors\n "}]}