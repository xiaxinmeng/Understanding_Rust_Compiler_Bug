{"sha": "33242578331ab6e22384f686d930780d7fdf27e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjQyNTc4MzMxYWI2ZTIyMzg0ZjY4NmQ5MzA3ODBkN2ZkZjI3ZTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-16T23:58:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-16T23:58:17Z"}, "message": "rustc: Start accepting `*const T`\n\nThis does not yet change the compiler and libraries from `*T` to `*const T` as\nit will require a snapshot to do so.\n\ncc #7362", "tree": {"sha": "361ef9054b679b74749195fe061ec15938fb16aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/361ef9054b679b74749195fe061ec15938fb16aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33242578331ab6e22384f686d930780d7fdf27e5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33242578331ab6e22384f686d930780d7fdf27e5", "html_url": "https://github.com/rust-lang/rust/commit/33242578331ab6e22384f686d930780d7fdf27e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33242578331ab6e22384f686d930780d7fdf27e5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0973eb4419d0598c1134106adef2ee8dc2a2b5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/0973eb4419d0598c1134106adef2ee8dc2a2b5ff", "html_url": "https://github.com/rust-lang/rust/commit/0973eb4419d0598c1134106adef2ee8dc2a2b5ff"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "4d78ec8b001b526073cfac9ea28aa0e23c9b8c90", "filename": "src/doc/rust.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33242578331ab6e22384f686d930780d7fdf27e5/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/33242578331ab6e22384f686d930780d7fdf27e5/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=33242578331ab6e22384f686d930780d7fdf27e5", "patch": "@@ -160,7 +160,7 @@ block_comment_body : [block_comment | character] * ;\n line_comment : \"//\" non_eol * ;\n ~~~~\n \n-Comments in Rust code follow the general C++ style of line and block-comment forms. \n+Comments in Rust code follow the general C++ style of line and block-comment forms.\n Nested block comments are supported.\n \n Line comments beginning with exactly _three_ slashes (`///`), and block\n@@ -3468,10 +3468,11 @@ There are four varieties of pointer in Rust:\n \n * Raw pointers (`*`)\n   : Raw pointers are pointers without safety or liveness guarantees.\n-    Raw pointers are written `*content`,\n-    for example `*int` means a raw pointer to an integer.\n-    Copying or dropping a raw pointer has no effect on the lifecycle of any other value.\n-    Dereferencing a raw pointer or converting it to any other pointer type is an [`unsafe` operation](#unsafe-functions).\n+    Raw pointers are written as `*const T` or `*mut T`,\n+    for example `*const int` means a raw pointer to an integer.\n+    Copying or dropping a raw pointer has no effect on the lifecycle of any\n+    other value.  Dereferencing a raw pointer or converting it to any other\n+    pointer type is an [`unsafe` operation](#unsafe-functions).\n     Raw pointers are generally discouraged in Rust code;\n     they exist to support interoperability with foreign code,\n     and writing performance-critical or low-level functions."}, {"sha": "3696f1adc918b59ac90462136175e15d2d5c6448", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33242578331ab6e22384f686d930780d7fdf27e5/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/33242578331ab6e22384f686d930780d7fdf27e5/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=33242578331ab6e22384f686d930780d7fdf27e5", "patch": "@@ -30,8 +30,7 @@ syn keyword   rustKeyword     unsafe virtual while\n syn keyword   rustKeyword     use nextgroup=rustModPath skipwhite skipempty\n \" FIXME: Scoped impl's name is also fallen in this category\n syn keyword   rustKeyword     mod trait struct enum type nextgroup=rustIdentifier skipwhite skipempty\n-syn keyword   rustStorage     mut ref static\n-syn keyword   rustObsoleteStorage const\n+syn keyword   rustStorage     mut ref static const\n \n syn keyword   rustInvalidBareKeyword crate\n "}, {"sha": "f7bed002140b9bbab67d51abb4d87629fc55f8be", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/33242578331ab6e22384f686d930780d7fdf27e5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33242578331ab6e22384f686d930780d7fdf27e5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=33242578331ab6e22384f686d930780d7fdf27e5", "patch": "@@ -1352,7 +1352,7 @@ impl<'a> Parser<'a> {\n         } else if self.token == token::BINOP(token::STAR) {\n             // STAR POINTER (bare pointer?)\n             self.bump();\n-            TyPtr(self.parse_mt())\n+            TyPtr(self.parse_ptr())\n         } else if self.token == token::LBRACKET {\n             // VECTOR\n             self.expect(&token::LBRACKET);\n@@ -1429,6 +1429,19 @@ impl<'a> Parser<'a> {\n         return TyRptr(opt_lifetime, mt);\n     }\n \n+    pub fn parse_ptr(&mut self) -> MutTy {\n+        let mutbl = if self.eat_keyword(keywords::Mut) {\n+            MutMutable\n+        } else if self.eat_keyword(keywords::Const) {\n+            MutImmutable\n+        } else {\n+            // NOTE: after a stage0 snap this should turn into a span_err.\n+            MutImmutable\n+        };\n+        let t = self.parse_ty(true);\n+        MutTy { ty: t, mutbl: mutbl }\n+    }\n+\n     pub fn is_named_argument(&mut self) -> bool {\n         let offset = match self.token {\n             token::BINOP(token::AND) => 1,"}, {"sha": "960c9984a8e5be2085cf581994a30e4b6b16ba31", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33242578331ab6e22384f686d930780d7fdf27e5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33242578331ab6e22384f686d930780d7fdf27e5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=33242578331ab6e22384f686d930780d7fdf27e5", "patch": "@@ -486,11 +486,11 @@ declare_special_idents_and_keywords! {\n         (40,                         Continue,   \"continue\");\n         (41,                         Proc,       \"proc\");\n         (42,                         Box,        \"box\");\n+        (43,                         Const,      \"const\");\n \n         'reserved:\n-        (43,                         Alignof,    \"alignof\");\n-        (44,                         Be,         \"be\");\n-        (45,                         Const,      \"const\");\n+        (44,                         Alignof,    \"alignof\");\n+        (45,                         Be,         \"be\");\n         (46,                         Offsetof,   \"offsetof\");\n         (47,                         Priv,       \"priv\");\n         (48,                         Pure,       \"pure\");"}, {"sha": "96ccb1a37a2a01fbbf38ca403ee28ce0f7138177", "filename": "src/test/run-pass/new-unsafe-pointers.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33242578331ab6e22384f686d930780d7fdf27e5/src%2Ftest%2Frun-pass%2Fnew-unsafe-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33242578331ab6e22384f686d930780d7fdf27e5/src%2Ftest%2Frun-pass%2Fnew-unsafe-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-unsafe-pointers.rs?ref=33242578331ab6e22384f686d930780d7fdf27e5", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _a: *const int = 3 as *const int;\n+    let _a: *mut int = 3 as *mut int;\n+}"}]}