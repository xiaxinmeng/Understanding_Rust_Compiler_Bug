{"sha": "2e3ab43f5c3904ac1e0c1c430d76b343e194730c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlM2FiNDNmNWMzOTA0YWMxZTBjMWM0MzBkNzZiMzQzZTE5NDczMGM=", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-01-12T02:02:09Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-01-12T02:02:09Z"}, "message": "Rename `rustc_middle::lint::LevelSource` to `LevelAndSource`", "tree": {"sha": "585aa134120a7ea94c7b531de87bcde86e8cccb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/585aa134120a7ea94c7b531de87bcde86e8cccb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e3ab43f5c3904ac1e0c1c430d76b343e194730c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3ab43f5c3904ac1e0c1c430d76b343e194730c", "html_url": "https://github.com/rust-lang/rust/commit/2e3ab43f5c3904ac1e0c1c430d76b343e194730c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e3ab43f5c3904ac1e0c1c430d76b343e194730c/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe531d5a5f1404281e3fb237daaf87b8180bd13d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe531d5a5f1404281e3fb237daaf87b8180bd13d", "html_url": "https://github.com/rust-lang/rust/commit/fe531d5a5f1404281e3fb237daaf87b8180bd13d"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "37bdc878b16cdbd55d2c027dbdae8bab001700d8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e3ab43f5c3904ac1e0c1c430d76b343e194730c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3ab43f5c3904ac1e0c1c430d76b343e194730c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=2e3ab43f5c3904ac1e0c1c430d76b343e194730c", "patch": "@@ -10,7 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::lint::LevelSource;\n+use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{\n     struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet,\n@@ -106,9 +106,9 @@ impl<'s> LintLevelsBuilder<'s> {\n     /// diagnostic with no change to `specs`.\n     fn insert_spec(\n         &mut self,\n-        specs: &mut FxHashMap<LintId, LevelSource>,\n+        specs: &mut FxHashMap<LintId, LevelAndSource>,\n         id: LintId,\n-        (level, src): LevelSource,\n+        (level, src): LevelAndSource,\n     ) {\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a"}, {"sha": "80c87dddd5614888eb329dc5a8fea11fc19f8c40", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e3ab43f5c3904ac1e0c1c430d76b343e194730c/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3ab43f5c3904ac1e0c1c430d76b343e194730c/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=2e3ab43f5c3904ac1e0c1c430d76b343e194730c", "patch": "@@ -46,7 +46,7 @@ impl LintLevelSource {\n }\n \n /// A tuple of a lint level and its source.\n-pub type LevelSource = (Level, LintLevelSource);\n+pub type LevelAndSource = (Level, LintLevelSource);\n \n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n@@ -57,11 +57,11 @@ pub enum LintSet {\n     CommandLine {\n         // -A,-W,-D flags, a `Symbol` for the flag itself and `Level` for which\n         // flag.\n-        specs: FxHashMap<LintId, LevelSource>,\n+        specs: FxHashMap<LintId, LevelAndSource>,\n     },\n \n     Node {\n-        specs: FxHashMap<LintId, LevelSource>,\n+        specs: FxHashMap<LintId, LevelAndSource>,\n         parent: u32,\n     },\n }\n@@ -75,9 +75,9 @@ impl LintLevelSets {\n         &self,\n         lint: &'static Lint,\n         idx: u32,\n-        aux: Option<&FxHashMap<LintId, LevelSource>>,\n+        aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n         sess: &Session,\n-    ) -> LevelSource {\n+    ) -> LevelAndSource {\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n@@ -113,7 +113,7 @@ impl LintLevelSets {\n         &self,\n         id: LintId,\n         mut idx: u32,\n-        aux: Option<&FxHashMap<LintId, LevelSource>>,\n+        aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n     ) -> (Option<Level>, LintLevelSource) {\n         if let Some(specs) = aux {\n             if let Some(&(level, src)) = specs.get(&id) {\n@@ -157,7 +157,7 @@ impl LintLevelMap {\n         lint: &'static Lint,\n         id: HirId,\n         session: &Session,\n-    ) -> Option<LevelSource> {\n+    ) -> Option<LevelAndSource> {\n         self.id_to_set.get(&id).map(|idx| self.sets.get_lint_level(lint, *idx, None, session))\n     }\n }"}]}