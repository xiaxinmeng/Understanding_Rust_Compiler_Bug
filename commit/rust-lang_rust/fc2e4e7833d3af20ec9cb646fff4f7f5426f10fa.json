{"sha": "fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmU0ZTc4MzNkM2FmMjBlYzljYjY0NmZmZjRmN2Y1NDI2ZjEwZmE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-27T18:31:17Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-27T18:31:17Z"}, "message": "Put some thought and documentation effort into process::ExitCode", "tree": {"sha": "2552b3e1228c5f3897a2d18e429f80e9c2c72bcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2552b3e1228c5f3897a2d18e429f80e9c2c72bcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa", "html_url": "https://github.com/rust-lang/rust/commit/fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20f7b2ea73fbe0077a565c692a3a6f2e20ff4e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20f7b2ea73fbe0077a565c692a3a6f2e20ff4e3", "html_url": "https://github.com/rust-lang/rust/commit/e20f7b2ea73fbe0077a565c692a3a6f2e20ff4e3"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "483e58eb0f4612ebd4e62805ddfb1cf7a53c1eb2", "filename": "src/libstd/process.rs", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa", "patch": "@@ -1080,15 +1080,58 @@ impl fmt::Display for ExitStatus {\n     }\n }\n \n-/// This is ridiculously unstable, as it's a completely-punted-upon part\n-/// of the `?`-in-`main` RFC.  It's here only to allow experimenting with\n-/// returning a code directly from main.  It will definitely change\n-/// drastically before being stabilized, if it doesn't just get deleted.\n-#[doc(hidden)]\n+/// This type represents the status code a process can return to its\n+/// parent under normal termination.\n+///\n+/// Numeric values used in this type don't have portable meanings, and\n+/// different platforms may mask different amounts of them.\n+///\n+/// For the platform's canonical successful and unsuccessful codes, see\n+/// the [`SUCCESS`] and [`FAILURE`] associated items.\n+///\n+/// [`SUCCESS`]: #constant.SUCCESS\n+/// [`FAILURE`]: #constant.FAILURE\n+///\n+/// **Warning**: While various forms of this were discussed in [RFC #1937],\n+/// it was ultimately cut from that RFC, and thus this type is more subject\n+/// to change even than the usual unstable item churn.\n+///\n+/// [RFC #1937]: https://github.com/rust-lang/rfcs/pull/1937\n #[derive(Clone, Copy, Debug)]\n #[unstable(feature = \"process_exitcode_placeholder\", issue = \"43301\")]\n pub struct ExitCode(pub i32);\n \n+#[cfg(target_arch = \"wasm32\")]\n+mod rawexit {\n+    pub const SUCCESS: i32 = 0;\n+    pub const FAILURE: i32 = 1;\n+}\n+#[cfg(not(target_arch = \"wasm32\"))]\n+mod rawexit {\n+    use libc;\n+    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n+    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n+}\n+\n+#[unstable(feature = \"process_exitcode_placeholder\", issue = \"43301\")]\n+impl ExitCode {\n+    /// The canonical ExitCode for successful termination on this platform.\n+    ///\n+    /// Note that a `()`-returning `main` implicitly results in a successful\n+    /// termination, so there's no need to return this from `main` unless\n+    /// you're also returning other possible codes.\n+    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"43301\")]\n+    pub const SUCCESS: ExitCode = ExitCode(rawexit::SUCCESS);\n+\n+    /// The canonical ExitCode for unsuccessful termination on this platform.\n+    ///\n+    /// If you're only returning this and `SUCCESS` from `main`, consider\n+    /// instead returning `Err(_)` and `Ok(())` respectively, which will\n+    /// return the same codes (but will also `eprintln!` the error).\n+    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"43301\")]\n+    pub const FAILURE: ExitCode = ExitCode(rawexit::FAILURE);\n+}\n+\n impl Child {\n     /// Forces the child to exit. This is equivalent to sending a\n     /// SIGKILL on unix platforms.\n@@ -1401,18 +1444,6 @@ pub fn id() -> u32 {\n     ::sys::os::getpid()\n }\n \n-#[cfg(target_arch = \"wasm32\")]\n-mod exit {\n-    pub const SUCCESS: i32 = 0;\n-    pub const FAILURE: i32 = 1;\n-}\n-#[cfg(not(target_arch = \"wasm32\"))]\n-mod exit {\n-    use libc;\n-    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n-    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n-}\n-\n /// A trait for implementing arbitrary return types in the `main` function.\n ///\n /// The c-main function only supports to return integers as return type.\n@@ -1433,18 +1464,15 @@ pub trait Termination {\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for () {\n-    fn report(self) -> i32 { exit::SUCCESS }\n+    fn report(self) -> i32 { ExitCode::SUCCESS.report() }\n }\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl<E: fmt::Debug> Termination for Result<(), E> {\n     fn report(self) -> i32 {\n         match self {\n-            Ok(val) => val.report(),\n-            Err(err) => {\n-                eprintln!(\"Error: {:?}\", err);\n-                exit::FAILURE\n-            }\n+            Ok(()) => ().report(),\n+            Err(err) => Err::<!, _>(err).report(),\n         }\n     }\n }\n@@ -1459,7 +1487,7 @@ impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> i32 {\n         let Err(err) = self;\n         eprintln!(\"Error: {:?}\", err);\n-        exit::FAILURE\n+        ExitCode::FAILURE.report()\n     }\n }\n "}, {"sha": "80fa4d17b6116904899c5a1e238958208b89526c", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-for-exitcode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs?ref=fc2e4e7833d3af20ec9cb646fff4f7f5426f10fa", "patch": "@@ -14,5 +14,5 @@\n use std::process::ExitCode;\n \n fn main() -> ExitCode {\n-    ExitCode(0)\n+    ExitCode::SUCCESS\n }"}]}