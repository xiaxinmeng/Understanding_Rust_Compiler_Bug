{"sha": "c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0", "node_id": "C_kwDOAAsO6NoAKGMzNDI1OTMxZDJjYzdiMTJkZjJlNGM0MGI2ODM0ZDJiM2VjYjYwZTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-17T10:43:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-17T10:43:31Z"}, "message": "Rollup merge of #112719 - djkoloski:fuchsia_test_runner_remove_fvdl, r=tmandry\n\nReplace fvdl with ffx, allow test without install\n\nAlong with replacing fvdl uses with the equivalent ffx commands, this also switches from using the install path for libstd-*.so and libtest-*.so to using the build directory (now passed on the command line). The user no longer needs to run x.py install before running tests now, and the correct libstd and libtest are detected on run instead of startup so the test runner can handle recompilations after starting the testing environment.\n\nr? ``@tmandry``", "tree": {"sha": "4f16de10abe5f75d61d3cb4534adc2e9da007e3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f16de10abe5f75d61d3cb4534adc2e9da007e3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjY5TCRBK7hj4Ov3rIwAAEkIIAIvrDJp2Si6SH9qzLmFnsm/0\nb1RNFnPCZ8Gj31Q6Z9S/CsQhPKJDIEPlPB6EgrXg+zZ1FFfzub3KtMSgnjuAgJ9t\ny0+2PexuYbVipqVu0X0SC/PAsqJnTP/Mwi5A++b4KNel42youQrZa2qCi9QBwFbN\nzQ78z1H2XCj88gvtvLTwu4v1/ffbGMu2WGO5yg+v2ePGCv/KXha/l+KqNcP52UJ+\n+ubElQs04io7OnXz4FNJDLNy2wJ/amGDx3onppoN1waNPqO7zUMfNBWvQGEDAlB/\nvQSZuSX/VAkhVWyJ7JerQtbNXVXf3O7In39eBddLMjiOr+y+ydAcq8xFub0mwCI=\n=Tvah\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f16de10abe5f75d61d3cb4534adc2e9da007e3f\nparent 63799ba549ac985915236c736819fe0bbc12013a\nparent 12c6f1d9588cd8775e13c6e85fa28794613f7446\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686998611 +0200\ncommitter GitHub <noreply@github.com> 1686998611 +0200\n\nRollup merge of #112719 - djkoloski:fuchsia_test_runner_remove_fvdl, r=tmandry\n\nReplace fvdl with ffx, allow test without install\n\nAlong with replacing fvdl uses with the equivalent ffx commands, this also switches from using the install path for libstd-*.so and libtest-*.so to using the build directory (now passed on the command line). The user no longer needs to run x.py install before running tests now, and the correct libstd and libtest are detected on run instead of startup so the test runner can handle recompilations after starting the testing environment.\n\nr? ``@tmandry``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0", "html_url": "https://github.com/rust-lang/rust/commit/c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63799ba549ac985915236c736819fe0bbc12013a", "url": "https://api.github.com/repos/rust-lang/rust/commits/63799ba549ac985915236c736819fe0bbc12013a", "html_url": "https://github.com/rust-lang/rust/commit/63799ba549ac985915236c736819fe0bbc12013a"}, {"sha": "12c6f1d9588cd8775e13c6e85fa28794613f7446", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c6f1d9588cd8775e13c6e85fa28794613f7446", "html_url": "https://github.com/rust-lang/rust/commit/12c6f1d9588cd8775e13c6e85fa28794613f7446"}], "stats": {"total": 256, "additions": 100, "deletions": 156}, "files": [{"sha": "73cf3de6a46195f161be77871f450ddbbabc1102", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 92, "deletions": 145, "changes": 237, "blob_url": "https://github.com/rust-lang/rust/blob/c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0", "patch": "@@ -25,13 +25,9 @@\n \n @dataclass\n class TestEnvironment:\n-    rust_dir: str\n+    rust_build_dir: str\n     sdk_dir: str\n     target: str\n-    package_server_pid: Optional[int] = None\n-    emu_addr: Optional[str] = None\n-    libstd_name: Optional[str] = None\n-    libtest_name: Optional[str] = None\n     verbose: bool = False\n \n     @staticmethod\n@@ -57,7 +53,7 @@ def env_file_path(cls):\n     @classmethod\n     def from_args(cls, args):\n         return cls(\n-            os.path.abspath(args.rust),\n+            os.path.abspath(args.rust_build),\n             os.path.abspath(args.sdk),\n             args.target,\n             verbose=args.verbose,\n@@ -68,32 +64,16 @@ def read_from_file(cls):\n         with open(cls.env_file_path(), encoding=\"utf-8\") as f:\n             test_env = json.loads(f.read())\n             return cls(\n-                test_env[\"rust_dir\"],\n+                test_env[\"rust_build_dir\"],\n                 test_env[\"sdk_dir\"],\n                 test_env[\"target\"],\n-                libstd_name=test_env[\"libstd_name\"],\n-                libtest_name=test_env[\"libtest_name\"],\n-                emu_addr=test_env[\"emu_addr\"],\n-                package_server_pid=test_env[\"package_server_pid\"],\n                 verbose=test_env[\"verbose\"],\n             )\n \n     def write_to_file(self):\n         with open(self.env_file_path(), \"w\", encoding=\"utf-8\") as f:\n             f.write(json.dumps(self.__dict__))\n \n-    def ssh_dir(self):\n-        return os.path.join(self.tmp_dir(), \"ssh\")\n-\n-    def ssh_keyfile_path(self):\n-        return os.path.join(self.ssh_dir(), \"fuchsia_ed25519\")\n-\n-    def ssh_authfile_path(self):\n-        return os.path.join(self.ssh_dir(), \"fuchsia_authorized_keys\")\n-\n-    def vdl_output_path(self):\n-        return os.path.join(self.tmp_dir(), \"vdl_output\")\n-\n     def package_server_log_path(self):\n         return os.path.join(self.tmp_dir(), \"package_server_log\")\n \n@@ -113,7 +93,9 @@ def repo_dir(self):\n \n     def libs_dir(self):\n         return os.path.join(\n-            self.rust_dir,\n+            self.rust_build_dir,\n+            \"host\",\n+            \"stage2\",\n             \"lib\",\n         )\n \n@@ -212,21 +194,19 @@ def start_ffx_isolation(self):\n         # Set configs\n         configs = {\n             \"log.enabled\": \"true\",\n-            \"ssh.pub\": self.ssh_authfile_path(),\n-            \"ssh.priv\": self.ssh_keyfile_path(),\n             \"test.is_isolated\": \"true\",\n             \"test.experimental_structured_output\": \"true\",\n         }\n         for key, value in configs.items():\n             subprocess.check_call(\n                 [\n-                    self.tool_path(\"ffx\"),\n+                    ffx_path,\n                     \"config\",\n                     \"set\",\n                     key,\n                     value,\n                 ],\n-                env=self.ffx_cmd_env(),\n+                env=ffx_env,\n                 stdout=self.subprocess_output(),\n                 stderr=self.subprocess_output(),\n             )\n@@ -248,6 +228,7 @@ def stop_ffx_isolation(self):\n                 self.tool_path(\"ffx\"),\n                 \"daemon\",\n                 \"stop\",\n+                \"-w\",\n             ],\n             env=self.ffx_cmd_env(),\n             stdout=self.subprocess_output(),\n@@ -275,87 +256,62 @@ def start(self):\n         elif len(os.listdir(self.tmp_dir())) != 0:\n             raise Exception(f\"Temp directory is not clean (in {self.tmp_dir()})\")\n \n-        os.mkdir(self.ssh_dir())\n         os.mkdir(self.output_dir())\n \n-        # Find libstd and libtest\n-        libstd_paths = glob.glob(os.path.join(self.rustlibs_dir(), \"libstd-*.so\"))\n-        libtest_paths = glob.glob(os.path.join(self.rustlibs_dir(), \"libtest-*.so\"))\n-\n-        if not libstd_paths:\n-            raise Exception(f\"Failed to locate libstd (in {self.rustlibs_dir()})\")\n-\n-        if not libtest_paths:\n-            raise Exception(f\"Failed to locate libtest (in {self.rustlibs_dir()})\")\n+        ffx_path = self.tool_path(\"ffx\")\n+        ffx_env = self.ffx_cmd_env()\n \n-        self.libstd_name = os.path.basename(libstd_paths[0])\n-        self.libtest_name = os.path.basename(libtest_paths[0])\n+        # Start ffx isolation\n+        self.log_info(\"Starting ffx isolation...\")\n+        self.start_ffx_isolation()\n \n-        # Generate SSH keys for the emulator to use\n-        self.log_info(\"Generating SSH keys...\")\n+        # Stop any running emulators (there shouldn't be any)\n         subprocess.check_call(\n             [\n-                \"ssh-keygen\",\n-                \"-N\",\n-                \"\",\n-                \"-t\",\n-                \"ed25519\",\n-                \"-f\",\n-                self.ssh_keyfile_path(),\n-                \"-C\",\n-                \"Generated by fuchsia-test-runner.py\",\n+                ffx_path,\n+                \"emu\",\n+                \"stop\",\n+                \"--all\",\n             ],\n+            env=ffx_env,\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n-        authfile_contents = subprocess.check_output(\n+\n+        # Start emulator\n+        self.log_info(\"Starting emulator...\")\n+        product_bundle = \"terminal.qemu-\" + self.triple_to_arch(self.target)\n+        subprocess.check_call(\n             [\n-                \"ssh-keygen\",\n-                \"-y\",\n-                \"-f\",\n-                self.ssh_keyfile_path(),\n+                ffx_path,\n+                \"product-bundle\",\n+                \"get\",\n+                product_bundle,\n             ],\n+            env=ffx_env,\n+            stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n-        with open(self.ssh_authfile_path(), \"wb\") as authfile:\n-            authfile.write(authfile_contents)\n-\n-        # Start ffx isolation\n-        self.log_info(\"Starting ffx isolation...\")\n-        self.start_ffx_isolation()\n-\n-        # Start emulator (this will generate the vdl output)\n-        self.log_info(\"Starting emulator...\")\n+        # FIXME: condition --accel hyper on target arch matching host arch\n         subprocess.check_call(\n             [\n-                self.tool_path(\"fvdl\"),\n-                \"--sdk\",\n+                ffx_path,\n+                \"emu\",\n                 \"start\",\n-                \"--tuntap\",\n+                product_bundle,\n                 \"--headless\",\n-                \"--nointeractive\",\n-                \"--ssh\",\n-                self.ssh_dir(),\n-                \"--vdl-output\",\n-                self.vdl_output_path(),\n-                \"--emulator-log\",\n+                \"--log\",\n                 self.emulator_log_path(),\n-                \"--image-name\",\n-                \"qemu-\" + self.triple_to_arch(self.target),\n+                \"--net\",\n+                \"tap\",\n+                \"--accel\",\n+                \"hyper\",\n             ],\n+            env=ffx_env,\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n \n-        # Parse vdl output for relevant information\n-        with open(self.vdl_output_path(), encoding=\"utf-8\") as f:\n-            vdl_content = f.read()\n-            matches = re.search(\n-                r'network_address:\\s+\"\\[([0-9a-f]{1,4}:(:[0-9a-f]{1,4}){4}%qemu)\\]\"',\n-                vdl_content,\n-            )\n-            self.emu_addr = matches.group(1)\n-\n         # Create new package repo\n         self.log_info(\"Creating package repo...\")\n         subprocess.check_call(\n@@ -369,55 +325,40 @@ def start(self):\n             stderr=self.subprocess_output(),\n         )\n \n-        # Start package server\n-        self.log_info(\"Starting package server...\")\n-        with open(\n-            self.package_server_log_path(), \"w\", encoding=\"utf-8\"\n-        ) as package_server_log:\n-            # We want this to be a long-running process that persists after the script finishes\n-            # pylint: disable=consider-using-with\n-            self.package_server_pid = subprocess.Popen(\n-                [\n-                    self.tool_path(\"pm\"),\n-                    \"serve\",\n-                    \"-vt\",\n-                    \"-repo\",\n-                    self.repo_dir(),\n-                    \"-l\",\n-                    \":8084\",\n-                ],\n-                stdout=package_server_log,\n-                stderr=package_server_log,\n-            ).pid\n-\n-        # Register package server with emulator\n-        self.log_info(\"Registering package server...\")\n-        ssh_client = subprocess.check_output(\n+        # Add repo\n+        subprocess.check_call(\n             [\n-                \"ssh\",\n-                \"-i\",\n-                self.ssh_keyfile_path(),\n-                \"-o\",\n-                \"StrictHostKeyChecking=accept-new\",\n-                self.emu_addr,\n-                \"-f\",\n-                \"echo $SSH_CLIENT\",\n+                ffx_path,\n+                \"repository\",\n+                \"add-from-pm\",\n+                self.repo_dir(),\n+                \"--repository\",\n+                self.TEST_REPO_NAME,\n             ],\n-            text=True,\n+            env=ffx_env,\n+            stdout=self.subprocess_output(),\n+            stderr=self.subprocess_output(),\n         )\n-        repo_addr = ssh_client.split()[0].replace(\"%\", \"%25\")\n-        repo_url = f\"http://[{repo_addr}]:8084/config.json\"\n+\n+        # Start repository server\n+        subprocess.check_call(\n+            [ffx_path, \"repository\", \"server\", \"start\", \"--address\", \"[::]:0\"],\n+            env=ffx_env,\n+            stdout=self.subprocess_output(),\n+            stderr=self.subprocess_output(),\n+        )\n+\n+        # Register with newly-started emulator\n         subprocess.check_call(\n             [\n-                \"ssh\",\n-                \"-i\",\n-                self.ssh_keyfile_path(),\n-                \"-o\",\n-                \"StrictHostKeyChecking=accept-new\",\n-                self.emu_addr,\n-                \"-f\",\n-                f\"pkgctl repo add url -f 1 -n {self.TEST_REPO_NAME} {repo_url}\",\n+                ffx_path,\n+                \"target\",\n+                \"repository\",\n+                \"register\",\n+                \"--repository\",\n+                self.TEST_REPO_NAME,\n             ],\n+            env=ffx_env,\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n@@ -471,8 +412,8 @@ def start(self):\n     meta/package={package_dir}/meta/package\n     meta/{package_name}.cm={package_dir}/meta/{package_name}.cm\n     bin/{exe_name}={bin_path}\n-    lib/{libstd_name}={rust_dir}/lib/rustlib/{rustlib_dir}/lib/{libstd_name}\n-    lib/{libtest_name}={rust_dir}/lib/rustlib/{rustlib_dir}/lib/{libtest_name}\n+    lib/{libstd_name}={libstd_path}\n+    lib/{libtest_name}={libtest_path}\n     lib/ld.so.1={sdk_dir}/arch/{target_arch}/sysroot/dist/lib/ld.so.1\n     lib/libfdio.so={sdk_dir}/arch/{target_arch}/dist/libfdio.so\n     \"\"\"\n@@ -502,6 +443,16 @@ def run(self, args):\n \n         bin_path = os.path.abspath(args.bin_path)\n \n+        # Find libstd and libtest\n+        libstd_paths = glob.glob(os.path.join(self.rustlibs_dir(), \"libstd-*.so\"))\n+        libtest_paths = glob.glob(os.path.join(self.rustlibs_dir(), \"libtest-*.so\"))\n+\n+        if not libstd_paths:\n+            raise Exception(f\"Failed to locate libstd (in {self.rustlibs_dir()})\")\n+\n+        if not libtest_paths:\n+            raise Exception(f\"Failed to locate libtest (in {self.rustlibs_dir()})\")\n+\n         # Build a unique, deterministic name for the test using the name of the\n         # binary and the last 6 hex digits of the hash of the full path\n         def path_checksum(path):\n@@ -604,11 +555,12 @@ def log(msg):\n                         exe_name=exe_name,\n                         package_dir=package_dir,\n                         package_name=package_name,\n-                        rust_dir=self.rust_dir,\n-                        rustlib_dir=self.target,\n+                        target=self.target,\n                         sdk_dir=self.sdk_dir,\n-                        libstd_name=self.libstd_name,\n-                        libtest_name=self.libtest_name,\n+                        libstd_name=os.path.basename(libstd_paths[0]),\n+                        libtest_name=os.path.basename(libtest_paths[0]),\n+                        libstd_path=libstd_paths[0],\n+                        libtest_path=libtest_paths[0],\n                         target_arch=self.triple_to_arch(self.target),\n                     )\n                 )\n@@ -779,20 +731,15 @@ def stop(self):\n         else:\n             self.log_debug(\"No ffx daemon log found\")\n \n-        # Stop package server\n-        self.log_info(\"Stopping package server...\")\n-        os.kill(self.package_server_pid, signal.SIGTERM)\n-\n         # Shut down the emulator\n         self.log_info(\"Stopping emulator...\")\n         subprocess.check_call(\n             [\n-                self.tool_path(\"fvdl\"),\n-                \"--sdk\",\n-                \"kill\",\n-                \"--launched-proto\",\n-                self.vdl_output_path(),\n+                self.tool_path(\"ffx\"),\n+                \"emu\",\n+                \"stop\",\n             ],\n+            env=self.ffx_cmd_env(),\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n@@ -969,8 +916,8 @@ def print_help(args):\n         \"start\", help=\"initializes the testing environment\"\n     )\n     start_parser.add_argument(\n-        \"--rust\",\n-        help=\"the directory of the installed Rust compiler for Fuchsia\",\n+        \"--rust-build\",\n+        help=\"the current compiler build directory (`$RUST_SRC/build` by default)\",\n         required=True,\n     )\n     start_parser.add_argument("}, {"sha": "f7cce35b1232bc9939fab55fd23801190ac2ddcf", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=c3425931d2cc7b12df2e4c40b6834d2b3ecb60e0", "patch": "@@ -681,12 +681,9 @@ local Rust source checkout:\n cd ${RUST_SRC_PATH}\n ```\n \n-To run the Rust test suite on an emulated Fuchsia device, you must install the\n-Rust compiler locally. See \"[Targeting Fuchsia with a compiler built from source](#targeting-fuchsia-with-a-compiler-built-from-source)\"\n-for the steps to build locally.\n-\n-You'll also need to download a copy of the Fuchsia SDK. The current minimum\n-supported SDK version is [10.20221207.2.89][minimum_supported_sdk_version].\n+To run the Rust test suite on an emulated Fuchsia device, you'll also need to\n+download a copy of the Fuchsia SDK. The current minimum supported SDK version is\n+[10.20221207.2.89][minimum_supported_sdk_version].\n \n [minimum_supported_sdk_version]: https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core/linux-amd64/+/version:10.20221207.2.89\n \n@@ -695,13 +692,13 @@ Fuchsia's test runner interacts with the Fuchsia emulator and is located at\n test environment with:\n \n ```sh\n-src/ci/docker/scripts/fuchsia-test-runner.py start\n-    --rust ${RUST_SRC_PATH}/install\n-    --sdk ${SDK_PATH}\n-    --target {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}\n+src/ci/docker/scripts/fuchsia-test-runner.py start                            \\\n+    --rust-build ${RUST_SRC_PATH}/build                                       \\\n+    --sdk ${SDK_PATH}                                                         \\\n+    --target {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}                 \\\n ```\n \n-Where `${RUST_SRC_PATH}/install` is the `prefix` set in `config.toml` and\n+Where `${RUST_SRC_PATH}/build` is the `build-dir` set in `config.toml` and\n `${SDK_PATH}` is the path to the downloaded and unzipped SDK.\n \n Once our environment is started, we can run our tests using `x.py` as usual. The"}]}