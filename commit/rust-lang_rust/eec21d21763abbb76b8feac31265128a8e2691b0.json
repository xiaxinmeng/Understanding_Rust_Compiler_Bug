{"sha": "eec21d21763abbb76b8feac31265128a8e2691b0", "node_id": "C_kwDOAAsO6NoAKGVlYzIxZDIxNzYzYWJiYjc2YjhmZWFjMzEyNjUxMjhhOGUyNjkxYjA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-27T23:26:11Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-30T20:52:58Z"}, "message": "Avoid intermediate `collect()`", "tree": {"sha": "064b3e230927ff448052e985a3227fe5567a06e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064b3e230927ff448052e985a3227fe5567a06e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eec21d21763abbb76b8feac31265128a8e2691b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eec21d21763abbb76b8feac31265128a8e2691b0", "html_url": "https://github.com/rust-lang/rust/commit/eec21d21763abbb76b8feac31265128a8e2691b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eec21d21763abbb76b8feac31265128a8e2691b0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a83112fe3e4adac459a73ea0f8018b7eab719238", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83112fe3e4adac459a73ea0f8018b7eab719238", "html_url": "https://github.com/rust-lang/rust/commit/a83112fe3e4adac459a73ea0f8018b7eab719238"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "05709cc2f4df865f27aaf68e2eb4c236374a7bf8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec21d21763abbb76b8feac31265128a8e2691b0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec21d21763abbb76b8feac31265128a8e2691b0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=eec21d21763abbb76b8feac31265128a8e2691b0", "patch": "@@ -1955,7 +1955,7 @@ impl Path {\n     }\n \n     crate fn whole_name(&self) -> String {\n-        self.segments.iter().map(|s| s.name.to_string()).collect::<Vec<_>>().join(\"::\")\n+        self.segments.iter().map(|s| s.name.to_string()).intersperse(\"::\".into()).collect()\n     }\n \n     /// Checks if this is a `T::Name` path for an associated type."}]}