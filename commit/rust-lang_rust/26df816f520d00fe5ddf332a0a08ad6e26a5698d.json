{"sha": "26df816f520d00fe5ddf332a0a08ad6e26a5698d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZGY4MTZmNTIwZDAwZmU1ZGRmMzMyYTBhMDhhZDZlMjZhNTY5OGQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-03-09T18:36:01Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-03-18T00:53:08Z"}, "message": "apply pre-trans passes to Shim MIR", "tree": {"sha": "72e8bb3ab45d3ac9de455ee9a1ec832ce70cf2d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72e8bb3ab45d3ac9de455ee9a1ec832ce70cf2d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26df816f520d00fe5ddf332a0a08ad6e26a5698d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26df816f520d00fe5ddf332a0a08ad6e26a5698d", "html_url": "https://github.com/rust-lang/rust/commit/26df816f520d00fe5ddf332a0a08ad6e26a5698d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26df816f520d00fe5ddf332a0a08ad6e26a5698d/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b9fea1300b515e0f8929bb3a09d4fb6fef3f0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9fea1300b515e0f8929bb3a09d4fb6fef3f0ea", "html_url": "https://github.com/rust-lang/rust/commit/2b9fea1300b515e0f8929bb3a09d4fb6fef3f0ea"}], "stats": {"total": 115, "additions": 62, "deletions": 53}, "files": [{"sha": "2d9ef124ad2440e63e1cc015cb891be497aa9151", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/26df816f520d00fe5ddf332a0a08ad6e26a5698d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df816f520d00fe5ddf332a0a08ad6e26a5698d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=26df816f520d00fe5ddf332a0a08ad6e26a5698d", "patch": "@@ -28,6 +28,8 @@ use std::cell::RefCell;\n use std::iter;\n use std::mem;\n \n+use transform::{add_call_guards, no_landing_pads, simplify};\n+\n pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;\n }\n@@ -42,7 +44,7 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n     let param_env =\n         tcx.construct_parameter_environment(span, did, ROOT_CODE_EXTENT);\n \n-    let result = match instance {\n+    let mut result = match instance {\n         ty::InstanceDef::Item(..) =>\n             bug!(\"item {:?} passed to make_shim\", instance),\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n@@ -103,6 +105,10 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n             bug!(\"creating shims from intrinsics ({:?}) is unsupported\", instance)\n         }\n     };\n+        debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n+        no_landing_pads::no_landing_pads(tcx, &mut result);\n+        simplify::simplify_cfg(&mut result);\n+        add_call_guards::add_call_guards(&mut result);\n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n     let result = tcx.alloc_mir(result);\n@@ -230,18 +236,13 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n         })\n     };\n \n-    let have_unwind = match (rcvr_adjustment, tcx.sess.no_landing_pads()) {\n-        (Adjustment::RefMut, false) => true,\n-        _ => false\n-    };\n-\n     // BB #0\n     block(&mut blocks, statements, TerminatorKind::Call {\n         func: callee,\n         args: args,\n         destination: Some((Lvalue::Local(RETURN_POINTER),\n                            BasicBlock::new(1))),\n-        cleanup: if have_unwind {\n+        cleanup: if let Adjustment::RefMut = rcvr_adjustment {\n             Some(BasicBlock::new(3))\n         } else {\n             None\n@@ -253,16 +254,12 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n         block(&mut blocks, vec![], TerminatorKind::Drop {\n             location: Lvalue::Local(rcvr_arg),\n             target: BasicBlock::new(2),\n-            unwind: if have_unwind {\n-                Some(BasicBlock::new(4))\n-            } else {\n-                None\n-            }\n+            unwind: None\n         }, false);\n     }\n     // BB #1/#2 - return\n     block(&mut blocks, vec![], TerminatorKind::Return, false);\n-    if have_unwind {\n+    if let Adjustment::RefMut = rcvr_adjustment {\n         // BB #3 - drop if closure panics\n         block(&mut blocks, vec![], TerminatorKind::Drop {\n             location: Lvalue::Local(rcvr_arg),"}, {"sha": "80b17c6a008f5902334915c89c4677e99d6c0f82", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/26df816f520d00fe5ddf332a0a08ad6e26a5698d/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df816f520d00fe5ddf332a0a08ad6e26a5698d/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=26df816f520d00fe5ddf332a0a08ad6e26a5698d", "patch": "@@ -37,46 +37,50 @@ pub struct AddCallGuards;\n \n impl<'tcx> MirPass<'tcx> for AddCallGuards {\n     fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n-        let pred_count: IndexVec<_, _> =\n-            mir.predecessors().iter().map(|ps| ps.len()).collect();\n+        add_call_guards(mir);\n+    }\n+}\n+\n+pub fn add_call_guards(mir: &mut Mir) {\n+    let pred_count: IndexVec<_, _> =\n+        mir.predecessors().iter().map(|ps| ps.len()).collect();\n \n-        // We need a place to store the new blocks generated\n-        let mut new_blocks = Vec::new();\n+    // We need a place to store the new blocks generated\n+    let mut new_blocks = Vec::new();\n \n-        let cur_len = mir.basic_blocks().len();\n+    let cur_len = mir.basic_blocks().len();\n \n-        for block in mir.basic_blocks_mut() {\n-            match block.terminator {\n-                Some(Terminator {\n-                    kind: TerminatorKind::Call {\n-                        destination: Some((_, ref mut destination)),\n-                        cleanup: Some(_),\n-                        ..\n-                    }, source_info\n-                }) if pred_count[*destination] > 1 => {\n-                    // It's a critical edge, break it\n-                    let call_guard = BasicBlockData {\n-                        statements: vec![],\n-                        is_cleanup: block.is_cleanup,\n-                        terminator: Some(Terminator {\n-                            source_info: source_info,\n-                            kind: TerminatorKind::Goto { target: *destination }\n-                        })\n-                    };\n+    for block in mir.basic_blocks_mut() {\n+        match block.terminator {\n+            Some(Terminator {\n+                kind: TerminatorKind::Call {\n+                    destination: Some((_, ref mut destination)),\n+                    cleanup: Some(_),\n+                    ..\n+                }, source_info\n+            }) if pred_count[*destination] > 1 => {\n+                // It's a critical edge, break it\n+                let call_guard = BasicBlockData {\n+                    statements: vec![],\n+                    is_cleanup: block.is_cleanup,\n+                    terminator: Some(Terminator {\n+                        source_info: source_info,\n+                        kind: TerminatorKind::Goto { target: *destination }\n+                    })\n+                };\n \n-                    // Get the index it will be when inserted into the MIR\n-                    let idx = cur_len + new_blocks.len();\n-                    new_blocks.push(call_guard);\n-                    *destination = BasicBlock::new(idx);\n-                }\n-                _ => {}\n+                // Get the index it will be when inserted into the MIR\n+                let idx = cur_len + new_blocks.len();\n+                new_blocks.push(call_guard);\n+                *destination = BasicBlock::new(idx);\n             }\n+            _ => {}\n         }\n+    }\n \n-        debug!(\"Broke {} N edges\", new_blocks.len());\n+    debug!(\"Broke {} N edges\", new_blocks.len());\n \n-        mir.basic_blocks_mut().extend(new_blocks);\n-    }\n+    mir.basic_blocks_mut().extend(new_blocks);\n }\n \n impl Pass for AddCallGuards {}"}, {"sha": "3654ae6940c5257b11cf9ae37ed81d8f430b159a", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26df816f520d00fe5ddf332a0a08ad6e26a5698d/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df816f520d00fe5ddf332a0a08ad6e26a5698d/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=26df816f520d00fe5ddf332a0a08ad6e26a5698d", "patch": "@@ -42,12 +42,16 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n     }\n }\n \n+pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx>) {\n+    if tcx.sess.no_landing_pads() {\n+        NoLandingPads.visit_mir(mir);\n+    }\n+}\n+\n impl<'tcx> MirPass<'tcx> for NoLandingPads {\n     fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     _: MirSource, mir: &mut Mir<'tcx>) {\n-        if tcx.sess.no_landing_pads() {\n-            self.visit_mir(mir);\n-        }\n+        no_landing_pads(tcx, mir)\n     }\n }\n "}, {"sha": "0a8f147b2141055ac0cec37a56a0e5659bbd421d", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26df816f520d00fe5ddf332a0a08ad6e26a5698d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26df816f520d00fe5ddf332a0a08ad6e26a5698d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=26df816f520d00fe5ddf332a0a08ad6e26a5698d", "patch": "@@ -53,14 +53,18 @@ impl<'a> SimplifyCfg<'a> {\n     }\n }\n \n+pub fn simplify_cfg(mir: &mut Mir) {\n+    CfgSimplifier::new(mir).simplify();\n+    remove_dead_blocks(mir);\n+\n+    // FIXME: Should probably be moved into some kind of pass manager\n+    mir.basic_blocks_mut().raw.shrink_to_fit();\n+}\n+\n impl<'l, 'tcx> MirPass<'tcx> for SimplifyCfg<'l> {\n     fn run_pass<'a>(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, mir);\n-        CfgSimplifier::new(mir).simplify();\n-        remove_dead_blocks(mir);\n-\n-        // FIXME: Should probably be moved into some kind of pass manager\n-        mir.basic_blocks_mut().raw.shrink_to_fit();\n+        simplify_cfg(mir);\n     }\n }\n "}]}