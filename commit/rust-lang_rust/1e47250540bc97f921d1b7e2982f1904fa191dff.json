{"sha": "1e47250540bc97f921d1b7e2982f1904fa191dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDcyNTA1NDBiYzk3ZjkyMWQxYjdlMjk4MmYxOTA0ZmExOTFkZmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-01T15:59:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-01T15:59:48Z"}, "message": "as_ptr returns a read-only pointer", "tree": {"sha": "30c0e7841d8190f846c568f6bf44ca83ae75f70e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30c0e7841d8190f846c568f6bf44ca83ae75f70e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e47250540bc97f921d1b7e2982f1904fa191dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e47250540bc97f921d1b7e2982f1904fa191dff", "html_url": "https://github.com/rust-lang/rust/commit/1e47250540bc97f921d1b7e2982f1904fa191dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e47250540bc97f921d1b7e2982f1904fa191dff/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc24f26036b28fb3366de86efe3da6c4464057a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc24f26036b28fb3366de86efe3da6c4464057a", "html_url": "https://github.com/rust-lang/rust/commit/6cc24f26036b28fb3366de86efe3da6c4464057a"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "c273153fa5ead51b737625846ef96e9ab8fe8413", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e47250540bc97f921d1b7e2982f1904fa191dff/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e47250540bc97f921d1b7e2982f1904fa191dff/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=1e47250540bc97f921d1b7e2982f1904fa191dff", "patch": "@@ -359,6 +359,10 @@ impl<T> [T] {\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage.\n     ///\n+    /// The caller must also ensure that the memory the pointer (non-transitively) points to\n+    /// is never written to (except inside an `UnsafeCell`). If you need to mutate\n+    /// the contents of the slice, use [`as_mut_ptr`].\n+    ///\n     /// Modifying the container referenced by this slice may cause its buffer\n     /// to be reallocated, which would also make any pointers to it invalid.\n     ///\n@@ -374,6 +378,8 @@ impl<T> [T] {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const T {"}, {"sha": "96a5ce61ca0bc769542b0a2960de10a3e82b764e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e47250540bc97f921d1b7e2982f1904fa191dff/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e47250540bc97f921d1b7e2982f1904fa191dff/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=1e47250540bc97f921d1b7e2982f1904fa191dff", "patch": "@@ -2188,7 +2188,12 @@ impl str {\n     /// [`u8`]. This pointer will be pointing to the first byte of the string\n     /// slice.\n     ///\n+    /// The caller must ensure that the memory the pointer points to\n+    /// is never written to. If you need to mutate\n+    /// the contents of the string slice, use [`as_mut_ptr`].\n+    ///\n     /// [`u8`]: primitive.u8.html\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n     ///\n     /// # Examples\n     ///"}, {"sha": "5c6c43017cf6402be3528a88c17dde88ad3fb055", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e47250540bc97f921d1b7e2982f1904fa191dff/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e47250540bc97f921d1b7e2982f1904fa191dff/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=1e47250540bc97f921d1b7e2982f1904fa191dff", "patch": "@@ -43,7 +43,9 @@ use crate::sys;\n /// `CString` implements a [`as_ptr`] method through the [`Deref`]\n /// trait. This method will give you a `*const c_char` which you can\n /// feed directly to extern functions that expect a nul-terminated\n-/// string, like C's `strdup()`.\n+/// string, like C's `strdup()`. Notice that [`as_ptr`] returns a\n+/// read-only pointer; if the C code writes to it, that causes\n+/// undefined behavior.\n ///\n /// # Extracting a slice of the whole C string\n ///\n@@ -61,7 +63,7 @@ use crate::sys;\n ///\n /// Once you have the kind of slice you need (with or without a nul\n /// terminator), you can call the slice's own\n-/// [`as_ptr`][slice.as_ptr] method to get a raw pointer to pass to\n+/// [`as_ptr`][slice.as_ptr] method to get a read-only raw pointer to pass to\n /// extern functions. See the documentation for that function for a\n /// discussion on ensuring the lifetime of the raw pointer.\n ///\n@@ -1043,6 +1045,9 @@ impl CStr {\n     ///\n     /// **WARNING**\n     ///\n+    /// The returned pointer is read-only; writing to it (including passing it\n+    /// to C code that writes to it) causes undefined behavior.\n+    ///\n     /// It is your responsibility to make sure that the underlying memory is not\n     /// freed too early. For example, the following code will cause undefined\n     /// behavior when `ptr` is used inside the `unsafe` block:"}]}