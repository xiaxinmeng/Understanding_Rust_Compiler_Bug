{"sha": "ddad1e1f15f77074738bb3d7fb7688a9177b6450", "node_id": "C_kwDOAAsO6NoAKGRkYWQxZTFmMTVmNzcwNzQ3MzhiYjNkN2ZiNzY4OGE5MTc3YjY0NTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-04T06:28:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-04T06:28:05Z"}, "message": "Auto merge of #104376 - compiler-errors:thin-metadata-implies-thin-ptr, r=wesleywiser\n\nlayout_of: `T: Thin` implies `sizeof(&T) == sizeof(usize)`\n\nUse the `<T as Pointee>::Metadata` associated type to calculate the layout of a pointee's metadata, instead of hard-coding rules about certain types.\n\nMaybe this approach is overkill -- we could instead hard-code this approach as a fallback, with the matching on `Slice`/`Dynamic`/etc. happening first\n\nFixes this issue here https://github.com/rust-lang/rust/pull/104338#issuecomment-1312595844 .. But is also useful with transmutes, for example, given the UI test I added below.", "tree": {"sha": "805c0c24682e69fc40fba1ff446aa1a8a8f8d6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/805c0c24682e69fc40fba1ff446aa1a8a8f8d6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddad1e1f15f77074738bb3d7fb7688a9177b6450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddad1e1f15f77074738bb3d7fb7688a9177b6450", "html_url": "https://github.com/rust-lang/rust/commit/ddad1e1f15f77074738bb3d7fb7688a9177b6450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddad1e1f15f77074738bb3d7fb7688a9177b6450/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c361616c3ca3e3e3069dbdf90557181233387444", "url": "https://api.github.com/repos/rust-lang/rust/commits/c361616c3ca3e3e3069dbdf90557181233387444", "html_url": "https://github.com/rust-lang/rust/commit/c361616c3ca3e3e3069dbdf90557181233387444"}, {"sha": "a5d39cf290d9762d982b6930f10fb4dd34119c3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d39cf290d9762d982b6930f10fb4dd34119c3f", "html_url": "https://github.com/rust-lang/rust/commit/a5d39cf290d9762d982b6930f10fb4dd34119c3f"}], "stats": {"total": 112, "additions": 82, "deletions": 30}, "files": [{"sha": "00f53afd6632854f824eb5df0d8256d61407ba18", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ddad1e1f15f77074738bb3d7fb7688a9177b6450/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad1e1f15f77074738bb3d7fb7688a9177b6450/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=ddad1e1f15f77074738bb3d7fb7688a9177b6450", "patch": "@@ -670,29 +670,50 @@ where\n                         });\n                     }\n \n-                    match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {\n-                        ty::Slice(_) | ty::Str => TyMaybeWithLayout::Ty(tcx.types.usize),\n-                        ty::Dynamic(_, _, ty::Dyn) => {\n-                            TyMaybeWithLayout::Ty(tcx.mk_imm_ref(\n-                                tcx.lifetimes.re_static,\n-                                tcx.mk_array(tcx.types.usize, 3),\n-                            ))\n-                            /* FIXME: use actual fn pointers\n-                            Warning: naively computing the number of entries in the\n-                            vtable by counting the methods on the trait + methods on\n-                            all parent traits does not work, because some methods can\n-                            be not object safe and thus excluded from the vtable.\n-                            Increase this counter if you tried to implement this but\n-                            failed to do it without duplicating a lot of code from\n-                            other places in the compiler: 2\n-                            tcx.mk_tup(&[\n-                                tcx.mk_array(tcx.types.usize, 3),\n-                                tcx.mk_array(Option<fn()>),\n-                            ])\n-                            */\n+                    let mk_dyn_vtable = || {\n+                        tcx.mk_imm_ref(tcx.lifetimes.re_static, tcx.mk_array(tcx.types.usize, 3))\n+                        /* FIXME: use actual fn pointers\n+                        Warning: naively computing the number of entries in the\n+                        vtable by counting the methods on the trait + methods on\n+                        all parent traits does not work, because some methods can\n+                        be not object safe and thus excluded from the vtable.\n+                        Increase this counter if you tried to implement this but\n+                        failed to do it without duplicating a lot of code from\n+                        other places in the compiler: 2\n+                        tcx.mk_tup(&[\n+                            tcx.mk_array(tcx.types.usize, 3),\n+                            tcx.mk_array(Option<fn()>),\n+                        ])\n+                        */\n+                    };\n+\n+                    let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type() {\n+                        let metadata = tcx.normalize_erasing_regions(\n+                            cx.param_env(),\n+                            tcx.mk_projection(metadata_def_id, [pointee]),\n+                        );\n+\n+                        // Map `Metadata = DynMetadata<dyn Trait>` back to a vtable, since it\n+                        // offers better information than `std::ptr::metadata::VTable`,\n+                        // and we rely on this layout information to trigger a panic in\n+                        // `std::mem::uninitialized::<&dyn Trait>()`, for example.\n+                        if let ty::Adt(def, substs) = metadata.kind()\n+                            && Some(def.did()) == tcx.lang_items().dyn_metadata()\n+                            && substs.type_at(0).is_trait()\n+                        {\n+                            mk_dyn_vtable()\n+                        } else {\n+                            metadata\n                         }\n-                        _ => bug!(\"TyAndLayout::field({:?}): not applicable\", this),\n-                    }\n+                    } else {\n+                        match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {\n+                            ty::Slice(_) | ty::Str => tcx.types.usize,\n+                            ty::Dynamic(_, _, ty::Dyn) => mk_dyn_vtable(),\n+                            _ => bug!(\"TyAndLayout::field({:?}): not applicable\", this),\n+                        }\n+                    };\n+\n+                    TyMaybeWithLayout::Ty(metadata)\n                 }\n \n                 // Arrays and slices."}, {"sha": "6aa016133ca598926fffa1b2823962b11332da92", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ddad1e1f15f77074738bb3d7fb7688a9177b6450/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad1e1f15f77074738bb3d7fb7688a9177b6450/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=ddad1e1f15f77074738bb3d7fb7688a9177b6450", "patch": "@@ -155,17 +155,37 @@ fn layout_of_uncached<'tcx>(\n             }\n \n             let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n-            let metadata = match unsized_part.kind() {\n-                ty::Foreign(..) => {\n+\n+            let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type() {\n+                let metadata_ty = tcx.normalize_erasing_regions(\n+                    param_env,\n+                    tcx.mk_projection(metadata_def_id, [pointee]),\n+                );\n+                let metadata_layout = cx.layout_of(metadata_ty)?;\n+                // If the metadata is a 1-zst, then the pointer is thin.\n+                if metadata_layout.is_zst() && metadata_layout.align.abi.bytes() == 1 {\n                     return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n                 }\n-                ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),\n-                ty::Dynamic(..) => {\n-                    let mut vtable = scalar_unit(Pointer);\n-                    vtable.valid_range_mut().start = 1;\n-                    vtable\n+\n+                let Abi::Scalar(metadata) = metadata_layout.abi else {\n+                    return Err(LayoutError::Unknown(unsized_part));\n+                };\n+                metadata\n+            } else {\n+                match unsized_part.kind() {\n+                    ty::Foreign(..) => {\n+                        return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n+                    }\n+                    ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),\n+                    ty::Dynamic(..) => {\n+                        let mut vtable = scalar_unit(Pointer);\n+                        vtable.valid_range_mut().start = 1;\n+                        vtable\n+                    }\n+                    _ => {\n+                        return Err(LayoutError::Unknown(unsized_part));\n+                    }\n                 }\n-                _ => return Err(LayoutError::Unknown(unsized_part)),\n             };\n \n             // Effectively a (ptr, meta) tuple."}, {"sha": "972579ea8be0d7dba6ef17e0fe2f4a96ac7f70e1", "filename": "src/test/ui/layout/thin-meta-implies-thin-ptr.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ddad1e1f15f77074738bb3d7fb7688a9177b6450/src%2Ftest%2Fui%2Flayout%2Fthin-meta-implies-thin-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad1e1f15f77074738bb3d7fb7688a9177b6450/src%2Ftest%2Fui%2Flayout%2Fthin-meta-implies-thin-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthin-meta-implies-thin-ptr.rs?ref=ddad1e1f15f77074738bb3d7fb7688a9177b6450", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![feature(ptr_metadata)]\n+\n+use std::ptr::Thin;\n+\n+fn main() {}\n+\n+fn foo<T: ?Sized + Thin>(t: *const T) -> *const () {\n+    unsafe { std::mem::transmute(t) }\n+}"}]}