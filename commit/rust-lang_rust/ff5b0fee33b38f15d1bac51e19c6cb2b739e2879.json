{"sha": "ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNWIwZmVlMzNiMzhmMTVkMWJhYzUxZTE5YzZjYjJiNzM5ZTI4Nzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-11T19:07:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-12T08:22:23Z"}, "message": "fix many tests and ignore some others; enable compile_fail tests again", "tree": {"sha": "74a904f18b34b48234bf3b564d4d5ad8a8f2c33c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a904f18b34b48234bf3b564d4d5ad8a8f2c33c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "html_url": "https://github.com/rust-lang/rust/commit/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54da84fbd8ea0376f88fd31989427d3e6aec1c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/54da84fbd8ea0376f88fd31989427d3e6aec1c1a", "html_url": "https://github.com/rust-lang/rust/commit/54da84fbd8ea0376f88fd31989427d3e6aec1c1a"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "24718bce7db96bb04147b4e13fe8a480dabcb43e", "filename": "tests/compile-fail-fullmir/undefined_byte_read.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fundefined_byte_read.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -4,6 +4,7 @@\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };\n-    let x = undef + 1; //~ ERROR: attempted to read undefined bytes\n+    let x = undef + 1; //~ ERROR: error\n+    //~^ NOTE attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "4b89f0ac70c79a6b7cc793c410280758a48257e5", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -9,7 +9,7 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n     }\n }"}, {"sha": "3a74245816c469afdee9f172fd699e23a5934fd3", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -9,7 +9,7 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n     }\n }"}, {"sha": "613edf3c6af95d81768c7e9ee0d269a5ee464e4e", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -9,7 +9,7 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n     }"}, {"sha": "0d45d70eb781ac7564c209fd3564a61642deca33", "filename": "tests/compile-fail/match_char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fmatch_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fmatch_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test FIXME: we are not checking these things on match any more?\n+\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n     match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR constant evaluation error [E0080]"}, {"sha": "c03cf50eb27f613f6100a24ef02163c61a8cfe70", "filename": "tests/compile-fail/memleak.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -1,3 +1,4 @@\n+// ignore-test FIXME: leak detection is disabled\n //error-pattern: the evaluated program leaked memory\n \n fn main() {"}, {"sha": "da3a58118a2a5671f295b67f0af108889988c70a", "filename": "tests/compile-fail/memleak_rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak_rc.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -1,3 +1,4 @@\n+// ignore-test FIXME: leak detection is disabled\n //error-pattern: the evaluated program leaked memory\n \n use std::rc::Rc;"}, {"sha": "967c8b020cca099781347a769c233d13f45d4585", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n     let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR constant evaluation error [E0080]\n-    //~^ NOTE suiriuruihrihue\n+    //~^ NOTE attempt to shift right with overflow\n }"}, {"sha": "f85b651e857304a41e774244b288fbd2a98e6c74", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -9,7 +9,7 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n-        let _y = Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1);\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let _y = Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1).unwrap();\n     }\n }"}, {"sha": "03040cd178da2009010ad0ae5ef816bd7f849fea", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -7,9 +7,9 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n-        let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n-        let _z = *(x as *mut u8); //~ ERROR constant evaluation error [E0080]\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n+        let _z = *(x.as_ptr() as *mut u8); //~ ERROR constant evaluation error [E0080]\n         //~^ NOTE dangling pointer was dereferenced\n     }\n }"}, {"sha": "6dfb7fe2b9663b6cc637e58514ff8a079d06c37c", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -9,8 +9,8 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n-        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n+        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n     }\n }"}, {"sha": "a85ff545ee4239e36552db4e5df696acf8b579fd", "filename": "tests/compile-fail/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -1,3 +1,4 @@\n+// ignore-test FIXME: we are not making these statics read-only any more?\n static X: usize = 5;\n \n #[allow(mutable_transmutes)]"}, {"sha": "401499f6c5fa744999222de391d30d56190a6660", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b0fee33b38f15d1bac51e19c6cb2b739e2879/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=ff5b0fee33b38f15d1bac51e19c6cb2b739e2879", "patch": "@@ -192,7 +192,9 @@ fn run_pass_miri_noopt() {\n }\n \n #[test]\n-#[ignore] // FIXME: Disabled for now, as the optimizer is pretty broken and crashes...\n+#[ignore]\n+// FIXME: Disabled for now, as the optimizer is pretty broken and crashes...\n+// See https://github.com/rust-lang/rust/issues/50411\n fn run_pass_miri_opt() {\n     run_pass_miri(true);\n }\n@@ -204,13 +206,11 @@ fn run_pass_rustc() {\n }\n \n #[test]\n-#[should_panic] // TODO: update test errors\n fn compile_fail_miri() {\n     let sysroot = get_sysroot();\n     let host = get_host();\n \n     // FIXME: run tests for other targets, too\n     compile_fail(&sysroot, \"tests/compile-fail\", &host, &host, true);\n-\n     compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true);\n }"}]}