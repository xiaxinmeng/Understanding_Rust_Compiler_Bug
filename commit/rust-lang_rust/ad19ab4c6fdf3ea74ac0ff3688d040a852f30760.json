{"sha": "ad19ab4c6fdf3ea74ac0ff3688d040a852f30760", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTlhYjRjNmZkZjNlYTc0YWMwZmYzNjg4ZDA0MGE4NTJmMzA3NjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-26T22:06:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-26T23:59:15Z"}, "message": "rt: Make the logic that moves environments between tasks update the GC alloc chain correctly", "tree": {"sha": "a4f501f24bc3867388b3d6aac3af5120d39c0205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f501f24bc3867388b3d6aac3af5120d39c0205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760", "html_url": "https://github.com/rust-lang/rust/commit/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e5ab093a89fbe240e67be6a59c901f32d5ce4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e5ab093a89fbe240e67be6a59c901f32d5ce4f", "html_url": "https://github.com/rust-lang/rust/commit/47e5ab093a89fbe240e67be6a59c901f32d5ce4f"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "7226171e9f15a6861dd4b0439f39a9c6e33a80fb", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=ad19ab4c6fdf3ea74ac0ff3688d040a852f30760", "patch": "@@ -456,8 +456,8 @@ migrate_alloc(rust_task *task, void *alloc, rust_task_id tid) {\n     if(!alloc) return;\n     rust_task *target = task->kernel->get_task_by_id(tid);\n     if(target) {\n-        task->local_region.release_alloc(alloc);\n-        target->local_region.claim_alloc(alloc);\n+        const type_desc *tydesc = task->release_alloc(alloc);\n+        target->claim_alloc(alloc, tydesc);\n         target->deref();\n     }\n     else {"}, {"sha": "c53ec1aa51c23b5bdf192d904965ab5b3298fd18", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=ad19ab4c6fdf3ea74ac0ff3688d040a852f30760", "patch": "@@ -178,16 +178,22 @@ irc::compute_ircs(rust_task *task, irc_map &ircs) {\n         shape::arena arena;\n         shape::type_param *params =\n             shape::type_param::from_tydesc_and_data(tydesc, p, arena);\n-        irc irc(task, true, tydesc->shape, params, tydesc->shape_tables,\n-                p + sizeof(uintptr_t), ircs);\n-        irc.walk();\n \n #if 0\n+        shape::print print(task, true, tydesc->shape, params,\n+                           tydesc->shape_tables);\n+        print.walk();\n+\n         shape::log log(task, true, tydesc->shape, params,\n-                       tydesc->shape_tables, p, std::cerr);\n+                       tydesc->shape_tables, p + sizeof(uintptr_t),\n+                       std::cerr);\n         log.walk();\n #endif\n \n+        irc irc(task, true, tydesc->shape, params, tydesc->shape_tables,\n+                p + sizeof(uintptr_t), ircs);\n+        irc.walk();\n+\n         ++begin;\n     }\n }"}, {"sha": "f2c866263cf0b05637e9bf1b762557632fe66168", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=ad19ab4c6fdf3ea74ac0ff3688d040a852f30760", "patch": "@@ -152,6 +152,8 @@ void task_start_wrapper(spawn_args *a)\n         failed = true;\n     }\n \n+    cc::do_cc(task);\n+\n     rust_closure_env* env = (rust_closure_env*)a->a3;\n     if(env) {\n         // free the environment.\n@@ -551,6 +553,35 @@ rust_chan *rust_task::get_chan_by_handle(chan_handle *handle) {\n     return NULL;\n }\n \n+// Temporary routine to allow boxes on one task's shared heap to be reparented\n+// to another.\n+const type_desc *\n+rust_task::release_alloc(void *alloc) {\n+    lock.lock();\n+\n+    assert(local_allocs.find(alloc) != local_allocs.end());\n+    const type_desc *tydesc = local_allocs[alloc];\n+    local_allocs.erase(alloc);\n+\n+    local_region.release_alloc(alloc);\n+\n+    lock.unlock();\n+    return tydesc;\n+}\n+\n+// Temporary routine to allow boxes from one task's shared heap to be\n+// reparented to this one.\n+void\n+rust_task::claim_alloc(void *alloc, const type_desc *tydesc) {\n+    lock.lock();\n+\n+    assert(local_allocs.find(alloc) == local_allocs.end());\n+    local_allocs[alloc] = tydesc;\n+    local_region.claim_alloc(alloc);\n+\n+    lock.unlock();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "f364d2a67f7ff9d5b2363b50eaa323346b8dccb0", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/ad19ab4c6fdf3ea74ac0ff3688d040a852f30760/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=ad19ab4c6fdf3ea74ac0ff3688d040a852f30760", "patch": "@@ -204,6 +204,11 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     intptr_t get_ref_count() const { return ref_count; }\n \n     rust_chan *get_chan_by_handle(chan_handle *handle);\n+\n+    // FIXME: These functions only exist to get the tasking system off the\n+    // ground. We should never be migrating shared boxes between tasks.\n+    const type_desc *release_alloc(void *alloc);\n+    void claim_alloc(void *alloc, const type_desc *tydesc);\n };\n \n //"}]}