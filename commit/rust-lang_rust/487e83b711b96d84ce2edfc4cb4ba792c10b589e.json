{"sha": "487e83b711b96d84ce2edfc4cb4ba792c10b589e", "node_id": "C_kwDOAAsO6NoAKDQ4N2U4M2I3MTFiOTZkODRjZTJlZGZjNGNiNGJhNzkyYzEwYjU4OWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-31T00:03:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-31T00:03:08Z"}, "message": "Auto merge of #105650 - cassaundra:float-literal-suggestion, r=pnkfelix\n\nFix invalid float literal suggestions when recovering an integer\n\nOnly suggest adding a zero to integers with a preceding dot when the change will result in a valid floating point literal.\n\nFor example, `.0x0` should not be turned into `0.0x0`.\n\nr? nnethercote", "tree": {"sha": "6e79e3ff2f39930c60e7b1758d9ed8b4f3d6864c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e79e3ff2f39930c60e7b1758d9ed8b4f3d6864c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/487e83b711b96d84ce2edfc4cb4ba792c10b589e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/487e83b711b96d84ce2edfc4cb4ba792c10b589e", "html_url": "https://github.com/rust-lang/rust/commit/487e83b711b96d84ce2edfc4cb4ba792c10b589e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/487e83b711b96d84ce2edfc4cb4ba792c10b589e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "001a77fac33f6560ff361ff38f661ff5f1c6bf85", "url": "https://api.github.com/repos/rust-lang/rust/commits/001a77fac33f6560ff361ff38f661ff5f1c6bf85", "html_url": "https://github.com/rust-lang/rust/commit/001a77fac33f6560ff361ff38f661ff5f1c6bf85"}, {"sha": "80fcd7c40ec46613b130b5d732162ecbfda6c509", "url": "https://api.github.com/repos/rust-lang/rust/commits/80fcd7c40ec46613b130b5d732162ecbfda6c509", "html_url": "https://github.com/rust-lang/rust/commit/80fcd7c40ec46613b130b5d732162ecbfda6c509"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "dcc3059a7f44ca5d7838bf4873d76ae511833a33", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/487e83b711b96d84ce2edfc4cb4ba792c10b589e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487e83b711b96d84ce2edfc4cb4ba792c10b589e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=487e83b711b96d84ce2edfc4cb4ba792c10b589e", "patch": "@@ -1882,7 +1882,16 @@ impl<'a> Parser<'a> {\n                 if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) =\n                     next_token.kind\n                 {\n-                    if self.token.span.hi() == next_token.span.lo() {\n+                    // If this integer looks like a float, then recover as such.\n+                    //\n+                    // We will never encounter the exponent part of a floating\n+                    // point literal here, since there's no use of the exponent\n+                    // syntax that also constitutes a valid integer, so we need\n+                    // not check for that.\n+                    if suffix.map_or(true, |s| s == sym::f32 || s == sym::f64)\n+                        && symbol.as_str().chars().all(|c| c.is_numeric() || c == '_')\n+                        && self.token.span.hi() == next_token.span.lo()\n+                    {\n                         let s = String::from(\"0.\") + symbol.as_str();\n                         let kind = TokenKind::lit(token::Float, Symbol::intern(&s), suffix);\n                         return Some(Token::new(kind, self.token.span.to(next_token.span)));"}, {"sha": "79430d8c0513d7daa089b281325def2a546587cf", "filename": "tests/ui/suggestions/recover-invalid-float-invalid.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/487e83b711b96d84ce2edfc4cb4ba792c10b589e/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487e83b711b96d84ce2edfc4cb4ba792c10b589e/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.rs?ref=487e83b711b96d84ce2edfc4cb4ba792c10b589e", "patch": "@@ -0,0 +1,24 @@\n+// Check that suggestions to add a zero to integers with a preceding dot only appear when the change\n+// will result in a valid floating point literal.\n+\n+fn main() {}\n+\n+fn a() {\n+    _ = .3u32;\n+    //~^ ERROR expected expression, found `.`\n+}\n+\n+fn b() {\n+    _ = .0b0;\n+    //~^ ERROR expected expression, found `.`\n+}\n+\n+fn c() {\n+    _ = .0o07;\n+    //~^ ERROR expected expression, found `.`\n+}\n+\n+fn d() {\n+    _ = .0x0ABC;\n+    //~^ ERROR expected expression, found `.`\n+}"}, {"sha": "5764afc1a21fa260d77e586ba70af8d07f399ac6", "filename": "tests/ui/suggestions/recover-invalid-float-invalid.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/487e83b711b96d84ce2edfc4cb4ba792c10b589e/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/487e83b711b96d84ce2edfc4cb4ba792c10b589e/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frecover-invalid-float-invalid.stderr?ref=487e83b711b96d84ce2edfc4cb4ba792c10b589e", "patch": "@@ -0,0 +1,26 @@\n+error: expected expression, found `.`\n+  --> $DIR/recover-invalid-float-invalid.rs:7:9\n+   |\n+LL |     _ = .3u32;\n+   |         ^ expected expression\n+\n+error: expected expression, found `.`\n+  --> $DIR/recover-invalid-float-invalid.rs:12:9\n+   |\n+LL |     _ = .0b0;\n+   |         ^ expected expression\n+\n+error: expected expression, found `.`\n+  --> $DIR/recover-invalid-float-invalid.rs:17:9\n+   |\n+LL |     _ = .0o07;\n+   |         ^ expected expression\n+\n+error: expected expression, found `.`\n+  --> $DIR/recover-invalid-float-invalid.rs:22:9\n+   |\n+LL |     _ = .0x0ABC;\n+   |         ^ expected expression\n+\n+error: aborting due to 4 previous errors\n+"}]}