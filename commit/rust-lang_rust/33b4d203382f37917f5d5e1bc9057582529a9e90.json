{"sha": "33b4d203382f37917f5d5e1bc9057582529a9e90", "node_id": "C_kwDOAAsO6NoAKDMzYjRkMjAzMzgyZjM3OTE3ZjVkNWUxYmM5MDU3NTgyNTI5YTllOTA", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-06-01T02:30:02Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-02-07T09:37:55Z"}, "message": "Clean up MIR transform", "tree": {"sha": "517c5991734838bcff7ca668cf00a490bc03f20f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517c5991734838bcff7ca668cf00a490bc03f20f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b4d203382f37917f5d5e1bc9057582529a9e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b4d203382f37917f5d5e1bc9057582529a9e90", "html_url": "https://github.com/rust-lang/rust/commit/33b4d203382f37917f5d5e1bc9057582529a9e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b4d203382f37917f5d5e1bc9057582529a9e90/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe", "html_url": "https://github.com/rust-lang/rust/commit/96db5e9c7b2f8b97b75a5afeae21e0e0abf7bdfe"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "f5bf40846e0393daf193007d3fbd9aaa27e36473", "filename": "compiler/rustc_mir/src/transform/large_enums.rs", "status": "modified", "additions": 49, "deletions": 11, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/33b4d203382f37917f5d5e1bc9057582529a9e90/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b4d203382f37917f5d5e1bc9057582529a9e90/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs?ref=33b4d203382f37917f5d5e1bc9057582529a9e90", "patch": "@@ -26,7 +26,8 @@ impl<const D: u64> EnumSizeOpt<D> {\n             ty::Adt(adt_def, _substs) if adt_def.is_enum() => {\n                 let p_e = tcx.param_env(body_did);\n                 // FIXME(jknodt) handle error better below\n-                let layout = tcx.layout_of(p_e.and(ty)).unwrap();\n+                let layout =\n+                    if let Ok(layout) = tcx.layout_of(p_e.and(ty)) { layout } else { return None };\n                 let variants = &layout.variants;\n                 match variants {\n                     Variants::Single { .. } => None,\n@@ -84,7 +85,16 @@ impl<const D: u64> EnumSizeOpt<D> {\n                         } else {\n                             let mut data =\n                                 vec![0; std::mem::size_of::<usize>() * num_variants as usize];\n-                            data.copy_from_slice(unsafe { std::mem::transmute(&sizes[..]) });\n+\n+                            let mut curr = 0;\n+                            for byte in sizes\n+                                .iter()\n+                                .flat_map(|sz| sz.bytes().to_ne_bytes())\n+                                .take(data.len())\n+                            {\n+                                data[curr] = byte;\n+                                curr += 1;\n+                            }\n                             let alloc = interpret::Allocation::from_bytes(\n                                 data,\n                                 tcx.data_layout.ptr_sized_integer().align(&tcx.data_layout).abi,\n@@ -123,9 +133,9 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             kind: StatementKind::Assign(box (place, rval)),\n                         };\n \n-                        // FIXME(jknodt) do I need to add a storage live here for this place?\n                         let discr_place = Place {\n-                            local: patch.new_temp(tcx.types.usize, span),\n+                            // How do I get the discriminant type?\n+                            local: patch.new_temp(tcx.types.isize, span),\n                             projection: List::empty(),\n                         };\n \n@@ -155,9 +165,8 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             )),\n                         };\n \n-                        // FIXME(jknodt) do I need to add a storage live here for this place?\n                         let dst = Place {\n-                            local: patch.new_temp(tcx.mk_mut_ptr(tcx.types.u8), span),\n+                            local: patch.new_temp(tcx.mk_mut_ptr(ty), span),\n                             projection: List::empty(),\n                         };\n \n@@ -169,25 +178,52 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             )),\n                         };\n \n-                        // FIXME(jknodt) do I need to add a storage live here for this place?\n+                        let dst_cast_ty = tcx.mk_mut_ptr(tcx.types.u8);\n+                        let dst_cast_place = Place {\n+                            local: patch.new_temp(dst_cast_ty, span),\n+                            projection: List::empty(),\n+                        };\n+\n+                        let dst_cast = Statement {\n+                            source_info,\n+                            kind: StatementKind::Assign(box (\n+                                dst_cast_place,\n+                                Rvalue::Cast(CastKind::Misc, Operand::Copy(dst), dst_cast_ty),\n+                            )),\n+                        };\n+\n                         let src = Place {\n-                            local: patch.new_temp(tcx.mk_imm_ptr(tcx.types.u8), span),\n+                            local: patch.new_temp(tcx.mk_imm_ptr(ty), span),\n                             projection: List::empty(),\n                         };\n \n                         let src_ptr = Statement {\n                             source_info,\n                             kind: StatementKind::Assign(box (\n                                 src,\n-                                Rvalue::AddressOf(Mutability::Mut, *rhs),\n+                                Rvalue::AddressOf(Mutability::Not, *rhs),\n+                            )),\n+                        };\n+\n+                        let src_cast_ty = tcx.mk_imm_ptr(tcx.types.u8);\n+                        let src_cast_place = Place {\n+                            local: patch.new_temp(src_cast_ty, span),\n+                            projection: List::empty(),\n+                        };\n+\n+                        let src_cast = Statement {\n+                            source_info,\n+                            kind: StatementKind::Assign(box (\n+                                src_cast_place,\n+                                Rvalue::Cast(CastKind::Misc, Operand::Copy(src), src_cast_ty),\n                             )),\n                         };\n \n                         let copy_bytes = Statement {\n                             source_info,\n                             kind: StatementKind::CopyNonOverlapping(box CopyNonOverlapping {\n-                                src: Operand::Copy(src),\n-                                dst: Operand::Copy(src),\n+                                src: Operand::Copy(src_cast_place),\n+                                dst: Operand::Copy(dst_cast_place),\n                                 count: Operand::Constant(\n                                     box (Constant {\n                                         span,\n@@ -211,7 +247,9 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             store_discr,\n                             store_size,\n                             dst_ptr,\n+                            dst_cast,\n                             src_ptr,\n+                            src_cast,\n                             copy_bytes,\n                             store_dead,\n                         ]);"}, {"sha": "00ec4b3e7545781a91bbf904627d9bcdcc76eeb9", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b4d203382f37917f5d5e1bc9057582529a9e90/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b4d203382f37917f5d5e1bc9057582529a9e90/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=33b4d203382f37917f5d5e1bc9057582529a9e90", "patch": "@@ -2,6 +2,8 @@\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n #![feature(let_chains)]\n+#![feature(let_else)]\n+#![feature(entry_insert)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}]}