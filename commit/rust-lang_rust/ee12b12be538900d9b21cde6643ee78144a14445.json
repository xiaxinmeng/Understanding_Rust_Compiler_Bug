{"sha": "ee12b12be538900d9b21cde6643ee78144a14445", "node_id": "C_kwDOAAsO6NoAKGVlMTJiMTJiZTUzODkwMGQ5YjIxY2RlNjY0M2VlNzgxNDRhMTQ0NDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-30T21:23:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-30T21:23:10Z"}, "message": "Auto merge of #9943 - dswij:pr-9940, r=Jarcho\n\nmanual_let_else: keep macro call on suggestion blocks\n\nCloses #9940\n\nchangelog: [`manual_let_else`]: Do not expand macro calls on suggestions", "tree": {"sha": "dd424a66a3c8324729d47a48aac5241a24555a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd424a66a3c8324729d47a48aac5241a24555a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee12b12be538900d9b21cde6643ee78144a14445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee12b12be538900d9b21cde6643ee78144a14445", "html_url": "https://github.com/rust-lang/rust/commit/ee12b12be538900d9b21cde6643ee78144a14445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee12b12be538900d9b21cde6643ee78144a14445/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdb06d406181e15a943dab926273013fdefd516", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdb06d406181e15a943dab926273013fdefd516", "html_url": "https://github.com/rust-lang/rust/commit/1cdb06d406181e15a943dab926273013fdefd516"}, {"sha": "c502dee41ec38e6e0096abaa50a48e792e4c9d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/c502dee41ec38e6e0096abaa50a48e792e4c9d40", "html_url": "https://github.com/rust-lang/rust/commit/c502dee41ec38e6e0096abaa50a48e792e4c9d40"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "874d36ca9f4e378704019c8ae971c046c68d898c", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee12b12be538900d9b21cde6643ee78144a14445/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee12b12be538900d9b21cde6643ee78144a14445/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=ee12b12be538900d9b21cde6643ee78144a14445", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::IfLetOrMatch;\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::peel_blocks;\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::{for_each_expr, Descend};\n use if_chain::if_chain;\n@@ -141,20 +141,18 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n             // * unused binding collision detection with existing ones\n             // * putting patterns with at the top level | inside ()\n             // for this to be machine applicable.\n-            let app = Applicability::HasPlaceholders;\n+            let mut app = Applicability::HasPlaceholders;\n+            let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n+            let (sn_expr, _) = snippet_with_context(cx, expr.span, span.ctxt(), \"\", &mut app);\n+            let (sn_else, _) = snippet_with_context(cx, else_body.span, span.ctxt(), \"\", &mut app);\n \n-            if let Some(sn_pat) = snippet_opt(cx, pat.span) &&\n-                let Some(sn_expr) = snippet_opt(cx, expr.span) &&\n-                let Some(sn_else) = snippet_opt(cx, else_body.span)\n-            {\n-                let else_bl = if matches!(else_body.kind, ExprKind::Block(..)) {\n-                    sn_else\n-                } else {\n-                    format!(\"{{ {sn_else} }}\")\n-                };\n-                let sugg = format!(\"let {sn_pat} = {sn_expr} else {else_bl};\");\n-                diag.span_suggestion(span, \"consider writing\", sugg, app);\n-            }\n+            let else_bl = if matches!(else_body.kind, ExprKind::Block(..)) {\n+                sn_else.into_owned()\n+            } else {\n+                format!(\"{{ {sn_else} }}\")\n+            };\n+            let sugg = format!(\"let {sn_pat} = {sn_expr} else {else_bl};\");\n+            diag.span_suggestion(span, \"consider writing\", sugg, app);\n         },\n     );\n }"}, {"sha": "48a162c13602ca800b3fcfd8f2392b01181b94fb", "filename": "tests/ui/manual_let_else.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee12b12be538900d9b21cde6643ee78144a14445/tests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee12b12be538900d9b21cde6643ee78144a14445/tests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.rs?ref=ee12b12be538900d9b21cde6643ee78144a14445", "patch": "@@ -234,4 +234,18 @@ fn not_fire() {\n     // If a type annotation is present, don't lint as\n     // expressing the type might be too hard\n     let v: () = if let Some(v_some) = g() { v_some } else { panic!() };\n+\n+    // Issue 9940\n+    // Suggestion should not expand macros\n+    macro_rules! macro_call {\n+        () => {\n+            return ()\n+        };\n+    }\n+\n+    let ff = Some(1);\n+    let _ = match ff {\n+        Some(value) => value,\n+        _ => macro_call!(),\n+    };\n }"}, {"sha": "52aac6bc673d195500f6f3ddf84fccacdd9aa65b", "filename": "tests/ui/manual_let_else.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee12b12be538900d9b21cde6643ee78144a14445/tests%2Fui%2Fmanual_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee12b12be538900d9b21cde6643ee78144a14445/tests%2Fui%2Fmanual_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.stderr?ref=ee12b12be538900d9b21cde6643ee78144a14445", "patch": "@@ -259,5 +259,14 @@ LL |     create_binding_if_some!(w, g());\n    |\n    = note: this error originates in the macro `create_binding_if_some` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 17 previous errors\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:247:5\n+   |\n+LL | /     let _ = match ff {\n+LL | |         Some(value) => value,\n+LL | |         _ => macro_call!(),\n+LL | |     };\n+   | |______^ help: consider writing: `let Some(value) = ff else { macro_call!() };`\n+\n+error: aborting due to 18 previous errors\n "}]}