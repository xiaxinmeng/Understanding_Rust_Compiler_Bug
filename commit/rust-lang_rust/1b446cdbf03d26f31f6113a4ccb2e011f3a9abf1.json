{"sha": "1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNDQ2Y2RiZjAzZDI2ZjMxZjYxMTNhNGNjYjJlMDExZjNhOWFiZjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-23T11:07:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-23T11:15:50Z"}, "message": "replace miri_start_panic intrinsic by 'extern fn'", "tree": {"sha": "3c75314247bf55308b87e067b3f061c8c00c1518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c75314247bf55308b87e067b3f061c8c00c1518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "html_url": "https://github.com/rust-lang/rust/commit/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bbfa02b1b15974d5772b520aa027bf79f8c248e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbfa02b1b15974d5772b520aa027bf79f8c248e", "html_url": "https://github.com/rust-lang/rust/commit/2bbfa02b1b15974d5772b520aa027bf79f8c248e"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "71780361d298e87c54d8ed20e86cded29a1ca5ee", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "patch": "@@ -1947,14 +1947,6 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n-    /// Internal hook used by Miri to implement unwinding.\n-    /// ICEs when encountered during non-Miri codegen.\n-    ///\n-    /// The `payload` ptr here will be exactly the one `do_catch` gets passed by `try`.\n-    ///\n-    /// Perma-unstable: do not use.\n-    pub fn miri_start_panic(payload: *mut u8) -> !;\n-\n     /// Internal placeholder for injecting code coverage counters when the \"instrument-coverage\"\n     /// option is enabled. The placeholder is replaced with `llvm.instrprof.increment` during code\n     /// generation."}, {"sha": "d941b73b5fac10d4d870cf04d9329a7bc6f54d52", "filename": "src/libpanic_unwind/miri.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibpanic_unwind%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibpanic_unwind%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fmiri.rs?ref=1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "patch": "@@ -6,11 +6,16 @@ use core::any::Any;\n // Must be pointer-sized.\n type Payload = Box<Box<dyn Any + Send>>;\n \n+extern \"Rust\" {\n+    /// Miri-provided extern function to begin unwinding.\n+    fn miri_start_panic(payload: *mut u8) -> !;\n+}\n+\n pub unsafe fn panic(payload: Box<dyn Any + Send>) -> u32 {\n     // The payload we pass to `miri_start_panic` will be exactly the argument we get\n     // in `cleanup` below. So we just box it up once, to get something pointer-sized.\n     let payload_box: Payload = Box::new(payload);\n-    core::intrinsics::miri_start_panic(Box::into_raw(payload_box) as *mut u8)\n+    miri_start_panic(Box::into_raw(payload_box) as *mut u8)\n }\n \n pub unsafe fn cleanup(payload_box: *mut u8) -> Box<dyn Any + Send> {"}, {"sha": "f9e1094ff7304862d51db844cbb850a0e96a169e", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "patch": "@@ -606,11 +606,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        // For normal codegen, this Miri-specific intrinsic should never occur.\n-        if intrinsic == Some(sym::miri_start_panic) {\n-            bug!(\"`miri_start_panic` should never end up in compiled code\");\n-        }\n-\n         if self.codegen_panic_intrinsic(\n             &helper,\n             &mut bx,"}, {"sha": "dadf040304d4683b81d22cad0295ae3650dc12f6", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "patch": "@@ -677,7 +677,6 @@ symbols! {\n         minnumf32,\n         minnumf64,\n         mips_target_feature,\n-        miri_start_panic,\n         mmx_target_feature,\n         module,\n         module_path,"}, {"sha": "dc2172650e574d298b1196f0eecdf2999f64f4fb", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=1b446cdbf03d26f31f6113a4ccb2e011f3a9abf1", "patch": "@@ -379,12 +379,6 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n \n             sym::nontemporal_store => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),\n \n-            sym::miri_start_panic => {\n-                // FIXME - the relevant types aren't lang items,\n-                // so it's not trivial to check this\n-                return;\n-            }\n-\n             sym::count_code_region => {\n                 (0, vec![tcx.types.u64, tcx.types.u32, tcx.types.u32, tcx.types.u32], tcx.mk_unit())\n             }"}]}