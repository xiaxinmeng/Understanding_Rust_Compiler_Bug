{"sha": "da6fbb18951547da08c2e353838e6b1d47d9b3be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNmZiYjE4OTUxNTQ3ZGEwOGMyZTM1MzgzOGU2YjFkNDdkOWIzYmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-06T21:11:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-11T10:04:49Z"}, "message": "add basic lint testing for misuse of mem::zeroed and mem::uninitialized", "tree": {"sha": "89f01635f686ed4009a7ed2769ec59520d311cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f01635f686ed4009a7ed2769ec59520d311cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da6fbb18951547da08c2e353838e6b1d47d9b3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da6fbb18951547da08c2e353838e6b1d47d9b3be", "html_url": "https://github.com/rust-lang/rust/commit/da6fbb18951547da08c2e353838e6b1d47d9b3be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da6fbb18951547da08c2e353838e6b1d47d9b3be/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f70adcb18e5dc8df0672898a8404fd05a9c32cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f70adcb18e5dc8df0672898a8404fd05a9c32cb", "html_url": "https://github.com/rust-lang/rust/commit/6f70adcb18e5dc8df0672898a8404fd05a9c32cb"}], "stats": {"total": 137, "additions": 136, "deletions": 1}, "files": [{"sha": "b4155646c891f531477729ad2ae1e5ff805068fa", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=da6fbb18951547da08c2e353838e6b1d47d9b3be", "patch": "@@ -1862,3 +1862,62 @@ impl EarlyLintPass for IncompleteFeatures {\n             });\n     }\n }\n+\n+declare_lint! {\n+    pub INVALID_VALUE,\n+    Warn,\n+    \"an invalid value is being created (such as a NULL reference)\"\n+}\n+\n+declare_lint_pass!(InvalidValue => [INVALID_VALUE]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &hir::Expr) {\n+\n+        const ZEROED_PATH: &[Symbol] = &[sym::core, sym::mem, sym::zeroed];\n+        const UININIT_PATH: &[Symbol] = &[sym::core, sym::mem, sym::uninitialized];\n+\n+        /// Return `false` only if we are sure this type does *not*\n+        /// allow zero initialization.\n+        fn ty_maybe_allows_zero_init(ty: Ty<'_>) -> bool {\n+            use rustc::ty::TyKind::*;\n+            match ty.sty {\n+                // Primitive types that don't like 0 as a value.\n+                Ref(..) | FnPtr(..) | Never => false,\n+                // Conservative fallback.\n+                _ => true,\n+            }\n+        }\n+\n+        if let hir::ExprKind::Call(ref path_expr, ref _args) = expr.node {\n+            if let hir::ExprKind::Path(ref qpath) = path_expr.node {\n+                if let Some(def_id) = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n+                    if cx.match_def_path(def_id, &ZEROED_PATH) ||\n+                        cx.match_def_path(def_id, &UININIT_PATH)\n+                    {\n+                        // This conjures an instance of a type out of nothing,\n+                        // using zeroed or uninitialized memory.\n+                        // We are extremely conservative with what we warn about.\n+                        let conjured_ty = cx.tables.expr_ty(expr);\n+\n+                        if !ty_maybe_allows_zero_init(conjured_ty) {\n+                            cx.span_lint(\n+                                INVALID_VALUE,\n+                                expr.span,\n+                                &format!(\n+                                    \"the type `{}` does not permit {}\",\n+                                    conjured_ty,\n+                                    if cx.match_def_path(def_id, &ZEROED_PATH) {\n+                                        \"zero-initialization\"\n+                                    } else {\n+                                        \"being left uninitialized\"\n+                                    }\n+                                ),\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "3a540fdf4b91f80c292478e22f03ccfa80cfba6f", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=da6fbb18951547da08c2e353838e6b1d47d9b3be", "patch": "@@ -177,6 +177,7 @@ macro_rules! late_lint_mod_passes {\n             UnreachablePub: UnreachablePub,\n \n             ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n+            InvalidValue: InvalidValue,\n         ]);\n     )\n }"}, {"sha": "2d9556233d15fb85a557462bbb2ea13a7312e73a", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=da6fbb18951547da08c2e353838e6b1d47d9b3be", "patch": "@@ -412,6 +412,7 @@ symbols! {\n         match_beginning_vert,\n         match_default_bindings,\n         may_dangle,\n+        mem,\n         member_constraints,\n         message,\n         meta,\n@@ -695,6 +696,7 @@ symbols! {\n         underscore_imports,\n         underscore_lifetimes,\n         uniform_paths,\n+        uninitialized,\n         universal_impl_trait,\n         unmarked_api,\n         unreachable_code,\n@@ -726,6 +728,7 @@ symbols! {\n         windows,\n         windows_subsystem,\n         Yield,\n+        zeroed,\n     }\n }\n "}, {"sha": "40b17651e47b2e1541825b343730d39adfc7a228", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=da6fbb18951547da08c2e353838e6b1d47d9b3be", "patch": "@@ -0,0 +1,28 @@\n+// ignore-tidy-linelength\n+// This test checks that calling `mem::{uninitialized,zeroed}` with certain types results\n+// in a lint.\n+\n+#![feature(never_type)]\n+#![allow(deprecated)]\n+#![deny(invalid_value)]\n+\n+use std::mem;\n+\n+fn main() {\n+    unsafe {\n+        let _val: ! = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n+        let _val: ! = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n+        let _val: &'static i32 = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n+        let _val: &'static i32 = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n+        let _val: fn() = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n+        let _val: fn() = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n+        // Some types that should work just fine.\n+        let _val: Option<&'static i32> = mem::zeroed();\n+        let _val: Option<fn()> = mem::zeroed();\n+        let _val: bool = mem::zeroed();\n+        let _val: i32 = mem::zeroed();\n+    }\n+}"}, {"sha": "c6a47638d38e5554b9989a885baf5936552e2d63", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=da6fbb18951547da08c2e353838e6b1d47d9b3be", "patch": "@@ -0,0 +1,44 @@\n+error: the type `!` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:15:23\n+   |\n+LL |         let _val: ! = mem::zeroed();\n+   |                       ^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/uninitialized-zeroed.rs:7:9\n+   |\n+LL | #![deny(invalid_value)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: the type `!` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:16:23\n+   |\n+LL |         let _val: ! = mem::uninitialized();\n+   |                       ^^^^^^^^^^^^^^^^^^^^\n+\n+error: the type `&'static i32` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:21:34\n+   |\n+LL |         let _val: &'static i32 = mem::zeroed();\n+   |                                  ^^^^^^^^^^^^^\n+\n+error: the type `&'static i32` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:22:34\n+   |\n+LL |         let _val: &'static i32 = mem::uninitialized();\n+   |                                  ^^^^^^^^^^^^^^^^^^^^\n+\n+error: the type `fn()` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:24:26\n+   |\n+LL |         let _val: fn() = mem::zeroed();\n+   |                          ^^^^^^^^^^^^^\n+\n+error: the type `fn()` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:25:26\n+   |\n+LL |         let _val: fn() = mem::uninitialized();\n+   |                          ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "b0d6629561803077c5324c0c2d9d61e553657557", "filename": "src/test/ui/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6fbb18951547da08c2e353838e6b1d47d9b3be/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs?ref=da6fbb18951547da08c2e353838e6b1d47d9b3be", "patch": "@@ -4,7 +4,7 @@\n // in a runtime panic.\n \n #![feature(never_type)]\n-#![allow(deprecated)]\n+#![allow(deprecated, invalid_value)]\n \n use std::{mem, panic};\n "}]}