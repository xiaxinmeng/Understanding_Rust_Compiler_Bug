{"sha": "6eb153aca23fd0396c0e943f0ee2985e6e55ee9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYjE1M2FjYTIzZmQwMzk2YzBlOTQzZjBlZTI5ODVlNmU1NWVlOWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-21T15:53:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-21T15:53:19Z"}, "message": "Merge branch 'master' into partially-invalidate-mut", "tree": {"sha": "b1aabfad6ec8cada555f2336905eb567beb18005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1aabfad6ec8cada555f2336905eb567beb18005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb153aca23fd0396c0e943f0ee2985e6e55ee9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb9X9vCRBK7hj4Ov3rIwAAdHIIADDUem0jCRHraxMJK89Qp8Iw\nSKBuW9XUWsj7NX6JC7q1IbowNGtND1JJyNSaC4aC1vBQhjGTvav34vhdN/wgoqO5\nP/kHf626FTTQIpTCNZriebIp6h3saNmUWUPQZH/FxOwQcvrWByDSKSU+qUBGmjba\nT0WHQn5skDAAX4SUX1FGzlCtvAcNEFpngljCM/bxAm2p9BgEFrGwfeqJvWhQjGC4\nd1NoLcZwR5M6d72W7589c+4jN8AazM7wcckr2AK+sbRE+EX1V0T2ozHP9KWefJJJ\nqf6MS6ntwQo7ZXWLzYAWvT8MlbDzDYJN8cICiumu/JM+G1G/+vykjlcP+3pjPWg=\n=P3ux\n-----END PGP SIGNATURE-----\n", "payload": "tree b1aabfad6ec8cada555f2336905eb567beb18005\nparent 04794c4c2ac20e66043c235b45c19f6759f48dc9\nparent 17d085198cf5791773194a8b1c78e5c116ef71dd\nauthor Ralf Jung <post@ralfj.de> 1542815599 +0100\ncommitter GitHub <noreply@github.com> 1542815599 +0100\n\nMerge branch 'master' into partially-invalidate-mut"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb153aca23fd0396c0e943f0ee2985e6e55ee9d", "html_url": "https://github.com/rust-lang/rust/commit/6eb153aca23fd0396c0e943f0ee2985e6e55ee9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb153aca23fd0396c0e943f0ee2985e6e55ee9d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04794c4c2ac20e66043c235b45c19f6759f48dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/04794c4c2ac20e66043c235b45c19f6759f48dc9", "html_url": "https://github.com/rust-lang/rust/commit/04794c4c2ac20e66043c235b45c19f6759f48dc9"}, {"sha": "17d085198cf5791773194a8b1c78e5c116ef71dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d085198cf5791773194a8b1c78e5c116ef71dd", "html_url": "https://github.com/rust-lang/rust/commit/17d085198cf5791773194a8b1c78e5c116ef71dd"}], "stats": {"total": 40, "additions": 7, "deletions": 33}, "files": [{"sha": "f26ef40ea9f8342623f43e498d8387388b86f203", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6eb153aca23fd0396c0e943f0ee2985e6e55ee9d/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb153aca23fd0396c0e943f0ee2985e6e55ee9d/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=6eb153aca23fd0396c0e943f0ee2985e6e55ee9d", "patch": "@@ -151,6 +151,10 @@ impl<'tcx> Stack {\n     /// Returns the index of the item we matched, `None` if it was the frozen one.\n     /// `kind` indicates which kind of reference is being dereferenced.\n     fn deref(&self, bor: Borrow, kind: RefKind) -> Result<Option<usize>, String> {\n+        // Exclude unique ref with frozen tag.\n+        if let (RefKind::Unique, Borrow::Shr(Some(_))) = (kind, bor) {\n+            return Err(format!(\"Encountered mutable reference with frozen tag ({:?})\", bor));\n+        }\n         // Checks related to freezing\n         match bor {\n             Borrow::Shr(Some(bor_t)) if kind == RefKind::Frozen => {\n@@ -490,36 +494,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             if let Some(mutability) = mutability { format!(\"{:?}\", mutability) } else { format!(\"raw\") },\n             place.ptr, place.layout.ty);\n         let ptr = place.ptr.to_ptr()?;\n-        // In principle we should not have to do anything here.  However, with transmutes involved,\n-        // it can happen that the tag of `ptr` does not actually match `mutability`, and we\n-        // should adjust for that.\n-        // Notably, the compiler can introduce such transmutes by optimizing away `&[mut]*`.\n-        // That can transmute a raw ptr to a (shared/mut) ref, and a mut ref to a shared one.\n-        match (mutability, ptr.tag) {\n-            (None, _) => {\n-                // No further validation on raw accesses.\n-                return Ok(());\n-            }\n-            (Some(MutMutable), Borrow::Uniq(_)) |\n-            (Some(MutImmutable), Borrow::Shr(_)) => {\n-                // Expected combinations.  Nothing to do.\n-            }\n-            (Some(MutMutable), Borrow::Shr(None)) => {\n-                // Raw transmuted to mut ref.  This is something real unsafe code does.\n-                // We cannot reborrow here because we do not want to mutate state on a deref.\n-            }\n-            (Some(MutImmutable), Borrow::Uniq(_)) => {\n-                // A mut got transmuted to shr.  Can happen even from compiler transformations:\n-                // `&*x` gets optimized to `x` even when `x` is a `&mut`.\n-            }\n-            (Some(MutMutable), Borrow::Shr(Some(_))) => {\n-                // This is just invalid: A shr got transmuted to a mut.\n-                // If we ever allow this, we have to consider what we do when a turn a\n-                // `Raw`-tagged `&mut` into a raw pointer pointing to a frozen location.\n-                // We probably do not want to allow that, but we have to allow\n-                // turning a `Raw`-tagged `&` into a raw ptr to a frozen location.\n-                return err!(MachineError(format!(\"Encountered mutable reference with frozen tag {:?}\", ptr.tag)))\n-            }\n+        if mutability.is_none() {\n+            // No further checks on raw derefs -- only the access itself will be checked.\n+            return Ok(());\n         }\n \n         // Get the allocation"}, {"sha": "c092cbfe5098594ea79af8b5da8019842b270410", "filename": "tests/compile-fail-fullmir/stacked_borrows/static_memory_modification.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6eb153aca23fd0396c0e943f0ee2985e6e55ee9d/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb153aca23fd0396c0e943f0ee2985e6e55ee9d/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fstatic_memory_modification.rs?ref=6eb153aca23fd0396c0e943f0ee2985e6e55ee9d", "patch": "@@ -1,6 +1,3 @@\n-// FIXME still considering whether we are okay with this not being an error\n-// ignore-test\n-\n static X: usize = 5;\n \n #[allow(mutable_transmutes)]"}]}