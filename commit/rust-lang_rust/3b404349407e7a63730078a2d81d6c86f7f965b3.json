{"sha": "3b404349407e7a63730078a2d81d6c86f7f965b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNDA0MzQ5NDA3ZTdhNjM3MzAwNzhhMmQ4MWQ2Yzg2ZjdmOTY1YjM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:31Z"}, "message": "Rollup merge of #55530 - ljedrz:speed_up_String_from_utf16, r=SimonSapin\n\nSpeed up String::from_utf16\n\nCollecting into a `Result` is idiomatic, but not necessarily fast due to rustc not being able to preallocate for the resulting collection. This is fine in case of an error, but IMO we should optimize for the common case, i.e. a successful conversion.\n\nThis changes the behavior of `String::from_utf16` from collecting into a `Result` to pushing to a preallocated `String` in a loop.\n\nAccording to [my simple benchmark](https://gist.github.com/ljedrz/953a3fb74058806519bd4d640d6f65ae) this change makes `String::from_utf16` around **twice** as fast.", "tree": {"sha": "fa6ae39cb023c21718c05f3e86fd8012b348f3de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6ae39cb023c21718c05f3e86fd8012b348f3de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b404349407e7a63730078a2d81d6c86f7f965b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7USvCRBK7hj4Ov3rIwAAdHIIAJCY/4Eem7ttF/TlPmmUOBwy\nqTOp1s2VSAoZ2A7t7sljkDMwakp7odwU9Rd9Plvchyr4KfRbe3CIVTQv1s4A04xb\nb0gZRNVXjUKcDqqbIu9Pts4bywQHa2xJrHLJBOm6/5YgMmfH0AW2NLlU8MWiWGN1\nAljJ49IvhYPLcw/86pgTT0V4kTC/L8a0KitZEVWN9nFkdgox1ZdouBLNVGZ+ThuS\ne8SJtxVOmVAJ14LLAdg0TOAkDL7pcYE5sbbfiVjqcCjxP/k/xqoOAdd1+sxVokTO\n0PjXkS06omt4IwrebxKwfMSx0uO5X8SSiWk//yqSrjqi76QYP8g+X2Q4MJ13PbA=\n=SLn6\n-----END PGP SIGNATURE-----\n", "payload": "tree fa6ae39cb023c21718c05f3e86fd8012b348f3de\nparent d7c833b7ef4e2bec35e8753dcde398828f387aaf\nparent 19aa10132cc727c8561730ab096b21d14507c81d\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276271 +0100\ncommitter GitHub <noreply@github.com> 1542276271 +0100\n\nRollup merge of #55530 - ljedrz:speed_up_String_from_utf16, r=SimonSapin\n\nSpeed up String::from_utf16\n\nCollecting into a `Result` is idiomatic, but not necessarily fast due to rustc not being able to preallocate for the resulting collection. This is fine in case of an error, but IMO we should optimize for the common case, i.e. a successful conversion.\n\nThis changes the behavior of `String::from_utf16` from collecting into a `Result` to pushing to a preallocated `String` in a loop.\n\nAccording to [my simple benchmark](https://gist.github.com/ljedrz/953a3fb74058806519bd4d640d6f65ae) this change makes `String::from_utf16` around **twice** as fast.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b404349407e7a63730078a2d81d6c86f7f965b3", "html_url": "https://github.com/rust-lang/rust/commit/3b404349407e7a63730078a2d81d6c86f7f965b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b404349407e7a63730078a2d81d6c86f7f965b3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7c833b7ef4e2bec35e8753dcde398828f387aaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c833b7ef4e2bec35e8753dcde398828f387aaf", "html_url": "https://github.com/rust-lang/rust/commit/d7c833b7ef4e2bec35e8753dcde398828f387aaf"}, {"sha": "19aa10132cc727c8561730ab096b21d14507c81d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19aa10132cc727c8561730ab096b21d14507c81d", "html_url": "https://github.com/rust-lang/rust/commit/19aa10132cc727c8561730ab096b21d14507c81d"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "8d009101ce7da2d3865754d6184e87bf8400d976", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b404349407e7a63730078a2d81d6c86f7f965b3/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b404349407e7a63730078a2d81d6c86f7f965b3/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=3b404349407e7a63730078a2d81d6c86f7f965b3", "patch": "@@ -618,7 +618,15 @@ impl String {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf16(v: &[u16]) -> Result<String, FromUtf16Error> {\n-        decode_utf16(v.iter().cloned()).collect::<Result<_, _>>().map_err(|_| FromUtf16Error(()))\n+        let mut ret = String::with_capacity(v.len());\n+        for c in decode_utf16(v.iter().cloned()) {\n+            if let Ok(c) = c {\n+                ret.push(c);\n+            } else {\n+                return Err(FromUtf16Error(()));\n+            }\n+        }\n+        Ok(ret)\n     }\n \n     /// Decode a UTF-16 encoded slice `v` into a `String`, replacing"}]}