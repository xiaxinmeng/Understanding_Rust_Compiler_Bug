{"sha": "4154e8acf045a13bf57bc9b3c487f838f17230c8", "node_id": "C_kwDOAAsO6NoAKDQxNTRlOGFjZjA0NWExM2JmNTdiYzliM2M0ODdmODM4ZjE3MjMwYzg", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-11-05T16:43:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-11-05T16:43:42Z"}, "message": "apply suggestions from code review", "tree": {"sha": "01ffca7963a337e060b9b5cf8e9bf3d5c14416b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01ffca7963a337e060b9b5cf8e9bf3d5c14416b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4154e8acf045a13bf57bc9b3c487f838f17230c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4154e8acf045a13bf57bc9b3c487f838f17230c8", "html_url": "https://github.com/rust-lang/rust/commit/4154e8acf045a13bf57bc9b3c487f838f17230c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4154e8acf045a13bf57bc9b3c487f838f17230c8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8113d04e5ea4ae5c053388b503eb7013006e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8113d04e5ea4ae5c053388b503eb7013006e26", "html_url": "https://github.com/rust-lang/rust/commit/fc8113d04e5ea4ae5c053388b503eb7013006e26"}], "stats": {"total": 124, "additions": 63, "deletions": 61}, "files": [{"sha": "774d8078e52ca31171213b8070848902040aae07", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -87,9 +87,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n /// corresponding place being captured and a String which contains the captured value's\n /// name (i.e: a.b.c)\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-enum CapturesInfo {\n+enum UpvarMigrationInfo {\n     /// We previously captured all of `x`, but now we capture some sub-path.\n-    CapturingLess { source_expr: Option<hir::HirId>, var_name: String },\n+    CapturingPrecise { source_expr: Option<hir::HirId>, var_name: String },\n     CapturingNothing {\n         // where the variable appears in the closure (but is not captured)\n         use_span: Span,\n@@ -123,7 +123,7 @@ impl MigrationWarningReason {\n \n /// Intermediate format to store information needed to generate a note in the migration lint.\n struct MigrationLintNote {\n-    captures_info: CapturesInfo,\n+    captures_info: UpvarMigrationInfo,\n \n     /// reasons why migration is needed for this capture\n     reason: MigrationWarningReason,\n@@ -751,14 +751,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // for migration being needed\n                         for lint_note in diagnostics_info.iter() {\n                             match &lint_note.captures_info {\n-                                CapturesInfo::CapturingLess { source_expr: Some(capture_expr_id), var_name: captured_name } => {\n+                                UpvarMigrationInfo::CapturingPrecise { source_expr: Some(capture_expr_id), var_name: captured_name } => {\n                                     let cause_span = self.tcx.hir().span(*capture_expr_id);\n                                     diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, this closure captures all of `{}`, but in Rust 2021, it will only capture `{}`\",\n                                         self.tcx.hir().name(*var_hir_id),\n                                         captured_name,\n                                     ));\n                                 }\n-                                CapturesInfo::CapturingNothing { use_span } => {\n+                                UpvarMigrationInfo::CapturingNothing { use_span } => {\n                                     diagnostics_builder.span_label(*use_span, format!(\"in Rust 2018, this causes the closure to capture `{}`, but in Rust 2021, it has no effect\",\n                                         self.tcx.hir().name(*var_hir_id),\n                                     ));\n@@ -773,13 +773,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 let drop_location_span = drop_location_span(self.tcx, &closure_hir_id);\n \n                                 match &lint_note.captures_info {\n-                                    CapturesInfo::CapturingLess { var_name: captured_name, .. } => {\n+                                    UpvarMigrationInfo::CapturingPrecise { var_name: captured_name, .. } => {\n                                         diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` is dropped here, but in Rust 2021, only `{}` will be dropped here as part of the closure\",\n                                             self.tcx.hir().name(*var_hir_id),\n                                             captured_name,\n                                         ));\n                                     }\n-                                    CapturesInfo::CapturingNothing { use_span: _ } => {\n+                                    UpvarMigrationInfo::CapturingNothing { use_span: _ } => {\n                                         diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{v}` is dropped here along with the closure, but in Rust 2021 `{v}` is not part of the closure\",\n                                             v = self.tcx.hir().name(*var_hir_id),\n                                         ));\n@@ -791,16 +791,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             for &missing_trait in &lint_note.reason.auto_traits {\n                                 // not capturing something anymore cannot cause a trait to fail to be implemented:\n                                 match &lint_note.captures_info {\n-                                    CapturesInfo::CapturingLess { var_name: captured_name, .. } => {\n-                                        diagnostics_builder.span_label(closure_head_span, format!(\"in Rust 2018, this closure implements {missing_trait} as `{x}` implements {missing_trait}, but in Rust 2021, this closure will no longer implement {missing_trait} as `{p}` does not implement {missing_trait}\",\n-                                            missing_trait = missing_trait,\n-                                            x = self.tcx.hir().name(*var_hir_id),\n-                                            p = captured_name,\n-                                        ));\n+                                    UpvarMigrationInfo::CapturingPrecise { var_name: captured_name, .. } => {\n+                                        let var_name = self.tcx.hir().name(*var_hir_id);\n+                                        diagnostics_builder.span_label(closure_head_span, format!(\"\\\n+                                        in Rust 2018, this closure implements {missing_trait} \\\n+                                        as `{var_name}` implements {missing_trait}, but in Rust 2021, \\\n+                                        this closure will no longer implement {missing_trait} \\\n+                                        because `{var_name}` is not fully captured \\\n+                                        and `{captured_name}` does not implement {missing_trait}\"));\n                                     }\n \n                                     // Cannot happen: if we don't capture a variable, we impl strictly more traits\n-                                    CapturesInfo::CapturingNothing { use_span } => span_bug!(*use_span, \"missing trait from not capturing something\"),\n+                                    UpvarMigrationInfo::CapturingNothing { use_span } => span_bug!(*use_span, \"missing trait from not capturing something\"),\n                                 }\n                             }\n                         }\n@@ -919,7 +921,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n         var_hir_id: hir::HirId,\n         closure_clause: hir::CaptureBy,\n-    ) -> Option<FxHashMap<CapturesInfo, FxHashSet<&'static str>>> {\n+    ) -> Option<FxHashMap<UpvarMigrationInfo, FxHashSet<&'static str>>> {\n         let auto_traits_def_id = vec![\n             self.tcx.lang_items().clone_trait(),\n             self.tcx.lang_items().sync_trait(),\n@@ -1008,7 +1010,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             if !capture_problems.is_empty() {\n                 problematic_captures.insert(\n-                    CapturesInfo::CapturingLess {\n+                    UpvarMigrationInfo::CapturingPrecise {\n                         source_expr: capture.info.path_expr_id,\n                         var_name: capture.to_string(self.tcx),\n                     },\n@@ -1042,7 +1044,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n         closure_clause: hir::CaptureBy,\n         var_hir_id: hir::HirId,\n-    ) -> Option<FxHashSet<CapturesInfo>> {\n+    ) -> Option<FxHashSet<UpvarMigrationInfo>> {\n         let ty = self.infcx.resolve_vars_if_possible(self.node_ty(var_hir_id));\n \n         if !ty.has_significant_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local())) {\n@@ -1068,7 +1070,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut diagnostics_info = FxHashSet::default();\n                     let upvars = self.tcx.upvars_mentioned(closure_def_id).expect(\"must be an upvar\");\n                     let upvar = upvars[&var_hir_id];\n-                    diagnostics_info.insert(CapturesInfo::CapturingNothing { use_span: upvar.span });\n+                    diagnostics_info.insert(UpvarMigrationInfo::CapturingNothing { use_span: upvar.span });\n                     return Some(diagnostics_info);\n                 }\n                 hir::CaptureBy::Ref => {}\n@@ -1086,7 +1088,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Only care about captures that are moved into the closure\n                 ty::UpvarCapture::ByValue(..) => {\n                     projections_list.push(captured_place.place.projections.as_slice());\n-                    diagnostics_info.insert(CapturesInfo::CapturingLess {\n+                    diagnostics_info.insert(UpvarMigrationInfo::CapturingPrecise {\n                         source_expr: captured_place.info.path_expr_id,\n                         var_name: captured_place.to_string(self.tcx),\n                     });"}, {"sha": "26703fbf81193603e2a471b5a5d055b20bcc93db", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -21,7 +21,7 @@ fn test_send_trait() {\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n         //~^ ERROR: changes to closure capture\n-        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n@@ -41,8 +41,8 @@ fn test_sync_trait() {\n     let fptr = SyncPointer(f);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n         //~^ ERROR: changes to closure capture\n-        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr.0.0` does not implement `Sync`\n-        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Sync`\n+        //~| NOTE: in Rust 2018, this closure implements `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n@@ -67,7 +67,7 @@ fn test_clone_trait() {\n     let c = || {\n         let _ = &f;\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;"}, {"sha": "932db51d437130699e7256ef92cf104542b34940", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -21,7 +21,7 @@ fn test_send_trait() {\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || unsafe {\n         //~^ ERROR: changes to closure capture\n-        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n@@ -41,8 +41,8 @@ fn test_sync_trait() {\n     let fptr = SyncPointer(f);\n     thread::spawn(move || unsafe {\n         //~^ ERROR: changes to closure capture\n-        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr.0.0` does not implement `Sync`\n-        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Sync`\n+        //~| NOTE: in Rust 2018, this closure implements `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n@@ -66,7 +66,7 @@ fn test_clone_trait() {\n     let f = U(S(Foo(0)), T(0));\n     let c = || {\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;"}, {"sha": "ee4907bb755cc115005945b6af0d7fa14e964da4", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -2,7 +2,7 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n   --> $DIR/auto_traits.rs:22:19\n    |\n LL |     thread::spawn(move || unsafe {\n-   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n+   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` because `fptr` is not fully captured and `fptr.0` does not implement `Send`\n ...\n LL |         *fptr.0 = 20;\n    |         ------- in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n@@ -29,8 +29,8 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n LL |     thread::spawn(move || unsafe {\n    |                   ^^^^^^^^^^^^^^\n    |                   |\n-   |                   in Rust 2018, this closure implements `Sync` as `fptr` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr.0.0` does not implement `Sync`\n-   |                   in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0.0` does not implement `Send`\n+   |                   in Rust 2018, this closure implements `Sync` as `fptr` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` because `fptr` is not fully captured and `fptr.0.0` does not implement `Sync`\n+   |                   in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` because `fptr` is not fully captured and `fptr.0.0` does not implement `Send`\n ...\n LL |         *fptr.0.0 = 20;\n    |         --------- in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0.0`\n@@ -50,7 +50,7 @@ error: changes to closure capture in Rust 2021 will affect drop order and which\n   --> $DIR/auto_traits.rs:67:13\n    |\n LL |     let c = || {\n-   |             ^^ in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n+   |             ^^ in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` because `f` is not fully captured and `f.1` does not implement `Clone`\n ...\n LL |         let f_1 = f.1;\n    |                   --- in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.1`"}, {"sha": "7df0dd76b44564b768e8989ece9e037c962d9136", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -20,8 +20,8 @@ where\n     let result = panic::catch_unwind(move || {\n         let _ = &f;\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n-        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe` as `f` implements `UnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe` as `f.0` does not implement `UnwindSafe`\n-        //~| NOTE: in Rust 2018, this closure implements `RefUnwindSafe` as `f` implements `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `RefUnwindSafe` as `f.0` does not implement `RefUnwindSafe`\n+        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe`\n+        //~| NOTE: in Rust 2018, this closure implements `RefUnwindSafe`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()"}, {"sha": "d02fac7c66952606048a19827fcd9c37050b3c23", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -19,8 +19,8 @@ where\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n-        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe` as `f` implements `UnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe` as `f.0` does not implement `UnwindSafe`\n-        //~| NOTE: in Rust 2018, this closure implements `RefUnwindSafe` as `f` implements `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `RefUnwindSafe` as `f.0` does not implement `RefUnwindSafe`\n+        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe`\n+        //~| NOTE: in Rust 2018, this closure implements `RefUnwindSafe`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()"}, {"sha": "74f85b6ebaac50e5f3de999ef10a17f90740d93d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -4,8 +4,8 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n LL |     let result = panic::catch_unwind(move || {\n    |                                      ^^^^^^^\n    |                                      |\n-   |                                      in Rust 2018, this closure implements `UnwindSafe` as `f` implements `UnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe` as `f.0` does not implement `UnwindSafe`\n-   |                                      in Rust 2018, this closure implements `RefUnwindSafe` as `f` implements `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `RefUnwindSafe` as `f.0` does not implement `RefUnwindSafe`\n+   |                                      in Rust 2018, this closure implements `UnwindSafe` as `f` implements `UnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe` because `f` is not fully captured and `f.0` does not implement `UnwindSafe`\n+   |                                      in Rust 2018, this closure implements `RefUnwindSafe` as `f` implements `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `RefUnwindSafe` because `f` is not fully captured and `f.0` does not implement `RefUnwindSafe`\n ...\n LL |         f.0()\n    |         --- in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.0`"}, {"sha": "2b86b0ddade2367196e542f83ac91b65cfc2b2b7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.fixed", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -37,7 +37,7 @@ fn test_multi_issues() {\n     let c = || {\n         let _ = (&f1, &f2);\n         //~^ ERROR: changes to closure capture in Rust 2021\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1`, `f2` to be fully captured\n         let _f_1 = f1.0;\n@@ -57,7 +57,7 @@ fn test_capturing_all_disjoint_fields_individually() {\n     let c = || {\n         let _ = &f1;\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_1 = f1.0;\n@@ -83,8 +83,8 @@ fn test_capturing_several_disjoint_fields_individually_1() {\n     let c = || {\n         let _ = &f1;\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.2` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_0 = f1.0;\n@@ -103,7 +103,7 @@ fn test_capturing_several_disjoint_fields_individually_2() {\n     let c = || {\n         let _ = &f1;\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_0 = f1.0;\n@@ -136,9 +136,9 @@ fn test_multi_traits_issues() {\n     let fptr2 = SendPointer(&mut f2 as *mut i32);\n     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n         //~^ ERROR: changes to closure capture in Rust 2021\n-        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr1.0.0` does not implement `Sync`\n-        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr1.0.0` does not implement `Send`\n-        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n         *fptr1.0.0 = 20;"}, {"sha": "3cac4abfad7c2a5def2e614517d6d30684481719", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -36,7 +36,7 @@ fn test_multi_issues() {\n     let f2 = U(S(Foo::from(\"bar\")), T(0));\n     let c = || {\n         //~^ ERROR: changes to closure capture in Rust 2021\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1`, `f2` to be fully captured\n         let _f_1 = f1.0;\n@@ -55,7 +55,7 @@ fn test_capturing_all_disjoint_fields_individually() {\n     let f1 = U(S(Foo::from(\"foo\")), T(0));\n     let c = || {\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_1 = f1.0;\n@@ -80,8 +80,8 @@ fn test_capturing_several_disjoint_fields_individually_1() {\n     let f1 = U1(S(Foo::from(\"foo\")), T(0), S(Foo::from(\"bar\")));\n     let c = || {\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.2` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_0 = f1.0;\n@@ -99,7 +99,7 @@ fn test_capturing_several_disjoint_fields_individually_2() {\n     let f1 = U1(S(Foo::from(\"foo\")), T(0), S(Foo::from(\"bar\")));\n     let c = || {\n         //~^ ERROR: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n-        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+        //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n         let _f_0 = f1.0;\n@@ -132,9 +132,9 @@ fn test_multi_traits_issues() {\n     let fptr2 = SendPointer(&mut f2 as *mut i32);\n     thread::spawn(move || unsafe {\n         //~^ ERROR: changes to closure capture in Rust 2021\n-        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr1.0.0` does not implement `Sync`\n-        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr1.0.0` does not implement `Send`\n-        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr1`, `fptr2` to be fully captured\n         *fptr1.0.0 = 20;"}, {"sha": "0008f1b2c07ed5811544fd27f9767c75c6bcfec0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4154e8acf045a13bf57bc9b3c487f838f17230c8/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=4154e8acf045a13bf57bc9b3c487f838f17230c8", "patch": "@@ -2,7 +2,7 @@ error: changes to closure capture in Rust 2021 will affect drop order and which\n   --> $DIR/multi_diagnostics.rs:37:13\n    |\n LL |     let c = || {\n-   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` because `f1` is not fully captured and `f1.0` does not implement `Clone`\n ...\n LL |         let _f_1 = f1.0;\n    |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n@@ -29,7 +29,7 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n   --> $DIR/multi_diagnostics.rs:56:13\n    |\n LL |     let c = || {\n-   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` because `f1` is not fully captured and `f1.0` does not implement `Clone`\n ...\n LL |         let _f_1 = f1.0;\n    |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n@@ -47,8 +47,8 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n LL |     let c = || {\n    |             ^^\n    |             |\n-   |             in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n-   |             in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.2` does not implement `Clone`\n+   |             in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` because `f1` is not fully captured and `f1.0` does not implement `Clone`\n+   |             in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` because `f1` is not fully captured and `f1.2` does not implement `Clone`\n ...\n LL |         let _f_0 = f1.0;\n    |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n@@ -67,7 +67,7 @@ error: changes to closure capture in Rust 2021 will affect drop order and which\n   --> $DIR/multi_diagnostics.rs:100:13\n    |\n LL |     let c = || {\n-   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n+   |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` because `f1` is not fully captured and `f1.0` does not implement `Clone`\n ...\n LL |         let _f_0 = f1.0;\n    |                    ---- in Rust 2018, this closure captures all of `f1`, but in Rust 2021, it will only capture `f1.0`\n@@ -94,9 +94,9 @@ error: changes to closure capture in Rust 2021 will affect which traits the clos\n LL |     thread::spawn(move || unsafe {\n    |                   ^^^^^^^^^^^^^^\n    |                   |\n-   |                   in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr1.0.0` does not implement `Sync`\n-   |                   in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr1.0.0` does not implement `Send`\n-   |                   in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n+   |                   in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` because `fptr1` is not fully captured and `fptr1.0.0` does not implement `Sync`\n+   |                   in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` because `fptr1` is not fully captured and `fptr1.0.0` does not implement `Send`\n+   |                   in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` because `fptr2` is not fully captured and `fptr2.0` does not implement `Send`\n ...\n LL |         *fptr1.0.0 = 20;\n    |         ---------- in Rust 2018, this closure captures all of `fptr1`, but in Rust 2021, it will only capture `fptr1.0.0`"}]}