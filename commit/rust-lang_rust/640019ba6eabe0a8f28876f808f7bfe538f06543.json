{"sha": "640019ba6eabe0a8f28876f808f7bfe538f06543", "node_id": "C_kwDOAAsO6NoAKDY0MDAxOWJhNmVhYmUwYThmMjg4NzZmODA4ZjdiZmU1MzhmMDY1NDM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-11T05:42:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-11T05:42:14Z"}, "message": "Rollup merge of #97812 - TaKO8Ki:suggest-to-swap-struct-and-trait, r=estebank\n\nSuggest to swap a struct and a trait in trait impls\n\ncloses #89590", "tree": {"sha": "f5fd82c10ba76ff5b1ee7d96714f9d7699c899a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5fd82c10ba76ff5b1ee7d96714f9d7699c899a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640019ba6eabe0a8f28876f808f7bfe538f06543", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJipCs2CRBK7hj4Ov3rIwAAt+IIAKwKZAiR+dncMHGvtm8odY5g\nFLTLbHtl8fssOQGlsxs5GnR7Vb1N9c4vMH8pHDUyMDvXE5DT9auZOeec8BLqV78t\n7rNAFTvJzgp52BscaZOblheHqKsbtrc180a7Q7ub2YgJiAX7rDGA9lZUNMn8w9Uc\n/vg5S006B/Xoa9PDDu9NYVOtdGH4pIACkWd3vAdN4tbrkPy3UG4FV6Ke5dIjMoqv\ngdf0pEyuebLBm9+02BQNSQ7knFFPzuvsrYG6glYmomgDltgtUqRlGl06qXD/30F4\nNL51F9aWj4Xh9iEj4LhwNRkhxqK4atnKmkipHc8WxujSKs2wCTwULHsmjpXlmUs=\n=GV7Y\n-----END PGP SIGNATURE-----\n", "payload": "tree f5fd82c10ba76ff5b1ee7d96714f9d7699c899a9\nparent 59c2ff532d588d5268256578982e5c2cf7d15dad\nparent 5639e52ae1aa91a5d2fef12509410d2997886d49\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654926134 +0200\ncommitter GitHub <noreply@github.com> 1654926134 +0200\n\nRollup merge of #97812 - TaKO8Ki:suggest-to-swap-struct-and-trait, r=estebank\n\nSuggest to swap a struct and a trait in trait impls\n\ncloses #89590\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640019ba6eabe0a8f28876f808f7bfe538f06543", "html_url": "https://github.com/rust-lang/rust/commit/640019ba6eabe0a8f28876f808f7bfe538f06543", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640019ba6eabe0a8f28876f808f7bfe538f06543/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c2ff532d588d5268256578982e5c2cf7d15dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c2ff532d588d5268256578982e5c2cf7d15dad", "html_url": "https://github.com/rust-lang/rust/commit/59c2ff532d588d5268256578982e5c2cf7d15dad"}, {"sha": "5639e52ae1aa91a5d2fef12509410d2997886d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/5639e52ae1aa91a5d2fef12509410d2997886d49", "html_url": "https://github.com/rust-lang/rust/commit/5639e52ae1aa91a5d2fef12509410d2997886d49"}], "stats": {"total": 187, "additions": 185, "deletions": 2}, "files": [{"sha": "23c1767cb90516f525ad7f61ef3c236d42b1b676", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/640019ba6eabe0a8f28876f808f7bfe538f06543/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640019ba6eabe0a8f28876f808f7bfe538f06543/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=640019ba6eabe0a8f28876f808f7bfe538f06543", "patch": "@@ -513,6 +513,9 @@ struct DiagnosticMetadata<'ast> {\n \n     /// The current impl items (used to suggest).\n     current_impl_items: Option<&'ast [P<AssocItem>]>,\n+\n+    /// When processing impl trait\n+    currently_processing_impl_trait: Option<(TraitRef, Ty)>,\n }\n \n struct LateResolutionVisitor<'a, 'b, 'ast> {\n@@ -2087,18 +2090,22 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn with_optional_trait_ref<T>(\n         &mut self,\n         opt_trait_ref: Option<&TraitRef>,\n+        self_type: &'ast Ty,\n         f: impl FnOnce(&mut Self, Option<DefId>) -> T,\n     ) -> T {\n         let mut new_val = None;\n         let mut new_id = None;\n         if let Some(trait_ref) = opt_trait_ref {\n             let path: Vec<_> = Segment::from_path(&trait_ref.path);\n+            self.diagnostic_metadata.currently_processing_impl_trait =\n+                Some((trait_ref.clone(), self_type.clone()));\n             let res = self.smart_resolve_path_fragment(\n                 None,\n                 &path,\n                 PathSource::Trait(AliasPossibility::No),\n                 Finalize::new(trait_ref.ref_id, trait_ref.path.span),\n             );\n+            self.diagnostic_metadata.currently_processing_impl_trait = None;\n             if let Some(def_id) = res.base_res().opt_def_id() {\n                 new_id = Some(def_id);\n                 new_val = Some((self.r.expect_module(def_id), trait_ref.clone()));\n@@ -2139,7 +2146,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             this.with_self_rib(Res::SelfTy { trait_: None, alias_to: None }, |this| {\n                 this.with_lifetime_rib(LifetimeRibKind::AnonymousCreateParameter(item_id), |this| {\n                     // Resolve the trait reference, if necessary.\n-                    this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n+                    this.with_optional_trait_ref(opt_trait_reference.as_ref(), self_type, |this, trait_id| {\n                         let item_def_id = this.r.local_def_id(item_id);\n \n                         // Register the trait definitions from here."}, {"sha": "68ddc37c3a82bcb2e3e92f1103cfe2c8faa4d8b3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/640019ba6eabe0a8f28876f808f7bfe538f06543/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640019ba6eabe0a8f28876f808f7bfe538f06543/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=640019ba6eabe0a8f28876f808f7bfe538f06543", "patch": "@@ -146,6 +146,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let is_enum_variant = &|res| matches!(res, Res::Def(DefKind::Variant, _));\n \n+        debug!(?res, ?source);\n+\n         // Make the base error.\n         struct BaseError<'a> {\n             msg: String,\n@@ -250,6 +252,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let mut err =\n             self.r.session.struct_span_err_with_code(base_error.span, &base_error.msg, code);\n \n+        self.suggest_swapping_misplaced_self_ty_and_trait(&mut err, source, res, base_error.span);\n+\n         if let Some(sugg) = base_error.suggestion {\n             err.span_suggestion_verbose(sugg.0, sugg.1, sugg.2, Applicability::MaybeIncorrect);\n         }\n@@ -692,6 +696,35 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n+    fn suggest_swapping_misplaced_self_ty_and_trait(\n+        &mut self,\n+        err: &mut Diagnostic,\n+        source: PathSource<'_>,\n+        res: Option<Res>,\n+        span: Span,\n+    ) {\n+        if let Some((trait_ref, self_ty)) =\n+            self.diagnostic_metadata.currently_processing_impl_trait.clone()\n+            && let TyKind::Path(_, self_ty_path) = &self_ty.kind\n+            && let PathResult::Module(ModuleOrUniformRoot::Module(module)) =\n+                self.resolve_path(&Segment::from_path(self_ty_path), Some(TypeNS), None)\n+            && let ModuleKind::Def(DefKind::Trait, ..) = module.kind\n+            && trait_ref.path.span == span\n+            && let PathSource::Trait(_) = source\n+            && let Some(Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, _)) = res\n+            && let Ok(self_ty_str) =\n+                self.r.session.source_map().span_to_snippet(self_ty.span)\n+            && let Ok(trait_ref_str) =\n+                self.r.session.source_map().span_to_snippet(trait_ref.path.span)\n+        {\n+                err.multipart_suggestion(\n+                    \"`impl` items mention the trait being implemented first and the type it is being implemented for second\",\n+                    vec![(trait_ref.path.span, self_ty_str), (self_ty.span, trait_ref_str)],\n+                    Applicability::MaybeIncorrect,\n+                );\n+        }\n+    }\n+\n     fn get_single_associated_item(\n         &mut self,\n         path: &[Segment],"}, {"sha": "5d3d56b1e66998d4f3e1b9557a5be051ed561751", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640019ba6eabe0a8f28876f808f7bfe538f06543/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640019ba6eabe0a8f28876f808f7bfe538f06543/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=640019ba6eabe0a8f28876f808f7bfe538f06543", "patch": "@@ -333,7 +333,7 @@ impl<'a> FileNameDisplay<'a> {\n     pub fn to_string_lossy(&self) -> Cow<'a, str> {\n         match self.inner {\n             FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),\n-            _ => Cow::from(format!(\"{}\", self)),\n+            _ => Cow::from(self.to_string()),\n         }\n     }\n }"}, {"sha": "03c7ed347bddf3cdedbed26ccf26b8c63dc41013", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/640019ba6eabe0a8f28876f808f7bfe538f06543/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640019ba6eabe0a8f28876f808f7bfe538f06543/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs?ref=640019ba6eabe0a8f28876f808f7bfe538f06543", "patch": "@@ -0,0 +1,22 @@\n+// edition:2021\n+\n+pub trait Trait<'a, T> {}\n+\n+pub struct Struct<T>;\n+pub enum Enum<T> {}\n+\n+pub union Union<T> {\n+    f1: usize,\n+}\n+\n+impl<'a, T> Struct<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found struct `Struct`\n+//~| ERROR trait objects must include the `dyn` keyword\n+\n+impl<'a, T> Enum<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found enum `Enum`\n+\n+impl<'a, T> Union<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found union `Union`\n+\n+fn main() {}"}, {"sha": "dd6951e047410b76457652f85a04fb904a7281cb", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/640019ba6eabe0a8f28876f808f7bfe538f06543/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/640019ba6eabe0a8f28876f808f7bfe538f06543/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr?ref=640019ba6eabe0a8f28876f808f7bfe538f06543", "patch": "@@ -0,0 +1,49 @@\n+error[E0404]: expected trait, found struct `Struct`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:12:13\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Struct<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~~\n+\n+error[E0404]: expected trait, found enum `Enum`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:16:13\n+   |\n+LL | impl<'a, T> Enum<T> for Trait<'a, T> {}\n+   |             ^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Enum<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~\n+\n+error[E0404]: expected trait, found union `Union`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:19:13\n+   |\n+LL | impl<'a, T> Union<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Union<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:12:27\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |                           ^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n+LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n+   | \n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0404, E0782.\n+For more information about an error, try `rustc --explain E0404`."}, {"sha": "947bc2c79654b8cc1588c91c070664f86f205d2d", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/640019ba6eabe0a8f28876f808f7bfe538f06543/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640019ba6eabe0a8f28876f808f7bfe538f06543/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs?ref=640019ba6eabe0a8f28876f808f7bfe538f06543", "patch": "@@ -0,0 +1,21 @@\n+pub trait Trait<'a, T> {}\n+\n+pub struct Struct<T>;\n+pub enum Enum<T> {}\n+\n+pub union Union<T> {\n+    f1: usize,\n+}\n+\n+impl<'a, T> Struct<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found struct `Struct`\n+//~| WARNING trait objects without an explicit `dyn` are deprecated\n+//~| WARNING this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+\n+impl<'a, T> Enum<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found enum `Enum`\n+\n+impl<'a, T> Union<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found union `Union`\n+\n+fn main() {}"}, {"sha": "86ab8474c4299a95b4bee7b5d5b6c9e1d266346f", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/640019ba6eabe0a8f28876f808f7bfe538f06543/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/640019ba6eabe0a8f28876f808f7bfe538f06543/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr?ref=640019ba6eabe0a8f28876f808f7bfe538f06543", "patch": "@@ -0,0 +1,51 @@\n+error[E0404]: expected trait, found struct `Struct`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:10:13\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Struct<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~~\n+\n+error[E0404]: expected trait, found enum `Enum`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:15:13\n+   |\n+LL | impl<'a, T> Enum<T> for Trait<'a, T> {}\n+   |             ^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Enum<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~\n+\n+error[E0404]: expected trait, found union `Union`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:18:13\n+   |\n+LL | impl<'a, T> Union<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Union<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:10:27\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |                           ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n+LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n+   | \n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0404`."}]}