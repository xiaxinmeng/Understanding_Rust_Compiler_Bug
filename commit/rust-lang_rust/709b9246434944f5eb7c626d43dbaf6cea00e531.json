{"sha": "709b9246434944f5eb7c626d43dbaf6cea00e531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOWI5MjQ2NDM0OTQ0ZjVlYjdjNjI2ZDQzZGJhZjZjZWEwMGU1MzE=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-17T22:41:20Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-08-05T14:16:27Z"}, "message": "Ensure `type_param_predicates` fn only returns predicates for type param with given def-ID.", "tree": {"sha": "be1351105a09e10b0a5b897c2aa2ce8df2561448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be1351105a09e10b0a5b897c2aa2ce8df2561448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709b9246434944f5eb7c626d43dbaf6cea00e531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709b9246434944f5eb7c626d43dbaf6cea00e531", "html_url": "https://github.com/rust-lang/rust/commit/709b9246434944f5eb7c626d43dbaf6cea00e531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709b9246434944f5eb7c626d43dbaf6cea00e531/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9d36b3ffa801543de65c336f02378dbe0bafa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9d36b3ffa801543de65c336f02378dbe0bafa4", "html_url": "https://github.com/rust-lang/rust/commit/3d9d36b3ffa801543de65c336f02378dbe0bafa4"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "1eda57608e75b8460a3d9f65603b73de2c45b25a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709b9246434944f5eb7c626d43dbaf6cea00e531/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709b9246434944f5eb7c626d43dbaf6cea00e531/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=709b9246434944f5eb7c626d43dbaf6cea00e531", "patch": "@@ -1649,7 +1649,7 @@ pub struct ParamEnv<'tcx> {\n     /// `Obligation`s that the caller must satisfy. This is basically\n     /// the set of bounds on the in-scope type parameters, translated\n     /// into `Obligation`s, and elaborated and normalized.\n-    pub caller_bounds: &'tcx List<(ty::Predicate<'tcx>, Span)>,\n+    pub caller_bounds: &'tcx List<ty::Predicate<'tcx>>,\n \n     /// Typically, this is `Reveal::UserFacing`, but during codegen we\n     /// want `Reveal::All` -- note that this is always paired with an"}, {"sha": "881f66afc91dfcbb56b964c3e1156d01b317f1d6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709b9246434944f5eb7c626d43dbaf6cea00e531/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709b9246434944f5eb7c626d43dbaf6cea00e531/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=709b9246434944f5eb7c626d43dbaf6cea00e531", "patch": "@@ -806,7 +806,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     binding,\n                     bounds,\n                     speculative,\n-                    &mut dup_bindings\n+                    &mut dup_bindings,\n                 );\n             // Okay to ignore `Err` because of `ErrorReported` (see above).\n         }"}, {"sha": "357dcd878f51521bdb9822b2533c1589d4c1c37e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/709b9246434944f5eb7c626d43dbaf6cea00e531/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709b9246434944f5eb7c626d43dbaf6cea00e531/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=709b9246434944f5eb7c626d43dbaf6cea00e531", "patch": "@@ -322,9 +322,16 @@ fn type_param_predicates(\n     let icx = ItemCtxt::new(tcx, item_def_id);\n     let mut result = (*result).clone();\n     result.predicates.extend(extend.into_iter());\n-    result.predicates\n-          .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty,\n-                  OnlySelfBounds(true)));\n+    result.predicates.extend(\n+        icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty, OnlySelfBounds(true))\n+            .into_iter()\n+            .filter(|(predicate, _)| {\n+                match predicate {\n+                    ty::Predicate::Trait(ref data) => data.skip_binder().self_ty().is_param(index),\n+                    _ => false,\n+                }\n+            })\n+    );\n     tcx.arena.alloc(result)\n }\n \n@@ -2300,7 +2307,6 @@ fn predicates_from_bound<'tcx>(\n                 tr,\n                 param_ty,\n                 &mut bounds,\n-                false,\n             );\n             bounds.predicates(astconv.tcx(), param_ty)\n         }"}]}