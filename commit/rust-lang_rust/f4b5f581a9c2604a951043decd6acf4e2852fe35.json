{"sha": "f4b5f581a9c2604a951043decd6acf4e2852fe35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YjVmNTgxYTljMjYwNGE5NTEwNDNkZWNkNmFjZjRlMjg1MmZlMzU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:20:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:20:55Z"}, "message": "Rollup merge of #73320 - estebank:type-param-sugg-more, r=davidtwco\n\nMake new type param suggestion more targetted\n\nDo not suggest new type param when encountering a missing type in an ADT\nfield with generic parameters.\n\nFix #72640.", "tree": {"sha": "31500badbc530a6f259386e10e4dd9c57aa709ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31500badbc530a6f259386e10e4dd9c57aa709ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4b5f581a9c2604a951043decd6acf4e2852fe35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+jHCRBK7hj4Ov3rIwAAdHIIAHUgGNUomFZHIVj8p/yCvrjH\ntqzXsYD/2idft/AXYGYURK9BofRVFiM9beMUQxxcbYPXWJNWl6w4wNuS8tPnNbwm\nueIH49tvdZzire3ygfFI+Hz5f8nSi5p8tmMaa/81NjrNqam/MWG6XDd6hjHsP0n9\nrhDZUIPZooNTlfZjtvWtMMcs/4/lFwB23ZkWGnqfk7NxQr4SJcsZYpKpqeZ/2ZIS\ncYCfZxbsC3s7z7pxEKuiWRsSSCzp77q3lAABBGW7SvlNh15edV3wyqbjt3Jkx2LB\nY4VjRKZwP/ki9GJaSF25P/M9Fwvsx/p+JRBDFZ7A0Ny+mJ1uHGPKwyKoL2Lui2I=\n=5NxJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 31500badbc530a6f259386e10e4dd9c57aa709ff\nparent ed92b6a63304dfbc0b8a29aa4cf89f9ce814b27b\nparent 8d1a3801faa199acb2a86580247afd672bd838f9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518855 -0700\ncommitter GitHub <noreply@github.com> 1592518855 -0700\n\nRollup merge of #73320 - estebank:type-param-sugg-more, r=davidtwco\n\nMake new type param suggestion more targetted\n\nDo not suggest new type param when encountering a missing type in an ADT\nfield with generic parameters.\n\nFix #72640.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b5f581a9c2604a951043decd6acf4e2852fe35", "html_url": "https://github.com/rust-lang/rust/commit/f4b5f581a9c2604a951043decd6acf4e2852fe35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4b5f581a9c2604a951043decd6acf4e2852fe35/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed92b6a63304dfbc0b8a29aa4cf89f9ce814b27b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed92b6a63304dfbc0b8a29aa4cf89f9ce814b27b", "html_url": "https://github.com/rust-lang/rust/commit/ed92b6a63304dfbc0b8a29aa4cf89f9ce814b27b"}, {"sha": "8d1a3801faa199acb2a86580247afd672bd838f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1a3801faa199acb2a86580247afd672bd838f9", "html_url": "https://github.com/rust-lang/rust/commit/8d1a3801faa199acb2a86580247afd672bd838f9"}], "stats": {"total": 95, "additions": 80, "deletions": 15}, "files": [{"sha": "8432e34a5271ceef7ddc9eed6de8b256f671f5cb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f4b5f581a9c2604a951043decd6acf4e2852fe35", "patch": "@@ -485,6 +485,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             module_path.push(Segment {\n                                 ident: Ident { name: kw::PathRoot, span: source.ident.span },\n                                 id: Some(self.r.next_node_id()),\n+                                has_generic_args: false,\n                             });\n                             source.ident.name = crate_name;\n                         }"}, {"sha": "05ef0aa0bb689f5e6f2c85c3778baa3d1fa90fca", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=f4b5f581a9c2604a951043decd6acf4e2852fe35", "patch": "@@ -920,20 +920,47 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         &self,\n         path: &[Segment],\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n-        let ident = match path {\n-            [segment] => segment.ident,\n+        let (ident, span) = match path {\n+            [segment] if !segment.has_generic_args => {\n+                (segment.ident.to_string(), segment.ident.span)\n+            }\n             _ => return None,\n         };\n-        match (\n-            self.diagnostic_metadata.current_item,\n-            self.diagnostic_metadata.currently_processing_generics,\n-        ) {\n-            (Some(Item { kind: ItemKind::Fn(..), ident, .. }), true) if ident.name == sym::main => {\n+        let mut iter = ident.chars().map(|c| c.is_uppercase());\n+        let single_uppercase_char =\n+            matches!(iter.next(), Some(true)) && matches!(iter.next(), None);\n+        if !self.diagnostic_metadata.currently_processing_generics && !single_uppercase_char {\n+            return None;\n+        }\n+        match (self.diagnostic_metadata.current_item, single_uppercase_char) {\n+            (Some(Item { kind: ItemKind::Fn(..), ident, .. }), _) if ident.name == sym::main => {\n                 // Ignore `fn main()` as we don't want to suggest `fn main<T>()`\n             }\n-            (Some(Item { kind, .. }), true) => {\n+            (\n+                Some(Item {\n+                    kind:\n+                        kind @ ItemKind::Fn(..)\n+                        | kind @ ItemKind::Enum(..)\n+                        | kind @ ItemKind::Struct(..)\n+                        | kind @ ItemKind::Union(..),\n+                    ..\n+                }),\n+                true,\n+            )\n+            | (Some(Item { kind, .. }), false) => {\n                 // Likely missing type parameter.\n                 if let Some(generics) = kind.generics() {\n+                    if span.overlaps(generics.span) {\n+                        // Avoid the following:\n+                        // error[E0405]: cannot find trait `A` in this scope\n+                        //  --> $DIR/typo-suggestion-named-underscore.rs:CC:LL\n+                        //   |\n+                        // L | fn foo<T: A>(x: T) {} // Shouldn't suggest underscore\n+                        //   |           ^- help: you might be missing a type parameter: `, A`\n+                        //   |           |\n+                        //   |           not found in this scope\n+                        return None;\n+                    }\n                     let msg = \"you might be missing a type parameter\";\n                     let (span, sugg) = if let [.., param] = &generics.params[..] {\n                         let span = if let [.., bound] = &param.bounds[..] {"}, {"sha": "cca9eabe7bcf898d82945497a49d3c26cecb9b49", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f4b5f581a9c2604a951043decd6acf4e2852fe35", "patch": "@@ -225,13 +225,15 @@ enum VisResolutionError<'a> {\n     ModuleOnly(Span),\n }\n \n-// A minimal representation of a path segment. We use this in resolve because\n-// we synthesize 'path segments' which don't have the rest of an AST or HIR\n-// `PathSegment`.\n+/// A minimal representation of a path segment. We use this in resolve because we synthesize 'path\n+/// segments' which don't have the rest of an AST or HIR `PathSegment`.\n #[derive(Clone, Copy, Debug)]\n pub struct Segment {\n     ident: Ident,\n     id: Option<NodeId>,\n+    /// Signals whether this `PathSegment` has generic arguments. Used to avoid providing\n+    /// nonsensical suggestions.\n+    has_generic_args: bool,\n }\n \n impl Segment {\n@@ -240,7 +242,7 @@ impl Segment {\n     }\n \n     fn from_ident(ident: Ident) -> Segment {\n-        Segment { ident, id: None }\n+        Segment { ident, id: None, has_generic_args: false }\n     }\n \n     fn names_to_string(segments: &[Segment]) -> String {\n@@ -250,7 +252,7 @@ impl Segment {\n \n impl<'a> From<&'a ast::PathSegment> for Segment {\n     fn from(seg: &'a ast::PathSegment) -> Segment {\n-        Segment { ident: seg.ident, id: Some(seg.id) }\n+        Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }\n     }\n }\n \n@@ -2017,7 +2019,7 @@ impl<'a> Resolver<'a> {\n             path, opt_ns, record_used, path_span, crate_lint,\n         );\n \n-        for (i, &Segment { ident, id }) in path.iter().enumerate() {\n+        for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {\n             debug!(\"resolve_path ident {} {:?} {:?}\", i, ident, id);\n             let record_segment_res = |this: &mut Self, res| {\n                 if record_used {"}, {"sha": "53a45cf4e4f4db2763635182c1f60372cdfa9bab", "filename": "src/test/ui/associated-types/associated-types-eq-1.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr?ref=f4b5f581a9c2604a951043decd6acf4e2852fe35", "patch": "@@ -4,7 +4,16 @@ error[E0412]: cannot find type `A` in this scope\n LL | fn foo2<I: Foo>(x: I) {\n    |         - similarly named type parameter `I` defined here\n LL |     let _: A = x.boo();\n-   |            ^ help: a type parameter with a similar name exists: `I`\n+   |            ^\n+   |\n+help: a type parameter with a similar name exists\n+   |\n+LL |     let _: I = x.boo();\n+   |            ^\n+help: you might be missing a type parameter\n+   |\n+LL | fn foo2<I: Foo, A>(x: I) {\n+   |               ^^^\n \n error: aborting due to previous error\n "}, {"sha": "4cbfe58d357038ac3e4d6157ea6d60c1cb41df2b", "filename": "src/test/ui/suggestions/type-not-found-in-adt-field.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs?ref=f4b5f581a9c2604a951043decd6acf4e2852fe35", "patch": "@@ -0,0 +1,9 @@\n+struct Struct {\n+    m: Vec<Someunknownname<String, ()>>, //~ ERROR cannot find type `Someunknownname` in this scope\n+    //~^ NOTE not found in this scope\n+}\n+struct OtherStruct { //~ HELP you might be missing a type parameter\n+    m: K, //~ ERROR cannot find type `K` in this scope\n+    //~^ NOTE not found in this scope\n+}\n+fn main() {}"}, {"sha": "e990fb5ba12107c67dbe22e3abdc2259a99cddb5", "filename": "src/test/ui/suggestions/type-not-found-in-adt-field.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4b5f581a9c2604a951043decd6acf4e2852fe35/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr?ref=f4b5f581a9c2604a951043decd6acf4e2852fe35", "patch": "@@ -0,0 +1,17 @@\n+error[E0412]: cannot find type `Someunknownname` in this scope\n+  --> $DIR/type-not-found-in-adt-field.rs:2:12\n+   |\n+LL |     m: Vec<Someunknownname<String, ()>>,\n+   |            ^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `K` in this scope\n+  --> $DIR/type-not-found-in-adt-field.rs:6:8\n+   |\n+LL | struct OtherStruct {\n+   |                   - help: you might be missing a type parameter: `<K>`\n+LL |     m: K,\n+   |        ^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}]}