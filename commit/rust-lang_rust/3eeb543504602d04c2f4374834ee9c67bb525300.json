{"sha": "3eeb543504602d04c2f4374834ee9c67bb525300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZWI1NDM1MDQ2MDJkMDRjMmY0Mzc0ODM0ZWU5YzY3YmI1MjUzMDA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-05-26T12:54:50Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-06-21T10:00:49Z"}, "message": "Handle fs errors through errors::Handler instead of eprintln and panic", "tree": {"sha": "0063723a33d7a56a99c05f9d9da371a5a2bbef65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0063723a33d7a56a99c05f9d9da371a5a2bbef65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eeb543504602d04c2f4374834ee9c67bb525300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeb543504602d04c2f4374834ee9c67bb525300", "html_url": "https://github.com/rust-lang/rust/commit/3eeb543504602d04c2f4374834ee9c67bb525300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eeb543504602d04c2f4374834ee9c67bb525300/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6392bc9fcdf3b3984f92e7930329f940a53cf335", "url": "https://api.github.com/repos/rust-lang/rust/commits/6392bc9fcdf3b3984f92e7930329f940a53cf335", "html_url": "https://github.com/rust-lang/rust/commit/6392bc9fcdf3b3984f92e7930329f940a53cf335"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "40b8cf507e97c5b95ec70ca58237359ead967f37", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3eeb543504602d04c2f4374834ee9c67bb525300/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3eeb543504602d04c2f4374834ee9c67bb525300/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3eeb543504602d04c2f4374834ee9c67bb525300", "patch": "@@ -3254,6 +3254,7 @@ dependencies = [\n  \"minifier 0.0.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "96399b8e36f0664788fd489ca19c6dfdc4ce9546", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3eeb543504602d04c2f4374834ee9c67bb525300/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeb543504602d04c2f4374834ee9c67bb525300/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=3eeb543504602d04c2f4374834ee9c67bb525300", "patch": "@@ -9,9 +9,14 @@\n //! needs to read-after-write from a file, then it would be added to this\n //! abstraction.\n \n+use errors;\n+\n+use std::cell::RefCell;\n use std::fs;\n use std::io;\n use std::path::Path;\n+use std::sync::Arc;\n+use std::sync::mpsc::{channel, Receiver, Sender};\n \n macro_rules! try_err {\n     ($e:expr, $file:expr) => {{\n@@ -26,14 +31,45 @@ pub trait PathError {\n     fn new<P: AsRef<Path>>(e: io::Error, path: P) -> Self;\n }\n \n+pub struct ErrorStorage {\n+    sender: Sender<Option<String>>,\n+    receiver: Receiver<Option<String>>,\n+}\n+\n+impl ErrorStorage {\n+    pub fn new() -> ErrorStorage {\n+        let (sender, receiver) = channel();\n+        ErrorStorage {\n+            sender,\n+            receiver,\n+        }\n+    }\n+\n+    /// Prints all stored errors. Returns the number of printed errors.\n+    pub fn write_errors(&self, diag: &errors::Handler) -> usize {\n+        let mut printed = 0;\n+        drop(self.sender);\n+\n+        for msg in self.receiver.iter() {\n+            if let Some(ref error) = msg {\n+                diag.struct_err(&error).emit();\n+                printed += 1;\n+            }\n+        }\n+        printed\n+    }\n+}\n+\n pub struct DocFS {\n     sync_only: bool,\n+    errors: Arc<ErrorStorage>,\n }\n \n impl DocFS {\n-    pub fn new() -> DocFS {\n+    pub fn new(errors: &Arc<ErrorStorage>) -> DocFS {\n         DocFS {\n             sync_only: false,\n+            errors: Arc::clone(errors),\n         }\n     }\n \n@@ -59,16 +95,19 @@ impl DocFS {\n             // be to create the file sync so errors are reported eagerly.\n             let contents = contents.as_ref().to_vec();\n             let path = path.as_ref().to_path_buf();\n-            rayon::spawn(move ||\n+            let sender = self.errors.sender.clone();\n+            rayon::spawn(move || {\n                 match fs::write(&path, &contents) {\n-                    Ok(_) => (),\n+                    Ok(_) => {\n+                        sender.send(None)\n+                            .expect(&format!(\"failed to send error on \\\"{}\\\"\", path.display()));\n+                    }\n                     Err(e) => {\n-                        // In principle these should get displayed at the top\n-                        // level, but just in case, send to stderr as well.\n-                        eprintln!(\"\\\"{}\\\": {}\", path.display(), e);\n-                        panic!(\"\\\"{}\\\": {}\", path.display(), e);\n+                        sender.send(Some(format!(\"\\\"{}\\\": {}\", path.display(), e)))\n+                            .expect(&format!(\"failed to send non-error on \\\"{}\\\"\", path.display()));\n                     }\n-                });\n+                }\n+            });\n             Ok(())\n         } else {\n             Ok(try_err!(fs::write(&path, contents), path))"}, {"sha": "fe5fb4d73d8e4b53a8c290684f5295042456bb48", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3eeb543504602d04c2f4374834ee9c67bb525300/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeb543504602d04c2f4374834ee9c67bb525300/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3eeb543504602d04c2f4374834ee9c67bb525300", "patch": "@@ -61,7 +61,7 @@ use rustc_data_structures::flock;\n \n use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, Mutability};\n use crate::config::RenderOptions;\n-use crate::docfs::{DocFS, PathError};\n+use crate::docfs::{DocFS, ErrorStorage, PathError};\n use crate::doctree;\n use crate::fold::DocFolder;\n use crate::html::escape::Escape;\n@@ -104,7 +104,12 @@ impl error::Error for Error {\n \n impl Display for Error {\n     fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n-        write!(f, \"\\\"{}\\\": {}\", self.file.display(), self.error)\n+        let file = self.file.display().to_string();\n+        if file.is_empty() {\n+            write!(f, \"{}\", self.error)\n+        } else {\n+            write!(f, \"\\\"{}\\\": {}\", self.file.display(), self.error)\n+        }\n     }\n }\n \n@@ -547,6 +552,7 @@ pub fn run(mut krate: clean::Crate,\n         },\n         _ => PathBuf::new(),\n     };\n+    let errors = Arc::new(ErrorStorage::new());\n     let mut scx = SharedContext {\n         src_root,\n         passes,\n@@ -567,7 +573,7 @@ pub fn run(mut krate: clean::Crate,\n         static_root_path,\n         generate_search_filter,\n         generate_redirect_pages,\n-        fs: DocFS::new(),\n+        fs: DocFS::new(&errors),\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -715,7 +721,15 @@ pub fn run(mut krate: clean::Crate,\n     Arc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n \n     // And finally render the whole crate's documentation\n-    cx.krate(krate)\n+    let ret = cx.krate(krate);\n+    let nb_errors = errors.write_errors(diag);\n+    if ret.is_err() {\n+        ret\n+    } else if nb_errors > 0 {\n+        Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n+    } else {\n+        Ok(())\n+    }\n }\n \n /// Builds the search index from the collected metadata"}]}