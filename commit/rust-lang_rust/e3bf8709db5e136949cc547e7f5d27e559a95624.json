{"sha": "e3bf8709db5e136949cc547e7f5d27e559a95624", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYmY4NzA5ZGI1ZTEzNjk0OWNjNTQ3ZTdmNWQyN2U1NTlhOTU2MjQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-29T17:39:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-29T17:39:33Z"}, "message": "Rollup merge of #71617 - samrat:suggest-int-into, r=ecstatic-morse\n\nSuggest `into` instead of `try_into` if possible with int types\n\nIf it is possible to convert an integer type into another using `into`, don't suggest `try_into`. This commit changes the suggested method to convert from one integer type to another for the following cases:\n\n- u{n} -> i{m} where n < m\n- u8 -> isize\n- i{n} -> isize where n <= 16\n- u{n} -> usize where n <= 16\n\nFixes #71580", "tree": {"sha": "f895d07a4a74e0e9d167e6e0fb4caf8a6f729d7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f895d07a4a74e0e9d167e6e0fb4caf8a6f729d7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3bf8709db5e136949cc547e7f5d27e559a95624", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqbvVCRBK7hj4Ov3rIwAAdHIIABWsGHi4ijFpKNi6lm4YvcXX\nInbkThl8p6HyPUlPIwaLOuT7vRWRLIRj7RPOB4Q2emcaet70u/383jRrQ7yGphme\ny5l8kV//U7COjvY9zKoO9x7BDmWphIVtbCogIag8mvz0pAjoZ2asRQp3XKhBQJIb\n8ru4BTyFeT4XSq+6+HBtZ0OpSu/cEsBTWOcfneRA77kiu1uXZn6/mWuVrjy68w4s\nlEwOMRhssT08FlWsBj48tWV3NFwPskB0lOnTmNdmM1irt857yEgzZPS3aBzHQwcG\ngbKXpLaKdXrU6riyE37iDbtaHIUubo/J60BrfPb9XPvgW3p6B0kFBWzaTpn3m2I=\n=y5dQ\n-----END PGP SIGNATURE-----\n", "payload": "tree f895d07a4a74e0e9d167e6e0fb4caf8a6f729d7d\nparent 843ffb8e8a37b4ddd134d97eb456556469d041a9\nparent a6033e33e7199646b269c0f3504591b108670fef\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588181973 +0200\ncommitter GitHub <noreply@github.com> 1588181973 +0200\n\nRollup merge of #71617 - samrat:suggest-int-into, r=ecstatic-morse\n\nSuggest `into` instead of `try_into` if possible with int types\n\nIf it is possible to convert an integer type into another using `into`, don't suggest `try_into`. This commit changes the suggested method to convert from one integer type to another for the following cases:\n\n- u{n} -> i{m} where n < m\n- u8 -> isize\n- i{n} -> isize where n <= 16\n- u{n} -> usize where n <= 16\n\nFixes #71580\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3bf8709db5e136949cc547e7f5d27e559a95624", "html_url": "https://github.com/rust-lang/rust/commit/e3bf8709db5e136949cc547e7f5d27e559a95624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3bf8709db5e136949cc547e7f5d27e559a95624/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "843ffb8e8a37b4ddd134d97eb456556469d041a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/843ffb8e8a37b4ddd134d97eb456556469d041a9", "html_url": "https://github.com/rust-lang/rust/commit/843ffb8e8a37b4ddd134d97eb456556469d041a9"}, {"sha": "a6033e33e7199646b269c0f3504591b108670fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6033e33e7199646b269c0f3504591b108670fef", "html_url": "https://github.com/rust-lang/rust/commit/a6033e33e7199646b269c0f3504591b108670fef"}], "stats": {"total": 117, "additions": 53, "deletions": 64}, "files": [{"sha": "aa36bec6e1e8813f5d543f108f0c59d5bbfeb4ca", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3bf8709db5e136949cc547e7f5d27e559a95624/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bf8709db5e136949cc547e7f5d27e559a95624/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e3bf8709db5e136949cc547e7f5d27e559a95624", "patch": "@@ -767,7 +767,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     suggest_to_change_suffix_or_into(err, is_fallible);\n                     true\n                 }\n-                (&ty::Int(_), &ty::Uint(_)) | (&ty::Uint(_), &ty::Int(_)) => {\n+                (&ty::Int(exp), &ty::Uint(found)) => {\n+                    let is_fallible = match (exp.bit_width(), found.bit_width()) {\n+                        (Some(exp), Some(found)) if found < exp => false,\n+                        (None, Some(8)) => false,\n+                        _ => true,\n+                    };\n+                    suggest_to_change_suffix_or_into(err, is_fallible);\n+                    true\n+                }\n+                (&ty::Uint(_), &ty::Int(_)) => {\n                     suggest_to_change_suffix_or_into(err, true);\n                     true\n                 }"}, {"sha": "3f900062cbb6e459ae73f41a98c61bd3565c4486", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3bf8709db5e136949cc547e7f5d27e559a95624/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3bf8709db5e136949cc547e7f5d27e559a95624/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=e3bf8709db5e136949cc547e7f5d27e559a95624", "patch": "@@ -15,27 +15,21 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:7:18\n    |\n LL |     let y: i64 = x + x;\n-   |            ---   ^^^^^ expected `i64`, found `u16`\n-   |            |\n+   |            ---   ^^^^^\n+   |            |     |\n+   |            |     expected `i64`, found `u16`\n+   |            |     help: you can convert an `u16` to `i64`: `(x + x).into()`\n    |            expected due to this\n-   |\n-help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     let y: i64 = (x + x).try_into().unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:9:18\n    |\n LL |     let z: i32 = x + x;\n-   |            ---   ^^^^^ expected `i32`, found `u16`\n-   |            |\n+   |            ---   ^^^^^\n+   |            |     |\n+   |            |     expected `i32`, found `u16`\n+   |            |     help: you can convert an `u16` to `i32`: `(x + x).into()`\n    |            expected due to this\n-   |\n-help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     let z: i32 = (x + x).try_into().unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cf0560a1077724a11a12c19b91bcd7f74e915f0b", "filename": "src/test/ui/numeric/numeric-cast.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3bf8709db5e136949cc547e7f5d27e559a95624/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e3bf8709db5e136949cc547e7f5d27e559a95624/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed?ref=e3bf8709db5e136949cc547e7f5d27e559a95624", "patch": "@@ -49,7 +49,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<isize>(x_u16.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<isize>(x_u8.try_into().unwrap());\n+    foo::<isize>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<isize>(x_isize);\n     foo::<isize>(x_i64.try_into().unwrap());\n@@ -89,11 +89,11 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i64>(x_u64.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u32.try_into().unwrap());\n+    foo::<i64>(x_u32.into());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u16.try_into().unwrap());\n+    foo::<i64>(x_u16.into());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u8.try_into().unwrap());\n+    foo::<i64>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i64>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types\n@@ -135,9 +135,9 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i32>(x_u32.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i32>(x_u16.try_into().unwrap());\n+    foo::<i32>(x_u16.into());\n     //~^ ERROR mismatched types\n-    foo::<i32>(x_u8.try_into().unwrap());\n+    foo::<i32>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i32>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types\n@@ -181,7 +181,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i16>(x_u16.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i16>(x_u8.try_into().unwrap());\n+    foo::<i16>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i16>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types"}, {"sha": "cc1aa72d21451735aa556b404623486bd5914a6b", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e3bf8709db5e136949cc547e7f5d27e559a95624/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3bf8709db5e136949cc547e7f5d27e559a95624/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=e3bf8709db5e136949cc547e7f5d27e559a95624", "patch": "@@ -141,12 +141,10 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:52:18\n    |\n LL |     foo::<isize>(x_u8);\n-   |                  ^^^^ expected `isize`, found `u8`\n-   |\n-help: you can convert an `u8` to `isize` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<isize>(x_u8.try_into().unwrap());\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^\n+   |                  |\n+   |                  expected `isize`, found `u8`\n+   |                  help: you can convert an `u8` to `isize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:55:18\n@@ -307,34 +305,28 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:92:16\n    |\n LL |     foo::<i64>(x_u32);\n-   |                ^^^^^ expected `i64`, found `u32`\n-   |\n-help: you can convert an `u32` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u32.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i64`, found `u32`\n+   |                help: you can convert an `u32` to `i64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:94:16\n    |\n LL |     foo::<i64>(x_u16);\n-   |                ^^^^^ expected `i64`, found `u16`\n-   |\n-help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u16.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i64`, found `u16`\n+   |                help: you can convert an `u16` to `i64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:96:16\n    |\n LL |     foo::<i64>(x_u8);\n-   |                ^^^^ expected `i64`, found `u8`\n-   |\n-help: you can convert an `u8` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i64`, found `u8`\n+   |                help: you can convert an `u8` to `i64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:98:16\n@@ -506,23 +498,19 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:138:16\n    |\n LL |     foo::<i32>(x_u16);\n-   |                ^^^^^ expected `i32`, found `u16`\n-   |\n-help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i32>(x_u16.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i32`, found `u16`\n+   |                help: you can convert an `u16` to `i32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:140:16\n    |\n LL |     foo::<i32>(x_u8);\n-   |                ^^^^ expected `i32`, found `u8`\n-   |\n-help: you can convert an `u8` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i32>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i32`, found `u8`\n+   |                help: you can convert an `u8` to `i32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:142:16\n@@ -709,12 +697,10 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:184:16\n    |\n LL |     foo::<i16>(x_u8);\n-   |                ^^^^ expected `i16`, found `u8`\n-   |\n-help: you can convert an `u8` to `i16` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i16>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i16`, found `u8`\n+   |                help: you can convert an `u8` to `i16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:186:16"}]}