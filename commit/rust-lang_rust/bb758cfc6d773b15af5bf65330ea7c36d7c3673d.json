{"sha": "bb758cfc6d773b15af5bf65330ea7c36d7c3673d", "node_id": "C_kwDOAAsO6NoAKGJiNzU4Y2ZjNmQ3NzNiMTVhZjViZjY1MzMwZWE3YzM2ZDdjMzY3M2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T17:59:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T17:59:16Z"}, "message": "Auto merge of #110674 - compiler-errors:expect-projection-term-eq-succeeds, r=BoxyUwU\n\nExpect that equating a projection term always succeeds in new solver\n\nThese should never fail. If they do, we have a problem with the logic that replaces a projection goal's term with an unconstrained infer var. Let's make sure we ICE in that case.", "tree": {"sha": "944c41aea0cceb78f59147b7c8c64e826413e1e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944c41aea0cceb78f59147b7c8c64e826413e1e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb758cfc6d773b15af5bf65330ea7c36d7c3673d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb758cfc6d773b15af5bf65330ea7c36d7c3673d", "html_url": "https://github.com/rust-lang/rust/commit/bb758cfc6d773b15af5bf65330ea7c36d7c3673d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb758cfc6d773b15af5bf65330ea7c36d7c3673d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4396ceca05585ad887976b985cfa8dd8e58cd512", "url": "https://api.github.com/repos/rust-lang/rust/commits/4396ceca05585ad887976b985cfa8dd8e58cd512", "html_url": "https://github.com/rust-lang/rust/commit/4396ceca05585ad887976b985cfa8dd8e58cd512"}, {"sha": "6041030c0f2ac5b56074384dc79fe122889abba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6041030c0f2ac5b56074384dc79fe122889abba7", "html_url": "https://github.com/rust-lang/rust/commit/6041030c0f2ac5b56074384dc79fe122889abba7"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "f0840e0443c1933279ad5ba57b0907b1f29ee233", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb758cfc6d773b15af5bf65330ea7c36d7c3673d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb758cfc6d773b15af5bf65330ea7c36d7c3673d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=bb758cfc6d773b15af5bf65330ea7c36d7c3673d", "patch": "@@ -73,7 +73,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                     goal.predicate.projection_ty,\n                     assumption_projection_pred.projection_ty,\n                 )?;\n-                ecx.eq(goal.param_env, goal.predicate.term, assumption_projection_pred.term)?;\n+                ecx.eq(goal.param_env, goal.predicate.term, assumption_projection_pred.term)\n+                    .expect(\"expected goal term to be fully unconstrained\");\n                 ecx.add_goals(requirements);\n                 ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n             })\n@@ -114,7 +115,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                     .into_iter()\n                     .map(|pred| goal.with(tcx, pred)),\n                 );\n-                ecx.eq(goal.param_env, goal.predicate.term, assumption_projection_pred.term)?;\n+                ecx.eq(goal.param_env, goal.predicate.term, assumption_projection_pred.term)\n+                    .expect(\"expected goal term to be fully unconstrained\");\n                 ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n             })\n         } else {\n@@ -206,7 +208,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 ty.map_bound(|ty| ty.into())\n             };\n \n-            ecx.eq(goal.param_env, goal.predicate.term, term.subst(tcx, substs))?;\n+            ecx.eq(goal.param_env, goal.predicate.term, term.subst(tcx, substs))\n+                .expect(\"expected goal term to be fully unconstrained\");\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         })\n     }\n@@ -375,7 +378,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 ),\n             };\n \n-            ecx.eq(goal.param_env, goal.predicate.term, metadata_ty.into())?;\n+            ecx.eq(goal.param_env, goal.predicate.term, metadata_ty.into())\n+                .expect(\"expected goal term to be fully unconstrained\");\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         })\n     }\n@@ -513,7 +517,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         };\n \n         ecx.probe(|ecx| {\n-            ecx.eq(goal.param_env, goal.predicate.term, discriminant_ty.into())?;\n+            ecx.eq(goal.param_env, goal.predicate.term, discriminant_ty.into())\n+                .expect(\"expected goal term to be fully unconstrained\");\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         })\n     }"}]}