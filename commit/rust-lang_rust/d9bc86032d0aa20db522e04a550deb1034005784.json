{"sha": "d9bc86032d0aa20db522e04a550deb1034005784", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YmM4NjAzMmQwYWEyMGRiNTIyZTA0YTU1MGRlYjEwMzQwMDU3ODQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-02T15:50:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-02T22:18:24Z"}, "message": "normalize trait-ref in context of impl\n\nThe `specializes()` function was trying to normalize the impl trait in\nan empty environment. This could lead to inexplicable failures.", "tree": {"sha": "71380baab2fcfaa1f573506631bcf9b66f78ea36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71380baab2fcfaa1f573506631bcf9b66f78ea36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9bc86032d0aa20db522e04a550deb1034005784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bc86032d0aa20db522e04a550deb1034005784", "html_url": "https://github.com/rust-lang/rust/commit/d9bc86032d0aa20db522e04a550deb1034005784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9bc86032d0aa20db522e04a550deb1034005784/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797e0420e3666b873600038ec4298915fe41db83", "url": "https://api.github.com/repos/rust-lang/rust/commits/797e0420e3666b873600038ec4298915fe41db83", "html_url": "https://github.com/rust-lang/rust/commit/797e0420e3666b873600038ec4298915fe41db83"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "6a27558b0b77ed65a49b92b1f6cc0926da15563c", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9bc86032d0aa20db522e04a550deb1034005784/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bc86032d0aa20db522e04a550deb1034005784/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=d9bc86032d0aa20db522e04a550deb1034005784", "patch": "@@ -148,6 +148,8 @@ pub fn find_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              impl1_def_id: DefId,\n                              impl2_def_id: DefId) -> bool {\n+    debug!(\"specializes({:?}, {:?})\", impl1_def_id, impl2_def_id);\n+\n     if let Some(r) = tcx.specializes_cache.borrow().check(impl1_def_id, impl2_def_id) {\n         return r;\n     }\n@@ -177,21 +179,22 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     // create a parameter environment corresponding to a (skolemized) instantiation of impl1\n-    let mut penv = tcx.construct_parameter_environment(DUMMY_SP,\n-                                                       impl1_def_id,\n-                                                       region::DUMMY_CODE_EXTENT);\n+    let penv = tcx.construct_parameter_environment(DUMMY_SP,\n+                                                   impl1_def_id,\n+                                                   region::DUMMY_CODE_EXTENT);\n     let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id)\n                              .unwrap()\n                              .subst(tcx, &penv.free_substs);\n \n-    let result = tcx.infer_ctxt(None, None, Reveal::ExactMatch).enter(|mut infcx| {\n+    // Create a infcx, taking the predicates of impl1 as assumptions:\n+    let result = tcx.infer_ctxt(None, Some(penv), Reveal::ExactMatch).enter(|mut infcx| {\n         // Normalize the trait reference, adding any obligations\n         // that arise into the impl1 assumptions.\n         let Normalized { value: impl1_trait_ref, obligations: normalization_obligations } = {\n             let selcx = &mut SelectionContext::new(&infcx);\n             traits::normalize(selcx, ObligationCause::dummy(), &impl1_trait_ref)\n         };\n-        penv.caller_bounds.extend(normalization_obligations.into_iter().map(|o| {\n+        infcx.parameter_environment.caller_bounds.extend(normalization_obligations.into_iter().map(|o| {\n             match tcx.lift_to_global(&o.predicate) {\n                 Some(predicate) => predicate,\n                 None => {\n@@ -200,9 +203,6 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         }));\n \n-        // Install the parameter environment, taking the predicates of impl1 as assumptions:\n-        infcx.parameter_environment = penv;\n-\n         // Attempt to prove that impl2 applies, given all of the above.\n         fulfill_implication(&infcx, impl1_trait_ref, impl2_def_id).is_ok()\n     });"}]}