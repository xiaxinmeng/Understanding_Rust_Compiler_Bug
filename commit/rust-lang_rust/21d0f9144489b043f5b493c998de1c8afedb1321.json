{"sha": "21d0f9144489b043f5b493c998de1c8afedb1321", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZDBmOTE0NDQ4OWIwNDNmNWI0OTNjOTk4ZGUxYzhhZmVkYjEzMjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-07T02:11:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-07T02:11:20Z"}, "message": "Auto merge of #42133 - cuviper:stdio-from, r=alexcrichton\n\nAdd conversions from File and Child* handles to Stdio\n\n`Stdio` now implements `From<ChildStdin>`, `From<ChildStdout>`,\n`From<ChildStderr>`, and `From<File>`.\n\nThe `Command::stdin`/`stdout`/`stderr` methods now take any type that\nimplements `Into<Stdio>`.\n\nThis makes it much easier to write shell-like command chains, piping to\none another and redirecting to and from files.  Otherwise one would need\nto use the unsafe and OS-specific `from_raw_fd` or `from_raw_handle`.", "tree": {"sha": "e5e1787ce1385fe2d307965c56abb135d299bd8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e1787ce1385fe2d307965c56abb135d299bd8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d0f9144489b043f5b493c998de1c8afedb1321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d0f9144489b043f5b493c998de1c8afedb1321", "html_url": "https://github.com/rust-lang/rust/commit/21d0f9144489b043f5b493c998de1c8afedb1321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d0f9144489b043f5b493c998de1c8afedb1321/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76242aebb9d47558124c991a6faf0eb706d35703", "url": "https://api.github.com/repos/rust-lang/rust/commits/76242aebb9d47558124c991a6faf0eb706d35703", "html_url": "https://github.com/rust-lang/rust/commit/76242aebb9d47558124c991a6faf0eb706d35703"}, {"sha": "9debe91675222782e08fbb15bb6359a05bf85131", "url": "https://api.github.com/repos/rust-lang/rust/commits/9debe91675222782e08fbb15bb6359a05bf85131", "html_url": "https://github.com/rust-lang/rust/commit/9debe91675222782e08fbb15bb6359a05bf85131"}], "stats": {"total": 164, "additions": 156, "deletions": 8}, "files": [{"sha": "4c6d88c0ae88900defb49bb1a02eaa4137506658", "filename": "src/libstd/process.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=21d0f9144489b043f5b493c998de1c8afedb1321", "patch": "@@ -59,6 +59,7 @@ use io::prelude::*;\n \n use ffi::OsStr;\n use fmt;\n+use fs;\n use io;\n use path::Path;\n use str;\n@@ -544,8 +545,8 @@ impl Command {\n     ///         .expect(\"ls command failed to start\");\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn stdin(&mut self, cfg: Stdio) -> &mut Command {\n-        self.inner.stdin(cfg.0);\n+    pub fn stdin<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {\n+        self.inner.stdin(cfg.into().0);\n         self\n     }\n \n@@ -564,8 +565,8 @@ impl Command {\n     ///         .expect(\"ls command failed to start\");\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn stdout(&mut self, cfg: Stdio) -> &mut Command {\n-        self.inner.stdout(cfg.0);\n+    pub fn stdout<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {\n+        self.inner.stdout(cfg.into().0);\n         self\n     }\n \n@@ -584,8 +585,8 @@ impl Command {\n     ///         .expect(\"ls command failed to start\");\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n-    pub fn stderr(&mut self, cfg: Stdio) -> &mut Command {\n-        self.inner.stderr(cfg.0);\n+    pub fn stderr<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {\n+        self.inner.stderr(cfg.into().0);\n         self\n     }\n \n@@ -753,6 +754,34 @@ impl fmt::Debug for Stdio {\n     }\n }\n \n+#[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n+impl From<ChildStdin> for Stdio {\n+    fn from(child: ChildStdin) -> Stdio {\n+        Stdio::from_inner(child.into_inner().into())\n+    }\n+}\n+\n+#[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n+impl From<ChildStdout> for Stdio {\n+    fn from(child: ChildStdout) -> Stdio {\n+        Stdio::from_inner(child.into_inner().into())\n+    }\n+}\n+\n+#[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n+impl From<ChildStderr> for Stdio {\n+    fn from(child: ChildStderr) -> Stdio {\n+        Stdio::from_inner(child.into_inner().into())\n+    }\n+}\n+\n+#[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n+impl From<fs::File> for Stdio {\n+    fn from(file: fs::File) -> Stdio {\n+        Stdio::from_inner(file.into_inner().into())\n+    }\n+}\n+\n /// Describes the result of a process after it has terminated.\n ///\n /// This `struct` is used to represent the exit status of a child process."}, {"sha": "62d873d257d8ffcd7651af05640a1266b667d5b1", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=21d0f9144489b043f5b493c998de1c8afedb1321", "patch": "@@ -400,6 +400,18 @@ impl Stdio {\n     }\n }\n \n+impl From<AnonPipe> for Stdio {\n+    fn from(pipe: AnonPipe) -> Stdio {\n+        Stdio::Fd(pipe.into_fd())\n+    }\n+}\n+\n+impl From<File> for Stdio {\n+    fn from(file: File) -> Stdio {\n+        Stdio::Fd(file.into_fd())\n+    }\n+}\n+\n impl ChildStdio {\n     fn fd(&self) -> Option<usize> {\n         match *self {"}, {"sha": "32fcee1e461954e6195c43c4c1a7dfae424e6b4f", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=21d0f9144489b043f5b493c998de1c8afedb1321", "patch": "@@ -315,6 +315,18 @@ impl Stdio {\n     }\n }\n \n+impl From<AnonPipe> for Stdio {\n+    fn from(pipe: AnonPipe) -> Stdio {\n+        Stdio::Fd(pipe.into_fd())\n+    }\n+}\n+\n+impl From<File> for Stdio {\n+    fn from(file: File) -> Stdio {\n+        Stdio::Fd(file.into_fd())\n+    }\n+}\n+\n impl ChildStdio {\n     pub fn fd(&self) -> Option<c_int> {\n         match *self {"}, {"sha": "0d1766d5aec6d91b967cd5ff20a45c30011fdb66", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=21d0f9144489b043f5b493c998de1c8afedb1321", "patch": "@@ -306,6 +306,18 @@ impl Stdio {\n     }\n }\n \n+impl From<AnonPipe> for Stdio {\n+    fn from(pipe: AnonPipe) -> Stdio {\n+        Stdio::Handle(pipe.into_handle())\n+    }\n+}\n+\n+impl From<File> for Stdio {\n+    fn from(file: File) -> Stdio {\n+        Stdio::Handle(file.into_handle())\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Processes\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "f64bbf9312cd860351ad580e972b6c30a2772118", "filename": "src/test/run-pass-fulldeps/stdio-from.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fstdio-from.rs?ref=21d0f9144489b043f5b493c998de1c8afedb1321", "patch": "@@ -0,0 +1,83 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-cross-compile\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc_back;\n+\n+use std::env;\n+use std::fs::File;\n+use std::io;\n+use std::io::{Read, Write};\n+use std::process::{Command, Stdio};\n+\n+use rustc_back::tempdir::TempDir;\n+\n+fn main() {\n+    if env::args().len() > 1 {\n+        child().unwrap()\n+    } else {\n+        parent().unwrap()\n+    }\n+}\n+\n+fn parent() -> io::Result<()> {\n+    let td = TempDir::new(\"foo\").unwrap();\n+    let input = td.path().join(\"input\");\n+    let output = td.path().join(\"output\");\n+\n+    File::create(&input)?.write_all(b\"foo\\n\")?;\n+\n+    // Set up this chain:\n+    //     $ me <file | me | me >file\n+    // ... to duplicate each line 8 times total.\n+\n+    let mut child1 = Command::new(env::current_exe()?)\n+        .arg(\"first\")\n+        .stdin(File::open(&input)?) // tests File::into()\n+        .stdout(Stdio::piped())\n+        .spawn()?;\n+\n+    let mut child3 = Command::new(env::current_exe()?)\n+        .arg(\"third\")\n+        .stdin(Stdio::piped())\n+        .stdout(File::create(&output)?) // tests File::into()\n+        .spawn()?;\n+\n+    // Started out of order so we can test both `ChildStdin` and `ChildStdout`.\n+    let mut child2 = Command::new(env::current_exe()?)\n+        .arg(\"second\")\n+        .stdin(child1.stdout.take().unwrap()) // tests ChildStdout::into()\n+        .stdout(child3.stdin.take().unwrap()) // tests ChildStdin::into()\n+        .spawn()?;\n+\n+    assert!(child1.wait()?.success());\n+    assert!(child2.wait()?.success());\n+    assert!(child3.wait()?.success());\n+\n+    let mut data = String::new();\n+    File::open(&output)?.read_to_string(&mut data)?;\n+    for line in data.lines() {\n+        assert_eq!(line, \"foo\");\n+    }\n+    assert_eq!(data.lines().count(), 8);\n+    Ok(())\n+}\n+\n+fn child() -> io::Result<()> {\n+    // double everything\n+    let mut input = vec![];\n+    io::stdin().read_to_end(&mut input)?;\n+    io::stdout().write_all(&input)?;\n+    io::stdout().write_all(&input)?;\n+    Ok(())\n+}"}, {"sha": "7658abc00c599636da09e54ba515c4acaece3fc0", "filename": "src/test/run-pass/issue-30490.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Ftest%2Frun-pass%2Fissue-30490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0f9144489b043f5b493c998de1c8afedb1321/src%2Ftest%2Frun-pass%2Fissue-30490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30490.rs?ref=21d0f9144489b043f5b493c998de1c8afedb1321", "patch": "@@ -69,8 +69,8 @@ fn main() {\n         Command::new(name)\n             .arg(\"--child\")\n             .stdin(Stdio::inherit())\n-            .stdout(unsafe { FromRawFd::from_raw_fd(libc::STDERR_FILENO) })\n-            .stderr(unsafe { FromRawFd::from_raw_fd(libc::STDOUT_FILENO) })\n+            .stdout(unsafe { Stdio::from_raw_fd(libc::STDERR_FILENO) })\n+            .stderr(unsafe { Stdio::from_raw_fd(libc::STDOUT_FILENO) })\n             .spawn()\n     };\n "}]}