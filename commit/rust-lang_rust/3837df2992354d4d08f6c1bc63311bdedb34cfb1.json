{"sha": "3837df2992354d4d08f6c1bc63311bdedb34cfb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MzdkZjI5OTIzNTRkNGQwOGY2YzFiYzYzMzExYmRlZGIzNGNmYjE=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-04-15T22:00:22Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-04-15T22:17:38Z"}, "message": "don't clone types that are copy (clippy::clone_on_copy)", "tree": {"sha": "08f837bfe795c8523b36610d998ddf0ade1c68d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f837bfe795c8523b36610d998ddf0ade1c68d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3837df2992354d4d08f6c1bc63311bdedb34cfb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3837df2992354d4d08f6c1bc63311bdedb34cfb1", "html_url": "https://github.com/rust-lang/rust/commit/3837df2992354d4d08f6c1bc63311bdedb34cfb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3837df2992354d4d08f6c1bc63311bdedb34cfb1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "139c64625173edab849acd9fbcea9739bb2bb802", "url": "https://api.github.com/repos/rust-lang/rust/commits/139c64625173edab849acd9fbcea9739bb2bb802", "html_url": "https://github.com/rust-lang/rust/commit/139c64625173edab849acd9fbcea9739bb2bb802"}], "stats": {"total": 210, "additions": 99, "deletions": 111}, "files": [{"sha": "71f6eb4485845d55c6ece9bf41f229e3c926c1b7", "filename": "src/librustc_builtin_macros/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -63,7 +63,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n     let span = cx.with_def_site_ctxt(span);\n     let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n     let builder = cx.ident_of(\"debug_trait_builder\", span);\n-    let builder_expr = cx.expr_ident(span, builder.clone());\n+    let builder_expr = cx.expr_ident(span, builder);\n \n     let fmt = substr.nonself_args[0].clone();\n "}, {"sha": "0023ff595fc543db2c340fec3311e74f1851d727", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -2005,7 +2005,7 @@ fn emit_to_destination(\n     let _buffer_lock = lock::acquire_global_lock(\"rustc_errors\");\n     for (pos, line) in rendered_buffer.iter().enumerate() {\n         for part in line {\n-            dst.apply_style(lvl.clone(), part.style)?;\n+            dst.apply_style(*lvl, part.style)?;\n             write!(dst, \"{}\", part.text)?;\n             dst.reset()?;\n         }"}, {"sha": "2aed0b7490cabf934a9a334540f32dc31c94bb6a", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -871,7 +871,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 return Some(());\n             }\n             if let &ty::Adt(def, _) = &ta.kind {\n-                let path_ = self.tcx.def_path_str(def.did.clone());\n+                let path_ = self.tcx.def_path_str(def.did);\n                 if path_ == other_path {\n                     self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, &other_ty);\n                     return Some(());\n@@ -1091,8 +1091,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let sub_no_defaults_1 = self.strip_generic_default_params(def1.did, sub1);\n                 let sub_no_defaults_2 = self.strip_generic_default_params(def2.did, sub2);\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n-                let path1 = self.tcx.def_path_str(def1.did.clone());\n-                let path2 = self.tcx.def_path_str(def2.did.clone());\n+                let path1 = self.tcx.def_path_str(def1.did);\n+                let path2 = self.tcx.def_path_str(def2.did);\n                 if def1.did == def2.did {\n                     // Easy case. Replace same types with `_` to shorten the output and highlight\n                     // the differing ones."}, {"sha": "c904926e9d93cb6f89019a3d6a36d43f50179458", "filename": "src/librustc_infer/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -452,7 +452,7 @@ where\n         // even though a satisfactory solution exists.\n         let generic = GenericKind::Projection(projection_ty);\n         let verify_bound = self.verify_bound.generic_bound(generic);\n-        self.delegate.push_verify(origin, generic.clone(), region, verify_bound);\n+        self.delegate.push_verify(origin, generic, region, verify_bound);\n     }\n }\n "}, {"sha": "6aefd86c49a253dbdf793a88727bebbc0ecb46e7", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -1056,7 +1056,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                  place: {:?}\",\n                                 place_span.0\n                             );\n-                            this.reservation_error_reported.insert(place_span.0.clone());\n+                            this.reservation_error_reported.insert(place_span.0);\n                         }\n                         Activation(_, activating) => {\n                             debug!("}, {"sha": "a5f46c28cd6744ee28d716a5db8934c3ea255645", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -286,7 +286,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     // Box starts out uninitialized - need to create a separate\n                     // move-path for the interior so it will be separate from\n                     // the exterior.\n-                    self.create_move_path(self.builder.tcx.mk_place_deref(place.clone()));\n+                    self.create_move_path(self.builder.tcx.mk_place_deref(*place));\n                     self.gather_init(place.as_ref(), InitKind::Shallow);\n                 } else {\n                     self.gather_init(place.as_ref(), InitKind::Deep);\n@@ -458,9 +458,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             for offset in from..to {\n                 let elem =\n                     ProjectionElem::ConstantIndex { offset, min_length: len, from_end: false };\n-                let path = self.add_move_path(base_path, &elem, |tcx| {\n-                    tcx.mk_place_elem(base_place.clone(), elem)\n-                });\n+                let path =\n+                    self.add_move_path(base_path, &elem, |tcx| tcx.mk_place_elem(base_place, elem));\n                 self.record_move(place, path);\n             }\n         } else {"}, {"sha": "ebed96c758d5b7c9a2c9837663ea784f5e1ad312", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -335,7 +335,7 @@ fn collect_items_rec<'tcx>(\n     recursion_depths: &mut DefIdMap<usize>,\n     inlining_map: MTRef<'_, MTLock<InliningMap<'tcx>>>,\n ) {\n-    if !visited.lock_mut().insert(starting_point.clone()) {\n+    if !visited.lock_mut().insert(starting_point) {\n         // We've been here already, no need to search again.\n         return;\n     }"}, {"sha": "a5034baa78e626b36d6156321bce8152bc455f4a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -538,7 +538,7 @@ impl CloneShimBuilder<'tcx> {\n         // BB #2\n         // `dest[i] = Clone::clone(src[beg])`;\n         // Goto #3 if ok, #5 if unwinding happens.\n-        let dest_field = self.tcx.mk_place_index(dest.clone(), beg);\n+        let dest_field = self.tcx.mk_place_index(dest, beg);\n         let src_field = self.tcx.mk_place_index(src, beg);\n         self.make_clone_call(dest_field, src_field, ty, BasicBlock::new(3), BasicBlock::new(5));\n \n@@ -620,9 +620,9 @@ impl CloneShimBuilder<'tcx> {\n         let mut previous_field = None;\n         for (i, ity) in tys.enumerate() {\n             let field = Field::new(i);\n-            let src_field = self.tcx.mk_place_field(src.clone(), field, ity);\n+            let src_field = self.tcx.mk_place_field(src, field, ity);\n \n-            let dest_field = self.tcx.mk_place_field(dest.clone(), field, ity);\n+            let dest_field = self.tcx.mk_place_field(dest, field, ity);\n \n             // #(2i + 1) is the cleanup block for the previous clone operation\n             let cleanup_block = self.block_index_offset(1);\n@@ -633,7 +633,7 @@ impl CloneShimBuilder<'tcx> {\n             // BB #(2i)\n             // `dest.i = Clone::clone(&src.i);`\n             // Goto #(2i + 2) if ok, #(2i + 1) if unwinding happens.\n-            self.make_clone_call(dest_field.clone(), src_field, ity, next_block, cleanup_block);\n+            self.make_clone_call(dest_field, src_field, ity, next_block, cleanup_block);\n \n             // BB #(2i + 1) (cleanup)\n             if let Some((previous_field, previous_cleanup)) = previous_field.take() {"}, {"sha": "bfa13abb871c285b41398aa4510d30519b2f9ca9", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -582,7 +582,7 @@ impl Inliner<'tcx> {\n             let tuple_tmp_args = tuple_tys.iter().enumerate().map(|(i, ty)| {\n                 // This is e.g., `tuple_tmp.0` in our example above.\n                 let tuple_field =\n-                    Operand::Move(tcx.mk_place_field(tuple.clone(), Field::new(i), ty.expect_ty()));\n+                    Operand::Move(tcx.mk_place_field(tuple, Field::new(i), ty.expect_ty()));\n \n                 // Spill to a local to make e.g., `tmp0`.\n                 self.create_temp_if_necessary(tuple_field, callsite, caller_body)"}, {"sha": "1a22eee3a0371379823c70db890160590a973d5b", "filename": "src/librustc_mir/util/aggregate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Faggregate.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -56,7 +56,7 @@ pub fn expand_aggregate<'tcx>(\n                 let offset = i as u32;\n                 assert_eq!(offset as usize, i);\n                 tcx.mk_place_elem(\n-                    lhs.clone(),\n+                    lhs,\n                     ProjectionElem::ConstantIndex {\n                         offset,\n                         // FIXME(eddyb) `min_length` doesn't appear to be used.\n@@ -66,7 +66,7 @@ pub fn expand_aggregate<'tcx>(\n                 )\n             } else {\n                 let field = Field::new(active_field_index.unwrap_or(i));\n-                tcx.mk_place_field(lhs.clone(), field, ty)\n+                tcx.mk_place_field(lhs, field, ty)\n             };\n             Statement { source_info, kind: StatementKind::Assign(box (lhs_field, Rvalue::Use(op))) }\n         })"}, {"sha": "8286793b532309c404a19aa728dc04cc2f0a0f8b", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -212,7 +212,7 @@ where\n                 assert_eq!(self.elaborator.param_env().reveal, Reveal::All);\n                 let field_ty =\n                     tcx.normalize_erasing_regions(self.elaborator.param_env(), f.ty(tcx, substs));\n-                (tcx.mk_place_field(base_place.clone(), field, field_ty), subpath)\n+                (tcx.mk_place_field(base_place, field, field_ty), subpath)\n             })\n             .collect()\n     }\n@@ -340,7 +340,7 @@ where\n             .enumerate()\n             .map(|(i, &ty)| {\n                 (\n-                    self.tcx().mk_place_field(self.place.clone(), Field::new(i), ty),\n+                    self.tcx().mk_place_field(self.place, Field::new(i), ty),\n                     self.elaborator.field_subpath(self.path, Field::new(i)),\n                 )\n             })\n@@ -353,7 +353,7 @@ where\n     fn open_drop_for_box(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>) -> BasicBlock {\n         debug!(\"open_drop_for_box({:?}, {:?}, {:?})\", self, adt, substs);\n \n-        let interior = self.tcx().mk_place_deref(self.place.clone());\n+        let interior = self.tcx().mk_place_deref(self.place);\n         let interior_path = self.elaborator.deref_subpath(self.path);\n \n         let succ = self.succ; // FIXME(#43234)\n@@ -434,7 +434,7 @@ where\n \n             if let Some(variant_path) = subpath {\n                 let base_place = tcx.mk_place_elem(\n-                    self.place.clone(),\n+                    self.place,\n                     ProjectionElem::Downcast(Some(variant.ident.name), variant_index),\n                 );\n                 let fields = self.move_paths_for_fields(base_place, variant_path, &variant, substs);\n@@ -622,7 +622,7 @@ where\n             (Rvalue::Use(copy(cur.into())), Rvalue::BinaryOp(BinOp::Offset, move_(cur.into()), one))\n         } else {\n             (\n-                Rvalue::AddressOf(Mutability::Mut, tcx.mk_place_index(self.place.clone(), cur)),\n+                Rvalue::AddressOf(Mutability::Mut, tcx.mk_place_index(self.place, cur)),\n                 Rvalue::BinaryOp(BinOp::Add, move_(cur.into()), one),\n             )\n         };\n@@ -654,7 +654,7 @@ where\n         self.elaborator.patch().patch_terminator(\n             drop_block,\n             TerminatorKind::Drop {\n-                location: tcx.mk_place_deref(ptr.clone()),\n+                location: tcx.mk_place_deref(ptr),\n                 target: loop_block,\n                 unwind: unwind.into_option(),\n             },\n@@ -682,7 +682,7 @@ where\n                 .map(|i| {\n                     (\n                         tcx.mk_place_elem(\n-                            self.place.clone(),\n+                            self.place,\n                             ProjectionElem::ConstantIndex {\n                                 offset: i,\n                                 min_length: size,\n@@ -719,8 +719,8 @@ where\n                     switch_ty: tcx.types.usize,\n                     values: From::from(USIZE_SWITCH_ZERO),\n                     targets: vec![\n-                        self.drop_loop_pair(ety, false, len.clone()),\n-                        self.drop_loop_pair(ety, true, len.clone()),\n+                        self.drop_loop_pair(ety, false, len),\n+                        self.drop_loop_pair(ety, true, len),\n                     ],\n                 },\n             }),\n@@ -912,7 +912,7 @@ where\n             .map(|(i, f)| {\n                 let field = Field::new(i);\n                 let field_ty = f.ty(tcx, substs);\n-                Operand::Move(tcx.mk_place_field(self.place.clone(), field, field_ty))\n+                Operand::Move(tcx.mk_place_field(self.place, field, field_ty))\n             })\n             .collect();\n "}, {"sha": "3f94fb828903113866f465bf16b804ebfdabc862", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -2,8 +2,8 @@ use crate::build::matches::ArmHasGuard;\n use crate::build::ForGuard::OutsideGuard;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n-use rustc_middle::mir::*;\n use rustc_hir as hir;\n+use rustc_middle::mir::*;\n use rustc_span::Span;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -29,7 +29,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // This is a `break`-able block\n                     let exit_block = this.cfg.start_new_block();\n                     let block_exit =\n-                        this.in_breakable_scope(None, exit_block, destination.clone(), |this| {\n+                        this.in_breakable_scope(None, exit_block, destination, |this| {\n                             this.ast_block_stmts(destination, block, span, stmts, expr, safety_mode)\n                         });\n                     this.cfg.goto(unpack!(block_exit), source_info, exit_block);"}, {"sha": "093e5a8d6a28d81cb73d7a322447cf6c78ae9adc", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 41, "deletions": 47, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -3,10 +3,10 @@\n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n-use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n use rustc_span::symbol::sym;\n \n use rustc_target::spec::abi::Abi;\n@@ -139,31 +139,26 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // Start the loop.\n                 this.cfg.goto(block, source_info, loop_block);\n \n-                this.in_breakable_scope(\n-                    Some(loop_block),\n-                    exit_block,\n-                    destination.clone(),\n-                    move |this| {\n-                        // conduct the test, if necessary\n-                        let body_block = this.cfg.start_new_block();\n-                        let diverge_cleanup = this.diverge_cleanup();\n-                        this.cfg.terminate(\n-                            loop_block,\n-                            source_info,\n-                            TerminatorKind::FalseUnwind {\n-                                real_target: body_block,\n-                                unwind: Some(diverge_cleanup),\n-                            },\n-                        );\n-\n-                        // The \u201creturn\u201d value of the loop body must always be an unit. We therefore\n-                        // introduce a unit temporary as the destination for the loop body.\n-                        let tmp = this.get_unit_temp();\n-                        // Execute the body, branching back to the test.\n-                        let body_block_end = unpack!(this.into(tmp, body_block, body));\n-                        this.cfg.goto(body_block_end, source_info, loop_block);\n-                    },\n-                );\n+                this.in_breakable_scope(Some(loop_block), exit_block, destination, move |this| {\n+                    // conduct the test, if necessary\n+                    let body_block = this.cfg.start_new_block();\n+                    let diverge_cleanup = this.diverge_cleanup();\n+                    this.cfg.terminate(\n+                        loop_block,\n+                        source_info,\n+                        TerminatorKind::FalseUnwind {\n+                            real_target: body_block,\n+                            unwind: Some(diverge_cleanup),\n+                        },\n+                    );\n+\n+                    // The \u201creturn\u201d value of the loop body must always be an unit. We therefore\n+                    // introduce a unit temporary as the destination for the loop body.\n+                    let tmp = this.get_unit_temp();\n+                    // Execute the body, branching back to the test.\n+                    let body_block_end = unpack!(this.into(tmp, body_block, body));\n+                    this.cfg.goto(body_block_end, source_info, loop_block);\n+                });\n                 exit_block.unit()\n             }\n             ExprKind::Call { ty, fun, args, from_hir_call } => {\n@@ -278,26 +273,25 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 let field_names = this.hir.all_fields(adt_def, variant_index);\n \n-                let fields =\n-                    if let Some(FruInfo { base, field_types }) = base {\n-                        let base = unpack!(block = this.as_place(block, base));\n-\n-                        // MIR does not natively support FRU, so for each\n-                        // base-supplied field, generate an operand that\n-                        // reads it from the base.\n-                        field_names\n-                            .into_iter()\n-                            .zip(field_types.into_iter())\n-                            .map(|(n, ty)| match fields_map.get(&n) {\n-                                Some(v) => v.clone(),\n-                                None => this.consume_by_copy_or_move(\n-                                    this.hir.tcx().mk_place_field(base.clone(), n, ty),\n-                                ),\n-                            })\n-                            .collect()\n-                    } else {\n-                        field_names.iter().filter_map(|n| fields_map.get(n).cloned()).collect()\n-                    };\n+                let fields = if let Some(FruInfo { base, field_types }) = base {\n+                    let base = unpack!(block = this.as_place(block, base));\n+\n+                    // MIR does not natively support FRU, so for each\n+                    // base-supplied field, generate an operand that\n+                    // reads it from the base.\n+                    field_names\n+                        .into_iter()\n+                        .zip(field_types.into_iter())\n+                        .map(|(n, ty)| match fields_map.get(&n) {\n+                            Some(v) => v.clone(),\n+                            None => this.consume_by_copy_or_move(\n+                                this.hir.tcx().mk_place_field(base, n, ty),\n+                            ),\n+                        })\n+                        .collect()\n+                } else {\n+                    field_names.iter().filter_map(|n| fields_map.get(n).cloned()).collect()\n+                };\n \n                 let inferred_ty = expr.ty;\n                 let user_ty = user_ty.map(|ty| {"}, {"sha": "10ffc81f179d1c8474e8fbe0e71e83c9567f2499", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -1903,9 +1903,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.schedule_drop_for_binding(binding.var_id, binding.span, OutsideGuard);\n             }\n             let rvalue = match binding.binding_mode {\n-                BindingMode::ByValue => {\n-                    Rvalue::Use(self.consume_by_copy_or_move(binding.source.clone()))\n-                }\n+                BindingMode::ByValue => Rvalue::Use(self.consume_by_copy_or_move(binding.source)),\n                 BindingMode::ByRef(borrow_kind) => {\n                     Rvalue::Ref(re_erased, borrow_kind, binding.source)\n                 }"}, {"sha": "a97ddeb0600120ca676e1ee483ca87c379dfb56f", "filename": "src/librustc_mir_build/build/matches/util.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -15,11 +15,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         subpatterns\n             .iter()\n             .map(|fieldpat| {\n-                let place = self.hir.tcx().mk_place_field(\n-                    place.clone(),\n-                    fieldpat.field,\n-                    fieldpat.pattern.ty,\n-                );\n+                let place =\n+                    self.hir.tcx().mk_place_field(place, fieldpat.field, fieldpat.pattern.ty);\n                 MatchPair::new(place, &fieldpat.pattern)\n             })\n             .collect()\n@@ -44,14 +41,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match_pairs.extend(prefix.iter().enumerate().map(|(idx, subpattern)| {\n             let elem =\n                 ProjectionElem::ConstantIndex { offset: idx as u32, min_length, from_end: false };\n-            let place = tcx.mk_place_elem(place.clone(), elem);\n+            let place = tcx.mk_place_elem(*place, elem);\n             MatchPair::new(place, subpattern)\n         }));\n \n         if let Some(subslice_pat) = opt_slice {\n             let suffix_len = suffix.len() as u32;\n             let subslice = tcx.mk_place_elem(\n-                place.clone(),\n+                *place,\n                 ProjectionElem::Subslice {\n                     from: prefix.len() as u32,\n                     to: if exact_size { min_length - suffix_len } else { suffix_len },\n@@ -68,7 +65,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 min_length,\n                 from_end: !exact_size,\n             };\n-            let place = tcx.mk_place_elem(place.clone(), elem);\n+            let place = tcx.mk_place_elem(*place, elem);\n             MatchPair::new(place, subpattern)\n         }));\n     }"}, {"sha": "2e48fd9d659bdeafa7655f6022c286a48e01f4ba", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -610,7 +610,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n             // Warn if the user enables a lib feature multiple times.\n             duplicate_feature_err(tcx.sess, *span, *feature);\n         }\n-        remaining_lib_features.insert(feature, span.clone());\n+        remaining_lib_features.insert(feature, *span);\n     }\n     // `stdbuild` has special handling for `libc`, so we need to\n     // recognise the feature when building std."}, {"sha": "fb313d2658ff40d1748d4e7df6c1da8360f853ec", "filename": "src/librustc_query_system/dep_graph/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_query_system%2Fdep_graph%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_query_system%2Fdep_graph%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fquery.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -15,7 +15,7 @@ impl<K: DepKind> DepGraphQuery<K> {\n         let mut graph = Graph::with_capacity(nodes.len(), edges.len());\n         let mut indices = FxHashMap::default();\n         for node in nodes {\n-            indices.insert(node.clone(), graph.add_node(node.clone()));\n+            indices.insert(*node, graph.add_node(*node));\n         }\n \n         for &(ref source, ref target) in edges {"}, {"sha": "5b6a50f88db45ac410a2d9b7f3a7f63df4b85627", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -643,13 +643,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 if param_name.name == kw::UnderscoreLifetime {\n                                     // Pick the elided lifetime \"definition\" if one exists\n                                     // and use it to make an elision scope.\n-                                    self.lifetime_uses.insert(def_id.clone(), LifetimeUseSet::Many);\n+                                    self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n                                     elision = Some(reg);\n                                 } else {\n                                     lifetimes.insert(name, reg);\n                                 }\n                             } else {\n-                                self.lifetime_uses.insert(def_id.clone(), LifetimeUseSet::Many);\n+                                self.lifetime_uses.insert(def_id, LifetimeUseSet::Many);\n                                 lifetimes.insert(name, reg);\n                             }\n                         }"}, {"sha": "adc16d77790e419d6ad4babec713634b3cf64779", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 .borrow_mut()\n                 .entry(span)\n                 .or_default()\n-                .push(error.obligation.predicate.clone());\n+                .push(error.obligation.predicate);\n         }\n \n         // We do this in 2 passes because we want to display errors in order, though"}, {"sha": "300acf95c9973ab5f21a18536122d7705a97a5a9", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n         match obligation.predicate {\n             ty::Predicate::Trait(ref data, _) => {\n-                let trait_obligation = obligation.with(data.clone());\n+                let trait_obligation = obligation.with(*data);\n \n                 if data.is_global() {\n                     // no type variables present, can use evaluation for better caching.\n@@ -420,7 +420,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n             }\n \n             ty::Predicate::Projection(ref data) => {\n-                let project_obligation = obligation.with(data.clone());\n+                let project_obligation = obligation.with(*data);\n                 match project::poly_project_and_unify_type(self.selcx, &project_obligation) {\n                     Ok(None) => {\n                         let tcx = self.selcx.tcx();"}, {"sha": "41847a9218ca6a524eceecf597bbec7ef1c7b739", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -413,7 +413,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match obligation.predicate {\n             ty::Predicate::Trait(ref t, _) => {\n                 debug_assert!(!t.has_escaping_bound_vars());\n-                let obligation = obligation.with(t.clone());\n+                let obligation = obligation.with(*t);\n                 self.evaluate_trait_predicate_recursively(previous_stack, obligation)\n             }\n \n@@ -460,7 +460,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::Predicate::Projection(ref data) => {\n-                let project_obligation = obligation.with(data.clone());\n+                let project_obligation = obligation.with(*data);\n                 match project::poly_project_and_unify_type(self, &project_obligation) {\n                     Ok(Some(mut subobligations)) => {\n                         self.add_depth(subobligations.iter_mut(), obligation.recursion_depth);\n@@ -910,7 +910,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // separately rather than using `stack.fresh_trait_ref` --\n         // this is because we want the unbound variables to be\n         // replaced with fresh types starting from index 0.\n-        let cache_fresh_trait_pred = self.infcx.freshen(stack.obligation.predicate.clone());\n+        let cache_fresh_trait_pred = self.infcx.freshen(stack.obligation.predicate);\n         debug!(\n             \"candidate_from_obligation(cache_fresh_trait_pred={:?}, obligation={:?})\",\n             cache_fresh_trait_pred, stack\n@@ -1448,8 +1448,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.infcx.probe(|_| {\n                 self.match_projection(\n                     obligation,\n-                    bound.clone(),\n-                    placeholder_trait_predicate.trait_ref.clone(),\n+                    *bound,\n+                    placeholder_trait_predicate.trait_ref,\n                     &placeholder_map,\n                     snapshot,\n                 )\n@@ -1468,7 +1468,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let result = self.match_projection(\n                     obligation,\n                     bound,\n-                    placeholder_trait_predicate.trait_ref.clone(),\n+                    placeholder_trait_predicate.trait_ref,\n                     &placeholder_map,\n                     snapshot,\n                 );\n@@ -1520,7 +1520,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         let mut param_candidates = vec![];\n         for bound in matching_bounds {\n-            let wc = self.evaluate_where_clause(stack, bound.clone())?;\n+            let wc = self.evaluate_where_clause(stack, bound)?;\n             if wc.may_apply() {\n                 param_candidates.push(ParamCandidate(bound));\n             }\n@@ -2496,7 +2496,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // where-clause trait-ref could be unified with the obligation\n         // trait-ref. Repeat that unification now without any\n         // transactional boundary; it should not fail.\n-        match self.match_where_clause_trait_ref(obligation, param.clone()) {\n+        match self.match_where_clause_trait_ref(obligation, param) {\n             Ok(obligations) => obligations,\n             Err(()) => {\n                 bug!("}, {"sha": "31d147b460f0ca83114a7b878f5d5d8f9443750f", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -373,7 +373,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 );\n             };\n \n-            self.tables.user_provided_types_mut().insert(hir_id, c_ty.clone());\n+            self.tables.user_provided_types_mut().insert(hir_id, *c_ty);\n \n             if let ty::UserType::TypeOf(_, user_substs) = c_ty.value {\n                 if self.rustc_dump_user_substs {\n@@ -411,7 +411,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 );\n             };\n \n-            self.tables.user_provided_sigs.insert(def_id, c_sig.clone());\n+            self.tables.user_provided_sigs.insert(def_id, *c_sig);\n         }\n     }\n \n@@ -562,7 +562,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         for (&local_id, fn_sig) in fcx_tables.liberated_fn_sigs().iter() {\n             let hir_id = hir::HirId { owner: common_hir_owner, local_id };\n             let fn_sig = self.resolve(fn_sig, &hir_id);\n-            self.tables.liberated_fn_sigs_mut().insert(hir_id, fn_sig.clone());\n+            self.tables.liberated_fn_sigs_mut().insert(hir_id, fn_sig);\n         }\n     }\n "}, {"sha": "144c1699a3ca86edc3b9ee1fd183efb004acd0b7", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -509,7 +509,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         continue;\n                     }\n \n-                    let mut for_generics = self.extract_for_generics(tcx, orig_p.clone());\n+                    let mut for_generics = self.extract_for_generics(tcx, orig_p);\n \n                     assert!(bounds.len() == 1);\n                     let mut b = bounds.pop().expect(\"bounds were empty\");"}, {"sha": "e9af0ee5c2343d2c15d85fcf014566ead74c73e7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -47,7 +47,7 @@ pub fn try_inline(\n     }\n     let mut ret = Vec::new();\n \n-    let attrs_clone = attrs.clone();\n+    let attrs_clone = attrs;\n \n     let inner = match res {\n         Res::Def(DefKind::Trait, did) => {\n@@ -292,7 +292,7 @@ pub fn build_impls(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>) ->\n     let mut impls = Vec::new();\n \n     for &did in tcx.inherent_impls(did).iter() {\n-        build_impl(cx, did, attrs.clone(), &mut impls);\n+        build_impl(cx, did, attrs, &mut impls);\n     }\n \n     impls"}, {"sha": "afc1501d7b6134641ebe780e2ff6468844a71fe0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3837df2992354d4d08f6c1bc63311bdedb34cfb1/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3837df2992354d4d08f6c1bc63311bdedb34cfb1", "patch": "@@ -683,7 +683,7 @@ impl Tester for Collector {\n         let name = self.generate_name(line, &filename);\n         let cratename = self.cratename.to_string();\n         let opts = self.opts.clone();\n-        let edition = config.edition.unwrap_or(self.options.edition.clone());\n+        let edition = config.edition.unwrap_or(self.options.edition);\n         let options = self.options.clone();\n         let runtool = self.options.runtool.clone();\n         let runtool_args = self.options.runtool_args.clone();"}]}