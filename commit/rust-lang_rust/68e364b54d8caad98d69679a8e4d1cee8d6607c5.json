{"sha": "68e364b54d8caad98d69679a8e4d1cee8d6607c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZTM2NGI1NGQ4Y2FhZDk4ZDY5Njc5YThlNGQxY2VlOGQ2NjA3YzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-21T19:21:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-21T19:21:53Z"}, "message": "rustc: Introduce re_params into the typechecker\n\nThis is the first step of the region refactoring I need to do in order to handle named regions properly.", "tree": {"sha": "7e1523ce9ead11248b3a6c91c4d74d30a853199d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1523ce9ead11248b3a6c91c4d74d30a853199d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68e364b54d8caad98d69679a8e4d1cee8d6607c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68e364b54d8caad98d69679a8e4d1cee8d6607c5", "html_url": "https://github.com/rust-lang/rust/commit/68e364b54d8caad98d69679a8e4d1cee8d6607c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68e364b54d8caad98d69679a8e4d1cee8d6607c5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "071dedde79137bbc24b19034df117810785f2301", "url": "https://api.github.com/repos/rust-lang/rust/commits/071dedde79137bbc24b19034df117810785f2301", "html_url": "https://github.com/rust-lang/rust/commit/071dedde79137bbc24b19034df117810785f2301"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "2ce09c4bc694d18e0c8823c243d456ff1d0a2904", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=68e364b54d8caad98d69679a8e4d1cee8d6607c5", "patch": "@@ -106,7 +106,9 @@ fn enc_region(w: io::writer, cx: @ctxt, r: ty::region) {\n         ty::re_self(did) {\n             w.write_char('s'); w.write_str(cx.ds(did)); w.write_char('|');\n         }\n-        ty::re_inferred { w.write_char('?'); }\n+        ty::re_param(id) {\n+            w.write_char('p'); w.write_uint(id); w.write_char('|');\n+        }\n     }\n }\n fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {"}, {"sha": "73df743e84929ffb4aac51a5ee694fbecba67649", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=68e364b54d8caad98d69679a8e4d1cee8d6607c5", "patch": "@@ -80,7 +80,7 @@ fn region_to_scope(region_map: @region_map, region: ty::region)\n         ty::re_caller(def_id) | ty::re_self(def_id) { def_id.node }\n         ty::re_named(def_id) { region_map.region_name_to_fn.get(def_id) }\n         ty::re_block(node_id) { node_id }\n-        ty::re_inferred { fail \"unresolved region in region_to_scope\" }\n+        ty::re_param(_) { fail \"unresolved region in region_to_scope\" }\n     };\n }\n \n@@ -109,7 +109,7 @@ fn get_inferred_region(cx: ctxt, sp: syntax::codemap::span) -> ty::region {\n             ty::re_caller({crate: ast::local_crate, node: item_id})\n         }\n         pa_block(block_id) { ty::re_block(block_id) }\n-        pa_item(_) { ty::re_inferred }\n+        pa_item(_) { ty::re_param(0u) }\n         pa_crate { cx.sess.span_bug(sp, \"inferred region at crate level?!\"); }\n     }\n }"}, {"sha": "26316422106a6013e87c4a2f163ff5e528f5c742", "filename": "src/rustc/middle/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmiddle%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmiddle%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregionck.rs?ref=68e364b54d8caad98d69679a8e4d1cee8d6607c5", "patch": "@@ -51,7 +51,7 @@ fn check_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n                                                      \"escapes its block\");\n                             }\n                         }\n-                        ty::re_inferred {\n+                        ty::re_param(_) {\n                             cx.tcx.sess.span_bug(expr.span,\n                                                  \"unresolved region\");\n                         }"}, {"sha": "f7f647c89e357810764048fc3055175d8c06031b", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=68e364b54d8caad98d69679a8e4d1cee8d6607c5", "patch": "@@ -89,7 +89,7 @@ export ty_uint, mk_uint, mk_mach_uint;\n export ty_uniq, mk_uniq, mk_imm_uniq, type_is_unique_box;\n export ty_var, mk_var;\n export ty_self, mk_self;\n-export region, re_named, re_caller, re_block, re_inferred;\n+export region, re_named, re_caller, re_block, re_param;\n export get, type_has_params, type_has_vars, type_has_rptrs, type_id;\n export same_type;\n export ty_var_id;\n@@ -242,7 +242,10 @@ enum region {\n     re_caller(def_id),\n     re_self(def_id),\n     re_block(node_id),\n-    re_inferred         /* currently unresolved (for typedefs) */\n+\n+    // A region parameter. Currently used only for typedefs.\n+    // TODO: Use this for caller and named regions as well.\n+    re_param(uint)\n }\n \n // NB: If you change this, you'll probably want to change the corresponding\n@@ -1163,7 +1166,7 @@ fn hash_type_structure(st: sty) -> uint {\n           re_caller(_)  { 2u }\n           re_self(_)    { 3u }\n           re_block(_)   { 4u }\n-          re_inferred   { 5u }\n+          re_param(_)   { 5u }\n         }\n     }\n     alt st {\n@@ -1928,12 +1931,17 @@ mod unify {\n             }\n         }\n \n-        if sub == ty::re_inferred || super == ty::re_inferred {\n-            ret if sub == super {\n-                nxt(super)\n-            } else {\n-                err(terr_regions_differ(true, super, sub))\n-            };\n+        // FIXME: This is wrong. We should be keeping a set of region bindings\n+        // around.\n+        alt (sub, super) {\n+            (ty::re_param(_), _) | (_, ty::re_param(_)) {\n+                ret if sub == super {\n+                    nxt(super)\n+                } else {\n+                    err(terr_regions_differ(true, super, sub))\n+                }\n+            }\n+            _ { /* fall through */ }\n         }\n \n         // Outer regions are subtypes of inner regions. (This is somewhat"}, {"sha": "e55656d2b2f161e191f972ee0a89271acd1fb90d", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e364b54d8caad98d69679a8e4d1cee8d6607c5/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=68e364b54d8caad98d69679a8e4d1cee8d6607c5", "patch": "@@ -256,7 +256,8 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n                               ty: ty::t) -> ty::t {\n         ret ty::fold_ty(tcx, ty::fm_rptr({|r|\n             alt r {\n-                ty::re_inferred | ty::re_self(_) {\n+                // FIXME: This is probably wrong for params.\n+                ty::re_param(_) | ty::re_self(_) {\n                     tcx.region_map.ast_type_to_inferred_region.get(use_site)\n                 }\n                 _ { r }\n@@ -356,7 +357,11 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n                     let attir = tcx.region_map.ast_type_to_inferred_region;\n                     alt attir.find(ast_ty.id) {\n                         some(resolved_region) { resolved_region }\n-                        none { ty::re_inferred }\n+                        none {\n+                            // FIXME: Shouldn't be 0u and should instead be\n+                            // a fresh variable.\n+                            ty::re_param(0u)\n+                        }\n                     }\n                 }\n                 ast::re_named(_) | ast::re_self {\n@@ -1488,7 +1493,8 @@ fn instantiate_self_regions(tcx: ty::ctxt, region: ty::region, &&ty: ty::t)\n     if ty::type_has_rptrs(ty) {\n         ty::fold_ty(tcx, ty::fm_rptr({|r|\n             alt r {\n-                ty::re_inferred | ty::re_caller(_) | ty::re_self(_) { region }\n+                // FIXME: Should not happen for re_param.\n+                ty::re_param(_) | ty::re_caller(_) | ty::re_self(_) { region }\n                 _ { r }\n             }\n         }), ty)\n@@ -1502,7 +1508,10 @@ fn instantiate_self_regions(tcx: ty::ctxt, region: ty::region, &&ty: ty::t)\n // refer to inferred regions.\n fn universally_quantify_regions(tcx: ty::ctxt, ty: ty::t) -> ty::t {\n     if ty::type_has_rptrs(ty) {\n-        ty::fold_ty(tcx, ty::fm_rptr({|_r| ty::re_inferred}), ty)\n+        ty::fold_ty(tcx, ty::fm_rptr({|_r|\n+            // FIXME: Very wrong. Shouldn't be 0u.\n+            ty::re_param(0u)\n+        }), ty)\n     } else {\n         ty\n     }"}]}