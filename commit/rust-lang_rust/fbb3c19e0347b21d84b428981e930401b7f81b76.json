{"sha": "fbb3c19e0347b21d84b428981e930401b7f81b76", "node_id": "C_kwDOAAsO6NoAKGZiYjNjMTllMDM0N2IyMWQ4NGI0Mjg5ODFlOTMwNDAxYjdmODFiNzY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-14T01:49:12Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-14T01:53:59Z"}, "message": "Use re-export instead of inline wrapper in libunwind\n\nThis ensures that there are no calls to `C-unwind` function in libunwind.", "tree": {"sha": "0394d823c91bef64eb0d5b1aabfd3bbcc7361f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0394d823c91bef64eb0d5b1aabfd3bbcc7361f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb3c19e0347b21d84b428981e930401b7f81b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb3c19e0347b21d84b428981e930401b7f81b76", "html_url": "https://github.com/rust-lang/rust/commit/fbb3c19e0347b21d84b428981e930401b7f81b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb3c19e0347b21d84b428981e930401b7f81b76/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f063bf3fb9ca7dc585e18250ba7a75f40a245f", "html_url": "https://github.com/rust-lang/rust/commit/68f063bf3fb9ca7dc585e18250ba7a75f40a245f"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "7b78bda424bb02a14fa019d47ae115cf768a9fae", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3c19e0347b21d84b428981e930401b7f81b76/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3c19e0347b21d84b428981e930401b7f81b76/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=fbb3c19e0347b21d84b428981e930401b7f81b76", "patch": "@@ -264,10 +264,7 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n         pub fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n     }\n \n-    #[inline]\n-    pub unsafe fn _Unwind_RaiseException(exc: *mut _Unwind_Exception) -> _Unwind_Reason_Code {\n-        _Unwind_SjLj_RaiseException(exc)\n-    }\n+    pub use _Unwind_SjLj_RaiseException as _Unwind_RaiseException;\n }\n } // cfg_if!\n "}]}