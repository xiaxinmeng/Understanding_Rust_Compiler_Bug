{"sha": "81eea9e4312253afb655c051d0bf0661744ab56e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZWVhOWU0MzEyMjUzYWZiNjU1YzA1MWQwYmYwNjYxNzQ0YWI1NmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-21T16:41:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-21T16:44:01Z"}, "message": "Thread through the original error when opening archives\n\nThis updates the management of opening archives to thread through the original\npiece of error information from LLVM over to the end consumer, trans.", "tree": {"sha": "be9cacd4ce5ec10ef7bd9d7c5168b66c994732eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be9cacd4ce5ec10ef7bd9d7c5168b66c994732eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81eea9e4312253afb655c051d0bf0661744ab56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81eea9e4312253afb655c051d0bf0661744ab56e", "html_url": "https://github.com/rust-lang/rust/commit/81eea9e4312253afb655c051d0bf0661744ab56e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81eea9e4312253afb655c051d0bf0661744ab56e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d54ebe550167c1c9ef0bad56046a382a04dc604", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d54ebe550167c1c9ef0bad56046a382a04dc604", "html_url": "https://github.com/rust-lang/rust/commit/9d54ebe550167c1c9ef0bad56046a382a04dc604"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "0b24e55541b07269f52f3f41d5e924c834d6cb74", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81eea9e4312253afb655c051d0bf0661744ab56e/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81eea9e4312253afb655c051d0bf0661744ab56e/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=81eea9e4312253afb655c051d0bf0661744ab56e", "patch": "@@ -39,14 +39,14 @@ impl ArchiveRO {\n     ///\n     /// If this archive is used with a mutable method, then an error will be\n     /// raised.\n-    pub fn open(dst: &Path) -> Option<ArchiveRO> {\n+    pub fn open(dst: &Path) -> Result<ArchiveRO, String> {\n         return unsafe {\n             let s = path2cstr(dst);\n             let ar = ::LLVMRustOpenArchive(s.as_ptr());\n             if ar.is_null() {\n-                None\n+                Err(::last_error().unwrap_or(\"failed to open archive\".to_string()))\n             } else {\n-                Some(ArchiveRO { ptr: ar })\n+                Ok(ArchiveRO { ptr: ar })\n             }\n         };\n "}, {"sha": "6ec40bd689c23eb963a6ee93679d0d710a2d5c33", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81eea9e4312253afb655c051d0bf0661744ab56e/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81eea9e4312253afb655c051d0bf0661744ab56e/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=81eea9e4312253afb655c051d0bf0661744ab56e", "patch": "@@ -126,7 +126,7 @@ impl<'a> ArchiveBuilder<'a> {\n             Some(ref src) => src,\n             None => return None,\n         };\n-        self.src_archive = Some(ArchiveRO::open(src));\n+        self.src_archive = Some(ArchiveRO::open(src).ok());\n         self.src_archive.as_ref().unwrap().as_ref()\n     }\n \n@@ -186,9 +186,8 @@ impl<'a> ArchiveBuilder<'a> {\n         where F: FnMut(&str) -> bool + 'static\n     {\n         let archive = match ArchiveRO::open(archive) {\n-            Some(ar) => ar,\n-            None => return Err(io::Error::new(io::ErrorKind::Other,\n-                                              \"failed to open archive\")),\n+            Ok(ar) => ar,\n+            Err(e) => return Err(io::Error::new(io::ErrorKind::Other, e)),\n         };\n         self.additions.push(Addition::Archive {\n             archive: archive,"}, {"sha": "883808c59091a02d60e45f7308fc41af46d6ce08", "filename": "src/librustc_trans/metadata.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81eea9e4312253afb655c051d0bf0661744ab56e/src%2Flibrustc_trans%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81eea9e4312253afb655c051d0bf0661744ab56e/src%2Flibrustc_trans%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmetadata.rs?ref=81eea9e4312253afb655c051d0bf0661744ab56e", "patch": "@@ -31,21 +31,21 @@ impl MetadataLoader for LlvmMetadataLoader {\n         // just keeping the archive along while the metadata is in use.\n         let archive = ArchiveRO::open(filename)\n             .map(|ar| OwningRef::new(box ar))\n-            .ok_or_else(|| {\n-                            debug!(\"llvm didn't like `{}`\", filename.display());\n-                            format!(\"failed to read rlib metadata: '{}'\", filename.display())\n-                        })?;\n+            .map_err(|e| {\n+                debug!(\"llvm didn't like `{}`: {}\", filename.display(), e);\n+                format!(\"failed to read rlib metadata in '{}': {}\", filename.display(), e)\n+            })?;\n         let buf: OwningRef<_, [u8]> = archive\n             .try_map(|ar| {\n                 ar.iter()\n                     .filter_map(|s| s.ok())\n                     .find(|sect| sect.name() == Some(METADATA_FILENAME))\n                     .map(|s| s.data())\n                     .ok_or_else(|| {\n-                                    debug!(\"didn't find '{}' in the archive\", METADATA_FILENAME);\n-                                    format!(\"failed to read rlib metadata: '{}'\",\n-                                            filename.display())\n-                                })\n+                        debug!(\"didn't find '{}' in the archive\", METADATA_FILENAME);\n+                        format!(\"failed to read rlib metadata: '{}'\",\n+                                filename.display())\n+                    })\n             })?;\n         Ok(buf.erase_owner())\n     }"}]}