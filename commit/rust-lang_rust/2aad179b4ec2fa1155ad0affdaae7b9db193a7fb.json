{"sha": "2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "node_id": "C_kwDOAAsO6NoAKDJhYWQxNzliNGVjMmZhMTE1NWFkMGFmZmRhYWU3YjlkYjE5M2E3ZmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-25T10:31:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-25T10:31:35Z"}, "message": "Rollup merge of #108434 - obeis:hir-analysis-migrate-diagnostics, r=Nilstrieb\n\nMigrate `rustc_hir_analysis` to session diagnostic [Part One]\n\nFinishing `lib.rs` file\nUpdates #100717\nr? ``@davidtwco``", "tree": {"sha": "1031a08f2141c896d695afccda67a0a3ed44959f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1031a08f2141c896d695afccda67a0a3ed44959f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj+eOHCRBK7hj4Ov3rIwAAm2MIAIHIWX4Ias+80GNsKsAI2rPG\nz5L17xAY6EmiAPLRLbPcB5H6NoWfLxMT+DKIwAQ/X7G08kOHjIRH0lE1XDzkM1T7\n0Brpa9vfX0NXFLw2FwMxw4Q40bugfQCo2eOOAkcaYn2XZ0A96RZBOOyZoDbloRWx\nZZzYDq2oPMf2rp4MkfAlLexsoKFDaSzgYEG1ylL1PmjaAc0YIpeQ1fLzufzwXQxw\n0UnqlokOIWZOd+wp+aZ/LC5kVpmjZHwxPtYiSjIc2uEzoCdj1Hnl75sBUUKz5LG5\nPZ4UDZswuhFVx4lb6Z+6Kb4vcU/AilXuf2yZbMza8VAV1U9z2gb04trHGCTG1Mg=\n=jGQM\n-----END PGP SIGNATURE-----\n", "payload": "tree 1031a08f2141c896d695afccda67a0a3ed44959f\nparent a4740a192221b24e2cfbb5fcb17689568b16bb85\nparent 34966aab55e0a86be6a6dbe57596151ee8c74263\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677321095 +0100\ncommitter GitHub <noreply@github.com> 1677321095 +0100\n\nRollup merge of #108434 - obeis:hir-analysis-migrate-diagnostics, r=Nilstrieb\n\nMigrate `rustc_hir_analysis` to session diagnostic [Part One]\n\nFinishing `lib.rs` file\nUpdates #100717\nr? ``@davidtwco``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "html_url": "https://github.com/rust-lang/rust/commit/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4740a192221b24e2cfbb5fcb17689568b16bb85", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4740a192221b24e2cfbb5fcb17689568b16bb85", "html_url": "https://github.com/rust-lang/rust/commit/a4740a192221b24e2cfbb5fcb17689568b16bb85"}, {"sha": "34966aab55e0a86be6a6dbe57596151ee8c74263", "url": "https://api.github.com/repos/rust-lang/rust/commits/34966aab55e0a86be6a6dbe57596151ee8c74263", "html_url": "https://github.com/rust-lang/rust/commit/34966aab55e0a86be6a6dbe57596151ee8c74263"}], "stats": {"total": 170, "additions": 107, "deletions": 63}, "files": [{"sha": "e87731160d93f2de86fc0908ffe649ce7ff7ee78", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "patch": "@@ -132,3 +132,26 @@ hir_analysis_where_clause_on_main = `main` function is not allowed to have a `wh\n \n hir_analysis_track_caller_on_main = `main` function is not allowed to be `#[track_caller]`\n     .label = `main` function is not allowed to be `#[track_caller]`\n+\n+hir_analysis_start_not_track_caller = `start` is not allowed to be `#[track_caller]`\n+    .label = `start` is not allowed to be `#[track_caller]`\n+\n+hir_analysis_start_not_async = `start` is not allowed to be `async`\n+    .label = `start` is not allowed to be `async`\n+\n+hir_analysis_start_function_where = start function is not allowed to have a `where` clause\n+    .label = start function cannot have a `where` clause\n+\n+hir_analysis_start_function_parameters = start function is not allowed to have type parameters\n+    .label = start function cannot have type parameters\n+\n+hir_analysis_main_function_return_type_generic = `main` function return type is not allowed to have generic parameters\n+\n+hir_analysis_main_function_async = `main` function is not allowed to be `async`\n+    .label = `main` function is not allowed to be `async`\n+\n+hir_analysis_main_function_generic_parameters = `main` function is not allowed to have generic parameters\n+    .label = `main` cannot have generic parameters\n+\n+hir_analysis_variadic_function_compatible_convention = C-variadic function must have a compatible calling convention, like {$conventions}\n+    .label = C-variadic function must have a compatible calling convention"}, {"sha": "309d02052b7b2b2ff8a54f342eba9609999cc664", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "patch": "@@ -333,3 +333,70 @@ pub(crate) struct TrackCallerOnMain {\n     #[label]\n     pub annotated: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_not_track_caller)]\n+pub(crate) struct StartTrackCaller {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub start: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_not_async, code = \"E0752\")]\n+pub(crate) struct StartAsync {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_function_where, code = \"E0647\")]\n+pub(crate) struct StartFunctionWhere {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_function_parameters, code = \"E0132\")]\n+pub(crate) struct StartFunctionParameters {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_main_function_return_type_generic, code = \"E0131\")]\n+pub(crate) struct MainFunctionReturnTypeGeneric {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_main_function_async, code = \"E0752\")]\n+pub(crate) struct MainFunctionAsync {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub asyncness: Option<Span>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_main_function_generic_parameters, code = \"E0131\")]\n+pub(crate) struct MainFunctionGenericParameters {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub label_span: Option<Span>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_variadic_function_compatible_convention, code = \"E0045\")]\n+pub(crate) struct VariadicFunctionCompatibleConvention<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub conventions: &'a str,\n+}"}, {"sha": "33c132fd5349bc4e61abf1daf5808cc99bb743e9", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 17, "deletions": 63, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "patch": "@@ -98,7 +98,7 @@ mod outlives;\n pub mod structured_errors;\n mod variance;\n \n-use rustc_errors::{struct_span_err, ErrorGuaranteed};\n+use rustc_errors::ErrorGuaranteed;\n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::Node;\n@@ -123,7 +123,6 @@ use bounds::Bounds;\n fluent_messages! { \"../locales/en-US.ftl\" }\n \n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n-    const ERROR_HEAD: &str = \"C-variadic function must have a compatible calling convention\";\n     const CONVENTIONS_UNSTABLE: &str = \"`C`, `cdecl`, `win64`, `sysv64` or `efiapi`\";\n     const CONVENTIONS_STABLE: &str = \"`C` or `cdecl`\";\n     const UNSTABLE_EXPLAIN: &str =\n@@ -155,8 +154,7 @@ fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi\n         (true, false) => CONVENTIONS_UNSTABLE,\n     };\n \n-    let mut err = struct_span_err!(tcx.sess, span, E0045, \"{}, like {}\", ERROR_HEAD, conventions);\n-    err.span_label(span, ERROR_HEAD).emit();\n+    tcx.sess.emit_err(errors::VariadicFunctionCompatibleConvention { span, conventions });\n }\n \n fn require_same_types<'tcx>(\n@@ -258,15 +256,10 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     let main_fn_predicates = tcx.predicates_of(main_def_id);\n     if main_fn_generics.count() != 0 || !main_fnsig.bound_vars().is_empty() {\n         let generics_param_span = main_fn_generics_params_span(tcx, main_def_id);\n-        let msg = \"`main` function is not allowed to have generic \\\n-            parameters\";\n-        let mut diag =\n-            struct_span_err!(tcx.sess, generics_param_span.unwrap_or(main_span), E0131, \"{}\", msg);\n-        if let Some(generics_param_span) = generics_param_span {\n-            let label = \"`main` cannot have generic parameters\";\n-            diag.span_label(generics_param_span, label);\n-        }\n-        diag.emit();\n+        tcx.sess.emit_err(errors::MainFunctionGenericParameters {\n+            span: generics_param_span.unwrap_or(main_span),\n+            label_span: generics_param_span,\n+        });\n         error = true;\n     } else if !main_fn_predicates.predicates.is_empty() {\n         // generics may bring in implicit predicates, so we skip this check if generics is present.\n@@ -280,17 +273,8 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n \n     let main_asyncness = tcx.asyncness(main_def_id);\n     if let hir::IsAsync::Async = main_asyncness {\n-        let mut diag = struct_span_err!(\n-            tcx.sess,\n-            main_span,\n-            E0752,\n-            \"`main` function is not allowed to be `async`\"\n-        );\n         let asyncness_span = main_fn_asyncness_span(tcx, main_def_id);\n-        if let Some(asyncness_span) = asyncness_span {\n-            diag.span_label(asyncness_span, \"`main` function is not allowed to be `async`\");\n-        }\n-        diag.emit();\n+        tcx.sess.emit_err(errors::MainFunctionAsync { span: main_span, asyncness: asyncness_span });\n         error = true;\n     }\n \n@@ -308,9 +292,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         let return_ty = main_fnsig.output();\n         let return_ty_span = main_fn_return_type_span(tcx, main_def_id).unwrap_or(main_span);\n         if !return_ty.bound_vars().is_empty() {\n-            let msg = \"`main` function return type is not allowed to have generic \\\n-                    parameters\";\n-            struct_span_err!(tcx.sess, return_ty_span, E0131, \"{}\", msg).emit();\n+            tcx.sess.emit_err(errors::MainFunctionReturnTypeGeneric { span: return_ty_span });\n             error = true;\n         }\n         let return_ty = return_ty.skip_binder();\n@@ -367,56 +349,28 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n                 if let hir::ItemKind::Fn(sig, generics, _) = &it.kind {\n                     let mut error = false;\n                     if !generics.params.is_empty() {\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            generics.span,\n-                            E0132,\n-                            \"start function is not allowed to have type parameters\"\n-                        )\n-                        .span_label(generics.span, \"start function cannot have type parameters\")\n-                        .emit();\n+                        tcx.sess.emit_err(errors::StartFunctionParameters { span: generics.span });\n                         error = true;\n                     }\n                     if generics.has_where_clause_predicates {\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            generics.where_clause_span,\n-                            E0647,\n-                            \"start function is not allowed to have a `where` clause\"\n-                        )\n-                        .span_label(\n-                            generics.where_clause_span,\n-                            \"start function cannot have a `where` clause\",\n-                        )\n-                        .emit();\n+                        tcx.sess.emit_err(errors::StartFunctionWhere {\n+                            span: generics.where_clause_span,\n+                        });\n                         error = true;\n                     }\n                     if let hir::IsAsync::Async = sig.header.asyncness {\n                         let span = tcx.def_span(it.owner_id);\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            span,\n-                            E0752,\n-                            \"`start` is not allowed to be `async`\"\n-                        )\n-                        .span_label(span, \"`start` is not allowed to be `async`\")\n-                        .emit();\n+                        tcx.sess.emit_err(errors::StartAsync { span: span });\n                         error = true;\n                     }\n \n                     let attrs = tcx.hir().attrs(start_id);\n                     for attr in attrs {\n                         if attr.has_name(sym::track_caller) {\n-                            tcx.sess\n-                                .struct_span_err(\n-                                    attr.span,\n-                                    \"`start` is not allowed to be `#[track_caller]`\",\n-                                )\n-                                .span_label(\n-                                    start_span,\n-                                    \"`start` is not allowed to be `#[track_caller]`\",\n-                                )\n-                                .emit();\n+                            tcx.sess.emit_err(errors::StartTrackCaller {\n+                                span: attr.span,\n+                                start: start_span,\n+                            });\n                             error = true;\n                         }\n                     }"}]}