{"sha": "519ac81b578fcda24f8f71eb99f287bce829bb71", "node_id": "C_kwDOAAsO6NoAKDUxOWFjODFiNTc4ZmNkYTI0ZjhmNzFlYjk5ZjI4N2JjZTgyOWJiNzE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T13:15:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T13:15:21Z"}, "message": "internal: Move most remaining keyword completions to item list completions", "tree": {"sha": "3342f15843fdc728e406c3d9a8bdeb00235cef8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3342f15843fdc728e406c3d9a8bdeb00235cef8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/519ac81b578fcda24f8f71eb99f287bce829bb71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/519ac81b578fcda24f8f71eb99f287bce829bb71", "html_url": "https://github.com/rust-lang/rust/commit/519ac81b578fcda24f8f71eb99f287bce829bb71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/519ac81b578fcda24f8f71eb99f287bce829bb71/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5c7aafffa5a424302275677da39f666f498d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5c7aafffa5a424302275677da39f666f498d3e", "html_url": "https://github.com/rust-lang/rust/commit/4f5c7aafffa5a424302275677da39f666f498d3e"}], "stats": {"total": 278, "additions": 135, "deletions": 143}, "files": [{"sha": "b78ed26ec3ff5c035bd1105e193b801a9269b561", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 101, "deletions": 7, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=519ac81b578fcda24f8f71eb99f287bce829bb71", "patch": "@@ -2,22 +2,98 @@\n \n use crate::{\n     completions::module_or_fn_macro,\n-    context::{PathCompletionCtx, PathKind, PathQualifierCtx},\n-    CompletionContext, Completions,\n+    context::{ItemListKind, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    CompletionContext, CompletionItem, CompletionItemKind, Completions,\n };\n \n pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext) {\n     let _p = profile::span(\"complete_item_list\");\n \n-    let (&is_absolute_path, path_qualifier, _kind) = match ctx.path_context() {\n+    let (&is_absolute_path, path_qualifier, kind) = match ctx.path_context() {\n         Some(PathCompletionCtx {\n             kind: PathKind::Item { kind },\n             is_absolute_path,\n             qualifier,\n             ..\n-        }) => (is_absolute_path, qualifier, kind),\n+        }) => (is_absolute_path, qualifier, Some(kind)),\n+        Some(PathCompletionCtx {\n+            kind: PathKind::Expr { in_block_expr: true, .. },\n+            is_absolute_path,\n+            qualifier,\n+            ..\n+        }) => (is_absolute_path, qualifier, None),\n         _ => return,\n     };\n+    let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n+\n+    let in_item_list = matches!(kind, Some(ItemListKind::SourceFile | ItemListKind::Module) | None);\n+    let in_assoc_non_trait_impl = matches!(kind, Some(ItemListKind::Impl | ItemListKind::Trait));\n+    let in_extern_block = matches!(kind, Some(ItemListKind::ExternBlock));\n+    let in_trait = matches!(kind, Some(ItemListKind::Trait));\n+    let in_trait_impl = matches!(kind, Some(ItemListKind::TraitImpl));\n+    let in_inherent_impl = matches!(kind, Some(ItemListKind::Impl));\n+    let no_qualifiers = ctx.qualifier_ctx.vis_node.is_none();\n+    let in_block = matches!(kind, None);\n+\n+    'block: loop {\n+        if path_qualifier.is_some() {\n+            break 'block;\n+        }\n+        if !in_trait_impl {\n+            if ctx.qualifier_ctx.unsafe_tok.is_some() {\n+                if in_item_list || in_assoc_non_trait_impl {\n+                    add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\");\n+                }\n+                if in_item_list {\n+                    add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n+                    if no_qualifiers {\n+                        add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n+                    }\n+                }\n+                break 'block;\n+            }\n+\n+            if in_item_list {\n+                add_keyword(\"enum\", \"enum $1 {\\n    $0\\n}\");\n+                add_keyword(\"mod\", \"mod $0\");\n+                add_keyword(\"static\", \"static $0\");\n+                add_keyword(\"struct\", \"struct $0\");\n+                add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n+                add_keyword(\"union\", \"union $1 {\\n    $0\\n}\");\n+                add_keyword(\"use\", \"use $0\");\n+                if no_qualifiers {\n+                    add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n+                }\n+            }\n+\n+            if !in_trait && !in_block && no_qualifiers {\n+                add_keyword(\"pub(crate)\", \"pub(crate)\");\n+                add_keyword(\"pub(super)\", \"pub(super)\");\n+                add_keyword(\"pub\", \"pub\");\n+            }\n+\n+            if in_extern_block {\n+                add_keyword(\"fn\", \"fn $1($2);\");\n+            } else {\n+                if !in_inherent_impl {\n+                    if !in_trait {\n+                        add_keyword(\"extern\", \"extern $0\");\n+                    }\n+                    add_keyword(\"type\", \"type $0\");\n+                }\n+\n+                add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\");\n+                add_keyword(\"unsafe\", \"unsafe\");\n+                add_keyword(\"const\", \"const $0\");\n+            }\n+        }\n+        break 'block;\n+    }\n+\n+    if kind.is_none() {\n+        // this is already handled by expression\n+        return;\n+    }\n \n     match path_qualifier {\n         Some(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n@@ -33,9 +109,7 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n                 acc.add_keyword(ctx, \"super::\");\n             }\n         }\n-        None if is_absolute_path => {\n-            acc.add_crate_roots(ctx);\n-        }\n+        None if is_absolute_path => acc.add_crate_roots(ctx),\n         None if ctx.qualifier_ctx.none() => {\n             ctx.process_all_names(&mut |name, def| {\n                 if let Some(def) = module_or_fn_macro(ctx.db, def) {\n@@ -47,3 +121,23 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n         None => {}\n     }\n }\n+\n+pub(super) fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n+    let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n+\n+    match ctx.config.snippet_cap {\n+        Some(cap) => {\n+            if snippet.ends_with('}') && ctx.incomplete_let {\n+                // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n+                cov_mark::hit!(let_semi);\n+                item.insert_snippet(cap, format!(\"{};\", snippet));\n+            } else {\n+                item.insert_snippet(cap, snippet);\n+            }\n+        }\n+        None => {\n+            item.insert_text(if snippet.contains('$') { kw } else { snippet });\n+        }\n+    };\n+    item.add_to(acc);\n+}"}, {"sha": "d55046e71075885ab2d74ff258f4ace48ce68473", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=519ac81b578fcda24f8f71eb99f287bce829bb71", "patch": "@@ -2,8 +2,6 @@\n //! - `self`, `super` and `crate`, as these are considered part of path completions.\n //! - `await`, as this is a postfix completion we handle this in the postfix completions.\n \n-use syntax::T;\n-\n use crate::{\n     context::{NameRefContext, PathKind},\n     CompletionContext, CompletionItem, CompletionItemKind, Completions,\n@@ -24,10 +22,6 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n \n     let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n \n-    let expects_assoc_item = ctx.expects_assoc_item();\n-    let has_block_expr_parent = ctx.has_block_expr_parent();\n-    let expects_item = ctx.expects_item();\n-\n     if let Some(PathKind::Vis { .. }) = ctx.path_kind() {\n         return;\n     }\n@@ -38,50 +32,6 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         }\n         return;\n     }\n-    if ctx.previous_token_is(T![unsafe]) {\n-        if expects_item || expects_assoc_item || has_block_expr_parent {\n-            add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\")\n-        }\n-\n-        if expects_item || has_block_expr_parent {\n-            add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n-            add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n-        }\n-\n-        return;\n-    }\n-\n-    if ctx.qualifier_ctx.vis_node.is_none()\n-        && (expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_field())\n-    {\n-        add_keyword(\"pub(crate)\", \"pub(crate)\");\n-        add_keyword(\"pub(super)\", \"pub(super)\");\n-        add_keyword(\"pub\", \"pub\");\n-    }\n-\n-    if expects_item || expects_assoc_item || has_block_expr_parent {\n-        add_keyword(\"unsafe\", \"unsafe\");\n-        add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\");\n-        add_keyword(\"const\", \"const $0\");\n-        add_keyword(\"type\", \"type $0\");\n-    }\n-\n-    if expects_item || has_block_expr_parent {\n-        if ctx.qualifier_ctx.vis_node.is_none() {\n-            add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n-            add_keyword(\"extern\", \"extern $0\");\n-        }\n-        add_keyword(\"use\", \"use $0\");\n-        add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n-        add_keyword(\"static\", \"static $0\");\n-        add_keyword(\"mod\", \"mod $0\");\n-    }\n-\n-    if expects_item || has_block_expr_parent {\n-        add_keyword(\"enum\", \"enum $1 {\\n    $0\\n}\");\n-        add_keyword(\"struct\", \"struct $0\");\n-        add_keyword(\"union\", \"union $1 {\\n    $0\\n}\");\n-    }\n }\n \n pub(super) fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {"}, {"sha": "4eac86162a3dbe9a71d9ef5ec5fae453402182f9", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=519ac81b578fcda24f8f71eb99f287bce829bb71", "patch": "@@ -71,6 +71,7 @@ pub(super) enum ItemListKind {\n     SourceFile,\n     Module,\n     Impl,\n+    TraitImpl,\n     Trait,\n     ExternBlock,\n }\n@@ -335,10 +336,6 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::Trait | ImmediateLocation::Impl))\n     }\n \n-    pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Impl))\n-    }\n-\n     pub(crate) fn expects_item(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::ItemList))\n     }\n@@ -348,19 +345,10 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::GenericArgList(_)))\n     }\n \n-    pub(crate) fn has_block_expr_parent(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::StmtList))\n-    }\n-\n     pub(crate) fn expects_ident_ref_expr(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::RefExpr))\n     }\n \n-    pub(crate) fn expect_field(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::TupleField))\n-            || matches!(self.name_ctx(), Some(NameContext { kind: NameKind::RecordField, .. }))\n-    }\n-\n     /// Whether the cursor is right after a trait or impl header.\n     /// trait Foo ident$0\n     // FIXME: This probably shouldn't exist\n@@ -1276,10 +1264,19 @@ impl<'a> CompletionContext<'a> {\n                             Some(SyntaxKind::MACRO_PAT) => Some(PathKind::Pat),\n                             Some(SyntaxKind::MACRO_TYPE) => Some(PathKind::Type),\n                             Some(SyntaxKind::ITEM_LIST) => Some(PathKind::Item { kind: ItemListKind::Module }),\n-                            Some(SyntaxKind::ASSOC_ITEM_LIST) => Some(PathKind::Item { kind: match parent.and_then(|it| it.parent()).map(|it| it.kind()) {\n-                                Some(SyntaxKind::TRAIT) => ItemListKind::Trait,\n-                                Some(SyntaxKind::IMPL) => ItemListKind::Impl,\n-                                _ => return Some(None),\n+                            Some(SyntaxKind::ASSOC_ITEM_LIST) => Some(PathKind::Item { kind: match parent.and_then(|it| it.parent()) {\n+                                Some(it) => match_ast! {\n+                                    match it {\n+                                        ast::Trait(_) => ItemListKind::Trait,\n+                                        ast::Impl(it) => if it.trait_().is_some() {\n+                                            ItemListKind::TraitImpl\n+                                        } else {\n+                                            ItemListKind::Impl\n+                                        },\n+                                        _ => return Some(None)\n+                                    }\n+                                },\n+                                None => return Some(None),\n                             } }),\n                             Some(SyntaxKind::EXTERN_ITEM_LIST) => Some(PathKind::Item { kind: ItemListKind::ExternBlock }),\n                             Some(SyntaxKind::SOURCE_FILE) => Some(PathKind::Item { kind: ItemListKind::SourceFile }),\n@@ -1313,12 +1310,18 @@ impl<'a> CompletionContext<'a> {\n                     ast::UseTree(_) => Some(PathKind::Use),\n                     ast::ItemList(_) => Some(PathKind::Item { kind: ItemListKind::Module }),\n                     ast::AssocItemList(it) => Some(PathKind::Item { kind: {\n-                            match it.syntax().parent()?.kind() {\n-                                SyntaxKind::TRAIT => ItemListKind::Trait,\n-                                SyntaxKind::IMPL => ItemListKind::Impl,\n-                                _ => return None,\n+                        match_ast! {\n+                            match (it.syntax().parent()?) {\n+                                ast::Trait(_) => ItemListKind::Trait,\n+                                ast::Impl(it) => if it.trait_().is_some() {\n+                                    ItemListKind::TraitImpl\n+                                } else {\n+                                    ItemListKind::Impl\n+                                },\n+                                _ => return None\n                             }\n-                        }}),\n+                        }\n+                    }}),\n                     ast::ExternItemList(_) => Some(PathKind::Item { kind: ItemListKind::ExternBlock }),\n                     ast::SourceFile(_) => Some(PathKind::Item { kind: ItemListKind::SourceFile }),\n                     _ => return None,"}, {"sha": "d1f5d2a33c002a11afad3c15907aacc1be709875", "filename": "crates/ide-completion/src/tests/item.rs", "status": "modified", "additions": 6, "deletions": 49, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs?ref=519ac81b578fcda24f8f71eb99f287bce829bb71", "patch": "@@ -88,69 +88,26 @@ fn after_target_name_in_impl() {\n \n #[test]\n fn after_struct_name() {\n-    // FIXME: This should emit `kw where` only\n-    check(\n-        r\"struct Struct $0\",\n-        expect![[r#\"\n-            kw const\n-            kw enum\n-            kw extern\n-            kw fn\n-            kw impl\n-            kw mod\n-            kw pub\n-            kw pub(crate)\n-            kw pub(super)\n-            kw static\n-            kw struct\n-            kw trait\n-            kw type\n-            kw union\n-            kw unsafe\n-            kw use\n-        \"#]],\n-    );\n+    // FIXME: This should emit `kw where`\n+    check(r\"struct Struct $0\", expect![[r#\"\"#]]);\n }\n \n #[test]\n fn after_fn_name() {\n-    // FIXME: This should emit `kw where` only\n-    check(\n-        r\"fn func() $0\",\n-        expect![[r#\"\n-            kw const\n-            kw enum\n-            kw extern\n-            kw fn\n-            kw impl\n-            kw mod\n-            kw pub\n-            kw pub(crate)\n-            kw pub(super)\n-            kw static\n-            kw struct\n-            kw trait\n-            kw type\n-            kw union\n-            kw unsafe\n-            kw use\n-        \"#]],\n-    );\n+    // FIXME: This should emit `kw where`\n+    check(r\"fn func() $0\", expect![[r#\"\"#]]);\n }\n \n #[test]\n fn before_record_field() {\n+    // FIXME: This should emit visibility qualifiers\n     check(\n         r#\"\n struct Foo {\n     $0\n     pub f: i32,\n }\n \"#,\n-        expect![[r#\"\n-            kw pub\n-            kw pub(crate)\n-            kw pub(super)\n-        \"#]],\n+        expect![[r#\"\"#]],\n     )\n }"}, {"sha": "edc896636f474347954cd7d39d54edfb3b43fc84", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=519ac81b578fcda24f8f71eb99f287bce829bb71", "patch": "@@ -137,6 +137,7 @@ fn after_visibility() {\n         expect![[r#\"\n             kw const\n             kw enum\n+            kw extern\n             kw fn\n             kw mod\n             kw static\n@@ -152,12 +153,10 @@ fn after_visibility() {\n \n #[test]\n fn after_visibility_unsafe() {\n-    // FIXME this shouldn't show `impl`\n     check(\n         r#\"pub unsafe $0\"#,\n         expect![[r#\"\n             kw fn\n-            kw impl\n             kw trait\n         \"#]],\n     );\n@@ -178,7 +177,6 @@ fn in_impl_assoc_item_list() {\n             kw pub(super)\n             kw self::\n             kw super::\n-            kw type\n             kw unsafe\n         \"#]],\n     )\n@@ -199,7 +197,6 @@ fn in_impl_assoc_item_list_after_attr() {\n             kw pub(super)\n             kw self::\n             kw super::\n-            kw type\n             kw unsafe\n         \"#]],\n     )\n@@ -249,16 +246,9 @@ impl Test for () {\n             ma makro!(\u2026)          macro_rules! makro\n             md module\n             ta type Type1 =\n-            kw const\n             kw crate::\n-            kw fn\n-            kw pub\n-            kw pub(crate)\n-            kw pub(super)\n             kw self::\n             kw super::\n-            kw type\n-            kw unsafe\n         \"#]],\n     );\n }"}, {"sha": "76942110f88b114e4991def8c0e9761009787ca1", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519ac81b578fcda24f8f71eb99f287bce829bb71/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=519ac81b578fcda24f8f71eb99f287bce829bb71", "patch": "@@ -38,13 +38,14 @@ struct Foo<'lt, T, const C: usize> {\n \n #[test]\n fn tuple_struct_field() {\n+    // FIXME: This should emit visibility qualifiers\n     check(\n         r#\"\n struct Foo<'lt, T, const C: usize>(f$0);\n \"#,\n         expect![[r#\"\n             en Enum\n-            ma makro!(\u2026)  macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             md module\n             sp Self\n             st Foo<\u2026>\n@@ -56,9 +57,6 @@ struct Foo<'lt, T, const C: usize>(f$0);\n             un Union\n             bt u32\n             kw crate::\n-            kw pub\n-            kw pub(crate)\n-            kw pub(super)\n             kw self::\n             kw super::\n         \"#]],"}]}