{"sha": "0dd9eef1b9bce0b5b6260c620f5e37f50b618ae5", "node_id": "C_kwDOAAsO6NoAKDBkZDllZWYxYjliY2UwYjViNjI2MGM2MjBmNWUzN2Y1MGI2MThhZTU", "commit": {"author": {"name": "austaras", "email": "austaras@outlook.com", "date": "2022-08-26T10:09:34Z"}, "committer": {"name": "austaras", "email": "austaras@outlook.com", "date": "2022-08-28T16:24:56Z"}, "message": "add type check", "tree": {"sha": "77b99410e6be7f2b8228f938ed962c02a19e3561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b99410e6be7f2b8228f938ed962c02a19e3561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd9eef1b9bce0b5b6260c620f5e37f50b618ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd9eef1b9bce0b5b6260c620f5e37f50b618ae5", "html_url": "https://github.com/rust-lang/rust/commit/0dd9eef1b9bce0b5b6260c620f5e37f50b618ae5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd9eef1b9bce0b5b6260c620f5e37f50b618ae5/comments", "author": {"login": "Austaras", "id": 15013925, "node_id": "MDQ6VXNlcjE1MDEzOTI1", "avatar_url": "https://avatars.githubusercontent.com/u/15013925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Austaras", "html_url": "https://github.com/Austaras", "followers_url": "https://api.github.com/users/Austaras/followers", "following_url": "https://api.github.com/users/Austaras/following{/other_user}", "gists_url": "https://api.github.com/users/Austaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/Austaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Austaras/subscriptions", "organizations_url": "https://api.github.com/users/Austaras/orgs", "repos_url": "https://api.github.com/users/Austaras/repos", "events_url": "https://api.github.com/users/Austaras/events{/privacy}", "received_events_url": "https://api.github.com/users/Austaras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Austaras", "id": 15013925, "node_id": "MDQ6VXNlcjE1MDEzOTI1", "avatar_url": "https://avatars.githubusercontent.com/u/15013925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Austaras", "html_url": "https://github.com/Austaras", "followers_url": "https://api.github.com/users/Austaras/followers", "following_url": "https://api.github.com/users/Austaras/following{/other_user}", "gists_url": "https://api.github.com/users/Austaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/Austaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Austaras/subscriptions", "organizations_url": "https://api.github.com/users/Austaras/orgs", "repos_url": "https://api.github.com/users/Austaras/repos", "events_url": "https://api.github.com/users/Austaras/events{/privacy}", "received_events_url": "https://api.github.com/users/Austaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbaf2ce76e8f24ea5e59df1622f77f62cb02c719", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719", "html_url": "https://github.com/rust-lang/rust/commit/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "96314263c9738ca42f0cbcfe0cfa5dca610962de", "filename": "crates/ide-assists/src/handlers/replace_or_with_or_else.rs", "status": "modified", "additions": 72, "deletions": 3, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9eef1b9bce0b5b6260c620f5e37f50b618ae5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9eef1b9bce0b5b6260c620f5e37f50b618ae5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs?ref=0dd9eef1b9bce0b5b6260c620f5e37f50b618ae5", "patch": "@@ -1,6 +1,9 @@\n-use ide_db::assists::{AssistId, AssistKind};\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    famous_defs::FamousDefs,\n+};\n use syntax::{\n-    ast::{self, make, HasArgList},\n+    ast::{self, make, Expr, HasArgList},\n     AstNode,\n };\n \n@@ -21,6 +24,9 @@ use crate::{AssistContext, Assists};\n // ```\n pub(crate) fn replace_or_with_or_else(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n+\n+    is_option_or_result(call.receiver()?, ctx)?;\n+\n     let (name, arg_list) = (call.name_ref()?, call.arg_list()?);\n \n     let replace = match &*name.text() {\n@@ -76,6 +82,8 @@ pub(crate) fn replace_or_with_or_else(acc: &mut Assists, ctx: &AssistContext<'_>\n pub(crate) fn replace_or_else_with_or(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n \n+    is_option_or_result(call.receiver()?, ctx)?;\n+\n     let (name, arg_list) = (call.name_ref()?, call.arg_list()?);\n \n     let replace = match &*name.text() {\n@@ -115,9 +123,32 @@ pub(crate) fn replace_or_else_with_or(acc: &mut Assists, ctx: &AssistContext<'_>\n     )\n }\n \n+fn is_option_or_result(receiver: Expr, ctx: &AssistContext<'_>) -> Option<()> {\n+    let ty = ctx.sema.type_of_expr(&receiver)?.adjusted().as_adt()?.as_enum()?;\n+    let option_enum =\n+        FamousDefs(&ctx.sema, ctx.sema.scope(receiver.syntax())?.krate()).core_option_Option();\n+\n+    if let Some(option_enum) = option_enum {\n+        if ty == option_enum {\n+            return Some(());\n+        }\n+    }\n+\n+    let result_enum =\n+        FamousDefs(&ctx.sema, ctx.sema.scope(receiver.syntax())?.krate()).core_result_Result();\n+\n+    if let Some(result_enum) = result_enum {\n+        if ty == result_enum {\n+            return Some(());\n+        }\n+    }\n+\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n-    use crate::tests::check_assist;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n@@ -126,6 +157,7 @@ mod tests {\n         check_assist(\n             replace_or_with_or_else,\n             r#\"\n+//- minicore: option\n fn foo() {\n     let foo = Some(1);\n     return foo.unwrap_$0or(2);\n@@ -145,6 +177,7 @@ fn foo() {\n         check_assist(\n             replace_or_with_or_else,\n             r#\"\n+//- minicore: option\n fn foo() {\n     let foo = Some(1);\n     return foo.unwrap_$0or(x());\n@@ -164,6 +197,7 @@ fn foo() {\n         check_assist(\n             replace_or_with_or_else,\n             r#\"\n+//- minicore: option\n fn foo() {\n     let foo = Some(1);\n     return foo.unwrap_$0or({\n@@ -195,6 +229,7 @@ fn foo() {\n         check_assist(\n             replace_or_else_with_or,\n             r#\"\n+//- minicore: option\n fn foo() {\n     let foo = Some(1);\n     return foo.unwrap_$0or_else(|| 2);\n@@ -214,6 +249,7 @@ fn foo() {\n         check_assist(\n             replace_or_else_with_or,\n             r#\"\n+//- minicore: option\n fn foo() {\n     let foo = Some(1);\n     return foo.unwrap_$0or_else(x);\n@@ -224,6 +260,39 @@ fn foo() {\n     let foo = Some(1);\n     return foo.unwrap_or(x());\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_or_else_with_or_result() {\n+        check_assist(\n+            replace_or_else_with_or,\n+            r#\"\n+//- minicore: result\n+fn foo() {\n+    let foo = Ok(1);\n+    return foo.unwrap_$0or_else(x);\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    let foo = Ok(1);\n+    return foo.unwrap_or(x());\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_or_else_with_or_not_applicable() {\n+        check_assist_not_applicable(\n+            replace_or_else_with_or,\n+            r#\"\n+fn foo() {\n+    let foo = Ok(1);\n+    return foo.unwrap_$0or_else(x);\n+}\n \"#,\n         )\n     }"}]}