{"sha": "d243d686fd9dd717d7293429e2bf53fe84d76f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNDNkNjg2ZmQ5ZGQ3MTdkNzI5MzQyOWUyYmY1M2ZlODRkNzZmMTQ=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-07-02T14:15:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-02T14:15:57Z"}, "message": "Merge pull request #1054 from Manishearth/rustup\n\nRustup to ea0dc9297283daff6486807f43e190b4eb561412", "tree": {"sha": "042c181d06f975b35287509196a65dcef14cfb40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/042c181d06f975b35287509196a65dcef14cfb40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d243d686fd9dd717d7293429e2bf53fe84d76f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d243d686fd9dd717d7293429e2bf53fe84d76f14", "html_url": "https://github.com/rust-lang/rust/commit/d243d686fd9dd717d7293429e2bf53fe84d76f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d243d686fd9dd717d7293429e2bf53fe84d76f14/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb9786e7151afc2a1f9b6bbea6ce609d64606d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9786e7151afc2a1f9b6bbea6ce609d64606d45", "html_url": "https://github.com/rust-lang/rust/commit/cb9786e7151afc2a1f9b6bbea6ce609d64606d45"}, {"sha": "f609ac5b587f92947b3341a75e663b77ca73037c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f609ac5b587f92947b3341a75e663b77ca73037c", "html_url": "https://github.com/rust-lang/rust/commit/f609ac5b587f92947b3341a75e663b77ca73037c"}], "stats": {"total": 205, "additions": 107, "deletions": 98}, "files": [{"sha": "7fedd374948758691821319c81c4b11f48197905", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -1,7 +1,8 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n-## 0.0.78 - TBA\n+## 0.0.78 - 2016-07-02\n+* Rustup to *rustc 1.11.0-nightly (01411937f 2016-07-01)*\n * New lints: [`wrong_transmute`, `double_neg`]\n * For compatibility, `cargo clippy` does not defines the `clippy` feature\n   introduced in 0.0.76 anymore"}, {"sha": "f8b63a56257c4a59db3ebfd8fbfdda64e0b0600a", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.77\"\n+version = \"0.0.78\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -25,7 +25,7 @@ test = false\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.77\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.78\", path = \"clippy_lints\" }\n # end automatic update\n \n [dev-dependencies]"}, {"sha": "e74db2b17a64dd432f853d12a669a881e31f8141", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.77\"\n+version = \"0.0.78\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "672dee77783ea0706b21184052b1b5f4d5974002", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -3,6 +3,7 @@ use rustc::hir::*;\n use rustc::hir::intravisit::*;\n use syntax::ast::{LitKind, DUMMY_NODE_ID};\n use syntax::codemap::{DUMMY_SP, dummy_spanned};\n+use syntax::util::ThinVec;\n use utils::{span_lint_and_then, in_macro, snippet_opt, SpanlessEq};\n \n /// **What it does:** This lint checks for boolean expressions that can be written more concisely\n@@ -99,7 +100,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n                         Expr {\n                             id: DUMMY_NODE_ID,\n                             span: DUMMY_SP,\n-                            attrs: None,\n+                            attrs: ThinVec::new(),\n                             node: ExprBinary(dummy_spanned(op), lhs.clone(), rhs.clone()),\n                         }\n                     };"}, {"sha": "5725203727099b132014c28dd882a1b4589bd8f8", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -72,8 +72,8 @@ fn check_if(cx: &EarlyContext, expr: &ast::Expr) {\n fn check_collapsible_maybe_if_let(cx: &EarlyContext, else_: &ast::Expr) {\n     if_let_chain! {[\n         let ast::ExprKind::Block(ref block) = else_.node,\n-        block.stmts.is_empty(),\n-        let Some(ref else_) = block.expr,\n+        let Some(ref else_) = expr_block(block),\n+        !in_macro(cx, else_.span),\n     ], {\n         match else_.node {\n             ast::ExprKind::If(..) | ast::ExprKind::IfLet(..) => {\n@@ -96,7 +96,7 @@ fn check_collapsible_no_if_let(\n     then: &ast::Block,\n ) {\n     if_let_chain! {[\n-        let Some(inner) = single_stmt_of_block(then),\n+        let Some(inner) = expr_block(then),\n         let ast::ExprKind::If(ref check_inner, ref content, None) = inner.node,\n     ], {\n         if expr.span.expn_id != inner.span.expn_id {\n@@ -128,28 +128,16 @@ fn check_to_string(cx: &EarlyContext, e: &ast::Expr) -> Cow<'static, str> {\n     }\n }\n \n-fn single_stmt_of_block(block: &ast::Block) -> Option<&ast::Expr> {\n-    if block.stmts.len() == 1 && block.expr.is_none() {\n-        if let ast::StmtKind::Expr(ref expr, _) = block.stmts[0].node {\n-            single_stmt_of_expr(expr)\n-        } else {\n-            None\n-        }\n-    } else if block.stmts.is_empty() {\n-        if let Some(ref p) = block.expr {\n-            Some(p)\n-        } else {\n-            None\n+/// If the block contains only one expression, returns it.\n+fn expr_block(block: &ast::Block) -> Option<&ast::Expr> {\n+    let mut it = block.stmts.iter();\n+\n+    if let (Some(stmt), None) = (it.next(), it.next()) {\n+        match stmt.node {\n+            ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => Some(expr),\n+            _ => None,\n         }\n     } else {\n         None\n     }\n }\n-\n-fn single_stmt_of_expr(expr: &ast::Expr) -> Option<&ast::Expr> {\n-    if let ast::ExprKind::Block(ref block) = expr.node {\n-        single_stmt_of_block(block)\n-    } else {\n-        Some(expr)\n-    }\n-}"}, {"sha": "930fd7ae9a66c1c2e6ac7515d189f22984d762b7", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -59,21 +59,13 @@ impl EarlyLintPass for Formatting {\n     fn check_block(&mut self, cx: &EarlyContext, block: &ast::Block) {\n         for w in block.stmts.windows(2) {\n             match (&w[0].node, &w[1].node) {\n-                (&ast::StmtKind::Expr(ref first, _), &ast::StmtKind::Expr(ref second, _)) |\n-                (&ast::StmtKind::Expr(ref first, _), &ast::StmtKind::Semi(ref second, _)) => {\n+                (&ast::StmtKind::Expr(ref first), &ast::StmtKind::Expr(ref second)) |\n+                (&ast::StmtKind::Expr(ref first), &ast::StmtKind::Semi(ref second)) => {\n                     check_consecutive_ifs(cx, first, second);\n                 }\n                 _ => (),\n             }\n         }\n-\n-        if let Some(ref expr) = block.expr {\n-            if let Some(ref stmt) = block.stmts.iter().last() {\n-                if let ast::StmtKind::Expr(ref first, _) = stmt.node {\n-                    check_consecutive_ifs(cx, first, expr);\n-                }\n-            }\n-        }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext, expr: &ast::Expr) {"}, {"sha": "0afc2e8f7cefa6cdfbb6f0be009f0d2ec0c99dba", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::lint::*;\n use syntax::ast::*;\n-use utils::in_macro;\n+use utils::{in_macro, span_lint};\n \n /// **What it does:** This lints checks for items declared after some statement in a block\n ///\n@@ -44,26 +44,23 @@ impl EarlyLintPass for ItemsAfterStatements {\n         if in_macro(cx, item.span) {\n             return;\n         }\n-        let mut stmts = item.stmts.iter().map(|stmt| &stmt.node);\n+\n         // skip initial items\n-        while let Some(&StmtKind::Decl(ref decl, _)) = stmts.next() {\n-            if let DeclKind::Local(_) = decl.node {\n-                break;\n-            }\n-        }\n+        let stmts = item.stmts.iter()\n+                              .map(|stmt| &stmt.node)\n+                              .skip_while(|s| matches!(**s, StmtKind::Item(..)));\n+\n         // lint on all further items\n         for stmt in stmts {\n-            if let StmtKind::Decl(ref decl, _) = *stmt {\n-                if let DeclKind::Item(ref it) = decl.node {\n-                    if in_macro(cx, it.span) {\n-                        return;\n-                    }\n-                    cx.struct_span_lint(ITEMS_AFTER_STATEMENTS,\n-                                        it.span,\n-                                        \"adding items after statements is confusing, since items exist from the \\\n-                                         start of the scope\")\n-                      .emit();\n+            if let StmtKind::Item(ref it) = *stmt {\n+                if in_macro(cx, it.span) {\n+                    return;\n                 }\n+                span_lint(cx,\n+                          ITEMS_AFTER_STATEMENTS,\n+                          it.span,\n+                          \"adding items after statements is confusing, since items exist from the \\\n+                           start of the scope\");\n             }\n         }\n     }"}, {"sha": "45964cf3ce705d617309063a52971dc375a88915", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -171,15 +171,14 @@ impl EarlyLintPass for MiscEarly {\n     fn check_block(&mut self, cx: &EarlyContext, block: &Block) {\n         for w in block.stmts.windows(2) {\n             if_let_chain! {[\n-                let StmtKind::Decl(ref first, _) = w[0].node,\n-                let DeclKind::Local(ref local) = first.node,\n+                let StmtKind::Local(ref local) = w[0].node,\n                 let Option::Some(ref t) = local.init,\n-                let ExprKind::Closure(_,_,_,_) = t.node,\n-                let PatKind::Ident(_,sp_ident,_) = local.pat.node,\n-                let StmtKind::Semi(ref second,_) = w[1].node,\n-                let ExprKind::Assign(_,ref call) = second.node,\n-                let ExprKind::Call(ref closure,_) = call.node,\n-                let ExprKind::Path(_,ref path) = closure.node\n+                let ExprKind::Closure(_, _, _, _) = t.node,\n+                let PatKind::Ident(_, sp_ident, _) = local.pat.node,\n+                let StmtKind::Semi(ref second) = w[1].node,\n+                let ExprKind::Assign(_, ref call) = second.node,\n+                let ExprKind::Call(ref closure, _) = call.node,\n+                let ExprKind::Path(_, ref path) = closure.node\n             ], {\n                 if sp_ident.node == (&path.segments[0]).identifier {\n                     span_lint(cx, REDUNDANT_CLOSURE_CALL, second.span, \"Closure called just once immediately after it was declared\");"}, {"sha": "17f12afcaec9c5dd8c2140d1a7b0244bfbf3dd5e", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -68,8 +68,8 @@ const WHITELIST: &'static [&'static [&'static str]] = &[\n \n struct SimilarNamesNameVisitor<'a, 'b: 'a, 'c: 'b>(&'a mut SimilarNamesLocalVisitor<'b, 'c>);\n \n-impl<'v, 'a, 'b, 'c> Visitor<'v> for SimilarNamesNameVisitor<'a, 'b, 'c> {\n-    fn visit_pat(&mut self, pat: &'v Pat) {\n+impl<'a, 'b, 'c> Visitor for SimilarNamesNameVisitor<'a, 'b, 'c> {\n+    fn visit_pat(&mut self, pat: &Pat) {\n         match pat.node {\n             PatKind::Ident(_, id, _) => self.check_name(id.span, id.node.name),\n             PatKind::Struct(_, ref fields, _) => {\n@@ -226,25 +226,25 @@ impl<'a, 'b> SimilarNamesLocalVisitor<'a, 'b> {\n     }\n }\n \n-impl<'v, 'a, 'b> Visitor<'v> for SimilarNamesLocalVisitor<'a, 'b> {\n-    fn visit_local(&mut self, local: &'v Local) {\n+impl<'a, 'b> Visitor for SimilarNamesLocalVisitor<'a, 'b> {\n+    fn visit_local(&mut self, local: &Local) {\n         if let Some(ref init) = local.init {\n             self.apply(|this| walk_expr(this, &**init));\n         }\n         // add the pattern after the expression because the bindings aren't available yet in the init expression\n         SimilarNamesNameVisitor(self).visit_pat(&*local.pat);\n     }\n-    fn visit_block(&mut self, blk: &'v Block) {\n+    fn visit_block(&mut self, blk: &Block) {\n         self.apply(|this| walk_block(this, blk));\n     }\n-    fn visit_arm(&mut self, arm: &'v Arm) {\n+    fn visit_arm(&mut self, arm: &Arm) {\n         self.apply(|this| {\n             // just go through the first pattern, as either all patterns bind the same bindings or rustc would have errored much earlier\n             SimilarNamesNameVisitor(this).visit_pat(&arm.pats[0]);\n             this.apply(|this| walk_expr(this, &arm.body));\n         });\n     }\n-    fn visit_item(&mut self, _: &'v Item) {\n+    fn visit_item(&mut self, _: &Item) {\n         // do not recurse into inner items\n     }\n }"}, {"sha": "fda151cd6d7e1f186765647b1c450282782908fe", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -36,13 +36,12 @@ pub struct ReturnPass;\n impl ReturnPass {\n     // Check the final stmt or expr in a block for unnecessary return.\n     fn check_block_return(&mut self, cx: &EarlyContext, block: &Block) {\n-        if let Some(ref expr) = block.expr {\n-            self.check_final_expr(cx, expr);\n-        } else if let Some(stmt) = block.stmts.last() {\n-            if let StmtKind::Semi(ref expr, _) = stmt.node {\n-                if let ExprKind::Ret(Some(ref inner)) = expr.node {\n-                    self.emit_return_lint(cx, (stmt.span, inner.span));\n+        if let Some(stmt) = block.stmts.last() {\n+            match stmt.node {\n+                StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => {\n+                    self.check_final_expr(cx, expr);\n                 }\n+                _ => (),\n             }\n         }\n     }\n@@ -88,12 +87,14 @@ impl ReturnPass {\n \n     // Check for \"let x = EXPR; x\"\n     fn check_let_return(&mut self, cx: &EarlyContext, block: &Block) {\n+        let mut it = block.stmts.iter();\n+\n         // we need both a let-binding stmt and an expr\n         if_let_chain! {[\n-            let Some(stmt) = block.stmts.last(),\n-            let Some(ref retexpr) = block.expr,\n-            let StmtKind::Decl(ref decl, _) = stmt.node,\n-            let DeclKind::Local(ref local) = decl.node,\n+            let Some(ref retexpr) = it.next_back(),\n+            let StmtKind::Expr(ref retexpr) = retexpr.node,\n+            let Some(stmt) = it.next_back(),\n+            let StmtKind::Local(ref local) = stmt.node,\n             let Some(ref initexpr) = local.init,\n             let PatKind::Ident(_, Spanned { node: id, .. }, _) = local.pat.node,\n             let ExprKind::Path(_, ref path) = retexpr.node,"}, {"sha": "4b0c5ea5afde4db8118f39a562c36e6420c2dfb1", "filename": "mini-macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/mini-macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/mini-macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini-macro%2Fsrc%2Flib.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -5,7 +5,7 @@ extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::codemap::Span;\n-use syntax::ast::TokenTree;\n+use syntax::tokenstream::TokenTree;\n use syntax::ext::base::{ExtCtxt, MacResult, MacEager};\n use syntax::ext::build::AstBuilder;  // trait for expr_usize\n use rustc_plugin::Registry;"}, {"sha": "c4ad6d66177a8c812239070240b1ca4225b84a81", "filename": "src/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -2,17 +2,17 @@\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n \n-extern crate rustc_driver;\n+extern crate clippy_lints;\n extern crate getopts;\n extern crate rustc;\n-extern crate syntax;\n+extern crate rustc_driver;\n+extern crate rustc_errors;\n extern crate rustc_plugin;\n-extern crate clippy_lints;\n+extern crate syntax;\n \n use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n use rustc::session::{config, Session};\n use rustc::session::config::{Input, ErrorOutputType};\n-use syntax::diagnostics;\n use std::path::PathBuf;\n use std::process::Command;\n \n@@ -36,7 +36,7 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,\n                       sopts: &config::Options,\n-                      descriptions: &diagnostics::registry::Registry,\n+                      descriptions: &rustc_errors::registry::Registry,\n                       output: ErrorOutputType)\n                       -> Compilation {\n         self.0.early_callback(matches, sopts, descriptions, output)\n@@ -46,7 +46,7 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n                 sopts: &config::Options,\n                 odir: &Option<PathBuf>,\n                 ofile: &Option<PathBuf>,\n-                descriptions: &diagnostics::registry::Registry)\n+                descriptions: &rustc_errors::registry::Registry)\n                 -> Option<(Input, Option<PathBuf>)> {\n         self.0.no_input(matches, sopts, odir, ofile, descriptions)\n     }"}, {"sha": "e51e31c693790b04271b072be3b749b2abc8947c", "filename": "tests/compile-fail/collapsible_if.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fcompile-fail%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fcompile-fail%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcollapsible_if.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -139,4 +139,9 @@ fn main() {\n             println!(\"world!\")\n         }\n     }\n+\n+    if true {\n+    } else {\n+        assert!(true); // assert! is just an `if`\n+    }\n }"}, {"sha": "9b8146dc2293fff49c67264e02e069d6d791c69d", "filename": "tests/compile-fail/formatting.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fcompile-fail%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fcompile-fail%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformatting.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -16,7 +16,9 @@ fn main() {\n     //~| NOTE add the missing `else` or\n     }\n \n-    let _ = {\n+    let _ = { // if as the last expression\n+        let _ = 0;\n+\n         if foo() {\n         } if foo() {\n         //~^ ERROR this looks like an `else if` but the `else` is missing\n@@ -26,6 +28,18 @@ fn main() {\n         }\n     };\n \n+    let _ = { // if in the middle of a block\n+        if foo() {\n+        } if foo() {\n+        //~^ ERROR this looks like an `else if` but the `else` is missing\n+        //~| NOTE add the missing `else` or\n+        }\n+        else {\n+        }\n+\n+        let _ = 0;\n+    };\n+\n     if foo() {\n     } else\n     //~^ ERROR this is an `else if` but the formatting might hide it"}, {"sha": "4be89176fc7d1df080d45264a6981d9fc433e146", "filename": "tests/compile-fail/item_after_statement.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fcompile-fail%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fcompile-fail%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fitem_after_statement.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -2,6 +2,16 @@\n #![plugin(clippy)]\n #![deny(items_after_statements)]\n \n+fn ok() {\n+    fn foo() { println!(\"foo\"); }\n+    foo();\n+}\n+\n+fn last() {\n+    foo();\n+    fn foo() { println!(\"foo\"); } //~ ERROR adding items after statements is confusing\n+}\n+\n fn main() {\n     foo();\n     fn foo() { println!(\"foo\"); } //~ ERROR adding items after statements is confusing"}, {"sha": "480c16f16660c6a22d5887a5261f9e37a312d115", "filename": "tests/compile-fail/needless_bool.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fcompile-fail%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fcompile-fail%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_bool.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -1,8 +1,8 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n+#![deny(needless_bool)]\n \n #[allow(if_same_then_else)]\n-#[deny(needless_bool)]\n fn main() {\n     let x = true;\n     if x { true } else { true }; //~ERROR this if-then-else expression will always return true\n@@ -22,27 +22,27 @@ fn main() {\n     bool_ret4(x);\n }\n \n-#[deny(needless_bool)]\n-#[allow(if_same_then_else)]\n+#[allow(if_same_then_else, needless_return)]\n fn bool_ret(x: bool) -> bool {\n-    if x { return true } else { return true }; //~ERROR this if-then-else expression will always return true\n+    if x { return true } else { return true };\n+    //~^ ERROR this if-then-else expression will always return true\n }\n \n-#[deny(needless_bool)]\n-#[allow(if_same_then_else)]\n+#[allow(if_same_then_else, needless_return)]\n fn bool_ret2(x: bool) -> bool {\n-    if x { return false } else { return false }; //~ERROR this if-then-else expression will always return false\n+    if x { return false } else { return false };\n+    //~^ ERROR this if-then-else expression will always return false\n }\n \n-#[deny(needless_bool)]\n+#[allow(needless_return)]\n fn bool_ret3(x: bool) -> bool {\n     if x { return true } else { return false };\n     //~^ ERROR this if-then-else expression returns a bool literal\n     //~| HELP you can reduce it to\n     //~| SUGGESTION `return x`\n }\n \n-#[deny(needless_bool)]\n+#[allow(needless_return)]\n fn bool_ret4(x: bool) -> bool {\n     if x { return false } else { return true };\n     //~^ ERROR this if-then-else expression returns a bool literal"}, {"sha": "773b889ebff76b8e84177905aa0b8570d8cab74f", "filename": "tests/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243d686fd9dd717d7293429e2bf53fe84d76f14/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=d243d686fd9dd717d7293429e2bf53fe84d76f14", "patch": "@@ -14,6 +14,7 @@ use syntax::ast::{LitIntType, LitKind, StrStyle};\n use syntax::codemap::{Spanned, COMMAND_LINE_SP};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n+use syntax::util::ThinVec;\n \n fn spanned<T>(t: T) -> Spanned<T> {\n     Spanned {\n@@ -27,7 +28,7 @@ fn expr(n: Expr_) -> Expr {\n         id: 1,\n         node: n,\n         span: COMMAND_LINE_SP,\n-        attrs: None,\n+        attrs: ThinVec::new(),\n     }\n }\n "}]}