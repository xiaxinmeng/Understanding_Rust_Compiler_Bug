{"sha": "01bf0725b146b0cf71c21ec8452067f9bd3de1d8", "node_id": "C_kwDOAAsO6NoAKDAxYmYwNzI1YjE0NmIwY2Y3MWMyMWVjODQ1MjA2N2Y5YmQzZGUxZDg", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-15T08:14:49Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-15T08:18:09Z"}, "message": "fix: don't replace `SyntaxToken` with `SyntaxNode`", "tree": {"sha": "c58422c04a09c473450dc674f20dc5d78c36286d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c58422c04a09c473450dc674f20dc5d78c36286d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bf0725b146b0cf71c21ec8452067f9bd3de1d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQRf5IACgkQ4laYqTBY\nYXGNGg/+PJdEAd1WGxl9TBsJGGRL5fvJf7hjV3I4wxQRPsKugzPntVROuho09B0h\n5mC4URbwciKk/8bDoC3W3KWuMEoAsnbzQUwFjFEaMpwMC+xHDoXrUsqYdOXCxuVw\nHo34e9OH7u7OSzY6I8bF+oUBurVwmkTF+u0BqrelVP/H5Z9YYPsykp0PiRRF9c7c\nwC53aKs+6Fn8tNiWWWyMBKGUqthX8otNIMhF3NHbXxBtxM7PkBvHNDVOECzE76aO\nKyMx8GXneUawnSHAfJnY48lU8RbiDrTOUZWRwpayj1XdPT56kz/+YRFxQ0rzoF2F\nxLmiLJ1VWJmgG8z7aAD83AqDm+z2MGIxAhCb7roRry4ElLkTLc1j+XYBFXgfBnHh\n/S/7grMDtfyUOYysZ+qxA5bb0H9aj2sSsIOqHPBK6HaswV9XeZfegkV0fR9gC3sR\npT9DnJbg9YClrOz/CJKlQkagHWgtPOmsulFWw1jrJL6TEhxUX85b2y30ZgMmFyFR\nZiOQbWGeZr/R2ZDtLuxlgTfi0WwrnYIh5SmvS4H7RpinEe0O2oKFYFnjY5RLWwQH\nvuT/ydA6eTpkvSlN14/zZr3+wUVSBCoycqBV3EHno6N12LphnYDT5yPabUPU5tZa\ndSF1a69XYxnxR/s9BKtzvOEr32XBE64zzLDXgplRdK0dmu2XvC4=\n=zElc\n-----END PGP SIGNATURE-----", "payload": "tree c58422c04a09c473450dc674f20dc5d78c36286d\nparent b4d7ea0692f2a72276704109ee13ffb3284f4863\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1678868089 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1678868289 +0900\n\nfix: don't replace `SyntaxToken` with `SyntaxNode`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bf0725b146b0cf71c21ec8452067f9bd3de1d8", "html_url": "https://github.com/rust-lang/rust/commit/01bf0725b146b0cf71c21ec8452067f9bd3de1d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bf0725b146b0cf71c21ec8452067f9bd3de1d8/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4d7ea0692f2a72276704109ee13ffb3284f4863", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d7ea0692f2a72276704109ee13ffb3284f4863", "html_url": "https://github.com/rust-lang/rust/commit/b4d7ea0692f2a72276704109ee13ffb3284f4863"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "28d815e81b49d88d07fa3e19cac12c4f6a88b2dc", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/01bf0725b146b0cf71c21ec8452067f9bd3de1d8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bf0725b146b0cf71c21ec8452067f9bd3de1d8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=01bf0725b146b0cf71c21ec8452067f9bd3de1d8", "patch": "@@ -363,10 +363,10 @@ fn inline(\n         .collect();\n \n     if function.self_param(sema.db).is_some() {\n-        let this = || make::name_ref(\"this\").syntax().clone_for_update();\n+        let this = || make::name_ref(\"this\").syntax().clone_for_update().first_token().unwrap();\n         if let Some(self_local) = params[0].2.as_local(sema.db) {\n             usages_for_locals(self_local)\n-                .flat_map(|FileReference { name, range, .. }| match name {\n+                .filter_map(|FileReference { name, range, .. }| match name {\n                     ast::NameLike::NameRef(_) => Some(body.syntax().covering_element(range)),\n                     _ => None,\n                 })\n@@ -680,6 +680,42 @@ impl Foo {\n     }\n }\n \n+fn main() {\n+    let x = {\n+        let ref this = Foo(3);\n+        Foo(this.0 + 2)\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn generic_method_by_ref() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+struct Foo(u32);\n+\n+impl Foo {\n+    fn add<T>(&self, a: u32) -> Self {\n+        Foo(self.0 + a)\n+    }\n+}\n+\n+fn main() {\n+    let x = Foo(3).add$0::<usize>(2);\n+}\n+\"#,\n+            r#\"\n+struct Foo(u32);\n+\n+impl Foo {\n+    fn add<T>(&self, a: u32) -> Self {\n+        Foo(self.0 + a)\n+    }\n+}\n+\n fn main() {\n     let x = {\n         let ref this = Foo(3);"}]}