{"sha": "3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "node_id": "C_kwDOAAsO6NoAKDNkNmIwOWU1M2UwYjFkNTkyMGZlM2M2MTA2ZjY3NmI3Yjk1ZjRhNzA", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-12T21:32:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-13T18:20:23Z"}, "message": "Keep obligation chain when elaborating obligations", "tree": {"sha": "3f53fe89cbc4a44fa82c70f4d695b7c7d482bcd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f53fe89cbc4a44fa82c70f4d695b7c7d482bcd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "html_url": "https://github.com/rust-lang/rust/commit/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e6d2a035d9e86e7053847aa60a99940f41064c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e6d2a035d9e86e7053847aa60a99940f41064c", "html_url": "https://github.com/rust-lang/rust/commit/f6e6d2a035d9e86e7053847aa60a99940f41064c"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "338fabca3891984ad5c200e073ac86e751ffc499", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "patch": "@@ -692,7 +692,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"auto trait is invoked with no method error, but no error reported?\",\n                         );\n                     }\n-                    Some(_) => unreachable!(),\n+                    Some(Node::Item(hir::Item {\n+                        ident, kind: hir::ItemKind::Trait(..), ..\n+                    })) => {\n+                        skip_list.insert(p);\n+                        let entry = spanned_predicates.entry(ident.span);\n+                        let entry = entry.or_insert_with(|| {\n+                            (FxHashSet::default(), FxHashSet::default(), Vec::new())\n+                        });\n+                        entry.0.insert(cause.span);\n+                        entry.1.insert((ident.span, \"\"));\n+                        entry.1.insert((cause.span, \"unsatisfied trait bound introduced here\"));\n+                        entry.2.push(p);\n+                    }\n+                    Some(node) => unreachable!(\"encountered `{node:?}`\"),\n                     None => (),\n                 }\n             }"}, {"sha": "1817bbf92285476c0b0b3d9fde2353304033cbf8", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "patch": "@@ -1,7 +1,7 @@\n use smallvec::smallvec;\n \n use crate::infer::outlives::components::{push_outlives_components, Component};\n-use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n+use crate::traits::{self, Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_middle::ty::{self, ToPredicate, TyCtxt};\n use rustc_span::symbol::Ident;\n@@ -145,16 +145,28 @@ impl<'tcx> Elaborator<'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let obligations = predicates.predicates.iter().map(|&(mut pred, _)| {\n+                let obligations = predicates.predicates.iter().map(|&(mut pred, span)| {\n                     // when parent predicate is non-const, elaborate it to non-const predicates.\n                     if data.constness == ty::BoundConstness::NotConst {\n                         pred = pred.without_const(tcx);\n                     }\n \n+                    let cause = obligation.cause.clone().derived_cause(\n+                        bound_predicate.rebind(data),\n+                        |derived| {\n+                            traits::ImplDerivedObligation(Box::new(\n+                                traits::ImplDerivedObligationCause {\n+                                    derived,\n+                                    impl_def_id: data.def_id(),\n+                                    span,\n+                                },\n+                            ))\n+                        },\n+                    );\n                     predicate_obligation(\n                         pred.subst_supertrait(tcx, &bound_predicate.rebind(data.trait_ref)),\n                         obligation.param_env,\n-                        obligation.cause.clone(),\n+                        cause,\n                     )\n                 });\n                 debug!(?data, ?obligations, \"super_predicates\");"}, {"sha": "50fa7d1ac4d43635cdefc031274550538bd3e8c7", "filename": "tests/ui/associated-types/issue-43784-associated-type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/tests%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/tests%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr?ref=3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     type Assoc = T;\n    |                  ^ the trait `Copy` is not implemented for `T`\n    |\n+note: required for `<T as Complete>::Assoc` to implement `Partial<T>`\n+  --> $DIR/issue-43784-associated-type.rs:1:11\n+   |\n+LL | pub trait Partial<X: ?Sized>: Copy {\n+   |           ^^^^^^^\n note: required by a bound in `Complete::Assoc`\n   --> $DIR/issue-43784-associated-type.rs:5:17\n    |"}, {"sha": "af03f0e5e5f430ca1bbefa70b91c941ee1038600", "filename": "tests/ui/derives/issue-91550.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/tests%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/tests%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91550.stderr?ref=3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "patch": "@@ -36,15 +36,16 @@ LL | struct Object<T>(T);\n LL |     foo.use_eq();\n    |         ^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-note: the following trait bounds were not satisfied:\n-      `NoDerives: Eq`\n-      `NoDerives: PartialEq`\n+note: trait bound `NoDerives: Eq` was not satisfied\n   --> $DIR/issue-91550.rs:15:9\n    |\n LL | impl<T: Eq> Object<T> {\n    |         ^^  ---------\n    |         |\n    |         unsatisfied trait bound introduced here\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: PartialEq`\n+           which is required by `NoDerives: Eq`\n help: consider annotating `NoDerives` with `#[derive(Eq, PartialEq)]`\n    |\n LL | #[derive(Eq, PartialEq)]\n@@ -67,17 +68,20 @@ LL | struct Object<T>(T);\n LL |     foo.use_ord();\n    |         ^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-note: the following trait bounds were not satisfied:\n-      `NoDerives: Eq`\n-      `NoDerives: Ord`\n-      `NoDerives: PartialEq`\n-      `NoDerives: PartialOrd`\n+note: trait bound `NoDerives: Ord` was not satisfied\n   --> $DIR/issue-91550.rs:18:9\n    |\n LL | impl<T: Ord> Object<T> {\n    |         ^^^  ---------\n    |         |\n    |         unsatisfied trait bound introduced here\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: PartialOrd`\n+           which is required by `NoDerives: Ord`\n+           `NoDerives: PartialEq`\n+           which is required by `NoDerives: Ord`\n+           `NoDerives: Eq`\n+           which is required by `NoDerives: Ord`\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n@@ -101,9 +105,7 @@ LL |     foo.use_ord_and_partial_ord();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `NoDerives: Eq`\n       `NoDerives: Ord`\n-      `NoDerives: PartialEq`\n       `NoDerives: PartialOrd`\n   --> $DIR/issue-91550.rs:21:9\n    |\n@@ -112,6 +114,13 @@ LL | impl<T: Ord + PartialOrd> Object<T> {\n    |         |     |\n    |         |     unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: PartialEq`\n+           which is required by `NoDerives: Ord`\n+           `NoDerives: Eq`\n+           which is required by `NoDerives: Ord`\n+           `NoDerives: PartialEq`\n+           which is required by `NoDerives: PartialOrd`\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]"}, {"sha": "e5638d90ee8e7a90b7ece6292c4b5627bf1d9a7d", "filename": "tests/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/tests%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/tests%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "patch": "@@ -17,6 +17,7 @@ LL |     type Copy<T>: Copy = Box<T>;\n    |                          ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n    = note: required for `Box<T>` to implement `Clone`\n+   = note: required for `<Self as UnsafeCopy>::Copy<T>` to implement `Copy`\n note: required by a bound in `UnsafeCopy::Copy`\n   --> $DIR/issue-74824.rs:6:19\n    |"}, {"sha": "6b5b721384cbbebb622b4cdaaee0b356c35e5e45", "filename": "tests/ui/traits/issue-43784-supertrait.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr?ref=3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL | impl<T> Complete for T {}\n    |                      ^ the trait `Copy` is not implemented for `T`\n    |\n+note: required for `T` to implement `Partial`\n+  --> $DIR/issue-43784-supertrait.rs:1:11\n+   |\n+LL | pub trait Partial: Copy {\n+   |           ^^^^^^^\n note: required by a bound in `Complete`\n   --> $DIR/issue-43784-supertrait.rs:4:21\n    |"}]}