{"sha": "bc6af97ed0088304a2430b74b47c182c65ce0b9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNmFmOTdlZDAwODgzMDRhMjQzMGI3NGI0N2MxODJjNjVjZTBiOWY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-03-11T14:33:34Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-04-04T19:26:27Z"}, "message": "core: disable `ptr::swap_nonoverlapping_one`'s block optimization on SPIR-V.", "tree": {"sha": "d03efb41b61daacc5db0256f368c6bb3a39e9931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d03efb41b61daacc5db0256f368c6bb3a39e9931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6af97ed0088304a2430b74b47c182c65ce0b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6af97ed0088304a2430b74b47c182c65ce0b9f", "html_url": "https://github.com/rust-lang/rust/commit/bc6af97ed0088304a2430b74b47c182c65ce0b9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6af97ed0088304a2430b74b47c182c65ce0b9f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c3d3ddde967f66938966d6d557a3a4fe4d267ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3d3ddde967f66938966d6d557a3a4fe4d267ff", "html_url": "https://github.com/rust-lang/rust/commit/3c3d3ddde967f66938966d6d557a3a4fe4d267ff"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "f673a6fd178f04818fa7a5bed9caf851c60e00e7", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc6af97ed0088304a2430b74b47c182c65ce0b9f/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6af97ed0088304a2430b74b47c182c65ce0b9f/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=bc6af97ed0088304a2430b74b47c182c65ce0b9f", "patch": "@@ -473,12 +473,23 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n #[inline]\n #[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n-    // Only apply the block optimization in `swap_nonoverlapping_bytes` for types\n-    // at least as large as the block size, to avoid pessimizing codegen.\n-    if mem::size_of::<T>() >= 32 {\n-        // SAFETY: the caller must uphold the safety contract for `swap_nonoverlapping`.\n-        unsafe { swap_nonoverlapping(x, y, 1) };\n-        return;\n+    // NOTE(eddyb) SPIR-V's Logical addressing model doesn't allow for arbitrary\n+    // reinterpretation of values as (chunkable) byte arrays, and the loop in the\n+    // block optimization in `swap_nonoverlapping_bytes` is hard to rewrite back\n+    // into the (unoptimized) direct swapping implementation, so we disable it.\n+    // FIXME(eddyb) the block optimization also prevents MIR optimizations from\n+    // understanding `mem::replace`, `Option::take`, etc. - a better overall\n+    // solution might be to make `swap_nonoverlapping` into an intrinsic, which\n+    // a backend can choose to implement using the block optimization, or not.\n+    #[cfg(not(target_arch = \"spirv\"))]\n+    {\n+        // Only apply the block optimization in `swap_nonoverlapping_bytes` for types\n+        // at least as large as the block size, to avoid pessimizing codegen.\n+        if mem::size_of::<T>() >= 32 {\n+            // SAFETY: the caller must uphold the safety contract for `swap_nonoverlapping`.\n+            unsafe { swap_nonoverlapping(x, y, 1) };\n+            return;\n+        }\n     }\n \n     // Direct swapping, for the cases not going through the block optimization."}]}