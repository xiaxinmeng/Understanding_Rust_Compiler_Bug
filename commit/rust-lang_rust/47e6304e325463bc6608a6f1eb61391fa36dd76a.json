{"sha": "47e6304e325463bc6608a6f1eb61391fa36dd76a", "node_id": "C_kwDOAAsO6NoAKDQ3ZTYzMDRlMzI1NDYzYmM2NjA4YTZmMWViNjEzOTFmYTM2ZGQ3NmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-05T06:01:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-05T06:01:30Z"}, "message": "Rollup merge of #103995 - SUPERCILEX:typos, r=Dylan-DPC\n\nSmall round of typo fixes", "tree": {"sha": "9158e1bf75d8ca28f9e22aef13df9c604c9f0f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9158e1bf75d8ca28f9e22aef13df9c604c9f0f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47e6304e325463bc6608a6f1eb61391fa36dd76a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZfw6CRBK7hj4Ov3rIwAAZ7EIAJTbeUv6vj4lIB6V1WARNwwZ\nTLdnk589F+VqdsQtJhhZaKhMNnm6MYX8KGj5/YZSbMmtBQJKrSfat3uKkgkvkQZD\nj04dADbztc6wp3caXJAistlpDSX+DiqZxHUGKZxNWIp6iw5bTqP1i0j5oYhFuJBm\nvI89GiCx6+ztp0If5GgCO7E+1cnPlxqjSHJ+VafjNRnm+6VrPikuBD3Rp/Tc6aam\ny7zTxGyk1KEv/jIlWxd70BPJArr5sWaq/LH3V/UDyxwG8EhqTeG6gr21sj6Z2l1c\nF+aymvF+833fZyNeU3c9UTH3acwFI960iRq0xOQoq4w1uKLigSZzJhkht3REIZY=\n=WYIT\n-----END PGP SIGNATURE-----\n", "payload": "tree 9158e1bf75d8ca28f9e22aef13df9c604c9f0f74\nparent 61553d178415404ee1e4a4f36f72340dc373324d\nparent 849d89b0312f1d61d51ee1e2139876a4eb0f0fc4\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667628090 +0530\ncommitter GitHub <noreply@github.com> 1667628090 +0530\n\nRollup merge of #103995 - SUPERCILEX:typos, r=Dylan-DPC\n\nSmall round of typo fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47e6304e325463bc6608a6f1eb61391fa36dd76a", "html_url": "https://github.com/rust-lang/rust/commit/47e6304e325463bc6608a6f1eb61391fa36dd76a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47e6304e325463bc6608a6f1eb61391fa36dd76a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61553d178415404ee1e4a4f36f72340dc373324d", "url": "https://api.github.com/repos/rust-lang/rust/commits/61553d178415404ee1e4a4f36f72340dc373324d", "html_url": "https://github.com/rust-lang/rust/commit/61553d178415404ee1e4a4f36f72340dc373324d"}, {"sha": "849d89b0312f1d61d51ee1e2139876a4eb0f0fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/849d89b0312f1d61d51ee1e2139876a4eb0f0fc4", "html_url": "https://github.com/rust-lang/rust/commit/849d89b0312f1d61d51ee1e2139876a4eb0f0fc4"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "e6a11218139d97c98eb9a0ba5f80bad413c7b24b", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=47e6304e325463bc6608a6f1eb61391fa36dd76a", "patch": "@@ -1856,7 +1856,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// }\n /// ```\n ///\n-/// Coverting in the other direction from a `&mut T`\n+/// Converting in the other direction from a `&mut T`\n /// to an `&UnsafeCell<T>` is allowed:\n ///\n /// ```rust"}, {"sha": "78808d489b25ab61ef6575f88642801332c54f01", "filename": "library/core/src/error.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fcore%2Fsrc%2Ferror.md", "raw_url": "https://github.com/rust-lang/rust/raw/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fcore%2Fsrc%2Ferror.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.md?ref=47e6304e325463bc6608a6f1eb61391fa36dd76a", "patch": "@@ -46,7 +46,7 @@ These functions are equivalent, they either return the inner value if the\n `Result` is `Ok` or panic if the `Result` is `Err` printing the inner error\n as the source. The only difference between them is that with `expect` you\n provide a panic error message to be printed alongside the source, whereas\n-`unwrap` has a default message indicating only that you unwraped an `Err`.\n+`unwrap` has a default message indicating only that you unwrapped an `Err`.\n \n Of the two, `expect` is generally preferred since its `msg` field allows you\n to convey your intent and assumptions which makes tracking down the source"}, {"sha": "dafcd876744128885014528a859afe93451f20da", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=47e6304e325463bc6608a6f1eb61391fa36dd76a", "patch": "@@ -275,7 +275,7 @@ impl f32 {\n     /// This result is not an element of the function's codomain, but it is the\n     /// closest floating point number in the real numbers and thus fulfills the\n     /// property `self == self.div_euclid(rhs) * rhs + self.rem_euclid(rhs)`\n-    /// approximatively.\n+    /// approximately.\n     ///\n     /// # Examples\n     ///"}, {"sha": "77048f9a28f2516f18c43fe550f4ba1bb095fc1e", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=47e6304e325463bc6608a6f1eb61391fa36dd76a", "patch": "@@ -275,7 +275,7 @@ impl f64 {\n     /// This result is not an element of the function's codomain, but it is the\n     /// closest floating point number in the real numbers and thus fulfills the\n     /// property `self == self.div_euclid(rhs) * rhs + self.rem_euclid(rhs)`\n-    /// approximatively.\n+    /// approximately.\n     ///\n     /// # Examples\n     ///"}, {"sha": "81461de4f721f1d588f68a55c532fc4ea6ec7a9d", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=47e6304e325463bc6608a6f1eb61391fa36dd76a", "patch": "@@ -363,7 +363,7 @@ impl IO_STATUS_BLOCK {\n \n pub type LPOVERLAPPED_COMPLETION_ROUTINE = unsafe extern \"system\" fn(\n     dwErrorCode: DWORD,\n-    dwNumberOfBytesTransfered: DWORD,\n+    dwNumberOfBytesTransferred: DWORD,\n     lpOverlapped: *mut OVERLAPPED,\n );\n "}, {"sha": "9f26acc45205cde3ac32ffcf38747a5c8e0e7f95", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e6304e325463bc6608a6f1eb61391fa36dd76a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=47e6304e325463bc6608a6f1eb61391fa36dd76a", "patch": "@@ -324,17 +324,18 @@ impl AnonPipe {\n         let mut async_result: Option<AsyncResult> = None;\n         struct AsyncResult {\n             error: u32,\n-            transfered: u32,\n+            transferred: u32,\n         }\n \n         // STEP 3: The callback.\n         unsafe extern \"system\" fn callback(\n             dwErrorCode: u32,\n-            dwNumberOfBytesTransfered: u32,\n+            dwNumberOfBytesTransferred: u32,\n             lpOverlapped: *mut c::OVERLAPPED,\n         ) {\n             // Set `async_result` using a pointer smuggled through `hEvent`.\n-            let result = AsyncResult { error: dwErrorCode, transfered: dwNumberOfBytesTransfered };\n+            let result =\n+                AsyncResult { error: dwErrorCode, transferred: dwNumberOfBytesTransferred };\n             *(*lpOverlapped).hEvent.cast::<Option<AsyncResult>>() = Some(result);\n         }\n \n@@ -365,7 +366,7 @@ impl AnonPipe {\n         // STEP 4: Return the result.\n         // `async_result` is always `Some` at this point\n         match result.error {\n-            c::ERROR_SUCCESS => Ok(result.transfered as usize),\n+            c::ERROR_SUCCESS => Ok(result.transferred as usize),\n             error => Err(io::Error::from_raw_os_error(error as _)),\n         }\n     }"}]}