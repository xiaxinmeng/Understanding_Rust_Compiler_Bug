{"sha": "9659f052a44659f30c31f889cba0ad2ba8d8372c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NTlmMDUyYTQ0NjU5ZjMwYzMxZjg4OWNiYTBhZDJiYThkODM3MmM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T10:48:09Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T10:48:09Z"}, "message": "Rollup merge of #49958 - glandium:cleanup, r=SimonSapin\n\nCleanup liballoc use statements\n\nSome modules were still using the deprecated `allocator` module, use the\n`alloc` module instead.\n\nSome modules were using `super` while it's not needed.\n\nSome modules were more or less ordering them, and other not, so the\nlatter have been modified to match the others.", "tree": {"sha": "89ff142e811afde6e4974177bdc83328cefce91d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ff142e811afde6e4974177bdc83328cefce91d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9659f052a44659f30c31f889cba0ad2ba8d8372c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrR3GoACgkQ/vbIBR0O\nATwmUg/+PPfuplXg48+Si7JRwkeEHyElRDufJcq89rLihThCRqr/PMg3quhgCUIM\nCJBBIJiRx4lTtK9Dp2KFr92G8JdL1ACZh045lqKIKbvQcDB0oAv0QiWeWQ4KFCHf\ncFdDwW2Qm3nqWlf4Ww8mP7AL1Fa//FqyBsn0k/WggbFN9DZrYNAbI+kJDuCQsNcE\nASKhi1ioj6Ay+A6YyzZxguhbKPsex0Oayq5qMXmuhF1MoOVwCiVHP/AuFWMl8PEt\nI7MfcN/+NIO+OmPk+cEiytb2kS1ENdzWBc/hjfvYonmQVegbDPGYbBjIP2H+WZ8o\nTmmw7ymQl/DdFU5MBf/gVPPv+laBifN9IExyjCnTMtenlWAwx5CLNgNDA9wtTQqp\nAmzbbrcyEY6zCWew0Qu8PZi3fl7+i3RAuhauFnZkTrNSzWpqLemggYKijPxeSw3S\nyvrRrIVTIBJ8wJAKGXSRltj4hfYP/kmyd1PdfWjox7eQAEBFM+RBv5P5O5rhzBLm\nIDXUKkg+PnlYlpMfpO71yIKe8EJO8GpESb7FbT26XS04L4X0lARaDvkn4+qj5KPM\njBXpZ0SqXj2zsKbe3Xb8KrTUdjl7ARosm3suiDwE8cp74Om2DZyNzB82Km/Gwgt/\nzcrAuZexuOzWlMXfaZVuJbWqgfyjOJxh0ZDQYcwNt5C0fHl0CE4=\n=L2jY\n-----END PGP SIGNATURE-----", "payload": "tree 89ff142e811afde6e4974177bdc83328cefce91d\nparent e681ba22d2b802578388c7753003aeda442bcca4\nparent e35499ca15c205a0d6e6d579a69e1100ca8e585b\nauthor kennytm <kennytm@gmail.com> 1523702889 +0800\ncommitter kennytm <kennytm@gmail.com> 1523702889 +0800\n\nRollup merge of #49958 - glandium:cleanup, r=SimonSapin\n\nCleanup liballoc use statements\n\nSome modules were still using the deprecated `allocator` module, use the\n`alloc` module instead.\n\nSome modules were using `super` while it's not needed.\n\nSome modules were more or less ordering them, and other not, so the\nlatter have been modified to match the others.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9659f052a44659f30c31f889cba0ad2ba8d8372c", "html_url": "https://github.com/rust-lang/rust/commit/9659f052a44659f30c31f889cba0ad2ba8d8372c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9659f052a44659f30c31f889cba0ad2ba8d8372c/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e681ba22d2b802578388c7753003aeda442bcca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e681ba22d2b802578388c7753003aeda442bcca4", "html_url": "https://github.com/rust-lang/rust/commit/e681ba22d2b802578388c7753003aeda442bcca4"}, {"sha": "e35499ca15c205a0d6e6d579a69e1100ca8e585b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35499ca15c205a0d6e6d579a69e1100ca8e585b", "html_url": "https://github.com/rust-lang/rust/commit/e35499ca15c205a0d6e6d579a69e1100ca8e585b"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "8f1ba22de8cb1f0b4726fd05b660cd431608a8ab", "filename": "src/doc/unstable-book/src/language-features/global-allocator.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -55,7 +55,7 @@ fn main() {\n ```\n \n And that's it! The `#[global_allocator]` attribute is applied to a `static`\n-which implements the `Alloc` trait in the `std::heap` module. Note, though,\n+which implements the `Alloc` trait in the `std::alloc` module. Note, though,\n that the implementation is defined for `&MyAllocator`, not just `MyAllocator`.\n You may wish, however, to also provide `Alloc for MyAllocator` for other use\n cases."}, {"sha": "aceb6ff8abe2a7a6d914f3d8d250cf2ca853c393", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -55,8 +55,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use raw_vec::RawVec;\n-\n use core::any::Any;\n use core::borrow;\n use core::cmp::Ordering;\n@@ -68,6 +66,8 @@ use core::mem::{self, Pin};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n use core::convert::From;\n+\n+use raw_vec::RawVec;\n use str::from_boxed_utf8_unchecked;\n \n /// A pointer type for heap allocation."}, {"sha": "405814c021afef423e4599e514c9e6d19683ba78", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -8,15 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use alloc::{Alloc, Layout, Global};\n use core::cmp;\n use core::mem;\n use core::ops::Drop;\n use core::ptr::{self, NonNull, Unique};\n use core::slice;\n-use super::boxed::Box;\n-use super::allocator::CollectionAllocErr;\n-use super::allocator::CollectionAllocErr::*;\n+\n+use alloc::{Alloc, Layout, Global};\n+use alloc::CollectionAllocErr;\n+use alloc::CollectionAllocErr::*;\n+use boxed::Box;\n \n /// A low-level utility for more ergonomically allocating, reallocating, and deallocating\n /// a buffer of memory on the heap without having to worry about all the corner cases"}, {"sha": "6c9f3dd7ec975d9d0368d31f864ab079d34bd021", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -46,12 +46,12 @@ use core::mem;\n use core::ptr;\n use core::iter::FusedIterator;\n \n-use vec_deque::VecDeque;\n use borrow::{Borrow, ToOwned};\n+use boxed::Box;\n+use slice::{SliceConcatExt, SliceIndex};\n use string::String;\n use vec::Vec;\n-use slice::{SliceConcatExt, SliceIndex};\n-use boxed::Box;\n+use vec_deque::VecDeque;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{FromStr, Utf8Error};"}, {"sha": "0924ca2479147f4f581f0f94eaa28a74b5237903", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -66,11 +66,11 @@ use core::ptr;\n use core::str::pattern::Pattern;\n use core::str::lossy;\n \n+use alloc::CollectionAllocErr;\n use borrow::{Cow, ToOwned};\n+use boxed::Box;\n use str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};\n use vec::Vec;\n-use boxed::Box;\n-use super::allocator::CollectionAllocErr;\n \n /// A UTF-8 encoded, growable string.\n ///"}, {"sha": "9ae415c328bd2cc12bdef7a8ad890900be7d6a38", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -82,11 +82,11 @@ use core::ptr;\n use core::ptr::NonNull;\n use core::slice;\n \n+use alloc::CollectionAllocErr;\n use borrow::ToOwned;\n use borrow::Cow;\n use boxed::Box;\n use raw_vec::RawVec;\n-use super::allocator::CollectionAllocErr;\n \n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///"}, {"sha": "603e38ca2ca33d16bffd674c50163910d2091718", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -30,10 +30,9 @@ use core::slice;\n use core::hash::{Hash, Hasher};\n use core::cmp;\n \n+use alloc::CollectionAllocErr;\n use raw_vec::RawVec;\n-\n-use super::allocator::CollectionAllocErr;\n-use super::vec::Vec;\n+use vec::Vec;\n \n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n const MINIMUM_CAPACITY: usize = 1; // 2 - 1"}, {"sha": "37e64ba7ea1e094610bf4254b62d47170555fa5a", "filename": "src/test/compile-fail/allocator/auxiliary/system-allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -13,7 +13,7 @@\n #![feature(global_allocator, allocator_api)]\n #![crate_type = \"rlib\"]\n \n-use std::heap::System;\n+use std::alloc::System;\n \n #[global_allocator]\n static A: System = System;"}, {"sha": "37e64ba7ea1e094610bf4254b62d47170555fa5a", "filename": "src/test/compile-fail/allocator/auxiliary/system-allocator2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -13,7 +13,7 @@\n #![feature(global_allocator, allocator_api)]\n #![crate_type = \"rlib\"]\n \n-use std::heap::System;\n+use std::alloc::System;\n \n #[global_allocator]\n static A: System = System;"}, {"sha": "5aa6b5d67773f4eae277d18505e1cd1a41839a2b", "filename": "src/test/compile-fail/allocator/two-allocators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(global_allocator, allocator_api)]\n \n-use std::heap::System;\n+use std::alloc::System;\n \n #[global_allocator]\n static A: System = System;"}, {"sha": "ec5d985a94383cc4de3123fcc7cff1776725b7c3", "filename": "src/test/compile-fail/allocator/two-allocators2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators2.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -16,7 +16,7 @@\n \n extern crate system_allocator;\n \n-use std::heap::System;\n+use std::alloc::System;\n \n #[global_allocator]\n static A: System = System;"}, {"sha": "d4fcdcf743bc676d6f20fa25a9acbea5fda8daed", "filename": "src/test/run-pass/allocator-alloc-one.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -10,15 +10,15 @@\n \n #![feature(allocator_api, nonnull)]\n \n-use std::heap::{Heap, Alloc};\n+use std::alloc::{Alloc, Global};\n \n fn main() {\n     unsafe {\n-        let ptr = Heap.alloc_one::<i32>().unwrap_or_else(|_| {\n-            Heap.oom()\n+        let ptr = Global.alloc_one::<i32>().unwrap_or_else(|_| {\n+            Global.oom()\n         });\n         *ptr.as_ptr() = 4;\n         assert_eq!(*ptr.as_ptr(), 4);\n-        Heap.dealloc_one(ptr);\n+        Global.dealloc_one(ptr);\n     }\n }"}, {"sha": "91f70aa83e854328e19e53bf2f1a865f7210406a", "filename": "src/test/run-pass/allocator/auxiliary/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -13,7 +13,7 @@\n #![feature(heap_api, allocator_api)]\n #![crate_type = \"rlib\"]\n \n-use std::heap::{GlobalAlloc, System, Layout, Opaque};\n+use std::alloc::{GlobalAlloc, System, Layout, Opaque};\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n pub struct A(pub AtomicUsize);"}, {"sha": "44be59f5c5b1a9ea39d3d4bedb21179021e05c4c", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(allocator_api)]\n \n-use std::heap::{Alloc, Heap, Layout};\n+use std::alloc::{Alloc, Global, Layout};\n use std::ptr::NonNull;\n \n struct arena(());\n@@ -32,8 +32,8 @@ struct Ccx {\n \n fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n-        let ptr = Heap.alloc(Layout::new::<Bcx>())\n-            .unwrap_or_else(|_| Heap.oom());\n+        let ptr = Global.alloc(Layout::new::<Bcx>())\n+            .unwrap_or_else(|_| Global.oom());\n         &*(ptr.as_ptr() as *const _)\n     }\n }\n@@ -46,7 +46,7 @@ fn g(fcx : &Fcx) {\n     let bcx = Bcx { fcx: fcx };\n     let bcx2 = h(&bcx);\n     unsafe {\n-        Heap.dealloc(NonNull::new_unchecked(bcx2 as *const _ as *mut _), Layout::new::<Bcx>());\n+        Global.dealloc(NonNull::new_unchecked(bcx2 as *const _ as *mut _), Layout::new::<Bcx>());\n     }\n }\n "}, {"sha": "a0534ff6735a50a166889173b5d720ccef0fb897", "filename": "src/test/run-pass/thin-lto-global-allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9659f052a44659f30c31f889cba0ad2ba8d8372c/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs?ref=9659f052a44659f30c31f889cba0ad2ba8d8372c", "patch": "@@ -14,6 +14,6 @@\n #![feature(allocator_api, global_allocator)]\n \n #[global_allocator]\n-static A: std::heap::System = std::heap::System;\n+static A: std::alloc::System = std::alloc::System;\n \n fn main() {}"}]}