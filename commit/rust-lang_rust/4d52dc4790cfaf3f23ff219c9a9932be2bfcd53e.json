{"sha": "4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNTJkYzQ3OTBjZmFmM2YyM2ZmMjE5YzlhOTkzMmJlMmJmY2Q1M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-29T14:28:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-29T14:28:58Z"}, "message": "Auto merge of #76754 - varkor:diagnostic-cleanup-ii, r=ecstatic-morse\n\nClean up diagnostics for arithmetic operation errors\n\nPlus a small tweak to a range pattern error message.", "tree": {"sha": "c2fc4321ad9cbfc7e4f3a8dc58e7df86850fbf90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2fc4321ad9cbfc7e4f3a8dc58e7df86850fbf90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "html_url": "https://github.com/rust-lang/rust/commit/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e34b729647f44bfbbc361949b14b5bea65e4996", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e34b729647f44bfbbc361949b14b5bea65e4996", "html_url": "https://github.com/rust-lang/rust/commit/9e34b729647f44bfbbc361949b14b5bea65e4996"}, {"sha": "c0b105780e2534ebe1337f529d878dab75e3636f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b105780e2534ebe1337f529d878dab75e3636f", "html_url": "https://github.com/rust-lang/rust/commit/c0b105780e2534ebe1337f529d878dab75e3636f"}], "stats": {"total": 899, "additions": 452, "deletions": 447}, "files": [{"sha": "f9d84bb852f3149d8be17011300384ff6429ed20", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1300,49 +1300,49 @@ impl<O> AssertKind<O> {\n         match self {\n             BoundsCheck { ref len, ref index } => write!(\n                 f,\n-                \"\\\"index out of bounds: the len is {{}} but the index is {{}}\\\", {:?}, {:?}\",\n+                \"\\\"index out of bounds: the length is {{}} but the index is {{}}\\\", {:?}, {:?}\",\n                 len, index\n             ),\n \n             OverflowNeg(op) => {\n-                write!(f, \"\\\"attempt to negate {{}} which would overflow\\\", {:?}\", op)\n+                write!(f, \"\\\"attempt to negate `{{}}`, which would overflow\\\", {:?}\", op)\n             }\n-            DivisionByZero(op) => write!(f, \"\\\"attempt to divide {{}} by zero\\\", {:?}\", op),\n+            DivisionByZero(op) => write!(f, \"\\\"attempt to divide `{{}}` by zero\\\", {:?}\", op),\n             RemainderByZero(op) => write!(\n                 f,\n-                \"\\\"attempt to calculate the remainder of {{}} with a divisor of zero\\\", {:?}\",\n+                \"\\\"attempt to calculate the remainder of `{{}}` with a divisor of zero\\\", {:?}\",\n                 op\n             ),\n             Overflow(BinOp::Add, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute `{{}} + {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute `{{}} + {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Sub, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute `{{}} - {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute `{{}} - {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Mul, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute `{{}} * {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute `{{}} * {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Div, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute `{{}} / {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute `{{}} / {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Rem, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute the remainder of `{{}} % {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute the remainder of `{{}} % {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Shr, _, r) => {\n-                write!(f, \"\\\"attempt to shift right by {{}} which would overflow\\\", {:?}\", r)\n+                write!(f, \"\\\"attempt to shift right by `{{}}`, which would overflow\\\", {:?}\", r)\n             }\n             Overflow(BinOp::Shl, _, r) => {\n-                write!(f, \"\\\"attempt to shift left by {{}} which would overflow\\\", {:?}\", r)\n+                write!(f, \"\\\"attempt to shift left by `{{}}`, which would overflow\\\", {:?}\", r)\n             }\n             _ => write!(f, \"\\\"{}\\\"\", self.description()),\n         }\n@@ -1353,36 +1353,40 @@ impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use AssertKind::*;\n         match self {\n-            BoundsCheck { ref len, ref index } => {\n-                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index)\n-            }\n-            OverflowNeg(op) => write!(f, \"attempt to negate {:#?} which would overflow\", op),\n-            DivisionByZero(op) => write!(f, \"attempt to divide {:#?} by zero\", op),\n-            RemainderByZero(op) => {\n-                write!(f, \"attempt to calculate the remainder of {:#?} with a divisor of zero\", op)\n-            }\n+            BoundsCheck { ref len, ref index } => write!(\n+                f,\n+                \"index out of bounds: the length is {:?} but the index is {:?}\",\n+                len, index\n+            ),\n+            OverflowNeg(op) => write!(f, \"attempt to negate `{:#?}`, which would overflow\", op),\n+            DivisionByZero(op) => write!(f, \"attempt to divide `{:#?}` by zero\", op),\n+            RemainderByZero(op) => write!(\n+                f,\n+                \"attempt to calculate the remainder of `{:#?}` with a divisor of zero\",\n+                op\n+            ),\n             Overflow(BinOp::Add, l, r) => {\n-                write!(f, \"attempt to compute `{:#?} + {:#?}` which would overflow\", l, r)\n+                write!(f, \"attempt to compute `{:#?} + {:#?}`, which would overflow\", l, r)\n             }\n             Overflow(BinOp::Sub, l, r) => {\n-                write!(f, \"attempt to compute `{:#?} - {:#?}` which would overflow\", l, r)\n+                write!(f, \"attempt to compute `{:#?} - {:#?}`, which would overflow\", l, r)\n             }\n             Overflow(BinOp::Mul, l, r) => {\n-                write!(f, \"attempt to compute `{:#?} * {:#?}` which would overflow\", l, r)\n+                write!(f, \"attempt to compute `{:#?} * {:#?}`, which would overflow\", l, r)\n             }\n             Overflow(BinOp::Div, l, r) => {\n-                write!(f, \"attempt to compute `{:#?} / {:#?}` which would overflow\", l, r)\n+                write!(f, \"attempt to compute `{:#?} / {:#?}`, which would overflow\", l, r)\n             }\n             Overflow(BinOp::Rem, l, r) => write!(\n                 f,\n-                \"attempt to compute the remainder of `{:#?} % {:#?}` which would overflow\",\n+                \"attempt to compute the remainder of `{:#?} % {:#?}`, which would overflow\",\n                 l, r\n             ),\n             Overflow(BinOp::Shr, _, r) => {\n-                write!(f, \"attempt to shift right by {:#?} which would overflow\", r)\n+                write!(f, \"attempt to shift right by `{:#?}`, which would overflow\", r)\n             }\n             Overflow(BinOp::Shl, _, r) => {\n-                write!(f, \"attempt to shift left by {:#?} which would overflow\", r)\n+                write!(f, \"attempt to shift left by `{:#?}`, which would overflow\", r)\n             }\n             _ => write!(f, \"{}\", self.description()),\n         }"}, {"sha": "3e431a9c0009095867cc907892e5a2949230034d", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.sess,\n             span,\n             E0029,\n-            \"only char and numeric types are allowed in range patterns\"\n+            \"only `char` and numeric types are allowed in range patterns\"\n         );\n         let msg = |ty| format!(\"this is of type `{}` but it should be `char` or numeric\", ty);\n         let mut one_side_err = |first_span, first_ty, second: Option<(bool, Ty<'tcx>, Span)>| {"}, {"sha": "deb5dbad7de671da0fda0ed3b5c611eee4fbfb02", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -48,7 +48,7 @@ fn main() -> () {\n         _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n         _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n         _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {"}, {"sha": "deb5dbad7de671da0fda0ed3b5c611eee4fbfb02", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -48,7 +48,7 @@ fn main() -> () {\n         _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n         _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n         _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {"}, {"sha": "979e5bc4d21186325c287aea2707e5fef85acf59", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -32,7 +32,7 @@\n -         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n           _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n@@ -44,7 +44,7 @@\n -         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n           _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {"}, {"sha": "979e5bc4d21186325c287aea2707e5fef85acf59", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.64bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -32,7 +32,7 @@\n -         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n           _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n@@ -44,7 +44,7 @@\n -         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n           _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {"}, {"sha": "4664934690845883998881187cbda9ebb9c4f835", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -20,9 +20,9 @@\n           _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n           _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n       }\n   \n       bb1: {"}, {"sha": "4664934690845883998881187cbda9ebb9c4f835", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -20,9 +20,9 @@\n           _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n           _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n       }\n   \n       bb1: {"}, {"sha": "ba081f95fa8a9722d9466a687afe5e3391f8e47c", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -24,21 +24,21 @@\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n -         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         assert(!move _4, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         assert(!const true, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n       }\n   \n       bb1: {\n -         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         assert(!move _7, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         assert(!const false, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n       }\n   \n       bb2: {"}, {"sha": "a843cacf4d93fb614fa9861b0669607bb28e4daf", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -24,21 +24,21 @@\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n -         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         assert(!move _4, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         assert(!const true, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n       }\n   \n       bb1: {\n -         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n       }\n   \n       bb2: {"}, {"sha": "8c10b3518d8c859e944b5d1cba6e8e10338be4fa", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -42,9 +42,9 @@\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n -         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n +         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n       }\n   \n       bb1: {"}, {"sha": "8c10b3518d8c859e944b5d1cba6e8e10338be4fa", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -42,9 +42,9 @@\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n -         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n +         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n       }\n   \n       bb1: {"}, {"sha": "f01676b6da8639368817e5f2417b6abaff7e997e", "filename": "src/test/mir-opt/const_prop/checked_add.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -12,15 +12,15 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:5:9: 5:10\n -         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +                                          // ty::Const\n +                                          // + ty: (u32, bool)\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [2, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n +                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [2, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n       }\n   \n       bb1: {"}, {"sha": "8c7b35887c915474a9c621757dc99bef798d7114", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -15,7 +15,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n -         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:5:13: 5:25\n -         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:5:13: 5:29\n--         assert(!move (_3.1: bool), \"attempt to compute `{} + {}` which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n+-         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n +         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // ty::Const\n@@ -24,7 +24,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: (u8, bool), val: Value(ByRef { alloc: Allocation { bytes: [3, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n       }\n   \n       bb1: {"}, {"sha": "fa790822b6bfffc4f747c8bae7e672f14ba3f8ee", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -20,9 +20,9 @@\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n           _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n--         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n +         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n       }\n   \n       bb1: {"}, {"sha": "fa790822b6bfffc4f747c8bae7e672f14ba3f8ee", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -20,9 +20,9 @@\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n           _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n--         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n +         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n       }\n   \n       bb1: {"}, {"sha": "53ffc01ccaf2571676a0ffa7ae5f81b05a37fcbe", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -25,15 +25,15 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n -         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: (i32, bool)\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n       }\n   \n       bb1: {\n@@ -46,9 +46,9 @@\n           _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n           _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n -         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n       }\n   \n       bb2: {"}, {"sha": "53ffc01ccaf2571676a0ffa7ae5f81b05a37fcbe", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -25,15 +25,15 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n -         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: (i32, bool)\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n       }\n   \n       bb1: {\n@@ -46,9 +46,9 @@\n           _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n           _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n -         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n       }\n   \n       bb2: {"}, {"sha": "98f409f326a58834255d983b5f7876735807ad1b", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -22,9 +22,9 @@\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n           _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n -         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n       }\n   \n       bb1: {"}, {"sha": "98f409f326a58834255d983b5f7876735807ad1b", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -22,9 +22,9 @@\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n           _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n -         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n       }\n   \n       bb1: {"}, {"sha": "fc8a5437232cf55539f46ee02b282234d13c66fe", "filename": "src/test/mir-opt/const_prop/return_place.add.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -7,15 +7,15 @@\n   \n       bb0: {\n -         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n--         assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +                                          // ty::Const\n +                                          // + ty: (u32, bool)\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/return_place.rs:6:5: 6:10\n +                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n       }\n   \n       bb1: {"}, {"sha": "240cc8e231168b14e82b3d8b7b399c983384a368", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -33,10 +33,10 @@\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n -         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       }\n   \n       bb1: {"}, {"sha": "240cc8e231168b14e82b3d8b7b399c983384a368", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -33,10 +33,10 @@\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n -         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       }\n   \n       bb1: {"}, {"sha": "f1f4b97035a61bbd1f300b2cd69a6386624612b2", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -6,7 +6,7 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb1 (cleanup): {"}, {"sha": "f1f4b97035a61bbd1f300b2cd69a6386624612b2", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -6,7 +6,7 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb1 (cleanup): {"}, {"sha": "c94f6c28cd907eb283fbb4fd1e68f5af68b5dc75", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -12,7 +12,7 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n-        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n     }\n \n     bb1 (cleanup): {"}, {"sha": "c94f6c28cd907eb283fbb4fd1e68f5af68b5dc75", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -12,7 +12,7 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n-        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n     }\n \n     bb1 (cleanup): {"}, {"sha": "e003dc2aadb9ff3ab52cc32d254d5ce51e246976", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -48,7 +48,7 @@ fn main() -> () {\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n-        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n     }\n \n     bb3: {"}, {"sha": "e003dc2aadb9ff3ab52cc32d254d5ce51e246976", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -48,7 +48,7 @@ fn main() -> () {\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n-        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n     }\n \n     bb3: {"}, {"sha": "91135fbf41a71d454e6fa794f3928f81dd63e73c", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -52,7 +52,7 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n     bb1 (cleanup): {"}, {"sha": "23dcab656c1ce7304d15a32cf93fcd3f54708369", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -52,7 +52,7 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n     bb1 (cleanup): {"}, {"sha": "94abe11896cba3df7cb9602acb6ece88a3240dd3", "filename": "src/test/run-make-fulldeps/instrument-coverage-mir-cov-html-base/expected_mir_dump.coverage_of_if_else/coverage_of_if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-base%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-base%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-base%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -118,7 +118,7 @@\n     18:5-18:6: StorageDead: StorageDead(_8)\n     9:5-18:6: Goto: goto -&gt; bb28\">        </span><span class=\"code odd\" style=\"--layer: 4\" title=\"bb8: ../instrument-coverage/coverage_of_if_else.rs:10:9: 10:23:\n     10:9-10:23: Assign: _7 = CheckedSub(_1, const 4_i32)\n-    10:9-10:23: Assert: assert(!move (_7.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _1, const 4_i32) -&gt; [success: bb9, unwind: bb1]\"><span class=\"annotation\">8\u298a</span>countdown -= 4<span class=\"annotation\">\u29898</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"bb25: ../instrument-coverage/coverage_of_if_else.rs:9:5: 18:6:\n+    10:9-10:23: Assert: assert(!move (_7.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _1, const 4_i32) -&gt; [success: bb9, unwind: bb1]\"><span class=\"annotation\">8\u298a</span>countdown -= 4<span class=\"annotation\">\u29898</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"bb25: ../instrument-coverage/coverage_of_if_else.rs:9:5: 18:6:\n     15:9-15:23: Assign: _1 = move (_19.0: i32)\n     11:29-16:6: Assign: _4 = const ()\n     18:5-18:6: StorageDead: StorageDead(_8)\n@@ -223,7 +223,7 @@\n     14:9-14:10: StorageDead: StorageDead(_11)\n     14:9-14:10: StorageDead: StorageDead(_10)\n     15:9-15:23: Assign: _19 = CheckedSub(_1, const 5_i32)\n-    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\"><span class=\"annotation\">24\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 5\" title=\"bb22: ../instrument-coverage/coverage_of_if_else.rs:12:9: 14:10:\n+    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\"><span class=\"annotation\">24\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 5\" title=\"bb22: ../instrument-coverage/coverage_of_if_else.rs:12:9: 14:10:\n     12:9-14:10: Assign: _10 = const ()\n     12:9-14:10: Goto: goto -&gt; bb24\"><span class=\"annotation\">\u298922</span></span><span class=\"code even\" style=\"--layer: 6\" title=\"bb23: ../instrument-coverage/coverage_of_if_else.rs:12:9: 14:10:\n     13:13-13:26: Assign: _1 = const 0_i32\n@@ -234,12 +234,12 @@\n     14:9-14:10: StorageDead: StorageDead(_11)\n     14:9-14:10: StorageDead: StorageDead(_10)\n     15:9-15:23: Assign: _19 = CheckedSub(_1, const 5_i32)\n-    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\"></span></span>\n+    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\"></span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 8\" title=\"bb24: ../instrument-coverage/coverage_of_if_else.rs:14:9: 15:23:\n     14:9-14:10: StorageDead: StorageDead(_11)\n     14:9-14:10: StorageDead: StorageDead(_10)\n     15:9-15:23: Assign: _19 = CheckedSub(_1, const 5_i32)\n-    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298924</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"bb10: ../instrument-coverage/coverage_of_if_else.rs:11:12: 18:6:\n+    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298924</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"bb10: ../instrument-coverage/coverage_of_if_else.rs:11:12: 18:6:\n     11:12-18:6: FalseEdge: falseEdge -&gt; [real: bb12, imaginary: bb11]\">;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 4\" title=\"bb10: ../instrument-coverage/coverage_of_if_else.rs:11:12: 18:6:\n     11:12-18:6: FalseEdge: falseEdge -&gt; [real: bb12, imaginary: bb11]\">    } else {</span></span>\n@@ -353,7 +353,7 @@\n     25:22-27:6: Assign: _24 = const ()\n     25:5-34:6: Goto: goto -&gt; bb53\">        </span><span class=\"code odd\" style=\"--layer: 9\" title=\"bb35: ../instrument-coverage/coverage_of_if_else.rs:26:9: 26:23:\n     26:9-26:23: Assign: _27 = CheckedSub(_21, const 4_i32)\n-    26:9-26:23: Assert: assert(!move (_27.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _21, const 4_i32) -&gt; [success: bb36, unwind: bb1]\"><span class=\"annotation\">35\u298a</span>countdown -= 4<span class=\"annotation\">\u298935</span></span><span class=\"code even\" style=\"--layer: 8\" title=\"bb36: ../instrument-coverage/coverage_of_if_else.rs:25:5: 34:6:\n+    26:9-26:23: Assert: assert(!move (_27.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _21, const 4_i32) -&gt; [success: bb36, unwind: bb1]\"><span class=\"annotation\">35\u298a</span>countdown -= 4<span class=\"annotation\">\u298935</span></span><span class=\"code even\" style=\"--layer: 8\" title=\"bb36: ../instrument-coverage/coverage_of_if_else.rs:25:5: 34:6:\n     26:9-26:23: Assign: _21 = move (_27.0: i32)\n     25:22-27:6: Assign: _24 = const ()\n     25:5-34:6: Goto: goto -&gt; bb53\">;</span></span>\n@@ -459,7 +459,7 @@\n     30:9-30:10: StorageDead: StorageDead(_31)\n     30:9-30:10: StorageDead: StorageDead(_30)\n     31:9-31:23: Assign: _39 = CheckedSub(_21, const 5_i32)\n-    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\"><span class=\"annotation\">51\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 10\" title=\"bb48: ../instrument-coverage/coverage_of_if_else.rs:28:9: 30:10:\n+    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\"><span class=\"annotation\">51\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 10\" title=\"bb48: ../instrument-coverage/coverage_of_if_else.rs:28:9: 30:10:\n     28:9-30:10: FalseEdge: falseEdge -&gt; [real: bb50, imaginary: bb49]\"><span class=\"annotation\">\u298948</span></span><span class=\"code even\" style=\"--layer: 11\" title=\"bb50: ../instrument-coverage/coverage_of_if_else.rs:28:9: 30:10:\n     29:13-29:26: Assign: _21 = const 0_i32\n     28:61-30:10: Assign: _30 = const ()\n@@ -471,12 +471,12 @@\n     30:9-30:10: StorageDead: StorageDead(_31)\n     30:9-30:10: StorageDead: StorageDead(_30)\n     31:9-31:23: Assign: _39 = CheckedSub(_21, const 5_i32)\n-    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\"></span></span>\n+    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\"></span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 13\" title=\"bb51: ../instrument-coverage/coverage_of_if_else.rs:30:9: 31:23:\n     30:9-30:10: StorageDead: StorageDead(_31)\n     30:9-30:10: StorageDead: StorageDead(_30)\n     31:9-31:23: Assign: _39 = CheckedSub(_21, const 5_i32)\n-    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298951</span></span><span class=\"code even\" style=\"--layer: 9\" title=\"bb37: ../instrument-coverage/coverage_of_if_else.rs:27:12: 34:6:\n+    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298951</span></span><span class=\"code even\" style=\"--layer: 9\" title=\"bb37: ../instrument-coverage/coverage_of_if_else.rs:27:12: 34:6:\n     27:12-34:6: FalseEdge: falseEdge -&gt; [real: bb39, imaginary: bb38]\">;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 9\" title=\"bb37: ../instrument-coverage/coverage_of_if_else.rs:27:12: 34:6:\n     27:12-34:6: FalseEdge: falseEdge -&gt; [real: bb39, imaginary: bb38]\">    } else {</span></span>\n@@ -614,7 +614,7 @@\n     50:5-50:6: StorageDead: StorageDead(_47)\n     41:5-50:6: Goto: goto -&gt; bb78\">        </span><span class=\"code odd\" style=\"--layer: 14\" title=\"bb60: ../instrument-coverage/coverage_of_if_else.rs:42:9: 42:23:\n     42:9-42:23: Assign: _46 = CheckedSub(_41, const 4_i32)\n-    42:9-42:23: Assert: assert(!move (_46.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _41, const 4_i32) -&gt; [success: bb61, unwind: bb1]\"><span class=\"annotation\">60\u298a</span>countdown -= 4<span class=\"annotation\">\u298960</span></span><span class=\"code even\" style=\"--layer: 13\" title=\"bb77: ../instrument-coverage/coverage_of_if_else.rs:41:5: 50:6:\n+    42:9-42:23: Assert: assert(!move (_46.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _41, const 4_i32) -&gt; [success: bb61, unwind: bb1]\"><span class=\"annotation\">60\u298a</span>countdown -= 4<span class=\"annotation\">\u298960</span></span><span class=\"code even\" style=\"--layer: 13\" title=\"bb77: ../instrument-coverage/coverage_of_if_else.rs:41:5: 50:6:\n     47:9-47:23: Assign: _41 = move (_58.0: i32)\n     43:29-48:6: Assign: _0 = const ()\n     50:5-50:6: StorageDead: StorageDead(_47)\n@@ -719,7 +719,7 @@\n     46:9-46:10: StorageDead: StorageDead(_50)\n     46:9-46:10: StorageDead: StorageDead(_49)\n     47:9-47:23: Assign: _58 = CheckedSub(_41, const 5_i32)\n-    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\"><span class=\"annotation\">76\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 15\" title=\"bb75: ../instrument-coverage/coverage_of_if_else.rs:44:9: 46:10:\n+    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\"><span class=\"annotation\">76\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 15\" title=\"bb75: ../instrument-coverage/coverage_of_if_else.rs:44:9: 46:10:\n     45:13-45:26: Assign: _41 = const 0_i32\n     44:61-46:10: Assign: _49 = const ()\n     44:9-46:10: Goto: goto -&gt; bb76\"><span class=\"annotation\">\u298975</span></span><span class=\"code even\" style=\"--layer: 16\" title=\"bb74: ../instrument-coverage/coverage_of_if_else.rs:44:9: 46:10:\n@@ -730,12 +730,12 @@\n     46:9-46:10: StorageDead: StorageDead(_50)\n     46:9-46:10: StorageDead: StorageDead(_49)\n     47:9-47:23: Assign: _58 = CheckedSub(_41, const 5_i32)\n-    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\"></span></span>\n+    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\"></span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 18\" title=\"bb76: ../instrument-coverage/coverage_of_if_else.rs:46:9: 47:23:\n     46:9-46:10: StorageDead: StorageDead(_50)\n     46:9-46:10: StorageDead: StorageDead(_49)\n     47:9-47:23: Assign: _58 = CheckedSub(_41, const 5_i32)\n-    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298976</span></span><span class=\"code even\" style=\"--layer: 14\" title=\"bb62: ../instrument-coverage/coverage_of_if_else.rs:43:12: 50:6:\n+    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298976</span></span><span class=\"code even\" style=\"--layer: 14\" title=\"bb62: ../instrument-coverage/coverage_of_if_else.rs:43:12: 50:6:\n     43:12-50:6: FalseEdge: falseEdge -&gt; [real: bb64, imaginary: bb63]\">;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 14\" title=\"bb62: ../instrument-coverage/coverage_of_if_else.rs:43:12: 50:6:\n     43:12-50:6: FalseEdge: falseEdge -&gt; [real: bb64, imaginary: bb63]\">    } else {</span></span>"}, {"sha": "94abe11896cba3df7cb9602acb6ece88a3240dd3", "filename": "src/test/run-make-fulldeps/instrument-coverage-mir-cov-html-link-dead-code/expected_mir_dump.coverage_of_if_else/coverage_of_if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-link-dead-code%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-link-dead-code%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-link-dead-code%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -118,7 +118,7 @@\n     18:5-18:6: StorageDead: StorageDead(_8)\n     9:5-18:6: Goto: goto -&gt; bb28\">        </span><span class=\"code odd\" style=\"--layer: 4\" title=\"bb8: ../instrument-coverage/coverage_of_if_else.rs:10:9: 10:23:\n     10:9-10:23: Assign: _7 = CheckedSub(_1, const 4_i32)\n-    10:9-10:23: Assert: assert(!move (_7.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _1, const 4_i32) -&gt; [success: bb9, unwind: bb1]\"><span class=\"annotation\">8\u298a</span>countdown -= 4<span class=\"annotation\">\u29898</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"bb25: ../instrument-coverage/coverage_of_if_else.rs:9:5: 18:6:\n+    10:9-10:23: Assert: assert(!move (_7.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _1, const 4_i32) -&gt; [success: bb9, unwind: bb1]\"><span class=\"annotation\">8\u298a</span>countdown -= 4<span class=\"annotation\">\u29898</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"bb25: ../instrument-coverage/coverage_of_if_else.rs:9:5: 18:6:\n     15:9-15:23: Assign: _1 = move (_19.0: i32)\n     11:29-16:6: Assign: _4 = const ()\n     18:5-18:6: StorageDead: StorageDead(_8)\n@@ -223,7 +223,7 @@\n     14:9-14:10: StorageDead: StorageDead(_11)\n     14:9-14:10: StorageDead: StorageDead(_10)\n     15:9-15:23: Assign: _19 = CheckedSub(_1, const 5_i32)\n-    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\"><span class=\"annotation\">24\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 5\" title=\"bb22: ../instrument-coverage/coverage_of_if_else.rs:12:9: 14:10:\n+    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\"><span class=\"annotation\">24\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 5\" title=\"bb22: ../instrument-coverage/coverage_of_if_else.rs:12:9: 14:10:\n     12:9-14:10: Assign: _10 = const ()\n     12:9-14:10: Goto: goto -&gt; bb24\"><span class=\"annotation\">\u298922</span></span><span class=\"code even\" style=\"--layer: 6\" title=\"bb23: ../instrument-coverage/coverage_of_if_else.rs:12:9: 14:10:\n     13:13-13:26: Assign: _1 = const 0_i32\n@@ -234,12 +234,12 @@\n     14:9-14:10: StorageDead: StorageDead(_11)\n     14:9-14:10: StorageDead: StorageDead(_10)\n     15:9-15:23: Assign: _19 = CheckedSub(_1, const 5_i32)\n-    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\"></span></span>\n+    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\"></span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 8\" title=\"bb24: ../instrument-coverage/coverage_of_if_else.rs:14:9: 15:23:\n     14:9-14:10: StorageDead: StorageDead(_11)\n     14:9-14:10: StorageDead: StorageDead(_10)\n     15:9-15:23: Assign: _19 = CheckedSub(_1, const 5_i32)\n-    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298924</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"bb10: ../instrument-coverage/coverage_of_if_else.rs:11:12: 18:6:\n+    15:9-15:23: Assert: assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _1, const 5_i32) -&gt; [success: bb25, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298924</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"bb10: ../instrument-coverage/coverage_of_if_else.rs:11:12: 18:6:\n     11:12-18:6: FalseEdge: falseEdge -&gt; [real: bb12, imaginary: bb11]\">;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 4\" title=\"bb10: ../instrument-coverage/coverage_of_if_else.rs:11:12: 18:6:\n     11:12-18:6: FalseEdge: falseEdge -&gt; [real: bb12, imaginary: bb11]\">    } else {</span></span>\n@@ -353,7 +353,7 @@\n     25:22-27:6: Assign: _24 = const ()\n     25:5-34:6: Goto: goto -&gt; bb53\">        </span><span class=\"code odd\" style=\"--layer: 9\" title=\"bb35: ../instrument-coverage/coverage_of_if_else.rs:26:9: 26:23:\n     26:9-26:23: Assign: _27 = CheckedSub(_21, const 4_i32)\n-    26:9-26:23: Assert: assert(!move (_27.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _21, const 4_i32) -&gt; [success: bb36, unwind: bb1]\"><span class=\"annotation\">35\u298a</span>countdown -= 4<span class=\"annotation\">\u298935</span></span><span class=\"code even\" style=\"--layer: 8\" title=\"bb36: ../instrument-coverage/coverage_of_if_else.rs:25:5: 34:6:\n+    26:9-26:23: Assert: assert(!move (_27.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _21, const 4_i32) -&gt; [success: bb36, unwind: bb1]\"><span class=\"annotation\">35\u298a</span>countdown -= 4<span class=\"annotation\">\u298935</span></span><span class=\"code even\" style=\"--layer: 8\" title=\"bb36: ../instrument-coverage/coverage_of_if_else.rs:25:5: 34:6:\n     26:9-26:23: Assign: _21 = move (_27.0: i32)\n     25:22-27:6: Assign: _24 = const ()\n     25:5-34:6: Goto: goto -&gt; bb53\">;</span></span>\n@@ -459,7 +459,7 @@\n     30:9-30:10: StorageDead: StorageDead(_31)\n     30:9-30:10: StorageDead: StorageDead(_30)\n     31:9-31:23: Assign: _39 = CheckedSub(_21, const 5_i32)\n-    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\"><span class=\"annotation\">51\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 10\" title=\"bb48: ../instrument-coverage/coverage_of_if_else.rs:28:9: 30:10:\n+    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\"><span class=\"annotation\">51\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 10\" title=\"bb48: ../instrument-coverage/coverage_of_if_else.rs:28:9: 30:10:\n     28:9-30:10: FalseEdge: falseEdge -&gt; [real: bb50, imaginary: bb49]\"><span class=\"annotation\">\u298948</span></span><span class=\"code even\" style=\"--layer: 11\" title=\"bb50: ../instrument-coverage/coverage_of_if_else.rs:28:9: 30:10:\n     29:13-29:26: Assign: _21 = const 0_i32\n     28:61-30:10: Assign: _30 = const ()\n@@ -471,12 +471,12 @@\n     30:9-30:10: StorageDead: StorageDead(_31)\n     30:9-30:10: StorageDead: StorageDead(_30)\n     31:9-31:23: Assign: _39 = CheckedSub(_21, const 5_i32)\n-    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\"></span></span>\n+    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\"></span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 13\" title=\"bb51: ../instrument-coverage/coverage_of_if_else.rs:30:9: 31:23:\n     30:9-30:10: StorageDead: StorageDead(_31)\n     30:9-30:10: StorageDead: StorageDead(_30)\n     31:9-31:23: Assign: _39 = CheckedSub(_21, const 5_i32)\n-    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298951</span></span><span class=\"code even\" style=\"--layer: 9\" title=\"bb37: ../instrument-coverage/coverage_of_if_else.rs:27:12: 34:6:\n+    31:9-31:23: Assert: assert(!move (_39.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _21, const 5_i32) -&gt; [success: bb52, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298951</span></span><span class=\"code even\" style=\"--layer: 9\" title=\"bb37: ../instrument-coverage/coverage_of_if_else.rs:27:12: 34:6:\n     27:12-34:6: FalseEdge: falseEdge -&gt; [real: bb39, imaginary: bb38]\">;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 9\" title=\"bb37: ../instrument-coverage/coverage_of_if_else.rs:27:12: 34:6:\n     27:12-34:6: FalseEdge: falseEdge -&gt; [real: bb39, imaginary: bb38]\">    } else {</span></span>\n@@ -614,7 +614,7 @@\n     50:5-50:6: StorageDead: StorageDead(_47)\n     41:5-50:6: Goto: goto -&gt; bb78\">        </span><span class=\"code odd\" style=\"--layer: 14\" title=\"bb60: ../instrument-coverage/coverage_of_if_else.rs:42:9: 42:23:\n     42:9-42:23: Assign: _46 = CheckedSub(_41, const 4_i32)\n-    42:9-42:23: Assert: assert(!move (_46.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _41, const 4_i32) -&gt; [success: bb61, unwind: bb1]\"><span class=\"annotation\">60\u298a</span>countdown -= 4<span class=\"annotation\">\u298960</span></span><span class=\"code even\" style=\"--layer: 13\" title=\"bb77: ../instrument-coverage/coverage_of_if_else.rs:41:5: 50:6:\n+    42:9-42:23: Assert: assert(!move (_46.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _41, const 4_i32) -&gt; [success: bb61, unwind: bb1]\"><span class=\"annotation\">60\u298a</span>countdown -= 4<span class=\"annotation\">\u298960</span></span><span class=\"code even\" style=\"--layer: 13\" title=\"bb77: ../instrument-coverage/coverage_of_if_else.rs:41:5: 50:6:\n     47:9-47:23: Assign: _41 = move (_58.0: i32)\n     43:29-48:6: Assign: _0 = const ()\n     50:5-50:6: StorageDead: StorageDead(_47)\n@@ -719,7 +719,7 @@\n     46:9-46:10: StorageDead: StorageDead(_50)\n     46:9-46:10: StorageDead: StorageDead(_49)\n     47:9-47:23: Assign: _58 = CheckedSub(_41, const 5_i32)\n-    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\"><span class=\"annotation\">76\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 15\" title=\"bb75: ../instrument-coverage/coverage_of_if_else.rs:44:9: 46:10:\n+    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\"><span class=\"annotation\">76\u298a</span>}</span><span class=\"code odd\" style=\"--layer: 15\" title=\"bb75: ../instrument-coverage/coverage_of_if_else.rs:44:9: 46:10:\n     45:13-45:26: Assign: _41 = const 0_i32\n     44:61-46:10: Assign: _49 = const ()\n     44:9-46:10: Goto: goto -&gt; bb76\"><span class=\"annotation\">\u298975</span></span><span class=\"code even\" style=\"--layer: 16\" title=\"bb74: ../instrument-coverage/coverage_of_if_else.rs:44:9: 46:10:\n@@ -730,12 +730,12 @@\n     46:9-46:10: StorageDead: StorageDead(_50)\n     46:9-46:10: StorageDead: StorageDead(_49)\n     47:9-47:23: Assign: _58 = CheckedSub(_41, const 5_i32)\n-    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\"></span></span>\n+    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\"></span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 18\" title=\"bb76: ../instrument-coverage/coverage_of_if_else.rs:46:9: 47:23:\n     46:9-46:10: StorageDead: StorageDead(_50)\n     46:9-46:10: StorageDead: StorageDead(_49)\n     47:9-47:23: Assign: _58 = CheckedSub(_41, const 5_i32)\n-    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}` which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298976</span></span><span class=\"code even\" style=\"--layer: 14\" title=\"bb62: ../instrument-coverage/coverage_of_if_else.rs:43:12: 50:6:\n+    47:9-47:23: Assert: assert(!move (_58.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _41, const 5_i32) -&gt; [success: bb77, unwind: bb1]\">        countdown -= 5<span class=\"annotation\">\u298976</span></span><span class=\"code even\" style=\"--layer: 14\" title=\"bb62: ../instrument-coverage/coverage_of_if_else.rs:43:12: 50:6:\n     43:12-50:6: FalseEdge: falseEdge -&gt; [real: bb64, imaginary: bb63]\">;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 14\" title=\"bb62: ../instrument-coverage/coverage_of_if_else.rs:43:12: 50:6:\n     43:12-50:6: FalseEdge: falseEdge -&gt; [real: bb64, imaginary: bb63]\">    } else {</span></span>"}, {"sha": "4021dfcc6eb7d462d59c8c104b4d82ac71448b8c", "filename": "src/test/ui/array_const_index-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1,6 +1,6 @@\n const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n-//~^ index out of bounds: the len is 0 but the index is 1\n+//~^ index out of bounds: the length is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n \n fn main() {"}, {"sha": "7ccc3aa087e1e4f48f30bb08a8634ce9bfb5d943", "filename": "src/test/ui/array_const_index-0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const B: i32 = (&A)[1];\n    | ---------------^^^^^^^-\n    |                |\n-   |                index out of bounds: the len is 0 but the index is 1\n+   |                index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "d0ee1796c0ffcdccb6f27c954f46651bcda654e1", "filename": "src/test/ui/array_const_index-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1,6 +1,6 @@\n const A: [i32; 0] = [];\n const B: i32 = A[1];\n-//~^ index out of bounds: the len is 0 but the index is 1\n+//~^ index out of bounds: the length is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n \n fn main() {"}, {"sha": "37de61b9df01bb1fde86ee38dbcc27c20515f56d", "filename": "src/test/ui/array_const_index-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const B: i32 = A[1];\n    | ---------------^^^^-\n    |                |\n-   |                index out of bounds: the len is 0 but the index is 1\n+   |                index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "1497633c26af95196fcd00c2e11dca8249fde900", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL |     const B: u8 = Self::A + 1;\n    |     --------------^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to compute `u8::MAX + 1_u8` which would overflow\n+   |                   attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.noopt.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,53 +2,53 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide 1_i32 by zero\n+   |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide 1_i32 by zero\n+   |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n-   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,53 +2,53 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide 1_i32 by zero\n+   |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide 1_i32 by zero\n+   |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n-   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,53 +2,53 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide 1_i32 by zero\n+   |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide 1_i32 by zero\n+   |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n-   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "25af18eb162d5924ac9e71e719a4fb18ab3e9b46", "filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/from-sig-fail.rs:4:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] {\n-   |                                   ^^^^^ attempt to compute `0_usize - 1_usize` which would overflow\n+   |                                   ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "f95d6d2d5709ccaff427531ed56299fb5bca5ddb", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/simple_fail.rs:7:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n-   |                                 ^^^^^ attempt to compute `0_usize - 1_usize` which would overflow\n+   |                                 ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "276fb716d4255e4f5873136ca9c5f762d51b29d5", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this operation will panic at runtime\n   --> $DIR/ice-assert-fail-div-by-zero.rs:11:5\n    |\n LL |     f.0 / 0;\n-   |     ^^^^^^^ attempt to divide _ by zero\n+   |     ^^^^^^^ attempt to divide `_` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/ice-assert-fail-div-by-zero.rs:5:9"}, {"sha": "5916ea6d323e603e9e039d775912d1bbd5b3952a", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this operation will panic at runtime\n   --> $DIR/array-literal-index-oob.rs:7:8\n    |\n LL |     &{ [1, 2, 3][4] };\n-   |        ^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 4\n+   |        ^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 4\n    |\n note: the lint level is defined here\n   --> $DIR/array-literal-index-oob.rs:4:20"}, {"sha": "db64ebe0c4ae094c8e9752038555bfcb9f113f30", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n    |     -----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                                  |\n-   |                                  index out of bounds: the len is 1 but the index is 4\n+   |                                  index out of bounds: the length is 1 but the index is 4\n    |\n note: the lint level is defined here\n   --> $DIR/assoc_const_generic_impl.rs:3:9"}, {"sha": "eca2fe18ab96acd8ac756fc30cc7da94b42fe4b2", "filename": "src/test/ui/consts/const-array-oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -5,7 +5,7 @@ const BAR: usize = FOO[5]; // no error, because the error below occurs before re\n \n const BLUB: [u32; FOO[4]] = [5, 6];\n //~^ ERROR evaluation of constant value failed [E0080]\n-//~| index out of bounds: the len is 3 but the index is 4\n+//~| index out of bounds: the length is 3 but the index is 4\n \n fn main() {\n     let _ = BAR;"}, {"sha": "1aa3e88e5209702f4a60896c7df402d38523231c", "filename": "src/test/ui/consts/const-array-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-array-oob.rs:6:19\n    |\n LL | const BLUB: [u32; FOO[4]] = [5, 6];\n-   |                   ^^^^^^ index out of bounds: the len is 3 but the index is 4\n+   |                   ^^^^^^ index out of bounds: the length is 3 but the index is 4\n \n error: aborting due to previous error\n "}, {"sha": "36b36db7c18bcea5febd2d528c29c837183d222a", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -std::i8::MIN;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to negate i8::MIN which would overflow\n+   |                   attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n@@ -18,31 +18,31 @@ error: any use of this value will cause an error\n LL | pub const B: u8 = 200u8 + 200u8;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to compute `200_u8 + 200_u8` which would overflow\n+   |                   attempt to compute `200_u8 + 200_u8`, which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n    | ------------------^^^^^^^^^-\n    |                   |\n-   |                   attempt to compute `200_u8 * 4_u8` which would overflow\n+   |                   attempt to compute `200_u8 * 4_u8`, which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:6:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n    | ------------------^^^^^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to compute `42_u8 - 43_u8` which would overflow\n+   |                   attempt to compute `42_u8 - 43_u8`, which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:7:19\n    |\n LL | pub const E: u8 = [5u8][1];\n    | ------------------^^^^^^^^-\n    |                   |\n-   |                   index out of bounds: the len is 1 but the index is 1\n+   |                   index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5b688d4c6d84c903ec83a100597f34108511e852", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -std::i8::MIN;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to negate i8::MIN which would overflow\n+   |                   attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9"}, {"sha": "693b74c2c2f61c209546db18239b50880e89fd4d", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | const FOO: u8 = [5u8][1];\n    | ----------------^^^^^^^^-\n    |                 |\n-   |                 index out of bounds: the len is 1 but the index is 1\n+   |                 index out of bounds: the length is 1 but the index is 1\n    |\n note: the lint level is defined here\n   --> $DIR/const-err.rs:5:9"}, {"sha": "2473632cbc804a0e7cc881e4470ddb59e32da507", "filename": "src/test/ui/consts/const-err2.noopt.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,45 +2,45 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |              ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "2473632cbc804a0e7cc881e4470ddb59e32da507", "filename": "src/test/ui/consts/const-err2.opt.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,45 +2,45 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |              ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "2473632cbc804a0e7cc881e4470ddb59e32da507", "filename": "src/test/ui/consts/const-err2.opt_with_overflow_checks.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,45 +2,45 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |              ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "65dfbd8097e7635659e592250c6a6215f7782442", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | ------------------^^^^^---------------------------\n    |                   |\n-   |                   attempt to compute `5_u32 - 6_u32` which would overflow\n+   |                   attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9"}, {"sha": "0ae51786b36a5ac59b37a5c9be689965723038de", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-overflow-3.rs:20:11\n    |\n LL |     = [0; (i8::MAX + 1) as usize];\n-   |           ^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n+   |           ^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "e548fc266c2125e2ff99024270c81ef44a3e1acf", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-overflow-4.rs:13:13\n    |\n LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n+   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "51a810b8f3ba83e50d06ed4c729d962cb45c810a", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "eec440fcb76a5f7dc200776099aedf6999a58c23", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "e44f94c202166445d19df3fec3ae4f7f1b1a9307", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN * 2,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX * 2,\n-   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "7087a6f668c82986e50489910ac5fe9ef4557294", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this operation will panic at runtime\n   --> $DIR/erroneous-const.rs:6:22\n    |\n LL |     const VOID: () = [()][2];\n-   |                      ^^^^^^^ index out of bounds: the len is 1 but the index is 2\n+   |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:20\n@@ -16,7 +16,7 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     -----------------^^^^^^^-\n    |                      |\n-   |                      index out of bounds: the len is 1 but the index is 2\n+   |                      index out of bounds: the length is 1 but the index is 2\n    |\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:9"}, {"sha": "8647da90a37d454b8d8e4db1d3098cc4732074cf", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n    |     --------------------------------------------------------^^^^^---\n    |                                                             |\n-   |                                                             index out of bounds: the len is 0 but the index is 0\n+   |                                                             index out of bounds: the length is 0 but the index is 0\n    |\n note: the lint level is defined here\n   --> $DIR/index-out-of-bounds-never-type.rs:4:9"}, {"sha": "8bb3a0c67d65b7a5bd8bb090c95f19193f808721", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/index_out_of_bounds.rs:1:19\n    |\n LL | static FOO: i32 = [][0];\n-   |                   ^^^^^ index out of bounds: the len is 0 but the index is 0\n+   |                   ^^^^^ index out of bounds: the length is 0 but the index is 0\n \n error: aborting due to previous error\n "}, {"sha": "d247d691dbb1b9c9b9f6ec0bac9217b8e443a407", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this operation will panic at runtime\n   --> $DIR/index_out_of_bounds_propagated.rs:5:5\n    |\n LL |     array[1];\n-   |     ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |     ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "27e067cedbb5c8237cc9bfebd4f136b2208662b3", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL |     const X: u32 = 0 - 1;\n    |     ---------------^^^^^-\n    |                    |\n-   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n@@ -18,7 +18,7 @@ warning: any use of this value will cause an error\n LL |     const Y: u32 = foo(0 - 1);\n    |     -------------------^^^^^--\n    |                        |\n-   |                        attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-43197.rs:14:23"}, {"sha": "ca8885e935090b3d2dad57dc22994d493f567cca", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |     -------------------^^^^^^^^^^^^^^^^^-\n    |                        |\n-   |                        index out of bounds: the len is 3 but the index is 42\n+   |                        index out of bounds: the length is 3 but the index is 42\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "7327138627648f40b1443ab8fcd5a75419ddf04b", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |     ----------------^^^^^^^^^^^^^^^-\n    |                     |\n-   |                     attempt to compute `u8::MAX + u8::MAX` which would overflow\n+   |                     attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ce83d8e9bb0c9bbd81dfaa8df99c93eb5d2bbcb4", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:12:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,13 +14,13 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -50,13 +50,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -74,7 +74,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: 10 warnings emitted\n "}, {"sha": "2c66b175cfc2b5ee48e29d2a1561a79b0292e500", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,7 +14,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -44,13 +44,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -68,7 +68,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: 9 warnings emitted\n "}, {"sha": "ce83d8e9bb0c9bbd81dfaa8df99c93eb5d2bbcb4", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:12:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,13 +14,13 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -50,13 +50,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -74,7 +74,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: 10 warnings emitted\n "}, {"sha": "5be0fd96723dd3fe7f44a65f7e740dbe96883843", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | -------------------^^^^^-\n    |                    |\n-   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9"}, {"sha": "55f8a58ea9470aadc693372317f092c57a37b7e4", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | -------------------^^^^^-\n    |                    |\n-   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9"}, {"sha": "e8d4076a61a24f56e9c255e75d54ecec47f5cc6e", "filename": "src/test/ui/consts/const-eval/shift_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/shift_overflow.rs:3:9\n    |\n LL |     X = 1 << ((u32::MAX as u64) + 1),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to shift left by 4294967296_u64 which would overflow\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to shift left by `4294967296_u64`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "0cb13790f2f53549e1322ec9f456f3cec8bf65cd", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const FOO: i32 = [][0];\n    | -----------------^^^^^-\n    |                  |\n-   |                  index out of bounds: the len is 0 but the index is 0\n+   |                  index out of bounds: the length is 0 but the index is 0\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "350e4b24de100f0d40265f05ff5926b7914b6697", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-external-macro-const-err.rs:12:5\n    |\n LL |     static_assert!(2 + 2 == 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "2ab6d0ffdef4c49b4e9b40254e3fd0d18ba1a8d4", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const LEN: usize = ONE - TWO;\n    | -------------------^^^^^^^^^-\n    |                    |\n-   |                    attempt to compute `1_usize - 2_usize` which would overflow\n+   |                    attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ed77e9078425ada9b373f7763924928c8f757081", "filename": "src/test/ui/consts/const-len-underflow-subspans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -7,5 +7,5 @@ const TWO: usize = 2;\n fn main() {\n     let a: [i8; ONE - TWO] = unimplemented!();\n     //~^ ERROR evaluation of constant value failed\n-    //~| attempt to compute `1_usize - 2_usize` which would overflow\n+    //~| attempt to compute `1_usize - 2_usize`, which would overflow\n }"}, {"sha": "68e958b378da727a918cee90accdfd5207bc1e44", "filename": "src/test/ui/consts/const-len-underflow-subspans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-len-underflow-subspans.rs:8:17\n    |\n LL |     let a: [i8; ONE - TWO] = unimplemented!();\n-   |                 ^^^^^^^^^ attempt to compute `1_usize - 2_usize` which would overflow\n+   |                 ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "3bcf2b2de7bd7c01472e4b50a4d5216baec66f85", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this operation will panic at runtime\n   --> $DIR/const-prop-ice.rs:4:5\n    |\n LL |     [0; 3][3u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 3\n+   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 3\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "2b65ffc2db76058ae536c38470a1ad66a69bf435", "filename": "src/test/ui/consts/const-prop-ice2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this operation will panic at runtime\n   --> $DIR/const-prop-ice2.rs:6:20\n    |\n LL |     println!(\"{}\", xs[Enum::One as usize]);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "70852f8f56929b140c963424b3d11ac827ff96a4", "filename": "src/test/ui/consts/const-slice-oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@\n \n const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n-//~^ index out of bounds: the len is 3 but the index is 5\n+//~^ index out of bounds: the length is 3 but the index is 5\n //~| ERROR any use of this value will cause an error\n \n fn main() {"}, {"sha": "0077bafe9e628fe5bc42a6730cd43d4aae12a77a", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const BAR: u32 = FOO[5];\n    | -----------------^^^^^^-\n    |                  |\n-   |                  index out of bounds: the len is 3 but the index is 5\n+   |                  index out of bounds: the length is 3 but the index is 5\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "3ff8cb348e76a9c081e4a169ad9f4ac45d6bc1e7", "filename": "src/test/ui/error-codes/E0029-teach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -5,7 +5,7 @@ fn main() {\n \n     match s {\n         \"hello\" ..= \"world\" => {}\n-        //~^ ERROR only char and numeric types are allowed in range patterns\n+        //~^ ERROR only `char` and numeric types are allowed in range patterns\n         _ => {}\n     }\n }"}, {"sha": "b89b2e7d11e8b4d8d677e6d3292034c6b09844c4", "filename": "src/test/ui/error-codes/E0029-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1,4 +1,4 @@\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/E0029-teach.rs:7:9\n    |\n LL |         \"hello\" ..= \"world\" => {}"}, {"sha": "d9b53e113c01ea14585e5f1f5f2b4183d142ccbe", "filename": "src/test/ui/error-codes/E0029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -3,7 +3,7 @@ fn main() {\n \n     match s {\n         \"hello\" ..= \"world\" => {}\n-        //~^ ERROR only char and numeric types are allowed in range patterns\n+        //~^ ERROR only `char` and numeric types are allowed in range patterns\n         _ => {}\n     }\n }"}, {"sha": "f7250b39d3f917df5e6a65d66785ac3679057a28", "filename": "src/test/ui/error-codes/E0029.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1,4 +1,4 @@\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/E0029.rs:5:9\n    |\n LL |         \"hello\" ..= \"world\" => {}"}, {"sha": "ea3264b61b356fd51a89529c784809c27b4f44b1", "filename": "src/test/ui/error-codes/E0080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1,6 +1,6 @@\n enum Enum {\n     X = (1 << 500), //~ ERROR E0080\n-    //~| attempt to shift left by 500_i32 which would overflow\n+    //~| attempt to shift left by `500_i32`, which would overflow\n     Y = (1 / 0) //~ ERROR E0080\n }\n "}, {"sha": "60ed9a4358f12c78c2d916b732d76a7b7e285459", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/E0080.rs:2:9\n    |\n LL |     X = (1 << 500),\n-   |         ^^^^^^^^^^ attempt to shift left by 500_i32 which would overflow\n+   |         ^^^^^^^^^^ attempt to shift left by `500_i32`, which would overflow\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/E0080.rs:4:9\n    |\n LL |     Y = (1 / 0)\n-   |         ^^^^^^^ attempt to divide 1_isize by zero\n+   |         ^^^^^^^ attempt to divide `1_isize` by zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "551f10e66e35b4963bfb8966ca6f928d65e33124", "filename": "src/test/ui/eval-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feval-enum.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1,9 +1,9 @@\n enum Test {\n     DivZero = 1/0,\n-    //~^ attempt to divide 1_isize by zero\n+    //~^ attempt to divide `1_isize` by zero\n     //~| ERROR evaluation of constant value failed\n     RemZero = 1%0,\n-    //~^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+    //~^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n     //~| ERROR evaluation of constant value failed\n }\n "}, {"sha": "fb4d903489f7ff49a8d5f6bd48a27ce698a5e66d", "filename": "src/test/ui/eval-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Feval-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Feval-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feval-enum.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/eval-enum.rs:2:15\n    |\n LL |     DivZero = 1/0,\n-   |               ^^^ attempt to divide 1_isize by zero\n+   |               ^^^ attempt to divide `1_isize` by zero\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/eval-enum.rs:5:15\n    |\n LL |     RemZero = 1%0,\n-   |               ^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+   |               ^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b08732219db7dc3c077716be98baca7308234cba", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-bad-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@\n #![feature(exclusive_range_pattern)]\n \n fn main() {\n-    let \"a\".. = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n-    let ..\"a\" = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n-    let ..=\"a\" = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n+    let \"a\".. = \"a\"; //~ ERROR only `char` and numeric types are allowed in range patterns\n+    let ..\"a\" = \"a\"; //~ ERROR only `char` and numeric types are allowed in range patterns\n+    let ..=\"a\" = \"a\"; //~ ERROR only `char` and numeric types are allowed in range patterns\n }"}, {"sha": "df0dae5696de65125c58acfc51d114b92bfa5533", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-bad-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1,16 +1,16 @@\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/half-open-range-pats-bad-types.rs:5:9\n    |\n LL |     let \"a\".. = \"a\";\n    |         ^^^ this is of type `&'static str` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/half-open-range-pats-bad-types.rs:6:11\n    |\n LL |     let ..\"a\" = \"a\";\n    |           ^^^ this is of type `&'static str` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/half-open-range-pats-bad-types.rs:7:12\n    |\n LL |     let ..=\"a\" = \"a\";"}, {"sha": "eb85f349843c42a16f8c3abeb7c55816c42e0ad4", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,15 +2,15 @@ error: this operation will panic at runtime\n   --> $DIR/issue-54348.rs:5:5\n    |\n LL |     [1][1.5 as usize];\n-   |     ^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |     ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-54348.rs:6:5\n    |\n LL |     [1][1u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |     ^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 2 previous errors\n "}, {"sha": "739b5468743b22dda6a54495c896a1975f9ce5cb", "filename": "src/test/ui/issues/issue-8460-const.noopt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n+   |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n+   |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n+   |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "739b5468743b22dda6a54495c896a1975f9ce5cb", "filename": "src/test/ui/issues/issue-8460-const.opt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n+   |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n+   |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n+   |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "739b5468743b22dda6a54495c896a1975f9ce5cb", "filename": "src/test/ui/issues/issue-8460-const.opt_with_overflow_checks.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n+   |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n+   |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n+   |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "d7fd514611c27a56b94828bbf82a5b3f977284af", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n@@ -14,139 +14,139 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |             ^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n+   |               ^^^^^^^^^ attempt to shift left by `-8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `%BITS%`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `%BITS%`, which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "d7fd514611c27a56b94828bbf82a5b3f977284af", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n@@ -14,139 +14,139 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |             ^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n+   |               ^^^^^^^^^ attempt to shift left by `-8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `%BITS%`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `%BITS%`, which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "d7fd514611c27a56b94828bbf82a5b3f977284af", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n@@ -14,139 +14,139 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |             ^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n+   |               ^^^^^^^^^ attempt to shift left by `-8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `%BITS%`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `%BITS%`, which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "d8774cb4dfae658565d83695112bc4a35aeb9fe0", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@\n //[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n // build-pass\n // ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n-// normalize-stderr-test \"shift left by (64|32)_usize which\" -> \"shift left by %BITS% which\"\n+// normalize-stderr-test \"shift left by `(64|32)_usize`, which\" -> \"shift left by `%BITS%`, which\"\n \n #![crate_type=\"lib\"]\n #![warn(arithmetic_overflow, const_err)]"}, {"sha": "e53c8463ef4bfdb7582005c817193c3488e663e1", "filename": "src/test/ui/match/match-range-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,17 +2,17 @@ fn main() {\n     match \"wow\" {\n         \"bar\" ..= \"foo\" => { }\n     };\n-    //~^^ ERROR only char and numeric types are allowed in range\n+    //~^^ ERROR only `char` and numeric types are allowed in range\n \n     match \"wow\" {\n         10 ..= \"what\" => ()\n     };\n-    //~^^ ERROR only char and numeric types are allowed in range\n+    //~^^ ERROR only `char` and numeric types are allowed in range\n \n     match \"wow\" {\n         true ..= \"what\" => {}\n     };\n-    //~^^ ERROR only char and numeric types are allowed in range\n+    //~^^ ERROR only `char` and numeric types are allowed in range\n \n     match 5 {\n         'c' ..= 100 => { }"}, {"sha": "938c05ac7324c8c02295977068cdb824c516b739", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -1,4 +1,4 @@\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/match-range-fail.rs:3:9\n    |\n LL |         \"bar\" ..= \"foo\" => { }\n@@ -7,15 +7,15 @@ LL |         \"bar\" ..= \"foo\" => { }\n    |         |         this is of type `&'static str` but it should be `char` or numeric\n    |         this is of type `&'static str` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/match-range-fail.rs:8:16\n    |\n LL |         10 ..= \"what\" => ()\n    |         --     ^^^^^^ this is of type `&'static str` but it should be `char` or numeric\n    |         |\n    |         this is of type `{integer}`\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/match-range-fail.rs:13:9\n    |\n LL |         true ..= \"what\" => {}"}, {"sha": "0fe56f417251585e60b0abe84cc203ea62cf64c6", "filename": "src/test/ui/mir/mir_detects_invalid_ops.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,15 +2,15 @@ error: this operation will panic at runtime\n   --> $DIR/mir_detects_invalid_ops.rs:11:14\n    |\n LL |     let _z = 1 / y;\n-   |              ^^^^^ attempt to divide 1_i32 by zero\n+   |              ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/mir_detects_invalid_ops.rs:16:14\n    |\n LL |     let _z = 1 % y;\n-   |              ^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n+   |              ^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d029939c7028402d3442907ea47c109fab67e40", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-1.rs:7:14\n    |\n LL |     let _x = 1_i32 << 32;\n-   |              ^^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |              ^^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-1.rs:4:9"}, {"sha": "8598792e08043bf0684fb0ecbc0c242b09141667", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-2.rs:7:14\n    |\n LL |     let _x = 1 << -1;\n-   |              ^^^^^^^ attempt to shift left by -1_i32 which would overflow\n+   |              ^^^^^^^ attempt to shift left by `-1_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-2.rs:4:9"}, {"sha": "9c6f806f1d65cbc792c27c754020faabf34fbf7f", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-3.rs:7:14\n    |\n LL |     let _x = 1_u64 << 64;\n-   |              ^^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |              ^^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-3.rs:4:9"}, {"sha": "08081a0b7876d469e01b19fecb4679995ad61a6f", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-4.rs:11:13\n    |\n LL |     let x = 1_i8 << 17;\n-   |             ^^^^^^^^^^ attempt to shift left by 17_i32 which would overflow\n+   |             ^^^^^^^^^^ attempt to shift left by `17_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-4.rs:7:9"}, {"sha": "4d726fa7fec2143bdd7d3a37a76003057c459a87", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-1.rs:7:14\n    |\n LL |     let _x = -1_i32 >> 32;\n-   |              ^^^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-1.rs:4:9"}, {"sha": "9a8349d5ddb799cf3dabf55bf6211af8b2507fd2", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-2.rs:7:14\n    |\n LL |     let _x = -1_i32 >> -1;\n-   |              ^^^^^^^^^^^^ attempt to shift right by -1_i32 which would overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by `-1_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-2.rs:4:9"}, {"sha": "f48b7ff6de54be408f9f947089d45981753804e3", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-3.rs:7:14\n    |\n LL |     let _x = -1_i64 >> 64;\n-   |              ^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-3.rs:4:9"}, {"sha": "4816a389965d64403b08d1aac2d3810deccc8b4b", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-4.rs:11:13\n    |\n LL |     let x = 2_i8 >> 17;\n-   |             ^^^^^^^^^^ attempt to shift right by 17_i32 which would overflow\n+   |             ^^^^^^^^^^ attempt to shift right by `17_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-4.rs:7:9"}, {"sha": "cd36f543d68b34dd33d9f3ac29f0e329ec54af95", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-5.rs:7:14\n    |\n LL |     let _n = 1i64 >> [64][0];\n-   |              ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |              ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-5.rs:4:9"}, {"sha": "bec8b17df0b4c0561a5f174dd7535eaaf80819af", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-6.rs:7:14\n    |\n LL |     let _n = 1i64 >> [64][0];\n-   |              ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |              ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-6.rs:4:9"}, {"sha": "7412b624b09cd8f41de6120012d3a8d253a6c409", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -17,8 +17,8 @@ fn exclusive_from_to() {\n     if let 0..Y = 0 {} // OK.\n     if let X..3 = 0 {} // OK.\n     if let X..Y = 0 {} // OK.\n-    if let true..Y = 0 {} //~ ERROR only char and numeric types\n-    if let X..true = 0 {} //~ ERROR only char and numeric types\n+    if let true..Y = 0 {} //~ ERROR only `char` and numeric types\n+    if let X..true = 0 {} //~ ERROR only `char` and numeric types\n     if let .0..Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     if let X.. .0 = 0 {} //~ ERROR mismatched types\n@@ -30,8 +30,8 @@ fn inclusive_from_to() {\n     if let 0..=Y = 0 {} // OK.\n     if let X..=3 = 0 {} // OK.\n     if let X..=Y = 0 {} // OK.\n-    if let true..=Y = 0 {} //~ ERROR only char and numeric types\n-    if let X..=true = 0 {} //~ ERROR only char and numeric types\n+    if let true..=Y = 0 {} //~ ERROR only `char` and numeric types\n+    if let X..=true = 0 {} //~ ERROR only `char` and numeric types\n     if let .0..=Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     if let X..=.0 = 0 {} //~ ERROR mismatched types\n@@ -43,9 +43,9 @@ fn inclusive2_from_to() {\n     if let 0...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n     if let X...3 = 0 {} //~ ERROR `...` range patterns are deprecated\n     if let X...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n-    if let true...Y = 0 {} //~ ERROR only char and numeric types\n+    if let true...Y = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n-    if let X...true = 0 {} //~ ERROR only char and numeric types\n+    if let X...true = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n     if let .0...Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n@@ -59,7 +59,7 @@ fn exclusive_from() {\n     if let 0.. = 0 {}\n     if let X.. = 0 {}\n     if let true.. = 0 {}\n-    //~^ ERROR only char and numeric types\n+    //~^ ERROR only `char` and numeric types\n     if let .0.. = 0 {}\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -69,7 +69,7 @@ fn inclusive_from() {\n     if let 0..= = 0 {} //~ ERROR inclusive range with no end\n     if let X..= = 0 {} //~ ERROR inclusive range with no end\n     if let true..= = 0 {} //~ ERROR inclusive range with no end\n-    //~| ERROR only char and numeric types\n+    //~| ERROR only `char` and numeric types\n     if let .0..= = 0 {} //~ ERROR inclusive range with no end\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -79,7 +79,7 @@ fn inclusive2_from() {\n     if let 0... = 0 {} //~ ERROR inclusive range with no end\n     if let X... = 0 {} //~ ERROR inclusive range with no end\n     if let true... = 0 {} //~ ERROR inclusive range with no end\n-    //~| ERROR only char and numeric types\n+    //~| ERROR only `char` and numeric types\n     if let .0... = 0 {} //~ ERROR inclusive range with no end\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -89,7 +89,7 @@ fn exclusive_to() {\n     if let ..0 = 0 {}\n     if let ..Y = 0 {}\n     if let ..true = 0 {}\n-    //~^ ERROR only char and numeric types\n+    //~^ ERROR only `char` and numeric types\n     if let .. .0 = 0 {}\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -99,7 +99,7 @@ fn inclusive_to() {\n     if let ..=3 = 0 {}\n     if let ..=Y = 0 {}\n     if let ..=true = 0 {}\n-    //~^ ERROR only char and numeric types\n+    //~^ ERROR only `char` and numeric types\n     if let ..=.0 = 0 {}\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -112,7 +112,7 @@ fn inclusive2_to() {\n     //~^ ERROR range-to patterns with `...` are not allowed\n     if let ...true = 0 {}\n     //~^ ERROR range-to patterns with `...` are not allowed\n-    //~| ERROR only char and numeric types\n+    //~| ERROR only `char` and numeric types\n     if let ....3 = 0 {}\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR range-to patterns with `...` are not allowed"}, {"sha": "e351a9783bf17042907b17d32b944866e5db93a4", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -258,15 +258,15 @@ LL |     mac2!(0, 1);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:20:12\n    |\n LL |     if let true..Y = 0 {}\n    |            ^^^^  - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:21:15\n    |\n LL |     if let X..true = 0 {}\n@@ -291,15 +291,15 @@ LL |     if let X.. .0 = 0 {}\n    |            |   expected integer, found floating-point number\n    |            this is of type `u8`\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:33:12\n    |\n LL |     if let true..=Y = 0 {}\n    |            ^^^^   - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:34:16\n    |\n LL |     if let X..=true = 0 {}\n@@ -324,15 +324,15 @@ LL |     if let X..=.0 = 0 {}\n    |            |   expected integer, found floating-point number\n    |            this is of type `u8`\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:46:12\n    |\n LL |     if let true...Y = 0 {}\n    |            ^^^^   - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:48:16\n    |\n LL |     if let X...true = 0 {}\n@@ -357,7 +357,7 @@ LL |     if let X... .0 = 0 {}\n    |            |    expected integer, found floating-point number\n    |            this is of type `u8`\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:61:12\n    |\n LL |     if let true.. = 0 {}\n@@ -369,7 +369,7 @@ error[E0308]: mismatched types\n LL |     if let .0.. = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:71:12\n    |\n LL |     if let true..= = 0 {}\n@@ -381,7 +381,7 @@ error[E0308]: mismatched types\n LL |     if let .0..= = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:81:12\n    |\n LL |     if let true... = 0 {}\n@@ -393,7 +393,7 @@ error[E0308]: mismatched types\n LL |     if let .0... = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:91:14\n    |\n LL |     if let ..true = 0 {}\n@@ -405,7 +405,7 @@ error[E0308]: mismatched types\n LL |     if let .. .0 = 0 {}\n    |               ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:101:15\n    |\n LL |     if let ..=true = 0 {}\n@@ -417,7 +417,7 @@ error[E0308]: mismatched types\n LL |     if let ..=.0 = 0 {}\n    |               ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:113:15\n    |\n LL |     if let ...true = 0 {}"}, {"sha": "9464f277fb088e7897a0cfb22d49c0f575e5925b", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -19,7 +19,7 @@ enum_number!(Change {\n     Neg = -1,\n     Arith = 1 + 1, //~ ERROR arbitrary expressions aren't allowed in patterns\n                    //~| ERROR arbitrary expressions aren't allowed in patterns\n-                   //~| ERROR only char and numeric types are allowed in range patterns\n+                   //~| ERROR only `char` and numeric types are allowed in range patterns\n });\n \n fn main() {}"}, {"sha": "51af167a7c1d198f0a1be079c20a6912e17bb595", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -10,7 +10,7 @@ error: arbitrary expressions aren't allowed in patterns\n LL |     Arith = 1 + 1,\n    |             ^^^^^\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/patkind-litrange-no-expr.rs:20:13\n    |\n LL |                 $( $value ..= 42 => Some($name::$variant), )* // PatKind::Range"}, {"sha": "e8a95a46010af7c17fc66a92ea6e6b3f23fc4dba", "filename": "src/test/ui/qualified/qualified-path-params.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -18,7 +18,8 @@ impl S {\n fn main() {\n     match 10 {\n         <S as Tr>::A::f::<u8> => {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found associated function\n-        0 ..= <S as Tr>::A::f::<u8> => {} //~ ERROR only char and numeric types are allowed in range\n+        //~^ ERROR expected unit struct, unit variant or constant, found associated function\n+        0 ..= <S as Tr>::A::f::<u8> => {}\n+        //~^ ERROR only `char` and numeric types are allowed in range\n     }\n }"}, {"sha": "2be2deeb7554942470a19e15877b1adeec9b91be", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=4d52dc4790cfaf3f23ff219c9a9932be2bfcd53e", "patch": "@@ -4,7 +4,7 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |         <S as Tr>::A::f::<u8> => {}\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/qualified-path-params.rs:22:15\n    |\n LL |         0 ..= <S as Tr>::A::f::<u8> => {}"}]}