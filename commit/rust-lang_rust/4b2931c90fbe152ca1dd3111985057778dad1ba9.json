{"sha": "4b2931c90fbe152ca1dd3111985057778dad1ba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMjkzMWM5MGZiZTE1MmNhMWRkMzExMTk4NTA1Nzc3OGRhZDFiYTk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T01:11:28Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-29T23:48:17Z"}, "message": "iterator: implement DoubleEndedIterator for FlatMap", "tree": {"sha": "43eaa66931b079b655aeb3c496abb7f778bd8b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43eaa66931b079b655aeb3c496abb7f778bd8b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b2931c90fbe152ca1dd3111985057778dad1ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2931c90fbe152ca1dd3111985057778dad1ba9", "html_url": "https://github.com/rust-lang/rust/commit/4b2931c90fbe152ca1dd3111985057778dad1ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b2931c90fbe152ca1dd3111985057778dad1ba9/comments", "author": null, "committer": null, "parents": [{"sha": "bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb996bf92edc5c9a34275bae6143f1ada73e6c7f", "html_url": "https://github.com/rust-lang/rust/commit/bb996bf92edc5c9a34275bae6143f1ada73e6c7f"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "33d863f3716e05c64d894ee0e6f413697acfd073", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4b2931c90fbe152ca1dd3111985057778dad1ba9/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2931c90fbe152ca1dd3111985057778dad1ba9/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=4b2931c90fbe152ca1dd3111985057778dad1ba9", "patch": "@@ -529,7 +529,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     #[inline]\n     fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n         -> FlatMap<'r, A, T, U> {\n-        FlatMap{iter: self, f: f, subiter: None }\n+        FlatMap{iter: self, f: f, frontiter: None, backiter: None }\n     }\n \n     // FIXME: #5898: should be called `peek`\n@@ -1251,22 +1251,44 @@ impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'self, A, B, T, St> {\n pub struct FlatMap<'self, A, T, U> {\n     priv iter: T,\n     priv f: &'self fn(A) -> U,\n-    priv subiter: Option<U>,\n+    priv frontiter: Option<U>,\n+    priv backiter: Option<U>,\n }\n \n impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n     FlatMap<'self, A, T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         loop {\n-            for self.subiter.mut_iter().advance |inner| {\n+            for self.frontiter.mut_iter().advance |inner| {\n                 for inner.advance |x| {\n                     return Some(x)\n                 }\n             }\n             match self.iter.next().map_consume(|x| (self.f)(x)) {\n-                None => return None,\n-                next => self.subiter = next,\n+                None => return self.backiter.chain_mut_ref(|it| it.next()),\n+                next => self.frontiter = next,\n+            }\n+        }\n+    }\n+}\n+\n+impl<'self,\n+     A, T: DoubleEndedIterator<A>,\n+     B, U: DoubleEndedIterator<B>> DoubleEndedIterator<B>\n+     for FlatMap<'self, A, T, U> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<B> {\n+        loop {\n+            for self.backiter.mut_iter().advance |inner| {\n+                match inner.next_back() {\n+                    None => (),\n+                    y => return y\n+                }\n+            }\n+            match self.iter.next_back().map_consume(|x| (self.f)(x)) {\n+                None => return self.frontiter.chain_mut_ref(|it| it.next_back()),\n+                next => self.backiter = next,\n             }\n         }\n     }\n@@ -1768,6 +1790,23 @@ mod tests {\n         assert_eq!(it.next_back(), None)\n     }\n \n+    #[test]\n+    fn test_double_ended_flat_map() {\n+        let u = [0u,1];\n+        let v = [5,6,7,8];\n+        let mut it = u.iter().flat_map_(|x| v.slice(*x, v.len()).iter());\n+        assert_eq!(it.next_back().unwrap(), &8);\n+        assert_eq!(it.next().unwrap(),      &5);\n+        assert_eq!(it.next_back().unwrap(), &7);\n+        assert_eq!(it.next_back().unwrap(), &6);\n+        assert_eq!(it.next_back().unwrap(), &8);\n+        assert_eq!(it.next().unwrap(),      &6);\n+        assert_eq!(it.next_back().unwrap(), &7);\n+        assert_eq!(it.next_back(), None);\n+        assert_eq!(it.next(),      None);\n+        assert_eq!(it.next_back(), None);\n+    }\n+\n     #[test]\n     fn test_random_access_chain() {\n         let xs = [1, 2, 3, 4, 5];"}]}