{"sha": "a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "node_id": "C_kwDOAAsO6NoAKGE4NDhjNGJhM2ZmNjljMmNiMGNiNjZhNTlkYzM3ZmQ1M2JiY2I3MGI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-25T14:29:54Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-29T13:19:49Z"}, "message": "Avoid storing the ImplPolarity and Constness next to a TraitRef and use TraitPredicate instead", "tree": {"sha": "4a55bc9e864acb7082ceabece9060083c072d4a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a55bc9e864acb7082ceabece9060083c072d4a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmGk03UACgkQbQF6ltjm\nwvmvzQ//Y6+XSlMJ63Lm+yXcCy1bSvJK1u5T3ApJlwlcwOTgmpA01JiGbosAn5iy\nj7DJmY+ai7xdsjnTtcZVvhS7h/ghv17WgHuCvPect5HPdJBJNBYxIsaNerZwZMk1\n1W4UFsSr+NwzM3O9cBBsepnLjEpWSoDy5HJvj2fJYh7u2KQ7CvbncKW/pv2+nh6w\n42gDZBVJ8dQcKQO6sczZ8EiKASgeThHXWe4siP/DcX1QvfQj6SEVxmQPytFjGtWW\nWiPFsZZV1KVA+KTOxM44D3VusTPt/NkBwsnJ9K5gRKfxq1QLexSWByDdSC4GOwAp\noa4HFEvOQklJEIUPJJgbIA+u1sYo3zoaFFfvfe8dNgLTRgti59NPVXxztG7A4yP+\n2bLKTy4CF5l5lz9A1t1wMdwn21/Rg1PO5cD5Qa4l88ETT8tQ/gwCs6UFFyLenWVS\n2yx4mw8lsgi83MXHEvJdhEakPlW10lGjbGaFCujR66mIMfQG2VPsubKfHUBlfM/j\nQM6GzNS74fYELw2x2z17MWPg/rATngv0Gea/uhQPlvmbJtkDtVotwAnr2UqDk3Pn\nVaWJ6JPYQtKl/afWL5QjlQ6PI3dJQQZD1v0eAp+zPvNKABmRx0L6uF7uWweDCtrj\nSe21/j0+BTKJepy83enGtoDgCKM7mqAELolb1zcA2ZxlTs0Y/0U=\n=Yz+/\n-----END PGP SIGNATURE-----", "payload": "tree 4a55bc9e864acb7082ceabece9060083c072d4a8\nparent d161cc20718138ab7846b51303c0dc0db0172a8b\nauthor Oli Scherer <git-spam-no-reply9815368754983@oli-obk.de> 1635172194 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1638191989 +0800\n\nAvoid storing the ImplPolarity and Constness next to a TraitRef and use TraitPredicate instead\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "html_url": "https://github.com/rust-lang/rust/commit/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d161cc20718138ab7846b51303c0dc0db0172a8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d161cc20718138ab7846b51303c0dc0db0172a8b", "html_url": "https://github.com/rust-lang/rust/commit/d161cc20718138ab7846b51303c0dc0db0172a8b"}], "stats": {"total": 112, "additions": 59, "deletions": 53}, "files": [{"sha": "7e3cfbe2eba2d59b97dc55f2fbbac19b7763bcab", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -328,8 +328,8 @@ pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n                 ));\n                 for (super_predicate, _) in super_predicates.predicates {\n                     let subst_predicate = super_predicate.subst_supertrait(tcx, &trait_ref);\n-                    if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {\n-                        stack.push(binder.value);\n+                    if let Some(binder) = subst_predicate.to_opt_poly_trait_pred() {\n+                        stack.push(binder.map_bound(|t| t.trait_ref));\n                     }\n                 }\n \n@@ -362,8 +362,8 @@ impl<'tcx, I: Iterator<Item = PredicateObligation<'tcx>>> Iterator for FilterToT\n \n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n         while let Some(obligation) = self.base_iterator.next() {\n-            if let Some(data) = obligation.predicate.to_opt_poly_trait_ref() {\n-                return Some(data.value);\n+            if let Some(data) = obligation.predicate.to_opt_poly_trait_pred() {\n+                return Some(data.map_bound(|t| t.trait_ref));\n             }\n         }\n         None"}, {"sha": "71ee00c602a3d158a603809007463a960cd49b48", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -101,7 +101,7 @@ pub enum SelectionCandidate<'tcx> {\n         /// `false` if there are no *further* obligations.\n         has_nested: bool,\n     },\n-    ParamCandidate((ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>, ty::ImplPolarity)),\n+    ParamCandidate(ty::PolyTraitPredicate<'tcx>),\n     ImplCandidate(DefId),\n     AutoImplCandidate(DefId),\n "}, {"sha": "c5bbaf60069adb73500d419dd29b6126d5d6b23d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -885,12 +885,10 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n-    pub fn to_opt_poly_trait_ref(self) -> Option<ConstnessAnd<PolyTraitRef<'tcx>>> {\n+    pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {\n         let predicate = self.kind();\n         match predicate.skip_binder() {\n-            PredicateKind::Trait(t) => {\n-                Some(ConstnessAnd { constness: t.constness, value: predicate.rebind(t.trait_ref) })\n-            }\n+            PredicateKind::Trait(t) => Some(predicate.rebind(t)),\n             PredicateKind::Projection(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)"}, {"sha": "ba527341acc0637c04ac1fe92e4d76c6f175b936", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -574,14 +574,17 @@ fn prepare_vtable_segments<'tcx, T>(\n                     .predicates\n                     .into_iter()\n                     .filter_map(move |(pred, _)| {\n-                        pred.subst_supertrait(tcx, &inner_most_trait_ref).to_opt_poly_trait_ref()\n+                        pred.subst_supertrait(tcx, &inner_most_trait_ref).to_opt_poly_trait_pred()\n                     });\n \n                 'diving_in_skip_visited_traits: loop {\n                     if let Some(next_super_trait) = direct_super_traits_iter.next() {\n                         if visited.insert(next_super_trait.to_predicate(tcx)) {\n+                            // We're throwing away potential constness of super traits here.\n+                            // FIXME: handle ~const super traits\n+                            let next_super_trait = next_super_trait.map_bound(|t| t.trait_ref);\n                             stack.push((\n-                                next_super_trait.value,\n+                                next_super_trait,\n                                 emit_vptr_on_new_entry,\n                                 Some(direct_super_traits_iter),\n                             ));\n@@ -613,7 +616,11 @@ fn prepare_vtable_segments<'tcx, T>(\n                     if let Some(siblings) = siblings_opt {\n                         if let Some(next_inner_most_trait_ref) = siblings.next() {\n                             if visited.insert(next_inner_most_trait_ref.to_predicate(tcx)) {\n-                                *inner_most_trait_ref = next_inner_most_trait_ref.value;\n+                                // We're throwing away potential constness of super traits here.\n+                                // FIXME: handle ~const super traits\n+                                let next_inner_most_trait_ref =\n+                                    next_inner_most_trait_ref.map_bound(|t| t.trait_ref);\n+                                *inner_most_trait_ref = next_inner_most_trait_ref;\n                                 *emit_vptr = emit_vptr_on_new_entry;\n                                 break 'exiting_out;\n                             } else {"}, {"sha": "d78fa2482315191837949e0c605c8fa1042269a7", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -383,17 +383,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .param_env\n             .caller_bounds()\n             .iter()\n-            .filter_map(|o| o.to_opt_poly_trait_ref());\n+            .filter_map(|o| o.to_opt_poly_trait_pred());\n \n         // Micro-optimization: filter out predicates relating to different traits.\n         let matching_bounds =\n-            all_bounds.filter(|p| p.value.def_id() == stack.obligation.predicate.def_id());\n+            all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());\n \n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         for bound in matching_bounds {\n-            let wc = self.evaluate_where_clause(stack, bound.value)?;\n+            // FIXME(oli-obk): it is suspicious that we are dropping the constness and\n+            // polarity here.\n+            let wc = self.evaluate_where_clause(stack, bound.map_bound(|t| t.trait_ref))?;\n             if wc.may_apply() {\n-                candidates.vec.push(ParamCandidate((bound, stack.obligation.polarity())));\n+                candidates.vec.push(ParamCandidate(bound));\n             }\n         }\n "}, {"sha": "ec2ea2b8c940fe69a90e8781ee64a427f11940e9", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -58,8 +58,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ParamCandidate(param) => {\n-                let obligations = self.confirm_param_candidate(obligation, param.0.value);\n-                Ok(ImplSource::Param(obligations, param.0.constness))\n+                let obligations =\n+                    self.confirm_param_candidate(obligation, param.map_bound(|t| t.trait_ref));\n+                Ok(ImplSource::Param(obligations, param.skip_binder().constness))\n             }\n \n             ImplCandidate(impl_def_id) => {\n@@ -139,7 +140,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             let trait_predicate = self.infcx.shallow_resolve(obligation.predicate);\n             let placeholder_trait_predicate =\n-                self.infcx().replace_bound_vars_with_placeholders(trait_predicate);\n+                self.infcx().replace_bound_vars_with_placeholders(trait_predicate).trait_ref;\n             let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n             let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n             let (def_id, substs) = match *placeholder_self_ty.kind() {\n@@ -150,8 +151,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             let candidate_predicate = tcx.item_bounds(def_id)[idx].subst(tcx, substs);\n             let candidate = candidate_predicate\n-                .to_opt_poly_trait_ref()\n-                .expect(\"projection candidate is not a trait predicate\");\n+                .to_opt_poly_trait_pred()\n+                .expect(\"projection candidate is not a trait predicate\")\n+                .map_bound(|t| t.trait_ref);\n             let mut obligations = Vec::new();\n             let candidate = normalize_with_depth_to(\n                 self,\n@@ -165,7 +167,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.extend(self.infcx.commit_if_ok(|_| {\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(placeholder_trait_predicate.to_poly_trait_ref(), candidate.value)\n+                    .sup(placeholder_trait_predicate, candidate)\n                     .map(|InferOk { obligations, .. }| obligations)\n                     .map_err(|_| Unimplemented)\n             })?);"}, {"sha": "e1ab9bba4598247b56ac1a6622d518bba59d460d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -1089,10 +1089,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ImplCandidate(def_id)\n                         if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n                     // const param\n-                    ParamCandidate((\n-                        ty::ConstnessAnd { constness: ty::BoundConstness::ConstIfConst, .. },\n-                        _,\n-                    )) => {}\n+                    ParamCandidate(trait_pred)\n+                        if trait_pred.skip_binder().constness\n+                            == ty::BoundConstness::ConstIfConst => {}\n                     // auto trait impl\n                     AutoImplCandidate(..) => {}\n                     // generator, this will raise error in other places\n@@ -1474,7 +1473,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Check if a bound would previously have been removed when normalizing\n         // the param_env so that it can be given the lowest priority. See\n         // #50825 for the motivation for this.\n-        let is_global = |cand: &ty::PolyTraitRef<'tcx>| {\n+        let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {\n             cand.is_global(self.infcx.tcx) && !cand.has_late_bound_regions()\n         };\n \n@@ -1507,25 +1506,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | ConstDropCandidate,\n             ) => false,\n \n-            (\n-                ParamCandidate((other, other_polarity)),\n-                ParamCandidate((victim, victim_polarity)),\n-            ) => {\n-                let same_except_bound_vars = other.value.skip_binder()\n-                    == victim.value.skip_binder()\n-                    && other.constness == victim.constness\n-                    && other_polarity == victim_polarity\n-                    && !other.value.skip_binder().has_escaping_bound_vars();\n+            (ParamCandidate(other), ParamCandidate(victim)) => {\n+                let same_except_bound_vars = other.skip_binder().trait_ref\n+                    == victim.skip_binder().trait_ref\n+                    && other.skip_binder().constness == victim.skip_binder().constness\n+                    && other.skip_binder().polarity == victim.skip_binder().polarity\n+                    && !other.skip_binder().trait_ref.has_escaping_bound_vars();\n                 if same_except_bound_vars {\n                     // See issue #84398. In short, we can generate multiple ParamCandidates which are\n                     // the same except for unused bound vars. Just pick the one with the fewest bound vars\n                     // or the current one if tied (they should both evaluate to the same answer). This is\n                     // probably best characterized as a \"hack\", since we might prefer to just do our\n                     // best to *not* create essentially duplicate candidates in the first place.\n-                    other.value.bound_vars().len() <= victim.value.bound_vars().len()\n-                } else if other.value == victim.value\n-                    && victim.constness == ty::BoundConstness::NotConst\n-                    && other_polarity == victim_polarity\n+                    other.bound_vars().len() <= victim.bound_vars().len()\n+                } else if other.skip_binder().trait_ref == victim.skip_binder().trait_ref\n+                    && victim.skip_binder().constness == ty::BoundConstness::NotConst\n+                    && other.skip_binder().polarity == victim.skip_binder().polarity\n                 {\n                     // Drop otherwise equivalent non-const candidates in favor of const candidates.\n                     true\n@@ -1555,11 +1551,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | TraitAliasCandidate(..)\n                 | ObjectCandidate(_)\n                 | ProjectionCandidate(_),\n-            ) => !is_global(&cand.0.value),\n+            ) => !is_global(cand),\n             (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(&cand.0.value)\n+                is_global(cand)\n             }\n             (\n                 ImplCandidate(_)\n@@ -1575,7 +1571,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(&cand.0.value) && other.evaluation.must_apply_modulo_regions()\n+                is_global(cand) && other.evaluation.must_apply_modulo_regions()\n             }\n \n             (ProjectionCandidate(i), ProjectionCandidate(j))"}, {"sha": "ab732f510ff92c73d9c739485ac4f00d1388387b", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -508,9 +508,9 @@ crate fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<St\n         Vec::with_capacity(predicates.len() + types_without_default_bounds.len());\n \n     for (p, _) in predicates {\n-        if let Some(poly_trait_ref) = p.to_opt_poly_trait_ref() {\n-            if Some(poly_trait_ref.value.def_id()) == sized_trait {\n-                types_without_default_bounds.remove(poly_trait_ref.value.self_ty().skip_binder());\n+        if let Some(poly_trait_ref) = p.to_opt_poly_trait_pred() {\n+            if Some(poly_trait_ref.def_id()) == sized_trait {\n+                types_without_default_bounds.remove(poly_trait_ref.self_ty().skip_binder());\n                 continue;\n             }\n         }"}, {"sha": "bc3da12b22e450f703bc758cdcbfee1aec70a65b", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -126,8 +126,8 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n \n         let items = predicates.predicates.iter().rev().filter_map(|(pred, span)| {\n             pred.subst_supertrait(tcx, &trait_ref)\n-                .to_opt_poly_trait_ref()\n-                .map(|trait_ref| item.clone_and_push(trait_ref.value, *span))\n+                .to_opt_poly_trait_pred()\n+                .map(|trait_ref| item.clone_and_push(trait_ref.map_bound(|t| t.trait_ref), *span))\n         });\n         debug!(\"expand_trait_aliases: items={:?}\", items.clone());\n \n@@ -183,8 +183,8 @@ impl Iterator for SupertraitDefIds<'tcx> {\n             predicates\n                 .predicates\n                 .iter()\n-                .filter_map(|(pred, _)| pred.to_opt_poly_trait_ref())\n-                .map(|trait_ref| trait_ref.value.def_id())\n+                .filter_map(|(pred, _)| pred.to_opt_poly_trait_pred())\n+                .map(|trait_ref| trait_ref.def_id())\n                 .filter(|&super_def_id| visited.insert(super_def_id)),\n         );\n         Some(def_id)"}, {"sha": "664dd861612b1f2e64241cb790ece775b1511cba", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -298,9 +298,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n         let extend = |obligation: traits::PredicateObligation<'tcx>| {\n             let mut cause = cause.clone();\n-            if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_ref() {\n+            if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_pred() {\n                 let derived_cause = traits::DerivedObligationCause {\n-                    parent_trait_ref: parent_trait_ref.value,\n+                    // TODO: sus\n+                    parent_trait_ref: parent_trait_ref.map_bound(|t| t.trait_ref),\n                     parent_code: Lrc::new(obligation.cause.code.clone()),\n                 };\n                 cause.make_mut().code ="}, {"sha": "b532a6b118f060e469882b9a45c1ad04441140e2", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a848c4ba3ff69c2cb0cb66a59dc37fd53bbcb70b", "patch": "@@ -1588,7 +1588,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 traits::transitive_bounds_that_define_assoc_type(\n                     tcx,\n                     predicates.iter().filter_map(|(p, _)| {\n-                        p.to_opt_poly_trait_ref().map(|trait_ref| trait_ref.value)\n+                        Some(p.to_opt_poly_trait_pred()?.map_bound(|t| t.trait_ref))\n                     }),\n                     assoc_name,\n                 )"}]}