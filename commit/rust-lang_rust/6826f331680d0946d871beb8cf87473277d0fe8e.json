{"sha": "6826f331680d0946d871beb8cf87473277d0fe8e", "node_id": "C_kwDOAAsO6NoAKDY4MjZmMzMxNjgwZDA5NDZkODcxYmViOGNmODc0NzMyNzdkMGZlOGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-07T18:33:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T18:33:23Z"}, "message": "Rollup merge of #97917 - AronParker:master, r=ChrisDenton\n\nImplement ExitCodeExt for Windows\n\nFixes #97914\n\n### Motivation:\n\nOn Windows it is common for applications to return `HRESULT` (`i32`) or `DWORD` (`u32`) values. These stem from COM based components ([HRESULTS](https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-coinitialize)), Win32 errors ([GetLastError](https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror)), GUI applications ([WM_QUIT](https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-quit)) and more. The newly stabilized `ExitCode` provides an excellent fit for propagating these values, because `std::process::exit` does not run deconstructors which can result in errors. However, `ExitCode` currently only implements `From<u8> for ExitCode`, which disallows the full range of `i32`/`u32` values. This pull requests attempts to address that shortcoming by providing windows specific extensions that accept a `u32` value (which covers all possible `HRESULTS` and Win32 errors) analog to [ExitStatusExt::from_raw](https://doc.rust-lang.org/std/os/windows/process/trait.ExitStatusExt.html#tymethod.from_raw).\n\nThis was also intended by the original Stabilization https://github.com/rust-lang/rust/pull/93840#issue-1129209143=  as pointed out by ``@eggyal`` in https://github.com/rust-lang/rust/issues/97914#issuecomment-1151076755:\n\n> Issues around platform specific representations: We resolved this issue by changing the return type of report from i32 to the opaque type ExitCode. __That way we can change the underlying representation without affecting the API, letting us offer full support for platform specific exit code APIs in the future.__\n\n[Emphasis added]\n\n### API\n\n```rust\n/// Windows-specific extensions to [`process::ExitCode`].\n///\n/// This trait is sealed: it cannot be implemented outside the standard library.\n/// This is so that future additional methods are not breaking changes.\n#[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\npub trait ExitCodeExt: Sealed {\n    /// Creates a new `ExitCode` from the raw underlying `u32` return value of\n    /// a process.\n    #[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\n    fn from_raw(raw: u32) -> Self;\n}\n\n#[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\nimpl ExitCodeExt for process::ExitCode {\n    fn from_raw(raw: u32) -> Self {\n        process::ExitCode::from_inner(From::from(raw))\n    }\n}\n```\n\n### Misc\n\nI apologize in advance if I misplaced any attributes regarding stabilzation, as far as I learned traits are insta-stable so I chose to make them stable. If this is an error, please let me know and I'll correct it. I also added some additional machinery to make it work, analog to [ExitStatus](https://doc.rust-lang.org/std/process/struct.ExitStatus.html#).\n\nEDIT: Proposal: https://github.com/rust-lang/libs-team/issues/48", "tree": {"sha": "05c9409aad680639d93b3e3a08095d80334e4392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05c9409aad680639d93b3e3a08095d80334e4392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6826f331680d0946d871beb8cf87473277d0fe8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixybzCRBK7hj4Ov3rIwAAoM4IAFLqlr5mRj/PHeG0pAaIwOyr\n/rFlbjj8rb64h98SRW+PZQjtqRhiympkwV38uhiq0ExhsV5QWh2734yn8+QSYtw+\nJW0fMitoPvvWqZqw/kqFJswnTuKKlVzj+aMEAiRtRleYyFCgJV/T8IQSejT2gPKO\na9sHis4zjTUgSEiQrAlSZiOKTp+X6iJrBXoVmvYQpyWBCc0BivawYt+8Sh1lnuJx\nf7Iw7U6Xgsj7f0cLljD3VhOM4ds6EnJUrqffqpQZpQjHgppS7fc8v9aSBRZxrMh2\nIITzM1IMQi9gB6r9uXQh3aFk2SGeYh5X6xptMv1xODA/u+Ji3A2U+u1YucyANWQ=\n=FhyW\n-----END PGP SIGNATURE-----\n", "payload": "tree 05c9409aad680639d93b3e3a08095d80334e4392\nparent 3e51277fe638dc0c8ceb6d1d3acc5aa247277c29\nparent b13af732f74bb84a5af522c4e2f5b51950747f0d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657218803 +0200\ncommitter GitHub <noreply@github.com> 1657218803 +0200\n\nRollup merge of #97917 - AronParker:master, r=ChrisDenton\n\nImplement ExitCodeExt for Windows\n\nFixes #97914\n\n### Motivation:\n\nOn Windows it is common for applications to return `HRESULT` (`i32`) or `DWORD` (`u32`) values. These stem from COM based components ([HRESULTS](https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-coinitialize)), Win32 errors ([GetLastError](https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror)), GUI applications ([WM_QUIT](https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-quit)) and more. The newly stabilized `ExitCode` provides an excellent fit for propagating these values, because `std::process::exit` does not run deconstructors which can result in errors. However, `ExitCode` currently only implements `From<u8> for ExitCode`, which disallows the full range of `i32`/`u32` values. This pull requests attempts to address that shortcoming by providing windows specific extensions that accept a `u32` value (which covers all possible `HRESULTS` and Win32 errors) analog to [ExitStatusExt::from_raw](https://doc.rust-lang.org/std/os/windows/process/trait.ExitStatusExt.html#tymethod.from_raw).\n\nThis was also intended by the original Stabilization https://github.com/rust-lang/rust/pull/93840#issue-1129209143=  as pointed out by ``@eggyal`` in https://github.com/rust-lang/rust/issues/97914#issuecomment-1151076755:\n\n> Issues around platform specific representations: We resolved this issue by changing the return type of report from i32 to the opaque type ExitCode. __That way we can change the underlying representation without affecting the API, letting us offer full support for platform specific exit code APIs in the future.__\n\n[Emphasis added]\n\n### API\n\n```rust\n/// Windows-specific extensions to [`process::ExitCode`].\n///\n/// This trait is sealed: it cannot be implemented outside the standard library.\n/// This is so that future additional methods are not breaking changes.\n#[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\npub trait ExitCodeExt: Sealed {\n    /// Creates a new `ExitCode` from the raw underlying `u32` return value of\n    /// a process.\n    #[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\n    fn from_raw(raw: u32) -> Self;\n}\n\n#[stable(feature = \"windows_process_exit_code_from\", since = \"1.63.0\")]\nimpl ExitCodeExt for process::ExitCode {\n    fn from_raw(raw: u32) -> Self {\n        process::ExitCode::from_inner(From::from(raw))\n    }\n}\n```\n\n### Misc\n\nI apologize in advance if I misplaced any attributes regarding stabilzation, as far as I learned traits are insta-stable so I chose to make them stable. If this is an error, please let me know and I'll correct it. I also added some additional machinery to make it work, analog to [ExitStatus](https://doc.rust-lang.org/std/process/struct.ExitStatus.html#).\n\nEDIT: Proposal: https://github.com/rust-lang/libs-team/issues/48\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6826f331680d0946d871beb8cf87473277d0fe8e", "html_url": "https://github.com/rust-lang/rust/commit/6826f331680d0946d871beb8cf87473277d0fe8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6826f331680d0946d871beb8cf87473277d0fe8e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e51277fe638dc0c8ceb6d1d3acc5aa247277c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e51277fe638dc0c8ceb6d1d3acc5aa247277c29", "html_url": "https://github.com/rust-lang/rust/commit/3e51277fe638dc0c8ceb6d1d3acc5aa247277c29"}, {"sha": "b13af732f74bb84a5af522c4e2f5b51950747f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13af732f74bb84a5af522c4e2f5b51950747f0d", "html_url": "https://github.com/rust-lang/rust/commit/b13af732f74bb84a5af522c4e2f5b51950747f0d"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "073168cf2d2091620206638420286a77c37ab324", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6826f331680d0946d871beb8cf87473277d0fe8e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6826f331680d0946d871beb8cf87473277d0fe8e/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=6826f331680d0946d871beb8cf87473277d0fe8e", "patch": "@@ -234,3 +234,26 @@ impl ChildExt for process::Child {\n         self.handle.main_thread_handle()\n     }\n }\n+\n+/// Windows-specific extensions to [`process::ExitCode`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n+#[unstable(feature = \"windows_process_exit_code_from\", issue = \"none\")]\n+pub trait ExitCodeExt: Sealed {\n+    /// Creates a new `ExitCode` from the raw underlying `u32` return value of\n+    /// a process.\n+    ///\n+    /// The exit code should not be 259, as this conflicts with the `STILL_ACTIVE`\n+    /// macro returned from the `GetExitCodeProcess` function to signal that the\n+    /// process has yet to run to completion.\n+    #[unstable(feature = \"windows_process_exit_code_from\", issue = \"none\")]\n+    fn from_raw(raw: u32) -> Self;\n+}\n+\n+#[unstable(feature = \"windows_process_exit_code_from\", issue = \"none\")]\n+impl ExitCodeExt for process::ExitCode {\n+    fn from_raw(raw: u32) -> Self {\n+        process::ExitCode::from_inner(From::from(raw))\n+    }\n+}"}, {"sha": "d6cba7e7598f682be946c0446fcbc42f67ce2186", "filename": "library/std/src/process.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6826f331680d0946d871beb8cf87473277d0fe8e/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6826f331680d0946d871beb8cf87473277d0fe8e/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=6826f331680d0946d871beb8cf87473277d0fe8e", "patch": "@@ -1724,6 +1724,10 @@ impl crate::error::Error for ExitStatusError {}\n #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n pub struct ExitCode(imp::ExitCode);\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for ExitCode {}\n+\n #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n impl ExitCode {\n     /// The canonical `ExitCode` for successful termination on this platform.\n@@ -1814,6 +1818,18 @@ impl From<u8> for ExitCode {\n     }\n }\n \n+impl AsInner<imp::ExitCode> for ExitCode {\n+    fn as_inner(&self) -> &imp::ExitCode {\n+        &self.0\n+    }\n+}\n+\n+impl FromInner<imp::ExitCode> for ExitCode {\n+    fn from_inner(s: imp::ExitCode) -> ExitCode {\n+        ExitCode(s)\n+    }\n+}\n+\n impl Child {\n     /// Forces the child process to exit. If the child has already exited, an [`InvalidInput`]\n     /// error is returned."}, {"sha": "02d5af4719ae8fda9b72311724ce67bf3cf0342a", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6826f331680d0946d871beb8cf87473277d0fe8e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6826f331680d0946d871beb8cf87473277d0fe8e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=6826f331680d0946d871beb8cf87473277d0fe8e", "patch": "@@ -707,6 +707,12 @@ impl From<u8> for ExitCode {\n     }\n }\n \n+impl From<u32> for ExitCode {\n+    fn from(code: u32) -> Self {\n+        ExitCode(c::DWORD::from(code))\n+    }\n+}\n+\n fn zeroed_startupinfo() -> c::STARTUPINFO {\n     c::STARTUPINFO {\n         cb: 0,"}]}