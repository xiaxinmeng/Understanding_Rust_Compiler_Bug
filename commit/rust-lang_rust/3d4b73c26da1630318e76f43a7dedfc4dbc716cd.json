{"sha": "3d4b73c26da1630318e76f43a7dedfc4dbc716cd", "node_id": "C_kwDOAAsO6NoAKDNkNGI3M2MyNmRhMTYzMDMxOGU3NmY0M2E3ZGVkZmM0ZGJjNzE2Y2Q", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-11-07T20:00:37Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-11-07T20:00:37Z"}, "message": "[`excessive_bools`] lint trait functions even without bodies", "tree": {"sha": "da6908668d080165260bf5f9701415e532f1b6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da6908668d080165260bf5f9701415e532f1b6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d4b73c26da1630318e76f43a7dedfc4dbc716cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4b73c26da1630318e76f43a7dedfc4dbc716cd", "html_url": "https://github.com/rust-lang/rust/commit/3d4b73c26da1630318e76f43a7dedfc4dbc716cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d4b73c26da1630318e76f43a7dedfc4dbc716cd/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13b737d5b89c374d7d0c9b2f3968654b9c5ba370", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b737d5b89c374d7d0c9b2f3968654b9c5ba370", "html_url": "https://github.com/rust-lang/rust/commit/13b737d5b89c374d7d0c9b2f3968654b9c5ba370"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "fc2912f696e0384baa554564d683d4ba23f80fcd", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d4b73c26da1630318e76f43a7dedfc4dbc716cd/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4b73c26da1630318e76f43a7dedfc4dbc716cd/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=3d4b73c26da1630318e76f43a7dedfc4dbc716cd", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{get_parent_as_impl, has_repr_attr, is_bool};\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, FnDecl, HirId, Item, ItemKind, Ty};\n+use rustc_hir::{Body, FnDecl, HirId, Item, ItemKind, TraitFn, TraitItem, TraitItemKind, Ty};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -114,7 +114,7 @@ impl ExcessiveBools {\n     }\n \n     fn check_fn_sig(&self, cx: &LateContext<'_>, fn_decl: &FnDecl<'_>, span: Span) {\n-        if self.too_many_bools(fn_decl.inputs.iter(), Kind::Fn) {\n+        if !span.from_expansion() && self.too_many_bools(fn_decl.inputs.iter(), Kind::Fn) {\n             span_lint_and_help(\n                 cx,\n                 FN_PARAMS_EXCESSIVE_BOOLS,\n@@ -152,6 +152,15 @@ impl<'tcx> LateLintPass<'tcx> for ExcessiveBools {\n         }\n     }\n \n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx TraitItem<'tcx>) {\n+        // functions with a body are already checked by `check_fn`\n+        if let TraitItemKind::Fn(fn_sig, TraitFn::Required(_)) = &trait_item.kind\n+            && fn_sig.header.abi == Abi::Rust\n+            {\n+            self.check_fn_sig(cx, fn_sig.decl, fn_sig.span);\n+        }\n+    }\n+\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,\n@@ -163,7 +172,6 @@ impl<'tcx> LateLintPass<'tcx> for ExcessiveBools {\n     ) {\n         if let Some(fn_header) = fn_kind.header()\n             && fn_header.abi == Abi::Rust\n-            && !span.from_expansion()\n             && get_parent_as_impl(cx.tcx, hir_id)\n                 .map_or(true,\n                     |impl_item| impl_item.of_trait.is_none()"}, {"sha": "f53e531629aaef67e74b66ae674e4015f78b7061", "filename": "tests/ui/fn_params_excessive_bools.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d4b73c26da1630318e76f43a7dedfc4dbc716cd/tests%2Fui%2Ffn_params_excessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4b73c26da1630318e76f43a7dedfc4dbc716cd/tests%2Fui%2Ffn_params_excessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_params_excessive_bools.rs?ref=3d4b73c26da1630318e76f43a7dedfc4dbc716cd", "patch": "@@ -23,10 +23,12 @@ fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}\n \n struct S;\n trait Trait {\n+    // should warn for trait functions with and without body\n     fn f(_: bool, _: bool, _: bool, _: bool);\n     fn g(_: bool, _: bool, _: bool, _: Vec<u32>);\n     #[allow(clippy::fn_params_excessive_bools)]\n     fn h(_: bool, _: bool, _: bool, _: bool, _: bool, _: bool);\n+    fn i(_: bool, _: bool, _: bool, _: bool) {}\n }\n \n impl S {"}, {"sha": "43363b46972c345583c0929ab1638c61f36d2b78", "filename": "tests/ui/fn_params_excessive_bools.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d4b73c26da1630318e76f43a7dedfc4dbc716cd/tests%2Fui%2Ffn_params_excessive_bools.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d4b73c26da1630318e76f43a7dedfc4dbc716cd/tests%2Fui%2Ffn_params_excessive_bools.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_params_excessive_bools.stderr?ref=3d4b73c26da1630318e76f43a7dedfc4dbc716cd", "patch": "@@ -16,15 +16,31 @@ LL | fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool\n    = help: consider refactoring bools into two-variant enums\n \n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:33:5\n+  --> $DIR/fn_params_excessive_bools.rs:27:5\n+   |\n+LL |     fn f(_: bool, _: bool, _: bool, _: bool);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: more than 3 bools in function parameters\n+  --> $DIR/fn_params_excessive_bools.rs:31:5\n+   |\n+LL |     fn i(_: bool, _: bool, _: bool, _: bool) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: more than 3 bools in function parameters\n+  --> $DIR/fn_params_excessive_bools.rs:35:5\n    |\n LL |     fn f(&self, _: bool, _: bool, _: bool, _: bool) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider refactoring bools into two-variant enums\n \n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:48:5\n+  --> $DIR/fn_params_excessive_bools.rs:50:5\n    |\n LL | /     fn n(_: bool, _: u32, _: bool, _: Box<u32>, _: bool, _: bool) {\n LL | |         fn nn(_: bool, _: bool, _: bool, _: bool) {}\n@@ -34,12 +50,12 @@ LL | |     }\n    = help: consider refactoring bools into two-variant enums\n \n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:49:9\n+  --> $DIR/fn_params_excessive_bools.rs:51:9\n    |\n LL |         fn nn(_: bool, _: bool, _: bool, _: bool) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider refactoring bools into two-variant enums\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}]}