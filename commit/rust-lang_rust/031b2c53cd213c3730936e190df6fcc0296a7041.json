{"sha": "031b2c53cd213c3730936e190df6fcc0296a7041", "node_id": "C_kwDOAAsO6NoAKDAzMWIyYzUzY2QyMTNjMzczMDkzNmUxOTBkZjZmY2MwMjk2YTcwNDE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-19T20:57:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-13T12:14:37Z"}, "message": "Always use CreateParameter mode for function definitions.", "tree": {"sha": "55eaf181922ddc65282e2d7e5cf2ac0ccef69676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55eaf181922ddc65282e2d7e5cf2ac0ccef69676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/031b2c53cd213c3730936e190df6fcc0296a7041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/031b2c53cd213c3730936e190df6fcc0296a7041", "html_url": "https://github.com/rust-lang/rust/commit/031b2c53cd213c3730936e190df6fcc0296a7041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/031b2c53cd213c3730936e190df6fcc0296a7041/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a639f89d0414a34b7a72702849f3e9f95b46de5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a639f89d0414a34b7a72702849f3e9f95b46de5c", "html_url": "https://github.com/rust-lang/rust/commit/a639f89d0414a34b7a72702849f3e9f95b46de5c"}], "stats": {"total": 82, "additions": 39, "deletions": 43}, "files": [{"sha": "3b3717400224a2ae4d7f1f761e43b830074d95e2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -758,7 +758,10 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 // We don't need to deal with patterns in parameters, because\n                 // they are not possible for foreign or bodiless functions.\n                 self.with_lifetime_rib(\n-                    LifetimeRibKind::AnonymousPassThrough(fn_id, false),\n+                    LifetimeRibKind::AnonymousCreateParameter {\n+                        binder: fn_id,\n+                        report_in_path: false,\n+                    },\n                     |this| walk_list!(this, visit_param, &sig.decl.inputs),\n                 );\n                 self.with_lifetime_rib(\n@@ -792,18 +795,13 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         // generic parameters.  This is especially useful for `async fn`, where\n                         // these fresh generic parameters can be applied to the opaque `impl Trait`\n                         // return type.\n-                        let rib = if async_node_id.is_some() {\n-                            // Only emit a hard error for `async fn`, since this kind of\n-                            // elision has always been allowed in regular `fn`s.\n+                        this.with_lifetime_rib(\n                             LifetimeRibKind::AnonymousCreateParameter {\n                                 binder: fn_id,\n-                                report_in_path: true,\n-                            }\n-                        } else {\n-                            LifetimeRibKind::AnonymousPassThrough(fn_id, false)\n-                        };\n-                        this.with_lifetime_rib(\n-                            rib,\n+                                // Only emit a hard error for `async fn`, since this kind of\n+                                // elision has always been allowed in regular `fn`s.\n+                                report_in_path: async_node_id.is_some(),\n+                            },\n                             // Add each argument to the rib.\n                             |this| this.resolve_params(&declaration.inputs),\n                         );"}, {"sha": "ac197dfe6ff69ec3bcd8b64508b2f658d24af2ed", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the anonymous lifetime #2 defined here\n+note: lifetime parameter instantiated with the anonymous lifetime as defined here\n   --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n-note: but lifetime parameter must outlive the anonymous lifetime #1 defined here\n+note: but lifetime parameter must outlive the anonymous lifetime as defined here\n   --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}"}, {"sha": "78d4bb913b873193cc991188b922dc318ce56c92", "filename": "src/test/ui/generic-associated-types/issue-95305.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -11,7 +11,10 @@ trait Foo {\n fn foo(x: &impl Foo<Item<'_> = u32>) { }\n                        //~^ ERROR `'_` cannot be used here [E0637]\n \n+// Ok: the anonymous lifetime is bound to the function.\n fn bar(x: &impl for<'a> Foo<Item<'a> = &'_ u32>) { }\n-                                      //~^ ERROR missing lifetime specifier\n+\n+// Ok: the anonymous lifetime is bound to the function.\n+fn baz(x: &impl for<'a> Foo<Item<'a> = &u32>) { }\n \n fn main() {}"}, {"sha": "d8557525f54ed589d7a1fbcc80b60ca24576c514", "filename": "src/test/ui/generic-associated-types/issue-95305.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -4,18 +4,6 @@ error[E0637]: `'_` cannot be used here\n LL | fn foo(x: &impl Foo<Item<'_> = u32>) { }\n    |                          ^^ `'_` is a reserved lifetime name\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-95305.rs:14:41\n-   |\n-LL | fn bar(x: &impl for<'a> Foo<Item<'a> = &'_ u32>) { }\n-   |                                         ^^ expected named lifetime parameter\n-   |\n-help: consider using the `'a` lifetime\n-   |\n-LL | fn bar(x: &impl for<'a> Foo<Item<'a> = &'a u32>) { }\n-   |                                         ~~\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0106, E0637.\n-For more information about an error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "e9f50b41f6acd9207133c17325dfaa4b02e240ac", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -6,7 +6,7 @@ LL |     fn next(&'a mut self) -> Option<Self::Item>\n    |\n    = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> Option<_>`\n               found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> Option<_>`\n-note: the anonymous lifetime #1 defined here...\n+note: the anonymous lifetime as defined here...\n   --> $DIR/issue-37884.rs:6:5\n    |\n LL |     fn next(&'a mut self) -> Option<Self::Item>"}, {"sha": "06256ebbc29a30fb3f351f6dbdea5ca525d706a9", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -2,14 +2,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n+   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n LL |     x\n    |     ^\n    |\n-help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0))` lifetime bound\n+help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0)) {\n-   |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n+   |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "2ef0f5a4853f9d4f682256a5a2729349ddeba266", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -1,2 +1,8 @@\n-fn f(_: impl Iterator<Item = &'_ ()>) {} //~ ERROR missing lifetime specifier\n+// This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+fn f(_: impl Iterator<Item = &'_ ()>) {}\n+\n+// But that lifetime does not participate in resolution.\n+fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+//~^ ERROR missing lifetime specifier\n+\n fn main() {}"}, {"sha": "a09ef8121d78f5eb902c9ad120b85d6e00b5f801", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -1,13 +1,14 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-trait-missing-lifetime.rs:1:31\n+  --> $DIR/impl-trait-missing-lifetime.rs:5:50\n    |\n-LL | fn f(_: impl Iterator<Item = &'_ ()>) {}\n-   |                               ^^ expected named lifetime parameter\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                  ^^ expected named lifetime parameter\n    |\n-help: consider introducing a named lifetime parameter\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n    |\n-LL | fn f<'a>(_: impl Iterator<Item = &'a ()>) {}\n-   |     ++++                          ~~\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                  ~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "94f6dc266245a11e4ca722b9df9d660ec027edb0", "filename": "src/test/ui/wf/wf-in-foreign-fn-decls-issue-80468.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/031b2c53cd213c3730936e190df6fcc0296a7041/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr?ref=031b2c53cd213c3730936e190df6fcc0296a7041", "patch": "@@ -21,11 +21,11 @@ note: because this has an unmet lifetime requirement\n    |\n LL | pub struct Wrapper<T: Trait>(T);\n    |                       ^^^^^ introduces a `'static` lifetime requirement\n-note: the anonymous lifetime #1 defined here...\n-  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:5\n+note: the anonymous lifetime as defined here...\n+  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:29\n    |\n LL |     pub fn repro(_: Wrapper<Ref>);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^\n note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n   --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:13:1\n    |"}]}