{"sha": "e7b62be96b07534bd45decb18ec125a8d85542bb", "node_id": "C_kwDOAAsO6NoAKGU3YjYyYmU5NmIwNzUzNGJkNDVkZWNiMThlYzEyNWE4ZDg1NTQyYmI", "commit": {"author": {"name": "Quinn Painter", "email": "quinn@geekymonkey.com", "date": "2022-09-02T13:16:02Z"}, "committer": {"name": "Quinn Painter", "email": "quinn@geekymonkey.com", "date": "2022-09-02T13:16:02Z"}, "message": "Add {thumb,arm}v5te-none-eabi targets", "tree": {"sha": "e59294788f53addd0a7b1dfd7506151ce1fe932d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59294788f53addd0a7b1dfd7506151ce1fe932d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7b62be96b07534bd45decb18ec125a8d85542bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b62be96b07534bd45decb18ec125a8d85542bb", "html_url": "https://github.com/rust-lang/rust/commit/e7b62be96b07534bd45decb18ec125a8d85542bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7b62be96b07534bd45decb18ec125a8d85542bb/comments", "author": {"login": "QuinnPainter", "id": 1771999, "node_id": "MDQ6VXNlcjE3NzE5OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1771999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuinnPainter", "html_url": "https://github.com/QuinnPainter", "followers_url": "https://api.github.com/users/QuinnPainter/followers", "following_url": "https://api.github.com/users/QuinnPainter/following{/other_user}", "gists_url": "https://api.github.com/users/QuinnPainter/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuinnPainter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuinnPainter/subscriptions", "organizations_url": "https://api.github.com/users/QuinnPainter/orgs", "repos_url": "https://api.github.com/users/QuinnPainter/repos", "events_url": "https://api.github.com/users/QuinnPainter/events{/privacy}", "received_events_url": "https://api.github.com/users/QuinnPainter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuinnPainter", "id": 1771999, "node_id": "MDQ6VXNlcjE3NzE5OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1771999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuinnPainter", "html_url": "https://github.com/QuinnPainter", "followers_url": "https://api.github.com/users/QuinnPainter/followers", "following_url": "https://api.github.com/users/QuinnPainter/following{/other_user}", "gists_url": "https://api.github.com/users/QuinnPainter/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuinnPainter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuinnPainter/subscriptions", "organizations_url": "https://api.github.com/users/QuinnPainter/orgs", "repos_url": "https://api.github.com/users/QuinnPainter/repos", "events_url": "https://api.github.com/users/QuinnPainter/events{/privacy}", "received_events_url": "https://api.github.com/users/QuinnPainter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e21d771b9c76056d20db310ce8655539045b3af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e21d771b9c76056d20db310ce8655539045b3af5", "html_url": "https://github.com/rust-lang/rust/commit/e21d771b9c76056d20db310ce8655539045b3af5"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "c78928be0d29a75696a0e7938fe0d121dd27ae7d", "filename": "compiler/rustc_target/src/spec/armv5te_none_eabi.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e7b62be96b07534bd45decb18ec125a8d85542bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b62be96b07534bd45decb18ec125a8d85542bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_none_eabi.rs?ref=e7b62be96b07534bd45decb18ec125a8d85542bb", "patch": "@@ -0,0 +1,50 @@\n+//! Targets the ARMv5TE, with code as `a32` code by default.\n+\n+use crate::spec::{\n+    cvs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions\n+};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"armv5te-none-eabi\".into(),\n+        pointer_width: 32,\n+        arch: \"arm\".into(),\n+        /* Data layout args are '-' separated:\n+         * little endian\n+         * stack is 64-bit aligned (EABI)\n+         * pointers are 32-bit\n+         * i64 must be 64-bit aligned (EABI)\n+         * mangle names with ELF style\n+         * native integers are 32-bit\n+         * All other elements are default\n+         */\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+\n+        options: TargetOptions {\n+            abi: \"eabi\".into(),\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+            linker: Some(\"rust-lld\".into()),\n+            // extra args passed to the external assembler (assuming `arm-none-eabi-as`):\n+            // * activate t32/a32 interworking\n+            // * use arch ARMv5TE\n+            // * use little-endian\n+            asm_args: cvs![\"-mthumb-interwork\", \"-march=armv5te\", \"-mlittle-endian\",],\n+            // minimum extra features, these cannot be disabled via -C\n+            // Also force-enable 32-bit atomics, which allows the use of atomic load/store only.\n+            // The resulting atomics are ABI incompatible with atomics backed by libatomic.\n+            features: \"+soft-float,+strict-align,+atomics-32\".into(),\n+            main_needs_argc_argv: false,\n+            // don't have atomic compare-and-swap\n+            atomic_cas: false,\n+            has_thumb_interworking: true,\n+            relocation_model: RelocModel::Static,\n+            panic_strategy: PanicStrategy::Abort,\n+            // from thumb_base, rust-lang/rust#44993.\n+            emit_debug_gdb_scripts: false,\n+            // from thumb_base, apparently gcc/clang give enums a minimum of 8 bits on no-os targets\n+            c_enum_min_bits: 8,\n+\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "6ddb50989b47dc40d0fa04fdf4627c291f258f28", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7b62be96b07534bd45decb18ec125a8d85542bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b62be96b07534bd45decb18ec125a8d85542bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=e7b62be96b07534bd45decb18ec125a8d85542bb", "patch": "@@ -1082,6 +1082,8 @@ supported_targets! {\n     (\"mipsel-unknown-none\", mipsel_unknown_none),\n     (\"thumbv4t-none-eabi\", thumbv4t_none_eabi),\n     (\"armv4t-none-eabi\", armv4t_none_eabi),\n+    (\"thumbv5te-none-eabi\", thumbv5te_none_eabi),\n+    (\"armv5te-none-eabi\", armv5te_none_eabi),\n \n     (\"aarch64_be-unknown-linux-gnu\", aarch64_be_unknown_linux_gnu),\n     (\"aarch64-unknown-linux-gnu_ilp32\", aarch64_unknown_linux_gnu_ilp32),"}, {"sha": "021b0e0eb622822dba37ae487692905fbc2b50f5", "filename": "compiler/rustc_target/src/spec/thumbv5te_none_eabi.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e7b62be96b07534bd45decb18ec125a8d85542bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv5te_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b62be96b07534bd45decb18ec125a8d85542bb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv5te_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv5te_none_eabi.rs?ref=e7b62be96b07534bd45decb18ec125a8d85542bb", "patch": "@@ -0,0 +1,41 @@\n+//! Targets the ARMv5TE, with code as `t32` code by default.\n+\n+use crate::spec::{cvs, FramePointer, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"thumbv5te-none-eabi\".into(),\n+        pointer_width: 32,\n+        arch: \"arm\".into(),\n+        /* Data layout args are '-' separated:\n+         * little endian\n+         * stack is 64-bit aligned (EABI)\n+         * pointers are 32-bit\n+         * i64 must be 64-bit aligned (EABI)\n+         * mangle names with ELF style\n+         * native integers are 32-bit\n+         * All other elements are default\n+         */\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+\n+        options: TargetOptions {\n+            abi: \"eabi\".into(),\n+            // extra args passed to the external assembler (assuming `arm-none-eabi-as`):\n+            // * activate t32/a32 interworking\n+            // * use arch ARMv5TE\n+            // * use little-endian\n+            asm_args: cvs![\"-mthumb-interwork\", \"-march=armv5te\", \"-mlittle-endian\",],\n+            // minimum extra features, these cannot be disabled via -C\n+            // Also force-enable 32-bit atomics, which allows the use of atomic load/store only.\n+            // The resulting atomics are ABI incompatible with atomics backed by libatomic.\n+            features: \"+soft-float,+strict-align,+atomics-32\".into(),\n+            frame_pointer: FramePointer::MayOmit,\n+            main_needs_argc_argv: false,\n+            // don't have atomic compare-and-swap\n+            atomic_cas: false,\n+            has_thumb_interworking: true,\n+\n+            ..super::thumb_base::opts()\n+        },\n+    }\n+}"}, {"sha": "1dcd2aaf79a3f9d0796ced1dfdf85ec4798bead8", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7b62be96b07534bd45decb18ec125a8d85542bb/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7b62be96b07534bd45decb18ec125a8d85542bb/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=e7b62be96b07534bd45decb18ec125a8d85542bb", "patch": "@@ -19,6 +19,7 @@\n     - [\\*-apple-watchos\\*](platform-support/apple-watchos.md)\n     - [aarch64-nintendo-switch-freestanding](platform-support/aarch64-nintendo-switch-freestanding.md)\n     - [armv4t-none-eabi](platform-support/armv4t-none-eabi.md)\n+    - [armv5te-none-eabi](platform-support/armv5te-none-eabi.md)\n     - [armv6k-nintendo-3ds](platform-support/armv6k-nintendo-3ds.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)"}, {"sha": "b84e5f6c708e56be107055500e654e8a08a1dfa0", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7b62be96b07534bd45decb18ec125a8d85542bb/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7b62be96b07534bd45decb18ec125a8d85542bb/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=e7b62be96b07534bd45decb18ec125a8d85542bb", "patch": "@@ -225,6 +225,7 @@ target | std | host | notes\n [`arm64_32-apple-watchos`](platform-support/apple-watchos.md) | \u2713 | | ARM Apple WatchOS 64-bit with 32-bit pointers\n `armv4t-none-eabi` | * |  | ARMv4T A32\n `armv4t-unknown-linux-gnueabi` | ? |  |\n+[`armv5te-none-eabi`](platform-support/armv5te-none-eabi.md) | * | | ARMv5TE A32\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n `armv6-unknown-netbsd-eabihf` | ? |  |\n@@ -291,6 +292,7 @@ target | std | host | notes\n `sparc64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/sparc64\n [`sparc64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | OpenBSD/sparc64\n `thumbv4t-none-eabi` | * |  | ARMv4T T32\n+[`thumbv5te-none-eabi`](platform-support/armv5te-none-eabi.md) | * | | ARMv5TE T32\n `thumbv7a-pc-windows-msvc` | ? |  |\n `thumbv7a-uwp-windows-msvc` | \u2713 |  |\n `thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL"}, {"sha": "e7e9aaba54bf138e3a9db99002e9cab03001f9aa", "filename": "src/doc/rustc/src/platform-support/armv5te-none-eabi.md", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e7b62be96b07534bd45decb18ec125a8d85542bb/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv5te-none-eabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7b62be96b07534bd45decb18ec125a8d85542bb/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv5te-none-eabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv5te-none-eabi.md?ref=e7b62be96b07534bd45decb18ec125a8d85542bb", "patch": "@@ -0,0 +1,75 @@\n+# `armv5te-none-eabi`\n+\n+**Tier: 3**\n+\n+Bare-metal target for any cpu in the ARMv5TE architecture family, supporting\n+ARM/Thumb code interworking (aka `a32`/`t32`), with ARM code as the default code\n+generation.\n+\n+The `thumbv5te-none-eabi` target is the same as this one, but with THUMB code as the default.\n+\n+In particular this supports the main CPU of the Nintendo DS, but there's nothing DS\n+specific with this target, so any ARMv5TE device should work fine.\n+\n+## Target Maintainers\n+\n+* [@QuinnPainter](https://github.com/QuinnPainter)\n+\n+## Requirements\n+\n+The target is cross-compiled, and uses static linking.\n+\n+By default, the `lld` linker included with Rust will be used.\n+\n+However, you may want to use the `arm-none-eabi-ld` linker instead. This can be obtained for Windows/Mac/Linux from the [ARM\n+Developer Website][arm-dev], or possibly from your OS's package manager. To use it, add the following to your `.cargo/config.toml`:\n+\n+```toml\n+[target.armv5te-none-eabi]\n+linker = \"arm-none-eabi-ld\"\n+```\n+\n+[arm-dev]: https://developer.arm.com/Tools%20and%20Software/GNU%20Toolchain\n+\n+This target doesn't provide a linker script, you'll need to bring your own\n+according to the specific device you want to target. Pass\n+`-Clink-arg=-Tyour_script.ld` as a rustc argument to make the linker use\n+`your_script.ld` during linking.\n+\n+## Building Rust Programs\n+\n+Because it is Tier 3, rust does not yet ship pre-compiled artifacts for this target.\n+\n+Just use the `build-std` nightly cargo feature to build the `core` library. You\n+can pass this as a command line argument to cargo, or your `.cargo/config.toml`\n+file might include the following lines:\n+\n+```toml\n+[unstable]\n+build-std = [\"core\"]\n+```\n+\n+Most of `core` should work as expected, with the following notes:\n+* the target is \"soft float\", so `f32` and `f64` operations are emulated in\n+  software.\n+* integer division is also emulated in software.\n+* the target is old enough that it doesn't have atomic instructions.\n+\n+`alloc` is also supported, as long as you provide your own global allocator.\n+\n+Rust programs are output as ELF files.\n+\n+For running on DS hardware, you'll need to use an external tool to bundle this ELF file into an NDS binary. The `ndstool` utility included with devkitARM is one such tool that can do this for you:\n+\n+```shell\n+ndstool -c [out_nds] -9 [in_elf]\n+```\n+\n+## Testing\n+\n+This is a cross-compiled target that you will need to emulate during testing.\n+\n+Because this is a device-agnostic target, and the exact emulator that you'll\n+need depends on the specific device you want to run your code on.\n+\n+For example, when programming for the DS, you can use one of the several available DS emulators, such as [melonDS](https://melonds.kuribo64.net/)."}]}