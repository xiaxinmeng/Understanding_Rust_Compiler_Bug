{"sha": "9b2890196eba62fdfec09447305e197642d1c612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMjg5MDE5NmViYTYyZmRmZWMwOTQ0NzMwNWUxOTc2NDJkMWM2MTI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-30T21:43:33Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-30T21:43:33Z"}, "message": "Remove vestigial diverging !-coercion\n\nSuch conversions are no longer permitted.", "tree": {"sha": "1e2efec9e60e99952f5ca638aef9e9aeec6dcfaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e2efec9e60e99952f5ca638aef9e9aeec6dcfaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2890196eba62fdfec09447305e197642d1c612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2890196eba62fdfec09447305e197642d1c612", "html_url": "https://github.com/rust-lang/rust/commit/9b2890196eba62fdfec09447305e197642d1c612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2890196eba62fdfec09447305e197642d1c612/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9975254ee6510cd1360417d3d145b56fb70b2e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9975254ee6510cd1360417d3d145b56fb70b2e7", "html_url": "https://github.com/rust-lang/rust/commit/a9975254ee6510cd1360417d3d145b56fb70b2e7"}], "stats": {"total": 58, "additions": 16, "deletions": 42}, "files": [{"sha": "6a76e170a625483c53c1f890c7d4c690306f5103", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2890196eba62fdfec09447305e197642d1c612/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2890196eba62fdfec09447305e197642d1c612/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9b2890196eba62fdfec09447305e197642d1c612", "patch": "@@ -690,7 +690,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                     arm_span: arm.body.span,\n                     source: match_src\n                 });\n-                coercion.coerce(self, &cause, &arm.body, arm_ty, self.diverges.get());\n+                coercion.coerce(self, &cause, &arm.body, arm_ty);\n             }\n         }\n "}, {"sha": "770a44a9b8b8e46b3a62cb3f9e5bb6e780fde4f7", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b2890196eba62fdfec09447305e197642d1c612/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2890196eba62fdfec09447305e197642d1c612/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=9b2890196eba62fdfec09447305e197642d1c612", "patch": "@@ -60,7 +60,7 @@\n //! sort of a minor point so I've opted to leave it for later---after all\n //! we may want to adjust precisely when coercions occur.\n \n-use check::{Diverges, FnCtxt, Needs};\n+use check::{FnCtxt, Needs};\n \n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -798,22 +798,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 exprs: &[E],\n                                 prev_ty: Ty<'tcx>,\n                                 new: &hir::Expr,\n-                                new_ty: Ty<'tcx>,\n-                                new_diverges: Diverges)\n+                                new_ty: Ty<'tcx>)\n                                 -> RelateResult<'tcx, Ty<'tcx>>\n         where E: AsCoercionSite\n     {\n         let prev_ty = self.resolve_type_vars_with_obligations(prev_ty);\n         let new_ty = self.resolve_type_vars_with_obligations(new_ty);\n         debug!(\"coercion::try_find_coercion_lub({:?}, {:?})\", prev_ty, new_ty);\n \n-        // Special-ish case: we can coerce any type `T` into the `!`\n-        // type, but only if the source expression diverges.\n-        if prev_ty.is_never() && new_diverges.always() {\n-            debug!(\"permit coercion to `!` because expr diverges\");\n-            return Ok(prev_ty);\n-        }\n-\n         // Special-case that coercion alone cannot handle:\n         // Two function item types of differing IDs or Substs.\n         if let (&ty::TyFnDef(..), &ty::TyFnDef(..)) = (&prev_ty.sty, &new_ty.sty) {\n@@ -1052,14 +1044,12 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                       fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                       cause: &ObligationCause<'tcx>,\n                       expression: &'gcx hir::Expr,\n-                      expression_ty: Ty<'tcx>,\n-                      expression_diverges: Diverges)\n+                      expression_ty: Ty<'tcx>)\n     {\n         self.coerce_inner(fcx,\n                           cause,\n                           Some(expression),\n                           expression_ty,\n-                          expression_diverges,\n                           None, false)\n     }\n \n@@ -1085,7 +1075,6 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                           cause,\n                           None,\n                           fcx.tcx.mk_nil(),\n-                          Diverges::Maybe,\n                           Some(augment_error),\n                           label_unit_as_expected)\n     }\n@@ -1098,7 +1087,6 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                         cause: &ObligationCause<'tcx>,\n                         expression: Option<&'gcx hir::Expr>,\n                         mut expression_ty: Ty<'tcx>,\n-                        expression_diverges: Diverges,\n                         augment_error: Option<&mut FnMut(&mut DiagnosticBuilder)>,\n                         label_expression_as_expected: bool)\n     {\n@@ -1132,15 +1120,13 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                                                   exprs,\n                                                   self.merged_ty(),\n                                                   expression,\n-                                                  expression_ty,\n-                                                  expression_diverges),\n+                                                  expression_ty),\n                     Expressions::UpFront(ref coercion_sites) =>\n                         fcx.try_find_coercion_lub(cause,\n                                                   &coercion_sites[0..self.pushed],\n                                                   self.merged_ty(),\n                                                   expression,\n-                                                  expression_ty,\n-                                                  expression_diverges),\n+                                                  expression_ty),\n                 }\n             }\n         } else {"}, {"sha": "9c73e5a8ce7ad2f097e553529b3162de6ef7407e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9b2890196eba62fdfec09447305e197642d1c612/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2890196eba62fdfec09447305e197642d1c612/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9b2890196eba62fdfec09447305e197642d1c612", "patch": "@@ -542,7 +542,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// you get indicates whether any subexpression that was\n     /// evaluating up to and including `X` diverged.\n     ///\n-    /// We use this flag for two purposes:\n+    /// We currently use this flag only for diagnostic purposes:\n     ///\n     /// - To warn about unreachable code: if, after processing a\n     ///   sub-expression but before we have applied the effects of the\n@@ -556,16 +556,8 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     ///   foo();}` or `{return; 22}`, where we would warn on the\n     ///   `foo()` or `22`.\n     ///\n-    /// - To permit assignment into a local variable or other place\n-    ///   (including the \"return slot\") of type `!`.  This is allowed\n-    ///   if **either** the type of value being assigned is `!`, which\n-    ///   means the current code is dead, **or** the expression's\n-    ///   diverging flag is true, which means that a diverging value was\n-    ///   wrapped (e.g., `let x: ! = foo(return)`).\n-    ///\n-    /// To repeat the last point: an expression represents dead-code\n-    /// if, after checking it, **either** its type is `!` OR the\n-    /// diverges flag is set to something other than `Maybe`.\n+    /// An expression represents dead-code if, after checking it,\n+    /// the diverges flag is set to something other than `Maybe`.\n     diverges: Cell<Diverges>,\n \n     /// Whether any child nodes have any type errors.\n@@ -2999,8 +2991,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             &self.cause(return_expr.span,\n                                         ObligationCauseCode::ReturnType(return_expr.id)),\n                             return_expr,\n-                            return_expr_ty,\n-                            self.diverges.get());\n+                            return_expr_ty);\n     }\n \n \n@@ -3031,13 +3022,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let mut coerce: DynamicCoerceMany = CoerceMany::new(coerce_to_ty);\n \n         let if_cause = self.cause(sp, ObligationCauseCode::IfExpression);\n-        coerce.coerce(self, &if_cause, then_expr, then_ty, then_diverges);\n+        coerce.coerce(self, &if_cause, then_expr, then_ty);\n \n         if let Some(else_expr) = opt_else_expr {\n             let else_ty = self.check_expr_with_expectation(else_expr, expected);\n             let else_diverges = self.diverges.get();\n \n-            coerce.coerce(self, &if_cause, else_expr, else_ty, else_diverges);\n+            coerce.coerce(self, &if_cause, else_expr, else_ty);\n \n             // We won't diverge unless both branches do (or the condition does).\n             self.diverges.set(cond_diverges | then_diverges & else_diverges);\n@@ -3722,7 +3713,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           }\n           hir::ExprBreak(destination, ref expr_opt) => {\n               if let Some(target_id) = destination.target_id.opt_id() {\n-                  let (e_ty, e_diverges, cause);\n+                  let (e_ty, cause);\n                   if let Some(ref e) = *expr_opt {\n                       // If this is a break with a value, we need to type-check\n                       // the expression. Get an expected type from the loop context.\n@@ -3741,13 +3732,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                       // Recurse without `enclosing_breakables` borrowed.\n                       e_ty = self.check_expr_with_hint(e, coerce_to);\n-                      e_diverges = self.diverges.get();\n                       cause = self.misc(e.span);\n                   } else {\n                       // Otherwise, this is a break *without* a value. That's\n                       // always legal, and is equivalent to `break ()`.\n                       e_ty = tcx.mk_nil();\n-                      e_diverges = Diverges::Maybe;\n                       cause = self.misc(expr.span);\n                   }\n \n@@ -3758,7 +3747,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                   let ctxt = enclosing_breakables.find_breakable(target_id);\n                   if let Some(ref mut coerce) = ctxt.coerce {\n                       if let Some(ref e) = *expr_opt {\n-                          coerce.coerce(self, &cause, e, e_ty, e_diverges);\n+                          coerce.coerce(self, &cause, e, e_ty);\n                       } else {\n                           assert!(e_ty.is_nil());\n                           coerce.coerce_forced_unit(self, &cause, &mut |_| (), true);\n@@ -3964,7 +3953,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                   for e in args {\n                       let e_ty = self.check_expr_with_hint(e, coerce_to);\n                       let cause = self.misc(e.span);\n-                      coerce.coerce(self, &cause, e, e_ty, self.diverges.get());\n+                      coerce.coerce(self, &cause, e, e_ty);\n                   }\n                   coerce.complete(self)\n               } else {\n@@ -4375,8 +4364,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 coerce.coerce(self,\n                               &cause,\n                               tail_expr,\n-                              tail_expr_ty,\n-                              self.diverges.get());\n+                              tail_expr_ty);\n             } else {\n                 // Subtle: if there is no explicit tail expression,\n                 // that is typically equivalent to a tail expression"}]}