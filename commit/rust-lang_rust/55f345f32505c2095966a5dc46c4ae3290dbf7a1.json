{"sha": "55f345f32505c2095966a5dc46c4ae3290dbf7a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZjM0NWYzMjUwNWMyMDk1OTY2YTVkYzQ2YzRhZTMyOTBkYmY3YTE=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2020-11-03T21:47:16Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-02-28T09:19:44Z"}, "message": "Support LLVM 12 in rustc", "tree": {"sha": "c63abf11491fff3c79291988c21c386d621f0f61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c63abf11491fff3c79291988c21c386d621f0f61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f345f32505c2095966a5dc46c4ae3290dbf7a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f345f32505c2095966a5dc46c4ae3290dbf7a1", "html_url": "https://github.com/rust-lang/rust/commit/55f345f32505c2095966a5dc46c4ae3290dbf7a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f345f32505c2095966a5dc46c4ae3290dbf7a1/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c3a914b5d0600331ba9baa4581fc51e919006db", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3a914b5d0600331ba9baa4581fc51e919006db", "html_url": "https://github.com/rust-lang/rust/commit/7c3a914b5d0600331ba9baa4581fc51e919006db"}], "stats": {"total": 303, "additions": 226, "deletions": 77}, "files": [{"sha": "d9393ffe534accb4d6b7763f129db6e7d76b2583", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -430,7 +430,13 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             PassMode::Indirect { ref attrs, extra_attrs: _, on_stack } => {\n                 assert!(!on_stack);\n                 let i = apply(attrs);\n-                llvm::Attribute::StructRet.apply_llfn(llvm::AttributePlace::Argument(i), llfn);\n+                unsafe {\n+                    llvm::LLVMRustAddStructRetAttr(\n+                        llfn,\n+                        llvm::AttributePlace::Argument(i).as_uint(),\n+                        self.ret.layout.llvm_type(cx),\n+                    );\n+                }\n             }\n             _ => {}\n         }\n@@ -486,8 +492,13 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             PassMode::Indirect { ref attrs, extra_attrs: _, on_stack } => {\n                 assert!(!on_stack);\n                 let i = apply(attrs);\n-                llvm::Attribute::StructRet\n-                    .apply_callsite(llvm::AttributePlace::Argument(i), callsite);\n+                unsafe {\n+                    llvm::LLVMRustAddStructRetCallSiteAttr(\n+                        callsite,\n+                        llvm::AttributePlace::Argument(i).as_uint(),\n+                        self.ret.layout.llvm_type(bx),\n+                    );\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "9f6a2ae3ca1b79d3574722a7b68f872e016248e6", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -104,6 +104,10 @@ fn strip_x86_address_spaces(data_layout: String) -> String {\n     data_layout.replace(\"-p270:32:32-p271:32:32-p272:64:64-\", \"-\")\n }\n \n+fn strip_powerpc64_vectors(data_layout: String) -> String {\n+    data_layout.replace(\"-v256:256:256-v512:512:512\", \"\")\n+}\n+\n pub unsafe fn create_module(\n     tcx: TyCtxt<'_>,\n     llcx: &'ll llvm::Context,\n@@ -119,6 +123,9 @@ pub unsafe fn create_module(\n     {\n         target_data_layout = strip_x86_address_spaces(target_data_layout);\n     }\n+    if llvm_util::get_version() < (12, 0, 0) && sess.target.arch == \"powerpc64\" {\n+        target_data_layout = strip_powerpc64_vectors(target_data_layout);\n+    }\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.is_builtin {"}, {"sha": "9eac7ad17b0466aa46bfb9be7c870bd1681b0f23", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -239,6 +239,7 @@ pub enum TypeKind {\n     Token = 16,\n     ScalableVector = 17,\n     BFloat = 18,\n+    X86_AMX = 19,\n }\n \n impl TypeKind {\n@@ -263,6 +264,7 @@ impl TypeKind {\n             TypeKind::Token => rustc_codegen_ssa::common::TypeKind::Token,\n             TypeKind::ScalableVector => rustc_codegen_ssa::common::TypeKind::ScalableVector,\n             TypeKind::BFloat => rustc_codegen_ssa::common::TypeKind::BFloat,\n+            TypeKind::X86_AMX => rustc_codegen_ssa::common::TypeKind::X86_AMX,\n         }\n     }\n }\n@@ -1073,6 +1075,7 @@ extern \"C\" {\n     pub fn LLVMRustAddDereferenceableAttr(Fn: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddDereferenceableOrNullAttr(Fn: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddByValAttr(Fn: &Value, index: c_uint, ty: &Type);\n+    pub fn LLVMRustAddStructRetAttr(Fn: &Value, index: c_uint, ty: &Type);\n     pub fn LLVMRustAddFunctionAttribute(Fn: &Value, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddFunctionAttrStringValue(\n         Fn: &Value,\n@@ -1108,6 +1111,7 @@ extern \"C\" {\n     pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddDereferenceableOrNullCallSiteAttr(Instr: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddByValCallSiteAttr(Instr: &Value, index: c_uint, ty: &Type);\n+    pub fn LLVMRustAddStructRetCallSiteAttr(Instr: &Value, index: c_uint, ty: &Type);\n \n     // Operations on load/store instructions (only)\n     pub fn LLVMSetVolatile(MemoryAccessInst: &Value, volatile: Bool);"}, {"sha": "afd83bfcb56922a4d8d791ac4530956c7c5d5a1f", "filename": "compiler/rustc_codegen_ssa/src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -95,6 +95,7 @@ pub enum TypeKind {\n     Token,\n     ScalableVector,\n     BFloat,\n+    X86_AMX,\n }\n \n // FIXME(mw): Anything that is produced via DepGraph::with_task() must implement"}, {"sha": "79babd27a304fef5f6fa573f9249f29ec231d8dd", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 97, "deletions": 22, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -5,6 +5,7 @@\n \n #include \"LLVMWrapper.h\"\n \n+#include \"llvm/Analysis/AliasAnalysis.h\"\n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"\n #include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n@@ -683,6 +684,25 @@ void LLVMSelfProfileInitializeCallbacks(\n     PassInstrumentationCallbacks& PIC, void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n+#if LLVM_VERSION_GE(12, 0)\n+  PIC.registerBeforeNonSkippedPassCallback([LlvmSelfProfiler, BeforePassCallback](\n+                                           StringRef Pass, llvm::Any Ir) {\n+    std::string PassName = Pass.str();\n+    std::string IrName = LLVMRustwrappedIrGetName(Ir);\n+    BeforePassCallback(LlvmSelfProfiler, PassName.c_str(), IrName.c_str());\n+  });\n+\n+  PIC.registerAfterPassCallback(\n+      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass, llvm::Any IR,\n+                                            const PreservedAnalyses &Preserved) {\n+        AfterPassCallback(LlvmSelfProfiler);\n+      });\n+\n+  PIC.registerAfterPassInvalidatedCallback(\n+      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass, const PreservedAnalyses &Preserved) {\n+        AfterPassCallback(LlvmSelfProfiler);\n+      });\n+#else\n   PIC.registerBeforePassCallback([LlvmSelfProfiler, BeforePassCallback](\n                                      StringRef Pass, llvm::Any Ir) {\n     std::string PassName = Pass.str();\n@@ -700,6 +720,7 @@ void LLVMSelfProfileInitializeCallbacks(\n       [LlvmSelfProfiler, AfterPassCallback](StringRef Pass) {\n         AfterPassCallback(LlvmSelfProfiler);\n       });\n+#endif\n \n   PIC.registerBeforeAnalysisCallback([LlvmSelfProfiler, BeforePassCallback](\n                                          StringRef Pass, llvm::Any Ir) {\n@@ -760,8 +781,15 @@ LLVMRustOptimizeWithNewPassManager(\n   PTO.LoopVectorization = LoopVectorize;\n   PTO.SLPVectorization = SLPVectorize;\n \n+  // FIXME: We may want to expose this as an option.\n+  bool DebugPassManager = false;\n+\n   PassInstrumentationCallbacks PIC;\n+#if LLVM_VERSION_GE(12, 0)\n+  StandardInstrumentations SI(DebugPassManager);\n+#else\n   StandardInstrumentations SI;\n+#endif\n   SI.registerCallbacks(PIC);\n \n   if (LlvmSelfProfiler){\n@@ -777,10 +805,12 @@ LLVMRustOptimizeWithNewPassManager(\n     PGOOpt = PGOOptions(PGOUsePath, \"\", \"\", PGOOptions::IRUse);\n   }\n \n+#if LLVM_VERSION_GE(12, 0)\n+  PassBuilder PB(DebugPassManager, TM, PTO, PGOOpt, &PIC);\n+#else\n   PassBuilder PB(TM, PTO, PGOOpt, &PIC);\n+#endif\n \n-  // FIXME: We may want to expose this as an option.\n-  bool DebugPassManager = false;\n   LoopAnalysisManager LAM(DebugPassManager);\n   FunctionAnalysisManager FAM(DebugPassManager);\n   CGSCCAnalysisManager CGAM(DebugPassManager);\n@@ -802,7 +832,8 @@ LLVMRustOptimizeWithNewPassManager(\n \n   // We manually collect pipeline callbacks so we can apply them at O0, where the\n   // PassBuilder does not create a pipeline.\n-  std::vector<std::function<void(ModulePassManager &)>> PipelineStartEPCallbacks;\n+  std::vector<std::function<void(ModulePassManager &, PassBuilder::OptimizationLevel)>>\n+      PipelineStartEPCallbacks;\n #if LLVM_VERSION_GE(11, 0)\n   std::vector<std::function<void(ModulePassManager &, PassBuilder::OptimizationLevel)>>\n       OptimizerLastEPCallbacks;\n@@ -812,9 +843,11 @@ LLVMRustOptimizeWithNewPassManager(\n #endif\n \n   if (VerifyIR) {\n-    PipelineStartEPCallbacks.push_back([VerifyIR](ModulePassManager &MPM) {\n+    PipelineStartEPCallbacks.push_back(\n+      [VerifyIR](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n         MPM.addPass(VerifierPass());\n-    });\n+      }\n+    );\n   }\n \n   if (SanitizerOptions) {\n@@ -832,9 +865,11 @@ LLVMRustOptimizeWithNewPassManager(\n       );\n #else\n #if LLVM_VERSION_GE(10, 0)\n-      PipelineStartEPCallbacks.push_back([Options](ModulePassManager &MPM) {\n-        MPM.addPass(MemorySanitizerPass(Options));\n-      });\n+      PipelineStartEPCallbacks.push_back(\n+        [Options](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(MemorySanitizerPass(Options));\n+        }\n+      );\n #endif\n       OptimizerLastEPCallbacks.push_back(\n         [Options](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n@@ -854,9 +889,11 @@ LLVMRustOptimizeWithNewPassManager(\n       );\n #else\n #if LLVM_VERSION_GE(10, 0)\n-      PipelineStartEPCallbacks.push_back([](ModulePassManager &MPM) {\n-        MPM.addPass(ThreadSanitizerPass());\n-      });\n+      PipelineStartEPCallbacks.push_back(\n+        [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(ThreadSanitizerPass());\n+        }\n+      );\n #endif\n       OptimizerLastEPCallbacks.push_back(\n         [](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n@@ -879,9 +916,11 @@ LLVMRustOptimizeWithNewPassManager(\n         }\n       );\n #else\n-      PipelineStartEPCallbacks.push_back([&](ModulePassManager &MPM) {\n-        MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n-      });\n+      PipelineStartEPCallbacks.push_back(\n+        [&](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n+        }\n+      );\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n           FPM.addPass(AddressSanitizerPass(\n@@ -890,7 +929,7 @@ LLVMRustOptimizeWithNewPassManager(\n         }\n       );\n       PipelineStartEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM) {\n+        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n           MPM.addPass(ModuleAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n         }\n@@ -907,7 +946,7 @@ LLVMRustOptimizeWithNewPassManager(\n       );\n #else\n       PipelineStartEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM) {\n+        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n           MPM.addPass(HWAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n         }\n@@ -917,35 +956,53 @@ LLVMRustOptimizeWithNewPassManager(\n   }\n \n   ModulePassManager MPM(DebugPassManager);\n+  bool NeedThinLTOBufferPasses = UseThinLTOBuffers;\n   if (!NoPrepopulatePasses) {\n     if (OptLevel == PassBuilder::OptimizationLevel::O0) {\n+#if LLVM_VERSION_GE(12, 0)\n       for (const auto &C : PipelineStartEPCallbacks)\n-        C(MPM);\n+        PB.registerPipelineStartEPCallback(C);\n+      for (const auto &C : OptimizerLastEPCallbacks)\n+        PB.registerOptimizerLastEPCallback(C);\n \n-#if LLVM_VERSION_GE(11, 0)\n+      // Pass false as we manually schedule ThinLTOBufferPasses below.\n+      MPM = PB.buildO0DefaultPipeline(OptLevel, /* PreLinkLTO */ false);\n+#else\n+      for (const auto &C : PipelineStartEPCallbacks)\n+        C(MPM, OptLevel);\n+\n+# if LLVM_VERSION_GE(11, 0)\n       for (const auto &C : OptimizerLastEPCallbacks)\n         C(MPM, OptLevel);\n-#else\n+# else\n       if (!OptimizerLastEPCallbacks.empty()) {\n         FunctionPassManager FPM(DebugPassManager);\n         for (const auto &C : OptimizerLastEPCallbacks)\n           C(FPM, OptLevel);\n         MPM.addPass(createModuleToFunctionPassAdaptor(std::move(FPM)));\n       }\n-#endif\n+# endif\n \n       MPM.addPass(AlwaysInlinerPass(EmitLifetimeMarkers));\n \n-#if LLVM_VERSION_GE(10, 0)\n+# if LLVM_VERSION_GE(10, 0)\n       if (PGOOpt) {\n         PB.addPGOInstrPassesForO0(\n             MPM, DebugPassManager, PGOOpt->Action == PGOOptions::IRInstr,\n             /*IsCS=*/false, PGOOpt->ProfileFile, PGOOpt->ProfileRemappingFile);\n       }\n+# endif\n #endif\n     } else {\n+#if LLVM_VERSION_GE(12, 0)\n       for (const auto &C : PipelineStartEPCallbacks)\n         PB.registerPipelineStartEPCallback(C);\n+#else\n+      for (const auto &C : PipelineStartEPCallbacks)\n+        PB.registerPipelineStartEPCallback([C, OptLevel](ModulePassManager &MPM) {\n+          C(MPM, OptLevel);\n+        });\n+#endif\n       if (OptStage != LLVMRustOptStage::PreLinkThinLTO) {\n         for (const auto &C : OptimizerLastEPCallbacks)\n           PB.registerOptimizerLastEPCallback(C);\n@@ -956,7 +1013,12 @@ LLVMRustOptimizeWithNewPassManager(\n         MPM = PB.buildPerModuleDefaultPipeline(OptLevel, DebugPassManager);\n         break;\n       case LLVMRustOptStage::PreLinkThinLTO:\n+#if LLVM_VERSION_GE(12, 0)\n+        MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel);\n+        NeedThinLTOBufferPasses = false;\n+#else\n         MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n+#endif\n #if LLVM_VERSION_GE(11, 0)\n         for (const auto &C : OptimizerLastEPCallbacks)\n           C(MPM, OptLevel);\n@@ -970,21 +1032,34 @@ LLVMRustOptimizeWithNewPassManager(\n #endif\n         break;\n       case LLVMRustOptStage::PreLinkFatLTO:\n+#if LLVM_VERSION_GE(12, 0)\n+        MPM = PB.buildLTOPreLinkDefaultPipeline(OptLevel);\n+        NeedThinLTOBufferPasses = false;\n+#else\n         MPM = PB.buildLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n+#endif\n         break;\n       case LLVMRustOptStage::ThinLTO:\n         // FIXME: Does it make sense to pass the ModuleSummaryIndex?\n         // It only seems to be needed for C++ specific optimizations.\n+#if LLVM_VERSION_GE(12, 0)\n+        MPM = PB.buildThinLTODefaultPipeline(OptLevel, nullptr);\n+#else\n         MPM = PB.buildThinLTODefaultPipeline(OptLevel, DebugPassManager, nullptr);\n+#endif\n         break;\n       case LLVMRustOptStage::FatLTO:\n+#if LLVM_VERSION_GE(12, 0)\n+        MPM = PB.buildLTODefaultPipeline(OptLevel, nullptr);\n+#else\n         MPM = PB.buildLTODefaultPipeline(OptLevel, DebugPassManager, nullptr);\n+#endif\n         break;\n       }\n     }\n   }\n \n-  if (UseThinLTOBuffers) {\n+  if (NeedThinLTOBufferPasses) {\n     MPM.addPass(CanonicalizeAliasesPass());\n     MPM.addPass(NameAnonGlobalPass());\n   }"}, {"sha": "09dfba292e431bcfee07afc1812bc0e70ef0c728", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -263,6 +263,17 @@ extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n   Call->addAttribute(Index, Attr);\n }\n \n+extern \"C\" void LLVMRustAddStructRetCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n+                                                 LLVMTypeRef Ty) {\n+  CallBase *Call = unwrap<CallBase>(Instr);\n+#if LLVM_VERSION_GE(12, 0)\n+  Attribute Attr = Attribute::getWithStructRetType(Call->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(Call->getContext(), Attribute::StructRet);\n+#endif\n+  Call->addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n@@ -304,6 +315,17 @@ extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n   F->addAttribute(Index, Attr);\n }\n \n+extern \"C\" void LLVMRustAddStructRetAttr(LLVMValueRef Fn, unsigned Index,\n+                                         LLVMTypeRef Ty) {\n+  Function *F = unwrap<Function>(Fn);\n+#if LLVM_VERSION_GE(12, 0)\n+  Attribute Attr = Attribute::getWithStructRetType(F->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(F->getContext(), Attribute::StructRet);\n+#endif\n+  F->addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    unsigned Index,\n                                                    const char *Name,\n@@ -1007,12 +1029,19 @@ LLVMRustDICompositeTypeReplaceArrays(LLVMRustDIBuilderRef Builder,\n \n extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateDebugLocation(unsigned Line, unsigned Column,\n-                                     LLVMMetadataRef Scope,\n+                                     LLVMMetadataRef ScopeRef,\n                                      LLVMMetadataRef InlinedAt) {\n-  DebugLoc debug_loc = DebugLoc::get(Line, Column, unwrapDIPtr<MDNode>(Scope),\n+#if LLVM_VERSION_GE(12, 0)\n+  MDNode *Scope = unwrapDIPtr<MDNode>(ScopeRef);\n+  DILocation *Loc = DILocation::get(\n+      Scope->getContext(), Line, Column, Scope,\n+      unwrapDIPtr<MDNode>(InlinedAt));\n+  return wrap(Loc);\n+#else\n+  DebugLoc debug_loc = DebugLoc::get(Line, Column, unwrapDIPtr<MDNode>(ScopeRef),\n                                      unwrapDIPtr<MDNode>(InlinedAt));\n-\n   return wrap(debug_loc.getAsMDNode());\n+#endif\n }\n \n extern \"C\" int64_t LLVMRustDIBuilderCreateOpDeref() {\n@@ -1262,6 +1291,10 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n     return LLVMScalableVectorTypeKind;\n   case Type::BFloatTyID:\n     return LLVMBFloatTypeKind;\n+#endif\n+#if LLVM_VERSION_GE(12, 0)\n+  case Type::X86_AMXTyID:\n+    return LLVMX86_AMXTypeKind;\n #endif\n   }\n   report_fatal_error(\"Unhandled TypeID.\");\n@@ -1708,11 +1741,23 @@ LLVMRustBuildVectorReduceMax(LLVMBuilderRef B, LLVMValueRef Src, bool IsSigned)\n }\n extern \"C\" LLVMValueRef\n LLVMRustBuildVectorReduceFMin(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n-   return wrap(unwrap(B)->CreateFPMinReduce(unwrap(Src), NoNaN));\n+#if LLVM_VERSION_GE(12, 0)\n+  Instruction *I = unwrap(B)->CreateFPMinReduce(unwrap(Src));\n+  I->setHasNoNaNs(NoNaN);\n+  return wrap(I);\n+#else\n+  return wrap(unwrap(B)->CreateFPMinReduce(unwrap(Src), NoNaN));\n+#endif\n }\n extern \"C\" LLVMValueRef\n LLVMRustBuildVectorReduceFMax(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n+#if LLVM_VERSION_GE(12, 0)\n+  Instruction *I = unwrap(B)->CreateFPMaxReduce(unwrap(Src));\n+  I->setHasNoNaNs(NoNaN);\n+  return wrap(I);\n+#else\n   return wrap(unwrap(B)->CreateFPMaxReduce(unwrap(Src), NoNaN));\n+#endif\n }\n \n extern \"C\" LLVMValueRef"}, {"sha": "9db880b0e53ca5bce1ee95e4c42447e41a81c893", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "8767f86b00bb482b1b3e75bd874d76a001925983", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-musl\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "2f28a8562472d8d4d49ffb358cea6020fa0580b0", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, ..base },\n     }"}, {"sha": "4cbd99765088f627a54d6adc666485e654dba476", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"e-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "efdc9ad7517d1b924d59cf4c68f99fdd57ffbe12", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-musl\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n+        data_layout: \"e-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "47518cdcf167144e950a7206f515468920580719", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -5,6 +5,7 @@\n //[riscv32] compile-flags: --target riscv32imac-unknown-none-elf\n // compile-flags: -C target-feature=+d\n // needs-llvm-components: riscv\n+// min-system-llvm-version: 12.0\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]\n@@ -99,45 +100,45 @@ macro_rules! check_reg {\n \n // CHECK-LABEL: reg_i8:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i8 i8 reg \"mv\");\n \n // CHECK-LABEL: reg_i16:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i16 i16 reg \"mv\");\n \n // CHECK-LABEL: reg_i32:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i32 i32 reg \"mv\");\n \n // CHECK-LABEL: reg_f32:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_f32 f32 reg \"mv\");\n \n // riscv64-LABEL: reg_i64:\n // riscv64: #APP\n-// riscv64: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// riscv64: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check!(reg_i64 i64 reg \"mv\");\n \n // riscv64-LABEL: reg_f64:\n // riscv64: #APP\n-// riscv64: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// riscv64: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check!(reg_f64 f64 reg \"mv\");\n \n // CHECK-LABEL: reg_ptr:\n // CHECK: #APP\n-// CHECK: add {{[a-z0-9]+}}, zero, {{[a-z0-9]+}}\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n // CHECK: #NO_APP\n check!(reg_ptr ptr reg \"mv\");\n \n@@ -155,45 +156,45 @@ check!(freg_f64 f64 freg \"fmv.d\");\n \n // CHECK-LABEL: a0_i8:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_i8 i8 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_i16:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_i16 i16 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_i32:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_i32 i32 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_f32:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_f32 f32 \"a0\" \"mv\");\n \n // riscv64-LABEL: a0_i64:\n // riscv64: #APP\n-// riscv64: add a0, zero, a0\n+// riscv64: mv a0, a0\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check_reg!(a0_i64 i64 \"a0\" \"mv\");\n \n // riscv64-LABEL: a0_f64:\n // riscv64: #APP\n-// riscv64: add a0, zero, a0\n+// riscv64: mv a0, a0\n // riscv64: #NO_APP\n #[cfg(riscv64)]\n check_reg!(a0_f64 f64 \"a0\" \"mv\");\n \n // CHECK-LABEL: a0_ptr:\n // CHECK: #APP\n-// CHECK: add a0, zero, a0\n+// CHECK: mv a0, a0\n // CHECK: #NO_APP\n check_reg!(a0_ptr ptr \"a0\" \"mv\");\n "}, {"sha": "a1da4faf5d85a2800020820005ab053a9eb5ebdb", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n+// min-system-llvm-version: 12.0\n \n #![crate_type = \"lib\"]\n #![feature(rustc_attrs)]\n@@ -73,7 +74,7 @@ pub fn _box(x: Box<i32>) -> Box<i32> {\n   x\n }\n \n-// CHECK: @struct_return(%S* noalias nocapture sret dereferenceable(32){{( %0)?}})\n+// CHECK: @struct_return(%S* noalias nocapture sret(%S) dereferenceable(32){{( %0)?}})\n #[no_mangle]\n pub fn struct_return() -> S {\n   S {"}, {"sha": "c31e8457dcdeddcefd9985f0ff338610e5551256", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -52,7 +52,7 @@ pub struct BigPacked2 {\n #[no_mangle]\n pub fn call_pkd1(f: fn() -> Array) -> BigPacked1 {\n // CHECK: [[ALLOCA:%[_a-z0-9]+]] = alloca %Array\n-// CHECK: call void %{{.*}}(%Array* noalias nocapture sret dereferenceable(32) [[ALLOCA]])\n+// CHECK: call void %{{.*}}(%Array* noalias nocapture sret{{.*}} dereferenceable(32) [[ALLOCA]])\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* align 1 %{{.*}}, i8* align 4 %{{.*}}, i{{[0-9]+}} 32, i1 false)\n     // check that calls whose destination is a field of a packed struct\n     // go through an alloca rather than calling the function with an\n@@ -64,7 +64,7 @@ pub fn call_pkd1(f: fn() -> Array) -> BigPacked1 {\n #[no_mangle]\n pub fn call_pkd2(f: fn() -> Array) -> BigPacked2 {\n // CHECK: [[ALLOCA:%[_a-z0-9]+]] = alloca %Array\n-// CHECK: call void %{{.*}}(%Array* noalias nocapture sret dereferenceable(32) [[ALLOCA]])\n+// CHECK: call void %{{.*}}(%Array* noalias nocapture sret{{.*}} dereferenceable(32) [[ALLOCA]])\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* align 2 %{{.*}}, i8* align 4 %{{.*}}, i{{[0-9]+}} 32, i1 false)\n     // check that calls whose destination is a field of a packed struct\n     // go through an alloca rather than calling the function with an"}, {"sha": "847b94fac78cee377369e1be4fc8eafa5690021c", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n \n-// min-system-llvm-version: 9.0\n+// min-system-llvm-version: 12.0\n // ignore-arm\n // ignore-aarch64\n // ignore-mips\n@@ -34,19 +34,19 @@ pub enum TeBigS {\n     Variant(BigS),\n }\n \n-// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], %BigS* [[BIGS_ARG_ATTRS1:.*]] byval(%BigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS1:.*]] sret(%BigS) [[BIGS_RET_ATTRS2:.*]], %BigS* [[BIGS_ARG_ATTRS1:.*]] byval(%BigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_BigS(_: BigS) -> BigS { loop {} }\n \n-// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], %TsBigS* [[BIGS_ARG_ATTRS1]] byval(%TsBigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS1]] sret(%TsBigS) [[BIGS_RET_ATTRS2]], %TsBigS* [[BIGS_ARG_ATTRS1]] byval(%TsBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], %TuBigS* [[BIGS_ARG_ATTRS1]] byval(%TuBigS) [[BIGS_ARG_ATTRS2:.*]])\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS1]] sret(%TuBigS) [[BIGS_RET_ATTRS2]], %TuBigS* [[BIGS_ARG_ATTRS1]] byval(%TuBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS1]] byval(%\"TeBigS::Variant\") [[BIGS_ARG_ATTRS2]])\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS1]] sret(%\"TeBigS::Variant\") [[BIGS_RET_ATTRS2]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS1]] byval(%\"TeBigS::Variant\") [[BIGS_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n@@ -70,18 +70,18 @@ pub enum TeBigU {\n     Variant(BigU),\n }\n \n-// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], %BigU* [[BIGU_ARG_ATTRS1:.*]] byval(%BigU) [[BIGU_ARG_ATTRS2:.*]])\n+// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS1:.*]] sret(%BigU) [[BIGU_RET_ATTRS2:.*]], %BigU* [[BIGU_ARG_ATTRS1:.*]] byval(%BigU) [[BIGU_ARG_ATTRS2:.*]])\n #[no_mangle]\n pub extern \"C\" fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], %TsBigU* [[BIGU_ARG_ATTRS1]] byval(%TsBigU) [[BIGU_ARG_ATTRS2]])\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS1:.*]] sret(%TsBigU) [[BIGU_RET_ATTRS2:.*]], %TsBigU* [[BIGU_ARG_ATTRS1]] byval(%TsBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n-// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], %TuBigU* [[BIGU_ARG_ATTRS1]] byval(%TuBigU) [[BIGU_ARG_ATTRS2]])\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS1]] sret(%TuBigU) [[BIGU_RET_ATTRS2:.*]], %TuBigU* [[BIGU_ARG_ATTRS1]] byval(%TuBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n-// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS1]] byval(%\"TeBigU::Variant\") [[BIGU_ARG_ATTRS2]])\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS1]] sret(%\"TeBigU::Variant\") [[BIGU_RET_ATTRS2:.*]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS1]] byval(%\"TeBigU::Variant\") [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n pub extern \"C\" fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "1fb12d92bd135468ec6c6cd26472eac0595766ab", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n+// min-system-llvm-version: 12.0\n // ignore-aarch64\n // ignore-emscripten\n // ignore-mips64\n@@ -36,19 +38,19 @@ pub enum TeBigS {\n     Variant(BigS),\n }\n \n-// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], [16 x i32]\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS1:.*]] sret(%BigS) [[BIGS_RET_ATTRS2:.*]], [16 x i32]\n #[no_mangle]\n pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n \n-// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS1]] sret(%TsBigS) [[BIGS_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS1]] sret(%TuBigS) [[BIGS_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS1]] sret(%\"TeBigS::Variant\") [[BIGS_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n@@ -72,18 +74,18 @@ pub enum TeBigU {\n     Variant(BigU),\n }\n \n-// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], [16 x i32]\n+// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS1:.*]] sret(%BigU) [[BIGU_RET_ATTRS2:.*]], [16 x i32]\n #[no_mangle]\n pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], [16 x i32]\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS1]] sret(%TsBigU) [[BIGU_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n-// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS1]] sret(%TuBigU) [[BIGU_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n-// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS1]] sret(%\"TeBigU::Variant\") [[BIGU_RET_ATTRS2]], [16 x i32]\n #[no_mangle]\n pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "3381764bfc8188d9f900782ebd4d49346149fc0c", "filename": "src/test/codegen/repr-transparent-aggregates-3.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n+// min-system-llvm-version: 12.0\n // only-mips64\n // See repr-transparent.rs\n \n@@ -25,19 +27,19 @@ pub enum TeBigS {\n     Variant(BigS),\n }\n \n-// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], [8 x i64]\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS1:.*]] sret(%BigS) [[BIGS_RET_ATTRS2:.*]], [8 x i64]\n #[no_mangle]\n pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n \n-// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS1]] sret(%TsBigS) [[BIGS_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS1]] sret(%TuBigS) [[BIGS_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS1]] sret(%\"TeBigS::Variant\") [[BIGS_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n@@ -61,18 +63,18 @@ pub enum TeBigU {\n     Variant(BigU),\n }\n \n-// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], [8 x i64]\n+// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS1:.*]] sret(%BigU) [[BIGU_RET_ATTRS2:.*]], [8 x i64]\n #[no_mangle]\n pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], [8 x i64]\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS1]] sret(%TsBigU) [[BIGU_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n-// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS1]] sret(%TuBigU) [[BIGU_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n-// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS1]] sret(%\"TeBigU::Variant\") [[BIGU_RET_ATTRS2]], [8 x i64]\n #[no_mangle]\n pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "f56b4168b2d66673a0f98895b7e786d910ea2c4c", "filename": "src/test/run-make-fulldeps/split-dwarf/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/55f345f32505c2095966a5dc46c4ae3290dbf7a1/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile?ref=55f345f32505c2095966a5dc46c4ae3290dbf7a1", "patch": "@@ -4,6 +4,6 @@\n # min-llvm-version: 11.0\n \n all:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed foo.rs -g\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 foo.rs -g\n \trm $(TMPDIR)/foo.dwp\n \trm $(TMPDIR)/$(call BIN,foo)"}]}