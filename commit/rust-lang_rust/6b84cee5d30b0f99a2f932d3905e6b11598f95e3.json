{"sha": "6b84cee5d30b0f99a2f932d3905e6b11598f95e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiODRjZWU1ZDMwYjBmOTlhMmY5MzJkMzkwNWU2YjExNTk4Zjk1ZTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-24T05:36:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-24T05:36:37Z"}, "message": "add a few measly comments, remove some dead code", "tree": {"sha": "cbd3d133b63caa5b613a26d227e5b2e8f972b8e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd3d133b63caa5b613a26d227e5b2e8f972b8e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b84cee5d30b0f99a2f932d3905e6b11598f95e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b84cee5d30b0f99a2f932d3905e6b11598f95e3", "html_url": "https://github.com/rust-lang/rust/commit/6b84cee5d30b0f99a2f932d3905e6b11598f95e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b84cee5d30b0f99a2f932d3905e6b11598f95e3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5edb5ee1819585416c0c57645b9e3e4c157d407", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5edb5ee1819585416c0c57645b9e3e4c157d407", "html_url": "https://github.com/rust-lang/rust/commit/f5edb5ee1819585416c0c57645b9e3e4c157d407"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "4af630e7bfd636f7c15afd7e9b66495a81e54c93", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6b84cee5d30b0f99a2f932d3905e6b11598f95e3/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b84cee5d30b0f99a2f932d3905e6b11598f95e3/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=6b84cee5d30b0f99a2f932d3905e6b11598f95e3", "patch": "@@ -85,6 +85,15 @@ impl methods for ures {\n     }\n }\n \n+// Most of these methods, like tys() and so forth, take two parameters\n+// a and b and they are tasked with \"ensuring that a is a subtype of\n+// b\".  They return success or failure.  They make changes in-place to\n+// the variable bindings: these changes are recorded in the `bindings`\n+// array, which then allows the changes to be rolled back if needed.\n+//\n+// The merge() and merge_bnds() methods are somewhat different in that\n+// they compute a new type range for a variable (generally a subset of\n+// the old range).  They therefore return a result.\n impl unify_methods for infer_ctxt {\n     fn uok() -> ures {\n         #debug[\"Unification OK\"];\n@@ -177,18 +186,8 @@ impl unify_methods for infer_ctxt {\n         }\n     }\n \n-    // Take bound a if it is set, else take bound b.\n-    fn aelseb(a: bound, b: bound) -> bound {\n-        alt (a, b) {\n-          (none, none) { none }\n-          (some(_), none) { a }\n-          (none, some(_)) { b }\n-          (some(_), some(_)) { a }\n-        }\n-    }\n-\n     // Combines the two bounds.  Returns a bounds r where (r.lb <:\n-    // a,b) and (a,b <: r.ub).\n+    // a,b) and (a,b <: r.ub) (if such a bounds exists).\n     fn merge_bnds(a: bound, b: bound) -> result<bounds, ty::type_err> {\n         alt (a, b) {\n           (none, none) {\n@@ -215,10 +214,14 @@ impl unify_methods for infer_ctxt {\n         }\n     }\n \n-    // Given a variable with bounds `a`, returns a new set of bounds\n-    // such that `a` <: `b`.  The new bounds will always be a subset\n-    // of the old bounds.  If this cannot be achieved, the result is\n-    // failure.\n+    // Updates the bounds for the variable `v_id` to be the intersection\n+    // of `a` and `b`.  That is, the new bounds for `v_id` will be\n+    // a bounds c such that:\n+    //    c.ub <: a.ub\n+    //    c.ub <: b.ub\n+    //    a.lb <: c.lb\n+    //    b.lb <: c.lb\n+    // If this cannot be achieved, the result is failure.\n     fn merge(v_id: uint, a: bounds, b: bounds) -> ures {\n         // Think of the two diamonds, we want to find the\n         // intersection.  There are basically four possibilities (you"}, {"sha": "ec9868c688c52f74d877667b1ab118080353bf0f", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b84cee5d30b0f99a2f932d3905e6b11598f95e3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b84cee5d30b0f99a2f932d3905e6b11598f95e3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=6b84cee5d30b0f99a2f932d3905e6b11598f95e3", "patch": "@@ -1129,7 +1129,7 @@ mod collect {\n // Type unification\n mod unify {\n     fn unify_with_region_bindings(fcx: @fn_ctxt,\n-                                  rb: @ty::unify::region_bindings,\n+                                  _rb: @ty::unify::region_bindings,\n                                   expected: ty::t,\n                                   actual: ty::t)\n             -> result<(), ty::type_err> {"}]}