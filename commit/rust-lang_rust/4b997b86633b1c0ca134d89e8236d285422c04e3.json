{"sha": "4b997b86633b1c0ca134d89e8236d285422c04e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOTk3Yjg2NjMzYjFjMGNhMTM0ZDg5ZTgyMzZkMjg1NDIyYzA0ZTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-22T20:39:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T20:39:58Z"}, "message": "Merge #8156\n\n8156: Correctly lower TraitRefs with default params r=flodiebold a=Veykril\n\nFixes #5685\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "89544f6e84fec2a981cf60cf05aa2af1ac903cf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89544f6e84fec2a981cf60cf05aa2af1ac903cf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b997b86633b1c0ca134d89e8236d285422c04e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWQCeCRBK7hj4Ov3rIwAAdHIIADfySyJtZZ3AgmToaJjYQaE6\nV2xC59vlpDJAjPV5JqZGPklITHS/MfoG6i8jDKJg7SGHZ9hX3KKDyD48Pe4Zx0IH\nm1w4yLQ0Jn1MVl2jRYGqRSEo43ZiHpAaemax83ZRWH2Mz0q8OYleRh1dxmzIMJfR\n2wa743Nd6W+4grXTVEnEB0iqPNbgkp6a2sDn+IzQ8eXVYu5islRlflpPK6uCsC1W\nBUvYbityI7XYpv37TYri8qaIVjBUnHNmtXKIuikhPTCiTkMxsLvPx9GdIpzwYmwz\nwyWid6PE4VA2IzAHSO9+bTxobpgAmzNGdWDLq+qjsnLJQKoqSl6iHqGazdPDeLs=\n=Ftld\n-----END PGP SIGNATURE-----\n", "payload": "tree 89544f6e84fec2a981cf60cf05aa2af1ac903cf5\nparent 97fe64a5c7d68a40adf7b88d5cc992f9f3066537\nparent 0aa4ac362d1a40e4aea98857d22a2cd3884aa215\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616445598 +0000\ncommitter GitHub <noreply@github.com> 1616445598 +0000\n\nMerge #8156\n\n8156: Correctly lower TraitRefs with default params r=flodiebold a=Veykril\n\nFixes #5685\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b997b86633b1c0ca134d89e8236d285422c04e3", "html_url": "https://github.com/rust-lang/rust/commit/4b997b86633b1c0ca134d89e8236d285422c04e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b997b86633b1c0ca134d89e8236d285422c04e3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "url": "https://api.github.com/repos/rust-lang/rust/commits/97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "html_url": "https://github.com/rust-lang/rust/commit/97fe64a5c7d68a40adf7b88d5cc992f9f3066537"}, {"sha": "0aa4ac362d1a40e4aea98857d22a2cd3884aa215", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa4ac362d1a40e4aea98857d22a2cd3884aa215", "html_url": "https://github.com/rust-lang/rust/commit/0aa4ac362d1a40e4aea98857d22a2cd3884aa215"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "3153b5b74ff7a8eade36bfc059465f65474a93c5", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4b997b86633b1c0ca134d89e8236d285422c04e3/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b997b86633b1c0ca134d89e8236d285422c04e3/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=4b997b86633b1c0ca134d89e8236d285422c04e3", "patch": "@@ -521,7 +521,7 @@ impl<'a> TyLoweringContext<'a> {\n             TyDefId::AdtId(it) => Some(it.into()),\n             TyDefId::TypeAliasId(it) => Some(it.into()),\n         };\n-        let substs = self.substs_from_path_segment(segment, generic_def, infer_args);\n+        let substs = self.substs_from_path_segment(segment, generic_def, infer_args, None);\n         self.db.ty(typeable).subst(&substs)\n     }\n \n@@ -558,14 +558,15 @@ impl<'a> TyLoweringContext<'a> {\n                 (segment, Some(var.parent.into()))\n             }\n         };\n-        self.substs_from_path_segment(segment, generic_def, infer_args)\n+        self.substs_from_path_segment(segment, generic_def, infer_args, None)\n     }\n \n     fn substs_from_path_segment(\n         &self,\n         segment: PathSegment<'_>,\n         def_generic: Option<GenericDefId>,\n         infer_args: bool,\n+        explicit_self_ty: Option<Ty>,\n     ) -> Substitution {\n         let mut substs = Vec::new();\n         let def_generics = def_generic.map(|def| generics(self.db.upcast(), def));\n@@ -576,11 +577,19 @@ impl<'a> TyLoweringContext<'a> {\n \n         substs.extend(iter::repeat(TyKind::Unknown.intern(&Interner)).take(parent_params));\n \n+        let fill_self_params = || {\n+            substs.extend(\n+                explicit_self_ty\n+                    .into_iter()\n+                    .chain(iter::repeat(TyKind::Unknown.intern(&Interner)))\n+                    .take(self_params),\n+            )\n+        };\n         let mut had_explicit_type_args = false;\n \n         if let Some(generic_args) = &segment.args_and_bindings {\n             if !generic_args.has_self_type {\n-                substs.extend(iter::repeat(TyKind::Unknown.intern(&Interner)).take(self_params));\n+                fill_self_params();\n             }\n             let expected_num =\n                 if generic_args.has_self_type { self_params + type_params } else { type_params };\n@@ -602,6 +611,8 @@ impl<'a> TyLoweringContext<'a> {\n                     GenericArg::Lifetime(_) => {}\n                 }\n             }\n+        } else {\n+            fill_self_params();\n         }\n \n         // handle defaults. In expression or pattern path segments without\n@@ -650,10 +661,7 @@ impl<'a> TyLoweringContext<'a> {\n         segment: PathSegment<'_>,\n         explicit_self_ty: Option<Ty>,\n     ) -> TraitRef {\n-        let mut substs = self.trait_ref_substs_from_path(segment, resolved);\n-        if let Some(self_ty) = explicit_self_ty {\n-            substs.0[0] = self_ty;\n-        }\n+        let substs = self.trait_ref_substs_from_path(segment, resolved, explicit_self_ty);\n         TraitRef { trait_id: to_chalk_trait_id(resolved), substitution: substs }\n     }\n \n@@ -673,8 +681,9 @@ impl<'a> TyLoweringContext<'a> {\n         &self,\n         segment: PathSegment<'_>,\n         resolved: TraitId,\n+        explicit_self_ty: Option<Ty>,\n     ) -> Substitution {\n-        self.substs_from_path_segment(segment, Some(resolved.into()), false)\n+        self.substs_from_path_segment(segment, Some(resolved.into()), false, explicit_self_ty)\n     }\n \n     pub(crate) fn lower_where_predicate("}, {"sha": "45a1958e3075dd339f794ceaea78746da33fb7a3", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4b997b86633b1c0ca134d89e8236d285422c04e3/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b997b86633b1c0ca134d89e8236d285422c04e3/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=4b997b86633b1c0ca134d89e8236d285422c04e3", "patch": "@@ -3324,3 +3324,49 @@ fn f() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn infer_default_trait_type_parameter() {\n+    check_infer(\n+        r#\"\n+struct A;\n+\n+trait Op<RHS=Self> {\n+    type Output;\n+\n+    fn do_op(self, rhs: RHS) -> Self::Output;\n+}\n+\n+impl Op for A {\n+    type Output = bool;\n+\n+    fn do_op(self, rhs: Self) -> Self::Output {\n+        true\n+    }\n+}\n+\n+fn test() {\n+    let x = A;\n+    let y = A;\n+    let r = x.do_op(y);\n+}\n+        \"#,\n+        expect![[r#\"\n+            63..67 'self': Self\n+            69..72 'rhs': RHS\n+            153..157 'self': A\n+            159..162 'rhs': A\n+            186..206 '{     ...     }': bool\n+            196..200 'true': bool\n+            220..277 '{     ...(y); }': ()\n+            230..231 'x': A\n+            234..235 'A': A\n+            245..246 'y': A\n+            249..250 'A': A\n+            260..261 'r': bool\n+            264..265 'x': A\n+            264..274 'x.do_op(y)': bool\n+            272..273 'y': A\n+        \"#]],\n+    )\n+}"}]}