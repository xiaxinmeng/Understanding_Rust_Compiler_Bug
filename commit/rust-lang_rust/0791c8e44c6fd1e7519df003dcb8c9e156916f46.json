{"sha": "0791c8e44c6fd1e7519df003dcb8c9e156916f46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OTFjOGU0NGM2ZmQxZTc1MTlkZjAwM2RjYjhjOWUxNTY5MTZmNDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-18T20:12:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-18T20:12:11Z"}, "message": "Merge #7336\n\n7336: Rename `CrateDefMap` to `DefMap` r=matklad a=jonas-schievink\n\nI propose handling local items by computing a `DefMap` for every block expression, using the regular (early) name resolution algorithm. The result of that will be a `DefMap` that has a reference to the parent `DefMap`, which is either the one computed for the containing block expression, or the crate's root `DefMap`. Name resolution will fall back to a name in the parent `DefMap` if it cannot be resolved in the inner block.\r\n\r\nThe `DefMap`s computed for block expressions will go through a separate query that can be garbage-collected much more aggressively, since these `DefMap`s should be cheap to compute and are never part of a crate's public API.\r\n\r\nThe first step towards that is to make `CrateDefMap` not specific to crates anymore, hence this rename (if this plans sounds reasonable).\r\n\r\ncc https://github.com/rust-analyzer/rust-analyzer/issues/7325 and https://github.com/rust-analyzer/rust-analyzer/issues/1165\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "28468414f1ba4183859ebdf78c31f23b87ebda96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28468414f1ba4183859ebdf78c31f23b87ebda96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0791c8e44c6fd1e7519df003dcb8c9e156916f46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBeubCRBK7hj4Ov3rIwAAdHIIAJnIUTtvYlRTKLDDgKXzI53B\nBMdAdU8MHbDVCmnD89FvsVEx3C2VAINijOgSpj6KlRtj3+8iDiovj2aQY7j1LTem\nXLPvr/cGH01f1sTY9wk4ryEkSTNtAzV48/cGssfx13I16VTbRnJYqpI5tRObY/Re\nBCn3moCQeqIbakQA6q9Euc5xIW2bhbHXNbWSJVPyFYzYvkOnNl7bG9bVL3PzNY2L\nQi3HuGfFBoMgReKDcJ7QQiZOddaVbgcSStqbHR2LW92TXJ6ktLQTw91GmIA9U8t9\nyscVdL0iNxmowe8v4bidZjtLAUTjvSJunmorOZrQ5ZMBwQKTUbK18TEmli/WRgQ=\n=vQhN\n-----END PGP SIGNATURE-----\n", "payload": "tree 28468414f1ba4183859ebdf78c31f23b87ebda96\nparent 8164e2ea31ed0c169bc295acb6e13650576e5366\nparent 57a82fb05b46fd028c0b971dc6ce317db3682146\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611000731 +0000\ncommitter GitHub <noreply@github.com> 1611000731 +0000\n\nMerge #7336\n\n7336: Rename `CrateDefMap` to `DefMap` r=matklad a=jonas-schievink\n\nI propose handling local items by computing a `DefMap` for every block expression, using the regular (early) name resolution algorithm. The result of that will be a `DefMap` that has a reference to the parent `DefMap`, which is either the one computed for the containing block expression, or the crate's root `DefMap`. Name resolution will fall back to a name in the parent `DefMap` if it cannot be resolved in the inner block.\r\n\r\nThe `DefMap`s computed for block expressions will go through a separate query that can be garbage-collected much more aggressively, since these `DefMap`s should be cheap to compute and are never part of a crate's public API.\r\n\r\nThe first step towards that is to make `CrateDefMap` not specific to crates anymore, hence this rename (if this plans sounds reasonable).\r\n\r\ncc https://github.com/rust-analyzer/rust-analyzer/issues/7325 and https://github.com/rust-analyzer/rust-analyzer/issues/1165\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0791c8e44c6fd1e7519df003dcb8c9e156916f46", "html_url": "https://github.com/rust-lang/rust/commit/0791c8e44c6fd1e7519df003dcb8c9e156916f46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0791c8e44c6fd1e7519df003dcb8c9e156916f46/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8164e2ea31ed0c169bc295acb6e13650576e5366", "url": "https://api.github.com/repos/rust-lang/rust/commits/8164e2ea31ed0c169bc295acb6e13650576e5366", "html_url": "https://github.com/rust-lang/rust/commit/8164e2ea31ed0c169bc295acb6e13650576e5366"}, {"sha": "57a82fb05b46fd028c0b971dc6ce317db3682146", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a82fb05b46fd028c0b971dc6ce317db3682146", "html_url": "https://github.com/rust-lang/rust/commit/57a82fb05b46fd028c0b971dc6ce317db3682146"}], "stats": {"total": 74, "additions": 35, "deletions": 39}, "files": [{"sha": "3b2dd0f6e4420cfec9f49d79da3e7935dcdb55bd", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -29,7 +29,7 @@ use crate::{\n     expr::{Expr, ExprId, Label, LabelId, Pat, PatId},\n     item_scope::BuiltinShadowMode,\n     item_scope::ItemScope,\n-    nameres::CrateDefMap,\n+    nameres::DefMap,\n     path::{ModPath, Path},\n     src::HasSource,\n     AsMacroCall, DefWithBodyId, HasModule, Lookup, ModuleId,\n@@ -45,7 +45,7 @@ pub(crate) struct CfgExpander {\n \n pub(crate) struct Expander {\n     cfg_expander: CfgExpander,\n-    crate_def_map: Arc<CrateDefMap>,\n+    crate_def_map: Arc<DefMap>,\n     current_file_id: HirFileId,\n     ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,"}, {"sha": "91c8d45cd118b161c3ae85476b4d4060c960a28f", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     import_map::ImportMap,\n     item_tree::ItemTree,\n     lang_item::{LangItemTarget, LangItems},\n-    nameres::CrateDefMap,\n+    nameres::DefMap,\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n     GenericDefId, ImplId, ImplLoc, LocalEnumVariantId, LocalFieldId, StaticId, StaticLoc, StructId,\n     StructLoc, TraitId, TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc, VariantId,\n@@ -50,10 +50,10 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n \n     #[salsa::invoke(crate_def_map_wait)]\n     #[salsa::transparent]\n-    fn crate_def_map(&self, krate: CrateId) -> Arc<CrateDefMap>;\n+    fn crate_def_map(&self, krate: CrateId) -> Arc<DefMap>;\n \n-    #[salsa::invoke(CrateDefMap::crate_def_map_query)]\n-    fn crate_def_map_query(&self, krate: CrateId) -> Arc<CrateDefMap>;\n+    #[salsa::invoke(DefMap::crate_def_map_query)]\n+    fn crate_def_map_query(&self, krate: CrateId) -> Arc<DefMap>;\n \n     #[salsa::invoke(StructData::struct_data_query)]\n     fn struct_data(&self, id: StructId) -> Arc<StructData>;\n@@ -112,7 +112,7 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     fn import_map(&self, krate: CrateId) -> Arc<ImportMap>;\n }\n \n-fn crate_def_map_wait(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n+fn crate_def_map_wait(db: &impl DefDatabase, krate: CrateId) -> Arc<DefMap> {\n     let _p = profile::span(\"crate_def_map:wait\");\n     db.crate_def_map_query(krate)\n }"}, {"sha": "422a6eeb4a87d63e6b4ef97b4e4626cc775b1717", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -4,7 +4,7 @@ use hir_expand::name::{known, AsName, Name};\n use rustc_hash::FxHashSet;\n use test_utils::mark;\n \n-use crate::nameres::CrateDefMap;\n+use crate::nameres::DefMap;\n use crate::{\n     db::DefDatabase,\n     item_scope::ItemInNs,\n@@ -47,7 +47,7 @@ impl ModPath {\n     }\n }\n \n-fn check_self_super(def_map: &CrateDefMap, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n+fn check_self_super(def_map: &DefMap, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n     if item == ItemInNs::Types(from.into()) {\n         // - if the item is the module we're in, use `self`\n         Some(ModPath::from_segments(PathKind::Super(0), Vec::new()))"}, {"sha": "769a557ad7893d49ac6f45f4b88d9eebe7c6f6e7", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -74,7 +74,7 @@ use crate::{\n \n /// Contains all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]\n-pub struct CrateDefMap {\n+pub struct DefMap {\n     pub root: LocalModuleId,\n     pub modules: Arena<ModuleData>,\n     pub(crate) krate: CrateId,\n@@ -88,7 +88,7 @@ pub struct CrateDefMap {\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n-impl std::ops::Index<LocalModuleId> for CrateDefMap {\n+impl std::ops::Index<LocalModuleId> for DefMap {\n     type Output = ModuleData;\n     fn index(&self, id: LocalModuleId) -> &ModuleData {\n         &self.modules[id]\n@@ -169,16 +169,16 @@ pub struct ModuleData {\n     pub origin: ModuleOrigin,\n }\n \n-impl CrateDefMap {\n-    pub(crate) fn crate_def_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n+impl DefMap {\n+    pub(crate) fn crate_def_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<DefMap> {\n         let _p = profile::span(\"crate_def_map_query\").detail(|| {\n             db.crate_graph()[krate].display_name.as_deref().unwrap_or_default().to_string()\n         });\n         let def_map = {\n             let edition = db.crate_graph()[krate].edition;\n             let mut modules: Arena<ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n-            CrateDefMap {\n+            DefMap {\n                 krate,\n                 edition,\n                 extern_prelude: FxHashMap::default(),\n@@ -227,7 +227,7 @@ impl CrateDefMap {\n         go(&mut buf, self, \"crate\", self.root);\n         return buf;\n \n-        fn go(buf: &mut String, map: &CrateDefMap, path: &str, module: LocalModuleId) {\n+        fn go(buf: &mut String, map: &DefMap, path: &str, module: LocalModuleId) {\n             format_to!(buf, \"{}\\n\", path);\n \n             let mut entries: Vec<_> = map.modules[module].scope.resolutions().collect();"}, {"sha": "61da563404979694d2d96f598e9913ce68bca769", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -31,7 +31,7 @@ use crate::{\n     },\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n-        BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n+        BuiltinShadowMode, DefMap, ModuleData, ModuleOrigin, ResolveMode,\n     },\n     path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n@@ -45,7 +45,7 @@ const GLOB_RECURSION_LIMIT: usize = 100;\n const EXPANSION_DEPTH_LIMIT: usize = 128;\n const FIXED_POINT_LIMIT: usize = 8192;\n \n-pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n+pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap) -> DefMap {\n     let crate_graph = db.crate_graph();\n \n     // populate external prelude\n@@ -210,7 +210,7 @@ struct DefData<'a> {\n /// Walks the tree of module recursively\n struct DefCollector<'a> {\n     db: &'a dyn DefDatabase,\n-    def_map: CrateDefMap,\n+    def_map: DefMap,\n     glob_imports: FxHashMap<LocalModuleId, Vec<(LocalModuleId, Visibility)>>,\n     unresolved_imports: Vec<ImportDirective>,\n     resolved_imports: Vec<ImportDirective>,\n@@ -859,7 +859,7 @@ impl DefCollector<'_> {\n         .collect(item_tree.top_level_items());\n     }\n \n-    fn finish(mut self) -> CrateDefMap {\n+    fn finish(mut self) -> DefMap {\n         // Emit diagnostics for all remaining unexpanded macros.\n \n         for directive in &self.unexpanded_macros {\n@@ -1474,7 +1474,7 @@ mod tests {\n \n     use super::*;\n \n-    fn do_collect_defs(db: &dyn DefDatabase, def_map: CrateDefMap) -> CrateDefMap {\n+    fn do_collect_defs(db: &dyn DefDatabase, def_map: DefMap) -> DefMap {\n         let mut collector = DefCollector {\n             db,\n             def_map,\n@@ -1493,15 +1493,15 @@ mod tests {\n         collector.def_map\n     }\n \n-    fn do_resolve(code: &str) -> CrateDefMap {\n+    fn do_resolve(code: &str) -> DefMap {\n         let (db, _file_id) = TestDB::with_single_file(&code);\n         let krate = db.test_crate();\n \n         let def_map = {\n             let edition = db.crate_graph()[krate].edition;\n             let mut modules: Arena<ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n-            CrateDefMap {\n+            DefMap {\n                 krate,\n                 edition,\n                 extern_prelude: FxHashMap::default(),"}, {"sha": "096a7d0ac114a6dfe6a6dc1cf935c59d6809667f", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -19,7 +19,7 @@ use test_utils::mark;\n use crate::{\n     db::DefDatabase,\n     item_scope::BUILTIN_SCOPE,\n-    nameres::{BuiltinShadowMode, CrateDefMap},\n+    nameres::{BuiltinShadowMode, DefMap},\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n@@ -61,7 +61,7 @@ impl ResolvePathResult {\n     }\n }\n \n-impl CrateDefMap {\n+impl DefMap {\n     pub(super) fn resolve_name_in_extern_prelude(&self, name: &Name) -> PerNs {\n         self.extern_prelude\n             .get(name)"}, {"sha": "723481c367fc243caa9403f36f7c7f71289efcc7", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -13,7 +13,7 @@ use test_utils::mark;\n \n use crate::{db::DefDatabase, nameres::*, test_db::TestDB};\n \n-fn compute_crate_def_map(ra_fixture: &str) -> Arc<CrateDefMap> {\n+fn compute_crate_def_map(ra_fixture: &str) -> Arc<DefMap> {\n     let db = TestDB::with_files(ra_fixture);\n     let krate = db.crate_graph().iter().next().unwrap();\n     db.crate_def_map(krate)"}, {"sha": "e7e92c72dec784056eba7d428c7b297dd99d8c2c", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -16,7 +16,7 @@ use crate::{\n     expr::{ExprId, PatId},\n     generics::GenericParams,\n     item_scope::{BuiltinShadowMode, BUILTIN_SCOPE},\n-    nameres::CrateDefMap,\n+    nameres::DefMap,\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n@@ -34,7 +34,7 @@ pub struct Resolver {\n // FIXME how to store these best\n #[derive(Debug, Clone)]\n struct ModuleItemMap {\n-    crate_def_map: Arc<CrateDefMap>,\n+    crate_def_map: Arc<DefMap>,\n     module_id: LocalModuleId,\n }\n \n@@ -425,7 +425,7 @@ impl Resolver {\n         traits\n     }\n \n-    fn module_scope(&self) -> Option<(&CrateDefMap, LocalModuleId)> {\n+    fn module_scope(&self) -> Option<(&DefMap, LocalModuleId)> {\n         self.scopes.iter().rev().find_map(|scope| match scope {\n             Scope::ModuleScope(m) => Some((&*m.crate_def_map, m.module_id)),\n \n@@ -588,11 +588,7 @@ impl Resolver {\n         self.push_scope(Scope::ImplDefScope(impl_def))\n     }\n \n-    fn push_module_scope(\n-        self,\n-        crate_def_map: Arc<CrateDefMap>,\n-        module_id: LocalModuleId,\n-    ) -> Resolver {\n+    fn push_module_scope(self, crate_def_map: Arc<DefMap>, module_id: LocalModuleId) -> Resolver {\n         self.push_scope(Scope::ModuleScope(ModuleItemMap { crate_def_map, module_id }))\n     }\n "}, {"sha": "3134fa43d023f39e7e0a2a6905e98414768e7af9", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -5,7 +5,7 @@ use syntax::ast;\n \n use crate::{\n     db::DefDatabase,\n-    nameres::CrateDefMap,\n+    nameres::DefMap,\n     path::{ModPath, PathKind},\n     ModuleId,\n };\n@@ -116,7 +116,7 @@ impl Visibility {\n \n     pub(crate) fn is_visible_from_def_map(\n         self,\n-        def_map: &CrateDefMap,\n+        def_map: &DefMap,\n         from_module: crate::LocalModuleId,\n     ) -> bool {\n         let to_module = match self {\n@@ -135,7 +135,7 @@ impl Visibility {\n     ///\n     /// If there is no subset relation between `self` and `other`, returns `None` (ie. they're only\n     /// visible in unrelated modules).\n-    pub(crate) fn max(self, other: Visibility, def_map: &CrateDefMap) -> Option<Visibility> {\n+    pub(crate) fn max(self, other: Visibility, def_map: &DefMap) -> Option<Visibility> {\n         match (self, other) {\n             (Visibility::Module(_), Visibility::Public)\n             | (Visibility::Public, Visibility::Module(_))"}, {"sha": "4a3fcea8dc41df6535e9bc016db04fa4c4fb36bb", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791c8e44c6fd1e7519df003dcb8c9e156916f46/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=0791c8e44c6fd1e7519df003dcb8c9e156916f46", "patch": "@@ -18,7 +18,7 @@ use hir_def::{\n     db::DefDatabase,\n     item_scope::ItemScope,\n     keys,\n-    nameres::CrateDefMap,\n+    nameres::DefMap,\n     AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n };\n use hir_expand::{db::AstDatabase, InFile};\n@@ -221,7 +221,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n \n fn visit_module(\n     db: &TestDB,\n-    crate_def_map: &CrateDefMap,\n+    crate_def_map: &DefMap,\n     module_id: LocalModuleId,\n     cb: &mut dyn FnMut(DefWithBodyId),\n ) {\n@@ -249,7 +249,7 @@ fn visit_module(\n \n     fn visit_scope(\n         db: &TestDB,\n-        crate_def_map: &CrateDefMap,\n+        crate_def_map: &DefMap,\n         scope: &ItemScope,\n         cb: &mut dyn FnMut(DefWithBodyId),\n     ) {"}]}