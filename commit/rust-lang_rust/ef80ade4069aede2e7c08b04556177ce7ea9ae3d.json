{"sha": "ef80ade4069aede2e7c08b04556177ce7ea9ae3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmODBhZGU0MDY5YWVkZTJlN2MwOGIwNDU1NjE3N2NlN2VhOWFlM2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-27T06:14:12Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-27T16:37:03Z"}, "message": "Rollup merge of #22809 - nikomatsakis:issue-22655-infinite-recursion, r=pnkfelix\n\n Change MarkerTrait to be invariant. This is a (small) loss of expressiveness, but is necessary for now to work around #22806. Fixes #22655.\n\nr? @pnkfelix", "tree": {"sha": "8506cb13936fa5e60c8eca8cacf807dfe9c0f8a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8506cb13936fa5e60c8eca8cacf807dfe9c0f8a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef80ade4069aede2e7c08b04556177ce7ea9ae3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef80ade4069aede2e7c08b04556177ce7ea9ae3d", "html_url": "https://github.com/rust-lang/rust/commit/ef80ade4069aede2e7c08b04556177ce7ea9ae3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef80ade4069aede2e7c08b04556177ce7ea9ae3d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91569a95f16580f05f9dcb4b6d6eff50203cdde8", "url": "https://api.github.com/repos/rust-lang/rust/commits/91569a95f16580f05f9dcb4b6d6eff50203cdde8", "html_url": "https://github.com/rust-lang/rust/commit/91569a95f16580f05f9dcb4b6d6eff50203cdde8"}, {"sha": "7074346e4f092064c5a5fa276be81d08951f56c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7074346e4f092064c5a5fa276be81d08951f56c9", "html_url": "https://github.com/rust-lang/rust/commit/7074346e4f092064c5a5fa276be81d08951f56c9"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "868a671b9560e2985188874f3b333463af95143d", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef80ade4069aede2e7c08b04556177ce7ea9ae3d/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef80ade4069aede2e7c08b04556177ce7ea9ae3d/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ef80ade4069aede2e7c08b04556177ce7ea9ae3d", "patch": "@@ -275,7 +275,13 @@ macro_rules! impls{\n /// any methods, but instead is used to gate access to data.\n ///\n /// FIXME. Better documentation needed here!\n-pub trait MarkerTrait : PhantomFn<Self> { }\n+pub trait MarkerTrait : PhantomFn<Self,Self> { }\n+//                                    ~~~~~ <-- FIXME(#22806)?\n+//\n+// Marker trait has been made invariant so as to avoid inf recursion,\n+// but we should ideally solve the underlying problem. That's a bit\n+// complicated.\n+\n impl<T:?Sized> MarkerTrait for T { }\n \n /// `PhantomFn` is a marker trait for use with traits that contain"}, {"sha": "18c7cfb0850ceace40ecdb59a275d76c3e9be5eb", "filename": "src/test/run-pass/traits-issue-22655.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef80ade4069aede2e7c08b04556177ce7ea9ae3d/src%2Ftest%2Frun-pass%2Ftraits-issue-22655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef80ade4069aede2e7c08b04556177ce7ea9ae3d/src%2Ftest%2Frun-pass%2Ftraits-issue-22655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-issue-22655.rs?ref=ef80ade4069aede2e7c08b04556177ce7ea9ae3d", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #22655: This test should not lead to\n+// infinite recursion.\n+\n+unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n+\n+pub struct Unique<T:?Sized> {\n+    pointer: *const T,\n+}\n+\n+pub struct Node<V> {\n+    vals: V,\n+    edges: Unique<Node<V>>,\n+}\n+\n+fn is_send<T: Send>() {}\n+\n+fn main() {\n+    is_send::<Node<&'static ()>>();\n+}"}]}