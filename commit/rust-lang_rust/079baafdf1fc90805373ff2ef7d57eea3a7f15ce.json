{"sha": "079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OWJhYWZkZjFmYzkwODA1MzczZmYyZWY3ZDU3ZWVhM2E3ZjE1Y2U=", "commit": {"author": {"name": "Pang, Baoshan", "email": "Baoshan.Pang@windriver.com", "date": "2020-08-07T23:55:15Z"}, "committer": {"name": "Pang, Baoshan", "email": "Baoshan.Pang@windriver.com", "date": "2020-08-25T19:09:39Z"}, "message": "For VxWorks:\nfix building errors\nuse wr-c++ as linker", "tree": {"sha": "781738862112e135045051f97e4bbbb290a88521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/781738862112e135045051f97e4bbbb290a88521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "html_url": "https://github.com/rust-lang/rust/commit/079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/comments", "author": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e15510ca33ea15c893b78710101c962b11459963", "url": "https://api.github.com/repos/rust-lang/rust/commits/e15510ca33ea15c893b78710101c962b11459963", "html_url": "https://github.com/rust-lang/rust/commit/e15510ca33ea15c893b78710101c962b11459963"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "d58468ad539ff92ca0a9d4d96fd260c01d7329b2", "filename": "library/std/src/sys/vxworks/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffd.rs?ref=079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "patch": "@@ -53,7 +53,7 @@ impl FileDesc {\n     }\n \n     #[inline]\n-    fn is_read_vectored(&self) -> bool {\n+    pub fn is_read_vectored(&self) -> bool {\n         true\n     }\n "}, {"sha": "6473a0c3cec41aa764d824f02a81f1765773b781", "filename": "library/std/src/sys/vxworks/process/process_common.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs?ref=079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "patch": "@@ -351,28 +351,19 @@ impl ExitStatus {\n     }\n \n     fn exited(&self) -> bool {\n-        /*unsafe*/\n-        { libc::WIFEXITED(self.0) }\n+        libc::WIFEXITED(self.0)\n     }\n \n     pub fn success(&self) -> bool {\n         self.code() == Some(0)\n     }\n \n     pub fn code(&self) -> Option<i32> {\n-        if self.exited() {\n-            Some(/*unsafe*/ { libc::WEXITSTATUS(self.0) })\n-        } else {\n-            None\n-        }\n+        if self.exited() { Some(libc::WEXITSTATUS(self.0)) } else { None }\n     }\n \n     pub fn signal(&self) -> Option<i32> {\n-        if !self.exited() {\n-            Some(/*unsafe*/ { libc::WTERMSIG(self.0) })\n-        } else {\n-            None\n-        }\n+        if !self.exited() { Some(libc::WTERMSIG(self.0)) } else { None }\n     }\n }\n "}, {"sha": "5391ed83ebc36267e5932ba1723411bdc3e722a6", "filename": "library/std/src/sys/vxworks/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs?ref=079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "patch": "@@ -2,6 +2,6 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    use crate::sys_common::thread_local::register_dtor_fallback;\n+    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n     register_dtor_fallback(t, dtor);\n }"}, {"sha": "d50e4cf52697a30bd96338ba12c11e01a852f8cf", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "patch": "@@ -132,7 +132,8 @@ pub fn find(build: &mut Build) {\n             false\n         };\n \n-        if cxx_configured {\n+        // for VxWorks, record CXX compiler which will be used in lib.rs:linker()\n+        if cxx_configured || target.contains(\"vxworks\") {\n             let compiler = cfg.get_compiler();\n             build.cxx.insert(target, compiler);\n         }"}, {"sha": "c93df8d514912e9c4116efa619978ab12067c8f4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079baafdf1fc90805373ff2ef7d57eea3a7f15ce/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=079baafdf1fc90805373ff2ef7d57eea3a7f15ce", "patch": "@@ -857,6 +857,10 @@ impl Build {\n         if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.as_ref())\n         {\n             Some(linker)\n+        } else if target.contains(\"vxworks\") {\n+            // need to use CXX compiler as linker to resolve the exception functions\n+            // that are only existed in CXX libraries\n+            Some(self.cxx[&target].path())\n         } else if target != self.config.build\n             && util::use_host_linker(target)\n             && !target.contains(\"msvc\")"}]}