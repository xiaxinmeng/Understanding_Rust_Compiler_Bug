{"sha": "24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "node_id": "C_kwDOAAsO6NoAKDI0NjA2ZGVhZjQ4ZTU2ZjYwNGE2MTI1ZmExMWZiOWY3MGNmNGYxZjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-30T11:13:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-30T11:13:09Z"}, "message": "Auto merge of #104905 - compiler-errors:normalization-changes, r=spastorino\n\nSome initial normalization method changes\n\n1. Rename `AtExt::normalize` to `QueryNormalizeExt::query_normalize` (using the `QueryNormalizer`)\n2. Introduce `NormalizeExt::normalize` to replace `partially_normalize_associated_types_in` (using the `AssocTypeNormalizer`)\n3. Rename `FnCtxt::normalize_associated_types_in` to `FnCtxt::normalize`\n4. Remove some unused other normalization fns in `Inherited` and `FnCtxt`\n\nAlso includes one drive-by where we're no longer creating a `FnCtxt` inside of `check_fn`, but passing it in. This means we don't need such weird `FnCtxt` construction logic.\n\nStacked on top of #104835 for convenience.\n\nr? types", "tree": {"sha": "c23e72e2e83aa3707dbc86dfeeb4db10a0e032f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c23e72e2e83aa3707dbc86dfeeb4db10a0e032f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "html_url": "https://github.com/rust-lang/rust/commit/24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a569a88f5500e8780c7cc65fa53fc8b098517674", "url": "https://api.github.com/repos/rust-lang/rust/commits/a569a88f5500e8780c7cc65fa53fc8b098517674", "html_url": "https://github.com/rust-lang/rust/commit/a569a88f5500e8780c7cc65fa53fc8b098517674"}, {"sha": "1e236acd05c045b186195aa0a0b44657ac039978", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e236acd05c045b186195aa0a0b44657ac039978", "html_url": "https://github.com/rust-lang/rust/commit/1e236acd05c045b186195aa0a0b44657ac039978"}], "stats": {"total": 444, "additions": 159, "deletions": 285}, "files": [{"sha": "e05566dc2c745151833d3523ca1b60d6682f964f", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -291,11 +291,11 @@ where\n         // FIXME(lqd): Unify and de-duplicate the following with the actual\n         // `rustc_traits::type_op::type_op_normalize` query to allow the span we need in the\n         // `ObligationCause`. The normalization results are currently different between\n-        // `AtExt::normalize` used in the query and `normalize` called below: the former fails\n-        // to normalize the `nll/relate_tys/impl-fn-ignore-binder-via-bottom.rs` test. Check\n-        // after #85499 lands to see if its fixes have erased this difference.\n+        // `QueryNormalizeExt::query_normalize` used in the query and `normalize` called below:\n+        // the former fails to normalize the `nll/relate_tys/impl-fn-ignore-binder-via-bottom.rs` test.\n+        // Check after #85499 lands to see if its fixes have erased this difference.\n         let (param_env, value) = key.into_parts();\n-        let _ = ocx.normalize(cause, param_env, value.value);\n+        let _ = ocx.normalize(&cause, param_env, value.value);\n \n         try_extract_error_from_fulfill_cx(&ocx, placeholder_region, error_region)\n     }"}, {"sha": "54213d55a2da7137b91b5f9e73fc369ddcf41810", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -761,8 +761,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             hir_id,\n                             ObligationCauseCode::ItemObligation(callee),\n                         );\n-                        let normalized_predicates =\n-                            ocx.normalize(cause.clone(), param_env, predicates);\n+                        let normalized_predicates = ocx.normalize(&cause, param_env, predicates);\n                         ocx.register_obligations(traits::predicates_for_generics(\n                             |_, _| cause.clone(),\n                             self.param_env,"}, {"sha": "be786569cde3f52886abc4a16f1d635d6f58d54a", "filename": "compiler/rustc_const_eval/src/util/compare_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -46,8 +46,8 @@ pub fn is_subtype<'tcx>(\n     let infcx = builder.build();\n     let ocx = ObligationCtxt::new(&infcx);\n     let cause = ObligationCause::dummy();\n-    let src = ocx.normalize(cause.clone(), param_env, src);\n-    let dest = ocx.normalize(cause.clone(), param_env, dest);\n+    let src = ocx.normalize(&cause, param_env, src);\n+    let dest = ocx.normalize(&cause, param_env, dest);\n     match ocx.sub(&cause, param_env, src, dest) {\n         Ok(()) => {}\n         Err(_) => return false,"}, {"sha": "82150310638270c4c69e74d917099c2d666c9e4e", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -109,6 +109,9 @@ pub trait AstConv<'tcx> {\n     ) -> Ty<'tcx>;\n \n     /// Normalize an associated type coming from the user.\n+    ///\n+    /// This should only be used by astconv. Use `FnCtxt::normalize`\n+    /// or `ObligationCtxt::normalize` in downstream crates.\n     fn normalize_ty(&self, span: Span, ty: Ty<'tcx>) -> Ty<'tcx>;\n \n     /// Invoked when we encounter an error from some prior pass"}, {"sha": "ba58672e7595a57e84872bec799a5ac88fe77d24", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -221,7 +221,7 @@ fn compare_predicate_entailment<'tcx>(\n     let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n     for (predicate, span) in iter::zip(impl_m_own_bounds.predicates, impl_m_own_bounds.spans) {\n         let normalize_cause = traits::ObligationCause::misc(span, impl_m_hir_id);\n-        let predicate = ocx.normalize(normalize_cause, param_env, predicate);\n+        let predicate = ocx.normalize(&normalize_cause, param_env, predicate);\n \n         let cause = ObligationCause::new(\n             span,\n@@ -260,7 +260,7 @@ fn compare_predicate_entailment<'tcx>(\n     );\n \n     let norm_cause = ObligationCause::misc(impl_m_span, impl_m_hir_id);\n-    let impl_sig = ocx.normalize(norm_cause.clone(), param_env, impl_sig);\n+    let impl_sig = ocx.normalize(&norm_cause, param_env, impl_sig);\n     let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n     debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n@@ -271,7 +271,7 @@ fn compare_predicate_entailment<'tcx>(\n     // we have to do this before normalization, since the normalized ty may\n     // not contain the input parameters. See issue #87748.\n     wf_tys.extend(trait_sig.inputs_and_output.iter());\n-    let trait_sig = ocx.normalize(norm_cause, param_env, trait_sig);\n+    let trait_sig = ocx.normalize(&norm_cause, param_env, trait_sig);\n     // We also have to add the normalized trait signature\n     // as we don't normalize during implied bounds computation.\n     wf_tys.extend(trait_sig.inputs_and_output.iter());\n@@ -366,7 +366,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     // Normalize the impl signature with fresh variables for lifetime inference.\n     let norm_cause = ObligationCause::misc(return_span, impl_m_hir_id);\n     let impl_sig = ocx.normalize(\n-        norm_cause.clone(),\n+        &norm_cause,\n         param_env,\n         infcx.replace_bound_vars_with_fresh_vars(\n             return_span,\n@@ -387,7 +387,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n             tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs),\n         )\n         .fold_with(&mut collector);\n-    let trait_sig = ocx.normalize(norm_cause.clone(), param_env, unnormalized_trait_sig);\n+    let trait_sig = ocx.normalize(&norm_cause, param_env, unnormalized_trait_sig);\n     let trait_return_ty = trait_sig.output();\n \n     let wf_tys = FxIndexSet::from_iter(\n@@ -592,7 +592,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n             for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.item_def_id).subst_iter_copied(self.tcx(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n-                    ObligationCause::misc(self.span, self.body_id),\n+                    &ObligationCause::misc(self.span, self.body_id),\n                     self.param_env,\n                     pred,\n                 );\n@@ -1403,11 +1403,11 @@ pub(crate) fn raw_compare_const_impl<'tcx>(\n     );\n \n     // There is no \"body\" here, so just pass dummy id.\n-    let impl_ty = ocx.normalize(cause.clone(), param_env, impl_ty);\n+    let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n \n     debug!(\"compare_const_impl: impl_ty={:?}\", impl_ty);\n \n-    let trait_ty = ocx.normalize(cause.clone(), param_env, trait_ty);\n+    let trait_ty = ocx.normalize(&cause, param_env, trait_ty);\n \n     debug!(\"compare_const_impl: trait_ty={:?}\", trait_ty);\n \n@@ -1556,7 +1556,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     for (span, predicate) in std::iter::zip(impl_ty_own_bounds.spans, impl_ty_own_bounds.predicates)\n     {\n         let cause = ObligationCause::misc(span, impl_ty_hir_id);\n-        let predicate = ocx.normalize(cause, param_env, predicate);\n+        let predicate = ocx.normalize(&cause, param_env, predicate);\n \n         let cause = ObligationCause::new(\n             span,\n@@ -1778,7 +1778,7 @@ pub fn check_type_bounds<'tcx>(\n \n     for mut obligation in util::elaborate_obligations(tcx, obligations) {\n         let normalized_predicate =\n-            ocx.normalize(normalize_cause.clone(), normalize_param_env, obligation.predicate);\n+            ocx.normalize(&normalize_cause, normalize_param_env, obligation.predicate);\n         debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n         obligation.predicate = normalized_predicate;\n "}, {"sha": "7daed74e9de83d6add8504792d4daad16ab468f9", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -53,12 +53,14 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n         self.ocx.infcx.tcx\n     }\n \n+    // Convenience function to normalize during wfcheck. This performs\n+    // `ObligationCtxt::normalize`, but provides a nice `ObligationCauseCode`.\n     fn normalize<T>(&self, span: Span, loc: Option<WellFormedLoc>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n         self.ocx.normalize(\n-            ObligationCause::new(span, self.body_id, ObligationCauseCode::WellFormed(loc)),\n+            &ObligationCause::new(span, self.body_id, ObligationCauseCode::WellFormed(loc)),\n             self.param_env,\n             value,\n         )"}, {"sha": "2058832d5fdc1035dc405812cc5d9a309b2382a6", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -332,7 +332,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n             ObligationCauseCode::MainFunctionType,\n         );\n         let ocx = traits::ObligationCtxt::new(&infcx);\n-        let norm_return_ty = ocx.normalize(cause.clone(), param_env, return_ty);\n+        let norm_return_ty = ocx.normalize(&cause, param_env, return_ty);\n         ocx.register_bound(cause, param_env, norm_return_ty, term_did);\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {"}, {"sha": "b09ddf80e2a52577292e3d602fca7e3cff198dc2", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -448,7 +448,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // previously appeared within a `Binder<>` and hence would not\n         // have been normalized before.\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(call_expr.span, infer::FnCall, fn_sig);\n-        let fn_sig = self.normalize_associated_types_in(call_expr.span, fn_sig);\n+        let fn_sig = self.normalize(call_expr.span, fn_sig);\n \n         // Call the generic checker.\n         let expected_arg_tys = self.expected_inputs_for_expected_output("}, {"sha": "890a068a7befc8c78cc14ad9d9c0d4fe96851cb7", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -752,10 +752,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 match *self.expr_ty.kind() {\n                     ty::FnDef(..) => {\n                         // Attempt a coercion to a fn pointer type.\n-                        let f = fcx.normalize_associated_types_in(\n-                            self.expr_span,\n-                            self.expr_ty.fn_sig(fcx.tcx),\n-                        );\n+                        let f = fcx.normalize(self.expr_span, self.expr_ty.fn_sig(fcx.tcx));\n                         let res = fcx.try_coerce(\n                             self.expr,\n                             self.expr_ty,"}, {"sha": "0c9a350c295f4227866c20eb5e4ae887b027ed7d", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -1,6 +1,6 @@\n use crate::coercion::CoerceMany;\n use crate::gather_locals::GatherLocalsVisitor;\n-use crate::{FnCtxt, Inherited};\n+use crate::FnCtxt;\n use crate::{GeneratorTypes, UnsafetyState};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -20,21 +20,16 @@ use std::cell::RefCell;\n ///\n /// * ...\n /// * inherited: other fields inherited from the enclosing fn (if any)\n-#[instrument(skip(inherited, body), level = \"debug\")]\n+#[instrument(skip(fcx, body), level = \"debug\")]\n pub(super) fn check_fn<'a, 'tcx>(\n-    inherited: &'a Inherited<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n+    fcx: &mut FnCtxt<'a, 'tcx>,\n     fn_sig: ty::FnSig<'tcx>,\n     decl: &'tcx hir::FnDecl<'tcx>,\n     fn_def_id: LocalDefId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n-) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n-    let fn_id = inherited.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n-\n-    // Create the function context. This is either derived from scratch or,\n-    // in the case of closures, based on the outer context.\n-    let mut fcx = FnCtxt::new(inherited, param_env, body.value.hir_id);\n+) -> Option<GeneratorTypes<'tcx>> {\n+    let fn_id = fcx.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n     fcx.ps.set(UnsafetyState::function(fn_sig.unsafety, fn_id));\n \n     let tcx = fcx.tcx;\n@@ -47,7 +42,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n             declared_ret_ty,\n             body.value.hir_id,\n             decl.output.span(),\n-            param_env,\n+            fcx.param_env,\n         ));\n \n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n@@ -105,7 +100,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         fcx.write_ty(param.hir_id, param_ty);\n     }\n \n-    inherited.typeck_results.borrow_mut().liberated_fn_sigs_mut().insert(fn_id, fn_sig);\n+    fcx.typeck_results.borrow_mut().liberated_fn_sigs_mut().insert(fn_id, fn_sig);\n \n     if let ty::Dynamic(_, _, ty::Dyn) = declared_ret_ty.kind() {\n         // FIXME: We need to verify that the return type is `Sized` after the return expression has\n@@ -174,7 +169,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         check_panic_info_fn(tcx, panic_impl_did.expect_local(), fn_sig, decl, declared_ret_ty);\n     }\n \n-    (fcx, gen_ty)\n+    gen_ty\n }\n \n fn check_panic_info_fn("}, {"sha": "5d3419b3b6e66c16be7e11c09dc0d0630ef0454c", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -79,16 +79,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         debug!(?bound_sig, ?liberated_sig);\n \n+        let mut fcx = FnCtxt::new(self, self.param_env.without_const(), body.value.hir_id);\n         let generator_types = check_fn(\n-            self,\n-            self.param_env.without_const(),\n+            &mut fcx,\n             liberated_sig,\n             closure.fn_decl,\n             expr_def_id,\n             body,\n             closure.movability,\n-        )\n-        .1;\n+        );\n \n         let parent_substs = InternalSubsts::identity_for_item(\n             self.tcx,\n@@ -214,7 +213,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if expected_sig.is_none()\n                 && let ty::PredicateKind::Clause(ty::Clause::Projection(proj_predicate)) = bound_predicate.skip_binder()\n             {\n-                expected_sig = self.normalize_associated_types_in(\n+                expected_sig = self.normalize(\n                     obligation.cause.span,\n                     self.deduce_sig_from_projection(\n                     Some(obligation.cause.span),\n@@ -623,7 +622,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         // Astconv can't normalize inputs or outputs with escaping bound vars,\n         // so normalize them here, after we've wrapped them in a binder.\n-        let result = self.normalize_associated_types_in(self.tcx.hir().span(hir_id), result);\n+        let result = self.normalize(self.tcx.hir().span(hir_id), result);\n \n         let c_result = self.inh.infcx.canonicalize_response(result);\n         self.typeck_results.borrow_mut().user_provided_sigs.insert(expr_def_id, c_result);\n@@ -797,12 +796,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> ClosureSignatures<'tcx> {\n         let liberated_sig =\n             self.tcx().liberate_late_bound_regions(expr_def_id.to_def_id(), bound_sig);\n-        let liberated_sig = self.inh.normalize_associated_types_in(\n-            body.value.span,\n-            self.tcx.hir().local_def_id_to_hir_id(expr_def_id),\n-            self.param_env,\n-            liberated_sig,\n-        );\n+        let liberated_sig = self.normalize(body.value.span, liberated_sig);\n         ClosureSignatures { bound_sig, liberated_sig }\n     }\n }"}, {"sha": "f0b349f0c98dd667f349083ab9555df2aa758589", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -62,7 +62,9 @@ use rustc_span::{self, BytePos, DesugaringKind, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, ObligationCtxt};\n+use rustc_trait_selection::traits::{\n+    self, NormalizeExt, ObligationCause, ObligationCauseCode, ObligationCtxt,\n+};\n \n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n@@ -832,7 +834,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         let b = self.shallow_resolve(b);\n         let InferOk { value: b, mut obligations } =\n-            self.normalize_associated_types_in_as_infer_ok(self.cause.span, b);\n+            self.at(&self.cause, self.param_env).normalize(b);\n         debug!(\"coerce_from_fn_item(a={:?}, b={:?})\", a, b);\n \n         match b.kind() {\n@@ -854,7 +856,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 }\n \n                 let InferOk { value: a_sig, obligations: o1 } =\n-                    self.normalize_associated_types_in_as_infer_ok(self.cause.span, a_sig);\n+                    self.at(&self.cause, self.param_env).normalize(a_sig);\n                 obligations.extend(o1);\n \n                 let a_fn_pointer = self.tcx.mk_fn_ptr(a_sig);\n@@ -1141,8 +1143,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return Err(TypeError::IntrinsicCast);\n             }\n             // The signature must match.\n-            let a_sig = self.normalize_associated_types_in(new.span, a_sig);\n-            let b_sig = self.normalize_associated_types_in(new.span, b_sig);\n+            let (a_sig, b_sig) = self.normalize(new.span, (a_sig, b_sig));\n             let sig = self\n                 .at(cause, self.param_env)\n                 .trace(prev_ty, new_ty)"}, {"sha": "0c5bbb3e20be32cc3a83e063e1d36006be387b30", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -1664,7 +1664,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .fields\n                         .iter()\n                         .map(|f| {\n-                            let fru_ty = self.normalize_associated_types_in(\n+                            let fru_ty = self.normalize(\n                                 expr_span,\n                                 self.field_ty(base_expr.span, f, fresh_substs),\n                             );\n@@ -1748,9 +1748,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ty::Adt(adt, substs) if adt.is_struct() => variant\n                         .fields\n                         .iter()\n-                        .map(|f| {\n-                            self.normalize_associated_types_in(expr_span, f.ty(self.tcx, substs))\n-                        })\n+                        .map(|f| self.normalize(expr_span, f.ty(self.tcx, substs)))\n                         .collect(),\n                     _ => {\n                         self.tcx"}, {"sha": "952d2726259187c736488ccd827d17973b571ed7", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 49, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -16,7 +16,7 @@ use rustc_hir_analysis::astconv::{\n };\n use rustc_infer::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n-use rustc_infer::infer::{InferOk, InferResult};\n+use rustc_infer::infer::InferResult;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -30,9 +30,8 @@ use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, ObligationCtxt};\n+use rustc_trait_selection::traits::{self, NormalizeExt, ObligationCauseCode, ObligationCtxt};\n \n use std::collections::hash_map::Entry;\n use std::slice;\n@@ -343,7 +342,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     {\n         debug!(\"instantiate_type_scheme(value={:?}, substs={:?})\", value, substs);\n         let value = EarlyBinder(value).subst(self.tcx, substs);\n-        let result = self.normalize_associated_types_in(span, value);\n+        let result = self.normalize(span, value);\n         debug!(\"instantiate_type_scheme = {:?}\", result);\n         result\n     }\n@@ -359,58 +358,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let bounds = self.tcx.predicates_of(def_id);\n         let spans: Vec<Span> = bounds.predicates.iter().map(|(_, span)| *span).collect();\n         let result = bounds.instantiate(self.tcx, substs);\n-        let result = self.normalize_associated_types_in(span, result);\n+        let result = self.normalize(span, result);\n         debug!(\n             \"instantiate_bounds(bounds={:?}, substs={:?}) = {:?}, {:?}\",\n             bounds, substs, result, spans,\n         );\n         (result, spans)\n     }\n \n-    pub(in super::super) fn normalize_associated_types_in<T>(&self, span: Span, value: T) -> T\n+    pub(in super::super) fn normalize<T>(&self, span: Span, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.inh.normalize_associated_types_in(span, self.body_id, self.param_env, value)\n-    }\n-\n-    pub(in super::super) fn normalize_associated_types_in_as_infer_ok<T>(\n-        &self,\n-        span: Span,\n-        value: T,\n-    ) -> InferOk<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.inh.partially_normalize_associated_types_in(\n-            ObligationCause::misc(span, self.body_id),\n-            self.param_env,\n-            value,\n-        )\n-    }\n-\n-    pub(in super::super) fn normalize_op_associated_types_in_as_infer_ok<T>(\n-        &self,\n-        span: Span,\n-        value: T,\n-        opt_input_expr: Option<&hir::Expr<'_>>,\n-    ) -> InferOk<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.inh.partially_normalize_associated_types_in(\n-            ObligationCause::new(\n-                span,\n-                self.body_id,\n-                traits::BinOp {\n-                    rhs_span: opt_input_expr.map(|expr| expr.span),\n-                    is_lit: opt_input_expr\n-                        .map_or(false, |expr| matches!(expr.kind, ExprKind::Lit(_))),\n-                    output_ty: None,\n-                },\n-            ),\n-            self.param_env,\n-            value,\n+        self.register_infer_ok_obligations(\n+            self.at(&self.misc(span), self.param_env).normalize(value),\n         )\n     }\n \n@@ -490,7 +451,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let span = self.tcx.def_span(anon_const.def_id);\n                 let c = ty::Const::from_anon_const(self.tcx, anon_const.def_id);\n                 self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n-                self.normalize_associated_types_in(span, c)\n+                self.normalize(span, c)\n             }\n         }\n     }\n@@ -583,7 +544,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: &'tcx ty::FieldDef,\n         substs: SubstsRef<'tcx>,\n     ) -> Ty<'tcx> {\n-        self.normalize_associated_types_in(span, field.ty(self.tcx, substs))\n+        self.normalize(span, field.ty(self.tcx, substs))\n     }\n \n     pub(in super::super) fn resolve_rvalue_scopes(&self, def_id: DefId) {\n@@ -1110,7 +1071,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Res::Local(hid) = res {\n             let ty = self.local_ty(span, hid).decl_ty;\n-            let ty = self.normalize_associated_types_in(span, ty);\n+            let ty = self.normalize(span, ty);\n             self.write_ty(hir_id, ty);\n             return (ty, res);\n         }"}, {"sha": "ea141e815bf4a9c268d1f3652f20a795863c137b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         if ty.has_escaping_bound_vars() {\n             ty // FIXME: normalization and escaping regions\n         } else {\n-            self.normalize_associated_types_in(span, ty)\n+            self.normalize(span, ty)\n         }\n     }\n "}, {"sha": "b9a8d16311c93a7f0465c5035f37c95d19375ca8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -20,6 +20,7 @@ use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n+use rustc_trait_selection::traits::NormalizeExt;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(crate) fn body_fn_sig(&self) -> Option<ty::FnSig<'tcx>> {\n@@ -245,7 +246,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // implied by wf, but also because that would possibly result in\n         // erroneous errors later on.\n         let infer::InferOk { value: output, obligations: _ } =\n-            self.normalize_associated_types_in_as_infer_ok(expr.span, output);\n+            self.at(&self.misc(expr.span), self.param_env).normalize(output);\n \n         if output.is_ty_var() { None } else { Some((def_id_or_name, output, inputs)) }\n     }\n@@ -759,7 +760,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n                 let bound_vars = self.tcx.late_bound_vars(fn_id);\n                 let ty = Binder::bind_with_vars(ty, bound_vars);\n-                let ty = self.normalize_associated_types_in(span, ty);\n+                let ty = self.normalize(span, ty);\n                 let ty = self.tcx.erase_late_bound_regions(ty);\n                 if self.can_coerce(expected, ty) {\n                     err.subdiagnostic(ExpectedReturnTypeLabel::Other { span, expected });\n@@ -920,7 +921,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n             let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n-            let ty = self.normalize_associated_types_in(expr.span, ty);\n+            let ty = self.normalize(expr.span, ty);\n             let ty = match self.tcx.asyncness(fn_id.owner) {\n                 hir::IsAsync::Async => {\n                     let infcx = self.tcx.infer_ctxt().build();"}, {"sha": "3b1518ff79b4e8e0859f8436615258b3587ea096", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -235,7 +235,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                 counter += 1;\n                 ty::BoundRegion { var, kind }\n             };\n-            let ty = fcx.normalize_associated_types_in(cause.span, cause.ty);\n+            let ty = fcx.normalize(cause.span, cause.ty);\n             let ty = fcx.tcx.fold_regions(ty, |region, current_depth| {\n                 let br = match region.kind() {\n                     ty::ReVar(vid) => {"}, {"sha": "869ad07c00d61a8511b55f28f9af7d9315907950", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -7,12 +7,10 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n use rustc_infer::infer::{DefiningAnchor, InferCtxt, InferOk, TyCtxtInferExt};\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n };\n@@ -102,7 +100,7 @@ impl<'tcx> Inherited<'tcx> {\n                     infcx.probe(|_| {\n                         let ocx = ObligationCtxt::new_in_snapshot(infcx);\n                         let normalized_fn_sig = ocx.normalize(\n-                            ObligationCause::dummy(),\n+                            &ObligationCause::dummy(),\n                             // FIXME(compiler-errors): This is probably not the right param-env...\n                             infcx.tcx.param_env(def_id),\n                             fn_sig,\n@@ -179,35 +177,4 @@ impl<'tcx> Inherited<'tcx> {\n         self.register_predicates(infer_ok.obligations);\n         infer_ok.value\n     }\n-\n-    pub(super) fn normalize_associated_types_in<T>(\n-        &self,\n-        span: Span,\n-        body_id: hir::HirId,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n-    ) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.normalize_associated_types_in_with_cause(\n-            ObligationCause::misc(span, body_id),\n-            param_env,\n-            value,\n-        )\n-    }\n-\n-    pub(super) fn normalize_associated_types_in_with_cause<T>(\n-        &self,\n-        cause: ObligationCause<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n-    ) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        let ok = self.partially_normalize_associated_types_in(cause, param_env, value);\n-        debug!(?ok);\n-        self.register_infer_ok_obligations(ok)\n-    }\n }"}, {"sha": "09bd123350dfd1e3f794a4f7e13210a7acf50f3e", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -233,9 +233,10 @@ fn typeck_with_fallback<'tcx>(\n \n     let typeck_results = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n-        let mut fcx = if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n+        let mut fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n+\n+        if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n             let fn_sig = if rustc_hir_analysis::collect::get_infer_ret_ty(&decl.output).is_some() {\n-                let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n                 <dyn AstConv<'_>>::ty_of_fn(&fcx, id, header.unsafety, header.abi, decl, None, None)\n             } else {\n                 tcx.fn_sig(def_id)\n@@ -245,15 +246,10 @@ fn typeck_with_fallback<'tcx>(\n \n             // Compute the function signature from point of view of inside the fn.\n             let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);\n-            let fn_sig = inh.normalize_associated_types_in(\n-                body.value.span,\n-                body_id.hir_id,\n-                param_env,\n-                fn_sig,\n-            );\n-            check_fn(&inh, param_env, fn_sig, decl, def_id, body, None).0\n+            let fn_sig = fcx.normalize(body.value.span, fn_sig);\n+\n+            check_fn(&mut fcx, fn_sig, decl, def_id, body, None);\n         } else {\n-            let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n             let expected_type = body_ty\n                 .and_then(|ty| match ty.kind {\n                     hir::TyKind::Infer => Some(<dyn AstConv<'_>>::ast_ty_to_ty(&fcx, ty)),\n@@ -304,7 +300,7 @@ fn typeck_with_fallback<'tcx>(\n                     _ => fallback(),\n                 });\n \n-            let expected_type = fcx.normalize_associated_types_in(body.value.span, expected_type);\n+            let expected_type = fcx.normalize(body.value.span, expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n \n             // Gather locals in statics (because of block expressions).\n@@ -313,8 +309,6 @@ fn typeck_with_fallback<'tcx>(\n             fcx.check_expr_coercable_to_type(&body.value, expected_type, None);\n \n             fcx.write_ty(id, expected_type);\n-\n-            fcx\n         };\n \n         fcx.type_inference_fallback();"}, {"sha": "03d0e7926de1166fc5103cc7f0167ea4eb153048", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -106,15 +106,15 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // traits, no trait system method can be called before this point because they\n         // could alter our Self-type, except for normalizing the receiver from the\n         // signature (which is also done during probing).\n-        let method_sig_rcvr = self.normalize_associated_types_in(self.span, method_sig.inputs()[0]);\n+        let method_sig_rcvr = self.normalize(self.span, method_sig.inputs()[0]);\n         debug!(\n             \"confirm: self_ty={:?} method_sig_rcvr={:?} method_sig={:?} method_predicates={:?}\",\n             self_ty, method_sig_rcvr, method_sig, method_predicates\n         );\n         self.unify_receivers(self_ty, method_sig_rcvr, &pick, all_substs);\n \n         let (method_sig, method_predicates) =\n-            self.normalize_associated_types_in(self.span, (method_sig, method_predicates));\n+            self.normalize(self.span, (method_sig, method_predicates));\n         let method_sig = ty::Binder::dummy(method_sig);\n \n         // Make sure nobody calls `drop()` explicitly."}, {"sha": "ebbd5eb1e6478cafdb717373c908f1f5724ff01b", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -23,8 +23,8 @@ use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, Ty, TypeVisitable};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n-use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::{self, NormalizeExt};\n \n use self::probe::{IsSuggestion, ProbeScope};\n \n@@ -465,11 +465,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig);\n \n-        let InferOk { value, obligations: o } = if is_op {\n-            self.normalize_op_associated_types_in_as_infer_ok(span, fn_sig, opt_input_expr)\n+        let cause = if is_op {\n+            ObligationCause::new(\n+                span,\n+                self.body_id,\n+                traits::BinOp {\n+                    rhs_span: opt_input_expr.map(|expr| expr.span),\n+                    is_lit: opt_input_expr\n+                        .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n+                    output_ty: None,\n+                },\n+            )\n         } else {\n-            self.normalize_associated_types_in_as_infer_ok(span, fn_sig)\n+            traits::ObligationCause::misc(span, self.body_id)\n         };\n+\n+        let InferOk { value, obligations: o } = self.at(&cause, self.param_env).normalize(fn_sig);\n         let fn_sig = {\n             obligations.extend(o);\n             value\n@@ -485,32 +496,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // any late-bound regions appearing in its bounds.\n         let bounds = self.tcx.predicates_of(def_id).instantiate(self.tcx, substs);\n \n-        let InferOk { value, obligations: o } = if is_op {\n-            self.normalize_op_associated_types_in_as_infer_ok(span, bounds, opt_input_expr)\n-        } else {\n-            self.normalize_associated_types_in_as_infer_ok(span, bounds)\n-        };\n+        let InferOk { value, obligations: o } = self.at(&cause, self.param_env).normalize(bounds);\n         let bounds = {\n             obligations.extend(o);\n             value\n         };\n \n         assert!(!bounds.has_escaping_bound_vars());\n \n-        let cause = if is_op {\n-            ObligationCause::new(\n-                span,\n-                self.body_id,\n-                traits::BinOp {\n-                    rhs_span: opt_input_expr.map(|expr| expr.span),\n-                    is_lit: opt_input_expr\n-                        .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n-                    output_ty: None,\n-                },\n-            )\n-        } else {\n-            traits::ObligationCause::misc(span, self.body_id)\n-        };\n         let predicates_cause = cause.clone();\n         obligations.extend(traits::predicates_for_generics(\n             move |_, _| predicates_cause.clone(),"}, {"sha": "c78a32c29dcdafe1bba9f32eaf3bc0b4e5d25cea", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -31,13 +31,13 @@ use rustc_span::lev_distance::{\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::autoderef::{self, Autoderef};\n-use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::method_autoderef::MethodAutoderefBadTy;\n use rustc_trait_selection::traits::query::method_autoderef::{\n     CandidateStep, MethodAutoderefStepsResult,\n };\n use rustc_trait_selection::traits::query::CanonicalTyGoal;\n+use rustc_trait_selection::traits::NormalizeExt;\n use rustc_trait_selection::traits::{self, ObligationCause};\n use std::cmp::max;\n use std::iter;\n@@ -716,9 +716,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             // maybe shouldn't include `Param`s, but rather fresh variables or be canonicalized,\n             // see issue #89650\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-            let InferOk { value: xform_self_ty, obligations } = self\n-                .fcx\n-                .partially_normalize_associated_types_in(cause, self.param_env, xform_self_ty);\n+            let InferOk { value: xform_self_ty, obligations } =\n+                self.fcx.at(&cause, self.param_env).normalize(xform_self_ty);\n \n             debug!(\n                 \"assemble_inherent_impl_probe after normalization: xform_self_ty = {:?}/{:?}\",\n@@ -1507,11 +1506,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     let InferOk {\n                         value: normalized_xform_ret_ty,\n                         obligations: normalization_obligations,\n-                    } = self.fcx.partially_normalize_associated_types_in(\n-                        cause.clone(),\n-                        self.param_env,\n-                        probe.xform_ret_ty,\n-                    );\n+                    } = self.fcx.at(&cause, self.param_env).normalize(probe.xform_ret_ty);\n                     xform_ret_ty = normalized_xform_ret_ty;\n                     debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n \n@@ -1521,11 +1516,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     let impl_bounds = impl_bounds.instantiate(self.tcx, substs);\n \n                     let InferOk { value: impl_bounds, obligations: norm_obligations } =\n-                        self.fcx.partially_normalize_associated_types_in(\n-                            cause.clone(),\n-                            self.param_env,\n-                            impl_bounds,\n-                        );\n+                        self.fcx.at(&cause, self.param_env).normalize(impl_bounds);\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics("}, {"sha": "e988c77a064f6a03733c9817ff25a34e10d472b2", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::AutoDerefReachedRecursionLimit;\n-use crate::infer::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n+use crate::traits::NormalizeExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n@@ -138,11 +138,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             return None;\n         }\n \n-        let normalized_ty = self.infcx.partially_normalize_associated_types_in(\n-            cause,\n-            self.param_env,\n-            tcx.mk_projection(tcx.lang_items().deref_target()?, trait_ref.substs),\n-        );\n+        let normalized_ty = self\n+            .infcx\n+            .at(&cause, self.param_env)\n+            .normalize(tcx.mk_projection(tcx.lang_items().deref_target()?, trait_ref.substs));\n         let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n         let normalized_ty =\n             normalized_ty.into_value_registering_obligations(self.infcx, &mut *fulfillcx);"}, {"sha": "6c70bbf75163a83348a12cd5ca8415abf1a7e7e8", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -3,7 +3,6 @@ use crate::traits::{self, ObligationCtxt};\n \n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n@@ -30,15 +29,6 @@ pub trait InferCtxtExt<'tcx> {\n         span: Span,\n     ) -> bool;\n \n-    fn partially_normalize_associated_types_in<T>(\n-        &self,\n-        cause: ObligationCause<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n-    ) -> InferOk<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>;\n-\n     /// Check whether a `ty` implements given trait(trait_def_id).\n     /// The inputs are:\n     ///\n@@ -88,24 +78,6 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         traits::type_known_to_meet_bound_modulo_regions(self, param_env, ty, lang_item, span)\n     }\n \n-    /// Normalizes associated types in `value`, potentially returning\n-    /// new obligations that must further be processed.\n-    #[instrument(level = \"debug\", skip(self, cause, param_env), ret)]\n-    fn partially_normalize_associated_types_in<T>(\n-        &self,\n-        cause: ObligationCause<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n-    ) -> InferOk<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        let mut selcx = traits::SelectionContext::new(self);\n-        let traits::Normalized { value, obligations } =\n-            traits::normalize(&mut selcx, param_env, cause, value);\n-        InferOk { value, obligations }\n-    }\n-\n     #[instrument(level = \"debug\", skip(self, params), ret)]\n     fn type_implements_trait(\n         &self,"}, {"sha": "64d01ddb09a493bafff61f309e741d0709af66e6", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -3,7 +3,7 @@ use std::fmt::Debug;\n \n use super::TraitEngine;\n use super::{ChalkFulfillmentContext, FulfillmentContext};\n-use crate::infer::InferCtxtExt;\n+use crate::traits::NormalizeExt;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::at::ToTrace;\n@@ -104,11 +104,11 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n \n     pub fn normalize<T: TypeFoldable<'tcx>>(\n         &self,\n-        cause: ObligationCause<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         value: T,\n     ) -> T {\n-        let infer_ok = self.infcx.partially_normalize_associated_types_in(cause, param_env, value);\n+        let infer_ok = self.infcx.at(&cause, param_env).normalize(value);\n         self.register_infer_ok_obligations(infer_ok)\n     }\n \n@@ -185,7 +185,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n             // sound and then uncomment this line again.\n \n             // implied_bounds.insert(ty);\n-            let normalized = self.normalize(cause.clone(), param_env, ty);\n+            let normalized = self.normalize(&cause, param_env, ty);\n             implied_bounds.insert(normalized);\n         }\n         implied_bounds"}, {"sha": "752b53fbc3f9a2011c5cfa90afc2e32d2fbfb8b0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -17,11 +17,11 @@ pub fn recompute_applicable_impls<'tcx>(\n         let placeholder_obligation =\n             infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n         let obligation_trait_ref =\n-            ocx.normalize(dummy_cause.clone(), param_env, placeholder_obligation.trait_ref);\n+            ocx.normalize(&dummy_cause, param_env, placeholder_obligation.trait_ref);\n \n         let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n         let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap().subst(tcx, impl_substs);\n-        let impl_trait_ref = ocx.normalize(ObligationCause::dummy(), param_env, impl_trait_ref);\n+        let impl_trait_ref = ocx.normalize(&ObligationCause::dummy(), param_env, impl_trait_ref);\n \n         if let Err(_) = ocx.eq(&dummy_cause, param_env, obligation_trait_ref, impl_trait_ref) {\n             return false;"}, {"sha": "049b24b39975dd3ff7e21978d667a4d40d324ee1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -9,11 +9,11 @@ use super::{\n };\n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::infer::InferCtxtExt as _;\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use crate::traits::query::normalize::AtExt as _;\n+use crate::traits::query::normalize::QueryNormalizeExt as _;\n use crate::traits::specialize::to_pretty_impl_header;\n+use crate::traits::NormalizeExt;\n use on_unimplemented::OnUnimplementedNote;\n use on_unimplemented::TypeErrCtxtExt as _;\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n@@ -1595,6 +1595,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     bound_predicate.rebind(data),\n                 );\n                 let mut obligations = vec![];\n+                // FIXME(normalization): Change this to use `At::normalize`\n                 let normalized_ty = super::normalize_projection_type(\n                     &mut selcx,\n                     obligation.param_env,\n@@ -1933,7 +1934,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let infcx = self.tcx.infer_ctxt().build();\n             infcx\n                 .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n-                .normalize(candidate)\n+                .query_normalize(candidate)\n                 .map_or(candidate, |normalized| normalized.value)\n         };\n \n@@ -2535,11 +2536,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 pred.fold_with(&mut ParamToVarFolder { infcx: self, var_map: Default::default() });\n \n             let InferOk { value: cleaned_pred, .. } =\n-                self.infcx.partially_normalize_associated_types_in(\n-                    ObligationCause::dummy(),\n-                    param_env,\n-                    cleaned_pred,\n-                );\n+                self.infcx.at(&ObligationCause::dummy(), param_env).normalize(cleaned_pred);\n \n             let obligation =\n                 Obligation::new(self.tcx, ObligationCause::dummy(), param_env, cleaned_pred);"}, {"sha": "1740128727a5a34bf1ff8847a1dcdfa0fcd56f75", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -2,6 +2,7 @@ use super::{DefIdOrName, Obligation, ObligationCause, ObligationCauseCode, Predi\n \n use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n+use crate::traits::NormalizeExt;\n \n use hir::def::CtorOf;\n use hir::HirId;\n@@ -2966,12 +2967,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         self.tcx.mk_substs_trait(trait_pred.self_ty(), []),\n                     )\n                 });\n-                let InferOk { value: projection_ty, .. } = self\n-                    .partially_normalize_associated_types_in(\n-                        obligation.cause.clone(),\n-                        obligation.param_env,\n-                        projection_ty,\n-                    );\n+                let InferOk { value: projection_ty, .. } =\n+                    self.at(&obligation.cause, obligation.param_env).normalize(projection_ty);\n \n                 debug!(\n                     normalized_projection_type = ?self.resolve_vars_if_possible(projection_ty)"}, {"sha": "371367f0deb3e671f956c7dd41d898f4e5eaf83b", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -56,7 +56,8 @@ pub use self::object_safety::astconv_object_safety_violations;\n pub use self::object_safety::is_vtable_safe_method;\n pub use self::object_safety::MethodViolationCode;\n pub use self::object_safety::ObjectSafetyViolation;\n-pub use self::project::{normalize, normalize_projection_type, normalize_to};\n+pub(crate) use self::project::{normalize, normalize_to};\n+pub use self::project::{normalize_projection_type, NormalizeExt};\n pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n@@ -386,7 +387,7 @@ where\n {\n     let ocx = ObligationCtxt::new(infcx);\n     debug!(?value);\n-    let normalized_value = ocx.normalize(cause, param_env, value);\n+    let normalized_value = ocx.normalize(&cause, param_env, value);\n     debug!(?normalized_value);\n     debug!(\"select_all_or_error start\");\n     let errors = ocx.select_all_or_error();\n@@ -453,7 +454,7 @@ pub fn impossible_predicates<'tcx>(\n     let infcx = tcx.infer_ctxt().build();\n     let param_env = ty::ParamEnv::reveal_all();\n     let ocx = ObligationCtxt::new(&infcx);\n-    let predicates = ocx.normalize(ObligationCause::dummy(), param_env, predicates);\n+    let predicates = ocx.normalize(&ObligationCause::dummy(), param_env, predicates);\n     for predicate in predicates {\n         let obligation = Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate);\n         ocx.register_obligation(obligation);"}, {"sha": "113803cd1790ac362a3794731b2d6186ca108991", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -27,6 +27,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n+use rustc_infer::infer::at::At;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_infer::traits::ImplSourceBuiltinData;\n use rustc_middle::traits::select::OverflowError;\n@@ -48,6 +49,19 @@ pub type ProjectionTyObligation<'tcx> = Obligation<'tcx, ty::ProjectionTy<'tcx>>\n \n pub(super) struct InProgress;\n \n+pub trait NormalizeExt<'tcx> {\n+    fn normalize<T: TypeFoldable<'tcx>>(&self, t: T) -> InferOk<'tcx, T>;\n+}\n+\n+impl<'tcx> NormalizeExt<'tcx> for At<'_, 'tcx> {\n+    fn normalize<T: TypeFoldable<'tcx>>(&self, value: T) -> InferOk<'tcx, T> {\n+        let mut selcx = SelectionContext::new(self.infcx);\n+        let Normalized { value, obligations } =\n+            normalize(&mut selcx, self.param_env, self.cause.clone(), value);\n+        InferOk { value, obligations }\n+    }\n+}\n+\n /// When attempting to resolve `<T as TraitRef>::Name` ...\n #[derive(Debug)]\n pub enum ProjectionError<'tcx> {\n@@ -293,7 +307,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n /// them with a fully resolved type where possible. The return value\n /// combines the normalized result and any additional obligations that\n /// were incurred as result.\n-pub fn normalize<'a, 'b, 'tcx, T>(\n+pub(crate) fn normalize<'a, 'b, 'tcx, T>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -307,7 +321,7 @@ where\n     Normalized { value, obligations }\n }\n \n-pub fn normalize_to<'a, 'b, 'tcx, T>(\n+pub(crate) fn normalize_to<'a, 'b, 'tcx, T>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -321,7 +335,7 @@ where\n }\n \n /// As `normalize`, but with a custom depth.\n-pub fn normalize_with_depth<'a, 'b, 'tcx, T>(\n+pub(crate) fn normalize_with_depth<'a, 'b, 'tcx, T>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -337,7 +351,7 @@ where\n }\n \n #[instrument(level = \"info\", skip(selcx, param_env, cause, obligations))]\n-pub fn normalize_with_depth_to<'a, 'b, 'tcx, T>(\n+pub(crate) fn normalize_with_depth_to<'a, 'b, 'tcx, T>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -357,7 +371,7 @@ where\n }\n \n #[instrument(level = \"info\", skip(selcx, param_env, cause, obligations))]\n-pub fn try_normalize_with_depth_to<'a, 'b, 'tcx, T>(\n+pub(crate) fn try_normalize_with_depth_to<'a, 'b, 'tcx, T>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,"}, {"sha": "1aed66308709e33a8e43df92298e951c4d549b9d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -22,13 +22,13 @@ use super::NoSolution;\n \n pub use rustc_middle::traits::query::NormalizationResult;\n \n-pub trait AtExt<'tcx> {\n-    fn normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n+pub trait QueryNormalizeExt<'tcx> {\n+    fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n         T: TypeFoldable<'tcx>;\n }\n \n-impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n+impl<'cx, 'tcx> QueryNormalizeExt<'tcx> for At<'cx, 'tcx> {\n     /// Normalize `value` in the context of the inference context,\n     /// yielding a resulting type, or an error if `value` cannot be\n     /// normalized. If you don't care about regions, you should prefer\n@@ -42,7 +42,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n     /// normalizing, but for now should be used only when we actually\n     /// know that normalization will succeed, since error reporting\n     /// and other details are still \"under development\".\n-    fn normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n+    fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n         T: TypeFoldable<'tcx>,\n     {"}, {"sha": "51968c2d7a191fccc2bd21e17ff26b6a0ec343f1", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -8,8 +8,8 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{GenericArg, SubstsRef};\n \n+use super::NormalizeExt;\n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext};\n-use crate::infer::InferCtxtExt;\n use rustc_infer::infer::InferOk;\n pub use rustc_infer::traits::{self, util::*};\n \n@@ -202,15 +202,13 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n     let subject = selcx.tcx().bound_impl_subject(impl_def_id);\n     let subject = subject.subst(selcx.tcx(), impl_substs);\n-    let InferOk { value: subject, obligations: normalization_obligations1 } = selcx\n-        .infcx\n-        .partially_normalize_associated_types_in(ObligationCause::dummy(), param_env, subject);\n+    let InferOk { value: subject, obligations: normalization_obligations1 } =\n+        selcx.infcx.at(&ObligationCause::dummy(), param_env).normalize(subject);\n \n     let predicates = selcx.tcx().predicates_of(impl_def_id);\n     let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n-    let InferOk { value: predicates, obligations: normalization_obligations2 } = selcx\n-        .infcx\n-        .partially_normalize_associated_types_in(ObligationCause::dummy(), param_env, predicates);\n+    let InferOk { value: predicates, obligations: normalization_obligations2 } =\n+        selcx.infcx.at(&ObligationCause::dummy(), param_env).normalize(predicates);\n     let impl_obligations =\n         super::predicates_for_generics(|_, _| ObligationCause::dummy(), param_env, predicates);\n "}, {"sha": "66ab742f15782ae6689314daebb663653635eb41", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -11,7 +11,7 @@ use rustc_trait_selection::traits::query::dropck_outlives::trivial_dropck_outliv\n use rustc_trait_selection::traits::query::dropck_outlives::{\n     DropckConstraint, DropckOutlivesResult,\n };\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n \n@@ -100,7 +100,7 @@ fn dropck_outlives<'tcx>(\n             // to push them onto the stack to be expanded.\n             for ty in constraints.dtorck_types.drain(..) {\n                 let Normalized { value: ty, obligations } =\n-                    ocx.infcx.at(&cause, param_env).normalize(ty)?;\n+                    ocx.infcx.at(&cause, param_env).query_normalize(ty)?;\n                 ocx.register_obligations(obligations);\n \n                 debug!(\"dropck_outlives: ty from dtorck_types = {:?}\", ty);"}, {"sha": "44fd8bfb31f231ab058a1b3a0a5ff120bf2e8564", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -2,7 +2,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable};\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n \n@@ -29,7 +29,7 @@ fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq +\n     let ParamEnvAnd { param_env, value } = goal;\n     let infcx = tcx.infer_ctxt().build();\n     let cause = ObligationCause::dummy();\n-    match infcx.at(&cause, param_env).normalize(value) {\n+    match infcx.at(&cause, param_env).query_normalize(value) {\n         Ok(Normalized { value: normalized_value, obligations: normalized_obligations }) => {\n             // We don't care about the `obligations`; they are\n             // always only region relations, and we are about to"}, {"sha": "7f964afde80fd1d4b90f925796562b86b0c2ff94", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::{ParamEnvAnd, Predicate, ToPredicate};\n use rustc_middle::ty::{UserSelfTy, UserSubsts};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::query::type_op::ascribe_user_type::AscribeUserType;\n use rustc_trait_selection::traits::query::type_op::eq::Eq;\n use rustc_trait_selection::traits::query::type_op::normalize::Normalize;\n@@ -62,7 +62,7 @@ pub fn type_op_ascribe_user_type_with_span<'tcx>(\n     let cause = ObligationCause::dummy_with_span(span);\n \n     let ty = tcx.bound_type_of(def_id).subst(tcx, substs);\n-    let ty = ocx.normalize(cause.clone(), param_env, ty);\n+    let ty = ocx.normalize(&cause, param_env, ty);\n     debug!(\"relate_type_and_user_type: ty of def-id is {:?}\", ty);\n \n     ocx.eq(&cause, param_env, mir_ty, ty)?;\n@@ -85,14 +85,14 @@ pub fn type_op_ascribe_user_type_with_span<'tcx>(\n             ObligationCauseCode::AscribeUserTypeProvePredicate(predicate_span),\n         );\n         let instantiated_predicate =\n-            ocx.normalize(cause.clone(), param_env, instantiated_predicate);\n+            ocx.normalize(&cause.clone(), param_env, instantiated_predicate);\n \n         ocx.register_obligation(Obligation::new(tcx, cause, param_env, instantiated_predicate));\n     }\n \n     if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n         let impl_self_ty = tcx.bound_type_of(impl_def_id).subst(tcx, substs);\n-        let impl_self_ty = ocx.normalize(cause.clone(), param_env, impl_self_ty);\n+        let impl_self_ty = ocx.normalize(&cause, param_env, impl_self_ty);\n \n         ocx.eq(&cause, param_env, self_ty, impl_self_ty)?;\n \n@@ -137,7 +137,7 @@ where\n {\n     let (param_env, Normalize { value }) = key.into_parts();\n     let Normalized { value, obligations } =\n-        ocx.infcx.at(&ObligationCause::dummy(), param_env).normalize(value)?;\n+        ocx.infcx.at(&ObligationCause::dummy(), param_env).query_normalize(value)?;\n     ocx.register_obligations(obligations);\n     Ok(value)\n }"}, {"sha": "b18788a033fb68e6625ed00779c23f7feb591749", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -1581,14 +1581,14 @@ fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>>\n     }\n \n     use crate::rustc_trait_selection::infer::TyCtxtInferExt;\n-    use crate::rustc_trait_selection::traits::query::normalize::AtExt;\n+    use crate::rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n     use rustc_middle::traits::ObligationCause;\n \n     // Try to normalize `<X as Y>::T` to a type\n     let infcx = cx.tcx.infer_ctxt().build();\n     let normalized = infcx\n         .at(&ObligationCause::dummy(), cx.param_env)\n-        .normalize(ty)\n+        .query_normalize(ty)\n         .map(|resolved| infcx.resolve_vars_if_possible(resolved.value));\n     match normalized {\n         Ok(normalized_value) => {"}, {"sha": "2ceda3511fe44642b1a822dcddd5eb8857e8da2b", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24606deaf48e56f604a6125fa11fb9f70cf4f1f4/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=24606deaf48e56f604a6125fa11fb9f70cf4f1f4", "patch": "@@ -22,7 +22,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Size, VariantIdx};\n use rustc_trait_selection::infer::InferCtxtExt;\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use std::iter;\n \n use crate::{match_def_path, path_res, paths};\n@@ -283,7 +283,7 @@ fn is_normalizable_helper<'tcx>(\n     cache.insert(ty, false);\n     let infcx = cx.tcx.infer_ctxt().build();\n     let cause = rustc_middle::traits::ObligationCause::dummy();\n-    let result = if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n+    let result = if infcx.at(&cause, param_env).query_normalize(ty).is_ok() {\n         match ty.kind() {\n             ty::Adt(def, substs) => def.variants().iter().all(|variant| {\n                 variant"}]}