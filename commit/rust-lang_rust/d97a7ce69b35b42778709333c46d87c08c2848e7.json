{"sha": "d97a7ce69b35b42778709333c46d87c08c2848e7", "node_id": "C_kwDOAAsO6NoAKGQ5N2E3Y2U2OWIzNWI0Mjc3ODcwOTMzM2M0NmQ4N2MwOGMyODQ4ZTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-07T15:20:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-08T14:40:38Z"}, "message": "Refactor tracking of writes.", "tree": {"sha": "d30ec481ccd0630ee4b3ce08e0ae59da643257d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d30ec481ccd0630ee4b3ce08e0ae59da643257d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97a7ce69b35b42778709333c46d87c08c2848e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97a7ce69b35b42778709333c46d87c08c2848e7", "html_url": "https://github.com/rust-lang/rust/commit/d97a7ce69b35b42778709333c46d87c08c2848e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97a7ce69b35b42778709333c46d87c08c2848e7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9928d0e566bebe5ffca533ef332a18375a70b83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9928d0e566bebe5ffca533ef332a18375a70b83f", "html_url": "https://github.com/rust-lang/rust/commit/9928d0e566bebe5ffca533ef332a18375a70b83f"}], "stats": {"total": 130, "additions": 58, "deletions": 72}, "files": [{"sha": "cf5eb697b24b9ecf726c3c63d428f86a20fb6f63", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 34, "deletions": 48, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d97a7ce69b35b42778709333c46d87c08c2848e7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a7ce69b35b42778709333c46d87c08c2848e7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=d97a7ce69b35b42778709333c46d87c08c2848e7", "patch": "@@ -4,7 +4,6 @@\n use either::Right;\n \n use rustc_const_eval::const_eval::CheckAlignment;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n@@ -152,24 +151,12 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n pub struct ConstPropMachine<'mir, 'tcx> {\n     /// The virtual call stack.\n     stack: Vec<Frame<'mir, 'tcx>>,\n-    /// `OnlyInsideOwnBlock` locals that were written in the current block get erased at the end.\n-    pub written_only_inside_own_block_locals: FxHashSet<Local>,\n-    /// Locals that need to be cleared after every block terminates.\n-    pub only_propagate_inside_block_locals: BitSet<Local>,\n     pub can_const_prop: IndexVec<Local, ConstPropMode>,\n }\n \n impl ConstPropMachine<'_, '_> {\n-    pub fn new(\n-        only_propagate_inside_block_locals: BitSet<Local>,\n-        can_const_prop: IndexVec<Local, ConstPropMode>,\n-    ) -> Self {\n-        Self {\n-            stack: Vec::new(),\n-            written_only_inside_own_block_locals: Default::default(),\n-            only_propagate_inside_block_locals,\n-            can_const_prop,\n-        }\n+    pub fn new(can_const_prop: IndexVec<Local, ConstPropMode>) -> Self {\n+        Self { stack: Vec::new(), can_const_prop }\n     }\n }\n \n@@ -255,16 +242,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         frame: usize,\n         local: Local,\n     ) -> InterpResult<'tcx, &'a mut interpret::Operand<Self::Provenance>> {\n-        if ecx.machine.can_const_prop[local] == ConstPropMode::NoPropagation {\n-            throw_machine_stop_str!(\"tried to write to a local that is marked as not propagatable\")\n-        }\n-        if frame == 0 && ecx.machine.only_propagate_inside_block_locals.contains(local) {\n-            trace!(\n-                \"mutating local {:?} which is restricted to its block. \\\n-                Will remove it from const-prop after block is finished.\",\n-                local\n-            );\n-            ecx.machine.written_only_inside_own_block_locals.insert(local);\n+        assert_eq!(frame, 0);\n+        match ecx.machine.can_const_prop[local] {\n+            ConstPropMode::NoPropagation => {\n+                throw_machine_stop_str!(\n+                    \"tried to write to a local that is marked as not propagatable\"\n+                )\n+            }\n+            ConstPropMode::OnlyInsideOwnBlock | ConstPropMode::FullConstProp => {}\n         }\n         ecx.machine.stack[frame].locals[local].access_mut()\n     }\n@@ -369,17 +354,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n         let can_const_prop = CanConstProp::check(tcx, param_env, body);\n-        let mut only_propagate_inside_block_locals = BitSet::new_empty(can_const_prop.len());\n-        for (l, mode) in can_const_prop.iter_enumerated() {\n-            if *mode == ConstPropMode::OnlyInsideOwnBlock {\n-                only_propagate_inside_block_locals.insert(l);\n-            }\n-        }\n         let mut ecx = InterpCx::new(\n             tcx,\n             tcx.def_span(def_id),\n             param_env,\n-            ConstPropMachine::new(only_propagate_inside_block_locals, can_const_prop),\n+            ConstPropMachine::new(can_const_prop),\n         );\n \n         let ret_layout = ecx\n@@ -977,26 +956,33 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         self.super_basic_block_data(block, data);\n \n+        let ensure_not_propagated = |this: &mut Self, local: Local| {\n+            if cfg!(debug_assertions) {\n+                assert!(\n+                    this.get_const(local.into()).is_none()\n+                        || this\n+                            .layout_of(this.local_decls[local].ty)\n+                            .map_or(true, |layout| layout.is_zst()),\n+                    \"failed to remove values for `{local:?}`, value={:?}\",\n+                    this.get_const(local.into()),\n+                )\n+            }\n+        };\n+\n         // We remove all Locals which are restricted in propagation to their containing blocks and\n         // which were modified in the current block.\n         // Take it out of the ecx so we can get a mutable reference to the ecx for `remove_const`.\n-        let mut locals = std::mem::take(&mut self.ecx.machine.written_only_inside_own_block_locals);\n-        for &local in locals.iter() {\n-            Self::remove_const(&mut self.ecx, local);\n-        }\n-        locals.clear();\n-        // Put it back so we reuse the heap of the storage\n-        self.ecx.machine.written_only_inside_own_block_locals = locals;\n-        if cfg!(debug_assertions) {\n-            // Ensure we are correctly erasing locals with the non-debug-assert logic.\n-            for local in self.ecx.machine.only_propagate_inside_block_locals.iter() {\n-                assert!(\n-                    self.get_const(local.into()).is_none()\n-                        || self\n-                            .layout_of(self.local_decls[local].ty)\n-                            .map_or(true, |layout| layout.is_zst())\n-                )\n+        let can_const_prop = std::mem::take(&mut self.ecx.machine.can_const_prop);\n+        for (local, &mode) in can_const_prop.iter_enumerated() {\n+            match mode {\n+                ConstPropMode::FullConstProp => {}\n+                ConstPropMode::NoPropagation => ensure_not_propagated(self, local),\n+                ConstPropMode::OnlyInsideOwnBlock => {\n+                    Self::remove_const(&mut self.ecx, local);\n+                    ensure_not_propagated(self, local);\n+                }\n             }\n         }\n+        self.ecx.machine.can_const_prop = can_const_prop;\n     }\n }"}, {"sha": "52c86fae7b49e736342fdf44f10a1f5d16a74112", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d97a7ce69b35b42778709333c46d87c08c2848e7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97a7ce69b35b42778709333c46d87c08c2848e7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=d97a7ce69b35b42778709333c46d87c08c2848e7", "patch": "@@ -9,7 +9,6 @@ use rustc_const_eval::interpret::{\n };\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n-use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n@@ -179,17 +178,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n         let can_const_prop = CanConstProp::check(tcx, param_env, body);\n-        let mut only_propagate_inside_block_locals = BitSet::new_empty(can_const_prop.len());\n-        for (l, mode) in can_const_prop.iter_enumerated() {\n-            if *mode == ConstPropMode::OnlyInsideOwnBlock {\n-                only_propagate_inside_block_locals.insert(l);\n-            }\n-        }\n         let mut ecx = InterpCx::new(\n             tcx,\n             tcx.def_span(def_id),\n             param_env,\n-            ConstPropMachine::new(only_propagate_inside_block_locals, can_const_prop),\n+            ConstPropMachine::new(can_const_prop),\n         );\n \n         let ret_layout = ecx\n@@ -687,26 +680,33 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &BasicBlockData<'tcx>) {\n         self.super_basic_block_data(block, data);\n \n+        let ensure_not_propagated = |this: &mut Self, local: Local| {\n+            if cfg!(debug_assertions) {\n+                assert!(\n+                    this.get_const(local.into()).is_none()\n+                        || this\n+                            .layout_of(this.local_decls[local].ty)\n+                            .map_or(true, |layout| layout.is_zst()),\n+                    \"failed to remove values for `{local:?}`, value={:?}\",\n+                    this.get_const(local.into()),\n+                )\n+            }\n+        };\n+\n         // We remove all Locals which are restricted in propagation to their containing blocks and\n         // which were modified in the current block.\n         // Take it out of the ecx so we can get a mutable reference to the ecx for `remove_const`.\n-        let mut locals = std::mem::take(&mut self.ecx.machine.written_only_inside_own_block_locals);\n-        for &local in locals.iter() {\n-            Self::remove_const(&mut self.ecx, local);\n-        }\n-        locals.clear();\n-        // Put it back so we reuse the heap of the storage\n-        self.ecx.machine.written_only_inside_own_block_locals = locals;\n-        if cfg!(debug_assertions) {\n-            // Ensure we are correctly erasing locals with the non-debug-assert logic.\n-            for local in self.ecx.machine.only_propagate_inside_block_locals.iter() {\n-                assert!(\n-                    self.get_const(local.into()).is_none()\n-                        || self\n-                            .layout_of(self.local_decls[local].ty)\n-                            .map_or(true, |layout| layout.is_zst())\n-                )\n+        let can_const_prop = std::mem::take(&mut self.ecx.machine.can_const_prop);\n+        for (local, &mode) in can_const_prop.iter_enumerated() {\n+            match mode {\n+                ConstPropMode::FullConstProp => {}\n+                ConstPropMode::NoPropagation => ensure_not_propagated(self, local),\n+                ConstPropMode::OnlyInsideOwnBlock => {\n+                    Self::remove_const(&mut self.ecx, local);\n+                    ensure_not_propagated(self, local);\n+                }\n             }\n         }\n+        self.ecx.machine.can_const_prop = can_const_prop;\n     }\n }"}]}