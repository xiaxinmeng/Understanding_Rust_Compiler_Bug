{"sha": "55c040e52964e4ad81b4b2af3c91068a80b92f11", "node_id": "C_kwDOAAsO6NoAKDU1YzA0MGU1Mjk2NGU0YWQ4MWI0YjJhZjNjOTEwNjhhODBiOTJmMTE", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-14T23:19:28Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-14T23:27:04Z"}, "message": "Make it possible to run bootstrap on a different machine than the one it was built\n\n- Default to trying git rev-parse for the root directory\n\n  CARGO_MANIFEST_DIR is a path on the build machine, not the running machine.\n  Don't require this to succeed, to allow building from a tarball; in that case fall back to CARGO_MANIFEST_DIR.\n\n- Set `initial_rustc` to a path based on the path of the running executable, not CARGO_MANIFEST_DIR.\n\n  We only reset `initial_rustc` if we're sure this isn't the working tree bootstrap was originally built in,\n  since I'm paranoid that setting this in other cases will cause things to break;\n  it's not clear to me when $RUSTC differs from `build/$TARGET/stage0/bin/rustc` (maybe never? but better to be sure).\n\n  Instead, only set this when\n  a) We are not using a custom rustc. If someone has specified a custom rustc we should respect their wishes.\n  b) We are in a checkout of rust-lang/rust other than the one bootstrap was built in.", "tree": {"sha": "9e5a712c17665309287d6d387203af6517e53724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e5a712c17665309287d6d387203af6517e53724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c040e52964e4ad81b4b2af3c91068a80b92f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c040e52964e4ad81b4b2af3c91068a80b92f11", "html_url": "https://github.com/rust-lang/rust/commit/55c040e52964e4ad81b4b2af3c91068a80b92f11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c040e52964e4ad81b4b2af3c91068a80b92f11/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63f6289db2d90be05acdf615f8039383c52c4ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f6289db2d90be05acdf615f8039383c52c4ddc", "html_url": "https://github.com/rust-lang/rust/commit/63f6289db2d90be05acdf615f8039383c52c4ddc"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "b8e776485e6733071112d629e3ddd1eb27f583f5", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/55c040e52964e4ad81b4b2af3c91068a80b92f11/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c040e52964e4ad81b4b2af3c91068a80b92f11/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=55c040e52964e4ad81b4b2af3c91068a80b92f11", "patch": "@@ -772,21 +772,20 @@ impl Config {\n \n         // set by build.rs\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n+\n         let manifest_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n         // Undo `src/bootstrap`\n         config.src = manifest_dir.parent().unwrap().parent().unwrap().to_owned();\n         config.out = PathBuf::from(\"build\");\n \n-        config.initial_cargo = PathBuf::from(env!(\"CARGO\"));\n-        config.initial_rustc = PathBuf::from(env!(\"RUSTC\"));\n-\n         config\n     }\n \n     pub fn parse(args: &[String]) -> Config {\n         let flags = Flags::parse(&args);\n-\n         let mut config = Config::default_opts();\n+\n+        // Set flags.\n         config.exclude = flags.exclude.into_iter().map(|path| TaskPath::parse(path)).collect();\n         config.include_default_paths = flags.include_default_paths;\n         config.rustc_error_format = flags.rustc_error_format;\n@@ -805,7 +804,41 @@ impl Config {\n         config.llvm_profile_use = flags.llvm_profile_use;\n         config.llvm_profile_generate = flags.llvm_profile_generate;\n \n+        // Infer the rest of the configuration.\n+\n+        // Infer the source directory. This is non-trivial because we want to support a downloaded bootstrap binary,\n+        // running on a completely machine from where it was compiled.\n+        let mut cmd = Command::new(\"git\");\n+        // NOTE: we cannot support running from outside the repository because the only path we have available\n+        // is set at compile time, which can be wrong if bootstrap was downloaded from source.\n+        // We still support running outside the repository if we find we aren't in a git directory.\n+        cmd.arg(\"rev-parse\").arg(\"--show-toplevel\");\n+        // Discard stderr because we expect this to fail when building from a tarball.\n+        let output = cmd\n+            .stderr(std::process::Stdio::null())\n+            .output()\n+            .ok()\n+            .and_then(|output| if output.status.success() { Some(output) } else { None });\n+        if let Some(output) = output {\n+            let git_root = String::from_utf8(output.stdout).unwrap();\n+            config.src = PathBuf::from(git_root.trim().to_owned())\n+        } else {\n+            // We're building from a tarball, not git sources.\n+            // We don't support pre-downloaded bootstrap in this case.\n+        }\n+\n+        if cfg!(test) {\n+            // Use the build directory of the original x.py invocation, so that we can set `initial_rustc` properly.\n+            config.out = Path::new(\n+                &env::var_os(\"CARGO_TARGET_DIR\").expect(\"cargo test directly is not supported\"),\n+            )\n+            .parent()\n+            .unwrap()\n+            .to_path_buf();\n+        }\n+\n         let stage0_json = t!(std::fs::read(&config.src.join(\"src\").join(\"stage0.json\")));\n+\n         config.stage0_metadata = t!(serde_json::from_slice::<Stage0Metadata>(&stage0_json));\n \n         #[cfg(test)]\n@@ -860,6 +893,7 @@ impl Config {\n         config.config = toml_path;\n \n         let build = toml.build.unwrap_or_default();\n+        let has_custom_rustc = build.rustc.is_some();\n \n         set(&mut config.initial_rustc, build.rustc.map(PathBuf::from));\n         set(&mut config.out, flags.build_dir.or_else(|| build.build_dir.map(PathBuf::from)));\n@@ -870,6 +904,12 @@ impl Config {\n             config.out = crate::util::absolute(&config.out);\n         }\n \n+        if !has_custom_rustc && !config.initial_rustc.starts_with(&config.out) {\n+            config.initial_rustc = config.out.join(config.build.triple).join(\"stage0/bin/rustc\");\n+            config.initial_cargo = config.out.join(config.build.triple).join(\"stage0/bin/cargo\");\n+        }\n+\n+        // NOTE: it's important this comes *after* we set `initial_rustc` just above.\n         if config.dry_run {\n             let dir = config.out.join(\"tmp-dry-run\");\n             t!(fs::create_dir_all(&dir));"}]}