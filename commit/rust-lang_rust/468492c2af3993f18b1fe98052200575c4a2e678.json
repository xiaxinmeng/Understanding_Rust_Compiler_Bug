{"sha": "468492c2af3993f18b1fe98052200575c4a2e678", "node_id": "C_kwDOAAsO6NoAKDQ2ODQ5MmMyYWYzOTkzZjE4YjFmZTk4MDUyMjAwNTc1YzRhMmU2Nzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-03T06:09:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-03T06:09:57Z"}, "message": "Auto merge of #96663 - JohnTitor:rollup-lthuzdq, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #93097 (Switch settings menu to full js)\n - #96587 (Refactor the WriteBackendMethods and ExtraBackendMethods traits)\n - #96589 (Use source callsite in check_argument_types suggestion)\n - #96599 (Update `RValue::Discriminant` documentation)\n - #96614 (Add a regression test for #92305)\n - #96629 (Fix invalid keyword order for function declarations)\n - #96641 (Use a yes/no enum instead of a bool.)\n - #96646 (Mitigate impact of subtle invalid call suggestion logic)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "516b0e6b05e4865256f52689338f5cd43dd14ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516b0e6b05e4865256f52689338f5cd43dd14ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/468492c2af3993f18b1fe98052200575c4a2e678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/468492c2af3993f18b1fe98052200575c4a2e678", "html_url": "https://github.com/rust-lang/rust/commit/468492c2af3993f18b1fe98052200575c4a2e678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/468492c2af3993f18b1fe98052200575c4a2e678/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c110cfa161aab391bd37c16a95b8330bfc7e54ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c110cfa161aab391bd37c16a95b8330bfc7e54ce", "html_url": "https://github.com/rust-lang/rust/commit/c110cfa161aab391bd37c16a95b8330bfc7e54ce"}, {"sha": "279d80127a01eae0174ca92e695a926284ea9e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/279d80127a01eae0174ca92e695a926284ea9e1a", "html_url": "https://github.com/rust-lang/rust/commit/279d80127a01eae0174ca92e695a926284ea9e1a"}], "stats": {"total": 1044, "additions": 707, "deletions": 337}, "files": [{"sha": "58996a9db78ad4e0dfbd315ea85af833e7137413", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -139,14 +139,12 @@ impl CodegenBackend for GccCodegenBackend {\n }\n \n impl ExtraBackendMethods for GccCodegenBackend {\n-    fn new_metadata<'tcx>(&self, _tcx: TyCtxt<'tcx>, _mod_name: &str) -> Self::Module {\n-        GccContext {\n+    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) -> Self::Module {\n+        let mut mods = GccContext {\n             context: Context::default(),\n-        }\n-    }\n-\n-    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, mods: &mut Self::Module, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) {\n-        unsafe { allocator::codegen(tcx, mods, module_name, kind, has_alloc_error_handler) }\n+        };\n+        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, has_alloc_error_handler); }\n+        mods\n     }\n \n     fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: Symbol) -> (ModuleCodegen<Self::Module>, u64) {\n@@ -213,7 +211,7 @@ impl WriteBackendMethods for GccCodegenBackend {\n                     unimplemented!();\n                 }\n             };\n-        Ok(LtoModuleCodegen::Fat { module: Some(module), _serialized_bitcode: vec![] })\n+        Ok(LtoModuleCodegen::Fat { module, _serialized_bitcode: vec![] })\n     }\n \n     fn run_thin_lto(_cgcx: &CodegenContext<Self>, _modules: Vec<(String, Self::ThinBuffer)>, _cached_modules: Vec<(SerializedModule<Self::ModuleBuffer>, WorkProduct)>) -> Result<(Vec<LtoModuleCodegen<Self>>, Vec<WorkProduct>), FatalError> {\n@@ -229,7 +227,12 @@ impl WriteBackendMethods for GccCodegenBackend {\n         Ok(())\n     }\n \n-    unsafe fn optimize_thin(_cgcx: &CodegenContext<Self>, _thin: &mut ThinModule<Self>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n+    fn optimize_fat(_cgcx: &CodegenContext<Self>, _module: &mut ModuleCodegen<Self::Module>) -> Result<(), FatalError> {\n+        // TODO(antoyo)\n+        Ok(())\n+    }\n+\n+    unsafe fn optimize_thin(_cgcx: &CodegenContext<Self>, _thin: ThinModule<Self>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n         unimplemented!();\n     }\n \n@@ -245,11 +248,6 @@ impl WriteBackendMethods for GccCodegenBackend {\n         unimplemented!();\n     }\n \n-    fn run_lto_pass_manager(_cgcx: &CodegenContext<Self>, _module: &ModuleCodegen<Self::Module>, _config: &ModuleConfig, _thin: bool) -> Result<(), FatalError> {\n-        // TODO(antoyo)\n-        Ok(())\n-    }\n-\n     fn run_link(cgcx: &CodegenContext<Self>, diag_handler: &Handler, modules: Vec<ModuleCodegen<Self::Module>>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n         back::write::link(cgcx, diag_handler, modules)\n     }"}, {"sha": "b5b2a27d2378da7bd7271d263739726253aa7cc4", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -6,9 +6,7 @@ use crate::llvm::{self, build_string, False, True};\n use crate::{llvm_util, LlvmCodegenBackend, ModuleLlvm};\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule, ThinShared};\n use rustc_codegen_ssa::back::symbol_export;\n-use rustc_codegen_ssa::back::write::{\n-    CodegenContext, FatLTOInput, ModuleConfig, TargetMachineFactoryConfig,\n-};\n+use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, TargetMachineFactoryConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{looks_like_rust_object_file, ModuleCodegen, ModuleKind};\n use rustc_data_structures::fx::FxHashMap;\n@@ -353,7 +351,7 @@ fn fat_lto(\n         }\n     }\n \n-    Ok(LtoModuleCodegen::Fat { module: Some(module), _serialized_bitcode: serialized_bitcode })\n+    Ok(LtoModuleCodegen::Fat { module, _serialized_bitcode: serialized_bitcode })\n }\n \n crate struct Linker<'a>(&'a mut llvm::Linker<'a>);\n@@ -578,11 +576,11 @@ fn thin_lto(\n pub(crate) fn run_pass_manager(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n     diag_handler: &Handler,\n-    module: &ModuleCodegen<ModuleLlvm>,\n-    config: &ModuleConfig,\n+    module: &mut ModuleCodegen<ModuleLlvm>,\n     thin: bool,\n ) -> Result<(), FatalError> {\n     let _timer = cgcx.prof.extra_verbose_generic_activity(\"LLVM_lto_optimize\", &*module.name);\n+    let config = cgcx.config(module.kind);\n \n     // Now we have one massive module inside of llmod. Time to run the\n     // LTO-specific optimization passes that LLVM provides.\n@@ -726,7 +724,7 @@ impl Drop for ThinBuffer {\n }\n \n pub unsafe fn optimize_thin_module(\n-    thin_module: &mut ThinModule<LlvmCodegenBackend>,\n+    thin_module: ThinModule<LlvmCodegenBackend>,\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n ) -> Result<ModuleCodegen<ModuleLlvm>, FatalError> {\n     let diag_handler = cgcx.create_diag_handler();\n@@ -743,7 +741,7 @@ pub unsafe fn optimize_thin_module(\n     // that LLVM Context and Module.\n     let llcx = llvm::LLVMRustContextCreate(cgcx.fewer_names);\n     let llmod_raw = parse_module(llcx, module_name, thin_module.data(), &diag_handler)? as *const _;\n-    let module = ModuleCodegen {\n+    let mut module = ModuleCodegen {\n         module_llvm: ModuleLlvm { llmod_raw, llcx, tm },\n         name: thin_module.name().to_string(),\n         kind: ModuleKind::Regular,\n@@ -859,8 +857,7 @@ pub unsafe fn optimize_thin_module(\n         // little differently.\n         {\n             info!(\"running thin lto passes over {}\", module.name);\n-            let config = cgcx.config(module.kind);\n-            run_pass_manager(cgcx, &diag_handler, &module, config, true)?;\n+            run_pass_manager(cgcx, &diag_handler, &mut module, true)?;\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-pm\");\n         }\n     }"}, {"sha": "b0359239569549b460d26dadca79c0e0396a65c2", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -104,19 +104,18 @@ impl Drop for TimeTraceProfiler {\n }\n \n impl ExtraBackendMethods for LlvmCodegenBackend {\n-    fn new_metadata(&self, tcx: TyCtxt<'_>, mod_name: &str) -> ModuleLlvm {\n-        ModuleLlvm::new_metadata(tcx, mod_name)\n-    }\n-\n     fn codegen_allocator<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        module_llvm: &mut ModuleLlvm,\n         module_name: &str,\n         kind: AllocatorKind,\n         has_alloc_error_handler: bool,\n-    ) {\n-        unsafe { allocator::codegen(tcx, module_llvm, module_name, kind, has_alloc_error_handler) }\n+    ) -> ModuleLlvm {\n+        let mut module_llvm = ModuleLlvm::new_metadata(tcx, module_name);\n+        unsafe {\n+            allocator::codegen(tcx, &mut module_llvm, module_name, kind, has_alloc_error_handler);\n+        }\n+        module_llvm\n     }\n     fn compile_codegen_unit(\n         &self,\n@@ -210,9 +209,16 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n     ) -> Result<(), FatalError> {\n         back::write::optimize(cgcx, diag_handler, module, config)\n     }\n+    fn optimize_fat(\n+        cgcx: &CodegenContext<Self>,\n+        module: &mut ModuleCodegen<Self::Module>,\n+    ) -> Result<(), FatalError> {\n+        let diag_handler = cgcx.create_diag_handler();\n+        back::lto::run_pass_manager(cgcx, &diag_handler, module, false)\n+    }\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,\n-        thin: &mut ThinModule<Self>,\n+        thin: ThinModule<Self>,\n     ) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n         back::lto::optimize_thin_module(thin, cgcx)\n     }\n@@ -230,15 +236,6 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n     fn serialize_module(module: ModuleCodegen<Self::Module>) -> (String, Self::ModuleBuffer) {\n         (module.name, back::lto::ModuleBuffer::new(module.module_llvm.llmod()))\n     }\n-    fn run_lto_pass_manager(\n-        cgcx: &CodegenContext<Self>,\n-        module: &ModuleCodegen<Self::Module>,\n-        config: &ModuleConfig,\n-        thin: bool,\n-    ) -> Result<(), FatalError> {\n-        let diag_handler = cgcx.create_diag_handler();\n-        back::lto::run_pass_manager(cgcx, &diag_handler, module, config, thin)\n-    }\n }\n \n unsafe impl Send for LlvmCodegenBackend {} // Llvm is on a per-thread basis"}, {"sha": "cb6244050df24a61601af1f26eb80ae6d595279f", "filename": "compiler/rustc_codegen_ssa/src/back/lto.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -42,7 +42,7 @@ pub struct ThinShared<B: WriteBackendMethods> {\n \n pub enum LtoModuleCodegen<B: WriteBackendMethods> {\n     Fat {\n-        module: Option<ModuleCodegen<B::Module>>,\n+        module: ModuleCodegen<B::Module>,\n         _serialized_bitcode: Vec<SerializedModule<B::ModuleBuffer>>,\n     },\n \n@@ -64,19 +64,15 @@ impl<B: WriteBackendMethods> LtoModuleCodegen<B> {\n     /// It's intended that the module returned is immediately code generated and\n     /// dropped, and then this LTO module is dropped.\n     pub unsafe fn optimize(\n-        &mut self,\n+        self,\n         cgcx: &CodegenContext<B>,\n     ) -> Result<ModuleCodegen<B::Module>, FatalError> {\n-        match *self {\n-            LtoModuleCodegen::Fat { ref mut module, .. } => {\n-                let module = module.take().unwrap();\n-                {\n-                    let config = cgcx.config(module.kind);\n-                    B::run_lto_pass_manager(cgcx, &module, config, false)?;\n-                }\n+        match self {\n+            LtoModuleCodegen::Fat { mut module, .. } => {\n+                B::optimize_fat(cgcx, &mut module)?;\n                 Ok(module)\n             }\n-            LtoModuleCodegen::Thin(ref mut thin) => B::optimize_thin(cgcx, thin),\n+            LtoModuleCodegen::Thin(thin) => B::optimize_thin(cgcx, thin),\n         }\n     }\n "}, {"sha": "88293dec01cac7051acb1990000a578b13ba45a6", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -889,7 +889,7 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n \n fn execute_lto_work_item<B: ExtraBackendMethods>(\n     cgcx: &CodegenContext<B>,\n-    mut module: lto::LtoModuleCodegen<B>,\n+    module: lto::LtoModuleCodegen<B>,\n     module_config: &ModuleConfig,\n ) -> Result<WorkItemResult<B>, FatalError> {\n     let module = unsafe { module.optimize(cgcx)? };"}, {"sha": "5bc95614c197c32b2a4a48b3110cce816ad72e00", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -575,15 +575,8 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     } else if let Some(kind) = tcx.allocator_kind(()) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n-        let mut module_llvm = backend.new_metadata(tcx, &llmod_id);\n-        tcx.sess.time(\"write_allocator_module\", || {\n-            backend.codegen_allocator(\n-                tcx,\n-                &mut module_llvm,\n-                &llmod_id,\n-                kind,\n-                tcx.lang_items().oom().is_some(),\n-            )\n+        let module_llvm = tcx.sess.time(\"write_allocator_module\", || {\n+            backend.codegen_allocator(tcx, &llmod_id, kind, tcx.lang_items().oom().is_some())\n         });\n \n         Some(ModuleCodegen { name: llmod_id, module_llvm, kind: ModuleKind::Allocator })"}, {"sha": "1e53c73d1bb4ac5b4fe5b0a04de7c4b5f66050ab", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -114,15 +114,13 @@ pub trait CodegenBackend {\n }\n \n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send + Sync {\n-    fn new_metadata(&self, sess: TyCtxt<'_>, mod_name: &str) -> Self::Module;\n     fn codegen_allocator<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        module_llvm: &mut Self::Module,\n         module_name: &str,\n         kind: AllocatorKind,\n         has_alloc_error_handler: bool,\n-    );\n+    ) -> Self::Module;\n     /// This generates the codegen unit and returns it along with\n     /// a `u64` giving an estimate of the unit's processing cost.\n     fn compile_codegen_unit("}, {"sha": "e54ec34f1ce3716c38aec565c47951a3444c0244", "filename": "compiler/rustc_codegen_ssa/src/traits/write.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -41,9 +41,13 @@ pub trait WriteBackendMethods: 'static + Sized + Clone {\n         module: &ModuleCodegen<Self::Module>,\n         config: &ModuleConfig,\n     ) -> Result<(), FatalError>;\n+    fn optimize_fat(\n+        cgcx: &CodegenContext<Self>,\n+        llmod: &mut ModuleCodegen<Self::Module>,\n+    ) -> Result<(), FatalError>;\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,\n-        thin: &mut ThinModule<Self>,\n+        thin: ThinModule<Self>,\n     ) -> Result<ModuleCodegen<Self::Module>, FatalError>;\n     unsafe fn codegen(\n         cgcx: &CodegenContext<Self>,\n@@ -53,12 +57,6 @@ pub trait WriteBackendMethods: 'static + Sized + Clone {\n     ) -> Result<CompiledModule, FatalError>;\n     fn prepare_thin(module: ModuleCodegen<Self::Module>) -> (String, Self::ThinBuffer);\n     fn serialize_module(module: ModuleCodegen<Self::Module>) -> (String, Self::ModuleBuffer);\n-    fn run_lto_pass_manager(\n-        cgcx: &CodegenContext<Self>,\n-        llmod: &ModuleCodegen<Self::Module>,\n-        config: &ModuleConfig,\n-        thin: bool,\n-    ) -> Result<(), FatalError>;\n }\n \n pub trait ThinBufferMethods: Send + Sync {"}, {"sha": "188ca8048055cae9cf1085b42cbe6e4081b40478", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -2561,16 +2561,12 @@ pub enum Rvalue<'tcx> {\n     UnaryOp(UnOp, Operand<'tcx>),\n \n     /// Computes the discriminant of the place, returning it as an integer of type\n-    /// [`discriminant_ty`].\n+    /// [`discriminant_ty`]. Returns zero for types without discriminant.\n     ///\n     /// The validity requirements for the underlying value are undecided for this rvalue, see\n     /// [#91095]. Note too that the value of the discriminant is not the same thing as the\n     /// variant index; use [`discriminant_for_variant`] to convert.\n     ///\n-    /// For types defined in the source code as enums, this is well behaved. This is also well\n-    /// formed for other types, but yields no particular value - there is no reason it couldn't be\n-    /// defined to yield eg zero though.\n-    ///\n     /// [`discriminant_ty`]: crate::ty::Ty::discriminant_ty\n     /// [#91095]: https://github.com/rust-lang/rust/issues/91095\n     /// [`discriminant_for_variant`]: crate::ty::Ty::discriminant_for_variant"}, {"sha": "77a03428c166417048563860acae63db2ed63820", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -1020,7 +1020,7 @@ impl<'a> Parser<'a> {\n                                 &format!(\"`{}` must come before `{}`\", invalid_qual, current_qual),\n                                 format!(\"{} {}\", invalid_qual, current_qual),\n                                 Applicability::MachineApplicable,\n-                            ).note(\"keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\");\n+                            ).note(\"keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\");\n                     }\n                 }\n                 Err(err)\n@@ -2086,7 +2086,7 @@ impl<'a> Parser<'a> {\n                                     &format!(\"`{misplaced_qual}` must come before `{current_qual}`\"),\n                                     format!(\"{misplaced_qual} {current_qual}\"),\n                                     Applicability::MachineApplicable,\n-                                ).note(\"keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\");\n+                                ).note(\"keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\");\n                         }\n                     }\n                     // Recover incorrect visibility order such as `async pub`"}, {"sha": "baaab33d71f50feff18adcdf53f8b340e97c9ac4", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -1179,7 +1179,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial || features.generic_const_exprs) {\n+                            if !(trivial == HasGenericParams::Yes || features.generic_const_exprs) {\n                                 // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n                                 // we can't easily tell if it's generic at this stage, so we instead remember\n                                 // this and then enforce the self type to be concrete later on.\n@@ -1267,7 +1267,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial || features.generic_const_exprs) {\n+                            if !(trivial == HasGenericParams::Yes || features.generic_const_exprs) {\n                                 if let Some(span) = finalize {\n                                     self.report_error(\n                                         span,"}, {"sha": "ab353128cbcced62dc7b0071de6a11845b58b3ac", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 48, "deletions": 26, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -94,6 +94,12 @@ crate enum HasGenericParams {\n     No,\n }\n \n+impl HasGenericParams {\n+    fn force_yes_if(self, b: bool) -> Self {\n+        if b { Self::Yes } else { self }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n crate enum ConstantItemKind {\n     Const,\n@@ -125,9 +131,9 @@ crate enum RibKind<'a> {\n \n     /// We're in a constant item. Can't refer to dynamic stuff.\n     ///\n-    /// The `bool` indicates if this constant may reference generic parameters\n-    /// and is used to only allow generic parameters to be used in trivial constant expressions.\n-    ConstantItemRibKind(bool, Option<(Ident, ConstantItemKind)>),\n+    /// The item may reference generic parameters in trivial constant expressions.\n+    /// All other constants aren't allowed to use generic params at all.\n+    ConstantItemRibKind(HasGenericParams, Option<(Ident, ConstantItemKind)>),\n \n     /// We passed through a module.\n     ModuleRibKind(Module<'a>),\n@@ -826,19 +832,24 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             // Note that we might not be inside of an repeat expression here,\n                             // but considering that `IsRepeatExpr` is only relevant for\n                             // non-trivial constants this is doesn't matter.\n-                            self.with_constant_rib(IsRepeatExpr::No, true, None, |this| {\n-                                this.smart_resolve_path(\n-                                    ty.id,\n-                                    qself.as_ref(),\n-                                    path,\n-                                    PathSource::Expr(None),\n-                                );\n-\n-                                if let Some(ref qself) = *qself {\n-                                    this.visit_ty(&qself.ty);\n-                                }\n-                                this.visit_path(path, ty.id);\n-                            });\n+                            self.with_constant_rib(\n+                                IsRepeatExpr::No,\n+                                HasGenericParams::Yes,\n+                                None,\n+                                |this| {\n+                                    this.smart_resolve_path(\n+                                        ty.id,\n+                                        qself.as_ref(),\n+                                        path,\n+                                        PathSource::Expr(None),\n+                                    );\n+\n+                                    if let Some(ref qself) = *qself {\n+                                        this.visit_ty(&qself.ty);\n+                                    }\n+                                    this.visit_path(path, ty.id);\n+                                },\n+                            );\n \n                             self.diagnostic_metadata.currently_processing_generics = prev;\n                             return;\n@@ -1684,7 +1695,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // not used as part of the type system, this is far less surprising.\n                                                     this.with_constant_rib(\n                                                         IsRepeatExpr::No,\n-                                                        true,\n+                                                        HasGenericParams::Yes,\n                                                         None,\n                                                         |this| this.visit_expr(expr),\n                                                     );\n@@ -1763,7 +1774,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         // so it doesn't matter whether this is a trivial constant.\n                         this.with_constant_rib(\n                             IsRepeatExpr::No,\n-                            true,\n+                            HasGenericParams::Yes,\n                             Some((item.ident, constant_item_kind)),\n                             |this| this.visit_expr(expr),\n                         );\n@@ -1909,20 +1920,23 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     // Note that we intentionally still forbid `[0; N + 1]` during\n     // name resolution so that we don't extend the future\n     // compat lint to new cases.\n+    #[instrument(level = \"debug\", skip(self, f))]\n     fn with_constant_rib(\n         &mut self,\n         is_repeat: IsRepeatExpr,\n-        is_trivial: bool,\n+        may_use_generics: HasGenericParams,\n         item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n-        debug!(\"with_constant_rib: is_repeat={:?} is_trivial={}\", is_repeat, is_trivial);\n-        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial, item), |this| {\n+        self.with_rib(ValueNS, ConstantItemRibKind(may_use_generics, item), |this| {\n             this.with_rib(\n                 TypeNS,\n-                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial, item),\n+                ConstantItemRibKind(\n+                    may_use_generics.force_yes_if(is_repeat == IsRepeatExpr::Yes),\n+                    item,\n+                ),\n                 |this| {\n-                    this.with_label_rib(ConstantItemRibKind(is_trivial, item), f);\n+                    this.with_label_rib(ConstantItemRibKind(may_use_generics, item), f);\n                 },\n             )\n         });\n@@ -2064,7 +2078,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                         // not used as part of the type system, this is far less surprising.\n                                                         this.with_constant_rib(\n                                                             IsRepeatExpr::No,\n-                                                            true,\n+                                                            HasGenericParams::Yes,\n                                                             None,\n                                                             |this| {\n                                                                 visit::walk_assoc_item(\n@@ -3077,7 +3091,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"resolve_anon_const {:?} is_repeat: {:?}\", constant, is_repeat);\n         self.with_constant_rib(\n             is_repeat,\n-            constant.value.is_potential_trivial_const_param(),\n+            if constant.value.is_potential_trivial_const_param() {\n+                HasGenericParams::Yes\n+            } else {\n+                HasGenericParams::No\n+            },\n             None,\n             |this| visit::walk_anon_const(this, constant),\n         );\n@@ -3180,7 +3198,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     if const_args.contains(&idx) {\n                         self.with_constant_rib(\n                             IsRepeatExpr::No,\n-                            argument.is_potential_trivial_const_param(),\n+                            if argument.is_potential_trivial_const_param() {\n+                                HasGenericParams::Yes\n+                            } else {\n+                                HasGenericParams::No\n+                            },\n                             None,\n                             |this| {\n                                 this.resolve_expr(argument, None);"}, {"sha": "75976ebdf2822b3c6fd8e0f1cccd1fd75c4ac920", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -429,9 +429,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             errors.drain_filter(|error| {\n                 let Error::Invalid(input_idx, Compatibility::Incompatible(error)) = error else { return false };\n                 let expected_ty = expected_input_tys[*input_idx];\n-                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                let Some(Some((provided_ty, _))) = final_arg_types.get(*input_idx) else { return false };\n                 let cause = &self.misc(provided_args[*input_idx].span);\n-                let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                let trace = TypeTrace::types(cause, true, expected_ty, *provided_ty);\n                 if let Some(e) = error {\n                     if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n                         self.report_and_explain_type_error(trace, e).emit();\n@@ -679,8 +679,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Error::Invalid(input_idx, compatibility) => {\n                         let expected_ty = expected_input_tys[input_idx];\n                         if let Compatibility::Incompatible(error) = &compatibility {\n-                            let provided_ty = final_arg_types[input_idx].map(|ty| ty.0).unwrap();\n-                            let cause = &self.misc(provided_args[input_idx].span);\n+                            let provided_ty = final_arg_types\n+                                .get(input_idx)\n+                                .and_then(|x| x.as_ref())\n+                                .map(|ty| ty.0)\n+                                .unwrap_or(tcx.ty_error());\n+                            let cause = &self.misc(\n+                                provided_args.get(input_idx).map(|i| i.span).unwrap_or(call_span),\n+                            );\n                             let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n                             if let Some(e) = error {\n                                 self.note_type_err(\n@@ -695,14 +701,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n \n-                        self.emit_coerce_suggestions(\n-                            &mut err,\n-                            &provided_args[input_idx],\n-                            final_arg_types[input_idx].map(|ty| ty.0).unwrap(),\n-                            final_arg_types[input_idx].map(|ty| ty.1).unwrap(),\n-                            None,\n-                            None,\n-                        );\n+                        if let Some(expr) = provided_args.get(input_idx) {\n+                            self.emit_coerce_suggestions(\n+                                &mut err,\n+                                &expr,\n+                                final_arg_types[input_idx].map(|ty| ty.0).unwrap(),\n+                                final_arg_types[input_idx].map(|ty| ty.1).unwrap(),\n+                                None,\n+                                None,\n+                            );\n+                        }\n                     }\n                     Error::Extra(arg_idx) => {\n                         let arg_type = if let Some((_, ty)) = final_arg_types[arg_idx] {\n@@ -980,7 +988,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 for (idx, arg) in matched_inputs.iter().enumerate() {\n                     let suggestion_text = if let Some(arg) = arg {\n-                        let arg_span = provided_args[*arg].span;\n+                        let arg_span = provided_args[*arg].span.source_callsite();\n                         let arg_text = source_map.span_to_snippet(arg_span).unwrap();\n                         arg_text\n                     } else {"}, {"sha": "56a085c2982508b3f50c988d5188f787413e0708", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -1440,6 +1440,10 @@ fn init_id_map() -> FxHashMap<Cow<'static, str>, usize> {\n     let mut map = FxHashMap::default();\n     // This is the list of IDs used in Javascript.\n     map.insert(\"help\".into(), 1);\n+    map.insert(\"settings\".into(), 1);\n+    map.insert(\"not-displayed\".into(), 1);\n+    map.insert(\"alternative-display\".into(), 1);\n+    map.insert(\"search\".into(), 1);\n     // This is the list of IDs used in HTML generated in Rust (including the ones\n     // used in tera template files).\n     map.insert(\"mainThemeStyle\".into(), 1);\n@@ -1449,7 +1453,6 @@ fn init_id_map() -> FxHashMap<Cow<'static, str>, usize> {\n     map.insert(\"settings-menu\".into(), 1);\n     map.insert(\"help-button\".into(), 1);\n     map.insert(\"main-content\".into(), 1);\n-    map.insert(\"search\".into(), 1);\n     map.insert(\"crate-search\".into(), 1);\n     map.insert(\"render-detail\".into(), 1);\n     map.insert(\"toggle-all-docs\".into(), 1);"}, {"sha": "a30c533aa48c8f04bfd64e9155e6bc368c2dc1e7", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -17,8 +17,8 @@ use super::print_item::{full_path, item_path, print_item};\n use super::search_index::build_index;\n use super::write_shared::write_shared;\n use super::{\n-    collect_spans_and_sources, print_sidebar, scrape_examples_help, settings, AllTypes,\n-    LinkFromSrc, NameDoc, StylePath, BASIC_KEYWORDS,\n+    collect_spans_and_sources, print_sidebar, scrape_examples_help, AllTypes, LinkFromSrc, NameDoc,\n+    StylePath, BASIC_KEYWORDS,\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n@@ -589,21 +589,18 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         page.root_path = \"./\";\n \n         let sidebar = \"<h2 class=\\\"location\\\">Settings</h2><div class=\\\"sidebar-elems\\\"></div>\";\n-        let theme_names: Vec<String> = self\n-            .shared\n-            .style_files\n-            .iter()\n-            .map(StylePath::basename)\n-            .collect::<Result<_, Error>>()?;\n         let v = layout::render(\n             &self.shared.layout,\n             &page,\n             sidebar,\n-            settings(\n-                self.shared.static_root_path.as_deref().unwrap_or(\"./\"),\n-                &self.shared.resource_suffix,\n-                theme_names,\n-            )?,\n+            |buf: &mut Buffer| {\n+                write!(\n+                    buf,\n+                    \"<script defer src=\\\"{}settings{}.js\\\"></script>\",\n+                    page.static_root_path.unwrap_or(\"\"),\n+                    page.resource_suffix\n+                )\n+            },\n             &self.shared.style_files,\n         );\n         self.shared.fs.write(settings_file, v)?;"}, {"sha": "fedeb449b2e0e9a39aa96eda57a8efa388e818da", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -334,134 +334,6 @@ impl AllTypes {\n     }\n }\n \n-#[derive(Debug)]\n-enum Setting {\n-    Section {\n-        description: &'static str,\n-        sub_settings: Vec<Setting>,\n-    },\n-    Toggle {\n-        js_data_name: &'static str,\n-        description: &'static str,\n-        default_value: bool,\n-    },\n-    Select {\n-        js_data_name: &'static str,\n-        description: &'static str,\n-        default_value: &'static str,\n-        options: Vec<String>,\n-    },\n-}\n-\n-impl Setting {\n-    fn display(&self, root_path: &str, suffix: &str) -> String {\n-        match *self {\n-            Setting::Section { description, ref sub_settings } => format!(\n-                \"<div class=\\\"setting-line\\\">\\\n-                     <div class=\\\"title\\\">{}</div>\\\n-                     <div class=\\\"sub-settings\\\">{}</div>\n-                 </div>\",\n-                description,\n-                sub_settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>()\n-            ),\n-            Setting::Toggle { js_data_name, description, default_value } => format!(\n-                \"<div class=\\\"setting-line\\\">\\\n-                     <label class=\\\"toggle\\\">\\\n-                     <input type=\\\"checkbox\\\" id=\\\"{}\\\" {}>\\\n-                     <span class=\\\"slider\\\"></span>\\\n-                     </label>\\\n-                     <div>{}</div>\\\n-                 </div>\",\n-                js_data_name,\n-                if default_value { \" checked\" } else { \"\" },\n-                description,\n-            ),\n-            Setting::Select { js_data_name, description, default_value, ref options } => format!(\n-                \"<div class=\\\"setting-line\\\"><div class=\\\"radio-line\\\" id=\\\"{}\\\"><span class=\\\"setting-name\\\">{}</span><div class=\\\"choices\\\">{}</div></div></div>\",\n-                js_data_name,\n-                description,\n-                options\n-                    .iter()\n-                    .map(|opt| format!(\n-                        \"<label for=\\\"{js_data_name}-{name}\\\" class=\\\"choice\\\">\n-                           <input type=\\\"radio\\\" name=\\\"{js_data_name}\\\" id=\\\"{js_data_name}-{name}\\\" value=\\\"{name}\\\" {checked}>\\\n-                           {name}\\\n-                         </label>\",\n-                        js_data_name = js_data_name,\n-                        name = opt,\n-                        checked = if opt == default_value { \"checked\" } else { \"\" },\n-                    ))\n-                    .collect::<String>(),\n-            ),\n-        }\n-    }\n-}\n-\n-impl From<(&'static str, &'static str, bool)> for Setting {\n-    fn from(values: (&'static str, &'static str, bool)) -> Setting {\n-        Setting::Toggle { js_data_name: values.0, description: values.1, default_value: values.2 }\n-    }\n-}\n-\n-impl<T: Into<Setting>> From<(&'static str, Vec<T>)> for Setting {\n-    fn from(values: (&'static str, Vec<T>)) -> Setting {\n-        Setting::Section {\n-            description: values.0,\n-            sub_settings: values.1.into_iter().map(|v| v.into()).collect::<Vec<_>>(),\n-        }\n-    }\n-}\n-\n-fn settings(root_path: &str, suffix: &str, theme_names: Vec<String>) -> Result<String, Error> {\n-    // (id, explanation, default value)\n-    let settings: &[Setting] = &[\n-        Setting::from((\"use-system-theme\", \"Use system theme\", true)),\n-        Setting::Select {\n-            js_data_name: \"theme\",\n-            description: \"Theme\",\n-            default_value: \"light\",\n-            options: theme_names.clone(),\n-        },\n-        Setting::Select {\n-            js_data_name: \"preferred-light-theme\",\n-            description: \"Preferred light theme\",\n-            default_value: \"light\",\n-            options: theme_names.clone(),\n-        },\n-        Setting::Select {\n-            js_data_name: \"preferred-dark-theme\",\n-            description: \"Preferred dark theme\",\n-            default_value: \"dark\",\n-            options: theme_names,\n-        },\n-        (\"auto-hide-large-items\", \"Auto-hide item contents for large items.\", true).into(),\n-        (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n-        (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", false)\n-            .into(),\n-        (\"go-to-only-result\", \"Directly go to item in search if there is only one result\", false)\n-            .into(),\n-        (\"line-numbers\", \"Show line numbers on code examples\", false).into(),\n-        (\"disable-shortcuts\", \"Disable keyboard shortcuts\", false).into(),\n-    ];\n-\n-    Ok(format!(\n-        \"<div class=\\\"main-heading\\\">\n-            <h1 class=\\\"fqn\\\">\\\n-                <span class=\\\"in-band\\\">Rustdoc settings</span>\\\n-            </h1>\\\n-            <span class=\\\"out-of-band\\\">\\\n-            <a id=\\\"back\\\" href=\\\"javascript:void(0)\\\">Back</a>\\\n-            </span>\\\n-        </div>\\\n-        <div class=\\\"settings\\\">{}</div>\\\n-        <link rel=\\\"stylesheet\\\" href=\\\"{root_path}settings{suffix}.css\\\">\\\n-        <script src=\\\"{root_path}settings{suffix}.js\\\"></script>\",\n-        settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>(),\n-        root_path = root_path,\n-        suffix = suffix\n-    ))\n-}\n-\n fn scrape_examples_help(shared: &SharedContext<'_>) -> String {\n     let mut content = SCRAPE_EXAMPLES_HELP_MD.to_owned();\n     content.push_str(&format!("}, {"sha": "f20061c65dd1b6f94cdfd37d2f371ef819ffaeb9", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 145, "deletions": 34, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -57,11 +57,20 @@ function resourcePath(basename, extension) {\n     return getVar(\"root-path\") + basename + getVar(\"resource-suffix\") + extension;\n }\n \n+function hideMain() {\n+    addClass(document.getElementById(MAIN_ID), \"hidden\");\n+}\n+\n+function showMain() {\n+    removeClass(document.getElementById(MAIN_ID), \"hidden\");\n+}\n+\n (function () {\n     window.rootPath = getVar(\"root-path\");\n     window.currentCrate = getVar(\"current-crate\");\n     window.searchJS =  resourcePath(\"search\", \".js\");\n     window.searchIndexJS = resourcePath(\"search-index\", \".js\");\n+    window.settingsJS = resourcePath(\"settings\", \".js\");\n     const sidebarVars = document.getElementById(\"sidebar-vars\");\n     if (sidebarVars) {\n         window.sidebarCurrent = {\n@@ -104,6 +113,9 @@ function getVirtualKey(ev) {\n const THEME_PICKER_ELEMENT_ID = \"theme-picker\";\n const THEMES_ELEMENT_ID = \"theme-choices\";\n const MAIN_ID = \"main-content\";\n+const SETTINGS_BUTTON_ID = \"settings-menu\";\n+const ALTERNATIVE_DISPLAY_ID = \"alternative-display\";\n+const NOT_DISPLAYED_ID = \"not-displayed\";\n \n function getThemesElement() {\n     return document.getElementById(THEMES_ELEMENT_ID);\n@@ -113,6 +125,10 @@ function getThemePickerElement() {\n     return document.getElementById(THEME_PICKER_ELEMENT_ID);\n }\n \n+function getSettingsButton() {\n+    return document.getElementById(SETTINGS_BUTTON_ID);\n+}\n+\n // Returns the current URL without any query parameter or hash.\n function getNakedUrl() {\n     return window.location.href.split(\"?\")[0].split(\"#\")[0];\n@@ -136,6 +152,10 @@ function hideThemeButtonState() {\n     themePicker.style.borderBottomLeftRadius = \"3px\";\n }\n \n+window.hideSettings = function() {\n+    // Does nothing by default.\n+};\n+\n // Set up the theme picker list.\n (function () {\n     if (!document.location.href.startsWith(\"file:///\")) {\n@@ -182,14 +202,120 @@ function hideThemeButtonState() {\n     });\n }());\n \n+/**\n+ * This function inserts `newNode` after `referenceNode`. It doesn't work if `referenceNode`\n+ * doesn't have a parent node.\n+ *\n+ * @param {HTMLElement} newNode\n+ * @param {HTMLElement} referenceNode\n+ */\n+function insertAfter(newNode, referenceNode) {\n+    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n+}\n+\n+/**\n+ * This function creates a new `<section>` with the given `id` and `classes` if it doesn't already\n+ * exist.\n+ *\n+ * More information about this in `switchDisplayedElement` documentation.\n+ *\n+ * @param {string} id\n+ * @param {string} classes\n+ */\n+function getOrCreateSection(id, classes) {\n+    let el = document.getElementById(id);\n+\n+    if (!el) {\n+        el = document.createElement(\"section\");\n+        el.id = id;\n+        el.className = classes;\n+        insertAfter(el, document.getElementById(MAIN_ID));\n+    }\n+    return el;\n+}\n+\n+/**\n+ * Returns the `<section>` element which contains the displayed element.\n+ *\n+ * @return {HTMLElement}\n+ */\n+function getAlternativeDisplayElem() {\n+    return getOrCreateSection(ALTERNATIVE_DISPLAY_ID, \"content hidden\");\n+}\n+\n+/**\n+ * Returns the `<section>` element which contains the not-displayed elements.\n+ *\n+ * @return {HTMLElement}\n+ */\n+function getNotDisplayedElem() {\n+    return getOrCreateSection(NOT_DISPLAYED_ID, \"hidden\");\n+}\n+\n+/**\n+ * To nicely switch between displayed \"extra\" elements (such as search results or settings menu)\n+ * and to alternate between the displayed and not displayed elements, we hold them in two different\n+ * `<section>` elements. They work in pair: one holds the hidden elements while the other\n+ * contains the displayed element (there can be only one at the same time!). So basically, we switch\n+ * elements between the two `<section>` elements.\n+ *\n+ * @param {HTMLElement} elemToDisplay\n+ */\n+function switchDisplayedElement(elemToDisplay) {\n+    const el = getAlternativeDisplayElem();\n+\n+    if (el.children.length > 0) {\n+        getNotDisplayedElem().appendChild(el.firstElementChild);\n+    }\n+    if (elemToDisplay === null) {\n+        addClass(el, \"hidden\");\n+        showMain();\n+        return;\n+    }\n+    el.appendChild(elemToDisplay);\n+    hideMain();\n+    removeClass(el, \"hidden\");\n+}\n+\n+function browserSupportsHistoryApi() {\n+    return window.history && typeof window.history.pushState === \"function\";\n+}\n+\n+// eslint-disable-next-line no-unused-vars\n+function loadCss(cssFileName) {\n+    const link = document.createElement(\"link\");\n+    link.href = resourcePath(cssFileName, \".css\");\n+    link.type = \"text/css\";\n+    link.rel = \"stylesheet\";\n+    document.getElementsByTagName(\"head\")[0].appendChild(link);\n+}\n+\n (function() {\n     \"use strict\";\n \n+    function loadScript(url) {\n+        const script = document.createElement('script');\n+        script.src = url;\n+        document.head.append(script);\n+    }\n+\n+\n+    getSettingsButton().onclick = function(event) {\n+        event.preventDefault();\n+        loadScript(window.settingsJS);\n+    };\n+\n     window.searchState = {\n         loadingText: \"Loading search results...\",\n         input: document.getElementsByClassName(\"search-input\")[0],\n         outputElement: function() {\n-            return document.getElementById(\"search\");\n+            let el = document.getElementById(\"search\");\n+            if (!el) {\n+                el = document.createElement(\"section\");\n+                el.id = \"search\";\n+                getNotDisplayedElem().appendChild(el);\n+            }\n+            return el;\n         },\n         title: document.title,\n         titleBeforeSearch: document.title,\n@@ -208,6 +334,9 @@ function hideThemeButtonState() {\n                 searchState.timeout = null;\n             }\n         },\n+        isDisplayed: function() {\n+            return searchState.outputElement().parentElement.id === ALTERNATIVE_DISPLAY_ID;\n+        },\n         // Sets the focus on the search bar at the top of the page\n         focus: function() {\n             searchState.input.focus();\n@@ -220,20 +349,15 @@ function hideThemeButtonState() {\n             if (search === null || typeof search === 'undefined') {\n                 search = searchState.outputElement();\n             }\n-            addClass(main, \"hidden\");\n-            removeClass(search, \"hidden\");\n+            switchDisplayedElement(search);\n             searchState.mouseMovedAfterSearch = false;\n             document.title = searchState.title;\n         },\n-        hideResults: function(search) {\n-            if (search === null || typeof search === 'undefined') {\n-                search = searchState.outputElement();\n-            }\n-            addClass(search, \"hidden\");\n-            removeClass(main, \"hidden\");\n+        hideResults: function() {\n+            switchDisplayedElement(null);\n             document.title = searchState.titleBeforeSearch;\n             // We also remove the query parameter from the URL.\n-            if (searchState.browserSupportsHistoryApi()) {\n+            if (browserSupportsHistoryApi()) {\n                 history.replaceState(null, window.currentCrate + \" - Rust\",\n                     getNakedUrl() + window.location.hash);\n             }\n@@ -248,20 +372,11 @@ function hideThemeButtonState() {\n                 });\n             return params;\n         },\n-        browserSupportsHistoryApi: function() {\n-            return window.history && typeof window.history.pushState === \"function\";\n-        },\n         setup: function() {\n             const search_input = searchState.input;\n             if (!searchState.input) {\n                 return;\n             }\n-            function loadScript(url) {\n-                const script = document.createElement('script');\n-                script.src = url;\n-                document.head.append(script);\n-            }\n-\n             let searchLoaded = false;\n             function loadSearch() {\n                 if (!searchLoaded) {\n@@ -303,23 +418,20 @@ function hideThemeButtonState() {\n     }\n \n     const toggleAllDocsId = \"toggle-all-docs\";\n-    const main = document.getElementById(MAIN_ID);\n     let savedHash = \"\";\n \n     function handleHashes(ev) {\n-        let elem;\n-        const search = searchState.outputElement();\n-        if (ev !== null && search && !hasClass(search, \"hidden\") && ev.newURL) {\n+        if (ev !== null && searchState.isDisplayed() && ev.newURL) {\n             // This block occurs when clicking on an element in the navbar while\n             // in a search.\n-            searchState.hideResults(search);\n+            switchDisplayedElement(null);\n             const hash = ev.newURL.slice(ev.newURL.indexOf(\"#\") + 1);\n-            if (searchState.browserSupportsHistoryApi()) {\n+            if (browserSupportsHistoryApi()) {\n                 // `window.location.search`` contains all the query parameters, not just `search`.\n                 history.replaceState(null, \"\",\n                     getNakedUrl() + window.location.search + \"#\" + hash);\n             }\n-            elem = document.getElementById(hash);\n+            const elem = document.getElementById(hash);\n             if (elem) {\n                 elem.scrollIntoView();\n             }\n@@ -389,14 +501,17 @@ function hideThemeButtonState() {\n     }\n \n     function handleEscape(ev) {\n+        searchState.clearInputTimeout();\n         const help = getHelpElement(false);\n-        const search = searchState.outputElement();\n         if (help && !hasClass(help, \"hidden\")) {\n             displayHelp(false, ev, help);\n-        } else if (search && !hasClass(search, \"hidden\")) {\n-            searchState.clearInputTimeout();\n+        } else {\n+            switchDisplayedElement(null);\n+            if (browserSupportsHistoryApi()) {\n+                history.replaceState(null, window.currentCrate + \" - Rust\",\n+                    getNakedUrl() + window.location.hash);\n+            }\n             ev.preventDefault();\n-            searchState.hideResults(search);\n         }\n         searchState.defocus();\n         hideThemeButtonState();\n@@ -733,10 +848,6 @@ function hideThemeButtonState() {\n         innerToggle.children[0].innerText = labelForToggleButton(sectionIsCollapsed);\n     }\n \n-    function insertAfter(newNode, referenceNode) {\n-        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n-    }\n-\n     (function() {\n         const toggles = document.getElementById(toggleAllDocsId);\n         if (toggles) {"}, {"sha": "84600fa3e094f6bfc96fe868e0c8f538033979a8", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -2,7 +2,7 @@\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n /* global addClass, getNakedUrl, getSettingValue, hasOwnPropertyRustdoc, initSearch, onEach */\n-/* global onEachLazy, removeClass, searchState, hasClass */\n+/* global onEachLazy, removeClass, searchState, browserSupportsHistoryApi */\n \n (function() {\n // This mapping table should match the discriminants of\n@@ -1786,8 +1786,9 @@ window.initSearch = function(rawSearchIndex) {\n \n         // Because searching is incremental by character, only the most\n         // recent search query is added to the browser history.\n-        if (searchState.browserSupportsHistoryApi()) {\n+        if (browserSupportsHistoryApi()) {\n             const newURL = buildUrl(query.original, filterCrates);\n+\n             if (!history.state && !params.search) {\n                 history.pushState(null, \"\", newURL);\n             } else {\n@@ -1965,10 +1966,9 @@ window.initSearch = function(rawSearchIndex) {\n         if (!searchState.input) {\n             return;\n         }\n-        const search = searchState.outputElement();\n-        if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n-            searchState.showResults(search);\n-            if (searchState.browserSupportsHistoryApi()) {\n+        if (search_input.value !== \"\" && !searchState.isDisplayed()) {\n+            searchState.showResults();\n+            if (browserSupportsHistoryApi()) {\n                 history.replaceState(null, \"\",\n                     buildUrl(search_input.value, getFilterCrates()));\n             }\n@@ -1980,7 +1980,7 @@ window.initSearch = function(rawSearchIndex) {\n         const searchAfter500ms = function() {\n             searchState.clearInputTimeout();\n             if (searchState.input.value.length === 0) {\n-                if (searchState.browserSupportsHistoryApi()) {\n+                if (browserSupportsHistoryApi()) {\n                     history.replaceState(null, window.currentCrate + \" - Rust\",\n                         getNakedUrl() + window.location.hash);\n                 }\n@@ -2058,7 +2058,7 @@ window.initSearch = function(rawSearchIndex) {\n \n         // Push and pop states are used to add search results to the browser\n         // history.\n-        if (searchState.browserSupportsHistoryApi()) {\n+        if (browserSupportsHistoryApi()) {\n             // Store the previous <title> so we can revert back to it later.\n             const previousTitle = document.title;\n "}, {"sha": "a2f8d56fb320b8b3fa8198eecbea0bd1bca7477e", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 185, "deletions": 10, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -2,10 +2,13 @@\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n // Local js definitions:\n-/* global getSettingValue, getVirtualKey, onEachLazy, updateLocalStorage, updateSystemTheme */\n-/* global addClass, removeClass */\n+/* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme, loadCss */\n+/* global addClass, removeClass, onEach, onEachLazy, NOT_DISPLAYED_ID */\n+/* global MAIN_ID, getVar, getSettingsButton, switchDisplayedElement, getNotDisplayedElem */\n \n (function () {\n+    const isSettingsPage = window.location.pathname.endsWith(\"/settings.html\");\n+\n     function changeSetting(settingName, value) {\n         updateLocalStorage(settingName, value);\n \n@@ -55,9 +58,9 @@\n         }\n     }\n \n-    function setEvents() {\n+    function setEvents(settingsElement) {\n         updateLightAndDark();\n-        onEachLazy(document.getElementsByClassName(\"slider\"), function(elem) {\n+        onEachLazy(settingsElement.getElementsByClassName(\"slider\"), function(elem) {\n             const toggle = elem.previousElementSibling;\n             const settingId = toggle.id;\n             const settingValue = getSettingValue(settingId);\n@@ -70,7 +73,7 @@\n             toggle.onkeyup = handleKey;\n             toggle.onkeyrelease = handleKey;\n         });\n-        onEachLazy(document.getElementsByClassName(\"select-wrapper\"), function(elem) {\n+        onEachLazy(settingsElement.getElementsByClassName(\"select-wrapper\"), function(elem) {\n             const select = elem.getElementsByTagName(\"select\")[0];\n             const settingId = select.id;\n             const settingValue = getSettingValue(settingId);\n@@ -81,7 +84,7 @@\n                 changeSetting(this.id, this.value);\n             };\n         });\n-        onEachLazy(document.querySelectorAll(\"input[type=\\\"radio\\\"]\"), function(elem) {\n+        onEachLazy(settingsElement.querySelectorAll(\"input[type=\\\"radio\\\"]\"), function(elem) {\n             const settingId = elem.name;\n             const settingValue = getSettingValue(settingId);\n             if (settingValue !== null && settingValue !== \"null\") {\n@@ -91,10 +94,182 @@\n                 changeSetting(ev.target.name, ev.target.value);\n             });\n         });\n-        document.getElementById(\"back\").addEventListener(\"click\", function() {\n-            history.back();\n-        });\n     }\n \n-    window.addEventListener(\"DOMContentLoaded\", setEvents);\n+    /**\n+     * This function builds the sections inside the \"settings page\". It takes a `settings` list\n+     * as argument which describes each setting and how to render it. It returns a string\n+     * representing the raw HTML.\n+     *\n+     * @param {Array<Object>} settings\n+     *\n+     * @return {string}\n+     */\n+    function buildSettingsPageSections(settings) {\n+        let output = \"\";\n+\n+        for (const setting of settings) {\n+            output += `<div class=\"setting-line\">`;\n+            const js_data_name = setting[\"js_name\"];\n+            const setting_name = setting[\"name\"];\n+\n+            if (setting[\"options\"] !== undefined) {\n+                // This is a select setting.\n+                output += `<div class=\"radio-line\" id=\"${js_data_name}\">\\\n+                        <span class=\"setting-name\">${setting_name}</span>\\\n+                        <div class=\"choices\">`;\n+                onEach(setting[\"options\"], function(option) {\n+                    const checked = option === setting[\"default\"] ? \" checked\" : \"\";\n+\n+                    output += `<label for=\"${js_data_name}-${option}\" class=\"choice\">\\\n+                           <input type=\"radio\" name=\"${js_data_name}\" \\\n+                                id=\"${js_data_name}-${option}\" value=\"${option}\"${checked}>\\\n+                           ${option}\\\n+                         </label>`;\n+                });\n+                output += \"</div></div>\";\n+            } else {\n+                // This is a toggle.\n+                const checked = setting[\"default\"] === true ? \" checked\" : \"\";\n+                output += `\n+                    <label class=\"toggle\">\n+                        <input type=\"checkbox\" id=\"${js_data_name}\"${checked}>\n+                        <span class=\"slider\"></span>\n+                    </label>\n+                    <div>${setting_name}</div>`;\n+            }\n+            output += \"</div>\";\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * This function builds the \"settings page\" and returns the generated HTML element.\n+     *\n+     * @return {HTMLElement}\n+     */\n+    function buildSettingsPage() {\n+        const themes = getVar(\"themes\").split(\",\");\n+        const settings = [\n+            {\n+                \"name\": \"Use system theme\",\n+                \"js_name\": \"use-system-theme\",\n+                \"default\": true,\n+            },\n+            {\n+                \"name\": \"Theme\",\n+                \"js_name\": \"theme\",\n+                \"default\": \"light\",\n+                \"options\": themes,\n+            },\n+            {\n+                \"name\": \"Preferred light theme\",\n+                \"js_name\": \"preferred-light-theme\",\n+                \"default\": \"light\",\n+                \"options\": themes,\n+            },\n+            {\n+                \"name\": \"Preferred dark theme\",\n+                \"js_name\": \"preferred-dark-theme\",\n+                \"default\": \"dark\",\n+                \"options\": themes,\n+            },\n+            {\n+                \"name\": \"Auto-hide item contents for large items\",\n+                \"js_name\": \"auto-hide-large-items\",\n+                \"default\": true,\n+            },\n+            {\n+                \"name\": \"Auto-hide item methods' documentation\",\n+                \"js_name\": \"auto-hide-method-docs\",\n+                \"default\": false,\n+            },\n+            {\n+                \"name\": \"Auto-hide trait implementation documentation\",\n+                \"js_name\": \"auto-hide-trait-implementations\",\n+                \"default\": false,\n+            },\n+            {\n+                \"name\": \"Directly go to item in search if there is only one result\",\n+                \"js_name\": \"go-to-only-result\",\n+                \"default\": false,\n+            },\n+            {\n+                \"name\": \"Show line numbers on code examples\",\n+                \"js_name\": \"line-numbers\",\n+                \"default\": false,\n+            },\n+            {\n+                \"name\": \"Disable keyboard shortcuts\",\n+                \"js_name\": \"disable-shortcuts\",\n+                \"default\": false,\n+            },\n+        ];\n+\n+        // First, we add the settings.css file.\n+        loadCss(\"settings\");\n+\n+        // Then we build the DOM.\n+        const el = document.createElement(\"section\");\n+        el.id = \"settings\";\n+        let innerHTML = `\n+            <div class=\"main-heading\">\n+                <h1 class=\"fqn\">\n+                    <span class=\"in-band\">Rustdoc settings</span>\n+                </h1>\n+                <span class=\"out-of-band\">`;\n+\n+        if (isSettingsPage) {\n+            innerHTML +=\n+                `<a id=\"back\" href=\"javascript:void(0)\" onclick=\"history.back();\">Back</a>`;\n+        } else {\n+            innerHTML +=\n+                `<a id=\"back\" href=\"javascript:void(0)\" onclick=\"switchDisplayedElement(null);\">\\\n+                    Back</a>`;\n+        }\n+        innerHTML += `</span>\n+            </div>\n+            <div class=\"settings\">${buildSettingsPageSections(settings)}</div>`;\n+\n+        el.innerHTML = innerHTML;\n+\n+        if (isSettingsPage) {\n+            document.getElementById(MAIN_ID).appendChild(el);\n+        } else {\n+            getNotDisplayedElem().appendChild(el);\n+        }\n+        return el;\n+    }\n+\n+    const settingsMenu = buildSettingsPage();\n+\n+    if (isSettingsPage) {\n+        // We replace the existing \"onclick\" callback to do nothing if clicked.\n+        getSettingsButton().onclick = function(event) {\n+            event.preventDefault();\n+        };\n+    } else {\n+        // We replace the existing \"onclick\" callback.\n+        const settingsButton = getSettingsButton();\n+        settingsButton.onclick = function(event) {\n+            event.preventDefault();\n+            if (settingsMenu.parentElement.id === NOT_DISPLAYED_ID) {\n+                switchDisplayedElement(settingsMenu);\n+            } else {\n+                window.hideSettings();\n+            }\n+        };\n+        window.hideSettings = function() {\n+            switchDisplayedElement(null);\n+        };\n+    }\n+\n+    // We now wait a bit for the web browser to end re-computing the DOM...\n+    setTimeout(function() {\n+        setEvents(settingsMenu);\n+        // The setting menu is already displayed if we're on the settings page.\n+        if (!isSettingsPage) {\n+            switchDisplayedElement(settingsMenu);\n+        }\n+    }, 0);\n })();"}, {"sha": "6aee0da69f8de58898c71f97c40af9b817c8e2c0", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -6,7 +6,7 @@\n /* global search, sourcesIndex */\n \n // Local js definitions:\n-/* global addClass, getCurrentValue, hasClass, onEachLazy, removeClass, searchState */\n+/* global addClass, getCurrentValue, hasClass, onEachLazy, removeClass, browserSupportsHistoryApi */\n /* global updateLocalStorage */\n (function() {\n \n@@ -195,7 +195,7 @@ const handleSourceHighlight = (function() {\n     const set_fragment = function(name) {\n         const x = window.scrollX,\n             y = window.scrollY;\n-        if (searchState.browserSupportsHistoryApi()) {\n+        if (browserSupportsHistoryApi()) {\n             history.replaceState(null, null, \"#\" + name);\n             highlightSourceLines();\n         } else {"}, {"sha": "470cce93a5020fca5d4c8ea410e48b830eaa168f", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -135,7 +135,6 @@ <h2 class=\"location\"></h2>\n                 </nav> {#- -#}\n             </div> {#- -#}\n             <section id=\"main-content\" class=\"content\">{{- content|safe -}}</section> {#- -#}\n-            <section id=\"search\" class=\"content hidden\"></section> {#- -#}\n         </div> {#- -#}\n     </main> {#- -#}\n     {{- layout.external_html.after_content|safe -}}"}, {"sha": "8713bf65c8432a2d5dbaa343a8c2eff1b790df19", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -4,17 +4,20 @@ goto: file://|DOC_PATH|/test_docs/index.html\n // First, we check that the search results are hidden when the Escape key is pressed.\n write: (\".search-input\", \"test\")\n wait-for: \"#search h1\" // The search element is empty before the first search \n-assert-attribute: (\"#search\", {\"class\": \"content\"})\n+// Check that the currently displayed element is search.\n+wait-for: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, ENDS_WITH)\n press-key: \"Escape\"\n-assert-attribute: (\"#search\", {\"class\": \"content hidden\"})\n+// Checks that search is no longer in the displayed content.\n+wait-for: \"#not-displayed #search\"\n+assert-false: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content\"})\n assert-document-property: ({\"URL\": \"index.html\"}, [ENDS_WITH])\n \n // Check that focusing the search input brings back the search results\n focus: \".search-input\"\n-assert-attribute: (\"#search\", {\"class\": \"content\"})\n+wait-for: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, ENDS_WITH)\n \n@@ -24,8 +27,8 @@ click: \"#help-button\"\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, [ENDS_WITH])\n assert-attribute: (\"#help\", {\"class\": \"\"})\n press-key: \"Escape\"\n+wait-for: \"#alternative-display #search\"\n assert-attribute: (\"#help\", {\"class\": \"hidden\"})\n-assert-attribute: (\"#search\", {\"class\": \"content\"})\n assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, [ENDS_WITH])\n \n@@ -37,5 +40,6 @@ assert-false: \".search-input:focus\"\n assert: \"#results a:focus\"\n press-key: \"Escape\"\n assert-attribute: (\"#help\", {\"class\": \"hidden\"})\n-assert-attribute: (\"#search\", {\"class\": \"content hidden\"})\n+wait-for: \"#not-displayed #search\"\n+assert-false: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content\"})"}, {"sha": "6c4611b1cb2a613f01906a3d222a7d10234f7fbe", "filename": "src/test/rustdoc-gui/settings.goml", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,67 @@\n+// This test ensures that the settings menu display is working as expected.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+// First, we check that the settings page doesn't exist.\n+assert-false: \"#settings\"\n+// We now click on the settings button.\n+click: \"#settings-menu\"\n+wait-for: \"#settings\"\n+assert: \"#main-content.hidden\"\n+assert-css: (\"#settings\", {\"display\": \"block\"})\n+// Let's close it by clicking on the same button.\n+click: \"#settings-menu\"\n+assert-false: \"#alternative-display #settings\"\n+assert: \"#not-displayed #settings\"\n+assert: \"#main-content:not(.hidden)\"\n+\n+// Let's open and then close it again with the \"close settings\" button.\n+click: \"#settings-menu\"\n+wait-for: \"#alternative-display #settings\"\n+assert: \"#main-content.hidden\"\n+click: \"#back\"\n+wait-for: \"#not-displayed #settings\"\n+assert: \"#main-content:not(.hidden)\"\n+\n+// Let's check that pressing \"ESCAPE\" is closing it.\n+click: \"#settings-menu\"\n+wait-for: \"#alternative-display #settings\"\n+press-key: \"Escape\"\n+wait-for: \"#not-displayed #settings\"\n+assert: \"#main-content:not(.hidden)\"\n+\n+// Let's click on it when the search results are displayed.\n+focus: \".search-input\"\n+write: \"test\"\n+wait-for: \"#alternative-display #search\"\n+click: \"#settings-menu\"\n+wait-for: \"#alternative-display #settings\"\n+assert: \"#not-displayed #search\"\n+assert: \"#main-content.hidden\"\n+\n+// Now let's check the content of the settings menu.\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+click: \"#settings-menu\"\n+wait-for: \"#settings\"\n+\n+// We check that the \"Use system theme\" is disabled.\n+assert-property: (\"#use-system-theme\", {\"checked\": \"false\"})\n+assert: \"//*[@class='setting-line']/*[text()='Use system theme']\"\n+// Meaning that only the \"theme\" menu is showing up.\n+assert: \".setting-line:not(.hidden) #theme\"\n+assert: \".setting-line.hidden #preferred-dark-theme\"\n+assert: \".setting-line.hidden #preferred-light-theme\"\n+\n+// We check that the correct theme is selected.\n+assert-property: (\"#theme .choices #theme-dark\", {\"checked\": \"true\"})\n+\n+// We now switch the display.\n+click: \"#use-system-theme\"\n+// Wait for the hidden element to show up.\n+wait-for: \".setting-line:not(.hidden) #preferred-dark-theme\"\n+assert: \".setting-line:not(.hidden) #preferred-light-theme\"\n+// Check that the theme picking is hidden.\n+assert: \".setting-line.hidden #theme\"\n+\n+// We check their text as well.\n+assert-text: (\"#preferred-dark-theme .setting-name\", \"Preferred dark theme\")\n+assert-text: (\"#preferred-light-theme .setting-name\", \"Preferred light theme\")"}, {"sha": "9706511ea19c398fda3051fc9651f0f53a27c1e0", "filename": "src/test/rustdoc-gui/theme-change.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -9,6 +9,7 @@ click: \"#theme-choices > button:last-child\"\n wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n \n goto: file://|DOC_PATH|/settings.html\n+wait-for: \"#settings\"\n click: \"#theme-light\"\n wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n assert-local-storage: { \"rustdoc-theme\": \"light\" }"}, {"sha": "f576ced1c62086d85a69c8416902845435fa32a3", "filename": "src/test/rustdoc-gui/theme-in-history.goml", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -1,15 +1,19 @@\n // Ensures that the theme is working when going back in history.\n goto: file://|DOC_PATH|/test_docs/index.html\n // Set the theme to dark.\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-preferred-dark-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n // We reload the page so the local storage settings are being used.\n reload:\n assert-css: (\"body\", { \"background-color\": \"rgb(53, 53, 53)\" })\n assert-local-storage: { \"rustdoc-theme\": \"dark\" }\n \n // Now we go to the settings page.\n-click: \"#settings-menu\"\n-wait-for: \".settings\"\n+goto: file://|DOC_PATH|/settings.html\n+wait-for: \"#settings\"\n // We change the theme to \"light\".\n click: \"#theme-light\"\n wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n@@ -18,7 +22,7 @@ assert-local-storage: { \"rustdoc-theme\": \"light\" }\n // We go back in history.\n history-go-back:\n // Confirm that we're not on the settings page.\n-assert-false: \".settings\"\n+assert-false: \"#settings\"\n // Check that the current theme is still \"light\".\n assert-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n assert-local-storage: { \"rustdoc-theme\": \"light\" }"}, {"sha": "9c6e81ab8cc75eb5b292c15fc7a7f9bff760bc8e", "filename": "src/test/ui/argument-suggestions/issue-96638.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,9 @@\n+fn f(_: usize, _: &usize, _: usize) {}\n+\n+fn arg<T>() -> T { todo!() }\n+\n+fn main() {\n+    let x = arg(); // `x` must be inferred\n+    // The reference on `&x` is important to reproduce the ICE\n+    f(&x, \"\"); //~ ERROR this function takes 3 arguments but 2 arguments were supplied\n+}"}, {"sha": "35190e2ca0d8251e9f915b85069b85f42e6ba738", "filename": "src/test/ui/argument-suggestions/issue-96638.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,19 @@\n+error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n+  --> $DIR/issue-96638.rs:8:5\n+   |\n+LL |     f(&x, \"\");\n+   |     ^ -- an argument of type `usize` is missing\n+   |\n+note: function defined here\n+  --> $DIR/issue-96638.rs:1:4\n+   |\n+LL | fn f(_: usize, _: &usize, _: usize) {}\n+   |    ^ --------  ---------  --------\n+help: provide the argument\n+   |\n+LL |     f({usize}, &x, {usize});\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "a51dc88a4eded368247b823ca0be53a5537ee326", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -7,7 +7,7 @@ LL | pub async const fn x() {}\n    |     |     expected one of `extern`, `fn`, or `unsafe`\n    |     help: `const` must come before `async`: `const async`\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "f23d17d6bfa5795e8ad5b5afc4a2846bf2be875e", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -12,7 +12,7 @@ LL |     unsafe async fn g() {}\n LL | }\n    | - the item list ends here\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: expected one of `extern` or `fn`, found keyword `async`\n   --> $DIR/no-unsafe-async.rs:11:8\n@@ -23,7 +23,7 @@ LL | unsafe async fn f() {}\n    | |      expected one of `extern` or `fn`\n    | help: `async` must come before `unsafe`: `async unsafe`\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a21db67333524ad14574edd2ba6e1db2d472d9b", "filename": "src/test/ui/fn/keyword-order.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ffn%2Fkeyword-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ffn%2Fkeyword-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fkeyword-order.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,6 @@\n+// edition:2018\n+\n+default pub const async unsafe extern fn err() {} //~ ERROR `default` is not followed by an item\n+//~^ ERROR expected item, found keyword `pub`\n+\n+pub default const async unsafe extern fn ok() {}"}, {"sha": "d3b140c8528606d9f7e851b6e209900300b53c6a", "filename": "src/test/ui/fn/keyword-order.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ffn%2Fkeyword-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ffn%2Fkeyword-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fkeyword-order.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,16 @@\n+error: `default` is not followed by an item\n+  --> $DIR/keyword-order.rs:3:1\n+   |\n+LL | default pub const async unsafe extern fn err() {}\n+   | ^^^^^^^ the `default` qualifier\n+   |\n+   = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n+\n+error: expected item, found keyword `pub`\n+  --> $DIR/keyword-order.rs:3:9\n+   |\n+LL | default pub const async unsafe extern fn err() {}\n+   |         ^^^ expected item\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1518c116b318571573629d1979540cdc8c5fdec4", "filename": "src/test/ui/impl-trait/issues/issue-92305.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,15 @@\n+// edition:2021\n+\n+use std::iter;\n+\n+fn f<T>(data: &[T]) -> impl Iterator<Item = Vec> {\n+    //~^ ERROR: missing generics for struct `Vec` [E0107]\n+    iter::empty() //~ ERROR: type annotations needed [E0282]\n+}\n+\n+fn g<T>(data: &[T], target: T) -> impl Iterator<Item = Vec<T>> {\n+    //~^ ERROR: type annotations needed [E0282]\n+    f(data).filter(|x| x == target)\n+}\n+\n+fn main() {}"}, {"sha": "c4fc49225e9a00daf5ce0a64d5a0ebca7d1e5b32", "filename": "src/test/ui/impl-trait/issues/issue-92305.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-92305.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,32 @@\n+error[E0107]: missing generics for struct `Vec`\n+  --> $DIR/issue-92305.rs:5:45\n+   |\n+LL | fn f<T>(data: &[T]) -> impl Iterator<Item = Vec> {\n+   |                                             ^^^ expected at least 1 generic argument\n+   |\n+note: struct defined here, with at least 1 generic parameter: `T`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   |            ^^^ -\n+help: add missing generic argument\n+   |\n+LL | fn f<T>(data: &[T]) -> impl Iterator<Item = Vec<T>> {\n+   |                                             ~~~~~~\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-92305.rs:7:5\n+   |\n+LL |     iter::empty()\n+   |     ^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the function `empty`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-92305.rs:10:35\n+   |\n+LL | fn g<T>(data: &[T], target: T) -> impl Iterator<Item = Vec<T>> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0282.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "bbd85374b4bcfb9a0393ded136f72d2c4bc2dc54", "filename": "src/test/ui/parser/issues/issue-19398.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -12,7 +12,7 @@ LL |\n LL | }\n    | - the item list ends here\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "bbebc99e94b8236a280d78a37081eaf63917c663", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/several-kw-jump.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fseveral-kw-jump.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fseveral-kw-jump.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fseveral-kw-jump.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -11,4 +11,4 @@ async unsafe const fn test() {}\n //~| NOTE expected one of `extern` or `fn`\n //~| HELP `const` must come before `async unsafe`\n //~| SUGGESTION const async unsafe\n-//~| NOTE keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+//~| NOTE keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`"}, {"sha": "f455caba158c77728c43d9ffd54ab37d50b64e4e", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/several-kw-jump.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fseveral-kw-jump.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fseveral-kw-jump.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fseveral-kw-jump.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -7,7 +7,7 @@ LL | async unsafe const fn test() {}\n    | |            expected one of `extern` or `fn`\n    | help: `const` must come before `async unsafe`: `const async unsafe`\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "4ff4cf5c8ca8768e625084a6ca4babaad35bcfd8", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/wrong-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-async.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -11,4 +11,4 @@ unsafe async fn test() {}\n //~| NOTE expected one of `extern` or `fn`\n //~| HELP `async` must come before `unsafe`\n //~| SUGGESTION async unsafe\n-//~| NOTE keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+//~| NOTE keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`"}, {"sha": "e9eb14bf00e77ecc5d988e38c6db7798b01be6b0", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/wrong-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-async.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -7,7 +7,7 @@ LL | unsafe async fn test() {}\n    | |      expected one of `extern` or `fn`\n    | help: `async` must come before `unsafe`: `async unsafe`\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "2f5fbc513ee3658051aa788acfd35edd47e520ac", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/wrong-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-const.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -11,4 +11,4 @@ unsafe const fn test() {}\n //~| NOTE expected one of `extern` or `fn`\n //~| HELP `const` must come before `unsafe`\n //~| SUGGESTION const unsafe\n-//~| NOTE keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+//~| NOTE keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`"}, {"sha": "0d2bc3472965f6c576a8764c3e821e1b016057ca", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/wrong-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-const.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -7,7 +7,7 @@ LL | unsafe const fn test() {}\n    | |      expected one of `extern` or `fn`\n    | help: `const` must come before `unsafe`: `const unsafe`\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "df2412e3e9b32e4b3e71b158eb059abbe50d4f6e", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/wrong-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-unsafe.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -11,4 +11,4 @@ extern unsafe fn test() {}\n //~| NOTE expected `fn`\n //~| HELP `unsafe` must come before `extern`\n //~| SUGGESTION unsafe extern\n-//~| NOTE keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+//~| NOTE keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`"}, {"sha": "4224713ccb53af36e3fd62a64dfc6ba675937268", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/wrong-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fwrong-unsafe.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -7,7 +7,7 @@ LL | extern unsafe fn test() {}\n    | |      expected `fn`\n    | help: `unsafe` must come before `extern`: `unsafe extern`\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "a9338c76cdc8800a447d14387f7ddbb053bf54ef", "filename": "src/test/ui/typeck/remove-extra-argument.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+// Check that the HELP suggestion is `l(vec![])` instead of `l($crate::vec::Vec::new())`\n+fn l(_a: Vec<u8>) {}\n+\n+fn main() {\n+    l(vec![])\n+    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~| HELP remove the extra argument\n+}"}, {"sha": "659cb8b267fd5b8fb80d8dad101788241120a04d", "filename": "src/test/ui/typeck/remove-extra-argument.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+// Check that the HELP suggestion is `l(vec![])` instead of `l($crate::vec::Vec::new())`\n+fn l(_a: Vec<u8>) {}\n+\n+fn main() {\n+    l(vec![], vec![])\n+    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~| HELP remove the extra argument\n+}"}, {"sha": "815297765c18ccdcfaa9e8302cf0f9a8c5ecfa5d", "filename": "src/test/ui/typeck/remove-extra-argument.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/468492c2af3993f18b1fe98052200575c4a2e678/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.stderr?ref=468492c2af3993f18b1fe98052200575c4a2e678", "patch": "@@ -0,0 +1,19 @@\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/remove-extra-argument.rs:6:5\n+   |\n+LL |     l(vec![], vec![])\n+   |     ^         ------ argument unexpected\n+   |\n+note: function defined here\n+  --> $DIR/remove-extra-argument.rs:3:4\n+   |\n+LL | fn l(_a: Vec<u8>) {}\n+   |    ^ -----------\n+help: remove the extra argument\n+   |\n+LL |     l(vec![])\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}]}