{"sha": "2d323857e91f3f73bd9d15a83af079a3f6d9ff43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzIzODU3ZTkxZjNmNzNiZDlkMTVhODNhZjA3OWEzZjZkOWZmNDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T16:47:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T16:47:54Z"}, "message": "implement and test posix_memalign", "tree": {"sha": "3293b64eae1542037a79db4003dcb064456e2a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3293b64eae1542037a79db4003dcb064456e2a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d323857e91f3f73bd9d15a83af079a3f6d9ff43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d323857e91f3f73bd9d15a83af079a3f6d9ff43", "html_url": "https://github.com/rust-lang/rust/commit/2d323857e91f3f73bd9d15a83af079a3f6d9ff43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d323857e91f3f73bd9d15a83af079a3f6d9ff43/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1dc2860a161b5babc0e2d1774a7273c65108b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1dc2860a161b5babc0e2d1774a7273c65108b0", "html_url": "https://github.com/rust-lang/rust/commit/bd1dc2860a161b5babc0e2d1774a7273c65108b0"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "fa68f1d0d703ad2c01ab1a50da3796b1779718b5", "filename": "src/fn_call.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2d323857e91f3f73bd9d15a83af079a3f6d9ff43/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d323857e91f3f73bd9d15a83af079a3f6d9ff43/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=2d323857e91f3f73bd9d15a83af079a3f6d9ff43", "patch": "@@ -93,6 +93,32 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     this.write_scalar(Scalar::Ptr(ptr.with_default_tag()), dest)?;\n                 }\n             }\n+            \"posix_memalign\" => {\n+                let ret = this.deref_operand(args[0])?;\n+                let align = this.read_scalar(args[1])?.to_usize(this)?;\n+                let size = this.read_scalar(args[2])?.to_usize(this)?;\n+                // align must be a power of 2, and also at least ptr-sized (wtf, POSIX)\n+                if !align.is_power_of_two() {\n+                    return err!(HeapAllocNonPowerOfTwoAlignment(align));\n+                }\n+                if align < this.pointer_size().bytes() {\n+                    return err!(MachineError(format!(\n+                        \"posix_memalign: alignment must be at least the size of a pointer, but is {}\",\n+                        align,\n+                    )));\n+                }\n+                if size == 0 {\n+                    this.write_null(ret.into())?;\n+                } else {\n+                    let ptr = this.memory_mut().allocate(\n+                        Size::from_bytes(size),\n+                        Align::from_bytes(align).unwrap(),\n+                        MiriMemoryKind::C.into()\n+                    );\n+                    this.write_scalar(Scalar::Ptr(ptr.with_default_tag()), ret.into())?;\n+                }\n+                this.write_null(dest)?;\n+            }\n \n             \"free\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;"}, {"sha": "8421dce9c21bf60dbc3a9c941e7d6d45defb759b", "filename": "tests/run-pass/heap.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2d323857e91f3f73bd9d15a83af079a3f6d9ff43/tests%2Frun-pass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d323857e91f3f73bd9d15a83af079a3f6d9ff43/tests%2Frun-pass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap.rs?ref=2d323857e91f3f73bd9d15a83af079a3f6d9ff43", "patch": "@@ -1,4 +1,7 @@\n #![feature(box_syntax)]\n+#![feature(allocator_api)]\n+\n+use std::alloc::{Global, Alloc, Layout, System};\n \n fn make_box() -> Box<(i16, i16)> {\n     Box::new((1, 2))\n@@ -27,8 +30,31 @@ fn allocate_reallocate() {\n     assert_eq!(s.capacity(), 9);\n }\n \n+fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n+    let size = 8;\n+    let align = 16; // greater than size\n+    let iterations = 1; // Miri is deterministic, no need to try many times\n+    unsafe {\n+        let pointers: Vec<_> = (0..iterations).map(|_| {\n+            allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n+        }).collect();\n+        for &ptr in &pointers {\n+            assert_eq!((ptr.as_ptr() as usize) % align, 0,\n+                       \"Got a pointer less aligned than requested\")\n+        }\n+\n+        // Clean up\n+        for &ptr in &pointers {\n+            allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+        }\n+    }\n+}\n+\n fn main() {\n     assert_eq!(*make_box(), (1, 2));\n     assert_eq!(*make_box_syntax(), (1, 2));\n     allocate_reallocate();\n+\n+    check_overalign_requests(System);\n+    check_overalign_requests(Global);\n }"}]}