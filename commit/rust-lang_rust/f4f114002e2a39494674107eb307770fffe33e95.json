{"sha": "f4f114002e2a39494674107eb307770fffe33e95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZjExNDAwMmUyYTM5NDk0Njc0MTA3ZWIzMDc3NzBmZmZlMzNlOTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-28T08:41:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-28T08:41:53Z"}, "message": "stabilize slice_align_to", "tree": {"sha": "190ccbb1ef4691b2463efc10896bcae481ade35e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/190ccbb1ef4691b2463efc10896bcae481ade35e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f114002e2a39494674107eb307770fffe33e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f114002e2a39494674107eb307770fffe33e95", "html_url": "https://github.com/rust-lang/rust/commit/f4f114002e2a39494674107eb307770fffe33e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f114002e2a39494674107eb307770fffe33e95/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b638d8c75f4e38c75c5caa52b10b18a350431687", "url": "https://api.github.com/repos/rust-lang/rust/commits/b638d8c75f4e38c75c5caa52b10b18a350431687", "html_url": "https://github.com/rust-lang/rust/commit/b638d8c75f4e38c75c5caa52b10b18a350431687"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "1894ef503f2716c3b7881a257e066b8fbbc1899d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4f114002e2a39494674107eb307770fffe33e95/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f114002e2a39494674107eb307770fffe33e95/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f4f114002e2a39494674107eb307770fffe33e95", "patch": "@@ -1744,8 +1744,9 @@ impl<T> [T] {\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n-    /// slice of a new type, and the suffix slice. The middle slice will have the greatest length\n-    /// possible for a given type and input slice.\n+    /// slice of a new type, and the suffix slice. The method does a best effort to make the\n+    /// middle slice the greatest length possible for a given type and input slice, but only\n+    /// your algorithm's performance should depend on that, not its correctness.\n     ///\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n@@ -1760,7 +1761,6 @@ impl<T> [T] {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// # #![feature(slice_align_to)]\n     /// unsafe {\n     ///     let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];\n     ///     let (prefix, shorts, suffix) = bytes.align_to::<u16>();\n@@ -1769,7 +1769,7 @@ impl<T> [T] {\n     ///     // less_efficient_algorithm_for_bytes(suffix);\n     /// }\n     /// ```\n-    #[unstable(feature = \"slice_align_to\", issue = \"44488\")]\n+    #[stable(feature = \"slice_align_to\", since = \"1.30.0\")]\n     pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n         // Note that most of this function will be constant-evaluated,\n         if ::mem::size_of::<U>() == 0 || ::mem::size_of::<T>() == 0 {\n@@ -1797,8 +1797,9 @@ impl<T> [T] {\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n-    /// slice of a new type, and the suffix slice. The middle slice will have the greatest length\n-    /// possible for a given type and input slice.\n+    /// slice of a new type, and the suffix slice. The method does a best effort to make the\n+    /// middle slice the greatest length possible for a given type and input slice, but only\n+    /// your algorithm's performance should depend on that, not its correctness.\n     ///\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n@@ -1813,7 +1814,6 @@ impl<T> [T] {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// # #![feature(slice_align_to)]\n     /// unsafe {\n     ///     let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];\n     ///     let (prefix, shorts, suffix) = bytes.align_to_mut::<u16>();\n@@ -1822,7 +1822,7 @@ impl<T> [T] {\n     ///     // less_efficient_algorithm_for_bytes(suffix);\n     /// }\n     /// ```\n-    #[unstable(feature = \"slice_align_to\", issue = \"44488\")]\n+    #[stable(feature = \"slice_align_to\", since = \"1.30.0\")]\n     pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n         // Note that most of this function will be constant-evaluated,\n         if ::mem::size_of::<U>() == 0 || ::mem::size_of::<T>() == 0 {"}, {"sha": "4f3086575c0cf2f0e89d494b125c81e1734874a4", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f114002e2a39494674107eb307770fffe33e95/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f114002e2a39494674107eb307770fffe33e95/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f4f114002e2a39494674107eb307770fffe33e95", "patch": "@@ -34,7 +34,6 @@\n #![feature(try_from)]\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n-#![feature(slice_align_to)]\n #![feature(align_offset)]\n #![feature(reverse_bits)]\n #![feature(inner_deref)]"}]}