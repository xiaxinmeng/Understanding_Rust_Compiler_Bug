{"sha": "db0b4166564b235c29e6eaf371ad29330da7b851", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMGI0MTY2NTY0YjIzNWMyOWU2ZWFmMzcxYWQyOTMzMGRhN2I4NTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-10T21:00:18Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-10T21:00:18Z"}, "message": "Address review comments\n\n- Improve wording\n- Use relative links\n- Use a proper list instead of a wall of text\n- Improve examples", "tree": {"sha": "d240e941f30ecc17bff0e8dfe3837b0feab9c8ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d240e941f30ecc17bff0e8dfe3837b0feab9c8ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0b4166564b235c29e6eaf371ad29330da7b851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0b4166564b235c29e6eaf371ad29330da7b851", "html_url": "https://github.com/rust-lang/rust/commit/db0b4166564b235c29e6eaf371ad29330da7b851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0b4166564b235c29e6eaf371ad29330da7b851/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5392d1962208398a64a715698f05457840e6851", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5392d1962208398a64a715698f05457840e6851", "html_url": "https://github.com/rust-lang/rust/commit/d5392d1962208398a64a715698f05457840e6851"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "1da54864a8ec94c3e791cf646733439c4574d4ff", "filename": "src/doc/rustdoc/src/linking-to-items-by-name.md", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/db0b4166564b235c29e6eaf371ad29330da7b851/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "raw_url": "https://github.com/rust-lang/rust/raw/db0b4166564b235c29e6eaf371ad29330da7b851/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md?ref=db0b4166564b235c29e6eaf371ad29330da7b851", "patch": "@@ -24,7 +24,7 @@ pub struct Foo4;\n pub struct Bar;\n ```\n \n-Unlike normal markdown, `[bar][Bar]` syntax is also supported without needing a\n+Unlike normal Markdown, `[bar][Bar]` syntax is also supported without needing a\n `[Bar]: ...` reference link, and links are case-sensitive.\n \n Backticks around the link will be stripped, so ``[`Option`]`` will correctly\n@@ -37,14 +37,14 @@ You can refer to anything in scope, and use paths, including `Self`, `self`, `su\n trait implementations][#79682]. Rustdoc also supports linking to the following primitives, which\n have no path and cannot be imported:\n \n-- [`slice`](https://doc.rust-lang.org/std/primitive.slice.html)\n-- [`array`](https://doc.rust-lang.org/std/primitive.array.html)\n-- [`tuple`](https://doc.rust-lang.org/std/primitive.tuple.html)\n-- [`unit`](https://doc.rust-lang.org/std/primitive.unit.html)\n-- [`fn`](https://doc.rust-lang.org/std/primitive.fn.html)\n-- [`pointer`](https://doc.rust-lang.org/std/primitive.pointer.html), `*`, `*const`, or `*mut`\n-- [`reference`](https://doc.rust-lang.org/std/primitive.reference.html), `&`, or `&mut`\n-- [`never`](https://doc.rust-lang.org/std/primitive.never.html) or `!`\n+- [`slice`](../../std/primitive.slice.html)\n+- [`array`](../../std/primitive.array.html)\n+- [`tuple`](../../std/primitive.tuple.html)\n+- [`unit`](../../std/primitive.unit.html)\n+- [`fn`](../../std/primitive.fn.html)\n+- [`pointer`](../../std/primitive.pointer.html), `*`, `*const`, or `*mut`\n+- [`reference`](../../std/primitive.reference.html), `&`, or `&mut`\n+- [`never`](../../std/primitive.never.html) or `!`\n \n [#79682]: https://github.com/rust-lang/rust/pull/79682\n \n@@ -83,10 +83,8 @@ struct MySpecialFormatter;\n ## Namespaces and Disambiguators\n \n Paths in Rust have three namespaces: type, value, and macro. Item names must be unique within\n-their namespace, but can overlap with items outside of their namespace. In case of ambiguity,\n-rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a\n-prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`,\n-`fn@`, `function@`, `mod@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n+their namespace, but can overlap with items in other namespaces. In case of ambiguity,\n+rustdoc will warn about the ambiguity and ask you to disambiguate.\n \n ```rust\n /// See also: [`Foo`](struct@Foo)\n@@ -98,30 +96,48 @@ struct Foo {}\n fn Foo() {}\n ```\n \n+The following prefixes can be used:\n+\n+- `struct@`\n+- `enum@`\n+- `type@`\n+- `trait@`\n+- `union@`\n+- `const@`\n+- `static@`\n+- `value@`\n+- `fn@` / `function@` / `method@`\n+- `mod@` / `module@`\n+- `prim@` / `primitive@`\n+- `macro@`\n+- `derive@`\n+\n These prefixes will be stripped when displayed in the documentation, so `[struct@Foo]`\n will be rendered as `Foo`.\n \n You can also disambiguate for functions by adding `()` after the function name,\n or for macros by adding `!` after the macro name:\n \n ```rust\n-/// See also: [`Foo`](struct@Foo)\n-struct Bar;\n+/// This is different from [`foo!`]\n+fn foo() {}\n \n-/// This is different from [`Foo()`]\n-struct Foo {}\n-\n-fn Foo() {}\n+/// This is different from [`foo()`]\n+macro_rules! foo {\n+  () => {}\n+}\n ```\n \n ## Warnings, re-exports, and scoping\n \n-Links are resolved in the current module scope, even when re-exported. If a link from another\n-crate fails to resolve, no warning is given.\n+Links are resolved in the scope of the module where the item is defined, even\n+when the item is re-exported. If a link from another crate fails to resolve, no\n+warning is given.\n \n-When re-exporting an item, rustdoc allows additional documentation to it. That documentation will\n-be resolved in the new scope, not the original, allowing you to link to items in the current\n-crate. The new links will still give a warning if they fail to resolve.\n+When re-exporting an item, rustdoc allows adding additional documentation to it.\n+That additional documentation will be resolved in scope of the re-export, not\n+the original, allowing you to link to items in the new crate. The new links\n+will still give a warning if they fail to resolve.\n \n ```rust\n /// See also [foo()]\n@@ -130,7 +146,7 @@ pub use std::process::Command;\n pub fn foo() {}\n ```\n \n-This is especially useful for proc-macros, which must always be in their own dedicated crate.\n+This is especially useful for proc-macros, which must always be defined in their own dedicated crate.\n \n Note: Because of how `macro_rules!` macros are scoped in Rust, the intra-doc links of a\n `macro_rules!` macro will be resolved [relative to the crate root][#72243], as opposed to the"}]}