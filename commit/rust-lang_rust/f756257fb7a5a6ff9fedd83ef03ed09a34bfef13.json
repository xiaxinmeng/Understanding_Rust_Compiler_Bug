{"sha": "f756257fb7a5a6ff9fedd83ef03ed09a34bfef13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NTYyNTdmYjdhNWE2ZmY5ZmVkZDgzZWYwM2VkMDlhMzRiZmVmMTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-10T23:26:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-19T20:17:54Z"}, "message": "Do not interpret mismatches from pretty-printed `$crate` as token stream invalidation", "tree": {"sha": "337ab0a2892788d508537d4d81d24bb9e5cd12a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/337ab0a2892788d508537d4d81d24bb9e5cd12a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13", "html_url": "https://github.com/rust-lang/rust/commit/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c66286a9a3240309cc5474478ad0a2186e2bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c66286a9a3240309cc5474478ad0a2186e2bce", "html_url": "https://github.com/rust-lang/rust/commit/69c66286a9a3240309cc5474478ad0a2186e2bce"}], "stats": {"total": 110, "additions": 50, "deletions": 60}, "files": [{"sha": "badcc4ed8762d10e63f3492b2a1906417e07ad35", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f756257fb7a5a6ff9fedd83ef03ed09a34bfef13", "patch": "@@ -633,7 +633,9 @@ impl Token {\n             (&Shebang(a), &Shebang(b)) => a == b,\n \n             (&Lifetime(a), &Lifetime(b)) => a.name == b.name,\n-            (&Ident(a, b), &Ident(c, d)) => a.name == c.name && b == d,\n+            (&Ident(a, b), &Ident(c, d)) => b == d && (a.name == c.name ||\n+                                                       a.name == keywords::DollarCrate.name() ||\n+                                                       c.name == keywords::DollarCrate.name()),\n \n             (&Literal(ref a, b), &Literal(ref c, d)) => {\n                 b == d && a.probably_equal_for_proc_macro(c)"}, {"sha": "013ecd3d343c28c6c0422db40938956421e2e912", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=f756257fb7a5a6ff9fedd83ef03ed09a34bfef13", "patch": "@@ -348,7 +348,9 @@ impl TokenStream {\n                 | TokenTree::Token(_, Token::Semi)\n                 // The pretty printer collapses whitespace arbitrarily and can\n                 // introduce whitespace from `NoDelim`.\n-                | TokenTree::Token(_, Token::Whitespace) => false,\n+                | TokenTree::Token(_, Token::Whitespace)\n+                // The pretty printer can turn `$crate` into `::crate_name`\n+                | TokenTree::Token(_, Token::ModSep) => false,\n                 _ => true\n             }\n         }"}, {"sha": "75d3e17802ebdfec32d8cd95ca2ec3e86db2a21c", "filename": "src/test/ui/proc-macro/dollar-crate.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr?ref=f756257fb7a5a6ff9fedd83ef03ed09a34bfef13", "patch": "@@ -2,7 +2,10 @@ error[E0428]: the name `D` is defined multiple times\n   --> $DIR/dollar-crate.rs:23:13\n    |\n LL |             struct D($crate::S); //~ ERROR the name `D` is defined multiple times\n-   |             ^^^^^^^^^^^^^^^^^^^^ `D` redefined here\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+   |             |\n+   |             `D` redefined here\n+   |             previous definition of the type `D` here\n ...\n LL |     local!();\n    |     --------- in this macro invocation\n@@ -13,7 +16,10 @@ error[E0428]: the name `D` is defined multiple times\n   --> $DIR/dollar-crate.rs:31:5\n    |\n LL |     dollar_crate_external::external!(); //~ ERROR the name `D` is defined multiple times\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `D` redefined here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `D` redefined here\n+   |     previous definition of the type `D` here\n    |\n    = note: `D` must be defined only once in the type namespace of this module\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "c47b3603f41c033fc1ac052168b51149322717f1", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 36, "deletions": 56, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f756257fb7a5a6ff9fedd83ef03ed09a34bfef13/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=f756257fb7a5a6ff9fedd83ef03ed09a34bfef13", "patch": "@@ -42,80 +42,80 @@ ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(crate::S);\n ATTRIBUTE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Ident {\n         ident: \"A\",\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n-                ident: \"crate\",\n-                span: #0 bytes(0..0)\n+                ident: \"$crate\",\n+                span: #2 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             }\n         ],\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     }\n ]\n DERIVE INPUT (PRETTY-PRINTED): struct D(crate::S);\n DERIVE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Ident {\n         ident: \"D\",\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n-                ident: \"crate\",\n-                span: #0 bytes(0..0)\n+                ident: \"$crate\",\n+                span: #2 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             }\n         ],\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     }\n ]\n PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n@@ -162,99 +162,79 @@ ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(::dollar_crate_external::S);\n ATTRIBUTE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0)\n+        span: #10 bytes(LO..HI)\n     },\n     Ident {\n         ident: \"A\",\n-        span: #0 bytes(0..0)\n+        span: #10 bytes(LO..HI)\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n-            Punct {\n-                ch: ':',\n-                spacing: Joint,\n-                span: #0 bytes(0..0)\n-            },\n-            Punct {\n-                ch: ':',\n-                spacing: Alone,\n-                span: #0 bytes(0..0)\n-            },\n             Ident {\n-                ident: \"dollar_crate_external\",\n-                span: #0 bytes(0..0)\n+                ident: \"$crate\",\n+                span: #10 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #0 bytes(0..0)\n+                span: #10 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #0 bytes(0..0)\n+                span: #10 bytes(LO..HI)\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #0 bytes(0..0)\n+                span: #10 bytes(LO..HI)\n             }\n         ],\n-        span: #0 bytes(0..0)\n+        span: #10 bytes(LO..HI)\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0)\n+        span: #10 bytes(LO..HI)\n     }\n ]\n DERIVE INPUT (PRETTY-PRINTED): struct D(::dollar_crate_external::S);\n DERIVE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0)\n+        span: #10 bytes(LO..HI)\n     },\n     Ident {\n         ident: \"D\",\n-        span: #0 bytes(0..0)\n+        span: #10 bytes(LO..HI)\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n-            Punct {\n-                ch: ':',\n-                spacing: Joint,\n-                span: #0 bytes(0..0)\n-            },\n-            Punct {\n-                ch: ':',\n-                spacing: Alone,\n-                span: #0 bytes(0..0)\n-            },\n             Ident {\n-                ident: \"dollar_crate_external\",\n-                span: #0 bytes(0..0)\n+                ident: \"$crate\",\n+                span: #10 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #0 bytes(0..0)\n+                span: #10 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #0 bytes(0..0)\n+                span: #10 bytes(LO..HI)\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #0 bytes(0..0)\n+                span: #10 bytes(LO..HI)\n             }\n         ],\n-        span: #0 bytes(0..0)\n+        span: #10 bytes(LO..HI)\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0)\n+        span: #10 bytes(LO..HI)\n     }\n ]"}]}