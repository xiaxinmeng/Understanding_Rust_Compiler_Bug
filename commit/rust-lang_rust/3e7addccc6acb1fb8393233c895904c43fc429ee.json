{"sha": "3e7addccc6acb1fb8393233c895904c43fc429ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlN2FkZGNjYzZhY2IxZmI4MzkzMjMzYzg5NTkwNGM0M2ZjNDI5ZWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-17T04:46:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T04:46:57Z"}, "message": "Rollup merge of #69186 - petrochenkov:kwrules, r=Centril\n\n[tiny] parser: `macro_rules` is a weak keyword\n\nr? @Centril", "tree": {"sha": "d362c7f34103c77da8a2c9d6875f3e96847beb96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d362c7f34103c77da8a2c9d6875f3e96847beb96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7addccc6acb1fb8393233c895904c43fc429ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeShrCCRBK7hj4Ov3rIwAAdHIIAI3O193HL4+6PMHSt1WGd/6v\nrTOm3LcRsFxs5wZCx7ZSdjs776uvWwYcQGQdtBsxssFXiPjiUuCV26nvk8zoUeQZ\nWB21SuvNNhiG0yHjgKaFe2waxfSXcUMmAWtg+scWMDnHv9taxk/eS4EHEJjjSx2v\nVJB4zniUO5uXytPs+gAzr3IMz9yz6zQ/nXdmCGxh8zRbSWYd7KAWeQqsV+qocYIU\nUiSA0kvCMf2PGRTio1VvRyx512EEJFB2G6jCC4RDOTg+vgHvxIojb10rnF9G6aQn\n4tpKHfMRCJTFTQkBJI4yaAC4h7ncPBkzkj+x3s+XRaPxVouA0ydWZeE0dSI1ryQ=\n=Ugm9\n-----END PGP SIGNATURE-----\n", "payload": "tree d362c7f34103c77da8a2c9d6875f3e96847beb96\nparent 5f0c59338667a06a0cdaad88bcfdd46d65bccf8d\nparent dcad07af8aa831344fd3be353c71379854637c21\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1581914817 +0900\ncommitter GitHub <noreply@github.com> 1581914817 +0900\n\nRollup merge of #69186 - petrochenkov:kwrules, r=Centril\n\n[tiny] parser: `macro_rules` is a weak keyword\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7addccc6acb1fb8393233c895904c43fc429ee", "html_url": "https://github.com/rust-lang/rust/commit/3e7addccc6acb1fb8393233c895904c43fc429ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7addccc6acb1fb8393233c895904c43fc429ee/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f0c59338667a06a0cdaad88bcfdd46d65bccf8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0c59338667a06a0cdaad88bcfdd46d65bccf8d", "html_url": "https://github.com/rust-lang/rust/commit/5f0c59338667a06a0cdaad88bcfdd46d65bccf8d"}, {"sha": "dcad07af8aa831344fd3be353c71379854637c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcad07af8aa831344fd3be353c71379854637c21", "html_url": "https://github.com/rust-lang/rust/commit/dcad07af8aa831344fd3be353c71379854637c21"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "10cdceefdf5798d195f096b67d893478d3d3b913", "filename": "src/librustc_expand/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e7addccc6acb1fb8393233c895904c43fc429ee/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7addccc6acb1fb8393233c895904c43fc429ee/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs?ref=3e7addccc6acb1fb8393233c895904c43fc429ee", "patch": "@@ -109,7 +109,7 @@ use crate::mbe::{KleeneToken, TokenTree};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::lint::builtin::META_VARIABLE_MISUSE;\n use rustc_session::parse::ParseSess;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::kw;\n use rustc_span::{symbol::Ident, MultiSpan, Span};\n use syntax::ast::NodeId;\n use syntax::token::{DelimToken, Token, TokenKind};\n@@ -392,7 +392,7 @@ fn check_nested_occurrences(\n                 NestedMacroState::Empty,\n                 &TokenTree::Token(Token { kind: TokenKind::Ident(name, false), .. }),\n             ) => {\n-                if name == sym::macro_rules {\n+                if name == kw::MacroRules {\n                     state = NestedMacroState::MacroRules;\n                 } else if name == kw::Macro {\n                     state = NestedMacroState::Macro;"}, {"sha": "4713c8dcd9a3b3e159f3040a8593cc4851848cd4", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e7addccc6acb1fb8393233c895904c43fc429ee/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7addccc6acb1fb8393233c895904c43fc429ee/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=3e7addccc6acb1fb8393233c895904c43fc429ee", "patch": "@@ -65,7 +65,7 @@ fn string_to_tts_macro() {\n \n         match tts {\n             [TokenTree::Token(Token { kind: token::Ident(name_macro_rules, false), .. }), TokenTree::Token(Token { kind: token::Not, .. }), TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }), TokenTree::Delimited(_, macro_delim, macro_tts)]\n-                if name_macro_rules == &sym::macro_rules && name_zip.as_str() == \"zip\" =>\n+                if name_macro_rules == &kw::MacroRules && name_zip.as_str() == \"zip\" =>\n             {\n                 let tts = &macro_tts.trees().collect::<Vec<_>>();\n                 match &tts[..] {"}, {"sha": "d7b8d9778f0d2690eb6f15ace7ad6e636ffcee15", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e7addccc6acb1fb8393233c895904c43fc429ee/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7addccc6acb1fb8393233c895904c43fc429ee/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=3e7addccc6acb1fb8393233c895904c43fc429ee", "patch": "@@ -1343,14 +1343,14 @@ impl<'a> Parser<'a> {\n \n     /// Is this unambiguously the start of a `macro_rules! foo` item defnition?\n     fn is_macro_rules_item(&mut self) -> bool {\n-        self.check_keyword(sym::macro_rules)\n+        self.check_keyword(kw::MacroRules)\n             && self.look_ahead(1, |t| *t == token::Not)\n             && self.look_ahead(2, |t| t.is_ident())\n     }\n \n     /// Parses a legacy `macro_rules! foo { ... }` declarative macro.\n     fn parse_item_macro_rules(&mut self, vis: &Visibility) -> PResult<'a, ItemInfo> {\n-        self.expect_keyword(sym::macro_rules)?; // `macro_rules`\n+        self.expect_keyword(kw::MacroRules)?; // `macro_rules`\n         self.expect(&token::Not)?; // `!`\n \n         let ident = self.parse_ident()?;"}, {"sha": "3c419334d421e4a19fdfd6fbaf50eb54b1d803a5", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e7addccc6acb1fb8393233c895904c43fc429ee/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7addccc6acb1fb8393233c895904c43fc429ee/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=3e7addccc6acb1fb8393233c895904c43fc429ee", "patch": "@@ -97,6 +97,7 @@ symbols! {\n         Auto:               \"auto\",\n         Catch:              \"catch\",\n         Default:            \"default\",\n+        MacroRules:         \"macro_rules\",\n         Raw:                \"raw\",\n         Union:              \"union\",\n     }\n@@ -429,7 +430,6 @@ symbols! {\n         macro_lifetime_matcher,\n         macro_literal_matcher,\n         macro_reexport,\n-        macro_rules,\n         macros_in_extern,\n         macro_use,\n         macro_vis_matcher,\n@@ -1071,6 +1071,9 @@ pub mod sym {\n \n     symbols!();\n \n+    // Used from a macro in `librustc_feature/accepted.rs`\n+    pub use super::kw::MacroRules as macro_rules;\n+\n     // Get the symbol for an integer. The first few non-negative integers each\n     // have a static symbol and therefore are fast.\n     pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {"}]}