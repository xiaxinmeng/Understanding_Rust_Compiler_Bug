{"sha": "a05ed9936d97414efdfd460f1e25505c366689d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNWVkOTkzNmQ5NzQxNGVmZGZkNDYwZjFlMjU1MDVjMzY2Njg5ZDM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-11T01:10:12Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-17T16:07:16Z"}, "message": "std: Remove two internal `str_internals` functions\n\nThese were just exposed to be used elsewhere at some point, but neither is\ncurrently being used so just make them private again.", "tree": {"sha": "6c2278bb6ef3bd2416c715a331fb4f1808544bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c2278bb6ef3bd2416c715a331fb4f1808544bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a05ed9936d97414efdfd460f1e25505c366689d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a05ed9936d97414efdfd460f1e25505c366689d3", "html_url": "https://github.com/rust-lang/rust/commit/a05ed9936d97414efdfd460f1e25505c366689d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a05ed9936d97414efdfd460f1e25505c366689d3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55c366a8ac33307859ae6190d2788270a885f90", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55c366a8ac33307859ae6190d2788270a885f90", "html_url": "https://github.com/rust-lang/rust/commit/f55c366a8ac33307859ae6190d2788270a885f90"}], "stats": {"total": 31, "additions": 2, "deletions": 29}, "files": [{"sha": "7092df7b4c2c4f4f2bb2da692ca1bc3bf935570a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a05ed9936d97414efdfd460f1e25505c366689d3/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05ed9936d97414efdfd460f1e25505c366689d3/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a05ed9936d97414efdfd460f1e25505c366689d3", "patch": "@@ -227,9 +227,8 @@ pub fn next_code_point(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n \n /// Reads the last code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n-#[unstable(feature = \"str_internals\")]\n #[inline]\n-pub fn next_code_point_reverse(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n+fn next_code_point_reverse(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n     // Decode UTF-8\n     let w = match bytes.next_back() {\n         None => return None,\n@@ -1873,8 +1872,7 @@ impl AsRef<[u8]> for str {\n /// Pluck a code point out of a UTF-8-like byte slice and return the\n /// index of the next code point.\n #[inline]\n-#[unstable(feature = \"str_internals\")]\n-pub fn char_range_at_raw(bytes: &[u8], i: usize) -> (u32, usize) {\n+fn char_range_at_raw(bytes: &[u8], i: usize) -> (u32, usize) {\n     if bytes[i] < 128 {\n         return (bytes[i] as u32, i + 1);\n     }"}, {"sha": "428c8560d8847087c69143806f8404c6fdca385d", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a05ed9936d97414efdfd460f1e25505c366689d3/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05ed9936d97414efdfd460f1e25505c366689d3/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=a05ed9936d97414efdfd460f1e25505c366689d3", "patch": "@@ -480,31 +480,6 @@ impl Wtf8 {\n         }\n     }\n \n-    /// Returns the code point at `position`.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `position` is not at a code point boundary,\n-    /// or is beyond the end of the string.\n-    #[inline]\n-    pub fn code_point_at(&self, position: usize) -> CodePoint {\n-        let (code_point, _) = self.code_point_range_at(position);\n-        code_point\n-    }\n-\n-    /// Returns the code point at `position`\n-    /// and the position of the next code point.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `position` is not at a code point boundary,\n-    /// or is beyond the end of the string.\n-    #[inline]\n-    pub fn code_point_range_at(&self, position: usize) -> (CodePoint, usize) {\n-        let (c, n) = char_range_at_raw(&self.bytes, position);\n-        (CodePoint { value: c }, n)\n-    }\n-\n     /// Returns an iterator for the string\u2019s code points.\n     #[inline]\n     pub fn code_points(&self) -> Wtf8CodePoints {"}]}