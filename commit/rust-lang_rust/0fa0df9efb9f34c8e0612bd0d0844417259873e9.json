{"sha": "0fa0df9efb9f34c8e0612bd0d0844417259873e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYTBkZjllZmI5ZjM0YzhlMDYxMmJkMGQwODQ0NDE3MjU5ODczZTk=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-01-07T17:13:31Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-01-07T18:10:59Z"}, "message": "Span help without suggestion", "tree": {"sha": "792ec8be909c6c5d0f77f9c0634a517641124572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/792ec8be909c6c5d0f77f9c0634a517641124572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fa0df9efb9f34c8e0612bd0d0844417259873e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa0df9efb9f34c8e0612bd0d0844417259873e9", "html_url": "https://github.com/rust-lang/rust/commit/0fa0df9efb9f34c8e0612bd0d0844417259873e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fa0df9efb9f34c8e0612bd0d0844417259873e9/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae8b08e323b7dcfad331af18bebbeb68757a904", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae8b08e323b7dcfad331af18bebbeb68757a904", "html_url": "https://github.com/rust-lang/rust/commit/8ae8b08e323b7dcfad331af18bebbeb68757a904"}], "stats": {"total": 105, "additions": 23, "deletions": 82}, "files": [{"sha": "4de256e9e72fddd4459108d6a7676636a27473ff", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fa0df9efb9f34c8e0612bd0d0844417259873e9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fa0df9efb9f34c8e0612bd0d0844417259873e9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0fa0df9efb9f34c8e0612bd0d0844417259873e9", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 345 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 346 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "6b5b4e4c4f0bb562d1dedaf8bbe890d5df5bd1c2", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0fa0df9efb9f34c8e0612bd0d0844417259873e9/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa0df9efb9f34c8e0612bd0d0844417259873e9/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=0fa0df9efb9f34c8e0612bd0d0844417259873e9", "patch": "@@ -3,7 +3,8 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     expr_block, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n-    snippet_with_applicability, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty,\n+    snippet_with_applicability, span_help_and_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint,\n+    walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n@@ -267,7 +268,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n             check_wild_err_arm(cx, ex, arms);\n             check_wild_enum_match(cx, ex, arms);\n             check_match_as_ref(cx, ex, arms, expr);\n-            check_wild_in_or_pats(cx, ex, arms);\n+            check_wild_in_or_pats(cx, arms);\n         }\n         if let ExprKind::Match(ref ex, ref arms, _) = expr.kind {\n             check_match_ref_pats(cx, ex, arms, expr);\n@@ -686,44 +687,17 @@ fn check_match_as_ref(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>],\n     }\n }\n \n-fn check_wild_in_or_pats(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n-    let mut is_non_exhaustive_enum = false;\n-    let ty = cx.tables.expr_ty(ex);\n-    if ty.is_enum() {\n-        if let ty::Adt(def, _) = ty.kind {\n-            if def.is_variant_list_non_exhaustive() {\n-                is_non_exhaustive_enum = true;\n-            }\n-        }\n-    }\n-\n+fn check_wild_in_or_pats(cx: &LateContext<'_, '_>, arms: &[Arm<'_>]) {\n     for arm in arms {\n         if let PatKind::Or(ref fields) = arm.pat.kind {\n             // look for multiple fields in this arm that contains at least one Wild pattern\n             if fields.len() > 1 && fields.iter().any(is_wild) {\n-                span_lint_and_then(\n+                span_help_and_lint(\n                     cx,\n                     WILDCARD_IN_OR_PATTERNS,\n                     arm.pat.span,\n                     \"wildcard pattern covers any other pattern as it will match anyway.\",\n-                    |db| {\n-                        // handle case where a non exhaustive enum is being used\n-                        if is_non_exhaustive_enum {\n-                            db.span_suggestion(\n-                                arm.pat.span,\n-                                \"consider handling `_` separately.\",\n-                                \"_ => ...\".to_string(),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        } else {\n-                            db.span_suggestion(\n-                                arm.pat.span,\n-                                \"consider replacing with wildcard pattern only\",\n-                                \"_\".to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    },\n+                    \"Consider handling `_` separately.\",\n                 );\n             }\n         }"}, {"sha": "3cc4efb9b05712e81867b7255b42a9382ebe58cd", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fa0df9efb9f34c8e0612bd0d0844417259873e9/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa0df9efb9f34c8e0612bd0d0844417259873e9/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0fa0df9efb9f34c8e0612bd0d0844417259873e9", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 345] = [\n+pub const ALL_LINTS: [Lint; 346] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\","}, {"sha": "40d4a6e8fac537c4697dee424de20605a1f48a9c", "filename": "tests/ui/wild_in_or_pats.fixed", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8ae8b08e323b7dcfad331af18bebbeb68757a904/tests%2Fui%2Fwild_in_or_pats.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ae8b08e323b7dcfad331af18bebbeb68757a904/tests%2Fui%2Fwild_in_or_pats.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwild_in_or_pats.fixed?ref=8ae8b08e323b7dcfad331af18bebbeb68757a904", "patch": "@@ -1,38 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::wildcard_in_or_patterns)]\n-\n-fn main() {\n-    match \"foo\" {\n-        \"a\" => {\n-            dbg!(\"matched a\");\n-        },\n-        _ => {\n-            dbg!(\"matched (bar or) wild\");\n-        },\n-    };\n-    match \"foo\" {\n-        \"a\" => {\n-            dbg!(\"matched a\");\n-        },\n-        _ => {\n-            dbg!(\"matched (bar or bar2 or) wild\");\n-        },\n-    };\n-    match \"foo\" {\n-        \"a\" => {\n-            dbg!(\"matched a\");\n-        },\n-        _ => {\n-            dbg!(\"matched (bar or) wild\");\n-        },\n-    };\n-    match \"foo\" {\n-        \"a\" => {\n-            dbg!(\"matched a\");\n-        },\n-        _ => {\n-            dbg!(\"matched (bar or) wild\");\n-        },\n-    };\n-}"}, {"sha": "ad600f125772f515964a78f96bafbe560c58997d", "filename": "tests/ui/wild_in_or_pats.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fa0df9efb9f34c8e0612bd0d0844417259873e9/tests%2Fui%2Fwild_in_or_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa0df9efb9f34c8e0612bd0d0844417259873e9/tests%2Fui%2Fwild_in_or_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwild_in_or_pats.rs?ref=0fa0df9efb9f34c8e0612bd0d0844417259873e9", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![warn(clippy::wildcard_in_or_patterns)]\n \n fn main() {"}, {"sha": "33c34cbbd4088bb23fb9b218fae9cb58b199d78c", "filename": "tests/ui/wild_in_or_pats.stderr", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0fa0df9efb9f34c8e0612bd0d0844417259873e9/tests%2Fui%2Fwild_in_or_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fa0df9efb9f34c8e0612bd0d0844417259873e9/tests%2Fui%2Fwild_in_or_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwild_in_or_pats.stderr?ref=0fa0df9efb9f34c8e0612bd0d0844417259873e9", "patch": "@@ -1,28 +1,35 @@\n error: wildcard pattern covers any other pattern as it will match anyway.\n-  --> $DIR/wild_in_or_pats.rs:10:9\n+  --> $DIR/wild_in_or_pats.rs:8:9\n    |\n LL |         \"bar\" | _ => {\n-   |         ^^^^^^^^^ help: consider replacing with wildcard pattern only: `_`\n+   |         ^^^^^^^^^\n    |\n    = note: `-D clippy::wildcard-in-or-patterns` implied by `-D warnings`\n+   = help: Consider handling `_` separately.\n \n error: wildcard pattern covers any other pattern as it will match anyway.\n-  --> $DIR/wild_in_or_pats.rs:18:9\n+  --> $DIR/wild_in_or_pats.rs:16:9\n    |\n LL |         \"bar\" | \"bar2\" | _ => {\n-   |         ^^^^^^^^^^^^^^^^^^ help: consider replacing with wildcard pattern only: `_`\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Consider handling `_` separately.\n \n error: wildcard pattern covers any other pattern as it will match anyway.\n-  --> $DIR/wild_in_or_pats.rs:26:9\n+  --> $DIR/wild_in_or_pats.rs:24:9\n    |\n LL |         _ | \"bar\" | _ => {\n-   |         ^^^^^^^^^^^^^ help: consider replacing with wildcard pattern only: `_`\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = help: Consider handling `_` separately.\n \n error: wildcard pattern covers any other pattern as it will match anyway.\n-  --> $DIR/wild_in_or_pats.rs:34:9\n+  --> $DIR/wild_in_or_pats.rs:32:9\n    |\n LL |         _ | \"bar\" => {\n-   |         ^^^^^^^^^ help: consider replacing with wildcard pattern only: `_`\n+   |         ^^^^^^^^^\n+   |\n+   = help: Consider handling `_` separately.\n \n error: aborting due to 4 previous errors\n "}]}