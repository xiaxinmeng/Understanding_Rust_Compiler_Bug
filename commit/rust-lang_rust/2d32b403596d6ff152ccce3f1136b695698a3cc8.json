{"sha": "2d32b403596d6ff152ccce3f1136b695698a3cc8", "node_id": "C_kwDOAAsO6NoAKDJkMzJiNDAzNTk2ZDZmZjE1MmNjY2UzZjExMzZiNjk1Njk4YTNjYzg", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-11-30T16:15:49Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-11-30T16:23:01Z"}, "message": "Don't lint `explicit_auto_deref` when the initial type is neither a reference, nor a receiver", "tree": {"sha": "34a761bc5abb5c145d9b8699db6945fcda1a2cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a761bc5abb5c145d9b8699db6945fcda1a2cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d32b403596d6ff152ccce3f1136b695698a3cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d32b403596d6ff152ccce3f1136b695698a3cc8", "html_url": "https://github.com/rust-lang/rust/commit/2d32b403596d6ff152ccce3f1136b695698a3cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d32b403596d6ff152ccce3f1136b695698a3cc8/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78589ffad2c973f7863fdabc2df6e8ab2b54110f", "url": "https://api.github.com/repos/rust-lang/rust/commits/78589ffad2c973f7863fdabc2df6e8ab2b54110f", "html_url": "https://github.com/rust-lang/rust/commit/78589ffad2c973f7863fdabc2df6e8ab2b54110f"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "57c30661e88239ea035b7871dc083270517400db", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d32b403596d6ff152ccce3f1136b695698a3cc8/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d32b403596d6ff152ccce3f1136b695698a3cc8/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=2d32b403596d6ff152ccce3f1136b695698a3cc8", "patch": "@@ -289,23 +289,24 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n                 let (position, adjustments) = walk_parents(cx, &mut self.possible_borrowers, expr, &self.msrv);\n                 match kind {\n                     RefOp::Deref => {\n+                        let sub_ty = typeck.expr_ty(sub_expr);\n                         if let Position::FieldAccess {\n                             name,\n                             of_union: false,\n                         } = position\n-                            && !ty_contains_field(typeck.expr_ty(sub_expr), name)\n+                            && !ty_contains_field(sub_ty, name)\n                         {\n                             self.state = Some((\n                                 State::ExplicitDerefField { name },\n                                 StateData { span: expr.span, hir_id: expr.hir_id, position },\n                             ));\n-                        } else if position.is_deref_stable() {\n+                        } else if position.is_deref_stable() && sub_ty.is_ref() {\n                             self.state = Some((\n                                 State::ExplicitDeref { mutability: None },\n                                 StateData { span: expr.span, hir_id: expr.hir_id, position },\n                             ));\n                         }\n-                    }\n+                    },\n                     RefOp::Method(target_mut)\n                         if !is_lint_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n                             && position.lint_explicit_deref() =>\n@@ -320,7 +321,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n                             StateData {\n                                 span: expr.span,\n                                 hir_id: expr.hir_id,\n-                                position\n+                                position,\n                             },\n                         ));\n                     },\n@@ -394,7 +395,11 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n                                     msg,\n                                     snip_expr,\n                                 }),\n-                                StateData { span: expr.span, hir_id: expr.hir_id, position },\n+                                StateData {\n+                                    span: expr.span,\n+                                    hir_id: expr.hir_id,\n+                                    position,\n+                                },\n                             ));\n                         } else if position.is_deref_stable()\n                             // Auto-deref doesn't combine with other adjustments\n@@ -406,7 +411,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n                                 StateData {\n                                     span: expr.span,\n                                     hir_id: expr.hir_id,\n-                                    position\n+                                    position,\n                                 },\n                             ));\n                         }"}, {"sha": "475fae5e823b31e66a484cae692c3ed6ab0ed2b6", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d32b403596d6ff152ccce3f1136b695698a3cc8/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d32b403596d6ff152ccce3f1136b695698a3cc8/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=2d32b403596d6ff152ccce3f1136b695698a3cc8", "patch": "@@ -277,4 +277,8 @@ fn main() {\n         unimplemented!()\n     }\n     let _: String = takes_assoc(&*String::new());\n+\n+    // Issue #9901\n+    fn takes_ref(_: &i32) {}\n+    takes_ref(*Box::new(&0i32));\n }"}, {"sha": "c1894258f4d84312d891f55472908489c5173aba", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d32b403596d6ff152ccce3f1136b695698a3cc8/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d32b403596d6ff152ccce3f1136b695698a3cc8/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=2d32b403596d6ff152ccce3f1136b695698a3cc8", "patch": "@@ -277,4 +277,8 @@ fn main() {\n         unimplemented!()\n     }\n     let _: String = takes_assoc(&*String::new());\n+\n+    // Issue #9901\n+    fn takes_ref(_: &i32) {}\n+    takes_ref(*Box::new(&0i32));\n }"}]}