{"sha": "3fc79fde63cfa8472e8c867c0a54de58cffb5cd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzc5ZmRlNjNjZmE4NDcyZThjODY3YzBhNTRkZTU4Y2ZmYjVjZDA=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-23T19:31:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-23T19:31:11Z"}, "message": "Rollup merge of #87322 - chazkiker2:fix/suggestion-ref-sync-send, r=estebank\n\nfix: clarify suggestion that `&T` must refer to `T: Sync` for `&T: Send`\n\n### Description\n\n- [x] fix #86507\n- [x] add UI test for relevant code from issue\n- [x] change `rustc_trait_selection/src/traits/error_reporting/suggestions.rs` to include a more clear suggestion when `&T` fails to satisfy `Send` bounds due to the fact that `T` fails to implement `Sync`\n- [x] update UI test in Clippy: `src/tools/tests/ui/future_not_send.stderr`", "tree": {"sha": "3c2fd5582b70f542e5fb60d4826cb78097efd37a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c2fd5582b70f542e5fb60d4826cb78097efd37a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+xj/CRBK7hj4Ov3rIwAAI2QIABLwugKCN2V8oJfDLVKhu9Nb\nIQKeNvxP0LxB5JsEjfxPdwlls6sOzqmsG9OX0JfinToPpev7l0298vs0R2dbVYTZ\nUGLG/b2OB3+aksPfJKnQ/WA/pZ5fPH8mBjgDdD4dC2DcW4QrZ/tS/ogLYglbnQv0\n3dOhVUMsE1jg8jl5DYdO1ns+hTbXDLQxzVX2VqaWN8HTY1PDXsVxzU7IBdQGfrNU\n8/81LpX1RejWCI/jAYJHxB7TKWnkadMk7mn2INeeZXhorBcS9UHZXPB6CTt/tW9y\n5KGlXrO4XcveHMfTIMfSr3ExA9Tx49RohfQp7lDmN33JxvMpeBUE7YM49n6nw/w=\n=y7IG\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c2fd5582b70f542e5fb60d4826cb78097efd37a\nparent 82a14e57e7754310dd78c08386d801a33555d2f6\nparent a1518f091552afdf370c699a359af0b7d34e402d\nauthor Yuki Okushi <jtitor@2k36.org> 1627068671 +0900\ncommitter GitHub <noreply@github.com> 1627068671 +0900\n\nRollup merge of #87322 - chazkiker2:fix/suggestion-ref-sync-send, r=estebank\n\nfix: clarify suggestion that `&T` must refer to `T: Sync` for `&T: Send`\n\n### Description\n\n- [x] fix #86507\n- [x] add UI test for relevant code from issue\n- [x] change `rustc_trait_selection/src/traits/error_reporting/suggestions.rs` to include a more clear suggestion when `&T` fails to satisfy `Send` bounds due to the fact that `T` fails to implement `Sync`\n- [x] update UI test in Clippy: `src/tools/tests/ui/future_not_send.stderr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0", "html_url": "https://github.com/rust-lang/rust/commit/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a14e57e7754310dd78c08386d801a33555d2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a14e57e7754310dd78c08386d801a33555d2f6", "html_url": "https://github.com/rust-lang/rust/commit/82a14e57e7754310dd78c08386d801a33555d2f6"}, {"sha": "a1518f091552afdf370c699a359af0b7d34e402d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1518f091552afdf370c699a359af0b7d34e402d", "html_url": "https://github.com/rust-lang/rust/commit/a1518f091552afdf370c699a359af0b7d34e402d"}], "stats": {"total": 87, "additions": 80, "deletions": 7}, "files": [{"sha": "9a33875d6e493f293d9e1efb9c24004b2821681e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3fc79fde63cfa8472e8c867c0a54de58cffb5cd0", "patch": "@@ -1857,12 +1857,37 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n             }\n             GeneratorInteriorOrUpvar::Upvar(upvar_span) => {\n+                // `Some(ref_ty)` if `target_ty` is `&T` and `T` fails to impl `Sync`\n+                let refers_to_non_sync = match target_ty.kind() {\n+                    ty::Ref(_, ref_ty, _) => match self.evaluate_obligation(&obligation) {\n+                        Ok(eval) if !eval.may_apply() => Some(ref_ty),\n+                        _ => None,\n+                    },\n+                    _ => None,\n+                };\n+\n+                let (span_label, span_note) = match refers_to_non_sync {\n+                    // if `target_ty` is `&T` and `T` fails to impl `Sync`,\n+                    // include suggestions to make `T: Sync` so that `&T: Send`\n+                    Some(ref_ty) => (\n+                        format!(\n+                            \"has type `{}` which {}, because `{}` is not `Sync`\",\n+                            target_ty, trait_explanation, ref_ty\n+                        ),\n+                        format!(\n+                            \"captured value {} because `&` references cannot be sent unless their referent is `Sync`\",\n+                            trait_explanation\n+                        ),\n+                    ),\n+                    None => (\n+                        format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n+                        format!(\"captured value {}\", trait_explanation),\n+                    ),\n+                };\n+\n                 let mut span = MultiSpan::from_span(upvar_span);\n-                span.push_span_label(\n-                    upvar_span,\n-                    format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-                );\n-                err.span_note(span, &format!(\"captured value {}\", trait_explanation));\n+                span.push_span_label(upvar_span, span_label);\n+                err.span_note(span, &span_note);\n             }\n         }\n "}, {"sha": "317f0317664b6733f3287fb87bc5cfdad7705738", "filename": "src/test/ui/async-await/issue-86507.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs?ref=3fc79fde63cfa8472e8c867c0a54de58cffb5cd0", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+\n+use ::core::pin::Pin;\n+use ::core::future::Future;\n+use ::core::marker::Send;\n+\n+trait Foo {\n+    fn bar<'me, 'async_trait, T: Send>(x: &'me T)\n+        -> Pin<Box<dyn Future<Output = ()> + Send + 'async_trait>>\n+        where 'me: 'async_trait;\n+}\n+\n+impl Foo for () {\n+    fn bar<'me, 'async_trait, T: Send>(x: &'me T)\n+        -> Pin<Box<dyn Future<Output = ()> + Send + 'async_trait>>\n+        where 'me:'async_trait {\n+            Box::pin( //~ ERROR future cannot be sent between threads safely\n+                async move {\n+                    let x = x;\n+                }\n+            )\n+         }\n+}\n+\n+fn main() { }"}, {"sha": "51e8f61085b22987afacccefb43e68d51c1e01f8", "filename": "src/test/ui/async-await/issue-86507.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr?ref=3fc79fde63cfa8472e8c867c0a54de58cffb5cd0", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-86507.rs:17:13\n+   |\n+LL | /             Box::pin(\n+LL | |                 async move {\n+LL | |                     let x = x;\n+LL | |                 }\n+LL | |             )\n+   | |_____________^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/issue-86507.rs:19:29\n+   |\n+LL |                     let x = x;\n+   |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n+   = note: required for the cast to the object type `dyn Future<Output = ()> + Send`\n+help: consider further restricting type parameter `T`\n+   |\n+LL |         where 'me:'async_trait, T: std::marker::Sync {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c734051ccf320b086567185414793a707c50a379", "filename": "src/tools/clippy/tests/ui/future_not_send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc79fde63cfa8472e8c867c0a54de58cffb5cd0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr?ref=3fc79fde63cfa8472e8c867c0a54de58cffb5cd0", "patch": "@@ -55,11 +55,11 @@ note: captured value is not `Send`\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                          ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n-note: captured value is not `Send`\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n   --> $DIR/future_not_send.rs:20:40\n    |\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n-   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`\n+   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`, because `std::cell::Cell<usize>` is not `Sync`\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely"}]}