{"sha": "3576b359339cd54b4f9edfbc76c0b5d1c7759047", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NzZiMzU5MzM5Y2Q1NGI0ZjllZGZiYzc2YzBiNWQxYzc3NTkwNDc=", "commit": {"author": {"name": "Alisdair Owens", "email": "awo101@zepler.net", "date": "2014-07-06T16:30:01Z"}, "committer": {"name": "Alisdair Owens", "email": "awo101@zepler.net", "date": "2014-07-09T06:46:12Z"}, "message": "Add example to Any documentation", "tree": {"sha": "0d505d18b701fd8d33d2888eaf89093a02865008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d505d18b701fd8d33d2888eaf89093a02865008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3576b359339cd54b4f9edfbc76c0b5d1c7759047", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3576b359339cd54b4f9edfbc76c0b5d1c7759047", "html_url": "https://github.com/rust-lang/rust/commit/3576b359339cd54b4f9edfbc76c0b5d1c7759047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3576b359339cd54b4f9edfbc76c0b5d1c7759047/comments", "author": {"login": "AlisdairO", "id": 6296622, "node_id": "MDQ6VXNlcjYyOTY2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6296622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlisdairO", "html_url": "https://github.com/AlisdairO", "followers_url": "https://api.github.com/users/AlisdairO/followers", "following_url": "https://api.github.com/users/AlisdairO/following{/other_user}", "gists_url": "https://api.github.com/users/AlisdairO/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlisdairO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlisdairO/subscriptions", "organizations_url": "https://api.github.com/users/AlisdairO/orgs", "repos_url": "https://api.github.com/users/AlisdairO/repos", "events_url": "https://api.github.com/users/AlisdairO/events{/privacy}", "received_events_url": "https://api.github.com/users/AlisdairO/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AlisdairO", "id": 6296622, "node_id": "MDQ6VXNlcjYyOTY2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6296622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlisdairO", "html_url": "https://github.com/AlisdairO", "followers_url": "https://api.github.com/users/AlisdairO/followers", "following_url": "https://api.github.com/users/AlisdairO/following{/other_user}", "gists_url": "https://api.github.com/users/AlisdairO/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlisdairO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlisdairO/subscriptions", "organizations_url": "https://api.github.com/users/AlisdairO/orgs", "repos_url": "https://api.github.com/users/AlisdairO/repos", "events_url": "https://api.github.com/users/AlisdairO/events{/privacy}", "received_events_url": "https://api.github.com/users/AlisdairO/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec3efa8055069e285a4bfcba892f8463ce925d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3efa8055069e285a4bfcba892f8463ce925d68", "html_url": "https://github.com/rust-lang/rust/commit/ec3efa8055069e285a4bfcba892f8463ce925d68"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "e0ac20d2fbf4263d9d49858eba17894369ad7b9c", "filename": "src/libcore/any.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3576b359339cd54b4f9edfbc76c0b5d1c7759047/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3576b359339cd54b4f9edfbc76c0b5d1c7759047/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=3576b359339cd54b4f9edfbc76c0b5d1c7759047", "patch": "@@ -13,12 +13,61 @@\n //! This module implements the `Any` trait, which enables dynamic typing\n //! of any `'static` type through runtime reflection.\n //!\n-//! `Any` itself can be used to get a `TypeId`, and has more features when used as a trait object.\n-//! As `&Any` (a borrowed trait object), it has the `is` and `as_ref` methods, to test if the\n-//! contained value is of a given type, and to get a reference to the inner value as a type. As\n-//! `&mut Any`, there is also the `as_mut` method, for getting a mutable reference to the inner\n-//! value. `Box<Any>` adds the `move` method, which will unwrap a `Box<T>` from the object.  See\n-//! the extension traits (`*Ext`) for the full details.\n+//! `Any` itself can be used to get a `TypeId`, and has more features when used\n+//! as a trait object. As `&Any` (a borrowed trait object), it has the `is` and\n+//! `as_ref` methods, to test if the contained value is of a given type, and to\n+//! get a reference to the inner value as a type. As`&mut Any`, there is also\n+//! the `as_mut` method, for getting a mutable reference to the inner value.\n+//! `Box<Any>` adds the `move` method, which will unwrap a `Box<T>` from the\n+//! object.  See the extension traits (`*Ext`) for the full details.\n+//!\n+//! Note that &Any is limited to testing whether a value is of a specified\n+//! concrete type, and cannot be used to test whether a type implements a trait.\n+//!\n+//! # Examples\n+//!\n+//! Consider a situation where we want to log out a value passed to a function.\n+//! We know the value we're working on implements Show, but we don't know its\n+//! concrete type.  We want to give special treatment to certain types: in this\n+//! case printing out the length of String values prior to their value.\n+//! We don't know the concrete type of our value at compile time, so we need to\n+//! use runtime reflection instead.\n+//!\n+//! ```rust\n+//! use std::fmt::Show;\n+//! use std::any::{Any, AnyRefExt};\n+//!\n+//! // Logger function for any type that implements Show.\n+//! fn log<T: Any+Show>(value: &T) {\n+//!     let value_any = value as &Any;\n+//!\n+//!     // try to convert our value to a String.  If successful, we want to\n+//!     // output the String's length as well as its value.  If not, it's a\n+//!     // different type: just print it out unadorned.\n+//!     match value_any.as_ref::<String>() {\n+//!         Some(as_string) => {\n+//!             println!(\"String ({}): {}\", as_string.len(), as_string);\n+//!         }\n+//!         None => {\n+//!             println!(\"{}\", value);\n+//!         }\n+//!     }\n+//! }\n+//!\n+//! // This function wants to log its parameter out prior to doing work with it.\n+//! fn do_work<T: Show>(value: &T) {\n+//!     log(value);\n+//!     // ...do some other work\n+//! }\n+//!\n+//! fn main() {\n+//!     let my_string = \"Hello World\".to_string();\n+//!     do_work(&my_string);\n+//!\n+//!     let my_i8: i8 = 100;\n+//!     do_work(&my_i8);\n+//! }\n+//! ```\n \n use mem::{transmute, transmute_copy};\n use option::{Option, Some, None};"}]}