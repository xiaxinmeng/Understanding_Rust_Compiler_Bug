{"sha": "3dbc1c34e694f38daeef741cfffc558606443c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmMxYzM0ZTY5NGYzOGRhZWVmNzQxY2ZmZmM1NTg2MDY0NDNjMTU=", "commit": {"author": {"name": "Scott Lawrence", "email": "bytbox@gmail.com", "date": "2014-01-27T23:29:50Z"}, "committer": {"name": "Scott Lawrence", "email": "bytbox@gmail.com", "date": "2014-01-29T14:15:42Z"}, "message": "Remove do keyword from test/", "tree": {"sha": "8d29041b4e76f661ffaa1061ced56108ab6bee0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d29041b4e76f661ffaa1061ced56108ab6bee0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbc1c34e694f38daeef741cfffc558606443c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbc1c34e694f38daeef741cfffc558606443c15", "html_url": "https://github.com/rust-lang/rust/commit/3dbc1c34e694f38daeef741cfffc558606443c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbc1c34e694f38daeef741cfffc558606443c15/comments", "author": {"login": "bytbox", "id": 160033, "node_id": "MDQ6VXNlcjE2MDAzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/160033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bytbox", "html_url": "https://github.com/bytbox", "followers_url": "https://api.github.com/users/bytbox/followers", "following_url": "https://api.github.com/users/bytbox/following{/other_user}", "gists_url": "https://api.github.com/users/bytbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/bytbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bytbox/subscriptions", "organizations_url": "https://api.github.com/users/bytbox/orgs", "repos_url": "https://api.github.com/users/bytbox/repos", "events_url": "https://api.github.com/users/bytbox/events{/privacy}", "received_events_url": "https://api.github.com/users/bytbox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bytbox", "id": 160033, "node_id": "MDQ6VXNlcjE2MDAzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/160033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bytbox", "html_url": "https://github.com/bytbox", "followers_url": "https://api.github.com/users/bytbox/followers", "following_url": "https://api.github.com/users/bytbox/following{/other_user}", "gists_url": "https://api.github.com/users/bytbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/bytbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bytbox/subscriptions", "organizations_url": "https://api.github.com/users/bytbox/orgs", "repos_url": "https://api.github.com/users/bytbox/repos", "events_url": "https://api.github.com/users/bytbox/events{/privacy}", "received_events_url": "https://api.github.com/users/bytbox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "html_url": "https://github.com/rust-lang/rust/commit/bb22ace3f0a3730555b89f19aa7b72d43a6cf892"}], "stats": {"total": 690, "additions": 191, "deletions": 499}, "files": [{"sha": "3bf084b5fdae7abde835fc93f5ebd5bf767a6c03", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -12,8 +12,8 @@ use std::task;\n \n pub fn foo<T:Send + Clone>(x: T) -> Port<T> {\n     let (p, c) = Chan::new();\n-    do task::spawn() {\n+    task::spawn(proc() {\n         c.send(x.clone());\n-    }\n+    });\n     p\n }"}, {"sha": "aa4e0f1ae5809bf5ca10efd4b3293e50777cb2e9", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -64,17 +64,17 @@ fn run(args: &[~str]) {\n         let to_child = to_child.clone();\n         let mut builder = task::task();\n         worker_results.push(builder.future_result());\n-        do builder.spawn {\n+        builder.spawn(proc() {\n             for _ in range(0u, size / workers) {\n                 //error!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //error!(\"worker {:?} exiting\", i);\n-        }\n+        });\n     }\n-    do task::spawn || {\n+    task::spawn(proc() {\n         server(&from_parent, &to_parent);\n-    }\n+    });\n \n     for r in worker_results.iter() {\n         r.recv();"}, {"sha": "6ce0f9de8d0a237772cf5ddca820b794795198e0", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -58,33 +58,33 @@ fn run(args: &[~str]) {\n         let (from_parent, to_child) = Chan::new();\n         let mut builder = task::task();\n         worker_results.push(builder.future_result());\n-        do builder.spawn {\n+        builder.spawn(proc() {\n             for _ in range(0u, size / workers) {\n                 //error!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //error!(\"worker {:?} exiting\", i);\n-        };\n+        });\n         from_parent\n     } else {\n         let (from_parent, to_child) = SharedChan::new();\n         for _ in range(0u, workers) {\n             let to_child = to_child.clone();\n             let mut builder = task::task();\n             worker_results.push(builder.future_result());\n-            do builder.spawn {\n+            builder.spawn(proc() {\n                 for _ in range(0u, size / workers) {\n                     //error!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n                     to_child.send(bytes(num_bytes));\n                 }\n                 //error!(\"worker {:?} exiting\", i);\n-            };\n+            });\n         }\n         from_parent\n     };\n-    do task::spawn || {\n+    task::spawn(proc() {\n         server(&from_parent, &to_parent);\n-    }\n+    });\n \n     for r in worker_results.iter() {\n         r.recv();"}, {"sha": "b1b2300466a5edb5fc56fee613b6dcd20a1dcc1e", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -91,9 +91,9 @@ fn main() {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n         let num_chan_2 = num_chan.clone();\n-        let new_future = do Future::spawn() {\n+        let new_future = Future::spawn(proc() {\n             thread_ring(i, msg_per_task, num_chan_2, num_port)\n-        };\n+        });\n         futures.push(new_future);\n         num_chan = new_chan;\n     };"}, {"sha": "d7bd0f2f6bd3da361f406fd23a18f98c47443513", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -87,9 +87,9 @@ fn main() {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n         let num_chan_2 = num_chan.clone();\n-        let new_future = do Future::spawn {\n+        let new_future = Future::spawn(proc() {\n             thread_ring(i, msg_per_task, num_chan_2, num_port)\n-        };\n+        });\n         futures.push(new_future);\n         num_chan = new_chan;\n     };"}, {"sha": "29904de897eba7782accc4b1299d90ba171e9b15", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -26,23 +26,23 @@ fn ping_pong_bench(n: uint, m: uint) {\n         // Create a stream B->A\n         let (pb,cb) = Chan::<()>::new();\n \n-        do spawn() || {\n+        spawn(proc() {\n             let chan = ca;\n             let port = pb;\n             n.times(|| {\n                 chan.send(());\n                 port.recv();\n             })\n-        }\n+        });\n \n-        do spawn() || {\n+        spawn(proc() {\n             let chan = cb;\n             let port = pa;\n             n.times(|| {\n                 port.recv();\n                 chan.send(());\n             })\n-        }\n+        });\n     }\n \n     m.times(|| {"}, {"sha": "59f5afa47dafd130151c709a82212d2065ffcb4a", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -23,9 +23,9 @@ fn parfib(n: uint) -> uint {\n     }\n \n     let (port,chan) = Chan::new();\n-    do spawn {\n+    spawn(proc() {\n         chan.send(parfib(n-1));\n-    };\n+    });\n     let m2 = parfib(n-2);\n     return (port.recv() + m2);\n }"}, {"sha": "f3bb168f65117febd5c48d0a1e1cddaa49658b4d", "filename": "src/test/bench/rt-spawn-rate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-spawn-rate.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     };\n \n     n.times(|| {\n-        do spawn || {};\n+        spawn(proc() {});\n     })\n \n }"}, {"sha": "1a4ad2297181c0584bfff1cd248ca006c4699564", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -64,7 +64,7 @@ fn main() {\n     let mut messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n             use std::num::pow;\n             let iterations = pow(2, (max_depth - depth + min_depth) as uint);\n-            do Future::spawn {\n+            Future::spawn(proc() {\n                 let mut chk = 0;\n                 for i in range(1, iterations + 1) {\n                     let arena = TypedArena::new();\n@@ -74,7 +74,7 @@ fn main() {\n                 }\n                 format!(\"{}\\t trees of depth {}\\t check: {}\",\n                         iterations * 2, depth, chk)\n-            }\n+            })\n         }).to_owned_vec();\n \n     for message in messages.mut_iter() {"}, {"sha": "7281667e6769a62a4c4ffcd16415cca3e11d3cf4", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -152,13 +152,13 @@ fn rendezvous(nn: uint, set: ~[color]) {\n             let to_rendezvous = to_rendezvous.clone();\n             let to_rendezvous_log = to_rendezvous_log.clone();\n             let (from_rendezvous, to_creature) = Chan::new();\n-            do task::spawn {\n+            task::spawn(proc() {\n                 creature(ii,\n                          col,\n                          from_rendezvous,\n                          to_rendezvous.clone(),\n                          to_rendezvous_log.clone());\n-            }\n+            });\n             to_creature\n         }).collect();\n "}, {"sha": "375f9154841f4b73620c8bc27f718ebba4cb8472", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -168,9 +168,9 @@ fn main() {\n \n         let (from_parent, to_child) = Chan::new();\n \n-        do spawn {\n+        spawn(proc() {\n             make_sequence_processor(sz, &from_parent, &to_parent_);\n-        }\n+        });\n \n         to_child\n     }).collect::<~[Chan<~[u8]>]>();"}, {"sha": "040c8526ee04fdfedabfbe1b972c3638f86ca9df", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -79,9 +79,9 @@ fn stress(num_tasks: int) {\n     for i in range(0, num_tasks) {\n         let mut builder = task::task();\n         results.push(builder.future_result());\n-        do builder.spawn {\n+        builder.spawn(proc() {\n             stress_task(i);\n-        }\n+        });\n     }\n     for r in results.iter() {\n         r.recv();"}, {"sha": "d68ca4e0abbae800980bb452569c70bec031621c", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -41,13 +41,13 @@ fn mult(v: RWArc<~[f64]>, out: RWArc<~[f64]>, f: fn(&~[f64], uint) -> f64) {\n         let w = wait.clone();\n         let v = v.clone();\n         let out = out.clone();\n-        do spawn {\n+        spawn(proc() {\n             for i in range(chk, min(len, chk + chunk)) {\n                 let val = v.read(|v| f(v, i));\n                 out.write(|out| out[i] = val);\n             }\n             let _ = w;\n-        }\n+        });\n     }\n     let _ = wait.unwrap();\n }"}, {"sha": "7063194eab862d43fb794209c509ccf3ddcb45d0", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -23,17 +23,17 @@ fn start(n_tasks: int, token: int) {\n         let (next_p, ch) = Chan::new();\n         let imm_i = i;\n         let imm_p = p;\n-        do spawn {\n+        spawn(proc() {\n             roundtrip(imm_i, n_tasks, &imm_p, &ch);\n-        };\n+        });\n         p = next_p;\n         i += 1;\n     }\n     let imm_p = p;\n     let imm_ch = ch1;\n-    do spawn {\n+    spawn(proc() {\n         roundtrip(1, n_tasks, &imm_p, &imm_ch);\n-    }\n+    });\n }\n \n fn roundtrip(id: int, n_tasks: int, p: &Port<int>, ch: &Chan<int>) {"}, {"sha": "16a9c03225adb52656ea9703b7b9d7eca1a0a015", "filename": "src/test/bench/silly-test-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fsilly-test-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fsilly-test-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsilly-test-spawn.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -11,6 +11,6 @@\n // Useful smoketest for scheduler performance.\n fn main() {\n     for _ in range(1, 100_000) {\n-        do spawn { }\n+        spawn(proc() {})\n     }\n }"}, {"sha": "b55f471bdb24d40f6f7619b4b592c18dcd6eca8e", "filename": "src/test/bench/spawnone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fspawnone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Fspawnone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fspawnone.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -10,5 +10,5 @@\n \n // Useful for checking syscall usage of baseline scheduler usage\n fn main() {\n-    do spawn { }\n+    spawn(proc() {});\n }"}, {"sha": "58fdadc2064da35485a61f74fb7a312883b13ee5", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -34,9 +34,9 @@ fn main() {\n fn run(repeat: int, depth: int) {\n     for _ in range(0, repeat) {\n         info!(\"starting {:.4f}\", precise_time_s());\n-        do task::try {\n+        task::try(proc() {\n             recurse_or_fail(depth, None)\n-        };\n+        });\n         info!(\"stopping {:.4f}\", precise_time_s());\n     }\n }"}, {"sha": "b41f6bcc50ad85cb31d6a6f146e1c17a4760c8f3", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -26,7 +26,7 @@ fn child_generation(gens_left: uint, c: comm::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,\n-    do spawn {\n+    spawn(proc() {\n         if gens_left & 1 == 1 {\n             task::deschedule(); // shake things up a bit\n         }\n@@ -35,7 +35,7 @@ fn child_generation(gens_left: uint, c: comm::Chan<()>) {\n         } else {\n             c.send(())\n         }\n-    }\n+    });\n }\n \n fn main() {"}, {"sha": "052900102c9a27f8a06c6e600335580b995bca79", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -36,11 +36,11 @@ fn grandchild_group(num_tasks: uint) {\n     for _ in range(0, num_tasks) {\n         let ch = ch.clone();\n         let mut t = task::task();\n-        do t.spawn { // linked\n+        t.spawn(proc() { // linked\n             ch.send(());\n             let (p, _c) = stream::<()>();\n             p.recv(); // block forever\n-        }\n+        });\n     }\n     error!(\"Grandchild group getting started\");\n     for _ in range(0, num_tasks) {\n@@ -77,17 +77,17 @@ fn main() {\n     // Main group #0 waits for unsupervised group #1.\n     // Grandparent group #1 waits for middle group #2, then fails, killing #3.\n     // Middle group #2 creates grandchild_group #3, waits for it to be ready, exits.\n-    let x: result::Result<(), ~Any> = do task::try { // unlinked\n-        do spawn_supervised_blocking(\"grandparent\") {\n-            do spawn_supervised_blocking(\"middle\") {\n+    let x: result::Result<(), ~Any> = task::try(proc() { // unlinked\n+        spawn_supervised_blocking(\"grandparent\", proc() {\n+            spawn_supervised_blocking(\"middle\", proc() {\n                 grandchild_group(num_tasks);\n-            }\n+            });\n             // When grandchild group is ready to go, make the middle group exit.\n             error!(\"Middle group wakes up and exits\");\n-        }\n+        });\n         // Grandparent group waits for middle group to be gone, then fails\n         error!(\"Grandparent group wakes up and fails\");\n         fail!();\n-    };\n+    });\n     assert!(x.is_err());\n }"}, {"sha": "454c7e45cc163d9b0af20449579c408c623f76cc", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -21,9 +21,9 @@ fn calc(children: uint, parent_wait_chan: &Chan<Chan<Chan<int>>>) {\n \n     let wait_ports: ~[Port<Chan<Chan<int>>>] = vec::from_fn(children, |_| {\n         let (wait_port, wait_chan) = stream::<Chan<Chan<int>>>();\n-        do task::spawn {\n+        task::spawn(proc() {\n             calc(children / 2, &wait_chan);\n-        }\n+        });\n         wait_port\n     });\n \n@@ -58,9 +58,9 @@ fn main() {\n \n     let children = from_str::<uint>(args[1]).unwrap();\n     let (wait_port, wait_chan) = stream();\n-    do task::spawn {\n+    task::spawn(proc() {\n         calc(children, &wait_chan);\n-    };\n+    });\n \n     let start_chan = wait_port.recv();\n     let (sum_port, sum_chan) = stream::<int>();"}, {"sha": "716dfe2c8b5c54e2b89af8f032d8615ac01fae77", "filename": "src/test/compile-fail/arc-rw-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -19,5 +19,5 @@ fn main() {\n     });\n     y.unwrap();\n     // Adding this line causes a method unification failure instead\n-    // do (&option::unwrap(y)).read |state| { assert!(*state == 1); }\n+    // (&option::unwrap(y)).read(|state| { assert!(*state == 1); })\n }"}, {"sha": "213bf48a08750446aa6220ce09e65a24f71cc739", "filename": "src/test/compile-fail/arc-rw-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     x.write_downgrade(|write_mode| y = Some(write_mode));\n     y.unwrap();\n     // Adding this line causes a method unification failure instead\n-    // do (&option::unwrap(y)).write |state| { assert!(*state == 1); }\n+    // (&option::unwrap(y)).write(|state| { assert!(*state == 1); })\n }"}, {"sha": "c193288468a20ba3aa120c884469d332a2867b16", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -17,10 +17,10 @@ fn borrow(v: &int, f: |x: &int|) {\n fn box_imm() {\n     let v = ~3;\n     let _w = &v;\n-    do task::spawn {\n+    task::spawn(proc() {\n         info!(\"v={}\", *v);\n         //~^ ERROR cannot move `v` into closure\n-    }\n+    });\n \n     let v = ~3;\n     let _w = &v;"}, {"sha": "a836556dff88161fa89508cd998e9abcf8109eda", "filename": "src/test/compile-fail/do-lambda-requires-braces.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-lambda-requires-braces.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    do something\n-        |x| do somethingelse //~ ERROR: expected `{` but found `do`\n-        |y| say(x, y)\n-}"}, {"sha": "d16fa4eadd566b81a50f4f1407d16abd728d5e07", "filename": "src/test/compile-fail/do1.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Fcompile-fail%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Fcompile-fail%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo1.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let x = do y; //~ ERROR: expected `{` but found\n-}"}, {"sha": "309abe218f6f1bc55712130446824d7fcf6e7ef5", "filename": "src/test/compile-fail/do2.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo2.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(f: proc(int) -> bool) -> bool { f(10i) }\n-\n-fn main() {\n-    assert!(do f() |i| { i == 10i } == 10i);\n-    //~^ ERROR: expected `bool` but found `int`\n-}"}, {"sha": "5fab2ed195cecdd0a1cd469effa23a82d48b2321", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -10,9 +10,9 @@\n \n fn main() {\n     let needlesArr: ~[char] = ~['a', 'f'];\n-    do needlesArr.iter().fold() |x, y| {\n-    }\n-    //~^^ ERROR 1 parameter was supplied (including the closure passed by the `do` keyword)\n+    needlesArr.iter().fold(|x, y| {\n+    });\n+    //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n     //\n     // the first error is, um, non-ideal.\n }"}, {"sha": "b2a0c8a02a90da117e82817dede7e08f6772fd85", "filename": "src/test/compile-fail/keyword-do-as-identifier.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Fcompile-fail%2Fkeyword-do-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Fcompile-fail%2Fkeyword-do-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-do-as-identifier.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This file was auto-generated using 'src/etc/generate-keyword-tests.py do'\n-\n-fn main() {\n-    let do = \"foo\"; //~ error: ident\n-}"}, {"sha": "fe9c7ede83a0883e75c40fb38210e7ac907da88e", "filename": "src/test/compile-fail/moves-based-on-type-capture-clause-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -2,8 +2,8 @@ use std::task;\n \n fn main() {\n     let x = ~\"Hello world!\";\n-    do task::spawn {\n+    task::spawn(proc() {\n         println!(\"{}\", x);\n-    }\n+    });\n     println!(\"{}\", x); //~ ERROR use of moved value\n }"}, {"sha": "24a141c4799d520708ea88020c67da576935e005", "filename": "src/test/compile-fail/mutex-arc-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -17,10 +17,10 @@ fn test_mutex_arc_nested() {\n     let arc = ~MutexArc::new(1);\n     let arc2 = ~MutexArc::new(*arc);\n \n-    do task::spawn || {\n+    task::spawn(proc() {\n         (*arc2).access(|mutex| { //~ ERROR instantiating a type parameter with an incompatible type\n         })\n-    };\n+    });\n }\n \n fn main() {}"}, {"sha": "5ae38e69ec0e30c52ba492dec58694705566a3c2", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -19,10 +19,10 @@ fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = arc::Arc::new(v);\n \n-    do task::spawn() {\n+    task::spawn(proc() {\n         let v = arc_v.get();\n         assert_eq!(v[3], 4);\n-    };\n+    });\n \n     assert_eq!((arc_v.get())[2], 3);\n "}, {"sha": "c6c0ba41ab91a45ba21e0fb8af43b6566b61e662", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -17,10 +17,10 @@ fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = arc::Arc::new(v);\n \n-    do task::spawn() {\n+    task::spawn(proc() {\n         let v = arc_v.get();\n         assert_eq!(v[3], 4);\n-    };\n+    });\n \n     assert_eq!((arc_v.get())[2], 3); //~ ERROR use of moved value: `arc_v`\n "}, {"sha": "9e564e997e6739c91245e0f775d78f3f68be3788", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -32,8 +32,8 @@ fn main() {\n \n     let x = foo(Port(@()));\n \n-    do task::spawn {\n+    task::spawn(proc() {\n         let y = x;   //~ ERROR does not fulfill `Send`\n         error!(\"{:?}\", y);\n-    }\n+    });\n }"}, {"sha": "8d5e2229b2e5dc0a10d99eb772db3c6aba21af20", "filename": "src/test/compile-fail/once-cant-call-twice-on-heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -22,8 +22,8 @@ fn foo(blk: proc()) {\n \n fn main() {\n     let x = arc::Arc::new(true);\n-    do foo {\n+    foo(proc() {\n         assert!(*x.get());\n         drop(x);\n-    }\n+    });\n }"}, {"sha": "0078841acb139b54a3a1c6c59c915ce4c20670be", "filename": "src/test/compile-fail/sync-rwlock-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -18,5 +18,5 @@ fn main() {\n         y = Some(x.downgrade(write_mode));\n     })\n     // Adding this line causes a method unification failure instead\n-    // do (&option::unwrap(y)).read { }\n+    // (&option::unwrap(y)).read(proc() { });\n }"}, {"sha": "6e9216830750b1d729d119a8ea32370860b14f6e", "filename": "src/test/compile-fail/sync-rwlock-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -18,5 +18,5 @@ fn main() {\n         y = Some(write_mode);\n     });\n     // Adding this line causes a method unification failure instead\n-    // do (&option::unwrap(y)).write { }\n+    // (&option::unwrap(y)).write(proc() { })\n }"}, {"sha": "b998056176e39fd087b0cbca2d4462200d37b100", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -41,11 +41,11 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    do 10u.times {\n-        do task::spawn {\n+    10u.times(proc() {\n+        task::spawn(proc() {\n             let result = count(5u);\n             info!(\"result = %?\", result);\n             fail!();\n-        };\n-    }\n+        });\n+    });\n }"}, {"sha": "3f662e6d0e3e4ca673d4203253405ee42e9dc236", "filename": "src/test/run-fail/fail-task-name-none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Ffail-task-name-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Ffail-task-name-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-none.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -13,8 +13,8 @@\n use std::task;\n \n fn main() {\n-    do task::try {\n+    task::try(proc() {\n         fail!(\"test\");\n         1\n-    }.unwrap()\n+    }).unwrap()\n }"}, {"sha": "a1115a09fb1765d08fa2742a9c9dfe1acab04e15", "filename": "src/test/run-fail/fail-task-name-owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -15,8 +15,8 @@ use std::task;\n fn main() {\n     let mut t = task::task();\n     t.name(~\"owned name\");\n-    do t.try {\n+    t.try(proc() {\n         fail!(\"test\");\n         1\n-    }.unwrap()\n+    }).unwrap()\n }"}, {"sha": "ca2472cfa55f159f2ac5b507f13befebbee3b92a", "filename": "src/test/run-fail/fail-task-name-send-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -13,8 +13,8 @@\n fn main() {\n     let mut t = ::std::task::task();\n     t.name(\"send name\".to_send_str());\n-    do t.try {\n+    t.try(proc() {\n         fail!(\"test\");\n         3\n-    }.unwrap()\n+    }).unwrap()\n }"}, {"sha": "2303ab102d409bedc5d5cc50fe753d353d07772d", "filename": "src/test/run-fail/fail-task-name-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -13,7 +13,7 @@\n fn main() {\n     let mut t = ::std::task::task();\n     t.name(\"static name\");\n-    do t.try {\n+    t.try(proc() {\n         fail!(\"test\");\n-    }.unwrap()\n+    }).unwrap()\n }"}, {"sha": "1094227770efd9e6a63eee7dcd7fc9138bf585d8", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -62,8 +62,8 @@ fn and_then_get_big_again(x:int) -> and_then_get_big_again {\n }\n \n fn main() {\n-    do task::spawn {\n+    task::spawn(proc() {\n         let r = and_then_get_big_again(4);\n         getbig_call_c_and_fail(10000);\n-    };\n+    });\n }"}, {"sha": "6acfa0b79f4100a750b40a505ad437f679fa5ebf", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -48,7 +48,7 @@ fn and_then_get_big_again(x:int) -> and_then_get_big_again {\n }\n \n fn main() {\n-    do task::spawn {\n+    task::spawn(proc() {\n         getbig_and_fail(400);\n-    };\n+    });\n }"}, {"sha": "8be8e6b44f6afe9232bac06178105987058c4ef7", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -41,7 +41,7 @@ fn and_then_get_big_again(x:int) -> and_then_get_big_again {\n }\n \n fn main() {\n-    do task::spawn {\n+    task::spawn(proc() {\n         getbig_and_fail(1);\n-    };\n+    });\n }"}, {"sha": "20d8a543ae1966483a0695311e50f2483efdda58", "filename": "src/test/run-fail/native-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fnative-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Fnative-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnative-failure.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -17,7 +17,7 @@ extern mod native;\n \n #[start]\n fn start(argc: int, argv: **u8) -> int {\n-    do native::start(argc, argv) {\n+    native::start(argc, argv, proc() {\n         fail!();\n-    }\n+    })\n }"}, {"sha": "d19788d8b5b84f72fa9faf00e7f2b5e2f7f3796b", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -34,8 +34,8 @@ fn r(x:int) -> r {\n \n fn main() {\n     error!(\"whatever\");\n-    do task::spawn {\n+    task::spawn(proc() {\n       let _i = r(5);\n-    };\n+    });\n     fail!();\n }"}, {"sha": "94119cc0278dab39aff0fb42326c403acaafe35e", "filename": "src/test/run-make/bootstrap-from-c-with-green/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -17,9 +17,9 @@ extern mod green;\n \n #[no_mangle] // this needs to get called from C\n pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {\n-    do green::start(argc, argv) {\n-        do spawn {\n+    green::start(argc, argv, proc() {\n+        spawn(proc() {\n             println!(\"hello\");\n-        }\n-    }\n+        });\n+    })\n }"}, {"sha": "2a783606d944acd2ac5589e5776135b0a97c4655", "filename": "src/test/run-make/bootstrap-from-c-with-native/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -16,9 +16,9 @@ extern mod native;\n \n #[no_mangle] // this needs to get called from C\n pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {\n-    do native::start(argc, argv) {\n-        do spawn {\n+    native::start(argc, argv, proc() {\n+        spawn(proc() {\n             println!(\"hello\");\n-        }\n-    }\n+        });\n+    })\n }"}, {"sha": "96dabf8f07699c6fa01fc362b65dbea69f6f13ce", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -12,11 +12,11 @@ impl Drop for A {\n }\n \n fn main() {\n-    do task::try {\n+    task::try(proc() {\n         let _a = A;\n         lib::callback(|| fail!());\n         1\n-    };\n+    });\n \n     unsafe {\n         assert!(lib::statik == 1);"}, {"sha": "05225eb0e7adabdadd77e2c22a0e9133929ac73a", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -75,11 +75,11 @@ fn main() {\n \n fn check_pp<T>(cx: fake_ext_ctxt,\n                expr: T, f: |pprust::ps, T|, expect: ~str) {\n-    let s = do io::with_str_writer |wr| {\n+    let s = io::with_str_writer(|wr| {\n         let pp = pprust::rust_printer(wr, cx.parse_sess().interner);\n         f(pp, expr);\n         pp::eof(pp.s);\n-    };\n+    });\n     stdout().write_line(s);\n     if expect != ~\"\" {\n         error!(\"expect: '%s', got: '%s'\", expect, s);"}, {"sha": "f2149e23210ccb256cbf5af0a46eddbbbf83ff1c", "filename": "src/test/run-pass/block-arg-can-be-followed-by-binop.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn add(x: proc(f64) -> f64) -> f64 {\n-    x(10.0)\n-}\n-\n-pub fn main() {\n-    // Trailing expressions don't require parentheses:\n-    let y = do add |x| { x + 10.0 } + 10.0;\n-\n-    assert_eq!(y, 30.0);\n-}"}, {"sha": "2cdf0a1ffe1f1e0dcc05ff7861d8552d1a73af2f", "filename": "src/test/run-pass/block-arg-can-be-followed-by-block-arg.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(_: proc()) -> proc(proc() -> uint) {\n-    proc(_: proc() -> uint) {}\n-}\n-\n-pub fn main() {\n-    do do f {} { 20 };\n-}"}, {"sha": "544367bdfa9d5c9b9333750f63fe10ea45c8709e", "filename": "src/test/run-pass/block-arg-can-be-followed-by-call.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(_: proc()) -> proc(uint) -> uint {\n-    proc(x: uint) { x }\n-}\n-\n-pub fn main() {\n-    let z = do f {} (22u);\n-    assert_eq!(z, 22u);\n-}"}, {"sha": "083217132de1125e70b21a2d2ab2baeac2b6ecb5", "filename": "src/test/run-pass/block-arg-in-parentheses.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(_: proc(int, int) -> int) -> int {\n-    10\n-}\n-\n-fn w_semi() {\n-    // the semicolon causes compiler not to\n-    // complain about the ignored return value:\n-    do f |x, y| { x+y };\n-}\n-\n-fn w_paren1() -> int {\n-    (do f |x, y| { x+y }) - 10\n-}\n-\n-fn w_paren2() -> int {\n-    (do f |x, y| { x+y } - 10)\n-}\n-\n-fn w_ret() -> int {\n-    return do f |x, y| { x+y } - 10;\n-}\n-\n-pub fn main() {\n-    w_semi();\n-    w_paren1();\n-    w_paren2();\n-    w_ret();\n-}"}, {"sha": "87a6cbd6fc2f33aa4de1b742b920e4ebf0e6e51d", "filename": "src/test/run-pass/block-arg-used-as-any.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn call_any(f: proc() -> uint) -> uint {\n-    return f();\n-}\n-\n-pub fn main() {\n-    let x_r = do call_any { 22u };\n-    assert_eq!(x_r, 22u);\n-}"}, {"sha": "d59804b23954e17fa380451779e55eef48c7cf51", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -25,49 +25,4 @@ pub fn main() {\n         info!(\"{:?}\", *i);\n     }\n \n-    // Usable at all:\n-    do inty |x| { x };\n-\n-    // Higher precedence than assignments:\n-    let result = do inty |e| { e };\n-    assert_eq!(result, 100);\n-\n-    // Higher precedence than unary operations:\n-    let stringy = do inty |e| { e }.to_str();\n-    assert!(do booly |_| { true });\n-    assert!(!do booly |_| { false });\n-\n-    // Usable in funny statement-like forms:\n-    if !do booly |_| { true } {\n-        assert!(false);\n-    }\n-    match do booly |_| { false } {\n-        true => { fail!(\"incorrect answer.\"); }\n-        false => { }\n-    }\n-    match 3 {\n-      _ if do booly |_| { true } => {\n-      }\n-      _ => {\n-        fail!(\"wrong answer.\");\n-      }\n-    }\n-\n-\n-    // Lower precedence than binary operations:\n-    let w = do inty |_| { 10 } + 10;\n-    let y = do inty |_| { 10 } + 10;\n-    let z = 10 + do inty |_| { 10 };\n-    assert_eq!(w, y);\n-    assert_eq!(y, z);\n-\n-    // In the tail of a block\n-    let w = if true {\n-        do booly |_| {\n-            true\n-        }\n-    } else {\n-        false\n-    };\n-    assert!(w);\n }"}, {"sha": "874075e8c1400bb1a71f4c45ffbecd06de298218", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -28,9 +28,9 @@ use std::task;\n \n fn foo(x: ()) -> Port<()> {\n     let (p, c) = Chan::<()>::new();\n-    do task::spawn() {\n+    task::spawn(proc() {\n         c.send(x);\n-    }\n+    });\n     p\n }\n "}, {"sha": "171424d8b3b6905ffb0bd4f14be850ac6f0c8c43", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -30,18 +30,18 @@ impl Logger for MyWriter {\n \n #[start]\n fn start(argc: int, argv: **u8) -> int {\n-    do native::start(argc, argv) {\n+    native::start(argc, argv, proc() {\n         main();\n-    }\n+    })\n }\n \n fn main() {\n     let (p, c) = Chan::new();\n     let (mut r, w) = (PortReader::new(p), ChanWriter::new(c));\n-    do spawn {\n+    spawn(proc() {\n         set_logger(~MyWriter(w) as ~Logger);\n         debug!(\"debug\");\n         info!(\"info\");\n-    }\n+    });\n     assert_eq!(r.read_to_str(), ~\"info\\n\");\n }"}, {"sha": "66fac94ba51e1b41c61af71caeb5d4b0c8a03f09", "filename": "src/test/run-pass/closure-bounds-can-capture-chan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -16,8 +16,8 @@ fn foo(blk: proc()) {\n \n pub fn main() {\n     let (p,c) = Chan::new();\n-    do foo {\n+    foo(proc() {\n         c.send(());\n-    }\n+    });\n     p.recv();\n }"}, {"sha": "3ed77cd9fb767cdccfc621e0e8f966b108ebd339", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -38,11 +38,6 @@ fn call_bare_again(f: extern \"Rust\" fn(&str)) {\n pub fn main() {\n     // Procs\n \n-    let greeting = ~\"Hi \";\n-    do call_it |s| {\n-        greeting + s\n-    }\n-\n     let greeting = ~\"Hello \";\n     call_it(proc(s) {\n         greeting + s"}, {"sha": "56ba2ffddbb4bd9959c53101b1a7bad2399bd0c4", "filename": "src/test/run-pass/do-empty-args.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// no-reformat\n-// Testing various forms of `do` with empty arg lists\n-\n-fn f(_f: proc() -> bool) -> bool {\n-    true\n-}\n-\n-pub fn main() {\n-    do f() || { true };\n-    do f() { true };\n-    do f || { true };\n-    do f { true };\n-}"}, {"sha": "0df5c82ab077f33aa81f3bff4466cfdd6a7bde45", "filename": "src/test/run-pass/do-no-args.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-no-args.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Testing that we can drop the || in do exprs\n-\n-fn f(_f: proc() -> bool) -> bool { true }\n-\n-fn d(_f: proc()) { }\n-\n-pub fn main() {\n-    do d { }\n-}"}, {"sha": "bdbad74b32095ce721a3ecbb6b516a00c175b56d", "filename": "src/test/run-pass/do1.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo1.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(f: proc(int)) { f(10) }\n-\n-pub fn main() {\n-    do f() |i| { assert!(i == 10) }\n-}"}, {"sha": "f509f7b454d35afeba0d2bb30dd63fc808af84e3", "filename": "src/test/run-pass/do2.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo2.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(f: proc(int) -> int) -> int { f(10) }\n-\n-pub fn main() {\n-    assert_eq!(do f() |i| { i }, 10);\n-}"}, {"sha": "cdba14f1deda4a182c0d306a0826b60a10bfff99", "filename": "src/test/run-pass/do3.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22ace3f0a3730555b89f19aa7b72d43a6cf892/src%2Ftest%2Frun-pass%2Fdo3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo3.rs?ref=bb22ace3f0a3730555b89f19aa7b72d43a6cf892", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(f: proc(int) -> int) -> int { f(10) }\n-\n-pub fn main() {\n-    assert_eq!(do f |i| { i }, 10);\n-}"}, {"sha": "500ae8951ec4aa72459d3f84f251f2e03808b92d", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -40,9 +40,9 @@ fn count(n: uint) -> uint {\n pub fn main() {\n     // Make sure we're on a task with small Rust stacks (main currently\n     // has a large stack)\n-    do task::spawn {\n+    task::spawn(proc() {\n         let result = count(1000u);\n         info!(\"result = {}\", result);\n         assert_eq!(result, 1000u);\n-    };\n+    });\n }"}, {"sha": "c35e84154d80ba48bc9eede4d36fab66ce068a64", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -44,9 +44,9 @@ fn count(n: uint) -> uint {\n pub fn main() {\n     // Make sure we're on a task with small Rust stacks (main currently\n     // has a large stack)\n-    do task::spawn {\n+    task::spawn(proc() {\n         let result = count(12u);\n         info!(\"result = {}\", result);\n         assert_eq!(result, 2048u);\n-    };\n+    });\n }"}, {"sha": "26c7e6881a6c42134b5117339f81e1248936117a", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -42,8 +42,8 @@ fn count(n: uint) -> uint {\n \n pub fn main() {\n     100u.times(|| {\n-        do task::spawn {\n+        task::spawn(proc() {\n             assert_eq!(count(5u), 16u);\n-        };\n+        });\n     })\n }"}, {"sha": "da26f92ecdf3233048edf7d884da6f022718e8a1", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -39,10 +39,10 @@ fn count(n: uint) -> uint {\n \n pub fn main() {\n     10u.times(|| {\n-        do task::spawn {\n+        task::spawn(proc() {\n             let result = count(5u);\n             info!(\"result = {}\", result);\n             assert_eq!(result, 16u);\n-        };\n+        });\n     })\n }"}, {"sha": "be4a497989ce8d239ed6f2d1a1e19c88ca65a4a9", "filename": "src/test/run-pass/fail-in-dtor-drops-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ffail-in-dtor-drops-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ffail-in-dtor-drops-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffail-in-dtor-drops-fields.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -33,9 +33,9 @@ impl Drop for B {\n }\n \n pub fn main() {\n-    let ret = do task::try {\n+    let ret = task::try(proc() {\n         let _a = A { b: B { foo: 3 } };\n-    };\n+    });\n     assert!(ret.is_err());\n     unsafe { assert!(dropped); }\n }"}, {"sha": "daaaac93791bd38b8da3e0c7d21bf94c6f3f2d3b", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -10,10 +10,10 @@ extern {\n \n pub fn main() {\n     unsafe {\n-        do run_in_bare_thread() {\n+        run_in_bare_thread(proc() {\n             let i = &100;\n             rust_dbg_call(callback, cast::transmute(i));\n-        }\n+        });\n     }\n }\n "}, {"sha": "633c096b689201fb491e2dd836bcfecd9a5f0e81", "filename": "src/test/run-pass/infinite-loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfinite-loops.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -17,13 +17,13 @@\n extern mod extra;\n \n fn loopy(n: int) {\n-    if n > 0 { do spawn { loopy(n - 1) }; do spawn { loopy(n - 1) }; }\n+    if n > 0 { spawn(proc() { loopy(n - 1) }); spawn(proc() { loopy(n - 1) }); }\n     loop { }\n }\n \n pub fn main() {\n     // Commenting this out, as this will hang forever otherwise.\n     // Even after seeing the comment above, I'm not sure what the\n     // intention of this test is.\n-    // do spawn { loopy(5) };\n+    // spawn(proc() { loopy(5) });\n }"}, {"sha": "cef183e5f33c772fc333b6df4dbd6a74c3f85270", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -51,16 +51,16 @@ impl iterable<uint> for 'static ||uint|| {\n }\n \n fn filter<A,IA:iterable<A>>(self: IA, prd: 'static |A| -> bool, blk: |A|) {\n-    do self.iter |a| {\n+    self.iter(|a| {\n         if prd(a) { blk(a) }\n-    }\n+    });\n }\n \n fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: |B, A| -> B) -> B {\n     let mut b = b0;\n-    do self.iter |a| {\n+    self.iter(|a| {\n         b = blk(b, a);\n-    }\n+    });\n     b\n }\n "}, {"sha": "49b7e50c01e61b942b1f1abb9ca1d654ef90c5e1", "filename": "src/test/run-pass/issue-3168.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -16,19 +16,19 @@ use std::task;\n \n pub fn main() {\n     let (p,c) = comm::stream();\n-    do task::try || {\n+    task::try(|| {\n         let (p2,c2) = comm::stream();\n-        do task::spawn || {\n+        task::spawn(|| {\n             p2.recv();\n             error!(\"sibling fails\");\n             fail!();\n-        }\n+        });\n         let (p3,c3) = comm::stream();\n         c.send(c3);\n         c2.send(());\n         error!(\"child blocks\");\n         p3.recv();\n-    };\n+    });\n     error!(\"parent tries\");\n     assert!(!p.recv().try_send(()));\n     error!(\"all done!\");"}, {"sha": "bcda2e27614c687f1da1d8a2bebac62d311d7cea", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -12,16 +12,15 @@ enum Msg\n }\n \n fn foo(name: ~str, samples_chan: Chan<Msg>) {\n-    do task::spawn\n-    {\n+    task::spawn(proc() {\n         let mut samples_chan = samples_chan;\n         let callback: SamplesFn = proc(buffer) {\n             for i in range(0u, buffer.len()) {\n                 error!(\"{}: {}\", i, buffer[i])\n             }\n         };\n         samples_chan.send(GetSamples(name.clone(), callback));\n-    };\n+    });\n }\n \n pub fn main() {}"}, {"sha": "173f76434d303b0feb0f58296e48e48bad7f1379", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -45,13 +45,13 @@ priv fn parse_data(len: uint, io: @io::Reader) -> Result {\n \n priv fn parse_list(len: uint, io: @io::Reader) -> Result {\n   let mut list: ~[Result] = ~[];\n-    do len.times {\n+    len.times(proc() {\n     let v =\n         match io.read_char() {\n         '$' => parse_bulk(io),\n         ':' => parse_int(io),\n          _ => fail!()\n-    };\n+    });\n     list.push(v);\n     }\n   return List(list);\n@@ -119,11 +119,11 @@ fn query(cmd: ~[~str], sb: TcpSocketBuf) -> Result {\n \n fn query2(cmd: ~[~str]) -> Result {\n   let _cmd = cmd_to_str(cmd);\n-    do io::with_str_reader(~\"$3\\r\\nXXX\\r\\n\") |sb| {\n+    io::with_str_reader(~\"$3\\r\\nXXX\\r\\n\")(|sb| {\n     let res = parse_response(@sb as @io::Reader);\n     println!(\"{:?}\", res);\n     res\n-    }\n+    });\n }\n \n "}, {"sha": "8f2d9f32440bb186b18d0df39a20b4a309268b11", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -13,9 +13,9 @@ use std::io::println;\n pub fn main() {\n     let (port, chan) = Chan::new();\n \n-    do spawn {\n+    spawn(proc() {\n         println(port.recv());\n-    }\n+    });\n \n     chan.send(\"hello, world\");\n }"}, {"sha": "8fbc35c72005ac673c8c767e7fd6dde6d757a5d7", "filename": "src/test/run-pass/issue-4448.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4448.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -13,9 +13,9 @@ use std::task;\n pub fn main() {\n     let (port, chan) = Chan::<&'static str>::new();\n \n-    do task::spawn {\n+    task::spawn(proc() {\n         assert_eq!(port.recv(), \"hello, world\");\n-    }\n+    });\n \n     chan.send(\"hello, world\");\n }"}, {"sha": "3f45e864da35af1251bf0631f67a453714f49aa0", "filename": "src/test/run-pass/kindck-implicit-close-over-mut-var.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -16,10 +16,10 @@ fn foo() {\n     // Here, i is *copied* into the proc (heap closure).\n     // Requires allocation.  The proc's copy is not mutable.\n     let mut i = 0;\n-    do task::spawn {\n+    task::spawn(proc() {\n         user(i);\n         println!(\"spawned {}\", i)\n-    }\n+    });\n     i += 1;\n     println!(\"original {}\", i)\n }\n@@ -29,9 +29,9 @@ fn bar() {\n     // mutable outside of the proc.\n     let mut i = 0;\n     while i < 10 {\n-        do task::spawn {\n+        task::spawn(proc() {\n             user(i);\n-        }\n+        });\n         i += 1;\n     }\n }\n@@ -40,11 +40,11 @@ fn car() {\n     // Here, i must be shadowed in the proc to be mutable.\n     let mut i = 0;\n     while i < 10 {\n-        do task::spawn {\n+        task::spawn(proc() {\n             let mut i = i;\n             i += 1;\n             user(i);\n-        }\n+        });\n         i += 1;\n     }\n }"}, {"sha": "d81b5818d6693a53ea00bd506cb72b5b09a2a5c5", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -26,12 +26,12 @@ impl fmt::Default for Foo {\n \n pub fn main() {\n     let (p,c) = Chan::new();\n-    do spawn {\n+    spawn(proc() {\n         let mut f = Foo(Cell::new(0));\n         debug!(\"{}\", f);\n         let Foo(ref mut f) = f;\n         assert!(f.get() == 1);\n         c.send(());\n-    }\n+    });\n     p.recv();\n }"}, {"sha": "eb347ab28ff97b1688bb5e4725f4dc9479b0dd21", "filename": "src/test/run-pass/moves-based-on-type-capture-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -2,7 +2,7 @@ use std::task;\n \n pub fn main() {\n     let x = ~\"Hello world!\";\n-    do task::spawn {\n+    task::spawn(proc() {\n         println!(\"{}\", x);\n-    }\n+    });\n }"}, {"sha": "8907db04dadc0b6230f41275c7d3a707dc7d5219", "filename": "src/test/run-pass/native-always-waits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -18,11 +18,11 @@ static mut set: bool = false;\n #[start]\n fn start(argc: int, argv: **u8) -> int {\n     // make sure that native::start always waits for all children to finish\n-    do native::start(argc, argv) {\n-        do spawn {\n+    native::start(argc, argv, proc() {\n+        spawn(proc() {\n             unsafe { set = true; }\n-        }\n-    };\n+        });\n+    });\n \n     // if we didn't set the global, then return a nonzero code\n     if unsafe {set} {0} else {1}"}, {"sha": "f9567858022b33d306027fe511cfabc25897a8bd", "filename": "src/test/run-pass/no-landing-pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -24,9 +24,9 @@ impl Drop for A {\n }\n \n fn main() {\n-    do task::try::<()> {\n+    task::try::<()>(proc() {\n         let _a = A;\n         fail!();\n-    };\n+    });\n     assert!(unsafe { !HIT });\n }"}, {"sha": "bc56712ee3bc1b2b2947c6e8c564b60f13e6a728", "filename": "src/test/run-pass/once-move-out-on-heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -22,8 +22,8 @@ fn foo(blk: proc()) {\n \n pub fn main() {\n     let x = arc::Arc::new(true);\n-    do foo {\n+    foo(proc() {\n         assert!(*x.get());\n         drop(x);\n-    }\n+    });\n }"}, {"sha": "0527f47c112e012dbf1c9d50640440b269fed496", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -29,9 +29,9 @@ pub fn main() {\n     let (port, chan) = stream();\n \n     info!(\"main started\");\n-    do spawn {\n+    spawn(proc() {\n         starve_main(port);\n-    };\n+    });\n     let mut i: int = 0;\n     info!(\"main waiting for alive signal\");\n     chan.send(i);"}, {"sha": "474606ad347bd6747933b7509b24f03959021eae", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -27,12 +27,12 @@ fn test(f: int) -> test {\n pub fn main() {\n     let (p, c) = Chan::new();\n \n-    do task::spawn() {\n+    task::spawn(proc() {\n         let (pp, cc) = Chan::new();\n         c.send(cc);\n \n         let _r = pp.recv();\n-    }\n+    });\n \n     p.recv().send(test(42));\n }"}, {"sha": "f6f6f3ba240cfd2dcaf1b3ef685442e5d35a1e9d", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -20,9 +20,9 @@ fn test00() {\n     let i: int = 0;\n     let mut builder = task::task();\n     let mut result = builder.future_result();\n-    do builder.spawn {\n+    builder.spawn(proc() {\n         start(i)\n-    }\n+    });\n \n     // Sleep long enough for the task to finish.\n     let mut i = 0;"}, {"sha": "8622ff7608999ed45e77151e7d1e9ae4f1019140", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -31,21 +31,21 @@ fn test00() {\n     let number_of_messages: int = 10;\n \n     let c = ch.clone();\n-    do task::spawn || {\n+    task::spawn(proc() {\n         test00_start(&c, number_of_messages * 0, number_of_messages);\n-    }\n+    });\n     let c = ch.clone();\n-    do task::spawn || {\n+    task::spawn(proc() {\n         test00_start(&c, number_of_messages * 1, number_of_messages);\n-    }\n+    });\n     let c = ch.clone();\n-    do task::spawn || {\n+    task::spawn(proc() {\n         test00_start(&c, number_of_messages * 2, number_of_messages);\n-    }\n+    });\n     let c = ch.clone();\n-    do task::spawn || {\n+    task::spawn(proc() {\n         test00_start(&c, number_of_messages * 3, number_of_messages);\n-    }\n+    });\n \n     let mut i: int = 0;\n     while i < number_of_messages {"}, {"sha": "feae49ffeb83c31d23c317e1b04a0483db2e3ea3", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -29,10 +29,10 @@ fn test00() {\n \n     let mut builder = task::task();\n     let result = builder.future_result();\n-    do builder.spawn {\n+    builder.spawn(proc() {\n         let mut ch = ch;\n         test00_start(&mut ch, number_of_messages);\n-    }\n+    });\n \n     let mut i: int = 0;\n     while i < number_of_messages {"}, {"sha": "a4be47323e5b99e126d60551f16951a572113d39", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -56,10 +56,10 @@ fn joinable(f: proc()) -> Port<bool> {\n         *b = true;\n     }\n     let (p, c) = stream();\n-    do task::spawn_unlinked {\n+    task::spawn_unlinked(proc() {\n         let ccc = c;\n         wrapper(ccc, f)\n-    }\n+    });\n     p\n }\n "}, {"sha": "2bf18e1ae1d5f67635e4b29eb3c0f8293f8b997f", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -71,13 +71,13 @@ pub fn main() {\n                          ~dogge2 as ~Pet:Freeze+Send]);\n     let (p1,c1) = Chan::new();\n     let arc1 = arc.clone();\n-    do task::spawn { check_legs(arc1); c1.send(()); }\n+    task::spawn(proc() { check_legs(arc1); c1.send(()); });\n     let (p2,c2) = Chan::new();\n     let arc2 = arc.clone();\n-    do task::spawn { check_names(arc2); c2.send(()); }\n+    task::spawn(proc() { check_names(arc2); c2.send(()); });\n     let (p3,c3) = Chan::new();\n     let arc3 = arc.clone();\n-    do task::spawn { check_pedigree(arc3); c3.send(()); }\n+    task::spawn(proc() { check_pedigree(arc3); c3.send(()); });\n     p1.recv();\n     p2.recv();\n     p3.recv();"}, {"sha": "04507dd01ce5c0890de6c49014cd7475a584d1f6", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc1c34e694f38daeef741cfffc558606443c15/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=3dbc1c34e694f38daeef741cfffc558606443c15", "patch": "@@ -21,9 +21,9 @@ impl Drop for Foo {\n }\n \n pub fn main() {\n-    let x = do task::try {\n+    let x = task::try(proc() {\n         let _b = Foo;\n-    };\n+    });\n \n     let s = x.unwrap_err().move::<&'static str>().unwrap();\n     assert_eq!(s.as_slice(), \"This failure should happen.\");"}]}