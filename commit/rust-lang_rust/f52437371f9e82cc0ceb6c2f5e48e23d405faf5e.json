{"sha": "f52437371f9e82cc0ceb6c2f5e48e23d405faf5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MjQzNzM3MWY5ZTgyY2MwY2ViNmMyZjVlNDhlMjNkNDA1ZmFmNWU=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-08-03T19:49:47Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-08-03T19:49:47Z"}, "message": "Return a Ref from SubtreeTokenSource::get", "tree": {"sha": "32f1da901791a86911259af1d64e21a9f90a5e13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f1da901791a86911259af1d64e21a9f90a5e13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f52437371f9e82cc0ceb6c2f5e48e23d405faf5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f52437371f9e82cc0ceb6c2f5e48e23d405faf5e", "html_url": "https://github.com/rust-lang/rust/commit/f52437371f9e82cc0ceb6c2f5e48e23d405faf5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f52437371f9e82cc0ceb6c2f5e48e23d405faf5e/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58baaa5a15375d84b2734c9f7fc529200b8713a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58baaa5a15375d84b2734c9f7fc529200b8713a", "html_url": "https://github.com/rust-lang/rust/commit/e58baaa5a15375d84b2734c9f7fc529200b8713a"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "9d6d0133f90e70f07ea6c149eea7ec39bf12b5da", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f52437371f9e82cc0ceb6c2f5e48e23d405faf5e/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52437371f9e82cc0ceb6c2f5e48e23d405faf5e/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=f52437371f9e82cc0ceb6c2f5e48e23d405faf5e", "patch": "@@ -1,6 +1,6 @@\n use ra_parser::{Token, TokenSource};\n use ra_syntax::{classify_literal, SmolStr, SyntaxKind, SyntaxKind::*, T};\n-use std::cell::{Cell, RefCell};\n+use std::cell::{Cell, Ref, RefCell};\n use tt::buffer::{Cursor, TokenBuffer};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -20,9 +20,7 @@ impl<'a> SubtreeTokenSource<'a> {\n     // Helper function used in test\n     #[cfg(test)]\n     pub fn text(&self) -> SmolStr {\n-        let idx = self.get(self.curr.1);\n-        let cached = self.cached.borrow();\n-        match cached[idx] {\n+        match *self.get(self.curr.1) {\n             Some(ref tt) => tt.text.clone(),\n             _ => SmolStr::new(\"\"),\n         }\n@@ -43,46 +41,46 @@ impl<'a> SubtreeTokenSource<'a> {\n     }\n \n     fn mk_token(&self, pos: usize) -> Token {\n-        let idx = self.get(pos);\n-        let cached = self.cached.borrow();\n-        match cached[idx] {\n+        match *self.get(pos) {\n             Some(ref tt) => Token { kind: tt.kind, is_jointed_to_next: tt.is_joint_to_next },\n             None => Token { kind: EOF, is_jointed_to_next: false },\n         }\n     }\n \n-    fn get(&self, pos: usize) -> usize {\n-        let mut cached = self.cached.borrow_mut();\n-        if pos < cached.len() {\n-            return pos;\n+    fn get(&self, pos: usize) -> Ref<Option<TtToken>> {\n+        if pos < self.cached.borrow().len() {\n+            return Ref::map(self.cached.borrow(), |c| &c[pos]);\n         }\n \n-        while pos >= cached.len() {\n-            let cursor = self.cached_cursor.get();\n-            if cursor.eof() {\n-                cached.push(None);\n-                continue;\n-            }\n-\n-            match cursor.token_tree() {\n-                Some(tt::TokenTree::Leaf(leaf)) => {\n-                    cached.push(Some(convert_leaf(&leaf)));\n-                    self.cached_cursor.set(cursor.bump());\n-                }\n-                Some(tt::TokenTree::Subtree(subtree)) => {\n-                    self.cached_cursor.set(cursor.subtree().unwrap());\n-                    cached.push(Some(convert_delim(subtree.delimiter, false)));\n+        {\n+            let mut cached = self.cached.borrow_mut();\n+            while pos >= cached.len() {\n+                let cursor = self.cached_cursor.get();\n+                if cursor.eof() {\n+                    cached.push(None);\n+                    continue;\n                 }\n-                None => {\n-                    if let Some(subtree) = cursor.end() {\n-                        cached.push(Some(convert_delim(subtree.delimiter, true)));\n+\n+                match cursor.token_tree() {\n+                    Some(tt::TokenTree::Leaf(leaf)) => {\n+                        cached.push(Some(convert_leaf(&leaf)));\n                         self.cached_cursor.set(cursor.bump());\n                     }\n+                    Some(tt::TokenTree::Subtree(subtree)) => {\n+                        self.cached_cursor.set(cursor.subtree().unwrap());\n+                        cached.push(Some(convert_delim(subtree.delimiter, false)));\n+                    }\n+                    None => {\n+                        if let Some(subtree) = cursor.end() {\n+                            cached.push(Some(convert_delim(subtree.delimiter, true)));\n+                            self.cached_cursor.set(cursor.bump());\n+                        }\n+                    }\n                 }\n             }\n         }\n \n-        pos\n+        Ref::map(self.cached.borrow(), |c| &c[pos])\n     }\n }\n \n@@ -107,9 +105,7 @@ impl<'a> TokenSource for SubtreeTokenSource<'a> {\n \n     /// Is the current token a specified keyword?\n     fn is_keyword(&self, kw: &str) -> bool {\n-        let idx = self.get(self.curr.1);\n-        let cached = self.cached.borrow();\n-        match cached[idx] {\n+        match *self.get(self.curr.1) {\n             Some(ref t) => t.text == *kw,\n             _ => false,\n         }"}]}