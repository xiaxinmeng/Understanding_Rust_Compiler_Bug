{"sha": "0993f9067cfc14cded484906283d1df8e8741e8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OTNmOTA2N2NmYzE0Y2RlZDQ4NDkwNjI4M2QxZGY4ZTg3NDFlOGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-27T16:14:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-27T16:14:04Z"}, "message": "Merge #6651\n\n6651: Profile completions better r=SomeoneToIgnore a=SomeoneToIgnore\n\nDuring https://github.com/rust-analyzer/rust-analyzer/issues/6612 investigation, had added a few more profiling points and considered that they can be useful later, ergo the PR.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "235ecf5049b1af3ed8fdf35cad5b66ceb8f28ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/235ecf5049b1af3ed8fdf35cad5b66ceb8f28ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0993f9067cfc14cded484906283d1df8e8741e8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwSXMCRBK7hj4Ov3rIwAAdHIIAKsvC8W5Ef4oS/0qAl5uI8xG\nUHU+xBTw0II38aIFgUp7JdwNQSlV1ZI2TLicGmzHFumWRuJ7HSv4ldG5tvQPIJdz\nwvMvUA6FLrk0YMkiSreZVvOoRB1xbMnfa020SjzwWS/J0aZv1S+uOd+ycx3rIinc\nyy0XJvadsASCDUHbfbB+BgEsHy5eLCPtk1Jd4NGyx4UD5aMTJkBaMoYx4R98LMQ5\nVTlTVmGxc8GWlUkbHQ3BCIz7UjNCLY9vSIMD0Kkzb9pgLBbVNu26kHDZW9k8zZaZ\n/0Psv1l9kPNb76/t6/VX3I1VjdqDwcNm+6+EaOXS6Vi7jiNyEqzX9iQpYxiltzc=\n=Kecg\n-----END PGP SIGNATURE-----\n", "payload": "tree 235ecf5049b1af3ed8fdf35cad5b66ceb8f28ff4\nparent c66d477f5a72247b04b9025f6ba9c403ca628d41\nparent 04cd4b17bb04031ecf7c7e9b734d22ea74d8f114\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606493644 +0000\ncommitter GitHub <noreply@github.com> 1606493644 +0000\n\nMerge #6651\n\n6651: Profile completions better r=SomeoneToIgnore a=SomeoneToIgnore\n\nDuring https://github.com/rust-analyzer/rust-analyzer/issues/6612 investigation, had added a few more profiling points and considered that they can be useful later, ergo the PR.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0993f9067cfc14cded484906283d1df8e8741e8e", "html_url": "https://github.com/rust-lang/rust/commit/0993f9067cfc14cded484906283d1df8e8741e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0993f9067cfc14cded484906283d1df8e8741e8e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c66d477f5a72247b04b9025f6ba9c403ca628d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/c66d477f5a72247b04b9025f6ba9c403ca628d41", "html_url": "https://github.com/rust-lang/rust/commit/c66d477f5a72247b04b9025f6ba9c403ca628d41"}, {"sha": "04cd4b17bb04031ecf7c7e9b734d22ea74d8f114", "url": "https://api.github.com/repos/rust-lang/rust/commits/04cd4b17bb04031ecf7c7e9b734d22ea74d8f114", "html_url": "https://github.com/rust-lang/rust/commit/04cd4b17bb04031ecf7c7e9b734d22ea74d8f114"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "633b997580a372efebae84cc7bed348f6498efe1", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -1658,6 +1658,7 @@ dependencies = [\n  \"itertools\",\n  \"once_cell\",\n  \"parser\",\n+ \"profile\",\n  \"rayon\",\n  \"rowan\",\n  \"rustc-ap-rustc_lexer\","}, {"sha": "0487465874a82c806fba104b77fe431a9730c592", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -25,6 +25,7 @@ use crate::{\n pub use insert_use::{insert_use, ImportScope, MergeBehaviour};\n \n pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n+    let _p = profile::span(\"mod_path_to_ast\");\n     let mut segments = Vec::new();\n     let mut is_abs = false;\n     match path.kind {"}, {"sha": "304adb93d4e20d8efbf3511ccd5555fc7ba0118b", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -95,6 +95,7 @@ pub fn insert_use<'a>(\n     path: ast::Path,\n     merge: Option<MergeBehaviour>,\n ) -> SyntaxRewriter<'a> {\n+    let _p = profile::span(\"insert_use\");\n     let mut rewriter = SyntaxRewriter::default();\n     let use_item = make::use_(make::use_tree(path.clone(), None, None, false));\n     // merge into existing imports if possible"}, {"sha": "7b62c2c4ed136704f4e6fa5116c13d78281fc365", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -278,6 +278,8 @@ pub(crate) struct Builder {\n \n impl Builder {\n     pub(crate) fn build(self) -> CompletionItem {\n+        let _p = profile::span(\"item::Builder::build\");\n+\n         let mut label = self.label;\n         let mut lookup = self.lookup;\n         let mut insert_text = self.insert_text;"}, {"sha": "64e742b77900b66a677b5cad5fcb4ae7d33688fc", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -17,6 +17,7 @@ pub(crate) fn render_enum_variant<'a>(\n     variant: hir::EnumVariant,\n     path: Option<ModPath>,\n ) -> CompletionItem {\n+    let _p = profile::span(\"render_enum_variant\");\n     EnumVariantRender::new(ctx, local_name, variant, path).render(import_data)\n }\n "}, {"sha": "e8b726ad61b3559e96b0e4dc0ddf616aad50972e", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -15,6 +15,7 @@ pub(crate) fn render_fn<'a>(\n     local_name: Option<String>,\n     fn_: hir::Function,\n ) -> CompletionItem {\n+    let _p = profile::span(\"render_fn\");\n     FunctionRender::new(ctx, local_name, fn_).render(import_data)\n }\n "}, {"sha": "91055a2969a7540005a400243123dc7231177c4c", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -16,6 +16,7 @@ pub(crate) fn render_macro<'a>(\n     name: String,\n     macro_: hir::MacroDef,\n ) -> Option<CompletionItem> {\n+    let _p = profile::span(\"render_macro\");\n     MacroRender::new(ctx, name, macro_).render(import_data)\n }\n "}, {"sha": "ce62babc3ff543d092033978d1427012f0b6c034", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -28,6 +28,7 @@ stdx = { path = \"../stdx\", version = \"0.0.0\" }\n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n parser = { path = \"../parser\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n \n [dev-dependencies]\n walkdir = \"2.3.1\""}, {"sha": "ee89d9867052954b598723e2b4493dfa7016ec28", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0993f9067cfc14cded484906283d1df8e8741e8e/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=0993f9067cfc14cded484906283d1df8e8741e8e", "patch": "@@ -127,6 +127,8 @@ pub struct TreeDiff {\n \n impl TreeDiff {\n     pub fn into_text_edit(&self, builder: &mut TextEditBuilder) {\n+        let _p = profile::span(\"into_text_edit\");\n+\n         for (anchor, to) in self.insertions.iter() {\n             let offset = match anchor {\n                 TreeDiffInsertPos::After(it) => it.text_range().end(),\n@@ -154,6 +156,8 @@ impl TreeDiff {\n ///\n /// This function tries to find a fine-grained diff.\n pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n+    let _p = profile::span(\"diff\");\n+\n     let mut diff = TreeDiff {\n         replacements: FxHashMap::default(),\n         insertions: FxIndexMap::default(),\n@@ -467,6 +471,8 @@ impl<'a> SyntaxRewriter<'a> {\n     }\n \n     pub fn rewrite(&self, node: &SyntaxNode) -> SyntaxNode {\n+        let _p = profile::span(\"rewrite\");\n+\n         if self.f.is_none() && self.replacements.is_empty() && self.insertions.is_empty() {\n             return node.clone();\n         }\n@@ -483,6 +489,7 @@ impl<'a> SyntaxRewriter<'a> {\n     ///\n     /// Returns `None` when there are no replacements.\n     pub fn rewrite_root(&self) -> Option<SyntaxNode> {\n+        let _p = profile::span(\"rewrite_root\");\n         fn element_to_node_or_parent(element: &SyntaxElement) -> SyntaxNode {\n             match element {\n                 SyntaxElement::Node(it) => it.clone(),\n@@ -517,6 +524,8 @@ impl<'a> SyntaxRewriter<'a> {\n     }\n \n     fn rewrite_children(&self, node: &SyntaxNode) -> SyntaxNode {\n+        let _p = profile::span(\"rewrite_children\");\n+\n         //  FIXME: this could be made much faster.\n         let mut new_children = Vec::new();\n         if let Some(elements) = self.insertions(&InsertPos::FirstChildOf(node.clone())) {\n@@ -533,6 +542,8 @@ impl<'a> SyntaxRewriter<'a> {\n         acc: &mut Vec<NodeOrToken<rowan::GreenNode, rowan::GreenToken>>,\n         element: &SyntaxElement,\n     ) {\n+        let _p = profile::span(\"rewrite_self\");\n+\n         if let Some(replacement) = self.replacement(&element) {\n             match replacement {\n                 Replacement::Single(element) => acc.push(element_to_green(element)),\n@@ -588,6 +599,8 @@ fn with_children(\n     parent: &SyntaxNode,\n     new_children: Vec<NodeOrToken<rowan::GreenNode, rowan::GreenToken>>,\n ) -> SyntaxNode {\n+    let _p = profile::span(\"with_children\");\n+\n     let len = new_children.iter().map(|it| it.text_len()).sum::<TextSize>();\n     let new_node = rowan::GreenNode::new(rowan::SyntaxKind(parent.kind() as u16), new_children);\n     let new_root_node = parent.replace_with(new_node);"}]}