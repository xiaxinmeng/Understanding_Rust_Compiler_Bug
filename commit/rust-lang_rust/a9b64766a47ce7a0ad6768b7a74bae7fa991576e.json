{"sha": "a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjY0NzY2YTQ3Y2U3YTBhZDY3NjhiN2E3NGJhZTdmYTk5MTU3NmU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-09T22:24:18Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-09T22:24:18Z"}, "message": "Tweak wording", "tree": {"sha": "e6627c6db4d939eeb885ddf3041b36a02e7cd7d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6627c6db4d939eeb885ddf3041b36a02e7cd7d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl8HmRIACgkQsJhshcDi\n2qGFPg//cwVn9fJqIV76AAh1zcUhDfoOLw6/IYA4XygpRyecixyO8ZsNvWGaIxG8\nDGiAS7RwFmnfQzxciW9l9S2jvFV6v5dm2P3KQgKvamAFmtiZKNY+GlxZBqLwwC3Y\n6pVIU8pDkfB9Oi64bNu3nKUY4/BLWMg15m82NuDpYTJiGqQO25PsaU60bppgsdJG\nwyKRgGbIq35XsF4VsJyNGJBKUYTlU6v2lxZ8UtOzdT37rAo+t11V0QmxD/BLla1e\nW+2qyS8ELSGL0ipZOcGg05Go6GQNz0myu3/Zv4PZKEMlFbEpx97B/szjOgimGOLX\nyGlIAaqwaijkO41gPA0MQpJKMXpLSBEfQb2gLprgoTJUuOh05RtVeJusDYYboAql\n5MAY5zHSfZz+/sb/w717WnlBTK06GmqapWB9mCKXjQuqlYW4/wltW3oZM5R8SVkH\nr6ZE0cH0ZLe/gGKREChLYu0c9UdLIVfaZgNFoLqMXQmdVUjbzMYsp7lDLkmSx6Cs\nkfh2XWL5piLDkGJ3aFFPzhTP/dmwBIVvru+n6rYsh0/YTlgzFO1RWcqHyViQ62kY\nTSc+oJxZojsOG9fAAyBDmh90ugG2W+n01Ls+W7n80o7rvGx8MQsX45oRAv7l27pL\nJY4VGJJ6msd/pA8m+UqDBi1hHKjgQ3XmveVWDFoJC/da8pCiO80=\n=uTmj\n-----END PGP SIGNATURE-----", "payload": "tree e6627c6db4d939eeb885ddf3041b36a02e7cd7d0\nparent 6864546049d8f41b0521ee7dc5dedac4850f6c88\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1594333458 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1594333458 +0900\n\nTweak wording\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "html_url": "https://github.com/rust-lang/rust/commit/a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6864546049d8f41b0521ee7dc5dedac4850f6c88", "url": "https://api.github.com/repos/rust-lang/rust/commits/6864546049d8f41b0521ee7dc5dedac4850f6c88", "html_url": "https://github.com/rust-lang/rust/commit/6864546049d8f41b0521ee7dc5dedac4850f6c88"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "3537fb388d013f34cbf173bf7d5f5aa7cbdec722", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -1091,7 +1091,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             && suggests_in_band\n         {\n             err.help(\n-                \"if you want to use in-band lifetime bindings, \\\n+                \"if you want to experiment with in-band lifetime bindings, \\\n                     add `#![feature(in_band_lifetimes)]` to the crate attributes\",\n             );\n         }"}, {"sha": "33d74feead513bf34132804999decdc4b4efd80f", "filename": "src/test/ui/error-codes/E0261.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(x: &'a str) { }\n    |       |\n    |       help: consider introducing lifetime `'a` here: `<'a>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/E0261.rs:5:9\n@@ -16,7 +16,7 @@ LL | struct Foo {\n LL |     x: &'a str,\n    |         ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0f0406b8e17d8cd5e3375f43b3ddfd1ebaf79d3f", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(x: &'x u8) -> &'x u8 { x }\n    |       |\n    |       help: consider introducing lifetime `'x` here: `<'x>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'x`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:3:23\n@@ -16,7 +16,7 @@ LL | fn foo(x: &'x u8) -> &'x u8 { x }\n    |       |\n    |       help: consider introducing lifetime `'x` here: `<'x>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:15:12\n@@ -32,7 +32,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn inner_2(&self) -> &'b u8 {\n    |                           ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> X<'b> {\n@@ -50,15 +50,15 @@ LL | impl X<'b> {\n    |     |\n    |     help: consider introducing lifetime `'b` here: `<'b>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:25:27\n    |\n LL |     fn inner_3(&self) -> &'b u8 {\n    |                           ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> X<'b> {\n@@ -76,15 +76,15 @@ LL | impl Y<&'a u8> {\n    |     |\n    |     help: consider introducing lifetime `'a` here: `<'a>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:35:25\n    |\n LL |     fn inner(&self) -> &'a u8 {\n    |                         ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'a` here\n    |\n LL | impl<'a> Y<&'a u8> {\n@@ -100,7 +100,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn any_lifetime() -> &'b u8;\n    |                           ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n@@ -116,7 +116,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n    |                           ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n@@ -132,7 +132,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n    |                                        ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait MyTrait<'b, 'a> {\n@@ -150,7 +150,7 @@ LL | impl MyTrait<'a> for Y<&'a u8> {\n    |     |\n    |     help: consider introducing lifetime `'a` here: `<'a>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:50:25\n@@ -160,15 +160,15 @@ LL | impl MyTrait<'a> for Y<&'a u8> {\n    |     |\n    |     help: consider introducing lifetime `'a` here: `<'a>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:53:31\n    |\n LL |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n    |                               ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'a` here\n    |\n LL | impl<'a> MyTrait<'a> for Y<&'a u8> {\n@@ -184,7 +184,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn any_lifetime() -> &'b u8 { &0 }\n    |                           ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n@@ -200,7 +200,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n    |                           ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n@@ -216,7 +216,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n    |                                        ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b> MyTrait<'a> for Y<&'a u8> {"}, {"sha": "f164c0d07a3c45c4f624d84dec5a21c817d94747", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -4,7 +4,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | trait Iterable<'b> {\n@@ -20,7 +20,7 @@ error[E0261]: use of undeclared lifetime name `'undeclared`\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'undeclared` here\n    |\n LL | trait Iterable<'undeclared> {"}, {"sha": "93c0384fcc2663fa8ff82c4170ba356e85814022", "filename": "src/test/ui/methods/method-call-lifetime-args-unresolved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -6,7 +6,7 @@ LL | fn main() {\n LL |     0.clone::<'a>();\n    |               ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to previous error\n "}, {"sha": "d56c1fbd119c8cf2ca95e65798734054e9947dde", "filename": "src/test/ui/regions/regions-in-enums.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -6,7 +6,7 @@ LL | enum No0 {\n LL |     X5(&'foo usize)\n    |         ^^^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-enums.rs:17:9\n@@ -16,7 +16,7 @@ LL | enum No1 {\n LL |     X6(&'a usize)\n    |         ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2750149d09735abd2d725686e7bbe49e575837a7", "filename": "src/test/ui/regions/regions-in-structs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -6,7 +6,7 @@ LL | struct StructDecl {\n LL |     a: &'a isize,\n    |         ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-structs.rs:11:9\n@@ -17,7 +17,7 @@ LL |     a: &'a isize,\n LL |     b: &'a isize,\n    |         ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}, {"sha": "57d39d59c8b04d9edfa6a0ed0fbf6f909b375a10", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -4,7 +4,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn m4(&self, arg: &'b isize) { }\n    |                        ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -20,7 +20,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn m5(&'b self) { }\n    |            ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -36,7 +36,7 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL |     fn m6(&self, arg: Foo<'b>) { }\n    |                           ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | impl<'b, 'a> Foo<'a> {\n@@ -54,7 +54,7 @@ LL |     type X = Option<&'a isize>;\n    |           |\n    |           help: consider introducing lifetime `'a` here: `<'a>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:27:13\n@@ -64,7 +64,7 @@ LL |     enum E {\n LL |         E1(&'a isize)\n    |             ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:30:13\n@@ -74,7 +74,7 @@ LL |     struct S {\n LL |         f: &'a isize\n    |             ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:32:14\n@@ -84,7 +84,7 @@ LL |     fn f(a: &'a isize) { }\n    |         |\n    |         help: consider introducing lifetime `'a` here: `<'a>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:40:17\n@@ -94,7 +94,7 @@ LL | fn fn_types(a: &'a isize,\n    |            |\n    |            help: consider introducing lifetime `'a` here: `<'a>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:42:36\n@@ -103,7 +103,7 @@ LL | ...                   &'b isize,\n    |                        ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n@@ -120,7 +120,7 @@ LL | ...                   &'b isize)>,\n    |                        ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n@@ -139,7 +139,7 @@ LL | fn fn_types(a: &'a isize,\n LL |             c: &'a isize)\n    |                 ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 11 previous errors\n "}, {"sha": "f3cae184ccde813e4d05b5a91d06b988518e5157", "filename": "src/test/ui/regions/regions-undeclared.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -12,7 +12,7 @@ LL | enum EnumDecl {\n LL |     Foo(&'a isize),\n    |          ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:5:10\n@@ -23,7 +23,7 @@ LL |     Foo(&'a isize),\n LL |     Bar(&'a isize),\n    |          ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:8:15\n@@ -33,7 +33,7 @@ LL | fn fnDecl(x: &'a isize,\n    |          |\n    |          help: consider introducing lifetime `'a` here: `<'a>`\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:9:15\n@@ -43,7 +43,7 @@ LL | fn fnDecl(x: &'a isize,\n LL |           y: &'a isize)\n    |               ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a704fea28289969d976c8e45bf0bf0e4a357ba6c", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b64766a47ce7a0ad6768b7a74bae7fa991576e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr?ref=a9b64766a47ce7a0ad6768b7a74bae7fa991576e", "patch": "@@ -7,7 +7,7 @@ LL |     for<'a> dyn Trait1<'a>: Trait1<'a>, // OK\n LL |     (dyn for<'a> Trait1<'a>): Trait1<'a>,\n    |                                      ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/where-lifetime-resolution.rs:8:52\n@@ -18,7 +18,7 @@ LL | fn f() where\n LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n    |                                                    ^^ undeclared lifetime\n    |\n-   = help: if you want to use in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n error: aborting due to 2 previous errors\n "}]}