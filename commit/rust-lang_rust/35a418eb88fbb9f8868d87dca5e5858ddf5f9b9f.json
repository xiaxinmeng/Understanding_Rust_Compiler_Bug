{"sha": "35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTQxOGViODhmYmI5Zjg4NjhkODdkY2E1ZTU4NThkZGY1ZjliOWY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-07T17:34:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-13T01:19:06Z"}, "message": "libcore: modernize send_map's whitespacing", "tree": {"sha": "8ffa2474d6e152ba9895b4a50da00da1679c9e9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ffa2474d6e152ba9895b4a50da00da1679c9e9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f", "html_url": "https://github.com/rust-lang/rust/commit/35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34bf0b9e979e528f14e1265a36488d0707e71805", "url": "https://api.github.com/repos/rust-lang/rust/commits/34bf0b9e979e528f14e1265a36488d0707e71805", "html_url": "https://github.com/rust-lang/rust/commit/34bf0b9e979e528f14e1265a36488d0707e71805"}], "stats": {"total": 88, "additions": 42, "deletions": 46}, "files": [{"sha": "e9eff6db31a299817ef1a2cafbaed68b82df814e", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f", "patch": "@@ -130,10 +130,10 @@ mod linear {\n                                          k: &K) -> SearchResult {\n             let _ = for self.bucket_sequence(hash) |i| {\n                 match buckets[i] {\n-                  Some(bkt) => if bkt.hash == hash && *k == bkt.key {\n-                    return FoundEntry(i);\n-                  },\n-                  None => return FoundHole(i)\n+                    Some(bkt) => if bkt.hash == hash && *k == bkt.key {\n+                        return FoundEntry(i);\n+                    },\n+                    None => return FoundHole(i)\n                 }\n             };\n             return TableFull;\n@@ -158,12 +158,12 @@ mod linear {\n \n         fn insert_opt_bucket(&mut self, +bucket: Option<Bucket<K,V>>) {\n             match move bucket {\n-              Some(Bucket {hash: move hash,\n-                           key: move key,\n-                           value: move value}) => {\n-                self.insert_internal(hash, move key, move value);\n-              }\n-              None => {}\n+                Some(Bucket {hash: move hash,\n+                             key: move key,\n+                             value: move value}) => {\n+                    self.insert_internal(hash, move key, move value);\n+                }\n+                None => {}\n             }\n         }\n \n@@ -172,24 +172,24 @@ mod linear {\n         /// True if there was no previous entry with that key\n         fn insert_internal(&mut self, hash: uint, +k: K, +v: V) -> bool {\n             match self.bucket_for_key_with_hash(self.buckets, hash, &k) {\n-              TableFull => {fail ~\"Internal logic error\";}\n-              FoundHole(idx) => {\n-                debug!(\"insert fresh (%?->%?) at idx %?, hash %?\",\n-                       k, v, idx, hash);\n-                self.buckets[idx] = Some(Bucket {hash: hash,\n-                                                 key: k,\n-                                                 value: v});\n-                self.size += 1;\n-                return true;\n-              }\n-              FoundEntry(idx) => {\n-                debug!(\"insert overwrite (%?->%?) at idx %?, hash %?\",\n-                       k, v, idx, hash);\n-                self.buckets[idx] = Some(Bucket {hash: hash,\n-                                                 key: k,\n-                                                 value: v});\n-                return false;\n-              }\n+                TableFull => { fail ~\"Internal logic error\"; }\n+                FoundHole(idx) => {\n+                    debug!(\"insert fresh (%?->%?) at idx %?, hash %?\",\n+                           k, v, idx, hash);\n+                    self.buckets[idx] = Some(Bucket {hash: hash,\n+                                                     key: k,\n+                                                     value: v});\n+                    self.size += 1;\n+                    true\n+                }\n+                FoundEntry(idx) => {\n+                    debug!(\"insert overwrite (%?->%?) at idx %?, hash %?\",\n+                           k, v, idx, hash);\n+                    self.buckets[idx] = Some(Bucket {hash: hash,\n+                                                     key: k,\n+                                                     value: v});\n+                    false\n+                }\n             }\n         }\n \n@@ -233,12 +233,8 @@ mod linear {\n             // http://www.maths.lse.ac.uk/Courses/MA407/del-hash.pdf\n \n             let mut idx = match self.bucket_for_key(self.buckets, k) {\n-              TableFull | FoundHole(_) => {\n-                return false;\n-              }\n-              FoundEntry(idx) => {\n-                idx\n-              }\n+                TableFull | FoundHole(_) => return false,\n+                FoundEntry(idx) => idx\n             };\n \n             let len_buckets = self.buckets.len();\n@@ -272,8 +268,8 @@ mod linear {\n         fn contains_key(&const self,\n                         k: &K) -> bool {\n             match self.bucket_for_key(self.buckets, k) {\n-              FoundEntry(_) => {true}\n-              TableFull | FoundHole(_) => {false}\n+                FoundEntry(_) => {true}\n+                TableFull | FoundHole(_) => {false}\n             }\n         }\n \n@@ -318,17 +314,17 @@ mod linear {\n     impl<K:Hash IterBytes Eq, V: Copy> LinearMap<K,V> {\n         fn find(&const self, k: &K) -> Option<V> {\n             match self.bucket_for_key(self.buckets, k) {\n-              FoundEntry(idx) => {\n-                // FIXME (#3148): Once we rewrite found_entry, this\n-                // failure case won't be necessary\n-                match self.buckets[idx] {\n-                    Some(bkt) => {Some(copy bkt.value)}\n-                    None => fail ~\"LinearMap::find: internal logic error\"\n+                FoundEntry(idx) => {\n+                    // FIXME (#3148): Once we rewrite found_entry, this\n+                    // failure case won't be necessary\n+                    match self.buckets[idx] {\n+                        Some(bkt) => {Some(copy bkt.value)}\n+                        None => fail ~\"LinearMap::find: internal logic error\"\n+                    }\n+                }\n+                TableFull | FoundHole(_) => {\n+                    None\n                 }\n-              }\n-              TableFull | FoundHole(_) => {\n-                None\n-              }\n             }\n         }\n "}]}