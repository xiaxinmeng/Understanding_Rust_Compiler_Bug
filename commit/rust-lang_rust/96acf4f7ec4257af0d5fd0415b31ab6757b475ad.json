{"sha": "96acf4f7ec4257af0d5fd0415b31ab6757b475ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YWNmNGY3ZWM0MjU3YWYwZDVmZDA0MTViMzFhYjY3NTdiNDc1YWQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-26T13:58:12Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-26T13:58:12Z"}, "message": "Merge #1051\n\n1051: Move ra_ide_api unit tests r=matklad a=detrumi\n\nCloses #1048\n\nCo-authored-by: Wilco Kusee <wilcokusee@gmail.com>", "tree": {"sha": "9682647d3c44d372e0bd84552b24b697f24e44be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9682647d3c44d372e0bd84552b24b697f24e44be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96acf4f7ec4257af0d5fd0415b31ab6757b475ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96acf4f7ec4257af0d5fd0415b31ab6757b475ad", "html_url": "https://github.com/rust-lang/rust/commit/96acf4f7ec4257af0d5fd0415b31ab6757b475ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "619a4c05ba098220ab0fb65d42b7f415dfcc1b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/619a4c05ba098220ab0fb65d42b7f415dfcc1b6a", "html_url": "https://github.com/rust-lang/rust/commit/619a4c05ba098220ab0fb65d42b7f415dfcc1b6a"}, {"sha": "e03189c1109573bec9600eb20efd9291d69f1d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e03189c1109573bec9600eb20efd9291d69f1d5c", "html_url": "https://github.com/rust-lang/rust/commit/e03189c1109573bec9600eb20efd9291d69f1d5c"}], "stats": {"total": 769, "additions": 391, "deletions": 378}, "files": [{"sha": "27788c984623891c35d9639836daa391ef64c00c", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=96acf4f7ec4257af0d5fd0415b31ab6757b475ad", "patch": "@@ -28,7 +28,11 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::{\n+        AnalysisChange, CrateGraph,\n+        mock_analysis::{analysis_and_position, MockAnalysis},\n+        Edition::Edition2018,\n+};\n \n     #[test]\n     fn test_resolve_parent_module() {\n@@ -59,4 +63,28 @@ mod tests {\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n         nav.assert_match(\"baz MODULE FileId(1) [32; 44)\");\n     }\n+\n+    #[test]\n+    fn test_resolve_crate_root() {\n+        let mock = MockAnalysis::with_files(\n+            \"\n+        //- /bar.rs\n+        mod foo;\n+        //- /foo.rs\n+        // empty <|>\n+    \",\n+        );\n+        let root_file = mock.id_of(\"/bar.rs\");\n+        let mod_file = mock.id_of(\"/foo.rs\");\n+        let mut host = mock.analysis_host();\n+        assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n+\n+        let mut crate_graph = CrateGraph::default();\n+        let crate_id = crate_graph.add_crate_root(root_file, Edition2018);\n+        let mut change = AnalysisChange::new();\n+        change.set_crate_graph(crate_graph);\n+        host.apply_change(change);\n+\n+        assert_eq!(host.analysis().crate_for(mod_file).unwrap(), vec![crate_id]);\n+    }\n }"}, {"sha": "20bbf11a3867794ea7dc44855ff2841062415432", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=96acf4f7ec4257af0d5fd0415b31ab6757b475ad", "patch": "@@ -216,9 +216,55 @@ mod tests {\n     use crate::{\n         mock_analysis::single_file_with_position,\n         mock_analysis::analysis_and_position,\n-        FileId\n+        FileId, ReferenceSearchResult\n };\n \n+    #[test]\n+    fn test_find_all_refs_for_local() {\n+        let code = r#\"\n+    fn main() {\n+        let mut i = 1;\n+        let j = 1;\n+        i = i<|> + j;\n+\n+        {\n+            i = 0;\n+        }\n+\n+        i = 5;\n+    }\"#;\n+\n+        let refs = get_all_refs(code);\n+        assert_eq!(refs.len(), 5);\n+    }\n+\n+    #[test]\n+    fn test_find_all_refs_for_param_inside() {\n+        let code = r#\"\n+    fn foo(i : u32) -> u32 {\n+        i<|>\n+    }\"#;\n+\n+        let refs = get_all_refs(code);\n+        assert_eq!(refs.len(), 2);\n+    }\n+\n+    #[test]\n+    fn test_find_all_refs_for_fn_param() {\n+        let code = r#\"\n+    fn foo(i<|> : u32) -> u32 {\n+        i\n+    }\"#;\n+\n+        let refs = get_all_refs(code);\n+        assert_eq!(refs.len(), 2);\n+    }\n+\n+    fn get_all_refs(text: &str) -> ReferenceSearchResult {\n+        let (analysis, position) = single_file_with_position(text);\n+        analysis.find_all_refs(position).unwrap().unwrap()\n+    }\n+\n     #[test]\n     fn test_rename_for_local() {\n         test_rename("}, {"sha": "0eadc4e71980aa189297762a9495f92cfccc223b", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=96acf4f7ec4257af0d5fd0415b31ab6757b475ad", "patch": "@@ -270,3 +270,61 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n         container_name: None,\n     })\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use ra_syntax::SmolStr;\n+    use crate::{\n+        navigation_target::NavigationTarget,\n+        mock_analysis::single_file,\n+        Query,\n+};\n+\n+    #[test]\n+    fn test_world_symbols_with_no_container() {\n+        let code = r#\"\n+    enum FooInner { }\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert!(s.container_name().is_none());\n+    }\n+\n+    #[test]\n+    fn test_world_symbols_include_container_name() {\n+        let code = r#\"\n+fn foo() {\n+    enum FooInner { }\n+}\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+\n+        let code = r#\"\n+mod foo {\n+    struct FooInner;\n+}\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+    }\n+\n+    fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n+        let (analysis, _) = single_file(text);\n+        analysis.symbol_search(Query::new(query.into())).unwrap()\n+    }\n+}"}, {"sha": "276f8a8c8acd5207c9683dc5b6f5a4356851f96e", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96acf4f7ec4257af0d5fd0415b31ab6757b475ad/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=96acf4f7ec4257af0d5fd0415b31ab6757b475ad", "patch": "@@ -85,3 +85,260 @@ fn syntax_tree_for_token<T: AstToken>(node: &T, text_range: TextRange) -> Option\n \r\n     None\r\n }\r\n+\r\n+#[cfg(test)]\r\n+mod tests {\r\n+    use crate::mock_analysis::{single_file, single_file_with_range};\r\n+\r\n+    #[test]\r\n+    fn test_syntax_tree_without_range() {\r\n+        // Basic syntax\r\n+        let (analysis, file_id) = single_file(r#\"fn foo() {}\"#);\r\n+        let syn = analysis.syntax_tree(file_id, None);\r\n+\r\n+        assert_eq!(\r\n+            syn.trim(),\r\n+            r#\"\r\n+SOURCE_FILE@[0; 11)\r\n+  FN_DEF@[0; 11)\r\n+    FN_KW@[0; 2)\r\n+    WHITESPACE@[2; 3)\r\n+    NAME@[3; 6)\r\n+      IDENT@[3; 6) \"foo\"\r\n+    PARAM_LIST@[6; 8)\r\n+      L_PAREN@[6; 7)\r\n+      R_PAREN@[7; 8)\r\n+    WHITESPACE@[8; 9)\r\n+    BLOCK@[9; 11)\r\n+      L_CURLY@[9; 10)\r\n+      R_CURLY@[10; 11)\r\n+    \"#\r\n+            .trim()\r\n+        );\r\n+\r\n+        let (analysis, file_id) = single_file(\r\n+            r#\"\r\n+fn test() {\r\n+    assert!(\"\r\n+    fn foo() {\r\n+    }\r\n+    \", \"\");\r\n+}\"#\r\n+            .trim(),\r\n+        );\r\n+        let syn = analysis.syntax_tree(file_id, None);\r\n+\r\n+        assert_eq!(\r\n+            syn.trim(),\r\n+            r#\"\r\n+SOURCE_FILE@[0; 60)\r\n+  FN_DEF@[0; 60)\r\n+    FN_KW@[0; 2)\r\n+    WHITESPACE@[2; 3)\r\n+    NAME@[3; 7)\r\n+      IDENT@[3; 7) \"test\"\r\n+    PARAM_LIST@[7; 9)\r\n+      L_PAREN@[7; 8)\r\n+      R_PAREN@[8; 9)\r\n+    WHITESPACE@[9; 10)\r\n+    BLOCK@[10; 60)\r\n+      L_CURLY@[10; 11)\r\n+      WHITESPACE@[11; 16)\r\n+      EXPR_STMT@[16; 58)\r\n+        MACRO_CALL@[16; 57)\r\n+          PATH@[16; 22)\r\n+            PATH_SEGMENT@[16; 22)\r\n+              NAME_REF@[16; 22)\r\n+                IDENT@[16; 22) \"assert\"\r\n+          EXCL@[22; 23)\r\n+          TOKEN_TREE@[23; 57)\r\n+            L_PAREN@[23; 24)\r\n+            STRING@[24; 52)\r\n+            COMMA@[52; 53)\r\n+            WHITESPACE@[53; 54)\r\n+            STRING@[54; 56)\r\n+            R_PAREN@[56; 57)\r\n+        SEMI@[57; 58)\r\n+      WHITESPACE@[58; 59)\r\n+      R_CURLY@[59; 60)\r\n+    \"#\r\n+            .trim()\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn test_syntax_tree_with_range() {\r\n+        let (analysis, range) = single_file_with_range(r#\"<|>fn foo() {}<|>\"#.trim());\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+\r\n+        assert_eq!(\r\n+            syn.trim(),\r\n+            r#\"\r\n+FN_DEF@[0; 11)\r\n+  FN_KW@[0; 2)\r\n+  WHITESPACE@[2; 3)\r\n+  NAME@[3; 6)\r\n+    IDENT@[3; 6) \"foo\"\r\n+  PARAM_LIST@[6; 8)\r\n+    L_PAREN@[6; 7)\r\n+    R_PAREN@[7; 8)\r\n+  WHITESPACE@[8; 9)\r\n+  BLOCK@[9; 11)\r\n+    L_CURLY@[9; 10)\r\n+    R_CURLY@[10; 11)\r\n+    \"#\r\n+            .trim()\r\n+        );\r\n+\r\n+        let (analysis, range) = single_file_with_range(\r\n+            r#\"fn test() {\r\n+    <|>assert!(\"\r\n+    fn foo() {\r\n+    }\r\n+    \", \"\");<|>\r\n+}\"#\r\n+            .trim(),\r\n+        );\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+\r\n+        assert_eq!(\r\n+            syn.trim(),\r\n+            r#\"\r\n+EXPR_STMT@[16; 58)\r\n+  MACRO_CALL@[16; 57)\r\n+    PATH@[16; 22)\r\n+      PATH_SEGMENT@[16; 22)\r\n+        NAME_REF@[16; 22)\r\n+          IDENT@[16; 22) \"assert\"\r\n+    EXCL@[22; 23)\r\n+    TOKEN_TREE@[23; 57)\r\n+      L_PAREN@[23; 24)\r\n+      STRING@[24; 52)\r\n+      COMMA@[52; 53)\r\n+      WHITESPACE@[53; 54)\r\n+      STRING@[54; 56)\r\n+      R_PAREN@[56; 57)\r\n+  SEMI@[57; 58)\r\n+    \"#\r\n+            .trim()\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn test_syntax_tree_inside_string() {\r\n+        let (analysis, range) = single_file_with_range(\r\n+            r#\"fn test() {\r\n+    assert!(\"\r\n+<|>fn foo() {\r\n+}<|>\r\n+fn bar() {\r\n+}\r\n+    \", \"\");\r\n+}\"#\r\n+            .trim(),\r\n+        );\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+        assert_eq!(\r\n+            syn.trim(),\r\n+            r#\"\r\n+SOURCE_FILE@[0; 12)\r\n+  FN_DEF@[0; 12)\r\n+    FN_KW@[0; 2)\r\n+    WHITESPACE@[2; 3)\r\n+    NAME@[3; 6)\r\n+      IDENT@[3; 6) \"foo\"\r\n+    PARAM_LIST@[6; 8)\r\n+      L_PAREN@[6; 7)\r\n+      R_PAREN@[7; 8)\r\n+    WHITESPACE@[8; 9)\r\n+    BLOCK@[9; 12)\r\n+      L_CURLY@[9; 10)\r\n+      WHITESPACE@[10; 11)\r\n+      R_CURLY@[11; 12)\r\n+\"#\r\n+            .trim()\r\n+        );\r\n+\r\n+        // With a raw string\r\n+        let (analysis, range) = single_file_with_range(\r\n+            r###\"fn test() {\r\n+    assert!(r#\"\r\n+<|>fn foo() {\r\n+}<|>\r\n+fn bar() {\r\n+}\r\n+    \"#, \"\");\r\n+}\"###\r\n+                .trim(),\r\n+        );\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+        assert_eq!(\r\n+            syn.trim(),\r\n+            r#\"\r\n+SOURCE_FILE@[0; 12)\r\n+  FN_DEF@[0; 12)\r\n+    FN_KW@[0; 2)\r\n+    WHITESPACE@[2; 3)\r\n+    NAME@[3; 6)\r\n+      IDENT@[3; 6) \"foo\"\r\n+    PARAM_LIST@[6; 8)\r\n+      L_PAREN@[6; 7)\r\n+      R_PAREN@[7; 8)\r\n+    WHITESPACE@[8; 9)\r\n+    BLOCK@[9; 12)\r\n+      L_CURLY@[9; 10)\r\n+      WHITESPACE@[10; 11)\r\n+      R_CURLY@[11; 12)\r\n+\"#\r\n+            .trim()\r\n+        );\r\n+\r\n+        // With a raw string\r\n+        let (analysis, range) = single_file_with_range(\r\n+            r###\"fn test() {\r\n+    assert!(r<|>#\"\r\n+fn foo() {\r\n+}\r\n+fn bar() {\r\n+}\"<|>#, \"\");\r\n+}\"###\r\n+                .trim(),\r\n+        );\r\n+        let syn = analysis.syntax_tree(range.file_id, Some(range.range));\r\n+        assert_eq!(\r\n+            syn.trim(),\r\n+            r#\"\r\n+SOURCE_FILE@[0; 25)\r\n+  FN_DEF@[0; 12)\r\n+    FN_KW@[0; 2)\r\n+    WHITESPACE@[2; 3)\r\n+    NAME@[3; 6)\r\n+      IDENT@[3; 6) \"foo\"\r\n+    PARAM_LIST@[6; 8)\r\n+      L_PAREN@[6; 7)\r\n+      R_PAREN@[7; 8)\r\n+    WHITESPACE@[8; 9)\r\n+    BLOCK@[9; 12)\r\n+      L_CURLY@[9; 10)\r\n+      WHITESPACE@[10; 11)\r\n+      R_CURLY@[11; 12)\r\n+  WHITESPACE@[12; 13)\r\n+  FN_DEF@[13; 25)\r\n+    FN_KW@[13; 15)\r\n+    WHITESPACE@[15; 16)\r\n+    NAME@[16; 19)\r\n+      IDENT@[16; 19) \"bar\"\r\n+    PARAM_LIST@[19; 21)\r\n+      L_PAREN@[19; 20)\r\n+      R_PAREN@[20; 21)\r\n+    WHITESPACE@[21; 22)\r\n+    BLOCK@[22; 25)\r\n+      L_CURLY@[22; 23)\r\n+      WHITESPACE@[23; 24)\r\n+      R_CURLY@[24; 25)\r\n+\r\n+\"#\r\n+            .trim()\r\n+        );\r\n+    }\r\n+}\r"}, {"sha": "d4ff21c09ccab9fc79b72152f75b94952835d9e9", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "removed", "additions": 0, "deletions": 376, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/619a4c05ba098220ab0fb65d42b7f415dfcc1b6a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619a4c05ba098220ab0fb65d42b7f415dfcc1b6a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=619a4c05ba098220ab0fb65d42b7f415dfcc1b6a", "patch": "@@ -1,376 +0,0 @@\n-use ra_ide_api::{\n-    mock_analysis::{single_file, single_file_with_position, single_file_with_range, MockAnalysis},\n-    AnalysisChange, CrateGraph, Edition::Edition2018, Query, NavigationTarget,\n-    ReferenceSearchResult,\n-};\n-use ra_syntax::SmolStr;\n-\n-#[test]\n-fn test_resolve_crate_root() {\n-    let mock = MockAnalysis::with_files(\n-        \"\n-        //- /bar.rs\n-        mod foo;\n-        //- /foo.rs\n-        // empty <|>\n-    \",\n-    );\n-    let root_file = mock.id_of(\"/bar.rs\");\n-    let mod_file = mock.id_of(\"/foo.rs\");\n-    let mut host = mock.analysis_host();\n-    assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n-\n-    let mut crate_graph = CrateGraph::default();\n-    let crate_id = crate_graph.add_crate_root(root_file, Edition2018);\n-    let mut change = AnalysisChange::new();\n-    change.set_crate_graph(crate_graph);\n-    host.apply_change(change);\n-\n-    assert_eq!(host.analysis().crate_for(mod_file).unwrap(), vec![crate_id]);\n-}\n-\n-fn get_all_refs(text: &str) -> ReferenceSearchResult {\n-    let (analysis, position) = single_file_with_position(text);\n-    analysis.find_all_refs(position).unwrap().unwrap()\n-}\n-\n-fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n-    let (analysis, _) = single_file(text);\n-    analysis.symbol_search(Query::new(query.into())).unwrap()\n-}\n-\n-#[test]\n-fn test_find_all_refs_for_local() {\n-    let code = r#\"\n-    fn main() {\n-        let mut i = 1;\n-        let j = 1;\n-        i = i<|> + j;\n-\n-        {\n-            i = 0;\n-        }\n-\n-        i = 5;\n-    }\"#;\n-\n-    let refs = get_all_refs(code);\n-    assert_eq!(refs.len(), 5);\n-}\n-\n-#[test]\n-fn test_find_all_refs_for_param_inside() {\n-    let code = r#\"\n-    fn foo(i : u32) -> u32 {\n-        i<|>\n-    }\"#;\n-\n-    let refs = get_all_refs(code);\n-    assert_eq!(refs.len(), 2);\n-}\n-\n-#[test]\n-fn test_find_all_refs_for_fn_param() {\n-    let code = r#\"\n-    fn foo(i<|> : u32) -> u32 {\n-        i\n-    }\"#;\n-\n-    let refs = get_all_refs(code);\n-    assert_eq!(refs.len(), 2);\n-}\n-\n-#[test]\n-fn test_world_symbols_with_no_container() {\n-    let code = r#\"\n-    enum FooInner { }\n-    \"#;\n-\n-    let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-    let s = symbols.pop().unwrap();\n-\n-    assert_eq!(s.name(), \"FooInner\");\n-    assert!(s.container_name().is_none());\n-}\n-\n-#[test]\n-fn test_world_symbols_include_container_name() {\n-    let code = r#\"\n-fn foo() {\n-    enum FooInner { }\n-}\n-    \"#;\n-\n-    let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-    let s = symbols.pop().unwrap();\n-\n-    assert_eq!(s.name(), \"FooInner\");\n-    assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n-\n-    let code = r#\"\n-mod foo {\n-    struct FooInner;\n-}\n-    \"#;\n-\n-    let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-    let s = symbols.pop().unwrap();\n-\n-    assert_eq!(s.name(), \"FooInner\");\n-    assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n-}\n-\n-#[test]\n-fn test_syntax_tree_without_range() {\n-    // Basic syntax\n-    let (analysis, file_id) = single_file(r#\"fn foo() {}\"#);\n-    let syn = analysis.syntax_tree(file_id, None);\n-\n-    assert_eq!(\n-        syn.trim(),\n-        r#\"\n-SOURCE_FILE@[0; 11)\n-  FN_DEF@[0; 11)\n-    FN_KW@[0; 2)\n-    WHITESPACE@[2; 3)\n-    NAME@[3; 6)\n-      IDENT@[3; 6) \"foo\"\n-    PARAM_LIST@[6; 8)\n-      L_PAREN@[6; 7)\n-      R_PAREN@[7; 8)\n-    WHITESPACE@[8; 9)\n-    BLOCK@[9; 11)\n-      L_CURLY@[9; 10)\n-      R_CURLY@[10; 11)\n-    \"#\n-        .trim()\n-    );\n-\n-    let (analysis, file_id) = single_file(\n-        r#\"\n-fn test() {\n-    assert!(\"\n-    fn foo() {\n-    }\n-    \", \"\");\n-}\"#\n-        .trim(),\n-    );\n-    let syn = analysis.syntax_tree(file_id, None);\n-\n-    assert_eq!(\n-        syn.trim(),\n-        r#\"\n-SOURCE_FILE@[0; 60)\n-  FN_DEF@[0; 60)\n-    FN_KW@[0; 2)\n-    WHITESPACE@[2; 3)\n-    NAME@[3; 7)\n-      IDENT@[3; 7) \"test\"\n-    PARAM_LIST@[7; 9)\n-      L_PAREN@[7; 8)\n-      R_PAREN@[8; 9)\n-    WHITESPACE@[9; 10)\n-    BLOCK@[10; 60)\n-      L_CURLY@[10; 11)\n-      WHITESPACE@[11; 16)\n-      EXPR_STMT@[16; 58)\n-        MACRO_CALL@[16; 57)\n-          PATH@[16; 22)\n-            PATH_SEGMENT@[16; 22)\n-              NAME_REF@[16; 22)\n-                IDENT@[16; 22) \"assert\"\n-          EXCL@[22; 23)\n-          TOKEN_TREE@[23; 57)\n-            L_PAREN@[23; 24)\n-            STRING@[24; 52)\n-            COMMA@[52; 53)\n-            WHITESPACE@[53; 54)\n-            STRING@[54; 56)\n-            R_PAREN@[56; 57)\n-        SEMI@[57; 58)\n-      WHITESPACE@[58; 59)\n-      R_CURLY@[59; 60)\n-    \"#\n-        .trim()\n-    );\n-}\n-\n-#[test]\n-fn test_syntax_tree_with_range() {\n-    let (analysis, range) = single_file_with_range(r#\"<|>fn foo() {}<|>\"#.trim());\n-    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n-\n-    assert_eq!(\n-        syn.trim(),\n-        r#\"\n-FN_DEF@[0; 11)\n-  FN_KW@[0; 2)\n-  WHITESPACE@[2; 3)\n-  NAME@[3; 6)\n-    IDENT@[3; 6) \"foo\"\n-  PARAM_LIST@[6; 8)\n-    L_PAREN@[6; 7)\n-    R_PAREN@[7; 8)\n-  WHITESPACE@[8; 9)\n-  BLOCK@[9; 11)\n-    L_CURLY@[9; 10)\n-    R_CURLY@[10; 11)\n-    \"#\n-        .trim()\n-    );\n-\n-    let (analysis, range) = single_file_with_range(\n-        r#\"fn test() {\n-    <|>assert!(\"\n-    fn foo() {\n-    }\n-    \", \"\");<|>\n-}\"#\n-        .trim(),\n-    );\n-    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n-\n-    assert_eq!(\n-        syn.trim(),\n-        r#\"\n-EXPR_STMT@[16; 58)\n-  MACRO_CALL@[16; 57)\n-    PATH@[16; 22)\n-      PATH_SEGMENT@[16; 22)\n-        NAME_REF@[16; 22)\n-          IDENT@[16; 22) \"assert\"\n-    EXCL@[22; 23)\n-    TOKEN_TREE@[23; 57)\n-      L_PAREN@[23; 24)\n-      STRING@[24; 52)\n-      COMMA@[52; 53)\n-      WHITESPACE@[53; 54)\n-      STRING@[54; 56)\n-      R_PAREN@[56; 57)\n-  SEMI@[57; 58)\n-    \"#\n-        .trim()\n-    );\n-}\n-\n-#[test]\n-fn test_syntax_tree_inside_string() {\n-    let (analysis, range) = single_file_with_range(\n-        r#\"fn test() {\n-    assert!(\"\n-<|>fn foo() {\n-}<|>\n-fn bar() {\n-}\n-    \", \"\");\n-}\"#\n-        .trim(),\n-    );\n-    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n-    assert_eq!(\n-        syn.trim(),\n-        r#\"\n-SOURCE_FILE@[0; 12)\n-  FN_DEF@[0; 12)\n-    FN_KW@[0; 2)\n-    WHITESPACE@[2; 3)\n-    NAME@[3; 6)\n-      IDENT@[3; 6) \"foo\"\n-    PARAM_LIST@[6; 8)\n-      L_PAREN@[6; 7)\n-      R_PAREN@[7; 8)\n-    WHITESPACE@[8; 9)\n-    BLOCK@[9; 12)\n-      L_CURLY@[9; 10)\n-      WHITESPACE@[10; 11)\n-      R_CURLY@[11; 12)\n-\"#\n-        .trim()\n-    );\n-\n-    // With a raw string\n-    let (analysis, range) = single_file_with_range(\n-        r###\"fn test() {\n-    assert!(r#\"\n-<|>fn foo() {\n-}<|>\n-fn bar() {\n-}\n-    \"#, \"\");\n-}\"###\n-            .trim(),\n-    );\n-    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n-    assert_eq!(\n-        syn.trim(),\n-        r#\"\n-SOURCE_FILE@[0; 12)\n-  FN_DEF@[0; 12)\n-    FN_KW@[0; 2)\n-    WHITESPACE@[2; 3)\n-    NAME@[3; 6)\n-      IDENT@[3; 6) \"foo\"\n-    PARAM_LIST@[6; 8)\n-      L_PAREN@[6; 7)\n-      R_PAREN@[7; 8)\n-    WHITESPACE@[8; 9)\n-    BLOCK@[9; 12)\n-      L_CURLY@[9; 10)\n-      WHITESPACE@[10; 11)\n-      R_CURLY@[11; 12)\n-\"#\n-        .trim()\n-    );\n-\n-    // With a raw string\n-    let (analysis, range) = single_file_with_range(\n-        r###\"fn test() {\n-    assert!(r<|>#\"\n-fn foo() {\n-}\n-fn bar() {\n-}\"<|>#, \"\");\n-}\"###\n-            .trim(),\n-    );\n-    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n-    assert_eq!(\n-        syn.trim(),\n-        r#\"\n-SOURCE_FILE@[0; 25)\n-  FN_DEF@[0; 12)\n-    FN_KW@[0; 2)\n-    WHITESPACE@[2; 3)\n-    NAME@[3; 6)\n-      IDENT@[3; 6) \"foo\"\n-    PARAM_LIST@[6; 8)\n-      L_PAREN@[6; 7)\n-      R_PAREN@[7; 8)\n-    WHITESPACE@[8; 9)\n-    BLOCK@[9; 12)\n-      L_CURLY@[9; 10)\n-      WHITESPACE@[10; 11)\n-      R_CURLY@[11; 12)\n-  WHITESPACE@[12; 13)\n-  FN_DEF@[13; 25)\n-    FN_KW@[13; 15)\n-    WHITESPACE@[15; 16)\n-    NAME@[16; 19)\n-      IDENT@[16; 19) \"bar\"\n-    PARAM_LIST@[19; 21)\n-      L_PAREN@[19; 20)\n-      R_PAREN@[20; 21)\n-    WHITESPACE@[21; 22)\n-    BLOCK@[22; 25)\n-      L_CURLY@[22; 23)\n-      WHITESPACE@[23; 24)\n-      R_CURLY@[24; 25)\n-\n-\"#\n-        .trim()\n-    );\n-}"}]}