{"sha": "11d9959641e017a9e01e0a2a408c23421d26cbe3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDk5NTk2NDFlMDE3YTllMDFlMGEyYTQwOGMyMzQyMWQyNmNiZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-14T15:39:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-14T15:39:59Z"}, "message": "Auto merge of #48864 - oli-obk:miri_incremental_regression, r=eddyb\n\nCache const eval queries\n\nfixes #48846 (I think, still running more perf tests, but tuple-stress stops recomputing any constants)\n\nr? @michaelwoerister", "tree": {"sha": "aafd3edb7f71780356a092e8b0a9d5938974b9ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aafd3edb7f71780356a092e8b0a9d5938974b9ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d9959641e017a9e01e0a2a408c23421d26cbe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d9959641e017a9e01e0a2a408c23421d26cbe3", "html_url": "https://github.com/rust-lang/rust/commit/11d9959641e017a9e01e0a2a408c23421d26cbe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d9959641e017a9e01e0a2a408c23421d26cbe3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d089fe974edc53fa34384e8e76eeb1eca0d89042", "url": "https://api.github.com/repos/rust-lang/rust/commits/d089fe974edc53fa34384e8e76eeb1eca0d89042", "html_url": "https://github.com/rust-lang/rust/commit/d089fe974edc53fa34384e8e76eeb1eca0d89042"}, {"sha": "0d88db1693a07095555d07d14ffdcb373b6bc352", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d88db1693a07095555d07d14ffdcb373b6bc352", "html_url": "https://github.com/rust-lang/rust/commit/0d88db1693a07095555d07d14ffdcb373b6bc352"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "11675f542873d262ac7d1aa833b09b6e1608406d", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11d9959641e017a9e01e0a2a408c23421d26cbe3/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d9959641e017a9e01e0a2a408c23421d26cbe3/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=11d9959641e017a9e01e0a2a408c23421d26cbe3", "patch": "@@ -178,6 +178,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n     fn describe(tcx: TyCtxt, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>) -> String {\n         format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.instance.def.def_id()))\n     }\n+\n+    #[inline]\n+    fn cache_on_disk(_key: Self::Key) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        tcx.on_disk_query_result_cache.try_load_query_result(tcx, id).map(Ok)\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::mir_keys<'tcx> {"}, {"sha": "c1783654effefc868efaeb0881952500c419f1c9", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11d9959641e017a9e01e0a2a408c23421d26cbe3/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d9959641e017a9e01e0a2a408c23421d26cbe3/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=11d9959641e017a9e01e0a2a408c23421d26cbe3", "patch": "@@ -86,7 +86,7 @@ pub use self::on_disk_cache::OnDiskCache;\n // the driver creates (using several `rustc_*` crates).\n //\n // The result of query must implement Clone. They must also implement ty::maps::values::Value\n-// which produces an appropiate error value if the query resulted in a query cycle.\n+// which produces an appropriate error value if the query resulted in a query cycle.\n // Queries marked with `fatal_cycle` do not need that implementation\n // as they will raise an fatal error on query cycles instead.\n define_maps! { <'tcx>"}, {"sha": "35e874b74d9ae3a70dc93078d92c098da4b8e860", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/11d9959641e017a9e01e0a2a408c23421d26cbe3/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d9959641e017a9e01e0a2a408c23421d26cbe3/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=11d9959641e017a9e01e0a2a408c23421d26cbe3", "patch": "@@ -221,6 +221,24 @@ impl<'sess> OnDiskCache<'sess> {\n                 encode_query_results::<symbol_name, _>(tcx, enc, qri)?;\n                 encode_query_results::<check_match, _>(tcx, enc, qri)?;\n                 encode_query_results::<trans_fn_attrs, _>(tcx, enc, qri)?;\n+\n+                // const eval is special, it only encodes successfully evaluated constants\n+                use ty::maps::plumbing::GetCacheInternal;\n+                for (key, entry) in const_eval::get_cache_internal(tcx).map.iter() {\n+                    use ty::maps::config::QueryDescription;\n+                    if const_eval::cache_on_disk(key.clone()) {\n+                        if let Ok(ref value) = entry.value {\n+                            let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n+\n+                            // Record position of the cache entry\n+                            qri.push((dep_node, AbsoluteBytePos::new(enc.position())));\n+\n+                            // Encode the type check tables with the SerializedDepNodeIndex\n+                            // as tag.\n+                            enc.encode_tagged(dep_node, value)?;\n+                        }\n+                    }\n+                }\n             }\n \n             // Encode diagnostics\n@@ -563,6 +581,7 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<interpret::AllocId> for CacheDecoder<'a, '\n                 tcx.interpret_interner.intern_at_reserved(alloc_id, allocation);\n \n                 if let Some(glob) = Option::<DefId>::decode(self)? {\n+                    trace!(\"connecting alloc {:?} with {:?}\", alloc_id, glob);\n                     tcx.interpret_interner.cache(glob, alloc_id);\n                 }\n "}, {"sha": "82eb28287b033c16c87e186421042ade8ff36138", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11d9959641e017a9e01e0a2a408c23421d26cbe3/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d9959641e017a9e01e0a2a408c23421d26cbe3/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=11d9959641e017a9e01e0a2a408c23421d26cbe3", "patch": "@@ -110,6 +110,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n         span = mir.span;\n         let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n         let alloc = tcx.interpret_interner.get_cached(cid.instance.def_id());\n+        let is_static = tcx.is_static(cid.instance.def_id()).is_some();\n         let alloc = match alloc {\n             Some(alloc) => {\n                 assert!(cid.promoted.is_none());\n@@ -123,7 +124,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n                     layout.align,\n                     None,\n                 )?;\n-                if tcx.is_static(cid.instance.def_id()).is_some() {\n+                if is_static {\n                     tcx.interpret_interner.cache(cid.instance.def_id(), ptr.alloc_id);\n                 }\n                 let internally_mutable = !layout.ty.is_freeze(tcx, param_env, mir.span);\n@@ -151,8 +152,11 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n             }\n         };\n         let ptr = MemoryPointer::new(alloc, 0).into();\n+        // always try to read the value and report errors\n         let value = match ecx.try_read_value(ptr, layout.align, layout.ty)? {\n-            Some(val) => val,\n+            // if it's a constant (so it needs no address, directly compute its value)\n+            Some(val) if !is_static => val,\n+            // point at the allocation\n             _ => Value::ByRef(ptr, layout.align),\n         };\n         Ok((value, ptr, layout.ty))"}]}