{"sha": "7e16822925380d4c4236caec116c8076b8ca150a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTY4MjI5MjUzODBkNGM0MjM2Y2FlYzExNmM4MDc2YjhjYTE1MGE=", "commit": {"author": {"name": "Matthew Hall", "email": "matthew@quickbeam.me.uk", "date": "2015-05-29T14:07:34Z"}, "committer": {"name": "Matthew Hall", "email": "matthew@quickbeam.me.uk", "date": "2015-05-29T14:41:25Z"}, "message": "Add lint for ifs that could be collapsed\n\n\"Collapsible\" ifs are ones which contain only a then block, and the then\nblock consists of an if that only has a then block.", "tree": {"sha": "fca446ce2b7b7c91d72214ea8db2cd122fe1a6c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca446ce2b7b7c91d72214ea8db2cd122fe1a6c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e16822925380d4c4236caec116c8076b8ca150a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e16822925380d4c4236caec116c8076b8ca150a", "html_url": "https://github.com/rust-lang/rust/commit/7e16822925380d4c4236caec116c8076b8ca150a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e16822925380d4c4236caec116c8076b8ca150a/comments", "author": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb421ca2021065a5c0bbaa2202ebb6c85c3dde79", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb421ca2021065a5c0bbaa2202ebb6c85c3dde79", "html_url": "https://github.com/rust-lang/rust/commit/eb421ca2021065a5c0bbaa2202ebb6c85c3dde79"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "31ac1e62be6fd7946a41c1b3995cb391596d5531", "filename": "src/collapsible_if.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7e16822925380d4c4236caec116c8076b8ca150a/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e16822925380d4c4236caec116c8076b8ca150a/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=7e16822925380d4c4236caec116c8076b8ca150a", "patch": "@@ -0,0 +1,80 @@\n+//! Checks for if expressions that contain only an if expression.\n+//!\n+//! For example, the lint would catch:\n+//!\n+//! ```\n+//! if x {\n+//!     if y {\n+//!         println!(\"Hello world\");\n+//!     }\n+//! }\n+//! ```\n+//!\n+//! This lint is **warn** by default\n+\n+use rustc::plugin::Registry;\n+use rustc::lint::*;\n+use rustc::middle::def::*;\n+use syntax::ast::*;\n+use syntax::ptr::P;\n+use syntax::codemap::{Span, Spanned};\n+use syntax::print::pprust::expr_to_string;\n+\n+declare_lint! {\n+    pub COLLAPSIBLE_IF,\n+    Warn,\n+    \"Warn on if expressions that can be collapsed\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct CollapsibleIf;\n+\n+impl LintPass for CollapsibleIf {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(COLLAPSIBLE_IF)\n+    }\n+    \n+    fn check_expr(&mut self, cx: &Context, e: &Expr) {\n+        if let ExprIf(ref check, ref then_block, None) = e.node {\n+            let expr = check_block(then_block);\n+            let expr = match expr {\n+                Some(e) => e,\n+                None => return\n+            };\n+            if let ExprIf(ref check_inner, _, None) = expr.node {\n+                let (check, check_inner) = (check_to_string(check), check_to_string(check_inner));\n+                cx.span_lint(COLLAPSIBLE_IF, e.span,\n+                             &format!(\"This if statement can be collapsed. Try: if {} && {}\", check, check_inner));\n+            }\n+\t\t    }\n+    }\n+}\n+\n+fn requires_brackets(e: &Expr) -> bool {\n+    match e.node {\n+        ExprBinary(Spanned {node: n, ..}, _, _) if n == BiEq => false,\n+        _ => true\n+    }\n+}\n+\n+fn check_to_string(e: &Expr) -> String {\n+    if requires_brackets(e) {\n+        format!(\"({})\", expr_to_string(e))\n+    } else {\n+        format!(\"{}\", expr_to_string(e))\n+    }\n+}\n+\n+fn check_block(b: &Block) -> Option<&P<Expr>> {\n+    if b.stmts.len() == 1 && b.expr.is_none() {\n+        let stmt = &b.stmts[0];\n+        return match stmt.node {\n+            StmtExpr(ref e, _) => Some(e),\n+            _ => None\n+        };\n+    }\n+    if let Some(ref e) = b.expr {\n+        return Some(e);\n+    }\n+    None\n+}"}, {"sha": "00d28deeed97d5eb91b9dc0792c1ff0be4df2295", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e16822925380d4c4236caec116c8076b8ca150a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e16822925380d4c4236caec116c8076b8ca150a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7e16822925380d4c4236caec116c8076b8ca150a", "patch": "@@ -25,6 +25,7 @@ pub mod eta_reduction;\n pub mod identity_op;\n pub mod mut_mut;\n pub mod len_zero;\n+pub mod collapsible_if;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -45,6 +46,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box mut_mut::MutMut as LintPassObject);\n     reg.register_lint_pass(box len_zero::LenZero as LintPassObject);\n     reg.register_lint_pass(box misc::CmpOwned as LintPassObject);\n+    reg.register_lint_pass(box collapsible_if::CollapsibleIf as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -61,5 +63,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            mut_mut::MUT_MUT,\n                                            len_zero::LEN_ZERO,\n                                            len_zero::LEN_WITHOUT_IS_EMPTY,\n+                                           collapsible_if::COLLAPSIBLE_IF,\n                                            ]);\n }"}, {"sha": "3aa86c893c60ce6c7bb146de2aeba2a1a57dd74f", "filename": "tests/compile-fail/collapsible_if.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7e16822925380d4c4236caec116c8076b8ca150a/tests%2Fcompile-fail%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e16822925380d4c4236caec116c8076b8ca150a/tests%2Fcompile-fail%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcollapsible_if.rs?ref=7e16822925380d4c4236caec116c8076b8ca150a", "patch": "@@ -0,0 +1,37 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(collapsible_if)]\n+fn main() {\n+    let x = \"hello\";\n+    let y = \"world\";\n+    if x == \"hello\" { //~ERROR This if statement can be collapsed\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+\n+    if x == \"hello\" || x == \"world\" { //~ERROR This if statement can be collapsed\n+        if y == \"world\" || y == \"hello\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+\n+    // Works because any if with an else statement cannot be collapsed.\n+    if x == \"hello\" {\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    } else {\n+        println!(\"Not Hello world\");\n+    }\n+\n+    if x == \"hello\" {\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        } else {\n+            println!(\"Hello something else\");\n+        }\n+    }\n+\n+}"}]}