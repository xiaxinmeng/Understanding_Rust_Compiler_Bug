{"sha": "0d76b7374589c45e3e9290309781a1ed9a461951", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNzZiNzM3NDU4OWM0NWUzZTkyOTAzMDk3ODFhMWVkOWE0NjE5NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-11T06:31:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-11T06:31:42Z"}, "message": "Auto merge of #83918 - workingjubilee:stable-rangefrom-pat, r=joshtriplett\n\nStabilize \"RangeFrom\" patterns in 1.55\n\nImplements a partial stabilization of #67264 and #37854.\nReference PR: https://github.com/rust-lang/reference/pull/900\n\n# Stabilization Report\n\nThis stabilizes the `X..` pattern, shown as such, offering an exhaustive match for unsigned integers:\n```rust\nmatch x as u32 {\n      0 => println!(\"zero!\"),\n      1.. => println!(\"positive number!\"),\n}\n```\n\nCurrently if a Rust author wants to write such a match on an integer, they must use `1..={integer}::MAX` . By allowing a \"RangeFrom\" style pattern, this simplifies the match to not require the MAX path and thus not require specifically repeating the type inside the match, allowing for easier refactoring. This is particularly useful for instances like the above case, where different behavior on \"0\" vs. \"1 or any positive number\" is desired, and the actual MAX is unimportant.\n\nNotably, this excepts slice patterns which include half-open ranges from stabilization, as the wisdom of those is still subject to some debate.\n\n## Practical Applications\n\nInstances of this specific usage have appeared in the compiler:\nhttps://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_middle/src/ty/inhabitedness/mod.rs#L219\nhttps://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_ty_utils/src/ty.rs#L524\n\nAnd I have noticed there are also a handful of \"in the wild\" users who have deployed it to similar effect, especially in the case of rejecting any value of a certain number or greater. It simply makes it much more ergonomic to write an irrefutable match, as done in Katholieke Universiteit Leuven's [SCALE and MAMBA project](https://github.com/KULeuven-COSIC/SCALE-MAMBA/blob/05e5db00d553573534258585651c525d0da5f83f/WebAssembly/scale_std/src/fixed_point.rs#L685-L695).\n\n## Tests\nThere were already many tests in [src/test/ui/half-open-range/patterns](https://github.com/rust-lang/rust/tree/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src/test/ui/half-open-range-patterns), as well as [generic pattern tests that test the `exclusive_range_pattern` feature](https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src/test/ui/pattern/usefulness/integer-ranges/reachability.rs), many dating back to the feature's introduction and remaining standing to this day. However, this stabilization comes with some additional tests to explore the... sometimes interesting behavior of interactions with other patterns. e.g. There is, at least, a mild diagnostic improvement in some edge cases, because before now, the pattern `0..=(5+1)` encounters the `half_open_range_patterns` feature gate and can thus emit the request to enable the feature flag, while also emitting the \"inclusive range with no end\" diagnostic. There is no intent to allow an `X..=` pattern that I am aware of, so removing the flag request is a strict improvement. The arrival of the `J | K` \"or\" pattern also enables some odd formations.\n\nSome of the behavior tested for here is derived from experiments in this [Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=58777b3c715c85165ac4a70d93efeefc) example, linked at https://github.com/rust-lang/rust/issues/67264#issuecomment-812770692, which may be useful to reference to observe the current behavior more closely.\n\nIn addition tests constituting an explanation of the \"slicing range patterns\" syntax issue are included in this PR.\n\n## Desiderata\n\nThe exclusive range patterns and half-open range patterns are fairly strongly requested by many authors, as they make some patterns much more natural to write, but there is disagreement regarding the \"closed\" exclusive range pattern or the \"RangeTo\" pattern, especially where it creates \"off by one\" gaps in the presence of a \"catch-all\" wildcard case. Also, there are obviously no range analyses in place that will force diagnostics for e.g. highly overlapping matches. I believe these should be warned on, ideally, and I think it would be reasonable to consider such a blocker to stabilizing this feature, but there is no technical issue with the feature as-is from the purely syntactic perspective as such overlapping or missed matches can already be generated today with such a catch-all case. And part of the \"point\" of the feature, at least from my view, is to make it easier to omit wildcard matches: a pattern with such an \"open\" match produces an irrefutable match and does not need the wild card case, making it easier to benefit from exhaustiveness checking.\n\n## History\n\n- Implemented:\n  - Partially via exclusive ranges: https://github.com/rust-lang/rust/pull/35712\n  - Fully with half-open ranges: https://github.com/rust-lang/rust/pull/67258\n- Unresolved Questions:\n  - The precedence concerns of https://github.com/rust-lang/rust/pull/48501 were considered as likely requiring adjustment but probably wanting a uniform consistent change across all pattern styles, given https://github.com/rust-lang/rust/issues/67264#issuecomment-720711656, but it is still unknown what changes might be desired\n  - How we want to handle slice patterns in ranges seems to be an open question still, as witnessed in the discussion of this PR!\n\nI checked but I couldn't actually find an RFC for this, and given \"approved provisionally by lang team without an RFC\", I believe this might require an RFC before it can land? Unsure of procedure here, on account of this being stabilizing a subset of a feature of syntax.\n\nr? `@scottmcm`", "tree": {"sha": "aebd6a4b973592d0b3be37e4268f5b3bd993229d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aebd6a4b973592d0b3be37e4268f5b3bd993229d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d76b7374589c45e3e9290309781a1ed9a461951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d76b7374589c45e3e9290309781a1ed9a461951", "html_url": "https://github.com/rust-lang/rust/commit/0d76b7374589c45e3e9290309781a1ed9a461951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d76b7374589c45e3e9290309781a1ed9a461951/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2e753b2fd1f614c64ba451ff816f50a3ac2edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2e753b2fd1f614c64ba451ff816f50a3ac2edd", "html_url": "https://github.com/rust-lang/rust/commit/9f2e753b2fd1f614c64ba451ff816f50a3ac2edd"}, {"sha": "43bad44ff01dd5035b961b366e65f705241b428d", "url": "https://api.github.com/repos/rust-lang/rust/commits/43bad44ff01dd5035b961b366e65f705241b428d", "html_url": "https://github.com/rust-lang/rust/commit/43bad44ff01dd5035b961b366e65f705241b428d"}], "stats": {"total": 418, "additions": 378, "deletions": 40}, "files": [{"sha": "f851725058d4b689a4d9f6a037dee81889036d76", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -677,7 +677,9 @@ pub enum BindingMode {\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum RangeEnd {\n+    /// `..=` or `...`\n     Included(RangeSyntax),\n+    /// `..`\n     Excluded,\n }\n \n@@ -689,6 +691,7 @@ pub enum RangeSyntax {\n     DotDotEq,\n }\n \n+/// All the different flavors of pattern that Rust recognizes.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum PatKind {\n     /// Represents a wildcard pattern (`_`).\n@@ -729,7 +732,7 @@ pub enum PatKind {\n     /// A literal.\n     Lit(P<Expr>),\n \n-    /// A range pattern (e.g., `1...2`, `1..=2` or `1..2`).\n+    /// A range pattern (e.g., `1...2`, `1..2`, `1..`, `..2`, `1..=2`, `..=2`).\n     Range(Option<P<Expr>>, Option<P<Expr>>, Spanned<RangeEnd>),\n \n     /// A slice pattern `[a, b, c]`."}, {"sha": "3e757e3843e38425d4d2b163b17ed13cbff31e6e", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -565,6 +565,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n+            PatKind::Slice(pats) => {\n+                for pat in pats {\n+                    let inner_pat = match &pat.kind {\n+                        PatKind::Ident(.., Some(pat)) => pat,\n+                        _ => pat,\n+                    };\n+                    if let PatKind::Range(Some(_), None, Spanned { .. }) = inner_pat.kind {\n+                        gate_feature_post!(\n+                            &self,\n+                            half_open_range_patterns,\n+                            pat.span,\n+                            \"`X..` patterns in slices are experimental\"\n+                        );\n+                    }\n+                }\n+            }\n             PatKind::Box(..) => {\n                 gate_feature_post!(\n                     &self,\n@@ -573,7 +589,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     \"box pattern syntax is experimental\"\n                 );\n             }\n-            PatKind::Range(_, _, Spanned { node: RangeEnd::Excluded, .. }) => {\n+            PatKind::Range(_, Some(_), Spanned { node: RangeEnd::Excluded, .. }) => {\n                 gate_feature_post!(\n                     &self,\n                     exclusive_range_pattern,"}, {"sha": "566677d032aff9d3d64e963bcfb4d083245b73cc", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -715,7 +715,6 @@ impl<'a> Parser<'a> {\n         } else if self.eat(&token::DotDotEq) {\n             RangeEnd::Included(RangeSyntax::DotDotEq)\n         } else if self.eat(&token::DotDot) {\n-            self.sess.gated_spans.gate(sym::exclusive_range_pattern, self.prev_token.span);\n             RangeEnd::Excluded\n         } else {\n             return None;\n@@ -735,7 +734,6 @@ impl<'a> Parser<'a> {\n             Some(self.parse_pat_range_end()?)\n         } else {\n             // Parsing e.g. `X..`.\n-            self.sess.gated_spans.gate(sym::half_open_range_patterns, begin.span.to(re.span));\n             if let RangeEnd::Included(_) = re.node {\n                 // FIXME(Centril): Consider semantic errors instead in `ast_validation`.\n                 // Possibly also do this for `X..=` in *expression* contexts."}, {"sha": "d26512703f494dabe3074fdc7c97592e1ec07916", "filename": "src/doc/unstable-book/src/language-features/exclusive-range-pattern.md", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,26 @@\n+# `exclusive_range_pattern`\n+\n+The tracking issue for this feature is: [#37854].\n+\n+\n+[#67264]: https://github.com/rust-lang/rust/issues/67264\n+[#37854]: https://github.com/rust-lang/rust/issues/37854\n+-----\n+\n+The `exclusive_range_pattern` feature allows non-inclusive range\n+patterns (`0..10`) to be used in appropriate pattern matching\n+contexts. It also can be combined with `#![feature(half_open_range_patterns]`\n+to be able to use RangeTo patterns (`..10`).\n+\n+It also enabled RangeFrom patterns but that has since been\n+stabilized.\n+\n+```rust\n+#![feature(exclusive_range_pattern)]\n+    let x = 5;\n+    match x {\n+        0..10 => println!(\"single digit\"),\n+        10 => println!(\"ten isn't part of the above range\"),\n+        _ => println!(\"nor is everything else.\")\n+    }\n+```"}, {"sha": "3b16dd049ce33efdc9bcd497ded7c78a2cc1f38c", "filename": "src/doc/unstable-book/src/language-features/half-open-range-patterns.md", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fhalf-open-range-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fhalf-open-range-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fhalf-open-range-patterns.md?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,27 @@\n+# `half_open_range_patterns`\n+\n+The tracking issue for this feature is: [#67264]\n+It is part of the `#![exclusive_range_pattern]` feature,\n+tracked at [#37854].\n+\n+[#67264]: https://github.com/rust-lang/rust/issues/67264\n+[#37854]: https://github.com/rust-lang/rust/issues/37854\n+-----\n+\n+The `half_open_range_patterns` feature allows RangeTo patterns\n+(`..10`) to be used in appropriate pattern matching contexts.\n+This requires also enabling the `exclusive_range_pattern` feature.\n+\n+It also enabled RangeFrom patterns but that has since been\n+stabilized.\n+\n+```rust\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+    let x = 5;\n+    match x {\n+        ..0 => println!(\"negative!\"), // \"RangeTo\" pattern. Unstable.\n+        0 => println!(\"zero!\"),\n+        1.. => println!(\"positive!\"), // \"RangeFrom\" pattern. Stable.\n+    }\n+```"}, {"sha": "9281dda678ddd51ab73bac4675bcce4860065881", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -11,12 +11,8 @@ fn foo() {\n     //~| ERROR range-to patterns with `...` are not allowed\n     if let ..5 = 0 {}\n     //~^ ERROR half-open range patterns are unstable\n-    if let 5.. = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n     if let 5..= = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n-    //~| ERROR inclusive range with no end\n+    //~^ ERROR inclusive range with no end\n     if let 5... = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n-    //~| ERROR inclusive range with no end\n+    //~^ ERROR inclusive range with no end\n }"}, {"sha": "a04883ae147644643eeee677d5c71606b4312667", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -5,15 +5,15 @@ LL |     if let ...5 = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:16:13\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:14:13\n    |\n LL |     if let 5..= = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:19:13\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:16:13\n    |\n LL |     if let 5... = 0 {}\n    |             ^^^ help: use `..` instead\n@@ -47,34 +47,7 @@ LL |     if let ..5 = 0 {}\n    = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:14:12\n-   |\n-LL |     if let 5.. = 0 {}\n-   |            ^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:16:12\n-   |\n-LL |     if let 5..= = 0 {}\n-   |            ^^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:19:12\n-   |\n-LL |     if let 5... = 0 {}\n-   |            ^^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0586, E0658.\n For more information about an error, try `rustc --explain E0586`."}, {"sha": "4f478a69881429e37e1384c428b0c8db4d01eeb2", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions0.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,32 @@\n+// run-pass\n+#![allow(incomplete_features)]\n+#![feature(exclusive_range_pattern)]\n+#![feature(half_open_range_patterns)]\n+#![feature(inline_const)]\n+\n+fn main() {\n+    let mut if_lettable = vec![];\n+    let mut first_or = vec![];\n+    let mut or_two = vec![];\n+    let mut range_from = vec![];\n+    let mut bottom = vec![];\n+\n+    for x in -9 + 1..=(9 - 2) {\n+        if let -1..=0 | 2..3 | 4 = x {\n+            if_lettable.push(x)\n+        }\n+        match x {\n+            1 | -3..0 => first_or.push(x),\n+            y @ (0..5 | 6) => or_two.push(y),\n+            y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+            y @ -5.. => range_from.push(y),\n+            y @ ..-7 => assert_eq!(y, -8),\n+            y => bottom.push(y),\n+        }\n+    }\n+    assert_eq!(if_lettable, [-1, 0, 2, 4]);\n+    assert_eq!(first_or, [-3, -2, -1, 1]);\n+    assert_eq!(or_two, [0, 2, 3, 4, 6]);\n+    assert_eq!(range_from, [-5, -4, 7]);\n+    assert_eq!(bottom, [-7, -6]);\n+}"}, {"sha": "55353999b67888f4ad9569858d21edbe1103bfd6", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,29 @@\n+fn main() {\n+    let mut if_lettable = Vec::<i32>::new();\n+    let mut first_or = Vec::<i32>::new();\n+    let mut or_two = Vec::<i32>::new();\n+    let mut range_from = Vec::<i32>::new();\n+    let mut bottom = Vec::<i32>::new();\n+    let mut errors_only = Vec::<i32>::new();\n+\n+    for x in -9 + 1..=(9 - 2) {\n+        if let n @ 2..3|4 = x {\n+            //~^ error: variable `n` is not bound in all patterns\n+            //~| exclusive range pattern syntax is experimental\n+            errors_only.push(x);\n+        } else if let 2..3 | 4 = x {\n+            //~^ exclusive range pattern syntax is experimental\n+            if_lettable.push(x);\n+        }\n+        match x as i32 {\n+            0..5+1 => errors_only.push(x),\n+            //~^ error: expected one of `=>`, `if`, or `|`, found `+`\n+            1 | -3..0 => first_or.push(x),\n+            y @ (0..5 | 6) => or_two.push(y),\n+            y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+            y @ -5.. => range_from.push(y),\n+            y @ ..-7 => assert_eq!(y, -8),\n+            y => bottom.push(y),\n+        }\n+    }\n+}"}, {"sha": "19ebcaf0f3699871343f032b02b755529d487b2f", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions1.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.stderr?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,36 @@\n+error: expected one of `=>`, `if`, or `|`, found `+`\n+  --> $DIR/range_pat_interactions1.rs:19:17\n+   |\n+LL |             0..5+1 => errors_only.push(x),\n+   |                 ^ expected one of `=>`, `if`, or `|`\n+\n+error[E0408]: variable `n` is not bound in all patterns\n+  --> $DIR/range_pat_interactions1.rs:10:25\n+   |\n+LL |         if let n @ 2..3|4 = x {\n+   |                -        ^ pattern doesn't bind `n`\n+   |                |\n+   |                variable not in all patterns\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions1.rs:10:20\n+   |\n+LL |         if let n @ 2..3|4 = x {\n+   |                    ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions1.rs:14:23\n+   |\n+LL |         } else if let 2..3 | 4 = x {\n+   |                       ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0408, E0658.\n+For more information about an error, try `rustc --explain E0408`."}, {"sha": "4615ebd688a9c3f2cef06fa1781284cbd1a26709", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,21 @@\n+fn main() {\n+    let mut first_or = Vec::<i32>::new();\n+    let mut or_two = Vec::<i32>::new();\n+    let mut range_from = Vec::<i32>::new();\n+    let mut bottom = Vec::<i32>::new();\n+    let mut errors_only = Vec::<i32>::new();\n+\n+    for x in -9 + 1..=(9 - 2) {\n+        match x as i32 {\n+            0..=(5+1) => errors_only.push(x),\n+            //~^ error: inclusive range with no end\n+            //~| error: expected one of `=>`, `if`, or `|`, found `(`\n+            1 | -3..0 => first_or.push(x),\n+            y @ (0..5 | 6) => or_two.push(y),\n+            y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+            y @ -5.. => range_from.push(y),\n+            y @ ..-7 => assert_eq!(y, -8),\n+            y => bottom.push(y),\n+        }\n+    }\n+}"}, {"sha": "13a5542a4741ff13574c1f0d22b19d97e54f0d94", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.stderr?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,17 @@\n+error[E0586]: inclusive range with no end\n+  --> $DIR/range_pat_interactions2.rs:10:14\n+   |\n+LL |             0..=(5+1) => errors_only.push(x),\n+   |              ^^^ help: use `..` instead\n+   |\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error: expected one of `=>`, `if`, or `|`, found `(`\n+  --> $DIR/range_pat_interactions2.rs:10:17\n+   |\n+LL |             0..=(5+1) => errors_only.push(x),\n+   |                 ^ expected one of `=>`, `if`, or `|`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0586`."}, {"sha": "0afb51260591228bae8900f87cd1401ac4a3b32f", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,24 @@\n+fn main() {\n+    let mut first_or = Vec::<i32>::new();\n+    let mut or_two = Vec::<i32>::new();\n+    let mut range_from = Vec::<i32>::new();\n+    let mut bottom = Vec::<i32>::new();\n+\n+    for x in -9 + 1..=(9 - 2) {\n+        match x as i32 {\n+            8.. => bottom.push(x),\n+            1 | -3..0 => first_or.push(x),\n+            //~^ exclusive range pattern syntax is experimental\n+            y @ (0..5 | 6) => or_two.push(y),\n+            //~^ exclusive range pattern syntax is experimental\n+            y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+            //~^ inline-const is experimental\n+            //~| exclusive range pattern syntax is experimental\n+            y @ -5.. => range_from.push(y),\n+            y @ ..-7 => assert_eq!(y, -8),\n+            //~^ half-open range patterns are unstable\n+            //~| exclusive range pattern syntax is experimental\n+            y => bottom.push(y),\n+        }\n+    }\n+}"}, {"sha": "8278e7cc6cfde785b3a3994219900f1f4ff043f9", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,57 @@\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/range_pat_interactions3.rs:18:17\n+   |\n+LL |             y @ ..-7 => assert_eq!(y, -8),\n+   |                 ^^^^\n+   |\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: inline-const is experimental\n+  --> $DIR/range_pat_interactions3.rs:14:20\n+   |\n+LL |             y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+   |                    ^^^^^\n+   |\n+   = note: see issue #76001 <https://github.com/rust-lang/rust/issues/76001> for more information\n+   = help: add `#![feature(inline_const)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions3.rs:10:17\n+   |\n+LL |             1 | -3..0 => first_or.push(x),\n+   |                 ^^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions3.rs:12:18\n+   |\n+LL |             y @ (0..5 | 6) => or_two.push(y),\n+   |                  ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions3.rs:14:17\n+   |\n+LL |             y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+   |                 ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions3.rs:18:17\n+   |\n+LL |             y @ ..-7 => assert_eq!(y, -8),\n+   |                 ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2884a27349fbb11273e5652ab06c3d97a2eb3e66", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem0.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,16 @@\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+\n+fn main() {\n+    let xs = [13, 1, 5, 2, 3, 1, 21, 8];\n+    let [a, b, c, rest @ ..] = xs;\n+    // Consider the following example:\n+    assert!(a == 13 && b == 1 && c == 5 && rest.len() == 5);\n+\n+    // What if we wanted to pull this apart without individually binding a, b, and c?\n+    let [first_three @ ..3, rest @ 2..] = xs;\n+    //~^ pattern requires 2 elements but array has 8\n+    // This is somewhat unintuitive and makes slice patterns exceedingly verbose.\n+    // We want to stabilize half-open RangeFrom (`X..`) patterns\n+    // but without banning us from using them for a more efficient slice pattern syntax.\n+}"}, {"sha": "ec3472a50368410d8b1561ff47604edb0fd5dcdc", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem0.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem0.stderr?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,9 @@\n+error[E0527]: pattern requires 2 elements but array has 8\n+  --> $DIR/slice_pattern_syntax_problem0.rs:11:9\n+   |\n+LL |     let [first_three @ ..3, rest @ 2..] = xs;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 8 elements\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0527`."}, {"sha": "9e289b591d6e9f4bbf12e140fdb148e289b429ef", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,9 @@\n+// Instead of allowing the previous case, maintain the feature gate for slice patterns for now.\n+fn main() {\n+    let xs = [13, 1, 5, 2, 3, 1, 21, 8];\n+    let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+    //~^ `X..` patterns in slices are experimental\n+    //~| half-open range patterns are unstable\n+    //~| exclusive range pattern syntax is experimental\n+    //~| exclusive range pattern syntax is experimental\n+}"}, {"sha": "eadaf877670693c038d209990a71066a5acc4e75", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem1.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem1.stderr?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/slice_pattern_syntax_problem1.rs:4:23\n+   |\n+LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+   |                       ^^^\n+   |\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: `X..` patterns in slices are experimental\n+  --> $DIR/slice_pattern_syntax_problem1.rs:4:10\n+   |\n+LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+   |          ^^^^^^^\n+   |\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/slice_pattern_syntax_problem1.rs:4:23\n+   |\n+LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+   |                       ^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/slice_pattern_syntax_problem1.rs:4:32\n+   |\n+LL |     let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs;\n+   |                                ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6e7df30949127062c8fb177a8cfd7bef301fd730", "filename": "src/test/ui/half-open-range-patterns/slice_pattern_syntax_problem2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b7374589c45e3e9290309781a1ed9a461951/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fslice_pattern_syntax_problem2.rs?ref=0d76b7374589c45e3e9290309781a1ed9a461951", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+\n+fn main() {\n+    let xs = [13, 1, 5, 2, 3, 1, 21, 8];\n+    if let [3..=14, ..] = xs {\n+        /* this variant must pass for now, unfortunately.\n+         * This test is included here to help inform a future plan for these.\n+         */\n+    };\n+}"}]}