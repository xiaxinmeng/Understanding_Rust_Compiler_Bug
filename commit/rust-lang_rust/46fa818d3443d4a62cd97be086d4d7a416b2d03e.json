{"sha": "46fa818d3443d4a62cd97be086d4d7a416b2d03e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZmE4MThkMzQ0M2Q0YTYyY2Q5N2JlMDg2ZDRkN2E0MTZiMmQwM2U=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-01-09T04:16:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-01-09T04:16:19Z"}, "message": "Change `String` to `&'static str` in `ParseResult::Failure`.\n\nThis avoids 770,000 allocations when compiling the `html5ever`\nbenchmark, reducing instruction counts by up to 2%.", "tree": {"sha": "676eb814d1208abb0b0fd463418f0f3e7a6f74b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/676eb814d1208abb0b0fd463418f0f3e7a6f74b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46fa818d3443d4a62cd97be086d4d7a416b2d03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46fa818d3443d4a62cd97be086d4d7a416b2d03e", "html_url": "https://github.com/rust-lang/rust/commit/46fa818d3443d4a62cd97be086d4d7a416b2d03e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46fa818d3443d4a62cd97be086d4d7a416b2d03e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b92552d5578e4544006da0dd5e793a19c2149321", "url": "https://api.github.com/repos/rust-lang/rust/commits/b92552d5578e4544006da0dd5e793a19c2149321", "html_url": "https://github.com/rust-lang/rust/commit/b92552d5578e4544006da0dd5e793a19c2149321"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "b4003ac729addf611bc7130f38be8804568ea61d", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46fa818d3443d4a62cd97be086d4d7a416b2d03e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fa818d3443d4a62cd97be086d4d7a416b2d03e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=46fa818d3443d4a62cd97be086d4d7a416b2d03e", "patch": "@@ -271,7 +271,7 @@ pub enum ParseResult<T> {\n     Success(T),\n     /// Arm failed to match. If the second parameter is `token::Eof`, it indicates an unexpected\n     /// end of macro invocation. Otherwise, it indicates that no rules expected the given token.\n-    Failure(syntax_pos::Span, Token, String),\n+    Failure(syntax_pos::Span, Token, &'static str),\n     /// Fatal error (malformed macro?). Abort compilation.\n     Error(syntax_pos::Span, String),\n }\n@@ -721,7 +721,7 @@ pub fn parse(\n                         sess.source_map().next_point(parser.span)\n                     },\n                     token::Eof,\n-                    \"missing tokens in macro arguments\".to_string(),\n+                    \"missing tokens in macro arguments\",\n                 );\n             }\n         }\n@@ -760,7 +760,7 @@ pub fn parse(\n             return Failure(\n                 parser.span,\n                 parser.token,\n-                \"no rules expected this token in macro call\".to_string(),\n+                \"no rules expected this token in macro call\",\n             );\n         }\n         // Dump all possible `next_items` into `cur_items` for the next iteration."}, {"sha": "24202ca8fbdc08774ccf38079239d2bf4fe24a57", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46fa818d3443d4a62cd97be086d4d7a416b2d03e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fa818d3443d4a62cd97be086d4d7a416b2d03e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=46fa818d3443d4a62cd97be086d4d7a416b2d03e", "patch": "@@ -202,7 +202,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n     let span = best_fail_spot.substitute_dummy(sp);\n     let mut err = cx.struct_span_err(span, &best_fail_msg);\n-    err.span_label(span, best_fail_text.unwrap_or(best_fail_msg));\n+    err.span_label(span, best_fail_text.unwrap_or(&best_fail_msg));\n     if let Some(sp) = def_span {\n         if cx.source_map().span_to_filename(sp).is_real() && !sp.is_dummy() {\n             err.span_label(cx.source_map().def_span(sp), \"when calling this macro\");"}]}