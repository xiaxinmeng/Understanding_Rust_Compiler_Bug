{"sha": "4b126b805bd51d2b7aa335cadd571a319ec0e224", "node_id": "C_kwDOAAsO6NoAKDRiMTI2YjgwNWJkNTFkMmI3YWEzMzVjYWRkNTcxYTMxOWVjMGUyMjQ", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-12T14:08:59Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-12T14:08:59Z"}, "message": "use len on mplace instead of reading immediate, remove dead code", "tree": {"sha": "4cbed16eb1722a54e37cc158389801129ae2ef87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cbed16eb1722a54e37cc158389801129ae2ef87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b126b805bd51d2b7aa335cadd571a319ec0e224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b126b805bd51d2b7aa335cadd571a319ec0e224", "html_url": "https://github.com/rust-lang/rust/commit/4b126b805bd51d2b7aa335cadd571a319ec0e224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b126b805bd51d2b7aa335cadd571a319ec0e224/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5273bc995d5ac457eaf70bf3d10c1513277234", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5273bc995d5ac457eaf70bf3d10c1513277234", "html_url": "https://github.com/rust-lang/rust/commit/8a5273bc995d5ac457eaf70bf3d10c1513277234"}], "stats": {"total": 53, "additions": 14, "deletions": 39}, "files": [{"sha": "541462a26d5eca536489c4d7680e8657407dc7b0", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4b126b805bd51d2b7aa335cadd571a319ec0e224/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b126b805bd51d2b7aa335cadd571a319ec0e224/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=4b126b805bd51d2b7aa335cadd571a319ec0e224", "patch": "@@ -12,8 +12,8 @@ use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n use rustc_target::abi::VariantIdx;\n \n use crate::interpret::{\n-    intern_const_alloc_recursive, ConstValue, Immediate, InternKind, InterpCx, InterpResult,\n-    MPlaceTy, MemPlaceMeta, Scalar,\n+    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, MPlaceTy,\n+    MemPlaceMeta, Scalar,\n };\n \n mod error;\n@@ -119,44 +119,19 @@ fn const_to_valtree_inner<'tcx>(\n         ty::Ref(_, inner_ty, _)  => {\n             match inner_ty.kind() {\n                 ty::Slice(_) | ty::Str => {\n-                    match ecx.try_read_immediate_from_mplace(&place) {\n-                        Ok(Some(imm)) => {\n-                            let derefd = ecx.deref_operand(&place.into()).expect(&format!(\"couldnt deref {:?}\", imm));\n-                            debug!(?derefd);\n-\n-                            let len = match *imm {\n-                                Immediate::ScalarPair(_, b) => {\n-                                    let len = b.to_machine_usize(&ecx.tcx.tcx).unwrap();\n-                                    len\n-                                }\n-                                _ => bug!(\"expected ScalarPair for &[T] or &str\"),\n-                            };\n-                            debug!(?len);\n-\n-                            let valtree = slice_branches(ecx, &derefd, len);\n-                            debug!(?valtree);\n-\n-                            valtree\n-                        }\n-                        _ => {\n-                            None\n-                        }\n-                    }\n+                    let derefd = ecx.deref_operand(&place.into()).unwrap();\n+                    debug!(?derefd);\n+                    let len = derefd.len(&ecx.tcx.tcx).unwrap();\n+                    let valtree = slice_branches(ecx, &derefd, len);\n+                    debug!(?valtree);\n+\n+                    valtree\n                 }\n                 _ => {\n-                    let imm = ecx.try_read_immediate_from_mplace(&place).unwrap_or_else(|e| bug!(\"couldnt read immediate from {:?}, error: {:?}\", place, e));\n-\n-                    match imm {\n-                        Some(imm) => {\n-                            debug!(?imm);\n-\n-                            let derefd_place = ecx.deref_operand(&place.into()).unwrap_or_else(|e| bug!(\"couldn't deref {:?}, error: {:?}\", place, e));\n-                            debug!(?derefd_place);\n+                    let derefd_place = ecx.deref_operand(&place.into()).unwrap_or_else(|e| bug!(\"couldn't deref {:?}, error: {:?}\", place, e));\n+                    debug!(?derefd_place);\n \n-                            const_to_valtree_inner(ecx, &derefd_place)\n-                        }\n-                        None => bug!(\"couldn't read immediate from {:?}\", place),\n-                    }\n+                    const_to_valtree_inner(ecx, &derefd_place)\n                 }\n             }\n         }"}, {"sha": "9000567558b84cf6974678545af388fb0508c3b8", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b126b805bd51d2b7aa335cadd571a319ec0e224/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b126b805bd51d2b7aa335cadd571a319ec0e224/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=4b126b805bd51d2b7aa335cadd571a319ec0e224", "patch": "@@ -248,7 +248,7 @@ impl<'tcx, Tag: Provenance> ImmTy<'tcx, Tag> {\n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.\n     /// Returns `None` if the layout does not permit loading this as a value.\n-    pub(crate) fn try_read_immediate_from_mplace(\n+    fn try_read_immediate_from_mplace(\n         &self,\n         mplace: &MPlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx, Option<ImmTy<'tcx, M::PointerTag>>> {"}, {"sha": "85f3f3d53d6b7603c848ec3d4913fd19211ca201", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b126b805bd51d2b7aa335cadd571a319ec0e224/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b126b805bd51d2b7aa335cadd571a319ec0e224/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=4b126b805bd51d2b7aa335cadd571a319ec0e224", "patch": "@@ -191,7 +191,7 @@ impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {\n     }\n \n     #[inline]\n-    pub(super) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n+    pub(crate) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n         if self.layout.is_unsized() {\n             // We need to consult `meta` metadata\n             match self.layout.ty.kind() {"}]}