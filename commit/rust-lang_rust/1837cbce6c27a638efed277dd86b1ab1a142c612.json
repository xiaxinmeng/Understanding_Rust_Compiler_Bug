{"sha": "1837cbce6c27a638efed277dd86b1ab1a142c612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzdjYmNlNmMyN2E2MzhlZmVkMjc3ZGQ4NmIxYWIxYTE0MmM2MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T13:32:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T13:32:45Z"}, "message": "Auto merge of #4885 - rust-lang:mut-key-types, r=flip1995\n\nnew lint: mutable_key_type\n\nThis fixes #732 - well, partly, it doesn't adress `Hash` impls, but the use of mutable types as map keys or set members\n\nchangelog: add `mutable_key_type` lint\n\nr? @flip1995", "tree": {"sha": "fe19568580b735ddb2f3f52fb95ec751e19ba711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe19568580b735ddb2f3f52fb95ec751e19ba711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1837cbce6c27a638efed277dd86b1ab1a142c612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1837cbce6c27a638efed277dd86b1ab1a142c612", "html_url": "https://github.com/rust-lang/rust/commit/1837cbce6c27a638efed277dd86b1ab1a142c612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1837cbce6c27a638efed277dd86b1ab1a142c612/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74bb5e07eeb1e70916f57f7809acb19375cd71a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/74bb5e07eeb1e70916f57f7809acb19375cd71a5", "html_url": "https://github.com/rust-lang/rust/commit/74bb5e07eeb1e70916f57f7809acb19375cd71a5"}, {"sha": "40435acf3d3b6abdc37c00a5d3c7a97c61b8841f", "url": "https://api.github.com/repos/rust-lang/rust/commits/40435acf3d3b6abdc37c00a5d3c7a97c61b8841f", "html_url": "https://github.com/rust-lang/rust/commit/40435acf3d3b6abdc37c00a5d3c7a97c61b8841f"}], "stats": {"total": 196, "additions": 194, "deletions": 2}, "files": [{"sha": "f0684ea44cc4537478238d114908164d5fb86457", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1837cbce6c27a638efed277dd86b1ab1a142c612/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1837cbce6c27a638efed277dd86b1ab1a142c612/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1837cbce6c27a638efed277dd86b1ab1a142c612", "patch": "@@ -1194,6 +1194,7 @@ Released 2018-09-13\n [`mut_from_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_from_ref\n [`mut_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_mut\n [`mut_range_bound`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_range_bound\n+[`mutable_key_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key_type\n [`mutex_atomic`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_atomic\n [`mutex_integer`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_integer\n [`naive_bytecount`]: https://rust-lang.github.io/rust-clippy/master/index.html#naive_bytecount"}, {"sha": "be5433029de865d9648e018204b43efbfd124a9f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1837cbce6c27a638efed277dd86b1ab1a142c612/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1837cbce6c27a638efed277dd86b1ab1a142c612/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1837cbce6c27a638efed277dd86b1ab1a142c612", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 340 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 341 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "c83be8e2c19af3777a5707412f824c2d3493887d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1837cbce6c27a638efed277dd86b1ab1a142c612/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1837cbce6c27a638efed277dd86b1ab1a142c612/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1837cbce6c27a638efed277dd86b1ab1a142c612", "patch": "@@ -241,6 +241,7 @@ pub mod missing_doc;\n pub mod missing_inline;\n pub mod mul_add;\n pub mod multiple_crate_versions;\n+pub mod mut_key;\n pub mod mut_mut;\n pub mod mut_reference;\n pub mod mutable_debug_assertion;\n@@ -668,6 +669,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n         &mul_add::MANUAL_MUL_ADD,\n         &multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n+        &mut_key::MUTABLE_KEY_TYPE,\n         &mut_mut::MUT_MUT,\n         &mut_reference::UNNECESSARY_MUT_PASSED,\n         &mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n@@ -940,6 +942,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box trait_bounds::TraitBounds);\n     store.register_late_pass(|| box comparison_chain::ComparisonChain);\n     store.register_late_pass(|| box mul_add::MulAddCheck);\n+    store.register_late_pass(|| box mut_key::MutableKeyType);\n     store.register_early_pass(|| box reference::DerefAddrOf);\n     store.register_early_pass(|| box reference::RefInDeref);\n     store.register_early_pass(|| box double_parens::DoubleParens);\n@@ -1224,6 +1227,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&misc_early::UNNEEDED_FIELD_PATTERN),\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n+        LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n         LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n@@ -1533,6 +1537,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&misc::CMP_NAN),\n         LintId::of(&misc::FLOAT_CMP),\n         LintId::of(&misc::MODULO_ONE),\n+        LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n         LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n         LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),"}, {"sha": "3a0899032a566ea871712e3de1ac2cd35d1642ff", "filename": "clippy_lints/src/mut_key.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/1837cbce6c27a638efed277dd86b1ab1a142c612/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1837cbce6c27a638efed277dd86b1ab1a142c612/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=1837cbce6c27a638efed277dd86b1ab1a142c612", "patch": "@@ -0,0 +1,120 @@\n+use crate::utils::{match_def_path, paths, span_lint, trait_ref_of_method, walk_ptrs_ty};\n+use rustc::declare_lint_pass;\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::{Adt, Dynamic, Opaque, Param, RawPtr, Ref, Ty, TypeAndMut};\n+use rustc_session::declare_tool_lint;\n+use syntax::source_map::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for sets/maps with mutable key types.\n+    ///\n+    /// **Why is this bad?** All of `HashMap`, `HashSet`, `BTreeMap` and\n+    /// `BtreeSet` rely on either the hash or the order of keys be unchanging,\n+    /// so having types with interior mutability is a bad idea.\n+    ///\n+    /// **Known problems:** We don't currently account for `Rc` or `Arc`, so\n+    /// this may yield false positives.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// use std::cmp::{PartialEq, Eq};\n+    /// use std::collections::HashSet;\n+    /// use std::hash::{Hash, Hasher};\n+    /// use std::sync::atomic::AtomicUsize;\n+    ///# #[allow(unused)]\n+    ///\n+    /// struct Bad(AtomicUsize);\n+    /// impl PartialEq for Bad {\n+    ///     fn eq(&self, rhs: &Self) -> bool {\n+    ///          ..\n+    /// ; unimplemented!();\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Eq for Bad {}\n+    ///\n+    /// impl Hash for Bad {\n+    ///     fn hash<H: Hasher>(&self, h: &mut H) {\n+    ///         ..\n+    /// ; unimplemented!();\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let _: HashSet<Bad> = HashSet::new();\n+    /// }\n+    /// ```\n+    pub MUTABLE_KEY_TYPE,\n+    correctness,\n+    \"Check for mutable Map/Set key type\"\n+}\n+\n+declare_lint_pass!(MutableKeyType => [ MUTABLE_KEY_TYPE ]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableKeyType {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n+            check_sig(cx, item.hir_id, &sig.decl);\n+        }\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n+        if let hir::ImplItemKind::Method(ref sig, ..) = item.kind {\n+            if trait_ref_of_method(cx, item.hir_id).is_none() {\n+                check_sig(cx, item.hir_id, &sig.decl);\n+            }\n+        }\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'tcx>) {\n+        if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n+            check_sig(cx, item.hir_id, &sig.decl);\n+        }\n+    }\n+\n+    fn check_local(&mut self, cx: &LateContext<'_, '_>, local: &hir::Local) {\n+        if let hir::PatKind::Wild = local.pat.kind {\n+            return;\n+        }\n+        check_ty(cx, local.span, cx.tables.pat_ty(&*local.pat));\n+    }\n+}\n+\n+fn check_sig<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item_hir_id: hir::HirId, decl: &hir::FnDecl) {\n+    let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n+    let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+    for (hir_ty, ty) in decl.inputs.iter().zip(fn_sig.inputs().skip_binder().iter()) {\n+        check_ty(cx, hir_ty.span, ty);\n+    }\n+    check_ty(\n+        cx,\n+        decl.output.span(),\n+        cx.tcx.erase_late_bound_regions(&fn_sig.output()),\n+    );\n+}\n+\n+// We want to lint 1. sets or maps with 2. not immutable key types and 3. no unerased\n+// generics (because the compiler cannot ensure immutability for unknown types).\n+fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, ty: Ty<'tcx>) {\n+    let ty = walk_ptrs_ty(ty);\n+    if let Adt(def, substs) = ty.kind {\n+        if [&paths::HASHMAP, &paths::BTREEMAP, &paths::HASHSET, &paths::BTREESET]\n+            .iter()\n+            .any(|path| match_def_path(cx, def.did, &**path))\n+        {\n+            let key_type = substs.type_at(0);\n+            if is_concrete_type(key_type) && !key_type.is_freeze(cx.tcx, cx.param_env, span) {\n+                span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");\n+            }\n+        }\n+    }\n+}\n+\n+fn is_concrete_type(ty: Ty<'_>) -> bool {\n+    match ty.kind {\n+        RawPtr(TypeAndMut { ty: inner_ty, .. }) | Ref(_, inner_ty, _) => is_concrete_type(inner_ty),\n+        Dynamic(..) | Opaque(..) | Param(..) => false,\n+        _ => true,\n+    }\n+}"}, {"sha": "bdbe06c5f2705c0e3d1e3f313984480d6e5b5ef7", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1837cbce6c27a638efed277dd86b1ab1a142c612/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1837cbce6c27a638efed277dd86b1ab1a142c612/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1837cbce6c27a638efed277dd86b1ab1a142c612", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 340] = [\n+pub const ALL_LINTS: [Lint; 341] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1239,6 +1239,13 @@ pub const ALL_LINTS: [Lint; 340] = [\n         deprecation: None,\n         module: \"loops\",\n     },\n+    Lint {\n+        name: \"mutable_key_type\",\n+        group: \"correctness\",\n+        desc: \"Check for mutable Map/Set key type\",\n+        deprecation: None,\n+        module: \"mut_key\",\n+    },\n     Lint {\n         name: \"mutex_atomic\",\n         group: \"perf\","}, {"sha": "5ec9b05f5179b88985af11fa3622e17303d528b4", "filename": "tests/ui/mut_key.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1837cbce6c27a638efed277dd86b1ab1a142c612/tests%2Fui%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1837cbce6c27a638efed277dd86b1ab1a142c612/tests%2Fui%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.rs?ref=1837cbce6c27a638efed277dd86b1ab1a142c612", "patch": "@@ -0,0 +1,37 @@\n+use std::collections::{HashMap, HashSet};\n+use std::hash::{Hash, Hasher};\n+use std::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n+\n+struct Key(AtomicUsize);\n+\n+impl Clone for Key {\n+    fn clone(&self) -> Self {\n+        Key(AtomicUsize::new(self.0.load(Relaxed)))\n+    }\n+}\n+\n+impl PartialEq for Key {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.0.load(Relaxed) == other.0.load(Relaxed)\n+    }\n+}\n+\n+impl Eq for Key {}\n+\n+impl Hash for Key {\n+    fn hash<H: Hasher>(&self, h: &mut H) {\n+        self.0.load(Relaxed).hash(h);\n+    }\n+}\n+\n+fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n+    let _other: HashMap<Key, bool> = HashMap::new();\n+    m.keys().cloned().collect()\n+}\n+\n+fn this_is_ok(m: &mut HashMap<usize, Key>) {}\n+\n+fn main() {\n+    let _ = should_not_take_this_arg(&mut HashMap::new(), 1);\n+    this_is_ok(&mut HashMap::new());\n+}"}, {"sha": "ebdbfe9902216197e96ab3bb6f2379c5c04c4870", "filename": "tests/ui/mut_key.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1837cbce6c27a638efed277dd86b1ab1a142c612/tests%2Fui%2Fmut_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1837cbce6c27a638efed277dd86b1ab1a142c612/tests%2Fui%2Fmut_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.stderr?ref=1837cbce6c27a638efed277dd86b1ab1a142c612", "patch": "@@ -0,0 +1,22 @@\n+error: mutable key type\n+  --> $DIR/mut_key.rs:27:32\n+   |\n+LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::mutable_key_type)]` on by default\n+\n+error: mutable key type\n+  --> $DIR/mut_key.rs:27:72\n+   |\n+LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n+   |                                                                        ^^^^^^^^^^^^\n+\n+error: mutable key type\n+  --> $DIR/mut_key.rs:28:5\n+   |\n+LL |     let _other: HashMap<Key, bool> = HashMap::new();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}