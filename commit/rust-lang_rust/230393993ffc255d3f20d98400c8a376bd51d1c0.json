{"sha": "230393993ffc255d3f20d98400c8a376bd51d1c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDM5Mzk5M2ZmYzI1NWQzZjIwZDk4NDAwYzhhMzc2YmQ1MWQxYzA=", "commit": {"author": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-07-10T02:03:15Z"}, "committer": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-07-10T02:21:14Z"}, "message": "Don't visit foreign function bodies when lowering ast to hir\n\nPreviously the existence of bodies inside a foreign function block would\ncause a panic in the hir `NodeCollector` during its collection of crate\nbodies to compute a crate hash:\n\nhttps://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_middle/hir/map/collector.rs#L154-L158\n\nThe collector walks the hir tree and creates a map of hir nodes, then\nattaching bodies in the crate to their owner in the map. For a code like\n\n```rust\nextern \"C\" {\n    fn f() {\n        fn g() {}\n    }\n}\n```\n\nThe crate bodies include the body of the function `g`. But foreign\nfunctions cannot have bodies, and while the parser AST permits a foreign\nfunction to have a body, the hir doesn't. This means that the body of\n`f` is not present in the hir, and so neither is `g`. So when the\n`NodeCollector` finishes the walking the hir, it has no record of `g`,\ncannot find an owner for the body of `g` it sees in the crate bodies,\nand blows up.\n\nWhy do the crate bodies include the body of `g`? The AST walker has a\nneed a for walking function bodies, and FFIs share the same AST node as\nfunctions in other contexts.\n\nThere are at least two options to fix this:\n\n- Don't unwrap the map entry for an hir node in the `NodeCollector`\n- Modifier the ast->hir lowering visitor to ignore foreign function\n  blocks\n\nI don't think the first is preferrable, since we want to know when we\ncan't find a body for an hir node that we thought had one (dropping this\ninformation may lead to an invalid hash). So this commit implements the\nsecond option.\n\nCloses #74120", "tree": {"sha": "59c94c805ef765a57a71aad3742c048c5f537ae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c94c805ef765a57a71aad3742c048c5f537ae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230393993ffc255d3f20d98400c8a376bd51d1c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEP1kDyr3I3sjT29nTtEP3owMMmu0FAl8H0KEACgkQtEP3owMM\nmu21jBAAmv3b++VuoMyx/GQBX+EhiUzaCSyPsWAy5AWbhgEWzLB691BSs7uMY8AC\nL9AwrAW6O1IvfTjxJ6MPWja+kTchRoeuOA6dfe4ScwOi8ZrVlPVh0tcQVNn4nLWk\n8E2jS3e6Pq5baKyNYxfjtxuFHglrrQ+qFz7FU+NlbPesWfTs8T2t20TZUtIF3Yr9\nrxnJz8LRTVoIUi9TR/LpjSqfVZY3YMHOZcxkbwgEEeZ0hiExhbHYCTtmlMxvYYHl\nXhHx7RMBH8w6ZGSJa3oS+p3W1SfXMfbSzqp3vDuftpEEART82ucDAMJZY1WEI3fn\nyNI2/D9NTKUJhClGvj+L3L+tXfvW9zlxhqitI6/DyeKWsQrUc6qli/WE+vVrdPOO\niNqEe546ge9TFeWoWMChDQmggRFjEbBZI51ezIj1Y9VCVvuDPgA3lovlS9wIAJUU\n0L6dPFa9mR+v4ObGIjqyDkb3Phnvt4VId3jof1zXEShhp7f2qZUelxsA5LXd/POg\ni/x7qosEJEvYIZGpIid+VBRrfeb7B4XG6Ly+dQg07UwQO+XUu7CamE/PRGZAeAIo\n4nptLvbRzr2pOzT8cwFTuQIkc71WpRxNMQ83haLSzMAyoJugpFdl9s2pDKrDlLcK\n0R7Eszt+/GsDvF2BC84bGXEJtNJoZjKQ01w/lr/mU8trwfxbcxE=\n=hbM+\n-----END PGP SIGNATURE-----", "payload": "tree 59c94c805ef765a57a71aad3742c048c5f537ae7\nparent 8ac1525e091d3db28e67adcbbd6db1e1deaa37fb\nauthor Ayaz Hafiz <ayaz.hafiz.1@gmail.com> 1594346595 -0700\ncommitter Ayaz Hafiz <ayaz.hafiz.1@gmail.com> 1594347674 -0700\n\nDon't visit foreign function bodies when lowering ast to hir\n\nPreviously the existence of bodies inside a foreign function block would\ncause a panic in the hir `NodeCollector` during its collection of crate\nbodies to compute a crate hash:\n\nhttps://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_middle/hir/map/collector.rs#L154-L158\n\nThe collector walks the hir tree and creates a map of hir nodes, then\nattaching bodies in the crate to their owner in the map. For a code like\n\n```rust\nextern \"C\" {\n    fn f() {\n        fn g() {}\n    }\n}\n```\n\nThe crate bodies include the body of the function `g`. But foreign\nfunctions cannot have bodies, and while the parser AST permits a foreign\nfunction to have a body, the hir doesn't. This means that the body of\n`f` is not present in the hir, and so neither is `g`. So when the\n`NodeCollector` finishes the walking the hir, it has no record of `g`,\ncannot find an owner for the body of `g` it sees in the crate bodies,\nand blows up.\n\nWhy do the crate bodies include the body of `g`? The AST walker has a\nneed a for walking function bodies, and FFIs share the same AST node as\nfunctions in other contexts.\n\nThere are at least two options to fix this:\n\n- Don't unwrap the map entry for an hir node in the `NodeCollector`\n- Modifier the ast->hir lowering visitor to ignore foreign function\n  blocks\n\nI don't think the first is preferrable, since we want to know when we\ncan't find a body for an hir node that we thought had one (dropping this\ninformation may lead to an invalid hash). So this commit implements the\nsecond option.\n\nCloses #74120\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230393993ffc255d3f20d98400c8a376bd51d1c0", "html_url": "https://github.com/rust-lang/rust/commit/230393993ffc255d3f20d98400c8a376bd51d1c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230393993ffc255d3f20d98400c8a376bd51d1c0/comments", "author": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac1525e091d3db28e67adcbbd6db1e1deaa37fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac1525e091d3db28e67adcbbd6db1e1deaa37fb", "html_url": "https://github.com/rust-lang/rust/commit/8ac1525e091d3db28e67adcbbd6db1e1deaa37fb"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "b2db9fe1d2666c776f2da7dae131a03a1bca68d3", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/230393993ffc255d3f20d98400c8a376bd51d1c0/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230393993ffc255d3f20d98400c8a376bd51d1c0/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=230393993ffc255d3f20d98400c8a376bd51d1c0", "patch": "@@ -6,7 +6,8 @@ use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::ptr::P;\n-use rustc_ast::visit::{self, AssocCtxt, Visitor};\n+use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n+use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -76,6 +77,43 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         }\n     }\n \n+    // Forked from the original method because we don't want to descend into foreign function\n+    // blocks. Such blocks are semantically invalid and the hir does not preserve them, so lowering\n+    // items contained in them may be unexpected by later passes.\n+    fn visit_foreign_item(&mut self, item: &'a ForeignItem) {\n+        let Item { id: _, span: _, ident, ref vis, ref attrs, ref kind, tokens: _ } = *item;\n+        self.visit_vis(vis);\n+        self.visit_ident(ident);\n+        walk_list!(self, visit_attribute, attrs);\n+        match kind {\n+            ForeignItemKind::Static(ty, _, expr) => {\n+                self.visit_ty(ty);\n+                walk_list!(self, visit_expr, expr);\n+            }\n+            ForeignItemKind::Fn(_, sig, generics, body) => {\n+                self.visit_generics(generics);\n+                let kind = FnKind::Fn(FnCtxt::Foreign, ident, sig, vis, body.as_deref());\n+                match kind {\n+                    FnKind::Fn(_, _, sig, _, _) => {\n+                        self.visit_fn_header(&sig.header);\n+                        visit::walk_fn_decl(self, &sig.decl);\n+                    }\n+                    FnKind::Closure(decl, _) => {\n+                        visit::walk_fn_decl(self, decl);\n+                    }\n+                }\n+            }\n+            ForeignItemKind::TyAlias(_, generics, bounds, ty) => {\n+                self.visit_generics(generics);\n+                walk_list!(self, visit_param_bound, bounds);\n+                walk_list!(self, visit_ty, ty);\n+            }\n+            ForeignItemKind::MacCall(mac) => {\n+                self.visit_mac(mac);\n+            }\n+        }\n+    }\n+\n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n         self.lctx.with_hir_id_owner(item.id, |lctx| match ctxt {\n             AssocCtxt::Trait => {"}, {"sha": "a84065e02186855cbb0f6e4241eb0576638b005f", "filename": "src/test/ui/foreign/issue-74120-lowering-of-ffi-block-bodies.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/230393993ffc255d3f20d98400c8a376bd51d1c0/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230393993ffc255d3f20d98400c8a376bd51d1c0/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.rs?ref=230393993ffc255d3f20d98400c8a376bd51d1c0", "patch": "@@ -0,0 +1,11 @@\n+// Previously this ICE'd because `fn g()` would be lowered, but the block associated with `fn f()`\n+// wasn't.\n+\n+// compile-flags: --crate-type=lib\n+\n+extern \"C\" {\n+    fn f() {\n+    //~^ incorrect function inside `extern` block\n+        fn g() {}\n+    }\n+}"}, {"sha": "d4a9ca3e7c66ef8d9362cd3fd6279b47dc64c8f6", "filename": "src/test/ui/foreign/issue-74120-lowering-of-ffi-block-bodies.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/230393993ffc255d3f20d98400c8a376bd51d1c0/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/230393993ffc255d3f20d98400c8a376bd51d1c0/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.stderr?ref=230393993ffc255d3f20d98400c8a376bd51d1c0", "patch": "@@ -0,0 +1,19 @@\n+error: incorrect function inside `extern` block\n+  --> $DIR/issue-74120-lowering-of-ffi-block-bodies.rs:7:8\n+   |\n+LL |   extern \"C\" {\n+   |   ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |       fn f() {\n+   |  ________^___-\n+   | |        |\n+   | |        cannot have a body\n+LL | |\n+LL | |         fn g() {}\n+LL | |     }\n+   | |_____- help: remove the invalid body: `;`\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to previous error\n+"}]}