{"sha": "cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjBmNjhkMGY5ZTFjMWJmNDlkZjIyOTkxYjVhMGQxYTQzMTQ2ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T21:16:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T21:16:16Z"}, "message": "Auto merge of #50812 - kennytm:fix-50756-miri-bad-float-behavior, r=oli-obk\n\nFix issue #50811 (`NaN > NaN` was true).\n\nFix #50811\n\nMake sure the float comparison output is consistent with the expected behavior when NaN is involved.\n\n----\n\nNote: This PR is a **BREAKING CHANGE**. If you have used `>` or `>=` to compare floats, and make the result as the length of a fixed array type, like:\n\n```rust\nuse std::f64::NAN;\nlet x: [u8; (NAN > NAN) as usize] = [1];\n```\n\nthen the code will no longer compile. Previously, all float comparison involving NaN will just return \"Greater\", i.e. `NAN > NAN` would wrongly return `true` during const evaluation. If you need to retain the old behavior (why), you may replace `a > b` with `a != a || b != b || a > b`.", "tree": {"sha": "af543ddadc9ac77c8ae3d90f264104b8dc3d746e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af543ddadc9ac77c8ae3d90f264104b8dc3d746e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8", "html_url": "https://github.com/rust-lang/rust/commit/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "html_url": "https://github.com/rust-lang/rust/commit/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef"}, {"sha": "50bc72df448dc284e4ffdc296a85aad3282dc99e", "url": "https://api.github.com/repos/rust-lang/rust/commits/50bc72df448dc284e4ffdc296a85aad3282dc99e", "html_url": "https://github.com/rust-lang/rust/commit/50bc72df448dc284e4ffdc296a85aad3282dc99e"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "a4a36b0b35581ca43154329f5f954545cbf17659", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8", "patch": "@@ -1,7 +1,6 @@\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use syntax::ast::FloatTy;\n-use std::cmp::Ordering;\n use rustc::ty::layout::LayoutOf;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n@@ -181,12 +180,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     let l = <$ty>::from_bits(l);\n                     let r = <$ty>::from_bits(r);\n                     let val = match bin_op {\n-                        Eq => PrimVal::from_bool(l.partial_cmp(&r).unwrap_or(Ordering::Greater) == Ordering::Equal),\n-                        Ne => PrimVal::from_bool(l.partial_cmp(&r).unwrap_or(Ordering::Greater) != Ordering::Equal),\n-                        Lt => PrimVal::from_bool(l.partial_cmp(&r).unwrap_or(Ordering::Greater) == Ordering::Less),\n-                        Le => PrimVal::from_bool(l.partial_cmp(&r).unwrap_or(Ordering::Greater) != Ordering::Greater),\n-                        Gt => PrimVal::from_bool(l.partial_cmp(&r).unwrap_or(Ordering::Greater) == Ordering::Greater),\n-                        Ge => PrimVal::from_bool(l.partial_cmp(&r).unwrap_or(Ordering::Greater) != Ordering::Less),\n+                        Eq => PrimVal::from_bool(l == r),\n+                        Ne => PrimVal::from_bool(l != r),\n+                        Lt => PrimVal::from_bool(l < r),\n+                        Le => PrimVal::from_bool(l <= r),\n+                        Gt => PrimVal::from_bool(l > r),\n+                        Ge => PrimVal::from_bool(l >= r),\n                         Add => PrimVal::Bytes((l + r).value.to_bits()),\n                         Sub => PrimVal::Bytes((l - r).value.to_bits()),\n                         Mul => PrimVal::Bytes((l * r).value.to_bits()),"}, {"sha": "05b168d98f1f24c9fc470882688c84880731a036", "filename": "src/test/run-pass/issue-50811.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8/src%2Ftest%2Frun-pass%2Fissue-50811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8/src%2Ftest%2Frun-pass%2Fissue-50811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-50811.rs?ref=cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(test)]\n+\n+extern crate test;\n+\n+use std::f64::{NAN, NEG_INFINITY, INFINITY, MAX};\n+use std::mem::size_of;\n+use test::black_box;\n+\n+// Ensure the const-eval result and runtime result of float comparison are equivalent.\n+\n+macro_rules! compare {\n+    ($op:tt) => {\n+        compare!(\n+            [NEG_INFINITY, -MAX, -1.0, -0.0, 0.0, 1.0, MAX, INFINITY, NAN],\n+            $op\n+        );\n+    };\n+    ([$($lhs:expr),+], $op:tt) => {\n+        $(compare!(\n+            $lhs,\n+            $op,\n+            [NEG_INFINITY, -MAX, -1.0, -0.0, 0.0, 1.0, MAX, INFINITY, NAN]\n+        );)+\n+    };\n+    ($lhs:expr, $op:tt, [$($rhs:expr),+]) => {\n+        $({\n+            // Wrap the check in its own function to reduce time needed to borrowck.\n+            fn check() {\n+                static CONST_EVAL: bool = $lhs $op $rhs;\n+                let runtime_eval = black_box($lhs) $op black_box($rhs);\n+                assert_eq!(CONST_EVAL, runtime_eval, stringify!($lhs $op $rhs));\n+                assert_eq!(\n+                    size_of::<[u8; ($lhs $op $rhs) as usize]>(),\n+                    runtime_eval as usize,\n+                    stringify!($lhs $op $rhs (forced const eval))\n+                );\n+            }\n+            check();\n+        })+\n+    };\n+}\n+\n+fn main() {\n+    assert_eq!(0.0/0.0 < 0.0/0.0, false);\n+    assert_eq!(0.0/0.0 > 0.0/0.0, false);\n+    assert_eq!(NAN < NAN, false);\n+    assert_eq!(NAN > NAN, false);\n+\n+    compare!(==);\n+    compare!(!=);\n+    compare!(<);\n+    compare!(<=);\n+    compare!(>);\n+    compare!(>=);\n+}"}]}