{"sha": "c40788c1b25b08c5687c00e9df44da1b417a9594", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MDc4OGMxYjI1YjA4YzU2ODdjMDBlOWRmNDRkYTFiNDE3YTk1OTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T13:34:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T13:34:18Z"}, "message": "Simplify define_global_for_alloc_id", "tree": {"sha": "45ca3826caf5e29b597cb1ef9017af3ef969122d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45ca3826caf5e29b597cb1ef9017af3ef969122d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c40788c1b25b08c5687c00e9df44da1b417a9594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c40788c1b25b08c5687c00e9df44da1b417a9594", "html_url": "https://github.com/rust-lang/rust/commit/c40788c1b25b08c5687c00e9df44da1b417a9594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c40788c1b25b08c5687c00e9df44da1b417a9594/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1031c659e0a6d75d0a6759dc95f4c55e2671053b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1031c659e0a6d75d0a6759dc95f4c55e2671053b", "html_url": "https://github.com/rust-lang/rust/commit/1031c659e0a6d75d0a6759dc95f4c55e2671053b"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "ec0a737c3f77cdc89b3f53d9dbd0cb95e8c59053", "filename": "src/constant.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c40788c1b25b08c5687c00e9df44da1b417a9594/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40788c1b25b08c5687c00e9df44da1b417a9594/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=c40788c1b25b08c5687c00e9df44da1b417a9594", "patch": "@@ -133,22 +133,17 @@ fn trans_const_place<'a, 'tcx: 'a>(\n // If ret.1 is true, then the global didn't exist before\n fn define_global_for_alloc_id<'a, 'tcx: 'a, B: Backend>(\n     module: &mut Module<B>,\n-    cx: &mut ConstantCx,//<'a, 'tcx>,\n+    cx: &mut ConstantCx,\n     alloc_id: AllocId,\n     todo: &mut HashMap<AllocId, DataId>,\n-) -> (DataId, bool) {\n-    use std::collections::hash_map::Entry;\n-    match cx.constants.entry(alloc_id) {\n-        Entry::Occupied(mut occ) => (*occ.get_mut(), false),\n-        Entry::Vacant(vac) => {\n-            let data_id = module\n-                .declare_data(&alloc_id.0.to_string(), Linkage::Local, false)\n-                .unwrap();\n-            todo.insert(alloc_id, data_id);\n-            vac.insert(data_id);\n-            (data_id, true)\n-        }\n-    }\n+) -> DataId {\n+    *cx.constants.entry(alloc_id).or_insert_with(|| {\n+        let data_id = module\n+            .declare_data(&alloc_id.0.to_string(), Linkage::Local, false)\n+            .unwrap();\n+        todo.insert(alloc_id, data_id);\n+        data_id\n+    })\n }\n \n fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n@@ -185,7 +180,7 @@ fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n         );\n \n         for &(offset, reloc) in alloc.relocations.iter() {\n-            let data_id = define_global_for_alloc_id(module, cx, reloc, &mut todo).0;\n+            let data_id = define_global_for_alloc_id(module, cx, reloc, &mut todo);\n \n             let reloc_offset = {\n                 let endianness = memory.endianness();"}]}