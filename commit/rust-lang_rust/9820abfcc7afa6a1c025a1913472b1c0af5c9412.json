{"sha": "9820abfcc7afa6a1c025a1913472b1c0af5c9412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MjBhYmZjYzdhZmE2YTFjMDI1YTE5MTM0NzJiMWMwYWY1Yzk0MTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T07:18:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T23:14:43Z"}, "message": "rustc: Thread a diagnostic::emitter through driver", "tree": {"sha": "0f79361c64612993bbc8781f679336517c230eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f79361c64612993bbc8781f679336517c230eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9820abfcc7afa6a1c025a1913472b1c0af5c9412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9820abfcc7afa6a1c025a1913472b1c0af5c9412", "html_url": "https://github.com/rust-lang/rust/commit/9820abfcc7afa6a1c025a1913472b1c0af5c9412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9820abfcc7afa6a1c025a1913472b1c0af5c9412/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78b1040e76ad2cd7b07c93289fce10cb79f2363", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78b1040e76ad2cd7b07c93289fce10cb79f2363", "html_url": "https://github.com/rust-lang/rust/commit/e78b1040e76ad2cd7b07c93289fce10cb79f2363"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "0fa471421fc20489ddca05c40aa090315f996f49", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9820abfcc7afa6a1c025a1913472b1c0af5c9412/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9820abfcc7afa6a1c025a1913472b1c0af5c9412/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=9820abfcc7afa6a1c025a1913472b1c0af5c9412", "patch": "@@ -316,14 +316,16 @@ fn get_arch(triple: str) -> option<session::arch> {\n         } else { none };\n }\n \n-fn build_target_config(sopts: @session::options) -> @session::config {\n+fn build_target_config(sopts: @session::options,\n+                       demitter: diagnostic::emitter) -> @session::config {\n     let os = alt get_os(sopts.target_triple) {\n       some(os) { os }\n-      none. { early_error(\"Unknown operating system!\") }\n+      none. { early_error(demitter, \"Unknown operating system!\") }\n     };\n     let arch = alt get_arch(sopts.target_triple) {\n       some(arch) { arch }\n-      none. { early_error(\"Unknown architecture! \" + sopts.target_triple) }\n+      none. { early_error(demitter,\n+                          \"Unknown architecture! \" + sopts.target_triple) }\n     };\n     let (int_type, uint_type, float_type) = alt arch {\n       session::arch_x86. {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n@@ -353,8 +355,8 @@ fn host_triple() -> str {\n     ret ht != \"\" ? ht : fail \"rustc built without CFG_HOST_TRIPLE\";\n }\n \n-fn build_session_options(match: getopts::match)\n-   -> @session::options {\n+fn build_session_options(match: getopts::match,\n+                         demitter: diagnostic::emitter) -> @session::options {\n     let crate_type = if opt_present(match, \"lib\") {\n         session::lib_crate\n     } else if opt_present(match, \"bin\") {\n@@ -398,7 +400,7 @@ fn build_session_options(match: getopts::match)\n     let opt_level: uint =\n         if opt_present(match, \"O\") {\n             if opt_present(match, \"opt-level\") {\n-                early_error(\"-O and --opt-level both provided\");\n+                early_error(demitter, \"-O and --opt-level both provided\");\n             }\n             2u\n         } else if opt_present(match, \"opt-level\") {\n@@ -408,7 +410,7 @@ fn build_session_options(match: getopts::match)\n               \"2\" { 2u }\n               \"3\" { 3u }\n               _ {\n-                early_error(\"optimization level needs \" +\n+                early_error(demitter, \"optimization level needs \" +\n                             \"to be between 0-3\")\n               }\n             }\n@@ -450,8 +452,9 @@ fn build_session_options(match: getopts::match)\n     ret sopts;\n }\n \n-fn build_session(sopts: @session::options, input: str) -> session::session {\n-    let target_cfg = build_target_config(sopts);\n+fn build_session(sopts: @session::options, input: str,\n+                 demitter: diagnostic::emitter) -> session::session {\n+    let target_cfg = build_target_config(sopts, demitter);\n     let cstore = cstore::mk_cstore();\n     let filesearch = filesearch::mk_filesearch(\n         sopts.maybe_sysroot,\n@@ -590,8 +593,8 @@ fn build_output_filenames(ifile: str,\n           obj_filename: obj_path};\n }\n \n-fn early_error(msg: str) -> ! {\n-    diagnostic::emit_diagnostic(none, msg, diagnostic::fatal);\n+fn early_error(emitter: diagnostic::emitter, msg: str) -> ! {\n+    emitter(none, msg, diagnostic::fatal);\n     fail;\n }\n "}, {"sha": "e43ca9b53f3de080f08d2d6e0798ef78e55919db", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9820abfcc7afa6a1c025a1913472b1c0af5c9412/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9820abfcc7afa6a1c025a1913472b1c0af5c9412/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=9820abfcc7afa6a1c025a1913472b1c0af5c9412", "patch": "@@ -9,6 +9,8 @@ import io::writer_util;\n import option::{some, none};\n import getopts::{opt_present};\n import rustc::driver::driver::*;\n+import rustc::syntax::codemap;\n+import rustc::driver::diagnostic;\n \n fn version(argv0: str) {\n     let vers = \"unknown version\";\n@@ -68,11 +70,16 @@ fn main(args: [str]) {\n \n     if vec::len(args) == 0u { usage(binary); ret; }\n \n+    let demitter = fn@(cmsp: option<(codemap::codemap, codemap::span)>,\n+                       msg: str, lvl: diagnostic::level) {\n+        diagnostic::emit_diagnostic(cmsp, msg, lvl);\n+    };\n+\n     let match =\n         alt getopts::getopts(args, opts()) {\n           ok(m) { m }\n           err(f) {\n-            early_error(getopts::fail_str(f))\n+            early_error(demitter, getopts::fail_str(f))\n           }\n         };\n     if opt_present(match, \"h\") || opt_present(match, \"help\") {\n@@ -84,13 +91,13 @@ fn main(args: [str]) {\n         ret;\n     }\n     let ifile = alt vec::len(match.free) {\n-      0u { early_error(\"No input filename given.\") }\n+      0u { early_error(demitter, \"No input filename given.\") }\n       1u { match.free[0] }\n-      _ { early_error(\"Multiple input filenames provided.\") }\n+      _ { early_error(demitter, \"Multiple input filenames provided.\") }\n     };\n \n-    let sopts = build_session_options(match);\n-    let sess = build_session(sopts, ifile);\n+    let sopts = build_session_options(match, demitter);\n+    let sess = build_session(sopts, ifile, demitter);\n     let odir = getopts::opt_maybe_str(match, \"out-dir\");\n     let ofile = getopts::opt_maybe_str(match, \"o\");\n     let cfg = build_configuration(sess, binary, ifile);"}]}