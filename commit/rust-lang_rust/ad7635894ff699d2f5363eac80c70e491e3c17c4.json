{"sha": "ad7635894ff699d2f5363eac80c70e491e3c17c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzYzNTg5NGZmNjk5ZDJmNTM2M2VhYzgwYzcwZTQ5MWUzYzE3YzQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-10-04T09:54:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-04T09:54:03Z"}, "message": "Rollup merge of #36917 - nnethercote:speed-up-plug_leaks, r=eddyb\n\nSpeed up `plug_leaks`\n\nProfiling shows that `plug_leaks` and the functions it calls are hot on some benchmarks. It's very common that `skol_map` is empty in this function, and we can specialize `plug_leaks` in that case for some big speed-ups.\n\nThe PR has two commits. I'm fairly confident that the first one is correct -- I traced through the code to confirm that the `fold_regions` and `pop_skolemized` calls are no-ops when `skol_map` is empty, and I also temporarily added an assertion to check that `result` ends up having the same value as `value` in that case. This commit is responsible for most of the improvement.\n\nI'm less confident about the second commit. The call to `resolve_type_vars_is_possible` can change `value` when `skol_map` is empty... but testing suggests that it doesn't matter if the call is\nomitted.\n\nSo, please check both patches carefully, especially the second one!\n\nHere are the speed-ups for the first commit alone.\n\nstage1 compiler (built with old rustc, using glibc malloc), doing debug builds:\n```\nfutures-rs-test  4.710s vs  4.538s --> 1.038x faster (variance: 1.009x, 1.005x)\nissue-32062-equ  0.415s vs  0.368s --> 1.129x faster (variance: 1.009x, 1.010x)\nissue-32278-big  1.884s vs  1.808s --> 1.042x faster (variance: 1.020x, 1.017x)\njld-day15-parse  1.907s vs  1.668s --> 1.143x faster (variance: 1.011x, 1.007x)\npiston-image-0. 13.024s vs 12.421s --> 1.049x faster (variance: 1.004x, 1.012x)\nrust-encoding-0  3.335s vs  3.276s --> 1.018x faster (variance: 1.021x, 1.028x)\n```\nstage2 compiler (built with new rustc, using jemalloc), doing debug builds:\n```\nfutures-rs-test  4.167s vs  4.065s --> 1.025x faster (variance: 1.006x, 1.018x)\nissue-32062-equ  0.383s vs  0.343s --> 1.118x faster (variance: 1.012x, 1.016x)\nissue-32278-big  1.680s vs  1.621s --> 1.036x faster (variance: 1.007x, 1.007x)\njld-day15-parse  1.671s vs  1.478s --> 1.131x faster (variance: 1.016x, 1.004x)\npiston-image-0. 11.336s vs 10.852s --> 1.045x faster (variance: 1.003x, 1.006x)\nrust-encoding-0  3.036s vs  2.971s --> 1.022x faster (variance: 1.030x, 1.032x)\n```\nI've omitted the benchmarks for which the change was negligible.\n\nAnd here are the speed-ups for the first and second commit in combination.\n\nstage1 compiler (built with old rustc, using glibc malloc), doing debug\nbuilds:\n```\nfutures-rs-test  4.684s vs  4.498s --> 1.041x faster (variance: 1.012x, 1.012x)\nissue-32062-equ  0.413s vs  0.355s --> 1.162x faster (variance: 1.019x, 1.006x)\nissue-32278-big  1.869s vs  1.763s --> 1.060x faster (variance: 1.013x, 1.018x)\njld-day15-parse  1.900s vs  1.602s --> 1.186x faster (variance: 1.010x, 1.003x)\npiston-image-0. 12.907s vs 12.352s --> 1.045x faster (variance: 1.005x, 1.006x)\nrust-encoding-0  3.254s vs  3.248s --> 1.002x faster (variance: 1.063x, 1.045x)\n```\nstage2 compiler (built with new rustc, using jemalloc), doing debug builds:\n```\nfutures-rs-test  4.183s vs  4.046s --> 1.034x faster (variance: 1.007x, 1.004x)\nissue-32062-equ  0.380s vs  0.340s --> 1.117x faster (variance: 1.020x, 1.003x)\nissue-32278-big  1.671s vs  1.616s --> 1.034x faster (variance: 1.031x, 1.012x)\njld-day15-parse  1.661s vs  1.417s --> 1.172x faster (variance: 1.013x, 1.005x)\npiston-image-0. 11.347s vs 10.841s --> 1.047x faster (variance: 1.007x, 1.010x)\nrust-encoding-0  3.050s vs  3.000s --> 1.017x faster (variance: 1.016x, 1.012x)\n```\n@eddyb: `git blame` suggests that you should review this. Thanks!", "tree": {"sha": "29eb4c2f4dd1df9ae1d28e91a485c70ae79926a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29eb4c2f4dd1df9ae1d28e91a485c70ae79926a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad7635894ff699d2f5363eac80c70e491e3c17c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7635894ff699d2f5363eac80c70e491e3c17c4", "html_url": "https://github.com/rust-lang/rust/commit/ad7635894ff699d2f5363eac80c70e491e3c17c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad7635894ff699d2f5363eac80c70e491e3c17c4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454124974f9828a92ae26cfd8b77924301a5a510", "url": "https://api.github.com/repos/rust-lang/rust/commits/454124974f9828a92ae26cfd8b77924301a5a510", "html_url": "https://github.com/rust-lang/rust/commit/454124974f9828a92ae26cfd8b77924301a5a510"}, {"sha": "3779971dbb397ff8b1668c379812b903a6a907ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3779971dbb397ff8b1668c379812b903a6a907ec", "html_url": "https://github.com/rust-lang/rust/commit/3779971dbb397ff8b1668c379812b903a6a907ec"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "c1d9240ba0634fa2243db4b0d121a1a15390ce9f", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad7635894ff699d2f5363eac80c70e491e3c17c4/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7635894ff699d2f5363eac80c70e491e3c17c4/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=ad7635894ff699d2f5363eac80c70e491e3c17c4", "patch": "@@ -749,13 +749,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn plug_leaks<T>(&self,\n                          skol_map: SkolemizationMap<'tcx>,\n                          snapshot: &CombinedSnapshot,\n-                         value: &T) -> T\n+                         value: T) -> T\n         where T : TypeFoldable<'tcx>\n     {\n         debug!(\"plug_leaks(skol_map={:?}, value={:?})\",\n                skol_map,\n                value);\n \n+        if skol_map.is_empty() {\n+            return value;\n+        }\n+\n         // Compute a mapping from the \"taint set\" of each skolemized\n         // region back to the `ty::BoundRegion` that it originally\n         // represented. Because `leak_check` passed, we know that\n@@ -775,7 +779,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         // Remove any instantiated type variables from `value`; those can hide\n         // references to regions from the `fold_regions` code below.\n-        let value = self.resolve_type_vars_if_possible(value);\n+        let value = self.resolve_type_vars_if_possible(&value);\n \n         // Map any skolemization byproducts back to a late-bound\n         // region. Put that late-bound region at whatever the outermost\n@@ -813,9 +817,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         });\n \n-        debug!(\"plug_leaks: result={:?}\",\n-               result);\n-\n         self.pop_skolemized(skol_map, snapshot);\n \n         debug!(\"plug_leaks: result={:?}\", result);"}, {"sha": "ddabc53a89a8122a6821cd1371b05d3e618bd338", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad7635894ff699d2f5363eac80c70e491e3c17c4/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7635894ff699d2f5363eac80c70e491e3c17c4/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=ad7635894ff699d2f5363eac80c70e491e3c17c4", "patch": "@@ -171,7 +171,7 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n             Ok(result) => {\n                 let span = obligation.cause.span;\n                 match infcx.leak_check(false, span, &skol_map, snapshot) {\n-                    Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, &result)),\n+                    Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, result)),\n                     Err(e) => Err(MismatchedProjectionTypes { err: e }),\n                 }\n             }"}, {"sha": "666311110971dccb35d8ac5c814b30e7c6d898d2", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad7635894ff699d2f5363eac80c70e491e3c17c4/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7635894ff699d2f5363eac80c70e491e3c17c4/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=ad7635894ff699d2f5363eac80c70e491e3c17c4", "patch": "@@ -1980,7 +1980,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                                   normalized_ty,\n                                                   &[]);\n                 obligations.push(skol_obligation);\n-                this.infcx().plug_leaks(skol_map, snapshot, &obligations)\n+                this.infcx().plug_leaks(skol_map, snapshot, obligations)\n             })\n         }).collect()\n     }\n@@ -2899,7 +2899,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     predicate: predicate.value\n                 }))\n         }).collect();\n-        self.infcx().plug_leaks(skol_map, snapshot, &predicates)\n+        self.infcx().plug_leaks(skol_map, snapshot, predicates)\n     }\n }\n "}]}