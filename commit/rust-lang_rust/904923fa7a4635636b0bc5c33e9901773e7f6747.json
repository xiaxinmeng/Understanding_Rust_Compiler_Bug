{"sha": "904923fa7a4635636b0bc5c33e9901773e7f6747", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNDkyM2ZhN2E0NjM1NjM2YjBiYzVjMzNlOTkwMTc3M2U3ZjY3NDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-26T18:42:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-30T08:42:18Z"}, "message": "move some more helpers to rustc", "tree": {"sha": "8a9619d7b55925d90d7b20e4896c4c1914a321e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9619d7b55925d90d7b20e4896c4c1914a321e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/904923fa7a4635636b0bc5c33e9901773e7f6747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/904923fa7a4635636b0bc5c33e9901773e7f6747", "html_url": "https://github.com/rust-lang/rust/commit/904923fa7a4635636b0bc5c33e9901773e7f6747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/904923fa7a4635636b0bc5c33e9901773e7f6747/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "752accf4e48b83545fa2fcf205602f239389361d", "url": "https://api.github.com/repos/rust-lang/rust/commits/752accf4e48b83545fa2fcf205602f239389361d", "html_url": "https://github.com/rust-lang/rust/commit/752accf4e48b83545fa2fcf205602f239389361d"}], "stats": {"total": 125, "additions": 31, "deletions": 94}, "files": [{"sha": "0e768fcccf9e5c561fea2e6af0ba18a011cc9bf2", "filename": "src/fn_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=904923fa7a4635636b0bc5c33e9901773e7f6747", "patch": "@@ -305,7 +305,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for EvalContext<'a, '\n                 };\n \n                 self.write_scalar(\n-                    Scalar::from_i32(result),\n+                    Scalar::from_int(result, Size::from_bits(32)),\n                     dest,\n                 )?;\n             }\n@@ -346,7 +346,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for EvalContext<'a, '\n                     let name = self.memory.read_c_str(name_ptr)?;\n                     match self.machine.env_vars.get(name) {\n                         Some(&var) => Scalar::Ptr(var),\n-                        None => Scalar::null(self.memory.pointer_size()),\n+                        None => Scalar::ptr_null(*self.tcx),\n                     }\n                 };\n                 self.write_scalar(result, dest)?;\n@@ -446,7 +446,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for EvalContext<'a, '\n \n             // Some things needed for sys::thread initialization to go through\n             \"signal\" | \"sigaction\" | \"sigaltstack\" => {\n-                self.write_scalar(Scalar::null(dest.layout.size), dest)?;\n+                self.write_scalar(Scalar::from_int(0, dest.layout.size), dest)?;\n             }\n \n             \"sysconf\" => {\n@@ -729,6 +729,6 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for EvalContext<'a, '\n     }\n \n     fn write_null(&mut self, dest: PlaceTy<'tcx>) -> EvalResult<'tcx> {\n-        self.write_scalar(Scalar::null(dest.layout.size), dest)\n+        self.write_scalar(Scalar::from_int(0, dest.layout.size), dest)\n     }\n }"}, {"sha": "27b2109d18a16a5d0af36959e147a7f1ae27e335", "filename": "src/helpers.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=904923fa7a4635636b0bc5c33e9901773e7f6747", "patch": "@@ -1,57 +1,12 @@\n-use rustc::ty::layout::Size;\n-\n use super::{Scalar, ScalarMaybeUndef, EvalResult};\n \n-pub trait ScalarExt {\n-    fn null(size: Size) -> Self;\n-    fn from_i32(i: i32) -> Self;\n-    fn from_uint(i: impl Into<u128>, ptr_size: Size) -> Self;\n-    fn from_int(i: impl Into<i128>, ptr_size: Size) -> Self;\n-    fn from_f32(f: f32) -> Self;\n-    fn from_f64(f: f64) -> Self;\n-    fn is_null(self) -> bool;\n-}\n-\n pub trait FalibleScalarExt {\n     /// HACK: this function just extracts all bits if `defined != 0`\n     /// Mainly used for args of C-functions and we should totally correctly fetch the size\n     /// of their arguments\n     fn to_bytes(self) -> EvalResult<'static, u128>;\n }\n \n-impl ScalarExt for Scalar {\n-    fn null(size: Size) -> Self {\n-        Scalar::Bits { bits: 0, size: size.bytes() as u8 }\n-    }\n-\n-    fn from_i32(i: i32) -> Self {\n-        Scalar::Bits { bits: i as u32 as u128, size: 4 }\n-    }\n-\n-    fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n-        Scalar::Bits { bits: i.into(), size: size.bytes() as u8 }\n-    }\n-\n-    fn from_int(i: impl Into<i128>, size: Size) -> Self {\n-        Scalar::Bits { bits: i.into() as u128, size: size.bytes() as u8 }\n-    }\n-\n-    fn from_f32(f: f32) -> Self {\n-        Scalar::Bits { bits: f.to_bits() as u128, size: 4 }\n-    }\n-\n-    fn from_f64(f: f64) -> Self {\n-        Scalar::Bits { bits: f.to_bits() as u128, size: 8 }\n-    }\n-\n-    fn is_null(self) -> bool {\n-        match self {\n-            Scalar::Bits { bits, .. } => bits == 0,\n-            Scalar::Ptr(_) => false\n-        }\n-    }\n-}\n-\n impl FalibleScalarExt for Scalar {\n     fn to_bytes(self) -> EvalResult<'static, u128> {\n         match self {"}, {"sha": "695943d57b0c9e73f2c855e0a2d49d7c67711aee", "filename": "src/intrinsic.rs", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=904923fa7a4635636b0bc5c33e9901773e7f6747", "patch": "@@ -2,12 +2,12 @@ use rustc::mir;\n use rustc::ty::layout::{self, LayoutOf, Size};\n use rustc::ty;\n \n-use rustc::mir::interpret::{EvalResult, Scalar, ScalarMaybeUndef};\n+use rustc::mir::interpret::{EvalResult, Scalar, ScalarMaybeUndef, PointerArithmetic};\n use rustc_mir::interpret::{\n     PlaceTy, EvalContext, OpTy, Value\n };\n \n-use super::{ScalarExt, FalibleScalarExt, OperatorEvalContextExt};\n+use super::{FalibleScalarExt, OperatorEvalContextExt};\n \n pub trait EvalContextExt<'tcx> {\n     fn call_intrinsic(\n@@ -204,8 +204,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n \n             \"sinf32\" | \"fabsf32\" | \"cosf32\" | \"sqrtf32\" | \"expf32\" | \"exp2f32\" | \"logf32\" |\n             \"log10f32\" | \"log2f32\" | \"floorf32\" | \"ceilf32\" | \"truncf32\" => {\n-                let f = self.read_scalar(args[0])?.to_bytes()?;\n-                let f = f32::from_bits(f as u32);\n+                let f = self.read_scalar(args[0])?.to_f32()?;\n                 let f = match intrinsic_name {\n                     \"sinf32\" => f.sin(),\n                     \"fabsf32\" => f.abs(),\n@@ -226,8 +225,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n \n             \"sinf64\" | \"fabsf64\" | \"cosf64\" | \"sqrtf64\" | \"expf64\" | \"exp2f64\" | \"logf64\" |\n             \"log10f64\" | \"log2f64\" | \"floorf64\" | \"ceilf64\" | \"truncf64\" => {\n-                let f = self.read_scalar(args[0])?.to_bytes()?;\n-                let f = f64::from_bits(f as u64);\n+                let f = self.read_scalar(args[0])?.to_f64()?;\n                 let f = match intrinsic_name {\n                     \"sinf64\" => f.sin(),\n                     \"fabsf64\" => f.abs(),\n@@ -282,12 +280,12 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 if !dest.layout.is_zst() { // notzhing to do for ZST\n                     match dest.layout.abi {\n                         layout::Abi::Scalar(ref s) => {\n-                            let x = Scalar::null(s.value.size(&self));\n+                            let x = Scalar::from_int(0, s.value.size(&self));\n                             self.write_value(Value::Scalar(x.into()), dest)?;\n                         }\n                         layout::Abi::ScalarPair(ref s1, ref s2) => {\n-                            let x = Scalar::null(s1.value.size(&self));\n-                            let y = Scalar::null(s2.value.size(&self));\n+                            let x = Scalar::from_int(0, s1.value.size(&self));\n+                            let y = Scalar::from_int(0, s2.value.size(&self));\n                             self.write_value(Value::ScalarPair(x.into(), y.into()), dest)?;\n                         }\n                         _ => {\n@@ -304,7 +302,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 let ty = substs.type_at(0);\n                 let layout = self.layout_of(ty)?;\n                 let align = layout.align.pref();\n-                let ptr_size = self.memory.pointer_size();\n+                let ptr_size = self.pointer_size();\n                 let align_val = Scalar::from_uint(align as u128, ptr_size);\n                 self.write_scalar(align_val, dest)?;\n             }\n@@ -365,56 +363,45 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             }\n \n             \"powf32\" => {\n-                let f = self.read_scalar(args[0])?.to_bits(Size::from_bits(32))?;\n-                let f = f32::from_bits(f as u32);\n-                let f2 = self.read_scalar(args[1])?.to_bits(Size::from_bits(32))?;\n-                let f2 = f32::from_bits(f2 as u32);\n+                let f = self.read_scalar(args[0])?.to_f32()?;\n+                let f2 = self.read_scalar(args[1])?.to_f32()?;\n                 self.write_scalar(\n                     Scalar::from_f32(f.powf(f2)),\n                     dest,\n                 )?;\n             }\n \n             \"powf64\" => {\n-                let f = self.read_scalar(args[0])?.to_bits(Size::from_bits(64))?;\n-                let f = f64::from_bits(f as u64);\n-                let f2 = self.read_scalar(args[1])?.to_bits(Size::from_bits(64))?;\n-                let f2 = f64::from_bits(f2 as u64);\n+                let f = self.read_scalar(args[0])?.to_f64()?;\n+                let f2 = self.read_scalar(args[1])?.to_f64()?;\n                 self.write_scalar(\n                     Scalar::from_f64(f.powf(f2)),\n                     dest,\n                 )?;\n             }\n \n             \"fmaf32\" => {\n-                let a = self.read_scalar(args[0])?.to_bits(Size::from_bits(32))?;\n-                let a = f32::from_bits(a as u32);\n-                let b = self.read_scalar(args[1])?.to_bits(Size::from_bits(32))?;\n-                let b = f32::from_bits(b as u32);\n-                let c = self.read_scalar(args[2])?.to_bits(Size::from_bits(32))?;\n-                let c = f32::from_bits(c as u32);\n+                let a = self.read_scalar(args[0])?.to_f32()?;\n+                let b = self.read_scalar(args[1])?.to_f32()?;\n+                let c = self.read_scalar(args[2])?.to_f32()?;\n                 self.write_scalar(\n                     Scalar::from_f32(a * b + c),\n                     dest,\n                 )?;\n             }\n \n             \"fmaf64\" => {\n-                let a = self.read_scalar(args[0])?.to_bits(Size::from_bits(64))?;\n-                let a = f64::from_bits(a as u64);\n-                let b = self.read_scalar(args[1])?.to_bits(Size::from_bits(64))?;\n-                let b = f64::from_bits(b as u64);\n-                let c = self.read_scalar(args[2])?.to_bits(Size::from_bits(64))?;\n-                let c = f64::from_bits(c as u64);\n+                let a = self.read_scalar(args[0])?.to_f64()?;\n+                let b = self.read_scalar(args[1])?.to_f64()?;\n+                let c = self.read_scalar(args[2])?.to_f64()?;\n                 self.write_scalar(\n                     Scalar::from_f64(a * b + c),\n                     dest,\n                 )?;\n             }\n \n             \"powif32\" => {\n-                let f = self.read_scalar(args[0])?.to_bits(Size::from_bits(32))?;\n-                let f = f32::from_bits(f as u32);\n+                let f = self.read_scalar(args[0])?.to_f32()?;\n                 let i = self.read_scalar(args[1])?.to_i32()?;\n                 self.write_scalar(\n                     Scalar::from_f32(f.powi(i)),\n@@ -423,8 +410,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             }\n \n             \"powif64\" => {\n-                let f = self.read_scalar(args[0])?.to_bits(Size::from_bits(64))?;\n-                let f = f64::from_bits(f as u64);\n+                let f = self.read_scalar(args[0])?.to_f64()?;\n                 let i = self.read_scalar(args[1])?.to_i32()?;\n                 self.write_scalar(\n                     Scalar::from_f64(f.powi(i)),\n@@ -435,7 +421,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             \"size_of_val\" => {\n                 let mplace = self.ref_to_mplace(self.read_value(args[0])?)?;\n                 let (size, _) = self.size_and_align_of_mplace(mplace)?;\n-                let ptr_size = self.memory.pointer_size();\n+                let ptr_size = self.pointer_size();\n                 self.write_scalar(\n                     Scalar::from_uint(size.bytes() as u128, ptr_size),\n                     dest,\n@@ -446,7 +432,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             \"align_of_val\" => {\n                 let mplace = self.ref_to_mplace(self.read_value(args[0])?)?;\n                 let (_, align) = self.size_and_align_of_mplace(mplace)?;\n-                let ptr_size = self.memory.pointer_size();\n+                let ptr_size = self.pointer_size();\n                 self.write_scalar(\n                     Scalar::from_uint(align.abi(), ptr_size),\n                     dest,"}, {"sha": "0ce510a65983ea8419b049da72b7920dfd71ed1e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=904923fa7a4635636b0bc5c33e9901773e7f6747", "patch": "@@ -46,7 +46,7 @@ use tls::EvalContextExt as TlsEvalContextExt;\n use memory::MemoryKind as MiriMemoryKind;\n use locks::LockInfo;\n use range_map::RangeMap;\n-use helpers::{ScalarExt, FalibleScalarExt};\n+use helpers::FalibleScalarExt;\n \n pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "bd0318a62ed45823271bae22964a62bc675b2656", "filename": "src/tls.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904923fa7a4635636b0bc5c33e9901773e7f6747/src%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftls.rs?ref=904923fa7a4635636b0bc5c33e9901773e7f6747", "patch": "@@ -1,6 +1,6 @@\n use rustc::{ty, mir};\n \n-use super::{TlsKey, TlsEntry, EvalResult, EvalErrorKind, Scalar, ScalarExt, Memory, Evaluator,\n+use super::{TlsKey, TlsEntry, EvalResult, EvalErrorKind, Scalar, Memory, Evaluator,\n             Place, StackPopCleanup, EvalContext};\n \n pub trait MemoryExt<'tcx> {\n@@ -22,11 +22,10 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> MemoryExt<'tcx> for Memory<'a, 'mir, 'tcx, Evalu\n     fn create_tls_key(&mut self, dtor: Option<ty::Instance<'tcx>>) -> TlsKey {\n         let new_key = self.data.next_thread_local;\n         self.data.next_thread_local += 1;\n-        let ptr_size = self.pointer_size();\n         self.data.thread_local.insert(\n             new_key,\n             TlsEntry {\n-                data: Scalar::null(ptr_size).into(),\n+                data: Scalar::ptr_null(*self.tcx).into(),\n                 dtor,\n             },\n         );\n@@ -89,7 +88,6 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> MemoryExt<'tcx> for Memory<'a, 'mir, 'tcx, Evalu\n     ) -> Option<(ty::Instance<'tcx>, Scalar, TlsKey)> {\n         use std::collections::Bound::*;\n \n-        let ptr_size = self.pointer_size();\n         let thread_local = &mut self.data.thread_local;\n         let start = match key {\n             Some(key) => Excluded(key),\n@@ -101,7 +99,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> MemoryExt<'tcx> for Memory<'a, 'mir, 'tcx, Evalu\n             if !data.is_null() {\n                 if let Some(dtor) = dtor {\n                     let ret = Some((dtor, *data, key));\n-                    *data = Scalar::null(ptr_size);\n+                    *data = Scalar::ptr_null(*self.tcx);\n                     return ret;\n                 }\n             }"}, {"sha": "5524f0ae7abea09409c637f924c81bc1e1c1e4b5", "filename": "tests/run-pass/char.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/904923fa7a4635636b0bc5c33e9901773e7f6747/tests%2Frun-pass%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904923fa7a4635636b0bc5c33e9901773e7f6747/tests%2Frun-pass%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fchar.rs?ref=904923fa7a4635636b0bc5c33e9901773e7f6747", "patch": "@@ -3,7 +3,5 @@ fn main() {\n     assert_eq!(c, 'x');\n     assert!('a' < 'z');\n     assert!('1' < '9');\n-    assert_eq!(std::char::from_u32('x' as u32).unwrap(), 'x');\n-    // FIXME:\n-    // assert_eq!(std::char::from_u32('x' as u32), Some('x'));\n+    assert_eq!(std::char::from_u32('x' as u32), Some('x'));\n }"}]}