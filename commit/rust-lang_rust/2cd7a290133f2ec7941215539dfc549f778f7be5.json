{"sha": "2cd7a290133f2ec7941215539dfc549f778f7be5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZDdhMjkwMTMzZjJlYzc5NDEyMTU1MzlkZmM1NDlmNzc4ZjdiZTU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-16T09:25:28Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-16T09:25:28Z"}, "message": "Merge ImmutableTuple* traits into their respective Tuple* trait", "tree": {"sha": "04ae3b6921ebad8b4fe9657820912132db4b1901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ae3b6921ebad8b4fe9657820912132db4b1901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cd7a290133f2ec7941215539dfc549f778f7be5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd7a290133f2ec7941215539dfc549f778f7be5", "html_url": "https://github.com/rust-lang/rust/commit/2cd7a290133f2ec7941215539dfc549f778f7be5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cd7a290133f2ec7941215539dfc549f778f7be5/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f39eb1a568c03534a41f6815e7fb0bde737cd6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f39eb1a568c03534a41f6815e7fb0bde737cd6f", "html_url": "https://github.com/rust-lang/rust/commit/6f39eb1a568c03534a41f6815e7fb0bde737cd6f"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "ef159d68df7ea5a315042fdbd815f0c69da98c87", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cd7a290133f2ec7941215539dfc549f778f7be5/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd7a290133f2ec7941215539dfc549f778f7be5/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=2cd7a290133f2ec7941215539dfc549f778f7be5", "patch": "@@ -68,9 +68,6 @@ pub use str::{Str, StrVector, StrSlice, OwnedStr, IntoMaybeOwned};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, IntoStr};\n pub use tuple::{CloneableTuple, ImmutableTuple};\n-pub use tuple::{ImmutableTuple1, ImmutableTuple2, ImmutableTuple3, ImmutableTuple4};\n-pub use tuple::{ImmutableTuple5, ImmutableTuple6, ImmutableTuple7, ImmutableTuple8};\n-pub use tuple::{ImmutableTuple9, ImmutableTuple10, ImmutableTuple11, ImmutableTuple12};\n pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};"}, {"sha": "18014fc17f918587f934dd16def94b1689a2d215", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2cd7a290133f2ec7941215539dfc549f778f7be5/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd7a290133f2ec7941215539dfc549f778f7be5/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=2cd7a290133f2ec7941215539dfc549f778f7be5", "patch": "@@ -80,36 +80,28 @@ impl<T, U> ImmutableTuple<T, U> for (T, U) {\n }\n \n // macro for implementing n-ary tuple functions and operations\n-\n macro_rules! tuple_impls {\n     ($(\n-        ($move_trait:ident, $immutable_trait:ident) {\n+        $Tuple:ident {\n             $(($get_fn:ident, $get_ref_fn:ident) -> $T:ident {\n                 $move_pattern:pat, $ref_pattern:pat => $ret:expr\n             })+\n         }\n     )+) => {\n         $(\n-            pub trait $move_trait<$($T),+> {\n+            pub trait $Tuple<$($T),+> {\n                 $(fn $get_fn(self) -> $T;)+\n+                $(fn $get_ref_fn<'a>(&'a self) -> &'a $T;)+\n             }\n \n-            impl<$($T),+> $move_trait<$($T),+> for ($($T,)+) {\n+            impl<$($T),+> $Tuple<$($T),+> for ($($T,)+) {\n                 $(\n                     #[inline]\n                     fn $get_fn(self) -> $T {\n                         let $move_pattern = self;\n                         $ret\n                     }\n-                )+\n-            }\n-\n-            pub trait $immutable_trait<$($T),+> {\n-                $(fn $get_ref_fn<'a>(&'a self) -> &'a $T;)+\n-            }\n \n-            impl<$($T),+> $immutable_trait<$($T),+> for ($($T,)+) {\n-                $(\n                     #[inline]\n                     fn $get_ref_fn<'a>(&'a self) -> &'a $T {\n                         let $ref_pattern = *self;\n@@ -230,46 +222,40 @@ macro_rules! write_tuple {\n }\n \n tuple_impls! {\n-    (Tuple1, ImmutableTuple1) {\n+    Tuple1 {\n         (n0, n0_ref) -> A { (a,), (ref a,) => a }\n     }\n-\n-    (Tuple2, ImmutableTuple2) {\n+    Tuple2 {\n         (n0, n0_ref) -> A { (a,_), (ref a,_) => a }\n         (n1, n1_ref) -> B { (_,b), (_,ref b) => b }\n     }\n-\n-    (Tuple3, ImmutableTuple3) {\n+    Tuple3 {\n         (n0, n0_ref) -> A { (a,_,_), (ref a,_,_) => a }\n         (n1, n1_ref) -> B { (_,b,_), (_,ref b,_) => b }\n         (n2, n2_ref) -> C { (_,_,c), (_,_,ref c) => c }\n     }\n-\n-    (Tuple4, ImmutableTuple4) {\n+    Tuple4 {\n         (n0, n0_ref) -> A { (a,_,_,_), (ref a,_,_,_) => a }\n         (n1, n1_ref) -> B { (_,b,_,_), (_,ref b,_,_) => b }\n         (n2, n2_ref) -> C { (_,_,c,_), (_,_,ref c,_) => c }\n         (n3, n3_ref) -> D { (_,_,_,d), (_,_,_,ref d) => d }\n     }\n-\n-    (Tuple5, ImmutableTuple5) {\n+    Tuple5 {\n         (n0, n0_ref) -> A { (a,_,_,_,_), (ref a,_,_,_,_) => a }\n         (n1, n1_ref) -> B { (_,b,_,_,_), (_,ref b,_,_,_) => b }\n         (n2, n2_ref) -> C { (_,_,c,_,_), (_,_,ref c,_,_) => c }\n         (n3, n3_ref) -> D { (_,_,_,d,_), (_,_,_,ref d,_) => d }\n         (n4, n4_ref) -> E { (_,_,_,_,e), (_,_,_,_,ref e) => e }\n     }\n-\n-    (Tuple6, ImmutableTuple6) {\n+    Tuple6 {\n         (n0, n0_ref) -> A { (a,_,_,_,_,_), (ref a,_,_,_,_,_) => a }\n         (n1, n1_ref) -> B { (_,b,_,_,_,_), (_,ref b,_,_,_,_) => b }\n         (n2, n2_ref) -> C { (_,_,c,_,_,_), (_,_,ref c,_,_,_) => c }\n         (n3, n3_ref) -> D { (_,_,_,d,_,_), (_,_,_,ref d,_,_) => d }\n         (n4, n4_ref) -> E { (_,_,_,_,e,_), (_,_,_,_,ref e,_) => e }\n         (n5, n5_ref) -> F { (_,_,_,_,_,f), (_,_,_,_,_,ref f) => f }\n     }\n-\n-    (Tuple7, ImmutableTuple7) {\n+    Tuple7 {\n         (n0, n0_ref) -> A { (a,_,_,_,_,_,_), (ref a,_,_,_,_,_,_) => a }\n         (n1, n1_ref) -> B { (_,b,_,_,_,_,_), (_,ref b,_,_,_,_,_) => b }\n         (n2, n2_ref) -> C { (_,_,c,_,_,_,_), (_,_,ref c,_,_,_,_) => c }\n@@ -278,8 +264,7 @@ tuple_impls! {\n         (n5, n5_ref) -> F { (_,_,_,_,_,f,_), (_,_,_,_,_,ref f,_) => f }\n         (n6, n6_ref) -> G { (_,_,_,_,_,_,g), (_,_,_,_,_,_,ref g) => g }\n     }\n-\n-    (Tuple8, ImmutableTuple8) {\n+    Tuple8 {\n         (n0, n0_ref) -> A { (a,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_) => a }\n         (n1, n1_ref) -> B { (_,b,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_) => b }\n         (n2, n2_ref) -> C { (_,_,c,_,_,_,_,_), (_,_,ref c,_,_,_,_,_) => c }\n@@ -289,8 +274,7 @@ tuple_impls! {\n         (n6, n6_ref) -> G { (_,_,_,_,_,_,g,_), (_,_,_,_,_,_,ref g,_) => g }\n         (n7, n7_ref) -> H { (_,_,_,_,_,_,_,h), (_,_,_,_,_,_,_,ref h) => h }\n     }\n-\n-    (Tuple9, ImmutableTuple9) {\n+    Tuple9 {\n         (n0, n0_ref) -> A { (a,_,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_,_) => a }\n         (n1, n1_ref) -> B { (_,b,_,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_,_) => b }\n         (n2, n2_ref) -> C { (_,_,c,_,_,_,_,_,_), (_,_,ref c,_,_,_,_,_,_) => c }\n@@ -301,8 +285,7 @@ tuple_impls! {\n         (n7, n7_ref) -> H { (_,_,_,_,_,_,_,h,_), (_,_,_,_,_,_,_,ref h,_) => h }\n         (n8, n8_ref) -> I { (_,_,_,_,_,_,_,_,i), (_,_,_,_,_,_,_,_,ref i) => i }\n     }\n-\n-    (Tuple10, ImmutableTuple10) {\n+    Tuple10 {\n         (n0, n0_ref) -> A { (a,_,_,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_,_,_) => a }\n         (n1, n1_ref) -> B { (_,b,_,_,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_,_,_) => b }\n         (n2, n2_ref) -> C { (_,_,c,_,_,_,_,_,_,_), (_,_,ref c,_,_,_,_,_,_,_) => c }\n@@ -314,8 +297,7 @@ tuple_impls! {\n         (n8, n8_ref) -> I { (_,_,_,_,_,_,_,_,i,_), (_,_,_,_,_,_,_,_,ref i,_) => i }\n         (n9, n9_ref) -> J { (_,_,_,_,_,_,_,_,_,j), (_,_,_,_,_,_,_,_,_,ref j) => j }\n     }\n-\n-    (Tuple11, ImmutableTuple11) {\n+    Tuple11 {\n         (n0,  n0_ref)  -> A { (a,_,_,_,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_,_,_,_) => a }\n         (n1,  n1_ref)  -> B { (_,b,_,_,_,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_,_,_,_) => b }\n         (n2,  n2_ref)  -> C { (_,_,c,_,_,_,_,_,_,_,_), (_,_,ref c,_,_,_,_,_,_,_,_) => c }\n@@ -328,8 +310,7 @@ tuple_impls! {\n         (n9,  n9_ref)  -> J { (_,_,_,_,_,_,_,_,_,j,_), (_,_,_,_,_,_,_,_,_,ref j,_) => j }\n         (n10, n10_ref) -> K { (_,_,_,_,_,_,_,_,_,_,k), (_,_,_,_,_,_,_,_,_,_,ref k) => k }\n     }\n-\n-    (Tuple12, ImmutableTuple12) {\n+    Tuple12 {\n         (n0,  n0_ref)  -> A { (a,_,_,_,_,_,_,_,_,_,_,_), (ref a,_,_,_,_,_,_,_,_,_,_,_) => a }\n         (n1,  n1_ref)  -> B { (_,b,_,_,_,_,_,_,_,_,_,_), (_,ref b,_,_,_,_,_,_,_,_,_,_) => b }\n         (n2,  n2_ref)  -> C { (_,_,c,_,_,_,_,_,_,_,_,_), (_,_,ref c,_,_,_,_,_,_,_,_,_) => c }"}]}