{"sha": "52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMjA4ZjNjZjM5NDlhNDU4OWNiYWVlNjlhOWNiN2QzNGVlMGU5ZjI=", "commit": {"author": {"name": "Tim Robinson", "email": "tim.g.robinson@gmail.com", "date": "2020-03-15T17:38:20Z"}, "committer": {"name": "Tim Robinson", "email": "tim.g.robinson@gmail.com", "date": "2020-03-16T12:21:00Z"}, "message": "Lint for `pub(crate)` items that are not crate visible due to the visibility of the module that contains them\n\nCloses #5274.", "tree": {"sha": "cd1e0e7bb9b957737f46a262c542873a2ac82c79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd1e0e7bb9b957737f46a262c542873a2ac82c79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "html_url": "https://github.com/rust-lang/rust/commit/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/comments", "author": {"login": "1tgr", "id": 91127, "node_id": "MDQ6VXNlcjkxMTI3", "avatar_url": "https://avatars.githubusercontent.com/u/91127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1tgr", "html_url": "https://github.com/1tgr", "followers_url": "https://api.github.com/users/1tgr/followers", "following_url": "https://api.github.com/users/1tgr/following{/other_user}", "gists_url": "https://api.github.com/users/1tgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/1tgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1tgr/subscriptions", "organizations_url": "https://api.github.com/users/1tgr/orgs", "repos_url": "https://api.github.com/users/1tgr/repos", "events_url": "https://api.github.com/users/1tgr/events{/privacy}", "received_events_url": "https://api.github.com/users/1tgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1tgr", "id": 91127, "node_id": "MDQ6VXNlcjkxMTI3", "avatar_url": "https://avatars.githubusercontent.com/u/91127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1tgr", "html_url": "https://github.com/1tgr", "followers_url": "https://api.github.com/users/1tgr/followers", "following_url": "https://api.github.com/users/1tgr/following{/other_user}", "gists_url": "https://api.github.com/users/1tgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/1tgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1tgr/subscriptions", "organizations_url": "https://api.github.com/users/1tgr/orgs", "repos_url": "https://api.github.com/users/1tgr/repos", "events_url": "https://api.github.com/users/1tgr/events{/privacy}", "received_events_url": "https://api.github.com/users/1tgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d556bb73df16f72fc5a169b4fa7d4ce79ecd76a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d556bb73df16f72fc5a169b4fa7d4ce79ecd76a2", "html_url": "https://github.com/rust-lang/rust/commit/d556bb73df16f72fc5a169b4fa7d4ce79ecd76a2"}], "stats": {"total": 334, "additions": 332, "deletions": 2}, "files": [{"sha": "9fa2dcad4a84eb56858fddf566d5ad1eb1a3b52e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "patch": "@@ -1410,6 +1410,7 @@ Released 2018-09-13\n [`redundant_field_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n [`redundant_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern\n [`redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching\n+[`redundant_pub_crate`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate\n [`redundant_static_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro"}, {"sha": "7d6fcbc90986ee68872b9398957983dbf06c6596", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 361 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 362 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "601bbdce7047a1e40d8350aa8a602bd9dda4e165", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "patch": "@@ -284,6 +284,7 @@ pub mod ranges;\n pub mod redundant_clone;\n pub mod redundant_field_names;\n pub mod redundant_pattern_matching;\n+pub mod redundant_pub_crate;\n pub mod redundant_static_lifetimes;\n pub mod reference;\n pub mod regex;\n@@ -744,6 +745,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &redundant_clone::REDUNDANT_CLONE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n+        &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n         &reference::DEREF_ADDROF,\n         &reference::REF_IN_DEREF,\n@@ -1020,6 +1022,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box wildcard_imports::WildcardImports);\n     store.register_early_pass(|| box macro_use::MacroUseImports);\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n+    store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1669,6 +1672,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mutex_atomic::MUTEX_INTEGER),\n         LintId::of(&needless_borrow::NEEDLESS_BORROW),\n         LintId::of(&path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n+        LintId::of(&redundant_pub_crate::REDUNDANT_PUB_CRATE),\n         LintId::of(&use_self::USE_SELF),\n     ]);\n }"}, {"sha": "4c638da80a86787c506b322b77f1acb2047e9182", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "patch": "@@ -0,0 +1,67 @@\n+use crate::utils::span_lint_and_help;\n+use rustc_hir::{Item, ItemKind, VisibilityKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for items declared `pub(crate)` that are not crate visible because they\n+    /// are inside a private module.\n+    ///\n+    /// **Why is this bad?** Writing `pub(crate)` is misleading when it's redundant due to the parent\n+    /// module's visibility.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// mod internal {\n+    ///     pub(crate) fn internal_fn() { }\n+    /// }\n+    /// ```\n+    /// This function is not visible outside the module and it can be declared with `pub` or\n+    /// private visibility\n+    /// ```rust\n+    /// mod internal {\n+    ///     pub fn internal_fn() { }\n+    /// }\n+    /// ```\n+    pub REDUNDANT_PUB_CRATE,\n+    nursery,\n+    \"Using `pub(crate)` visibility on items that are not crate visible due to the visibility of the module that contains them.\"\n+}\n+\n+#[derive(Default)]\n+pub struct RedundantPubCrate {\n+    is_exported: Vec<bool>,\n+}\n+\n+impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantPubCrate {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'tcx>) {\n+        if let VisibilityKind::Crate { .. } = item.vis.node {\n+            if !cx.access_levels.is_exported(item.hir_id) {\n+                if let Some(false) = self.is_exported.last() {\n+                    span_lint_and_help(\n+                        cx,\n+                        REDUNDANT_PUB_CRATE,\n+                        item.span,\n+                        &format!(\"pub(crate) {} inside private module\", item.kind.descr()),\n+                        \"consider using `pub` instead of `pub(crate)`\",\n+                    )\n+                }\n+            }\n+        }\n+\n+        if let ItemKind::Mod { .. } = item.kind {\n+            self.is_exported.push(cx.access_levels.is_exported(item.hir_id));\n+        }\n+    }\n+\n+    fn check_item_post(&mut self, _cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Mod { .. } = item.kind {\n+            self.is_exported.pop().expect(\"unbalanced check_item/check_item_post\");\n+        }\n+    }\n+}"}, {"sha": "29d9c8b76d0847ceb41cd1aa6111b6ed732f6589", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 361] = [\n+pub const ALL_LINTS: [Lint; 362] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1764,6 +1764,13 @@ pub const ALL_LINTS: [Lint; 361] = [\n         deprecation: None,\n         module: \"redundant_pattern_matching\",\n     },\n+    Lint {\n+        name: \"redundant_pub_crate\",\n+        group: \"nursery\",\n+        desc: \"Using `pub(crate)` visibility on items that are not crate visible due to the visibility of the module that contains them.\",\n+        deprecation: None,\n+        module: \"redundant_pub_crate\",\n+    },\n     Lint {\n         name: \"redundant_static_lifetimes\",\n         group: \"style\","}, {"sha": "c747a07dd90f272717beac39993b6e8f5bd3d350", "filename": "tests/ui/redundant_pub_crate.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/tests%2Fui%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/tests%2Fui%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pub_crate.rs?ref=52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "patch": "@@ -0,0 +1,105 @@\n+#![warn(clippy::redundant_pub_crate)]\n+\n+mod m1 {\n+    fn f() {}\n+    pub(crate) fn g() {} // private due to m1\n+    pub fn h() {}\n+\n+    mod m1_1 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m1_1 and m1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m1_2 {\n+        // ^ private due to m1\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m1_2 and m1\n+        pub fn h() {}\n+    }\n+\n+    pub mod m1_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m1\n+        pub fn h() {}\n+    }\n+}\n+\n+pub(crate) mod m2 {\n+    fn f() {}\n+    pub(crate) fn g() {} // already crate visible due to m2\n+    pub fn h() {}\n+\n+    mod m2_1 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m2_1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m2_2 {\n+        // ^ already crate visible due to m2\n+        fn f() {}\n+        pub(crate) fn g() {} // already crate visible due to m2_2 and m2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m2_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // already crate visible due to m2\n+        pub fn h() {}\n+    }\n+}\n+\n+pub mod m3 {\n+    fn f() {}\n+    pub(crate) fn g() {} // ok: m3 is exported\n+    pub fn h() {}\n+\n+    mod m3_1 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m3_1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m3_2 {\n+        // ^ ok\n+        fn f() {}\n+        pub(crate) fn g() {} // already crate visible due to m3_2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m3_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // ok: m3 and m3_3 are exported\n+        pub fn h() {}\n+    }\n+}\n+\n+mod m4 {\n+    fn f() {}\n+    pub(crate) fn g() {} // private: not re-exported by `pub use m4::*`\n+    pub fn h() {}\n+\n+    mod m4_1 {\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m4_1\n+        pub fn h() {}\n+    }\n+\n+    pub(crate) mod m4_2 {\n+        // ^ private: not re-exported by `pub use m4::*`\n+        fn f() {}\n+        pub(crate) fn g() {} // private due to m4_2\n+        pub fn h() {}\n+    }\n+\n+    pub mod m4_3 {\n+        fn f() {}\n+        pub(crate) fn g() {} // ok: m4_3 is re-exported by `pub use m4::*`\n+        pub fn h() {}\n+    }\n+}\n+\n+pub use m4::*;\n+\n+fn main() {}"}, {"sha": "ecc038c7f4ed265b92b8b4641bf48b79e30a7194", "filename": "tests/ui/redundant_pub_crate.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/tests%2Fui%2Fredundant_pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2/tests%2Fui%2Fredundant_pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pub_crate.stderr?ref=52208f3cf3949a4589cbaee69a9cb7d34ee0e9f2", "patch": "@@ -0,0 +1,146 @@\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:5:5\n+   |\n+LL |     pub(crate) fn g() {} // private due to m1\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::redundant-pub-crate` implied by `-D warnings`\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:10:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m1_1 and m1\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) module inside private module\n+  --> $DIR/redundant_pub_crate.rs:14:5\n+   |\n+LL | /     pub(crate) mod m1_2 {\n+LL | |         // ^ private due to m1\n+LL | |         fn f() {}\n+LL | |         pub(crate) fn g() {} // private due to m1_2 and m1\n+LL | |         pub fn h() {}\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:17:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m1_2 and m1\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:23:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m1\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:30:5\n+   |\n+LL |     pub(crate) fn g() {} // already crate visible due to m2\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:35:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m2_1\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) module inside private module\n+  --> $DIR/redundant_pub_crate.rs:39:5\n+   |\n+LL | /     pub(crate) mod m2_2 {\n+LL | |         // ^ already crate visible due to m2\n+LL | |         fn f() {}\n+LL | |         pub(crate) fn g() {} // already crate visible due to m2_2 and m2\n+LL | |         pub fn h() {}\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:42:9\n+   |\n+LL |         pub(crate) fn g() {} // already crate visible due to m2_2 and m2\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:48:9\n+   |\n+LL |         pub(crate) fn g() {} // already crate visible due to m2\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:60:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m3_1\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:67:9\n+   |\n+LL |         pub(crate) fn g() {} // already crate visible due to m3_2\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:80:5\n+   |\n+LL |     pub(crate) fn g() {} // private: not re-exported by `pub use m4::*`\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:85:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m4_1\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) module inside private module\n+  --> $DIR/redundant_pub_crate.rs:89:5\n+   |\n+LL | /     pub(crate) mod m4_2 {\n+LL | |         // ^ private: not re-exported by `pub use m4::*`\n+LL | |         fn f() {}\n+LL | |         pub(crate) fn g() {} // private due to m4_2\n+LL | |         pub fn h() {}\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: pub(crate) function inside private module\n+  --> $DIR/redundant_pub_crate.rs:92:9\n+   |\n+LL |         pub(crate) fn g() {} // private due to m4_2\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `pub` instead of `pub(crate)`\n+\n+error: aborting due to 16 previous errors\n+"}]}