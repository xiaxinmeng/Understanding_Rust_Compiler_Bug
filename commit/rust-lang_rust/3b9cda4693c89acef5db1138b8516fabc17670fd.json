{"sha": "3b9cda4693c89acef5db1138b8516fabc17670fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiOWNkYTQ2OTNjODlhY2VmNWRiMTEzOGI4NTE2ZmFiYzE3NjcwZmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-03T11:45:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-03T11:45:15Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>", "tree": {"sha": "f95c64e5a30093ebde991bcf0f7960437e7a26b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95c64e5a30093ebde991bcf0f7960437e7a26b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b9cda4693c89acef5db1138b8516fabc17670fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRXPLCRBK7hj4Ov3rIwAAdHIIACp8NF9UydralRxZeINreKz+\nUWda/K2Vg5nBMZhg4EuGxgU/Sl/0nv+AiNav7XBZwpXI4NLl8c88O1QqHTNTVFKn\nrPlX/rtgjfwF488CK/DsbB4NV0wMVkImcXXiOXf5oA3wPw9kiGZZWQuPlVkP64tZ\nnjibCJoYg0hBg70tor4Ptj8rVMLIcXkKmZPSbHbBeX4VbHdayWSOcA4K4JatqntK\nEaW500b7y8BfXciHHh504INnId7N8HVT1iDCl9w/hldMY5S69Sdckp/NOCMtJAyO\nQiD2yUnJaQzVudsFdGiZM0M5H1s0qfbyEF4L2OWo6suPeUppFURQ5sLHr9bIG8Q=\n=G5Pc\n-----END PGP SIGNATURE-----\n", "payload": "tree f95c64e5a30093ebde991bcf0f7960437e7a26b1\nparent f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6\nauthor Ralf Jung <post@ralfj.de> 1564832715 +0200\ncommitter GitHub <noreply@github.com> 1564832715 +0200\n\nApply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9cda4693c89acef5db1138b8516fabc17670fd", "html_url": "https://github.com/rust-lang/rust/commit/3b9cda4693c89acef5db1138b8516fabc17670fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b9cda4693c89acef5db1138b8516fabc17670fd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6", "html_url": "https://github.com/rust-lang/rust/commit/f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "9d16d34815945eedc38a065279dd64c2472d2ea4", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cda4693c89acef5db1138b8516fabc17670fd/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cda4693c89acef5db1138b8516fabc17670fd/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=3b9cda4693c89acef5db1138b8516fabc17670fd", "patch": "@@ -293,11 +293,12 @@ impl<T> [T] {\n     /// checking.\n     ///\n     /// This is generally not recommended, use with caution!\n-    /// Calling this method with an out-of-bounds index is UB even if the resulting\n-    /// reference is not used.\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used.\n     /// For a safe alternative see [`get`].\n     ///\n     /// [`get`]: #method.get\n+    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n     ///\n@@ -320,11 +321,12 @@ impl<T> [T] {\n     /// bounds checking.\n     ///\n     /// This is generally not recommended, use with caution!\n-    /// Calling this method with an out-of-bounds index is UB even if the resulting\n-    /// reference is not used.\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used.\n     /// For a safe alternative see [`get_mut`].\n     ///\n     /// [`get_mut`]: #method.get_mut\n+    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n     ///\n@@ -2633,15 +2635,17 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n \n     /// Returns a shared reference to the output at this location, without\n     /// performing any bounds checking.\n-    /// Calling this method with an out-of-bounds index is UB even if the resulting\n-    /// reference is not used.\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used.\n+    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, without\n     /// performing any bounds checking.\n-    /// Calling this method with an out-of-bounds index is UB even if the resulting\n-    /// reference is not used.\n+    /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n+    /// even if the resulting reference is not used.\n+    /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;\n "}]}