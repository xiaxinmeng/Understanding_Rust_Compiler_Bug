{"sha": "dee85a391f091f314a24fb5a090f2e528f4eb81c", "node_id": "C_kwDOAAsO6NoAKGRlZTg1YTM5MWYwOTFmMzE0YTI0ZmI1YTA5MGYyZTUyOGY0ZWI4MWM", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-25T21:33:13Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-25T21:34:12Z"}, "message": "add start_stmt to handle postfix increment", "tree": {"sha": "f9d5f962fd9017c1df4de37d7f348d7f3cf3bd72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d5f962fd9017c1df4de37d7f348d7f3cf3bd72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee85a391f091f314a24fb5a090f2e528f4eb81c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee85a391f091f314a24fb5a090f2e528f4eb81c", "html_url": "https://github.com/rust-lang/rust/commit/dee85a391f091f314a24fb5a090f2e528f4eb81c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee85a391f091f314a24fb5a090f2e528f4eb81c/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c11a53f9ccb4040995b9e054b093a47fef29cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c11a53f9ccb4040995b9e054b093a47fef29cc1", "html_url": "https://github.com/rust-lang/rust/commit/7c11a53f9ccb4040995b9e054b093a47fef29cc1"}], "stats": {"total": 241, "additions": 203, "deletions": 38}, "files": [{"sha": "f8c6ff994c4a0682d2b65caa4b2075a80344765b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "patch": "@@ -1259,10 +1259,9 @@ impl<'a> Parser<'a> {\n         &mut self,\n         operand_expr: P<Expr>,\n         op_span: Span,\n-        prev_is_semi: bool,\n+        start_stmt: bool,\n     ) -> PResult<'a, P<Expr>> {\n-        let standalone =\n-            if prev_is_semi { IsStandalone::Standalone } else { IsStandalone::Subexpr };\n+        let standalone = if start_stmt { IsStandalone::Standalone } else { IsStandalone::Subexpr };\n         let kind = IncDecRecovery { standalone, op: IncOrDec::Inc, fixity: UnaryFixity::Pre };\n         self.recover_from_inc_dec(operand_expr, kind, op_span)\n     }\n@@ -1271,10 +1270,10 @@ impl<'a> Parser<'a> {\n         &mut self,\n         operand_expr: P<Expr>,\n         op_span: Span,\n-        prev_is_semi: bool,\n+        start_stmt: bool,\n     ) -> PResult<'a, P<Expr>> {\n         let kind = IncDecRecovery {\n-            standalone: if prev_is_semi { IsStandalone::Standalone } else { IsStandalone::Subexpr },\n+            standalone: if start_stmt { IsStandalone::Standalone } else { IsStandalone::Subexpr },\n             op: IncOrDec::Inc,\n             fixity: UnaryFixity::Post,\n         };\n@@ -1305,20 +1304,22 @@ impl<'a> Parser<'a> {\n             UnaryFixity::Post => (base.span.shrink_to_lo(), op_span),\n         };\n \n-        let Ok(base_src) = self.span_to_snippet(base.span)\n-        else { return help_base_case(err, base) };\n         match kind.standalone {\n             IsStandalone::Standalone => {\n                 self.inc_dec_standalone_suggest(kind, spans).emit_verbose(&mut err)\n             }\n-            IsStandalone::Subexpr => match kind.fixity {\n-                UnaryFixity::Pre => {\n-                    self.prefix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n-                }\n-                UnaryFixity::Post => {\n-                    self.postfix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+            IsStandalone::Subexpr => {\n+                let Ok(base_src) = self.span_to_snippet(base.span)\n+                else { return help_base_case(err, base) };\n+                match kind.fixity {\n+                    UnaryFixity::Pre => {\n+                        self.prefix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+                    }\n+                    UnaryFixity::Post => {\n+                        self.postfix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+                    }\n                 }\n-            },\n+            }\n         }\n         Err(err)\n     }"}, {"sha": "36fe328cb193da94f0c92bac3b68aa26f1f3a8f0", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "patch": "@@ -83,7 +83,7 @@ macro_rules! maybe_whole_expr {\n pub(super) enum LhsExpr {\n     NotYetParsed,\n     AttributesParsed(AttrWrapper),\n-    AlreadyParsed(P<Expr>),\n+    AlreadyParsed(P<Expr>, bool), // (expr, starts_statement)\n }\n \n impl From<Option<AttrWrapper>> for LhsExpr {\n@@ -101,7 +101,7 @@ impl From<P<Expr>> for LhsExpr {\n     ///\n     /// This conversion does not allocate.\n     fn from(expr: P<Expr>) -> Self {\n-        LhsExpr::AlreadyParsed(expr)\n+        LhsExpr::AlreadyParsed(expr, false)\n     }\n }\n \n@@ -173,7 +173,9 @@ impl<'a> Parser<'a> {\n         min_prec: usize,\n         lhs: LhsExpr,\n     ) -> PResult<'a, P<Expr>> {\n-        let mut lhs = if let LhsExpr::AlreadyParsed(expr) = lhs {\n+        let mut starts_stmt = false;\n+        let mut lhs = if let LhsExpr::AlreadyParsed(expr, starts_statement) = lhs {\n+            starts_stmt = starts_statement;\n             expr\n         } else {\n             let attrs = match lhs {\n@@ -292,15 +294,7 @@ impl<'a> Parser<'a> {\n                 let op_span = self.prev_token.span.to(self.token.span);\n                 // Eat the second `+`\n                 self.bump();\n-                let prev_is_semi = {\n-                    if let Ok(prev_code) = self.sess.source_map().span_to_prev_source(lhs.span) &&\n-                          prev_code.trim_end().ends_with(\";\") {\n-                            true\n-                    } else {\n-                        false\n-                    }\n-                };\n-                lhs = self.recover_from_postfix_increment(lhs, op_span, prev_is_semi)?;\n+                lhs = self.recover_from_postfix_increment(lhs, op_span, starts_stmt)?;\n                 continue;\n             }\n \n@@ -607,14 +601,15 @@ impl<'a> Parser<'a> {\n             token::BinOp(token::Plus)\n                 if this.look_ahead(1, |t| *t == token::BinOp(token::Plus)) =>\n             {\n-                let prev_is_semi = this.prev_token == token::Semi;\n+                let starts_stmt = this.prev_token == token::Semi\n+                    || this.prev_token == token::CloseDelim(Delimiter::Brace);\n                 let pre_span = this.token.span.to(this.look_ahead(1, |t| t.span));\n                 // Eat both `+`s.\n                 this.bump();\n                 this.bump();\n \n                 let operand_expr = this.parse_dot_or_call_expr(Default::default())?;\n-                this.recover_from_prefix_increment(operand_expr, pre_span, prev_is_semi)\n+                this.recover_from_prefix_increment(operand_expr, pre_span, starts_stmt)\n             }\n             token::Ident(..) if this.token.is_keyword(kw::Box) => {\n                 make_it!(this, attrs, |this, _| this.parse_box_expr(lo))"}, {"sha": "53aa0315151c48d712aa74e6905488af44aa701d", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "patch": "@@ -156,7 +156,7 @@ impl<'a> Parser<'a> {\n             // Perform this outside of the `collect_tokens_trailing_token` closure,\n             // since our outer attributes do not apply to this part of the expression\n             let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n-                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr))\n+                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr, true))\n             })?;\n             Ok(self.mk_stmt(lo.to(self.prev_token.span), StmtKind::Expr(expr)))\n         } else {\n@@ -190,7 +190,7 @@ impl<'a> Parser<'a> {\n             let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac));\n             let e = self.maybe_recover_from_bad_qpath(e)?;\n             let e = self.parse_dot_or_call_expr_with(e, lo, attrs)?;\n-            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n+            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e, false))?;\n             StmtKind::Expr(e)\n         };\n         Ok(self.mk_stmt(lo.to(hi), kind))"}, {"sha": "580ebaf5dbb13d1d87a19fdba2169490bf7a0ac7", "filename": "src/test/ui/parser/increment-autofix-2.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.fixed?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "previous_filename": "src/test/ui/parser/increment-notfixed.fixed"}, {"sha": "ebe5fa6ca1e768cbc316e73d7e12511d1a1aab43", "filename": "src/test/ui/parser/increment-autofix-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.rs?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "previous_filename": "src/test/ui/parser/increment-notfixed.rs"}, {"sha": "11e985480d69743f0e7e382decc0cd743d922da3", "filename": "src/test/ui/parser/increment-autofix-2.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix-2.stderr?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "patch": "@@ -1,5 +1,5 @@\n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:13:6\n+  --> $DIR/increment-autofix-2.rs:13:6\n    |\n LL |     i++;\n    |      ^^ not a valid postfix operator\n@@ -10,7 +10,7 @@ LL |     i += 1;\n    |       ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:19:12\n+  --> $DIR/increment-autofix-2.rs:19:12\n    |\n LL |     while i++ < 5 {\n    |     -----  ^^ not a valid postfix operator\n@@ -23,7 +23,7 @@ LL |     while { let tmp = i; i += 1; tmp } < 5 {\n    |           +++++++++++  ~~~~~~~~~~~~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:27:8\n+  --> $DIR/increment-autofix-2.rs:27:8\n    |\n LL |     tmp++;\n    |        ^^ not a valid postfix operator\n@@ -34,7 +34,7 @@ LL |     tmp += 1;\n    |         ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:33:14\n+  --> $DIR/increment-autofix-2.rs:33:14\n    |\n LL |     while tmp++ < 5 {\n    |     -----    ^^ not a valid postfix operator\n@@ -47,7 +47,7 @@ LL |     while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n    |           ++++++++++++    ~~~~~~~~~~~~~~~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:41:16\n+  --> $DIR/increment-autofix-2.rs:41:16\n    |\n LL |     foo.bar.qux++;\n    |                ^^ not a valid postfix operator\n@@ -58,7 +58,7 @@ LL |     foo.bar.qux += 1;\n    |                 ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:51:10\n+  --> $DIR/increment-autofix-2.rs:51:10\n    |\n LL |     s.tmp++;\n    |          ^^ not a valid postfix operator\n@@ -69,7 +69,7 @@ LL |     s.tmp += 1;\n    |           ~~~~\n \n error: Rust has no prefix increment operator\n-  --> $DIR/increment-notfixed.rs:58:5\n+  --> $DIR/increment-autofix-2.rs:58:5\n    |\n LL |     ++foo.bar.qux;\n    |     ^^ not a valid prefix operator", "previous_filename": "src/test/ui/parser/increment-notfixed.stderr"}, {"sha": "e64dfbcdc287ae7dc632cc417119510338301a74", "filename": "src/test/ui/parser/issue-104867-inc-dec-2.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.rs?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "patch": "@@ -0,0 +1,41 @@\n+fn test1() {\n+    let mut i = 0;\n+    let _ = i + ++i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test2() {\n+    let mut i = 0;\n+    let _ = ++i + i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test3() {\n+    let mut i = 0;\n+    let _ = ++i + ++i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test4() {\n+    let mut i = 0;\n+    let _ = i + i++; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test5() {\n+    let mut i = 0;\n+    let _ = i++ + i; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test6() {\n+    let mut i = 0;\n+    let _ = i++ + i++; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test7() {\n+    let mut i = 0;\n+    let _ = ++i + i++; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test8() {\n+    let mut i = 0;\n+    let _ = i++ + ++i; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn main() { }"}, {"sha": "21cfa4e8b78bf757bfeefcd3b063292192d9c7cb", "filename": "src/test/ui/parser/issue-104867-inc-dec-2.stderr", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec-2.stderr?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "patch": "@@ -0,0 +1,90 @@\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:3:17\n+   |\n+LL |     let _ = i + ++i;\n+   |                 ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = i + { i += 1; i };\n+   |                 ~   +++++++++\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:8:13\n+   |\n+LL |     let _ = ++i + i;\n+   |             ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { i += 1; i } + i;\n+   |             ~   +++++++++\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:13:13\n+   |\n+LL |     let _ = ++i + ++i;\n+   |             ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { i += 1; i } + ++i;\n+   |             ~   +++++++++\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:18:18\n+   |\n+LL |     let _ = i + i++;\n+   |                  ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { let tmp = i + i; i + i += 1; tmp };\n+   |             +++++++++++      ~~~~~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:23:14\n+   |\n+LL |     let _ = i++ + i;\n+   |              ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { let tmp = i; i += 1; tmp } + i;\n+   |             +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:28:14\n+   |\n+LL |     let _ = i++ + i++;\n+   |              ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { let tmp = i; i += 1; tmp } + i++;\n+   |             +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:33:13\n+   |\n+LL |     let _ = ++i + i++;\n+   |             ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { i += 1; i } + i++;\n+   |             ~   +++++++++\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec-2.rs:38:14\n+   |\n+LL |     let _ = i++ + ++i;\n+   |              ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     let _ = { let tmp = i; i += 1; tmp } + ++i;\n+   |             +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "760c67b4bed70ca39a22ccb2778125610f187142", "filename": "src/test/ui/parser/issue-104867-inc-dec.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "patch": "@@ -27,4 +27,19 @@ fn test5() {\n     if ++i == 1 { } //~ ERROR Rust has no prefix increment operator\n }\n \n+fn test6() {\n+    let mut i = 0;\n+    loop { break; }\n+    i++; //~ ERROR Rust has no postfix increment operator\n+    loop { break; }\n+    ++i;\n+}\n+\n+fn test7() {\n+    let mut i = 0;\n+    loop { break; }\n+    ++i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+\n fn main() {}"}, {"sha": "78bfd3e82f0deb6d96e01fc9c081fc635a98bb40", "filename": "src/test/ui/parser/issue-104867-inc-dec.stderr", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dee85a391f091f314a24fb5a090f2e528f4eb81c/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr?ref=dee85a391f091f314a24fb5a090f2e528f4eb81c", "patch": "@@ -54,5 +54,28 @@ help: use `+= 1` instead\n LL |     if { i += 1; i } == 1 { }\n    |        ~   +++++++++\n \n-error: aborting due to 5 previous errors\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:33:6\n+   |\n+LL |     i++;\n+   |      ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     i += 1;\n+   |       ~~~~\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:41:5\n+   |\n+LL |     ++i;\n+   |     ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL -     ++i;\n+LL +     i += 1;\n+   |\n+\n+error: aborting due to 7 previous errors\n "}]}