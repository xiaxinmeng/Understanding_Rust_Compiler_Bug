{"sha": "d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNzJiYzA5YTdlMmJkMGNkMmI5MjA3NzIwYmQ5NGFkOTNmNWExMGI=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-09-03T04:43:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T18:33:23Z"}, "message": "Demode libstd/net_url.rs", "tree": {"sha": "e43a6b86830cb49a2f3e05dd7a40dcfb5276c29b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43a6b86830cb49a2f3e05dd7a40dcfb5276c29b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b", "html_url": "https://github.com/rust-lang/rust/commit/d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c8b0c60062a60f6f2022e5639147ac372b1d582", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c8b0c60062a60f6f2022e5639147ac372b1d582", "html_url": "https://github.com/rust-lang/rust/commit/9c8b0c60062a60f6f2022e5639147ac372b1d582"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "855608a8fdfe928620ebf081a4312efca34238a2", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b", "patch": "@@ -1,4 +1,6 @@\n //! Types/fns concerning URLs (see RFC 3986)\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;\n use map::{hashmap, str_hash};\n@@ -34,15 +36,16 @@ type UserInfo = {\n \n type Query = ~[(~str, ~str)];\n \n-fn Url(-scheme: ~str, -user: Option<UserInfo>, -host: ~str,\n-       -port: Option<~str>, -path: ~str, -query: Query,\n-       -fragment: Option<~str>) -> Url {\n-    Url { scheme: scheme, user: user, host: host, port: port,\n-     path: path, query: query, fragment: fragment }\n+fn Url(+scheme: ~str, +user: Option<UserInfo>, +host: ~str,\n+       +port: Option<~str>, +path: ~str, +query: Query,\n+       +fragment: Option<~str>) -> Url {\n+    Url { scheme: move scheme, user: move user, host: move host,\n+         port: move port, path: move path, query: move query,\n+         fragment: move fragment }\n }\n \n-fn UserInfo(-user: ~str, -pass: Option<~str>) -> UserInfo {\n-    {user: user, pass: pass}\n+fn UserInfo(+user: ~str, +pass: Option<~str>) -> UserInfo {\n+    {user: move user, pass: move pass}\n }\n \n fn encode_inner(s: &str, full_url: bool) -> ~str {\n@@ -104,7 +107,7 @@ fn encode_component(s: &str) -> ~str {\n     encode_inner(s, false)\n }\n \n-fn decode_inner(s: ~str, full_url: bool) -> ~str {\n+fn decode_inner(s: &str, full_url: bool) -> ~str {\n     do io::with_str_reader(s) |rdr| {\n         let mut out = ~\"\";\n \n@@ -147,18 +150,18 @@ fn decode_inner(s: ~str, full_url: bool) -> ~str {\n  *\n  * This will only decode escape sequences generated by encode_uri.\n  */\n-fn decode(s: ~str) -> ~str {\n+fn decode(s: &str) -> ~str {\n     decode_inner(s, true)\n }\n \n /**\n  * Decode a string encoded with percent encoding.\n  */\n-fn decode_component(s: ~str) -> ~str {\n+fn decode_component(s: &str) -> ~str {\n     decode_inner(s, false)\n }\n \n-fn encode_plus(s: ~str) -> ~str {\n+fn encode_plus(s: &str) -> ~str {\n     do io::with_str_reader(s) |rdr| {\n         let mut out = ~\"\";\n \n@@ -269,7 +272,7 @@ fn decode_form_urlencoded(s: ~[u8]) ->\n }\n \n \n-fn split_char_first(s: ~str, c: char) -> (~str, ~str) {\n+fn split_char_first(s: &str, c: char) -> (~str, ~str) {\n     let len = str::len(s);\n     let mut index = len;\n     let mut mat = 0;\n@@ -293,7 +296,7 @@ fn split_char_first(s: ~str, c: char) -> (~str, ~str) {\n     }\n }\n \n-fn userinfo_from_str(uinfo: ~str) -> UserInfo {\n+fn userinfo_from_str(uinfo: &str) -> UserInfo {\n     let (user, p) = split_char_first(uinfo, ':');\n     let pass = if str::len(p) == 0 {\n         option::None\n@@ -303,7 +306,7 @@ fn userinfo_from_str(uinfo: ~str) -> UserInfo {\n     return UserInfo(user, pass);\n }\n \n-fn userinfo_to_str(-userinfo: UserInfo) -> ~str {\n+fn userinfo_to_str(+userinfo: UserInfo) -> ~str {\n     if option::is_some(userinfo.pass) {\n         return str::concat(~[copy userinfo.user, ~\":\",\n                           option::unwrap(copy userinfo.pass),\n@@ -319,7 +322,7 @@ impl UserInfo : Eq {\n     }\n }\n \n-fn query_from_str(rawquery: ~str) -> Query {\n+fn query_from_str(rawquery: &str) -> Query {\n     let mut query: Query = ~[];\n     if str::len(rawquery) != 0 {\n         for str::split_char(rawquery, '&').each |p| {\n@@ -330,7 +333,7 @@ fn query_from_str(rawquery: ~str) -> Query {\n     return query;\n }\n \n-fn query_to_str(query: Query) -> ~str {\n+fn query_to_str(+query: Query) -> ~str {\n     let mut strvec = ~[];\n     for query.each |kv| {\n         let (k, v) = copy kv;\n@@ -676,7 +679,7 @@ impl Url : FromStr {\n  * result in just \"http://somehost.com\".\n  *\n  */\n-fn to_str(url: Url) -> ~str {\n+fn to_str(+url: Url) -> ~str {\n     let user = if option::is_some(url.user) {\n       userinfo_to_str(option::unwrap(copy url.user))\n     } else {"}]}