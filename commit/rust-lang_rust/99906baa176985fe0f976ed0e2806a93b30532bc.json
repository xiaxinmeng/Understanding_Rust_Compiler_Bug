{"sha": "99906baa176985fe0f976ed0e2806a93b30532bc", "node_id": "C_kwDOAAsO6NoAKDk5OTA2YmFhMTc2OTg1ZmUwZjk3NmVkMGUyODA2YTkzYjMwNTMyYmM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-17T10:58:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-17T11:07:49Z"}, "message": "Fix clippy attribute completions always prefixing with `clippy::`", "tree": {"sha": "7a2fb8c25c31262f5fec74eef31fe97e0725ffc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a2fb8c25c31262f5fec74eef31fe97e0725ffc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99906baa176985fe0f976ed0e2806a93b30532bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99906baa176985fe0f976ed0e2806a93b30532bc", "html_url": "https://github.com/rust-lang/rust/commit/99906baa176985fe0f976ed0e2806a93b30532bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99906baa176985fe0f976ed0e2806a93b30532bc/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce47d131010f7e91d76f4de2fd9e69a920bbcf23", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce47d131010f7e91d76f4de2fd9e69a920bbcf23", "html_url": "https://github.com/rust-lang/rust/commit/ce47d131010f7e91d76f4de2fd9e69a920bbcf23"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "4f7930d0dd9da827aa541d08a3017377e910e830", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99906baa176985fe0f976ed0e2806a93b30532bc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99906baa176985fe0f976ed0e2806a93b30532bc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=99906baa176985fe0f976ed0e2806a93b30532bc", "patch": "@@ -1,6 +1,6 @@\n //! Completion for lints\n use ide_db::helpers::generated_lints::Lint;\n-use syntax::ast;\n+use syntax::{ast, T};\n \n use crate::{\n     context::CompletionContext,\n@@ -16,7 +16,7 @@ pub(super) fn complete_lint(\n ) {\n     if let Some(existing_lints) = super::parse_comma_sep_paths(derive_input) {\n         for &Lint { label, description } in lints_completions {\n-            let (ex_q, ex_name) = {\n+            let (qual, name) = {\n                 // FIXME: change `Lint`'s label to not store a path in it but split the prefix off instead?\n                 let mut parts = label.split(\"::\");\n                 let ns_or_label = match parts.next() {\n@@ -29,7 +29,7 @@ pub(super) fn complete_lint(\n                     None => (None, ns_or_label),\n                 }\n             };\n-            let repr_already_annotated = existing_lints\n+            let lint_already_annotated = existing_lints\n                 .iter()\n                 .filter_map(|path| {\n                     let q = path.qualifier();\n@@ -38,21 +38,26 @@ pub(super) fn complete_lint(\n                     }\n                     Some((q.and_then(|it| it.as_single_name_ref()), path.segment()?.name_ref()?))\n                 })\n-                .any(|(q, name)| {\n-                    let qualifier_matches = match (q, ex_q) {\n+                .any(|(q, name_ref)| {\n+                    let qualifier_matches = match (q, qual) {\n                         (None, None) => true,\n                         (None, Some(_)) => false,\n                         (Some(_), None) => false,\n                         (Some(q), Some(ns)) => q.text() == ns,\n                     };\n-                    qualifier_matches && name.text() == ex_name\n+                    qualifier_matches && name_ref.text() == name\n                 });\n-            if repr_already_annotated {\n+            if lint_already_annotated {\n                 continue;\n             }\n+            let insert = match qual {\n+                Some(qual) if !ctx.previous_token_is(T![:]) => format!(\"{}::{}\", qual, name),\n+                _ => name.to_owned(),\n+            };\n             let mut item =\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), ex_name);\n+                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n             item.kind(CompletionItemKind::Attribute)\n+                .insert_text(insert)\n                 .documentation(hir::Documentation::new(description.to_owned()));\n             item.add_to(acc)\n         }"}, {"sha": "9a12b8571c73595cd50841d795691bfdb14706fa", "filename": "crates/ide_completion/src/completions/attribute/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99906baa176985fe0f976ed0e2806a93b30532bc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99906baa176985fe0f976ed0e2806a93b30532bc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs?ref=99906baa176985fe0f976ed0e2806a93b30532bc", "patch": "@@ -23,7 +23,7 @@ pub(super) fn complete_repr(acc: &mut Completions, ctx: &CompletionContext, inpu\n                 })\n                 .any(|it| {\n                     let text = it.text();\n-                    label == text || collides.contains(&text.as_str())\n+                    lookup.unwrap_or(label) == text || collides.contains(&text.as_str())\n                 });\n             if repr_already_annotated {\n                 continue;"}, {"sha": "9d22bb196bd664ae773aefd29caf63dc1f828540", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99906baa176985fe0f976ed0e2806a93b30532bc/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99906baa176985fe0f976ed0e2806a93b30532bc/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=99906baa176985fe0f976ed0e2806a93b30532bc", "patch": "@@ -692,6 +692,24 @@ mod lint {\n             r#\"#[feature(box_syntax)] struct Test;\"#,\n         )\n     }\n+\n+    #[test]\n+    fn lint_clippy_unqualified() {\n+        check_edit(\n+            \"clippy::as_conversions\",\n+            r#\"#[allow($0)] struct Test;\"#,\n+            r#\"#[allow(clippy::as_conversions)] struct Test;\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn lint_clippy_qualified() {\n+        check_edit(\n+            \"clippy::as_conversions\",\n+            r#\"#[allow(clippy::$0)] struct Test;\"#,\n+            r#\"#[allow(clippy::as_conversions)] struct Test;\"#,\n+        );\n+    }\n }\n \n mod repr {\n@@ -742,7 +760,6 @@ mod repr {\n         check_repr(\n             r#\"#[repr(align(1), $0)] struct Test;\"#,\n             expect![[r#\"\n-            at align($0)\n             at transparent\n             at C\n             at u8"}, {"sha": "3866c178f8c109a928e81b5e1092dca9a8400326", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99906baa176985fe0f976ed0e2806a93b30532bc/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99906baa176985fe0f976ed0e2806a93b30532bc/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=99906baa176985fe0f976ed0e2806a93b30532bc", "patch": "@@ -192,6 +192,8 @@ fn deny_clippy(path: &Path, text: &str) {\n         \"ide_db/src/helpers/generated_lints.rs\",\n         // The tests test clippy lint hovers\n         \"ide/src/hover/tests.rs\",\n+        // The tests test clippy lint completions\n+        \"ide_completion/src/tests/attribute.rs\",\n     ];\n     if ignore.iter().any(|p| path.ends_with(p)) {\n         return;"}]}