{"sha": "bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc", "node_id": "C_kwDOAAsO6NoAKGJkOGI0YjljMTU4OGYwYzY4MTE2MmVhZDM0Y2M5MWIzZjlhNTJiZmM", "commit": {"author": {"name": "Rain", "email": "rain@sunshowers.io", "date": "2022-08-20T01:24:21Z"}, "committer": {"name": "Rain", "email": "rain@sunshowers.io", "date": "2022-08-29T02:31:09Z"}, "message": "Use posix_spawn for absolute paths on macOS\n\nCurrently, on macOS, Rust never uses the fast posix_spawn path if a\ndirectory change is requested due to a bug in Apple's libc. However, the\nbug is only triggered if the program is a relative path.\n\nThis PR makes it so that the fast path continues to work if the program\nis an absolute path or a lone filename.\n\nThis was an alternative proposed in\nhttps://github.com/rust-lang/rust/pull/80537#issue-776674009, and it\nmakes a measurable performance difference in some of my code that spawns\nthousands of processes.", "tree": {"sha": "430ce7b689a015dc36c2f1cc4fe731a162ff4a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/430ce7b689a015dc36c2f1cc4fe731a162ff4a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc", "html_url": "https://github.com/rust-lang/rust/commit/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc/comments", "author": {"login": "sunshowers", "id": 180618, "node_id": "MDQ6VXNlcjE4MDYxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/180618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunshowers", "html_url": "https://github.com/sunshowers", "followers_url": "https://api.github.com/users/sunshowers/followers", "following_url": "https://api.github.com/users/sunshowers/following{/other_user}", "gists_url": "https://api.github.com/users/sunshowers/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunshowers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunshowers/subscriptions", "organizations_url": "https://api.github.com/users/sunshowers/orgs", "repos_url": "https://api.github.com/users/sunshowers/repos", "events_url": "https://api.github.com/users/sunshowers/events{/privacy}", "received_events_url": "https://api.github.com/users/sunshowers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunshowers", "id": 180618, "node_id": "MDQ6VXNlcjE4MDYxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/180618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunshowers", "html_url": "https://github.com/sunshowers", "followers_url": "https://api.github.com/users/sunshowers/followers", "following_url": "https://api.github.com/users/sunshowers/following{/other_user}", "gists_url": "https://api.github.com/users/sunshowers/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunshowers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunshowers/subscriptions", "organizations_url": "https://api.github.com/users/sunshowers/orgs", "repos_url": "https://api.github.com/users/sunshowers/repos", "events_url": "https://api.github.com/users/sunshowers/events{/privacy}", "received_events_url": "https://api.github.com/users/sunshowers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea4efd0656599f824e2567a5b7a95454f701c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea4efd0656599f824e2567a5b7a95454f701c03", "html_url": "https://github.com/rust-lang/rust/commit/1ea4efd0656599f824e2567a5b7a95454f701c03"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "2834ee0ace8352dc78f801728358944e50bb26a0", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc", "patch": "@@ -92,6 +92,7 @@ pub struct Command {\n     argv: Argv,\n     env: CommandEnv,\n \n+    program_kind: ProgramKind,\n     cwd: Option<CString>,\n     uid: Option<uid_t>,\n     gid: Option<gid_t>,\n@@ -148,15 +149,40 @@ pub enum Stdio {\n     Fd(FileDesc),\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub enum ProgramKind {\n+    /// A program that would be looked up on the PATH (e.g. `ls`)\n+    PathLookup,\n+    /// A relative path (e.g. `my-dir/foo`, `../foo`, `./foo`)\n+    Relative,\n+    /// An absolute path.\n+    Absolute,\n+}\n+\n+impl ProgramKind {\n+    fn new(program: &OsStr) -> Self {\n+        if program.bytes().starts_with(b\"/\") {\n+            Self::Absolute\n+        } else if program.bytes().contains(&b'/') {\n+            // If the program has more than one component in it, it is a relative path.\n+            Self::Relative\n+        } else {\n+            Self::PathLookup\n+        }\n+    }\n+}\n+\n impl Command {\n     #[cfg(not(target_os = \"linux\"))]\n     pub fn new(program: &OsStr) -> Command {\n         let mut saw_nul = false;\n+        let program_kind = ProgramKind::new(program.as_ref());\n         let program = os2c(program, &mut saw_nul);\n         Command {\n             argv: Argv(vec![program.as_ptr(), ptr::null()]),\n             args: vec![program.clone()],\n             program,\n+            program_kind,\n             env: Default::default(),\n             cwd: None,\n             uid: None,\n@@ -174,11 +200,13 @@ impl Command {\n     #[cfg(target_os = \"linux\")]\n     pub fn new(program: &OsStr) -> Command {\n         let mut saw_nul = false;\n+        let program_kind = ProgramKind::new(program.as_ref());\n         let program = os2c(program, &mut saw_nul);\n         Command {\n             argv: Argv(vec![program.as_ptr(), ptr::null()]),\n             args: vec![program.clone()],\n             program,\n+            program_kind,\n             env: Default::default(),\n             cwd: None,\n             uid: None,\n@@ -254,6 +282,11 @@ impl Command {\n         OsStr::from_bytes(self.program.as_bytes())\n     }\n \n+    #[allow(dead_code)]\n+    pub fn get_program_kind(&self) -> ProgramKind {\n+        self.program_kind\n+    }\n+\n     pub fn get_args(&self) -> CommandArgs<'_> {\n         let mut iter = self.args.iter();\n         iter.next();"}, {"sha": "d176b3401c03c0d65afb2d07a37e11765fff0c54", "filename": "library/std/src/sys/unix/process/process_common/tests.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs?ref=bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc", "patch": "@@ -122,3 +122,27 @@ fn test_process_group_no_posix_spawn() {\n         t!(cat.wait());\n     }\n }\n+\n+#[test]\n+fn test_program_kind() {\n+    let vectors = &[\n+        (\"foo\", ProgramKind::PathLookup),\n+        (\"foo.out\", ProgramKind::PathLookup),\n+        (\"./foo\", ProgramKind::Relative),\n+        (\"../foo\", ProgramKind::Relative),\n+        (\"dir/foo\", ProgramKind::Relative),\n+        // Note that paths on Unix can't contain / in them, so this is actually the directory \"fo\\\\\"\n+        // followed by the file \"o\".\n+        (\"fo\\\\/o\", ProgramKind::Relative),\n+        (\"/foo\", ProgramKind::Absolute),\n+        (\"/dir/../foo\", ProgramKind::Absolute),\n+    ];\n+\n+    for (program, expected_kind) in vectors {\n+        assert_eq!(\n+            ProgramKind::new(program.as_ref()),\n+            *expected_kind,\n+            \"actual != expected program kind for input {program}\",\n+        );\n+    }\n+}"}, {"sha": "26ae62817713e3f213afa7ccc99cfee5110344d3", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=bd8b4b9c1588f0c681162ead34cc91b3f9a52bfc", "patch": "@@ -453,7 +453,9 @@ impl Command {\n                     // successfully launch the program, but erroneously return\n                     // ENOENT when used with posix_spawn_file_actions_addchdir_np\n                     // which was introduced in macOS 10.15.\n-                    return Ok(None);\n+                    if self.get_program_kind() == ProgramKind::Relative {\n+                        return Ok(None);\n+                    }\n                 }\n                 match posix_spawn_file_actions_addchdir_np.get() {\n                     Some(f) => Some((f, cwd)),"}]}