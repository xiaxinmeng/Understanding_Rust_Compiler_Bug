{"sha": "3137f81c136438246832680a164c725f0e2acfb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMzdmODFjMTM2NDM4MjQ2ODMyNjgwYTE2NGM3MjVmMGUyYWNmYjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-18T18:35:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:32Z"}, "message": "Access attrs directly from HirId in rustdoc::doctest.", "tree": {"sha": "a94abf8754d1ce5bfc2318fd491f654b56482dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a94abf8754d1ce5bfc2318fd491f654b56482dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3137f81c136438246832680a164c725f0e2acfb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3137f81c136438246832680a164c725f0e2acfb1", "html_url": "https://github.com/rust-lang/rust/commit/3137f81c136438246832680a164c725f0e2acfb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3137f81c136438246832680a164c725f0e2acfb1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ba08e6d38765d8d62e223a1c393d9f26b64c7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ba08e6d38765d8d62e223a1c393d9f26b64c7a", "html_url": "https://github.com/rust-lang/rust/commit/99ba08e6d38765d8d62e223a1c393d9f26b64c7a"}], "stats": {"total": 46, "additions": 13, "deletions": 33}, "files": [{"sha": "81ac2b3340466be38f0d2b2532b27ca0960f8b3e", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3137f81c136438246832680a164c725f0e2acfb1/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3137f81c136438246832680a164c725f0e2acfb1/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3137f81c136438246832680a164c725f0e2acfb1", "patch": "@@ -137,7 +137,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 };\n                 hir_collector.visit_testable(\n                     \"\".to_string(),\n-                    &krate.item.attrs,\n                     CRATE_HIR_ID,\n                     krate.item.span,\n                     |this| {\n@@ -991,11 +990,11 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n     fn visit_testable<F: FnOnce(&mut Self)>(\n         &mut self,\n         name: String,\n-        attrs: &[ast::Attribute],\n         hir_id: HirId,\n         sp: Span,\n         nested: F,\n     ) {\n+        let attrs = self.tcx.hir().attrs(hir_id);\n         let mut attrs = Attributes::from_ast(self.sess.diagnostic(), attrs, None);\n         if let Some(ref cfg) = attrs.cfg {\n             if !cfg.matches(&self.sess.parse_sess, Some(&self.sess.features_untracked())) {\n@@ -1053,45 +1052,27 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n             item.ident.to_string()\n         };\n \n-        self.visit_testable(name, &item.attrs, item.hir_id(), item.span, |this| {\n+        self.visit_testable(name, item.hir_id(), item.span, |this| {\n             intravisit::walk_item(this, item);\n         });\n     }\n \n     fn visit_trait_item(&mut self, item: &'hir hir::TraitItem<'_>) {\n-        self.visit_testable(\n-            item.ident.to_string(),\n-            &item.attrs,\n-            item.hir_id(),\n-            item.span,\n-            |this| {\n-                intravisit::walk_trait_item(this, item);\n-            },\n-        );\n+        self.visit_testable(item.ident.to_string(), item.hir_id(), item.span, |this| {\n+            intravisit::walk_trait_item(this, item);\n+        });\n     }\n \n     fn visit_impl_item(&mut self, item: &'hir hir::ImplItem<'_>) {\n-        self.visit_testable(\n-            item.ident.to_string(),\n-            &item.attrs,\n-            item.hir_id(),\n-            item.span,\n-            |this| {\n-                intravisit::walk_impl_item(this, item);\n-            },\n-        );\n+        self.visit_testable(item.ident.to_string(), item.hir_id(), item.span, |this| {\n+            intravisit::walk_impl_item(this, item);\n+        });\n     }\n \n     fn visit_foreign_item(&mut self, item: &'hir hir::ForeignItem<'_>) {\n-        self.visit_testable(\n-            item.ident.to_string(),\n-            &item.attrs,\n-            item.hir_id(),\n-            item.span,\n-            |this| {\n-                intravisit::walk_foreign_item(this, item);\n-            },\n-        );\n+        self.visit_testable(item.ident.to_string(), item.hir_id(), item.span, |this| {\n+            intravisit::walk_foreign_item(this, item);\n+        });\n     }\n \n     fn visit_variant(\n@@ -1100,21 +1081,20 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         g: &'hir hir::Generics<'_>,\n         item_id: hir::HirId,\n     ) {\n-        self.visit_testable(v.ident.to_string(), &v.attrs, v.id, v.span, |this| {\n+        self.visit_testable(v.ident.to_string(), v.id, v.span, |this| {\n             intravisit::walk_variant(this, v, g, item_id);\n         });\n     }\n \n     fn visit_struct_field(&mut self, f: &'hir hir::StructField<'_>) {\n-        self.visit_testable(f.ident.to_string(), &f.attrs, f.hir_id, f.span, |this| {\n+        self.visit_testable(f.ident.to_string(), f.hir_id, f.span, |this| {\n             intravisit::walk_struct_field(this, f);\n         });\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'hir hir::MacroDef<'_>) {\n         self.visit_testable(\n             macro_def.ident.to_string(),\n-            &macro_def.attrs,\n             macro_def.hir_id(),\n             macro_def.span,\n             |_| (),"}]}