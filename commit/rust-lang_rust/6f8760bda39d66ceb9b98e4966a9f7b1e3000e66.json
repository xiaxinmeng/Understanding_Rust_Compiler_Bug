{"sha": "6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODc2MGJkYTM5ZDY2Y2ViOWI5OGU0OTY2YTlmN2IxZTMwMDBlNjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-07T00:28:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-07T00:28:56Z"}, "message": "Rollup merge of #72989 - pnkfelix:revert-pr-71840, r=matthewjasper\n\nRevert pr 71840\n\nRevert7 PR #71840 to fix issue #72470\n\nThis will need a backport to beta if we do not want #72470 to hit stable.", "tree": {"sha": "ae335af04dbbf3ea9729f92e08f0a1abd4e6cdca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae335af04dbbf3ea9729f92e08f0a1abd4e6cdca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3DTJCRBK7hj4Ov3rIwAAdHIIABR41zwu8gKxFlRDBIHt2EXA\n6MDNFVn5SQsC7NW6AD1dH1M1socxqySBmSMnCzSztJf5vMF8ayjUE1ZF1i7LtWGV\nfc4jwd3LaUd+TLdcyZj6hDaVTmUHBbIYheJeXIsegtM7k9nZpWdO+1UOCvGQvZvW\n8SqFXCoKgxtj7TxUEeuidJS8R6i2XOvA26iLbelNWIPdiEMy00VxscMe4lL5pmWi\nZnFjpk9bWMDUjjithStm7Q9qCAcDyEs6ejjEAyuksqTXP5qWL0o3t7Otsw9fcRv5\nqtDdnJrdnb4loLy3tWKRzP7XYfHODGp858j6jZnOdeqglPXb6QNDq/sibDCxijU=\n=IWqA\n-----END PGP SIGNATURE-----\n", "payload": "tree ae335af04dbbf3ea9729f92e08f0a1abd4e6cdca\nparent 63b314c367ad37ca7fdd40d7d3678ad42d93057a\nparent ce4c953b99ec476ae176bf869b644e1bd7a15e11\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591489736 +0200\ncommitter GitHub <noreply@github.com> 1591489736 +0200\n\nRollup merge of #72989 - pnkfelix:revert-pr-71840, r=matthewjasper\n\nRevert pr 71840\n\nRevert7 PR #71840 to fix issue #72470\n\nThis will need a backport to beta if we do not want #72470 to hit stable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "html_url": "https://github.com/rust-lang/rust/commit/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b314c367ad37ca7fdd40d7d3678ad42d93057a", "url": "https://api.github.com/repos/rust-lang/rust/commits/63b314c367ad37ca7fdd40d7d3678ad42d93057a", "html_url": "https://github.com/rust-lang/rust/commit/63b314c367ad37ca7fdd40d7d3678ad42d93057a"}, {"sha": "ce4c953b99ec476ae176bf869b644e1bd7a15e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4c953b99ec476ae176bf869b644e1bd7a15e11", "html_url": "https://github.com/rust-lang/rust/commit/ce4c953b99ec476ae176bf869b644e1bd7a15e11"}], "stats": {"total": 3406, "additions": 1768, "deletions": 1638}, "files": [{"sha": "4749d746845474077ca7922b10da6810769a5c37", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -362,18 +362,17 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_terminator(&mut self, term: &Terminator<'tcx>) {\n         match term.kind {\n             TerminatorKind::Goto { target: _ }\n-            | TerminatorKind::FalseEdges { .. }\n-            | TerminatorKind::FalseUnwind { .. }\n-            // In some sense returning moves the return place into the current\n-            // call's destination, however, since there are no statements after\n-            // this that could possibly access the return place, this doesn't\n-            // need recording.\n-            | TerminatorKind::Return\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort\n             | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Unreachable => {}\n \n+            TerminatorKind::Return => {\n+                self.gather_move(Place::return_place());\n+            }\n+\n             TerminatorKind::Assert { ref cond, .. } => {\n                 self.gather_operand(cond);\n             }\n@@ -417,7 +416,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 ref operands,\n                 options: _,\n                 line_spans: _,\n-                destination: _\n+                destination: _,\n             } => {\n                 for op in operands {\n                     match *op {"}, {"sha": "8f27247bfb4ce5d6731cbadcf276fe7dc215cb3f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -233,6 +233,8 @@ where\n                     .patch_terminator(bb, TerminatorKind::Goto { target: self.succ });\n             }\n             DropStyle::Static => {\n+                let loc = self.terminator_loc(bb);\n+                self.elaborator.clear_drop_flag(loc, self.path, DropFlagMode::Deep);\n                 self.elaborator.patch().patch_terminator(\n                     bb,\n                     TerminatorKind::Drop {\n@@ -243,7 +245,9 @@ where\n                 );\n             }\n             DropStyle::Conditional => {\n-                let drop_bb = self.complete_drop(self.succ, self.unwind);\n+                let unwind = self.unwind; // FIXME(#43234)\n+                let succ = self.succ;\n+                let drop_bb = self.complete_drop(Some(DropFlagMode::Deep), succ, unwind);\n                 self.elaborator\n                     .patch()\n                     .patch_terminator(bb, TerminatorKind::Goto { target: drop_bb });\n@@ -315,7 +319,7 @@ where\n                 // our own drop flag.\n                 path: self.path,\n             }\n-            .complete_drop(succ, unwind)\n+            .complete_drop(None, succ, unwind)\n         }\n     }\n \n@@ -344,7 +348,13 @@ where\n         // Clear the \"master\" drop flag at the end. This is needed\n         // because the \"master\" drop protects the ADT's discriminant,\n         // which is invalidated after the ADT is dropped.\n-        (self.drop_flag_reset_block(DropFlagMode::Shallow, self.succ, self.unwind), self.unwind)\n+        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#43234)\n+        (\n+            self.drop_flag_reset_block(DropFlagMode::Shallow, succ, unwind),\n+            unwind.map(|unwind| {\n+                self.drop_flag_reset_block(DropFlagMode::Shallow, unwind, Unwind::InCleanup)\n+            }),\n+        )\n     }\n \n     /// Creates a full drop ladder, consisting of 2 connected half-drop-ladders\n@@ -878,7 +888,11 @@ where\n                     self.open_drop_for_adt(def, substs)\n                 }\n             }\n-            ty::Dynamic(..) => self.complete_drop(self.succ, self.unwind),\n+            ty::Dynamic(..) => {\n+                let unwind = self.unwind; // FIXME(#43234)\n+                let succ = self.succ;\n+                self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n+            }\n             ty::Array(ety, size) => {\n                 let size = size.try_eval_usize(self.tcx(), self.elaborator.param_env());\n                 self.open_drop_for_array(ety, size)\n@@ -889,10 +903,20 @@ where\n         }\n     }\n \n-    fn complete_drop(&mut self, succ: BasicBlock, unwind: Unwind) -> BasicBlock {\n-        debug!(\"complete_drop(succ={:?}, unwind={:?})\", succ, unwind);\n+    fn complete_drop(\n+        &mut self,\n+        drop_mode: Option<DropFlagMode>,\n+        succ: BasicBlock,\n+        unwind: Unwind,\n+    ) -> BasicBlock {\n+        debug!(\"complete_drop({:?},{:?})\", self, drop_mode);\n \n         let drop_block = self.drop_block(succ, unwind);\n+        let drop_block = if let Some(mode) = drop_mode {\n+            self.drop_flag_reset_block(mode, drop_block, unwind)\n+        } else {\n+            drop_block\n+        };\n \n         self.drop_flag_test_block(drop_block, succ, unwind)\n     }\n@@ -907,11 +931,6 @@ where\n     ) -> BasicBlock {\n         debug!(\"drop_flag_reset_block({:?},{:?})\", self, mode);\n \n-        if unwind.is_cleanup() {\n-            // The drop flag isn't read again on the unwind path, so don't\n-            // bother setting it.\n-            return succ;\n-        }\n         let block = self.new_block(unwind, TerminatorKind::Goto { target: succ });\n         let block_start = Location { block, statement_index: 0 };\n         self.elaborator.clear_drop_flag(block_start, self.path, mode);\n@@ -1028,6 +1047,11 @@ where\n         self.elaborator.patch().new_temp(ty, self.source_info.span)\n     }\n \n+    fn terminator_loc(&mut self, bb: BasicBlock) -> Location {\n+        let body = self.elaborator.body();\n+        self.elaborator.patch().terminator_loc(body, bb)\n+    }\n+\n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span: self.source_info.span,"}, {"sha": "50193c4a0db7d5c153b41fdb7a7c16419d6984ea", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -98,17 +98,12 @@ where\n     write!(w, r#\"<table border=\"0\" cellborder=\"1\" cellspacing=\"0\">\"#)?;\n \n     // Basic block number at the top.\n-    let (blk, color) = if data.is_cleanup {\n-        (format!(\"{} (cleanup)\", block.index()), \"lightblue\")\n-    } else {\n-        (format!(\"{}\", block.index()), \"gray\")\n-    };\n     write!(\n         w,\n-        r#\"<tr><td bgcolor=\"{color}\" align=\"center\" colspan=\"{colspan}\">{blk}</td></tr>\"#,\n+        r#\"<tr><td {attrs} colspan=\"{colspan}\">{blk}</td></tr>\"#,\n+        attrs = r#\"bgcolor=\"gray\" align=\"center\"\"#,\n         colspan = num_cols,\n-        blk = blk,\n-        color = color\n+        blk = block.index()\n     )?;\n \n     init(w)?;"}, {"sha": "2be4136ad42a0f843c62116eee1c6bf69ae016ca", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -28,16 +28,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.in_opt_scope(opt_destruction_scope.map(|de| (de, source_info)), move |this| {\n             this.in_scope((region_scope, source_info), LintLevel::Inherited, move |this| {\n                 if targeted_by_break {\n-                    this.in_breakable_scope(None, destination, span, |this| {\n-                        Some(this.ast_block_stmts(\n-                            destination,\n-                            block,\n-                            span,\n-                            stmts,\n-                            expr,\n-                            safety_mode,\n-                        ))\n-                    })\n+                    // This is a `break`-able block\n+                    let exit_block = this.cfg.start_new_block();\n+                    let block_exit =\n+                        this.in_breakable_scope(None, exit_block, destination, |this| {\n+                            this.ast_block_stmts(destination, block, span, stmts, expr, safety_mode)\n+                        });\n+                    this.cfg.goto(unpack!(block_exit), source_info, exit_block);\n+                    exit_block.unit()\n                 } else {\n                     this.ast_block_stmts(destination, block, span, stmts, expr, safety_mode)\n                 }"}, {"sha": "e402b2d15961a1a60e266d65575953fc67ccd706", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -135,30 +135,32 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // body, even when the exact code in the body cannot unwind\n \n                 let loop_block = this.cfg.start_new_block();\n+                let exit_block = this.cfg.start_new_block();\n \n                 // Start the loop.\n                 this.cfg.goto(block, source_info, loop_block);\n \n-                this.in_breakable_scope(Some(loop_block), destination, expr_span, move |this| {\n+                this.in_breakable_scope(Some(loop_block), exit_block, destination, move |this| {\n                     // conduct the test, if necessary\n                     let body_block = this.cfg.start_new_block();\n+                    let diverge_cleanup = this.diverge_cleanup();\n                     this.cfg.terminate(\n                         loop_block,\n                         source_info,\n-                        TerminatorKind::FalseUnwind { real_target: body_block, unwind: None },\n+                        TerminatorKind::FalseUnwind {\n+                            real_target: body_block,\n+                            unwind: Some(diverge_cleanup),\n+                        },\n                     );\n-                    this.diverge_from(loop_block);\n \n                     // The \u201creturn\u201d value of the loop body must always be an unit. We therefore\n                     // introduce a unit temporary as the destination for the loop body.\n                     let tmp = this.get_unit_temp();\n                     // Execute the body, branching back to the test.\n                     let body_block_end = unpack!(this.into(tmp, body_block, body));\n                     this.cfg.goto(body_block_end, source_info, loop_block);\n-\n-                    // Loops are only exited by `break` expressions.\n-                    None\n-                })\n+                });\n+                exit_block.unit()\n             }\n             ExprKind::Call { ty, fun, args, from_hir_call } => {\n                 let intrinsic = match ty.kind {\n@@ -200,6 +202,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         .collect();\n \n                     let success = this.cfg.start_new_block();\n+                    let cleanup = this.diverge_cleanup();\n \n                     this.record_operands_moved(&args);\n \n@@ -209,7 +212,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         TerminatorKind::Call {\n                             func: fun,\n                             args,\n-                            cleanup: None,\n+                            cleanup: Some(cleanup),\n                             // FIXME(varkor): replace this with an uninhabitedness-based check.\n                             // This requires getting access to the current module to call\n                             // `tcx.is_ty_uninhabited_from`, which is currently tricky to do.\n@@ -221,7 +224,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             from_hir_call,\n                         },\n                     );\n-                    this.diverge_from(block);\n                     success.unit()\n                 }\n             }\n@@ -425,12 +427,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let scope = this.local_scope();\n                 let value = unpack!(block = this.as_operand(block, scope, value));\n                 let resume = this.cfg.start_new_block();\n+                let cleanup = this.generator_drop_cleanup();\n                 this.cfg.terminate(\n                     block,\n                     source_info,\n-                    TerminatorKind::Yield { value, resume, resume_arg: destination, drop: None },\n+                    TerminatorKind::Yield { value, resume, resume_arg: destination, drop: cleanup },\n                 );\n-                this.generator_drop_cleanup(block);\n                 resume.unit()\n             }\n "}, {"sha": "3b448b0cf27cbb26a7f9c4748336e62f4c8b4213", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -225,6 +225,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         outer_source_info: SourceInfo,\n         fake_borrow_temps: Vec<(Place<'tcx>, Local)>,\n     ) -> BlockAnd<()> {\n+        let match_scope = self.scopes.topmost();\n+\n         let arm_end_blocks: Vec<_> = arm_candidates\n             .into_iter()\n             .map(|(arm, candidate)| {\n@@ -245,7 +247,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let arm_block = this.bind_pattern(\n                         outer_source_info,\n                         candidate,\n-                        arm.guard.as_ref(),\n+                        arm.guard.as_ref().map(|g| (g, match_scope)),\n                         &fake_borrow_temps,\n                         scrutinee_span,\n                         Some(arm.scope),\n@@ -282,7 +284,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         outer_source_info: SourceInfo,\n         candidate: Candidate<'_, 'tcx>,\n-        guard: Option<&Guard<'tcx>>,\n+        guard: Option<(&Guard<'tcx>, region::Scope)>,\n         fake_borrow_temps: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n         arm_scope: Option<region::Scope>,\n@@ -1588,7 +1590,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         candidate: Candidate<'pat, 'tcx>,\n         parent_bindings: &[(Vec<Binding<'tcx>>, Vec<Ascription<'tcx>>)],\n-        guard: Option<&Guard<'tcx>>,\n+        guard: Option<(&Guard<'tcx>, region::Scope)>,\n         fake_borrows: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n         schedule_drops: bool,\n@@ -1700,7 +1702,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         //      the reference that we create for the arm.\n         //    * So we eagerly create the reference for the arm and then take a\n         //      reference to that.\n-        if let Some(guard) = guard {\n+        if let Some((guard, region_scope)) = guard {\n             let tcx = self.hir.tcx();\n             let bindings = parent_bindings\n                 .iter()\n@@ -1744,7 +1746,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 unreachable\n             });\n             let outside_scope = self.cfg.start_new_block();\n-            self.exit_top_scope(otherwise_post_guard_block, outside_scope, source_info);\n+            self.exit_scope(\n+                source_info.span,\n+                region_scope,\n+                otherwise_post_guard_block,\n+                outside_scope,\n+            );\n             self.false_edges(\n                 outside_scope,\n                 otherwise_block,"}, {"sha": "74398ca8a40fa80831014d3b8b5b0cb1fea3df2f", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -423,6 +423,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let bool_ty = self.hir.bool_ty();\n         let eq_result = self.temp(bool_ty, source_info.span);\n         let eq_block = self.cfg.start_new_block();\n+        let cleanup = self.diverge_cleanup();\n         self.cfg.terminate(\n             block,\n             source_info,\n@@ -440,11 +441,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }),\n                 args: vec![val, expect],\n                 destination: Some((eq_result, eq_block)),\n-                cleanup: None,\n+                cleanup: Some(cleanup),\n                 from_hir_call: false,\n             },\n         );\n-        self.diverge_from(block);\n \n         if let [success_block, fail_block] = *make_target_blocks(self) {\n             // check the result"}, {"sha": "2efe93d057b9be509b878ccd4ae640e27ca77971", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 63, "deletions": 28, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -327,6 +327,11 @@ struct Builder<'a, 'tcx> {\n \n     var_debug_info: Vec<VarDebugInfo<'tcx>>,\n \n+    /// Cached block with the `RESUME` terminator; this is created\n+    /// when first set of cleanups are built.\n+    cached_resume_block: Option<BasicBlock>,\n+    /// Cached block with the `RETURN` terminator.\n+    cached_return_block: Option<BasicBlock>,\n     /// Cached block with the `UNREACHABLE` terminator.\n     cached_unreachable_block: Option<BasicBlock>,\n }\n@@ -585,34 +590,50 @@ where\n         region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::CallSite };\n     let arg_scope =\n         region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::Arguments };\n+    let mut block = START_BLOCK;\n     let source_info = builder.source_info(span);\n     let call_site_s = (call_site_scope, source_info);\n-    unpack!(builder.in_scope(call_site_s, LintLevel::Inherited, |builder| {\n-        let arg_scope_s = (arg_scope, source_info);\n-        // Attribute epilogue to function's closing brace\n-        let fn_end = span.shrink_to_hi();\n-        let return_block =\n-            unpack!(builder.in_breakable_scope(None, Place::return_place(), fn_end, |builder| {\n-                Some(builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n-                    builder.args_and_body(\n-                        START_BLOCK,\n-                        fn_def_id.to_def_id(),\n-                        &arguments,\n-                        arg_scope,\n-                        &body.value,\n-                    )\n-                }))\n-            }));\n-        let source_info = builder.source_info(fn_end);\n-        builder.cfg.terminate(return_block, source_info, TerminatorKind::Return);\n-        let should_abort = should_abort_on_panic(tcx, fn_def_id, abi);\n-        builder.build_drop_trees(should_abort);\n-        // Attribute any unreachable codepaths to the function's closing brace\n-        if let Some(unreachable_block) = builder.cached_unreachable_block {\n-            builder.cfg.terminate(unreachable_block, source_info, TerminatorKind::Unreachable);\n-        }\n-        return_block.unit()\n-    }));\n+    unpack!(\n+        block = builder.in_scope(call_site_s, LintLevel::Inherited, |builder| {\n+            if should_abort_on_panic(tcx, fn_def_id, abi) {\n+                builder.schedule_abort();\n+            }\n+\n+            let arg_scope_s = (arg_scope, source_info);\n+            // `return_block` is called when we evaluate a `return` expression, so\n+            // we just use `START_BLOCK` here.\n+            unpack!(\n+                block = builder.in_breakable_scope(\n+                    None,\n+                    START_BLOCK,\n+                    Place::return_place(),\n+                    |builder| {\n+                        builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n+                            builder.args_and_body(\n+                                block,\n+                                fn_def_id.to_def_id(),\n+                                &arguments,\n+                                arg_scope,\n+                                &body.value,\n+                            )\n+                        })\n+                    },\n+                )\n+            );\n+            // Attribute epilogue to function's closing brace\n+            let fn_end = span.shrink_to_hi();\n+            let source_info = builder.source_info(fn_end);\n+            let return_block = builder.return_block();\n+            builder.cfg.goto(block, source_info, return_block);\n+            builder.cfg.terminate(return_block, source_info, TerminatorKind::Return);\n+            // Attribute any unreachable codepaths to the function's closing brace\n+            if let Some(unreachable_block) = builder.cached_unreachable_block {\n+                builder.cfg.terminate(unreachable_block, source_info, TerminatorKind::Unreachable);\n+            }\n+            return_block.unit()\n+        })\n+    );\n+    assert_eq!(block, builder.return_block());\n \n     let spread_arg = if abi == Abi::RustCall {\n         // RustCall pseudo-ABI untuples the last argument.\n@@ -646,7 +667,8 @@ fn construct_const<'a, 'tcx>(\n     let source_info = builder.source_info(span);\n     builder.cfg.terminate(block, source_info, TerminatorKind::Return);\n \n-    builder.build_drop_trees(false);\n+    // Constants can't `return` so a return block should not be created.\n+    assert_eq!(builder.cached_return_block, None);\n \n     // Constants may be match expressions in which case an unreachable block may\n     // be created, so terminate it properly.\n@@ -713,7 +735,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             fn_span: span,\n             arg_count,\n             generator_kind,\n-            scopes: scope::Scopes::new(),\n+            scopes: Default::default(),\n             block_context: BlockContext::new(),\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n@@ -726,6 +748,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             var_indices: Default::default(),\n             unit_temp: None,\n             var_debug_info: vec![],\n+            cached_resume_block: None,\n+            cached_return_block: None,\n             cached_unreachable_block: None,\n         };\n \n@@ -957,6 +981,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn return_block(&mut self) -> BasicBlock {\n+        match self.cached_return_block {\n+            Some(rb) => rb,\n+            None => {\n+                let rb = self.cfg.start_new_block();\n+                self.cached_return_block = Some(rb);\n+                rb\n+            }\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "4daf567d7d451497682ce5618fa9e840bff8747b", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 630, "deletions": 714, "changes": 1344, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -6,31 +6,30 @@ contents, and then pop it off. Every scope is named by a\n \n ### SEME Regions\n \n-When pushing a new [Scope], we record the current point in the graph (a\n+When pushing a new scope, we record the current point in the graph (a\n basic block); this marks the entry to the scope. We then generate more\n stuff in the control-flow graph. Whenever the scope is exited, either\n via a `break` or `return` or just by fallthrough, that marks an exit\n from the scope. Each lexical scope thus corresponds to a single-entry,\n multiple-exit (SEME) region in the control-flow graph.\n \n-For now, we record the `region::Scope` to each SEME region for later reference\n-(see caveat in next paragraph). This is because destruction scopes are tied to\n-them. This may change in the future so that MIR lowering determines its own\n-destruction scopes.\n+For now, we keep a mapping from each `region::Scope` to its\n+corresponding SEME region for later reference (see caveat in next\n+paragraph). This is because region scopes are tied to\n+them. Eventually, when we shift to non-lexical lifetimes, there should\n+be no need to remember this mapping.\n \n ### Not so SEME Regions\n \n In the course of building matches, it sometimes happens that certain code\n (namely guards) gets executed multiple times. This means that the scope lexical\n scope may in fact correspond to multiple, disjoint SEME regions. So in fact our\n-mapping is from one scope to a vector of SEME regions. Since the SEME regions\n-are disjoint, the mapping is still one-to-one for the set of SEME regions that\n-we're currently in.\n+mapping is from one scope to a vector of SEME regions.\n \n-Also in matches, the scopes assigned to arms are not always even SEME regions!\n-Each arm has a single region with one entry for each pattern. We manually\n+Also in matches, the scopes assigned to arms are not even SEME regions! Each\n+arm has a single region with one entry for each pattern. We manually\n manipulate the scheduled drops in this scope to avoid dropping things multiple\n-times.\n+times, although drop elaboration would clean this up for value drops.\n \n ### Drops\n \n@@ -61,48 +60,38 @@ that for now); any later drops would also drop `y`.\n \n There are numerous \"normal\" ways to early exit a scope: `break`,\n `continue`, `return` (panics are handled separately). Whenever an\n-early exit occurs, the method `break_scope` is called. It is given the\n+early exit occurs, the method `exit_scope` is called. It is given the\n current point in execution where the early exit occurs, as well as the\n scope you want to branch to (note that all early exits from to some\n-other enclosing scope). `break_scope` will record the set of drops currently\n-scheduled in a [DropTree]. Later, before `in_breakable_scope` exits, the drops\n-will be added to the CFG.\n+other enclosing scope). `exit_scope` will record this exit point and\n+also add all drops.\n \n-Panics are handled in a similar fashion, except that the drops are added to the\n-MIR once the rest of the function has finished being lowered. If a terminator\n-can panic, call `diverge_from(block)` with the block containing the terminator\n-`block`.\n+Panics are handled in a similar fashion, except that a panic always\n+returns out to the `DIVERGE_BLOCK`. To trigger a panic, simply call\n+`panic(p)` with the current point `p`. Or else you can call\n+`diverge_cleanup`, which will produce a block that you can branch to\n+which does the appropriate cleanup and then diverges. `panic(p)`\n+simply calls `diverge_cleanup()` and adds an edge from `p` to the\n+result.\n \n-### Breakable scopes\n+### Loop scopes\n \n In addition to the normal scope stack, we track a loop scope stack\n-that contains only loops and breakable blocks. It tracks where a `break`,\n-`continue` or `return` should go to.\n+that contains only loops. It tracks where a `break` and `continue`\n+should go to.\n \n */\n \n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use crate::hair::{Expr, ExprRef, LintLevel};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir as hir;\n-use rustc_index::vec::IndexVec;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n+use rustc_hir::GeneratorKind;\n use rustc_span::{Span, DUMMY_SP};\n-\n-#[derive(Debug)]\n-pub struct Scopes<'tcx> {\n-    scopes: Vec<Scope>,\n-    /// The current set of breakable scopes. See module comment for more details.\n-    breakable_scopes: Vec<BreakableScope<'tcx>>,\n-\n-    /// Drops that need to be done on unwind paths. See the comment on\n-    /// [DropTree] for more details.\n-    unwind_drops: DropTree,\n-\n-    /// Drops that need to be done on paths to the `GeneratorDrop` terminator.\n-    generator_drops: DropTree,\n-}\n+use std::collections::hash_map::Entry;\n+use std::mem;\n \n #[derive(Debug)]\n struct Scope {\n@@ -123,45 +112,73 @@ struct Scope {\n \n     moved_locals: Vec<Local>,\n \n-    /// The drop index that will drop everything in and below this scope on an\n-    /// unwind path.\n-    cached_unwind_block: Option<DropIdx>,\n+    /// The cache for drop chain on \u201cnormal\u201d exit into a particular BasicBlock.\n+    cached_exits: FxHashMap<(BasicBlock, region::Scope), BasicBlock>,\n+\n+    /// The cache for drop chain on \"generator drop\" exit.\n+    cached_generator_drop: Option<BasicBlock>,\n \n-    /// The drop index that will drop everything in and below this scope on a\n-    /// generator drop path.\n-    cached_generator_drop_block: Option<DropIdx>,\n+    /// The cache for drop chain on \"unwind\" exit.\n+    cached_unwind: CachedBlock,\n }\n \n-#[derive(Clone, Copy, Debug)]\n+#[derive(Debug, Default)]\n+crate struct Scopes<'tcx> {\n+    scopes: Vec<Scope>,\n+    /// The current set of breakable scopes. See module comment for more details.\n+    breakable_scopes: Vec<BreakableScope<'tcx>>,\n+}\n+\n+#[derive(Debug)]\n struct DropData {\n-    /// The `Span` where drop obligation was incurred (typically where place was\n-    /// declared)\n-    source_info: SourceInfo,\n+    /// span where drop obligation was incurred (typically where place was declared)\n+    span: Span,\n \n     /// local to drop\n     local: Local,\n \n     /// Whether this is a value Drop or a StorageDead.\n     kind: DropKind,\n+\n+    /// The cached blocks for unwinds.\n+    cached_block: CachedBlock,\n+}\n+\n+#[derive(Debug, Default, Clone, Copy)]\n+struct CachedBlock {\n+    /// The cached block for the cleanups-on-diverge path. This block\n+    /// contains code to run the current drop and all the preceding\n+    /// drops (i.e., those having lower index in Drop\u2019s Scope drop\n+    /// array)\n+    unwind: Option<BasicBlock>,\n+\n+    /// The cached block for unwinds during cleanups-on-generator-drop path\n+    ///\n+    /// This is split from the standard unwind path here to prevent drop\n+    /// elaboration from creating drop flags that would have to be captured\n+    /// by the generator. I'm not sure how important this optimization is,\n+    /// but it is here.\n+    generator_drop: Option<BasicBlock>,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, PartialEq, Eq)]\n pub(crate) enum DropKind {\n     Value,\n     Storage,\n }\n \n-#[derive(Debug)]\n+#[derive(Clone, Debug)]\n struct BreakableScope<'tcx> {\n     /// Region scope of the loop\n     region_scope: region::Scope,\n+    /// Where the body of the loop begins. `None` if block\n+    continue_block: Option<BasicBlock>,\n+    /// Block to branch into when the loop or block terminates (either by being\n+    /// `break`-en out from, or by having its condition to become false)\n+    break_block: BasicBlock,\n     /// The destination of the loop/block expression itself (i.e., where to put\n-    /// the result of a `break` or `return` expression)\n+    /// the result of a `break` expression)\n     break_destination: Place<'tcx>,\n-    /// Drops that happen on the `break`/`return` path.\n-    break_drops: DropTree,\n-    /// Drops that happen on the `continue` path.\n-    continue_drops: Option<DropTree>,\n }\n \n /// The target of an expression that breaks out of a scope\n@@ -172,33 +189,61 @@ crate enum BreakableTarget {\n     Return,\n }\n \n-rustc_index::newtype_index! {\n-    struct DropIdx { .. }\n-}\n+impl CachedBlock {\n+    fn invalidate(&mut self) {\n+        *self = CachedBlock::default();\n+    }\n \n-const ROOT_NODE: DropIdx = DropIdx::from_u32(0);\n+    fn get(&self, generator_drop: bool) -> Option<BasicBlock> {\n+        if generator_drop { self.generator_drop } else { self.unwind }\n+    }\n \n-/// A tree of drops that we have deferred lowering. It's used for:\n-///\n-/// * Drops on unwind paths\n-/// * Drops on generator drop paths (when a suspended generator is dropped)\n-/// * Drops on return and loop exit paths\n-///\n-/// Once no more nodes could be added to the tree, we lower it to MIR in one go\n-/// in `build_drop_tree`.\n-#[derive(Debug)]\n-struct DropTree {\n-    /// Drops in the tree.\n-    drops: IndexVec<DropIdx, (DropData, DropIdx)>,\n-    /// Map for finding the inverse of the `next_drop` relation:\n-    ///\n-    /// `previous_drops[(drops[i].1, drops[i].0.local, drops[i].0.kind] == i`\n-    previous_drops: FxHashMap<(DropIdx, Local, DropKind), DropIdx>,\n-    /// Edges into the `DropTree` that need to be added once it's lowered.\n-    entry_points: Vec<(DropIdx, BasicBlock)>,\n+    fn ref_mut(&mut self, generator_drop: bool) -> &mut Option<BasicBlock> {\n+        if generator_drop { &mut self.generator_drop } else { &mut self.unwind }\n+    }\n }\n \n impl Scope {\n+    /// Invalidates all the cached blocks in the scope.\n+    ///\n+    /// Should always be run for all inner scopes when a drop is pushed into some scope enclosing a\n+    /// larger extent of code.\n+    ///\n+    /// `storage_only` controls whether to invalidate only drop paths that run `StorageDead`.\n+    /// `this_scope_only` controls whether to invalidate only drop paths that refer to the current\n+    /// top-of-scope (as opposed to dependent scopes).\n+    fn invalidate_cache(\n+        &mut self,\n+        storage_only: bool,\n+        generator_kind: Option<GeneratorKind>,\n+        this_scope_only: bool,\n+    ) {\n+        // FIXME: maybe do shared caching of `cached_exits` etc. to handle functions\n+        // with lots of `try!`?\n+\n+        // cached exits drop storage and refer to the top-of-scope\n+        self.cached_exits.clear();\n+\n+        // the current generator drop and unwind refer to top-of-scope\n+        self.cached_generator_drop = None;\n+\n+        let ignore_unwinds = storage_only && generator_kind.is_none();\n+        if !ignore_unwinds {\n+            self.cached_unwind.invalidate();\n+        }\n+\n+        if !ignore_unwinds && !this_scope_only {\n+            for drop_data in &mut self.drops {\n+                drop_data.cached_block.invalidate();\n+            }\n+        }\n+    }\n+\n+    /// Given a span and this scope's source scope, make a SourceInfo.\n+    fn source_info(&self, span: Span) -> SourceInfo {\n+        SourceInfo { span, scope: self.source_scope }\n+    }\n+\n     /// Whether there's anything to do for the cleanup path, that is,\n     /// when unwinding through this scope. This includes destructors,\n     /// but not StorageDead statements, which don't get emitted at all\n@@ -216,189 +261,11 @@ impl Scope {\n             DropKind::Storage => false,\n         })\n     }\n-\n-    fn invalidate_cache(&mut self) {\n-        self.cached_unwind_block = None;\n-        self.cached_generator_drop_block = None;\n-    }\n-}\n-\n-/// A trait that determined how [DropTree::build_mir] creates its blocks and\n-/// links to any entry nodes.\n-trait DropTreeBuilder<'tcx> {\n-    /// Create a new block for the tree. This should call either\n-    /// `cfg.start_new_block()` or `cfg.start_new_cleanup_block()`.\n-    fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock;\n-\n-    /// Links a block outside the drop tree, `from`, to the block `to` inside\n-    /// the drop tree.\n-    fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock);\n-}\n-\n-impl DropTree {\n-    fn new() -> Self {\n-        // The root node of the tree doesn't represent a drop, but instead\n-        // represents the block in the tree that should be jumped to once all\n-        // of the required drops have been performed.\n-        let fake_source_info = SourceInfo::outermost(DUMMY_SP);\n-        let fake_data =\n-            DropData { source_info: fake_source_info, local: Local::MAX, kind: DropKind::Storage };\n-        let drop_idx = DropIdx::MAX;\n-        let drops = IndexVec::from_elem_n((fake_data, drop_idx), 1);\n-        Self { drops, entry_points: Vec::new(), previous_drops: FxHashMap::default() }\n-    }\n-\n-    fn add_drop(&mut self, drop: DropData, next: DropIdx) -> DropIdx {\n-        let drops = &mut self.drops;\n-        *self\n-            .previous_drops\n-            .entry((next, drop.local, drop.kind))\n-            .or_insert_with(|| drops.push((drop, next)))\n-    }\n-\n-    fn add_entry(&mut self, from: BasicBlock, to: DropIdx) {\n-        debug_assert!(to < self.drops.next_index());\n-        self.entry_points.push((to, from));\n-    }\n-\n-    /// Builds the MIR for a given drop tree.\n-    ///\n-    /// `blocks` should have the same length as `self.drops`, and may have its\n-    /// first value set to some already existing block.\n-    fn build_mir<'tcx, T: DropTreeBuilder<'tcx>>(\n-        &mut self,\n-        cfg: &mut CFG<'tcx>,\n-        blocks: &mut IndexVec<DropIdx, Option<BasicBlock>>,\n-    ) {\n-        debug!(\"DropTree::build_mir(drops = {:#?})\", self);\n-        assert_eq!(blocks.len(), self.drops.len());\n-\n-        self.assign_blocks::<T>(cfg, blocks);\n-        self.link_blocks(cfg, blocks)\n-    }\n-\n-    /// Assign blocks for all of the drops in the drop tree that need them.\n-    fn assign_blocks<'tcx, T: DropTreeBuilder<'tcx>>(\n-        &mut self,\n-        cfg: &mut CFG<'tcx>,\n-        blocks: &mut IndexVec<DropIdx, Option<BasicBlock>>,\n-    ) {\n-        // StorageDead statements can share blocks with each other and also with\n-        // a Drop terminator. We iterate through the drops to find which drops\n-        // need their own block.\n-        #[derive(Clone, Copy)]\n-        enum Block {\n-            // This drop is unreachable\n-            None,\n-            // This drop is only reachable through the `StorageDead` with the\n-            // specified index.\n-            Shares(DropIdx),\n-            // This drop has more than one way of being reached, or it is\n-            // branched to from outside the tree, or its predecessor is a\n-            // `Value` drop.\n-            Own,\n-        }\n-\n-        let mut needs_block = IndexVec::from_elem(Block::None, &self.drops);\n-        if blocks[ROOT_NODE].is_some() {\n-            // In some cases (such as drops for `continue`) the root node\n-            // already has a block. In this case, make sure that we don't\n-            // override it.\n-            needs_block[ROOT_NODE] = Block::Own;\n-        }\n-\n-        // Sort so that we only need to check the last value.\n-        let entry_points = &mut self.entry_points;\n-        entry_points.sort();\n-\n-        for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {\n-            if entry_points.last().map_or(false, |entry_point| entry_point.0 == drop_idx) {\n-                let block = *blocks[drop_idx].get_or_insert_with(|| T::make_block(cfg));\n-                needs_block[drop_idx] = Block::Own;\n-                while entry_points.last().map_or(false, |entry_point| entry_point.0 == drop_idx) {\n-                    let entry_block = entry_points.pop().unwrap().1;\n-                    T::add_entry(cfg, entry_block, block);\n-                }\n-            }\n-            match needs_block[drop_idx] {\n-                Block::None => continue,\n-                Block::Own => {\n-                    blocks[drop_idx].get_or_insert_with(|| T::make_block(cfg));\n-                }\n-                Block::Shares(pred) => {\n-                    blocks[drop_idx] = blocks[pred];\n-                }\n-            }\n-            if let DropKind::Value = drop_data.0.kind {\n-                needs_block[drop_data.1] = Block::Own;\n-            } else {\n-                if drop_idx != ROOT_NODE {\n-                    match &mut needs_block[drop_data.1] {\n-                        pred @ Block::None => *pred = Block::Shares(drop_idx),\n-                        pred @ Block::Shares(_) => *pred = Block::Own,\n-                        Block::Own => (),\n-                    }\n-                }\n-            }\n-        }\n-\n-        debug!(\"assign_blocks: blocks = {:#?}\", blocks);\n-        assert!(entry_points.is_empty());\n-    }\n-\n-    fn link_blocks<'tcx>(\n-        &self,\n-        cfg: &mut CFG<'tcx>,\n-        blocks: &IndexVec<DropIdx, Option<BasicBlock>>,\n-    ) {\n-        for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {\n-            let block = if let Some(block) = blocks[drop_idx] {\n-                block\n-            } else {\n-                continue;\n-            };\n-            match drop_data.0.kind {\n-                DropKind::Value => {\n-                    let terminator = TerminatorKind::Drop {\n-                        target: blocks[drop_data.1].unwrap(),\n-                        // The caller will handle this if needed.\n-                        unwind: None,\n-                        location: drop_data.0.local.into(),\n-                    };\n-                    cfg.terminate(block, drop_data.0.source_info, terminator);\n-                }\n-                // Root nodes don't correspond to a drop.\n-                DropKind::Storage if drop_idx == ROOT_NODE => {}\n-                DropKind::Storage => {\n-                    let stmt = Statement {\n-                        source_info: drop_data.0.source_info,\n-                        kind: StatementKind::StorageDead(drop_data.0.local),\n-                    };\n-                    cfg.push(block, stmt);\n-                    let target = blocks[drop_data.1].unwrap();\n-                    if target != block {\n-                        // Diagnostics don't use this `Span` but debuginfo\n-                        // might. Since we don't want breakpoints to be placed\n-                        // here, especially when this is on an unwind path, we\n-                        // use `DUMMY_SP`.\n-                        let source_info = SourceInfo { span: DUMMY_SP, ..drop_data.0.source_info };\n-                        let terminator = TerminatorKind::Goto { target };\n-                        cfg.terminate(block, source_info, terminator);\n-                    }\n-                }\n-            }\n-        }\n-    }\n }\n \n impl<'tcx> Scopes<'tcx> {\n-    pub(crate) fn new() -> Self {\n-        Self {\n-            scopes: Vec::new(),\n-            breakable_scopes: Vec::new(),\n-            unwind_drops: DropTree::new(),\n-            generator_drops: DropTree::new(),\n-        }\n+    fn len(&self) -> usize {\n+        self.scopes.len()\n     }\n \n     fn push_scope(&mut self, region_scope: (region::Scope, SourceInfo), vis_scope: SourceScope) {\n@@ -409,80 +276,123 @@ impl<'tcx> Scopes<'tcx> {\n             region_scope_span: region_scope.1.span,\n             drops: vec![],\n             moved_locals: vec![],\n-            cached_unwind_block: None,\n-            cached_generator_drop_block: None,\n+            cached_generator_drop: None,\n+            cached_exits: Default::default(),\n+            cached_unwind: CachedBlock::default(),\n         });\n     }\n \n-    fn pop_scope(&mut self, region_scope: (region::Scope, SourceInfo)) -> Scope {\n+    fn pop_scope(\n+        &mut self,\n+        region_scope: (region::Scope, SourceInfo),\n+    ) -> (Scope, Option<BasicBlock>) {\n         let scope = self.scopes.pop().unwrap();\n         assert_eq!(scope.region_scope, region_scope.0);\n-        scope\n+        let unwind_to =\n+            self.scopes.last().and_then(|next_scope| next_scope.cached_unwind.get(false));\n+        (scope, unwind_to)\n+    }\n+\n+    fn may_panic(&self, scope_count: usize) -> bool {\n+        let len = self.len();\n+        self.scopes[(len - scope_count)..].iter().any(|s| s.needs_cleanup())\n+    }\n+\n+    /// Finds the breakable scope for a given label. This is used for\n+    /// resolving `return`, `break` and `continue`.\n+    fn find_breakable_scope(\n+        &self,\n+        span: Span,\n+        target: BreakableTarget,\n+    ) -> (BasicBlock, region::Scope, Option<Place<'tcx>>) {\n+        let get_scope = |scope: region::Scope| {\n+            // find the loop-scope by its `region::Scope`.\n+            self.breakable_scopes\n+                .iter()\n+                .rfind(|breakable_scope| breakable_scope.region_scope == scope)\n+                .unwrap_or_else(|| span_bug!(span, \"no enclosing breakable scope found\"))\n+        };\n+        match target {\n+            BreakableTarget::Return => {\n+                let scope = &self.breakable_scopes[0];\n+                if scope.break_destination != Place::return_place() {\n+                    span_bug!(span, \"`return` in item with no return scope\");\n+                }\n+                (scope.break_block, scope.region_scope, Some(scope.break_destination))\n+            }\n+            BreakableTarget::Break(scope) => {\n+                let scope = get_scope(scope);\n+                (scope.break_block, scope.region_scope, Some(scope.break_destination))\n+            }\n+            BreakableTarget::Continue(scope) => {\n+                let scope = get_scope(scope);\n+                let continue_block = scope\n+                    .continue_block\n+                    .unwrap_or_else(|| span_bug!(span, \"missing `continue` block\"));\n+                (continue_block, scope.region_scope, None)\n+            }\n+        }\n     }\n \n-    fn scope_index(&self, region_scope: region::Scope, span: Span) -> usize {\n-        self.scopes\n+    fn num_scopes_above(&self, region_scope: region::Scope, span: Span) -> usize {\n+        let scope_count = self\n+            .scopes\n             .iter()\n-            .rposition(|scope| scope.region_scope == region_scope)\n-            .unwrap_or_else(|| span_bug!(span, \"region_scope {:?} does not enclose\", region_scope))\n+            .rev()\n+            .position(|scope| scope.region_scope == region_scope)\n+            .unwrap_or_else(|| span_bug!(span, \"region_scope {:?} does not enclose\", region_scope));\n+        let len = self.len();\n+        assert!(scope_count < len, \"should not use `exit_scope` to pop ALL scopes\");\n+        scope_count\n+    }\n+\n+    fn iter_mut(&mut self) -> impl DoubleEndedIterator<Item = &mut Scope> + '_ {\n+        self.scopes.iter_mut().rev()\n+    }\n+\n+    fn top_scopes(&mut self, count: usize) -> impl DoubleEndedIterator<Item = &mut Scope> + '_ {\n+        let len = self.len();\n+        self.scopes[len - count..].iter_mut()\n     }\n \n     /// Returns the topmost active scope, which is known to be alive until\n     /// the next scope expression.\n-    fn topmost(&self) -> region::Scope {\n+    pub(super) fn topmost(&self) -> region::Scope {\n         self.scopes.last().expect(\"topmost_scope: no scopes present\").region_scope\n     }\n+\n+    fn source_info(&self, index: usize, span: Span) -> SourceInfo {\n+        self.scopes[self.len() - index].source_info(span)\n+    }\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     // Adding and removing scopes\n     // ==========================\n     //  Start a breakable scope, which tracks where `continue`, `break` and\n     //  `return` should branch to.\n-    crate fn in_breakable_scope<F>(\n+    crate fn in_breakable_scope<F, R>(\n         &mut self,\n         loop_block: Option<BasicBlock>,\n+        break_block: BasicBlock,\n         break_destination: Place<'tcx>,\n-        span: Span,\n         f: F,\n-    ) -> BlockAnd<()>\n+    ) -> R\n     where\n-        F: FnOnce(&mut Builder<'a, 'tcx>) -> Option<BlockAnd<()>>,\n+        F: FnOnce(&mut Builder<'a, 'tcx>) -> R,\n     {\n         let region_scope = self.scopes.topmost();\n         let scope = BreakableScope {\n             region_scope,\n+            continue_block: loop_block,\n+            break_block,\n             break_destination,\n-            break_drops: DropTree::new(),\n-            continue_drops: loop_block.map(|_| DropTree::new()),\n         };\n         self.scopes.breakable_scopes.push(scope);\n-        let normal_exit_block = f(self);\n+        let res = f(self);\n         let breakable_scope = self.scopes.breakable_scopes.pop().unwrap();\n         assert!(breakable_scope.region_scope == region_scope);\n-        let break_block = self.build_exit_tree(breakable_scope.break_drops, None);\n-        breakable_scope.continue_drops.map(|drops| {\n-            self.build_exit_tree(drops, loop_block);\n-        });\n-        match (normal_exit_block, break_block) {\n-            (Some(block), None) | (None, Some(block)) => block,\n-            (None, None) => self.cfg.start_new_block().unit(),\n-            (Some(normal_block), Some(exit_block)) => {\n-                let target = self.cfg.start_new_block();\n-                let source_info = self.source_info(span);\n-                self.cfg.terminate(\n-                    unpack!(normal_block),\n-                    source_info,\n-                    TerminatorKind::Goto { target },\n-                );\n-                self.cfg.terminate(\n-                    unpack!(exit_block),\n-                    source_info,\n-                    TerminatorKind::Goto { target },\n-                );\n-                target.unit()\n-            }\n-        }\n+        res\n     }\n \n     crate fn in_opt_scope<F, R>(\n@@ -566,51 +476,46 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mut block: BasicBlock,\n     ) -> BlockAnd<()> {\n         debug!(\"pop_scope({:?}, {:?})\", region_scope, block);\n+        // If we are emitting a `drop` statement, we need to have the cached\n+        // diverge cleanup pads ready in case that drop panics.\n+        if self.scopes.may_panic(1) {\n+            self.diverge_cleanup();\n+        }\n+        let (scope, unwind_to) = self.scopes.pop_scope(region_scope);\n+        let unwind_to = unwind_to.unwrap_or_else(|| self.resume_block());\n \n-        block = self.leave_top_scope(block);\n-\n-        self.scopes.pop_scope(region_scope);\n+        unpack!(\n+            block = build_scope_drops(\n+                &mut self.cfg,\n+                self.generator_kind,\n+                &scope,\n+                block,\n+                unwind_to,\n+                self.arg_count,\n+                false, // not generator\n+                false, // not unwind path\n+            )\n+        );\n \n         block.unit()\n     }\n \n-    /// Sets up the drops for breaking from `block` to `target`.\n     crate fn break_scope(\n         &mut self,\n         mut block: BasicBlock,\n         value: Option<ExprRef<'tcx>>,\n-        target: BreakableTarget,\n+        scope: BreakableTarget,\n         source_info: SourceInfo,\n     ) -> BlockAnd<()> {\n-        let span = source_info.span;\n-\n-        let get_scope_index = |scope: region::Scope| {\n-            // find the loop-scope by its `region::Scope`.\n-            self.scopes\n-                .breakable_scopes\n-                .iter()\n-                .rposition(|breakable_scope| breakable_scope.region_scope == scope)\n-                .unwrap_or_else(|| span_bug!(span, \"no enclosing breakable scope found\"))\n-        };\n-        let (break_index, destination) = match target {\n-            BreakableTarget::Return => {\n-                let scope = &self.scopes.breakable_scopes[0];\n-                if scope.break_destination != Place::return_place() {\n-                    span_bug!(span, \"`return` in item with no return scope\");\n-                }\n-                (0, Some(scope.break_destination))\n-            }\n-            BreakableTarget::Break(scope) => {\n-                let break_index = get_scope_index(scope);\n-                let scope = &self.scopes.breakable_scopes[break_index];\n-                (break_index, Some(scope.break_destination))\n-            }\n-            BreakableTarget::Continue(scope) => {\n-                let break_index = get_scope_index(scope);\n-                (break_index, None)\n-            }\n-        };\n-\n+        let (mut target_block, region_scope, destination) =\n+            self.scopes.find_breakable_scope(source_info.span, scope);\n+        if let BreakableTarget::Return = scope {\n+            // We call this now, rather than when we start lowering the\n+            // function so that the return block doesn't precede the entire\n+            // rest of the CFG. Some passes and LLVM prefer blocks to be in\n+            // approximately CFG order.\n+            target_block = self.return_block();\n+        }\n         if let Some(destination) = destination {\n             if let Some(value) = value {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n@@ -623,57 +528,131 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         } else {\n             assert!(value.is_none(), \"`return` and `break` should have a destination\");\n         }\n-\n-        let region_scope = self.scopes.breakable_scopes[break_index].region_scope;\n-        let scope_index = self.scopes.scope_index(region_scope, span);\n-        let drops = if destination.is_some() {\n-            &mut self.scopes.breakable_scopes[break_index].break_drops\n-        } else {\n-            self.scopes.breakable_scopes[break_index].continue_drops.as_mut().unwrap()\n-        };\n-        let mut drop_idx = ROOT_NODE;\n-        for scope in &self.scopes.scopes[scope_index + 1..] {\n-            for drop in &scope.drops {\n-                drop_idx = drops.add_drop(*drop, drop_idx);\n-            }\n-        }\n-        drops.add_entry(block, drop_idx);\n-\n-        // `build_drop_tree` doesn't have access to our source_info, so we\n-        // create a dummy terminator now. `TerminatorKind::Resume` is used\n-        // because MIR type checking will panic if it hasn't been overwritten.\n-        self.cfg.terminate(block, source_info, TerminatorKind::Resume);\n-\n+        self.exit_scope(source_info.span, region_scope, block, target_block);\n         self.cfg.start_new_block().unit()\n     }\n \n-    crate fn exit_top_scope(\n+    /// Branch out of `block` to `target`, exiting all scopes up to\n+    /// and including `region_scope`. This will insert whatever drops are\n+    /// needed. See module comment for details.\n+    crate fn exit_scope(\n         &mut self,\n+        span: Span,\n+        region_scope: region::Scope,\n         mut block: BasicBlock,\n         target: BasicBlock,\n-        source_info: SourceInfo,\n     ) {\n-        block = self.leave_top_scope(block);\n-        self.cfg.terminate(block, source_info, TerminatorKind::Goto { target });\n-    }\n+        debug!(\n+            \"exit_scope(region_scope={:?}, block={:?}, target={:?})\",\n+            region_scope, block, target\n+        );\n+        let scope_count = self.scopes.num_scopes_above(region_scope, span);\n \n-    fn leave_top_scope(&mut self, block: BasicBlock) -> BasicBlock {\n         // If we are emitting a `drop` statement, we need to have the cached\n         // diverge cleanup pads ready in case that drop panics.\n-        let needs_cleanup = self.scopes.scopes.last().map_or(false, |scope| scope.needs_cleanup());\n-        let is_generator = self.generator_kind.is_some();\n-        let unwind_to = if needs_cleanup { self.diverge_cleanup() } else { DropIdx::MAX };\n-\n-        let scope = self.scopes.scopes.last().expect(\"leave_top_scope called with no scopes\");\n-        unpack!(build_scope_drops(\n-            &mut self.cfg,\n-            &mut self.scopes.unwind_drops,\n-            scope,\n-            block,\n-            unwind_to,\n-            is_generator && needs_cleanup,\n-            self.arg_count,\n-        ))\n+        let may_panic = self.scopes.may_panic(scope_count);\n+        if may_panic {\n+            self.diverge_cleanup();\n+        }\n+\n+        let mut scopes = self.scopes.top_scopes(scope_count + 1).rev();\n+        let mut scope = scopes.next().unwrap();\n+        for next_scope in scopes {\n+            if scope.drops.is_empty() {\n+                scope = next_scope;\n+                continue;\n+            }\n+            let source_info = scope.source_info(span);\n+            block = match scope.cached_exits.entry((target, region_scope)) {\n+                Entry::Occupied(e) => {\n+                    self.cfg.goto(block, source_info, *e.get());\n+                    return;\n+                }\n+                Entry::Vacant(v) => {\n+                    let b = self.cfg.start_new_block();\n+                    self.cfg.goto(block, source_info, b);\n+                    v.insert(b);\n+                    b\n+                }\n+            };\n+\n+            let unwind_to = next_scope.cached_unwind.get(false).unwrap_or_else(|| {\n+                debug_assert!(!may_panic, \"cached block not present?\");\n+                START_BLOCK\n+            });\n+\n+            unpack!(\n+                block = build_scope_drops(\n+                    &mut self.cfg,\n+                    self.generator_kind,\n+                    scope,\n+                    block,\n+                    unwind_to,\n+                    self.arg_count,\n+                    false, // not generator\n+                    false, // not unwind path\n+                )\n+            );\n+\n+            scope = next_scope;\n+        }\n+\n+        self.cfg.goto(block, self.scopes.source_info(scope_count, span), target);\n+    }\n+\n+    /// Creates a path that performs all required cleanup for dropping a generator.\n+    ///\n+    /// This path terminates in GeneratorDrop. Returns the start of the path.\n+    /// None indicates there\u2019s no cleanup to do at this point.\n+    crate fn generator_drop_cleanup(&mut self) -> Option<BasicBlock> {\n+        // Fill in the cache for unwinds\n+        self.diverge_cleanup_gen(true);\n+\n+        let src_info = self.scopes.source_info(self.scopes.len(), self.fn_span);\n+        let resume_block = self.resume_block();\n+        let mut scopes = self.scopes.iter_mut().peekable();\n+        let mut block = self.cfg.start_new_block();\n+        let result = block;\n+\n+        while let Some(scope) = scopes.next() {\n+            block = if let Some(b) = scope.cached_generator_drop {\n+                self.cfg.goto(block, src_info, b);\n+                return Some(result);\n+            } else {\n+                let b = self.cfg.start_new_block();\n+                scope.cached_generator_drop = Some(b);\n+                self.cfg.goto(block, src_info, b);\n+                b\n+            };\n+\n+            let unwind_to = scopes\n+                .peek()\n+                .as_ref()\n+                .map(|scope| {\n+                    scope\n+                        .cached_unwind\n+                        .get(true)\n+                        .unwrap_or_else(|| span_bug!(src_info.span, \"cached block not present?\"))\n+                })\n+                .unwrap_or(resume_block);\n+\n+            unpack!(\n+                block = build_scope_drops(\n+                    &mut self.cfg,\n+                    self.generator_kind,\n+                    scope,\n+                    block,\n+                    unwind_to,\n+                    self.arg_count,\n+                    true, // is generator\n+                    true, // is cached path\n+                )\n+            );\n+        }\n+\n+        self.cfg.terminate(block, src_info, TerminatorKind::GeneratorDrop);\n+\n+        Some(result)\n     }\n \n     /// Creates a new source scope, nested in the current one.\n@@ -749,6 +728,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    // Schedule an abort block - this is used for some ABIs that cannot unwind\n+    crate fn schedule_abort(&mut self) -> BasicBlock {\n+        let source_info = self.scopes.source_info(self.scopes.len(), self.fn_span);\n+        let abortblk = self.cfg.start_new_cleanup_block();\n+        self.cfg.terminate(abortblk, source_info, TerminatorKind::Abort);\n+        self.cached_resume_block = Some(abortblk);\n+        abortblk\n+    }\n+\n     // Scheduling drops\n     // ================\n     crate fn schedule_drop_storage_and_value(\n@@ -761,10 +749,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.schedule_drop(span, region_scope, local, DropKind::Value);\n     }\n \n-    /// Indicates that `place` should be dropped on exit from `region_scope`.\n+    /// Indicates that `place` should be dropped on exit from\n+    /// `region_scope`.\n     ///\n-    /// When called with `DropKind::Storage`, `place` shouldn't be the return\n-    /// place, or a function parameter.\n+    /// When called with `DropKind::Storage`, `place` should be a local\n+    /// with an index higher than the current `self.arg_count`.\n     crate fn schedule_drop(\n         &mut self,\n         span: Span,\n@@ -792,74 +781,70 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         };\n \n-        // When building drops, we try to cache chains of drops to reduce the\n-        // number of `DropTree::add_drop` calls. This, however, means that\n-        // whenever we add a drop into a scope which already had some entries\n-        // in the drop tree built (and thus, cached) for it, we must invalidate\n-        // all caches which might branch into the scope which had a drop just\n-        // added to it. This is necessary, because otherwise some other code\n-        // might use the cache to branch into already built chain of drops,\n-        // essentially ignoring the newly added drop.\n-        //\n-        // For example consider there\u2019s two scopes with a drop in each. These\n-        // are built and thus the caches are filled:\n-        //\n-        // +--------------------------------------------------------+\n-        // | +---------------------------------+                    |\n-        // | | +--------+     +-------------+  |  +---------------+ |\n-        // | | | return | <-+ | drop(outer) | <-+ |  drop(middle) | |\n-        // | | +--------+     +-------------+  |  +---------------+ |\n-        // | +------------|outer_scope cache|--+                    |\n-        // +------------------------------|middle_scope cache|------+\n-        //\n-        // Now, a new, inner-most scope is added along with a new drop into\n-        // both inner-most and outer-most scopes:\n-        //\n-        // +------------------------------------------------------------+\n-        // | +----------------------------------+                       |\n-        // | | +--------+      +-------------+  |   +---------------+   | +-------------+\n-        // | | | return | <+   | drop(new)   | <-+  |  drop(middle) | <--+| drop(inner) |\n-        // | | +--------+  |   | drop(outer) |  |   +---------------+   | +-------------+\n-        // | |             +-+ +-------------+  |                       |\n-        // | +---|invalid outer_scope cache|----+                       |\n-        // +----=----------------|invalid middle_scope cache|-----------+\n-        //\n-        // If, when adding `drop(new)` we do not invalidate the cached blocks for both\n-        // outer_scope and middle_scope, then, when building drops for the inner (right-most)\n-        // scope, the old, cached blocks, without `drop(new)` will get used, producing the\n-        // wrong results.\n-        //\n-        // Note that this code iterates scopes from the inner-most to the outer-most,\n-        // invalidating caches of each scope visited. This way bare minimum of the\n-        // caches gets invalidated. i.e., if a new drop is added into the middle scope, the\n-        // cache of outer scope stays intact.\n-        //\n-        // Since we only cache drops for the unwind path and the generator drop\n-        // path, we only need to invalidate the cache for drops that happen on\n-        // the unwind or generator drop paths. This means that for\n-        // non-generators we don't need to invalidate caches for `DropKind::Storage`.\n-        let invalidate_caches = needs_drop || self.generator_kind.is_some();\n-        for scope in self.scopes.scopes.iter_mut().rev() {\n-            if invalidate_caches {\n-                scope.invalidate_cache();\n-            }\n-\n-            if scope.region_scope == region_scope {\n+        for scope in self.scopes.iter_mut() {\n+            let this_scope = scope.region_scope == region_scope;\n+            // When building drops, we try to cache chains of drops in such a way so these drops\n+            // could be reused by the drops which would branch into the cached (already built)\n+            // blocks.  This, however, means that whenever we add a drop into a scope which already\n+            // had some blocks built (and thus, cached) for it, we must invalidate all caches which\n+            // might branch into the scope which had a drop just added to it. This is necessary,\n+            // because otherwise some other code might use the cache to branch into already built\n+            // chain of drops, essentially ignoring the newly added drop.\n+            //\n+            // For example consider there\u2019s two scopes with a drop in each. These are built and\n+            // thus the caches are filled:\n+            //\n+            // +--------------------------------------------------------+\n+            // | +---------------------------------+                    |\n+            // | | +--------+     +-------------+  |  +---------------+ |\n+            // | | | return | <-+ | drop(outer) | <-+ |  drop(middle) | |\n+            // | | +--------+     +-------------+  |  +---------------+ |\n+            // | +------------|outer_scope cache|--+                    |\n+            // +------------------------------|middle_scope cache|------+\n+            //\n+            // Now, a new, inner-most scope is added along with a new drop into both inner-most and\n+            // outer-most scopes:\n+            //\n+            // +------------------------------------------------------------+\n+            // | +----------------------------------+                       |\n+            // | | +--------+      +-------------+  |   +---------------+   | +-------------+\n+            // | | | return | <+   | drop(new)   | <-+  |  drop(middle) | <--+| drop(inner) |\n+            // | | +--------+  |   | drop(outer) |  |   +---------------+   | +-------------+\n+            // | |             +-+ +-------------+  |                       |\n+            // | +---|invalid outer_scope cache|----+                       |\n+            // +----=----------------|invalid middle_scope cache|-----------+\n+            //\n+            // If, when adding `drop(new)` we do not invalidate the cached blocks for both\n+            // outer_scope and middle_scope, then, when building drops for the inner (right-most)\n+            // scope, the old, cached blocks, without `drop(new)` will get used, producing the\n+            // wrong results.\n+            //\n+            // The cache and its invalidation for unwind branch is somewhat special. The cache is\n+            // per-drop, rather than per scope, which has a several different implications. Adding\n+            // a new drop into a scope will not invalidate cached blocks of the prior drops in the\n+            // scope. That is true, because none of the already existing drops will have an edge\n+            // into a block with the newly added drop.\n+            //\n+            // Note that this code iterates scopes from the inner-most to the outer-most,\n+            // invalidating caches of each scope visited. This way bare minimum of the\n+            // caches gets invalidated. i.e., if a new drop is added into the middle scope, the\n+            // cache of outer scope stays intact.\n+            scope.invalidate_cache(!needs_drop, self.generator_kind, this_scope);\n+            if this_scope {\n                 let region_scope_span =\n                     region_scope.span(self.hir.tcx(), &self.hir.region_scope_tree);\n                 // Attribute scope exit drops to scope's closing brace.\n                 let scope_end = self.hir.tcx().sess.source_map().end_point(region_scope_span);\n \n                 scope.drops.push(DropData {\n-                    source_info: SourceInfo { span: scope_end, scope: scope.source_scope },\n+                    span: scope_end,\n                     local,\n                     kind: drop_kind,\n+                    cached_block: CachedBlock::default(),\n                 });\n-\n                 return;\n             }\n         }\n-\n         span_bug!(span, \"region scope {:?} not in scope to drop {:?}\", region_scope, local);\n     }\n \n@@ -907,10 +892,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             Some(local_scope) => self\n-                .scopes\n                 .scopes\n                 .iter_mut()\n-                .rfind(|scope| scope.region_scope == local_scope)\n+                .find(|scope| scope.region_scope == local_scope)\n                 .unwrap_or_else(|| bug!(\"scope {:?} not found in scope list!\", local_scope)),\n         };\n \n@@ -960,16 +944,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // Manually drop the condition on both branches.\n                     let top_scope = self.scopes.scopes.last_mut().unwrap();\n                     let top_drop_data = top_scope.drops.pop().unwrap();\n-                    if self.generator_kind.is_some() {\n-                        top_scope.invalidate_cache();\n-                    }\n \n                     match top_drop_data.kind {\n                         DropKind::Value { .. } => {\n                             bug!(\"Drop scheduled on top of condition variable\")\n                         }\n                         DropKind::Storage => {\n-                            let source_info = top_drop_data.source_info;\n+                            let source_info = top_scope.source_info(top_drop_data.span);\n                             let local = top_drop_data.local;\n                             assert_eq!(local, cond_temp, \"Drop scheduled on top of condition\");\n                             self.cfg.push(\n@@ -982,6 +963,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             );\n                         }\n                     }\n+\n+                    top_scope.invalidate_cache(true, self.generator_kind, true);\n                 } else {\n                     bug!(\"Expected as_local_operand to produce a temporary\");\n                 }\n@@ -991,86 +974,62 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         (true_block, false_block)\n     }\n \n-    /// Returns the [DropIdx] for the innermost drop if the function unwound at\n-    /// this point. The `DropIdx` will be created if it doesn't already exist.\n-    fn diverge_cleanup(&mut self) -> DropIdx {\n-        let is_generator = self.generator_kind.is_some();\n-        let (uncached_scope, mut cached_drop) = self\n-            .scopes\n-            .scopes\n-            .iter()\n-            .enumerate()\n-            .rev()\n-            .find_map(|(scope_idx, scope)| {\n-                scope.cached_unwind_block.map(|cached_block| (scope_idx + 1, cached_block))\n-            })\n-            .unwrap_or((0, ROOT_NODE));\n-\n-        for scope in &mut self.scopes.scopes[uncached_scope..] {\n-            for drop in &scope.drops {\n-                if is_generator || drop.kind == DropKind::Value {\n-                    cached_drop = self.scopes.unwind_drops.add_drop(*drop, cached_drop);\n-                }\n-            }\n-            scope.cached_unwind_block = Some(cached_drop);\n-        }\n-\n-        cached_drop\n-    }\n-\n-    /// Prepares to create a path that performs all required cleanup for a\n-    /// terminator that can unwind at the given basic block.\n+    /// Creates a path that performs all required cleanup for unwinding.\n     ///\n-    /// This path terminates in Resume. The path isn't created until after all\n-    /// of the non-unwind paths in this item have been lowered.\n-    crate fn diverge_from(&mut self, start: BasicBlock) {\n-        debug_assert!(\n-            matches!(\n-                self.cfg.block_data(start).terminator().kind,\n-                TerminatorKind::Assert { .. }\n-                | TerminatorKind::Call {..}\n-                | TerminatorKind::DropAndReplace { .. }\n-                | TerminatorKind::FalseUnwind { .. }\n-            ),\n-            \"diverge_from called on block with terminator that cannot unwind.\"\n-        );\n+    /// This path terminates in Resume. Returns the start of the path.\n+    /// See module comment for more details.\n+    crate fn diverge_cleanup(&mut self) -> BasicBlock {\n+        self.diverge_cleanup_gen(false)\n+    }\n \n-        let next_drop = self.diverge_cleanup();\n-        self.scopes.unwind_drops.add_entry(start, next_drop);\n+    fn resume_block(&mut self) -> BasicBlock {\n+        if let Some(target) = self.cached_resume_block {\n+            target\n+        } else {\n+            let resumeblk = self.cfg.start_new_cleanup_block();\n+            self.cfg.terminate(\n+                resumeblk,\n+                SourceInfo::outermost(self.fn_span),\n+                TerminatorKind::Resume,\n+            );\n+            self.cached_resume_block = Some(resumeblk);\n+            resumeblk\n+        }\n     }\n \n-    /// Sets up a path that performs all required cleanup for dropping a\n-    /// generator, starting from the given block that ends in\n-    /// [TerminatorKind::Yield].\n-    ///\n-    /// This path terminates in GeneratorDrop.\n-    crate fn generator_drop_cleanup(&mut self, yield_block: BasicBlock) {\n-        debug_assert!(\n-            matches!(\n-                self.cfg.block_data(yield_block).terminator().kind,\n-                TerminatorKind::Yield { .. }\n-            ),\n-            \"generator_drop_cleanup called on block with non-yield terminator.\"\n-        );\n-        let (uncached_scope, mut cached_drop) = self\n-            .scopes\n-            .scopes\n-            .iter()\n-            .enumerate()\n-            .rev()\n-            .find_map(|(scope_idx, scope)| {\n-                scope.cached_generator_drop_block.map(|cached_block| (scope_idx + 1, cached_block))\n-            })\n-            .unwrap_or((0, ROOT_NODE));\n-\n-        for scope in &mut self.scopes.scopes[uncached_scope..] {\n-            for drop in &scope.drops {\n-                cached_drop = self.scopes.generator_drops.add_drop(*drop, cached_drop);\n-            }\n-            scope.cached_generator_drop_block = Some(cached_drop);\n+    fn diverge_cleanup_gen(&mut self, generator_drop: bool) -> BasicBlock {\n+        // Build up the drops in **reverse** order. The end result will\n+        // look like:\n+        //\n+        //    scopes[n] -> scopes[n-1] -> ... -> scopes[0]\n+        //\n+        // However, we build this in **reverse order**. That is, we\n+        // process scopes[0], then scopes[1], etc, pointing each one at\n+        // the result generates from the one before. Along the way, we\n+        // store caches. If everything is cached, we'll just walk right\n+        // to left reading the cached results but never created anything.\n+\n+        // Find the last cached block\n+        debug!(\"diverge_cleanup_gen(self.scopes = {:?})\", self.scopes);\n+        let cached_cleanup = self.scopes.iter_mut().enumerate().find_map(|(idx, ref scope)| {\n+            let cached_block = scope.cached_unwind.get(generator_drop)?;\n+            Some((cached_block, idx))\n+        });\n+        let (mut target, first_uncached) =\n+            cached_cleanup.unwrap_or_else(|| (self.resume_block(), self.scopes.len()));\n+\n+        for scope in self.scopes.top_scopes(first_uncached) {\n+            target = build_diverge_scope(\n+                &mut self.cfg,\n+                scope.region_scope_span,\n+                scope,\n+                target,\n+                generator_drop,\n+                self.generator_kind,\n+            );\n         }\n \n-        self.scopes.generator_drops.add_entry(yield_block, cached_drop);\n+        target\n     }\n \n     /// Utility function for *non*-scope code to build their own drops\n@@ -1083,18 +1042,21 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) -> BlockAnd<()> {\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-\n+        let diverge_target = self.diverge_cleanup();\n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::DropAndReplace { location, value, target: next_target, unwind: None },\n+            TerminatorKind::DropAndReplace {\n+                location,\n+                value,\n+                target: next_target,\n+                unwind: Some(diverge_target),\n+            },\n         );\n-        self.diverge_from(block);\n-\n         next_target.unit()\n     }\n \n-    /// Creates an `Assert` terminator and return the success block.\n+    /// Creates an Assert terminator and return the success block.\n     /// If the boolean condition operand is not the expected value,\n     /// a runtime panic will be caused with the given message.\n     crate fn assert(\n@@ -1106,41 +1068,51 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         span: Span,\n     ) -> BasicBlock {\n         let source_info = self.source_info(span);\n+\n         let success_block = self.cfg.start_new_block();\n+        let cleanup = self.diverge_cleanup();\n \n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::Assert { cond, expected, msg, target: success_block, cleanup: None },\n+            TerminatorKind::Assert {\n+                cond,\n+                expected,\n+                msg,\n+                target: success_block,\n+                cleanup: Some(cleanup),\n+            },\n         );\n-        self.diverge_from(block);\n \n         success_block\n     }\n \n+    // `match` arm scopes\n+    // ==================\n     /// Unschedules any drops in the top scope.\n     ///\n     /// This is only needed for `match` arm scopes, because they have one\n     /// entrance per pattern, but only one exit.\n-    crate fn clear_top_scope(&mut self, region_scope: region::Scope) {\n+    pub(crate) fn clear_top_scope(&mut self, region_scope: region::Scope) {\n         let top_scope = self.scopes.scopes.last_mut().unwrap();\n \n         assert_eq!(top_scope.region_scope, region_scope);\n \n         top_scope.drops.clear();\n-        top_scope.invalidate_cache();\n+        top_scope.invalidate_cache(false, self.generator_kind, true);\n     }\n }\n \n-/// Builds drops for `pop_scope` and `leave_top_scope`.\n+/// Builds drops for pop_scope and exit_scope.\n fn build_scope_drops<'tcx>(\n     cfg: &mut CFG<'tcx>,\n-    unwind_drops: &mut DropTree,\n+    generator_kind: Option<GeneratorKind>,\n     scope: &Scope,\n     mut block: BasicBlock,\n-    mut unwind_to: DropIdx,\n-    storage_dead_on_unwind: bool,\n+    last_unwind_to: BasicBlock,\n     arg_count: usize,\n+    generator_drop: bool,\n+    is_cached_path: bool,\n ) -> BlockAnd<()> {\n     debug!(\"build_scope_drops({:?} -> {:?})\", block, scope);\n \n@@ -1163,43 +1135,37 @@ fn build_scope_drops<'tcx>(\n     // drops for the unwind path should have already been generated by\n     // `diverge_cleanup_gen`.\n \n-    for drop_data in scope.drops.iter().rev() {\n-        let source_info = drop_data.source_info;\n+    for drop_idx in (0..scope.drops.len()).rev() {\n+        let drop_data = &scope.drops[drop_idx];\n+        let source_info = scope.source_info(drop_data.span);\n         let local = drop_data.local;\n \n         match drop_data.kind {\n             DropKind::Value => {\n-                // `unwind_to` should drop the value that we're about to\n-                // schedule. If dropping this value panics, then we continue\n-                // with the *next* value on the unwind path.\n-                debug_assert_eq!(unwind_drops.drops[unwind_to].0.local, drop_data.local);\n-                debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);\n-                unwind_to = unwind_drops.drops[unwind_to].1;\n-\n                 // If the operand has been moved, and we are not on an unwind\n                 // path, then don't generate the drop. (We only take this into\n                 // account for non-unwind paths so as not to disturb the\n                 // caching mechanism.)\n-                if scope.moved_locals.iter().any(|&o| o == local) {\n+                if !is_cached_path && scope.moved_locals.iter().any(|&o| o == local) {\n                     continue;\n                 }\n \n-                unwind_drops.add_entry(block, unwind_to);\n+                let unwind_to = get_unwind_to(scope, generator_kind, drop_idx, generator_drop)\n+                    .unwrap_or(last_unwind_to);\n \n                 let next = cfg.start_new_block();\n                 cfg.terminate(\n                     block,\n                     source_info,\n-                    TerminatorKind::Drop { location: local.into(), target: next, unwind: None },\n+                    TerminatorKind::Drop {\n+                        location: local.into(),\n+                        target: next,\n+                        unwind: Some(unwind_to),\n+                    },\n                 );\n                 block = next;\n             }\n             DropKind::Storage => {\n-                if storage_dead_on_unwind {\n-                    debug_assert_eq!(unwind_drops.drops[unwind_to].0.local, drop_data.local);\n-                    debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);\n-                    unwind_to = unwind_drops.drops[unwind_to].1;\n-                }\n                 // Only temps and vars need their storage dead.\n                 assert!(local.index() > arg_count);\n                 cfg.push(block, Statement { source_info, kind: StatementKind::StorageDead(local) });\n@@ -1209,189 +1175,139 @@ fn build_scope_drops<'tcx>(\n     block.unit()\n }\n \n-impl<'a, 'tcx: 'a> Builder<'a, 'tcx> {\n-    /// Build a drop tree for a breakable scope.\n-    ///\n-    /// If `continue_block` is `Some`, then the tree is for `continue` inside a\n-    /// loop. Otherwise this is for `break` or `return`.\n-    fn build_exit_tree(\n-        &mut self,\n-        mut drops: DropTree,\n-        continue_block: Option<BasicBlock>,\n-    ) -> Option<BlockAnd<()>> {\n-        let mut blocks = IndexVec::from_elem(None, &drops.drops);\n-        blocks[ROOT_NODE] = continue_block;\n-\n-        drops.build_mir::<ExitScopes>(&mut self.cfg, &mut blocks);\n-\n-        // Link the exit drop tree to unwind drop tree.\n-        if drops.drops.iter().any(|(drop, _)| drop.kind == DropKind::Value) {\n-            let unwind_target = self.diverge_cleanup();\n-            let mut unwind_indices = IndexVec::from_elem_n(unwind_target, 1);\n-            for (drop_idx, drop_data) in drops.drops.iter_enumerated().skip(1) {\n-                match drop_data.0.kind {\n-                    DropKind::Storage => {\n-                        if self.generator_kind.is_some() {\n-                            let unwind_drop = self\n-                                .scopes\n-                                .unwind_drops\n-                                .add_drop(drop_data.0, unwind_indices[drop_data.1]);\n-                            unwind_indices.push(unwind_drop);\n-                        } else {\n-                            unwind_indices.push(unwind_indices[drop_data.1]);\n-                        }\n-                    }\n-                    DropKind::Value => {\n-                        let unwind_drop = self\n-                            .scopes\n-                            .unwind_drops\n-                            .add_drop(drop_data.0, unwind_indices[drop_data.1]);\n-                        self.scopes\n-                            .unwind_drops\n-                            .add_entry(blocks[drop_idx].unwrap(), unwind_indices[drop_data.1]);\n-                        unwind_indices.push(unwind_drop);\n-                    }\n-                }\n+fn get_unwind_to(\n+    scope: &Scope,\n+    generator_kind: Option<GeneratorKind>,\n+    unwind_from: usize,\n+    generator_drop: bool,\n+) -> Option<BasicBlock> {\n+    for drop_idx in (0..unwind_from).rev() {\n+        let drop_data = &scope.drops[drop_idx];\n+        match (generator_kind, &drop_data.kind) {\n+            (Some(_), DropKind::Storage) => {\n+                return Some(drop_data.cached_block.get(generator_drop).unwrap_or_else(|| {\n+                    span_bug!(drop_data.span, \"cached block not present for {:?}\", drop_data)\n+                }));\n             }\n-        }\n-        blocks[ROOT_NODE].map(BasicBlock::unit)\n-    }\n-\n-    /// Build the unwind and generator drop trees.\n-    crate fn build_drop_trees(&mut self, should_abort: bool) {\n-        if self.generator_kind.is_some() {\n-            self.build_generator_drop_trees(should_abort);\n-        } else {\n-            Self::build_unwind_tree(\n-                &mut self.cfg,\n-                &mut self.scopes.unwind_drops,\n-                self.fn_span,\n-                should_abort,\n-                &mut None,\n-            );\n-        }\n-    }\n-\n-    fn build_generator_drop_trees(&mut self, should_abort: bool) {\n-        // Build the drop tree for dropping the generator while it's suspended.\n-        let drops = &mut self.scopes.generator_drops;\n-        let cfg = &mut self.cfg;\n-        let fn_span = self.fn_span;\n-        let mut blocks = IndexVec::from_elem(None, &drops.drops);\n-        drops.build_mir::<GeneratorDrop>(cfg, &mut blocks);\n-        if let Some(root_block) = blocks[ROOT_NODE] {\n-            cfg.terminate(\n-                root_block,\n-                SourceInfo::outermost(fn_span),\n-                TerminatorKind::GeneratorDrop,\n-            );\n-        }\n-\n-        // Build the drop tree for unwinding in the normal control flow paths.\n-        let resume_block = &mut None;\n-        let unwind_drops = &mut self.scopes.unwind_drops;\n-        Self::build_unwind_tree(cfg, unwind_drops, fn_span, should_abort, resume_block);\n-\n-        // Build the drop tree for unwinding when dropping a suspended\n-        // generator.\n-        //\n-        // This is a different tree to the standard unwind paths here to\n-        // prevent drop elaboration from creating drop flags that would have\n-        // to be captured by the generator. I'm not sure how important this\n-        // optimization is, but it is here.\n-        for (drop_idx, drop_data) in drops.drops.iter_enumerated() {\n-            if let DropKind::Value = drop_data.0.kind {\n-                debug_assert!(drop_data.1 < drops.drops.next_index());\n-                drops.entry_points.push((drop_data.1, blocks[drop_idx].unwrap()));\n+            (None, DropKind::Value) => {\n+                return Some(drop_data.cached_block.get(generator_drop).unwrap_or_else(|| {\n+                    span_bug!(drop_data.span, \"cached block not present for {:?}\", drop_data)\n+                }));\n             }\n-        }\n-        Self::build_unwind_tree(cfg, drops, fn_span, should_abort, resume_block);\n-    }\n-\n-    fn build_unwind_tree(\n-        cfg: &mut CFG<'tcx>,\n-        drops: &mut DropTree,\n-        fn_span: Span,\n-        should_abort: bool,\n-        resume_block: &mut Option<BasicBlock>,\n-    ) {\n-        let mut blocks = IndexVec::from_elem(None, &drops.drops);\n-        blocks[ROOT_NODE] = *resume_block;\n-        drops.build_mir::<Unwind>(cfg, &mut blocks);\n-        if let (None, Some(resume)) = (*resume_block, blocks[ROOT_NODE]) {\n-            // `TerminatorKind::Abort` is used for `#[unwind(aborts)]`\n-            // functions.\n-            let terminator =\n-                if should_abort { TerminatorKind::Abort } else { TerminatorKind::Resume };\n-\n-            cfg.terminate(resume, SourceInfo::outermost(fn_span), terminator);\n-\n-            *resume_block = blocks[ROOT_NODE];\n+            _ => (),\n         }\n     }\n+    None\n }\n \n-// DropTreeBuilder implementations.\n-\n-struct ExitScopes;\n-\n-impl<'tcx> DropTreeBuilder<'tcx> for ExitScopes {\n-    fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {\n-        cfg.start_new_block()\n-    }\n-    fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        cfg.block_data_mut(from).terminator_mut().kind = TerminatorKind::Goto { target: to };\n+fn build_diverge_scope<'tcx>(\n+    cfg: &mut CFG<'tcx>,\n+    span: Span,\n+    scope: &mut Scope,\n+    mut target: BasicBlock,\n+    generator_drop: bool,\n+    generator_kind: Option<GeneratorKind>,\n+) -> BasicBlock {\n+    // Build up the drops in **reverse** order. The end result will\n+    // look like:\n+    //\n+    //    [drops[n]] -...-> [drops[0]] -> [target]\n+    //\n+    // The code in this function reads from right to left. At each\n+    // point, we check for cached blocks representing the\n+    // remainder. If everything is cached, we'll just walk right to\n+    // left reading the cached results but never create anything.\n+\n+    let source_scope = scope.source_scope;\n+    let source_info = |span| SourceInfo { span, scope: source_scope };\n+\n+    // We keep track of StorageDead statements to prepend to our current block\n+    // and store them here, in reverse order.\n+    let mut storage_deads = vec![];\n+\n+    let mut target_built_by_us = false;\n+\n+    // Build up the drops. Here we iterate the vector in\n+    // *forward* order, so that we generate drops[0] first (right to\n+    // left in diagram above).\n+    debug!(\"build_diverge_scope({:?})\", scope.drops);\n+    for (j, drop_data) in scope.drops.iter_mut().enumerate() {\n+        debug!(\"build_diverge_scope drop_data[{}]: {:?}\", j, drop_data);\n+        // Only full value drops are emitted in the diverging path,\n+        // not StorageDead, except in the case of generators.\n+        //\n+        // Note: This may not actually be what we desire (are we\n+        // \"freeing\" stack storage as we unwind, or merely observing a\n+        // frozen stack)? In particular, the intent may have been to\n+        // match the behavior of clang, but on inspection eddyb says\n+        // this is not what clang does.\n+        match drop_data.kind {\n+            DropKind::Storage if generator_kind.is_some() => {\n+                storage_deads.push(Statement {\n+                    source_info: source_info(drop_data.span),\n+                    kind: StatementKind::StorageDead(drop_data.local),\n+                });\n+                if !target_built_by_us {\n+                    // We cannot add statements to an existing block, so we create a new\n+                    // block for our StorageDead statements.\n+                    let block = cfg.start_new_cleanup_block();\n+                    let source_info = SourceInfo { span: DUMMY_SP, scope: source_scope };\n+                    cfg.goto(block, source_info, target);\n+                    target = block;\n+                    target_built_by_us = true;\n+                }\n+                *drop_data.cached_block.ref_mut(generator_drop) = Some(target);\n+            }\n+            DropKind::Storage => {}\n+            DropKind::Value => {\n+                let cached_block = drop_data.cached_block.ref_mut(generator_drop);\n+                target = if let Some(cached_block) = *cached_block {\n+                    storage_deads.clear();\n+                    target_built_by_us = false;\n+                    cached_block\n+                } else {\n+                    push_storage_deads(cfg, target, &mut storage_deads);\n+                    let block = cfg.start_new_cleanup_block();\n+                    cfg.terminate(\n+                        block,\n+                        source_info(drop_data.span),\n+                        TerminatorKind::Drop {\n+                            location: drop_data.local.into(),\n+                            target,\n+                            unwind: None,\n+                        },\n+                    );\n+                    *cached_block = Some(block);\n+                    target_built_by_us = true;\n+                    block\n+                };\n+            }\n+        };\n     }\n-}\n+    push_storage_deads(cfg, target, &mut storage_deads);\n+    *scope.cached_unwind.ref_mut(generator_drop) = Some(target);\n \n-struct GeneratorDrop;\n+    assert!(storage_deads.is_empty());\n+    debug!(\"build_diverge_scope({:?}, {:?}) = {:?}\", scope, span, target);\n \n-impl<'tcx> DropTreeBuilder<'tcx> for GeneratorDrop {\n-    fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {\n-        cfg.start_new_block()\n-    }\n-    fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        let term = cfg.block_data_mut(from).terminator_mut();\n-        if let TerminatorKind::Yield { ref mut drop, .. } = term.kind {\n-            *drop = Some(to);\n-        } else {\n-            span_bug!(\n-                term.source_info.span,\n-                \"cannot enter generator drop tree from {:?}\",\n-                term.kind\n-            )\n-        }\n-    }\n+    target\n }\n \n-struct Unwind;\n-\n-impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n-    fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {\n-        cfg.start_new_cleanup_block()\n-    }\n-    fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        let term = &mut cfg.block_data_mut(from).terminator_mut();\n-        match &mut term.kind {\n-            TerminatorKind::Drop { unwind, .. }\n-            | TerminatorKind::DropAndReplace { unwind, .. }\n-            | TerminatorKind::FalseUnwind { unwind, .. }\n-            | TerminatorKind::Call { cleanup: unwind, .. }\n-            | TerminatorKind::Assert { cleanup: unwind, .. } => {\n-                *unwind = Some(to);\n-            }\n-            TerminatorKind::Goto { .. }\n-            | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::Resume\n-            | TerminatorKind::Abort\n-            | TerminatorKind::Return\n-            | TerminatorKind::Unreachable\n-            | TerminatorKind::Yield { .. }\n-            | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdges { .. }\n-            | TerminatorKind::InlineAsm { .. } => {\n-                span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n-            }\n-        }\n+fn push_storage_deads<'tcx>(\n+    cfg: &mut CFG<'tcx>,\n+    target: BasicBlock,\n+    storage_deads: &mut Vec<Statement<'tcx>>,\n+) {\n+    if storage_deads.is_empty() {\n+        return;\n     }\n+    let statements = &mut cfg.block_data_mut(target).statements;\n+    storage_deads.reverse();\n+    debug!(\n+        \"push_storage_deads({:?}), storage_deads={:?}, statements={:?}\",\n+        target, storage_deads, statements\n+    );\n+    storage_deads.append(statements);\n+    mem::swap(statements, storage_deads);\n+    assert!(storage_deads.is_empty());\n }"}, {"sha": "0c7f3bb2020a9de28ebcf17891d8c996e95dad4f", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -23,13 +23,13 @@ pub fn droppy() {\n // FIXME(eddyb) the `void @` forces a match on the instruction, instead of the\n // comment, that's `; call core::intrinsics::drop_in_place::<drop::SomeUniqueName>`\n // for the `v0` mangling, should switch to matching on that once `legacy` is gone.\n-// CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n-// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n-// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK-NOT: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK-NOT: {{(call|invoke) void @.*}}drop_in_place{{.*}}SomeUniqueName\n // The next line checks for the } that ends the function definition"}, {"sha": "de423cd907afee058a8732b9eba7accf64663372", "filename": "src/test/mir-opt/basic_assignment/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -47,14 +47,30 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n         _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        replace(_5 <- move _6) -> [return: bb1, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n+        replace(_5 <- move _6) -> [return: bb2, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n     }\n \n-    bb1: {\n-        drop(_6) -> [return: bb2, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n     }\n \n     bb2: {\n+        drop(_6) -> [return: bb6, unwind: bb4]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_4) -> bb1;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+    }\n+\n+    bb4 (cleanup): {\n+        drop(_5) -> bb3;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_6) -> bb4;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+    }\n+\n+    bb6: {\n         StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n         _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n                                          // ty::Const\n@@ -63,34 +79,18 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/basic_assignment.rs:10:11: 24:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_5) -> [return: bb3, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_5) -> [return: bb7, unwind: bb3]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb3: {\n+    bb7: {\n         StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-        drop(_4) -> [return: bb4, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> [return: bb8, unwind: bb1]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb4: {\n+    bb8: {\n         StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n         StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n         StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n         return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n     }\n-\n-    bb5 (cleanup): {\n-        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-    }\n-\n-    bb6 (cleanup): {\n-        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-    }\n-\n-    bb7 (cleanup): {\n-        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n-    }\n-\n-    bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n-    }\n }"}, {"sha": "259501c7de9515ede3c8d67f10bb532dfeb659f7", "filename": "src/test/mir-opt/box_expr/rustc.main.ElaborateDrops.before.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -14,7 +14,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = const S::new() -> [return: bb1, unwind: bb7]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        (*_2) = const S::new() -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n                                          // ty::Const\n                                          // + ty: fn() -> S {S::new}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -23,17 +23,25 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n-        _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_2) -> bb2;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n \n     bb2: {\n+        _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        drop(_2) -> bb4;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n         StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb3, unwind: bb5]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // ty::Const\n                                          // + ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -42,7 +50,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n+    bb5: {\n         StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n         StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n@@ -52,27 +60,19 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:6:11: 9:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-    }\n-\n-    bb4: {\n-        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n-    }\n-\n-    bb5 (cleanup): {\n-        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb6 (cleanup): {\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_2) -> bb8;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n+    bb8: {\n+        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n     }\n }"}, {"sha": "5c192979a86967564387d6b5d1783658d20c441f", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR.PromoteTemps.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -33,7 +33,7 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n                                            // ty::Const\n                                            // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -42,15 +42,15 @@\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb1: {\n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n+      }\n+  \n+      bb2: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n       }\n-  \n-      bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n-      }\n - }\n - \n - alloc0 (static: Y, size: 4, align: 4) {"}, {"sha": "649cea6493e4500eab9c7485cc93c9e4cdf3c1a0", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO.PromoteTemps.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -35,7 +35,7 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n                                            // ty::Const\n                                            // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -44,15 +44,15 @@\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb1: {\n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n+      }\n+  \n+      bb2: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n       }\n-  \n-      bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n-      }\n   }\n - \n - alloc2 (extern static: X)"}, {"sha": "16f937f3e7b5efd7fb33f0a787d50fadcb3bc130", "filename": "src/test/mir-opt/const_prop/boxes/rustc.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -35,10 +35,14 @@\n                                            // + span: $DIR/boxes.rs:12:25: 12:26\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n-          drop(_3) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          drop(_3) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n       }\n   \n-      bb1: {\n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n+      }\n+  \n+      bb2: {\n           StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n           _0 = const ();                   // scope 0 at $DIR/boxes.rs:11:11: 13:2\n                                            // ty::Const\n@@ -50,9 +54,5 @@\n           StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n           return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }\n-  \n-      bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n-      }\n   }\n   "}, {"sha": "3e7083ff62ecd3584a60780c548b791ada20b94e", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -21,56 +21,60 @@ fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15:\n \n     bb0: {\n         _9 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        switchInt(move _9) -> [0u32: bb7, 3u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        switchInt(move _9) -> [0u32: bb7, 3u32: bb11, otherwise: bb12]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb2: {\n+    bb2 (cleanup): {\n         nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n         goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb3: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n-    bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    bb4: {\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n-    bb5 (cleanup): {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb5: {\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb6: {\n         return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb7: {\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb10;                    // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb8: {\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb8 (cleanup): {\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb9: {\n-        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb5;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb10: {\n+        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    }\n+\n+    bb11: {\n         StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n         StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb11: {\n+    bb12: {\n         return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n }"}, {"sha": "06645860d842dbcaab8e808ebb65929fa601097e", "filename": "src/test/mir-opt/generator-storage-dead-unwind/rustc.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -39,16 +39,20 @@ yields ()\n         StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+    }\n+\n+    bb2: {\n         StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n         StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n         StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n         StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n         _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _7 = const take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n                                          // ty::Const\n                                          // + ty: fn(Foo) {take::<Foo>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -57,80 +61,76 @@ yields ()\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb2: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _9 = const take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-                                         // ty::Const\n-                                         // + ty: fn(Bar) {take::<Bar>}\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n-                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n-    }\n-\n-    bb3: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    bb3 (cleanup): {\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb4, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n-    }\n-\n-    bb5: {\n         StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n         StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n         StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_3) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_3) -> [return: bb5, unwind: bb3]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb6, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n-    bb7: {\n+    bb6: {\n         generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n     }\n \n+    bb7: {\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+                                         // ty::Const\n+                                         // + ty: fn(Bar) {take::<Bar>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n+                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n     bb8 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb9 (cleanup): {\n         StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n         StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n-    bb10 (cleanup): {\n+    bb10: {\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n-    bb12 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    bb12: {\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n     }\n }"}, {"sha": "f5d8b84812a3e15f53490aac02a5e0971414c72a", "filename": "src/test/mir-opt/graphviz/rustc.main.mir_map.0.dot", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -3,5 +3,8 @@ digraph Mir_0_3 {\n     node [fontname=\"monospace\"];\n     edge [fontname=\"monospace\"];\n     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n-    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">return</td></tr></table>>];\n+    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n+    bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n+    bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n+    bb0__0_3 -> bb2__0_3 [label=\"\"];\n }"}, {"sha": "50913de98b506f8e220c89aa27fb077c9d8c77f8", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n@@ -31,7 +31,11 @@\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n--     bb1: {\n+-     bb1 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+-     }\n+- \n+-     bb2: {\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n@@ -51,29 +55,28 @@\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb2: {\n-+     bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     bb3: {\n+-         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n       }\n   \n--     bb3 (cleanup): {\n-+     bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n--     }\n-- \n -     bb4 (cleanup): {\n--         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // ty::Const\n -                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++     bb2: {\n++         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "7a1b6460c5bb3467cf8b043d4417e8639970cd0c", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n@@ -31,7 +31,11 @@\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n--     bb1: {\n+-     bb1 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+-     }\n+- \n+-     bb2: {\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n@@ -51,29 +55,28 @@\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb2: {\n-+     bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     bb3: {\n+-         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n       }\n   \n--     bb3 (cleanup): {\n-+     bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n--     }\n-- \n -     bb4 (cleanup): {\n--         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // ty::Const\n -                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++     bb2: {\n++         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "fa7bd2563ae44d71c1740334e9eaa3c77e922d70", "filename": "src/test/mir-opt/issue-38669/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -21,26 +21,30 @@ fn main() -> () {\n                                          // + span: $DIR/issue-38669.rs:5:28: 5:33\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n-        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb6]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n     }\n \n     bb2: {\n+        falseUnwind -> [real: bb3, cleanup: bb1]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+    }\n+\n+    bb3: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         FakeRead(ForMatchedPlace, _4);   // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        switchInt(_4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        switchInt(_4) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n-    bb3: {\n-        falseEdges -> [real: bb5, imaginary: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+    bb4: {\n+        falseEdges -> [real: bb6, imaginary: bb5]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n-    bb4: {\n+    bb5: {\n         _3 = const ();                   // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n                                          // ty::Const\n                                          // + ty: ()\n@@ -64,10 +68,10 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-38669.rs:6:10: 11:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb5: {\n+    bb6: {\n         _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n                                          // ty::Const\n                                          // + ty: ()\n@@ -80,8 +84,4 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n         return;                          // scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n     }\n-\n-    bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n-    }\n }"}, {"sha": "77763f2d3a0d1b3588ef16b6df064255201e030b", "filename": "src/test/mir-opt/issue-41110/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -32,7 +32,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n         StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _4 = S;                          // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n-        _3 = const S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+        _3 = const S::id(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n                                          // ty::Const\n                                          // + ty: fn(S) -> S {S::id}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -41,7 +41,11 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n+    }\n+\n+    bb2: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // ty::Const\n@@ -50,7 +54,7 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:13: 8:28\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _1 = const S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+        _1 = const S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // ty::Const\n                                          // + ty: fn(S, S) {S::other}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -59,7 +63,19 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb2: {\n+    bb3 (cleanup): {\n+        goto -> bb9;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb4 (cleanup): {\n+        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n+    }\n+\n+    bb5 (cleanup): {\n+        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb6: {\n         StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n                                          // ty::Const\n@@ -80,27 +96,22 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n     }\n \n-    bb3 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n-\n-    bb4 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n-    }\n-\n-    bb5 (cleanup): {\n-        goto -> bb8;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n-\n-    bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n-    }\n-\n     bb7 (cleanup): {\n-        drop(_2) -> bb6;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb8 (cleanup): {\n-        switchInt(_5) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:27: 8:28\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb7;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb9 (cleanup): {\n+        switchInt(_5) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n }"}, {"sha": "a99846bd15daf4a76bd6bf385c1930b72dce4141", "filename": "src/test/mir-opt/issue-41110/rustc.test.ElaborateDrops.after.mir", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -37,7 +37,7 @@ fn test() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n         StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n-        _3 = const std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        _3 = const std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n                                          // ty::Const\n                                          // + ty: fn(S) {std::mem::drop::<S>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -46,7 +46,11 @@ fn test() -> () {\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n+    }\n+\n+    bb2: {\n         StorageDead(_4);                 // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n         StorageDead(_3);                 // scope 2 at $DIR/issue-41110.rs:17:12: 17:13\n         StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n@@ -61,11 +65,27 @@ fn test() -> () {\n         goto -> bb12;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n-    bb2: {\n-        goto -> bb3;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+    bb3 (cleanup): {\n+        goto -> bb15;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb4 (cleanup): {\n+        goto -> bb3;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb5 (cleanup): {\n+        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n+    }\n+\n+    bb6: {\n+        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+    }\n+\n+    bb7 (cleanup): {\n+        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n-    bb3: {\n+    bb8: {\n         StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n                                          // ty::Const\n@@ -74,15 +94,15 @@ fn test() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:14:15: 19:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_2) -> [return: bb9, unwind: bb3]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb4: {\n+    bb9: {\n         StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb5: {\n+    bb10: {\n         _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n                                          // ty::Const\n                                          // + ty: bool\n@@ -94,41 +114,32 @@ fn test() -> () {\n         return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n     }\n \n-    bb6 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-    }\n-\n-    bb7 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n-    }\n-\n-    bb8 (cleanup): {\n-        goto -> bb9;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-    }\n-\n-    bb9 (cleanup): {\n-        goto -> bb14;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-    }\n-\n-    bb10 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n-    }\n-\n     bb11 (cleanup): {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb7;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb12: {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb2;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb13 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb14 (cleanup): {\n-        switchInt(_6) -> [false: bb10, otherwise: bb13]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:19:1: 19:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb13;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb15 (cleanup): {\n+        switchInt(_6) -> [false: bb1, otherwise: bb14]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n }"}, {"sha": "d263b2515f17a5267e9b449c814378961751f389", "filename": "src/test/mir-opt/issue-41697/32bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -18,15 +18,15 @@\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb1: {\n-        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    bb2: {\n+        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n }"}, {"sha": "6c00f49fb75b1590f697e5f8aa88bffcc8d150d9", "filename": "src/test/mir-opt/issue-41697/64bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -18,15 +18,15 @@\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb1: {\n-        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    bb2: {\n+        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n }"}, {"sha": "ce940273c3ef5e1474927133a82a06e06bd84b67", "filename": "src/test/mir-opt/issue-41888/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 55, "deletions": 44, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -44,7 +44,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = const cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = const cond() -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // ty::Const\n                                          // + ty: fn() -> bool {cond}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -53,22 +53,30 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n-        switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n     }\n \n     bb2: {\n+        switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+    }\n+\n+    bb3 (cleanup): {\n+        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    }\n+\n+    bb4: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:5: 14:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n-    bb3: {\n+    bb5: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageLive(_4);                 // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n@@ -77,28 +85,32 @@ fn main() -> () {\n         goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb4: {\n-        goto -> bb5;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    bb6: {\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n-    bb5: {\n+    bb7 (cleanup): {\n+        goto -> bb3;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    }\n+\n+    bb8: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0isize: bb7, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0isize: bb10, otherwise: bb9]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n-    bb6: {\n+    bb9: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:10:9: 13:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb7: {\n+    bb10: {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n                                          // ty::Const\n@@ -116,14 +128,14 @@ fn main() -> () {\n                                          // + span: $DIR/issue-41888.rs:10:29: 13:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb8: {\n-        goto -> bb20;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb11: {\n+        goto -> bb21;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb9: {\n+    bb12: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n                                          // ty::Const\n                                          // + ty: bool\n@@ -150,18 +162,6 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n-    bb10 (cleanup): {\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-    }\n-\n-    bb11 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-    }\n-\n-    bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n-    }\n-\n     bb13 (cleanup): {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n                                          // ty::Const\n@@ -185,7 +185,7 @@ fn main() -> () {\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb14: {\n@@ -211,7 +211,7 @@ fn main() -> () {\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb6;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb15: {\n@@ -222,36 +222,47 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:15:1: 15:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        goto -> bb9;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb16 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:15:1: 15:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb17: {\n-        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb17 (cleanup): {\n+        goto -> bb16;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb18 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb18: {\n+        drop(_1) -> [return: bb15, unwind: bb16]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb19: {\n-        _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb19 (cleanup): {\n+        drop(_1) -> bb16;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb20: {\n-        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0isize: bb15, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb21 (cleanup): {\n-        _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb21: {\n+        switchInt(_7) -> [false: bb15, otherwise: bb20]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb22 (cleanup): {\n-        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0isize: bb17, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    }\n+\n+    bb23 (cleanup): {\n+        switchInt(_7) -> [false: bb16, otherwise: bb22]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n }"}, {"sha": "abf33cce133dd9947eadd3dc1fda6a36dfe77723", "filename": "src/test/mir-opt/issue-49232/rustc.main.mir_map.0.mir", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -17,10 +17,14 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+        falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n     bb2: {\n+        goto -> bb14;                    // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n+    }\n+\n+    bb3: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n@@ -31,36 +35,50 @@ fn main() -> () {\n                                          // + span: $DIR/issue-49232.rs:8:19: 8:23\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+        switchInt(_3) -> [false: bb5, otherwise: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n-    bb3: {\n-        falseEdges -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+    bb4 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+    }\n+\n+    bb5: {\n+        falseEdges -> [real: bb7, imaginary: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n-    bb4: {\n+    bb6: {\n         _0 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:10:25: 10:30\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb10;                    // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n-    bb5: {\n+    bb7: {\n         _2 = const 4i32;                 // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:9:26: 9:27\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n-    bb6: {\n+    bb8: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n+        goto -> bb9;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    }\n+\n+    bb9: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n+        goto -> bb2;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    }\n+\n+    bb10: {\n         _4 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n                                          // ty::Const\n                                          // + ty: ()\n@@ -71,17 +89,17 @@ fn main() -> () {\n         unreachable;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n-    bb7: {\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+    bb11: {\n+        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n-    bb8: {\n+    bb12: {\n         FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n         StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n         _6 = &_2;                        // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n-        _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n+        _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n                                          // ty::Const\n                                          // + ty: fn(&i32) {std::mem::drop::<&i32>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -90,7 +108,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb9: {\n+    bb13: {\n         StorageDead(_6);                 // scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n         StorageDead(_5);                 // scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n         _1 = const ();                   // scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n@@ -104,13 +122,7 @@ fn main() -> () {\n         goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n-    bb10: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n+    bb14: {\n         return;                          // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n     }\n-\n-    bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n-    }\n }"}, {"sha": "0b8b03961f2a013e6f5d7edd9e43f22922a079fc", "filename": "src/test/mir-opt/issue-62289/rustc.test.ElaborateDrops.before.mir", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -30,7 +30,7 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = std::option::Option::<u32>::None; // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // ty::Const\n                                          // + ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -39,32 +39,40 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n+    }\n+\n+    bb2: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        switchInt(move _5) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        switchInt(move _5) -> [0isize: bb4, 1isize: bb6, otherwise: bb5]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n-    bb2: {\n+    bb3 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb4: {\n         StorageLive(_10);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> [return: bb12, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb3: {\n+    bb5: {\n         unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n-    bb4: {\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _6 = ((_3 as Err).0: std::option::NoneError); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // ty::Const\n                                          // + ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -73,9 +81,13 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n+    bb7: {\n+        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    }\n+\n+    bb8: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // ty::Const\n                                          // + ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -84,44 +96,32 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n+    bb9: {\n         StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-    }\n-\n-    bb7: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        drop(_2) -> bb10;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n-    }\n-\n-    bb9: {\n+    bb10: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n-    }\n-\n-    bb10: {\n-        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n     bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb12 (cleanup): {\n-        drop(_2) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    bb12: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb13 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n+    bb13: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n }"}, {"sha": "38e04a6399fc239edc2ef7b03f0fd8a3c715e06e", "filename": "src/test/mir-opt/loop_test/rustc.main.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -23,14 +23,18 @@ fn main() -> () {\n                                          // + span: $DIR/loop_test.rs:10:8: 10:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        switchInt(_2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     }\n \n     bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+    }\n+\n+    bb3: {\n         _1 = const ();                   // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n                                          // ty::Const\n                                          // + ty: ()\n@@ -41,10 +45,10 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageLive(_4);                 // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n-        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n-    bb3: {\n+    bb4: {\n         _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n                                          // ty::Const\n                                          // + ty: ()\n@@ -57,11 +61,11 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2\n     }\n \n-    bb4: {\n-        falseUnwind -> [real: bb5, cleanup: bb6]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+    bb5: {\n+        falseUnwind -> [real: bb6, cleanup: bb1]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n-    bb5: {\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1i32;                 // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n                                          // ty::Const\n@@ -72,10 +76,6 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n-        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n-    }\n-\n-    bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n+        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:15:9: 15:17\n     }\n }"}, {"sha": "856248e90d495dac63e2b23d4e4823657cf76fc8", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.ElaborateDrops.after.mir", "status": "modified", "additions": 69, "deletions": 59, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -30,54 +30,58 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb0: {\n-        switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n+        switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n     }\n \n-    bb1: {\n-        switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n     }\n \n     bb2: {\n-        switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n+        switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n     }\n \n     bb3: {\n+        switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n+    }\n+\n+    bb4: {\n         StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n         _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n         StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n         _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb4: {\n+    bb5: {\n         _0 = const 1i32;                 // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        drop(_7) -> [return: bb15, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        drop(_7) -> [return: bb19, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n     }\n \n-    bb5: {\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n         _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n         StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n         StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_10) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(_10) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb6: {\n+    bb7: {\n         _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n         StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb7: {\n+    bb8: {\n         _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n@@ -87,43 +91,57 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n-    bb8: {\n+    bb9: {\n+        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n+    }\n+\n+    bb10 (cleanup): {\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    }\n+\n+    bb11: {\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    }\n+\n+    bb12: {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n         _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb9: {\n+    bb13: {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb10: {\n+    bb14: {\n         StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n         _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n         StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n         StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_13) -> [false: bb11, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(_13) -> [false: bb15, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb11: {\n+    bb15: {\n         _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n         StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(move _12) -> [false: bb18, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb12: {\n+    bb16: {\n         _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n@@ -133,93 +151,85 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n-    bb13: {\n+    bb17: {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n         _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb14: {\n+    bb18: {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        goto -> bb3;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb15: {\n+    bb19: {\n         StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb16: {\n+    bb20: {\n         _0 = const 2i32;                 // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        drop(_16) -> [return: bb22, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n     }\n \n-    bb17: {\n+    bb21: {\n         StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n         _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n         StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n         _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb18: {\n+    bb22: {\n         StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n         StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n-        goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb19: {\n-        goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb23: {\n+        goto -> bb29;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb20: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        drop(_2) -> [return: bb21, unwind: bb23]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb24 (cleanup): {\n+        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb21: {\n-        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n-    }\n-\n-    bb22 (cleanup): {\n-        goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb23 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n+    bb25 (cleanup): {\n+        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb24: {\n-        goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb26: {\n+        goto -> bb9;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb25 (cleanup): {\n-        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb27 (cleanup): {\n+        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb26: {\n-        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb28 (cleanup): {\n+        goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb27 (cleanup): {\n-        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb29: {\n+        goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n }"}, {"sha": "63974bda26038f97c8072734c6c2846a798f7992", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 64, "deletions": 62, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -31,49 +31,53 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n+        switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb8, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n     }\n \n     bb2: {\n-        switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n+        falseEdges -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb14, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n+        switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n     }\n \n     bb4: {\n-        switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n+        falseEdges -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n     }\n \n     bb5: {\n-        falseEdges -> [real: bb22, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n+        switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n     }\n \n     bb6: {\n+        falseEdges -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n+    }\n+\n+    bb7: {\n         StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n         _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n         StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n         _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb7: {\n+    bb8: {\n         _0 = const 1i32;                 // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        drop(_7) -> [return: bb20, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        drop(_7) -> [return: bb24, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n     }\n \n-    bb8: {\n+    bb9: {\n         StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n@@ -84,20 +88,20 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         FakeRead(ForMatchedPlace, _10);  // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(_10) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb9: {\n-        falseEdges -> [real: bb11, imaginary: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+    bb10: {\n+        falseEdges -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb10: {\n+    bb11: {\n         _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n         StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(move _9) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb11: {\n+    bb12: {\n         _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n@@ -107,10 +111,24 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n-    bb12: {\n+    bb13: {\n+        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n+    }\n+\n+    bb14 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    }\n+\n+    bb15: {\n+        drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    }\n+\n+    bb16: {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n@@ -120,17 +138,17 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n         _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb13: {\n+    bb17: {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        falseEdges -> [real: bb2, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdges -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb14: {\n+    bb18: {\n         StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n@@ -141,20 +159,20 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         FakeRead(ForMatchedPlace, _13);  // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_13) -> [false: bb16, otherwise: bb15]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(_13) -> [false: bb20, otherwise: bb19]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb15: {\n-        falseEdges -> [real: bb17, imaginary: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+    bb19: {\n+        falseEdges -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb16: {\n+    bb20: {\n         _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n         StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _12) -> [false: bb19, otherwise: bb18]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(move _12) -> [false: bb23, otherwise: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb17: {\n+    bb21: {\n         _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n@@ -164,10 +182,12 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n-    bb18: {\n+    bb22: {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n@@ -177,68 +197,50 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n         _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb19: {\n+    bb23: {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        falseEdges -> [real: bb4, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdges -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb20: {\n+    bb24: {\n         StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb21: {\n+    bb25: {\n         _0 = const 2i32;                 // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        drop(_16) -> [return: bb23, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        drop(_16) -> [return: bb27, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n     }\n \n-    bb22: {\n+    bb26: {\n         StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n         _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n         StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n         _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb23: {\n+    bb27: {\n         StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n         StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n-        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb24: {\n-        drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb25: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb26: {\n-        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n-    }\n-\n-    bb27 (cleanup): {\n-        drop(_2) -> bb28;                // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb28 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n+    bb28: {\n+        drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n }"}, {"sha": "db888bc4b87b2fecc4aee5a37eff341a0e8acec7", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -35,10 +35,14 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n-        switchInt(move _3) -> [0isize: bb1, 1isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+    }\n+\n+    bb2: {\n         _1 = (const 3i32, const 3i32);   // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n                                          // ty::Const\n                                          // + ty: i32\n@@ -52,22 +56,22 @@ fn full_tested_match() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:18:21: 18:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n-    }\n-\n-    bb2: {\n-        falseEdges -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n+        falseEdges -> [real: bb6, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        falseEdges -> [real: bb10, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n     }\n \n     bb5: {\n+        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+    }\n+\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n@@ -79,7 +83,7 @@ fn full_tested_match() -> () {\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-        _7 = const guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -88,11 +92,11 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n-        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+    bb7: {\n+        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n-    bb7: {\n+    bb8: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n@@ -110,16 +114,16 @@ fn full_tested_match() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n-    bb8: {\n+    bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        goto -> bb4;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n-    bb9: {\n+    bb10: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n@@ -133,10 +137,10 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:26: 17:27\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n@@ -148,8 +152,4 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n     }\n-\n-    bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n-    }\n }"}, {"sha": "96aa9e828d7842d6f1e87b09dc76ace575e99080", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -34,18 +34,22 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-        switchInt(move _3) -> [0isize: bb1, 1isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb9, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        falseEdges -> [real: bb10, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n     }\n \n     bb3: {\n+        falseEdges -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+    }\n+\n+    bb4: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n@@ -59,19 +63,19 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:26: 29:27\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb4: {\n+    bb5: {\n         unreachable;                     // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n     }\n \n-    bb5: {\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-        _7 = const guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -80,11 +84,11 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n-        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+    bb7: {\n+        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n-    bb7: {\n+    bb8: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n@@ -102,16 +106,16 @@ fn full_tested_match2() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb8: {\n+    bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        falseEdges -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        falseEdges -> [real: bb4, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n-    bb9: {\n+    bb10: {\n         _1 = (const 3i32, const 3i32);   // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n                                          // ty::Const\n                                          // + ty: i32\n@@ -125,10 +129,10 @@ fn full_tested_match2() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:28:21: 28:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n@@ -140,8 +144,4 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n     }\n-\n-    bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n-    }\n }"}, {"sha": "63a7c4bc43d7ad57e4183959570e37b6b686b20d", "filename": "src/test/mir-opt/match_false_edges/rustc.main.PromoteTemps.before.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -45,18 +45,22 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-        switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        switchInt(move _4) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        falseEdges -> [real: bb10, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n     }\n \n     bb3: {\n+        falseEdges -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+    }\n+\n+    bb4: {\n         StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _1 = const 4i32;                 // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n@@ -67,19 +71,19 @@ fn main() -> () {\n                                          // + span: $DIR/match_false_edges.rs:39:15: 39:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:39:16: 39:17\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb4: {\n-        falseEdges -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+    bb5: {\n+        falseEdges -> [real: bb11, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n     }\n \n-    bb5: {\n+    bb6: {\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-        _8 = const guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        _8 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -88,11 +92,11 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n-        switchInt(move _8) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+    bb7: {\n+        switchInt(move _8) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n-    bb7: {\n+    bb8: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n         FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n@@ -107,16 +111,16 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb8: {\n+    bb9: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        falseEdges -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        falseEdges -> [real: bb2, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n-    bb9: {\n+    bb10: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _1 = const 2i32;                 // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n@@ -127,17 +131,17 @@ fn main() -> () {\n                                          // + span: $DIR/match_false_edges.rs:37:15: 37:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:16: 37:17\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n         StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n         _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-        _12 = const guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        _12 = const guard2(move _13) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n                                          // ty::Const\n                                          // + ty: fn(i32) -> bool {guard2}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -146,12 +150,12 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb11: {\n+    bb12: {\n         StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n-    bb12: {\n+    bb13: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n@@ -166,16 +170,16 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb13: {\n+    bb14: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        falseEdges -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        falseEdges -> [real: bb4, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n-    bb14: {\n+    bb15: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n@@ -187,8 +191,4 @@ fn main() -> () {\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n     }\n-\n-    bb15 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n-    }\n }"}, {"sha": "3e0867d9b09d9833c5d9c45ab062b16fc1b5657a", "filename": "src/test/mir-opt/nll/region-subtyping-basic/32bit/rustc.main.nll.0.mir", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -5,21 +5,21 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n-| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n-| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n+| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n+| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#3r live at {bb1[0]}\n-| '_#4r live at {bb1[1..=3]}\n-| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n+| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#3r live at {bb2[0]}\n+| '_#4r live at {bb2[1..=3]}\n+| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n@@ -76,34 +76,38 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n-    bb1: {\n-        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n-        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    }\n+\n+    bb2: {\n+        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+    bb3: {\n+        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb3: {\n-        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+    bb4: {\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -118,11 +122,11 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000016)) }\n     }\n \n-    bb4: {\n-        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    bb5: {\n+        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -131,41 +135,37 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n-        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+    bb6: {\n+        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb6: {\n-        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+    bb7: {\n+        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb7: {\n-        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb8: {\n+        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n }"}, {"sha": "61db4dba5862755a96cb56034295a631fbdd79f9", "filename": "src/test/mir-opt/nll/region-subtyping-basic/64bit/rustc.main.nll.0.mir", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -5,21 +5,21 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n-| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n-| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n+| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n+| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#3r live at {bb1[0]}\n-| '_#4r live at {bb1[1..=3]}\n-| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n+| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#3r live at {bb2[0]}\n+| '_#4r live at {bb2[1..=3]}\n+| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n@@ -76,34 +76,38 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n-    bb1: {\n-        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n-        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    }\n+\n+    bb2: {\n+        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+    bb3: {\n+        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb3: {\n-        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+    bb4: {\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -118,11 +122,11 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000016)) }\n     }\n \n-    bb4: {\n-        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    bb5: {\n+        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -131,41 +135,37 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n-        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+    bb6: {\n+        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb6: {\n-        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+    bb7: {\n+        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb7: {\n-        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb8: {\n+        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n }"}, {"sha": "eb6911735a59e3d8911453524e70a804f5740fda", "filename": "src/test/mir-opt/no-drop-for-inactive-variant/rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -14,12 +14,16 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n-        switchInt(move _2) -> [0isize: bb1, 1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+        switchInt(move _2) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n+    }\n+\n+    bb2: {\n         StorageLive(_4);                 // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n-        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5; // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -34,11 +38,11 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n     }\n \n-    bb2: {\n+    bb3: {\n         unreachable;                     // scope 0 at $DIR/no-drop-for-inactive-variant.rs:8:11: 8:14\n     }\n \n-    bb3: {\n+    bb4: {\n         StorageLive(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n         _3 = move ((_1 as Some).0: T);   // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n         _0 = move _3;                    // scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n@@ -47,11 +51,7 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n         return;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:2: 12:2\n     }\n \n-    bb4 (cleanup): {\n-        drop(_1) -> bb5;                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n-    }\n-\n     bb5 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n     }\n }"}, {"sha": "0af213e425fe453b1a2dbf078fd7cf94ea439f07", "filename": "src/test/mir-opt/no-spurious-drop-after-call/rustc.main.ElaborateDrops.before.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -20,7 +20,7 @@ fn main() -> () {\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-        _2 = const <str as std::string::ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+        _2 = const <str as std::string::ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -29,9 +29,13 @@ fn main() -> () {\n                                          // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n+    }\n+\n+    bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n-        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // ty::Const\n                                          // + ty: fn(std::string::String) {std::mem::drop::<std::string::String>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -40,7 +44,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb2: {\n+    bb3: {\n         StorageDead(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n         StorageDead(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         StorageDead(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n@@ -54,11 +58,7 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n     }\n \n-    bb3 (cleanup): {\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n-    }\n-\n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n     }\n }"}, {"sha": "21dab9ab923946c9a7110c7e65e23796d052ee54", "filename": "src/test/mir-opt/packed-struct-drop-aligned/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -43,18 +43,18 @@ fn main() -> () {\n         drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n-    bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n-        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n     }\n \n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n     bb3 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n@@ -68,6 +68,6 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "cf46f74c16df35b2d999f0cc99c151dc63cc4bac", "filename": "src/test/mir-opt/packed-struct-drop-aligned/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -43,18 +43,18 @@ fn main() -> () {\n         drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n-    bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n-        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n     }\n \n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n     bb3 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n@@ -68,6 +68,6 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "c8c5da37abe32abf88be8431669a6d8b17195962", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -82,7 +82,7 @@ fn main() -> () {\n         Retag(_7);                       // scope 1 at $DIR/retag.rs:32:29: 32:35\n         _6 = &mut (*_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:32:29: 32:35\n-        _3 = const Test::foo(move _4, move _6) -> [return: bb1, unwind: bb7]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n+        _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n                                          // ty::Const\n                                          // + ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -91,15 +91,23 @@ fn main() -> () {\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n+    }\n+\n+    bb2: {\n         Retag(_3);                       // scope 1 at $DIR/retag.rs:32:17: 32:36\n         StorageDead(_6);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_4);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_7);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_5) -> [return: bb4, unwind: bb1]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n     }\n \n-    bb2: {\n+    bb3 (cleanup): {\n+        drop(_5) -> bb1;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+    }\n+\n+    bb4: {\n         StorageDead(_5);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n         StorageLive(_8);                 // scope 2 at $DIR/retag.rs:33:13: 33:14\n         StorageLive(_9);                 // scope 2 at $DIR/retag.rs:33:19: 33:20\n@@ -151,10 +159,10 @@ fn main() -> () {\n         Retag(_18);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n         _17 = &(*_18);                   // scope 6 at $DIR/retag.rs:44:16: 44:18\n         Retag(_17);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n-        _15 = move _16(move _17) -> bb3; // scope 6 at $DIR/retag.rs:44:14: 44:19\n+        _15 = move _16(move _17) -> bb5; // scope 6 at $DIR/retag.rs:44:14: 44:19\n     }\n \n-    bb3: {\n+    bb5: {\n         Retag(_15);                      // scope 6 at $DIR/retag.rs:44:14: 44:19\n         StorageDead(_17);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n         StorageDead(_16);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n@@ -185,7 +193,7 @@ fn main() -> () {\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _22 = &(*_23);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _19 = const Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb6]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n+        _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n                                          // ty::Const\n                                          // + ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -194,15 +202,19 @@ fn main() -> () {\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb4: {\n+    bb6: {\n         Retag(_19);                      // scope 7 at $DIR/retag.rs:47:5: 47:24\n         StorageDead(_22);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_20);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_23);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n-        drop(_21) -> [return: bb5, unwind: bb8]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n+        drop(_21) -> [return: bb8, unwind: bb1]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n     }\n \n-    bb5: {\n+    bb7 (cleanup): {\n+        drop(_21) -> bb1;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+    }\n+\n+    bb8: {\n         StorageDead(_21);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n         StorageDead(_19);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n         StorageLive(_25);                // scope 7 at $DIR/retag.rs:50:9: 50:11\n@@ -224,16 +236,4 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/retag.rs:51:1: 51:2\n         return;                          // scope 0 at $DIR/retag.rs:51:2: 51:2\n     }\n-\n-    bb6 (cleanup): {\n-        drop(_21) -> bb8;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n-    }\n-\n-    bb7 (cleanup): {\n-        drop(_5) -> bb8;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n-    }\n-\n-    bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n-    }\n }"}, {"sha": "3a7d6a7ca3c6159c541bc234ecd9e5034914398c", "filename": "src/test/mir-opt/simple-match/32bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -6,36 +6,44 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n     }\n \n     bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    }\n+\n+    bb3: {\n         _0 = const 20usize;              // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000014))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:8:14: 8:16\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000014)) }\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb3: {\n+    bb4: {\n         _0 = const 10usize;              // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000a))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:7:17: 7:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000a)) }\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb4: {\n+    bb5: {\n+        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+    }\n+\n+    bb6: {\n         return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "170181177b26adf812afc274d4876e1d36d9c6e8", "filename": "src/test/mir-opt/simple-match/64bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -6,36 +6,44 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n     }\n \n     bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    }\n+\n+    bb3: {\n         _0 = const 20usize;              // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000014))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:8:14: 8:16\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000014)) }\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb3: {\n+    bb4: {\n         _0 = const 10usize;              // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x000000000000000a))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:7:17: 7:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x000000000000000a)) }\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb4: {\n+    bb5: {\n+        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+    }\n+\n+    bb6: {\n         return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "64b5f17430023a2cc30cda3d66441edbb0ccde21", "filename": "src/test/mir-opt/simplify-arm/rustc.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyArmIdentity.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -61,7 +61,7 @@\n -         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n -         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:25:9: 25:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb7;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          goto -> bb5;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   \n       bb3: {\n@@ -74,7 +74,7 @@\n           StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n           StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n           _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _8 = const <i32 as std::convert::From<i32>>::from(move _9) -> bb5; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _8 = const <i32 as std::convert::From<i32>>::from(move _9) -> bb6; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n                                            // ty::Const\n                                            // + ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -84,8 +84,12 @@\n       }\n   \n       bb5: {\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+      }\n+  \n+      bb6: {\n           StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _0 = const <std::result::Result<u8, i32> as std::ops::Try>::from_error(move _8) -> bb6; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _0 = const <std::result::Result<u8, i32> as std::ops::Try>::from_error(move _8) -> bb7; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n                                            // ty::Const\n                                            // + ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -94,16 +98,12 @@\n                                            // + literal: Const { ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb6: {\n+      bb7: {\n           StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n           StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb7;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n-      }\n-  \n-      bb7: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          goto -> bb5;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n   }\n   "}, {"sha": "01f57bec71a876b7bfa4e4850e3db287e2407b53", "filename": "src/test/mir-opt/simplify-arm/rustc.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm%2Frustc.id_try.SimplifyBranchSame.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -52,7 +52,7 @@\n           _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb7;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          goto -> bb5;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   \n       bb3: {\n@@ -65,7 +65,7 @@\n           StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n           StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n           _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _8 = const <i32 as std::convert::From<i32>>::from(move _9) -> bb5; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _8 = const <i32 as std::convert::From<i32>>::from(move _9) -> bb6; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n                                            // ty::Const\n                                            // + ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -75,8 +75,12 @@\n       }\n   \n       bb5: {\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+      }\n+  \n+      bb6: {\n           StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _0 = const <std::result::Result<u8, i32> as std::ops::Try>::from_error(move _8) -> bb6; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+          _0 = const <std::result::Result<u8, i32> as std::ops::Try>::from_error(move _8) -> bb7; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n                                            // ty::Const\n                                            // + ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -85,16 +89,12 @@\n                                            // + literal: Const { ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb6: {\n+      bb7: {\n           StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n           StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb7;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n-      }\n-  \n-      bb7: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          goto -> bb5;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n   }\n   "}, {"sha": "3b472ed3a0376a99d99cc469e216345578337a99", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -13,7 +13,7 @@\n - \n -     bb1: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = const bar() -> bb2;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = const bar() -> bb3;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n +         _2 = const bar() -> bb1;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // ty::Const\n                                            // + ty: fn() -> bool {bar}\n@@ -23,18 +23,22 @@\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n--     bb2: {\n--         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb2 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n +     bb1: {\n +         switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb3: {\n--         goto -> bb5;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n -     bb4: {\n+-         goto -> bb6;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     }\n+- \n+-     bb5: {\n +     bb2: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // ty::Const\n@@ -47,7 +51,7 @@\n           goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb5: {\n+-     bb6: {\n +     bb3: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // ty::Const\n@@ -58,10 +62,6 @@\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n--     }\n-- \n--     bb6 (cleanup): {\n--         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   }\n   "}, {"sha": "0cc2258f46364dcdb4fd3b0ddf7c2c0a9f8e0b4e", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -9,17 +9,21 @@\n   \n       bb0: {\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-+         falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n++         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n -     bb2: {\n+-         goto -> bb13;                    // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+-     }\n+- \n+-     bb3: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = const bar() -> [return: bb3, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         _2 = const bar() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = const bar() -> [return: bb5, unwind: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // ty::Const\n                                            // + ty: fn() -> bool {bar}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -28,66 +32,70 @@\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n--     bb3: {\n-+     bb2: {\n-          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb4 (cleanup): {\n++     bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   \n--     bb4: {\n--         falseEdges -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb5: {\n +     bb3: {\n-+         falseEdges -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n--     bb5: {\n+-     bb6: {\n+-         falseEdges -> [real: bb8, imaginary: bb7]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb4: {\n++         falseEdges -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+      }\n+  \n+-     bb7: {\n++     bb5: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n +         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb6: {\n-+     bb5: {\n+-     bb8: {\n++     bb6: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb10;                    // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n -     }\n - \n--     bb7: {\n+-     bb9: {\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-         goto -> bb2;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-     }\n+- \n+-     bb10: {\n -         unreachable;                     // scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n -     }\n - \n--     bb8: {\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb11: {\n+-         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n--     bb9: {\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-     bb12: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n--     bb10: {\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-     bb13: {\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }\n-  \n--     bb11 (cleanup): {\n-+     bb6 (cleanup): {\n-          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n-      }\n   }\n   "}, {"sha": "97050122ca96e972a874c2f8a3a6c10be6b77775", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -83,7 +83,7 @@\n +         _0 = move _3;                    // scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:6:15: 6:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n-          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n       }\n   \n       bb3: {"}, {"sha": "62b7535f2b57565986bec6bbc77839435ac74e6f", "filename": "src/test/mir-opt/storage_live_dead_in_statics/rustc.XXX.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -663,4 +663,8 @@ static XXX: &Foo = {\n         StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n+    }\n }"}, {"sha": "de29cd61019f11f6929287f5217f2eddc82cd3dc", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -28,10 +28,22 @@ fn move_out_by_subslice() -> () {\n                                          // + span: $DIR/uniform_array_move_out.rs:11:18: 11:19\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n+    }\n+\n+    bb2 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+    }\n+\n+    bb4: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n@@ -44,21 +56,29 @@ fn move_out_by_subslice() -> () {\n                                          // + span: $DIR/uniform_array_move_out.rs:11:25: 11:26\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb6 (cleanup): {\n+        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }\n \n-    bb2: {\n+    bb7: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb3: {\n+    bb8: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb4: {\n+    bb9: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n@@ -70,32 +90,28 @@ fn move_out_by_subslice() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:10:27: 13:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-    }\n-\n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb6: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+    bb10 (cleanup): {\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb11 (cleanup): {\n+        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb12: {\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb13: {\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n-    bb10 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n+    bb14: {\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n }"}, {"sha": "aeab0e892ae8b8725c6bfa59dcb782fdc0d5f5b4", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -28,10 +28,22 @@ fn move_out_from_end() -> () {\n                                          // + span: $DIR/uniform_array_move_out.rs:5:18: 5:19\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n+    }\n+\n+    bb2 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+    }\n+\n+    bb4: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n@@ -44,21 +56,29 @@ fn move_out_from_end() -> () {\n                                          // + span: $DIR/uniform_array_move_out.rs:5:25: 5:26\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb6 (cleanup): {\n+        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }\n \n-    bb2: {\n+    bb7: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb3: {\n+    bb8: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb4: {\n+    bb9: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n@@ -70,32 +90,28 @@ fn move_out_from_end() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:4:24: 7:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-    }\n-\n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb6: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+    bb10 (cleanup): {\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb11 (cleanup): {\n+        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb12: {\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb13: {\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n-    bb10 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n+    bb14: {\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n }"}, {"sha": "c800ccb1ae51f698db8d7a5fcd773be2dfca4672", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -13,4 +13,8 @@ E::V::{{constant}}#0: isize = {\n                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000005)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+    }\n }"}, {"sha": "28f14399a630995e51e5338bf3e09b9897d216c2", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -6,7 +6,7 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb6;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb7;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n@@ -22,16 +22,20 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb2;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n-    bb5: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+    bb5 (cleanup): {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+    }\n+\n+    bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "f4a5cc0b3279a5136106ae8df95aa0dd0939fc0d", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -13,4 +13,8 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+    }\n }"}, {"sha": "e635cd2b01bbd79fb97d6e08f40e69e95fafa81d", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -13,4 +13,8 @@ E::V::{{constant}}#0: isize = {\n                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000005)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+    }\n }"}, {"sha": "28f14399a630995e51e5338bf3e09b9897d216c2", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -6,7 +6,7 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb6;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb7;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n@@ -22,16 +22,20 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb2;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n-    bb5: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+    bb5 (cleanup): {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+    }\n+\n+    bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "f4a5cc0b3279a5136106ae8df95aa0dd0939fc0d", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -13,4 +13,8 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+    }\n }"}, {"sha": "3ddf82c2fb2c9d6384c6a7317d3130d09a4ba6d7", "filename": "src/test/mir-opt/while-storage/rustc.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8760bda39d66ceb9b98e4966a9f7b1e3000e66/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir?ref=6f8760bda39d66ceb9b98e4966a9f7b1e3000e66", "patch": "@@ -70,7 +70,7 @@ fn while_loop(_1: bool) -> () {\n                                          // + span: $DIR/while-storage.rs:12:13: 12:18\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:1:1: 1:1\n+        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n     }\n \n     bb7: {"}]}