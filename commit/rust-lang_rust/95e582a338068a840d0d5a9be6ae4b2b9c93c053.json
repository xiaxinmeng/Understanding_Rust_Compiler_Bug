{"sha": "95e582a338068a840d0d5a9be6ae4b2b9c93c053", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZTU4MmEzMzgwNjhhODQwZDBkNWE5YmU2YWU0YjJiOWM5M2MwNTM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-06T14:48:56Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-12T13:51:47Z"}, "message": "Don\u2019t make conf errors fatal errors", "tree": {"sha": "03802159b85986ee2d518eb3c7f7e136d6a17c6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03802159b85986ee2d518eb3c7f7e136d6a17c6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95e582a338068a840d0d5a9be6ae4b2b9c93c053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95e582a338068a840d0d5a9be6ae4b2b9c93c053", "html_url": "https://github.com/rust-lang/rust/commit/95e582a338068a840d0d5a9be6ae4b2b9c93c053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95e582a338068a840d0d5a9be6ae4b2b9c93c053/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d118b27abb50fef41f7a9510aa9e3741ac036370", "url": "https://api.github.com/repos/rust-lang/rust/commits/d118b27abb50fef41f7a9510aa9e3741ac036370", "html_url": "https://github.com/rust-lang/rust/commit/d118b27abb50fef41f7a9510aa9e3741ac036370"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "1088e4bc139afa1d2b22962d488d89c058a27d51", "filename": "src/lib.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/95e582a338068a840d0d5a9be6ae4b2b9c93c053/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e582a338068a840d0d5a9be6ae4b2b9c93c053/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=95e582a338068a840d0d5a9be6ae4b2b9c93c053", "patch": "@@ -111,24 +111,30 @@ mod reexport {\n #[plugin_registrar]\n #[cfg_attr(rustfmt, rustfmt_skip)]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    let conferr = match utils::conf::conf_file(reg.args()) {\n-        Ok(Some(file_name)) => {\n-            utils::conf::read_conf(&file_name, true)\n-        }\n-        Ok(None) => {\n-            utils::conf::read_conf(\"Clippy.toml\", false)\n+    let conf = match utils::conf::conf_file(reg.args()) {\n+        Ok(file_name) => {\n+            // if the user specified a file, it must exist, otherwise default to `Clippy.toml` but\n+            // do not require the file to exist\n+            let (ref file_name, must_exist) = if let Some(ref file_name) = file_name {\n+                (&**file_name, true)\n+            } else {\n+                (\"Clippy.toml\", false)\n+            };\n+\n+            let (conf, errors) = utils::conf::read_conf(&file_name, must_exist);\n+\n+            // all conf errors are non-fatal, we just use the default conf in case of error\n+            for error in errors {\n+                reg.sess.struct_err(&format!(\"error reading Clippy's configuration file: {}\", error)).emit();\n+            }\n+\n+            conf\n         }\n         Err((err, span)) => {\n-            reg.sess.struct_span_err(span, err).emit();\n-            return;\n-        }\n-    };\n-\n-    let conf = match conferr {\n-        Ok(conf) => conf,\n-        Err(err) => {\n-            reg.sess.struct_err(&format!(\"error reading Clippy's configuration file: {}\", err)).emit();\n-            return;\n+            reg.sess.struct_span_err(span, err)\n+                    .span_note(span, \"Clippy will use defaulf configuration\")\n+                    .emit();\n+            utils::conf::Conf::default()\n         }\n     };\n "}, {"sha": "8c36570c8339b9a865f2fe8a773dec03d1d47fd7", "filename": "src/utils/conf.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/95e582a338068a840d0d5a9be6ae4b2b9c93c053/src%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e582a338068a840d0d5a9be6ae4b2b9c93c053/src%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fconf.rs?ref=95e582a338068a840d0d5a9be6ae4b2b9c93c053", "patch": "@@ -157,33 +157,44 @@ define_Conf! {\n \n /// Read the `toml` configuration file. The function will ignore \u201cFile not found\u201d errors iif\n /// `!must_exist`, in which case, it will return the default configuration.\n-pub fn read_conf(path: &str, must_exist: bool) -> Result<Conf, ConfError> {\n+/// In case of error, the function tries to continue as much as possible.\n+pub fn read_conf(path: &str, must_exist: bool) -> (Conf, Vec<ConfError>) {\n     let mut conf = Conf::default();\n+    let mut errors = Vec::new();\n \n     let file = match fs::File::open(path) {\n         Ok(mut file) => {\n             let mut buf = String::new();\n-            try!(file.read_to_string(&mut buf));\n+\n+            if let Err(err) = file.read_to_string(&mut buf) {\n+                errors.push(err.into());\n+                return (conf, errors);\n+            }\n+\n             buf\n         }\n         Err(ref err) if !must_exist && err.kind() == io::ErrorKind::NotFound => {\n-            return Ok(conf);\n+            return (conf, errors);\n         }\n         Err(err) => {\n-            return Err(err.into());\n+            errors.push(err.into());\n+            return (conf, errors);\n         }\n     };\n \n     let mut parser = toml::Parser::new(&file);\n     let toml = if let Some(toml) = parser.parse() {\n         toml\n     } else {\n-        return Err(ConfError::TomlError(parser.errors));\n+        errors.push(ConfError::TomlError(parser.errors));\n+        return (conf, errors);\n     };\n \n     for (key, value) in toml {\n-        try!(conf.set(key, value));\n+        if let Err(err) = conf.set(key, value) {\n+            errors.push(err);\n+        }\n     }\n \n-    Ok(conf)\n+    (conf, errors)\n }"}]}