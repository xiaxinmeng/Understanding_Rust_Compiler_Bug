{"sha": "39fafd655a85a2af9cddf59b70a687b44570fb6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZmFmZDY1NWE4NWEyYWY5Y2RkZjU5YjcwYTY4N2I0NDU3MGZiNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-03T09:10:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-03T09:10:54Z"}, "message": "auto merge of #8204 : kballard/rust/str-into-owned, r=graydon\n\nThe method .into_owned() is meant to be used as an optimization when you\r\nneed to get a ~str from a Str, but don't want to unnecessarily copy it\r\nif it's already a ~str.\r\n\r\nThis is meant to ease functions that look like\r\n\r\n  fn foo<S: Str>(strs: &[S])\r\n\r\nPreviously they could work with the strings as slices using .as_slice(),\r\nbut producing ~str required copying the string, even if the vector\r\nturned out be a &[~str] already.\r\n\r\nI don't have any concrete uses for this yet, since the one conversion I've done to `&[S]` so far (see PR #8203) didn't actually need owned strings. But having this here may make using `Str` more attractive.\r\n\r\nIt also may be worth adding an `into_managed()` function, but that one is less obviously useful than `into_owned()`.", "tree": {"sha": "d977784abeff9fa49b6085578495359731dc11bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d977784abeff9fa49b6085578495359731dc11bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39fafd655a85a2af9cddf59b70a687b44570fb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39fafd655a85a2af9cddf59b70a687b44570fb6f", "html_url": "https://github.com/rust-lang/rust/commit/39fafd655a85a2af9cddf59b70a687b44570fb6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39fafd655a85a2af9cddf59b70a687b44570fb6f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20fad0f5fff381210bfe79b35a5fe8332ec86b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/20fad0f5fff381210bfe79b35a5fe8332ec86b34", "html_url": "https://github.com/rust-lang/rust/commit/20fad0f5fff381210bfe79b35a5fe8332ec86b34"}, {"sha": "aa94dfa625e0d19cd322d7816167486ece53397d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa94dfa625e0d19cd322d7816167486ece53397d", "html_url": "https://github.com/rust-lang/rust/commit/aa94dfa625e0d19cd322d7816167486ece53397d"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "c30888529be10adacc8e324ffe47729f7c787a4e", "filename": "src/libstd/str.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39fafd655a85a2af9cddf59b70a687b44570fb6f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39fafd655a85a2af9cddf59b70a687b44570fb6f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=39fafd655a85a2af9cddf59b70a687b44570fb6f", "patch": "@@ -1079,25 +1079,37 @@ pub mod traits {}\n pub trait Str {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a str;\n+\n+    /// Convert `self` into a ~str.\n+    fn into_owned(self) -> ~str;\n }\n \n impl<'self> Str for &'self str {\n     #[inline]\n     fn as_slice<'a>(&'a self) -> &'a str { *self }\n+\n+    #[inline]\n+    fn into_owned(self) -> ~str { self.to_owned() }\n }\n \n impl<'self> Str for ~str {\n     #[inline]\n     fn as_slice<'a>(&'a self) -> &'a str {\n         let s: &'a str = *self; s\n     }\n+\n+    #[inline]\n+    fn into_owned(self) -> ~str { self }\n }\n \n impl<'self> Str for @str {\n     #[inline]\n     fn as_slice<'a>(&'a self) -> &'a str {\n         let s: &'a str = *self; s\n     }\n+\n+    #[inline]\n+    fn into_owned(self) -> ~str { self.to_owned() }\n }\n \n impl<'self> Container for &'self str {"}]}