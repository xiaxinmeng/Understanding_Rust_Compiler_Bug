{"sha": "5c8634805cbaed6010e15a15f15e840bd019079a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODYzNDgwNWNiYWVkNjAxMGUxNWExNWYxNWU4NDBiZDAxOTA3OWE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-05-28T16:11:39Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-24T11:09:37Z"}, "message": "improper_ctypes: allow pointers to sized types\n\nThis commit changes the improper ctypes lint (when operating on\ndefinitions) to consider raw pointers or references to sized types as\nFFI-safe.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "46effae097a6bc43692edeca54d5ce13853915cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46effae097a6bc43692edeca54d5ce13853915cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8634805cbaed6010e15a15f15e840bd019079a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl7zNHEACgkQJZLnbIc4\nH9ms8A/+Oci6viBDXsuZkHQhSpzYNSLXiruc9SeZjPMYtnpjgoX6XuH9L9ZCMafw\nwTuQd3ahvKd9GMGSv4HzD0tGYczAV1wjSinHhd+I+6LizVTEmejQI33C3T7tK4k8\nu4jg9sOPhafrC3Lnn9+2QifWfwVl/TVn5gjFw2H9/g8cepjKaMUTQIbzRgs7B3YV\nxT97WoxrP5VKxyKZsVA/DZHwBA+WtahWXuBvrs5r29Y+HmsGUctJL9BuGmlFHW0b\n7lboTtXxx1u1WDlSXVlKk8jk7nHpCXPubrgrYe9gmY9g+GPuUKex/KHb/Z4puqhJ\nD6M4srJWTSwT4Ha9SAGfGCkmmGPbV9z+4XCfGAWBuplSDJhitW6chxXL9HJ2WRcG\nUl8/XvxJgBxw5ACLiNernHbj2JQD3woPy6wUBGUjbsbG1f8kcO4Hnys71ITdEPhp\nV/ApIuUnhBPVDbbw12aGh5asTeEwEYdJmZNAFHk7M14tMqn2D9Kg1j0sMknpB4ho\n3KTsCc52BhafOMFRbEipN+YORiF+KXDC7IOQXMKKkeX2R/hqC6gtWuzcjfoigipX\nAOcJzmsN3K3EInxagsAplTxkwB94TVgRpaxD9I35cMfIAE+K+5ndrEWzluVOJ58H\n1lcrUi55EpBmLm3g/AwtG0Mth+nGCySyaC829Of8+24Rivw05Io=\n=ba2y\n-----END PGP SIGNATURE-----", "payload": "tree 46effae097a6bc43692edeca54d5ce13853915cc\nparent 14ea7a777f924995256a05da55133d265ed169be\nauthor David Wood <david@davidtw.co> 1590682299 +0100\ncommitter David Wood <david@davidtw.co> 1592996977 +0100\n\nimproper_ctypes: allow pointers to sized types\n\nThis commit changes the improper ctypes lint (when operating on\ndefinitions) to consider raw pointers or references to sized types as\nFFI-safe.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8634805cbaed6010e15a15f15e840bd019079a", "html_url": "https://github.com/rust-lang/rust/commit/5c8634805cbaed6010e15a15f15e840bd019079a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8634805cbaed6010e15a15f15e840bd019079a/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ea7a777f924995256a05da55133d265ed169be", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea7a777f924995256a05da55133d265ed169be", "html_url": "https://github.com/rust-lang/rust/commit/14ea7a777f924995256a05da55133d265ed169be"}], "stats": {"total": 119, "additions": 34, "deletions": 85}, "files": [{"sha": "cce6a40c23a2bd33c62d41f3678d41ef4015951b", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c8634805cbaed6010e15a15f15e840bd019079a/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8634805cbaed6010e15a15f15e840bd019079a/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=5c8634805cbaed6010e15a15f15e840bd019079a", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Integer, LayoutOf, TagEncoding, VariantIdx, Variants};\n use rustc_target::spec::abi::Abi;\n \n@@ -818,6 +818,15 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 help: Some(\"consider using a struct instead\".into()),\n             },\n \n+            ty::RawPtr(ty::TypeAndMut { ty, .. }) | ty::Ref(_, ty, _)\n+                if {\n+                    matches!(self.mode, ImproperCTypesMode::Definitions)\n+                        && ty.is_sized(self.cx.tcx.at(DUMMY_SP), self.cx.param_env)\n+                } =>\n+            {\n+                FfiSafe\n+            }\n+\n             ty::RawPtr(ty::TypeAndMut { ty, .. }) | ty::Ref(_, ty, _) => {\n                 self.check_type_for_ffi(cache, ty)\n             }"}, {"sha": "67dd7abcf79ef2b7f648fa298ebdfa2957f6ab51", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c8634805cbaed6010e15a15f15e840bd019079a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8634805cbaed6010e15a15f15e840bd019079a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=5c8634805cbaed6010e15a15f15e840bd019079a", "patch": "@@ -61,10 +61,8 @@ pub struct TransparentCustomZst(i32, ZeroSize);\n pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n \n pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n-//~^ ERROR: uses type `Foo`\n \n pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n-//~^ ERROR: uses type `Foo`\n \n pub extern \"C\" fn slice_type(p: &[u32]) { }\n //~^ ERROR: uses type `[u32]`\n@@ -159,7 +157,6 @@ pub extern \"C\" fn good1(size: *const libc::c_int) { }\n pub extern \"C\" fn good2(size: *const libc::c_uint) { }\n \n pub extern \"C\" fn unused_generic1<T>(size: *const Foo) { }\n-//~^ ERROR: uses type `Foo`\n \n pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n //~^ ERROR uses type `std::marker::PhantomData<bool>`\n@@ -169,7 +166,6 @@ pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n pub extern \"C\" fn used_generic1<T>(x: T) { }\n \n pub extern \"C\" fn used_generic2<T>(x: T, size: *const Foo) { }\n-//~^ ERROR: uses type `Foo`\n \n pub extern \"C\" fn used_generic3<T: Default>() -> T {\n     Default::default()"}, {"sha": "66cf195327890e40fd95e15d4a9450ef354b6fc2", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "modified", "additions": 24, "deletions": 80, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/5c8634805cbaed6010e15a15f15e840bd019079a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c8634805cbaed6010e15a15f15e840bd019079a/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=5c8634805cbaed6010e15a15f15e840bd019079a", "patch": "@@ -1,47 +1,19 @@\n-error: `extern` fn uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:63:35\n+error: `extern` fn uses type `[u32]`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:67:33\n    |\n-LL | pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n-   |                                   ^^^^^^^^^^ not FFI-safe\n+LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n+   |                                 ^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n   --> $DIR/lint-ctypes-fn.rs:4:9\n    |\n LL | #![deny(improper_ctypes_definitions)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-note: the type is defined here\n-  --> $DIR/lint-ctypes-fn.rs:34:1\n-   |\n-LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n-\n-error: `extern` fn uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:66:35\n-   |\n-LL | pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n-   |                                   ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-note: the type is defined here\n-  --> $DIR/lint-ctypes-fn.rs:34:1\n-   |\n-LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n-\n-error: `extern` fn uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:69:33\n-   |\n-LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n-   |                                 ^^^^^^ not FFI-safe\n-   |\n    = help: consider using a raw pointer instead\n    = note: slices have no C equivalent\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:72:31\n+  --> $DIR/lint-ctypes-fn.rs:70:31\n    |\n LL | pub extern \"C\" fn str_type(p: &str) { }\n    |                               ^^^^ not FFI-safe\n@@ -50,7 +22,7 @@ LL | pub extern \"C\" fn str_type(p: &str) { }\n    = note: string slices have no C equivalent\n \n error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:75:31\n+  --> $DIR/lint-ctypes-fn.rs:73:31\n    |\n LL | pub extern \"C\" fn box_type(p: Box<u32>) { }\n    |                               ^^^^^^^^ not FFI-safe\n@@ -59,7 +31,7 @@ LL | pub extern \"C\" fn box_type(p: Box<u32>) { }\n    = note: this struct has unspecified layout\n \n error: `extern` fn uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:78:32\n+  --> $DIR/lint-ctypes-fn.rs:76:32\n    |\n LL | pub extern \"C\" fn char_type(p: char) { }\n    |                                ^^^^ not FFI-safe\n@@ -68,23 +40,23 @@ LL | pub extern \"C\" fn char_type(p: char) { }\n    = note: the `char` type has no C equivalent\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:81:32\n+  --> $DIR/lint-ctypes-fn.rs:79:32\n    |\n LL | pub extern \"C\" fn i128_type(p: i128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:84:32\n+  --> $DIR/lint-ctypes-fn.rs:82:32\n    |\n LL | pub extern \"C\" fn u128_type(p: u128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:87:33\n+  --> $DIR/lint-ctypes-fn.rs:85:33\n    |\n LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    |                                 ^^^^^^^^^^ not FFI-safe\n@@ -93,7 +65,7 @@ LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:90:34\n+  --> $DIR/lint-ctypes-fn.rs:88:34\n    |\n LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    |                                  ^^^^^^^ not FFI-safe\n@@ -102,7 +74,7 @@ LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:93:32\n+  --> $DIR/lint-ctypes-fn.rs:91:32\n    |\n LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n    |                                ^^^^^^^^ not FFI-safe\n@@ -116,7 +88,7 @@ LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:96:40\n+  --> $DIR/lint-ctypes-fn.rs:94:40\n    |\n LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -129,15 +101,15 @@ LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:99:51\n+  --> $DIR/lint-ctypes-fn.rs:97:51\n    |\n LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n    |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:104:30\n+  --> $DIR/lint-ctypes-fn.rs:102:30\n    |\n LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    |                              ^^^^^^ not FFI-safe\n@@ -146,7 +118,7 @@ LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:107:31\n+  --> $DIR/lint-ctypes-fn.rs:105:31\n    |\n LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    |                               ^^^^ not FFI-safe\n@@ -155,7 +127,7 @@ LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:110:35\n+  --> $DIR/lint-ctypes-fn.rs:108:35\n    |\n LL | pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n    |                                   ^^^^^^^^^^ not FFI-safe\n@@ -164,15 +136,15 @@ LL | pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n    = note: this struct has unspecified layout\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:113:39\n+  --> $DIR/lint-ctypes-fn.rs:111:39\n    |\n LL | pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n    |                                       ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:116:38\n+  --> $DIR/lint-ctypes-fn.rs:114:38\n    |\n LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    |                                      ^^^^^^^^^^^^^^ not FFI-safe\n@@ -181,52 +153,24 @@ LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    = note: string slices have no C equivalent\n \n error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:119:37\n+  --> $DIR/lint-ctypes-fn.rs:117:37\n    |\n LL | pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n    |                                     ^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: `extern` fn uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:161:44\n-   |\n-LL | pub extern \"C\" fn unused_generic1<T>(size: *const Foo) { }\n-   |                                            ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-note: the type is defined here\n-  --> $DIR/lint-ctypes-fn.rs:34:1\n-   |\n-LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n-\n error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:164:43\n+  --> $DIR/lint-ctypes-fn.rs:161:43\n    |\n LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n    |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n-error: `extern` fn uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:171:48\n-   |\n-LL | pub extern \"C\" fn used_generic2<T>(x: T, size: *const Foo) { }\n-   |                                                ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-note: the type is defined here\n-  --> $DIR/lint-ctypes-fn.rs:34:1\n-   |\n-LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n-\n error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:178:39\n+  --> $DIR/lint-ctypes-fn.rs:174:39\n    |\n LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    |                                       ^^^^^^ not FFI-safe\n@@ -235,13 +179,13 @@ LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    = note: this struct has unspecified layout\n \n error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:181:41\n+  --> $DIR/lint-ctypes-fn.rs:177:41\n    |\n LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n    |                                         ^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 20 previous errors\n "}]}