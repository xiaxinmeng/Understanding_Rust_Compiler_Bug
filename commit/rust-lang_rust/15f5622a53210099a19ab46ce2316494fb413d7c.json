{"sha": "15f5622a53210099a19ab46ce2316494fb413d7c", "node_id": "C_kwDOAAsO6NoAKDE1ZjU2MjJhNTMyMTAwOTlhMTlhYjQ2Y2UyMzE2NDk0ZmI0MTNkN2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T23:07:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T23:07:22Z"}, "message": "Auto merge of #97896 - compiler-errors:rollup-mrl7ng0, r=compiler-errors\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #97557 (Fix indices and remove some unwraps in arg mismatch algorithm)\n - #97830 (Add std::alloc::set_alloc_error_hook example)\n - #97856 (Don't suggest adding `let` in certain `if` conditions)\n - #97857 (Suggest escaping `box` as identifier)\n - #97871 (Suggest using `iter()` or `into_iter()` for `Vec`)\n - #97882 (Add regresion test for #67498)\n - #97883 (Remove `ignore-compare-mode-nll` annotations from tests)\n - #97891 (Update books)\n - #97894 (Fix polonius compare mode.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "633084d6eb33de525f55ae47663320370d9e6fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/633084d6eb33de525f55ae47663320370d9e6fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15f5622a53210099a19ab46ce2316494fb413d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15f5622a53210099a19ab46ce2316494fb413d7c", "html_url": "https://github.com/rust-lang/rust/commit/15f5622a53210099a19ab46ce2316494fb413d7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15f5622a53210099a19ab46ce2316494fb413d7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7466d5492b2d28d2ba5114dbe71511a6502ac822", "url": "https://api.github.com/repos/rust-lang/rust/commits/7466d5492b2d28d2ba5114dbe71511a6502ac822", "html_url": "https://github.com/rust-lang/rust/commit/7466d5492b2d28d2ba5114dbe71511a6502ac822"}, {"sha": "cfc0677992662076f8fa65062a229aaae495f030", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc0677992662076f8fa65062a229aaae495f030", "html_url": "https://github.com/rust-lang/rust/commit/cfc0677992662076f8fa65062a229aaae495f030"}], "stats": {"total": 507, "additions": 433, "deletions": 74}, "files": [{"sha": "e5b61d7000a32c1d1d56b463ec2c97e2007003cf", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1278,6 +1278,22 @@ impl Expr {\n             },\n         )\n     }\n+\n+    // To a first-order approximation, is this a pattern\n+    pub fn is_approximately_pattern(&self) -> bool {\n+        match &self.peel_parens().kind {\n+            ExprKind::Box(_)\n+            | ExprKind::Array(_)\n+            | ExprKind::Call(_, _)\n+            | ExprKind::Tup(_)\n+            | ExprKind::Lit(_)\n+            | ExprKind::Range(_, _, _)\n+            | ExprKind::Underscore\n+            | ExprKind::Path(_, _)\n+            | ExprKind::Struct(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// Limit types of a range (inclusive or exclusive)"}, {"sha": "2f5f271dc50efefe81bcaea8f735b0515d04b76e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1813,6 +1813,20 @@ impl Expr<'_> {\n             | ExprKind::Err => true,\n         }\n     }\n+\n+    // To a first-order approximation, is this a pattern\n+    pub fn is_approximately_pattern(&self) -> bool {\n+        match &self.kind {\n+            ExprKind::Box(_)\n+            | ExprKind::Array(_)\n+            | ExprKind::Call(..)\n+            | ExprKind::Tup(_)\n+            | ExprKind::Lit(_)\n+            | ExprKind::Path(_)\n+            | ExprKind::Struct(..) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// Checks if the specified expression is a built-in range literal."}, {"sha": "ca7915ed17a50fa0183e80f561990e5dbec74694", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -360,10 +360,7 @@ impl<'a> Parser<'a> {\n             let mutbl = self.parse_mutability();\n             self.parse_pat_ident(BindingMode::ByRef(mutbl))?\n         } else if self.eat_keyword(kw::Box) {\n-            // Parse `box pat`\n-            let pat = self.parse_pat_with_range_pat(false, None)?;\n-            self.sess.gated_spans.gate(sym::box_patterns, lo.to(self.prev_token.span));\n-            PatKind::Box(pat)\n+            self.parse_pat_box()?\n         } else if self.check_inline_const(0) {\n             // Parse `const pat`\n             let const_expr = self.parse_const_block(lo.to(self.token.span), true)?;\n@@ -915,6 +912,62 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::TupleStruct(qself, path, fields))\n     }\n \n+    /// Are we sure this could not possibly be the start of a pattern?\n+    ///\n+    /// Currently, this only accounts for tokens that can follow identifiers\n+    /// in patterns, but this can be extended as necessary.\n+    fn isnt_pattern_start(&self) -> bool {\n+        [\n+            token::Eq,\n+            token::Colon,\n+            token::Comma,\n+            token::Semi,\n+            token::At,\n+            token::OpenDelim(Delimiter::Brace),\n+            token::CloseDelim(Delimiter::Brace),\n+            token::CloseDelim(Delimiter::Parenthesis),\n+        ]\n+        .contains(&self.token.kind)\n+    }\n+\n+    /// Parses `box pat`\n+    fn parse_pat_box(&mut self) -> PResult<'a, PatKind> {\n+        let box_span = self.prev_token.span;\n+\n+        if self.isnt_pattern_start() {\n+            self.struct_span_err(\n+                self.token.span,\n+                format!(\"expected pattern, found {}\", super::token_descr(&self.token)),\n+            )\n+            .span_note(box_span, \"`box` is a reserved keyword\")\n+            .span_suggestion_verbose(\n+                box_span.shrink_to_lo(),\n+                \"escape `box` to use it as an identifier\",\n+                \"r#\",\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit();\n+\n+            // We cannot use `parse_pat_ident()` since it will complain `box`\n+            // is not an identifier.\n+            let sub = if self.eat(&token::At) {\n+                Some(self.parse_pat_no_top_alt(Some(\"binding pattern\"))?)\n+            } else {\n+                None\n+            };\n+\n+            Ok(PatKind::Ident(\n+                BindingMode::ByValue(Mutability::Not),\n+                Ident::new(kw::Box, box_span),\n+                sub,\n+            ))\n+        } else {\n+            let pat = self.parse_pat_with_range_pat(false, None)?;\n+            self.sess.gated_spans.gate(sym::box_patterns, box_span.to(self.prev_token.span));\n+            Ok(PatKind::Box(pat))\n+        }\n+    }\n+\n     /// Parses the fields of a struct-like pattern.\n     fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<PatField>, bool)> {\n         let mut fields = Vec::new();"}, {"sha": "5e52e9b40f044b62437996be52d7f989f891fe5f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -265,13 +265,21 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             );\n         }\n         match (source, self.diagnostic_metadata.in_if_condition) {\n-            (PathSource::Expr(_), Some(Expr { span, kind: ExprKind::Assign(..), .. })) => {\n-                err.span_suggestion_verbose(\n-                    span.shrink_to_lo(),\n-                    \"you might have meant to use pattern matching\",\n-                    \"let \".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n+            (\n+                PathSource::Expr(_),\n+                Some(Expr { span: expr_span, kind: ExprKind::Assign(lhs, _, _), .. }),\n+            ) => {\n+                // Icky heuristic so we don't suggest:\n+                // `if (i + 2) = 2` => `if let (i + 2) = 2` (approximately pattern)\n+                // `if 2 = i` => `if let 2 = i` (lhs needs to contain error span)\n+                if lhs.is_approximately_pattern() && lhs.span.contains(span) {\n+                    err.span_suggestion_verbose(\n+                        expr_span.shrink_to_lo(),\n+                        \"you might have meant to use pattern matching\",\n+                        \"let \".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "9f82bb67bd03d3d29ecb73606283cafa1fd6381f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1035,7 +1035,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 (Applicability::MaybeIncorrect, false)\n             };\n-            if !lhs.is_syntactic_place_expr() && !matches!(lhs.kind, hir::ExprKind::Lit(_)) {\n+            if !lhs.is_syntactic_place_expr()\n+                && lhs.is_approximately_pattern()\n+                && !matches!(lhs.kind, hir::ExprKind::Lit(_))\n+            {\n                 // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n                 let hir = self.tcx.hir();\n                 if let hir::Node::Expr(hir::Expr { kind: ExprKind::If { .. }, .. }) ="}, {"sha": "0d0cc9298394e851906d4d8b5941a02296f681ef", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -445,16 +445,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let found_errors = !errors.is_empty();\n \n             errors.drain_filter(|error| {\n-                let Error::Invalid(input_idx, arg_idx, Compatibility::Incompatible(error)) = error else { return false };\n+                let Error::Invalid(input_idx, arg_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n                 let expected_ty = expected_input_tys[*arg_idx];\n-                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap_or_else(|| tcx.ty_error());\n                 let cause = &self.misc(provided_args[*input_idx].span);\n                 let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n-                if let Some(e) = error {\n-                    if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n-                        self.report_and_explain_type_error(trace, e).emit();\n-                        return true;\n-                    }\n+                if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n+                    self.report_and_explain_type_error(trace, e).emit();\n+                    return true;\n                 }\n                 false\n             });\n@@ -585,7 +583,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 )) = errors.iter().next()\n                 {\n                     let expected_ty = expected_input_tys[*arg_idx];\n-                    let provided_ty = final_arg_types[*arg_idx].map(|ty| ty.0).unwrap();\n+                    let provided_ty = final_arg_types[*input_idx]\n+                        .map(|ty| ty.0)\n+                        .unwrap_or_else(|| tcx.ty_error());\n                     let expected_ty = self.resolve_vars_if_possible(expected_ty);\n                     let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                     let cause = &self.misc(provided_args[*input_idx].span);\n@@ -595,7 +595,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &mut err,\n                         &provided_args[*input_idx],\n                         provided_ty,\n-                        final_arg_types[*input_idx].map(|ty| ty.1).unwrap(),\n+                        final_arg_types[*input_idx]\n+                            .map(|ty| ty.1)\n+                            .unwrap_or_else(|| tcx.ty_error()),\n                         None,\n                         None,\n                     );\n@@ -652,7 +654,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 match error {\n                     Error::Invalid(input_idx, arg_idx, compatibility) => {\n                         let expected_ty = expected_input_tys[arg_idx];\n-                        let provided_ty = final_arg_types[input_idx].map(|ty| ty.0).unwrap();\n+                        let provided_ty = final_arg_types[input_idx]\n+                            .map(|ty| ty.0)\n+                            .unwrap_or_else(|| tcx.ty_error());\n                         let expected_ty = self.resolve_vars_if_possible(expected_ty);\n                         let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                         if let Compatibility::Incompatible(error) = &compatibility {\n@@ -674,8 +678,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.emit_coerce_suggestions(\n                             &mut err,\n                             &provided_args[input_idx],\n-                            final_arg_types[input_idx].map(|ty| ty.0).unwrap(),\n-                            final_arg_types[input_idx].map(|ty| ty.1).unwrap(),\n+                            provided_ty,\n+                            // FIXME(compiler-errors): expected_ty?\n+                            final_arg_types[input_idx]\n+                                .map(|ty| ty.1)\n+                                .unwrap_or_else(|| tcx.ty_error()),\n                             None,\n                             None,\n                         );\n@@ -860,7 +867,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let first_expected_ty =\n                             self.resolve_vars_if_possible(expected_input_tys[arg_idx]);\n                         let first_provided_ty = if let Some((ty, _)) = final_arg_types[input_idx] {\n-                            format!(\",found `{}`\", ty)\n+                            format!(\", found `{}`\", ty)\n                         } else {\n                             String::new()\n                         };\n@@ -872,7 +879,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.resolve_vars_if_possible(expected_input_tys[other_arg_idx]);\n                         let other_provided_ty =\n                             if let Some((ty, _)) = final_arg_types[other_input_idx] {\n-                                format!(\",found `{}`\", ty)\n+                                format!(\", found `{}`\", ty)\n                             } else {\n                                 String::new()\n                             };\n@@ -888,14 +895,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Error::Permutation(args) => {\n                         for (dst_arg, dest_input) in args {\n                             let expected_ty =\n-                                self.resolve_vars_if_possible(expected_input_tys[dest_input]);\n-                            let provided_ty = if let Some((ty, _)) = final_arg_types[dst_arg] {\n-                                format!(\",found `{}`\", ty)\n+                                self.resolve_vars_if_possible(expected_input_tys[dst_arg]);\n+                            let provided_ty = if let Some((ty, _)) = final_arg_types[dest_input] {\n+                                format!(\", found `{}`\", ty)\n                             } else {\n                                 String::new()\n                             };\n                             labels.push((\n-                                provided_args[dst_arg].span,\n+                                provided_args[dest_input].span,\n                                 format!(\"expected `{}`{}\", expected_ty, provided_ty),\n                             ));\n                         }"}, {"sha": "1cc9133fc3dc4997037677ba1888d652ada88922", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -40,6 +40,10 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n         label = \"`{Self}` is not an iterator; try calling `.into_iter()` or `.iter()`\"\n     ),\n     on(_Self = \"&[]\", label = \"`{Self}` is not an iterator; try calling `.iter()`\"),\n+    on(\n+        _Self = \"std::vec::Vec<T, A>\",\n+        label = \"`{Self}` is not an iterator; try calling `.into_iter()` or `.iter()`\"\n+    ),\n     on(\n         _Self = \"&str\",\n         label = \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\""}, {"sha": "d3879273f5b032fda900eda4988c54cb0ac96843", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -296,6 +296,20 @@ static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());\n /// about the allocation that failed.\n ///\n /// The allocation error hook is a global resource.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(alloc_error_hook)]\n+///\n+/// use std::alloc::{Layout, set_alloc_error_hook};\n+///\n+/// fn custom_alloc_error_hook(layout: Layout) {\n+///    panic!(\"memory allocation of {} bytes failed\", layout.size());\n+/// }\n+///\n+/// set_alloc_error_hook(custom_alloc_error_hook);\n+/// ```\n #[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n pub fn set_alloc_error_hook(hook: fn(Layout)) {\n     HOOK.store(hook as *mut (), Ordering::SeqCst);"}, {"sha": "396fdb69de7fb18f24b15c7ad13491b1c1fa7231", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1 +1 @@\n-Subproject commit b4dd5f00b87190ad5ef42cbc2a88a783c6ae57ef\n+Subproject commit 396fdb69de7fb18f24b15c7ad13491b1c1fa7231"}, {"sha": "cbb494f96da3268c2925bdadc65ca83d42f2d4ef", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1 +1 @@\n-Subproject commit f7cefbb995eec8c6148f213235e9e2e03268e775\n+Subproject commit cbb494f96da3268c2925bdadc65ca83d42f2d4ef"}, {"sha": "3a43983b76174342b7dbd3e12ea2c49f762e52be", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1 +1 @@\n-Subproject commit 10d40c59a581c66d8ecd29ad18d410bf97ed524d\n+Subproject commit 3a43983b76174342b7dbd3e12ea2c49f762e52be"}, {"sha": "683bfe5cd64d589c6a1645312ab5f93b6385ccbb", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1 +1 @@\n-Subproject commit b74825d8f88b685e239ade00f00de68ba4cd63d4\n+Subproject commit 683bfe5cd64d589c6a1645312ab5f93b6385ccbb"}, {"sha": "dbb7e5e2345ee26199ffba218156b6009016a20c", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1 +1 @@\n-Subproject commit 2ed26865e8c29ef939dc913a97bd321cadd72a9a\n+Subproject commit dbb7e5e2345ee26199ffba218156b6009016a20c"}, {"sha": "6e4d6435db89bcc027b1bba9742e4f59666f5412", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1 +1 @@\n-Subproject commit 554c00e4805df7f7bffac7db408437d62d6dfb9a\n+Subproject commit 6e4d6435db89bcc027b1bba9742e4f59666f5412"}, {"sha": "b44e77b43f8bfb747f15526546abd805a346fa3c", "filename": "src/test/ui/argument-suggestions/basic.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -48,9 +48,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/basic.rs:23:5\n    |\n LL |     swapped(\"\", 1);\n-   |     ^^^^^^^ --  - expected `&str`,found `{integer}`\n+   |     ^^^^^^^ --  - expected `&str`, found `{integer}`\n    |             |\n-   |             expected `u32`,found `&'static str`\n+   |             expected `u32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/basic.rs:16:4\n@@ -66,10 +66,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/basic.rs:24:5\n    |\n LL |     permuted(Y {}, Z {}, X {});\n-   |     ^^^^^^^^ ----  ----  ---- expected `Z`,found `X`\n+   |     ^^^^^^^^ ----  ----  ---- expected `Z`, found `X`\n    |              |     |\n-   |              |     expected `Y`,found `Z`\n-   |              expected `X`,found `Y`\n+   |              |     expected `Y`, found `Z`\n+   |              expected `X`, found `Y`\n    |\n note: function defined here\n   --> $DIR/basic.rs:17:4"}, {"sha": "bb383ab1f8b9ebe066676e5c7526ff875d5ec737", "filename": "src/test/ui/argument-suggestions/issue-97484.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -0,0 +1,14 @@\n+struct A;\n+struct B;\n+struct C;\n+struct D;\n+struct E;\n+struct F;\n+struct G;\n+\n+fn foo(a: &A, d: D, e: &E, g: G) {}\n+\n+fn main() {\n+    foo(&&A, B, C, D, E, F, G);\n+    //~^ ERROR this function takes 4 arguments but 7 arguments were supplied\n+}"}, {"sha": "4c461633121bf5603afdcbb63431554169fa8408", "filename": "src/test/ui/argument-suggestions/issue-97484.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -0,0 +1,27 @@\n+error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n+  --> $DIR/issue-97484.rs:12:5\n+   |\n+LL |     foo(&&A, B, C, D, E, F, G);\n+   |     ^^^      -  -        - argument unexpected\n+   |              |  |\n+   |              |  argument of type `&E` unexpected\n+   |              argument of type `D` unexpected\n+   |\n+note: function defined here\n+  --> $DIR/issue-97484.rs:9:4\n+   |\n+LL | fn foo(a: &A, d: D, e: &E, g: G) {}\n+   |    ^^^ -----  ----  -----  ----\n+help: consider removing the ``\n+   |\n+LL -     foo(&&A, B, C, D, E, F, G);\n+LL +     foo(&&A, B, C, D, E, F, G);\n+   | \n+help: remove the extra arguments\n+   |\n+LL |     foo(&&A, D, {&E}, G);\n+   |     ~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "78765335c02181ec3e8cd14c55b67704e7f6125b", "filename": "src/test/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -76,10 +76,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/mixed_cases.rs:20:3\n    |\n LL |   three_args(\"\", X {}, 1);\n-   |   ^^^^^^^^^^ --  ----  - expected `&str`,found `{integer}`\n+   |   ^^^^^^^^^^ --  ----  - expected `&str`, found `{integer}`\n    |              |   |\n    |              |   expected `f32`, found struct `X`\n-   |              expected `i32`,found `&'static str`\n+   |              expected `i32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/mixed_cases.rs:6:4\n@@ -98,8 +98,8 @@ LL |   three_args(\"\", 1);\n    |   ^^^^^^^^^^ --  -\n    |              |   |\n    |              |   an argument of type `f32` is missing\n-   |              |   expected `&str`,found `{integer}`\n-   |              expected `i32`,found `&'static str`\n+   |              |   expected `&str`, found `{integer}`\n+   |              expected `i32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/mixed_cases.rs:6:4"}, {"sha": "f16d22860d807c4aebc8c0a43fc86a630c2a015c", "filename": "src/test/ui/argument-suggestions/permuted_arguments.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -2,10 +2,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/permuted_arguments.rs:10:3\n    |\n LL |   three_args(1.0, \"\", 1);\n-   |   ^^^^^^^^^^ ---  --  - expected `&str`,found `{integer}`\n+   |   ^^^^^^^^^^ ---  --  - expected `&str`, found `{integer}`\n    |              |    |\n-   |              |    expected `f32`,found `&'static str`\n-   |              expected `i32`,found `{float}`\n+   |              |    expected `f32`, found `&'static str`\n+   |              expected `i32`, found `{float}`\n    |\n note: function defined here\n   --> $DIR/permuted_arguments.rs:5:4\n@@ -21,12 +21,12 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/permuted_arguments.rs:12:3\n    |\n LL |   many_args(X {}, Y {}, 1, 1.0, \"\");\n-   |   ^^^^^^^^^ ----  ----  -  ---  -- expected `Y`,found `&'static str`\n+   |   ^^^^^^^^^ ----  ----  -  ---  -- expected `Y`, found `&'static str`\n    |             |     |     |  |\n-   |             |     |     |  expected `X`,found `{float}`\n-   |             |     |     expected `&str`,found `{integer}`\n-   |             |     expected `f32`,found `Y`\n-   |             expected `i32`,found `X`\n+   |             |     |     |  expected `X`, found `{float}`\n+   |             |     |     expected `&str`, found `{integer}`\n+   |             |     expected `f32`, found `Y`\n+   |             expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/permuted_arguments.rs:6:4"}, {"sha": "a90792d0c5340296c316d01b03782567bdab9a02", "filename": "src/test/ui/argument-suggestions/swapped_arguments.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -2,9 +2,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:8:3\n    |\n LL |   two_args(1.0, 1);\n-   |   ^^^^^^^^ ---  - expected `f32`,found `{integer}`\n+   |   ^^^^^^^^ ---  - expected `f32`, found `{integer}`\n    |            |\n-   |            expected `i32`,found `{float}`\n+   |            expected `i32`, found `{float}`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:3:4\n@@ -20,9 +20,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:9:3\n    |\n LL |   three_args(1.0,   1,  \"\");\n-   |   ^^^^^^^^^^ ---    - expected `f32`,found `{integer}`\n+   |   ^^^^^^^^^^ ---    - expected `f32`, found `{integer}`\n    |              |\n-   |              expected `i32`,found `{float}`\n+   |              expected `i32`, found `{float}`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:4:4\n@@ -38,9 +38,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:10:3\n    |\n LL |   three_args(  1,  \"\", 1.0);\n-   |   ^^^^^^^^^^       --  --- expected `&str`,found `{float}`\n+   |   ^^^^^^^^^^       --  --- expected `&str`, found `{float}`\n    |                    |\n-   |                    expected `f32`,found `&'static str`\n+   |                    expected `f32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:4:4\n@@ -56,9 +56,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:11:3\n    |\n LL |   three_args( \"\", 1.0,   1);\n-   |   ^^^^^^^^^^  --         - expected `&str`,found `{integer}`\n+   |   ^^^^^^^^^^  --         - expected `&str`, found `{integer}`\n    |               |\n-   |               expected `i32`,found `&'static str`\n+   |               expected `i32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:4:4\n@@ -74,11 +74,11 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:13:3\n    |\n LL |   four_args(1.0, 1, X {}, \"\");\n-   |   ^^^^^^^^^ ---  -  ----  -- expected `X`,found `&'static str`\n+   |   ^^^^^^^^^ ---  -  ----  -- expected `X`, found `&'static str`\n    |             |    |  |\n-   |             |    |  expected `&str`,found `X`\n-   |             |    expected `f32`,found `{integer}`\n-   |             expected `i32`,found `{float}`\n+   |             |    |  expected `&str`, found `X`\n+   |             |    expected `f32`, found `{integer}`\n+   |             expected `i32`, found `{float}`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:5:4"}, {"sha": "a8b2a283039fd2fbf320285c38d376c856e3e028", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -0,0 +1,24 @@\n+// FIXME(compiler-errors): This really should suggest `let` on the RHS of the\n+// `&&` operator, but that's kinda hard to do because of precedence.\n+// Instead, for now we just make sure not to suggest `if let let`.\n+fn a() {\n+    if let x = 1 && i = 2 {}\n+    //~^ ERROR cannot find value `i` in this scope\n+    //~| ERROR `let` expressions in this position are unstable\n+    //~| ERROR mismatched types\n+    //~| ERROR `let` expressions are not supported here\n+}\n+\n+fn b() {\n+    if (i + j) = i {}\n+    //~^ ERROR cannot find value `i` in this scope\n+    //~| ERROR cannot find value `i` in this scope\n+    //~| ERROR cannot find value `j` in this scope\n+}\n+\n+fn c() {\n+    if x[0] = 1 {}\n+    //~^ ERROR cannot find value `x` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "60d286fedf58ab8f463df319e40770afd8eb7596", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -0,0 +1,69 @@\n+error: `let` expressions are not supported here\n+  --> $DIR/bad-if-let-suggestion.rs:5:8\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:5:21\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |                     ^ not found in this scope\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:13:9\n+   |\n+LL | fn a() {\n+   | ------ similarly named function `a` defined here\n+...\n+LL |     if (i + j) = i {}\n+   |         ^ help: a function with a similar name exists: `a`\n+\n+error[E0425]: cannot find value `j` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:13:13\n+   |\n+LL | fn a() {\n+   | ------ similarly named function `a` defined here\n+...\n+LL |     if (i + j) = i {}\n+   |             ^ help: a function with a similar name exists: `a`\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:13:18\n+   |\n+LL | fn a() {\n+   | ------ similarly named function `a` defined here\n+...\n+LL |     if (i + j) = i {}\n+   |                  ^ help: a function with a similar name exists: `a`\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:20:8\n+   |\n+LL | fn a() {\n+   | ------ similarly named function `a` defined here\n+...\n+LL |     if x[0] = 1 {}\n+   |        ^ help: a function with a similar name exists: `a`\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/bad-if-let-suggestion.rs:5:8\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bad-if-let-suggestion.rs:5:8\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |        ^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0308, E0425, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "42b5d36bfad4aea6494879c6116e0f153338bb09", "filename": "src/test/ui/iterators/vec-on-unimplemented.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    vec![true, false].map(|v| !v).collect::<Vec<_>>();\n+    //~^ ERROR `Vec<bool>` is not an iterator\n+}"}, {"sha": "afcce5c30ca021f7d53fd95ee0d52ead498b812f", "filename": "src/test/ui/iterators/vec-on-unimplemented.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fvec-on-unimplemented.stderr?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -0,0 +1,20 @@\n+error[E0599]: `Vec<bool>` is not an iterator\n+  --> $DIR/vec-on-unimplemented.rs:2:23\n+   |\n+LL |     vec![true, false].map(|v| !v).collect::<Vec<_>>();\n+   |                       ^^^ `Vec<bool>` is not an iterator; try calling `.into_iter()` or `.iter()`\n+   |\n+  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   | ------------------------------------------------------------------------------------------------ doesn't satisfy `Vec<bool>: Iterator`\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `Vec<bool>: Iterator`\n+           which is required by `&mut Vec<bool>: Iterator`\n+           `[bool]: Iterator`\n+           which is required by `&mut [bool]: Iterator`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "fb126339dc21665970c684a3075792ec7748881f", "filename": "src/test/ui/json-multiple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fjson-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fjson-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-multiple.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1,6 +1,5 @@\n // build-pass\n // ignore-pass (different metadata emitted in different modes)\n // compile-flags: --json=diagnostic-short --json artifacts --error-format=json\n-// ignore-compare-mode-nll\n \n #![crate_type = \"lib\"]"}, {"sha": "8b6ba131eb0021c0a7ce4515548c8faf49fdc954", "filename": "src/test/ui/json-options.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fjson-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fjson-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-options.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1,6 +1,5 @@\n // build-pass\n // ignore-pass (different metadata emitted in different modes)\n // compile-flags: --json=diagnostic-short,artifacts --error-format=json\n-// ignore-compare-mode-nll\n \n #![crate_type = \"lib\"]"}, {"sha": "8d88264353a72090f2e48bff4eb146b3bea8ee23", "filename": "src/test/ui/lifetimes/issue-67498.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Flifetimes%2Fissue-67498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Flifetimes%2Fissue-67498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-67498.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+// Regression test for #67498.\n+\n+pub fn f<'a, 'b, 'd, 'e> (\n+    x: for<'c> fn(\n+        fn(&'c fn(&'c ())),\n+        fn(&'c fn(&'c ())),\n+        fn(&'c fn(&'c ())),\n+        fn(&'c fn(&'c ())),\n+    )\n+) -> fn(\n+        fn(&'a fn(&'d ())),\n+        fn(&'b fn(&'d ())),\n+        fn(&'a fn(&'e ())),\n+        fn(&'b fn(&'e ())),\n+) {\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "2cf49b66be61c241c885e1dbece70c807f6c02fc", "filename": "src/test/ui/parser/keyword-box-as-identifier.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1,3 +1,10 @@\n fn main() {\n-    let box = \"foo\"; //~ error: expected pattern, found `=`\n+    let box = 0;\n+    //~^ ERROR expected pattern, found `=`\n+    let box: bool;\n+    //~^ ERROR expected pattern, found `:`\n+    let mut box = 0;\n+    //~^ ERROR expected pattern, found `=`\n+    let (box,) = (0,);\n+    //~^ ERROR expected pattern, found `,`\n }"}, {"sha": "eaa1f8003c53a7875e01950480d97c30cd4442bd", "filename": "src/test/ui/parser/keyword-box-as-identifier.stderr", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-box-as-identifier.stderr?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1,8 +1,66 @@\n error: expected pattern, found `=`\n   --> $DIR/keyword-box-as-identifier.rs:2:13\n    |\n-LL |     let box = \"foo\";\n-   |             ^ expected pattern\n+LL |     let box = 0;\n+   |             ^\n+   |\n+note: `box` is a reserved keyword\n+  --> $DIR/keyword-box-as-identifier.rs:2:9\n+   |\n+LL |     let box = 0;\n+   |         ^^^\n+help: escape `box` to use it as an identifier\n+   |\n+LL |     let r#box = 0;\n+   |         ++\n+\n+error: expected pattern, found `:`\n+  --> $DIR/keyword-box-as-identifier.rs:4:12\n+   |\n+LL |     let box: bool;\n+   |            ^\n+   |\n+note: `box` is a reserved keyword\n+  --> $DIR/keyword-box-as-identifier.rs:4:9\n+   |\n+LL |     let box: bool;\n+   |         ^^^\n+help: escape `box` to use it as an identifier\n+   |\n+LL |     let r#box: bool;\n+   |         ++\n+\n+error: expected pattern, found `=`\n+  --> $DIR/keyword-box-as-identifier.rs:6:17\n+   |\n+LL |     let mut box = 0;\n+   |                 ^\n+   |\n+note: `box` is a reserved keyword\n+  --> $DIR/keyword-box-as-identifier.rs:6:13\n+   |\n+LL |     let mut box = 0;\n+   |             ^^^\n+help: escape `box` to use it as an identifier\n+   |\n+LL |     let mut r#box = 0;\n+   |             ++\n+\n+error: expected pattern, found `,`\n+  --> $DIR/keyword-box-as-identifier.rs:8:13\n+   |\n+LL |     let (box,) = (0,);\n+   |             ^\n+   |\n+note: `box` is a reserved keyword\n+  --> $DIR/keyword-box-as-identifier.rs:8:10\n+   |\n+LL |     let (box,) = (0,);\n+   |          ^^^\n+help: escape `box` to use it as an identifier\n+   |\n+LL |     let (r#box,) = (0,);\n+   |          ++\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n "}, {"sha": "984a7fabb6633ee8c750b69c46993dff237da645", "filename": "src/test/ui/rmeta/emit-artifact-notifications.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -2,7 +2,6 @@\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n-// ignore-compare-mode-nll\n \n // A very basic test for the emission of artifact notifications in JSON output.\n "}, {"sha": "9179944a6201d62cd56e64e303f9473c62d2bc37", "filename": "src/test/ui/save-analysis/emit-notifications.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -3,6 +3,5 @@\n // compile-flags: --crate-type rlib --error-format=json\n // ignore-pass\n // ^-- needed because otherwise, the .stderr file changes with --pass check\n-// ignore-compare-mode-nll\n \n pub fn foo() {}"}, {"sha": "b758bb9cf6790a5882ae74cf816d080aabea7b20", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f5622a53210099a19ab46ce2316494fb413d7c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=15f5622a53210099a19ab46ce2316494fb413d7c", "patch": "@@ -1939,7 +1939,7 @@ impl<'test> TestCx<'test> {\n \n         match self.config.compare_mode {\n             Some(CompareMode::Polonius) => {\n-                rustc.args(&[\"-Zpolonius\", \"-Zborrowck=mir\"]);\n+                rustc.args(&[\"-Zpolonius\"]);\n             }\n             Some(CompareMode::Chalk) => {\n                 rustc.args(&[\"-Zchalk\"]);"}]}