{"sha": "5d23d8bc299b718e7f026a7e6c1363dde3342817", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjNkOGJjMjk5YjcxOGU3ZjAyNmE3ZTZjMTM2M2RkZTMzNDI4MTc=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-02-27T14:59:52Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-02-27T15:00:17Z"}, "message": "Add runnables::related_tests", "tree": {"sha": "2307bfa224d8b18706b27e1d2756c177872624ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2307bfa224d8b18706b27e1d2756c177872624ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d23d8bc299b718e7f026a7e6c1363dde3342817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d23d8bc299b718e7f026a7e6c1363dde3342817", "html_url": "https://github.com/rust-lang/rust/commit/5d23d8bc299b718e7f026a7e6c1363dde3342817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d23d8bc299b718e7f026a7e6c1363dde3342817/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8cf346b972b5e79a3b18de5a7f71e49a228be7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8cf346b972b5e79a3b18de5a7f71e49a228be7c", "html_url": "https://github.com/rust-lang/rust/commit/a8cf346b972b5e79a3b18de5a7f71e49a228be7c"}], "stats": {"total": 353, "additions": 346, "deletions": 7}, "files": [{"sha": "069fc01d0c7e3c89d1f7aba5268c9dadbddc59d9", "filename": "crates/cfg/src/cfg_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d23d8bc299b718e7f026a7e6c1363dde3342817/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d23d8bc299b718e7f026a7e6c1363dde3342817/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs?ref=5d23d8bc299b718e7f026a7e6c1363dde3342817", "patch": "@@ -49,7 +49,7 @@ impl fmt::Display for CfgAtom {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum CfgExpr {\n     Invalid,\n     Atom(CfgAtom),"}, {"sha": "baa80cf43a3e550d0e607f314aa65add95e4d8b3", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d23d8bc299b718e7f026a7e6c1363dde3342817/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d23d8bc299b718e7f026a7e6c1363dde3342817/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=5d23d8bc299b718e7f026a7e6c1363dde3342817", "patch": "@@ -445,6 +445,15 @@ impl Analysis {\n         self.with_db(|db| runnables::runnables(db, file_id))\n     }\n \n+    /// Returns the set of tests for the given file position.\n+    pub fn related_tests(\n+        &self,\n+        position: FilePosition,\n+        search_scope: Option<SearchScope>,\n+    ) -> Cancelable<Vec<Runnable>> {\n+        self.with_db(|db| runnables::related_tests(db, position, search_scope))\n+    }\n+\n     /// Computes syntax highlighting for the given file\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HlRange>> {\n         self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))"}, {"sha": "ce3a2e7baa8e29dae6b3248ed1a0e2114cc7adb2", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 332, "deletions": 6, "changes": 338, "blob_url": "https://github.com/rust-lang/rust/blob/5d23d8bc299b718e7f026a7e6c1363dde3342817/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d23d8bc299b718e7f026a7e6c1363dde3342817/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=5d23d8bc299b718e7f026a7e6c1363dde3342817", "patch": "@@ -1,10 +1,14 @@\n use std::fmt;\n \n+use ast::NameOwner;\n use cfg::CfgExpr;\n use hir::{AsAssocItem, HasAttrs, HasSource, Semantics};\n use ide_assists::utils::test_related_attribute;\n-use ide_db::{defs::Definition, RootDatabase, SymbolKind};\n+use ide_db::{\n+    base_db::FilePosition, defs::Definition, search::SearchScope, RootDatabase, SymbolKind,\n+};\n use itertools::Itertools;\n+use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n     match_ast, SyntaxNode,\n@@ -13,17 +17,17 @@ use test_utils::mark;\n \n use crate::{\n     display::{ToNav, TryToNav},\n-    FileId, NavigationTarget,\n+    references, FileId, NavigationTarget,\n };\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub struct Runnable {\n     pub nav: NavigationTarget,\n     pub kind: RunnableKind,\n     pub cfg: Option<CfgExpr>,\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub enum TestId {\n     Name(String),\n     Path(String),\n@@ -38,7 +42,7 @@ impl fmt::Display for TestId {\n     }\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub enum RunnableKind {\n     Test { test_id: TestId, attr: TestAttr },\n     TestMod { path: String },\n@@ -106,6 +110,102 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     res\n }\n \n+// Feature: Run Test\n+//\n+// Shows a popup suggesting to run a test in which the item **at the current cursor\n+// location** is used (if any).\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Run Test**\n+// |===\n+pub(crate) fn related_tests(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+    search_scope: Option<SearchScope>,\n+) -> Vec<Runnable> {\n+    let sema = Semantics::new(db);\n+    let mut res: FxHashSet<Runnable> = FxHashSet::default();\n+\n+    find_related_tests(&sema, position, search_scope, &mut res);\n+\n+    res.into_iter().collect_vec()\n+}\n+\n+fn find_related_tests(\n+    sema: &Semantics<RootDatabase>,\n+    position: FilePosition,\n+    search_scope: Option<SearchScope>,\n+    tests: &mut FxHashSet<Runnable>,\n+) {\n+    if let Some(refs) = references::find_all_refs(&sema, position, search_scope) {\n+        for (file_id, refs) in refs.references {\n+            let file = sema.parse(file_id);\n+            let file = file.syntax();\n+            let functions = refs.iter().filter_map(|(range, _)| {\n+                let token = file.token_at_offset(range.start()).next()?;\n+                let token = sema.descend_into_macros(token);\n+                let syntax = token.parent();\n+                syntax.ancestors().find_map(ast::Fn::cast)\n+            });\n+\n+            for fn_def in functions {\n+                if let Some(runnable) = as_test_runnable(&sema, &fn_def) {\n+                    // direct test\n+                    tests.insert(runnable);\n+                } else if let Some(module) = parent_test_module(&sema, &fn_def) {\n+                    // indirect test\n+                    find_related_tests_in_module(sema, &fn_def, &module, tests);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn find_related_tests_in_module(\n+    sema: &Semantics<RootDatabase>,\n+    fn_def: &ast::Fn,\n+    parent_module: &hir::Module,\n+    tests: &mut FxHashSet<Runnable>,\n+) {\n+    if let Some(fn_name) = fn_def.name() {\n+        let mod_source = parent_module.definition_source(sema.db);\n+        let range = match mod_source.value {\n+            hir::ModuleSource::Module(m) => m.syntax().text_range(),\n+            hir::ModuleSource::BlockExpr(b) => b.syntax().text_range(),\n+            hir::ModuleSource::SourceFile(f) => f.syntax().text_range(),\n+        };\n+\n+        let file_id = mod_source.file_id.original_file(sema.db);\n+        let mod_scope = SearchScope::file_part(file_id, range);\n+        let fn_pos = FilePosition { file_id, offset: fn_name.syntax().text_range().start() };\n+        find_related_tests(sema, fn_pos, Some(mod_scope), tests)\n+    }\n+}\n+\n+fn as_test_runnable(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Option<Runnable> {\n+    if test_related_attribute(&fn_def).is_some() {\n+        let function = sema.to_def(fn_def)?;\n+        runnable_fn(sema, function)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn parent_test_module(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Option<hir::Module> {\n+    fn_def.syntax().ancestors().find_map(|node| {\n+        let module = ast::Module::cast(node)?;\n+        let module = sema.to_def(&module)?;\n+\n+        if has_test_function_or_multiple_test_submodules(sema, &module) {\n+            Some(module)\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n fn runnables_mod(sema: &Semantics<RootDatabase>, acc: &mut Vec<Runnable>, module: hir::Module) {\n     acc.extend(module.declarations(sema.db).into_iter().filter_map(|def| {\n         let runnable = match def {\n@@ -255,7 +355,7 @@ fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Op\n     Some(res)\n }\n \n-#[derive(Debug, Copy, Clone)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct TestAttr {\n     pub ignore: bool,\n }\n@@ -349,6 +449,12 @@ mod tests {\n         );\n     }\n \n+    fn check_tests(ra_fixture: &str, expect: Expect) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        let tests = analysis.related_tests(position, None).unwrap();\n+        expect.assert_debug_eq(&tests);\n+    }\n+\n     #[test]\n     fn test_runnables() {\n         check(\n@@ -1074,4 +1180,224 @@ mod tests {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn find_no_tests() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+fn foo$0() {  };\n+\"#,\n+            expect![[r#\"\n+                []\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn find_direct_fn_test() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+fn foo$0() { };\n+\n+mod tests {\n+    #[test]\n+    fn foo_test() {\n+        super::foo()\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 31..85,\n+                            focus_range: 46..54,\n+                            name: \"foo_test\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn find_direct_struct_test() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+struct Fo$0o;\n+fn foo(arg: &Foo) { };\n+\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn foo_test() {\n+        foo(Foo);\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+            [\n+                Runnable {\n+                    nav: NavigationTarget {\n+                        file_id: FileId(\n+                            0,\n+                        ),\n+                        full_range: 71..122,\n+                        focus_range: 86..94,\n+                        name: \"foo_test\",\n+                        kind: Function,\n+                    },\n+                    kind: Test {\n+                        test_id: Path(\n+                            \"tests::foo_test\",\n+                        ),\n+                        attr: TestAttr {\n+                            ignore: false,\n+                        },\n+                    },\n+                    cfg: None,\n+                },\n+            ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn find_indirect_fn_test() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+fn foo$0() { };\n+\n+mod tests {\n+    use super::foo;\n+\n+    fn check1() {\n+        check2()\n+    }\n+\n+    fn check2() {\n+        foo()\n+    }\n+\n+    #[test]\n+    fn foo_test() {\n+        check1()\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 133..183,\n+                            focus_range: 148..156,\n+                            name: \"foo_test\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn tests_are_unique() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+fn foo$0() { };\n+\n+mod tests {\n+    use super::foo;\n+\n+    #[test]\n+    fn foo_test() {\n+        foo();\n+        foo();\n+    }\n+\n+    #[test]\n+    fn foo2_test() {\n+        foo();\n+        foo();\n+    }\n+\n+}\n+\"#,\n+            expect![[r#\"\n+            [\n+                Runnable {\n+                    nav: NavigationTarget {\n+                        file_id: FileId(\n+                            0,\n+                        ),\n+                        full_range: 52..115,\n+                        focus_range: 67..75,\n+                        name: \"foo_test\",\n+                        kind: Function,\n+                    },\n+                    kind: Test {\n+                        test_id: Path(\n+                            \"tests::foo_test\",\n+                        ),\n+                        attr: TestAttr {\n+                            ignore: false,\n+                        },\n+                    },\n+                    cfg: None,\n+                },\n+                Runnable {\n+                    nav: NavigationTarget {\n+                        file_id: FileId(\n+                            0,\n+                        ),\n+                        full_range: 121..185,\n+                        focus_range: 136..145,\n+                        name: \"foo2_test\",\n+                        kind: Function,\n+                    },\n+                    kind: Test {\n+                        test_id: Path(\n+                            \"tests::foo2_test\",\n+                        ),\n+                        attr: TestAttr {\n+                            ignore: false,\n+                        },\n+                    },\n+                    cfg: None,\n+                },\n+            ]\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "8b211256e26fe557570afdcf4b55023b8d469a21", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d23d8bc299b718e7f026a7e6c1363dde3342817/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d23d8bc299b718e7f026a7e6c1363dde3342817/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=5d23d8bc299b718e7f026a7e6c1363dde3342817", "patch": "@@ -86,6 +86,10 @@ impl SearchScope {\n         SearchScope::new(std::iter::once((file, None)).collect())\n     }\n \n+    pub fn file_part(file: FileId, range: TextRange) -> SearchScope {\n+        SearchScope::new(std::iter::once((file, Some(range))).collect())\n+    }\n+\n     pub fn files(files: &[FileId]) -> SearchScope {\n         SearchScope::new(files.iter().map(|f| (*f, None)).collect())\n     }"}]}