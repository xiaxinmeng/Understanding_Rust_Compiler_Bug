{"sha": "86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "node_id": "C_kwDOAAsO6NoAKDg2Y2VkYjQwNjJkZDNkYjg3ZDFjZjRkYmM0MGU1N2NiM2M0ZDFhOTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-15T21:02:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-15T21:02:58Z"}, "message": "Rollup merge of #105679 - estebank:suggest-clone, r=compiler-errors\n\nSuggest constraining type parameter with `Clone`\n\nFix #34896.", "tree": {"sha": "36008def23c2fccb1749576373309a77b88c1ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36008def23c2fccb1749576373309a77b88c1ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjm4uCCRBK7hj4Ov3rIwAAp4YIADQJp+gMyH96hN90LETXGSJe\nax5w9x6onHUenVU1FMPub2I1MJwBgVK6S2Ert/b0I/fKT+Ner5DBRV+pUyOUA8+a\nbMx7uHQqyi+GKAbjD4lGBM/51mhGFRF6amNzBaC9QI9Jk7MtqMCo54UnmAlKJFgM\n4wEi62YMAsyDrKueNOimiIRtaCrX8BDG+IU/awqUZUuJsbj6inBVItrjyODiQoSB\nrbPcsQtwKvRB8L6cZ29/n6zvyDc4ihABLGrC0vPChh1G1yDN7Oq6zeiVPjH7ZI1W\nTciPdQmKYWfa4c0rAhrTy5M/gL5mnxNLVPiwIYsY7qcEmSyGGAAZy3uAOBeCOZI=\n=n11B\n-----END PGP SIGNATURE-----\n", "payload": "tree 36008def23c2fccb1749576373309a77b88c1ed1\nparent 622f56065e695f36211583f276af6946f229b6ab\nparent e1b340195a04bc079df3bda8e627ad6e64938d50\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671138178 +0100\ncommitter GitHub <noreply@github.com> 1671138178 +0100\n\nRollup merge of #105679 - estebank:suggest-clone, r=compiler-errors\n\nSuggest constraining type parameter with `Clone`\n\nFix #34896.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "html_url": "https://github.com/rust-lang/rust/commit/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622f56065e695f36211583f276af6946f229b6ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/622f56065e695f36211583f276af6946f229b6ab", "html_url": "https://github.com/rust-lang/rust/commit/622f56065e695f36211583f276af6946f229b6ab"}, {"sha": "e1b340195a04bc079df3bda8e627ad6e64938d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b340195a04bc079df3bda8e627ad6e64938d50", "html_url": "https://github.com/rust-lang/rust/commit/e1b340195a04bc079df3bda8e627ad6e64938d50"}], "stats": {"total": 103, "additions": 97, "deletions": 6}, "files": [{"sha": "407d6ac8544c211a8cce00fa74b0cfb983bddbea", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "patch": "@@ -13,7 +13,9 @@ use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Binder, DefIdTree, IsSuggestable, Ty};\n+use rustc_middle::ty::{\n+    self, suggest_constraining_type_params, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty,\n+};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -1276,15 +1278,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n             // Check that we're in fact trying to clone into the expected type\n             && self.can_coerce(*pointee_ty, expected_ty)\n+            && let trait_ref = ty::Binder::dummy(self.tcx.mk_trait_ref(clone_trait_did, [expected_ty]))\n             // And the expected type doesn't implement `Clone`\n             && !self.predicate_must_hold_considering_regions(&traits::Obligation::new(\n                 self.tcx,\n                 traits::ObligationCause::dummy(),\n                 self.param_env,\n-                ty::Binder::dummy(self.tcx.mk_trait_ref(\n-                    clone_trait_did,\n-                    [expected_ty],\n-                )),\n+                trait_ref,\n             ))\n         {\n             diag.span_note(\n@@ -1293,6 +1293,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     \"`{expected_ty}` does not implement `Clone`, so `{found_ty}` was cloned instead\"\n                 ),\n             );\n+            let owner = self.tcx.hir().enclosing_body_owner(expr.hir_id);\n+            if let ty::Param(param) = expected_ty.kind()\n+                && let Some(generics) = self.tcx.hir().get_generics(owner)\n+            {\n+                suggest_constraining_type_params(\n+                    self.tcx,\n+                    generics,\n+                    diag,\n+                    vec![(param.name.as_str(), \"Clone\", Some(clone_trait_did))].into_iter(),\n+                );\n+            } else {\n+                self.suggest_derive(diag, &[(trait_ref.to_predicate(self.tcx), None, None)]);\n+            }\n         }\n     }\n "}, {"sha": "63cec9216eb89fa70f262db6c73cb57b4eee1d6b", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "patch": "@@ -1852,7 +1852,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_derive(err, &preds);\n     }\n \n-    fn suggest_derive(\n+    pub fn suggest_derive(\n         &self,\n         err: &mut Diagnostic,\n         unsatisfied_predicates: &[("}, {"sha": "4f9e93a47ed1c6bf88bcf5147cf0bff0b48f7322", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed?ref=86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+fn wat<T: Clone>(t: &T) -> T {\n+    t.clone() //~ ERROR E0308\n+}\n+\n+#[derive(Clone)]\n+struct Foo;\n+\n+fn wut(t: &Foo) -> Foo {\n+    t.clone() //~ ERROR E0308\n+}\n+\n+fn main() {\n+    wat(&42);\n+    wut(&Foo);\n+}"}, {"sha": "89b077d671a513b6018173e77d8e8cf702e89bcb", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs?ref=86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+fn wat<T>(t: &T) -> T {\n+    t.clone() //~ ERROR E0308\n+}\n+\n+struct Foo;\n+\n+fn wut(t: &Foo) -> Foo {\n+    t.clone() //~ ERROR E0308\n+}\n+\n+fn main() {\n+    wat(&42);\n+    wut(&Foo);\n+}"}, {"sha": "26ab515d9b4b6fd0c84c8b5c58d818ecf88fdf98", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr?ref=86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "patch": "@@ -0,0 +1,43 @@\n+error[E0308]: mismatched types\n+  --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:3:5\n+   |\n+LL | fn wat<T>(t: &T) -> T {\n+   |        -            - expected `T` because of return type\n+   |        |\n+   |        this type parameter\n+LL |     t.clone()\n+   |     ^^^^^^^^^ expected type parameter `T`, found `&T`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&T`\n+note: `T` does not implement `Clone`, so `&T` was cloned instead\n+  --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:3:5\n+   |\n+LL |     t.clone()\n+   |     ^\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn wat<T: Clone>(t: &T) -> T {\n+   |         +++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:9:5\n+   |\n+LL | fn wut(t: &Foo) -> Foo {\n+   |                    --- expected `Foo` because of return type\n+LL |     t.clone()\n+   |     ^^^^^^^^^ expected struct `Foo`, found `&Foo`\n+   |\n+note: `Foo` does not implement `Clone`, so `&Foo` was cloned instead\n+  --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:9:5\n+   |\n+LL |     t.clone()\n+   |     ^\n+help: consider annotating `Foo` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ff36e18d28301ef3b1934208e8ed2175a8ecbe9f", "filename": "src/test/ui/typeck/explain_clone_autoref.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr?ref=86cedb4062dd3db87d1cf4dbc40e57cb3c4d1a91", "patch": "@@ -12,6 +12,10 @@ note: `NotClone` does not implement `Clone`, so `&NotClone` was cloned instead\n    |\n LL |     nc.clone()\n    |     ^^\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}]}