{"sha": "b7a9d6a51ff548a0ffbef8b537127ced7ad527ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YTlkNmE1MWZmNTQ4YTBmZmJlZjhiNTM3MTI3Y2VkN2FkNTI3ZWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-15T22:30:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-15T22:30:51Z"}, "message": "Rollup merge of #77693 - bugadani:issue-59352, r=oli-obk\n\nAdd test for #59352\n\nIssue #59352 reported an optimization regression with rustc 1.32.0+. That regression could be tracked to a change that caused a function to miss the size limit of llvm's inlining, which results in an unreachable panicing branch being generated.\nEnabling mir inline solves the issue, but is currently only done for `mir-opt-level>=2`.\n\nThis PR adds a test that can serve as a regression test for #59352, if/when mir inlining gets mature enough for opt-level 1, or some other optimization can remove the panic.", "tree": {"sha": "80eefae88b2253d1340a30db94169f8753e0d22c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80eefae88b2253d1340a30db94169f8753e0d22c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAhebCRBK7hj4Ov3rIwAAdHIIAAt5GXuyXCdtTscYMbzwuvMz\nsTgMsxi6x9BZNvWsSlUo12jcl2Q9DTtRQWr0phMRvyh/lBKvxy5CZu82kuSLHrGR\nbW6kEh0mNKUw7I9+cNYqusxzqYMRYK3u9uy/8M9yaos46xu9+bXCe2MUI1rTB6EK\niZSARgZWyyy4FhpKXRWv0rgOElO/AznUs5QPjeBJAa1lMQSzBmPc5tIabxx6ukRv\nAlyrw6z1gW+U4/ckFjsFWFWRu+CNGxcKO9nXlgwckAGa4WdbqUC4n09U3W6PIu8P\nwjN4bTnG8OmDiTuP6XbuQ27FU0cScg+TjCNPDfDcb7+NuEmsp/qpuFz2zaml0j0=\n=9I48\n-----END PGP SIGNATURE-----\n", "payload": "tree 80eefae88b2253d1340a30db94169f8753e0d22c\nparent bc39d4d9c514e5fdb40a5782e6ca08924f979c35\nparent a0c585713174711b00f56c0f2ffe480ab878e8dc\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1610749851 +0100\ncommitter GitHub <noreply@github.com> 1610749851 +0100\n\nRollup merge of #77693 - bugadani:issue-59352, r=oli-obk\n\nAdd test for #59352\n\nIssue #59352 reported an optimization regression with rustc 1.32.0+. That regression could be tracked to a change that caused a function to miss the size limit of llvm's inlining, which results in an unreachable panicing branch being generated.\nEnabling mir inline solves the issue, but is currently only done for `mir-opt-level>=2`.\n\nThis PR adds a test that can serve as a regression test for #59352, if/when mir inlining gets mature enough for opt-level 1, or some other optimization can remove the panic.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef", "html_url": "https://github.com/rust-lang/rust/commit/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc39d4d9c514e5fdb40a5782e6ca08924f979c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc39d4d9c514e5fdb40a5782e6ca08924f979c35", "html_url": "https://github.com/rust-lang/rust/commit/bc39d4d9c514e5fdb40a5782e6ca08924f979c35"}, {"sha": "a0c585713174711b00f56c0f2ffe480ab878e8dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c585713174711b00f56c0f2ffe480ab878e8dc", "html_url": "https://github.com/rust-lang/rust/commit/a0c585713174711b00f56c0f2ffe480ab878e8dc"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "28bb85912324eead69471fbfe62e46f4695b2b8d", "filename": "src/test/codegen/issue-59352.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef/src%2Ftest%2Fcodegen%2Fissue-59352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef/src%2Ftest%2Fcodegen%2Fissue-59352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-59352.rs?ref=b7a9d6a51ff548a0ffbef8b537127ced7ad527ef", "patch": "@@ -0,0 +1,18 @@\n+// This test is a mirror of mir-opt/issues/issue-59352.rs. The LLVM inliner doesn't inline\n+// `char::method::is_digit()` and `char::method::to_digit()`, probably because of their size.\n+//\n+// Currently, the MIR optimizer isn't capable of removing the unreachable panic in this test case.\n+// Once the optimizer can do that, mir-opt/issues/issue-59352.rs will need to be updated and this\n+// test case should be removed as it will become redundant.\n+\n+// mir-opt-level=2 enables inlining and enables LLVM to optimize away the unreachable panic call.\n+// compile-flags: -O -Z mir-opt-level=2\n+\n+#![crate_type = \"rlib\"]\n+\n+// CHECK-LABEL: @num_to_digit\n+#[no_mangle]\n+pub fn num_to_digit(num: char) -> u32 {\n+    // CHECK-NOT: panic\n+    if num.is_digit(8) { num.to_digit(8).unwrap() } else { 0 }\n+}"}, {"sha": "9e59337a01d5c6df98b36f4d004c2ce6440bde9c", "filename": "src/test/mir-opt/issues/issue-59352.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-59352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-59352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue-59352.rs?ref=b7a9d6a51ff548a0ffbef8b537127ced7ad527ef", "patch": "@@ -0,0 +1,19 @@\n+// This test is a mirror of codegen/issue-59352.rs.\n+// The LLVM inliner doesn't inline `char::method::is_digit()` and so it doesn't recognize this case\n+// as effectively `if x.is_some() { x.unwrap() } else { 0 }`.\n+//\n+// Currently, the MIR optimizer isn't capable of removing the unreachable panic in this test case.\n+// Once the optimizer can do that, this test case will need to be updated and codegen/issue-59352.rs\n+// removed.\n+\n+// EMIT_MIR issue_59352.num_to_digit.PreCodegen.after.mir\n+// compile-flags: -Z mir-opt-level=2 -Z span_free_formats\n+\n+pub fn num_to_digit(num: char) -> u32 {\n+    // CHECK-NOT: panic\n+    if num.is_digit(8) { num.to_digit(8).unwrap() } else { 0 }\n+}\n+\n+pub fn main() {\n+    num_to_digit('2');\n+}"}, {"sha": "04a8c94e003c4ad75ec1f238d7f4da9f05a5c731", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b7a9d6a51ff548a0ffbef8b537127ced7ad527ef/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=b7a9d6a51ff548a0ffbef8b537127ced7ad527ef", "patch": "@@ -0,0 +1,102 @@\n+// MIR for `num_to_digit` after PreCodegen\n+\n+fn num_to_digit(_1: char) -> u32 {\n+    debug num => _1;                     // in scope 0 at $DIR/issue-59352.rs:12:21: 12:24\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-59352.rs:12:35: 12:38\n+    let mut _2: bool;                    // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+    let mut _4: char;                    // in scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+    let mut _5: u32;                     // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    let mut _10: isize;                  // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23\n+        debug self => _8;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        debug radix => _5;               // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let mut _6: &std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let _7: std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        let mut _8: char;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        scope 2 (inlined Option::<u32>::is_some) { // at $DIR/issue-59352.rs:14:8: 14:23\n+            debug self => _6;            // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        }\n+    }\n+    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue-59352.rs:14:26: 14:50\n+        debug self => _3;                // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        let mut _9: isize;               // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        scope 4 {\n+            debug val => _0;             // in scope 4 at $DIR/issue-59352.rs:14:26: 14:50\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        _8 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n+        StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        _5 = const 8_u32;                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-59352.rs:14:8: 14:23\n+                                         // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+        _4 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n+        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb3; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-59352.rs:14:30: 14:38\n+                                         // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb2: {\n+        _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:14:60: 14:61\n+        goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+    }\n+\n+    bb3: {\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:14:40: 14:41\n+        StorageLive(_9);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n+        _9 = discriminant(_3);           // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        switchInt(move _9) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+    }\n+\n+    bb4: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:62: 14:63\n+        return;                          // scope 0 at $DIR/issue-59352.rs:15:2: 15:2\n+    }\n+\n+    bb5: {\n+        _6 = &_7;                        // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _10 = discriminant((*_6));       // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        _2 = Eq(_10, const 1_isize);     // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+    }\n+\n+    bb6: {\n+        core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-59352.rs:14:26: 14:50\n+                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n+                                         // ty::Const\n+                                         // + ty: &str\n+                                         // + val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, size: Size { raw: 43 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 })\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-59352.rs:14:26: 14:50\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, size: Size { raw: 43 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 }) }\n+    }\n+\n+    bb7: {\n+        unreachable;                     // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+    }\n+\n+    bb8: {\n+        _0 = move ((_3 as Some).0: u32); // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        StorageDead(_9);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:14:49: 14:50\n+        goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n+    }\n+}"}]}