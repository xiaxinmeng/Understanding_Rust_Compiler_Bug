{"sha": "3e93045c8781bff244c119302a349a1be6bff83f", "node_id": "C_kwDOAAsO6NoAKDNlOTMwNDVjODc4MWJmZjI0NGMxMTkzMDJhMzQ5YTFiZTZiZmY4M2Y", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-20T00:22:04Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-20T00:23:30Z"}, "message": "Add a minimal reproducer of the ICE\n\nCo-authored-by: Ralf Jung <post@ralfj.de>", "tree": {"sha": "149479efa24b2bfd36c1504bc80ebbb9f531dde4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/149479efa24b2bfd36c1504bc80ebbb9f531dde4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e93045c8781bff244c119302a349a1be6bff83f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e93045c8781bff244c119302a349a1be6bff83f", "html_url": "https://github.com/rust-lang/rust/commit/3e93045c8781bff244c119302a349a1be6bff83f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e93045c8781bff244c119302a349a1be6bff83f/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db93abe8234ad14d8adca09b5d6f93030a82d4b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/db93abe8234ad14d8adca09b5d6f93030a82d4b6", "html_url": "https://github.com/rust-lang/rust/commit/db93abe8234ad14d8adca09b5d6f93030a82d4b6"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "469122095e512da997d8bdf15c4c5efb592244d8", "filename": "tests/pass/issues/issue-miri-2389.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e93045c8781bff244c119302a349a1be6bff83f/tests%2Fpass%2Fissues%2Fissue-miri-2389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e93045c8781bff244c119302a349a1be6bff83f/tests%2Fpass%2Fissues%2Fissue-miri-2389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fissues%2Fissue-miri-2389.rs?ref=3e93045c8781bff244c119302a349a1be6bff83f", "patch": "@@ -0,0 +1,17 @@\n+use std::cell::Cell;\n+\n+fn main() {\n+    unsafe {\n+        let root0 = Cell::new(42);\n+        let wildcard = &root0 as *const Cell<i32> as usize as *const Cell<i32>;\n+        // empty the stack to unknown (via SRW reborrow from wildcard)\n+        let _ref0 = &*wildcard;\n+        // Do a non-SRW reborrow from wildcard to start building up a stack again.\n+        // Now new refs start being inserted at idx 0, pushing the unique_range up.\n+        let _refn = &*&*&*&*&*(wildcard.cast::<i32>());\n+        // empty the stack again, but this time with unique_range.start sitting at some high index.\n+        let _ref0 = &*wildcard;\n+        // and do a read which tries to clear the uniques\n+        wildcard.cast::<i32>().read();\n+    }\n+}"}, {"sha": "2ff931f231573251f9cbd5901ae166766efd15c2", "filename": "tests/pass/issues/issue-miri-2389.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e93045c8781bff244c119302a349a1be6bff83f/tests%2Fpass%2Fissues%2Fissue-miri-2389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e93045c8781bff244c119302a349a1be6bff83f/tests%2Fpass%2Fissues%2Fissue-miri-2389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fissues%2Fissue-miri-2389.stderr?ref=3e93045c8781bff244c119302a349a1be6bff83f", "patch": "@@ -0,0 +1,15 @@\n+warning: integer-to-pointer cast\n+  --> $DIR/issue-miri-2389.rs:LL:CC\n+   |\n+LL |         let wildcard = &root0 as *const Cell<i32> as usize as *const Cell<i32>;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n+   |\n+   = help: This program is using integer-to-pointer casts or (equivalently) `ptr::from_exposed_addr`,\n+   = help: which means that Miri might miss pointer bugs in this program.\n+   = help: See https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation.\n+   = help: To ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead.\n+   = help: You can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics.\n+   = help: Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/issue-miri-2389.rs:LL:CC\n+"}]}