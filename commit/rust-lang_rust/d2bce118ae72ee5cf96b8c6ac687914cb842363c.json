{"sha": "d2bce118ae72ee5cf96b8c6ac687914cb842363c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYmNlMTE4YWU3MmVlNWNmOTZiOGM2YWM2ODc5MTRjYjg0MjM2M2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-20T19:02:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-20T19:02:03Z"}, "message": "switch to dynamic dispatch for TokenSource\n\nBenchmarks show no difference. This is probably because we are\nbottlenecked on memory allocations, and we should fix that, but we are\nnot optimizing for performance just yet.\n\nchanges. Lines starting # with '#' will be ignored, and an empty\nmessage aborts the commit. # # On branch token-source # Changes to be\ncommitted: # modified: crates/ra_syntax/src/parsing/parser_api.rs #\nmodified: crates/ra_syntax/src/parsing/parser_impl.rs #", "tree": {"sha": "21e35f7d44add69cb3bc3d4af09e0bdd01dac0a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21e35f7d44add69cb3bc3d4af09e0bdd01dac0a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2bce118ae72ee5cf96b8c6ac687914cb842363c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bce118ae72ee5cf96b8c6ac687914cb842363c", "html_url": "https://github.com/rust-lang/rust/commit/d2bce118ae72ee5cf96b8c6ac687914cb842363c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2bce118ae72ee5cf96b8c6ac687914cb842363c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c81b9deeed81bfb2cf8142af9d748317d5d71a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c81b9deeed81bfb2cf8142af9d748317d5d71a1", "html_url": "https://github.com/rust-lang/rust/commit/0c81b9deeed81bfb2cf8142af9d748317d5d71a1"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "aed23a6a491fffffb402bd5a0996058c30483de8", "filename": "crates/ra_syntax/src/parsing/parser_api.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2bce118ae72ee5cf96b8c6ac687914cb842363c/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2bce118ae72ee5cf96b8c6ac687914cb842363c/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_api.rs?ref=d2bce118ae72ee5cf96b8c6ac687914cb842363c", "patch": "@@ -4,7 +4,7 @@ use crate::{\n     SyntaxKind::{self, ERROR},\n     parsing::{\n         token_set::TokenSet,\n-        parser_impl::ParserImpl\n+        parser_impl::ParserImpl,\n     },\n };\n \n@@ -17,9 +17,7 @@ use crate::{\n /// tree, but rather a flat stream of events of the form\n /// \"start expression, consume number literal,\n /// finish expression\". See `Event` docs for more.\n-pub(crate) struct Parser<'t>(\n-    pub(super) ParserImpl<crate::parsing::parser_impl::input::ParserInput<'t>>,\n-);\n+pub(crate) struct Parser<'t>(pub(super) ParserImpl<'t>);\n \n impl<'t> Parser<'t> {\n     /// Returns the kind of the current token."}, {"sha": "96de32fc256f6fd5f7b4d1e8f973fef9d15a203f", "filename": "crates/ra_syntax/src/parsing/parser_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2bce118ae72ee5cf96b8c6ac687914cb842363c/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2bce118ae72ee5cf96b8c6ac687914cb842363c/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs?ref=d2bce118ae72ee5cf96b8c6ac687914cb842363c", "patch": "@@ -54,7 +54,7 @@ pub(super) fn parse_with<S: TreeSink>(\n ) -> S::Tree {\n     let mut events = {\n         let input = input::ParserInput::new(text, tokens);\n-        let parser_impl = ParserImpl::new(input);\n+        let parser_impl = ParserImpl::new(&input);\n         let mut parser_api = Parser(parser_impl);\n         parser(&mut parser_api);\n         parser_api.0.into_events()\n@@ -65,15 +65,15 @@ pub(super) fn parse_with<S: TreeSink>(\n /// Implementation details of `Parser`, extracted\n /// to a separate struct in order not to pollute\n /// the public API of the `Parser`.\n-pub(super) struct ParserImpl<S> {\n-    token_source: S,\n+pub(super) struct ParserImpl<'a> {\n+    token_source: &'a dyn TokenSource,\n     pos: InputPosition,\n     events: Vec<Event>,\n     steps: Cell<u32>,\n }\n \n-impl<S: TokenSource> ParserImpl<S> {\n-    fn new(token_source: S) -> ParserImpl<S> {\n+impl<'a> ParserImpl<'a> {\n+    fn new(token_source: &'a dyn TokenSource) -> ParserImpl<'a> {\n         ParserImpl {\n             token_source,\n             pos: InputPosition::new(),"}]}