{"sha": "276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "node_id": "C_kwDOAAsO6NoAKDI3NmU4OTUxZjFkYmNmYTZiMWQ1ZWRlMmMxZDRmNzQ0YzA2YzczNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-02T10:09:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-02T10:09:47Z"}, "message": "Auto merge of #7851 - nbdd0121:master, r=flip1995\n\nFix manual_assert and match_wild_err_arm for `#![no_std]` and Rust 2021\n\nRust 2015 `std::panic!` has a wrapping block while `core::panic!` and Rust 2021 `std::panic!` does not. See rust-lang/rust#88919 for details.\n\nNote that the test won't pass until clippy changes in rust-lang/rust#88860 is synced.\n\n---\n\nchangelog: Fix [`manual_assert`] and [`match_wild_err_arm`] for `#![no_std]` and Rust 2021.\n\nFixes #7723", "tree": {"sha": "9128169b4aeadedaf1d614ec73fd9be0417dfd77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9128169b4aeadedaf1d614ec73fd9be0417dfd77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "html_url": "https://github.com/rust-lang/rust/commit/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38d80257d033154f4bd68051ea19a569c726c8a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/38d80257d033154f4bd68051ea19a569c726c8a4", "html_url": "https://github.com/rust-lang/rust/commit/38d80257d033154f4bd68051ea19a569c726c8a4"}, {"sha": "14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd", "html_url": "https://github.com/rust-lang/rust/commit/14e0390fdffe87fb8beac8b9ed6a6edf43b57fbd"}], "stats": {"total": 308, "additions": 254, "deletions": 54}, "files": [{"sha": "e55aa3f1850fe06a8a6f17b920e6fdcae763267c", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -54,23 +54,24 @@ impl LateLintPass<'_> for ManualAssert {\n             if !cx.tcx.sess.source_map().is_multiline(cond.span);\n \n             then {\n-                let span = if let Some(panic_expn) = PanicExpn::parse(semi) {\n+                let call = if_chain! {\n+                    if let ExprKind::Block(block, _) = semi.kind;\n+                    if let Some(init) = block.expr;\n+                    then {\n+                        init\n+                    } else {\n+                        semi\n+                    }\n+                };\n+                let span = if let Some(panic_expn) = PanicExpn::parse(call) {\n                     match *panic_expn.format_args.value_args {\n                         [] => panic_expn.format_args.format_string_span,\n                         [.., last] => panic_expn.format_args.format_string_span.to(last.span),\n                     }\n+                } else if let ExprKind::Call(_, [format_args]) = call.kind {\n+                    format_args.span\n                 } else {\n-                    if_chain! {\n-                        if let ExprKind::Block(block, _) = semi.kind;\n-                        if let Some(init) = block.expr;\n-                        if let ExprKind::Call(_, [format_args]) = init.kind;\n-\n-                        then {\n-                            format_args.span\n-                        } else {\n-                            return\n-                        }\n-                    }\n+                    return\n                 };\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = snippet_with_applicability(cx, span, \"..\", &mut applicability);"}, {"sha": "eb311983b29276ebf0b21b35ed9e0dcc46750af3", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -967,8 +967,7 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                     }\n                     if_chain! {\n                         if matching_wild;\n-                        if let ExprKind::Block(block, _) = arm.body.kind;\n-                        if is_panic_block(block);\n+                        if is_panic_call(arm.body);\n                         then {\n                             // `Err(_)` or `Err(_e)` arm with `panic!` found\n                             span_lint_and_note(cx,\n@@ -1171,14 +1170,19 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n }\n \n // If the block contains only a `panic!` macro (as expression or statement)\n-fn is_panic_block(block: &Block<'_>) -> bool {\n-    match (&block.expr, block.stmts.len(), block.stmts.first()) {\n-        (&Some(exp), 0, _) => is_expn_of(exp.span, \"panic\").is_some() && is_expn_of(exp.span, \"unreachable\").is_none(),\n-        (&None, 1, Some(stmt)) => {\n-            is_expn_of(stmt.span, \"panic\").is_some() && is_expn_of(stmt.span, \"unreachable\").is_none()\n-        },\n-        _ => false,\n-    }\n+fn is_panic_call(expr: &Expr<'_>) -> bool {\n+    // Unwrap any wrapping blocks\n+    let span = if let ExprKind::Block(block, _) = expr.kind {\n+        match (&block.expr, block.stmts.len(), block.stmts.first()) {\n+            (&Some(exp), 0, _) => exp.span,\n+            (&None, 1, Some(stmt)) => stmt.span,\n+            _ => return false,\n+        }\n+    } else {\n+        expr.span\n+    };\n+\n+    is_expn_of(span, \"panic\").is_some() && is_expn_of(span, \"unreachable\").is_none()\n }\n \n fn check_match_ref_pats<'a, 'b, I>(cx: &LateContext<'_>, ex: &Expr<'_>, pats: I, expr: &Expr<'_>)"}, {"sha": "c1a763def3d15dda98c8f5fa7e4d24ed73529344", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -718,9 +718,7 @@ impl PanicExpn<'tcx> {\n     /// Parses an expanded `panic!` invocation\n     pub fn parse(expr: &'tcx Expr<'tcx>) -> Option<Self> {\n         if_chain! {\n-            if let ExprKind::Block(block, _) = expr.kind;\n-            if let Some(init) = block.expr;\n-            if let ExprKind::Call(_, [format_args]) = init.kind;\n+            if let ExprKind::Call(_, [format_args]) = expr.kind;\n             let expn_data = expr.span.ctxt().outer_expn_data();\n             if let Some(format_args) = FormatArgsExpn::parse(format_args);\n             then {"}, {"sha": "7d6edc2b1e095fb1cb59e81cca7b28bba7f44497", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -1,7 +1,10 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n #![allow(clippy::assertions_on_constants)]\n+#![feature(path_file_prefix)]\n \n+use std::cmp::Ordering;\n+use std::ffi::OsStr;\n use std::fs::{self, DirEntry};\n use std::path::Path;\n \n@@ -21,29 +24,39 @@ fn test_missing_tests() {\n     }\n }\n \n-/*\n-Test for missing files.\n-\n-Since rs files are alphabetically before stderr/stdout, we can sort by the full name\n-and iter in that order. If we've seen the file stem for the first time and it's not\n-a rust file, it means the rust file has to be missing.\n-*/\n+// Test for missing files.\n fn explore_directory(dir: &Path) -> Vec<String> {\n     let mut missing_files: Vec<String> = Vec::new();\n     let mut current_file = String::new();\n     let mut files: Vec<DirEntry> = fs::read_dir(dir).unwrap().filter_map(Result::ok).collect();\n-    files.sort_by_key(std::fs::DirEntry::path);\n+    files.sort_by(|x, y| {\n+        match x.path().file_prefix().cmp(&y.path().file_prefix()) {\n+            Ordering::Equal => (),\n+            ord => return ord,\n+        }\n+        // Sort rs files before the others if they share the same prefix. So when we see\n+        // the file prefix for the first time and it's not a rust file, it means the rust\n+        // file has to be missing.\n+        match (\n+            x.path().extension().and_then(OsStr::to_str),\n+            y.path().extension().and_then(OsStr::to_str),\n+        ) {\n+            (Some(\"rs\"), _) => Ordering::Less,\n+            (_, Some(\"rs\")) => Ordering::Greater,\n+            _ => Ordering::Equal,\n+        }\n+    });\n     for entry in &files {\n         let path = entry.path();\n         if path.is_dir() {\n             missing_files.extend(explore_directory(&path));\n         } else {\n-            let file_stem = path.file_stem().unwrap().to_str().unwrap().to_string();\n+            let file_prefix = path.file_prefix().unwrap().to_str().unwrap().to_string();\n             if let Some(ext) = path.extension() {\n                 match ext.to_str().unwrap() {\n-                    \"rs\" => current_file = file_stem.clone(),\n+                    \"rs\" => current_file = file_prefix.clone(),\n                     \"stderr\" | \"stdout\" => {\n-                        if file_stem != current_file {\n+                        if file_prefix != current_file {\n                             missing_files.push(path.to_str().unwrap().to_string());\n                         }\n                     },"}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -0,0 +1,43 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n+// run-rustfix\n+#![warn(clippy::manual_assert)]\n+\n+fn main() {\n+    let a = vec![1, 2, 3];\n+    let c = Some(2);\n+    if !a.is_empty()\n+        && a.len() == 3\n+        && c != None\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+    {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+    assert!(a.is_empty(), \"qwqwq\");\n+    if a.len() == 3 {\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+    }\n+    if let Some(b) = c {\n+        panic!(\"orz {}\", b);\n+    }\n+    if a.len() == 3 {\n+        panic!(\"qaqaq\");\n+    } else {\n+        println!(\"qwq\");\n+    }\n+    let b = vec![1, 2, 3];\n+    assert!(!b.is_empty(), \"panic1\");\n+    assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+    assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+    assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+    assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+}"}, {"sha": "03c03472f908f0c58d64a765798dc8cc89a09fbb", "filename": "tests/ui/manual_assert.edition2018.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.stderr?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -1,5 +1,5 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:21:5\n+  --> $DIR/manual_assert.rs:22:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n@@ -9,47 +9,47 @@ LL | |     }\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:24:5\n+  --> $DIR/manual_assert.rs:25:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:41:5\n+  --> $DIR/manual_assert.rs:42:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:44:5\n+  --> $DIR/manual_assert.rs:45:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:47:5\n+  --> $DIR/manual_assert.rs:48:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:50:5\n+  --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:53:5\n+  --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");", "previous_filename": "tests/ui/manual_assert.stderr"}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -0,0 +1,43 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n+// run-rustfix\n+#![warn(clippy::manual_assert)]\n+\n+fn main() {\n+    let a = vec![1, 2, 3];\n+    let c = Some(2);\n+    if !a.is_empty()\n+        && a.len() == 3\n+        && c != None\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+    {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+    assert!(a.is_empty(), \"qwqwq\");\n+    if a.len() == 3 {\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+    }\n+    if let Some(b) = c {\n+        panic!(\"orz {}\", b);\n+    }\n+    if a.len() == 3 {\n+        panic!(\"qaqaq\");\n+    } else {\n+        println!(\"qwq\");\n+    }\n+    let b = vec![1, 2, 3];\n+    assert!(!b.is_empty(), \"panic1\");\n+    assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+    assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+    assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+    assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+}"}, {"sha": "03c03472f908f0c58d64a765798dc8cc89a09fbb", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -0,0 +1,60 @@\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:22:5\n+   |\n+LL | /     if !a.is_empty() {\n+LL | |         panic!(\"qaqaq{:?}\", a);\n+LL | |     }\n+   | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n+   |\n+   = note: `-D clippy::manual-assert` implied by `-D warnings`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:25:5\n+   |\n+LL | /     if !a.is_empty() {\n+LL | |         panic!(\"qwqwq\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:42:5\n+   |\n+LL | /     if b.is_empty() {\n+LL | |         panic!(\"panic1\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:45:5\n+   |\n+LL | /     if b.is_empty() && a.is_empty() {\n+LL | |         panic!(\"panic2\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:48:5\n+   |\n+LL | /     if a.is_empty() && !b.is_empty() {\n+LL | |         panic!(\"panic3\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:51:5\n+   |\n+LL | /     if b.is_empty() || a.is_empty() {\n+LL | |         panic!(\"panic4\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:54:5\n+   |\n+LL | /     if a.is_empty() || !b.is_empty() {\n+LL | |         panic!(\"panic5\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.fixed?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -1,6 +1,7 @@\n-// edition:2018\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n // run-rustfix\n-//FIXME: This does not correctly match in edition 2021, see #7843\n #![warn(clippy::manual_assert)]\n \n fn main() {"}, {"sha": "8713426fc8886b9223e7631a6241162c7fc8ce88", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -1,6 +1,7 @@\n-// edition:2018\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n // run-rustfix\n-//FIXME: This does not correctly match in edition 2021, see #7843\n #![warn(clippy::manual_assert)]\n \n fn main() {"}, {"sha": "2a4012039ba97a62b993f0234906695186293e7f", "filename": "tests/ui/match_wild_err_arm.edition2018.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -1,5 +1,5 @@\n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:13:9\n+  --> $DIR/match_wild_err_arm.rs:14:9\n    |\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n@@ -8,23 +8,23 @@ LL |         Err(_) => panic!(\"err\"),\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:19:9\n+  --> $DIR/match_wild_err_arm.rs:20:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:25:9\n+  --> $DIR/match_wild_err_arm.rs:26:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_e)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:33:9\n+  --> $DIR/match_wild_err_arm.rs:34:9\n    |\n LL |         Err(_e) => panic!(),\n    |         ^^^^^^^", "previous_filename": "tests/ui/match_wild_err_arm.stderr"}, {"sha": "2a4012039ba97a62b993f0234906695186293e7f", "filename": "tests/ui/match_wild_err_arm.edition2021.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -0,0 +1,35 @@\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:14:9\n+   |\n+LL |         Err(_) => panic!(\"err\"),\n+   |         ^^^^^^\n+   |\n+   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:20:9\n+   |\n+LL |         Err(_) => panic!(),\n+   |         ^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:26:9\n+   |\n+LL |         Err(_) => {\n+   |         ^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_e)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:34:9\n+   |\n+LL |         Err(_e) => panic!(),\n+   |         ^^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "0a86144b95d5bcc59b148e298783caa02d017217", "filename": "tests/ui/match_wild_err_arm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360/tests%2Fui%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.rs?ref=276e8951f1dbcfa6b1d5ede2c1d4f744c06c7360", "patch": "@@ -1,12 +1,13 @@\n-//edition:2015\n-//FIXME: The lint only triggers once on edition 2021, so I'm leaving this at 2015 for now.\n-\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n #![feature(exclusive_range_pattern)]\n #![allow(clippy::match_same_arms)]\n #![warn(clippy::match_wild_err_arm)]\n \n fn match_wild_err_arm() {\n     let x: Result<i32, &str> = Ok(3);\n+\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),"}]}