{"sha": "74d5c70b174f06843049af2d764ff57ddc81c81c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDVjNzBiMTc0ZjA2ODQzMDQ5YWYyZDc2NGZmNTdkZGM4MWM4MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-11T00:39:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-11T00:39:40Z"}, "message": "Auto merge of #64369 - Centril:rollup-g875ozi, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #64060 (Improve hygiene of `alloc::format!`)\n - #64072 (Replace file_stem by file_name in rustdoc markdown)\n - #64129 (vxWorks: set DEFAULT_MIN_STACK_SIZE to 256K and use min_stack to pass initial stack size to rtpSpawn)\n - #64188 (rustc: Allow the cdylib crate type with wasm32-wasi)\n - #64326 (Fixed documentation within c_str::from_ptr)\n - #64349 (documentation for AtomicPtr CAS operations)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d7f42c43dfa18f7f3f668981e082b347352bd79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7f42c43dfa18f7f3f668981e082b347352bd79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d5c70b174f06843049af2d764ff57ddc81c81c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d5c70b174f06843049af2d764ff57ddc81c81c", "html_url": "https://github.com/rust-lang/rust/commit/74d5c70b174f06843049af2d764ff57ddc81c81c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d5c70b174f06843049af2d764ff57ddc81c81c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "html_url": "https://github.com/rust-lang/rust/commit/34e82a7b793a6cdd27df762bf46bab8cdc92b14a"}, {"sha": "4f1d50e65feea842e749f887b6620bc55f6620d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1d50e65feea842e749f887b6620bc55f6620d5", "html_url": "https://github.com/rust-lang/rust/commit/4f1d50e65feea842e749f887b6620bc55f6620d5"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "370e5cf4b303f793b149a22b303a9442ad63f9d2", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -171,3 +171,9 @@ pub mod vec;\n mod std {\n     pub use core::ops; // RangeFull\n }\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"liballoc_internals\", issue = \"0\", reason = \"implementation detail\")]\n+pub mod __export {\n+    pub use core::format_args;\n+}"}, {"sha": "2f2cdc39c633db3f763d302db11cfdb6c0602031", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -98,5 +98,5 @@ macro_rules! vec {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! format {\n-    ($($arg:tt)*) => ($crate::fmt::format(::core::format_args!($($arg)*)))\n+    ($($arg:tt)*) => ($crate::fmt::format($crate::__export::format_args!($($arg)*)))\n }"}, {"sha": "a73111571c2b0a0bb911a5c567b9909c79b9526e", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -979,9 +979,8 @@ impl<T> AtomicPtr<T> {\n     /// let some_ptr  = AtomicPtr::new(ptr);\n     ///\n     /// let other_ptr   = &mut 10;\n-    /// let another_ptr = &mut 10;\n     ///\n-    /// let value = some_ptr.compare_and_swap(other_ptr, another_ptr, Ordering::Relaxed);\n+    /// let value = some_ptr.compare_and_swap(ptr, other_ptr, Ordering::Relaxed);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1021,9 +1020,8 @@ impl<T> AtomicPtr<T> {\n     /// let some_ptr  = AtomicPtr::new(ptr);\n     ///\n     /// let other_ptr   = &mut 10;\n-    /// let another_ptr = &mut 10;\n     ///\n-    /// let value = some_ptr.compare_exchange(other_ptr, another_ptr,\n+    /// let value = some_ptr.compare_exchange(ptr, other_ptr,\n     ///                                       Ordering::SeqCst, Ordering::Relaxed);\n     /// ```\n     #[inline]"}, {"sha": "86978c05b15d0dbef4f3fd9fdd87518a7320c0ad", "filename": "src/librustc_target/spec/wasm32_wasi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -97,6 +97,10 @@ pub fn target() -> Result<Target, String> {\n     options.crt_static_default = true;\n     options.crt_static_respected = true;\n \n+    // Allow `+crt-static` to create a \"cdylib\" output which is just a wasm file\n+    // without a main function.\n+    options.crt_static_allows_dylibs = true;\n+\n     Ok(Target {\n         llvm_target: \"wasm32-wasi\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "8431271e62d56ae9085f8e467679c888dfea2121", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -43,7 +43,7 @@ pub fn render(\n     edition: Edition\n ) -> i32 {\n     let mut output = options.output;\n-    output.push(input.file_stem().unwrap());\n+    output.push(input.file_name().unwrap());\n     output.set_extension(\"html\");\n \n     let mut css = String::new();"}, {"sha": "bb346fb4db5154be6ff6730f0ff41ceec5f5895a", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -935,8 +935,10 @@ impl CStr {\n     /// Wraps a raw C string with a safe C string wrapper.\n     ///\n     /// This function will wrap the provided `ptr` with a `CStr` wrapper, which\n-    /// allows inspection and interoperation of non-owned C strings. This method\n-    /// is unsafe for a number of reasons:\n+    /// allows inspection and interoperation of non-owned C strings. The total\n+    /// size of the raw C string must be smaller than `isize::MAX` **bytes**\n+    /// in memory due to calling the `slice::from_raw_parts` function.\n+    /// This method is unsafe for a number of reasons:\n     ///\n     /// * There is no guarantee to the validity of `ptr`.\n     /// * The returned lifetime is not guaranteed to be the actual lifetime of"}, {"sha": "8b55939b8e54a322240b174d8e1e4c07139fc2c5", "filename": "src/libstd/sys/vxworks/fast_thread_local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -1,5 +1,3 @@\n-// Copyright (c) 2019 Wind River Systems, Inc.\n-\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n "}, {"sha": "8780df17a1c7ee5651d634a3638bb4baf1ceeff4", "filename": "src/libstd/sys/vxworks/process/process_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -5,6 +5,7 @@ use crate::sys;\n use crate::sys::cvt;\n use crate::sys::process::rtp;\n use crate::sys::process::process_common::*;\n+use crate::sys_common::thread;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -57,8 +58,7 @@ impl Command {\n                 self.get_argv().as_ptr() as *const _, // argv\n                 *sys::os::environ() as *const *const c_char,\n                 100 as c_int,                         // initial priority\n-                0x16000,                                    // initial stack size. 0 defaults\n-                                                      // to 0x4000 in 32 bit and 0x8000 in 64 bit\n+                thread::min_stack(),                  // initial stack size.\n                 0,                                    // options\n                 0                                     // task options\n             );"}, {"sha": "e4396b05c0065aa0f20fd457b787c20107e1c6eb", "filename": "src/libstd/sys/vxworks/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d5c70b174f06843049af2d764ff57ddc81c81c/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs?ref=74d5c70b174f06843049af2d764ff57ddc81c81c", "patch": "@@ -8,7 +8,7 @@ use crate::time::Duration;\n \n use crate::sys_common::thread::*;\n \n-pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n+pub const DEFAULT_MIN_STACK_SIZE: usize = 0x40000; // 256K\n \n pub struct Thread {\n     id: libc::pthread_t,"}]}