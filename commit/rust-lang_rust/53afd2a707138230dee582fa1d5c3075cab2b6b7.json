{"sha": "53afd2a707138230dee582fa1d5c3075cab2b6b7", "node_id": "C_kwDOAAsO6NoAKDUzYWZkMmE3MDcxMzgyMzBkZWU1ODJmYTFkNWMzMDc1Y2FiMmI2Yjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T21:13:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T21:13:07Z"}, "message": "Auto merge of #12011 - iDawer:completion_detail.impl_trait, r=Veykril\n\nfix: Show `impl Trait` in argument positon in completion details\n\nFollow up for #11991\n\n`hir`: Use `db.callable_item_signature` query more.", "tree": {"sha": "666068dcf992de3dbd9bede11a31fbd32b0d0483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/666068dcf992de3dbd9bede11a31fbd32b0d0483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53afd2a707138230dee582fa1d5c3075cab2b6b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53afd2a707138230dee582fa1d5c3075cab2b6b7", "html_url": "https://github.com/rust-lang/rust/commit/53afd2a707138230dee582fa1d5c3075cab2b6b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53afd2a707138230dee582fa1d5c3075cab2b6b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "html_url": "https://github.com/rust-lang/rust/commit/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a"}, {"sha": "d26deb5b9facc77d3f786026079e42ff60cad707", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26deb5b9facc77d3f786026079e42ff60cad707", "html_url": "https://github.com/rust-lang/rust/commit/d26deb5b9facc77d3f786026079e42ff60cad707"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "382d1f9a54c62f2855589e7655567c8ea2d234e7", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/53afd2a707138230dee582fa1d5c3075cab2b6b7/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53afd2a707138230dee582fa1d5c3075cab2b6b7/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=53afd2a707138230dee582fa1d5c3075cab2b6b7", "patch": "@@ -1389,15 +1389,15 @@ impl Function {\n     }\n \n     pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {\n-        let resolver = self.id.resolver(db.upcast());\n-        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = db.trait_environment(self.id.into());\n-        db.function_data(self.id)\n-            .params\n+        let substs = TyBuilder::placeholder_subst(db, self.id);\n+        let callable_sig = db.callable_item_signature(self.id.into()).substitute(Interner, &substs);\n+        callable_sig\n+            .params()\n             .iter()\n             .enumerate()\n-            .map(|(idx, (_, type_ref))| {\n-                let ty = Type { env: environment.clone(), ty: ctx.lower_ty(type_ref) };\n+            .map(|(idx, ty)| {\n+                let ty = Type { env: environment.clone(), ty: ty.clone() };\n                 Param { func: self, ty, idx }\n             })\n             .collect()\n@@ -1411,17 +1411,17 @@ impl Function {\n     }\n \n     pub fn params_without_self(self, db: &dyn HirDatabase) -> Vec<Param> {\n-        let resolver = self.id.resolver(db.upcast());\n-        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = db.trait_environment(self.id.into());\n+        let substs = TyBuilder::placeholder_subst(db, self.id);\n+        let callable_sig = db.callable_item_signature(self.id.into()).substitute(Interner, &substs);\n         let skip = if db.function_data(self.id).has_self_param() { 1 } else { 0 };\n-        db.function_data(self.id)\n-            .params\n+        callable_sig\n+            .params()\n             .iter()\n             .enumerate()\n             .skip(skip)\n-            .map(|(idx, (_, type_ref))| {\n-                let ty = Type { env: environment.clone(), ty: ctx.lower_ty(type_ref) };\n+            .map(|(idx, ty)| {\n+                let ty = Type { env: environment.clone(), ty: ty.clone() };\n                 Param { func: self, ty, idx }\n             })\n             .collect()\n@@ -1573,11 +1573,12 @@ impl SelfParam {\n     }\n \n     pub fn ty(&self, db: &dyn HirDatabase) -> Type {\n-        let resolver = self.func.resolver(db.upcast());\n-        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n+        let substs = TyBuilder::placeholder_subst(db, self.func);\n+        let callable_sig =\n+            db.callable_item_signature(self.func.into()).substitute(Interner, &substs);\n         let environment = db.trait_environment(self.func.into());\n-\n-        Type { env: environment, ty: ctx.lower_ty(&db.function_data(self.func).params[0].1) }\n+        let ty = callable_sig.params()[0].clone();\n+        Type { env: environment, ty }\n     }\n }\n \n@@ -2576,10 +2577,9 @@ impl Impl {\n     }\n \n     pub fn self_ty(self, db: &dyn HirDatabase) -> Type {\n-        let impl_data = db.impl_data(self.id);\n         let resolver = self.id.resolver(db.upcast());\n-        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let ty = ctx.lower_ty(&impl_data.self_ty);\n+        let substs = TyBuilder::placeholder_subst(db, self.id);\n+        let ty = db.impl_self_ty(self.id).substitute(Interner, &substs);\n         Type::new_with_resolver_inner(db, &resolver, ty)\n     }\n "}, {"sha": "650c68134dd215464309980e5c697a69ee2e7615", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/53afd2a707138230dee582fa1d5c3075cab2b6b7/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53afd2a707138230dee582fa1d5c3075cab2b6b7/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=53afd2a707138230dee582fa1d5c3075cab2b6b7", "patch": "@@ -642,3 +642,23 @@ fn main() {\n         \"]],\n     );\n }\n+\n+#[test]\n+fn detail_impl_trait_in_argument_position() {\n+    check_empty(\n+        r\"\n+//- minicore: sized\n+trait Trait<T> {}\n+struct Foo;\n+impl Foo {\n+    fn bar<U>(_: impl Trait<U>) {}\n+}\n+fn main() {\n+    Foo::$0\n+}\n+\",\n+        expect![[r\"\n+            fn bar(\u2026) fn(impl Trait<U>)\n+        \"]],\n+    );\n+}"}]}