{"sha": "57da9d32693e960f401003a206adfcc32364452c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZGE5ZDMyNjkzZTk2MGY0MDEwMDNhMjA2YWRmY2MzMjM2NDQ1MmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T11:17:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T11:17:18Z"}, "message": "Rollup merge of #66755 - mark-i-m:const-vec-new, r=ecstatic-morse\n\nRemove a const-if-hack in RawVec\n\nr? @ecstatic-morse\n\ncc @Centril", "tree": {"sha": "95d774c63e7d6dba54db5934f138f27dbd296414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d774c63e7d6dba54db5934f138f27dbd296414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57da9d32693e960f401003a206adfcc32364452c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/K2/CRBK7hj4Ov3rIwAAdHIIAHawUKWEO4Somb9XJGNZ6lIY\nygkw4O5ohXqWq3m4vbGlpoxFxlccFfqvmda6DejA9qS4DkWftZXiRBVtkZ+47Asq\n5bJmSfLJtB2H8JpBlwTdauXbomUb6fpeWumPfRjTr3lFX/h4ArqK8olI/cdhbaW7\nKybkNniJI7852LRFWMiK9WKnU0rjJFAO9TGuTVS0/xKS9KYTpURNdQlzbjm1JYjv\nWqg/LoGD25WnGADd/RktgkFE+NZO/u/XLpfinAMNVN7oW0GOjUx8JucsjXj7jfe0\nIzi1zk/6UpS2Xc5YekKEFK5buldGVJOwJ/0MhF89rYgqgAEJ7lBVShVuhAwhyVw=\n=zQ8D\n-----END PGP SIGNATURE-----\n", "payload": "tree 95d774c63e7d6dba54db5934f138f27dbd296414\nparent 696735f71b4408302ba166d148e9d474c51416d2\nparent 7d268119f07aeb41a1abe093c3fd2434743ac228\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576840638 +0100\ncommitter GitHub <noreply@github.com> 1576840638 +0100\n\nRollup merge of #66755 - mark-i-m:const-vec-new, r=ecstatic-morse\n\nRemove a const-if-hack in RawVec\n\nr? @ecstatic-morse\n\ncc @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57da9d32693e960f401003a206adfcc32364452c", "html_url": "https://github.com/rust-lang/rust/commit/57da9d32693e960f401003a206adfcc32364452c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57da9d32693e960f401003a206adfcc32364452c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696735f71b4408302ba166d148e9d474c51416d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/696735f71b4408302ba166d148e9d474c51416d2", "html_url": "https://github.com/rust-lang/rust/commit/696735f71b4408302ba166d148e9d474c51416d2"}, {"sha": "7d268119f07aeb41a1abe093c3fd2434743ac228", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d268119f07aeb41a1abe093c3fd2434743ac228", "html_url": "https://github.com/rust-lang/rust/commit/7d268119f07aeb41a1abe093c3fd2434743ac228"}], "stats": {"total": 22, "additions": 4, "deletions": 18}, "files": [{"sha": "be46e632be45f967f041a24d069cdb0f920f8264", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57da9d32693e960f401003a206adfcc32364452c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57da9d32693e960f401003a206adfcc32364452c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=57da9d32693e960f401003a206adfcc32364452c", "patch": "@@ -85,6 +85,7 @@\n #![feature(const_generic_impls_guard)]\n #![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]\n+#![feature(const_if_match)]\n #![feature(cow_is_borrowed)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]"}, {"sha": "3201c702abb294b08a0c85c68fd726b6c421649d", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57da9d32693e960f401003a206adfcc32364452c/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57da9d32693e960f401003a206adfcc32364452c/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=57da9d32693e960f401003a206adfcc32364452c", "patch": "@@ -52,15 +52,12 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n     pub const fn new_in(a: A) -> Self {\n-        // `!0` is `usize::MAX`. This branch should be stripped at compile time.\n-        // FIXME(mark-i-m): use this line when `if`s are allowed in `const`:\n-        //let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+        let cap = if mem::size_of::<T>() == 0 { core::usize::MAX } else { 0 };\n \n         // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n         RawVec {\n             ptr: Unique::empty(),\n-            // FIXME(mark-i-m): use `cap` when ifs are allowed in const\n-            cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n+            cap,\n             a,\n         }\n     }\n@@ -132,19 +129,7 @@ impl<T> RawVec<T, Global> {\n     /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n     pub const fn new() -> Self {\n-        // FIXME(Centril): Reintegrate this with `fn new_in` when we can.\n-\n-        // `!0` is `usize::MAX`. This branch should be stripped at compile time.\n-        // FIXME(mark-i-m): use this line when `if`s are allowed in `const`:\n-        //let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n-\n-        // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n-        RawVec {\n-            ptr: Unique::empty(),\n-            // FIXME(mark-i-m): use `cap` when ifs are allowed in const\n-            cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n-            a: Global,\n-        }\n+        Self::new_in(Global)\n     }\n \n     /// Creates a `RawVec` (on the system heap) with exactly the"}]}