{"sha": "b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYTZjMTczNjI5NWE1ZmZmYTVhYzBkMGZlZTgzNWNkYzcxOWFkYTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-14T10:14:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-17T09:52:52Z"}, "message": "remove lower module", "tree": {"sha": "56fd27197126f11011fe9030cd9bfb80e142e709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56fd27197126f11011fe9030cd9bfb80e142e709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "html_url": "https://github.com/rust-lang/rust/commit/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7259a899c1709753dcda0fb117e2f7cc30a4d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7259a899c1709753dcda0fb117e2f7cc30a4d6e", "html_url": "https://github.com/rust-lang/rust/commit/c7259a899c1709753dcda0fb117e2f7cc30a4d6e"}], "stats": {"total": 312, "additions": 48, "deletions": 264}, "files": [{"sha": "c918ec9f6ef78956c7a3932a9b42a2bc07d5cdb5", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -186,11 +186,11 @@ impl Module {\n     }\n \n     pub fn declarations(self, db: &impl HirDatabase) -> Vec<ModuleDef> {\n-        let lowered_module = db.lower_module(self);\n-        lowered_module\n-            .declarations\n-            .values()\n-            .cloned()\n+        let def_map = db.crate_def_map(self.krate);\n+        def_map[self.module_id]\n+            .scope\n+            .entries()\n+            .filter_map(|(_name, res)| if res.import.is_none() { Some(res.def) } else { None })\n             .flat_map(|per_ns| {\n                 per_ns.take_types().into_iter().chain(per_ns.take_values().into_iter())\n             })"}, {"sha": "aa4e62518a8848d4f8cb7e55bad05a7385fb2792", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -76,8 +76,8 @@ impl Module {\n         db: &impl HirDatabase,\n         import: ImportId,\n     ) -> TreeArc<ast::PathSegment> {\n-        let (_, source_map) = db.lower_module_with_source_map(*self);\n-        let (_, source) = self.definition_source(db);\n+        let (file_id, source) = self.definition_source(db);\n+        let (_, source_map) = db.raw_items_with_source_map(file_id.original_file(db));\n         source_map.get(&source, import)\n     }\n "}, {"sha": "b8c0a68a6860602b1f25b3296ef8b0e52165b835", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     Struct, Enum, StructField,\n     Const, ConstSignature, Static,\n     macros::MacroExpansion,\n-    nameres::{Namespace, lower::{LoweredModule, ImportSourceMap}, crate_def_map::{RawItems, CrateDefMap}},\n+    nameres::{Namespace, lower::{ImportSourceMap}, crate_def_map::{RawItems, CrateDefMap}},\n     ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig},\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap},\n@@ -38,18 +38,12 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::ids::SourceFileItems::file_item_query)]\n     fn file_item(&self, source_item_id: SourceItemId) -> TreeArc<SyntaxNode>;\n \n-    #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_with_source_map_query)]\n-    fn lower_module_with_source_map(\n-        &self,\n-        module: Module,\n-    ) -> (Arc<LoweredModule>, Arc<ImportSourceMap>);\n-\n-    #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_query)]\n-    fn lower_module(&self, module: Module) -> Arc<LoweredModule>;\n-\n     #[salsa::invoke(RawItems::raw_items_query)]\n     fn raw_items(&self, file_id: FileId) -> Arc<RawItems>;\n \n+    #[salsa::invoke(RawItems::raw_items_with_source_map_query)]\n+    fn raw_items_with_source_map(&self, file_id: FileId) -> (Arc<RawItems>, Arc<ImportSourceMap>);\n+\n     #[salsa::invoke(CrateDefMap::crate_def_map_query)]\n     fn crate_def_map(&self, krate: Crate) -> Arc<CrateDefMap>;\n "}, {"sha": "2bd61743620abf662ffcfaf3b684a46e5ad7c878", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -83,13 +83,6 @@ impl HirFileId {\n         }\n     }\n \n-    pub(crate) fn as_macro_call_id(self) -> Option<MacroCallId> {\n-        match self.0 {\n-            HirFileIdRepr::Macro(it) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n     pub(crate) fn hir_parse(\n         db: &impl PersistentHirDatabase,\n         file_id: HirFileId,"}, {"sha": "8807a4b56884c2775f8f706053ebe250541d3a22", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -4,7 +4,8 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n     AstPtr, SourceFile, TreeArc,\n-ast::{self, AstNode}};\n+    ast::{self, AstNode}\n+};\n \n use crate::{\n     Const, TypeAlias, Function, HirFileId,\n@@ -13,7 +14,7 @@ use crate::{\n     type_ref::TypeRef,\n     ids::LocationCtx,\n     resolve::Resolver,\n-    ty::Ty, generics::GenericParams\n+    ty::Ty, generics::GenericParams,\n };\n \n use crate::code_model_api::{Module, ModuleSource};"}, {"sha": "0f500ce42b41b68add304092ca1b6e2a70d33646", "filename": "crates/ra_hir/src/nameres/crate_def_map/collector.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcrate_def_map%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcrate_def_map%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcrate_def_map%2Fcollector.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -224,7 +224,7 @@ where\n                 }\n             }\n             let resolution = Resolution { def, import: Some(import_id) };\n-            self.update(module_id, None, &[(name, resolution)]);\n+            self.update(module_id, Some(import_id), &[(name, resolution)]);\n         }\n     }\n \n@@ -262,6 +262,13 @@ where\n                 existing.import = import.or(res.import);\n                 changed = true;\n             }\n+            if existing.def.is_none()\n+                && res.def.is_none()\n+                && existing.import.is_none()\n+                && res.import.is_some()\n+            {\n+                existing.import = res.import;\n+            }\n         }\n         if !changed {\n             return;"}, {"sha": "dca86e39413e71c9dcbd87df8d2d67fda1a8b4e5", "filename": "crates/ra_hir/src/nameres/crate_def_map/raw.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcrate_def_map%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcrate_def_map%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcrate_def_map%2Fraw.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -14,6 +14,7 @@ use ra_syntax::{\n use crate::{\n     PersistentHirDatabase, Name, AsName, Path, HirFileId,\n     ids::{SourceFileItemId, SourceFileItems},\n+    nameres::lower::ImportSourceMap,\n };\n \n #[derive(Debug, Default, PartialEq, Eq)]\n@@ -31,13 +32,21 @@ impl RawItems {\n         db: &impl PersistentHirDatabase,\n         file_id: FileId,\n     ) -> Arc<RawItems> {\n+        db.raw_items_with_source_map(file_id).0\n+    }\n+\n+    pub(crate) fn raw_items_with_source_map_query(\n+        db: &impl PersistentHirDatabase,\n+        file_id: FileId,\n+    ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n             source_file_items: db.file_items(file_id.into()),\n+            source_map: ImportSourceMap::default(),\n         };\n         let source_file = db.parse(file_id);\n         collector.process_module(None, &*source_file);\n-        Arc::new(collector.raw_items)\n+        (Arc::new(collector.raw_items), Arc::new(collector.source_map))\n     }\n \n     pub(crate) fn items(&self) -> &[RawItem] {\n@@ -51,6 +60,7 @@ impl RawItems {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n             source_file_items: Arc::new(source_file_items),\n+            source_map: ImportSourceMap::default(),\n         };\n         collector.process_module(None, &*source_file);\n         collector.raw_items\n@@ -144,6 +154,7 @@ pub(crate) struct MacroData {\n struct RawItemsCollector {\n     raw_items: RawItems,\n     source_file_items: Arc<SourceFileItems>,\n+    source_map: ImportSourceMap,\n }\n \n impl RawItemsCollector {\n@@ -227,6 +238,9 @@ impl RawItemsCollector {\n                 is_prelude,\n                 is_extern_crate: false,\n             });\n+            if let Some(segment) = segment {\n+                self.source_map.insert(import, segment)\n+            }\n             self.push_item(current_module, RawItem::Import(import))\n         })\n     }"}, {"sha": "d4c7f24814e8cccfebc329fbe4783bd1bba96c0f", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 4, "deletions": 186, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -1,18 +1,10 @@\n-use std::sync::Arc;\n-\n use ra_syntax::{\n     AstNode, SourceFile, TreeArc, AstPtr,\n-    ast::{self, ModuleItemOwner, NameOwner, AttrsOwner},\n+    ast,\n };\n-use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n-use rustc_hash::FxHashMap;\n+use ra_arena::{RawId, impl_arena_id, map::ArenaMap};\n \n-use crate::{\n-    SourceItemId, Path, ModuleSource, Name,\n-    HirFileId, MacroCallLoc, AsName, PerNs, Function,\n-    ModuleDef, Module, Struct, Enum, Const, Static, Trait, TypeAlias,\n-    ids::LocationCtx, PersistentHirDatabase,\n-};\n+use crate::{Path, ModuleSource, Name};\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImportId(RawId);\n@@ -27,25 +19,13 @@ pub struct ImportData {\n     pub(super) is_extern_crate: bool,\n }\n \n-/// A set of items and imports declared inside a module, without relation to\n-/// other modules.\n-///\n-/// This sits in-between raw syntax and name resolution and allows us to avoid\n-/// recomputing name res: if two instance of `InputModuleItems` are the same, we\n-/// can avoid redoing name resolution.\n-#[derive(Debug, Default, PartialEq, Eq)]\n-pub struct LoweredModule {\n-    pub(crate) declarations: FxHashMap<Name, PerNs<ModuleDef>>,\n-    pub(super) imports: Arena<ImportId, ImportData>,\n-}\n-\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ImportSourceMap {\n     map: ArenaMap<ImportId, AstPtr<ast::PathSegment>>,\n }\n \n impl ImportSourceMap {\n-    fn insert(&mut self, import: ImportId, segment: &ast::PathSegment) {\n+    pub(crate) fn insert(&mut self, import: ImportId, segment: &ast::PathSegment) {\n         self.map.insert(import, AstPtr::new(segment))\n     }\n \n@@ -58,165 +38,3 @@ impl ImportSourceMap {\n         self.map[import].to_node(file).to_owned()\n     }\n }\n-\n-impl LoweredModule {\n-    pub(crate) fn lower_module_query(\n-        db: &impl PersistentHirDatabase,\n-        module: Module,\n-    ) -> Arc<LoweredModule> {\n-        db.lower_module_with_source_map(module).0\n-    }\n-\n-    pub(crate) fn lower_module_with_source_map_query(\n-        db: &impl PersistentHirDatabase,\n-        module: Module,\n-    ) -> (Arc<LoweredModule>, Arc<ImportSourceMap>) {\n-        let (file_id, source) = module.definition_source(db);\n-        let file_id: HirFileId = file_id.into();\n-        let mut source_map = ImportSourceMap::default();\n-        let mut res = LoweredModule::default();\n-        match source {\n-            ModuleSource::SourceFile(it) => {\n-                res.fill(&mut source_map, db, module, file_id, &mut it.items_with_macros())\n-            }\n-            ModuleSource::Module(it) => {\n-                if let Some(item_list) = it.item_list() {\n-                    res.fill(\n-                        &mut source_map,\n-                        db,\n-                        module,\n-                        file_id,\n-                        &mut item_list.items_with_macros(),\n-                    )\n-                }\n-            }\n-        };\n-        (Arc::new(res), Arc::new(source_map))\n-    }\n-\n-    fn fill(\n-        &mut self,\n-        source_map: &mut ImportSourceMap,\n-        db: &impl PersistentHirDatabase,\n-        module: Module,\n-        file_id: HirFileId,\n-        items: &mut Iterator<Item = ast::ItemOrMacro>,\n-    ) {\n-        let file_items = db.file_items(file_id);\n-\n-        for item in items {\n-            match item {\n-                ast::ItemOrMacro::Item(it) => {\n-                    self.add_def_id(source_map, db, module, file_id, it);\n-                }\n-                ast::ItemOrMacro::Macro(macro_call) => {\n-                    let item_id = file_items.id_of_unchecked(macro_call.syntax());\n-                    let loc =\n-                        MacroCallLoc { module, source_item_id: SourceItemId { file_id, item_id } };\n-                    let id = loc.id(db);\n-                    let file_id = HirFileId::from(id);\n-                    //FIXME: expand recursively\n-                    for item in db.hir_parse(file_id).items() {\n-                        self.add_def_id(source_map, db, module, file_id, item);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    fn add_def_id(\n-        &mut self,\n-        source_map: &mut ImportSourceMap,\n-        db: &impl PersistentHirDatabase,\n-        module: Module,\n-        file_id: HirFileId,\n-        item: &ast::ModuleItem,\n-    ) {\n-        let ctx = LocationCtx::new(db, module, file_id);\n-        match item.kind() {\n-            ast::ModuleItemKind::StructDef(it) => {\n-                if let Some(name) = it.name() {\n-                    let s = Struct { id: ctx.to_def(it) };\n-                    let s: ModuleDef = s.into();\n-                    self.declarations.insert(name.as_name(), PerNs::both(s, s));\n-                }\n-            }\n-            ast::ModuleItemKind::EnumDef(it) => {\n-                if let Some(name) = it.name() {\n-                    let e = Enum { id: ctx.to_def(it) };\n-                    let e: ModuleDef = e.into();\n-                    self.declarations.insert(name.as_name(), PerNs::types(e));\n-                }\n-            }\n-            ast::ModuleItemKind::FnDef(it) => {\n-                if let Some(name) = it.name() {\n-                    let func = Function { id: ctx.to_def(it) };\n-                    self.declarations.insert(name.as_name(), PerNs::values(func.into()));\n-                }\n-            }\n-            ast::ModuleItemKind::TraitDef(it) => {\n-                if let Some(name) = it.name() {\n-                    let t = Trait { id: ctx.to_def(it) };\n-                    self.declarations.insert(name.as_name(), PerNs::types(t.into()));\n-                }\n-            }\n-            ast::ModuleItemKind::TypeAliasDef(it) => {\n-                if let Some(name) = it.name() {\n-                    let t = TypeAlias { id: ctx.to_def(it) };\n-                    self.declarations.insert(name.as_name(), PerNs::types(t.into()));\n-                }\n-            }\n-            ast::ModuleItemKind::ImplBlock(_) => {\n-                // impls don't define items\n-            }\n-            ast::ModuleItemKind::UseItem(it) => {\n-                self.add_use_item(source_map, it);\n-            }\n-            ast::ModuleItemKind::ExternCrateItem(it) => {\n-                if let Some(name_ref) = it.name_ref() {\n-                    let path = Path::from_name_ref(name_ref);\n-                    let alias = it.alias().and_then(|a| a.name()).map(AsName::as_name);\n-                    self.imports.alloc(ImportData {\n-                        path,\n-                        alias,\n-                        is_glob: false,\n-                        is_prelude: false,\n-                        is_extern_crate: true,\n-                    });\n-                }\n-            }\n-            ast::ModuleItemKind::ConstDef(it) => {\n-                if let Some(name) = it.name() {\n-                    let c = Const { id: ctx.to_def(it) };\n-                    self.declarations.insert(name.as_name(), PerNs::values(c.into()));\n-                }\n-            }\n-            ast::ModuleItemKind::StaticDef(it) => {\n-                if let Some(name) = it.name() {\n-                    let s = Static { id: ctx.to_def(it) };\n-                    self.declarations.insert(name.as_name(), PerNs::values(s.into()));\n-                }\n-            }\n-            ast::ModuleItemKind::Module(_) => {\n-                // modules are handled separately directly by name res\n-            }\n-        };\n-    }\n-\n-    fn add_use_item(&mut self, source_map: &mut ImportSourceMap, item: &ast::UseItem) {\n-        let is_prelude =\n-            item.attrs().any(|attr| attr.as_atom().map(|s| s == \"prelude_import\").unwrap_or(false));\n-        Path::expand_use_item(item, |path, segment, alias| {\n-            let import = self.imports.alloc(ImportData {\n-                path,\n-                alias,\n-                is_glob: segment.is_none(),\n-                is_prelude,\n-                is_extern_crate: false,\n-            });\n-            if let Some(segment) = segment {\n-                source_map.insert(import, segment)\n-            }\n-        })\n-    }\n-}"}, {"sha": "9021109139bd45825f0a2f19dbb8c44c38b00325", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -7,13 +7,13 @@\n /// purely for \"IDE needs\".\n use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n-    SmolStr, TextRange, SyntaxNode,\n+    SyntaxNode,\n     ast::{self, AstNode, NameOwner},\n     algo::{find_node_at_offset, find_leaf_at_offset},\n };\n \n use crate::{\n-    HirDatabase, Function, ModuleDef, Struct, Enum,\n+    HirDatabase, Function, Struct, Enum,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n     ids::{LocationCtx, SourceFileItemId},\n     expr\n@@ -152,44 +152,6 @@ pub fn trait_from_module(\n     Trait { id: ctx.to_def(trait_def) }\n }\n \n-pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, TextRange)> {\n-    let module = match module_from_file_id(db, file_id) {\n-        Some(it) => it,\n-        None => return Vec::new(),\n-    };\n-    let items = db.lower_module(module);\n-    let mut res = Vec::new();\n-\n-    for macro_call_id in items\n-        .declarations\n-        .iter()\n-        .filter_map(|(_, it)| it.clone().take_types())\n-        .filter_map(|it| match it {\n-            ModuleDef::Trait(it) => Some(it),\n-            _ => None,\n-        })\n-        .filter_map(|it| it.source(db).0.as_macro_call_id())\n-    {\n-        if let Some(exp) = db.expand_macro_invocation(macro_call_id) {\n-            let loc = macro_call_id.loc(db);\n-            let syntax = db.file_item(loc.source_item_id);\n-            let macro_call = ast::MacroCall::cast(&syntax).unwrap();\n-            let off = macro_call.token_tree().unwrap().syntax().range().start();\n-            let file = exp.file();\n-            for trait_def in file.syntax().descendants().filter_map(ast::TraitDef::cast) {\n-                if let Some(name) = trait_def.name() {\n-                    let dst_range = name.syntax().range();\n-                    if let Some(src_range) = exp.map_range_back(dst_range) {\n-                        res.push((name.text().clone(), src_range + off))\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    res\n-}\n-\n pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> Resolver {\n     let file_id = position.file_id;\n     let file = db.parse(file_id);"}, {"sha": "26fde91bcf012ea1e84b268c3085ca25f5370025", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -223,7 +223,7 @@ impl RootDatabase {\n         self.query(hir::db::FileItemsQuery).sweep(sweep);\n         self.query(hir::db::FileItemQuery).sweep(sweep);\n \n-        self.query(hir::db::LowerModuleWithSourceMapQuery).sweep(sweep);\n+        self.query(hir::db::RawItemsWithSourceMapQuery).sweep(sweep);\n         self.query(hir::db::BodyWithSourceMapQuery).sweep(sweep);\n     }\n }"}, {"sha": "23c743bef214910ddbdd3aa6593b2281a22de5a5", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -30,7 +30,7 @@ use std::{\n use fst::{self, Streamer};\n use ra_syntax::{\n     SyntaxNode, SyntaxNodePtr, SourceFile, SmolStr, TreeArc, AstNode,\n-    algo::{visit::{visitor, Visitor}, find_covering_node},\n+    algo::{visit::{visitor, Visitor}},\n     SyntaxKind::{self, *},\n     ast::{self, NameOwner},\n     WalkEvent,\n@@ -66,14 +66,9 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex>\n     db.check_canceled();\n     let source_file = db.parse(file_id);\n \n-    let mut symbols = source_file_to_file_symbols(&source_file, file_id);\n+    let symbols = source_file_to_file_symbols(&source_file, file_id);\n \n-    for (name, text_range) in hir::source_binder::macro_symbols(db, file_id) {\n-        let node = find_covering_node(source_file.syntax(), text_range);\n-        let ptr = SyntaxNodePtr::new(node);\n-        // TODO: Should we get container name for macro symbols?\n-        symbols.push(FileSymbol { file_id, name, ptr, name_range: None, container_name: None })\n-    }\n+    // TODO: add macros here\n \n     Arc::new(SymbolIndex::new(symbols))\n }"}, {"sha": "5bb9538922312ebadc85efca82ae623c143649fa", "filename": "crates/ra_ide_api/tests/test/snapshots/test__unresolved_module_diagnostic.snap", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__unresolved_module_diagnostic.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6c1736295a5fffa5ac0d0fee835cdc719ada3/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__unresolved_module_diagnostic.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__unresolved_module_diagnostic.snap?ref=b2a6c1736295a5fffa5ac0d0fee835cdc719ada3", "patch": "@@ -7,7 +7,7 @@ source: \"crates\\\\ra_ide_api\\\\tests\\\\test\\\\main.rs\"\n [\n     Diagnostic {\n         message: \"unresolved module\",\n-        range: [4; 7),\n+        range: [0; 8),\n         fix: Some(\n             SourceChange {\n                 label: \"create module\","}]}