{"sha": "ffb874ac90947c6ffa87af0e80b362bf84442d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYjg3NGFjOTA5NDdjNmZmYTg3YWYwZTgwYjM2MmJmODQ0NDJkNzY=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-04-29T20:47:28Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-04-30T07:11:03Z"}, "message": "Add std::os::unix::fs::chroot to change the root directory of the current process\n\nThis is a straightforward wrapper that uses the existing helpers for C\nstring handling and errno handling.\n\nHaving this available is convenient for UNIX utility programs written in\nRust, and avoids having to call the unsafe `libc::chroot` directly and\nhandle errors manually, in a program that may otherwise be entirely safe\ncode.", "tree": {"sha": "f776bc6e917d842a990c6d11de5e06798c1b47f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f776bc6e917d842a990c6d11de5e06798c1b47f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffb874ac90947c6ffa87af0e80b362bf84442d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb874ac90947c6ffa87af0e80b362bf84442d76", "html_url": "https://github.com/rust-lang/rust/commit/ffb874ac90947c6ffa87af0e80b362bf84442d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffb874ac90947c6ffa87af0e80b362bf84442d76/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814a560072c305d274affc78219e4a7e0558252f", "url": "https://api.github.com/repos/rust-lang/rust/commits/814a560072c305d274affc78219e4a7e0558252f", "html_url": "https://github.com/rust-lang/rust/commit/814a560072c305d274affc78219e4a7e0558252f"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "9cf51be2836fb5c8276f6ee976fc50e4d4eedb73", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ffb874ac90947c6ffa87af0e80b362bf84442d76/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb874ac90947c6ffa87af0e80b362bf84442d76/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=ffb874ac90947c6ffa87af0e80b362bf84442d76", "patch": "@@ -884,3 +884,29 @@ impl DirBuilderExt for fs::DirBuilder {\n         self\n     }\n }\n+\n+/// Change the root directory of the current process to the specified path.\n+///\n+/// This typically requires privileges, such as root or a specific capability.\n+///\n+/// This does not change the current working directory; you should call\n+/// [`std::env::set_current_dir`][`crate::env::set_current_dir`] afterwards.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(unix_chroot)]\n+/// use std::os::unix::fs;\n+///\n+/// fn main() -> std::io::Result<()> {\n+///     fs::chroot(\"/sandbox\")?;\n+///     std::env::set_current_dir(\"/\")?;\n+///     // continue working in sandbox\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"unix_chroot\", issue = \"84715\")]\n+#[cfg(not(target_os = \"fuchsia\"))]\n+pub fn chroot<P: AsRef<Path>>(dir: P) -> io::Result<()> {\n+    sys::fs::chroot(dir.as_ref())\n+}"}, {"sha": "45bae25a0c3822a6ce534cb634dd3dc68592fb8b", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffb874ac90947c6ffa87af0e80b362bf84442d76/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb874ac90947c6ffa87af0e80b362bf84442d76/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=ffb874ac90947c6ffa87af0e80b362bf84442d76", "patch": "@@ -1328,3 +1328,10 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     })?;\n     Ok(bytes_copied as u64)\n }\n+\n+#[cfg(not(target_os = \"fuchsia\"))]\n+pub fn chroot(dir: &Path) -> io::Result<()> {\n+    let dir = cstr(dir)?;\n+    cvt(unsafe { libc::chroot(dir.as_ptr()) })?;\n+    Ok(())\n+}"}]}