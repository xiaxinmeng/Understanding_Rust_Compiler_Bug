{"sha": "7caf8a0929a734876025d7d36bbcb21d1609ac51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYWY4YTA5MjlhNzM0ODc2MDI1ZDdkMzZiYmNiMjFkMTYwOWFjNTE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-15T19:24:09Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-15T19:24:09Z"}, "message": "Convert gather_locals to use visit.", "tree": {"sha": "2444cd838e8892bf395613d19e3ab297c1644d1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2444cd838e8892bf395613d19e3ab297c1644d1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7caf8a0929a734876025d7d36bbcb21d1609ac51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7caf8a0929a734876025d7d36bbcb21d1609ac51", "html_url": "https://github.com/rust-lang/rust/commit/7caf8a0929a734876025d7d36bbcb21d1609ac51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7caf8a0929a734876025d7d36bbcb21d1609ac51/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fadab64a2ef4ae0c1328e290642a9c6538a6022", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fadab64a2ef4ae0c1328e290642a9c6538a6022", "html_url": "https://github.com/rust-lang/rust/commit/9fadab64a2ef4ae0c1328e290642a9c6538a6022"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "5cefb5fa2566d3d129c0eb9db4b2b50028dc2469", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7caf8a0929a734876025d7d36bbcb21d1609ac51/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7caf8a0929a734876025d7d36bbcb21d1609ac51/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7caf8a0929a734876025d7d36bbcb21d1609ac51", "patch": "@@ -6,6 +6,7 @@ import ast::path_to_str;\n import ast::respan;\n import ast::spanned;\n import syntax::walk;\n+import syntax::visit;\n import metadata::csearch;\n import driver::session;\n import util::common;\n@@ -1211,49 +1212,51 @@ fn gather_locals(&@crate_ctxt ccx, &ast::_fn f,\n                f.decl.inputs.(i).ident, some[ty::t](arg.ty));\n         i += 1u;\n     }\n-    // Add explicitly-declared locals.\n \n-    fn visit_local_pre(@crate_ctxt ccx, @ty::unify::var_bindings vb,\n-                       hashmap[ast::node_id, int] locals,\n-                       hashmap[ast::node_id, ast::ident] local_names,\n-                       @mutable int nvi, &@ast::local local) {\n+    // Add explicitly-declared locals.\n+    fn visit_local(@crate_ctxt ccx, @ty::unify::var_bindings vb,\n+                   hashmap[ast::node_id, int] locals,\n+                   hashmap[ast::node_id, ast::ident] local_names,\n+                   @mutable int nvi, &@ast::local local,\n+                   &() e, &visit::vt[()] v) {\n         alt (local.node.ty) {\n             case (none) {\n                 // Auto slot.\n-\n                 assign(ccx.tcx, vb, locals, local_names, nvi, local.node.id,\n                        local.node.ident, none[ty::t]);\n             }\n             case (some(?ast_ty)) {\n                 // Explicitly typed slot.\n-\n                 auto local_ty = ast_ty_to_ty_crate(ccx, ast_ty);\n                 assign(ccx.tcx, vb, locals, local_names, nvi, local.node.id,\n                        local.node.ident, some[ty::t](local_ty));\n             }\n         }\n+        visit::visit_local(local, e, v);\n     }\n-    // Add pattern bindings.\n \n-    fn visit_pat_pre(@crate_ctxt ccx, @ty::unify::var_bindings vb,\n-                     hashmap[ast::node_id, int] locals,\n-                     hashmap[ast::node_id, ast::ident] local_names,\n-                     @mutable int nvi, &@ast::pat p) {\n+    // Add pattern bindings.\n+    fn visit_pat(@crate_ctxt ccx, @ty::unify::var_bindings vb,\n+                 hashmap[ast::node_id, int] locals,\n+                 hashmap[ast::node_id, ast::ident] local_names,\n+                 @mutable int nvi, &@ast::pat p,\n+                 &() e, &visit::vt[()] v) {\n         alt (p.node) {\n             case (ast::pat_bind(?ident)) {\n                 assign(ccx.tcx, vb, locals, local_names, nvi,\n                        p.id, ident, none[ty::t]);\n             }\n             case (_) {/* no-op */ }\n         }\n+        visit::visit_pat(p, e, v);\n     }\n     auto visit =\n-        rec(visit_local_pre=bind visit_local_pre(ccx, vb, locals, local_names,\n-                                                 nvi, _),\n-            visit_pat_pre=bind visit_pat_pre(ccx, vb, locals, local_names,\n-                                             nvi, _)\n-            with walk::default_visitor());\n-    walk::walk_block(visit, f.body);\n+        @rec(visit_local=bind visit_local(ccx, vb, locals, local_names,\n+                                          nvi, _, _, _),\n+             visit_pat=bind visit_pat(ccx, vb, locals, local_names,\n+                                      nvi, _, _, _)\n+             with *visit::default_visitor());\n+    visit::visit_block(f.body, (), visit::mk_vt(visit));\n     ret rec(var_bindings=vb,\n             locals=locals,\n             local_names=local_names,"}]}