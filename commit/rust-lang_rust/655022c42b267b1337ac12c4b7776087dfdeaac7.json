{"sha": "655022c42b267b1337ac12c4b7776087dfdeaac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NTAyMmM0MmIyNjdiMTMzN2FjMTJjNGI3Nzc2MDg3ZGZkZWFhYzc=", "commit": {"author": {"name": "David Alber", "email": "alber.david@gmail.com", "date": "2017-12-21T05:53:33Z"}, "committer": {"name": "David Alber", "email": "alber.david@gmail.com", "date": "2017-12-21T05:53:33Z"}, "message": "Factoring out status code values", "tree": {"sha": "e2b936c1671c41d7c94dbd62af147b694aa6ed7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b936c1671c41d7c94dbd62af147b694aa6ed7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/655022c42b267b1337ac12c4b7776087dfdeaac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/655022c42b267b1337ac12c4b7776087dfdeaac7", "html_url": "https://github.com/rust-lang/rust/commit/655022c42b267b1337ac12c4b7776087dfdeaac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/655022c42b267b1337ac12c4b7776087dfdeaac7/comments", "author": {"login": "davidalber", "id": 933552, "node_id": "MDQ6VXNlcjkzMzU1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/933552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalber", "html_url": "https://github.com/davidalber", "followers_url": "https://api.github.com/users/davidalber/followers", "following_url": "https://api.github.com/users/davidalber/following{/other_user}", "gists_url": "https://api.github.com/users/davidalber/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalber/subscriptions", "organizations_url": "https://api.github.com/users/davidalber/orgs", "repos_url": "https://api.github.com/users/davidalber/repos", "events_url": "https://api.github.com/users/davidalber/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidalber", "id": 933552, "node_id": "MDQ6VXNlcjkzMzU1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/933552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalber", "html_url": "https://github.com/davidalber", "followers_url": "https://api.github.com/users/davidalber/followers", "following_url": "https://api.github.com/users/davidalber/following{/other_user}", "gists_url": "https://api.github.com/users/davidalber/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalber/subscriptions", "organizations_url": "https://api.github.com/users/davidalber/orgs", "repos_url": "https://api.github.com/users/davidalber/repos", "events_url": "https://api.github.com/users/davidalber/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aaed5b08f54ed95b692d40733a551d925363319", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aaed5b08f54ed95b692d40733a551d925363319", "html_url": "https://github.com/rust-lang/rust/commit/6aaed5b08f54ed95b692d40733a551d925363319"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "aeb05e90c540b3444b45c3101da64fae6d6c544b", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/655022c42b267b1337ac12c4b7776087dfdeaac7/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/655022c42b267b1337ac12c4b7776087dfdeaac7/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=655022c42b267b1337ac12c4b7776087dfdeaac7", "patch": "@@ -35,10 +35,10 @@ fn main() {\n     std::process::exit(exit_status);\n }\n \n-fn execute() -> i32 {\n-    let success = 0;\n-    let failure = 1;\n+const SUCCESS: i32 = 0;\n+const FAILURE: i32 = 1;\n \n+fn execute() -> i32 {\n     let mut opts = getopts::Options::new();\n     opts.optflag(\"h\", \"help\", \"show this message\");\n     opts.optflag(\"q\", \"quiet\", \"no output printed to stdout\");\n@@ -59,7 +59,7 @@ fn execute() -> i32 {\n             is_package_arg = arg.starts_with(\"--package\");\n         } else if !is_package_arg {\n             print_usage_to_stderr(&opts, &format!(\"Invalid argument: `{}`.\", arg));\n-            return failure;\n+            return FAILURE;\n         } else {\n             is_package_arg = false;\n         }\n@@ -69,7 +69,7 @@ fn execute() -> i32 {\n         Ok(m) => m,\n         Err(e) => {\n             print_usage_to_stderr(&opts, &e.to_string());\n-            return failure;\n+            return FAILURE;\n         }\n     };\n \n@@ -79,13 +79,13 @@ fn execute() -> i32 {\n         (true, false) => Verbosity::Verbose,\n         (true, true) => {\n             print_usage_to_stderr(&opts, \"quiet mode and verbose mode are not compatible\");\n-            return failure;\n+            return FAILURE;\n         }\n     };\n \n     if matches.opt_present(\"h\") {\n         print_usage_to_stdout(&opts, \"\");\n-        return success;\n+        return SUCCESS;\n     }\n \n     if matches.opt_present(\"version\") {\n@@ -97,13 +97,13 @@ fn execute() -> i32 {\n     match format_crate(verbosity, &strategy) {\n         Err(e) => {\n             print_usage_to_stderr(&opts, &e.to_string());\n-            failure\n+            FAILURE\n         }\n         Ok(status) => {\n             if status.success() {\n-                success\n+                SUCCESS\n             } else {\n-                status.code().unwrap_or(failure)\n+                status.code().unwrap_or(FAILURE)\n             }\n         }\n     }\n@@ -136,19 +136,16 @@ pub enum Verbosity {\n }\n \n fn handle_command_status(status: Result<ExitStatus, io::Error>, opts: &getopts::Options) -> i32 {\n-    let success = 0;\n-    let failure = 1;\n-\n     match status {\n         Err(e) => {\n             print_usage_to_stderr(&opts, &e.to_string());\n-            failure\n+            FAILURE\n         }\n         Ok(status) => {\n             if status.success() {\n-                success\n+                SUCCESS\n             } else {\n-                status.code().unwrap_or(failure)\n+                status.code().unwrap_or(FAILURE)\n             }\n         }\n     }"}]}