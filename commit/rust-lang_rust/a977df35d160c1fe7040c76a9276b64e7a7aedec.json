{"sha": "a977df35d160c1fe7040c76a9276b64e7a7aedec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NzdkZjM1ZDE2MGMxZmU3MDQwYzc2YTkyNzZiNjRlN2E3YWVkZWM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-03T21:11:34Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-27T18:37:56Z"}, "message": "Implement RFC 2585", "tree": {"sha": "e6ffc904637a409b0446c9fce8b57dcaba86305d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6ffc904637a409b0446c9fce8b57dcaba86305d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a977df35d160c1fe7040c76a9276b64e7a7aedec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a977df35d160c1fe7040c76a9276b64e7a7aedec", "html_url": "https://github.com/rust-lang/rust/commit/a977df35d160c1fe7040c76a9276b64e7a7aedec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a977df35d160c1fe7040c76a9276b64e7a7aedec/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2873165725c15e96dae521a412065c144d9c7a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/2873165725c15e96dae521a412065c144d9c7a25", "html_url": "https://github.com/rust-lang/rust/commit/2873165725c15e96dae521a412065c144d9c7a25"}], "stats": {"total": 85, "additions": 75, "deletions": 10}, "files": [{"sha": "fd35cb6c3f78557354c2912ff274620eb8dd6d37", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=a977df35d160c1fe7040c76a9276b64e7a7aedec", "patch": "@@ -571,6 +571,9 @@ declare_features! (\n     /// Allows the use of `#[ffi_const]` on foreign functions.\n     (active, ffi_const, \"1.45.0\", Some(58328), None),\n \n+    /// No longer treat an unsafe function as an unsafe block.\n+    (active, unsafe_block_in_unsafe_fn, \"1.45.0\", Some(71668), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "243f81459e760e9bd0bb07630e95ff254a29646e", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=a977df35d160c1fe7040c76a9276b64e7a7aedec", "patch": "@@ -408,7 +408,7 @@ impl<'tcx> Body<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum Safety {\n     Safe,\n     /// Unsafe because of a PushUnsafeBlock"}, {"sha": "f19270e5561f0a868231deb6505626be857c1c8d", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=a977df35d160c1fe7040c76a9276b64e7a7aedec", "patch": "@@ -15,10 +15,17 @@ use super::{Field, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UnsafetyViolationKind {\n+    /// Only permitted in regular `fn`s, prohibitted in `const fn`s.\n     General,\n     /// Permitted both in `const fn`s and regular `fn`s.\n     GeneralAndConstFn,\n+    /// Borrow of packed field.\n+    /// Has to be handled as a lint for backwards compatibility.\n     BorrowPacked(hir::HirId),\n+    /// Unsafe operation in an `unsafe fn` but outside an `unsafe` block.\n+    /// Has to be handled as a lint for backwards compatibility.\n+    /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n+    UnsafeFn(hir::HirId),\n }\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "bcadbd091076a1a82f308bed3c1bcd393ec799f4", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=a977df35d160c1fe7040c76a9276b64e7a7aedec", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n+use rustc_session::lint::builtin::{SAFE_PACKED_BORROWS, UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_span::symbol::{sym, Symbol};\n \n use std::ops::Bound;\n@@ -351,14 +351,35 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                 violation.kind = UnsafetyViolationKind::General;\n                             }\n                         }\n+                        UnsafetyViolationKind::UnsafeFn(_) => {\n+                            bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n+                        }\n+                    }\n+                    if !self.violations.contains(&violation) {\n+                        self.violations.push(violation)\n                     }\n+                }\n+                false\n+            }\n+            // With the RFC 2585, no longer allow `unsafe` operations in `unsafe fn`s\n+            Safety::FnUnsafe if self.tcx.features().unsafe_block_in_unsafe_fn => {\n+                for violation in violations {\n+                    let mut violation = *violation;\n+                    let lint_root = self.body.source_scopes[self.source_info.scope]\n+                        .local_data\n+                        .as_ref()\n+                        .assert_crate_local()\n+                        .lint_root;\n+\n+                    // FIXME(LeSeulArtichaut): what to do with `UnsafetyViolationKind::BorrowPacked`?\n+                    violation.kind = UnsafetyViolationKind::UnsafeFn(lint_root);\n                     if !self.violations.contains(&violation) {\n                         self.violations.push(violation)\n                     }\n                 }\n                 false\n             }\n-            // `unsafe` function bodies allow unsafe without additional unsafe blocks\n+            // `unsafe` function bodies allow unsafe without additional unsafe blocks (before RFC 2585)\n             Safety::BuiltinUnsafe | Safety::FnUnsafe => true,\n             Safety::ExplicitUnsafe(hir_id) => {\n                 // mark unsafe block as used if there are any unsafe operations inside\n@@ -383,6 +404,9 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                     self.violations.push(violation)\n                                 }\n                             }\n+                            UnsafetyViolationKind::UnsafeFn(_) => bug!(\n+                                \"`UnsafetyViolationKind::UnsafeFn` in an `ExplicitUnsafe` context\"\n+                            ),\n                         }\n                     }\n                 }\n@@ -575,9 +599,12 @@ fn is_enclosed(\n             kind: hir::ItemKind::Fn(ref sig, _, _), ..\n         })) = tcx.hir().find(parent_id)\n         {\n-            match sig.header.unsafety {\n-                hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n-                hir::Unsafety::Normal => None,\n+            if sig.header.unsafety == hir::Unsafety::Unsafe\n+                && !tcx.features().unsafe_block_in_unsafe_fn\n+            {\n+                Some((\"fn\".to_string(), parent_id))\n+            } else {\n+                None\n             }\n         } else {\n             is_enclosed(tcx, used_unsafe, parent_id)\n@@ -630,16 +657,20 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n     let UnsafetyCheckResult { violations, unsafe_blocks } =\n         tcx.unsafety_check_result(def_id.expect_local());\n \n+    let or_block_msg = if tcx.features().unsafe_block_in_unsafe_fn { \"\" } else { \" or block\" };\n+\n     for &UnsafetyViolation { source_info, description, details, kind } in violations.iter() {\n         // Report an error.\n         match kind {\n             UnsafetyViolationKind::GeneralAndConstFn | UnsafetyViolationKind::General => {\n+                // once\n                 struct_span_err!(\n                     tcx.sess,\n                     source_info.span,\n                     E0133,\n-                    \"{} is unsafe and requires unsafe function or block\",\n-                    description\n+                    \"{} is unsafe and requires unsafe function{}\",\n+                    description,\n+                    or_block_msg,\n                 )\n                 .span_label(source_info.span, &*description.as_str())\n                 .note(&details.as_str())\n@@ -655,15 +686,29 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                         source_info.span,\n                         |lint| {\n                             lint.build(&format!(\n-                                \"{} is unsafe and requires unsafe function or block (error E0133)\",\n-                                description\n+                                \"{} is unsafe and requires unsafe function{} (error E0133)\",\n+                                description, or_block_msg,\n                             ))\n                             .note(&details.as_str())\n                             .emit()\n                         },\n                     )\n                 }\n             }\n+            UnsafetyViolationKind::UnsafeFn(lint_hir_id) => tcx.struct_span_lint_hir(\n+                UNSAFE_OP_IN_UNSAFE_FN,\n+                lint_hir_id,\n+                source_info.span,\n+                |lint| {\n+                    lint.build(&format!(\n+                        \"{} is unsafe and requires unsafe block (error E0133)\",\n+                        description\n+                    ))\n+                    .span_label(source_info.span, &*description.as_str())\n+                    .note(&details.as_str())\n+                    .emit();\n+                },\n+            ),\n         }\n     }\n "}, {"sha": "b052c839152debf221bcc0ac6b5be327e5c6deac", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=a977df35d160c1fe7040c76a9276b64e7a7aedec", "patch": "@@ -217,6 +217,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 assert_eq!(self.push_unsafe_count, 0);\n                 match self.unpushed_unsafe {\n                     Safety::Safe => {}\n+                    // no longer treat `unsafe fn`s as `unsafe` contexts (see RFC #2585)\n+                    Safety::FnUnsafe if self.hir.tcx().features().unsafe_block_in_unsafe_fn => {}\n                     _ => return,\n                 }\n                 self.unpushed_unsafe = Safety::ExplicitUnsafe(hir_id);"}, {"sha": "7112ac35b082b8f66a06f4e5b8d2b3f84009689e", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=a977df35d160c1fe7040c76a9276b64e7a7aedec", "patch": "@@ -526,6 +526,12 @@ declare_lint! {\n     \"using only a subset of a register for inline asm inputs\",\n }\n \n+declare_lint! {\n+    pub UNSAFE_OP_IN_UNSAFE_FN,\n+    Allow,\n+    \"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -597,6 +603,7 @@ declare_lint_pass! {\n         SOFT_UNSTABLE,\n         INLINE_NO_SANITIZE,\n         ASM_SUB_REGISTER,\n+        UNSAFE_OP_IN_UNSAFE_FN,\n     ]\n }\n "}, {"sha": "87952d409c8968ef9fa8e25f941796a59647c533", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a977df35d160c1fe7040c76a9276b64e7a7aedec/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=a977df35d160c1fe7040c76a9276b64e7a7aedec", "patch": "@@ -806,6 +806,7 @@ symbols! {\n         unmarked_api,\n         unreachable_code,\n         unrestricted_attribute_tokens,\n+        unsafe_block_in_unsafe_fn,\n         unsafe_no_drop_flag,\n         unsized_locals,\n         unsized_tuple_coercion,"}]}