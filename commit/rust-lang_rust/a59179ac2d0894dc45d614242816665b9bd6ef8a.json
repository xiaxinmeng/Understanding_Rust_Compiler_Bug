{"sha": "a59179ac2d0894dc45d614242816665b9bd6ef8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OTE3OWFjMmQwODk0ZGM0NWQ2MTQyNDI4MTY2NjViOWJkNmVmOGE=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-12T03:50:54Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-12T03:50:54Z"}, "message": "missing match arms add test cases to demonstrate behavior of tuple with  pattern", "tree": {"sha": "cbd6bf427aa01d238de4ba75293620397a16d08c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd6bf427aa01d238de4ba75293620397a16d08c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59179ac2d0894dc45d614242816665b9bd6ef8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59179ac2d0894dc45d614242816665b9bd6ef8a", "html_url": "https://github.com/rust-lang/rust/commit/a59179ac2d0894dc45d614242816665b9bd6ef8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59179ac2d0894dc45d614242816665b9bd6ef8a/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec20e50946ea427ceb6a44451459f0cb3a84a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec20e50946ea427ceb6a44451459f0cb3a84a4f", "html_url": "https://github.com/rust-lang/rust/commit/aec20e50946ea427ceb6a44451459f0cb3a84a4f"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "c9a6551ab01615d9691ded4c9f0b9c835a552335", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a59179ac2d0894dc45d614242816665b9bd6ef8a/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59179ac2d0894dc45d614242816665b9bd6ef8a/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=a59179ac2d0894dc45d614242816665b9bd6ef8a", "patch": "@@ -972,6 +972,47 @@ mod tests {\n         check_no_diagnostic(content);\n     }\n \n+    #[test]\n+    fn tuple_of_bools_with_ellipsis_at_end_no_diagnostic() {\n+        let content = r\"\n+            fn test_fn() {\n+                match (false, true, false) {\n+                    (false, ..) => {},\n+                    (true, ..) => {},\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n+    #[test]\n+    fn tuple_of_bools_with_ellipsis_at_beginning_no_diagnostic() {\n+        let content = r\"\n+            fn test_fn() {\n+                match (false, true, false) {\n+                    (.., false) => {},\n+                    (.., true) => {},\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n+    #[test]\n+    fn tuple_of_bools_with_ellipsis_no_diagnostic() {\n+        let content = r\"\n+            fn test_fn() {\n+                match (false, true, false) {\n+                    (..) => {},\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n     #[test]\n     fn tuple_of_tuple_and_bools_no_arms() {\n         let content = r\"\n@@ -1553,4 +1594,38 @@ mod false_negatives {\n         // with `!`.\n         check_no_diagnostic(content);\n     }\n+\n+    #[test]\n+    fn tuple_of_bools_with_ellipsis_at_end_missing_arm() {\n+        let content = r\"\n+            fn test_fn() {\n+                match (false, true, false) {\n+                    (false, ..) => {},\n+                }\n+            }\n+        \";\n+\n+        // This is a false negative.\n+        // The `..` pattern is currently lowered to a single `Pat::Wild`\n+        // no matter how many fields the `..` pattern is covering. This\n+        // causes the match arm in this test not to type check against\n+        // the match expression, which causes this diagnostic not to\n+        // fire.\n+        check_no_diagnostic(content);\n+    }\n+\n+    #[test]\n+    fn tuple_of_bools_with_ellipsis_at_beginning_missing_arm() {\n+        let content = r\"\n+            fn test_fn() {\n+                match (false, true, false) {\n+                    (.., false) => {},\n+                }\n+            }\n+        \";\n+\n+        // This is a false negative.\n+        // See comments on `tuple_of_bools_with_ellipsis_at_end_missing_arm`.\n+        check_no_diagnostic(content);\n+    }\n }"}]}