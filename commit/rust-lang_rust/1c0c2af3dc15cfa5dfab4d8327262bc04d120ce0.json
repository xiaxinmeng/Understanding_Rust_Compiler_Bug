{"sha": "1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMGMyYWYzZGMxNWNmYTVkZmFiNGQ4MzI3MjYyYmMwNGQxMjBjZTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-12T23:11:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-25T20:50:47Z"}, "message": "merge TypeckItemBody and Tables depnodes", "tree": {"sha": "d4ffa0344a2746f874383462d893f2d6bdb0b398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4ffa0344a2746f874383462d893f2d6bdb0b398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "html_url": "https://github.com/rust-lang/rust/commit/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01195df2ab821c13469b03099955ec76d424f211", "url": "https://api.github.com/repos/rust-lang/rust/commits/01195df2ab821c13469b03099955ec76d424f211", "html_url": "https://github.com/rust-lang/rust/commit/01195df2ab821c13469b03099955ec76d424f211"}], "stats": {"total": 227, "additions": 113, "deletions": 114}, "files": [{"sha": "372f7e2d4482f5940eea5701b3d9a4ec09536983", "filename": "src/librustc/dep_graph/README.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc%2Fdep_graph%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc%2Fdep_graph%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2FREADME.md?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -326,15 +326,15 @@ The idea is that you can annotate a test like:\n #[rustc_if_this_changed]\n fn foo() { }\n \n-#[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+#[rustc_then_this_would_need(Tables)] //~ ERROR OK\n fn bar() { foo(); }\n \n-#[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+#[rustc_then_this_would_need(Tables)] //~ ERROR no path\n fn baz() { }\n ```\n \n This will check whether there is a path in the dependency graph from\n-`Hir(foo)` to `TypeckItemBody(bar)`. An error is reported for each\n+`Hir(foo)` to `Tables(bar)`. An error is reported for each\n `#[rustc_then_this_would_need]` annotation that indicates whether a\n path exists. `//~ ERROR` annotations can then be used to test if a\n path is found (as demonstrated above).\n@@ -371,27 +371,27 @@ A node is considered to match a filter if all of those strings appear in its\n label. So, for example:\n \n ```\n-RUST_DEP_GRAPH_FILTER='-> TypeckItemBody'\n+RUST_DEP_GRAPH_FILTER='-> Tables'\n ```\n \n-would select the predecessors of all `TypeckItemBody` nodes. Usually though you\n-want the `TypeckItemBody` node for some particular fn, so you might write:\n+would select the predecessors of all `Tables` nodes. Usually though you\n+want the `Tables` node for some particular fn, so you might write:\n \n ```\n-RUST_DEP_GRAPH_FILTER='-> TypeckItemBody & bar'\n+RUST_DEP_GRAPH_FILTER='-> Tables & bar'\n ```\n \n-This will select only the `TypeckItemBody` nodes for fns with `bar` in their name.\n+This will select only the `Tables` nodes for fns with `bar` in their name.\n \n Perhaps you are finding that when you change `foo` you need to re-type-check `bar`,\n but you don't think you should have to. In that case, you might do:\n \n ```\n-RUST_DEP_GRAPH_FILTER='Hir&foo -> TypeckItemBody & bar'\n+RUST_DEP_GRAPH_FILTER='Hir&foo -> Tables & bar'\n ```\n \n This will dump out all the nodes that lead from `Hir(foo)` to\n-`TypeckItemBody(bar)`, from which you can (hopefully) see the source\n+`Tables(bar)`, from which you can (hopefully) see the source\n of the erroneous edge.\n \n #### Tracking down incorrect edges\n@@ -417,8 +417,8 @@ dep-graph as described in the previous section and open `dep-graph.txt`\n to see something like:\n \n     Hir(foo) -> Collect(bar)\n-    Collect(bar) -> TypeckItemBody(bar)\n-\n+    Collect(bar) -> Tables(bar)\n+    \n That first edge looks suspicious to you. So you set\n `RUST_FORBID_DEP_GRAPH_EDGE` to `Hir&foo -> Collect&bar`, re-run, and\n then observe the backtrace. Voila, bug fixed!\n@@ -440,4 +440,6 @@ To achieve this, the HIR map will detect if the def-id originates in\n an inlined node and add a dependency to a suitable `MetaData` node\n instead. If you are reading a HIR node and are not sure if it may be\n inlined or not, you can use `tcx.map.read(node_id)` and it will detect\n-whether the node is inlined or not and do the right thing.\n+whether the node is inlined or not and do the right thing.  You can\n+also use `tcx.map.is_inlined_def_id()` and\n+`tcx.map.is_inlined_node_id()` to test."}, {"sha": "bc5113b61d753144cdace857996a07facf0ba570", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -78,7 +78,6 @@ pub enum DepNode<D: Clone + Debug> {\n     Variance,\n     WfCheck(D),\n     TypeckItemType(D),\n-    TypeckItemBody(D),\n     Dropck,\n     DropckImpl(D),\n     UnusedTraitCheck,\n@@ -158,7 +157,6 @@ impl<D: Clone + Debug> DepNode<D> {\n             HirBody,\n             TransCrateItem,\n             TypeckItemType,\n-            TypeckItemBody,\n             AssociatedItems,\n             ItemSignature,\n             AssociatedItemDefIds,\n@@ -216,7 +214,6 @@ impl<D: Clone + Debug> DepNode<D> {\n             CoherenceOrphanCheck(ref d) => op(d).map(CoherenceOrphanCheck),\n             WfCheck(ref d) => op(d).map(WfCheck),\n             TypeckItemType(ref d) => op(d).map(TypeckItemType),\n-            TypeckItemBody(ref d) => op(d).map(TypeckItemBody),\n             DropckImpl(ref d) => op(d).map(DropckImpl),\n             CheckConst(ref d) => op(d).map(CheckConst),\n             IntrinsicCheck(ref d) => op(d).map(IntrinsicCheck),"}, {"sha": "b719a759b93ae9c80d0239f7b97c9290368c4791", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -14,11 +14,11 @@\n //! we will check that a suitable node for that item either appears\n //! or does not appear in the dep-graph, as appropriate:\n //!\n-//! - `#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rev2\")]` if we are\n+//! - `#[rustc_dirty(label=\"Tables\", cfg=\"rev2\")]` if we are\n //!   in `#[cfg(rev2)]`, then there MUST NOT be a node\n-//!   `DepNode::TypeckItemBody(X)` where `X` is the def-id of the\n+//!   `DepNode::Tables(X)` where `X` is the def-id of the\n //!   current node.\n-//! - `#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rev2\")]` same as above,\n+//! - `#[rustc_clean(label=\"Tables\", cfg=\"rev2\")]` same as above,\n //!   except that the node MUST exist.\n //!\n //! Errors are reported if we are in the suitable configuration but"}, {"sha": "454edbc4d3444a464134b02ccdf19901102c0cb8", "filename": "src/librustc_incremental/persist/preds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -56,7 +56,7 @@ impl<'q> Predecessors<'q> {\n \n                 // if -Z query-dep-graph is passed, save more extended data\n                 // to enable better unit testing\n-                DepNode::TypeckItemBody(_) |\n+                DepNode::Tables(_) |\n                 DepNode::TransCrateItem(_) => tcx.sess.opts.debugging_opts.query_dep_graph,\n \n                 _ => false,"}, {"sha": "ae3578616bc754990d73b43ebcd23b3b28315fca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -628,14 +628,14 @@ pub fn check_item_types(ccx: &CrateCtxt) -> CompileResult {\n pub fn check_item_bodies(ccx: &CrateCtxt) -> CompileResult {\n     ccx.tcx.sess.track_errors(|| {\n         let mut visit = CheckItemBodiesVisitor { ccx: ccx };\n-        ccx.tcx.visit_all_item_likes_in_krate(DepNode::TypeckItemBody, &mut visit);\n+        ccx.tcx.visit_all_item_likes_in_krate(DepNode::Tables, &mut visit);\n \n         // Process deferred obligations, now that all functions\n         // bodies have been fully inferred.\n         for (&item_id, obligations) in ccx.deferred_obligations.borrow().iter() {\n             // Use the same DepNode as for the body of the original function/item.\n             let def_id = ccx.tcx.map.local_def_id(item_id);\n-            let _task = ccx.tcx.dep_graph.in_task(DepNode::TypeckItemBody(def_id));\n+            let _task = ccx.tcx.dep_graph.in_task(DepNode::Tables(def_id));\n \n             let param_env = ParameterEnvironment::for_item(ccx.tcx, item_id);\n             ccx.tcx.infer_ctxt(param_env, Reveal::NotSpecializable).enter(|infcx| {"}, {"sha": "ddfd2b661714613492f6fed5acd47d06a7067f21", "filename": "src/test/compile-fail/dep-graph-assoc-type-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -35,7 +35,7 @@ mod x {\n mod y {\n     use Foo;\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn use_char_assoc() {\n         // Careful here: in the representation, <char as Foo>::T gets"}, {"sha": "8fda05e80856b8fed5ff7af3adcb87cf5954bd7a", "filename": "src/test/compile-fail/dep-graph-caller-callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -27,7 +27,7 @@ mod y {\n     use x;\n \n     // These dependencies SHOULD exist:\n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn y() {\n         x::x();\n@@ -39,7 +39,7 @@ mod z {\n \n     // These are expected to yield errors, because changes to `x`\n     // affect the BODY of `y`, but not its signature.\n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR no path\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path\n     pub fn z() {\n         y::y();"}, {"sha": "75e20d75704f40baea36d490b38632c09c3cc7d5", "filename": "src/test/compile-fail/dep-graph-trait-impl-two-traits-same-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -39,7 +39,7 @@ mod x {\n mod y {\n     use {Foo, Bar};\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR OK\n     pub fn with_char() {\n         char::method('a');\n     }\n@@ -48,7 +48,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR no path\n     pub fn z() {\n         y::with_char();\n     }"}, {"sha": "42318d16e3354f7e7b61f163cc71f4fc855d38c4", "filename": "src/test/compile-fail/dep-graph-trait-impl-two-traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -38,7 +38,7 @@ mod x {\n mod y {\n     use {Foo, Bar};\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR no path\n     pub fn call_bar() {\n         char::bar('a');\n     }\n@@ -47,7 +47,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR no path\n     pub fn z() {\n         y::call_bar();\n     }"}, {"sha": "c3a7445eb4357976a2b4bf01e08e59b5bc67fb67", "filename": "src/test/compile-fail/dep-graph-trait-impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -34,25 +34,25 @@ mod x {\n mod y {\n     use Foo;\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn with_char() {\n         char::method('a');\n     }\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn take_foo_with_char() {\n         take_foo::<char>('a');\n     }\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn with_u32() {\n         u32::method(22);\n     }\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn take_foo_with_u32() {\n         take_foo::<u32>(22);\n@@ -66,7 +66,7 @@ mod z {\n \n     // These are expected to yield errors, because changes to `x`\n     // affect the BODY of `y`, but not its signature.\n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(Tables)] //~ ERROR no path\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path\n     pub fn z() {\n         y::with_char();"}, {"sha": "817d42c74a672bda2ab501f26817966e3df82c75", "filename": "src/test/incremental/add_private_fn_at_krate_root_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -32,7 +32,7 @@ extern crate point;\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -43,7 +43,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_free_fn {\n     use point::{self, Point};\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         point::distance_squared(&x);\n@@ -54,7 +54,7 @@ mod fn_calls_free_fn {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -64,7 +64,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -74,7 +74,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "094fbdc84f2a8c8fd527e71db22324cc2d2565cb", "filename": "src/test/incremental/callee_caller_cross_crate/b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -16,12 +16,12 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn call_function0() {\n     a::function0(77);\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn call_function1() {\n     a::function1(77);\n }"}, {"sha": "3e9d4dcb3fabd9f128db9593f715e9d8d73ae202", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -79,7 +79,7 @@ mod point {\n mod fn_with_type_in_sig {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn boop(p: Option<&Point>) -> f32 {\n         p.map(|p| p.total()).unwrap_or(0.0)\n     }\n@@ -95,7 +95,7 @@ mod fn_with_type_in_sig {\n mod call_fn_with_type_in_sig {\n     use fn_with_type_in_sig;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_sig::boop(None)\n     }\n@@ -111,7 +111,7 @@ mod call_fn_with_type_in_sig {\n mod fn_with_type_in_body {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn boop() -> f32 {\n         Point::origin().total()\n     }\n@@ -124,7 +124,7 @@ mod fn_with_type_in_body {\n mod call_fn_with_type_in_body {\n     use fn_with_type_in_body;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_body::boop()\n     }\n@@ -134,7 +134,7 @@ mod call_fn_with_type_in_body {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn make_origin(p: Point) -> Point {\n         Point { ..p }\n     }\n@@ -144,7 +144,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -154,7 +154,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "69236643e0ba40b8170bf55193805fca3ec2483f", "filename": "src/test/incremental/change_crate_order/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -28,7 +28,7 @@ extern crate a;\n use a::A;\n use b::B;\n \n-//? #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+//? #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn main() {\n     A + B;\n }"}, {"sha": "4b1b3ede47d970b6e9cb1a635a671b47c5e2349e", "filename": "src/test/incremental/change_private_fn/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -59,7 +59,7 @@ mod point {\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -70,7 +70,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -81,7 +81,7 @@ mod fn_calls_methods_in_another_impl {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -91,7 +91,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -101,7 +101,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "dc73969201b2c35f99f1efd5ffcf10db52917d0d", "filename": "src/test/incremental/change_private_fn_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -31,7 +31,7 @@ extern crate point;\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -42,7 +42,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -53,7 +53,7 @@ mod fn_calls_methods_in_another_impl {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -63,7 +63,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -73,7 +73,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "c89a7233f8dec7967868e11691a733225e9cef99", "filename": "src/test/incremental/change_private_impl_method/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -59,7 +59,7 @@ mod point {\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -70,7 +70,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -81,7 +81,7 @@ mod fn_calls_methods_in_another_impl {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -91,7 +91,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -101,7 +101,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "04d01218546e11967a8e7de153e4033d4d4f9e0d", "filename": "src/test/incremental/change_private_impl_method_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -32,7 +32,7 @@ extern crate point;\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -43,7 +43,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn dirty() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -54,7 +54,7 @@ mod fn_calls_methods_in_another_impl {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -64,7 +64,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -74,7 +74,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "d39cf09eb831ee84a9dee22e02945c587d527595", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -50,7 +50,7 @@ mod point {\n mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_origin();\n@@ -61,7 +61,7 @@ mod fn_calls_changed_method {\n mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n@@ -72,7 +72,7 @@ mod fn_calls_another_method {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -82,7 +82,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -92,7 +92,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "4b35355056e8f9df6ebc95ba622ebe85c7db2655", "filename": "src/test/incremental/change_pub_inherent_method_sig/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -61,7 +61,7 @@ mod point {\n mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_point(None);\n@@ -72,7 +72,7 @@ mod fn_calls_changed_method {\n mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n@@ -83,7 +83,7 @@ mod fn_calls_another_method {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -93,7 +93,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -103,7 +103,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "06c962b4d7b92d387520357ebca29e03de9d57fd", "filename": "src/test/incremental/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdirty_clean.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -35,20 +35,20 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"TransCrateItem\", cfg=\"cfail2\")]\n     pub fn y() {\n-        //[cfail2]~^ ERROR `TypeckItemBody(\"y::y\")` not found in dep graph, but should be clean\n+        //[cfail2]~^ ERROR `Tables(\"y::y\")` not found in dep graph, but should be clean\n         //[cfail2]~| ERROR `TransCrateItem(\"y::y\")` not found in dep graph, but should be clean\n         x::x();\n     }\n }\n \n mod z {\n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"TransCrateItem\", cfg=\"cfail2\")]\n     pub fn z() {\n-        //[cfail2]~^ ERROR `TypeckItemBody(\"z::z\")` found in dep graph, but should be dirty\n+        //[cfail2]~^ ERROR `Tables(\"z::z\")` found in dep graph, but should be dirty\n         //[cfail2]~| ERROR `TransCrateItem(\"z::z\")` found in dep graph, but should be dirty\n     }\n }"}, {"sha": "e87fea202802539d586026db0f31f5c34a657cd6", "filename": "src/test/incremental/hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fhello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fhello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhello_world.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -31,7 +31,7 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn yyyy() {\n         x::xxxx();\n     }\n@@ -40,7 +40,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     pub fn z() {\n         y::yyyy();\n     }"}, {"sha": "ecf19d7a553730ff73399340eb9d745b064b0aec", "filename": "src/test/incremental/rlib_cross_crate/b.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -22,15 +22,15 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass3\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass3\")]\n pub fn use_X() -> u32 {\n     let x: a::X = 22;\n     x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass3\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass3\")]\n pub fn use_Y() {\n     let x: a::Y = 'c';\n }"}, {"sha": "08dc4d33229c25a8939ba5d6a5a8a0a97ad1e2b0", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -27,7 +27,7 @@ mod x {\n     }\n \n     #[cfg(rpass2)]\n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n     #[rustc_dirty(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n@@ -37,7 +37,7 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn y() {\n         x::x();\n@@ -47,7 +47,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn z() {\n         y::y();"}, {"sha": "159f594e8c043c025481be92d50c77d64c18e41e", "filename": "src/test/incremental/struct_add_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_add_field.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -31,17 +31,17 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_X(x: X) -> u32 {\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "ca011f1fdd0839bdc11d0e3cc8e58d1a1d30e1cc", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -34,21 +34,21 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"cfail2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     //[cfail2]~^ ERROR struct `X` has no field named `x`\n     x.x as u32\n     //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"cfail2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n     //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"cfail2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "7237496af2cac66b74a6fa654c451f2cf7193bc6", "filename": "src/test/incremental/struct_change_field_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -34,19 +34,19 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(x: EmbedX) -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "b490ea41238fdf8e3ee650a35864679f313b258b", "filename": "src/test/incremental/struct_change_field_type_cross_crate/b.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -18,18 +18,18 @@ extern crate a;\n \n use a::*;\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "214cfacc6e7b024881361300f1407433524ad1de", "filename": "src/test/incremental/struct_change_nothing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -34,19 +34,19 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(x: EmbedX) -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "fac2a7f634ce545f9fde9b567c220ba8e5c24407", "filename": "src/test/incremental/struct_remove_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -35,17 +35,17 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_X(x: X) -> u32 {\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "fce759cc0b4b0fc8d523c974eb638a94a5d29336", "filename": "src/test/incremental/type_alias_cross_crate/b.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs?ref=1c0c2af3dc15cfa5dfab4d8327262bc04d120ce0", "patch": "@@ -16,15 +16,15 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass3\")]\n+#[rustc_dirty(label=\"Tables\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass3\")]\n pub fn use_X() -> u32 {\n     let x: a::X = 22;\n     x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass3\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"Tables\", cfg=\"rpass3\")]\n pub fn use_Y() {\n     let x: a::Y = 'c';\n }"}]}