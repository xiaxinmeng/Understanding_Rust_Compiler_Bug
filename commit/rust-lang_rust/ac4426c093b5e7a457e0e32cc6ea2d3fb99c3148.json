{"sha": "ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148", "node_id": "C_kwDOAAsO6NoAKGFjNDQyNmMwOTNiNWU3YTQ1N2UwZTMyY2M2ZWEyZDNmYjk5YzMxNDg", "commit": {"author": {"name": "Giacomo Pasini", "email": "giacomo@status.im", "date": "2022-12-31T12:45:22Z"}, "committer": {"name": "Giacomo Pasini", "email": "giacomo@status.im", "date": "2023-01-04T14:25:45Z"}, "message": "Merge borrowck permission checks\n\nMerge `check_access_permission` and\n`check_if_reassignment_to_immutable_state`.\nThe goal of this commit is twofold:\nFirst, we simplify the codebase by removing duplicate logic.\nSecond, we avoid duplicate reporting of illegal reassignment\nerrors by reusing the exiting de-duplicating logic of\naccess_place.", "tree": {"sha": "271c46fa9472d3e09b066de2cadd527c64a4efac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/271c46fa9472d3e09b066de2cadd527c64a4efac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEElHY+FNnS7QgcFjiQoDhRt4psmkYFAmO1jGoACgkQoDhRt4ps\nmka+ZxAAm1Y+xM9IjQVlsHKSbl0RaJf9RweaTfU79ZHjRINBQH+zSsmetpUhi7xT\nOgSYiNmQIrdW++iW40y4r3yX9jCu2VqkiOnjLwB8lKM2cghNAljno+Wj9FqQHI1q\n0xjQoQc8AQLjEfaWJIOz9tIW1CtUlCPFbD7GJywzferYdcEhh101eFvitlZvbfgk\nd/OTZMTXaaKSb7wssYoss6pnICqva1wjYW9HC84QLv7FoDzp5X2H0MpArZOywvZC\nTl9KrJrUS049nARoPHFy/Ogw6qJfbcuSHaqIrnU//GGW3n7ywGNNpytRQC+jCpTZ\noi9+OC4cgkNmmtmsF4xmunvdTQeLr98H9r0QAUjFQdEWyq5ILL7+so7PBIUCFAfB\nJz7TxFYhRShuY6woqngKccZEpJx+CFff8FHoIGTwAK24HK+1lAiF6jwCgmhoMFD/\nAeP1k2pQngF6l1PCQaJ7hbxdxPNxdfqOfH4JuPUYdXXdztoQ2GZlSLn5Tgnn/NWL\n28h6WzhZsyDBzf1idmFU/UBJiqshYIDv3E5RSXuizPVuqsNCl8v8v3hdmfzvLzQY\ncV7joYF6I3B1rXEOCbn07AEYzGeK4q8qZ84gSkVvBq5r7qgRfjQVGycCVYhdOhyf\nYquKVvUqePZU5DHUM1GrVBCMCkomueUvztzsNEdszzCRXWM3idI=\n=vcde\n-----END PGP SIGNATURE-----", "payload": "tree 271c46fa9472d3e09b066de2cadd527c64a4efac\nparent ddad1e1f15f77074738bb3d7fb7688a9177b6450\nauthor Giacomo Pasini <giacomo@status.im> 1672490722 +0100\ncommitter Giacomo Pasini <giacomo@status.im> 1672842345 +0100\n\nMerge borrowck permission checks\n\nMerge `check_access_permission` and\n`check_if_reassignment_to_immutable_state`.\nThe goal of this commit is twofold:\nFirst, we simplify the codebase by removing duplicate logic.\nSecond, we avoid duplicate reporting of illegal reassignment\nerrors by reusing the exiting de-duplicating logic of\naccess_place.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148", "html_url": "https://github.com/rust-lang/rust/commit/ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148/comments", "author": {"login": "Zeegomo", "id": 21265557, "node_id": "MDQ6VXNlcjIxMjY1NTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21265557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zeegomo", "html_url": "https://github.com/Zeegomo", "followers_url": "https://api.github.com/users/Zeegomo/followers", "following_url": "https://api.github.com/users/Zeegomo/following{/other_user}", "gists_url": "https://api.github.com/users/Zeegomo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zeegomo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zeegomo/subscriptions", "organizations_url": "https://api.github.com/users/Zeegomo/orgs", "repos_url": "https://api.github.com/users/Zeegomo/repos", "events_url": "https://api.github.com/users/Zeegomo/events{/privacy}", "received_events_url": "https://api.github.com/users/Zeegomo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zeegomo", "id": 21265557, "node_id": "MDQ6VXNlcjIxMjY1NTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21265557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zeegomo", "html_url": "https://github.com/Zeegomo", "followers_url": "https://api.github.com/users/Zeegomo/followers", "following_url": "https://api.github.com/users/Zeegomo/following{/other_user}", "gists_url": "https://api.github.com/users/Zeegomo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zeegomo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zeegomo/subscriptions", "organizations_url": "https://api.github.com/users/Zeegomo/orgs", "repos_url": "https://api.github.com/users/Zeegomo/repos", "events_url": "https://api.github.com/users/Zeegomo/events{/privacy}", "received_events_url": "https://api.github.com/users/Zeegomo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddad1e1f15f77074738bb3d7fb7688a9177b6450", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddad1e1f15f77074738bb3d7fb7688a9177b6450", "html_url": "https://github.com/rust-lang/rust/commit/ddad1e1f15f77074738bb3d7fb7688a9177b6450"}], "stats": {"total": 48, "additions": 11, "deletions": 37}, "files": [{"sha": "278ffed07477b5b3bdf8224a7b3c79c89b2b9ace", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148", "patch": "@@ -863,7 +863,6 @@ enum WriteKind {\n /// local place can be mutated.\n //\n // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:\n-// - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.\n // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and\n //   `is_declared_mutable()`.\n // - Take flow state into consideration in `is_assignable()` for local variables.\n@@ -1132,20 +1131,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // Write of P[i] or *P requires P init'd.\n         self.check_if_assigned_path_is_moved(location, place_span, flow_state);\n \n-        // Special case: you can assign an immutable local variable\n-        // (e.g., `x = ...`) so long as it has never been initialized\n-        // before (at this point in the flow).\n-        if let Some(local) = place_span.0.as_local() {\n-            if let Mutability::Not = self.body.local_decls[local].mutability {\n-                // check for reassignments to immutable local variables\n-                self.check_if_reassignment_to_immutable_state(\n-                    location, local, place_span, flow_state,\n-                );\n-                return;\n-            }\n-        }\n-\n-        // Otherwise, use the normal access permission rules.\n         self.access_place(\n             location,\n             place_span,\n@@ -1554,24 +1539,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n-    fn check_if_reassignment_to_immutable_state(\n-        &mut self,\n-        location: Location,\n-        local: Local,\n-        place_span: (Place<'tcx>, Span),\n-        flow_state: &Flows<'cx, 'tcx>,\n-    ) {\n-        debug!(\"check_if_reassignment_to_immutable_state({:?})\", local);\n-\n-        // Check if any of the initializations of `local` have happened yet:\n-        if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {\n-            // And, if so, report an error.\n-            let init = &self.move_data.inits[init_index];\n-            let span = init.span(&self.body);\n-            self.report_illegal_reassignment(location, place_span, span, place_span.0);\n-        }\n-    }\n-\n     fn check_if_full_path_is_moved(\n         &mut self,\n         location: Location,\n@@ -2037,12 +2004,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // partial initialization, do not complain about mutability\n         // errors except for actual mutation (as opposed to an attempt\n         // to do a partial initialization).\n-        let previously_initialized =\n-            self.is_local_ever_initialized(place.local, flow_state).is_some();\n+        let previously_initialized = self.is_local_ever_initialized(place.local, flow_state);\n \n         // at this point, we have set up the error reporting state.\n-        if previously_initialized {\n-            self.report_mutability_error(place, span, the_place_err, error_access, location);\n+        if let Some(init_index) = previously_initialized {\n+            if let (AccessKind::Mutate, Some(_)) = (error_access, place.as_local()) {\n+                // If this is a mutate access to an immutable local variable with no projections\n+                // report the error as an illegal reassignment\n+                let init = &self.move_data.inits[init_index];\n+                let assigned_span = init.span(&self.body);\n+                self.report_illegal_reassignment(location, (place, span), assigned_span, place);\n+            } else {\n+                self.report_mutability_error(place, span, the_place_err, error_access, location)\n+            }\n             true\n         } else {\n             false"}]}