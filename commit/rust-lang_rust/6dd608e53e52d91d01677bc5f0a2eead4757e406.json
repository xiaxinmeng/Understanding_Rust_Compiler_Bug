{"sha": "6dd608e53e52d91d01677bc5f0a2eead4757e406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZDYwOGU1M2U1MmQ5MWQwMTY3N2JjNWYwYTJlZWFkNDc1N2U0MDY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-20T17:18:32Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-23T14:11:28Z"}, "message": "Rustup to *1.10.0-nightly (764ef92ae 2016-05-19)*", "tree": {"sha": "0fc6a5628618f5e3f752b23a0dbc40a7266b68c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc6a5628618f5e3f752b23a0dbc40a7266b68c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dd608e53e52d91d01677bc5f0a2eead4757e406", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXQw+RAAoJEF5CfHlMukXoZvIP/ikfhXpuLFHIiw0azCzf1Nhs\nBuKBWfdjwPmW8/+V9D5ROAEj+P1X/8MbYmV+lxN+iXne2Pk3FCLMDdiZaJULPAn+\nbpIfwDAToai0XthNp9wTDBwtnUeqh9ct9p4jUeYkZYZVayOnBurPDBJDYMTYMemP\nwUfcW+q4SpinEEOYH/TV14rMpUEzxObqz3WHDy5wx6lDulzqZbgLpOCj30f7k3Gn\nUbAHi1tFvVGtiAt4WB4rfzHiFx6V7fcd/wLqyfU8Dyo6OkVZ/VOQ7PtPdFDQej03\nnEr+Xc5QDAUXreTc6HWr0/ub/rQLxSOzWBHD8mZpfTwxAFQfjKE0zMljqrMvY8pQ\nIimlM0BO7gc6PycXLsIOa+YU7yh/SGTSaFPdxBDwdfiBprvA4W88i/ZXNMSHjn14\n/GYzEhNjb0HCEf08h2138UcLAPtipOE8wmLiwDNkTXHtdByNlqv0W+rOU8jSIsPo\nHKur9wdyeI6ATEHhkmKAUXxjhVnOPVTAbesOiufRQNHRz+jnHQybDVYhIBAzX06a\n/5t2N0+gTnxKkRX/ROiA0eMZpxPMqhns4CH+GKiiIfkTAEut/S2xtU5swhHWbLux\nciaQ259BbLQuX0Bg4QQ5+XJDdE/gcRmSHSmB+teg+2YQ8NcO11DjxtXBbznyRSg6\nhoXS2ldoau/CQnCNj96j\n=sJJr\n-----END PGP SIGNATURE-----", "payload": "tree 0fc6a5628618f5e3f752b23a0dbc40a7266b68c2\nparent 2a5416d662724b8e8ba68aeb4069aa37e7a406d5\nauthor mcarton <cartonmartin+git@gmail.com> 1463764712 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1464012688 +0200\n\nRustup to *1.10.0-nightly (764ef92ae 2016-05-19)*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd608e53e52d91d01677bc5f0a2eead4757e406", "html_url": "https://github.com/rust-lang/rust/commit/6dd608e53e52d91d01677bc5f0a2eead4757e406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dd608e53e52d91d01677bc5f0a2eead4757e406/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a5416d662724b8e8ba68aeb4069aa37e7a406d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5416d662724b8e8ba68aeb4069aa37e7a406d5", "html_url": "https://github.com/rust-lang/rust/commit/2a5416d662724b8e8ba68aeb4069aa37e7a406d5"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "f9f557e7a9a254111b5d080523c27fe092a84eb3", "filename": "src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dd608e53e52d91d01677bc5f0a2eead4757e406/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd608e53e52d91d01677bc5f0a2eead4757e406/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=6dd608e53e52d91d01677bc5f0a2eead4757e406", "patch": "@@ -511,7 +511,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[P<hi\n                 return;\n             }\n         }\n-        // (path, fn_has_argument, methods)\n+        // (path, fn_has_argument, methods, suffix)\n         let know_types: &[(&[_], _, &[_], _)] = &[(&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n                                                   (&paths::HASHMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n                                                   (&paths::OPTION,"}, {"sha": "e62a8f9c45955ec9382cb9c4078483a1f6e24f99", "filename": "src/vec.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6dd608e53e52d91d01677bc5f0a2eead4757e406/src%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd608e53e52d91d01677bc5f0a2eead4757e406/src%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvec.rs?ref=6dd608e53e52d91d01677bc5f0a2eead4757e406", "patch": "@@ -38,17 +38,19 @@ impl LateLintPass for UselessVec {\n             let TypeVariants::TySlice(..) = ty.ty.sty,\n             let ExprAddrOf(_, ref addressee) = expr.node,\n         ], {\n-            check_vec_macro(cx, expr, addressee);\n+            check_vec_macro(cx, addressee, expr.span);\n         }}\n \n         // search for `for _ in vec![\u2026]`\n         if let Some((_, arg, _)) = recover_for_loop(expr) {\n-            check_vec_macro(cx, arg, arg);\n+            // report the error around the `vec!` not inside `<std macros>:`\n+            let span = cx.sess().codemap().source_callsite(arg.span);\n+            check_vec_macro(cx, arg, span);\n         }\n     }\n }\n \n-fn check_vec_macro(cx: &LateContext, expr: &Expr, vec: &Expr) {\n+fn check_vec_macro(cx: &LateContext, vec: &Expr, span: Span) {\n     if let Some(vec_args) = unexpand_vec(cx, vec) {\n         let snippet = match vec_args {\n             VecArgs::Repeat(elem, len) => {\n@@ -69,8 +71,8 @@ fn check_vec_macro(cx: &LateContext, expr: &Expr, vec: &Expr) {\n             }\n         };\n \n-        span_lint_and_then(cx, USELESS_VEC, expr.span, \"useless use of `vec!`\", |db| {\n-            db.span_suggestion(expr.span, \"you can use a slice directly\", snippet);\n+        span_lint_and_then(cx, USELESS_VEC, span, \"useless use of `vec!`\", |db| {\n+            db.span_suggestion(span, \"you can use a slice directly\", snippet);\n         });\n     }\n }"}, {"sha": "9753c021372083ab34da3ad85f19e2aacb951e98", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dd608e53e52d91d01677bc5f0a2eead4757e406/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd608e53e52d91d01677bc5f0a2eead4757e406/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=6dd608e53e52d91d01677bc5f0a2eead4757e406", "patch": "@@ -288,7 +288,7 @@ fn or_fun_call() {\n     with_vec.unwrap_or(vec![]);\n     //~^ERROR use of `unwrap_or`\n     //~|HELP try this\n-    //~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n \n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());"}, {"sha": "8d9bceb0d0d8ad1ae48c22efb0457ef40316bbe0", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6dd608e53e52d91d01677bc5f0a2eead4757e406/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd608e53e52d91d01677bc5f0a2eead4757e406/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=6dd608e53e52d91d01677bc5f0a2eead4757e406", "patch": "@@ -18,6 +18,7 @@ fn less_fun(x : *mut *mut u32) {\n \n macro_rules! mut_ptr {\n     ($p:expr) => { &mut $p }\n+    //~^ ERROR generally you want to avoid `&mut &mut\n }\n \n #[deny(mut_mut)]\n@@ -30,12 +31,12 @@ fn main() {\n \n     if fun(x) {\n         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-                 //~^ ERROR generally you want to avoid `&mut &mut\n-                      //~^^ ERROR generally you want to avoid `&mut &mut\n-                                      //~^^^ ERROR generally you want to avoid `&mut &mut\n-                                           //~^^^^ ERROR generally you want to avoid `&mut &mut\n+        //~^ ERROR generally you want to avoid `&mut &mut\n+        //~| ERROR generally you want to avoid `&mut &mut\n+        //~| ERROR generally you want to avoid `&mut &mut\n+        //~| ERROR generally you want to avoid `&mut &mut\n         ***y + **x;\n     }\n \n-    let mut z = mut_ptr!(&mut 3u32); //~ERROR generally you want to avoid `&mut &mut\n+    let mut z = mut_ptr!(&mut 3u32); //~ NOTE in this expansion of mut_ptr!\n }"}]}