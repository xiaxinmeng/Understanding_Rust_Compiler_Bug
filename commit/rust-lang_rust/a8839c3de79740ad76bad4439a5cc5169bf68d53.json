{"sha": "a8839c3de79740ad76bad4439a5cc5169bf68d53", "node_id": "C_kwDOAAsO6NoAKGE4ODM5YzNkZTc5NzQwYWQ3NmJhZDQ0MzlhNWNjNTE2OWJmNjhkNTM", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-16T12:00:49Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-16T12:06:31Z"}, "message": "Use sort_by_key instead of sort_by\n\nI went over the cases where sort_by is used and in these two,\none can use sort_by_key instead.", "tree": {"sha": "7d21f572f6f83d6dce61163396b0563a0c28e285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d21f572f6f83d6dce61163396b0563a0c28e285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8839c3de79740ad76bad4439a5cc5169bf68d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8839c3de79740ad76bad4439a5cc5169bf68d53", "html_url": "https://github.com/rust-lang/rust/commit/a8839c3de79740ad76bad4439a5cc5169bf68d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8839c3de79740ad76bad4439a5cc5169bf68d53/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd6c574af3886c41f34086d90df42c3da0144693", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6c574af3886c41f34086d90df42c3da0144693", "html_url": "https://github.com/rust-lang/rust/commit/cd6c574af3886c41f34086d90df42c3da0144693"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "dbf15a3e05fa9e2fd114880e8f28ade0d5711da7", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8839c3de79740ad76bad4439a5cc5169bf68d53/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8839c3de79740ad76bad4439a5cc5169bf68d53/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=a8839c3de79740ad76bad4439a5cc5169bf68d53", "patch": "@@ -255,7 +255,7 @@ fn sccs_info<'cx, 'tcx>(\n     let var_to_origin = infcx.reg_var_to_origin.borrow();\n \n     let mut var_to_origin_sorted = var_to_origin.clone().into_iter().collect::<Vec<_>>();\n-    var_to_origin_sorted.sort_by(|a, b| a.0.cmp(&b.0));\n+    var_to_origin_sorted.sort_by_key(|vto| vto.0);\n     let mut debug_str = \"region variables to origins:\\n\".to_string();\n     for (reg_var, origin) in var_to_origin_sorted.into_iter() {\n         debug_str.push_str(&format!(\"{:?}: {:?}\\n\", reg_var, origin));\n@@ -2216,7 +2216,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // is in the same SCC or something. In that case, find what\n         // appears to be the most interesting point to report to the\n         // user via an even more ad-hoc guess.\n-        categorized_path.sort_by(|p0, p1| p0.category.cmp(&p1.category));\n+        categorized_path.sort_by_key(|p| p.category);\n         debug!(\"sorted_path={:#?}\", categorized_path);\n \n         (categorized_path.remove(0), extra_info)"}]}