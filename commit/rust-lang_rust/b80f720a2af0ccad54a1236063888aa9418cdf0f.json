{"sha": "b80f720a2af0ccad54a1236063888aa9418cdf0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MGY3MjBhMmFmMGNjYWQ1NGExMjM2MDYzODg4YWE5NDE4Y2RmMGY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-23T19:30:03Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-30T18:31:54Z"}, "message": "Inline lower_to_hir.", "tree": {"sha": "6ad97a27e283121b4c130032f6cdf4f713391720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad97a27e283121b4c130032f6cdf4f713391720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80f720a2af0ccad54a1236063888aa9418cdf0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80f720a2af0ccad54a1236063888aa9418cdf0f", "html_url": "https://github.com/rust-lang/rust/commit/b80f720a2af0ccad54a1236063888aa9418cdf0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80f720a2af0ccad54a1236063888aa9418cdf0f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c10fb1a6cd9b5d233c2b45b5bc55967cfded72", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c10fb1a6cd9b5d233c2b45b5bc55967cfded72", "html_url": "https://github.com/rust-lang/rust/commit/18c10fb1a6cd9b5d233c2b45b5bc55967cfded72"}], "stats": {"total": 53, "additions": 19, "deletions": 34}, "files": [{"sha": "5ef2b11fffd39c13333c813e701fad928a22224c", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b80f720a2af0ccad54a1236063888aa9418cdf0f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80f720a2af0ccad54a1236063888aa9418cdf0f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b80f720a2af0ccad54a1236063888aa9418cdf0f", "patch": "@@ -793,6 +793,7 @@ pub fn create_global_ctxt<'tcx>(\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n     let sess = &compiler.session();\n+    let _timer = sess.timer(\"create_global_ctxt\");\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n "}, {"sha": "6d887cce764d40e65686753f3890ecba30777da4", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b80f720a2af0ccad54a1236063888aa9418cdf0f/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80f720a2af0ccad54a1236063888aa9418cdf0f/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=b80f720a2af0ccad54a1236063888aa9418cdf0f", "patch": "@@ -8,12 +8,11 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::Crate;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::{GlobalCtxt, ResolverOutputs, TyCtxt};\n+use rustc_middle::ty::{GlobalCtxt, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n use rustc_serialize::json;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n@@ -83,7 +82,6 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    lower_to_hir: Query<(&'tcx Crate<'tcx>, Steal<ResolverOutputs>)>,\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<QueryContext<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n@@ -103,7 +101,6 @@ impl<'tcx> Queries<'tcx> {\n             register_plugins: Default::default(),\n             expansion: Default::default(),\n             dep_graph: Default::default(),\n-            lower_to_hir: Default::default(),\n             prepare_outputs: Default::default(),\n             global_ctxt: Default::default(),\n             ongoing_codegen: Default::default(),\n@@ -117,7 +114,7 @@ impl<'tcx> Queries<'tcx> {\n         &self.compiler.codegen_backend()\n     }\n \n-    pub fn dep_graph_future(&self) -> Result<&Query<Option<DepGraphFuture>>> {\n+    fn dep_graph_future(&self) -> Result<&Query<Option<DepGraphFuture>>> {\n         self.dep_graph_future.compute(|| {\n             let sess = self.session();\n             Ok(sess.opts.build_dep_graph().then(|| rustc_incremental::load_dep_graph(sess)))\n@@ -191,7 +188,7 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn dep_graph(&self) -> Result<&Query<DepGraph>> {\n+    fn dep_graph(&self) -> Result<&Query<DepGraph>> {\n         self.dep_graph.compute(|| {\n             let sess = self.session();\n             let future_opt = self.dep_graph_future()?.take();\n@@ -207,28 +204,6 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn lower_to_hir(&'tcx self) -> Result<&Query<(&'tcx Crate<'tcx>, Steal<ResolverOutputs>)>> {\n-        self.lower_to_hir.compute(|| {\n-            let expansion_result = self.expansion()?;\n-            let peeked = expansion_result.peek();\n-            let krate = &peeked.0;\n-            let resolver = peeked.1.steal();\n-            let lint_store = &peeked.2;\n-            let hir = resolver.borrow_mut().access(|resolver| {\n-                Ok(passes::lower_to_hir(\n-                    self.session(),\n-                    lint_store,\n-                    resolver,\n-                    &*self.dep_graph()?.peek(),\n-                    &krate,\n-                    &self.hir_arena,\n-                ))\n-            })?;\n-            let hir = self.hir_arena.alloc(hir);\n-            Ok((hir, Steal::new(BoxedResolver::to_resolver_outputs(resolver))))\n-        })\n-    }\n-\n     pub fn prepare_outputs(&self) -> Result<&Query<OutputFilenames>> {\n         self.prepare_outputs.compute(|| {\n             let expansion_result = self.expansion()?;\n@@ -248,14 +223,24 @@ impl<'tcx> Queries<'tcx> {\n         self.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n-            let lint_store = self.expansion()?.peek().2.clone();\n-            let hir = self.lower_to_hir()?.peek();\n+            let (ref krate, ref resolver, ref lint_store) = &*self.expansion()?.peek();\n+            let resolver = resolver.steal();\n             let dep_graph = self.dep_graph()?.peek().clone();\n-            let (ref krate, ref resolver_outputs) = &*hir;\n-            let _timer = self.session().timer(\"create_global_ctxt\");\n+            let krate = resolver.borrow_mut().access(|resolver| {\n+                Ok(passes::lower_to_hir(\n+                    self.session(),\n+                    lint_store,\n+                    resolver,\n+                    &dep_graph,\n+                    &krate,\n+                    &self.hir_arena,\n+                ))\n+            })?;\n+            let krate = self.hir_arena.alloc(krate);\n+            let resolver_outputs = Steal::new(BoxedResolver::to_resolver_outputs(resolver));\n             Ok(passes::create_global_ctxt(\n                 self.compiler,\n-                lint_store,\n+                lint_store.clone(),\n                 krate,\n                 dep_graph,\n                 resolver_outputs.steal(),"}, {"sha": "1281f76fd0fdc9d42739251f8799cf8ef54d87a9", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b80f720a2af0ccad54a1236063888aa9418cdf0f/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80f720a2af0ccad54a1236063888aa9418cdf0f/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=b80f720a2af0ccad54a1236063888aa9418cdf0f", "patch": "@@ -112,7 +112,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n \n     let res = interface::run_compiler(config, |compiler| {\n         compiler.enter(|queries| {\n-            let _lower_to_hir = queries.lower_to_hir()?;\n             let mut global_ctxt = queries.global_ctxt()?.take();\n \n             let collector = global_ctxt.enter(|tcx| {"}]}