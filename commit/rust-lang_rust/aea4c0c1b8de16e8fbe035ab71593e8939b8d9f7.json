{"sha": "aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "node_id": "C_kwDOAAsO6NoAKGFlYTRjMGMxYjhkZTE2ZThmYmUwMzVhYjcxNTkzZTg5MzliOGQ5Zjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-15T00:40:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-15T00:40:44Z"}, "message": "Rollup merge of #104391 - nnethercote:deriving-cleanups, r=jackh726\n\nDeriving cleanups\n\nFixing some minor problems `@RalfJung` found in #99046.\n\nr? `@RalfJung`", "tree": {"sha": "952062d74ebba696e089d63b68883eff44229f77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952062d74ebba696e089d63b68883eff44229f77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcuAMCRBK7hj4Ov3rIwAAV6QIAAa4FoldR6/ETPcxMs4OxTSq\nMkHu4DClh//3E6PLOAE1NX1n+0ZDg182ODihhrZydUbQ5FN8Wz8zgdYBthdBsFcQ\nY8pCcDJWqfATpE2/iuzxhg1MmKAiLt880Da+026JW2aHYdGKAw/DdnVfJ2wNezPm\nucyLeQZwtnsxD1czBIlOHD5xNpFcZ36/SP6cFO5SIKNvWUqgGByiFGTYKZ561vp6\n0oi5o9lQQpN+OCLgWIDR8VV24DjOspRkW3hfSWvZBQunRV4c00CzwaJXyItL/+Dh\nvmlFtxRiMqvzY+mC2UOAImdE4qeLtmbauZ8N25ydHT3OHae+JwC2rM+7nPjN57k=\n=hhaA\n-----END PGP SIGNATURE-----\n", "payload": "tree 952062d74ebba696e089d63b68883eff44229f77\nparent 2c29b05fb24095b0bc2e792ffed3df7496cc2a59\nparent 111db7d3a87ff0bfc8753e4d03563de2539dd9da\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668472844 +0100\ncommitter GitHub <noreply@github.com> 1668472844 +0100\n\nRollup merge of #104391 - nnethercote:deriving-cleanups, r=jackh726\n\nDeriving cleanups\n\nFixing some minor problems `@RalfJung` found in #99046.\n\nr? `@RalfJung`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "html_url": "https://github.com/rust-lang/rust/commit/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c29b05fb24095b0bc2e792ffed3df7496cc2a59", "html_url": "https://github.com/rust-lang/rust/commit/2c29b05fb24095b0bc2e792ffed3df7496cc2a59"}, {"sha": "111db7d3a87ff0bfc8753e4d03563de2539dd9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/111db7d3a87ff0bfc8753e4d03563de2539dd9da", "html_url": "https://github.com/rust-lang/rust/commit/111db7d3a87ff0bfc8753e4d03563de2539dd9da"}], "stats": {"total": 97, "additions": 38, "deletions": 59}, "files": [{"sha": "2cbab90aa61a2ca9b657661095b8d0054ff378bb", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -392,15 +392,7 @@ pub struct Generics {\n impl Default for Generics {\n     /// Creates an instance of `Generics`.\n     fn default() -> Generics {\n-        Generics {\n-            params: Vec::new(),\n-            where_clause: WhereClause {\n-                has_where_token: false,\n-                predicates: Vec::new(),\n-                span: DUMMY_SP,\n-            },\n-            span: DUMMY_SP,\n-        }\n+        Generics { params: Vec::new(), where_clause: Default::default(), span: DUMMY_SP }\n     }\n }\n \n@@ -415,6 +407,12 @@ pub struct WhereClause {\n     pub span: Span,\n }\n \n+impl Default for WhereClause {\n+    fn default() -> WhereClause {\n+        WhereClause { has_where_token: false, predicates: Vec::new(), span: DUMMY_SP }\n+    }\n+}\n+\n /// A single predicate in a where-clause.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum WherePredicate {"}, {"sha": "240167146e1f134c08cf93a1fe4514c53ff41a42", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -1,4 +1,3 @@\n-use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n@@ -19,7 +18,6 @@ pub fn expand_deriving_copy(\n         path: path_std!(marker::Copy),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: true,\n         methods: Vec::new(),\n         associated_types: Vec::new(),"}, {"sha": "2f19fbcac7d72299f4d3218760960e765b803868", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -75,7 +75,6 @@ pub fn expand_deriving_clone(\n         path: path_std!(clone::Clone),\n         skip_path_as_bound: false,\n         additional_bounds: bounds,\n-        generics: Bounds::empty(),\n         supports_unions: true,\n         methods: vec![MethodDef {\n             name: sym::clone,"}, {"sha": "a0b836171bea995b3cbe3424c619ddc81e465d9f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -28,7 +28,6 @@ pub fn expand_deriving_eq(\n         path: path_std!(cmp::Eq),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: true,\n         methods: vec![MethodDef {\n             name: sym::assert_receiver_is_total_eq,"}, {"sha": "52780981248b9b8ba13eff913a6977e5bc1f45c6", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -22,7 +22,6 @@ pub fn expand_deriving_ord(\n         path: path_std!(cmp::Ord),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::cmp,"}, {"sha": "34de4a620b462b67d47a1332c22dfbbbdac4073e", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -86,7 +86,6 @@ pub fn expand_deriving_partial_eq(\n         path: path_std!(cmp::PartialEq),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods,\n         associated_types: Vec::new(),"}, {"sha": "6cc8f26df559c2b33d18782a5e62cc14c9d82d18", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -40,7 +40,6 @@ pub fn expand_deriving_partial_ord(\n         path: path_std!(cmp::PartialOrd),\n         skip_path_as_bound: false,\n         additional_bounds: vec![],\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![partial_cmp_def],\n         associated_types: Vec::new(),"}, {"sha": "544d971b27a5d9473a375d0c2b692a16912fac6a", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -23,7 +23,6 @@ pub fn expand_deriving_debug(\n         path: path_std!(fmt::Debug),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::fmt,"}, {"sha": "6d14875a9832293f7d238fdd7e525c385b57326a", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -26,7 +26,6 @@ pub fn expand_deriving_rustc_decodable(\n         path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::decode,"}, {"sha": "93f297ad88b5fc4dfc371512fee69a9ea99bce33", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -27,7 +27,6 @@ pub fn expand_deriving_default(\n         path: Path::new(vec![kw::Default, sym::Default]),\n         skip_path_as_bound: has_a_default_variant(item),\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: kw::Default,"}, {"sha": "9a46ca815372653ab4696303896d31ea5a34cd5e", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -110,7 +110,6 @@ pub fn expand_deriving_rustc_encodable(\n         path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::encode,"}, {"sha": "f48c49f411ce822c02222c6107b616044cb41507", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -195,9 +195,6 @@ pub struct TraitDef<'a> {\n     /// other than the current trait\n     pub additional_bounds: Vec<Ty>,\n \n-    /// Any extra lifetimes and/or bounds, e.g., `D: serialize::Decoder`\n-    pub generics: Bounds,\n-\n     /// Can this trait be derived for unions?\n     pub supports_unions: bool,\n \n@@ -583,19 +580,21 @@ impl<'a> TraitDef<'a> {\n             })\n         });\n \n-        let Generics { mut params, mut where_clause, .. } =\n-            self.generics.to_generics(cx, self.span, type_ident, generics);\n+        let mut where_clause = ast::WhereClause::default();\n         where_clause.span = generics.where_clause.span;\n         let ctxt = self.span.ctxt();\n         let span = generics.span.with_ctxt(ctxt);\n \n         // Create the generic parameters\n-        params.extend(generics.params.iter().map(|param| match &param.kind {\n-            GenericParamKind::Lifetime { .. } => param.clone(),\n-            GenericParamKind::Type { .. } => {\n-                // I don't think this can be moved out of the loop, since\n-                // a GenericBound requires an ast id\n-                let bounds: Vec<_> =\n+        let params: Vec<_> = generics\n+            .params\n+            .iter()\n+            .map(|param| match &param.kind {\n+                GenericParamKind::Lifetime { .. } => param.clone(),\n+                GenericParamKind::Type { .. } => {\n+                    // I don't think this can be moved out of the loop, since\n+                    // a GenericBound requires an ast id\n+                    let bounds: Vec<_> =\n                     // extra restrictions on the generics parameters to the\n                     // type being derived upon\n                     self.additional_bounds.iter().map(|p| {\n@@ -608,21 +607,22 @@ impl<'a> TraitDef<'a> {\n                         param.bounds.iter().cloned()\n                     ).collect();\n \n-                cx.typaram(param.ident.span.with_ctxt(ctxt), param.ident, bounds, None)\n-            }\n-            GenericParamKind::Const { ty, kw_span, .. } => {\n-                let const_nodefault_kind = GenericParamKind::Const {\n-                    ty: ty.clone(),\n-                    kw_span: kw_span.with_ctxt(ctxt),\n-\n-                    // We can't have default values inside impl block\n-                    default: None,\n-                };\n-                let mut param_clone = param.clone();\n-                param_clone.kind = const_nodefault_kind;\n-                param_clone\n-            }\n-        }));\n+                    cx.typaram(param.ident.span.with_ctxt(ctxt), param.ident, bounds, None)\n+                }\n+                GenericParamKind::Const { ty, kw_span, .. } => {\n+                    let const_nodefault_kind = GenericParamKind::Const {\n+                        ty: ty.clone(),\n+                        kw_span: kw_span.with_ctxt(ctxt),\n+\n+                        // We can't have default values inside impl block\n+                        default: None,\n+                    };\n+                    let mut param_clone = param.clone();\n+                    param_clone.kind = const_nodefault_kind;\n+                    param_clone\n+                }\n+            })\n+            .collect();\n \n         // and similarly for where clauses\n         where_clause.predicates.extend(generics.where_clause.predicates.iter().map(|clause| {\n@@ -1062,18 +1062,15 @@ impl<'a> MethodDef<'a> {\n                 trait_.create_struct_field_access_fields(cx, selflike_args, struct_def, true);\n             mk_body(cx, selflike_fields)\n         } else {\n-            // Neither packed nor copy. Need to use ref patterns.\n+            // Packed and not copy. Need to use ref patterns.\n             let prefixes: Vec<_> =\n                 (0..selflike_args.len()).map(|i| format!(\"__self_{}\", i)).collect();\n-            let addr_of = always_copy;\n-            let selflike_fields =\n-                trait_.create_struct_pattern_fields(cx, struct_def, &prefixes, addr_of);\n+            let selflike_fields = trait_.create_struct_pattern_fields(cx, struct_def, &prefixes);\n             let mut body = mk_body(cx, selflike_fields);\n \n             let struct_path = cx.path(span, vec![Ident::new(kw::SelfUpper, type_ident.span)]);\n-            let by_ref = ByRef::from(is_packed && !always_copy);\n             let patterns =\n-                trait_.create_struct_patterns(cx, struct_path, struct_def, &prefixes, by_ref);\n+                trait_.create_struct_patterns(cx, struct_path, struct_def, &prefixes, ByRef::Yes);\n \n             // Do the let-destructuring.\n             let mut stmts: Vec<_> = iter::zip(selflike_args, patterns)\n@@ -1254,9 +1251,7 @@ impl<'a> MethodDef<'a> {\n                 // A single arm has form (&VariantK, &VariantK, ...) => BodyK\n                 // (see \"Final wrinkle\" note below for why.)\n \n-                let addr_of = false; // because enums can't be repr(packed)\n-                let fields =\n-                    trait_.create_struct_pattern_fields(cx, &variant.data, &prefixes, addr_of);\n+                let fields = trait_.create_struct_pattern_fields(cx, &variant.data, &prefixes);\n \n                 let sp = variant.span.with_ctxt(trait_.span.ctxt());\n                 let variant_path = cx.path(sp, vec![type_ident, variant.ident]);\n@@ -1519,15 +1514,13 @@ impl<'a> TraitDef<'a> {\n         cx: &mut ExtCtxt<'_>,\n         struct_def: &'a VariantData,\n         prefixes: &[String],\n-        addr_of: bool,\n     ) -> Vec<FieldInfo> {\n         self.create_fields(struct_def, |i, _struct_field, sp| {\n             prefixes\n                 .iter()\n                 .map(|prefix| {\n                     let ident = self.mk_pattern_ident(prefix, i);\n-                    let expr = cx.expr_path(cx.path_ident(sp, ident));\n-                    if addr_of { cx.expr_addr_of(sp, expr) } else { expr }\n+                    cx.expr_path(cx.path_ident(sp, ident))\n                 })\n                 .collect()\n         })"}, {"sha": "c136bb7141ab9eef3f4b0896e20fc08a47816503", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=aea4c0c1b8de16e8fbe035ab71593e8939b8d9f7", "patch": "@@ -25,7 +25,6 @@ pub fn expand_deriving_hash(\n         path,\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::hash,"}]}