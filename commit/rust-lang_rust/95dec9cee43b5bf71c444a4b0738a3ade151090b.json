{"sha": "95dec9cee43b5bf71c444a4b0738a3ade151090b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZGVjOWNlZTQzYjViZjcxYzQ0NGE0YjA3MzhhM2FkZTE1MTA5MGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-08T07:56:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-08T07:56:38Z"}, "message": "Auto merge of #1401 - RalfJung:cargo-miri-help, r=RalfJung\n\nfix cargo-miri intercepting --help/--version arguments\n\nWith this, `cargo miri test -- -- --help` should behave as expected and pass `--help` to the test runner.\n\nThanks to @brson for the report.", "tree": {"sha": "a8f6b0d6b5da6d198cfc5f1fe5ba7f958aa93ca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f6b0d6b5da6d198cfc5f1fe5ba7f958aa93ca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95dec9cee43b5bf71c444a4b0738a3ade151090b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95dec9cee43b5bf71c444a4b0738a3ade151090b", "html_url": "https://github.com/rust-lang/rust/commit/95dec9cee43b5bf71c444a4b0738a3ade151090b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95dec9cee43b5bf71c444a4b0738a3ade151090b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3366288d126408815eeafa8d7cd6e9f3ea56b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3366288d126408815eeafa8d7cd6e9f3ea56b9", "html_url": "https://github.com/rust-lang/rust/commit/7f3366288d126408815eeafa8d7cd6e9f3ea56b9"}, {"sha": "914e483c89c9b1619001e2c9dcc75a53968da3e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/914e483c89c9b1619001e2c9dcc75a53968da3e7", "html_url": "https://github.com/rust-lang/rust/commit/914e483c89c9b1619001e2c9dcc75a53968da3e7"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "4392cb93ddb4487b96cbec36663e30bf98daba7e", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/95dec9cee43b5bf71c444a4b0738a3ade151090b/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dec9cee43b5bf71c444a4b0738a3ade151090b/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=95dec9cee43b5bf71c444a4b0738a3ade151090b", "patch": "@@ -401,31 +401,6 @@ path = \"lib.rs\"\n     }\n }\n \n-fn main() {\n-    // Check for version and help flags even when invoked as `cargo-miri`.\n-    if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n-        show_help();\n-        return;\n-    }\n-    if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n-        show_version();\n-        return;\n-    }\n-\n-    if let Some(\"miri\") = std::env::args().nth(1).as_deref() {\n-        // This arm is for when `cargo miri` is called. We call `cargo check` for each applicable target,\n-        // but with the `RUSTC` env var set to the `cargo-miri` binary so that we come back in the other branch,\n-        // and dispatch the invocations to `rustc` and `miri`, respectively.\n-        in_cargo_miri();\n-    } else if let Some(\"rustc\") = std::env::args().nth(1).as_deref() {\n-        // This arm is executed when `cargo-miri` runs `cargo check` with the `RUSTC_WRAPPER` env var set to itself:\n-        // dependencies get dispatched to `rustc`, the final test/binary to `miri`.\n-        inside_cargo_rustc();\n-    } else {\n-        show_error(format!(\"must be called with either `miri` or `rustc` as first argument.\"))\n-    }\n-}\n-\n fn in_cargo_miri() {\n     let (subcommand, skip) = match std::env::args().nth(2).as_deref() {\n         Some(\"test\") => (MiriCommand::Test, 3),\n@@ -593,3 +568,28 @@ fn inside_cargo_rustc() {\n         Err(e) => panic!(\"error running {:?}:\\n{:?}\", command, e),\n     }\n }\n+\n+fn main() {\n+    // Check for version and help flags even when invoked as `cargo-miri`.\n+    if has_arg_flag(\"--help\") || has_arg_flag(\"-h\") {\n+        show_help();\n+        return;\n+    }\n+    if has_arg_flag(\"--version\") || has_arg_flag(\"-V\") {\n+        show_version();\n+        return;\n+    }\n+\n+    if let Some(\"miri\") = std::env::args().nth(1).as_deref() {\n+        // This arm is for when `cargo miri` is called. We call `cargo check` for each applicable target,\n+        // but with the `RUSTC` env var set to the `cargo-miri` binary so that we come back in the other branch,\n+        // and dispatch the invocations to `rustc` and `miri`, respectively.\n+        in_cargo_miri();\n+    } else if let Some(\"rustc\") = std::env::args().nth(1).as_deref() {\n+        // This arm is executed when `cargo-miri` runs `cargo check` with the `RUSTC_WRAPPER` env var set to itself:\n+        // dependencies get dispatched to `rustc`, the final test/binary to `miri`.\n+        inside_cargo_rustc();\n+    } else {\n+        show_error(format!(\"must be called with either `miri` or `rustc` as first argument.\"))\n+    }\n+}"}]}