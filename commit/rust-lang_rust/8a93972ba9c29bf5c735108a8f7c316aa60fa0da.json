{"sha": "8a93972ba9c29bf5c735108a8f7c316aa60fa0da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOTM5NzJiYTljMjliZjVjNzM1MTA4YThmN2MzMTZhYTYwZmEwZGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-26T13:28:58Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:11Z"}, "message": "Use Mutability enum instead of bool", "tree": {"sha": "f3f69c8a34a36f62a50ce8f54383424480e22f76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f69c8a34a36f62a50ce8f54383424480e22f76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a93972ba9c29bf5c735108a8f7c316aa60fa0da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53MACgkQpp+NIls6\n19mnbw/+LbzRPmDem7jQ6U8QMQugdvrvOhsn+I+ga+OZQBwx3UCnbW359/lWFFlA\nXxVVhc/P+8ftE+XJ/zf9OxGZ5oNgiVYHowG+PrrCatn+JLOYlQ1vubc1uxEAtuyx\n06g02d/k3zaXQVkeGqrV0iC01SRK897XUy7VhZWaTnmP7O+1Uf4osu5n06f4ph9t\nfAOHH58YS7dXKxhRKrJY2m/RjVsylfRs2mwzSMD2JrZK2I9CDhXzKxv8uwIq2Djt\noJ3xF22FAuNF9yjRgwWKNXx16s9qzfOWJwDMojYkK+EibX72h2HRby+gsRz20lvs\npdsLjJUSauQwVJ/lTkm48YUg2S7nNGxGNeEk05BKHsZotpooCGBbMumjnY4JwNy6\nyfGaeflSpvZZsIHDYWAz5VmWIk3xRFD4zRAIuBNvFkRCoC0HdgKDaJbVcJ8GdQ8O\n+g2934S/16z90AHQLcMFjSdNr6DeINFz+3YBFupcXPkE4FV3LUsdcREA2V5mOuv3\nQr9ECHqgHBXfUdskhWfYgrbbtQbnOwDKAqeJtJRSd89s3dgGzz44R/ueZmGnF2WQ\nL6F0WIsDDFSECK9HilUPnOpvNtsZPTBJZzWAl+oWw80bxI9plHeRqm154wQPyFXu\nNzl6+QxuzBxvbAiU/eDU9r6Pfd8tYg3kOl0KY0jOOoBPv2Gwinc=\n=/njY\n-----END PGP SIGNATURE-----", "payload": "tree f3f69c8a34a36f62a50ce8f54383424480e22f76\nparent c5d2e178e75517d584808c4fbbac08b8df2287c0\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1516973338 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494451 +0100\n\nUse Mutability enum instead of bool\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a93972ba9c29bf5c735108a8f7c316aa60fa0da", "html_url": "https://github.com/rust-lang/rust/commit/8a93972ba9c29bf5c735108a8f7c316aa60fa0da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d2e178e75517d584808c4fbbac08b8df2287c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d2e178e75517d584808c4fbbac08b8df2287c0", "html_url": "https://github.com/rust-lang/rust/commit/c5d2e178e75517d584808c4fbbac08b8df2287c0"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "2dfb2d0bffc6cf28bf68edaee1efe2be7768d78e", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=8a93972ba9c29bf5c735108a8f7c316aa60fa0da", "patch": "@@ -417,10 +417,15 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::Allocation {\n         }\n         self.undef_mask.hash_stable(hcx, hasher);\n         self.align.hash_stable(hcx, hasher);\n-        self.mutable.hash_stable(hcx, hasher);\n+        self.runtime_mutability.hash_stable(hcx, hasher);\n     }\n }\n \n+impl_stable_hash_for!(enum ::syntax::ast::Mutability {\n+    Immutable,\n+    Mutable\n+});\n+\n impl_stable_hash_for!(struct mir::interpret::Pointer{primval});\n \n impl_stable_hash_for!(enum mir::interpret::PrimVal {"}, {"sha": "b621f3f3731a6586f86ed047dff053ec282ce774", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=8a93972ba9c29bf5c735108a8f7c316aa60fa0da", "patch": "@@ -19,6 +19,7 @@ use ty;\n use ty::layout::{self, Align, HasDataLayout};\n use middle::region;\n use std::iter;\n+use syntax::ast::Mutability;\n \n #[derive(Clone, Debug, PartialEq)]\n pub enum Lock {\n@@ -169,8 +170,10 @@ pub struct Allocation {\n     pub undef_mask: UndefMask,\n     /// The alignment of the allocation to detect unaligned reads.\n     pub align: Align,\n-    /// Whether the allocation should be put into mutable memory when translating via llvm\n-    pub mutable: bool,\n+    /// Whether the allocation (of a static) should be put into mutable memory when translating\n+    /// \n+    /// Only happens for `static mut` or `static` with interior mutability\n+    pub runtime_mutability: Mutability,\n }\n \n impl Allocation {\n@@ -182,7 +185,7 @@ impl Allocation {\n             relocations: BTreeMap::new(),\n             undef_mask,\n             align: Align::from_bytes(1, 1).unwrap(),\n-            mutable: false,\n+            runtime_mutability: Mutability::Immutable,\n         }\n     }\n }"}, {"sha": "e67c36779111b4bbcf23c64434218445c5c650cd", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=8a93972ba9c29bf5c735108a8f7c316aa60fa0da", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             relocations: BTreeMap::new(),\n             undef_mask: UndefMask::new(size),\n             align,\n-            mutable: false,\n+            runtime_mutability: Mutability::Immutable,\n         };\n         let id = self.tcx.interpret_interner.reserve();\n         M::add_lock(self, id);\n@@ -544,7 +544,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         let uninit = self.uninitialized_statics.remove(&alloc_id);\n         if let Some(mut alloc) = alloc.or(uninit) {\n             // ensure llvm knows not to put this into immutable memroy\n-            alloc.mutable = mutability == Mutability::Mutable;\n+            alloc.runtime_mutability = mutability;\n             let alloc = self.tcx.intern_const_alloc(alloc);\n             self.tcx.interpret_interner.intern_at_reserved(alloc_id, alloc);\n             // recurse into inner allocations"}, {"sha": "c7a0724c1e72b2a9a3e8466b96253cdc48489ae5", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a93972ba9c29bf5c735108a8f7c316aa60fa0da/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=8a93972ba9c29bf5c735108a8f7c316aa60fa0da", "patch": "@@ -24,6 +24,7 @@ use common::{C_bytes, C_struct, C_uint_big, C_undef, C_usize};\n use consts;\n use type_of::LayoutLlvmExt;\n use type_::Type;\n+use syntax::ast::Mutability;\n \n use super::super::callee;\n use super::FunctionCx;\n@@ -57,7 +58,7 @@ pub fn primval_to_llvm(cx: &CodegenCx,\n                 } else if let Some(alloc) = cx.tcx.interpret_interner\n                                               .get_alloc(ptr.alloc_id) {\n                     let init = global_initializer(cx, alloc);\n-                    if alloc.mutable {\n+                    if alloc.runtime_mutability == Mutability::Mutable {\n                         consts::addr_of_mut(cx, init, alloc.align, \"byte_str\")\n                     } else {\n                         consts::addr_of(cx, init, alloc.align, \"byte_str\")"}]}