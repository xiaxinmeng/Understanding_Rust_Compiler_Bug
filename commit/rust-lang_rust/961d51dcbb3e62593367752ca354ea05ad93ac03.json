{"sha": "961d51dcbb3e62593367752ca354ea05ad93ac03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MWQ1MWRjYmIzZTYyNTkzMzY3NzUyY2EzNTRlYTA1YWQ5M2FjMDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T13:09:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-13T13:09:20Z"}, "message": "Rollup merge of #66292 - lzutao:result-map_or, r=SimonSapin\n\nadd Result::map_or\n\nThis PR adds this API to make it consistent with `Option::map_or`.\n\n```rust\nimpl<T, E> Result<T, E> {\n    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {\n        match self {\n            Ok(t) => f(t),\n            Err(_) => default,\n        }\n    }\n}\n```\n\nThis API is very small. We already has a similar API for `Option::map_or`.", "tree": {"sha": "1011e28062bfc8640abd0b5946995abd30aadb55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1011e28062bfc8640abd0b5946995abd30aadb55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961d51dcbb3e62593367752ca354ea05ad93ac03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzACACRBK7hj4Ov3rIwAAdHIIAEka1XslEAxGP5h/3hk9wurb\naH1zEOuApT1x3IzQY4v5Jy2W6Yq3tUumY5RGY0vBxmdJ432e6/bmjtoiFj5rXJPU\ngVrqcrG2XrZw4FdRnJmS48ywy1kg80DKaludjwSJxolZ3jLwbbx9lJVomrBsuFV8\nTloNgUhQWE8w9mtxBKgv1rAUM06Gk7i3R2BZzTY2omNjMcu3XLrB3ajIJPvc/+Sv\nwpgmO257Vdw9nwBJEvCn9Jbrpl9X0WpOMd5RMnWWMGgXZU+ax5OYbJXtYf3e9vBm\n4khAvccactqx+mjwDc9UMc5JYIb8bW0m67/dkmc9pZKKJIiUd5g28wXN0C6DtVE=\n=Pspo\n-----END PGP SIGNATURE-----\n", "payload": "tree 1011e28062bfc8640abd0b5946995abd30aadb55\nparent 689cc046146faa7a8b0970614c84a3d9ca00ae84\nparent e8f3a9ffbe0dc435d43767b31cc122ccc325f4c1\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573650560 +0900\ncommitter GitHub <noreply@github.com> 1573650560 +0900\n\nRollup merge of #66292 - lzutao:result-map_or, r=SimonSapin\n\nadd Result::map_or\n\nThis PR adds this API to make it consistent with `Option::map_or`.\n\n```rust\nimpl<T, E> Result<T, E> {\n    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {\n        match self {\n            Ok(t) => f(t),\n            Err(_) => default,\n        }\n    }\n}\n```\n\nThis API is very small. We already has a similar API for `Option::map_or`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961d51dcbb3e62593367752ca354ea05ad93ac03", "html_url": "https://github.com/rust-lang/rust/commit/961d51dcbb3e62593367752ca354ea05ad93ac03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961d51dcbb3e62593367752ca354ea05ad93ac03/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689cc046146faa7a8b0970614c84a3d9ca00ae84", "url": "https://api.github.com/repos/rust-lang/rust/commits/689cc046146faa7a8b0970614c84a3d9ca00ae84", "html_url": "https://github.com/rust-lang/rust/commit/689cc046146faa7a8b0970614c84a3d9ca00ae84"}, {"sha": "e8f3a9ffbe0dc435d43767b31cc122ccc325f4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f3a9ffbe0dc435d43767b31cc122ccc325f4c1", "html_url": "https://github.com/rust-lang/rust/commit/e8f3a9ffbe0dc435d43767b31cc122ccc325f4c1"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "06c7041703ae51971b291868bab3e4e057282e7d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/961d51dcbb3e62593367752ca354ea05ad93ac03/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961d51dcbb3e62593367752ca354ea05ad93ac03/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=961d51dcbb3e62593367752ca354ea05ad93ac03", "patch": "@@ -514,6 +514,28 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Applies a function to the contained value (if any),\n+    /// or returns the provided default (if not).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_map_or)]\n+    /// let x: Result<_, &str> = Ok(\"foo\");\n+    /// assert_eq!(x.map_or(42, |v| v.len()), 3);\n+    ///\n+    /// let x: Result<&str, _> = Err(\"bar\");\n+    /// assert_eq!(x.map_or(42, |v| v.len()), 42);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_map_or\", issue = \"66293\")]\n+    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {\n+        match self {\n+            Ok(t) => f(t),\n+            Err(_) => default,\n+        }\n+    }\n+\n     /// Maps a `Result<T, E>` to `U` by applying a function to a\n     /// contained [`Ok`] value, or a fallback function to a\n     /// contained [`Err`] value."}]}