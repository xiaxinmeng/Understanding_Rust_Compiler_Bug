{"sha": "0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMDkyYTgxNTg2MWNiYmYzNTg1YzdlZGZiMTJmNDIzNGNmYmFlYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T09:41:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T09:41:44Z"}, "message": "auto merge of #14455 : crabtw/rust/mips, r=alexcrichton\n\nBecause IPv4 address conversion doesn't consider big-endian target, I add functions to handle that.\r\nThese function names may need to be changed, but I can't come up with a good one.", "tree": {"sha": "7f4aaa342697dbde09bdbffa09d8ff91ef5e1bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4aaa342697dbde09bdbffa09d8ff91ef5e1bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "html_url": "https://github.com/rust-lang/rust/commit/0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1838295eb3a8086e6022d030a1e9e1b08ecc812", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1838295eb3a8086e6022d030a1e9e1b08ecc812", "html_url": "https://github.com/rust-lang/rust/commit/a1838295eb3a8086e6022d030a1e9e1b08ecc812"}, {"sha": "abc2a92d9c47e3b16b4b4f6e24f23e1fd3e226e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc2a92d9c47e3b16b4b4f6e24f23e1fd3e226e4", "html_url": "https://github.com/rust-lang/rust/commit/abc2a92d9c47e3b16b4b4f6e24f23e1fd3e226e4"}], "stats": {"total": 135, "additions": 113, "deletions": 22}, "files": [{"sha": "5b1a4a8b80ec0e2394b665390584a9ab9c56740c", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "patch": "@@ -270,7 +270,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n type Registers = [uint, ..32];\n \n #[cfg(target_arch = \"mips\")]\n-fn new_regs() -> Box<Registers> { box [0, .. 32] }\n+fn new_regs() -> Box<Registers> { box {[0, .. 32]} }\n \n #[cfg(target_arch = \"mips\")]\n fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,"}, {"sha": "cac2303167a6905d9339be0715c71531c6217280", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "patch": "@@ -2476,6 +2476,9 @@ pub mod consts {\n         }\n         pub mod posix08 {\n         }\n+        #[cfg(target_arch = \"arm\")]\n+        #[cfg(target_arch = \"x86\")]\n+        #[cfg(target_arch = \"x86_64\")]\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n \n@@ -2518,6 +2521,49 @@ pub mod consts {\n             pub static SHUT_WR: c_int = 1;\n             pub static SHUT_RDWR: c_int = 2;\n         }\n+        #[cfg(target_arch = \"mips\")]\n+        pub mod bsd44 {\n+            use types::os::arch::c95::c_int;\n+\n+            pub static MADV_NORMAL : c_int = 0;\n+            pub static MADV_RANDOM : c_int = 1;\n+            pub static MADV_SEQUENTIAL : c_int = 2;\n+            pub static MADV_WILLNEED : c_int = 3;\n+            pub static MADV_DONTNEED : c_int = 4;\n+            pub static MADV_REMOVE : c_int = 9;\n+            pub static MADV_DONTFORK : c_int = 10;\n+            pub static MADV_DOFORK : c_int = 11;\n+            pub static MADV_MERGEABLE : c_int = 12;\n+            pub static MADV_UNMERGEABLE : c_int = 13;\n+            pub static MADV_HWPOISON : c_int = 100;\n+\n+            pub static AF_UNIX: c_int = 1;\n+            pub static AF_INET: c_int = 2;\n+            pub static AF_INET6: c_int = 10;\n+            pub static SOCK_STREAM: c_int = 2;\n+            pub static SOCK_DGRAM: c_int = 1;\n+            pub static IPPROTO_TCP: c_int = 6;\n+            pub static IPPROTO_IP: c_int = 0;\n+            pub static IPPROTO_IPV6: c_int = 41;\n+            pub static IP_MULTICAST_TTL: c_int = 33;\n+            pub static IP_MULTICAST_LOOP: c_int = 34;\n+            pub static IP_TTL: c_int = 2;\n+            pub static IP_ADD_MEMBERSHIP: c_int = 35;\n+            pub static IP_DROP_MEMBERSHIP: c_int = 36;\n+            pub static IPV6_ADD_MEMBERSHIP: c_int = 20;\n+            pub static IPV6_DROP_MEMBERSHIP: c_int = 21;\n+\n+            pub static TCP_NODELAY: c_int = 1;\n+            pub static SOL_SOCKET: c_int = 65535;\n+            pub static SO_KEEPALIVE: c_int = 8;\n+            pub static SO_BROADCAST: c_int = 32;\n+            pub static SO_REUSEADDR: c_int = 4;\n+            pub static SO_ERROR: c_int = 4103;\n+\n+            pub static SHUT_RD: c_int = 0;\n+            pub static SHUT_WR: c_int = 1;\n+            pub static SHUT_RDWR: c_int = 2;\n+        }\n         #[cfg(target_arch = \"x86\")]\n         #[cfg(target_arch = \"x86_64\")]\n         #[cfg(target_arch = \"arm\")]"}, {"sha": "e6cb5cb76f11e8cab23897f50b5d2b23c9b11e6a", "filename": "src/libnative/io/c_unix.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Flibnative%2Fio%2Fc_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Flibnative%2Fio%2Fc_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_unix.rs?ref=0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "patch": "@@ -22,15 +22,20 @@ use libc;\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n pub static FIONBIO: libc::c_ulong = 0x8004667e;\n-#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"linux\", not(target_arch = \"mips\"))]\n #[cfg(target_os = \"android\")]\n pub static FIONBIO: libc::c_ulong = 0x5421;\n+#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n+pub static FIONBIO: libc::c_ulong = 0x667e;\n+\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n pub static FIOCLEX: libc::c_ulong = 0x20006601;\n-#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"linux\", not(target_arch = \"mips\"))]\n #[cfg(target_os = \"android\")]\n pub static FIOCLEX: libc::c_ulong = 0x5451;\n+#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n+pub static FIOCLEX: libc::c_ulong = 0x6601;\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n@@ -100,7 +105,7 @@ mod select {\n     }\n }\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"linux\", not(target_arch = \"mips\"))]\n #[cfg(target_os = \"android\")]\n mod signal {\n     use libc;\n@@ -143,6 +148,44 @@ mod signal {\n     }\n }\n \n+#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n+mod signal {\n+    use libc;\n+\n+    pub static SA_NOCLDSTOP: libc::c_ulong = 0x00000001;\n+    pub static SA_NOCLDWAIT: libc::c_ulong = 0x00010000;\n+    pub static SA_NODEFER: libc::c_ulong = 0x40000000;\n+    pub static SA_ONSTACK: libc::c_ulong = 0x08000000;\n+    pub static SA_RESETHAND: libc::c_ulong = 0x80000000;\n+    pub static SA_RESTART: libc::c_ulong = 0x10000000;\n+    pub static SA_SIGINFO: libc::c_ulong = 0x00000008;\n+    pub static SIGCHLD: libc::c_int = 18;\n+\n+    // This definition is not as accurate as it could be, {pid, uid, status} is\n+    // actually a giant union. Currently we're only interested in these fields,\n+    // however.\n+    pub struct siginfo {\n+        si_signo: libc::c_int,\n+        si_code: libc::c_int,\n+        si_errno: libc::c_int,\n+        pub pid: libc::pid_t,\n+        pub uid: libc::uid_t,\n+        pub status: libc::c_int,\n+    }\n+\n+    pub struct sigaction {\n+        pub sa_flags: libc::c_uint,\n+        pub sa_handler: extern fn(libc::c_int),\n+        pub sa_mask: sigset_t,\n+        sa_restorer: *mut libc::c_void,\n+        sa_resv: [libc::c_int, ..1],\n+    }\n+\n+    pub struct sigset_t {\n+        __val: [libc::c_ulong, ..32],\n+    }\n+}\n+\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n mod signal {"}, {"sha": "26307feae91f0f62e5a41c533a6bab31eccda3bb", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "patch": "@@ -42,11 +42,12 @@ enum InAddr {\n fn ip_to_inaddr(ip: ip::IpAddr) -> InAddr {\n     match ip {\n         ip::Ipv4Addr(a, b, c, d) => {\n+            let ip = (a as u32 << 24) |\n+                     (b as u32 << 16) |\n+                     (c as u32 <<  8) |\n+                     (d as u32 <<  0);\n             InAddr(libc::in_addr {\n-                s_addr: (d as u32 << 24) |\n-                        (c as u32 << 16) |\n-                        (b as u32 <<  8) |\n-                        (a as u32 <<  0)\n+                s_addr: mem::from_be32(ip)\n             })\n         }\n         ip::Ipv6Addr(a, b, c, d, e, f, g, h) => {\n@@ -174,11 +175,11 @@ pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n             let storage: &libc::sockaddr_in = unsafe {\n                 mem::transmute(storage)\n             };\n-            let addr = storage.sin_addr.s_addr as u32;\n-            let a = (addr >>  0) as u8;\n-            let b = (addr >>  8) as u8;\n-            let c = (addr >> 16) as u8;\n-            let d = (addr >> 24) as u8;\n+            let ip = mem::to_be32(storage.sin_addr.s_addr as u32);\n+            let a = (ip >> 24) as u8;\n+            let b = (ip >> 16) as u8;\n+            let c = (ip >>  8) as u8;\n+            let d = (ip >>  0) as u8;\n             Ok(ip::SocketAddr {\n                 ip: ip::Ipv4Addr(a, b, c, d),\n                 port: ntohs(storage.sin_port),"}, {"sha": "2f35e48b8476bc55507bf12c381e93bf369ee94c", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a092a815861cbbf3585c7edfb12f4234cfbaeb9/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=0a092a815861cbbf3585c7edfb12f4234cfbaeb9", "patch": "@@ -43,11 +43,11 @@ pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n             let storage: &libc::sockaddr_in = unsafe {\n                 mem::transmute(storage)\n             };\n-            let addr = storage.sin_addr.s_addr as u32;\n-            let a = (addr >>  0) as u8;\n-            let b = (addr >>  8) as u8;\n-            let c = (addr >> 16) as u8;\n-            let d = (addr >> 24) as u8;\n+            let ip = mem::to_be32(storage.sin_addr.s_addr as u32);\n+            let a = (ip >> 24) as u8;\n+            let b = (ip >> 16) as u8;\n+            let c = (ip >>  8) as u8;\n+            let d = (ip >>  0) as u8;\n             ip::SocketAddr {\n                 ip: ip::Ipv4Addr(a, b, c, d),\n                 port: ntohs(storage.sin_port),\n@@ -82,15 +82,16 @@ fn addr_to_sockaddr(addr: ip::SocketAddr) -> (libc::sockaddr_storage, uint) {\n         let mut storage: libc::sockaddr_storage = mem::zeroed();\n         let len = match addr.ip {\n             ip::Ipv4Addr(a, b, c, d) => {\n+                let ip = (a as u32 << 24) |\n+                         (b as u32 << 16) |\n+                         (c as u32 <<  8) |\n+                         (d as u32 <<  0);\n                 let storage: &mut libc::sockaddr_in =\n                     mem::transmute(&mut storage);\n                 (*storage).sin_family = libc::AF_INET as libc::sa_family_t;\n                 (*storage).sin_port = htons(addr.port);\n                 (*storage).sin_addr = libc::in_addr {\n-                    s_addr: (d as u32 << 24) |\n-                            (c as u32 << 16) |\n-                            (b as u32 <<  8) |\n-                            (a as u32 <<  0)\n+                    s_addr: mem::from_be32(ip)\n                 };\n                 mem::size_of::<libc::sockaddr_in>()\n             }"}]}