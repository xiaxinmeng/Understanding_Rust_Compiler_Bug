{"sha": "c008f0540e786b54e799ffed372adb4648d07e87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDhmMDU0MGU3ODZiNTRlNzk5ZmZlZDM3MmFkYjQ2NDhkMDdlODc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T00:11:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T00:11:36Z"}, "message": "patch the `librustc_driver` unit tests", "tree": {"sha": "d8d44ab5be60bf2623b96adefe8e142f263fd54a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d44ab5be60bf2623b96adefe8e142f263fd54a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c008f0540e786b54e799ffed372adb4648d07e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c008f0540e786b54e799ffed372adb4648d07e87", "html_url": "https://github.com/rust-lang/rust/commit/c008f0540e786b54e799ffed372adb4648d07e87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c008f0540e786b54e799ffed372adb4648d07e87/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b393d6436065ecba0ffb366e1ae67def664b7f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/b393d6436065ecba0ffb366e1ae67def664b7f26", "html_url": "https://github.com/rust-lang/rust/commit/b393d6436065ecba0ffb366e1ae67def664b7f26"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "d1d5e9d6cb18f78b52fea08b19b6a6dbc17afda8", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c008f0540e786b54e799ffed372adb4648d07e87/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c008f0540e786b54e799ffed372adb4648d07e87/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=c008f0540e786b54e799ffed372adb4648d07e87", "patch": "@@ -319,11 +319,28 @@ impl<'tcx> RegionMaps<'tcx> {\n         }\n     }\n \n+    pub fn record_code_extent(&mut self,\n+                              child: CodeExtent<'tcx>,\n+                              parent: Option<CodeExtent<'tcx>>) {\n+        debug!(\"{:?}.parent = {:?}\", child, parent);\n+\n+        if let Some(p) = parent {\n+            let prev = self.scope_map.insert(child, p);\n+            assert!(prev.is_none());\n+        }\n+\n+        // record the destruction scopes for later so we can query them\n+        if let &CodeExtentData::DestructionScope(n) = child {\n+            self.destruction_scopes.insert(n, child);\n+        }\n+    }\n+\n     pub fn each_encl_scope<E>(&self, mut e:E) where E: FnMut(CodeExtent<'tcx>, CodeExtent<'tcx>) {\n         for (&child, &parent) in &self.scope_map {\n             e(child, parent)\n         }\n     }\n+\n     pub fn each_var_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, CodeExtent<'tcx>) {\n         for (child, parent) in self.var_map.iter() {\n             e(child, parent)\n@@ -1098,17 +1115,7 @@ impl<'a, 'tcx> RegionResolutionVisitor<'a, 'tcx> {\n                               parent: Option<CodeExtent<'tcx>>)\n                               -> CodeExtent<'tcx> {\n         let code_extent = self.tcx.intern_code_extent(data);\n-        debug!(\"{:?}.parent = {:?}\", code_extent, parent);\n-        if let Some(p) = parent {\n-            let prev = self.region_maps.scope_map.insert(code_extent, p);\n-            assert!(prev.is_none());\n-        }\n-\n-        // record the destruction scopes for later so we can query them\n-        if let &CodeExtentData::DestructionScope(n) = code_extent {\n-            self.region_maps.destruction_scopes.insert(n, code_extent);\n-        }\n-\n+        self.region_maps.record_code_extent(code_extent, parent);\n         code_extent\n     }\n "}, {"sha": "ced30fd64085c09d190e8ebd5f96837c60de3157", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c008f0540e786b54e799ffed372adb4648d07e87/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c008f0540e786b54e799ffed372adb4648d07e87/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=c008f0540e786b54e799ffed372adb4648d07e87", "patch": "@@ -16,7 +16,7 @@ use rustc_lint;\n use rustc_resolve::MakeGlobMap;\n use rustc::middle::lang_items;\n use rustc::middle::free_region::FreeRegionMap;\n-use rustc::middle::region::{self, CodeExtent};\n+use rustc::middle::region::{CodeExtent, RegionMaps};\n use rustc::middle::region::CodeExtentData;\n use rustc::middle::resolve_lifetime;\n use rustc::middle::stability;\n@@ -44,6 +44,7 @@ use rustc::hir;\n \n struct Env<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a infer::InferCtxt<'a, 'gcx, 'tcx>,\n+    region_maps: &'a mut RegionMaps<'tcx>,\n }\n \n struct RH<'a> {\n@@ -136,7 +137,6 @@ fn test_env<F>(source_string: &str,\n     // run just enough stuff to build a tcx:\n     let lang_items = lang_items::collect_language_items(&sess, &hir_map);\n     let named_region_map = resolve_lifetime::krate(&sess, &hir_map);\n-    let region_map = region::resolve_crate(&sess, &hir_map);\n     let index = stability::Index::new(&hir_map);\n     TyCtxt::create_and_enter(&sess,\n                              ty::maps::Providers::default(),\n@@ -146,17 +146,16 @@ fn test_env<F>(source_string: &str,\n                              resolutions,\n                              named_region_map.unwrap(),\n                              hir_map,\n-                             region_map,\n                              lang_items,\n                              index,\n                              \"test_crate\",\n                              |tcx| {\n         tcx.infer_ctxt((), Reveal::UserFacing).enter(|infcx| {\n-\n-            body(Env { infcx: &infcx });\n+            let mut region_maps = RegionMaps::new();\n+            body(Env { infcx: &infcx, region_maps: &mut region_maps });\n             let free_regions = FreeRegionMap::new();\n-            let def_id = tcx.hir.map.local_def_id(ast::CRATE_NODE_ID);\n-            infcx.resolve_regions_and_report_errors(def_id, &region_map, &free_regions);\n+            let def_id = tcx.hir.local_def_id(ast::CRATE_NODE_ID);\n+            infcx.resolve_regions_and_report_errors(def_id, &region_maps, &free_regions);\n             assert_eq!(tcx.sess.err_count(), expected_err_count);\n         });\n     });\n@@ -167,23 +166,21 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn create_region_hierarchy(&self, rh: &RH, parent: CodeExtent) {\n-        let me = self.infcx.tcx.region_maps.intern_node(rh.id, parent);\n+    pub fn create_region_hierarchy(&mut self, rh: &RH, parent: CodeExtent<'tcx>) {\n+        let me = self.tcx().intern_code_extent(CodeExtentData::Misc(rh.id));\n+        self.region_maps.record_code_extent(me, Some(parent));\n         for child_rh in rh.sub {\n             self.create_region_hierarchy(child_rh, me);\n         }\n     }\n \n-    pub fn create_simple_region_hierarchy(&self) {\n+    pub fn create_simple_region_hierarchy(&mut self) {\n         // creates a region hierarchy where 1 is root, 10 and 11 are\n         // children of 1, etc\n \n         let node = ast::NodeId::from_u32;\n-        let dscope = self.infcx\n-            .tcx\n-            .region_maps\n-            .intern_code_extent(CodeExtentData::DestructionScope(node(1)),\n-                                region::ROOT_CODE_EXTENT);\n+        let dscope = self.tcx().intern_code_extent(CodeExtentData::DestructionScope(node(1)));\n+        self.region_maps.record_code_extent(dscope, None);\n         self.create_region_hierarchy(&RH {\n                                          id: node(1),\n                                          sub: &[RH {\n@@ -327,13 +324,13 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_rptr_scope(&self, id: u32) -> Ty<'tcx> {\n-        let r = ty::ReScope(self.tcx().region_maps.node_extent(ast::NodeId::from_u32(id)));\n+        let r = ty::ReScope(self.tcx().node_extent(ast::NodeId::from_u32(id)));\n         self.infcx.tcx.mk_imm_ref(self.infcx.tcx.mk_region(r), self.tcx().types.isize)\n     }\n \n     pub fn re_free(&self, nid: ast::NodeId, id: u32) -> ty::Region<'tcx> {\n         self.infcx.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-            scope: self.tcx().region_maps.item_extent(nid),\n+            scope: Some(self.tcx().node_extent(nid)),\n             bound_region: ty::BrAnon(id),\n         }))\n     }\n@@ -431,7 +428,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n \n #[test]\n fn contravariant_region_ptr_ok() {\n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr1 = env.t_rptr_scope(1);\n         let t_rptr10 = env.t_rptr_scope(10);\n@@ -443,7 +440,7 @@ fn contravariant_region_ptr_ok() {\n \n #[test]\n fn contravariant_region_ptr_err() {\n-    test_env(EMPTY_SOURCE_STR, errors(&[\"mismatched types\"]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[\"mismatched types\"]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr1 = env.t_rptr_scope(1);\n         let t_rptr10 = env.t_rptr_scope(10);\n@@ -463,7 +460,7 @@ fn sub_free_bound_false() {\n     //!\n     //! does NOT hold.\n \n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr_free1 = env.t_rptr_free(1, 1);\n         let t_rptr_bound1 = env.t_rptr_late_bound(1);\n@@ -480,7 +477,7 @@ fn sub_bound_free_true() {\n     //!\n     //! DOES hold.\n \n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr_bound1 = env.t_rptr_late_bound(1);\n         let t_rptr_free1 = env.t_rptr_free(1, 1);\n@@ -515,7 +512,7 @@ fn lub_free_bound_infer() {\n     //! that it yields `fn(&'x isize)` for some free `'x`,\n     //! anyhow.\n \n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_infer1 = env.infcx.next_ty_var(TypeVariableOrigin::MiscVariable(DUMMY_SP));\n         let t_rptr_bound1 = env.t_rptr_late_bound(1);\n@@ -539,7 +536,7 @@ fn lub_bound_bound() {\n \n #[test]\n fn lub_bound_free() {\n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr_bound1 = env.t_rptr_late_bound(1);\n         let t_rptr_free1 = env.t_rptr_free(1, 1);\n@@ -573,7 +570,7 @@ fn lub_bound_bound_inverse_order() {\n \n #[test]\n fn lub_free_free() {\n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr_free1 = env.t_rptr_free(1, 1);\n         let t_rptr_free2 = env.t_rptr_free(1, 2);\n@@ -586,7 +583,7 @@ fn lub_free_free() {\n \n #[test]\n fn lub_returning_scope() {\n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr_scope10 = env.t_rptr_scope(10);\n         let t_rptr_scope11 = env.t_rptr_scope(11);\n@@ -599,7 +596,7 @@ fn lub_returning_scope() {\n \n #[test]\n fn glb_free_free_with_common_scope() {\n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr_free1 = env.t_rptr_free(1, 1);\n         let t_rptr_free2 = env.t_rptr_free(1, 2);\n@@ -623,7 +620,7 @@ fn glb_bound_bound() {\n \n #[test]\n fn glb_bound_free() {\n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         env.create_simple_region_hierarchy();\n         let t_rptr_bound1 = env.t_rptr_late_bound(1);\n         let t_rptr_free1 = env.t_rptr_free(1, 1);\n@@ -745,7 +742,7 @@ fn subst_ty_renumber_some_bounds() {\n #[test]\n fn escaping() {\n \n-    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |mut env| {\n         // Situation:\n         // Theta = [A -> &'a foo]\n         env.create_simple_region_hierarchy();"}]}