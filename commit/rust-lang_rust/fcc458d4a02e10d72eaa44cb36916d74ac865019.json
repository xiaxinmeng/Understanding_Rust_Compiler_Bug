{"sha": "fcc458d4a02e10d72eaa44cb36916d74ac865019", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzQ1OGQ0YTAyZTEwZDcyZWFhNDRjYjM2OTE2ZDc0YWM4NjUwMTk=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-03T00:16:01Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-03T18:06:58Z"}, "message": "Fix typechecking when spawning something type inferred.\n\nOf course, we still don't *translate* it.\n\nCloses #757.", "tree": {"sha": "535d1145a94f742758781b3d235ea4c122da45ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535d1145a94f742758781b3d235ea4c122da45ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc458d4a02e10d72eaa44cb36916d74ac865019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc458d4a02e10d72eaa44cb36916d74ac865019", "html_url": "https://github.com/rust-lang/rust/commit/fcc458d4a02e10d72eaa44cb36916d74ac865019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc458d4a02e10d72eaa44cb36916d74ac865019/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "228422303fbaf41b7bae23e52c0b80d0d4ddf3be", "url": "https://api.github.com/repos/rust-lang/rust/commits/228422303fbaf41b7bae23e52c0b80d0d4ddf3be", "html_url": "https://github.com/rust-lang/rust/commit/228422303fbaf41b7bae23e52c0b80d0d4ddf3be"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "a1f48c4d9317096b45659dd06e2981419bc4ca83", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcc458d4a02e10d72eaa44cb36916d74ac865019/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc458d4a02e10d72eaa44cb36916d74ac865019/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=fcc458d4a02e10d72eaa44cb36916d74ac865019", "patch": "@@ -2062,8 +2062,7 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n                 ty::mk_fn(fcx.ccx.tcx, proto_1, arg_tys_1, rt_1, cf, constrs);\n           }\n           _ {\n-            log_err \"LHS of bind expr didn't have a function type?!\";\n-            fail;\n+            fail \"LHS of bind expr didn't have a function type?!\";\n           }\n         }\n         write::ty_only_fixup(fcx, id, t_1);\n@@ -2087,8 +2086,7 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n           }\n           ty::ty_native_fn(_, _, rt) { rt_1 = rt; }\n           _ {\n-            log_err \"LHS of call expr didn't have a function type?!\";\n-            fail;\n+            fail \"LHS of call expr didn't have a function type?!\";\n           }\n         }\n         write::ty_only_fixup(fcx, id, rt_1);\n@@ -2114,7 +2112,7 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n                   }\n                   none. {\n                     fcx.ccx.tcx.sess.bug(\"didn't find \" + int::str(did.node) +\n-                                             \" in type cache\");\n+                                         \" in type cache\");\n                   }\n                 }\n               }\n@@ -2124,8 +2122,7 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n           none. {\n             // Shouldn't happen.\n             fcx.ccx.tcx.sess.span_err(expr.span,\n-                                      \"self-call in non-object \\\n-                                               context\");\n+                                      \"self-call in non-object context\");\n           }\n         }\n \n@@ -2151,7 +2148,12 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n       ast::expr_spawn(_, _, f, args) {\n         bot = check_call(fcx, expr.span, f, args, kind_spawn);\n         let fty = expr_ty(fcx.ccx.tcx, f);\n-        let ret_ty = ty::ret_ty_of_fn_ty(fcx.ccx.tcx, fty);\n+        let ret_ty = alt structure_of(fcx, expr.span, fty) {\n+          ty::ty_fn(_, _, rt, _, _) { rt }\n+          ty::ty_native_fn(_, _, rt) { rt }\n+          _ { fail \"LHS of spawn expr didn't have a function type?!\" }\n+        };\n+\n         demand::simple(fcx, f.span, ty::mk_nil(fcx.ccx.tcx), ret_ty);\n \n         // make sure they aren't spawning a function with type params"}]}