{"sha": "75b4b1b027ec5c5b72d496b7a10da418d5308c01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YjRiMWIwMjdlYzVjNWI3MmQ0OTZiN2ExMGRhNDE4ZDUzMDhjMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-20T23:58:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-20T23:58:30Z"}, "message": "auto merge of #7882 : blake2-ppc/rust/iterator-clone, r=thestinger\n\nImplement method .cycle() that repeats an iterator endlessly\r\n\r\nImplement Clone for simple iterators (without closures), including VecIterator.\r\n\r\n> The theory is simple, the immutable iterators simply hold state\r\n> variables (indicies or pointers) into frozen containers. We can freely\r\n> clone these iterators, just like we can clone borrowed pointers.", "tree": {"sha": "ddfc2e765cb0ca29eea8fb60196e7bff10fbb7c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddfc2e765cb0ca29eea8fb60196e7bff10fbb7c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b4b1b027ec5c5b72d496b7a10da418d5308c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b4b1b027ec5c5b72d496b7a10da418d5308c01", "html_url": "https://github.com/rust-lang/rust/commit/75b4b1b027ec5c5b72d496b7a10da418d5308c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b4b1b027ec5c5b72d496b7a10da418d5308c01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8ca1f52cfa59e0040c2c749a1c46048fc6d48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8ca1f52cfa59e0040c2c749a1c46048fc6d48d", "html_url": "https://github.com/rust-lang/rust/commit/bb8ca1f52cfa59e0040c2c749a1c46048fc6d48d"}, {"sha": "fe134b9509821e5e2fad5545cdd23c5325dfd583", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe134b9509821e5e2fad5545cdd23c5325dfd583", "html_url": "https://github.com/rust-lang/rust/commit/fe134b9509821e5e2fad5545cdd23c5325dfd583"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "fe05b48988eff956d261ecc32f554924745a77af", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=75b4b1b027ec5c5b72d496b7a10da418d5308c01", "patch": "@@ -47,6 +47,7 @@ struct Node<T> {\n }\n \n /// Double-ended DList iterator\n+#[deriving(Clone)]\n pub struct DListIterator<'self, T> {\n     priv head: &'self Link<T>,\n     priv tail: Rawlink<Node<T>>,\n@@ -62,6 +63,7 @@ pub struct MutDListIterator<'self, T> {\n }\n \n /// DList consuming iterator\n+#[deriving(Clone)]\n pub struct ConsumeIterator<T> {\n     priv list: DList<T>\n }\n@@ -93,6 +95,13 @@ impl<T> Rawlink<T> {\n     }\n }\n \n+impl<T> Clone for Rawlink<T> {\n+    #[inline]\n+    fn clone(&self) -> Rawlink<T> {\n+        Rawlink{p: self.p}\n+    }\n+}\n+\n /// Set the .prev field on `next`, then return `Some(next)`\n fn link_with_prev<T>(mut next: ~Node<T>, prev: Rawlink<Node<T>>) -> Link<T> {\n     next.prev = prev;\n@@ -686,6 +695,20 @@ mod tests {\n         assert_eq!(it.next(), None);\n     }\n \n+    #[test]\n+    fn test_iterator_clone() {\n+        let mut n = DList::new();\n+        n.push_back(2);\n+        n.push_back(3);\n+        n.push_back(4);\n+        let mut it = n.iter();\n+        it.next();\n+        let mut jt = it.clone();\n+        assert_eq!(it.next(), jt.next());\n+        assert_eq!(it.next_back(), jt.next_back());\n+        assert_eq!(it.next(), jt.next());\n+    }\n+\n     #[test]\n     fn test_iterator_double_end() {\n         let mut n = DList::new();"}, {"sha": "56774560d1d113b6d607c14fea18e0f6ba56f443", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=75b4b1b027ec5c5b72d496b7a10da418d5308c01", "patch": "@@ -548,6 +548,7 @@ impl<K:Hash + Eq + Clone,V:Clone> Clone for HashMap<K,V> {\n }\n \n /// HashMap iterator\n+#[deriving(Clone)]\n pub struct HashMapIterator<'self, K, V> {\n     priv iter: vec::VecIterator<'self, Option<Bucket<K, V>>>,\n }\n@@ -563,6 +564,7 @@ pub struct HashMapConsumeIterator<K, V> {\n }\n \n /// HashSet iterator\n+#[deriving(Clone)]\n pub struct HashSetIterator<'self, K> {\n     priv iter: vec::VecIterator<'self, Option<Bucket<K, ()>>>,\n }"}, {"sha": "198e63f83c60ce6eb103b28424f9bf9553718f16", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=75b4b1b027ec5c5b72d496b7a10da418d5308c01", "patch": "@@ -74,6 +74,7 @@ impl<A, T: DoubleEndedIterator<A>> DoubleEndedIteratorUtil<A> for T {\n \n /// An double-ended iterator with the direction inverted\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct InvertIterator<A, T> {\n     priv iter: T\n }\n@@ -729,8 +730,59 @@ impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n     }\n }\n \n+/// A trait for iterators that are clonable.\n+// FIXME #6967: Dummy A parameter to get around type inference bug\n+pub trait ClonableIterator<A> {\n+    /// Repeats an iterator endlessly\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    /// let a = Counter::new(1,1).take_(1);\n+    /// let mut cy = a.cycle();\n+    /// assert_eq!(cy.next(), Some(1));\n+    /// assert_eq!(cy.next(), Some(1));\n+    /// ~~~\n+    fn cycle(self) -> CycleIterator<A, Self>;\n+}\n+\n+impl<A, T: Clone + Iterator<A>> ClonableIterator<A> for T {\n+    #[inline]\n+    fn cycle(self) -> CycleIterator<A, T> {\n+        CycleIterator{orig: self.clone(), iter: self}\n+    }\n+}\n+\n+/// An iterator that repeats endlessly\n+#[deriving(Clone)]\n+pub struct CycleIterator<A, T> {\n+    priv orig: T,\n+    priv iter: T,\n+}\n+\n+impl<A, T: Clone + Iterator<A>> Iterator<A> for CycleIterator<A, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        match self.iter.next() {\n+            None => { self.iter = self.orig.clone(); self.iter.next() }\n+            y => y\n+        }\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        // the cycle iterator is either empty or infinite\n+        match self.orig.size_hint() {\n+            sz @ (0, Some(0)) => sz,\n+            (0, _) => (0, None),\n+            _ => (uint::max_value, None)\n+        }\n+    }\n+}\n+\n /// An iterator which strings two iterators together\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct ChainIterator<A, T, U> {\n     priv a: T,\n     priv b: U,\n@@ -786,6 +838,7 @@ for ChainIterator<A, T, U> {\n \n /// An iterator which iterates two other iterators simultaneously\n // FIXME #6967: Dummy A & B parameters to get around type inference bug\n+#[deriving(Clone)]\n pub struct ZipIterator<A, T, B, U> {\n     priv a: T,\n     priv b: U\n@@ -939,6 +992,7 @@ for FilterMapIterator<'self, A, B, T> {\n \n /// An iterator which yields the current count and the element during iteration\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct EnumerateIterator<A, T> {\n     priv iter: T,\n     priv count: uint\n@@ -1037,6 +1091,7 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n \n /// An iterator which skips over `n` elements of `iter`.\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct SkipIterator<A, T> {\n     priv iter: T,\n     priv n: uint\n@@ -1085,6 +1140,7 @@ impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<A, T> {\n \n /// An iterator which only iterates over the first `n` iterations of `iter`.\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct TakeIterator<A, T> {\n     priv iter: T,\n     priv n: uint\n@@ -1236,6 +1292,7 @@ impl<'self, A, St> Iterator<A> for UnfoldrIterator<'self, A, St> {\n \n /// An infinite iterator starting at `start` and advancing by `step` with each\n /// iteration\n+#[deriving(Clone)]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n     state: A,\n@@ -1437,6 +1494,20 @@ mod tests {\n         assert_eq!(i, 10);\n     }\n \n+    #[test]\n+    fn test_cycle() {\n+        let cycle_len = 3;\n+        let it = Counter::new(0u,1).take_(cycle_len).cycle();\n+        assert_eq!(it.size_hint(), (uint::max_value, None));\n+        for it.take_(100).enumerate().advance |(i, x)| {\n+            assert_eq!(i % cycle_len, x);\n+        }\n+\n+        let mut it = Counter::new(0u,1).take_(0).cycle();\n+        assert_eq!(it.size_hint(), (0, Some(0)));\n+        assert_eq!(it.next(), None);\n+    }\n+\n     #[test]\n     fn test_iterator_nth() {\n         let v = &[0, 1, 2, 3, 4];"}, {"sha": "c74c1e18e6d2ee1bfd548494a8421f37c06adfee", "filename": "src/libstd/str.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=75b4b1b027ec5c5b72d496b7a10da418d5308c01", "patch": "@@ -288,6 +288,7 @@ impl<'self, C: CharEq> CharEq for &'self [C] {\n \n \n /// An iterator over the substrings of a string, separated by `sep`.\n+#[deriving(Clone)]\n pub struct StrCharSplitIterator<'self,Sep> {\n     priv string: &'self str,\n     priv position: uint,\n@@ -355,6 +356,7 @@ impl<'self, Sep: CharEq> Iterator<&'self str> for StrCharSplitIterator<'self, Se\n \n /// An iterator over the start and end indicies of the matches of a\n /// substring within a larger string\n+#[deriving(Clone)]\n pub struct StrMatchesIndexIterator<'self> {\n     priv haystack: &'self str,\n     priv needle: &'self str,\n@@ -363,6 +365,7 @@ pub struct StrMatchesIndexIterator<'self> {\n \n /// An iterator over the substrings of a string separated by a given\n /// search string\n+#[deriving(Clone)]\n pub struct StrStrSplitIterator<'self> {\n     priv it: StrMatchesIndexIterator<'self>,\n     priv last_end: uint,\n@@ -2269,6 +2272,7 @@ impl Clone for @str {\n \n /// External iterator for a string's characters. Use with the `std::iterator`\n /// module.\n+#[deriving(Clone)]\n pub struct StrCharIterator<'self> {\n     priv index: uint,\n     priv string: &'self str,\n@@ -2288,6 +2292,7 @@ impl<'self> Iterator<char> for StrCharIterator<'self> {\n }\n /// External iterator for a string's characters in reverse order. Use\n /// with the `std::iterator` module.\n+#[deriving(Clone)]\n pub struct StrCharRevIterator<'self> {\n     priv index: uint,\n     priv string: &'self str,\n@@ -2308,6 +2313,7 @@ impl<'self> Iterator<char> for StrCharRevIterator<'self> {\n \n /// External iterator for a string's bytes. Use with the `std::iterator`\n /// module.\n+#[deriving(Clone)]\n pub struct StrBytesIterator<'self> {\n     priv it: vec::VecIterator<'self, u8>\n }\n@@ -2321,6 +2327,7 @@ impl<'self> Iterator<u8> for StrBytesIterator<'self> {\n \n /// External iterator for a string's bytes in reverse order. Use with\n /// the `std::iterator` module.\n+#[deriving(Clone)]\n pub struct StrBytesRevIterator<'self> {\n     priv it: vec::VecRevIterator<'self, u8>\n }"}, {"sha": "877ee65b4d67f88f893b7768728a75b91eb564a9", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b4b1b027ec5c5b72d496b7a10da418d5308c01/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=75b4b1b027ec5c5b72d496b7a10da418d5308c01", "patch": "@@ -2232,6 +2232,10 @@ iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n pub type VecRevIterator<'self, T> = InvertIterator<&'self T, VecIterator<'self, T>>;\n \n+impl<'self, T> Clone for VecIterator<'self, T> {\n+    fn clone(&self) -> VecIterator<'self, T> { *self }\n+}\n+\n //iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n /// An iterator for mutating the elements of a vector.\n pub struct VecMutIterator<'self, T> {\n@@ -2244,6 +2248,7 @@ double_ended_iterator!{impl VecMutIterator -> &'self mut T}\n pub type VecMutRevIterator<'self, T> = InvertIterator<&'self mut T, VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector.\n+#[deriving(Clone)]\n pub struct VecConsumeIterator<T> {\n     priv v: ~[T],\n     priv idx: uint,\n@@ -2270,6 +2275,7 @@ impl<T> Iterator<T> for VecConsumeIterator<T> {\n }\n \n /// An iterator that moves out of a vector in reverse order.\n+#[deriving(Clone)]\n pub struct VecConsumeRevIterator<T> {\n     priv v: ~[T]\n }\n@@ -3185,6 +3191,17 @@ mod tests {\n         assert_eq!(xs.mut_rev_iter().size_hint(), (5, Some(5)));\n     }\n \n+    #[test]\n+    fn test_iter_clone() {\n+        let xs = [1, 2, 5];\n+        let mut it = xs.iter();\n+        it.next();\n+        let mut jt = it.clone();\n+        assert_eq!(it.next(), jt.next());\n+        assert_eq!(it.next(), jt.next());\n+        assert_eq!(it.next(), jt.next());\n+    }\n+\n     #[test]\n     fn test_mut_iterator() {\n         use iterator::*;"}]}