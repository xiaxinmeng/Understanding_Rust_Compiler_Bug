{"sha": "b9abe028c9d1df5df5871f431319bd60c34e7253", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YWJlMDI4YzlkMWRmNWRmNTg3MWY0MzEzMTliZDYwYzM0ZTcyNTM=", "commit": {"author": {"name": "Darren Tsung", "email": "darrentsung@Darrens-MacBook-Pro.local", "date": "2017-12-22T18:54:52Z"}, "committer": {"name": "Darren Tsung", "email": "darrentsung@Darrens-MacBook-Pro.local", "date": "2017-12-22T18:54:52Z"}, "message": "Move in_macro check to end of expression since usual case is not inside macro", "tree": {"sha": "12bb47793fa66b16b4b23f47dc8b261691ada41e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12bb47793fa66b16b4b23f47dc8b261691ada41e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9abe028c9d1df5df5871f431319bd60c34e7253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9abe028c9d1df5df5871f431319bd60c34e7253", "html_url": "https://github.com/rust-lang/rust/commit/b9abe028c9d1df5df5871f431319bd60c34e7253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9abe028c9d1df5df5871f431319bd60c34e7253/comments", "author": null, "committer": null, "parents": [{"sha": "1f36aa519ee7ede53b8d788257ecb25174539942", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f36aa519ee7ede53b8d788257ecb25174539942", "html_url": "https://github.com/rust-lang/rust/commit/1f36aa519ee7ede53b8d788257ecb25174539942"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "d62b937f52ffa7aad4aebad599e8362b56cb2dff", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9abe028c9d1df5df5871f431319bd60c34e7253/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9abe028c9d1df5df5871f431319bd60c34e7253/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=b9abe028c9d1df5df5871f431319bd60c34e7253", "patch": "@@ -53,7 +53,7 @@ impl LintPass for EqOp {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprBinary(ref op, ref left, ref right) = e.node {\n-            if !in_macro(e.span) && is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) {\n+            if is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) && !in_macro(e.span) {\n                 span_lint(\n                     cx,\n                     EQ_OP,"}]}