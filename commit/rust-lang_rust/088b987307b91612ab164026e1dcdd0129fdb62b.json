{"sha": "088b987307b91612ab164026e1dcdd0129fdb62b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OGI5ODczMDdiOTE2MTJhYjE2NDAyNmUxZGNkZDAxMjlmZGI2MmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-03T14:29:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-03T14:29:08Z"}, "message": "Auto merge of #62335 - Mark-Simulacrum:rollup-0pcaz5a, r=Mark-Simulacrum\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #62021 (MSVC link output improve)\n - #62064 (nth_back for chunks_exact)\n - #62128 (Adjust warning of -C extra-filename with -o.)\n - #62161 (Add missing links for TryFrom docs)\n - #62183 (std: Move a process test out of libstd)\n - #62186 (Add missing type urls in Into trait)\n - #62196 (Add Vec::leak)\n - #62199 (import gdb for explicit access to gdb.current_objfile())\n - #62229 (Enable intptrcast for explicit casts)\n - #62250 (Improve box clone doctests to ensure the documentation is valid)\n - #62255 (Switch tracking issue for `#![feature(slice_patterns)]`)\n - #62285 (Fix michaelwoerister's mailmap)\n - #62304 (HashMap is UnwindSafe)\n - #62319 (Fix mismatching Kleene operators)\n - #62327 (Fixed document bug, those replaced each other)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "97b1588ef2d660b57f122efb8c41a6289879672d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b1588ef2d660b57f122efb8c41a6289879672d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/088b987307b91612ab164026e1dcdd0129fdb62b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/088b987307b91612ab164026e1dcdd0129fdb62b", "html_url": "https://github.com/rust-lang/rust/commit/088b987307b91612ab164026e1dcdd0129fdb62b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/088b987307b91612ab164026e1dcdd0129fdb62b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45", "html_url": "https://github.com/rust-lang/rust/commit/8c6fb028ca887dff9ec2fe0a90398b6d5bf5fb45"}, {"sha": "6b43b50f0bf0821be84e7851b2e56b1c562a1b06", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b43b50f0bf0821be84e7851b2e56b1c562a1b06", "html_url": "https://github.com/rust-lang/rust/commit/6b43b50f0bf0821be84e7851b2e56b1c562a1b06"}], "stats": {"total": 281, "additions": 197, "deletions": 84}, "files": [{"sha": "c5ecfb54fca52df808b9a523857b47fb93bb2f64", "filename": ".mailmap", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -167,6 +167,8 @@ Matthijs Hofstra <thiezz@gmail.com>\n Melody Horn <melody@boringcactus.com> <mathphreak@gmail.com>\n Michael Williams <m.t.williams@live.com>\n Michael Woerister <michaelwoerister@posteo> <michaelwoerister@gmail>\n+Michael Woerister <michaelwoerister@posteo> <michaelwoerister@users.noreply.github.com>\n+Michael Woerister <michaelwoerister@posteo> <michaelwoerister@posteo.net>\n Micka\u00ebl Raybaud-Roig <raybaudroigm@gmail.com> m-r-r <raybaudroigm@gmail.com>\n Ms2ger <ms2ger@gmail.com> <Ms2ger@gmail.com>\n Mukilan Thiagarajan <mukilanthiagarajan@gmail.com>"}, {"sha": "00c81f03ba17394be62146924357395aa5a0d194", "filename": "src/doc/unstable-book/src/language-features/slice-patterns.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -1,8 +1,8 @@\n # `slice_patterns`\n \n-The tracking issue for this feature is: [#23121]\n+The tracking issue for this feature is: [#62254]\n \n-[#23121]: https://github.com/rust-lang/rust/issues/23121\n+[#62254]: https://github.com/rust-lang/rust/issues/62254\n \n ------------------------\n "}, {"sha": "fe38c49d2707dcdf9061e2d8fff362c06e62fb3d", "filename": "src/etc/gdb_load_rust_pretty_printers.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Fetc%2Fgdb_load_rust_pretty_printers.py", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Fetc%2Fgdb_load_rust_pretty_printers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_load_rust_pretty_printers.py?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -1,2 +1,3 @@\n+import gdb\n import gdb_rust_pretty_printing\n gdb_rust_pretty_printing.register_printers(gdb.current_objfile())"}, {"sha": "19b0f82db4335b69b9c98501e9361c839bdb6496", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -367,23 +367,35 @@ impl<T: Clone> Clone for Box<T> {\n     /// ```\n     /// let x = Box::new(5);\n     /// let y = x.clone();\n+    ///\n+    /// // The value is the same\n+    /// assert_eq!(x, y);\n+    ///\n+    /// // But they are unique objects\n+    /// assert_ne!(&*x as *const i32, &*y as *const i32);\n     /// ```\n     #[rustfmt::skip]\n     #[inline]\n     fn clone(&self) -> Box<T> {\n         box { (**self).clone() }\n     }\n+\n     /// Copies `source`'s contents into `self` without creating a new allocation.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// let x = Box::new(5);\n     /// let mut y = Box::new(10);\n+    /// let yp: *const i32 = &*y;\n     ///\n     /// y.clone_from(&x);\n     ///\n-    /// assert_eq!(*y, 5);\n+    /// // The value is the same\n+    /// assert_eq!(x, y);\n+    ///\n+    /// // And no allocation occurred\n+    /// assert_eq!(yp, &*y);\n     /// ```\n     #[inline]\n     fn clone_from(&mut self, source: &Box<T>) {"}, {"sha": "c0544d7469ca76e0f572275e4e6a8e6cb99bbd71", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -1367,6 +1367,40 @@ impl<T> Vec<T> {\n             self.truncate(new_len);\n         }\n     }\n+\n+    /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n+    /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n+    /// `'a`. If the type has only static references, or none at all, then this\n+    /// may be chosen to be `'static`.\n+    ///\n+    /// This function is similar to the `leak` function on `Box`.\n+    ///\n+    /// This function is mainly useful for data that lives for the remainder of\n+    /// the program's life. Dropping the returned reference will cause a memory\n+    /// leak.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Simple usage:\n+    ///\n+    /// ```\n+    /// #![feature(vec_leak)]\n+    ///\n+    /// fn main() {\n+    ///     let x = vec![1, 2, 3];\n+    ///     let static_ref: &'static mut [usize] = Vec::leak(x);\n+    ///     static_ref[0] += 1;\n+    ///     assert_eq!(static_ref, &[2, 2, 3]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"vec_leak\", issue = \"62195\")]\n+    #[inline]\n+    pub fn leak<'a>(vec: Vec<T>) -> &'a mut [T]\n+    where\n+        T: 'a // Technically not needed, but kept to be explicit.\n+    {\n+        Box::leak(vec.into_boxed_slice())\n+    }\n }\n \n impl<T: Clone> Vec<T> {"}, {"sha": "c0de8e2ceb3f38b33802d52d0e1dbf87851e1a7b", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -251,12 +251,12 @@ pub trait AsMut<T: ?Sized> {\n ///\n /// # Examples\n ///\n-/// [`String`] implements `Into<Vec<u8>>`:\n+/// [`String`] implements [`Into`]`<`[`Vec`]`<`[`u8`]`>>`:\n ///\n /// In order to express that we want a generic function to take all arguments that can be\n /// converted to a specified type `T`, we can use a trait bound of [`Into`]`<T>`.\n /// For example: The function `is_hello` takes all arguments that can be converted into a\n-/// `Vec<u8>`.\n+/// [`Vec`]`<`[`u8`]`>`.\n ///\n /// ```\n /// fn is_hello<T: Into<Vec<u8>>>(s: T) {\n@@ -274,6 +274,7 @@ pub trait AsMut<T: ?Sized> {\n /// [`String`]: ../../std/string/struct.String.html\n /// [`From`]: trait.From.html\n /// [`Into`]: trait.Into.html\n+/// [`Vec`]: ../../std/vec/struct.Vec.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n@@ -410,12 +411,12 @@ pub trait TryInto<T>: Sized {\n ///\n /// This is useful when you are doing a type conversion that may\n /// trivially succeed but may also need special handling.\n-/// For example, there is no way to convert an `i64` into an `i32`\n-/// using the [`From`] trait, because an `i64` may contain a value\n-/// that an `i32` cannot represent and so the conversion would lose data.\n-/// This might be handled by truncating the `i64` to an `i32` (essentially\n-/// giving the `i64`'s value modulo `i32::MAX`) or by simply returning\n-/// `i32::MAX`, or by some other method.  The `From` trait is intended\n+/// For example, there is no way to convert an [`i64`] into an [`i32`]\n+/// using the [`From`] trait, because an [`i64`] may contain a value\n+/// that an [`i32`] cannot represent and so the conversion would lose data.\n+/// This might be handled by truncating the [`i64`] to an [`i32`] (essentially\n+/// giving the [`i64`]'s value modulo [`i32::MAX`]) or by simply returning\n+/// [`i32::MAX`], or by some other method.  The [`From`] trait is intended\n /// for perfect conversions, so the `TryFrom` trait informs the\n /// programmer when a type conversion could go bad and lets them\n /// decide how to handle it.\n@@ -425,8 +426,8 @@ pub trait TryInto<T>: Sized {\n /// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n-/// calling `T::try_from()` on a value of type `T` is `Infallible`.\n-/// When the `!` type is stablized `Infallible` and `!` will be\n+/// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n+/// When the [`!`] type is stablized [`Infallible`] and [`!`] will be\n /// equivalent.\n ///\n /// `TryFrom<T>` can be implemented as follows:\n@@ -451,7 +452,7 @@ pub trait TryInto<T>: Sized {\n ///\n /// # Examples\n ///\n-/// As described, [`i32`] implements `TryFrom<i64>`:\n+/// As described, [`i32`] implements `TryFrom<`[`i64`]`>`:\n ///\n /// ```\n /// use std::convert::TryFrom;\n@@ -474,6 +475,8 @@ pub trait TryInto<T>: Sized {\n ///\n /// [`try_from`]: trait.TryFrom.html#tymethod.try_from\n /// [`TryInto`]: trait.TryInto.html\n+/// [`i32::MAX`]: ../../std/i32/constant.MAX.html\n+/// [`!`]: ../../std/primitive.never.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error."}, {"sha": "fe48e2458cd162e5d9c627ad962b0c45aea8f6e6", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -4453,6 +4453,21 @@ impl<'a, T> DoubleEndedIterator for ChunksExact<'a, T> {\n             Some(snd)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &[];\n+            None\n+        } else {\n+            let start = (len - 1 - n) * self.chunk_size;\n+            let end = start + self.chunk_size;\n+            let nth_back = &self.v[start..end];\n+            self.v = &self.v[..start];\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]"}, {"sha": "f7b4e4ea7824f06daf8a8eab237a69c15b3eea67", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -3716,10 +3716,10 @@ impl str {\n     ///\n     /// # Text directionality\n     ///\n-    /// A string is a sequence of bytes. 'Left' in this context means the first\n-    /// position of that byte string; for a language like Arabic or Hebrew\n-    /// which are 'right to left' rather than 'left to right', this will be\n-    /// the _right_ side, not the left.\n+    /// A string is a sequence of bytes. `start` in this context means the first\n+    /// position of that byte string; for a left-to-right language like English or\n+    /// Russian, this will be left side, and for right-to-left languages like\n+    /// like Arabic or Hebrew, this will be the right side.\n     ///\n     /// # Examples\n     ///\n@@ -3755,10 +3755,10 @@ impl str {\n     ///\n     /// # Text directionality\n     ///\n-    /// A string is a sequence of bytes. 'Right' in this context means the last\n-    /// position of that byte string; for a language like Arabic or Hebrew\n-    /// which are 'right to left' rather than 'left to right', this will be\n-    /// the _left_ side, not the right.\n+    /// A string is a sequence of bytes. `end` in this context means the last\n+    /// position of that byte string; for a left-to-right language like English or\n+    /// Russian, this will be right side, and for right-to-left languages like\n+    /// like Arabic or Hebrew, this will be the left side.\n     ///\n     /// # Examples\n     ///\n@@ -3804,10 +3804,10 @@ impl str {\n     ///\n     /// # Text directionality\n     ///\n-    /// A string is a sequence of bytes. `start` in this context means the first\n-    /// position of that byte string; for a left-to-right language like English or\n-    /// Russian, this will be left side, and for right-to-left languages like\n-    /// like Arabic or Hebrew, this will be the right side.\n+    /// A string is a sequence of bytes. 'Left' in this context means the first\n+    /// position of that byte string; for a language like Arabic or Hebrew\n+    /// which are 'right to left' rather than 'left to right', this will be\n+    /// the _right_ side, not the left.\n     ///\n     /// # Examples\n     ///\n@@ -3840,10 +3840,10 @@ impl str {\n     ///\n     /// # Text directionality\n     ///\n-    /// A string is a sequence of bytes. `end` in this context means the last\n-    /// position of that byte string; for a left-to-right language like English or\n-    /// Russian, this will be right side, and for right-to-left languages like\n-    /// like Arabic or Hebrew, this will be the left side.\n+    /// A string is a sequence of bytes. 'Right' in this context means the last\n+    /// position of that byte string; for a language like Arabic or Hebrew\n+    /// which are 'right to left' rather than 'left to right', this will be\n+    /// the _left_ side, not the right.\n     ///\n     /// # Examples\n     ///"}, {"sha": "439ed0c81c8b66e5fdda531c4c9c089b2041185b", "filename": "src/libcore/tests/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fascii.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -151,7 +151,7 @@ macro_rules! assert_none {\n                            stringify!($what), b);\n                 }\n             }\n-        )*\n+        )+\n     }};\n     ($what:ident, $($str:tt),+,) => (assert_none!($what,$($str),+))\n }"}, {"sha": "06c3a78c1698ac831d548abc54fb3a1057ea4e52", "filename": "src/libcore/tests/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fpattern.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -5,7 +5,7 @@ use std::str::pattern::*;\n macro_rules! search_asserts {\n     ($haystack:expr, $needle:expr, $testname:expr, [$($func:ident),*], $result:expr) => {\n         let mut searcher = $needle.into_searcher($haystack);\n-        let arr = [$( Step::from(searcher.$func()) ),+];\n+        let arr = [$( Step::from(searcher.$func()) ),*];\n         assert_eq!(&arr[..], &$result, $testname);\n     }\n }"}, {"sha": "13b02c718423433a2ece14ef55d3c12654b5d7a2", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -275,6 +275,25 @@ fn test_chunks_exact_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_chunks_exact_nth_back() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let mut c = v.chunks_exact(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next().unwrap(), &[0, 1]);\n+    assert_eq!(c.next(), None);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4];\n+    let mut c2 = v2.chunks_exact(3);\n+    assert_eq!(c2.nth_back(0).unwrap(), &[0, 1, 2]);\n+    assert_eq!(c2.next(), None);\n+    assert_eq!(c2.next_back(), None);\n+\n+    let v3: &[i32] = &[0, 1, 2, 3, 4];\n+    let mut c3 = v3.chunks_exact(10);\n+    assert_eq!(c3.nth_back(0), None);\n+}\n+\n #[test]\n fn test_chunks_exact_last() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];"}, {"sha": "707b7cae16ce73f1d58fa79a05d3dbd1e0dc6b02", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -653,10 +653,14 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n             linker_error.emit();\n \n             if sess.target.target.options.is_like_msvc && linker_not_found {\n-                sess.note_without_error(\"the msvc targets depend on the msvc linker \\\n-                    but `link.exe` was not found\");\n-                sess.note_without_error(\"please ensure that VS 2013, VS 2015 or VS 2017 \\\n-                    was installed with the Visual C++ option\");\n+                sess.note_without_error(\n+                    \"the msvc targets depend on the msvc linker \\\n+                     but `link.exe` was not found\",\n+                );\n+                sess.note_without_error(\n+                    \"please ensure that VS 2013, VS 2015, VS 2017 or VS 2019 \\\n+                     was installed with the Visual C++ option\",\n+                );\n             }\n             sess.abort_if_errors();\n         }"}, {"sha": "6ae5e94b11af389d9afc90388c08642785500bda", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -642,14 +642,14 @@ pub fn build_output_filenames(\n                 );\n                 None\n             } else {\n+                if !sess.opts.cg.extra_filename.is_empty() {\n+                    sess.warn(\"ignoring -C extra-filename flag due to -o flag\");\n+                }\n                 Some(out_file.clone())\n             };\n             if *odir != None {\n                 sess.warn(\"ignoring --out-dir flag due to -o flag\");\n             }\n-            if !sess.opts.cg.extra_filename.is_empty() {\n-                sess.warn(\"ignoring -C extra-filename flag due to -o flag\");\n-            }\n \n             OutputFilenames {\n                 out_directory: out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),"}, {"sha": "e6c9d9f5c79d8b92342157a342451e658dc2c4c3", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::{self, Ty, TypeAndMut};\n use rustc::ty::layout::{self, TyLayout, Size};\n use rustc::ty::adjustment::{PointerCast};\n-use syntax::ast::{FloatTy, IntTy, UintTy};\n+use syntax::ast::FloatTy;\n use syntax::symbol::sym;\n \n use rustc_apfloat::ieee::{Single, Double};\n@@ -151,7 +151,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n                     \"Unexpected cast from type {:?}\", src_layout.ty\n                 );\n                 match val.to_bits_or_ptr(src_layout.size, self) {\n-                    Err(ptr) => self.cast_from_ptr(ptr, dest_layout.ty),\n+                    Err(ptr) => self.cast_from_ptr(ptr, src_layout, dest_layout),\n                     Ok(data) => self.cast_from_int(data, src_layout, dest_layout),\n                 }\n             }\n@@ -239,17 +239,25 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n     fn cast_from_ptr(\n         &self,\n         ptr: Pointer<M::PointerTag>,\n-        ty: Ty<'tcx>\n+        src_layout: TyLayout<'tcx>,\n+        dest_layout: TyLayout<'tcx>,\n     ) -> InterpResult<'tcx, Scalar<M::PointerTag>> {\n         use rustc::ty::TyKind::*;\n-        match ty.sty {\n+\n+        match dest_layout.ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc,\n             // no need to support it here.\n-            RawPtr(_) |\n-            Int(IntTy::Isize) |\n-            Uint(UintTy::Usize) => Ok(ptr.into()),\n-            Int(_) | Uint(_) => err!(ReadPointerAsBytes),\n-            _ => err!(Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n+            RawPtr(_) => Ok(ptr.into()),\n+            Int(_) | Uint(_) => {\n+                let size = self.memory.pointer_size();\n+\n+                match self.force_bits(Scalar::Ptr(ptr), size) {\n+                    Ok(bits) => self.cast_from_int(bits, src_layout, dest_layout),\n+                    Err(_) if dest_layout.size == size => Ok(ptr.into()),\n+                    Err(e) => Err(e),\n+                }\n+            }\n+            _ => bug!(\"invalid MIR: ptr to {:?} cast\", dest_layout.ty)\n         }\n     }\n "}, {"sha": "b139083e99fc1e9d57d5413b18b5c83fff7352e8", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -19,6 +19,10 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         is_like_msvc: true,\n+        // set VSLANG to 1033 can prevent link.exe from using\n+        // language packs, and avoid generating Non-UTF-8 error\n+        // messages if a link error occurred.\n+        link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n         pre_link_args: args,\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,"}, {"sha": "eeed5be867807bc670fe1fae482a9f8987518e18", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -458,7 +458,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 match ty.sty {\n                                     ty::Array(..) | ty::Slice(..) => {\n                                         err.help(\"the semantics of slice patterns changed \\\n-                                                  recently; see issue #23121\");\n+                                                  recently; see issue #62254\");\n                                     }\n                                     _ => {}\n                                 }"}, {"sha": "2925d8362c8d9a9cd2a0a44c00668e91da42d3d6", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -2608,6 +2608,12 @@ mod test_map {\n     use realstd::collections::CollectionAllocErr::*;\n     use realstd::usize;\n \n+    // https://github.com/rust-lang/rust/issues/62301\n+    fn _assert_hashmap_is_unwind_safe() {\n+        fn assert_unwind_safe<T: crate::panic::UnwindSafe>() {}\n+        assert_unwind_safe::<HashMap<(), crate::cell::UnsafeCell<()>>>();\n+    }\n+\n     #[test]\n     fn test_zero_capacities() {\n         type HM = HashMap<i32, i32>;"}, {"sha": "1d4fd98dd754f2991846a5330f59263a1403b0d5", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -4,6 +4,7 @@\n \n use crate::any::Any;\n use crate::cell::UnsafeCell;\n+use crate::collections;\n use crate::fmt;\n use crate::future::Future;\n use crate::pin::Pin;\n@@ -285,6 +286,11 @@ impl RefUnwindSafe for atomic::AtomicBool {}\n #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n impl<T> RefUnwindSafe for atomic::AtomicPtr<T> {}\n \n+// https://github.com/rust-lang/rust/issues/62301\n+#[stable(feature = \"hashbrown\", since = \"1.36.0\")]\n+impl<K, V, S> UnwindSafe for collections::HashMap<K, V, S>\n+    where K: UnwindSafe, V: UnwindSafe, S: UnwindSafe {}\n+\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T> Deref for AssertUnwindSafe<T> {\n     type Target = T;"}, {"sha": "000f80f99e7a9bb861b3ffde10defa09355e8c1a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -1765,33 +1765,6 @@ mod tests {\n         assert_eq!(out, \"foobar\\n\");\n     }\n \n-\n-    #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n-    #[cfg(unix)]\n-    fn uid_works() {\n-        use crate::os::unix::prelude::*;\n-\n-        let mut p = Command::new(\"/bin/sh\")\n-                            .arg(\"-c\").arg(\"true\")\n-                            .uid(unsafe { libc::getuid() })\n-                            .gid(unsafe { libc::getgid() })\n-                            .spawn().unwrap();\n-        assert!(p.wait().unwrap().success());\n-    }\n-\n-    #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n-    #[cfg(unix)]\n-    fn uid_to_root_fails() {\n-        use crate::os::unix::prelude::*;\n-\n-        // if we're already root, this isn't a valid test. Most of the bots run\n-        // as non-root though (android is an exception).\n-        if unsafe { libc::getuid() == 0 } { return }\n-        assert!(Command::new(\"/bin/ls\").uid(0).gid(0).spawn().is_err());\n-    }\n-\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_status() {"}, {"sha": "4a0c957333bca622316be621a320e916a0a7d8f1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -323,7 +323,7 @@ declare_features! (\n     (active, nll, \"1.0.0\", Some(43234), None),\n \n     // Allows using slice patterns.\n-    (active, slice_patterns, \"1.0.0\", Some(23121), None),\n+    (active, slice_patterns, \"1.0.0\", Some(62254), None),\n \n     // Allows the definition of `const` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(57563), None),\n@@ -610,7 +610,7 @@ declare_features! (\n     (removed, allocator, \"1.0.0\", None, None, None),\n     (removed, simd, \"1.0.0\", Some(27731), None,\n      Some(\"removed in favor of `#[repr(simd)]`\")),\n-    (removed, advanced_slice_patterns, \"1.0.0\", Some(23121), None,\n+    (removed, advanced_slice_patterns, \"1.0.0\", Some(62254), None,\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n     (removed, macro_reexport, \"1.0.0\", Some(29638), None,\n      Some(\"subsumed by `pub use`\")),"}, {"sha": "2b52c5d104c24a5c3ee4474a98889dcc63e10264", "filename": "src/test/run-pass/command-uid-gid.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -0,0 +1,26 @@\n+#![feature(rustc_private)]\n+\n+fn main() {\n+    #[cfg(unix)]\n+    run()\n+}\n+\n+#[cfg(unix)]\n+fn run() {\n+    extern crate libc;\n+    use std::process::Command;\n+    use std::os::unix::prelude::*;\n+\n+    let mut p = Command::new(\"/bin/sh\")\n+        .arg(\"-c\").arg(\"true\")\n+        .uid(unsafe { libc::getuid() })\n+        .gid(unsafe { libc::getgid() })\n+        .spawn().unwrap();\n+    assert!(p.wait().unwrap().success());\n+\n+    // if we're already root, this isn't a valid test. Most of the bots run\n+    // as non-root though (android is an exception).\n+    if unsafe { libc::getuid() != 0 } {\n+        assert!(Command::new(\"/bin/ls\").uid(0).gid(0).spawn().is_err());\n+    }\n+}"}, {"sha": "03bf933cd084dd11aa53b362d2eb1ff910dc2fcc", "filename": "src/test/ui/feature-gates/feature-gate-slice-patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/088b987307b91612ab164026e1dcdd0129fdb62b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.stderr?ref=088b987307b91612ab164026e1dcdd0129fdb62b", "patch": "@@ -4,7 +4,7 @@ error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n LL |         [1, 2, ..] => {}\n    |                ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23121\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n@@ -13,7 +13,7 @@ error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n LL |         [1, .., 5] => {}\n    |             ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23121\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n@@ -22,7 +22,7 @@ error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n LL |         [.., 4, 5] => {}\n    |          ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23121\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n@@ -31,7 +31,7 @@ error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n LL |         [ xs.., 4, 5 ] => {}\n    |           ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23121\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n@@ -40,7 +40,7 @@ error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n LL |         [ 1, xs.., 5 ] => {}\n    |              ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23121\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n@@ -49,7 +49,7 @@ error[E0658]: syntax for subslices in slice patterns is not yet stabilized\n LL |         [ 1, 2, xs.. ] => {}\n    |                 ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23121\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/62254\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n error: aborting due to 6 previous errors"}]}