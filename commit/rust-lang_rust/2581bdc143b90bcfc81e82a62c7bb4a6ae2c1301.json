{"sha": "2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ODFiZGMxNDNiOTBiY2ZjODFlODJhNjJjN2JiNGE2YWUyYzEzMDE=", "commit": {"author": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2018-10-20T16:39:29Z"}, "committer": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2018-10-20T16:39:29Z"}, "message": "Rename CanonicalVar to BoundTyIndex", "tree": {"sha": "d0957d613f150b1edf0c3cdd8e3b532739a74d0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0957d613f150b1edf0c3cdd8e3b532739a74d0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "html_url": "https://github.com/rust-lang/rust/commit/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/comments", "author": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca2639e82ec4a18d7359efbfb555ea69dd644c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2639e82ec4a18d7359efbfb555ea69dd644c97", "html_url": "https://github.com/rust-lang/rust/commit/ca2639e82ec4a18d7359efbfb555ea69dd644c97"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "919d5749bbff07b55a8b17dfb2511564bf6d3c93", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "patch": "@@ -147,7 +147,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionVid {\n     }\n }\n \n-impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::CanonicalVar {\n+impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::BoundTyIndex {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,"}, {"sha": "46e32f2374cc590298353a9efe8bae73aee37ba2", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "patch": "@@ -23,7 +23,7 @@ use infer::InferCtxt;\n use std::sync::atomic::Ordering;\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::Kind;\n-use ty::{self, CanonicalVar, Lift, List, Ty, TyCtxt, TypeFlags};\n+use ty::{self, BoundTyIndex, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -225,7 +225,7 @@ struct Canonicalizer<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     query_state: &'cx mut OriginalQueryValues<'tcx>,\n     // Note that indices is only used once `var_values` is big enough to be\n     // heap-allocated.\n-    indices: FxHashMap<Kind<'tcx>, CanonicalVar>,\n+    indices: FxHashMap<Kind<'tcx>, BoundTyIndex>,\n     canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,\n     needs_canonical_flags: TypeFlags,\n }\n@@ -393,7 +393,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     /// or returns an existing variable if `kind` has already been\n     /// seen. `kind` is expected to be an unbound variable (or\n     /// potentially a free region).\n-    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> CanonicalVar {\n+    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> BoundTyIndex {\n         let Canonicalizer {\n             variables,\n             query_state,\n@@ -413,7 +413,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             // direct linear search of `var_values`.\n             if let Some(idx) = var_values.iter().position(|&k| k == kind) {\n                 // `kind` is already present in `var_values`.\n-                CanonicalVar::new(idx)\n+                BoundTyIndex::new(idx)\n             } else {\n                 // `kind` isn't present in `var_values`. Append it. Likewise\n                 // for `info` and `variables`.\n@@ -428,19 +428,19 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n                     *indices = var_values\n                         .iter()\n                         .enumerate()\n-                        .map(|(i, &kind)| (kind, CanonicalVar::new(i)))\n+                        .map(|(i, &kind)| (kind, BoundTyIndex::new(i)))\n                         .collect();\n                 }\n                 // The cv is the index of the appended element.\n-                CanonicalVar::new(var_values.len() - 1)\n+                BoundTyIndex::new(var_values.len() - 1)\n             }\n         } else {\n             // `var_values` is large. Do a hashmap search via `indices`.\n             *indices.entry(kind).or_insert_with(|| {\n                 variables.push(info);\n                 var_values.push(kind);\n                 assert_eq!(variables.len(), var_values.len());\n-                CanonicalVar::new(variables.len() - 1)\n+                BoundTyIndex::new(variables.len() - 1)\n             })\n         }\n     }"}, {"sha": "e3bd407d17a90785a27ff6da5fc02dbda78211ed", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "patch": "@@ -40,7 +40,7 @@ use std::ops::Index;\n use syntax::source_map::Span;\n use ty::fold::TypeFoldable;\n use ty::subst::Kind;\n-use ty::{self, CanonicalVar, Lift, Region, List, TyCtxt};\n+use ty::{self, BoundTyIndex, Lift, Region, List, TyCtxt};\n \n mod canonicalizer;\n \n@@ -72,7 +72,7 @@ impl<'gcx> UseSpecializedDecodable for CanonicalVarInfos<'gcx> {}\n /// canonicalized query response.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct CanonicalVarValues<'tcx> {\n-    pub var_values: IndexVec<CanonicalVar, Kind<'tcx>>,\n+    pub var_values: IndexVec<BoundTyIndex, Kind<'tcx>>,\n }\n \n /// When we canonicalize a value to form a query, we wind up replacing\n@@ -264,7 +264,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         span: Span,\n         variables: &List<CanonicalVarInfo>,\n     ) -> CanonicalVarValues<'tcx> {\n-        let var_values: IndexVec<CanonicalVar, Kind<'tcx>> = variables\n+        let var_values: IndexVec<BoundTyIndex, Kind<'tcx>> = variables\n             .iter()\n             .map(|info| self.fresh_inference_var_for_canonical_var(span, *info))\n             .collect();\n@@ -367,10 +367,10 @@ BraceStructLiftImpl! {\n     } where R: Lift<'tcx>\n }\n \n-impl<'tcx> Index<CanonicalVar> for CanonicalVarValues<'tcx> {\n+impl<'tcx> Index<BoundTyIndex> for CanonicalVarValues<'tcx> {\n     type Output = Kind<'tcx>;\n \n-    fn index(&self, value: CanonicalVar) -> &Kind<'tcx> {\n+    fn index(&self, value: BoundTyIndex) -> &Kind<'tcx> {\n         &self.var_values[value]\n     }\n }"}, {"sha": "3d4dc36a9be53fac73633b68e0f612acd95e8d4b", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "patch": "@@ -35,7 +35,7 @@ use traits::{FulfillmentContext, TraitEngine};\n use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::fold::TypeFoldable;\n use ty::subst::{Kind, UnpackedKind};\n-use ty::{self, CanonicalVar, Lift, Ty, TyCtxt};\n+use ty::{self, BoundTyIndex, Lift, Ty, TyCtxt};\n \n impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     /// The \"main method\" for a canonicalized trait query. Given the\n@@ -273,7 +273,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         for (index, original_value) in original_values.var_values.iter().enumerate() {\n             // ...with the value `v_r` of that variable from the query.\n             let result_value = query_response.substitute_projected(self.tcx, &result_subst, |v| {\n-                &v.var_values[CanonicalVar::new(index)]\n+                &v.var_values[BoundTyIndex::new(index)]\n             });\n             match (original_value.unpack(), result_value.unpack()) {\n                 (UnpackedKind::Lifetime(ty::ReErased), UnpackedKind::Lifetime(ty::ReErased)) => {\n@@ -408,7 +408,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // is directly equal to one of the canonical variables in the\n         // result, then we can type the corresponding value from the\n         // input. See the example above.\n-        let mut opt_values: IndexVec<CanonicalVar, Option<Kind<'tcx>>> =\n+        let mut opt_values: IndexVec<BoundTyIndex, Option<Kind<'tcx>>> =\n             IndexVec::from_elem_n(None, query_response.variables.len());\n \n         // In terms of our example above, we are iterating over pairs like:\n@@ -440,7 +440,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 .variables\n                 .iter()\n                 .enumerate()\n-                .map(|(index, info)| opt_values[CanonicalVar::new(index)].unwrap_or_else(||\n+                .map(|(index, info)| opt_values[BoundTyIndex::new(index)].unwrap_or_else(||\n                     self.fresh_inference_var_for_canonical_var(cause.span, *info)\n                 ))\n                 .collect(),\n@@ -470,7 +470,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // canonical variable; this is taken from\n         // `query_response.var_values` after applying the substitution\n         // `result_subst`.\n-        let substituted_query_response = |index: CanonicalVar| -> Kind<'tcx> {\n+        let substituted_query_response = |index: BoundTyIndex| -> Kind<'tcx> {\n             query_response.substitute_projected(self.tcx, &result_subst, |v| &v.var_values[index])\n         };\n \n@@ -526,12 +526,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         variables1: &OriginalQueryValues<'tcx>,\n-        variables2: impl Fn(CanonicalVar) -> Kind<'tcx>,\n+        variables2: impl Fn(BoundTyIndex) -> Kind<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         self.commit_if_ok(|_| {\n             let mut obligations = vec![];\n             for (index, value1) in variables1.var_values.iter().enumerate() {\n-                let value2 = variables2(CanonicalVar::new(index));\n+                let value2 = variables2(BoundTyIndex::new(index));\n \n                 match (value1.unpack(), value2.unpack()) {\n                     (UnpackedKind::Type(v1), UnpackedKind::Type(v2)) => {"}, {"sha": "122067517cafc1e7021ed221ffd5775b03480cba", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "patch": "@@ -63,7 +63,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n \n use hir;\n \n-pub use self::sty::{Binder, CanonicalVar, DebruijnIndex, INNERMOST};\n+pub use self::sty::{Binder, BoundTyIndex, DebruijnIndex, INNERMOST};\n pub use self::sty::{FnSig, GenSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};"}, {"sha": "f22c2ad296574ac02820b1382ce9dfac3cf5cc84", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "patch": "@@ -1165,7 +1165,7 @@ pub enum RegionKind {\n     ReClosureBound(RegionVid),\n \n     /// Canonicalized region, used only when preparing a trait query.\n-    ReCanonical(CanonicalVar),\n+    ReCanonical(BoundTyIndex),\n }\n \n impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n@@ -1218,11 +1218,11 @@ pub enum InferTy {\n     FreshFloatTy(u32),\n \n     /// Canonicalized type variable, used only when preparing a trait query.\n-    CanonicalTy(CanonicalVar),\n+    CanonicalTy(BoundTyIndex),\n }\n \n newtype_index! {\n-    pub struct CanonicalVar { .. }\n+    pub struct BoundTyIndex { .. }\n }\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`."}, {"sha": "f578518145cc68980d5f993412398b5a7b432eed", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "patch": "@@ -12,7 +12,7 @@\n \n use hir::def_id::DefId;\n use infer::canonical::Canonical;\n-use ty::{self, CanonicalVar, Lift, List, Ty, TyCtxt};\n+use ty::{self, BoundTyIndex, Lift, List, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n@@ -553,7 +553,7 @@ impl CanonicalUserSubsts<'tcx> {\n             return false;\n         }\n \n-        self.value.substs.iter().zip(CanonicalVar::new(0)..).all(|(kind, cvar)| {\n+        self.value.substs.iter().zip(BoundTyIndex::new(0)..).all(|(kind, cvar)| {\n             match kind.unpack() {\n                 UnpackedKind::Type(ty) => match ty.sty {\n                     ty::Infer(ty::CanonicalTy(cvar1)) => cvar == cvar1,"}]}