{"sha": "569d29d55c240eea3ff35d0a16572c2b81dd40bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OWQyOWQ1NWMyNDBlZWEzZmYzNWQwYTE2NTcyYzJiODFkZDQwYmY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-25T09:43:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-25T09:43:37Z"}, "message": "Rollup merge of #77984 - Aaron1011:fix/macro-mod-weird-parent, r=petrochenkov\n\nCompute proper module parent during resolution\n\nFixes #75982\n\nThe direct parent of a module may not be a module\n(e.g. `const _: () =  { #[path = \"foo.rs\"] mod foo; };`).\n\nTo find the parent of a module for purposes of resolution, we need to\nwalk up the tree until we hit a module or a crate root.", "tree": {"sha": "f62e6c36ea47b873ea3028796bb96bf4e20d59dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f62e6c36ea47b873ea3028796bb96bf4e20d59dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/569d29d55c240eea3ff35d0a16572c2b81dd40bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflUjJCRBK7hj4Ov3rIwAAdHIIAHlUsIpLPn3Ft9wl9wopLUoa\nIN49SVqSZbEnAsav0nFpPhRnMIGmHssDXbROvpiNpqh6LPYz+TTXab7wXCt8aS/q\nDe7XlFL2L0IDIFBQP2YPjCvwIJQNp4tJdsKlU+SJ0Gf853rVcF0NygV1nBN7OX0n\nWsVmCt5Yx6mpQQVhLxeI0CbI7/DS46HSZJDPrDqWUVjtFHnqH50chUzI/3H15HXH\nyNu3JubLFR68Q5NtIvhuTvcFltB5gPkP6FU52WLvqC4gIrJekTOZnQ1i0YYDe2cW\njmqndzwQhw7oC4ZRshYupjeDDkvm1UW2WXOxw9SMpXA5IO/6iIArzB4R1t7zGfQ=\n=0ZlQ\n-----END PGP SIGNATURE-----\n", "payload": "tree f62e6c36ea47b873ea3028796bb96bf4e20d59dd\nparent 3e0dd24a6c0812eedbb02182a75c352f8a7e184a\nparent 283053a742277f9b949facdfc5f4996f503f3c4e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603619017 +0900\ncommitter GitHub <noreply@github.com> 1603619017 +0900\n\nRollup merge of #77984 - Aaron1011:fix/macro-mod-weird-parent, r=petrochenkov\n\nCompute proper module parent during resolution\n\nFixes #75982\n\nThe direct parent of a module may not be a module\n(e.g. `const _: () =  { #[path = \"foo.rs\"] mod foo; };`).\n\nTo find the parent of a module for purposes of resolution, we need to\nwalk up the tree until we hit a module or a crate root.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/569d29d55c240eea3ff35d0a16572c2b81dd40bf", "html_url": "https://github.com/rust-lang/rust/commit/569d29d55c240eea3ff35d0a16572c2b81dd40bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/569d29d55c240eea3ff35d0a16572c2b81dd40bf/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "html_url": "https://github.com/rust-lang/rust/commit/3e0dd24a6c0812eedbb02182a75c352f8a7e184a"}, {"sha": "283053a742277f9b949facdfc5f4996f503f3c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/283053a742277f9b949facdfc5f4996f503f3c4e", "html_url": "https://github.com/rust-lang/rust/commit/283053a742277f9b949facdfc5f4996f503f3c4e"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "68faf9c7a629d98b9f5a6907c11b994513ac0616", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/569d29d55c240eea3ff35d0a16572c2b81dd40bf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569d29d55c240eea3ff35d0a16572c2b81dd40bf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=569d29d55c240eea3ff35d0a16572c2b81dd40bf", "patch": "@@ -8,6 +8,7 @@ use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n@@ -487,6 +488,10 @@ impl CrateStore for CStore {\n         self.get_crate_data(def.krate).def_key(def.index)\n     }\n \n+    fn def_kind(&self, def: DefId) -> DefKind {\n+        self.get_crate_data(def.krate).def_kind(def.index)\n+    }\n+\n     fn def_path(&self, def: DefId) -> DefPath {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }"}, {"sha": "ae9e4d364d3cb749e88c7224e7e40f8398652816", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/569d29d55c240eea3ff35d0a16572c2b81dd40bf/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569d29d55c240eea3ff35d0a16572c2b81dd40bf/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=569d29d55c240eea3ff35d0a16572c2b81dd40bf", "patch": "@@ -8,6 +8,7 @@ use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_macros::HashStable;\n@@ -185,6 +186,7 @@ pub trait CrateStore {\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n+    fn def_kind(&self, def: DefId) -> DefKind;\n     fn def_path(&self, def: DefId) -> DefPath;\n     fn def_path_hash(&self, def: DefId) -> DefPathHash;\n     fn all_def_path_hashes_and_def_ids(&self, cnum: CrateNum) -> Vec<(DefPathHash, DefId)>;"}, {"sha": "feeea726f4c1bde0de1f7c96abc37caa66306a64", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/569d29d55c240eea3ff35d0a16572c2b81dd40bf/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569d29d55c240eea3ff35d0a16572c2b81dd40bf/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=569d29d55c240eea3ff35d0a16572c2b81dd40bf", "patch": "@@ -95,6 +95,27 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// Walks up the tree of definitions starting at `def_id`,\n+    /// stopping at the first `DefKind::Mod` encountered\n+    fn nearest_mod_parent(&mut self, def_id: DefId) -> Module<'a> {\n+        let def_key = self.cstore().def_key(def_id);\n+\n+        let mut parent_id = DefId {\n+            krate: def_id.krate,\n+            index: def_key.parent.expect(\"failed to get parent for module\"),\n+        };\n+        // The immediate parent may not be a module\n+        // (e.g. `const _: () =  { #[path = \"foo.rs\"] mod foo; };`)\n+        // Walk up the tree until we hit a module or the crate root.\n+        while parent_id.index != CRATE_DEF_INDEX\n+            && self.cstore().def_kind(parent_id) != DefKind::Mod\n+        {\n+            let parent_def_key = self.cstore().def_key(parent_id);\n+            parent_id.index = parent_def_key.parent.expect(\"failed to get parent for module\");\n+        }\n+        self.get_module(parent_id)\n+    }\n+\n     crate fn get_module(&mut self, def_id: DefId) -> Module<'a> {\n         // If this is a local module, it will be in `module_map`, no need to recalculate it.\n         if let Some(def_id) = def_id.as_local() {\n@@ -116,11 +137,8 @@ impl<'a> Resolver<'a> {\n                 .data\n                 .get_opt_name()\n                 .expect(\"given a DefId that wasn't a module\");\n-            // This unwrap is safe since we know this isn't the root\n-            let parent = Some(self.get_module(DefId {\n-                index: def_key.parent.expect(\"failed to get parent for module\"),\n-                ..def_id\n-            }));\n+\n+            let parent = Some(self.nearest_mod_parent(def_id));\n             (name, parent)\n         };\n \n@@ -145,8 +163,24 @@ impl<'a> Resolver<'a> {\n         if let Some(id) = def_id.as_local() {\n             self.local_macro_def_scopes[&id]\n         } else {\n-            let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();\n-            self.get_module(module_def_id)\n+            // This is not entirely correct - a `macro_rules!` macro may occur\n+            // inside a 'block' module:\n+            //\n+            // ```rust\n+            // const _: () = {\n+            // #[macro_export]\n+            // macro_rules! my_macro {\n+            //     () => {};\n+            // }\n+            // `\n+            // We don't record this information for external crates, so\n+            // the module we compute here will be the closest 'mod' item\n+            // (not necesssarily the actual parent of the `macro_rules!`\n+            // macro). `macro_rules!` macros can't use def-site hygiene,\n+            // so this hopefully won't be a problem.\n+            //\n+            // See https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508\n+            self.nearest_mod_parent(def_id)\n         }\n     }\n "}, {"sha": "1e1a6126a10cf23890d3091c6bfb6b8084dc7780", "filename": "src/test/ui/macros/auxiliary/issue-75982.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/569d29d55c240eea3ff35d0a16572c2b81dd40bf/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-75982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569d29d55c240eea3ff35d0a16572c2b81dd40bf/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-75982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fissue-75982.rs?ref=569d29d55c240eea3ff35d0a16572c2b81dd40bf", "patch": "@@ -0,0 +1,12 @@\n+const _: () = {\n+    #[macro_export]\n+    macro_rules! first_macro {\n+        () => {}\n+    }\n+    mod foo {\n+        #[macro_export]\n+        macro_rules! second_macro {\n+            () => {}\n+        }\n+    }\n+};"}, {"sha": "e76b09d4bb94712b75873068931247463c59745b", "filename": "src/test/ui/macros/issue-75982-foreign-macro-weird-mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/569d29d55c240eea3ff35d0a16572c2b81dd40bf/src%2Ftest%2Fui%2Fmacros%2Fissue-75982-foreign-macro-weird-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569d29d55c240eea3ff35d0a16572c2b81dd40bf/src%2Ftest%2Fui%2Fmacros%2Fissue-75982-foreign-macro-weird-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-75982-foreign-macro-weird-mod.rs?ref=569d29d55c240eea3ff35d0a16572c2b81dd40bf", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:issue-75982.rs\n+// check-pass\n+\n+// Regression test for issue #75982\n+// Tests that don't ICE when invoking a foreign macro\n+// that occurs inside a module with a weird parent.\n+\n+extern crate issue_75982;\n+\n+fn main() {\n+    issue_75982::first_macro!();\n+    issue_75982::second_macro!();\n+}"}]}