{"sha": "0be88eb794949d27331ec45c300a40369b541001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZTg4ZWI3OTQ5NDlkMjczMzFlYzQ1YzMwMGE0MDM2OWI1NDEwMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-11T22:12:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-11T22:12:27Z"}, "message": "Auto merge of #36308 - dtolnay:inputitem, r=alexcrichton\n\nPoint macros 1.1 errors to the input item\n\nMoved from https://github.com/alexcrichton/rust/pull/6 to continue discussion. Fixes #36218.\n\nBefore:\n\n```rust\nerror[E0106]: missing lifetime specifier\n  --> src/main.rs:10:10\n   |\n10 | #[derive(Serialize, Deserialize)]\n   |          ^ expected lifetime parameter\n\nerror[E0038]: the trait `T` cannot be made into an object\n  --> src/main.rs:15:15\n   |\n15 | #[derive(Serialize, Deserialize)]\n   |          ^^^^^^^^^^ the trait `T` cannot be made into an object\n```\n\nAfter:\n\n```rust\nerror[E0106]: missing lifetime specifier\n  --> src/main.rs:11:1\n   |\n11 | struct A {\n   | ^ expected lifetime parameter\n\nerror[E0038]: the trait `T` cannot be made into an object\n  --> src/main.rs:16:1\n   |\n16 | struct B<'a> {\n   | ^ the trait `T` cannot be made into an object\n```", "tree": {"sha": "f57f3c24d72a7e1af6b75c471eb43ef362f5bfb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f57f3c24d72a7e1af6b75c471eb43ef362f5bfb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0be88eb794949d27331ec45c300a40369b541001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0be88eb794949d27331ec45c300a40369b541001", "html_url": "https://github.com/rust-lang/rust/commit/0be88eb794949d27331ec45c300a40369b541001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0be88eb794949d27331ec45c300a40369b541001/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4812cf392f1fa2258033356dd872fbee58a5406e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4812cf392f1fa2258033356dd872fbee58a5406e", "html_url": "https://github.com/rust-lang/rust/commit/4812cf392f1fa2258033356dd872fbee58a5406e"}, {"sha": "fe41520fceb00427e797cc0b42f449f54967b104", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe41520fceb00427e797cc0b42f449f54967b104", "html_url": "https://github.com/rust-lang/rust/commit/fe41520fceb00427e797cc0b42f449f54967b104"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "465fc0016e5e8ef6a526748040433e97cfd8bb5f", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0be88eb794949d27331ec45c300a40369b541001/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be88eb794949d27331ec45c300a40369b541001/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=0be88eb794949d27331ec45c300a40369b541001", "patch": "@@ -10,12 +10,14 @@\n \n use std::panic;\n \n+use errors::FatalError;\n use rustc_macro::{TokenStream, __internal};\n use syntax::ast::{self, ItemKind};\n-use syntax::codemap::Span;\n+use syntax::codemap::{ExpnInfo, MacroAttribute, NameAndSpan, Span};\n use syntax::ext::base::*;\n use syntax::fold::{self, Folder};\n-use errors::FatalError;\n+use syntax::parse::token::intern;\n+use syntax::print::pprust;\n \n pub struct CustomDerive {\n     inner: fn(TokenStream) -> TokenStream,\n@@ -31,7 +33,7 @@ impl MultiItemModifier for CustomDerive {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n-              _meta_item: &ast::MetaItem,\n+              meta_item: &ast::MetaItem,\n               item: Annotatable)\n               -> Vec<Annotatable> {\n         let item = match item {\n@@ -53,6 +55,17 @@ impl MultiItemModifier for CustomDerive {\n             }\n         }\n \n+        let input_span = Span {\n+            expn_id: ecx.codemap().record_expansion(ExpnInfo {\n+                call_site: span,\n+                callee: NameAndSpan {\n+                    format: MacroAttribute(intern(&pprust::meta_item_to_string(meta_item))),\n+                    span: Some(span),\n+                    allow_internal_unstable: true,\n+                },\n+            }),\n+            ..item.span\n+        };\n         let input = __internal::new_token_stream(item);\n         let res = __internal::set_parse_sess(&ecx.parse_sess, || {\n             let inner = self.inner;\n@@ -77,9 +90,9 @@ impl MultiItemModifier for CustomDerive {\n \n         // Right now we have no knowledge of spans at all in custom derive\n         // macros, everything is just parsed as a string. Reassign all spans to\n-        // the #[derive] attribute for better errors here.\n+        // the input `item` for better errors here.\n         item.into_iter().flat_map(|item| {\n-            ChangeSpan { span: span }.fold_item(item)\n+            ChangeSpan { span: input_span }.fold_item(item)\n         }).map(Annotatable::Item).collect()\n     }\n }"}, {"sha": "1300fe66585c9e8cca4576a75848e11011aeeac5", "filename": "src/test/compile-fail-fulldeps/rustc-macro/append-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0be88eb794949d27331ec45c300a40369b541001/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fappend-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be88eb794949d27331ec45c300a40369b541001/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fappend-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fappend-impl.rs?ref=0be88eb794949d27331ec45c300a40369b541001", "patch": "@@ -23,8 +23,8 @@ trait Append {\n #[derive(PartialEq,\n          Append,\n          Eq)]\n-//~^^ ERROR: the semantics of constant patterns is not yet settled\n struct A {\n+//~^ ERROR: the semantics of constant patterns is not yet settled\n     inner: u32,\n }\n "}, {"sha": "14c3d84e75be351f08c15485322b67073546e480", "filename": "src/test/compile-fail-fulldeps/rustc-macro/expand-to-unstable-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0be88eb794949d27331ec45c300a40369b541001/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fexpand-to-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be88eb794949d27331ec45c300a40369b541001/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fexpand-to-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fexpand-to-unstable-2.rs?ref=0be88eb794949d27331ec45c300a40369b541001", "patch": "@@ -17,8 +17,8 @@\n extern crate derive_unstable_2;\n \n #[derive(Unstable)]\n-//~^ ERROR: reserved for internal compiler\n struct A;\n+//~^ ERROR: reserved for internal compiler\n \n fn main() {\n     foo();"}, {"sha": "aa9aaa8115628067c373dced2caf0966a3c82db4", "filename": "src/test/compile-fail-fulldeps/rustc-macro/expand-to-unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0be88eb794949d27331ec45c300a40369b541001/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fexpand-to-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be88eb794949d27331ec45c300a40369b541001/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fexpand-to-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fexpand-to-unstable.rs?ref=0be88eb794949d27331ec45c300a40369b541001", "patch": "@@ -17,8 +17,8 @@\n extern crate derive_unstable;\n \n #[derive(Unstable)]\n-//~^ ERROR: use of unstable library feature\n struct A;\n+//~^ ERROR: use of unstable library feature\n \n fn main() {\n     unsafe { foo(); }"}]}