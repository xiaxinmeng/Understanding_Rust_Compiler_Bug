{"sha": "b80057d08d9f1b1726ec99dc57296cffec246bb1", "node_id": "C_kwDOAAsO6NoAKGI4MDA1N2QwOGQ5ZjFiMTcyNmVjOTlkYzU3Mjk2Y2ZmZWMyNDZiYjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-03T22:12:25Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-03T22:16:03Z"}, "message": "compiler: clippy::complexity fixes\n\nuseless_format\nmap_flatten\nuseless_conversion\nneedless_bool\nfilter_next\nclone_on_copy\nneedless_option_as_deref", "tree": {"sha": "07a4034e79abf88324a1bfda5bc2d31fb3cb322b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a4034e79abf88324a1bfda5bc2d31fb3cb322b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80057d08d9f1b1726ec99dc57296cffec246bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80057d08d9f1b1726ec99dc57296cffec246bb1", "html_url": "https://github.com/rust-lang/rust/commit/b80057d08d9f1b1726ec99dc57296cffec246bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80057d08d9f1b1726ec99dc57296cffec246bb1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "html_url": "https://github.com/rust-lang/rust/commit/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd"}], "stats": {"total": 84, "additions": 39, "deletions": 45}, "files": [{"sha": "b94b8c872169306349e49b834af24dc798c3441c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -230,7 +230,7 @@ impl AttrItem {\n     }\n \n     pub fn meta_kind(&self) -> Option<MetaItemKind> {\n-        Some(MetaItemKind::from_mac_args(&self.args)?)\n+        MetaItemKind::from_mac_args(&self.args)\n     }\n }\n "}, {"sha": "e01f232a61028a8fab0a451dbdb1099342d60f04", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -775,7 +775,7 @@ fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {\n             );\n             let mut all_stable = true;\n             for ident in\n-                attr.meta_item_list().into_iter().flatten().map(|nested| nested.ident()).flatten()\n+                attr.meta_item_list().into_iter().flatten().flat_map(|nested| nested.ident())\n             {\n                 let name = ident.name;\n                 let stable_since = lang_features"}, {"sha": "34403bdffa3d938b785a53094f33d5a54e3909e3", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -278,7 +278,7 @@ pub unsafe fn create_module<'ll>(\n             \"sign-return-address-all\\0\".as_ptr().cast(),\n             pac_opts.leaf.into(),\n         );\n-        let is_bkey = if pac_opts.key == PAuthKey::A { false } else { true };\n+        let is_bkey: bool = pac_opts.key != PAuthKey::A;\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Error,"}, {"sha": "6976999c0e4f7a4b457601959465a54ae995db1e", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -476,7 +476,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 mir::ProjectionElem::Subslice { from, to, from_end } => {\n                     let mut subslice = cg_base.project_index(bx, bx.cx().const_usize(from as u64));\n                     let projected_ty =\n-                        PlaceTy::from_ty(cg_base.layout.ty).projection_ty(tcx, elem.clone()).ty;\n+                        PlaceTy::from_ty(cg_base.layout.ty).projection_ty(tcx, *elem).ty;\n                     subslice.layout = bx.cx().layout_of(self.monomorphize(projected_ty));\n \n                     if subslice.layout.is_unsized() {"}, {"sha": "f71fb58cf6b9f1f7952b63564636c1a6db229c63", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -1039,7 +1039,7 @@ fn check_matcher_core(\n                                 ));\n                                 err.span_suggestion(\n                                     span,\n-                                    &format!(\"try a `pat_param` fragment specifier instead\"),\n+                                    \"try a `pat_param` fragment specifier instead\",\n                                     suggestion,\n                                     Applicability::MaybeIncorrect,\n                                 );"}, {"sha": "d080405927bd6c0f0e7e73808951afc49ae94c73", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -198,7 +198,7 @@ fn deprecation_message(\n     } else {\n         let since = since.as_ref().map(Symbol::as_str);\n \n-        if since.as_deref() == Some(\"TBD\") {\n+        if since == Some(\"TBD\") {\n             format!(\"use of {} `{}` that will be deprecated in a future Rust version\", kind, path)\n         } else {\n             format!("}, {"sha": "e5d44a72421694d6ee99c351ad598ec4aac5d9aa", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -855,7 +855,7 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {\n     ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {\n         Ok(ty::ProjectionPredicate {\n             projection_ty: relation.relate(a.projection_ty, b.projection_ty)?,\n-            term: relation.relate(a.term, b.term)?.into(),\n+            term: relation.relate(a.term, b.term)?,\n         })\n     }\n }"}, {"sha": "0e9ece77da7e1ca30bb6b2193ffe88a0c709462d", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -214,7 +214,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n         let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);\n \n-        blanket_impls.iter().chain(non_blanket_impls.iter().map(|(_, v)| v).flatten()).cloned()\n+        blanket_impls.iter().chain(non_blanket_impls.iter().flat_map(|(_, v)| v)).cloned()\n     }\n }\n "}, {"sha": "da921904523c4b5a2ca0c9554df5fee2acd1383d", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -140,7 +140,7 @@ fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx Cod\n     let body = mir_body(tcx, def_id);\n     body.basic_blocks()\n         .iter()\n-        .map(|data| {\n+        .flat_map(|data| {\n             data.statements.iter().filter_map(|statement| match statement.kind {\n                 StatementKind::Coverage(box ref coverage) => {\n                     if is_inlined(body, statement) {\n@@ -152,7 +152,6 @@ fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx Cod\n                 _ => None,\n             })\n         })\n-        .flatten()\n         .collect()\n }\n "}, {"sha": "b8684a09fd7cea3b2bd6399d2a5c128874e052ed", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -220,18 +220,16 @@ pub fn partition<'tcx>(\n         let mut cgus: Vec<_> = post_inlining.codegen_units.iter_mut().collect();\n         cgus.sort_by_key(|cgu| cgu.size_estimate());\n \n-        let dead_code_cgu = if let Some(cgu) = cgus\n-            .into_iter()\n-            .rev()\n-            .filter(|cgu| cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External))\n-            .next()\n-        {\n-            cgu\n-        } else {\n-            // If there are no CGUs that have externally linked items,\n-            // then we just pick the first CGU as a fallback.\n-            &mut post_inlining.codegen_units[0]\n-        };\n+        let dead_code_cgu =\n+            if let Some(cgu) = cgus.into_iter().rev().find(|cgu| {\n+                cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External)\n+            }) {\n+                cgu\n+            } else {\n+                // If there are no CGUs that have externally linked items,\n+                // then we just pick the first CGU as a fallback.\n+                &mut post_inlining.codegen_units[0]\n+            };\n         dead_code_cgu.make_code_coverage_dead_code_cgu();\n     }\n "}, {"sha": "def23005fbe1137ea37d46a9766d6dff3f3a88a8", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -2156,7 +2156,7 @@ impl<'a> Parser<'a> {\n                             | PatKind::TupleStruct(qself @ None, path, _)\n                             | PatKind::Path(qself @ None, path) => match &first_pat.kind {\n                                 PatKind::Ident(_, ident, _) => {\n-                                    path.segments.insert(0, PathSegment::from_ident(ident.clone()));\n+                                    path.segments.insert(0, PathSegment::from_ident(*ident));\n                                     path.span = new_span;\n                                     show_sugg = true;\n                                     first_pat = pat;\n@@ -2183,8 +2183,8 @@ impl<'a> Parser<'a> {\n                                             Path {\n                                                 span: new_span,\n                                                 segments: vec![\n-                                                    PathSegment::from_ident(old_ident.clone()),\n-                                                    PathSegment::from_ident(ident.clone()),\n+                                                    PathSegment::from_ident(*old_ident),\n+                                                    PathSegment::from_ident(*ident),\n                                                 ],\n                                                 tokens: None,\n                                             },\n@@ -2194,7 +2194,7 @@ impl<'a> Parser<'a> {\n                                     }\n                                     PatKind::Path(old_qself, old_path) => {\n                                         let mut segments = old_path.segments.clone();\n-                                        segments.push(PathSegment::from_ident(ident.clone()));\n+                                        segments.push(PathSegment::from_ident(*ident));\n                                         let path = PatKind::Path(\n                                             old_qself.clone(),\n                                             Path { span: new_span, segments, tokens: None },"}, {"sha": "4b57aa1f24a1c5979f4267fbaf06cbb61dbccf71", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -260,7 +260,7 @@ impl<'a> Parser<'a> {\n             let ate_comma = self.eat(&token::Comma);\n \n             if self.eat_keyword_noexpect(kw::Where) {\n-                let msg = &format!(\"cannot define duplicate `where` clauses on an item\");\n+                let msg = \"cannot define duplicate `where` clauses on an item\";\n                 let mut err = self.struct_span_err(self.token.span, msg);\n                 err.span_label(lo, \"previous `where` clause starts here\");\n                 err.span_suggestion_verbose("}, {"sha": "acce66760fdb9b75fe15210782d448fab5061347", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -1362,8 +1362,7 @@ impl<'a> Resolver<'a> {\n                     .filter(|(_, module)| {\n                         current_module.is_ancestor_of(module) && !ptr::eq(current_module, *module)\n                     })\n-                    .map(|(_, module)| module.kind.name())\n-                    .flatten(),\n+                    .flat_map(|(_, module)| module.kind.name()),\n             )\n             .filter(|c| !c.to_string().is_empty())\n             .collect::<Vec<_>>();\n@@ -1859,7 +1858,7 @@ crate fn show_candidates(\n         let instead = if instead { \" instead\" } else { \"\" };\n         let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n \n-        for note in accessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+        for note in accessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n             err.note(note);\n         }\n \n@@ -1942,7 +1941,7 @@ crate fn show_candidates(\n                 multi_span.push_span_label(span, format!(\"`{}`: not accessible\", name));\n             }\n \n-            for note in inaccessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+            for note in inaccessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n                 err.note(note);\n             }\n "}, {"sha": "e4db645e0827c03d60d4cc4f42924a97904291ef", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -1167,7 +1167,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion(\n                             span,\n                             &\"use this syntax instead\",\n-                            format!(\"{path_str}\"),\n+                            path_str.to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }"}, {"sha": "6f282e297a77584724b4cc535bd816fbf0f74c92", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -1432,8 +1432,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                                     self.tcx\n                                         .associated_items(did)\n                                         .in_definition_order()\n-                                        .filter(|assoc| assoc.ident(self.tcx) == trait_assoc_ident)\n-                                        .next()\n+                                        .find(|assoc| assoc.ident(self.tcx) == trait_assoc_ident)\n                                 },\n                             )\n                         })"}, {"sha": "2b5172c4544d2ee5a9cf9aa9a5c6aa09a0d235a1", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -957,7 +957,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n                 infcx.inner.borrow_mut().projection_cache().insert_term(cache_key, result.clone());\n             }\n             obligations.extend(result.obligations);\n-            Ok(Some(result.value.into()))\n+            Ok(Some(result.value))\n         }\n         Ok(Projected::NoProgress(projected_ty)) => {\n             let result = Normalized { value: projected_ty, obligations: vec![] };"}, {"sha": "7e9abe3a250db2c03deff124ab88fd7835b051fb", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -211,8 +211,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         );\n \n         let all_candidate_names: Vec<_> = all_candidates()\n-            .map(|r| self.tcx().associated_items(r.def_id()).in_definition_order())\n-            .flatten()\n+            .flat_map(|r| self.tcx().associated_items(r.def_id()).in_definition_order())\n             .filter_map(\n                 |item| if item.kind == ty::AssocKind::Type { Some(item.name) } else { None },\n             )"}, {"sha": "07facf61fc4286da4c40aa833552036cefa49c5e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -387,7 +387,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                 .multipart_suggestion_verbose(\n                     \"wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\",\n                     vec![\n-                        (ty_span.shrink_to_lo(), format!(\"std::mem::ManuallyDrop<\")),\n+                        (ty_span.shrink_to_lo(), \"std::mem::ManuallyDrop<\".into()),\n                         (ty_span.shrink_to_hi(), \">\".into()),\n                     ],\n                     Applicability::MaybeIncorrect,"}, {"sha": "8ddd00dfc8e928166a5fbd376199c3b763d2baf6", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n                 Some(ident) => format!(\"{}: \", ident),\n-                None => format!(\"\"),\n+                None => String::new(),\n             };\n \n             match &compatible_variants[..] {\n@@ -683,7 +683,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                         let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n                             Some(ident) => format!(\"{}: \", ident),\n-                            None => format!(\"\"),\n+                            None => String::new(),\n                         };\n \n                         if let Some(hir::Node::Expr(hir::Expr {\n@@ -875,7 +875,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             };\n                             let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n                                 Some(ident) => format!(\"{}: \", ident),\n-                                None => format!(\"\"),\n+                                None => String::new(),\n                             };\n                             let (span, suggestion) = if self.is_else_if_block(expr) {\n                                 // Don't suggest nonsense like `else *if`"}, {"sha": "8d3f7d11d937f3a0eb3b90f081f319a2bc3f73cb", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -242,7 +242,7 @@ impl DropRangesBuilder {\n \n     fn add_control_edge(&mut self, from: PostOrderId, to: PostOrderId) {\n         trace!(\"adding control edge from {:?} to {:?}\", from, to);\n-        self.node_mut(from.into()).successors.push(to.into());\n+        self.node_mut(from).successors.push(to);\n     }\n }\n "}, {"sha": "1b1a561fabc8c76fc32f218640d7a64b85776d23", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -444,7 +444,7 @@ impl DropRangesBuilder {\n \n     fn drop_at(&mut self, value: TrackedValue, location: PostOrderId) {\n         let value = self.tracked_value_index(value);\n-        self.node_mut(location.into()).drops.push(value);\n+        self.node_mut(location).drops.push(value);\n     }\n \n     fn reinit_at(&mut self, value: TrackedValue, location: PostOrderId) {\n@@ -454,7 +454,7 @@ impl DropRangesBuilder {\n             // ignore this.\n             None => return,\n         };\n-        self.node_mut(location.into()).reinits.push(value);\n+        self.node_mut(location).reinits.push(value);\n     }\n \n     /// Looks up PostOrderId for any control edges added by HirId and adds a proper edge for them."}, {"sha": "f827fa653b6b1b44cdc4157b42d0c418bc46ad8f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80057d08d9f1b1726ec99dc57296cffec246bb1/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b80057d08d9f1b1726ec99dc57296cffec246bb1", "patch": "@@ -526,7 +526,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                       // FIXME(associated_const_equality): add a useful error message here.\n                       tcx.ty_error_with_message(\n                         DUMMY_SP,\n-                        &format!(\"Could not find associated const on trait\"),\n+                        \"Could not find associated const on trait\",\n                     )\n                   }\n                 }"}]}