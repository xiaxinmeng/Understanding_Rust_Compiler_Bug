{"sha": "dfac64b32518a555a3d2bd0cc9e22a28335b64a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYWM2NGIzMjUxOGE1NTVhM2QyYmQwY2M5ZTIyYTI4MzM1YjY0YTU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-29T19:01:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-29T19:01:43Z"}, "message": "Rollup merge of #65900 - eddyb:proc-macro-cleanup, r=alexcrichton\n\nproc_macro: clean up bridge::client::__run_expand{1,2} a bit.\n\nSee commit titles/diffs for more details.\n\nThe first commit is made possible by #53451 being fixed (almost a year ago).\nThe last commit should remove the need for `#[allow(improper_ctypes)]` in #65134.", "tree": {"sha": "ffd215c397d20c16c3ef805300e519e742723279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd215c397d20c16c3ef805300e519e742723279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfac64b32518a555a3d2bd0cc9e22a28335b64a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJduIyXCRBK7hj4Ov3rIwAAdHIIAHD7jLU5O0QMWsUDPyUjpWiS\n/lqpEjsbZB68VEjU6CjEUUC09I7tTHxA26C4pp3644v1wyVTcw9qq8LOHmBHS/Bj\nGw0hyuPw9l+gGbtHL/iZyn5aqps8sgAeYN8qrAVZyG24mqWMdALzsSqDcYjGrYDy\nzxCADeDV+Vek+1Ndk6Tz+UXT7/kqNIvtj8ekQFLvVWYI/ENUKanX0AY2gYdolvEk\n6BbBc6GMqK+XOTX/vySwAXMOykRqoMBHqcle9vPMMkuMn/t8i6/m75XESDg8Kd1K\nKrrH9RLEbhWBSh41+3vvoMO0bfZ4JZpy51vjE/nDyuQCPnQUIOfL2Ho9O3X6imc=\n=nJfw\n-----END PGP SIGNATURE-----\n", "payload": "tree ffd215c397d20c16c3ef805300e519e742723279\nparent 4bb91c7845211ffcfb2e5ee790028fb410645542\nparent b58634454f2a6def88f3197261a458e208f77f49\nauthor Tyler Mandry <tmandry@gmail.com> 1572375703 -0700\ncommitter GitHub <noreply@github.com> 1572375703 -0700\n\nRollup merge of #65900 - eddyb:proc-macro-cleanup, r=alexcrichton\n\nproc_macro: clean up bridge::client::__run_expand{1,2} a bit.\n\nSee commit titles/diffs for more details.\n\nThe first commit is made possible by #53451 being fixed (almost a year ago).\nThe last commit should remove the need for `#[allow(improper_ctypes)]` in #65134.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfac64b32518a555a3d2bd0cc9e22a28335b64a5", "html_url": "https://github.com/rust-lang/rust/commit/dfac64b32518a555a3d2bd0cc9e22a28335b64a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfac64b32518a555a3d2bd0cc9e22a28335b64a5/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb91c7845211ffcfb2e5ee790028fb410645542", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb91c7845211ffcfb2e5ee790028fb410645542", "html_url": "https://github.com/rust-lang/rust/commit/4bb91c7845211ffcfb2e5ee790028fb410645542"}, {"sha": "b58634454f2a6def88f3197261a458e208f77f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58634454f2a6def88f3197261a458e208f77f49", "html_url": "https://github.com/rust-lang/rust/commit/b58634454f2a6def88f3197261a458e208f77f49"}], "stats": {"total": 82, "additions": 28, "deletions": 54}, "files": [{"sha": "9643dba997aa475213b5a4556f077ce72b1582a9", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 28, "deletions": 54, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/dfac64b32518a555a3d2bd0cc9e22a28335b64a5/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfac64b32518a555a3d2bd0cc9e22a28335b64a5/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=dfac64b32518a555a3d2bd0cc9e22a28335b64a5", "patch": "@@ -15,8 +15,9 @@ macro_rules! define_handles {\n         }\n \n         impl HandleCounters {\n-            // FIXME(#53451) public to work around `Cannot create local mono-item` ICE.\n-            pub extern \"C\" fn get() -> &'static Self {\n+            // FIXME(eddyb) use a reference to the `static COUNTERS`, intead of\n+            // a wrapper `fn` pointer, once `const fn` can reference `static`s.\n+            extern \"C\" fn get() -> &'static Self {\n                 static COUNTERS: HandleCounters = HandleCounters {\n                     $($oty: AtomicUsize::new(1),)*\n                     $($ity: AtomicUsize::new(1),)*\n@@ -333,29 +334,32 @@ impl Bridge<'_> {\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub struct Client<F> {\n+    // FIXME(eddyb) use a reference to the `static COUNTERS`, intead of\n+    // a wrapper `fn` pointer, once `const fn` can reference `static`s.\n     pub(super) get_handle_counters: extern \"C\" fn() -> &'static HandleCounters,\n     pub(super) run: extern \"C\" fn(Bridge<'_>, F) -> Buffer<u8>,\n     pub(super) f: F,\n }\n \n-// FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n-// affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n-pub extern \"C\" fn __run_expand1(\n+/// Client-side helper for handling client panics, entering the bridge,\n+/// deserializing input and serializing output.\n+// FIXME(eddyb) maybe replace `Bridge::enter` with this?\n+fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n     mut bridge: Bridge<'_>,\n-    f: fn(crate::TokenStream) -> crate::TokenStream,\n+    f: impl FnOnce(A) -> R,\n ) -> Buffer<u8> {\n     // The initial `cached_buffer` contains the input.\n     let mut b = bridge.cached_buffer.take();\n \n     panic::catch_unwind(panic::AssertUnwindSafe(|| {\n         bridge.enter(|| {\n             let reader = &mut &b[..];\n-            let input = TokenStream::decode(reader, &mut ());\n+            let input = A::decode(reader, &mut ());\n \n             // Put the `cached_buffer` back in the `Bridge`, for requests.\n             Bridge::with(|bridge| bridge.cached_buffer = b.take());\n \n-            let output = f(crate::TokenStream(input)).0;\n+            let output = f(input);\n \n             // Take the `cached_buffer` back out, for the output value.\n             b = Bridge::with(|bridge| bridge.cached_buffer.take());\n@@ -383,65 +387,35 @@ pub extern \"C\" fn __run_expand1(\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n+        extern \"C\" fn run(\n+            bridge: Bridge<'_>,\n+            f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,\n+        ) -> Buffer<u8> {\n+            run_client(bridge, |input| f(crate::TokenStream(input)).0)\n+        }\n         Client {\n             get_handle_counters: HandleCounters::get,\n-            run: __run_expand1,\n+            run,\n             f,\n         }\n     }\n }\n \n-// FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n-// affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n-pub extern \"C\" fn __run_expand2(\n-    mut bridge: Bridge<'_>,\n-    f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n-) -> Buffer<u8> {\n-    // The initial `cached_buffer` contains the input.\n-    let mut b = bridge.cached_buffer.take();\n-\n-    panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        bridge.enter(|| {\n-            let reader = &mut &b[..];\n-            let input = TokenStream::decode(reader, &mut ());\n-            let input2 = TokenStream::decode(reader, &mut ());\n-\n-            // Put the `cached_buffer` back in the `Bridge`, for requests.\n-            Bridge::with(|bridge| bridge.cached_buffer = b.take());\n-\n-            let output = f(crate::TokenStream(input), crate::TokenStream(input2)).0;\n-\n-            // Take the `cached_buffer` back out, for the output value.\n-            b = Bridge::with(|bridge| bridge.cached_buffer.take());\n-\n-            // HACK(eddyb) Separate encoding a success value (`Ok(output)`)\n-            // from encoding a panic (`Err(e: PanicMessage)`) to avoid\n-            // having handles outside the `bridge.enter(|| ...)` scope, and\n-            // to catch panics that could happen while encoding the success.\n-            //\n-            // Note that panics should be impossible beyond this point, but\n-            // this is defensively trying to avoid any accidental panicking\n-            // reaching the `extern \"C\"` (which should `abort` but may not\n-            // at the moment, so this is also potentially preventing UB).\n-            b.clear();\n-            Ok::<_, ()>(output).encode(&mut b, &mut ());\n-        })\n-    }))\n-    .map_err(PanicMessage::from)\n-    .unwrap_or_else(|e| {\n-        b.clear();\n-        Err::<(), _>(e).encode(&mut b, &mut ());\n-    });\n-    b\n-}\n-\n impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n     pub const fn expand2(\n         f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream\n     ) -> Self {\n+        extern \"C\" fn run(\n+            bridge: Bridge<'_>,\n+            f: impl FnOnce(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n+        ) -> Buffer<u8> {\n+            run_client(bridge, |(input, input2)| {\n+                f(crate::TokenStream(input), crate::TokenStream(input2)).0\n+            })\n+        }\n         Client {\n             get_handle_counters: HandleCounters::get,\n-            run: __run_expand2,\n+            run,\n             f,\n         }\n     }"}]}