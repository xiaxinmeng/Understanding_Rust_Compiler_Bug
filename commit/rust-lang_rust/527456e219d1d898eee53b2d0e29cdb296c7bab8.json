{"sha": "527456e219d1d898eee53b2d0e29cdb296c7bab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNzQ1NmUyMTlkMWQ4OThlZWU1M2IyZDBlMjljZGIyOTZjN2JhYjg=", "commit": {"author": {"name": "Christoph Schmidler", "email": "c.schmidler@gmail.com", "date": "2020-02-19T09:24:16Z"}, "committer": {"name": "Christoph Schmidler", "email": "c.schmidler@gmail.com", "date": "2020-03-05T07:10:39Z"}, "message": "Bumped version number for const_eval_limit in active.rs\n\nand renamed 'recursion_limit' in limits.rs to simple 'limit' because it does handle other limits too.", "tree": {"sha": "e5c7d6ad4db74d77124f06692b3d6964d08d8e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5c7d6ad4db74d77124f06692b3d6964d08d8e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/527456e219d1d898eee53b2d0e29cdb296c7bab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/527456e219d1d898eee53b2d0e29cdb296c7bab8", "html_url": "https://github.com/rust-lang/rust/commit/527456e219d1d898eee53b2d0e29cdb296c7bab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/527456e219d1d898eee53b2d0e29cdb296c7bab8/comments", "author": {"login": "TheSamsa", "id": 13667299, "node_id": "MDQ6VXNlcjEzNjY3Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/13667299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSamsa", "html_url": "https://github.com/TheSamsa", "followers_url": "https://api.github.com/users/TheSamsa/followers", "following_url": "https://api.github.com/users/TheSamsa/following{/other_user}", "gists_url": "https://api.github.com/users/TheSamsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSamsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSamsa/subscriptions", "organizations_url": "https://api.github.com/users/TheSamsa/orgs", "repos_url": "https://api.github.com/users/TheSamsa/repos", "events_url": "https://api.github.com/users/TheSamsa/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSamsa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TheSamsa", "id": 13667299, "node_id": "MDQ6VXNlcjEzNjY3Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/13667299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSamsa", "html_url": "https://github.com/TheSamsa", "followers_url": "https://api.github.com/users/TheSamsa/followers", "following_url": "https://api.github.com/users/TheSamsa/following{/other_user}", "gists_url": "https://api.github.com/users/TheSamsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSamsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSamsa/subscriptions", "organizations_url": "https://api.github.com/users/TheSamsa/orgs", "repos_url": "https://api.github.com/users/TheSamsa/repos", "events_url": "https://api.github.com/users/TheSamsa/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSamsa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94c74e2d936213cabcbb9675f81007ac7c3b78a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94c74e2d936213cabcbb9675f81007ac7c3b78a", "html_url": "https://github.com/rust-lang/rust/commit/c94c74e2d936213cabcbb9675f81007ac7c3b78a"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "22e4f5ea222617ba2d1a158bb88a6e13f4bcdb28", "filename": "src/librustc/middle/limits.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Flibrustc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Flibrustc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flimits.rs?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -38,10 +38,8 @@ fn update_limit(\n                     return;\n                 }\n                 Err(e) => {\n-                    let mut err = sess.struct_span_err(\n-                        attr.span,\n-                        \"`recursion_limit` must be a non-negative integer\",\n-                    );\n+                    let mut err =\n+                        sess.struct_span_err(attr.span, \"`limit` must be a non-negative integer\");\n \n                     let value_span = attr\n                         .meta()\n@@ -50,11 +48,11 @@ fn update_limit(\n                         .unwrap_or(attr.span);\n \n                     let error_str = match e.kind() {\n-                        IntErrorKind::Overflow => \"`recursion_limit` is too large\",\n-                        IntErrorKind::Empty => \"`recursion_limit` must be a non-negative integer\",\n+                        IntErrorKind::Overflow => \"`limit` is too large\",\n+                        IntErrorKind::Empty => \"`limit` must be a non-negative integer\",\n                         IntErrorKind::InvalidDigit => \"not a valid integer\",\n-                        IntErrorKind::Underflow => bug!(\"`recursion_limit` should never underflow\"),\n-                        IntErrorKind::Zero => bug!(\"zero is a valid `recursion_limit`\"),\n+                        IntErrorKind::Underflow => bug!(\"`limit` should never underflow\"),\n+                        IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),\n                         kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n                     };\n "}, {"sha": "6517a22701b0e8ea312c31f644d73fcefe268ab7", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -532,9 +532,6 @@ declare_features! (\n     /// Allows using `&mut` in constant functions.\n     (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n \n-    // Allows limiting the evaluation steps of const expressions\n-    (active, const_eval_limit, \"1.41.0\", Some(67217), None),\n-\n     /// Allows the use of `loop` and `while` in constants.\n     (active, const_loop, \"1.41.0\", Some(52000), None),\n \n@@ -555,6 +552,9 @@ declare_features! (\n     /// Allows the use of `no_sanitize` attribute.\n     (active, no_sanitize, \"1.42.0\", Some(39699), None),\n \n+    // Allows limiting the evaluation steps of const expressions\n+    (active, const_eval_limit, \"1.43.0\", Some(67217), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "1c49593cd53fa399bc8d6451b60d70e13825b3c5", "filename": "src/test/ui/consts/const_limit/const_eval_limit_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.rs?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,6 +1,6 @@\n-// check-pass\n #![feature(const_eval_limit)]\n #![const_eval_limit=\"18_446_744_073_709_551_615\"]\n+//~^ ERROR `limit` must be a non-negative integer\n \n const CONSTANT: usize = limit();\n "}, {"sha": "7f5d5e6cd4c5ac07714a5d2a977d89dbbbc0506d", "filename": "src/test/ui/consts/const_limit/const_eval_limit_overflow.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_overflow.stderr?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -0,0 +1,10 @@\n+error: `limit` must be a non-negative integer\n+  --> $DIR/const_eval_limit_overflow.rs:2:1\n+   |\n+LL | #![const_eval_limit=\"18_446_744_073_709_551_615\"]\n+   | ^^^^^^^^^^^^^^^^^^^^----------------------------^\n+   |                     |\n+   |                     not a valid integer\n+\n+error: aborting due to previous error\n+"}, {"sha": "d962398d4136e7d04517191b3cb8cf42f5bbc8f4", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,5 +1,9 @@\n+// ignore-tidy-linelength\n // only-x86_64\n // check-pass\n+// NOTE: We always compile this test with -Copt-level=0 because higher opt-levels\n+//       optimize away the const function\n+// compile-flags:-Copt-level=0\n #![feature(const_eval_limit)]\n #![const_eval_limit=\"2\"]\n \n@@ -10,7 +14,7 @@ fn main() {\n     assert_eq!(CONSTANT, 1764);\n }\n \n-const fn limit() -> usize {\n+const fn limit() -> usize { //~ WARNING Constant evaluating a complex constant, this might take some time\n     let x = 42;\n \n     x * 42"}, {"sha": "e0871ff718561f9d8220ed0dea4da6166844cfa3", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,5 +1,15 @@\n warning: Constant evaluating a complex constant, this might take some time\n-  --> $DIR/const_eval_limit_reached.rs:6:1\n+  --> $DIR/const_eval_limit_reached.rs:17:1\n+   |\n+LL | / const fn limit() -> usize {\n+LL | |     let x = 42;\n+LL | |\n+LL | |     x * 42\n+LL | | }\n+   | |_^\n+\n+warning: Constant evaluating a complex constant, this might take some time\n+  --> $DIR/const_eval_limit_reached.rs:10:1\n    |\n LL | const CONSTANT: usize = limit();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "31ff9c1e3a72e0290f17e6162597d6b15b6bf1e2", "filename": "src/test/ui/recursion_limit/empty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.rs?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,6 +1,6 @@\n // Test the parse error for an empty recursion_limit\n \n-#![recursion_limit = \"\"] //~ ERROR `recursion_limit` must be a non-negative integer\n-                         //~| `recursion_limit` must be a non-negative integer\n+#![recursion_limit = \"\"] //~ ERROR `limit` must be a non-negative integer\n+                         //~| `limit` must be a non-negative integer\n \n fn main() {}"}, {"sha": "bcd1d27e59b56be8926ceaa16a36d7dbb0b28422", "filename": "src/test/ui/recursion_limit/empty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fempty.stderr?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,10 +1,10 @@\n-error: `recursion_limit` must be a non-negative integer\n+error: `limit` must be a non-negative integer\n   --> $DIR/empty.rs:3:1\n    |\n LL | #![recursion_limit = \"\"]\n    | ^^^^^^^^^^^^^^^^^^^^^--^\n    |                      |\n-   |                      `recursion_limit` must be a non-negative integer\n+   |                      `limit` must be a non-negative integer\n \n error: aborting due to previous error\n "}, {"sha": "759d69d0af20d08e33fa25f736b45d46c97da6ef", "filename": "src/test/ui/recursion_limit/invalid_digit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.rs?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,6 +1,6 @@\n // Test the parse error for an invalid digit in recursion_limit\n \n-#![recursion_limit = \"-100\"] //~ ERROR `recursion_limit` must be a non-negative integer\n+#![recursion_limit = \"-100\"] //~ ERROR `limit` must be a non-negative integer\n                              //~| not a valid integer\n \n fn main() {}"}, {"sha": "e6fd6b72a0900e04013f6db6d2c5600ce1ca7e18", "filename": "src/test/ui/recursion_limit/invalid_digit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit.stderr?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,4 +1,4 @@\n-error: `recursion_limit` must be a non-negative integer\n+error: `limit` must be a non-negative integer\n   --> $DIR/invalid_digit.rs:3:1\n    |\n LL | #![recursion_limit = \"-100\"]"}, {"sha": "8eee2792b23832cf6d5a6528a0bf67df474a6c8d", "filename": "src/test/ui/recursion_limit/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.rs?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,7 +1,7 @@\n // Test the parse error for an overflowing recursion_limit\n \n #![recursion_limit = \"999999999999999999999999\"]\n-//~^ ERROR `recursion_limit` must be a non-negative integer\n-//~| `recursion_limit` is too large\n+//~^ ERROR `limit` must be a non-negative integer\n+//~| `limit` is too large\n \n fn main() {}"}, {"sha": "f6ed76c1ebc0e096facf4431f9edfefd65331fcf", "filename": "src/test/ui/recursion_limit/overflow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Foverflow.stderr?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,10 +1,10 @@\n-error: `recursion_limit` must be a non-negative integer\n+error: `limit` must be a non-negative integer\n   --> $DIR/overflow.rs:3:1\n    |\n LL | #![recursion_limit = \"999999999999999999999999\"]\n    | ^^^^^^^^^^^^^^^^^^^^^--------------------------^\n    |                      |\n-   |                      `recursion_limit` is too large\n+   |                      `limit` is too large\n \n error: aborting due to previous error\n "}, {"sha": "eb95d7babc6b213a00cd7aa4641568bb38ca5bb0", "filename": "src/test/ui/recursion_limit/zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527456e219d1d898eee53b2d0e29cdb296c7bab8/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.rs?ref=527456e219d1d898eee53b2d0e29cdb296c7bab8", "patch": "@@ -1,4 +1,4 @@\n-// Test that a `recursion_limit` of 0 is valid\n+// Test that a `limit` of 0 is valid\n \n #![recursion_limit = \"0\"]\n "}]}