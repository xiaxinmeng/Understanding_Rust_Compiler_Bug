{"sha": "d299f03e285f0ea25c4cce8913368fd7500f74ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOTlmMDNlMjg1ZjBlYTI1YzRjY2U4OTEzMzY4ZmQ3NTAwZjc0ZmY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-19T08:56:18Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-13T01:53:37Z"}, "message": "Fix some RangeInclusive test cases.", "tree": {"sha": "1f3bffdddc0f4e41dfc2e6e34e0c8702faf7f037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f3bffdddc0f4e41dfc2e6e34e0c8702faf7f037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d299f03e285f0ea25c4cce8913368fd7500f74ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltIBiEACgkQ/vbIBR0O\nATwkww//fnUsTnN+ro3VL0nE9p2BVxvxQDCjxq+C8yDGHURS+5ww1kbNLTj+0J6u\nI3DUl4X5i+hMnz8inXU30weiVmQ7FeLo4KGY9EJxNNyJ/IytHYPryqLoqniTt+/Y\n+nIYvtns8p+T3zOCthGhiXRhiouWXVl+jwYQnCN+0I/9OJphVF3PC5+ZI/mWpoz4\nCIHosbt9lNOQV+rvFZFwJLQcIrgFMJf39GIhbZhPUqJ5pMO6/hvH3GUVs/zkhIz4\n3qOh9UnBRvQK1pXf3s0FHv9655+LLLU+d2bECIFaAygfqTyxEbjTtjmc5//l7YyD\nzKVS6ENs1dO2ArAJVucNVdWWi+zpxzHZ+uiWs+pvSzfB/g6STQi4WaaSCLYMCBcF\n5jxWmCX5YmCoxR+1Jq8o6qMrF/uO1I6DsopRA9gb4q5o+wV57RiDbxuw06O6vLT/\nZhjHSLzJn5hCDVIJLYaIghbd7ubJQcAsU3aloYIBXXda7OuWz7YUhH0a6+oJ46Er\n4JuEHF2RsOwACa+ng0meLm234XnisVBfsvxe9EKQHt07siv5IhIjvxAHb4M3xWuR\n1CHxSh/EIwGKkrWlDZFNqC+84cKB+Dtzop+pL+RSW1yL8IneKpq3eFeLkmwXECgd\n1z1D7WOreDtPIYSsP7judas6X0QMF/B0u9BSk9FrJbICR+Hw6nQ=\n=T7XO\n-----END PGP SIGNATURE-----", "payload": "tree 1f3bffdddc0f4e41dfc2e6e34e0c8702faf7f037\nparent 0d7e9933d3cac85bc1f11dc0fec67fcad77784ca\nauthor kennytm <kennytm@gmail.com> 1529398578 +0800\ncommitter kennytm <kennytm@gmail.com> 1531446817 +0800\n\nFix some RangeInclusive test cases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d299f03e285f0ea25c4cce8913368fd7500f74ff", "html_url": "https://github.com/rust-lang/rust/commit/d299f03e285f0ea25c4cce8913368fd7500f74ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d299f03e285f0ea25c4cce8913368fd7500f74ff/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7e9933d3cac85bc1f11dc0fec67fcad77784ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7e9933d3cac85bc1f11dc0fec67fcad77784ca", "html_url": "https://github.com/rust-lang/rust/commit/0d7e9933d3cac85bc1f11dc0fec67fcad77784ca"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "2bedfc133b5819485986a71f14eb517b8a1087d5", "filename": "src/test/run-pass/range_inclusive.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d299f03e285f0ea25c4cce8913368fd7500f74ff/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d299f03e285f0ea25c4cce8913368fd7500f74ff/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=d299f03e285f0ea25c4cce8913368fd7500f74ff", "patch": "@@ -10,12 +10,18 @@\n \n // Test inclusive range syntax.\n \n-use std::ops::{RangeInclusive, RangeToInclusive};\n+#![feature(range_is_empty)]\n+#![allow(unused_comparisons)]\n+\n+use std::ops::RangeToInclusive;\n \n fn foo() -> isize { 42 }\n \n // Test that range syntax works in return statements\n-fn return_range_to() -> RangeToInclusive<i32> { return ..=1; }\n+pub fn return_range_to() -> RangeToInclusive<i32> { return ..=1; }\n+\n+#[derive(Debug)]\n+struct P(u8);\n \n pub fn main() {\n     let mut count = 0;\n@@ -26,7 +32,7 @@ pub fn main() {\n     assert_eq!(count, 55);\n \n     let mut count = 0;\n-    let mut range = 0_usize..=10;\n+    let range = 0_usize..=10;\n     for i in range {\n         assert!(i >= 0 && i <= 10);\n         count += i;\n@@ -80,7 +86,7 @@ pub fn main() {\n     short.next();\n     assert_eq!(long.size_hint(), (255, Some(255)));\n     assert_eq!(short.size_hint(), (0, Some(0)));\n-    assert_eq!(short, 1..=0);\n+    assert!(short.is_empty());\n \n     assert_eq!(long.len(), 255);\n     assert_eq!(short.len(), 0);\n@@ -95,28 +101,31 @@ pub fn main() {\n     for i in 3..=251 {\n         assert_eq!(long.next(), Some(i));\n     }\n-    assert_eq!(long, 1..=0);\n+    assert!(long.is_empty());\n \n     // check underflow\n     let mut narrow = 1..=0;\n     assert_eq!(narrow.next_back(), None);\n-    assert_eq!(narrow, 1..=0);\n+    assert!(narrow.is_empty());\n     let mut zero = 0u8..=0;\n     assert_eq!(zero.next_back(), Some(0));\n     assert_eq!(zero.next_back(), None);\n-    assert_eq!(zero, 1..=0);\n+    assert!(zero.is_empty());\n     let mut high = 255u8..=255;\n     assert_eq!(high.next_back(), Some(255));\n     assert_eq!(high.next_back(), None);\n-    assert_eq!(high, 1..=0);\n+    assert!(high.is_empty());\n \n     // what happens if you have a nonsense range?\n     let mut nonsense = 10..=5;\n     assert_eq!(nonsense.next(), None);\n-    assert_eq!(nonsense, 10..=5);\n+    assert!(nonsense.is_empty());\n \n     // output\n     assert_eq!(format!(\"{:?}\", 0..=10), \"0..=10\");\n     assert_eq!(format!(\"{:?}\", ..=10), \"..=10\");\n-    assert_eq!(format!(\"{:?}\", long), \"1..=0\");\n+    assert_eq!(format!(\"{:?}\", 9..=6), \"9..=6\");\n+\n+    // ensure that constructing a RangeInclusive does not need PartialOrd bound\n+    assert_eq!(format!(\"{:?}\", P(1)..=P(2)), \"P(1)..=P(2)\");\n }"}]}