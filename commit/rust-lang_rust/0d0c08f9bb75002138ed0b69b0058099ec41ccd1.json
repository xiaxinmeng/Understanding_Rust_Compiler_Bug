{"sha": "0d0c08f9bb75002138ed0b69b0058099ec41ccd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMGMwOGY5YmI3NTAwMjEzOGVkMGI2OWIwMDU4MDk5ZWM0MWNjZDE=", "commit": {"author": {"name": "Unknown", "email": "nannyakannya@gmail.com", "date": "2018-08-14T16:38:00Z"}, "committer": {"name": "fukatani", "email": "nannyakannya@gmail.com", "date": "2018-08-15T04:48:10Z"}, "message": "pretty printing for btreemap", "tree": {"sha": "f402a5bb00f1c18b2e15f7038cc8f05be14d79b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f402a5bb00f1c18b2e15f7038cc8f05be14d79b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d0c08f9bb75002138ed0b69b0058099ec41ccd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0c08f9bb75002138ed0b69b0058099ec41ccd1", "html_url": "https://github.com/rust-lang/rust/commit/0d0c08f9bb75002138ed0b69b0058099ec41ccd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d0c08f9bb75002138ed0b69b0058099ec41ccd1/comments", "author": {"login": "fukatani", "id": 8858287, "node_id": "MDQ6VXNlcjg4NTgyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/8858287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fukatani", "html_url": "https://github.com/fukatani", "followers_url": "https://api.github.com/users/fukatani/followers", "following_url": "https://api.github.com/users/fukatani/following{/other_user}", "gists_url": "https://api.github.com/users/fukatani/gists{/gist_id}", "starred_url": "https://api.github.com/users/fukatani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fukatani/subscriptions", "organizations_url": "https://api.github.com/users/fukatani/orgs", "repos_url": "https://api.github.com/users/fukatani/repos", "events_url": "https://api.github.com/users/fukatani/events{/privacy}", "received_events_url": "https://api.github.com/users/fukatani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fukatani", "id": 8858287, "node_id": "MDQ6VXNlcjg4NTgyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/8858287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fukatani", "html_url": "https://github.com/fukatani", "followers_url": "https://api.github.com/users/fukatani/followers", "following_url": "https://api.github.com/users/fukatani/following{/other_user}", "gists_url": "https://api.github.com/users/fukatani/gists{/gist_id}", "starred_url": "https://api.github.com/users/fukatani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fukatani/subscriptions", "organizations_url": "https://api.github.com/users/fukatani/orgs", "repos_url": "https://api.github.com/users/fukatani/repos", "events_url": "https://api.github.com/users/fukatani/events{/privacy}", "received_events_url": "https://api.github.com/users/fukatani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa23350a469b4c762d6fc1cb492092d954f678c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa23350a469b4c762d6fc1cb492092d954f678c8", "html_url": "https://github.com/rust-lang/rust/commit/fa23350a469b4c762d6fc1cb492092d954f678c8"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "1797f6708ac5b4745fcc2300fc3653b68c1320bc", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0d0c08f9bb75002138ed0b69b0058099ec41ccd1/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/0d0c08f9bb75002138ed0b69b0058099ec41ccd1/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=0d0c08f9bb75002138ed0b69b0058099ec41ccd1", "patch": "@@ -49,6 +49,7 @@\n TYPE_KIND_OS_STRING         = 18\n TYPE_KIND_STD_VECDEQUE      = 19\n TYPE_KIND_STD_BTREESET      = 20\n+TYPE_KIND_STD_BTREEMAP      = 21\n \n ENCODED_ENUM_PREFIX = \"RUST$ENCODED$ENUM$\"\n ENUM_DISR_FIELD_NAME = \"RUST$ENUM$DISR\"\n@@ -75,6 +76,9 @@\n # std::collections::BTreeSet<> related constants\n STD_BTREESET_FIELD_NAMES = [\"map\"]\n \n+# std::collections::BTreeMap<> related constants\n+STD_BTREEMAP_FIELD_NAMES = [\"root\", \"length\"]\n+\n # std::String related constants\n STD_STRING_FIELD_NAMES = [\"vec\"]\n \n@@ -184,6 +188,11 @@ def __classify_struct(self):\n                 self.__conforms_to_field_layout(STD_BTREESET_FIELD_NAMES)):\n             return TYPE_KIND_STD_BTREESET\n \n+        # STD COLLECTION BTREEMAP\n+        if (unqualified_type_name.startswith(\"BTreeMap<\") and\n+                self.__conforms_to_field_layout(STD_BTREEMAP_FIELD_NAMES)):\n+            return TYPE_KIND_STD_BTREEMAP\n+\n         # STD STRING\n         if (unqualified_type_name.startswith(\"String\") and\n             self.__conforms_to_field_layout(STD_STRING_FIELD_NAMES)):\n@@ -380,6 +389,18 @@ def extract_length_and_ptr_from_std_btreeset(vec_val):\n     return (length, data_ptr)\n \n \n+def extract_length_and_ptr_from_std_btreemap(vec_val):\n+    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_BTREEMAP\n+    root = vec_val.get_child_at_index(0)\n+    length = vec_val.get_child_at_index(1).as_integer()\n+    node = root.get_child_at_index(0)\n+    ptr = node.get_child_at_index(0)\n+    unique_ptr_val = ptr.get_child_at_index(0)\n+    data_ptr = unique_ptr_val.get_child_at_index(0)\n+    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n+    return (length, data_ptr)\n+\n+\n def extract_length_and_ptr_from_slice(slice_val):\n     assert (slice_val.type.get_type_kind() == TYPE_KIND_SLICE or\n             slice_val.type.get_type_kind() == TYPE_KIND_STR_SLICE)"}, {"sha": "216915dba5fe7c03116d1cf2906afd7bbafe392f", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d0c08f9bb75002138ed0b69b0058099ec41ccd1/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/0d0c08f9bb75002138ed0b69b0058099ec41ccd1/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=0d0c08f9bb75002138ed0b69b0058099ec41ccd1", "patch": "@@ -130,6 +130,9 @@ def rust_pretty_printer_lookup_function(gdb_val):\n     if type_kind == rustpp.TYPE_KIND_STD_BTREESET:\n         return RustStdBTreeSetPrinter(val)\n \n+    if type_kind == rustpp.TYPE_KIND_STD_BTREEMAP:\n+        return RustStdBTreeMapPrinter(val)\n+\n     if type_kind == rustpp.TYPE_KIND_STD_STRING:\n         return RustStdStringPrinter(val)\n \n@@ -325,6 +328,32 @@ def children(self):\n             yield (str(index), gdb_ptr[index])\n \n \n+class RustStdBTreeMapPrinter(object):\n+    def __init__(self, val):\n+        self.__val = val\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"map\"\n+\n+    def to_string(self):\n+        (length, data_ptr) = \\\n+            rustpp.extract_length_and_ptr_from_std_btreemap(self.__val)\n+        return (self.__val.type.get_unqualified_type_name() +\n+                (\"(len: %i)\" % length))\n+\n+    def children(self):\n+        (length, data_ptr) = \\\n+            rustpp.extract_length_and_ptr_from_std_btreemap(self.__val)\n+        keys = GdbValue(data_ptr.get_wrapped_value().dereference()).get_child_at_index(3)\n+        keys_ptr = keys.get_wrapped_value()\n+        vals = GdbValue(data_ptr.get_wrapped_value().dereference()).get_child_at_index(4)\n+        vals_ptr = vals.get_wrapped_value()\n+        for index in xrange(length):\n+            yield (str(index), keys_ptr[index])\n+            yield (str(index), vals_ptr[index])\n+\n+\n class RustStdStringPrinter(object):\n     def __init__(self, val):\n         self.__val = val\n@@ -338,6 +367,7 @@ def to_string(self):\n     def display_hint(self):\n         return \"string\"\n \n+\n class RustOsStringPrinter(object):\n     def __init__(self, val):\n         self.__val = val"}, {"sha": "8e37a884b34bbe24171fee585e1b98f1e8a394c3", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d0c08f9bb75002138ed0b69b0058099ec41ccd1/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0c08f9bb75002138ed0b69b0058099ec41ccd1/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=0d0c08f9bb75002138ed0b69b0058099ec41ccd1", "patch": "@@ -22,11 +22,15 @@\n // gdb-command: print btree_set\n // gdb-check:$1 = BTreeSet<i32>(len: 3) = {3, 5, 7}\n \n+// gdb-command: print btree_map\n+// gdb-check:$2 = BTreeMap<i32, i32>(len: 3) = {[3] = 3, [5] = 7, [7] = 4}\n+\n // gdb-command: print vec_deque\n-// gdb-check:$2 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n+// gdb-check:$3 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n \n #![allow(unused_variables)]\n use std::collections::BTreeSet;\n+use std::collections::BTreeMap;\n use std::collections::VecDeque;\n \n \n@@ -38,6 +42,12 @@ fn main() {\n     btree_set.insert(3);\n     btree_set.insert(7);\n \n+    // BTreeMap\n+    let mut btree_map = BTreeMap::new();\n+    btree_map.insert(5, 7);\n+    btree_map.insert(3, 3);\n+    btree_map.insert(7, 4);\n+\n     // VecDeque\n     let mut vec_deque = VecDeque::new();\n     vec_deque.push_back(5);"}]}