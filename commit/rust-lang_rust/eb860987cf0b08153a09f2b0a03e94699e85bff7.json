{"sha": "eb860987cf0b08153a09f2b0a03e94699e85bff7", "node_id": "C_kwDOAAsO6NoAKGViODYwOTg3Y2YwYjA4MTUzYTA5ZjJiMGEwM2U5NDY5OWU4NWJmZjc", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T19:52:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T19:52:42Z"}, "message": "Rollup merge of #88828 - FabianWolff:issue-88585, r=dtolnay\n\nUse `libc::sigaction()` instead of `sys::signal()` to prevent a deadlock\n\nFixes #88585. POSIX [specifies](https://man7.org/linux/man-pages/man3/fork.3p.html) that after forking,\n> to avoid errors, the child process may only execute async-signal-safe operations until such time as one of the exec functions is called.\n\nRust's standard library does not currently adhere to this, as evidenced by #88585. The child process calls [`sys::signal()`](https://github.com/rust-lang/rust/blob/7bf0736e130e2203c58654f7353dbf9575e49d5c/library/std/src/sys/unix/android.rs#L76), which on Android calls [`libc::dlsym()`](https://github.com/rust-lang/rust/blob/7bf0736e130e2203c58654f7353dbf9575e49d5c/library/std/src/sys/unix/weak.rs#L101), which is [**not**](https://man7.org/linux/man-pages/man7/signal-safety.7.html) async-signal-safe, and in fact causes a deadlock in the example in #88585.\n\nI think the easiest solution here would be to just call `libc::sigaction()` instead, which [is](https://man7.org/linux/man-pages/man7/signal-safety.7.html) async-signal-safe, provides the functionality we need, and is apparently available on all Android versions because it is also used e.g. [here](https://github.com/rust-lang/rust/blob/7bf0736e130e2203c58654f7353dbf9575e49d5c/library/std/src/sys/unix/stack_overflow.rs#L112-L114).", "tree": {"sha": "eca445c85b8e3ae3430081580eb0c214184a3ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca445c85b8e3ae3430081580eb0c214184a3ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb860987cf0b08153a09f2b0a03e94699e85bff7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXK0KCRBK7hj4Ov3rIwAAY0MIAAsWSXmjzBDUCVOc/m7zmctO\nbPpeV/DmzZwKlRmnqY09QqMVLCHfDJqMNDv439Sg5uW1bdG69xLagU5cdhzxZdw3\n64H6lX7P2KjIWwnEvsqA4riyd5zlrs78XK2tDPoRNgw4v59bQ5apzsc4PI0zv4GC\nd43Y/c9s7p1hbstStMfQggc2tccwfsQ7NbtAqPxO0PBHDY0XeqNkXljvUJ/EfEQU\nOhxIFtUy4gatHbZuLaIpSR5vPDw9DHzfIXfsAb7qLKdvI2dB64HomOOYsk/7blvM\ngtdwU7L4dVIE9/iqX6IZiJG1SRjvScp56PxZ+IX+p/nPet2uNcDwvRiyl/roVqg=\n=kXwF\n-----END PGP SIGNATURE-----\n", "payload": "tree eca445c85b8e3ae3430081580eb0c214184a3ebe\nparent 960e49e89b3c09baf9197dc9c87f3ca7755a486c\nparent 65ef265c121c90e33dd9dd2dc3b919cf37209b71\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633463562 -0700\ncommitter GitHub <noreply@github.com> 1633463562 -0700\n\nRollup merge of #88828 - FabianWolff:issue-88585, r=dtolnay\n\nUse `libc::sigaction()` instead of `sys::signal()` to prevent a deadlock\n\nFixes #88585. POSIX [specifies](https://man7.org/linux/man-pages/man3/fork.3p.html) that after forking,\n> to avoid errors, the child process may only execute async-signal-safe operations until such time as one of the exec functions is called.\n\nRust's standard library does not currently adhere to this, as evidenced by #88585. The child process calls [`sys::signal()`](https://github.com/rust-lang/rust/blob/7bf0736e130e2203c58654f7353dbf9575e49d5c/library/std/src/sys/unix/android.rs#L76), which on Android calls [`libc::dlsym()`](https://github.com/rust-lang/rust/blob/7bf0736e130e2203c58654f7353dbf9575e49d5c/library/std/src/sys/unix/weak.rs#L101), which is [**not**](https://man7.org/linux/man-pages/man7/signal-safety.7.html) async-signal-safe, and in fact causes a deadlock in the example in #88585.\n\nI think the easiest solution here would be to just call `libc::sigaction()` instead, which [is](https://man7.org/linux/man-pages/man7/signal-safety.7.html) async-signal-safe, provides the functionality we need, and is apparently available on all Android versions because it is also used e.g. [here](https://github.com/rust-lang/rust/blob/7bf0736e130e2203c58654f7353dbf9575e49d5c/library/std/src/sys/unix/stack_overflow.rs#L112-L114).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb860987cf0b08153a09f2b0a03e94699e85bff7", "html_url": "https://github.com/rust-lang/rust/commit/eb860987cf0b08153a09f2b0a03e94699e85bff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb860987cf0b08153a09f2b0a03e94699e85bff7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "960e49e89b3c09baf9197dc9c87f3ca7755a486c", "url": "https://api.github.com/repos/rust-lang/rust/commits/960e49e89b3c09baf9197dc9c87f3ca7755a486c", "html_url": "https://github.com/rust-lang/rust/commit/960e49e89b3c09baf9197dc9c87f3ca7755a486c"}, {"sha": "65ef265c121c90e33dd9dd2dc3b919cf37209b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ef265c121c90e33dd9dd2dc3b919cf37209b71", "html_url": "https://github.com/rust-lang/rust/commit/65ef265c121c90e33dd9dd2dc3b919cf37209b71"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "99013efb495d095d681d1f60fbeb1762e11074e6", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb860987cf0b08153a09f2b0a03e94699e85bff7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb860987cf0b08153a09f2b0a03e94699e85bff7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=eb860987cf0b08153a09f2b0a03e94699e85bff7", "patch": "@@ -333,9 +333,19 @@ impl Command {\n             let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n             cvt(sigemptyset(set.as_mut_ptr()))?;\n             cvt(libc::pthread_sigmask(libc::SIG_SETMASK, set.as_ptr(), ptr::null_mut()))?;\n-            let ret = sys::signal(libc::SIGPIPE, libc::SIG_DFL);\n-            if ret == libc::SIG_ERR {\n-                return Err(io::Error::last_os_error());\n+\n+            #[cfg(target_os = \"android\")] // see issue #88585\n+            {\n+                let mut action: libc::sigaction = mem::zeroed();\n+                action.sa_sigaction = libc::SIG_DFL;\n+                cvt(libc::sigaction(libc::SIGPIPE, &action, ptr::null_mut()))?;\n+            }\n+            #[cfg(not(target_os = \"android\"))]\n+            {\n+                let ret = sys::signal(libc::SIGPIPE, libc::SIG_DFL);\n+                if ret == libc::SIG_ERR {\n+                    return Err(io::Error::last_os_error());\n+                }\n             }\n         }\n "}]}