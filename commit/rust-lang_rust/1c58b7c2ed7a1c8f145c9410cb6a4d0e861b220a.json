{"sha": "1c58b7c2ed7a1c8f145c9410cb6a4d0e861b220a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNThiN2MyZWQ3YTFjOGYxNDVjOTQxMGNiNmE0ZDBlODYxYjIyMGE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-11T19:10:42Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-11T19:10:42Z"}, "message": "Add hacky stub version of CheckedBinaryOp.", "tree": {"sha": "6504d2dec3a9e6326886a7a3ec25f0d32f5ae966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6504d2dec3a9e6326886a7a3ec25f0d32f5ae966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c58b7c2ed7a1c8f145c9410cb6a4d0e861b220a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c58b7c2ed7a1c8f145c9410cb6a4d0e861b220a", "html_url": "https://github.com/rust-lang/rust/commit/1c58b7c2ed7a1c8f145c9410cb6a4d0e861b220a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c58b7c2ed7a1c8f145c9410cb6a4d0e861b220a/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71188ea2dfd025a9cbb2476d06881c9f70ce0ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/71188ea2dfd025a9cbb2476d06881c9f70ce0ec8", "html_url": "https://github.com/rust-lang/rust/commit/71188ea2dfd025a9cbb2476d06881c9f70ce0ec8"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "37113f38731973c8c63d699a8047bed51e609ca5", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1c58b7c2ed7a1c8f145c9410cb6a4d0e861b220a/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c58b7c2ed7a1c8f145c9410cb6a4d0e861b220a/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=1c58b7c2ed7a1c8f145c9410cb6a4d0e861b220a", "patch": "@@ -861,7 +861,24 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_primval(dest, val)?;\n             }\n \n-            CheckedBinaryOp(..) => unimplemented!(),\n+            // FIXME(solson): Factor this out with BinaryOp.\n+            CheckedBinaryOp(bin_op, ref left, ref right) => {\n+                let left_ptr = self.eval_operand(left)?;\n+                let left_ty = self.operand_ty(left);\n+                let left_val = self.read_primval(left_ptr, left_ty)?;\n+\n+                let right_ptr = self.eval_operand(right)?;\n+                let right_ty = self.operand_ty(right);\n+                let right_val = self.read_primval(right_ptr, right_ty)?;\n+\n+                let val = primval::binary_op(bin_op, left_val, right_val)?;\n+                self.memory.write_primval(dest, val)?;\n+\n+                // FIXME(solson): Find the result type size properly. Perhaps refactor out\n+                // Projection calculations so we can do the equivalent of `dest.1` here.\n+                let s = self.type_size(left_ty, self.substs());\n+                self.memory.write_bool(dest.offset(s as isize), false)?;\n+            }\n \n             UnaryOp(un_op, ref operand) => {\n                 let ptr = self.eval_operand(operand)?;"}]}