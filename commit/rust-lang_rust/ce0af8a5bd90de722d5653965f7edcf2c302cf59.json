{"sha": "ce0af8a5bd90de722d5653965f7edcf2c302cf59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMGFmOGE1YmQ5MGRlNzIyZDU2NTM5NjVmN2VkY2YyYzMwMmNmNTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-21T21:56:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T21:56:19Z"}, "message": "Rollup merge of #70051 - Zoxc:opt-find, r=eddyb\n\nAllow `hir().find` to return `None`\n\nFixes https://github.com/rust-lang/rust/issues/70041\n\nr? @eddyb", "tree": {"sha": "677a3047d3c4755e04236cb7421bacb7f9c540fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677a3047d3c4755e04236cb7421bacb7f9c540fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce0af8a5bd90de722d5653965f7edcf2c302cf59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedo2DCRBK7hj4Ov3rIwAAdHIIAIpnGJYwBCLiwtfgNvzHlNLD\niOeiDD6+ENYiNKRZneRZSlMd5dc70JMy72En9eF/a8woumANY0UR/Tpne+mmPq6y\ngEdTDAU8KJO3jm5Flfhb7f30Q9Oih/hZBWR2vf+uw5jPo/kMBL+Fgww/JHFNSlf2\nvRcrf9MhZjt7qLMk5FRNxzr3lGZWQWIcS52BjLtwAxMLB28SEaiAvbCAw62kFcNO\nCtIKXLGstDwJusz07QkddXQ1RsxNEJEuQCU5qG9JwOddmbO6O+McygMh1VwXGr8c\nKYTCg91UoRhsM2hI496OtNPImCt9Ilyd1WU13sqAIdQtyvVt1cP0ZUJaze/m3H0=\n=8fJY\n-----END PGP SIGNATURE-----\n", "payload": "tree 677a3047d3c4755e04236cb7421bacb7f9c540fb\nparent 834ed36a532381aac4cb23d607e6522dff0ca244\nparent 0aa15d048573d4fd0453e1da301857d7ca1faf7f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584827779 +0100\ncommitter GitHub <noreply@github.com> 1584827779 +0100\n\nRollup merge of #70051 - Zoxc:opt-find, r=eddyb\n\nAllow `hir().find` to return `None`\n\nFixes https://github.com/rust-lang/rust/issues/70041\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0af8a5bd90de722d5653965f7edcf2c302cf59", "html_url": "https://github.com/rust-lang/rust/commit/ce0af8a5bd90de722d5653965f7edcf2c302cf59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce0af8a5bd90de722d5653965f7edcf2c302cf59/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "834ed36a532381aac4cb23d607e6522dff0ca244", "url": "https://api.github.com/repos/rust-lang/rust/commits/834ed36a532381aac4cb23d607e6522dff0ca244", "html_url": "https://github.com/rust-lang/rust/commit/834ed36a532381aac4cb23d607e6522dff0ca244"}, {"sha": "0aa15d048573d4fd0453e1da301857d7ca1faf7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa15d048573d4fd0453e1da301857d7ca1faf7f", "html_url": "https://github.com/rust-lang/rust/commit/0aa15d048573d4fd0453e1da301857d7ca1faf7f"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "49b7ce3445ba827901fc2cebdca8326e59307ccf", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ce0af8a5bd90de722d5653965f7edcf2c302cf59", "patch": "@@ -337,23 +337,28 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn find_entry(&self, id: HirId) -> Option<Entry<'hir>> {\n-        Some(self.get_entry(id))\n-    }\n-\n-    fn get_entry(&self, id: HirId) -> Entry<'hir> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n             let owner = self.tcx.hir_owner(id.owner);\n-            Entry { parent: owner.parent, node: owner.node }\n+            owner.map(|owner| Entry { parent: owner.parent, node: owner.node })\n         } else {\n             let owner = self.tcx.hir_owner_nodes(id.owner);\n-            let node = owner.nodes[id.local_id].as_ref().unwrap();\n-            // FIXME(eddyb) use a single generic type insted of having both\n-            // `Entry` and `ParentedNode`, which are effectively the same.\n-            // Alternatively, rewrite code using `Entry` to use `ParentedNode`.\n-            Entry { parent: HirId { owner: id.owner, local_id: node.parent }, node: node.node }\n+            owner.and_then(|owner| {\n+                let node = owner.nodes[id.local_id].as_ref();\n+                // FIXME(eddyb) use a single generic type insted of having both\n+                // `Entry` and `ParentedNode`, which are effectively the same.\n+                // Alternatively, rewrite code using `Entry` to use `ParentedNode`.\n+                node.map(|node| Entry {\n+                    parent: HirId { owner: id.owner, local_id: node.parent },\n+                    node: node.node,\n+                })\n+            })\n         }\n     }\n \n+    fn get_entry(&self, id: HirId) -> Entry<'hir> {\n+        self.find_entry(id).unwrap()\n+    }\n+\n     pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n         match self.find(id).unwrap() {\n             Node::Item(item) => item,\n@@ -376,7 +381,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.tcx.hir_owner_nodes(id.hir_id.owner).bodies.get(&id.hir_id.local_id).unwrap()\n+        self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies.get(&id.hir_id.local_id).unwrap()\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n@@ -536,8 +541,9 @@ impl<'hir> Map<'hir> {\n \n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {\n-        let node = self.get_entry(hir_id).node;\n-        if let Node::Crate(..) = node { None } else { Some(node) }\n+        self.find_entry(hir_id).and_then(|entry| {\n+            if let Node::Crate(..) = entry.node { None } else { Some(entry.node) }\n+        })\n     }\n \n     /// Similar to `get_parent`; returns the parent HIR Id, or just `hir_id` if there"}, {"sha": "ce8e1f48daa77dcf5c0e925b90e743c3a7dca14b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ce0af8a5bd90de722d5653965f7edcf2c302cf59", "patch": "@@ -78,9 +78,8 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let module = hir.as_local_hir_id(id.to_def_id()).unwrap();\n         &tcx.untracked_crate.modules[&module]\n     };\n-    providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature.unwrap();\n-    providers.hir_owner_nodes = |tcx, id| {\n-        tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|nodes| &**nodes).unwrap()\n-    };\n+    providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n+    providers.hir_owner_nodes =\n+        |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|nodes| &**nodes);\n     map::provide(providers);\n }"}, {"sha": "54f5103f736ec07875cb2174d5176415dbf0e1e8", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=ce0af8a5bd90de722d5653965f7edcf2c302cf59", "patch": "@@ -76,7 +76,7 @@ rustc_queries! {\n         //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner(key: LocalDefId) -> &'tcx crate::hir::Owner<'tcx> {\n+        query hir_owner(key: LocalDefId) -> Option<&'tcx crate::hir::Owner<'tcx>> {\n             eval_always\n             desc { |tcx| \"HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n@@ -85,7 +85,7 @@ rustc_queries! {\n         //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner_nodes(key: LocalDefId) -> &'tcx crate::hir::OwnerNodes<'tcx> {\n+        query hir_owner_nodes(key: LocalDefId) -> Option<&'tcx crate::hir::OwnerNodes<'tcx>> {\n             eval_always\n             desc { |tcx| \"HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }"}, {"sha": "22e42295eedf302a992441e24eb303f17c838c92", "filename": "src/test/ui/issues/issue-70041.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs?ref=ce0af8a5bd90de722d5653965f7edcf2c302cf59", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --edition=2018\n+// run-pass\n+\n+macro_rules! regex {\n+    //~^ WARN unused macro definition\n+    () => {};\n+}\n+\n+#[allow(dead_code)]\n+use regex;\n+//~^ WARN unused import\n+\n+fn main() {}"}, {"sha": "b180175c5ab76a7a5750ea1cd0b94942d33bfff6", "filename": "src/test/ui/issues/issue-70041.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Ftest%2Fui%2Fissues%2Fissue-70041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce0af8a5bd90de722d5653965f7edcf2c302cf59/src%2Ftest%2Fui%2Fissues%2Fissue-70041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70041.stderr?ref=ce0af8a5bd90de722d5653965f7edcf2c302cf59", "patch": "@@ -0,0 +1,19 @@\n+warning: unused macro definition\n+  --> $DIR/issue-70041.rs:4:1\n+   |\n+LL | / macro_rules! regex {\n+LL | |\n+LL | |     () => {};\n+LL | | }\n+   | |_^\n+   |\n+   = note: `#[warn(unused_macros)]` on by default\n+\n+warning: unused import: `regex`\n+  --> $DIR/issue-70041.rs:10:5\n+   |\n+LL | use regex;\n+   |     ^^^^^\n+   |\n+   = note: `#[warn(unused_imports)]` on by default\n+"}]}