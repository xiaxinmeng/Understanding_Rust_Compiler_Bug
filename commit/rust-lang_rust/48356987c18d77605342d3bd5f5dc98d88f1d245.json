{"sha": "48356987c18d77605342d3bd5f5dc98d88f1d245", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MzU2OTg3YzE4ZDc3NjA1MzQyZDNiZDVmNWRjOThkODhmMWQyNDU=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-06-12T07:59:22Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-06-14T07:13:35Z"}, "message": "On-demandify extern_crate", "tree": {"sha": "760b1bb1c42113f269a142fc37861f2ce910fabe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/760b1bb1c42113f269a142fc37861f2ce910fabe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48356987c18d77605342d3bd5f5dc98d88f1d245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48356987c18d77605342d3bd5f5dc98d88f1d245", "html_url": "https://github.com/rust-lang/rust/commit/48356987c18d77605342d3bd5f5dc98d88f1d245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48356987c18d77605342d3bd5f5dc98d88f1d245/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0", "html_url": "https://github.com/rust-lang/rust/commit/b0f05d4bc5f6ee7d6f5e10f20675a7a7076520b0"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "0a4cc937739a30491f0b177c9d73e2eba82ae769", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=48356987c18d77605342d3bd5f5dc98d88f1d245", "patch": "@@ -254,7 +254,6 @@ pub trait CrateStore {\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n     fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool;\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;\n-    fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>;\n     /// The name of the crate as it is referred to in source code of the current\n     /// crate.\n     fn crate_name(&self, cnum: CrateNum) -> Symbol;\n@@ -374,7 +373,6 @@ impl CrateStore for DummyCrateStore {\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         bug!(\"panic_strategy\")\n     }\n-    fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate> { bug!(\"extern_crate\") }\n     fn crate_name(&self, cnum: CrateNum) -> Symbol { bug!(\"crate_name\") }\n     fn original_crate_name(&self, cnum: CrateNum) -> Symbol {\n         bug!(\"original_crate_name\")"}, {"sha": "e63fe42877fedb735024659d3b9401b6f5156131", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=48356987c18d77605342d3bd5f5dc98d88f1d245", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 //\n                 // Returns `None` for the local crate.\n                 if cnum != LOCAL_CRATE {\n-                    let opt_extern_crate = self.sess.cstore.extern_crate(cnum);\n+                    let opt_extern_crate = self.extern_crate(cnum);\n                     let opt_extern_crate = opt_extern_crate.and_then(|extern_crate| {\n                         if extern_crate.direct {\n                             Some(extern_crate.def_id)\n@@ -136,8 +136,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             // If `cur_def` is a direct or injected extern crate, push the path to the crate\n             // followed by the path to the item within the crate and return.\n             if cur_def.index == CRATE_DEF_INDEX {\n-                match self.sess.cstore.extern_crate(cur_def.krate) {\n-                    Some(extern_crate) if extern_crate.direct => {\n+                match *self.extern_crate(cur_def.krate) {\n+                    Some(ref extern_crate) if extern_crate.direct => {\n                         self.push_item_path(buffer, extern_crate.def_id);\n                         cur_path.iter().rev().map(|segment| buffer.push(&segment.as_str())).count();\n                         return true;"}, {"sha": "27713f728ac5b50e7705726d7b8077417d7ec29d", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=48356987c18d77605342d3bd5f5dc98d88f1d245", "patch": "@@ -13,7 +13,7 @@ use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use hir::def::Def;\n use hir;\n use middle::const_val;\n-use middle::cstore::LinkagePreference;\n+use middle::cstore::{ExternCrate, LinkagePreference};\n use middle::privacy::AccessLevels;\n use middle::region::RegionMaps;\n use mir;\n@@ -501,6 +501,12 @@ impl<'tcx> QueryDescription for queries::is_panic_runtime<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::extern_crate<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        \"getting crate's ExternCrateData\".to_string()\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -963,6 +969,8 @@ define_maps! { <'tcx>\n \n     [] is_allocator: MetaDataByCrateNum(CrateNum) -> bool,\n     [] is_panic_runtime: MetaDataByCrateNum(CrateNum) -> bool,\n+\n+    [] extern_crate: MetaDataByCrateNum(CrateNum) -> Rc<Option<ExternCrate>>,\n }\n \n fn type_param_predicates((item_id, param_id): (DefId, DefId)) -> DepConstructor {"}, {"sha": "9522d9625c947d1135a8425849bf2db54ae5e1d1", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=48356987c18d77605342d3bd5f5dc98d88f1d245", "patch": "@@ -14,7 +14,7 @@ use schema;\n \n use rustc::dep_graph::DepTrackingMapConfig;\n use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n-                            ExternCrate, NativeLibrary, MetadataLoader, LinkMeta,\n+                            NativeLibrary, MetadataLoader, LinkMeta,\n                             LinkagePreference, LoadedMacro, EncodedMetadata};\n use rustc::hir::def;\n use rustc::middle::lang_items;\n@@ -156,6 +156,7 @@ provide! { <'tcx> tcx, def_id, cdata, cnum,\n         dylib_dependency_formats => { Rc::new(cdata.get_dylib_dependency_formats(&tcx.dep_graph)) }\n         is_allocator => { cdata.is_allocator(&tcx.dep_graph) }\n         is_panic_runtime => { cdata.is_panic_runtime(&tcx.dep_graph) }\n+        extern_crate => { Rc::new(cdata.extern_crate.get()) }\n     }\n }\n \n@@ -283,11 +284,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).name()\n     }\n \n-    fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>\n-    {\n-        self.get_crate_data(cnum).extern_crate.get()\n-    }\n-\n     fn crate_hash(&self, cnum: CrateNum) -> Svh\n     {\n         self.get_crate_hash(cnum)"}, {"sha": "814a45ef636bede48f5dea209cec8b64f2c1aab2", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48356987c18d77605342d3bd5f5dc98d88f1d245/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=48356987c18d77605342d3bd5f5dc98d88f1d245", "patch": "@@ -107,7 +107,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let mut result = Vec::new();\n \n         for n in self.tcx.sess.cstore.crates() {\n-            let span = match self.tcx.sess.cstore.extern_crate(n) {\n+            let span = match *self.tcx.extern_crate(n) {\n                 Some(ref c) => c.span,\n                 None => {\n                     debug!(\"Skipping crate {}, no data\", n);"}]}