{"sha": "2bd49c34e57d444bad1291d7e6146cc2f6409536", "node_id": "C_kwDOAAsO6NoAKDJiZDQ5YzM0ZTU3ZDQ0NGJhZDEyOTFkN2U2MTQ2Y2MyZjY0MDk1MzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-27T07:25:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-27T07:25:10Z"}, "message": "Rollup merge of #103525 - oli-obk:const_impl_on_non_const_trait, r=lcnr\n\nMove a wf-check into the site where the value is instantiated\n\nr? ``@lcnr``", "tree": {"sha": "87ad0b6866ea9906f8bd9ac2cd055d17a1471bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ad0b6866ea9906f8bd9ac2cd055d17a1471bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd49c34e57d444bad1291d7e6146cc2f6409536", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWjJWCRBK7hj4Ov3rIwAAoLkIAEIFiiOqKzNbVUWhXWeuE01Z\nA/LhZD/2oAZZgz38bf4qGpNAO9EnsS5ns1QCQNVfjuP3ssV+ppvLolYH/ZpvEQom\nUdbJVCjuT/kLIYAHP5bm0WC2iBAECC7v3GquZWGNOxidmxHgw/IqZ4uLOljMYwFt\np47DBdNKq4wcRgdnc6ktGTQGMKHoxeBe3Y72ywMo0PTyDNEHgoPT45TGxSCph6a5\n/jVfvKp9dlvhR0Zw3vdneC4IfXqEP5eyDtM55Y9wpJamG9ZDEHzgBOQqXwCj0PXy\ngvtTj661RBU9IkznloC5wROH7shqMqQbGipNznp7P0PRhrRhnzYtPL8i8tMLFOA=\n=vaTn\n-----END PGP SIGNATURE-----\n", "payload": "tree 87ad0b6866ea9906f8bd9ac2cd055d17a1471bce\nparent d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc\nparent 1c26a278f30a173a47606695211b586451396fbf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666855510 +0200\ncommitter GitHub <noreply@github.com> 1666855510 +0200\n\nRollup merge of #103525 - oli-obk:const_impl_on_non_const_trait, r=lcnr\n\nMove a wf-check into the site where the value is instantiated\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd49c34e57d444bad1291d7e6146cc2f6409536", "html_url": "https://github.com/rust-lang/rust/commit/2bd49c34e57d444bad1291d7e6146cc2f6409536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd49c34e57d444bad1291d7e6146cc2f6409536/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc", "html_url": "https://github.com/rust-lang/rust/commit/d7ad6ad9adb90acbd0f0ba8eefacfa9bd9e632bc"}, {"sha": "1c26a278f30a173a47606695211b586451396fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c26a278f30a173a47606695211b586451396fbf", "html_url": "https://github.com/rust-lang/rust/commit/1c26a278f30a173a47606695211b586451396fbf"}], "stats": {"total": 185, "additions": 126, "deletions": 59}, "files": [{"sha": "7ac44312695d9aac94ac0f20648763a9e229b564", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -137,3 +137,12 @@ hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(l\n hir_analysis_missing_parentheses_in_range = can't call method `{$method_name}` on type `{$ty_str}`\n \n hir_analysis_add_missing_parentheses_in_range = you must surround the range in parentheses to call its `{$func_name}` function\n+\n+hir_analysis_const_impl_for_non_const_trait =\n+    const `impl` for trait `{$trait_name}` which is not marked with `#[const_trait]`\n+    .suggestion = mark `{$trait_name}` as const\n+    .note = marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+    .adding = adding a non-const method body in the future would be a breaking change\n+\n+hir_analysis_const_bound_for_non_const_trait =\n+    ~const can only be applied to `#[const_trait]` traits"}, {"sha": "6baf98449775da892321c3a68134e0038a11709b", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -36,7 +36,7 @@ use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECT\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::astconv_object_safety_violations;\n@@ -275,6 +275,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             item_segment.args(),\n             item_segment.infer_args,\n             None,\n+            None,\n         );\n         if let Some(b) = item_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n@@ -324,6 +325,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         generic_args: &'a hir::GenericArgs<'_>,\n         infer_args: bool,\n         self_ty: Option<Ty<'tcx>>,\n+        constness: Option<ty::BoundConstness>,\n     ) -> (SubstsRef<'tcx>, GenericArgCountResult) {\n         // If the type is parameterized by this region, then replace this\n         // region with the current anon region binding (in other words,\n@@ -534,6 +536,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             &mut substs_ctx,\n         );\n \n+        if let Some(ty::BoundConstness::ConstIfConst) = constness\n+            && generics.has_self && !tcx.has_attr(def_id, sym::const_trait)\n+        {\n+            tcx.sess.emit_err(crate::errors::ConstBoundForNonConstTrait { span } );\n+        }\n+\n         (substs, arg_count)\n     }\n \n@@ -601,6 +609,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             item_segment.args(),\n             item_segment.infer_args,\n             None,\n+            None,\n         );\n \n         if let Some(b) = item_segment.args().bindings.first() {\n@@ -620,6 +629,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         trait_ref: &hir::TraitRef<'_>,\n         self_ty: Ty<'tcx>,\n+        constness: ty::BoundConstness,\n     ) -> ty::TraitRef<'tcx> {\n         self.prohibit_generics(trait_ref.path.segments.split_last().unwrap().1.iter(), |_| {});\n \n@@ -629,6 +639,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             self_ty,\n             trait_ref.path.segments.last().unwrap(),\n             true,\n+            Some(constness),\n         )\n     }\n \n@@ -655,6 +666,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             Some(self_ty),\n+            Some(constness),\n         );\n \n         let tcx = self.tcx();\n@@ -680,6 +692,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 speculative,\n                 &mut dup_bindings,\n                 binding_span.unwrap_or(binding.span),\n+                constness,\n             );\n             // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n@@ -783,13 +796,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         trait_segment: &hir::PathSegment<'_>,\n         is_impl: bool,\n+        constness: Option<ty::BoundConstness>,\n     ) -> ty::TraitRef<'tcx> {\n         let (substs, _) = self.create_substs_for_ast_trait_ref(\n             span,\n             trait_def_id,\n             self_ty,\n             trait_segment,\n             is_impl,\n+            constness,\n         );\n         if let Some(b) = trait_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n@@ -805,6 +820,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         trait_segment: &'a hir::PathSegment<'a>,\n         is_impl: bool,\n+        constness: Option<ty::BoundConstness>,\n     ) -> (SubstsRef<'tcx>, GenericArgCountResult) {\n         self.complain_about_internal_fn_trait(span, trait_def_id, trait_segment, is_impl);\n \n@@ -816,6 +832,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             trait_segment.args(),\n             trait_segment.infer_args,\n             Some(self_ty),\n+            constness,\n         )\n     }\n \n@@ -1027,6 +1044,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         speculative: bool,\n         dup_bindings: &mut FxHashMap<DefId, Span>,\n         path_span: Span,\n+        constness: ty::BoundConstness,\n     ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n@@ -1122,10 +1140,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 trait_ref.substs,\n             );\n \n-            debug!(\n-                \"add_predicates_for_ast_type_binding: substs for trait-ref and assoc_item: {:?}\",\n-                substs_trait_ref_and_assoc_item\n-            );\n+            debug!(?substs_trait_ref_and_assoc_item);\n \n             ty::ProjectionTy {\n                 item_def_id: assoc_item.def_id,\n@@ -1146,8 +1161,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     tcx.collect_constrained_late_bound_regions(&projection_ty);\n                 let late_bound_in_ty =\n                     tcx.collect_referenced_late_bound_regions(&trait_ref.rebind(ty));\n-                debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n-                debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n+                debug!(?late_bound_in_trait_ref);\n+                debug!(?late_bound_in_ty);\n \n                 // FIXME: point at the type params that don't have appropriate lifetimes:\n                 // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n@@ -1648,6 +1663,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     // Checks that `bounds` contains exactly one element and reports appropriate\n     // errors otherwise.\n+    #[instrument(level = \"debug\", skip(self, all_candidates, ty_param_name, is_equality), ret)]\n     fn one_bound_for_assoc_type<I>(\n         &self,\n         all_candidates: impl Fn() -> I,\n@@ -1677,10 +1693,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 return Err(reported);\n             }\n         };\n-        debug!(\"one_bound_for_assoc_type: bound = {:?}\", bound);\n+        debug!(?bound);\n \n         if let Some(bound2) = next_cand {\n-            debug!(\"one_bound_for_assoc_type: bound2 = {:?}\", bound2);\n+            debug!(?bound2);\n \n             let is_equality = is_equality();\n             let bounds = IntoIterator::into_iter([bound, bound2]).chain(matching_candidates);\n@@ -1776,6 +1792,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     // parameter or `Self`.\n     // NOTE: When this function starts resolving `Trait::AssocTy` successfully\n     // it should also start reporting the `BARE_TRAIT_OBJECTS` lint.\n+    #[instrument(level = \"debug\", skip(self, hir_ref_id, span, qself, assoc_segment), fields(assoc_ident=?assoc_segment.ident), ret)]\n     pub fn associated_path_to_ty(\n         &self,\n         hir_ref_id: hir::HirId,\n@@ -1793,8 +1810,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             Res::Err\n         };\n \n-        debug!(\"associated_path_to_ty: {:?}::{}\", qself_ty, assoc_ident);\n-\n         // Check if we have an enum variant.\n         let mut variant_resolution = None;\n         if let ty::Adt(adt_def, _) = qself_ty.kind() {\n@@ -2050,6 +2065,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         item_def_id: DefId,\n         trait_segment: &hir::PathSegment<'_>,\n         item_segment: &hir::PathSegment<'_>,\n+        constness: ty::BoundConstness,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n@@ -2094,8 +2110,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"qpath_to_ty: self_type={:?}\", self_ty);\n \n-        let trait_ref =\n-            self.ast_path_to_mono_trait_ref(span, trait_def_id, self_ty, trait_segment, false);\n+        let trait_ref = self.ast_path_to_mono_trait_ref(\n+            span,\n+            trait_def_id,\n+            self_ty,\n+            trait_segment,\n+            false,\n+            Some(constness),\n+        );\n \n         let item_substs = self.create_substs_for_associated_item(\n             span,\n@@ -2534,12 +2556,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             Res::Def(DefKind::AssocTy, def_id) => {\n                 debug_assert!(path.segments.len() >= 2);\n                 self.prohibit_generics(path.segments[..path.segments.len() - 2].iter(), |_| {});\n+                // HACK: until we support `<Type as ~const Trait>`, assume all of them are.\n+                let constness = if tcx.has_attr(tcx.parent(def_id), sym::const_trait) {\n+                    ty::BoundConstness::ConstIfConst\n+                } else {\n+                    ty::BoundConstness::NotConst\n+                };\n                 self.qpath_to_ty(\n                     span,\n                     opt_self_ty,\n                     def_id,\n                     &path.segments[path.segments.len() - 2],\n                     path.segments.last().unwrap(),\n+                    constness,\n                 )\n             }\n             Res::PrimTy(prim_ty) => {\n@@ -2658,6 +2687,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     &GenericArgs::none(),\n                     true,\n                     None,\n+                    None,\n                 );\n                 EarlyBinder(self.normalize_ty(span, tcx.at(span).type_of(def_id)))\n                     .subst(tcx, substs)\n@@ -2766,6 +2796,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self, hir_id, unsafety, abi, decl, generics, hir_ty), ret)]\n     pub fn ty_of_fn(\n         &self,\n         hir_id: hir::HirId,\n@@ -2775,8 +2806,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         generics: Option<&hir::Generics<'_>>,\n         hir_ty: Option<&hir::Ty<'_>>,\n     ) -> ty::PolyFnSig<'tcx> {\n-        debug!(\"ty_of_fn\");\n-\n         let tcx = self.tcx();\n         let bound_vars = tcx.late_bound_vars(hir_id);\n         debug!(?bound_vars);\n@@ -2826,7 +2855,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::FnRetTy::DefaultReturn(..) => tcx.mk_unit(),\n         };\n \n-        debug!(\"ty_of_fn: output_ty={:?}\", output_ty);\n+        debug!(?output_ty);\n \n         let fn_ty = tcx.mk_fn_sig(input_tys.into_iter(), output_ty, decl.c_variadic, unsafety, abi);\n         let bare_fn_ty = ty::Binder::bind_with_vars(fn_ty, bound_vars);\n@@ -2903,8 +2932,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(i), .. }) =\n                 hir.get(hir.get_parent_node(fn_hir_id)) else { bug!(\"ImplItem should have Impl parent\") };\n \n-        let trait_ref =\n-            self.instantiate_mono_trait_ref(i.of_trait.as_ref()?, self.ast_ty_to_ty(i.self_ty));\n+        let trait_ref = self.instantiate_mono_trait_ref(\n+            i.of_trait.as_ref()?,\n+            self.ast_ty_to_ty(i.self_ty),\n+            ty::BoundConstness::NotConst,\n+        );\n \n         let assoc = tcx.associated_items(trait_ref.def_id).find_by_name_and_kind(\n             tcx,"}, {"sha": "e261bb07f954541a4bd85390fe3b0d10c06ecedf", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -1143,7 +1143,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         }\n \n         ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), generics, .. }) => {\n-            // Do not try to inference the return type for a impl method coming from a trait\n+            // Do not try to infer the return type for a impl method coming from a trait\n             if let Item(hir::Item { kind: ItemKind::Impl(i), .. }) =\n                 tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n                 && i.of_trait.is_some()\n@@ -1286,15 +1286,46 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n \n fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n-    match tcx.hir().expect_item(def_id.expect_local()).kind {\n+    let item = tcx.hir().expect_item(def_id.expect_local());\n+    match item.kind {\n         hir::ItemKind::Impl(ref impl_) => impl_.of_trait.as_ref().map(|ast_trait_ref| {\n             let selfty = tcx.type_of(def_id);\n-            <dyn AstConv<'_>>::instantiate_mono_trait_ref(&icx, ast_trait_ref, selfty)\n+            <dyn AstConv<'_>>::instantiate_mono_trait_ref(\n+                &icx,\n+                ast_trait_ref,\n+                selfty,\n+                check_impl_constness(tcx, impl_.constness, ast_trait_ref),\n+            )\n         }),\n         _ => bug!(),\n     }\n }\n \n+fn check_impl_constness(\n+    tcx: TyCtxt<'_>,\n+    constness: hir::Constness,\n+    ast_trait_ref: &hir::TraitRef<'_>,\n+) -> ty::BoundConstness {\n+    match constness {\n+        hir::Constness::Const => {\n+            if let Some(trait_def_id) = ast_trait_ref.trait_def_id() && !tcx.has_attr(trait_def_id, sym::const_trait) {\n+                let trait_name = tcx.item_name(trait_def_id).to_string();\n+                tcx.sess.emit_err(errors::ConstImplForNonConstTrait {\n+                    trait_ref_span: ast_trait_ref.path.span,\n+                    trait_name,\n+                    local_trait_span: trait_def_id.as_local().map(|_| tcx.def_span(trait_def_id).shrink_to_lo()),\n+                    marking: (),\n+                    adding: (),\n+                });\n+                ty::BoundConstness::NotConst\n+            } else {\n+                ty::BoundConstness::ConstIfConst\n+            }\n+        },\n+        hir::Constness::NotConst => ty::BoundConstness::NotConst,\n+    }\n+}\n+\n fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n     let item = tcx.hir().expect_item(def_id.expect_local());"}, {"sha": "bd0c1f5dd109860884c610498e1e8d0d9129814a", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -249,3 +249,24 @@ pub struct ExpectedUsedSymbol {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_const_impl_for_non_const_trait)]\n+pub struct ConstImplForNonConstTrait {\n+    #[primary_span]\n+    pub trait_ref_span: Span,\n+    pub trait_name: String,\n+    #[suggestion(applicability = \"machine-applicable\", code = \"#[const_trait]\")]\n+    pub local_trait_span: Option<Span>,\n+    #[note]\n+    pub marking: (),\n+    #[note(adding)]\n+    pub adding: (),\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_const_bound_for_non_const_trait)]\n+pub struct ConstBoundForNonConstTrait {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "30feabe1a09591913d4f60a44edeb4f9dee11b14", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -303,32 +303,6 @@ impl<'tcx> WfPredicates<'tcx> {\n         let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n             self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n         } else {\n-            if !tcx.has_attr(trait_ref.def_id, rustc_span::sym::const_trait) {\n-                if let Some(item) = self.item &&\n-                   let hir::ItemKind::Impl(impl_) = item.kind &&\n-                   let Some(trait_) = &impl_.of_trait &&\n-                   let Some(def_id) = trait_.trait_def_id() &&\n-                   def_id == trait_ref.def_id\n-                {\n-                    let trait_name = tcx.item_name(def_id);\n-                    let mut err = tcx.sess.struct_span_err(\n-                        self.span,\n-                        &format!(\"const `impl` for trait `{trait_name}` which is not marked with `#[const_trait]`\"),\n-                    );\n-                    if def_id.is_local() {\n-                        let sp = tcx.def_span(def_id).shrink_to_lo();\n-                        err.span_suggestion(sp, &format!(\"mark `{trait_name}` as const\"), \"#[const_trait]\", rustc_errors::Applicability::MachineApplicable);\n-                    }\n-                    err.note(\"marking a trait with `#[const_trait]` ensures all default method bodies are `const`\");\n-                    err.note(\"adding a non-const method body in the future would be a breaking change\");\n-                    err.emit();\n-                } else {\n-                    tcx.sess.span_err(\n-                        self.span,\n-                        \"~const can only be applied to `#[const_trait]` traits\",\n-                    );\n-                }\n-            }\n             self.nominal_obligations(trait_ref.def_id, trait_ref.substs)\n         };\n "}, {"sha": "d4f42b787e4da40339f0572b8007f55cc5433163", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.nn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -1,8 +1,8 @@\n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-2.rs:11:12\n+  --> $DIR/super-traits-fail-2.rs:11:19\n    |\n LL | trait Bar: ~const Foo {}\n-   |            ^^^^^^^^^^\n+   |                   ^^^\n \n error: aborting due to previous error\n "}, {"sha": "d4f42b787e4da40339f0572b8007f55cc5433163", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.ny.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -1,8 +1,8 @@\n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-2.rs:11:12\n+  --> $DIR/super-traits-fail-2.rs:11:19\n    |\n LL | trait Bar: ~const Foo {}\n-   |            ^^^^^^^^^^\n+   |                   ^^^\n \n error: aborting due to previous error\n "}, {"sha": "d433e1cfa698acd8d153a904cae92acf669002d1", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.nn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -1,14 +1,14 @@\n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:12:12\n+  --> $DIR/super-traits-fail-3.rs:12:19\n    |\n LL | trait Bar: ~const Foo {}\n-   |            ^^^^^^^^^^\n+   |                   ^^^\n \n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:15:17\n+  --> $DIR/super-traits-fail-3.rs:15:24\n    |\n LL | const fn foo<T: ~const Bar>(x: &T) {\n-   |                 ^^^^^^^^^^\n+   |                        ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2a7e8e00bc78cf8298be44d13b45084f8970580b", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.ny.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -1,8 +1,8 @@\n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:12:12\n+  --> $DIR/super-traits-fail-3.rs:12:19\n    |\n LL | trait Bar: ~const Foo {}\n-   |            ^^^^^^^^^^\n+   |                   ^^^\n \n error: aborting due to previous error\n "}, {"sha": "e5978c12a09814ff83bda0c965eddd265192369a", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.yn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd49c34e57d444bad1291d7e6146cc2f6409536/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr?ref=2bd49c34e57d444bad1291d7e6146cc2f6409536", "patch": "@@ -1,8 +1,8 @@\n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:15:17\n+  --> $DIR/super-traits-fail-3.rs:15:24\n    |\n LL | const fn foo<T: ~const Bar>(x: &T) {\n-   |                 ^^^^^^^^^^\n+   |                        ^^^\n \n error: aborting due to previous error\n "}]}