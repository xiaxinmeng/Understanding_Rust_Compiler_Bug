{"sha": "c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MmUxZjJkMGUwYjdmZWM5MjY1ZWFjODUxYjJhYzhiNTAwZWM0Y2M=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-07-19T01:36:19Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-07-30T16:16:27Z"}, "message": "Point at type ascription before macro invocation on expansion parse error", "tree": {"sha": "592ca5d1ec1cd6cee76aae75db74d347583b7a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592ca5d1ec1cd6cee76aae75db74d347583b7a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "html_url": "https://github.com/rust-lang/rust/commit/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b88a9eba8abbac87eddcb2998beea09589c2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b88a9eba8abbac87eddcb2998beea09589c2c9", "html_url": "https://github.com/rust-lang/rust/commit/04b88a9eba8abbac87eddcb2998beea09589c2c9"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "76b67366f067120b494f83a57479375ffbe041d1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -1303,6 +1303,7 @@ pub struct Mac_ {\n     pub path: Path,\n     pub delim: MacDelimiter,\n     pub tts: TokenStream,\n+    pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "239fe55672e1293d95ed170f63100865794b360f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -713,6 +713,7 @@ pub struct ExpansionData {\n     pub depth: usize,\n     pub module: Rc<ModuleData>,\n     pub directory_ownership: DirectoryOwnership,\n+    pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n /// One of these is made during expansion and incrementally updated as we go;\n@@ -743,6 +744,7 @@ impl<'a> ExtCtxt<'a> {\n                 depth: 0,\n                 module: Rc::new(ModuleData { mod_path: Vec::new(), directory: PathBuf::new() }),\n                 directory_ownership: DirectoryOwnership::Owned { relative: None },\n+                prior_type_ascription: None,\n             },\n             expansions: FxHashMap::default(),\n             allow_derive_markers: [sym::rustc_attrs, sym::structural_match][..].into(),"}, {"sha": "6355f88195f03c469c558897f182568ddc49b2b0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -517,16 +517,21 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     result\n                 }\n                 SyntaxExtensionKind::LegacyBang(expander) => {\n+                    let prev = self.cx.current_expansion.prior_type_ascription;\n+                    self.cx.current_expansion.prior_type_ascription =\n+                        mac.node.prior_type_ascription;\n                     let tok_result = expander.expand(self.cx, span, mac.node.stream());\n-                    if let Some(result) = fragment_kind.make_from(tok_result) {\n+                    let result = if let Some(result) = fragment_kind.make_from(tok_result) {\n                         result\n                     } else {\n                         let msg = format!(\"non-{kind} macro in {kind} position: {path}\",\n                                           kind = fragment_kind.name(), path = mac.node.path);\n                         self.cx.span_err(span, &msg);\n                         self.cx.trace_macros_diag();\n                         fragment_kind.dummy(span)\n-                    }\n+                    };\n+                    self.cx.current_expansion.prior_type_ascription = prev;\n+                    result\n                 }\n                 _ => unreachable!()\n             }"}, {"sha": "b2b17b0fb287391c07379d0647faefaf68030290", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -18,6 +18,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n             tts: TokenStream::empty().into(),\n             delim: ast::MacDelimiter::Brace,\n+            prior_type_ascription: None,\n         })\n     }\n "}, {"sha": "7d72a18ca3f6cafb72dd8e8f5ecbd6013c787367", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -173,6 +173,7 @@ fn generic_extension<'cx>(\n                 let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false, None);\n                 p.root_module_name =\n                     cx.current_expansion.module.mod_path.last().map(|id| id.as_str().to_string());\n+                p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n \n                 p.process_potential_macro_variable();\n                 // Let the context choose how to interpret the result."}, {"sha": "f215a321cb3c05bd7b02950e73cb9b4c5d821d07", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -530,7 +530,7 @@ pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n }\n \n pub fn noop_visit_mac<T: MutVisitor>(Spanned { node, span }: &mut Mac, vis: &mut T) {\n-    let Mac_ { path, delim: _, tts } = node;\n+    let Mac_ { path, delim: _, tts, .. } = node;\n     vis.visit_path(path);\n     vis.visit_tts(tts);\n     vis.visit_span(span);"}, {"sha": "d15419f615ff694bd561fd7dbb38705ecd216f75", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -1414,7 +1414,12 @@ impl<'a> Parser<'a> {\n             if self.eat(&token::Not) {\n                 // Macro invocation in type position\n                 let (delim, tts) = self.expect_delimited_token_tree()?;\n-                let node = Mac_ { path, tts, delim };\n+                let node = Mac_ {\n+                    path,\n+                    tts,\n+                    delim,\n+                    prior_type_ascription: self.last_type_ascription,\n+                };\n                 TyKind::Mac(respan(lo.to(self.prev_span), node))\n             } else {\n                 // Just a type path or bound list (trait object type) starting with a trait.\n@@ -2245,7 +2250,12 @@ impl<'a> Parser<'a> {\n                         // MACRO INVOCATION expression\n                         let (delim, tts) = self.expect_delimited_token_tree()?;\n                         hi = self.prev_span;\n-                        ex = ExprKind::Mac(respan(lo.to(hi), Mac_ { path, tts, delim }));\n+                        ex = ExprKind::Mac(respan(lo.to(hi), Mac_ {\n+                            path,\n+                            tts,\n+                            delim,\n+                            prior_type_ascription: self.last_type_ascription,\n+                        }));\n                     } else if self.check(&token::OpenDelim(token::Brace)) {\n                         if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n                             return expr;\n@@ -3971,7 +3981,12 @@ impl<'a> Parser<'a> {\n                         // Parse macro invocation\n                         self.bump();\n                         let (delim, tts) = self.expect_delimited_token_tree()?;\n-                        let mac = respan(lo.to(self.prev_span), Mac_ { path, tts, delim });\n+                        let mac = respan(lo.to(self.prev_span), Mac_ {\n+                            path,\n+                            tts,\n+                            delim,\n+                            prior_type_ascription: self.last_type_ascription,\n+                        });\n                         pat = PatKind::Mac(mac);\n                     }\n                     token::DotDotDot | token::DotDotEq | token::DotDot => {\n@@ -4417,7 +4432,12 @@ impl<'a> Parser<'a> {\n                 MacStmtStyle::NoBraces\n             };\n \n-            let mac = respan(lo.to(hi), Mac_ { path, tts, delim });\n+            let mac = respan(lo.to(hi), Mac_ {\n+                path,\n+                tts,\n+                delim,\n+                prior_type_ascription: self.last_type_ascription,\n+            });\n             let node = if delim == MacDelimiter::Brace ||\n                           self.token == token::Semi || self.token == token::Eof {\n                 StmtKind::Mac(P((mac, style, attrs.into())))\n@@ -7550,7 +7570,12 @@ impl<'a> Parser<'a> {\n             }\n \n             let hi = self.prev_span;\n-            let mac = respan(mac_lo.to(hi), Mac_ { path, tts, delim });\n+            let mac = respan(mac_lo.to(hi), Mac_ {\n+                path,\n+                tts,\n+                delim,\n+                prior_type_ascription: self.last_type_ascription,\n+            });\n             let item =\n                 self.mk_item(lo.to(hi), Ident::invalid(), ItemKind::Mac(mac), visibility, attrs);\n             return Ok(Some(item));\n@@ -7600,7 +7625,12 @@ impl<'a> Parser<'a> {\n                 self.expect(&token::Semi)?;\n             }\n \n-            Ok(Some(respan(lo.to(self.prev_span), Mac_ { path, tts, delim })))\n+            Ok(Some(respan(lo.to(self.prev_span), Mac_ {\n+                path,\n+                tts,\n+                delim,\n+                prior_type_ascription: self.last_type_ascription,\n+            })))\n         } else {\n             Ok(None)\n         }"}, {"sha": "9e27909dc9663a7c57bc22c0a54d7d5c1b8f8433", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -38,6 +38,7 @@ pub fn expand_assert<'cx>(\n             ))\n         }).into(),\n         delim: MacDelimiter::Parenthesis,\n+        prior_type_ascription: None,\n     };\n     let if_expr = cx.expr_if(\n         sp,"}, {"sha": "965bbe5ea41f7078e88452cb12b57b4a5ef46d2b", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=c82e1f2d0e0b7fec9265eac851b2ac8b500ec4cc", "patch": "@@ -2,11 +2,14 @@ error: expected type, found reserved keyword `box`\n   --> $DIR/issue-47666.rs:2:25\n    |\n LL |     let _ = Option:Some(vec![0, 1]);\n-   |                         ^^^^^^^^^^\n-   |                         |\n-   |                         expected type\n-   |                         in this macro invocation\n+   |                   -     ^^^^^^^^^^\n+   |                   |     |\n+   |                   |     expected type\n+   |                   |     in this macro invocation\n+   |                   help: maybe write a path separator here: `::`\n    |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}]}