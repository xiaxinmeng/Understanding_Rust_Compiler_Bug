{"sha": "f9ccd39ae38051463771495e03889bf3aeff616a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5Y2NkMzlhZTM4MDUxNDYzNzcxNDk1ZTAzODg5YmYzYWVmZjYxNmE=", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2020-08-06T07:36:57Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2020-10-13T16:50:54Z"}, "message": "documentation fix", "tree": {"sha": "c522d6ec3182ec1e2df1d510981b41db0a494568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c522d6ec3182ec1e2df1d510981b41db0a494568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9ccd39ae38051463771495e03889bf3aeff616a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAl+F2u4ACgkQPNdIZH7v\nY1kEvw/+ICopB23/lVW+W4dAzMzvokZuMMuQdo9HFqepEJMwjAN9lb8cND41vjGI\n7agSNC/6Y/IoM6Llqn/4/oHT2ZJxln5LIji72s784h9TFUra19udLHJF0vFvM+Nj\nP+g3SEJEub0cp/POD3+yF2tlDESAuBlgz2snI9ohBUiQ47j7MJ7kfFhamU4MK63s\nZo3g3CojTV9EVQiTQwLDqGz39UAV3YyGlIlGhvpu9cLZWRACmWzXjQFJMcrzHtQ9\nCkrtA6XdCojeOovZt9e3AJ4olkhQxPcIy1NVtBefcQveHA7/6IJfOVF1NAPsmc0r\noZQy+7wy46YwVraBwuac0Al0ZofWFvtiMXu3ubO81SKmfNN+HJjHv4sLUvl8iU4F\nlQ47J7n+s6jChOVRZR665hNJ+DTw+IU004Vdx+sxOeFJzCcAI+pWKpemluepLUqh\nCVfVxxPoEd2q84spVYfoYOHBtgUTr//x4oI2Zeir7FpC4YlWMZBRn/FeHaXn7oVw\nPq5r5qh2wqZ5aH7OHcI2t8RItCiSUVO433EmG2I236Lq/es/z93G8Iwte1YEc/UX\nlXVB8CUHjxQtBeWooZQNz7BJfy8dctZvy3ZZ2S0jyswyEI1ap8B4EclKQangHgRB\n23pQZ2AD2EWQ5/XVHpDRClesKbHEAdcWj8eFSYbaNGFSwmZ+KkQ=\n=aMIm\n-----END PGP SIGNATURE-----", "payload": "tree c522d6ec3182ec1e2df1d510981b41db0a494568\nparent d65c08e9cc164b7b44de53503fae859a4fafd976\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1596699417 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1602607854 +0800\n\ndocumentation fix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ccd39ae38051463771495e03889bf3aeff616a", "html_url": "https://github.com/rust-lang/rust/commit/f9ccd39ae38051463771495e03889bf3aeff616a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9ccd39ae38051463771495e03889bf3aeff616a/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d65c08e9cc164b7b44de53503fae859a4fafd976", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65c08e9cc164b7b44de53503fae859a4fafd976", "html_url": "https://github.com/rust-lang/rust/commit/d65c08e9cc164b7b44de53503fae859a4fafd976"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "38cb3c1701f928bf2124aa2e4a1a3ef5f9acb068", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9ccd39ae38051463771495e03889bf3aeff616a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ccd39ae38051463771495e03889bf3aeff616a/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=f9ccd39ae38051463771495e03889bf3aeff616a", "patch": "@@ -283,23 +283,27 @@ pub struct ScopeTree {\n     /// To see that this method works, consider:\n     ///\n     /// Let `D` be our binding/temporary and `U` be our other HIR node, with\n-    /// `HIR-postorder(U) < HIR-postorder(D)` (in our example, U would be\n-    /// the yield and D would be one of the calls). Let's show that\n-    /// `D` is storage-dead at `U`.\n+    /// `HIR-postorder(U) < HIR-postorder(D)`. Suppose, as in our example,\n+    /// U is the yield and D is one of the calls.\n+    /// Let's show that `D` is storage-dead at `U`.\n     ///\n     /// Remember that storage-live/storage-dead refers to the state of\n     /// the *storage*, and does not consider moves/drop flags.\n     ///\n     /// Then:\n+    ///\n     ///     1. From the ordering guarantee of HIR visitors (see\n     ///     `rustc_hir::intravisit`), `D` does not dominate `U`.\n+    ///\n     ///     2. Therefore, `D` is *potentially* storage-dead at `U` (because\n     ///     we might visit `U` without ever getting to `D`).\n+    ///\n     ///     3. However, we guarantee that at each HIR point, each\n     ///     binding/temporary is always either always storage-live\n     ///     or always storage-dead. This is what is being guaranteed\n     ///     by `terminating_scopes` including all blocks where the\n     ///     count of executions is not guaranteed.\n+    ///\n     ///     4. By `2.` and `3.`, `D` is *statically* storage-dead at `U`,\n     ///     QED.\n     ///"}, {"sha": "e46274770be17532309bade4a4389d767ede36bb", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9ccd39ae38051463771495e03889bf3aeff616a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ccd39ae38051463771495e03889bf3aeff616a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=f9ccd39ae38051463771495e03889bf3aeff616a", "patch": "@@ -28,8 +28,9 @@ use std::mem;\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Simplify a candidate so that all match pairs require a test.\n     ///\n-    /// This method will also split a candidate where the only match-pair is an\n-    /// or-pattern into multiple candidates. This is so that\n+    /// This method will also split a candidate, in which the only\n+    /// match-pair is an or-pattern, into multiple candidates.\n+    /// This is so that\n     ///\n     /// match x {\n     ///     0 | 1 => { ... },"}]}