{"sha": "b22e840d43ec8d0de0b95f26a76046cfcca93c22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMmU4NDBkNDNlYzhkMGRlMGI5NWYyNmE3NjA0NmNmY2NhOTNjMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-20T10:25:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-20T10:25:54Z"}, "message": "auto merge of #16618 : nham/rust/strslice_examples, r=alexcrichton\n\n(By chance, the `contains` example was actually what I was trying to write when I discovered #16589)", "tree": {"sha": "f4a81b0c0e3fbb38b4b5ec4e196afbc5d9b309ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a81b0c0e3fbb38b4b5ec4e196afbc5d9b309ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22e840d43ec8d0de0b95f26a76046cfcca93c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22e840d43ec8d0de0b95f26a76046cfcca93c22", "html_url": "https://github.com/rust-lang/rust/commit/b22e840d43ec8d0de0b95f26a76046cfcca93c22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22e840d43ec8d0de0b95f26a76046cfcca93c22/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05df25f13e53e87c9b96382df2d05ac732d5e7c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/05df25f13e53e87c9b96382df2d05ac732d5e7c8", "html_url": "https://github.com/rust-lang/rust/commit/05df25f13e53e87c9b96382df2d05ac732d5e7c8"}, {"sha": "0821119eddfa3f1a1dc6b7e4e9fe89cd846cea7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0821119eddfa3f1a1dc6b7e4e9fe89cd846cea7e", "html_url": "https://github.com/rust-lang/rust/commit/0821119eddfa3f1a1dc6b7e4e9fe89cd846cea7e"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "076eb8bbe6aa358d75b1acf11f287de8e4a4cae1", "filename": "src/libcore/str.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b22e840d43ec8d0de0b95f26a76046cfcca93c22/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22e840d43ec8d0de0b95f26a76046cfcca93c22/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=b22e840d43ec8d0de0b95f26a76046cfcca93c22", "patch": "@@ -1094,13 +1094,25 @@ pub trait StrSlice<'a> {\n     /// # Arguments\n     ///\n     /// - needle - The string to look for\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert!(\"bananas\".contains(\"nana\"));\n+    /// ```\n     fn contains<'a>(&self, needle: &'a str) -> bool;\n \n     /// Returns true if a string contains a char.\n     ///\n     /// # Arguments\n     ///\n     /// - needle - The char to look for\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert!(\"hello\".contains_char('e'));\n+    /// ```\n     fn contains_char(&self, needle: char) -> bool;\n \n     /// An iterator over the characters of `self`. Note, this iterates\n@@ -1115,6 +1127,13 @@ pub trait StrSlice<'a> {\n     fn chars(&self) -> Chars<'a>;\n \n     /// An iterator over the bytes of `self`\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let v: Vec<u8> = \"bors\".bytes().collect();\n+    /// assert_eq!(v, b\"bors\".to_vec());\n+    /// ```\n     fn bytes(&self) -> Bytes<'a>;\n \n     /// An iterator over the characters of `self` and their byte offsets.\n@@ -1381,9 +1400,21 @@ pub trait StrSlice<'a> {\n     fn slice_chars(&self, begin: uint, end: uint) -> &'a str;\n \n     /// Returns true if `needle` is a prefix of the string.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert!(\"banana\".starts_with(\"ba\"));\n+    /// ```\n     fn starts_with(&self, needle: &str) -> bool;\n \n     /// Returns true if `needle` is a suffix of the string.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert!(\"banana\".ends_with(\"nana\"));\n+    /// ```\n     fn ends_with(&self, needle: &str) -> bool;\n \n     /// Returns a string with characters that match `to_trim` removed.\n@@ -1525,6 +1556,15 @@ pub trait StrSlice<'a> {\n \n     /// Plucks the character starting at the `i`th byte of a string.\n     ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let s = \"ab\u03c0c\";\n+    /// assert_eq!(s.char_at(1), 'b');\n+    /// assert_eq!(s.char_at(2), '\u03c0');\n+    /// assert_eq!(s.char_at(4), 'c');\n+    /// ```\n+    ///\n     /// # Failure\n     ///\n     /// If `i` is greater than or equal to the length of the string.\n@@ -1540,6 +1580,12 @@ pub trait StrSlice<'a> {\n     fn char_at_reverse(&self, i: uint) -> char;\n \n     /// Work with the byte buffer of a string as a byte slice.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_eq!(\"bors\".as_bytes(), b\"bors\");\n+    /// ```\n     fn as_bytes(&self) -> &'a [u8];\n \n     /// Returns the byte index of the first character of `self` that"}]}