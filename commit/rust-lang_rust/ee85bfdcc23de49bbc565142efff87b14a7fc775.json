{"sha": "ee85bfdcc23de49bbc565142efff87b14a7fc775", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlODViZmRjYzIzZGU0OWJiYzU2NTE0MmVmZmY4N2IxNGE3ZmM3NzU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-02-16T10:33:22Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-05-16T17:08:41Z"}, "message": "Make core::nonzero private\n\nIt is now an implementation detail of ptr::NonNull and num::NonZero*", "tree": {"sha": "9164f38859cb5d230e1c7140134e07239a7bb3d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9164f38859cb5d230e1c7140134e07239a7bb3d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee85bfdcc23de49bbc565142efff87b14a7fc775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee85bfdcc23de49bbc565142efff87b14a7fc775", "html_url": "https://github.com/rust-lang/rust/commit/ee85bfdcc23de49bbc565142efff87b14a7fc775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee85bfdcc23de49bbc565142efff87b14a7fc775/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3f5367a23a769a068c37460db336de427c4b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3f5367a23a769a068c37460db336de427c4b48", "html_url": "https://github.com/rust-lang/rust/commit/2a3f5367a23a769a068c37460db336de427c4b48"}], "stats": {"total": 120, "additions": 10, "deletions": 110}, "files": [{"sha": "06fbfcecba801d31c2a2c3a34ef12ae10e433884", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ee85bfdcc23de49bbc565142efff87b14a7fc775", "patch": "@@ -171,7 +171,6 @@ pub mod prelude;\n \n pub mod intrinsics;\n pub mod mem;\n-pub mod nonzero;\n pub mod ptr;\n pub mod hint;\n \n@@ -221,6 +220,7 @@ pub mod heap {\n \n // note: does not need to be public\n mod iter_private;\n+mod nonzero;\n mod tuple;\n mod unit;\n "}, {"sha": "ee5230cef8dd9597d89809ec0451bd0397d78fd6", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 3, "deletions": 93, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=ee85bfdcc23de49bbc565142efff87b14a7fc775", "patch": "@@ -9,103 +9,13 @@\n // except according to those terms.\n \n //! Exposes the NonZero lang item which provides optimization hints.\n-#![unstable(feature = \"nonzero\", reason = \"deprecated\", issue = \"49137\")]\n-#![rustc_deprecated(reason = \"use `std::ptr::NonNull` or `std::num::NonZero*` instead\",\n-                    since = \"1.26.0\")]\n-#![allow(deprecated)]\n \n use ops::CoerceUnsized;\n \n-/// Unsafe trait to indicate what types are usable with the NonZero struct\n-pub unsafe trait Zeroable {\n-    /// Whether this value is zero\n-    fn is_zero(&self) -> bool;\n-}\n-\n-macro_rules! impl_zeroable_for_pointer_types {\n-    ( $( $Ptr: ty )+ ) => {\n-        $(\n-            /// For fat pointers to be considered \"zero\", only the \"data\" part needs to be null.\n-            unsafe impl<T: ?Sized> Zeroable for $Ptr {\n-                #[inline]\n-                fn is_zero(&self) -> bool {\n-                    (*self).is_null()\n-                }\n-            }\n-        )+\n-    }\n-}\n-\n-macro_rules! impl_zeroable_for_integer_types {\n-    ( $( $Int: ty )+ ) => {\n-        $(\n-            unsafe impl Zeroable for $Int {\n-                #[inline]\n-                fn is_zero(&self) -> bool {\n-                    *self == 0\n-                }\n-            }\n-        )+\n-    }\n-}\n-\n-impl_zeroable_for_pointer_types! {\n-    *const T\n-    *mut T\n-}\n-\n-impl_zeroable_for_integer_types! {\n-    usize u8 u16 u32 u64 u128\n-    isize i8 i16 i32 i64 i128\n-}\n-\n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[lang = \"non_zero\"]\n-#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n-pub struct NonZero<T: Zeroable>(pub(crate) T);\n-\n-impl<T: Zeroable> NonZero<T> {\n-    /// Creates an instance of NonZero with the provided value.\n-    /// You must indeed ensure that the value is actually \"non-zero\".\n-    #[inline]\n-    pub const unsafe fn new_unchecked(inner: T) -> Self {\n-        NonZero(inner)\n-    }\n-\n-    /// Creates an instance of NonZero with the provided value.\n-    #[inline]\n-    pub fn new(inner: T) -> Option<Self> {\n-        if inner.is_zero() {\n-            None\n-        } else {\n-            Some(NonZero(inner))\n-        }\n-    }\n-\n-    /// Gets the inner value.\n-    pub fn get(self) -> T {\n-        self.0\n-    }\n-}\n-\n-impl<T: Zeroable+CoerceUnsized<U>, U: Zeroable> CoerceUnsized<NonZero<U>> for NonZero<T> {}\n-\n-impl<'a, T: ?Sized> From<&'a mut T> for NonZero<*mut T> {\n-    fn from(reference: &'a mut T) -> Self {\n-        NonZero(reference)\n-    }\n-}\n-\n-impl<'a, T: ?Sized> From<&'a mut T> for NonZero<*const T> {\n-    fn from(reference: &'a mut T) -> Self {\n-        let ptr: *mut T = reference;\n-        NonZero(ptr)\n-    }\n-}\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n \n-impl<'a, T: ?Sized> From<&'a T> for NonZero<*const T> {\n-    fn from(reference: &'a T) -> Self {\n-        NonZero(reference)\n-    }\n-}\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<NonZero<U>> for NonZero<T> {}"}, {"sha": "ef914a0fc5cd7fc727d45b08a7d8467151cc4412", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ee85bfdcc23de49bbc565142efff87b14a7fc775", "patch": "@@ -16,7 +16,7 @@ use convert::TryFrom;\n use fmt;\n use intrinsics;\n use mem;\n-#[allow(deprecated)] use nonzero::NonZero;\n+use nonzero::NonZero;\n use ops;\n use str::FromStr;\n \n@@ -49,11 +49,9 @@ macro_rules! nonzero_integers {\n             /// ```\n             #[$stability]\n             #[$deprecation]\n-            #[allow(deprecated)]\n             #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n             pub struct $Ty(NonZero<$Int>);\n \n-            #[allow(deprecated)]\n             impl $Ty {\n                 /// Create a non-zero without checking the value.\n                 ///"}, {"sha": "63bcc024020155fe753716f68dc2d6f1e2e2c046", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ee85bfdcc23de49bbc565142efff87b14a7fc775", "patch": "@@ -23,7 +23,7 @@ use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n use mem;\n-#[allow(deprecated)] use nonzero::NonZero;\n+use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n \n@@ -2742,7 +2742,6 @@ impl<T: ?Sized> PartialOrd for *mut T {\n #[unstable(feature = \"ptr_internals\", issue = \"0\",\n            reason = \"use NonNull instead and consider PhantomData<T> \\\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n-#[allow(deprecated)]\n #[doc(hidden)]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n@@ -2790,7 +2789,6 @@ impl<T: Sized> Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     ///\n@@ -2855,15 +2853,13 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n         Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n         Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n@@ -2896,7 +2892,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub struct NonNull<T: ?Sized> {\n-    #[allow(deprecated)] pointer: NonZero<*const T>,\n+    pointer: NonZero<*const T>,\n }\n \n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n@@ -2923,7 +2919,6 @@ impl<T: Sized> NonNull<T> {\n     }\n }\n \n-#[allow(deprecated)]\n impl<T: ?Sized> NonNull<T> {\n     /// Creates a new `NonNull`.\n     ///\n@@ -3054,15 +3049,13 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }"}, {"sha": "ee1ce192fe03caa252826711583d71d67db13c5a", "filename": "src/test/run-pass/ctfe/tuple-struct-constructors.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee85bfdcc23de49bbc565142efff87b14a7fc775/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs?ref=ee85bfdcc23de49bbc565142efff87b14a7fc775", "patch": "@@ -10,11 +10,10 @@\n \n // https://github.com/rust-lang/rust/issues/41898\n \n-#![feature(nonzero, const_fn)]\n-extern crate core;\n-use core::nonzero::NonZero;\n+#![feature(nonzero)]\n+use std::num::NonZeroU64;\n \n fn main() {\n-    const FOO: NonZero<u64> = unsafe { NonZero::new_unchecked(2) };\n+    const FOO: NonZeroU64 = unsafe { NonZeroU64::new_unchecked(2) };\n     if let FOO = FOO {}\n }"}]}