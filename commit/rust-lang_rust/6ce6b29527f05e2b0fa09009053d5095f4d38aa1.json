{"sha": "6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZTZiMjk1MjdmMDVlMmIwZmEwOTAwOTA1M2Q1MDk1ZjRkMzhhYTE=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-14T21:09:24Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-14T21:34:19Z"}, "message": "Use diagnostic items for `intrinsics::transmute`, `TryInto`", "tree": {"sha": "9acdb573624f3072b49318707cb47b55382842ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9acdb573624f3072b49318707cb47b55382842ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "html_url": "https://github.com/rust-lang/rust/commit/6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6030428fd22912afeeaecfcc0220e979c2ffeb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6030428fd22912afeeaecfcc0220e979c2ffeb0a", "html_url": "https://github.com/rust-lang/rust/commit/6030428fd22912afeeaecfcc0220e979c2ffeb0a"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "89fd5faa165f4810e8db52d23ec8c94b1ffdd1c7", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "patch": "@@ -12,11 +12,12 @@ mod useless_transmute;\n mod utils;\n mod wrong_transmute;\n \n-use clippy_utils::{in_constant, match_def_path, paths};\n+use clippy_utils::in_constant;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for transmutes that can't ever be correct on any\n@@ -328,7 +329,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             if let ExprKind::Call(path_expr, args) = e.kind;\n             if let ExprKind::Path(ref qpath) = path_expr.kind;\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n-            if match_def_path(cx, def_id, &paths::TRANSMUTE);\n+            if cx.tcx.is_diagnostic_item(sym::transmute, def_id);\n             then {\n                 // Avoid suggesting from/to bits and dereferencing raw pointers in const contexts.\n                 // See https://github.com/rust-lang/rust/issues/73736 for progress on making them `const fn`."}, {"sha": "0c39d4d8cf466946236724348f1448d091692268", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::consts::{constant_context, Constant};\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{is_expr_diagnostic_item, is_expr_path_def_path, paths};\n+use clippy_utils::is_expr_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n@@ -39,7 +39,7 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n \n         if_chain! {\n             if let ExprKind::Call(func, [arg]) = expr.kind;\n-            if is_expr_path_def_path(cx, func, &paths::TRANSMUTE);\n+            if is_expr_diagnostic_item(cx, func, sym::transmute);\n \n             then {\n                 // Catching transmute over constants that resolve to `null`."}, {"sha": "25a959d3e416c24d89cba853f514d1ca96e448ff", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n-use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, match_trait_method, paths};\n+use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n@@ -104,7 +104,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     }\n                 }\n                 if_chain! {\n-                    if match_trait_method(cx, e, &paths::TRY_INTO_TRAIT) && name.ident.name == sym::try_into;\n+                    if is_trait_method(cx, e, sym::try_into_trait) && name.ident.name == sym::try_into;\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if is_type_diagnostic_item(cx, a, sym::result_type);"}, {"sha": "5ef7b459667dd4376ebee04e43069e697b3908f3", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce6b29527f05e2b0fa09009053d5095f4d38aa1/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=6ce6b29527f05e2b0fa09009053d5095f4d38aa1", "patch": "@@ -145,6 +145,7 @@ pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n+/// Preferably use the diagnostic item `sym::result_type` where possible\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n@@ -180,9 +181,8 @@ pub const SYM_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"sym\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n-pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n-pub const TRY_INTO_TRAIT: [&str; 3] = [\"core\", \"convert\", \"TryInto\"];\n+\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];"}]}