{"sha": "d03b4a0c580f17497014b8e2e6dd380f43b637b9", "node_id": "C_kwDOAAsO6NoAKGQwM2I0YTBjNTgwZjE3NDk3MDE0YjhlMmU2ZGQzODBmNDNiNjM3Yjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-22T02:43:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-22T02:43:53Z"}, "message": "Auto merge of #1978 - RalfJung:simd_eq, r=RalfJung\n\nimplement simd_eq and simd_reduce_any\n\nThis lets us re-enable the division and modulo tests, since those operations now internally use simd_eq and simd_reduce_any.\n\nHowever, I am not sure what exactly the rules are for simd_reduce_any. `@workingjubilee` for now I made it UB to call those with inputs that are not all-0 or all-1, but that might be taking it too far?", "tree": {"sha": "07be9815fc5d5748e7fb5cb69f30334a74f25a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07be9815fc5d5748e7fb5cb69f30334a74f25a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d03b4a0c580f17497014b8e2e6dd380f43b637b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d03b4a0c580f17497014b8e2e6dd380f43b637b9", "html_url": "https://github.com/rust-lang/rust/commit/d03b4a0c580f17497014b8e2e6dd380f43b637b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d03b4a0c580f17497014b8e2e6dd380f43b637b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b0078e4556a259e8797a5e8f29110150b71c1c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0078e4556a259e8797a5e8f29110150b71c1c4", "html_url": "https://github.com/rust-lang/rust/commit/2b0078e4556a259e8797a5e8f29110150b71c1c4"}, {"sha": "1ac1e55f3b0903f8088d9da77e8da889c97477f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac1e55f3b0903f8088d9da77e8da889c97477f6", "html_url": "https://github.com/rust-lang/rust/commit/1ac1e55f3b0903f8088d9da77e8da889c97477f6"}], "stats": {"total": 82, "additions": 74, "deletions": 8}, "files": [{"sha": "d64c1095494d5e4972ff79011f38e23a20ab472e", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03b4a0c580f17497014b8e2e6dd380f43b637b9/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/d03b4a0c580f17497014b8e2e6dd380f43b637b9/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=d03b4a0c580f17497014b8e2e6dd380f43b637b9", "patch": "@@ -1 +1 @@\n-78450d2d602b06d9b94349aaf8cece1a4acaf3a8\n+b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a"}, {"sha": "a75367b82c12fb061701f32ed72edea1a91f0711", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d03b4a0c580f17497014b8e2e6dd380f43b637b9/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03b4a0c580f17497014b8e2e6dd380f43b637b9/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=d03b4a0c580f17497014b8e2e6dd380f43b637b9", "patch": "@@ -324,7 +324,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"simd_shl\"\n             | \"simd_shr\"\n             | \"simd_and\"\n-            | \"simd_or\" => {\n+            | \"simd_or\"\n+            | \"simd_eq\" => {\n                 let &[ref left, ref right] = check_arg_count(args)?;\n                 let (left, left_len) = this.operand_to_simd(left)?;\n                 let (right, right_len) = this.operand_to_simd(right)?;\n@@ -343,6 +344,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"simd_shr\" => mir::BinOp::Shr,\n                     \"simd_and\" => mir::BinOp::BitAnd,\n                     \"simd_or\" => mir::BinOp::BitOr,\n+                    \"simd_eq\" => mir::BinOp::Eq,\n                     _ => unreachable!(),\n                 };\n \n@@ -351,7 +353,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let right = this.read_immediate(&this.mplace_index(&right, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n                     let (val, overflowed, ty) = this.overflowing_binary_op(op, &left, &right)?;\n-                    assert_eq!(ty, dest.layout.ty);\n                     if matches!(op, mir::BinOp::Shl | mir::BinOp::Shr) {\n                         // Shifts have extra UB as SIMD operations that the MIR binop does not have.\n                         // See <https://github.com/rust-lang/rust/issues/91237>.\n@@ -360,8 +361,40 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             throw_ub_format!(\"overflowing shift by {} in `{}` in SIMD lane {}\", r_val, intrinsic_name, i);\n                         }\n                     }\n-                    this.write_scalar(val, &dest.into())?;\n+                    if matches!(op, mir::BinOp::Eq) {\n+                        // Special handling for boolean-returning operations\n+                        assert_eq!(ty, this.tcx.types.bool);\n+                        let val = val.to_bool().unwrap();\n+                        let val = if val { -1 } else { 0 }; // SIMD uses all-1 as pattern for \"true\"\n+                        let val = Scalar::from_int(val, dest.layout.size);\n+                        this.write_scalar(val, &dest.into())?;\n+                    } else {\n+                        assert_eq!(ty, dest.layout.ty);\n+                        this.write_scalar(val, &dest.into())?;\n+                    }\n+                }\n+            }\n+            \"simd_reduce_any\" => {\n+                let &[ref arg] = check_arg_count(args)?;\n+                let (arg, arg_len) = this.operand_to_simd(arg)?;\n+\n+                let mut res = false; // the neutral element\n+                for i in 0..arg_len {\n+                    let op = this.read_immediate(&this.mplace_index(&arg, i)?.into())?;\n+                    // We convert it to a *signed* integer and expect either 0 or -1 (the latter means all bits were set).\n+                    let val = op.to_scalar()?.to_int(op.layout.size)?;\n+                    let val = match val {\n+                        0 => false,\n+                        -1 => true,\n+                        _ =>\n+                            throw_ub_format!(\n+                                \"each element of a simd_reduce_any operand must be all-0-bits or all-1-bits\"\n+                            ),\n+                    };\n+                    res = res | val;\n                 }\n+\n+                this.write_scalar(Scalar::from_bool(res), dest)?;\n             }\n \n             // Atomic operations"}, {"sha": "41dd7d74f4ec4729e31d92f4bdf77cc7246b73db", "filename": "tests/compile-fail/intrinsics/simd-reduce-invalid-bool.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d03b4a0c580f17497014b8e2e6dd380f43b637b9/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03b4a0c580f17497014b8e2e6dd380f43b637b9/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs?ref=d03b4a0c580f17497014b8e2e6dd380f43b637b9", "patch": "@@ -0,0 +1,14 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_reduce_any<T>(x: T) -> bool;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(0, 1);\n+    simd_reduce_any(x); //~ERROR must be all-0-bits or all-1-bits\n+} }"}, {"sha": "17fea5916675e05a7c150bc38abb261e916b1bb7", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d03b4a0c580f17497014b8e2e6dd380f43b637b9/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03b4a0c580f17497014b8e2e6dd380f43b637b9/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=d03b4a0c580f17497014b8e2e6dd380f43b637b9", "patch": "@@ -1,4 +1,4 @@\n-#![feature(portable_simd)]\n+#![feature(portable_simd, platform_intrinsics)]\n use std::simd::*;\n \n fn simd_ops_f32() {\n@@ -18,16 +18,35 @@ fn simd_ops_i32() {\n     assert_eq!(a + b, i32x4::from_array([11, 12, 13, 14]));\n     assert_eq!(a - b, i32x4::from_array([9, 8, 7, 6]));\n     assert_eq!(a * b, i32x4::from_array([10, 20, 30, 40]));\n-    //assert_eq!(a / b, i32x4::from_array([10, 5, 3, 2]));\n-    //assert_eq!(a / i32x4::splat(2), i32x4::splat(5));\n-    //assert_eq!(a % b, i32x4::from_array([0, 0, 1, 2]));\n+    assert_eq!(a / b, i32x4::from_array([10, 5, 3, 2]));\n+    assert_eq!(a / i32x4::splat(2), i32x4::splat(5));\n+    assert_eq!(a % b, i32x4::from_array([0, 0, 1, 2]));\n     assert_eq!(b << i32x4::splat(2), i32x4::from_array([4, 8, 12, 16]));\n     assert_eq!(b >> i32x4::splat(1), i32x4::from_array([0, 1, 1, 2]));\n     assert_eq!(b & i32x4::splat(2), i32x4::from_array([0, 2, 2, 0]));\n     assert_eq!(b | i32x4::splat(2), i32x4::from_array([3, 2, 3, 6]));\n }\n \n+fn simd_intrinsics() {\n+    extern \"platform-intrinsic\" {\n+        pub(crate) fn simd_eq<T, U>(x: T, y: T) -> U;\n+        pub(crate) fn simd_reduce_any<T>(x: T) -> bool;\n+    }\n+\n+    // Make sure simd_eq returns all-1 for `true`\n+    let a = i32x4::splat(10);\n+    let b = i32x4::from_array([1, 2, 10, 4]);\n+    let c: i32x4 = unsafe { simd_eq(a, b) };\n+    assert_eq!(c, i32x4::from_array([0, 0, -1, 0]));\n+\n+    unsafe {\n+        assert!(!simd_reduce_any(i32x4::splat(0)));\n+        assert!(simd_reduce_any(i32x4::splat(-1)));\n+    }\n+}\n+\n fn main() {\n     simd_ops_f32();\n     simd_ops_i32();\n+    simd_intrinsics();\n }"}]}