{"sha": "c7f15aa178c179cc664dafa062121d854df5a3f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZjE1YWExNzhjMTc5Y2M2NjRkYWZhMDYyMTIxZDg1NGRmNWEzZjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-27T21:26:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-10T00:28:46Z"}, "message": "incorporate resolve results into hashing\n\nWe now incorporate the `def_map` and `trait_map`\nresults into the SVH.", "tree": {"sha": "f90971f8452bcba05fae916ff1bb18769def828a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f90971f8452bcba05fae916ff1bb18769def828a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7f15aa178c179cc664dafa062121d854df5a3f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f15aa178c179cc664dafa062121d854df5a3f6", "html_url": "https://github.com/rust-lang/rust/commit/c7f15aa178c179cc664dafa062121d854df5a3f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7f15aa178c179cc664dafa062121d854df5a3f6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "953d711cc74457981bc01e0090ba67b9a5779e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/953d711cc74457981bc01e0090ba67b9a5779e5b", "html_url": "https://github.com/rust-lang/rust/commit/953d711cc74457981bc01e0090ba67b9a5779e5b"}], "stats": {"total": 264, "additions": 250, "deletions": 14}, "files": [{"sha": "a816d26edadf36678d254f83b15f8932e5b4bdc9", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -14,6 +14,7 @@ use dep_graph::{DepGraph, DepTrackingMap};\n use session::Session;\n use middle;\n use middle::cstore::LOCAL_CRATE;\n+use hir::TraitMap;\n use hir::def::DefMap;\n use hir::def_id::{DefId, DefIndex};\n use hir::map as ast_map;\n@@ -299,8 +300,16 @@ pub struct GlobalCtxt<'tcx> {\n     pub types: CommonTypes<'tcx>,\n \n     pub sess: &'tcx Session,\n+\n+    /// Map from path id to the results from resolve; generated\n+    /// initially by resolve and updated during typeck in some cases\n+    /// (e.g., UFCS paths)\n     pub def_map: RefCell<DefMap>,\n \n+    /// Map indicating what traits are in scope for places where this\n+    /// is relevant; generated by resolve.\n+    pub trait_map: TraitMap,\n+\n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n     pub region_maps: RegionMaps,\n@@ -666,6 +675,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n                                   arenas: &'tcx CtxtArenas<'tcx>,\n                                   def_map: DefMap,\n+                                  trait_map: TraitMap,\n                                   named_region_map: resolve_lifetime::NamedRegionMap,\n                                   map: ast_map::Map<'tcx>,\n                                   freevars: FreevarMap,\n@@ -694,6 +704,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             variance_computed: Cell::new(false),\n             sess: s,\n             def_map: RefCell::new(def_map),\n+            trait_map: trait_map,\n             tables: RefCell::new(Tables::empty()),\n             impl_trait_refs: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             trait_defs: RefCell::new(DepTrackingMap::new(dep_graph.clone())),"}, {"sha": "7f50522b2032b0e10f51d9cdb38f20efe7a9a182", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -846,10 +846,10 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let index = stability::Index::new(&hir_map);\n \n-    let trait_map = resolutions.trait_map;\n     TyCtxt::create_and_enter(sess,\n                              arenas,\n                              resolutions.def_map,\n+                             resolutions.trait_map,\n                              named_region_map,\n                              hir_map,\n                              resolutions.freevars,\n@@ -864,7 +864,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              || rustc_incremental::load_dep_graph(tcx));\n \n         // passes are timed inside typeck\n-        try_with_f!(typeck::check_crate(tcx, trait_map), (tcx, None, analysis));\n+        try_with_f!(typeck::check_crate(tcx), (tcx, None, analysis));\n \n         time(time_passes,\n              \"const checking\","}, {"sha": "2b0bd14d83fa0bb35ff36d65a6dace4442b3c223", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -131,6 +131,7 @@ fn test_env<F>(source_string: &str,\n     TyCtxt::create_and_enter(&sess,\n                              &arenas,\n                              resolutions.def_map,\n+                             resolutions.trait_map,\n                              named_region_map.unwrap(),\n                              ast_map,\n                              resolutions.freevars,"}, {"sha": "42e7abeeaca8f250d809c0760fc142570c0a5622", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -19,12 +19,14 @@ use self::SawAbiComponent::*;\n use syntax::ast::{self, Name, NodeId};\n use syntax::parse::token;\n use syntax_pos::Span;\n-use rustc::ty::TyCtxt;\n use rustc::hir;\n use rustc::hir::*;\n-use rustc::hir::map::DefPath;\n+use rustc::hir::def::{Def, PathResolution};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit as visit;\n use rustc::hir::intravisit::{Visitor, FnKind};\n+use rustc::hir::map::DefPath;\n+use rustc::ty::TyCtxt;\n \n use std::hash::{Hash, SipHasher};\n \n@@ -343,4 +345,95 @@ impl<'a, 'tcx> Visitor<'a> for StrictVersionHashVisitor<'a, 'tcx> {\n         debug!(\"visit_arm: st={:?}\", self.st);\n         SawArm.hash(self.st); visit::walk_arm(self, a)\n     }\n+\n+    fn visit_id(&mut self, id: NodeId) {\n+        debug!(\"visit_id: id={} st={:?}\", id, self.st);\n+        self.hash_resolve(id);\n+    }\n+}\n+\n+#[derive(Hash)]\n+pub enum DefHash {\n+    SawDefId,\n+    SawLabel,\n+    SawPrimTy,\n+    SawSelfTy,\n+    SawErr,\n+}\n+\n+impl<'a, 'tcx> StrictVersionHashVisitor<'a, 'tcx> {\n+    fn hash_resolve(&mut self, id: ast::NodeId) {\n+        // Because whether or not a given id has an entry is dependent\n+        // solely on expr variant etc, we don't need to hash whether\n+        // or not an entry was present (we are already hashing what\n+        // variant it is above when we visit the HIR).\n+\n+        if let Some(def) = self.tcx.def_map.borrow().get(&id) {\n+            self.hash_partial_def(def);\n+        }\n+\n+        if let Some(traits) = self.tcx.trait_map.get(&id) {\n+            traits.len().hash(self.st);\n+            for candidate in traits {\n+                self.hash_def_id(candidate.def_id);\n+            }\n+        }\n+    }\n+\n+    fn hash_def_id(&mut self, def_id: DefId) {\n+        let def_path = self.tcx.def_path(def_id);\n+        self.hash_def_path(&def_path);\n+    }\n+\n+    fn hash_partial_def(&mut self, def: &PathResolution) {\n+        self.hash_def(def.base_def);\n+        def.depth.hash(self.st);\n+    }\n+\n+    fn hash_def(&mut self, def: Def) {\n+        match def {\n+            // Crucial point: for all of these variants, the variant +\n+            // add'l data that is added is always the same if the\n+            // def-id is the same, so it suffices to hash the def-id\n+            Def::Fn(..) |\n+            Def::Mod(..) |\n+            Def::ForeignMod(..) |\n+            Def::Static(..) |\n+            Def::Variant(..) |\n+            Def::Enum(..) |\n+            Def::TyAlias(..) |\n+            Def::AssociatedTy(..) |\n+            Def::TyParam(..) |\n+            Def::Struct(..) |\n+            Def::Trait(..) |\n+            Def::Method(..) |\n+            Def::Const(..) |\n+            Def::AssociatedConst(..) |\n+            Def::Local(..) |\n+            Def::Upvar(..) => {\n+                DefHash::SawDefId.hash(self.st);\n+                self.hash_def_id(def.def_id());\n+            }\n+\n+            Def::Label(..) => {\n+                DefHash::SawLabel.hash(self.st);\n+                // we don't encode the `id` because it always refers to something\n+                // within this item, so if it changed, there would have to be other\n+                // changes too\n+            }\n+            Def::PrimTy(ref prim_ty) => {\n+                DefHash::SawPrimTy.hash(self.st);\n+                prim_ty.hash(self.st);\n+            }\n+            Def::SelfTy(..) => {\n+                DefHash::SawSelfTy.hash(self.st);\n+                // the meaning of Self is always the same within a\n+                // given context, so we don't need to hash the other\n+                // fields\n+            }\n+            Def::Err => {\n+                DefHash::SawErr.hash(self.st);\n+            }\n+        }\n+    }\n }"}, {"sha": "79b90b63dc608d8b238eea13d3b84ac3f890c9d8", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -61,7 +61,7 @@ fn load_dep_graph_if_exists<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     };\n \n     match decode_dep_graph(tcx, &dep_graph_data, &work_products_data) {\n-        Ok(()) => return,\n+        Ok(dirty_nodes) => dirty_nodes,\n         Err(err) => {\n             tcx.sess.warn(\n                 &format!(\"decoding error in dep-graph from `{}` and `{}`: {}\","}, {"sha": "648d1f42fb5208322843c8a3d41791ae357ef2aa", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -580,7 +580,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                                                          -> Result<(), MethodError<'tcx>>\n     {\n         let mut duplicates = HashSet::new();\n-        let opt_applicable_traits = self.ccx.trait_map.get(&expr_id);\n+        let opt_applicable_traits = self.tcx.trait_map.get(&expr_id);\n         if let Some(applicable_traits) = opt_applicable_traits {\n             for trait_candidate in applicable_traits {\n                 let trait_did = trait_candidate.def_id;"}, {"sha": "eac26487ea3afd7a19bbc7a036249f9a0f3c38c6", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -139,9 +139,6 @@ pub struct TypeAndSubsts<'tcx> {\n pub struct CrateCtxt<'a, 'tcx: 'a> {\n     ast_ty_to_ty_cache: RefCell<NodeMap<Ty<'tcx>>>,\n \n-    /// A mapping from method call sites to traits that have that method.\n-    pub trait_map: hir::TraitMap,\n-\n     /// A vector of every trait accessible in the whole crate\n     /// (i.e. including those from subcrates). This is used only for\n     /// error reporting, and so is lazily initialised and generally\n@@ -321,13 +318,11 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n     }\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             trait_map: hir::TraitMap)\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                              -> CompileResult {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = CrateCtxt {\n         ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n-        trait_map: trait_map,\n         all_traits: RefCell::new(None),\n         stack: RefCell::new(Vec::new()),\n         tcx: tcx"}, {"sha": "f28ecf74dd47d38a53b60d8f5b43b13841ef44ec", "filename": "src/test/incremental/ich_method_call_trait_scope.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that the hash for a method call is sensitive to the traits in\n+// scope.\n+\n+// revisions: rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+fn test<T>() { }\n+\n+trait Trait1 {\n+    fn method(&self) { }\n+}\n+\n+impl Trait1 for () { }\n+\n+trait Trait2 {\n+    fn method(&self) { }\n+}\n+\n+impl Trait2 for () { }\n+\n+#[cfg(rpass1)]\n+mod mod3 {\n+    use Trait1;\n+\n+    fn bar() {\n+        ().method();\n+    }\n+\n+    fn baz() {\n+        22; // no method call, traits in scope don't matter\n+    }\n+}\n+\n+#[cfg(rpass2)]\n+mod mod3 {\n+    use Trait2;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"rpass2\")]\n+    fn bar() {\n+        ().method();\n+    }\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    fn baz() {\n+        22; // no method call, traits in scope don't matter\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "680a91da09f92cdada3c8d74ddc1818157c3c28d", "filename": "src/test/incremental/ich_resolve_results.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_resolve_results.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that the hash for `mod3::bar` changes when we change the\n+// `use` to something different.\n+\n+// revisions: rpass1 rpass2 rpass3\n+\n+#![feature(rustc_attrs)]\n+\n+fn test<T>() { }\n+\n+mod mod1 {\n+    pub struct Foo(pub u32);\n+}\n+\n+mod mod2 {\n+    pub struct Foo(pub i64);\n+}\n+\n+#[cfg(rpass1)]\n+mod mod3 {\n+    use test;\n+    use mod1::Foo;\n+\n+    fn in_expr() {\n+        Foo(0);\n+    }\n+\n+    fn in_type() {\n+        test::<Foo>();\n+    }\n+}\n+\n+#[cfg(rpass2)]\n+mod mod3 {\n+    use mod1::Foo; // <-- Nothing changed, but reordered!\n+    use test;\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    fn in_expr() {\n+        Foo(0);\n+    }\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    fn in_type() {\n+        test::<Foo>();\n+    }\n+}\n+\n+#[cfg(rpass3)]\n+mod mod3 {\n+    use test;\n+    use mod2::Foo; // <-- This changed!\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"rpass3\")]\n+    fn in_expr() {\n+        Foo(0);\n+    }\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"rpass3\")]\n+    fn in_type() {\n+        test::<Foo>();\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "72072248ec05f2990c2bfe1e026e882319b32b6c", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f15aa178c179cc664dafa062121d854df5a3f6/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=c7f15aa178c179cc664dafa062121d854df5a3f6", "patch": "@@ -41,8 +41,10 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n+    // FIXME(#35078) -- when body of `x` changes, we treat it as\n+    // though signature changed.\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn y() {\n         x::x();\n     }"}]}