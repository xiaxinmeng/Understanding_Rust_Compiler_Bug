{"sha": "a512c6c77115169d706338dbc7abc53ce302f616", "node_id": "C_kwDOAAsO6NoAKGE1MTJjNmM3NzExNTE2OWQ3MDYzMzhkYmM3YWJjNTNjZTMwMmY2MTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T02:00:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T02:00:58Z"}, "message": "Auto merge of #101550 - CraftSpider:link-dead-windows, r=wesleywiser\n\nMake compressed rmeta contain compressed data length after header\n\nFixes #90056, which is caused by link.exe introducing padding to the `.rustc` section, since it assumes this will have no effect besides allowing it to possibly use the extra space in future links.", "tree": {"sha": "b417e7da40ead7d68edd540151eaf4be68be8e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b417e7da40ead7d68edd540151eaf4be68be8e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a512c6c77115169d706338dbc7abc53ce302f616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a512c6c77115169d706338dbc7abc53ce302f616", "html_url": "https://github.com/rust-lang/rust/commit/a512c6c77115169d706338dbc7abc53ce302f616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a512c6c77115169d706338dbc7abc53ce302f616/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1838847d8bb568a1bd4c4c434c6173c174a496", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1838847d8bb568a1bd4c4c434c6173c174a496", "html_url": "https://github.com/rust-lang/rust/commit/bb1838847d8bb568a1bd4c4c434c6173c174a496"}, {"sha": "79f0021c16e98e72b8f20b3b11f8e7feac1aedc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f0021c16e98e72b8f20b3b11f8e7feac1aedc4", "html_url": "https://github.com/rust-lang/rust/commit/79f0021c16e98e72b8f20b3b11f8e7feac1aedc4"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "4ab56699922f54022d74f054dd5669ba818d79e0", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a512c6c77115169d706338dbc7abc53ce302f616/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512c6c77115169d706338dbc7abc53ce302f616/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=a512c6c77115169d706338dbc7abc53ce302f616", "patch": "@@ -306,7 +306,13 @@ pub fn create_compressed_metadata_file(\n     symbol_name: &str,\n ) -> Vec<u8> {\n     let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n+    // Our length will be backfilled once we're done writing\n+    compressed.write_all(&[0; 4]).unwrap();\n     FrameEncoder::new(&mut compressed).write_all(metadata.raw_data()).unwrap();\n+    let meta_len = rustc_metadata::METADATA_HEADER.len();\n+    let data_len = (compressed.len() - meta_len - 4) as u32;\n+    compressed[meta_len..meta_len + 4].copy_from_slice(&data_len.to_be_bytes());\n+\n     let Some(mut file) = create_object_file(sess) else {\n         return compressed.to_vec();\n     };"}, {"sha": "c48e681eb94ad610f46cbddb9817c7391dc674a7", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a512c6c77115169d706338dbc7abc53ce302f616/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512c6c77115169d706338dbc7abc53ce302f616/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=a512c6c77115169d706338dbc7abc53ce302f616", "patch": "@@ -789,6 +789,9 @@ fn get_metadata_section<'p>(\n                 loader.get_dylib_metadata(target, filename).map_err(MetadataError::LoadFailure)?;\n             // The header is uncompressed\n             let header_len = METADATA_HEADER.len();\n+            // header + u32 length of data\n+            let data_start = header_len + 4;\n+\n             debug!(\"checking {} bytes of metadata-version stamp\", header_len);\n             let header = &buf[..cmp::min(header_len, buf.len())];\n             if header != METADATA_HEADER {\n@@ -798,8 +801,14 @@ fn get_metadata_section<'p>(\n                 )));\n             }\n \n+            // Length of the compressed stream - this allows linkers to pad the section if they want\n+            let Ok(len_bytes) = <[u8; 4]>::try_from(&buf[header_len..cmp::min(data_start, buf.len())]) else {\n+                return Err(MetadataError::LoadFailure(\"invalid metadata length found\".to_string()));\n+            };\n+            let compressed_len = u32::from_be_bytes(len_bytes) as usize;\n+\n             // Header is okay -> inflate the actual metadata\n-            let compressed_bytes = &buf[header_len..];\n+            let compressed_bytes = &buf[data_start..(data_start + compressed_len)];\n             debug!(\"inflating {} bytes of compressed metadata\", compressed_bytes.len());\n             // Assume the decompressed data will be at least the size of the compressed data, so we\n             // don't have to grow the buffer as much."}, {"sha": "1d2541a67881972cc57ef405111953227756e4f3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a512c6c77115169d706338dbc7abc53ce302f616/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a512c6c77115169d706338dbc7abc53ce302f616/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=a512c6c77115169d706338dbc7abc53ce302f616", "patch": "@@ -55,13 +55,13 @@ pub(crate) fn rustc_version() -> String {\n /// Metadata encoding version.\n /// N.B., increment this if you change the format of metadata such that\n /// the rustc version can't be found to compare with `rustc_version()`.\n-const METADATA_VERSION: u8 = 6;\n+const METADATA_VERSION: u8 = 7;\n \n /// Metadata header which includes `METADATA_VERSION`.\n ///\n-/// This header is followed by the position of the `CrateRoot`,\n-/// which is encoded as a 32-bit big-endian unsigned integer,\n-/// and further followed by the rustc version string.\n+/// This header is followed by the length of the compressed data, then\n+/// the position of the `CrateRoot`, which is encoded as a 32-bit big-endian\n+/// unsigned integer, and further followed by the rustc version string.\n pub const METADATA_HEADER: &[u8] = &[b'r', b'u', b's', b't', 0, 0, 0, METADATA_VERSION];\n \n /// A value of type T referred to by its absolute position"}]}