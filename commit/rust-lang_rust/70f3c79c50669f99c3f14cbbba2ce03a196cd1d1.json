{"sha": "70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "node_id": "C_kwDOAAsO6NoAKDcwZjNjNzljNTA2NjlmOTljM2YxNGNiYmJhMmNlMDNhMTk2Y2QxZDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-09T07:09:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-09T07:09:57Z"}, "message": "ImplItemKind::TyAlias => ImplItemKind::Type", "tree": {"sha": "397c47ee5cfc6506e5a75c05fbdaea1e4bea2cf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/397c47ee5cfc6506e5a75c05fbdaea1e4bea2cf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "html_url": "https://github.com/rust-lang/rust/commit/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28eda9b18ac3c492b6934283b39953aab337351f", "url": "https://api.github.com/repos/rust-lang/rust/commits/28eda9b18ac3c492b6934283b39953aab337351f", "html_url": "https://github.com/rust-lang/rust/commit/28eda9b18ac3c492b6934283b39953aab337351f"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "347e735fadfbd2a9b443177affe08c7e698dace4", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -908,11 +908,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     |this| match ty {\n                         None => {\n                             let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err));\n-                            hir::ImplItemKind::TyAlias(ty)\n+                            hir::ImplItemKind::Type(ty)\n                         }\n                         Some(ty) => {\n                             let ty = this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy);\n-                            hir::ImplItemKind::TyAlias(ty)\n+                            hir::ImplItemKind::Type(ty)\n                         }\n                     },\n                 )"}, {"sha": "098f9d5154976ffb68c2a0e8a94df42f8eb08598", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -2315,7 +2315,7 @@ pub enum ImplItemKind<'hir> {\n     /// An associated function implementation with the given signature and body.\n     Fn(FnSig<'hir>, BodyId),\n     /// An associated type.\n-    TyAlias(&'hir Ty<'hir>),\n+    Type(&'hir Ty<'hir>),\n }\n \n // The name of the associated type for `Fn` return types."}, {"sha": "f3bde099b134fd0b475ea7f2dfb41a18191b6e30", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -979,7 +979,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n                 impl_item.hir_id(),\n             );\n         }\n-        ImplItemKind::TyAlias(ref ty) => {\n+        ImplItemKind::Type(ref ty) => {\n             visitor.visit_id(impl_item.hir_id());\n             visitor.visit_ty(ty);\n         }"}, {"sha": "8f232e493f15f23b517f8486d538870f03e352f8", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -1067,7 +1067,7 @@ fn check_impl_items_against_trait<'tcx>(\n                     opt_trait_span,\n                 );\n             }\n-            hir::ImplItemKind::TyAlias(impl_ty) => {\n+            hir::ImplItemKind::Type(impl_ty) => {\n                 let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                 compare_ty_impl(\n                     tcx,"}, {"sha": "8721ca0143932c3898e853867c602aa4b0c539b2", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -839,7 +839,7 @@ fn check_impl_item(tcx: TyCtxt<'_>, impl_item: &hir::ImplItem<'_>) {\n     let (method_sig, span) = match impl_item.kind {\n         hir::ImplItemKind::Fn(ref sig, _) => (Some(sig), impl_item.span),\n         // Constrain binding and overflow error spans to `<Ty>` in `type foo = <Ty>`.\n-        hir::ImplItemKind::TyAlias(ty) if ty.span != DUMMY_SP => (None, ty.span),\n+        hir::ImplItemKind::Type(ty) if ty.span != DUMMY_SP => (None, ty.span),\n         _ => (None, impl_item.span),\n     };\n "}, {"sha": "6976c5a0edbddbe57e15438106800ef2319a5a94", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -738,7 +738,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n         hir::ImplItemKind::Fn(..) => {\n             tcx.ensure().fn_sig(def_id);\n         }\n-        hir::ImplItemKind::TyAlias(_) => {\n+        hir::ImplItemKind::Type(_) => {\n             // Account for `type T = _;`\n             let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_impl_item(impl_item);"}, {"sha": "707fd6c75278d0f74887ef82bcdfd3dcb45bfa82", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -213,7 +213,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         Node::TraitItem(item) if matches!(item.kind, TraitItemKind::Type(..)) => {\n             (None, Defaults::Deny)\n         }\n-        Node::ImplItem(item) if matches!(item.kind, ImplItemKind::TyAlias(..)) => {\n+        Node::ImplItem(item) if matches!(item.kind, ImplItemKind::Type(..)) => {\n             (None, Defaults::Deny)\n         }\n "}, {"sha": "a3c142dbbb6969303eee359cbd89821d100a1837", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -284,7 +284,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     icx.to_ty(ty)\n                 }\n             }\n-            ImplItemKind::TyAlias(ty) => {\n+            ImplItemKind::Type(ty) => {\n                 if tcx.impl_trait_ref(tcx.hir().get_parent_item(hir_id)).is_none() {\n                     check_feature_inherent_assoc_ty(tcx, item.span);\n                 }"}, {"sha": "7e7cc95bf36113f6dc6abe6b4fe6791d638d94b9", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -119,7 +119,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n     let ty = match loc {\n         WellFormedLoc::Ty(_) => match hir.get(hir_id) {\n             hir::Node::ImplItem(item) => match item.kind {\n-                hir::ImplItemKind::TyAlias(ty) => Some(ty),\n+                hir::ImplItemKind::Type(ty) => Some(ty),\n                 hir::ImplItemKind::Const(ty, _) => Some(ty),\n                 ref item => bug!(\"Unexpected ImplItem {:?}\", item),\n             },"}, {"sha": "729139adc2de822f6a283e8bf8101f6a43cc0b25", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -887,7 +887,7 @@ impl<'a> State<'a> {\n                 self.end(); // need to close a box\n                 self.ann.nested(self, Nested::Body(body));\n             }\n-            hir::ImplItemKind::TyAlias(ty) => {\n+            hir::ImplItemKind::Type(ty) => {\n                 self.print_associated_type(ii.ident, ii.generics, None, Some(ty));\n             }\n         }"}, {"sha": "9c19f16a496bfaa0966cf90f47117c3e2e12ef1f", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -302,7 +302,7 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n             HirNode::ImplItem(item) => match item.kind {\n                 ImplItemKind::Fn(..) => (\"Node::ImplItem\", LABELS_FN_IN_IMPL),\n                 ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n-                ImplItemKind::TyAlias(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n+                ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n             },\n             _ => self.tcx.sess.span_fatal(\n                 attr.span,"}, {"sha": "edbbf5ec39e308dd59a68503659dac84811c903a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -2570,7 +2570,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             for h in self.tcx.hir().parent_iter(param.hir_id) {\n                                 break 'origin match h.1 {\n                                     Node::ImplItem(hir::ImplItem {\n-                                        kind: hir::ImplItemKind::TyAlias(..),\n+                                        kind: hir::ImplItemKind::Type(..),\n                                         generics,\n                                         ..\n                                     })"}, {"sha": "302f12a6f7d440b54126c95f673002072e0f04a5", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -241,7 +241,7 @@ impl<'hir> Map<'hir> {\n             Node::ImplItem(item) => match item.kind {\n                 ImplItemKind::Const(..) => DefKind::AssocConst,\n                 ImplItemKind::Fn(..) => DefKind::AssocFn,\n-                ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n+                ImplItemKind::Type(..) => DefKind::AssocTy,\n             },\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n@@ -1244,7 +1244,7 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 format!(\"assoc const {} in {}{}\", ii.ident, path_str(), id_str)\n             }\n             ImplItemKind::Fn(..) => format!(\"method {} in {}{}\", ii.ident, path_str(), id_str),\n-            ImplItemKind::TyAlias(_) => {\n+            ImplItemKind::Type(_) => {\n                 format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n             }\n         },"}, {"sha": "5455d063c13a97151da8e7b829eea2566ba090c6", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn target_from_impl_item<'tcx>(\n                 Target::Method(MethodKind::Inherent)\n             }\n         }\n-        hir::ImplItemKind::TyAlias(..) => Target::AssocTy,\n+        hir::ImplItemKind::Type(..) => Target::AssocTy,\n     }\n }\n "}, {"sha": "b413d78b38df9522c553ea7b400972135f0206f3", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -391,7 +391,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n         record_variants!(\n             (self, ii, ii.kind, Id::Node(ii.hir_id()), hir, ImplItem, ImplItemKind),\n-            [Const, Fn, TyAlias]\n+            [Const, Fn, Type]\n         );\n         hir_visit::walk_impl_item(self, ii)\n     }"}, {"sha": "0f2879c1eff2b249d5490da1b197d6a401834228", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                     let impl_did = self.tcx.hir().get_parent_item(hir_id);\n                     method_might_be_inlined(self.tcx, impl_item, impl_did.def_id)\n                 }\n-                hir::ImplItemKind::TyAlias(_) => false,\n+                hir::ImplItemKind::Type(_) => false,\n             },\n             Some(_) => false,\n             None => false, // This will happen for default methods.\n@@ -271,7 +271,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                         self.visit_nested_body(body)\n                     }\n                 }\n-                hir::ImplItemKind::TyAlias(_) => {}\n+                hir::ImplItemKind::Type(_) => {}\n             },\n             Node::Expr(&hir::Expr {\n                 kind: hir::ExprKind::Closure(&hir::Closure { body, .. }),"}, {"sha": "0983c3148f2ffae01f2fee24cf719d467ee19c1a", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -1574,7 +1574,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {\n                                 self.access_levels.is_reachable(impl_item_ref.id.def_id.def_id)\n                             }\n-                            hir::ImplItemKind::TyAlias(_) => false,\n+                            hir::ImplItemKind::Type(_) => false,\n                         }\n                     });\n \n@@ -1596,7 +1596,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                     {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n-                                    hir::ImplItemKind::TyAlias(..) => {\n+                                    hir::ImplItemKind::Type(..) => {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n                                     _ => {}\n@@ -1622,7 +1622,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             // Those in 3. are warned with this call.\n                             for impl_item_ref in impl_.items {\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n-                                if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {\n+                                if let hir::ImplItemKind::Type(ty) = impl_item.kind {\n                                     self.visit_ty(ty);\n                                 }\n                             }"}, {"sha": "8fa6160d4367f17c765879646461f7f191b7b4e1", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -898,7 +898,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             Fn(..) => self.visit_early_late(impl_item.hir_id(), &impl_item.generics, |this| {\n                 intravisit::walk_impl_item(this, impl_item)\n             }),\n-            TyAlias(ref ty) => {\n+            Type(ref ty) => {\n                 let generics = &impl_item.generics;\n                 let lifetimes: FxIndexMap<LocalDefId, Region> = generics\n                     .params"}, {"sha": "23d06d8e5163b92e14534d6dd8300a48a3a4feb7", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -1069,7 +1069,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            hir::ImplItemKind::TyAlias(ref ty) => {\n+            hir::ImplItemKind::Type(ref ty) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait."}, {"sha": "d0c816946d412c53876fe1b43185b88f33186d80", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -1639,7 +1639,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                                 ..\n                             })\n                             | hir::Node::ImplItem(hir::ImplItem {\n-                                kind: hir::ImplItemKind::TyAlias(ty),\n+                                kind: hir::ImplItemKind::Type(ty),\n                                 ..\n                             }),\n                         ) => Some((ty.span, format!(\"type mismatch resolving `{}`\", predicate))),"}, {"sha": "2ef66b716f6fa79ec354b90ab118019f44a78fa6", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -224,7 +224,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n     };\n     let fix_span =\n         |impl_item_ref: &hir::ImplItemRef| match tcx.hir().impl_item(impl_item_ref.id).kind {\n-            hir::ImplItemKind::Const(ty, _) | hir::ImplItemKind::TyAlias(ty) => ty.span,\n+            hir::ImplItemKind::Const(ty, _) | hir::ImplItemKind::Type(ty) => ty.span,\n             _ => impl_item_ref.span,\n         };\n "}, {"sha": "30efbf66175989fb52f411ca54f5c746b91695a5", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -161,7 +161,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n             }) => hir::Constness::Const,\n \n             hir::Node::ImplItem(hir::ImplItem {\n-                kind: hir::ImplItemKind::TyAlias(..) | hir::ImplItemKind::Fn(..),\n+                kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n                 ..\n             }) => {\n                 let parent_hir_id = tcx.hir().get_parent_node(hir_id);"}, {"sha": "432d318907fa0669805c3043b353e8780cc1ec9f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -410,7 +410,7 @@ pub(crate) fn build_impl(\n                         let assoc_kind = match item.kind {\n                             hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n                             hir::ImplItemKind::Fn(..) => ty::AssocKind::Fn,\n-                            hir::ImplItemKind::TyAlias(..) => ty::AssocKind::Type,\n+                            hir::ImplItemKind::Type(..) => ty::AssocKind::Type,\n                         };\n                         let trait_item = tcx\n                             .associated_items(associated_trait.def_id)"}, {"sha": "0aaa519ed027efb6899263eb188cecf501383964", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -1066,7 +1066,7 @@ pub(crate) fn clean_impl_item<'tcx>(\n                 let defaultness = cx.tcx.impl_defaultness(impl_.def_id);\n                 MethodItem(m, Some(defaultness))\n             }\n-            hir::ImplItemKind::TyAlias(hir_ty) => {\n+            hir::ImplItemKind::Type(hir_ty) => {\n                 let type_ = clean_ty(hir_ty, cx);\n                 let generics = clean_generics(impl_.generics, cx);\n                 let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, hir_ty), cx, None);"}, {"sha": "ef6d1da552bfc2a1212eb2b5893f8b0f38e3c7f3", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n \n         let desc = match impl_item.kind {\n             hir::ImplItemKind::Fn(..) => \"a method\",\n-            hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) => return,\n+            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(_) => return,\n         };\n \n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);"}, {"sha": "33eee2a03784da7c45a8be058d79440eb5f1173d", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -372,7 +372,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n             // Methods are covered by check_fn.\n             // Type aliases are ignored because oftentimes it's impossible to\n             // make type alias declaration in trait simpler, see #1013\n-            ImplItemKind::Fn(..) | ImplItemKind::TyAlias(..) => (),\n+            ImplItemKind::Fn(..) | ImplItemKind::Type(..) => (),\n         }\n     }\n "}, {"sha": "c6bf98b7b8bbd35fbf2b1c12994d94e2a7de6b59", "filename": "src/tools/clippy/clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f3c79c50669f99c3f14cbbba2ce03a196cd1d1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=70f3c79c50669f99c3f14cbbba2ce03a196cd1d1", "patch": "@@ -220,7 +220,7 @@ fn trait_item_search_pat(item: &TraitItem<'_>) -> (Pat, Pat) {\n fn impl_item_search_pat(item: &ImplItem<'_>) -> (Pat, Pat) {\n     let (start_pat, end_pat) = match &item.kind {\n         ImplItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n-        ImplItemKind::TyAlias(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        ImplItemKind::Type(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n         ImplItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n     };\n     if item.vis_span.is_empty() {"}]}