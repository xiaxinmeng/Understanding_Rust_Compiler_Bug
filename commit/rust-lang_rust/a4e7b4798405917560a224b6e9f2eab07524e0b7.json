{"sha": "a4e7b4798405917560a224b6e9f2eab07524e0b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTdiNDc5ODQwNTkxNzU2MGEyMjRiNmU5ZjJlYWIwNzUyNGUwYjc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-27T11:09:54Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-27T11:09:54Z"}, "message": "use LocalDefId in module checking", "tree": {"sha": "bdced64b155efa2e2bbe4a19b019d92d7ca929ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdced64b155efa2e2bbe4a19b019d92d7ca929ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e7b4798405917560a224b6e9f2eab07524e0b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e7b4798405917560a224b6e9f2eab07524e0b7", "html_url": "https://github.com/rust-lang/rust/commit/a4e7b4798405917560a224b6e9f2eab07524e0b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e7b4798405917560a224b6e9f2eab07524e0b7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ed1b03c202d77248eb0d335062f46026fc29c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed1b03c202d77248eb0d335062f46026fc29c4", "html_url": "https://github.com/rust-lang/rust/commit/d8ed1b03c202d77248eb0d335062f46026fc29c4"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "b883ce5f54da6593f4b61edab6aebc117eb88057", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -451,11 +451,11 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn visit_item_likes_in_module<V>(&self, module: DefId, visitor: &mut V)\n+    pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)\n     where\n         V: ItemLikeVisitor<'hir>,\n     {\n-        let module = self.tcx.hir_module_items(module.expect_local());\n+        let module = self.tcx.hir_module_items(module);\n \n         for id in &module.items {\n             visitor.visit_item(self.expect_item(*id));"}, {"sha": "9d639d3fa6c1d125e55259179fa38fa7bd82f3bb", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -15,11 +15,11 @@ use rustc_query_system::query::QueryDescription;\n use rustc_span::symbol::Symbol;\n use std::borrow::Cow;\n \n-fn describe_as_module(def_id: DefId, tcx: TyCtxt<'_>) -> String {\n+fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n     if def_id.is_top_level_module() {\n         \"top-level module\".to_string()\n     } else {\n-        format!(\"module `{}`\", tcx.def_path_str(def_id))\n+        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n     }\n }\n \n@@ -473,49 +473,49 @@ rustc_queries! {\n \n     Other {\n         query lint_mod(key: LocalDefId) -> () {\n-            desc { |tcx| \"linting {}\", describe_as_module(key.to_def_id(), tcx) }\n+            desc { |tcx| \"linting {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the attributes in the module.\n-        query check_mod_attrs(key: DefId) -> () {\n+        query check_mod_attrs(key: LocalDefId) -> () {\n             desc { |tcx| \"checking attributes in {}\", describe_as_module(key, tcx) }\n         }\n \n-        query check_mod_unstable_api_usage(key: DefId) -> () {\n+        query check_mod_unstable_api_usage(key: LocalDefId) -> () {\n             desc { |tcx| \"checking for unstable API usage in {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the const bodies in the module for illegal operations (e.g. `if` or `loop`).\n-        query check_mod_const_bodies(key: DefId) -> () {\n+        query check_mod_const_bodies(key: LocalDefId) -> () {\n             desc { |tcx| \"checking consts in {}\", describe_as_module(key, tcx) }\n         }\n \n         /// Checks the loops in the module.\n-        query check_mod_loops(key: DefId) -> () {\n+        query check_mod_loops(key: LocalDefId) -> () {\n             desc { |tcx| \"checking loops in {}\", describe_as_module(key, tcx) }\n         }\n \n-        query check_mod_item_types(key: DefId) -> () {\n+        query check_mod_item_types(key: LocalDefId) -> () {\n             desc { |tcx| \"checking item types in {}\", describe_as_module(key, tcx) }\n         }\n \n         query check_mod_privacy(key: LocalDefId) -> () {\n-            desc { |tcx| \"checking privacy in {}\", describe_as_module(key.to_def_id(), tcx) }\n+            desc { |tcx| \"checking privacy in {}\", describe_as_module(key, tcx) }\n         }\n \n-        query check_mod_intrinsics(key: DefId) -> () {\n+        query check_mod_intrinsics(key: LocalDefId) -> () {\n             desc { |tcx| \"checking intrinsics in {}\", describe_as_module(key, tcx) }\n         }\n \n-        query check_mod_liveness(key: DefId) -> () {\n+        query check_mod_liveness(key: LocalDefId) -> () {\n             desc { |tcx| \"checking liveness of variables in {}\", describe_as_module(key, tcx) }\n         }\n \n-        query check_mod_impl_wf(key: DefId) -> () {\n+        query check_mod_impl_wf(key: LocalDefId) -> () {\n             desc { |tcx| \"checking that impls are well-formed in {}\", describe_as_module(key, tcx) }\n         }\n \n-        query collect_mod_item_types(key: DefId) -> () {\n+        query collect_mod_item_types(key: LocalDefId) -> () {\n             desc { |tcx| \"collecting item types in {}\", describe_as_module(key, tcx) }\n         }\n "}, {"sha": "87fba6b46ac5960f7b1018e2181b326b326f4192", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::ast::{Attribute, NestedMetaItem};\n use rustc_ast::attr;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{self, HirId, Item, ItemKind, TraitItem};\n use rustc_hir::{MethodKind, Target};\n@@ -461,7 +461,7 @@ fn is_c_like_enum(item: &Item<'_>) -> bool {\n     }\n }\n \n-fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir()\n         .visit_item_likes_in_module(module_def_id, &mut CheckAttrVisitor { tcx }.as_deep_visitor());\n }"}, {"sha": "90a076eeded7ed520be0afa2a4a410262c88169b", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -9,7 +9,7 @@\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n@@ -62,7 +62,7 @@ impl NonConstExpr {\n     }\n }\n \n-fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let mut vis = CheckConstVisitor::new(tcx);\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis.as_deep_visitor());\n }"}, {"sha": "2edbc29b7efb6fcb92936d694547a39ece519ca0", "filename": "src/librustc_passes/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_id_validator.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -17,7 +17,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     par_iter(&hir_map.krate().modules).for_each(|(module_id, _)| {\n         let local_def_id = hir_map.local_def_id(*module_id);\n         hir_map.visit_item_likes_in_module(\n-            local_def_id.to_def_id(),\n+            local_def_id,\n             &mut OuterVisitor { hir_map, errors: &errors },\n         );\n     });"}, {"sha": "683039df15ac6d0de0f47898f577befc37df68ea", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -2,7 +2,7 @@ use rustc_ast::ast::{FloatTy, InlineAsmTemplatePiece, IntTy, UintTy};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n@@ -14,7 +14,7 @@ use rustc_target::abi::{Pointer, VariantIdx};\n use rustc_target::asm::{InlineAsmRegOrRegClass, InlineAsmType};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n-fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx }.as_deep_visitor());\n }\n "}, {"sha": "798c6b8925bbf6d03c992507d955c3633a8d9a06", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -89,7 +89,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc_middle::hir::map::Map;\n@@ -172,7 +172,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     }\n }\n \n-fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut IrMaps::new(tcx, module_def_id).as_deep_visitor(),\n@@ -248,7 +248,7 @@ enum VarKind {\n \n struct IrMaps<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    body_owner: DefId,\n+    body_owner: LocalDefId,\n     num_live_nodes: usize,\n     num_vars: usize,\n     live_node_map: HirIdMap<LiveNode>,\n@@ -259,7 +259,7 @@ struct IrMaps<'tcx> {\n }\n \n impl IrMaps<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>, body_owner: DefId) -> IrMaps<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>, body_owner: LocalDefId) -> IrMaps<'tcx> {\n         IrMaps {\n             tcx,\n             body_owner,\n@@ -349,7 +349,7 @@ fn visit_fn<'tcx>(\n \n     // swap in a new set of IR maps for this function body:\n     let def_id = ir.tcx.hir().local_def_id(id);\n-    let mut fn_maps = IrMaps::new(ir.tcx, def_id.to_def_id());\n+    let mut fn_maps = IrMaps::new(ir.tcx, def_id);\n \n     // Don't run unused pass for #[derive()]\n     if let FnKind::Method(..) = fk {\n@@ -484,7 +484,7 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr<'tcx>) {\n             }\n             ir.set_captures(expr.hir_id, call_caps);\n             let old_body_owner = ir.body_owner;\n-            ir.body_owner = closure_def_id.to_def_id();\n+            ir.body_owner = closure_def_id;\n             intravisit::walk_expr(ir, expr);\n             ir.body_owner = old_body_owner;\n         }\n@@ -937,7 +937,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             for (&var_hir_id, upvar) in upvars.iter().rev() {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath { hir_id: var_hir_id },\n-                    closure_expr_id: self.ir.body_owner.expect_local(),\n+                    closure_expr_id: self.ir.body_owner,\n                 };\n                 match self.tables.upvar_capture(upvar_id) {\n                     ty::UpvarCapture::ByRef(_) => {\n@@ -1614,7 +1614,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n             let var = self.variable(var_hir_id, upvar.span);\n             let upvar_id = ty::UpvarId {\n                 var_path: ty::UpvarPath { hir_id: var_hir_id },\n-                closure_expr_id: self.ir.body_owner.expect_local(),\n+                closure_expr_id: self.ir.body_owner,\n             };\n             match self.tables.upvar_capture(upvar_id) {\n                 ty::UpvarCapture::ByValue => {}"}, {"sha": "d7012d4d711df89de5d8e08cd4fc7a96ddd78636", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -2,7 +2,7 @@ use Context::*;\n \n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Destination, Movability, Node};\n use rustc_middle::hir::map::Map;\n@@ -29,7 +29,7 @@ struct CheckLoopVisitor<'a, 'hir> {\n     cx: Context,\n }\n \n-fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: tcx.hir(), cx: Normal }.as_deep_visitor(),"}, {"sha": "ad512c63352f1a062c8bf0daeee2cb5a216754f2", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n use rustc_middle::hir::map::Map;\n@@ -472,7 +472,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n \n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n-fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n }\n "}, {"sha": "7c4048ab223023f3b56bd3671a3043a1bca01131", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -737,7 +737,7 @@ pub fn check_wf_new(tcx: TyCtxt<'_>) {\n     tcx.hir().krate().par_visit_all_item_likes(&visit);\n }\n \n-fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n "}, {"sha": "b486e3d3536c99f4e0f1e69d62be93f56deb8fff", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -55,7 +55,7 @@ struct OnlySelfBounds(bool);\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CollectItemTypesVisitor { tcx }.as_deep_visitor(),"}, {"sha": "77cd1b3de0106723004e428c9aab4773e1efd4be", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e7b4798405917560a224b6e9f2eab07524e0b7/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=a4e7b4798405917560a224b6e9f2eab07524e0b7", "patch": "@@ -14,7 +14,7 @@ use min_specialization::check_min_specialization;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n@@ -59,11 +59,11 @@ pub fn impl_wf_check(tcx: TyCtxt<'_>) {\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n     for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_impl_wf(tcx.hir().local_def_id(module).to_def_id());\n+        tcx.ensure().check_mod_impl_wf(tcx.hir().local_def_id(module));\n     }\n }\n \n-fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let min_specialization = tcx.features().min_specialization;\n     tcx.hir()\n         .visit_item_likes_in_module(module_def_id, &mut ImplWfCheck { tcx, min_specialization });"}]}