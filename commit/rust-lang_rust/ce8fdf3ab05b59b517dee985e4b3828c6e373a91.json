{"sha": "ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOGZkZjNhYjA1YjU5YjUxN2RlZTk4NWU0YjM4MjhjNmUzNzNhOTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-14T19:37:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-14T19:37:28Z"}, "message": "Merge #9276\n\n9276: internal: refactor diagnostics more r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8a498dc4c333f2f0e513a5b63a45c226d6e12279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a498dc4c333f2f0e513a5b63a45c226d6e12279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgx6/4CRBK7hj4Ov3rIwAAnE4IAKO5h4pojXG+rwx/fFYGsI9e\nPh3fbmzkyB/6G2eHVHpNRpJMpdOWjwXkh7/yQ8TMc94CJN3c5zeaBNDFRnq65m2P\nSnc8wcaDZgpb7byHAHYrORIVzZh9Go+zzLNXfKOeIsrhsS52klxcH3g3p/CXucdp\nmDMLDsfzGPa6qHfKadQi04hZ0udLQlvWQKj5yzfS6ypf7RdcZ3mFKiADc9hNo878\nd8ynLf0fSS1TEP4pJ3Ntjdp2CRhK9x53379B6wEXu3HS/cxDmKeMDbxthzwbpbOJ\nTBbvDE3Z3wcFlU26jW8a5cdGhMy9TeT4n63KmXFg+kWxaZJJ/kZUqVjZUCf/CU0=\n=Ne3+\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a498dc4c333f2f0e513a5b63a45c226d6e12279\nparent 27a70492f7eb8181c90ed5aa62e8e8b7ce035c91\nparent 4cfc767d7fadeab025227d67f104065c9e8a55d3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623699448 +0000\ncommitter GitHub <noreply@github.com> 1623699448 +0000\n\nMerge #9276\n\n9276: internal: refactor diagnostics more r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "html_url": "https://github.com/rust-lang/rust/commit/ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a70492f7eb8181c90ed5aa62e8e8b7ce035c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a70492f7eb8181c90ed5aa62e8e8b7ce035c91", "html_url": "https://github.com/rust-lang/rust/commit/27a70492f7eb8181c90ed5aa62e8e8b7ce035c91"}, {"sha": "4cfc767d7fadeab025227d67f104065c9e8a55d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfc767d7fadeab025227d67f104065c9e8a55d3", "html_url": "https://github.com/rust-lang/rust/commit/4cfc767d7fadeab025227d67f104065c9e8a55d3"}], "stats": {"total": 700, "additions": 359, "deletions": 341}, "files": [{"sha": "d12594a4ce5c5f77c0f101870c890214ef50731d", "filename": "crates/ide_diagnostics/src/handlers/break_outside_of_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -23,7 +23,7 @@ mod tests {\n         check_diagnostics(\n             r#\"\n fn foo() { break; }\n-         //^^^^^ break outside of loop\n+         //^^^^^ error: break outside of loop\n \"#,\n         );\n     }"}, {"sha": "33152e284583d587c28db9ff92bb6ca5933bd0bc", "filename": "crates/ide_diagnostics/src/handlers/field_shorthand.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ffield_shorthand.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -7,7 +7,7 @@ use text_edit::TextEdit;\n \n use crate::{fix, Diagnostic, Severity};\n \n-pub(super) fn check(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n+pub(crate) fn field_shorthand(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n     match_ast! {\n         match node {\n             ast::RecordExpr(it) => check_expr_field_shorthand(acc, file_id, it),", "previous_filename": "crates/ide_diagnostics/src/field_shorthand.rs"}, {"sha": "dfd0e335197ffbcc4764219c620f181f20be5009", "filename": "crates/ide_diagnostics/src/handlers/inactive_code.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -49,26 +49,26 @@ fn f() {\n     // The three g\u0336e\u0336n\u0336d\u0336e\u0336r\u0336s\u0336 statements:\n \n     #[cfg(a)] fn f() {}  // Item statement\n-  //^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+  //^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: a is disabled\n     #[cfg(a)] {}         // Expression statement\n-  //^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+  //^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: a is disabled\n     #[cfg(a)] let x = 0; // let statement\n-  //^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+  //^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: a is disabled\n \n     abc(#[cfg(a)] 0);\n-      //^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+      //^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: a is disabled\n     let x = Struct {\n         #[cfg(a)] f: 0,\n-      //^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+      //^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: a is disabled\n     };\n     match () {\n         () => (),\n         #[cfg(a)] () => (),\n-      //^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+      //^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: a is disabled\n     }\n \n     #[cfg(a)] 0          // Trailing expression of block\n-  //^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+  //^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: a is disabled\n }\n         \"#,\n         );\n@@ -81,16 +81,16 @@ fn f() {\n         check(\n             r#\"\n     #[cfg(no)] pub fn f() {}\n-  //^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n+  //^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: no is disabled\n \n     #[cfg(no)] #[cfg(no2)] mod m;\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no and no2 are disabled\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: no and no2 are disabled\n \n     #[cfg(all(not(a), b))] enum E {}\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: b is disabled\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: b is disabled\n \n     #[cfg(feature = \"std\")] use std;\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: feature = \"std\" is disabled\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: feature = \"std\" is disabled\n \"#,\n         );\n     }\n@@ -102,14 +102,14 @@ fn f() {\n         check(\n             r#\"\n     #[cfg_attr(not(never), cfg(no))] fn f() {}\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: no is disabled\n \n     #[cfg_attr(not(never), cfg(not(no)))] fn f() {}\n \n     #[cfg_attr(never, cfg(no))] fn g() {}\n \n     #[cfg_attr(not(never), inline, cfg(no))] fn h() {}\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives: no is disabled\n \"#,\n         );\n     }"}, {"sha": "72f251961f6c82ad5181a9fba54a6bc8b0933997", "filename": "crates/ide_diagnostics/src/handlers/incorrect_case.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -149,7 +149,7 @@ impl TestStruct {\n         check_diagnostics(\n             r#\"\n fn FOO() {}\n-// ^^^ Function `FOO` should have snake_case name, e.g. `foo`\n+// ^^^ \ud83d\udca1 weak: Function `FOO` should have snake_case name, e.g. `foo`\n \"#,\n         );\n         check_fix(r#\"fn FOO$0() {}\"#, r#\"fn foo() {}\"#);\n@@ -160,7 +160,7 @@ fn FOO() {}\n         check_diagnostics(\n             r#\"\n fn NonSnakeCaseName() {}\n-// ^^^^^^^^^^^^^^^^ Function `NonSnakeCaseName` should have snake_case name, e.g. `non_snake_case_name`\n+// ^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: Function `NonSnakeCaseName` should have snake_case name, e.g. `non_snake_case_name`\n \"#,\n         );\n     }\n@@ -170,10 +170,10 @@ fn NonSnakeCaseName() {}\n         check_diagnostics(\n             r#\"\n fn foo(SomeParam: u8) {}\n-    // ^^^^^^^^^ Parameter `SomeParam` should have snake_case name, e.g. `some_param`\n+    // ^^^^^^^^^ \ud83d\udca1 weak: Parameter `SomeParam` should have snake_case name, e.g. `some_param`\n \n fn foo2(ok_param: &str, CAPS_PARAM: u8) {}\n-                     // ^^^^^^^^^^ Parameter `CAPS_PARAM` should have snake_case name, e.g. `caps_param`\n+                     // ^^^^^^^^^^ \ud83d\udca1 weak: Parameter `CAPS_PARAM` should have snake_case name, e.g. `caps_param`\n \"#,\n         );\n     }\n@@ -184,9 +184,9 @@ fn foo2(ok_param: &str, CAPS_PARAM: u8) {}\n             r#\"\n fn foo() {\n     let SOME_VALUE = 10;\n-     // ^^^^^^^^^^ Variable `SOME_VALUE` should have snake_case name, e.g. `some_value`\n+     // ^^^^^^^^^^ \ud83d\udca1 weak: Variable `SOME_VALUE` should have snake_case name, e.g. `some_value`\n     let AnotherValue = 20;\n-     // ^^^^^^^^^^^^ Variable `AnotherValue` should have snake_case name, e.g. `another_value`\n+     // ^^^^^^^^^^^^ \ud83d\udca1 weak: Variable `AnotherValue` should have snake_case name, e.g. `another_value`\n }\n \"#,\n         );\n@@ -197,10 +197,10 @@ fn foo() {\n         check_diagnostics(\n             r#\"\n struct non_camel_case_name {}\n-    // ^^^^^^^^^^^^^^^^^^^ Structure `non_camel_case_name` should have CamelCase name, e.g. `NonCamelCaseName`\n+    // ^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: Structure `non_camel_case_name` should have CamelCase name, e.g. `NonCamelCaseName`\n \n struct SCREAMING_CASE {}\n-    // ^^^^^^^^^^^^^^ Structure `SCREAMING_CASE` should have CamelCase name, e.g. `ScreamingCase`\n+    // ^^^^^^^^^^^^^^ \ud83d\udca1 weak: Structure `SCREAMING_CASE` should have CamelCase name, e.g. `ScreamingCase`\n \"#,\n         );\n     }\n@@ -219,7 +219,7 @@ struct AABB {}\n         check_diagnostics(\n             r#\"\n struct SomeStruct { SomeField: u8 }\n-                 // ^^^^^^^^^ Field `SomeField` should have snake_case name, e.g. `some_field`\n+                 // ^^^^^^^^^ \ud83d\udca1 weak: Field `SomeField` should have snake_case name, e.g. `some_field`\n \"#,\n         );\n     }\n@@ -229,10 +229,10 @@ struct SomeStruct { SomeField: u8 }\n         check_diagnostics(\n             r#\"\n enum some_enum { Val(u8) }\n-  // ^^^^^^^^^ Enum `some_enum` should have CamelCase name, e.g. `SomeEnum`\n+  // ^^^^^^^^^ \ud83d\udca1 weak: Enum `some_enum` should have CamelCase name, e.g. `SomeEnum`\n \n enum SOME_ENUM {}\n-  // ^^^^^^^^^ Enum `SOME_ENUM` should have CamelCase name, e.g. `SomeEnum`\n+  // ^^^^^^^^^ \ud83d\udca1 weak: Enum `SOME_ENUM` should have CamelCase name, e.g. `SomeEnum`\n \"#,\n         );\n     }\n@@ -251,7 +251,7 @@ enum AABB {}\n         check_diagnostics(\n             r#\"\n enum SomeEnum { SOME_VARIANT(u8) }\n-             // ^^^^^^^^^^^^ Variant `SOME_VARIANT` should have CamelCase name, e.g. `SomeVariant`\n+             // ^^^^^^^^^^^^ \ud83d\udca1 weak: Variant `SOME_VARIANT` should have CamelCase name, e.g. `SomeVariant`\n \"#,\n         );\n     }\n@@ -261,7 +261,7 @@ enum SomeEnum { SOME_VARIANT(u8) }\n         check_diagnostics(\n             r#\"\n const some_weird_const: u8 = 10;\n-   // ^^^^^^^^^^^^^^^^ Constant `some_weird_const` should have UPPER_SNAKE_CASE name, e.g. `SOME_WEIRD_CONST`\n+   // ^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: Constant `some_weird_const` should have UPPER_SNAKE_CASE name, e.g. `SOME_WEIRD_CONST`\n \"#,\n         );\n     }\n@@ -271,7 +271,7 @@ const some_weird_const: u8 = 10;\n         check_diagnostics(\n             r#\"\n static some_weird_const: u8 = 10;\n-    // ^^^^^^^^^^^^^^^^ Static variable `some_weird_const` should have UPPER_SNAKE_CASE name, e.g. `SOME_WEIRD_CONST`\n+    // ^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: Static variable `some_weird_const` should have UPPER_SNAKE_CASE name, e.g. `SOME_WEIRD_CONST`\n \"#,\n         );\n     }\n@@ -281,13 +281,13 @@ static some_weird_const: u8 = 10;\n         check_diagnostics(\n             r#\"\n struct someStruct;\n-    // ^^^^^^^^^^ Structure `someStruct` should have CamelCase name, e.g. `SomeStruct`\n+    // ^^^^^^^^^^ \ud83d\udca1 weak: Structure `someStruct` should have CamelCase name, e.g. `SomeStruct`\n \n impl someStruct {\n     fn SomeFunc(&self) {\n-    // ^^^^^^^^ Function `SomeFunc` should have snake_case name, e.g. `some_func`\n+    // ^^^^^^^^ \ud83d\udca1 weak: Function `SomeFunc` should have snake_case name, e.g. `some_func`\n         let WHY_VAR_IS_CAPS = 10;\n-         // ^^^^^^^^^^^^^^^ Variable `WHY_VAR_IS_CAPS` should have snake_case name, e.g. `why_var_is_caps`\n+         // ^^^^^^^^^^^^^^^ \ud83d\udca1 weak: Variable `WHY_VAR_IS_CAPS` should have snake_case name, e.g. `why_var_is_caps`\n     }\n }\n \"#,\n@@ -319,7 +319,7 @@ enum Option { Some, None }\n fn main() {\n     match Option::None {\n         SOME_VAR @ None => (),\n-     // ^^^^^^^^ Variable `SOME_VAR` should have snake_case name, e.g. `some_var`\n+     // ^^^^^^^^ \ud83d\udca1 weak: Variable `SOME_VAR` should have snake_case name, e.g. `some_var`\n         Some => (),\n     }\n }\n@@ -421,11 +421,11 @@ extern {\n         check_diagnostics(\n             r#\"\n trait BAD_TRAIT {\n-    // ^^^^^^^^^ Trait `BAD_TRAIT` should have CamelCase name, e.g. `BadTrait`\n+    // ^^^^^^^^^ \ud83d\udca1 weak: Trait `BAD_TRAIT` should have CamelCase name, e.g. `BadTrait`\n     fn BAD_FUNCTION();\n-    // ^^^^^^^^^^^^ Function `BAD_FUNCTION` should have snake_case name, e.g. `bad_function`\n+    // ^^^^^^^^^^^^ \ud83d\udca1 weak: Function `BAD_FUNCTION` should have snake_case name, e.g. `bad_function`\n     fn BadFunction();\n-    // ^^^^^^^^^^^^ Function `BadFunction` should have snake_case name, e.g. `bad_function`\n+    // ^^^^^^^^^^^^ \ud83d\udca1 weak: Function `BadFunction` should have snake_case name, e.g. `bad_function`\n }\n     \"#,\n         );"}, {"sha": "356f089b228b0d1e3a2c2d101b78e297cde2bc20", "filename": "crates/ide_diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -27,7 +27,7 @@ mod tests {\n macro_rules! include { () => {} }\n \n   include!(\"doesntexist\");\n-//^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `doesntexist`\n+//^^^^^^^^^^^^^^^^^^^^^^^^ error: failed to load file `doesntexist`\n             \"#,\n         );\n     }\n@@ -66,7 +66,7 @@ macro_rules! env { () => {} }\n macro_rules! concat { () => {} }\n \n   include!(concat!(env!(\"OUT_DIR\"), \"/out.rs\"));\n-//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"run build scripts\" to fix\n \"#,\n         );\n     }\n@@ -108,23 +108,23 @@ fn main() {\n     // Test a handful of built-in (eager) macros:\n \n     include!(invalid);\n-  //^^^^^^^^^^^^^^^^^ could not convert tokens\n+  //^^^^^^^^^^^^^^^^^ error: could not convert tokens\n     include!(\"does not exist\");\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `does not exist`\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^ error: failed to load file `does not exist`\n \n     env!(invalid);\n-  //^^^^^^^^^^^^^ could not convert tokens\n+  //^^^^^^^^^^^^^ error: could not convert tokens\n \n     env!(\"OUT_DIR\");\n-  //^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n+  //^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"run build scripts\" to fix\n \n     compile_error!(\"compile_error works\");\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ compile_error works\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: compile_error works\n \n     // Lazy:\n \n     format_args!();\n-  //^^^^^^^^^^^^^^ no rule matches input tokens\n+  //^^^^^^^^^^^^^^ error: no rule matches input tokens\n }\n \"#,\n         );\n@@ -141,7 +141,7 @@ fn f() {\n     m!();\n \n     m!(hi);\n-  //^^^^^^ leftover tokens\n+  //^^^^^^ error: leftover tokens\n }\n       \"#,\n         );\n@@ -166,7 +166,7 @@ macro_rules! outer {\n \n fn f() {\n     outer!();\n-} //^^^^^^^^ leftover tokens\n+} //^^^^^^^^ error: leftover tokens\n \"#,\n         )\n     }"}, {"sha": "a9b6d3870af5c88f9da253aab5e31e0fd11fc19e", "filename": "crates/ide_diagnostics/src/handlers/mismatched_arg_count.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -26,7 +26,7 @@ mod tests {\n             r#\"\n fn zero() {}\n fn f() { zero(1); }\n-       //^^^^^^^ expected 0 arguments, found 1\n+       //^^^^^^^ error: expected 0 arguments, found 1\n \"#,\n         );\n \n@@ -44,7 +44,7 @@ fn f() { zero(); }\n             r#\"\n fn one(arg: u8) {}\n fn f() { one(); }\n-       //^^^^^ expected 1 argument, found 0\n+       //^^^^^ error: expected 1 argument, found 0\n \"#,\n         );\n \n@@ -65,7 +65,7 @@ impl S { fn method(&self) {} }\n \n fn f() {\n     S::method();\n-} //^^^^^^^^^^^ expected 1 argument, found 0\n+} //^^^^^^^^^^^ error: expected 1 argument, found 0\n \"#,\n         );\n \n@@ -91,7 +91,7 @@ impl S { fn method(&self, arg: u8) {} }\n \n             fn f() {\n                 S.method();\n-            } //^^^^^^^^^^ expected 1 argument, found 0\n+            } //^^^^^^^^^^ error: expected 1 argument, found 0\n             \"#,\n         );\n \n@@ -131,7 +131,7 @@ fn f() {\n struct Tup(u8, u16);\n fn f() {\n     Tup(0);\n-} //^^^^^^ expected 2 arguments, found 1\n+} //^^^^^^ error: expected 2 arguments, found 1\n \"#,\n         )\n     }\n@@ -143,7 +143,7 @@ fn f() {\n enum En { Variant(u8, u16), }\n fn f() {\n     En::Variant(0);\n-} //^^^^^^^^^^^^^^ expected 2 arguments, found 1\n+} //^^^^^^^^^^^^^^ error: expected 2 arguments, found 1\n \"#,\n         )\n     }\n@@ -162,9 +162,9 @@ impl Foo {\n     fn new() {\n         Foo::Bar(0);\n         Foo::Bar(0, 1);\n-      //^^^^^^^^^^^^^^ expected 1 argument, found 2\n+      //^^^^^^^^^^^^^^ error: expected 1 argument, found 2\n         Foo::Bar();\n-      //^^^^^^^^^^ expected 1 argument, found 0\n+      //^^^^^^^^^^ error: expected 1 argument, found 0\n     }\n }\n         \"#,\n@@ -185,7 +185,7 @@ fn f() {\n     unsafe {\n         fixed(0);\n         fixed(0, 1);\n-      //^^^^^^^^^^^ expected 1 argument, found 2\n+      //^^^^^^^^^^^ error: expected 1 argument, found 2\n         varargs(0);\n         varargs(0, 1);\n         varargs2();\n@@ -204,10 +204,10 @@ fn f() {\n fn main() {\n     let f = |()| ();\n     f();\n-  //^^^ expected 1 argument, found 0\n+  //^^^ error: expected 1 argument, found 0\n     f(());\n     f((), ());\n-  //^^^^^^^^^ expected 1 argument, found 2\n+  //^^^^^^^^^ error: expected 1 argument, found 2\n }\n \"#,\n         )"}, {"sha": "bc56e03428771878cd22c00620bacde345991a57", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -19,7 +19,7 @@ use crate::{fix, Diagnostic, DiagnosticsContext};\n // let a = A { a: 10 };\n // ```\n pub(crate) fn missing_fields(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Diagnostic {\n-    let mut message = String::from(\"Missing structure fields:\\n\");\n+    let mut message = String::from(\"missing structure fields:\\n\");\n     for field in &d.missed_fields {\n         format_to!(message, \"- {}\\n\", field);\n     }\n@@ -85,7 +85,7 @@ mod tests {\n struct S { foo: i32, bar: () }\n fn baz(s: S) {\n     let S { foo: _ } = s;\n-      //^ Missing structure fields:\n+      //^ error: missing structure fields:\n       //| - bar\n }\n \"#,\n@@ -323,4 +323,33 @@ fn f() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn import_extern_crate_clash_with_inner_item() {\n+        // This is more of a resolver test, but doesn't really work with the hir_def testsuite.\n+\n+        check_diagnostics(\n+            r#\"\n+//- /lib.rs crate:lib deps:jwt\n+mod permissions;\n+\n+use permissions::jwt;\n+\n+fn f() {\n+    fn inner() {}\n+    jwt::Claims {}; // should resolve to the local one with 0 fields, and not get a diagnostic\n+}\n+\n+//- /permissions.rs\n+pub mod jwt  {\n+    pub struct Claims {}\n+}\n+\n+//- /jwt/lib.rs crate:jwt\n+pub struct Claims {\n+    field: u8,\n+}\n+        \"#,\n+        );\n+    }\n }"}, {"sha": "947b0f2e2e628e580814e2a47dd3310f45cb8fd7", "filename": "crates/ide_diagnostics/src/handlers/missing_match_arms.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -31,9 +31,9 @@ mod tests {\n             r#\"\n fn main() {\n     match () { }\n-        //^^ missing match arm\n+        //^^ error: missing match arm\n     match (()) { }\n-        //^^^^ missing match arm\n+        //^^^^ error: missing match arm\n \n     match () { _ => (), }\n     match () { () => (), }\n@@ -49,7 +49,7 @@ fn main() {\n             r#\"\n fn main() {\n     match ((), ()) { }\n-        //^^^^^^^^ missing match arm\n+        //^^^^^^^^ error: missing match arm\n \n     match ((), ()) { ((), ()) => (), }\n }\n@@ -63,21 +63,21 @@ fn main() {\n             r#\"\n fn test_main() {\n     match false { }\n-        //^^^^^ missing match arm\n+        //^^^^^ error: missing match arm\n     match false { true => (), }\n-        //^^^^^ missing match arm\n+        //^^^^^ error: missing match arm\n     match (false, true) {}\n-        //^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^ error: missing match arm\n     match (false, true) { (true, true) => (), }\n-        //^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^ error: missing match arm\n     match (false, true) {\n-        //^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^ error: missing match arm\n         (false, true) => (),\n         (false, false) => (),\n         (true, false) => (),\n     }\n     match (false, true) { (true, _x) => (), }\n-        //^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^ error: missing match arm\n \n     match false { true => (), false => (), }\n     match (false, true) {\n@@ -116,11 +116,11 @@ fn test_main() {\n             r#\"\n fn main() {\n     match (false, ((), false)) {}\n-        //^^^^^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^^^^^ error: missing match arm\n     match (false, ((), false)) { (true, ((), true)) => (), }\n-        //^^^^^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^^^^^ error: missing match arm\n     match (false, ((), false)) { (true, _) => (), }\n-        //^^^^^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^^^^^ error: missing match arm\n \n     match (false, ((), false)) {\n         (true, ((), true)) => (),\n@@ -146,12 +146,12 @@ enum Either { A, B, }\n \n fn main() {\n     match Either::A { }\n-        //^^^^^^^^^ missing match arm\n+        //^^^^^^^^^ error: missing match arm\n     match Either::B { Either::A => (), }\n-        //^^^^^^^^^ missing match arm\n+        //^^^^^^^^^ error: missing match arm\n \n     match &Either::B {\n-        //^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^ error: missing match arm\n         Either::A => (),\n     }\n \n@@ -174,9 +174,9 @@ enum Either { A(bool), B }\n \n fn main() {\n     match Either::B { }\n-        //^^^^^^^^^ missing match arm\n+        //^^^^^^^^^ error: missing match arm\n     match Either::B {\n-        //^^^^^^^^^ missing match arm\n+        //^^^^^^^^^ error: missing match arm\n         Either::A(true) => (), Either::B => ()\n     }\n \n@@ -207,7 +207,7 @@ enum Either { A(bool), B(bool, bool) }\n \n fn main() {\n     match Either::A(false) {\n-        //^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^ error: missing match arm\n         Either::A(_) => (),\n         Either::B(false, _) => (),\n     }\n@@ -352,7 +352,7 @@ fn main() {\n         Either::A => (),\n     }\n     match loop { break Foo::A } {\n-        //^^^^^^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^^^^^^ error: missing match arm\n         Either::A => (),\n     }\n     match loop { break Foo::A } {\n@@ -390,19 +390,19 @@ enum Either { A { foo: bool }, B }\n fn main() {\n     let a = Either::A { foo: true };\n     match a { }\n-        //^ missing match arm\n+        //^ error: missing match arm\n     match a { Either::A { foo: true } => () }\n-        //^ missing match arm\n+        //^ error: missing match arm\n     match a {\n         Either::A { } => (),\n-      //^^^^^^^^^ Missing structure fields:\n+      //^^^^^^^^^ error: missing structure fields:\n       //        | - foo\n         Either::B => (),\n     }\n     match a {\n-        //^ missing match arm\n+        //^ error: missing match arm\n         Either::A { } => (),\n-    } //^^^^^^^^^ Missing structure fields:\n+    } //^^^^^^^^^ error: missing structure fields:\n       //        | - foo\n \n     match a {\n@@ -431,7 +431,7 @@ enum Either {\n fn main() {\n     let a = Either::A { foo: true, bar: () };\n     match a {\n-        //^ missing match arm\n+        //^ error: missing match arm\n         Either::A { bar: (), foo: false } => (),\n         Either::A { foo: true, bar: () } => (),\n     }\n@@ -458,12 +458,12 @@ enum Either {\n fn main() {\n     let a = Either::B;\n     match a {\n-        //^ missing match arm\n+        //^ error: missing match arm\n         Either::A { foo: true, .. } => (),\n         Either::B => (),\n     }\n     match a {\n-        //^ missing match arm\n+        //^ error: missing match arm\n         Either::A { .. } => (),\n     }\n \n@@ -493,14 +493,14 @@ enum Either {\n \n fn main() {\n     match Either::B {\n-        //^^^^^^^^^ missing match arm\n+        //^^^^^^^^^ error: missing match arm\n         Either::A(true, .., true) => (),\n         Either::A(true, .., false) => (),\n         Either::A(false, .., false) => (),\n         Either::B => (),\n     }\n     match Either::B {\n-        //^^^^^^^^^ missing match arm\n+        //^^^^^^^^^ error: missing match arm\n         Either::A(true, .., true) => (),\n         Either::A(true, .., false) => (),\n         Either::A(.., true) => (),\n@@ -537,7 +537,7 @@ fn enum_(never: Never) {\n }\n fn enum_ref(never: &Never) {\n     match never {}\n-        //^^^^^ missing match arm\n+        //^^^^^ error: missing match arm\n }\n fn bang(never: !) {\n     match never {}\n@@ -561,7 +561,7 @@ fn main() {\n         Some(never) => match never {},\n     }\n     match Option::<Never>::None {\n-        //^^^^^^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^^^^^^ error: missing match arm\n         Option::Some(_never) => {},\n     }\n }\n@@ -575,7 +575,7 @@ fn main() {\n             r#\"\n fn main() {\n     match (false, true, false) {\n-        //^^^^^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^^^^^ error: missing match arm\n         (false, ..) => (),\n     }\n }\"#,\n@@ -588,7 +588,7 @@ fn main() {\n             r#\"\n fn main() {\n     match (false, true, false) {\n-        //^^^^^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^^^^^ error: missing match arm\n         (.., false) => (),\n     }\n }\"#,\n@@ -601,7 +601,7 @@ fn main() {\n             r#\"\n fn main() {\n     match (false, true, false) {\n-        //^^^^^^^^^^^^^^^^^^^^ missing match arm\n+        //^^^^^^^^^^^^^^^^^^^^ error: missing match arm\n         (true, .., false) => (),\n     }\n }\"#,\n@@ -614,11 +614,11 @@ fn main() {\n             r#\"struct Foo { a: bool }\n fn main(f: Foo) {\n     match f {}\n-        //^ missing match arm\n+        //^ error: missing match arm\n     match f { Foo { a: true } => () }\n-        //^ missing match arm\n+        //^ error: missing match arm\n     match &f { Foo { a: true } => () }\n-        //^^ missing match arm\n+        //^^ error: missing match arm\n     match f { Foo { a: _ } => () }\n     match f {\n         Foo { a: true } => (),\n@@ -639,9 +639,9 @@ fn main(f: Foo) {\n             r#\"struct Foo(bool);\n fn main(f: Foo) {\n     match f {}\n-        //^ missing match arm\n+        //^ error: missing match arm\n     match f { Foo(true) => () }\n-        //^ missing match arm\n+        //^ error: missing match arm\n     match f {\n         Foo(true) => (),\n         Foo(false) => (),\n@@ -657,7 +657,7 @@ fn main(f: Foo) {\n             r#\"struct Foo;\n fn main(f: Foo) {\n     match f {}\n-        //^ missing match arm\n+        //^ error: missing match arm\n     match f { Foo => () }\n }\n \"#,\n@@ -670,9 +670,9 @@ fn main(f: Foo) {\n             r#\"struct Foo { foo: bool, bar: bool }\n fn main(f: Foo) {\n     match f { Foo { foo: true, .. } => () }\n-        //^ missing match arm\n+        //^ error: missing match arm\n     match f {\n-        //^ missing match arm\n+        //^ error: missing match arm\n         Foo { foo: true, .. } => (),\n         Foo { bar: false, .. } => ()\n     }\n@@ -693,7 +693,7 @@ fn main(f: Foo) {\n fn main() {\n     enum Either { A(bool), B }\n     match Either::B {\n-        //^^^^^^^^^ missing match arm\n+        //^^^^^^^^^ error: missing match arm\n         Either::A(true | false) => (),\n     }\n }\n@@ -715,7 +715,7 @@ fn main(v: S) {\n     match v { S{..}       => {} }\n     match v { _           => {} }\n     match v { }\n-        //^ missing match arm\n+        //^ error: missing match arm\n }\n \"#,\n         );\n@@ -731,7 +731,7 @@ fn main() {\n         false     => {}\n     }\n     match true { _x @ true => {} }\n-        //^^^^ missing match arm\n+        //^^^^ error: missing match arm\n }\n \"#,\n         );\n@@ -786,12 +786,12 @@ use lib::E;\n fn main() {\n     match E::A { _ => {} }\n     match E::A {\n-        //^^^^ missing match arm\n+        //^^^^ error: missing match arm\n         E::A => {}\n         E::B => {}\n     }\n     match E::A {\n-        //^^^^ missing match arm\n+        //^^^^ error: missing match arm\n         E::A | E::B => {}\n     }\n }\n@@ -810,7 +810,7 @@ fn main() {\n         false         => {}\n     }\n     match true {\n-        //^^^^ missing match arm\n+        //^^^^ error: missing match arm\n         true if false => {}\n         false         => {}\n     }"}, {"sha": "7acd9228a89ad2d7e69ec3ce98fb33b199836417", "filename": "crates/ide_diagnostics/src/handlers/missing_unsafe.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     let x = &5 as *const usize;\n     unsafe { let y = *x; }\n     let z = *x;\n-}         //^^ this operation is unsafe and requires an unsafe function or block\n+}         //^^ error: this operation is unsafe and requires an unsafe function or block\n \"#,\n         )\n     }\n@@ -48,9 +48,9 @@ unsafe fn unsafe_fn() {\n \n fn main() {\n     unsafe_fn();\n-  //^^^^^^^^^^^ this operation is unsafe and requires an unsafe function or block\n+  //^^^^^^^^^^^ error: this operation is unsafe and requires an unsafe function or block\n     HasUnsafe.unsafe_fn();\n-  //^^^^^^^^^^^^^^^^^^^^^ this operation is unsafe and requires an unsafe function or block\n+  //^^^^^^^^^^^^^^^^^^^^^ error: this operation is unsafe and requires an unsafe function or block\n     unsafe {\n         unsafe_fn();\n         HasUnsafe.unsafe_fn();\n@@ -72,7 +72,7 @@ static mut STATIC_MUT: Ty = Ty { a: 0 };\n \n fn main() {\n     let x = STATIC_MUT.a;\n-          //^^^^^^^^^^ this operation is unsafe and requires an unsafe function or block\n+          //^^^^^^^^^^ error: this operation is unsafe and requires an unsafe function or block\n     unsafe {\n         let x = STATIC_MUT.a;\n     }\n@@ -93,7 +93,7 @@ extern \"rust-intrinsic\" {\n fn main() {\n     let _ = bitreverse(12);\n     let _ = floorf32(12.0);\n-          //^^^^^^^^^^^^^^ this operation is unsafe and requires an unsafe function or block\n+          //^^^^^^^^^^^^^^ error: this operation is unsafe and requires an unsafe function or block\n }\n \"#,\n         );"}, {"sha": "92e8867f42f4b6e0ef99e2672a3894903cfec830", "filename": "crates/ide_diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -119,11 +119,11 @@ struct S { foo: i32, bar: () }\n impl S {\n     fn new() -> S {\n         S {\n-      //^ Missing structure fields:\n+      //^ \ud83d\udca1 error: missing structure fields:\n       //|    - bar\n             foo: 92,\n             baz: 62,\n-          //^^^^^^^ no such field\n+          //^^^^^^^ \ud83d\udca1 error: no such field\n         }\n     }\n }"}, {"sha": "4e639f2140689e667c0ebd31a14fba6c5a15ae91", "filename": "crates/ide_diagnostics/src/handlers/remove_this_semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -49,7 +49,7 @@ mod tests {\n         check_diagnostics(\n             r#\"\n fn test() -> i32 { 123; }\n-                 //^^^ remove this semicolon\n+                 //^^^ \ud83d\udca1 error: remove this semicolon\n \"#,\n         );\n     }"}, {"sha": "cd87a10bb282a992fa77a9a79a9dfebe007407b8", "filename": "crates/ide_diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -91,8 +91,8 @@ pub mod iter {\n         check_diagnostics(\n             r#\"\n     fn foo() {\n-        let m = [1, 2, 3].iter().filter_map(|x| if *x == 2 { Some (4) } else { None }).next();\n-    }         //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ replace filter_map(..).next() with find_map(..)\n+        let m = [1, 2, 3].iter().filter_map(|x| Some(92)).next();\n+    }         //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: replace filter_map(..).next() with find_map(..)\n \"#,\n         );\n     }\n@@ -104,7 +104,7 @@ pub mod iter {\n fn foo() {\n     let m = [1, 2, 3]\n         .iter()\n-        .filter_map(|x| if *x == 2 { Some (4) } else { None })\n+        .filter_map(|x| Some(92))\n         .len();\n }\n \"#,\n@@ -118,7 +118,7 @@ fn foo() {\n fn foo() {\n     let m = [1, 2, 3]\n         .iter()\n-        .filter_map(|x| if *x == 2 { Some (4) } else { None })\n+        .filter_map(|x| Some(92))\n         .map(|x| x + 2)\n         .len();\n }\n@@ -133,7 +133,7 @@ fn foo() {\n fn foo() {\n     let m = [1, 2, 3]\n         .iter()\n-        .filter_map(|x| if *x == 2 { Some (4) } else { None });\n+        .filter_map(|x| Some(92));\n     let n = m.next();\n }\n \"#,\n@@ -148,7 +148,7 @@ fn foo() {\n use core::iter::Iterator;\n use core::option::Option::{self, Some, None};\n fn foo() {\n-    let m = [1, 2, 3].iter().$0filter_map(|x| if *x == 2 { Some (4) } else { None }).next();\n+    let m = [1, 2, 3].iter().$0filter_map(|x| Some(92)).next();\n }\n //- /core/lib.rs crate:core\n pub mod option {\n@@ -171,7 +171,7 @@ pub mod iter {\n use core::iter::Iterator;\n use core::option::Option::{self, Some, None};\n fn foo() {\n-    let m = [1, 2, 3].iter().find_map(|x| if *x == 2 { Some (4) } else { None });\n+    let m = [1, 2, 3].iter().find_map(|x| Some(92));\n }\n \"#,\n         )"}, {"sha": "8e601fa48dffab71db9e27dd1f2253a01c5fe44c", "filename": "crates/ide_diagnostics/src/handlers/unlinked_file.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -14,32 +14,29 @@ use text_edit::TextEdit;\n \n use crate::{fix, Assist, Diagnostic, DiagnosticsContext};\n \n-#[derive(Debug)]\n-pub(crate) struct UnlinkedFile {\n-    pub(crate) file: FileId,\n-}\n-\n // Diagnostic: unlinked-file\n //\n // This diagnostic is shown for files that are not included in any crate, or files that are part of\n // crates rust-analyzer failed to discover. The file will not have IDE features available.\n-pub(crate) fn unlinked_file(ctx: &DiagnosticsContext, d: &UnlinkedFile) -> Diagnostic {\n+pub(crate) fn unlinked_file(ctx: &DiagnosticsContext, acc: &mut Vec<Diagnostic>, file_id: FileId) {\n     // Limit diagnostic to the first few characters in the file. This matches how VS Code\n     // renders it with the full span, but on other editors, and is less invasive.\n-    let range = ctx.sema.db.parse(d.file).syntax_node().text_range();\n+    let range = ctx.sema.db.parse(file_id).syntax_node().text_range();\n     // FIXME: This is wrong if one of the first three characters is not ascii: `//\u042b`.\n     let range = range.intersect(TextRange::up_to(TextSize::of(\"...\"))).unwrap_or(range);\n \n-    Diagnostic::new(\"unlinked-file\", \"file not included in module tree\", range)\n-        .with_fixes(fixes(ctx, d))\n+    acc.push(\n+        Diagnostic::new(\"unlinked-file\", \"file not included in module tree\", range)\n+            .with_fixes(fixes(ctx, file_id)),\n+    );\n }\n \n-fn fixes(ctx: &DiagnosticsContext, d: &UnlinkedFile) -> Option<Vec<Assist>> {\n+fn fixes(ctx: &DiagnosticsContext, file_id: FileId) -> Option<Vec<Assist>> {\n     // If there's an existing module that could add `mod` or `pub mod` items to include the unlinked file,\n     // suggest that as a fix.\n \n-    let source_root = ctx.sema.db.source_root(ctx.sema.db.file_source_root(d.file));\n-    let our_path = source_root.path_for_file(&d.file)?;\n+    let source_root = ctx.sema.db.source_root(ctx.sema.db.file_source_root(file_id));\n+    let our_path = source_root.path_for_file(&file_id)?;\n     let module_name = our_path.name_and_extension()?.0;\n \n     // Candidates to look for:\n@@ -68,7 +65,7 @@ fn fixes(ctx: &DiagnosticsContext, d: &UnlinkedFile) -> Option<Vec<Assist>> {\n                     }\n \n                     if module.origin.file_id() == Some(*parent_id) {\n-                        return make_fixes(ctx.sema.db, *parent_id, module_name, d.file);\n+                        return make_fixes(ctx.sema.db, *parent_id, module_name, file_id);\n                     }\n                 }\n             }"}, {"sha": "74e4a69c64b799561827328f3033915f80f3959e", "filename": "crates/ide_diagnostics/src/handlers/unresolved_extern_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_extern_crate.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -25,7 +25,7 @@ mod tests {\n //- /main.rs crate:main deps:core\n extern crate core;\n   extern crate doesnotexist;\n-//^^^^^^^^^^^^^^^^^^^^^^^^^^ unresolved extern crate\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^ error: unresolved extern crate\n //- /lib.rs crate:core\n \"#,\n         );\n@@ -38,7 +38,7 @@ extern crate core;\n             r#\"\n //- /lib.rs\n   extern crate doesnotexist;\n-//^^^^^^^^^^^^^^^^^^^^^^^^^^ unresolved extern crate\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^ error: unresolved extern crate\n // Should not error.\n extern crate self as foo;\n struct Foo;"}, {"sha": "e52a88459d55adb0a5c7fb3657266382cdbe3501", "filename": "crates/ide_diagnostics/src/handlers/unresolved_import.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_import.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -30,7 +30,7 @@ mod tests {\n             r#\"\n use does_exist;\n use does_not_exist;\n-  //^^^^^^^^^^^^^^ unresolved import\n+  //^^^^^^^^^^^^^^ error: unresolved import\n \n mod does_exist {}\n \"#,\n@@ -43,18 +43,18 @@ mod does_exist {}\n         check_diagnostics(\n             r#\"\n use does_exist::{Exists, DoesntExist};\n-                       //^^^^^^^^^^^ unresolved import\n+                       //^^^^^^^^^^^ error: unresolved import\n \n use {does_not_exist::*, does_exist};\n-   //^^^^^^^^^^^^^^^^^ unresolved import\n+   //^^^^^^^^^^^^^^^^^ error: unresolved import\n \n use does_not_exist::{\n     a,\n-  //^ unresolved import\n+  //^ error: unresolved import\n     b,\n-  //^ unresolved import\n+  //^ error: unresolved import\n     c,\n-  //^ unresolved import\n+  //^ error: unresolved import\n };\n \n mod does_exist {\n@@ -71,18 +71,18 @@ mod does_exist {\n //- /main.rs crate:main\n mod a {\n     extern crate doesnotexist;\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^ unresolved extern crate\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^ error: unresolved extern crate\n \n     // Should not error, since we already errored for the missing crate.\n     use doesnotexist::{self, bla, *};\n \n     use crate::doesnotexist;\n-      //^^^^^^^^^^^^^^^^^^^ unresolved import\n+      //^^^^^^^^^^^^^^^^^^^ error: unresolved import\n }\n \n mod m {\n     use super::doesnotexist;\n-      //^^^^^^^^^^^^^^^^^^^ unresolved import\n+      //^^^^^^^^^^^^^^^^^^^ error: unresolved import\n }\n \"#,\n         );"}, {"sha": "f0f7725dbff23f288148eb9e13b16a6d749e0cd2", "filename": "crates/ide_diagnostics/src/handlers/unresolved_macro_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -40,7 +40,7 @@ mod tests {\n             r#\"\n fn f() {\n     m!();\n-} //^ unresolved macro `m!`\n+} //^ error: unresolved macro `m!`\n \n \"#,\n         );\n@@ -51,7 +51,7 @@ fn f() {\n         check_diagnostics(\n             r#\"\n foo::bar!(92);\n-   //^^^ unresolved macro `foo::bar!`\n+   //^^^ error: unresolved macro `foo::bar!`\n \"#,\n         );\n     }\n@@ -63,7 +63,7 @@ foo::bar!(92);\n macro_rules! m { () => {} }\n \n m!(); m2!();\n-    //^^ unresolved macro `self::m2!`\n+    //^^ error: unresolved macro `self::m2!`\n \"#,\n         );\n     }\n@@ -77,7 +77,7 @@ mod mac {\n macro_rules! m { () => {} } }\n \n self::m!(); self::m2!();\n-                //^^ unresolved macro `self::m2!`\n+                //^^ error: unresolved macro `self::m2!`\n \"#,\n         );\n     }"}, {"sha": "61fc43604f79a1a563f8d892b9e86e2e77decfde", "filename": "crates/ide_diagnostics/src/handlers/unresolved_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -50,7 +50,7 @@ mod tests {\n //- /lib.rs\n mod foo;\n   mod bar;\n-//^^^^^^^^ unresolved module\n+//^^^^^^^^ \ud83d\udca1 error: unresolved module\n mod baz {}\n //- /foo.rs\n \"#,"}, {"sha": "8b9330e040137a183977f3ef2ddcf1dd95d55249", "filename": "crates/ide_diagnostics/src/handlers/useless_braces.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fuseless_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fuseless_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fuseless_braces.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -0,0 +1,148 @@\n+use ide_db::{base_db::FileId, source_change::SourceChange};\n+use itertools::Itertools;\n+use syntax::{ast, AstNode, SyntaxNode, TextRange};\n+use text_edit::TextEdit;\n+\n+use crate::{fix, Diagnostic, Severity};\n+\n+// Diagnostic: unnecessary-braces\n+//\n+// Diagnostic for unnecessary braces in `use` items.\n+pub(crate) fn useless_braces(\n+    acc: &mut Vec<Diagnostic>,\n+    file_id: FileId,\n+    node: &SyntaxNode,\n+) -> Option<()> {\n+    let use_tree_list = ast::UseTreeList::cast(node.clone())?;\n+    if let Some((single_use_tree,)) = use_tree_list.use_trees().collect_tuple() {\n+        // If there is a comment inside the bracketed `use`,\n+        // assume it is a commented out module path and don't show diagnostic.\n+        if use_tree_list.has_inner_comment() {\n+            return Some(());\n+        }\n+\n+        let use_range = use_tree_list.syntax().text_range();\n+        let edit = remove_braces(&single_use_tree).unwrap_or_else(|| {\n+            let to_replace = single_use_tree.syntax().text().to_string();\n+            let mut edit_builder = TextEdit::builder();\n+            edit_builder.delete(use_range);\n+            edit_builder.insert(use_range.start(), to_replace);\n+            edit_builder.finish()\n+        });\n+\n+        acc.push(\n+            Diagnostic::new(\n+                \"unnecessary-braces\",\n+                \"Unnecessary braces in use statement\".to_string(),\n+                use_range,\n+            )\n+            .severity(Severity::WeakWarning)\n+            .with_fixes(Some(vec![fix(\n+                \"remove_braces\",\n+                \"Remove unnecessary braces\",\n+                SourceChange::from_text_edit(file_id, edit),\n+                use_range,\n+            )])),\n+        );\n+    }\n+\n+    Some(())\n+}\n+\n+fn remove_braces(single_use_tree: &ast::UseTree) -> Option<TextEdit> {\n+    let use_tree_list_node = single_use_tree.syntax().parent()?;\n+    if single_use_tree.path()?.segment()?.self_token().is_some() {\n+        let start = use_tree_list_node.prev_sibling_or_token()?.text_range().start();\n+        let end = use_tree_list_node.text_range().end();\n+        return Some(TextEdit::delete(TextRange::new(start, end)));\n+    }\n+    None\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_diagnostics, check_fix};\n+\n+    #[test]\n+    fn test_check_unnecessary_braces_in_use_statement() {\n+        check_diagnostics(\n+            r#\"\n+use a;\n+use a::{c, d::e};\n+\n+mod a {\n+    mod c {}\n+    mod d {\n+        mod e {}\n+    }\n+}\n+\"#,\n+        );\n+        check_diagnostics(\n+            r#\"\n+use a;\n+use a::{\n+    c,\n+    // d::e\n+};\n+\n+mod a {\n+    mod c {}\n+    mod d {\n+        mod e {}\n+    }\n+}\n+\"#,\n+        );\n+        check_fix(\n+            r#\"\n+mod b {}\n+use {$0b};\n+\"#,\n+            r#\"\n+mod b {}\n+use b;\n+\"#,\n+        );\n+        check_fix(\n+            r#\"\n+mod b {}\n+use {b$0};\n+\"#,\n+            r#\"\n+mod b {}\n+use b;\n+\"#,\n+        );\n+        check_fix(\n+            r#\"\n+mod a { mod c {} }\n+use a::{c$0};\n+\"#,\n+            r#\"\n+mod a { mod c {} }\n+use a::c;\n+\"#,\n+        );\n+        check_fix(\n+            r#\"\n+mod a {}\n+use a::{self$0};\n+\"#,\n+            r#\"\n+mod a {}\n+use a;\n+\"#,\n+        );\n+        check_fix(\n+            r#\"\n+mod a { mod c {} mod d { mod e {} } }\n+use a::{c, d::{e$0}};\n+\"#,\n+            r#\"\n+mod a { mod c {} mod d { mod e {} } }\n+use a::{c, d::e};\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "6ad1b4373d15de92de21a53ab059023d4b1ff4a2", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 34, "deletions": 190, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8fdf3ab05b59b517dee985e4b3828c6e373a91/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "patch": "@@ -37,15 +37,17 @@ mod handlers {\n     pub(crate) mod remove_this_semicolon;\n     pub(crate) mod replace_filter_map_next_with_find_map;\n     pub(crate) mod unimplemented_builtin_macro;\n-    pub(crate) mod unlinked_file;\n     pub(crate) mod unresolved_extern_crate;\n     pub(crate) mod unresolved_import;\n     pub(crate) mod unresolved_macro_call;\n     pub(crate) mod unresolved_module;\n     pub(crate) mod unresolved_proc_macro;\n-}\n \n-mod field_shorthand;\n+    // The handlers bellow are unusual, the implement the diagnostics as well.\n+    pub(crate) mod field_shorthand;\n+    pub(crate) mod useless_braces;\n+    pub(crate) mod unlinked_file;\n+}\n \n use hir::{diagnostics::AnyDiagnostic, Semantics};\n use ide_db::{\n@@ -55,15 +57,8 @@ use ide_db::{\n     source_change::SourceChange,\n     RootDatabase,\n };\n-use itertools::Itertools;\n use rustc_hash::FxHashSet;\n-use syntax::{\n-    ast::{self, AstNode},\n-    SyntaxNode, TextRange,\n-};\n-use text_edit::TextEdit;\n-\n-use crate::handlers::unlinked_file::UnlinkedFile;\n+use syntax::{ast::AstNode, TextRange};\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct DiagnosticCode(pub &'static str);\n@@ -123,6 +118,8 @@ impl Diagnostic {\n #[derive(Debug, Copy, Clone)]\n pub enum Severity {\n     Error,\n+    // We don't actually emit this one yet, but we should at some point.\n+    // Warning,\n     WeakWarning,\n }\n \n@@ -157,21 +154,20 @@ pub fn diagnostics(\n     );\n \n     for node in parse.tree().syntax().descendants() {\n-        check_unnecessary_braces_in_use_statement(&mut res, file_id, &node);\n-        field_shorthand::check(&mut res, file_id, &node);\n+        handlers::useless_braces::useless_braces(&mut res, file_id, &node);\n+        handlers::field_shorthand::field_shorthand(&mut res, file_id, &node);\n     }\n \n-    let mut diags = Vec::new();\n     let module = sema.to_module_def(file_id);\n-    if let Some(m) = module {\n-        m.diagnostics(db, &mut diags)\n-    }\n \n     let ctx = DiagnosticsContext { config, sema, resolve };\n     if module.is_none() {\n-        let d = UnlinkedFile { file: file_id };\n-        let d = handlers::unlinked_file::unlinked_file(&ctx, &d);\n-        res.push(d)\n+        handlers::unlinked_file::unlinked_file(&ctx, &mut res, file_id);\n+    }\n+\n+    let mut diags = Vec::new();\n+    if let Some(m) = module {\n+        m.diagnostics(db, &mut diags)\n     }\n \n     for diag in diags {\n@@ -211,61 +207,6 @@ pub fn diagnostics(\n     res\n }\n \n-fn check_unnecessary_braces_in_use_statement(\n-    acc: &mut Vec<Diagnostic>,\n-    file_id: FileId,\n-    node: &SyntaxNode,\n-) -> Option<()> {\n-    let use_tree_list = ast::UseTreeList::cast(node.clone())?;\n-    if let Some((single_use_tree,)) = use_tree_list.use_trees().collect_tuple() {\n-        // If there is a comment inside the bracketed `use`,\n-        // assume it is a commented out module path and don't show diagnostic.\n-        if use_tree_list.has_inner_comment() {\n-            return Some(());\n-        }\n-\n-        let use_range = use_tree_list.syntax().text_range();\n-        let edit =\n-            text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(&single_use_tree)\n-                .unwrap_or_else(|| {\n-                    let to_replace = single_use_tree.syntax().text().to_string();\n-                    let mut edit_builder = TextEdit::builder();\n-                    edit_builder.delete(use_range);\n-                    edit_builder.insert(use_range.start(), to_replace);\n-                    edit_builder.finish()\n-                });\n-\n-        acc.push(\n-            Diagnostic::new(\n-                \"unnecessary-braces\",\n-                \"Unnecessary braces in use statement\".to_string(),\n-                use_range,\n-            )\n-            .severity(Severity::WeakWarning)\n-            .with_fixes(Some(vec![fix(\n-                \"remove_braces\",\n-                \"Remove unnecessary braces\",\n-                SourceChange::from_text_edit(file_id, edit),\n-                use_range,\n-            )])),\n-        );\n-    }\n-\n-    Some(())\n-}\n-\n-fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n-    single_use_tree: &ast::UseTree,\n-) -> Option<TextEdit> {\n-    let use_tree_list_node = single_use_tree.syntax().parent()?;\n-    if single_use_tree.path()?.segment()?.self_token().is_some() {\n-        let start = use_tree_list_node.prev_sibling_or_token()?.text_range().start();\n-        let end = use_tree_list_node.text_range().end();\n-        return Some(TextEdit::delete(TextRange::new(start, end)));\n-    }\n-    None\n-}\n-\n fn fix(id: &'static str, label: &str, source_change: SourceChange, target: TextRange) -> Assist {\n     let mut res = unresolved_fix(id, label, target);\n     res.source_change = Some(source_change);\n@@ -294,7 +235,7 @@ mod tests {\n     use stdx::trim_indent;\n     use test_utils::{assert_eq_text, extract_annotations};\n \n-    use crate::DiagnosticsConfig;\n+    use crate::{DiagnosticsConfig, Severity};\n \n     /// Takes a multi-file input fixture with annotated cursor positions,\n     /// and checks that:\n@@ -390,96 +331,28 @@ mod tests {\n                 super::diagnostics(&db, &config, &AssistResolveStrategy::All, file_id);\n \n             let expected = extract_annotations(&*db.file_text(file_id));\n-            let mut actual =\n-                diagnostics.into_iter().map(|d| (d.range, d.message)).collect::<Vec<_>>();\n+            let mut actual = diagnostics\n+                .into_iter()\n+                .map(|d| {\n+                    let mut annotation = String::new();\n+                    if let Some(fixes) = &d.fixes {\n+                        assert!(!fixes.is_empty());\n+                        annotation.push_str(\"\ud83d\udca1 \")\n+                    }\n+                    annotation.push_str(match d.severity {\n+                        Severity::Error => \"error\",\n+                        Severity::WeakWarning => \"weak\",\n+                    });\n+                    annotation.push_str(\": \");\n+                    annotation.push_str(&d.message);\n+                    (d.range, annotation)\n+                })\n+                .collect::<Vec<_>>();\n             actual.sort_by_key(|(range, _)| range.start());\n             assert_eq!(expected, actual);\n         }\n     }\n \n-    #[test]\n-    fn test_check_unnecessary_braces_in_use_statement() {\n-        check_diagnostics(\n-            r#\"\n-use a;\n-use a::{c, d::e};\n-\n-mod a {\n-    mod c {}\n-    mod d {\n-        mod e {}\n-    }\n-}\n-\"#,\n-        );\n-        check_diagnostics(\n-            r#\"\n-use a;\n-use a::{\n-    c,\n-    // d::e\n-};\n-\n-mod a {\n-    mod c {}\n-    mod d {\n-        mod e {}\n-    }\n-}\n-\"#,\n-        );\n-        check_fix(\n-            r\"\n-            mod b {}\n-            use {$0b};\n-            \",\n-            r\"\n-            mod b {}\n-            use b;\n-            \",\n-        );\n-        check_fix(\n-            r\"\n-            mod b {}\n-            use {b$0};\n-            \",\n-            r\"\n-            mod b {}\n-            use b;\n-            \",\n-        );\n-        check_fix(\n-            r\"\n-            mod a { mod c {} }\n-            use a::{c$0};\n-            \",\n-            r\"\n-            mod a { mod c {} }\n-            use a::c;\n-            \",\n-        );\n-        check_fix(\n-            r\"\n-            mod a {}\n-            use a::{self$0};\n-            \",\n-            r\"\n-            mod a {}\n-            use a;\n-            \",\n-        );\n-        check_fix(\n-            r\"\n-            mod a { mod c {} mod d { mod e {} } }\n-            use a::{c, d::{e$0}};\n-            \",\n-            r\"\n-            mod a { mod c {} mod d { mod e {} } }\n-            use a::{c, d::e};\n-            \",\n-        );\n-    }\n-\n     #[test]\n     fn test_disabled_diagnostics() {\n         let mut config = DiagnosticsConfig::default();\n@@ -498,33 +371,4 @@ mod a {\n         );\n         assert!(!diagnostics.is_empty());\n     }\n-\n-    #[test]\n-    fn import_extern_crate_clash_with_inner_item() {\n-        // This is more of a resolver test, but doesn't really work with the hir_def testsuite.\n-\n-        check_diagnostics(\n-            r#\"\n-//- /lib.rs crate:lib deps:jwt\n-mod permissions;\n-\n-use permissions::jwt;\n-\n-fn f() {\n-    fn inner() {}\n-    jwt::Claims {}; // should resolve to the local one with 0 fields, and not get a diagnostic\n-}\n-\n-//- /permissions.rs\n-pub mod jwt  {\n-    pub struct Claims {}\n-}\n-\n-//- /jwt/lib.rs crate:jwt\n-pub struct Claims {\n-    field: u8,\n-}\n-        \"#,\n-        );\n-    }\n }"}]}