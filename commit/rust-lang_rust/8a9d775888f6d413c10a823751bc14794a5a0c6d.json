{"sha": "8a9d775888f6d413c10a823751bc14794a5a0c6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOWQ3NzU4ODhmNmQ0MTNjMTBhODIzNzUxYmMxNDc5NGE1YTBjNmQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-10T10:29:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-09-28T14:38:59Z"}, "message": "syntax: don't keep a redundant c_variadic flag in the AST.", "tree": {"sha": "22c919937881b42270b9efaa872877c3f35ecd1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22c919937881b42270b9efaa872877c3f35ecd1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9d775888f6d413c10a823751bc14794a5a0c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9d775888f6d413c10a823751bc14794a5a0c6d", "html_url": "https://github.com/rust-lang/rust/commit/8a9d775888f6d413c10a823751bc14794a5a0c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9d775888f6d413c10a823751bc14794a5a0c6d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c8eba643a815d720e7f20699b3dca144c845c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c8eba643a815d720e7f20699b3dca144c845c4", "html_url": "https://github.com/rust-lang/rust/commit/f3c8eba643a815d720e7f20699b3dca144c845c4"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "aa2b4b103fb81e1fca61f25ed87706b903ebba98", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -2168,7 +2168,7 @@ impl<'a> LoweringContext<'a> {\n         P(hir::FnDecl {\n             inputs,\n             output,\n-            c_variadic: decl.c_variadic,\n+            c_variadic: decl.c_variadic(),\n             implicit_self: decl.inputs.get(0).map_or(\n                 hir::ImplicitSelfKind::None,\n                 |arg| {"}, {"sha": "2f0a318d5363e5adfb72de176d2b7b3e23a33d90", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -450,7 +450,6 @@ impl LoweringContext<'_> {\n         let ast_decl = FnDecl {\n             inputs: vec![],\n             output,\n-            c_variadic: false\n         };\n         let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n         let body_id = self.lower_fn_body(&ast_decl, |this| {\n@@ -739,7 +738,6 @@ impl LoweringContext<'_> {\n         let outer_decl = FnDecl {\n             inputs: decl.inputs.clone(),\n             output: FunctionRetTy::Default(fn_decl_span),\n-            c_variadic: false,\n         };\n         // We need to lower the declaration outside the new scope, because we\n         // have to conserve the state of being inside a loop condition for the"}, {"sha": "bc468c1ad0ebe549ac74b387de36b1c149f5067d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -1893,7 +1893,6 @@ impl Param {\n pub struct FnDecl {\n     pub inputs: Vec<Param>,\n     pub output: FunctionRetTy,\n-    pub c_variadic: bool,\n }\n \n impl FnDecl {\n@@ -1903,6 +1902,12 @@ impl FnDecl {\n     pub fn has_self(&self) -> bool {\n         self.inputs.get(0).map(Param::is_self).unwrap_or(false)\n     }\n+    pub fn c_variadic(&self) -> bool {\n+        self.inputs.last().map(|arg| match arg.ty.kind {\n+            TyKind::CVarArgs => true,\n+            _ => false,\n+        }).unwrap_or(false)\n+    }\n }\n \n /// Is the trait definition an auto trait?"}, {"sha": "8c5289671c98e18651f05d0577905239c5b64355", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -562,7 +562,6 @@ impl<'a> ExtCtxt<'a> {\n         P(ast::FnDecl {\n             inputs,\n             output,\n-            c_variadic: false\n         })\n     }\n "}, {"sha": "d7fc74955bbbde1c421c5c1e86226f594df07b97", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -531,7 +531,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             self.check_abi(header.abi, span);\n         }\n \n-        if fn_decl.c_variadic {\n+        if fn_decl.c_variadic() {\n             gate_feature_post!(&self, c_variadic, span, \"C-variadic functions are unstable\");\n         }\n \n@@ -564,7 +564,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_abi(sig.header.abi, ti.span);\n                 }\n-                if sig.decl.c_variadic {\n+                if sig.decl.c_variadic() {\n                     gate_feature_post!(&self, c_variadic, ti.span,\n                                        \"C-variadic functions are unstable\");\n                 }\n@@ -601,7 +601,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         match ii.kind {\n-            ast::ImplItemKind::Method(..) => {}\n+            ast::ImplItemKind::Method(ref sig, _) => {\n+                if sig.decl.c_variadic() {\n+                    gate_feature_post!(&self, c_variadic, ii.span,\n+                                       \"C-variadic functions are unstable\");\n+                }\n+            }\n             ast::ImplItemKind::OpaqueTy(..) => {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "80dfe9e5be0ad60054ac8053220e36153c2cb3c7", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -717,7 +717,7 @@ pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut IsAsync, vis: &mut T)\n }\n \n pub fn noop_visit_fn_decl<T: MutVisitor>(decl: &mut P<FnDecl>, vis: &mut T) {\n-    let FnDecl { inputs, output, c_variadic: _ } = decl.deref_mut();\n+    let FnDecl { inputs, output } = decl.deref_mut();\n     inputs.flat_map_in_place(|param| vis.flat_map_param(param));\n     match output {\n         FunctionRetTy::Default(span) => vis.visit_span(span),"}, {"sha": "f22fd5ad703d9e4e7c80680e42f3fd9a374679fb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -1194,7 +1194,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_fn_params(&mut self, named_params: bool, allow_c_variadic: bool)\n-                     -> PResult<'a, (Vec<Param> , bool)> {\n+                     -> PResult<'a, Vec<Param>> {\n         let sp = self.token.span;\n         let mut c_variadic = false;\n         let (params, _): (Vec<Option<Param>>, _) = self.parse_paren_comma_seq(|p| {\n@@ -1218,6 +1218,8 @@ impl<'a> Parser<'a> {\n                             let span = p.token.span;\n                             p.span_err(span,\n                                 \"`...` must be the last argument of a C-variadic function\");\n+                            // FIXME(eddyb) this should probably still push `CVarArgs`.\n+                            // Maybe AST validation/HIR lowering should emit the above error?\n                             Ok(None)\n                         } else {\n                             Ok(Some(param))\n@@ -1245,7 +1247,7 @@ impl<'a> Parser<'a> {\n                           \"C-variadic function must be declared with at least one named argument\");\n         }\n \n-        Ok((params, c_variadic))\n+        Ok(params)\n     }\n \n     /// Returns the parsed optional self parameter and whether a self shortcut was used.\n@@ -1414,7 +1416,6 @@ impl<'a> Parser<'a> {\n         Ok(P(FnDecl {\n             inputs: fn_inputs,\n             output: self.parse_ret_ty(true)?,\n-            c_variadic: false\n         }))\n     }\n "}, {"sha": "23674ad589dc570716e65b9225355c265b36672b", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -1176,7 +1176,6 @@ impl<'a> Parser<'a> {\n         Ok(P(FnDecl {\n             inputs: inputs_captures,\n             output,\n-            c_variadic: false\n         }))\n     }\n "}, {"sha": "92b19b73e571953751c68f9016ac019bdca0170e", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -1292,13 +1292,12 @@ impl<'a> Parser<'a> {\n \n     /// Parses the argument list and result type of a function declaration.\n     fn parse_fn_decl(&mut self, allow_c_variadic: bool) -> PResult<'a, P<FnDecl>> {\n-        let (args, c_variadic) = self.parse_fn_params(true, allow_c_variadic)?;\n+        let args = self.parse_fn_params(true, allow_c_variadic)?;\n         let ret_ty = self.parse_ret_ty(true)?;\n \n         Ok(P(FnDecl {\n             inputs: args,\n             output: ret_ty,\n-            c_variadic,\n         }))\n     }\n "}, {"sha": "c52d3733b5e0afd068b852e717c9736f6e8b5ebe", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -292,12 +292,11 @@ impl<'a> Parser<'a> {\n         };\n \n         self.expect_keyword(kw::Fn)?;\n-        let (inputs, c_variadic) = self.parse_fn_params(false, true)?;\n+        let inputs = self.parse_fn_params(false, true)?;\n         let ret_ty = self.parse_ret_ty(false)?;\n         let decl = P(FnDecl {\n             inputs,\n             output: ret_ty,\n-            c_variadic,\n         });\n         Ok(TyKind::BareFn(P(BareFnTy {\n             abi,"}, {"sha": "faa70edbfa29b7249a9c45a28358deb8520c30ef", "filename": "src/libsyntax/print/pprust/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -29,7 +29,6 @@ fn test_fun_to_string() {\n         let decl = ast::FnDecl {\n             inputs: Vec::new(),\n             output: ast::FunctionRetTy::Default(syntax_pos::DUMMY_SP),\n-            c_variadic: false\n         };\n         let generics = ast::Generics::default();\n         assert_eq!("}, {"sha": "d4aff73590734dfdbae933e01698eebfb4a034fd", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9d775888f6d413c10a823751bc14794a5a0c6d/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=8a9d775888f6d413c10a823751bc14794a5a0c6d", "patch": "@@ -114,7 +114,6 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 let decl = P(FnDecl {\n                     inputs: vec![],\n                     output: FunctionRetTy::Default(DUMMY_SP),\n-                    c_variadic: false,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(\n                         ExprKind::Closure(CaptureBy::Value,"}]}