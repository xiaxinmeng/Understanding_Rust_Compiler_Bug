{"sha": "ebfa26658e9f65491e79f6853bb7c77030f5b0fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZmEyNjY1OGU5ZjY1NDkxZTc5ZjY4NTNiYjdjNzcwMzBmNWIwZmU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-13T21:33:31Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-13T21:33:31Z"}, "message": "Merge #818\n\n818: In `RootConfig::contains`, check against canonicalized version of root path r=matklad a=pnkfelix\n\nIn `RootConfig::contains`, check against canonicalized version of root path since OS may hand us data that uses the canonical form rather than the root as specified by the user.\r\n\r\nThis is a step towards a resolution of issue #734 but does not completely fix the problem there.\n\nCo-authored-by: Felix S. Klock II <pnkfelix@pnkfx.org>", "tree": {"sha": "2c0d36ffc23e1b0db34608fd694a985edad9ccab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0d36ffc23e1b0db34608fd694a985edad9ccab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebfa26658e9f65491e79f6853bb7c77030f5b0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebfa26658e9f65491e79f6853bb7c77030f5b0fe", "html_url": "https://github.com/rust-lang/rust/commit/ebfa26658e9f65491e79f6853bb7c77030f5b0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebfa26658e9f65491e79f6853bb7c77030f5b0fe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "cb4327b3a9f0858235dc20b7c5c7e25c6c330aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4327b3a9f0858235dc20b7c5c7e25c6c330aab", "html_url": "https://github.com/rust-lang/rust/commit/cb4327b3a9f0858235dc20b7c5c7e25c6c330aab"}, {"sha": "da300fd55340ca1c65914744fa30c2b3b02e485f", "url": "https://api.github.com/repos/rust-lang/rust/commits/da300fd55340ca1c65914744fa30c2b3b02e485f", "html_url": "https://github.com/rust-lang/rust/commit/da300fd55340ca1c65914744fa30c2b3b02e485f"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "f07657db6420d15ee3b73b9b750af754f69d0072", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa26658e9f65491e79f6853bb7c77030f5b0fe/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa26658e9f65491e79f6853bb7c77030f5b0fe/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=ebfa26658e9f65491e79f6853bb7c77030f5b0fe", "patch": "@@ -44,6 +44,8 @@ impl_arena_id!(VfsRoot);\n /// returns `true` iff path belongs to the source root\n pub(crate) struct RootConfig {\n     root: PathBuf,\n+    // result of `root.canonicalize()` if that differs from `root`; `None` otherwise.\n+    canonical_root: Option<PathBuf>,\n     excluded_dirs: Vec<PathBuf>,\n }\n \n@@ -60,15 +62,26 @@ impl std::ops::Deref for Roots {\n \n impl RootConfig {\n     fn new(root: PathBuf, excluded_dirs: Vec<PathBuf>) -> RootConfig {\n-        RootConfig { root, excluded_dirs }\n+        let mut canonical_root = root.canonicalize().ok();\n+        if Some(&root) == canonical_root.as_ref() {\n+            canonical_root = None;\n+        }\n+        RootConfig { root, canonical_root, excluded_dirs }\n     }\n     /// Checks if root contains a path and returns a root-relative path.\n     pub(crate) fn contains(&self, path: &Path) -> Option<RelativePathBuf> {\n         // First, check excluded dirs\n         if self.excluded_dirs.iter().any(|it| path.starts_with(it)) {\n             return None;\n         }\n-        let rel_path = path.strip_prefix(&self.root).ok()?;\n+        let rel_path = path\n+            .strip_prefix(&self.root)\n+            .or_else(|err_payload| {\n+                self.canonical_root\n+                    .as_ref()\n+                    .map_or(Err(err_payload), |canonical_root| path.strip_prefix(canonical_root))\n+            })\n+            .ok()?;\n         let rel_path = RelativePathBuf::from_path(rel_path).ok()?;\n \n         // Ignore some common directories."}]}