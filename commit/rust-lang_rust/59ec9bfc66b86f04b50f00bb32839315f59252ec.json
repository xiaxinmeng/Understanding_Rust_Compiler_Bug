{"sha": "59ec9bfc66b86f04b50f00bb32839315f59252ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZWM5YmZjNjZiODZmMDRiNTBmMDBiYjMyODM5MzE1ZjU5MjUyZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-28T02:41:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-28T02:41:28Z"}, "message": "Auto merge of #49406 - kennytm:rollup, r=kennytm\n\nRollup of 11 pull requests\n\n- Successful merges: #48639, #49223, #49333, #49369, #49381, #49395, #49399, #49401, #49417, #49202, #49426\n- Failed merges:", "tree": {"sha": "19b13ac2494f1e1b347ee8aae9c48150677434f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b13ac2494f1e1b347ee8aae9c48150677434f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ec9bfc66b86f04b50f00bb32839315f59252ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ec9bfc66b86f04b50f00bb32839315f59252ec", "html_url": "https://github.com/rust-lang/rust/commit/59ec9bfc66b86f04b50f00bb32839315f59252ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ec9bfc66b86f04b50f00bb32839315f59252ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9424de51da41fd3d1077ac7810276f8dc746fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9424de51da41fd3d1077ac7810276f8dc746fa", "html_url": "https://github.com/rust-lang/rust/commit/9c9424de51da41fd3d1077ac7810276f8dc746fa"}, {"sha": "605ea7c31f7341995c2d1ae12b4b33fe6bd908b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/605ea7c31f7341995c2d1ae12b4b33fe6bd908b5", "html_url": "https://github.com/rust-lang/rust/commit/605ea7c31f7341995c2d1ae12b4b33fe6bd908b5"}], "stats": {"total": 379, "additions": 253, "deletions": 126}, "files": [{"sha": "7a62405f059677affac001298e8f5fd2f9dbe515", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -594,7 +594,7 @@ If you're looking for somewhere to start, check out the [E-easy][eeasy] tag.\n [inom]: https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AI-nominated\n [eeasy]: https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy\n [lru]: https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-asc\n-[rfcbot]: https://github.com/dikaiosune/rust-dashboard/blob/master/RFCBOT.md\n+[rfcbot]: https://github.com/anp/rfcbot-rs/\n \n ## Out-of-tree Contributions\n [out-of-tree-contributions]: #out-of-tree-contributions"}, {"sha": "100de005990c953c7e9f956ff65d89ececc3b02b", "filename": "RELEASES.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -98,6 +98,20 @@ Compatibility Notes\n [`ptr::NonNull`]: https://doc.rust-lang.org/std/ptr/struct.NonNull.html\n \n \n+Version 1.24.1 (2018-03-01)\n+==========================\n+\n+ - [Do not abort when unwinding through FFI][48251]\n+ - [Emit UTF-16 files for linker arguments on Windows][48318]\n+ - [Make the error index generator work again][48308]\n+ - [Cargo will warn on Windows 7 if an update is needed][cargo/5069].\n+\n+[48251]: https://github.com/rust-lang/rust/issues/48251\n+[48308]: https://github.com/rust-lang/rust/issues/48308\n+[48318]: https://github.com/rust-lang/rust/issues/48318\n+[cargo/5069]: https://github.com/rust-lang/cargo/pull/5069\n+\n+\n Version 1.24.0 (2018-02-15)\n ==========================\n "}, {"sha": "ad745d29e15e907b1de1bf590d7033e18909e8bb", "filename": "src/Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -202,7 +202,7 @@ dependencies = [\n  \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -558,7 +558,7 @@ dependencies = [\n  \"humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1543,7 +1543,7 @@ dependencies = [\n  \"rustc-ap-serialize 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-syntax_pos 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1721,7 +1721,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n- \"termcolor 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2326,7 +2326,7 @@ dependencies = [\n \n [[package]]\n name = \"termcolor\"\n-version = \"0.3.5\"\n+version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"wincolor 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2765,7 +2765,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n \"checksum term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e6b677dd1e8214ea1ef4297f85dbcbed8e8cdddb561040cc998ca2551c37561\"\n-\"checksum termcolor 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56c456352e44f9f91f774ddeeed27c1ec60a2455ed66d692059acfb1d731bda1\"\n+\"checksum termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"adc4587ead41bf016f11af03e55a624c06568b5a19db4e90fde573d805074f83\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n \"checksum textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0b59b6b4b44d867f1370ef1bd91bfb262bf07bf0ae65c202ea2fbc16153b693\"\n \"checksum thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279ef31c19ededf577bfd12dfae728040a21f635b06a24cd670ff510edd38963\""}, {"sha": "a43aadfe9a23a72c42b511a8c5a5a3f8add8c015", "filename": "src/liballoc/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Flib.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -13,6 +13,7 @@\n #![cfg_attr(stage0, feature(i128_type))]\n #![feature(rand)]\n #![feature(repr_simd)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(test)]\n \n extern crate rand;"}, {"sha": "a699ff9c0a76ec61d0a427ab58bfe10c23c09d72", "filename": "src/liballoc/benches/slice.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fslice.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -284,6 +284,17 @@ macro_rules! sort_expensive {\n     }\n }\n \n+macro_rules! sort_lexicographic {\n+    ($f:ident, $name:ident, $gen:expr, $len:expr) => {\n+        #[bench]\n+        fn $name(b: &mut Bencher) {\n+            let v = $gen($len);\n+            b.iter(|| v.clone().$f(|x| x.to_string()));\n+            b.bytes = $len * mem::size_of_val(&$gen(1)[0]) as u64;\n+        }\n+    }\n+}\n+\n sort!(sort, sort_small_ascending, gen_ascending, 10);\n sort!(sort, sort_small_descending, gen_descending, 10);\n sort!(sort, sort_small_random, gen_random, 10);\n@@ -312,6 +323,10 @@ sort!(sort_unstable, sort_unstable_large_big, gen_big_random, 10000);\n sort_strings!(sort_unstable, sort_unstable_large_strings, gen_strings, 10000);\n sort_expensive!(sort_unstable_by, sort_unstable_large_expensive, gen_random, 10000);\n \n+sort_lexicographic!(sort_by_key, sort_by_key_lexicographic, gen_random, 10000);\n+sort_lexicographic!(sort_unstable_by_key, sort_unstable_by_key_lexicographic, gen_random, 10000);\n+sort_lexicographic!(sort_by_cached_key, sort_by_cached_key_lexicographic, gen_random, 10000);\n+\n macro_rules! reverse {\n     ($name:ident, $ty:ty, $f:expr) => {\n         #[bench]"}, {"sha": "b2c4582e8406f4b5aaf30bc4fe9812f6083ea525", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -326,7 +326,7 @@\n //! sign := '+' | '-'\n //! width := count\n //! precision := count | '*'\n-//! type := identifier | ''\n+//! type := identifier | '?' | ''\n //! count := parameter | integer\n //! parameter := argument '$'\n //! ```\n@@ -516,17 +516,17 @@ pub use core::fmt::rt;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{Formatter, Result, Write};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{Octal, Binary};\n+pub use core::fmt::{Binary, Octal};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{Display, Debug};\n+pub use core::fmt::{Debug, Display};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{LowerHex, UpperHex, Pointer};\n+pub use core::fmt::{LowerHex, Pointer, UpperHex};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{LowerExp, UpperExp};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::Error;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{ArgumentV1, Arguments, write};\n+pub use core::fmt::{write, ArgumentV1, Arguments};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n \n@@ -563,7 +563,8 @@ use string;\n pub fn format(args: Arguments) -> string::String {\n     let capacity = args.estimated_capacity();\n     let mut output = string::String::with_capacity(capacity);\n-    output.write_fmt(args)\n-          .expect(\"a formatting trait implementation returned an error\");\n+    output\n+        .write_fmt(args)\n+        .expect(\"a formatting trait implementation returned an error\");\n     output\n }"}, {"sha": "68f2313843c313e0982ad607d9885d7b3cb4b0a5", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 78, "deletions": 10, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -102,6 +102,7 @@ use core::mem::size_of;\n use core::mem;\n use core::ptr;\n use core::slice as core_slice;\n+use core::{u8, u16, u32};\n \n use borrow::{Borrow, BorrowMut, ToOwned};\n use boxed::Box;\n@@ -1302,7 +1303,8 @@ impl<T> [T] {\n \n     /// Sorts the slice with a key extraction function.\n     ///\n-    /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n+    /// This sort is stable (i.e. does not reorder equal elements) and `O(m n log(m n))`\n+    /// worst-case, where the key function is `O(m)`.\n     ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n@@ -1328,12 +1330,82 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"slice_sort_by_key\", since = \"1.7.0\")]\n     #[inline]\n-    pub fn sort_by_key<B, F>(&mut self, mut f: F)\n-        where F: FnMut(&T) -> B, B: Ord\n+    pub fn sort_by_key<K, F>(&mut self, mut f: F)\n+        where F: FnMut(&T) -> K, K: Ord\n     {\n         merge_sort(self, |a, b| f(a).lt(&f(b)));\n     }\n \n+    /// Sorts the slice with a key extraction function.\n+    ///\n+    /// During sorting, the key function is called only once per element.\n+    ///\n+    /// This sort is stable (i.e. does not reorder equal elements) and `O(m n + n log n)`\n+    /// worst-case, where the key function is `O(m)`.\n+    ///\n+    /// For simple key functions (e.g. functions that are property accesses or\n+    /// basic operations), [`sort_by_key`](#method.sort_by_key) is likely to be\n+    /// faster.\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,\n+    /// which combines the fast average case of randomized quicksort with the fast worst case of\n+    /// heapsort, while achieving linear time on slices with certain patterns. It uses some\n+    /// randomization to avoid degenerate cases, but with a fixed seed to always provide\n+    /// deterministic behavior.\n+    ///\n+    /// In the worst case, the algorithm allocates temporary storage in a `Vec<(K, usize)>` the\n+    /// length of the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_sort_by_cached_key)]\n+    /// let mut v = [-5i32, 4, 32, -3, 2];\n+    ///\n+    /// v.sort_by_cached_key(|k| k.to_string());\n+    /// assert!(v == [-3, -5, 2, 32, 4]);\n+    /// ```\n+    ///\n+    /// [pdqsort]: https://github.com/orlp/pdqsort\n+    #[unstable(feature = \"slice_sort_by_cached_key\", issue = \"34447\")]\n+    #[inline]\n+    pub fn sort_by_cached_key<K, F>(&mut self, f: F)\n+        where F: FnMut(&T) -> K, K: Ord\n+    {\n+        // Helper macro for indexing our vector by the smallest possible type, to reduce allocation.\n+        macro_rules! sort_by_key {\n+            ($t:ty, $slice:ident, $f:ident) => ({\n+                let mut indices: Vec<_> =\n+                    $slice.iter().map($f).enumerate().map(|(i, k)| (k, i as $t)).collect();\n+                // The elements of `indices` are unique, as they are indexed, so any sort will be\n+                // stable with respect to the original slice. We use `sort_unstable` here because\n+                // it requires less memory allocation.\n+                indices.sort_unstable();\n+                for i in 0..$slice.len() {\n+                    let mut index = indices[i].1;\n+                    while (index as usize) < i {\n+                        index = indices[index as usize].1;\n+                    }\n+                    indices[i].1 = index;\n+                    $slice.swap(i, index as usize);\n+                }\n+            })\n+        }\n+\n+        let sz_u8    = mem::size_of::<(K, u8)>();\n+        let sz_u16   = mem::size_of::<(K, u16)>();\n+        let sz_u32   = mem::size_of::<(K, u32)>();\n+        let sz_usize = mem::size_of::<(K, usize)>();\n+\n+        let len = self.len();\n+        if sz_u8  < sz_u16   && len <= ( u8::MAX as usize) { return sort_by_key!( u8, self, f) }\n+        if sz_u16 < sz_u32   && len <= (u16::MAX as usize) { return sort_by_key!(u16, self, f) }\n+        if sz_u32 < sz_usize && len <= (u32::MAX as usize) { return sort_by_key!(u32, self, f) }\n+        sort_by_key!(usize, self, f)\n+    }\n+\n     /// Sorts the slice, but may not preserve the order of equal elements.\n     ///\n     /// This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),\n@@ -1410,7 +1482,7 @@ impl<T> [T] {\n     /// elements.\n     ///\n     /// This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),\n-    /// and `O(n log n)` worst-case.\n+    /// and `O(m n log(m n))` worst-case, where the key function is `O(m)`.\n     ///\n     /// # Current implementation\n     ///\n@@ -1420,9 +1492,6 @@ impl<T> [T] {\n     /// randomization to avoid degenerate cases, but with a fixed seed to always provide\n     /// deterministic behavior.\n     ///\n-    /// It is typically faster than stable sorting, except in a few special cases, e.g. when the\n-    /// slice consists of several concatenated sorted sequences.\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1435,9 +1504,8 @@ impl<T> [T] {\n     /// [pdqsort]: https://github.com/orlp/pdqsort\n     #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     #[inline]\n-    pub fn sort_unstable_by_key<B, F>(&mut self, f: F)\n-        where F: FnMut(&T) -> B,\n-              B: Ord\n+    pub fn sort_unstable_by_key<K, F>(&mut self, f: F)\n+        where F: FnMut(&T) -> K, K: Ord\n     {\n         core_slice::SliceExt::sort_unstable_by_key(self, f);\n     }"}, {"sha": "d5ef41df0d850d5804299a328f617f411f3abdd2", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -2122,6 +2122,48 @@ impl str {\n         unsafe { String::from_utf8_unchecked(buf) }\n     }\n \n+    /// Returns true if this `str` is entirely whitespace, and false otherwise.\n+    ///\n+    /// 'Whitespace' is defined according to the terms of the Unicode Derived Core\n+    /// Property `White_Space`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert!(\"    \\t \".is_whitespace());\n+    ///\n+    /// // a non-breaking space\n+    /// assert!(\"\\u{A0}\".is_whitespace());\n+    ///\n+    /// assert!(!\"   \u8d8a\".is_whitespace());\n+    /// ```\n+    #[stable(feature = \"unicode_methods_on_intrinsics\", since = \"1.27.0\")]\n+    #[inline]\n+    pub fn is_whitespace(&self) -> bool {\n+        UnicodeStr::is_whitespace(self)\n+    }\n+\n+    /// Returns true if this `str` is entirely alphanumeric, and false otherwise.\n+    ///\n+    /// 'Alphanumeric'-ness is defined in terms of the Unicode General Categories\n+    /// 'Nd', 'Nl', 'No' and the Derived Core Property 'Alphabetic'.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// assert!(\"\u06637\u09ecK\u0648\u85cf\".is_alphanumeric());\n+    /// assert!(!\"\u00be\u2460\".is_alphanumeric());\n+    /// ```\n+    #[stable(feature = \"unicode_methods_on_intrinsics\", since = \"1.27.0\")]\n+    #[inline]\n+    pub fn is_alphanumeric(&self) -> bool {\n+        UnicodeStr::is_alphanumeric(self)\n+    }\n+\n     /// Checks if all characters in this string are within the ASCII range.\n     ///\n     /// # Examples"}, {"sha": "0a7e9a8be94f91551560df82a74bda6826360167", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -23,6 +23,7 @@\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(rand)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(splice)]\n #![feature(str_escape)]\n #![feature(string_retain)]"}, {"sha": "99d9c51efc75790c2e552c89d6490423445a2292", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -425,6 +425,14 @@ fn test_sort() {\n                 v.sort_by(|a, b| b.cmp(a));\n                 assert!(v.windows(2).all(|w| w[0] >= w[1]));\n \n+                // Sort in lexicographic order.\n+                let mut v1 = orig.clone();\n+                let mut v2 = orig.clone();\n+                v1.sort_by_key(|x| x.to_string());\n+                v2.sort_by_cached_key(|x| x.to_string());\n+                assert!(v1.windows(2).all(|w| w[0].to_string() <= w[1].to_string()));\n+                assert!(v1 == v2);\n+\n                 // Sort with many pre-sorted runs.\n                 let mut v = orig.clone();\n                 v.sort();\n@@ -477,24 +485,29 @@ fn test_sort_stability() {\n             // the second item represents which occurrence of that\n             // number this element is, i.e. the second elements\n             // will occur in sorted order.\n-            let mut v: Vec<_> = (0..len)\n+            let mut orig: Vec<_> = (0..len)\n                 .map(|_| {\n                     let n = thread_rng().gen::<usize>() % 10;\n                     counts[n] += 1;\n                     (n, counts[n])\n                 })\n                 .collect();\n \n-            // only sort on the first element, so an unstable sort\n+            let mut v = orig.clone();\n+            // Only sort on the first element, so an unstable sort\n             // may mix up the counts.\n             v.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n \n-            // this comparison includes the count (the second item\n+            // This comparison includes the count (the second item\n             // of the tuple), so elements with equal first items\n             // will need to be ordered with increasing\n             // counts... i.e. exactly asserting that this sort is\n             // stable.\n             assert!(v.windows(2).all(|w| w[0] <= w[1]));\n+\n+            let mut v = orig.clone();\n+            v.sort_by_cached_key(|&(x, _)| x);\n+            assert!(v.windows(2).all(|w| w[0] <= w[1]));\n         }\n     }\n }"}, {"sha": "2a2f6d96c8dc578d2474742f14c9bab0b36b0408", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -1 +1 @@\n-Subproject commit 263a703b10351d8930e48045b4fd09768991b867\n+Subproject commit 2a2f6d96c8dc578d2474742f14c9bab0b36b0408"}, {"sha": "ff501f30c891a5cd46e93384e5cfcf3bea5804c4", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -13,7 +13,7 @@ pub use self::AnnNode::*;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::codemap::{CodeMap, Spanned};\n-use syntax::parse::ParseSess;\n+use syntax::parse::{token, ParseSess};\n use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, Breaks};\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n@@ -1561,7 +1561,11 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> {\n-        self.s.word(&name.as_str())?;\n+        if token::is_raw_guess(ast::Ident::with_empty_ctxt(name)) {\n+            self.s.word(&format!(\"r#{}\", name))?;\n+        } else {\n+            self.s.word(&name.as_str())?;\n+        }\n         self.ann.post(self, NodeName(&name))\n     }\n "}, {"sha": "06bec8f6ff6597b3505f9ac7b726fa7ee591b2e3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -22,12 +22,14 @@ use rustc::traits::{Obligation, SelectionContext};\n use util::nodemap::FxHashSet;\n \n use syntax::ast;\n+use syntax::util::lev_distance::find_best_match_for_name;\n use errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n use rustc::hir;\n use rustc::hir::print;\n use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::ty::TyAdt;\n \n use std::cell;\n use std::cmp::Ordering;\n@@ -179,9 +181,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let actual = self.resolve_type_vars_if_possible(&rcvr_ty);\n                 let ty_string = self.ty_to_string(actual);\n                 let is_method = mode == Mode::MethodCall;\n+                let mut suggestion = None;\n                 let type_str = if is_method {\n                     \"method\"\n                 } else if actual.is_enum() {\n+                    if let TyAdt(ref adt_def, _) = actual.sty {\n+                        let names = adt_def.variants.iter().map(|s| &s.name);\n+                        suggestion = find_best_match_for_name(names,\n+                                                              &item_name.as_str(),\n+                                                              None);\n+                    }\n                     \"variant\"\n                 } else {\n                     match (item_name.as_str().chars().next(), actual.is_fresh_ty()) {\n@@ -256,15 +265,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         err.emit();\n                         return;\n                     } else {\n-                        struct_span_err!(\n+                        let mut err = struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0599,\n                             \"no {} named `{}` found for type `{}` in the current scope\",\n                             type_str,\n                             item_name,\n                             ty_string\n-                        )\n+                        );\n+                        if let Some(suggestion) = suggestion {\n+                            err.note(&format!(\"did you mean `{}::{}`?\", type_str, suggestion));\n+                        }\n+                        err\n                     }\n                 } else {\n                     tcx.sess.diagnostic().struct_dummy()"}, {"sha": "73b3ae32cef6540fd512f727064980e7b29dd6e2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -1022,11 +1022,12 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n                                  .flat_map(|imp| cx.tcx.associated_items(*imp))\n                                  .find(|item| item.name == item_name);\n                 if let Some(item) = item {\n-                    if item.kind == ty::AssociatedKind::Method && is_val {\n-                        Ok((ty.def, Some(format!(\"method.{}\", item_name))))\n-                    } else {\n-                        Err(())\n-                    }\n+                    let out = match item.kind {\n+                        ty::AssociatedKind::Method if is_val => \"method\",\n+                        ty::AssociatedKind::Const if is_val => \"associatedconstant\",\n+                        _ => return Err(())\n+                    };\n+                    Ok((ty.def, Some(format!(\"{}.{}\", out, item_name))))\n                 } else {\n                     Err(())\n                 }\n@@ -1139,9 +1140,6 @@ impl Clean<Attributes> for [ast::Attribute] {\n                         &link[..]\n                     }.trim();\n \n-                    // avoid resolving things (i.e. regular links) which aren't like paths\n-                    // FIXME(Manishearth) given that most links have slashes in them might be worth\n-                    // doing a check for slashes first\n                     if path_str.contains(|ch: char| !(ch.is_alphanumeric() ||\n                                                       ch == ':' || ch == '_')) {\n                         continue;"}, {"sha": "8ab9ca451871b930d2bf7496650d2e50736ebaf0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -406,8 +406,6 @@ pub fn make_test(s: &str,\n \n // FIXME(aburka): use a real parser to deal with multiline attributes\n fn partition_source(s: &str) -> (String, String) {\n-    use std_unicode::str::UnicodeStr;\n-\n     let mut after_header = false;\n     let mut before = String::new();\n     let mut after = String::new();"}, {"sha": "1483691a1eaee04a88886ad1ea484376f9ba4d6b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -40,7 +40,6 @@ pub mod attr;\n \n pub mod common;\n pub mod classify;\n-pub mod obsolete;\n \n /// Info about a parsing session.\n pub struct ParseSess {"}, {"sha": "49a697edf4164e64a7eb5fd2b4322d29478228a7", "filename": "src/libsyntax/parse/obsolete.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9c9424de51da41fd3d1077ac7810276f8dc746fa/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9424de51da41fd3d1077ac7810276f8dc746fa/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=9c9424de51da41fd3d1077ac7810276f8dc746fa", "patch": "@@ -1,67 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of\n-//! these syntaxes is tested by compile-test/obsolete-syntax.rs.\n-//!\n-//! Obsolete syntax that becomes too hard to parse can be removed.\n-\n-use syntax_pos::Span;\n-use parse::parser;\n-\n-/// The specific types of unsupported syntax\n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-pub enum ObsoleteSyntax {\n-    // Nothing here at the moment\n-}\n-\n-pub trait ParserObsoleteMethods {\n-    /// Reports an obsolete syntax non-fatal error.\n-    fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax);\n-    fn report(&mut self,\n-              sp: Span,\n-              kind: ObsoleteSyntax,\n-              kind_str: &str,\n-              desc: &str,\n-              error: bool);\n-}\n-\n-impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n-    /// Reports an obsolete syntax non-fatal error.\n-    #[allow(unused_variables)]\n-    #[allow(unreachable_code)]\n-    fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax) {\n-        let (kind_str, desc, error) = match kind {\n-            // Nothing here at the moment\n-        };\n-\n-        self.report(sp, kind, kind_str, desc, error);\n-    }\n-\n-    fn report(&mut self,\n-              sp: Span,\n-              kind: ObsoleteSyntax,\n-              kind_str: &str,\n-              desc: &str,\n-              error: bool) {\n-        let mut err = if error {\n-            self.diagnostic().struct_span_err(sp, &format!(\"obsolete syntax: {}\", kind_str))\n-        } else {\n-            self.diagnostic().struct_span_warn(sp, &format!(\"obsolete syntax: {}\", kind_str))\n-        };\n-\n-        if !self.obsolete_set.contains(&kind) &&\n-            (error || self.sess.span_diagnostic.flags.can_emit_warnings) {\n-            err.note(desc);\n-            self.obsolete_set.insert(kind);\n-        }\n-        err.emit();\n-    }\n-}"}, {"sha": "b4b21285d3b2b22391868cbe0cf338c76c7ec0ab", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -48,7 +48,6 @@ use parse::{self, classify, token};\n use parse::common::SeqSep;\n use parse::lexer::TokenAndSpan;\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n-use parse::obsolete::ObsoleteSyntax;\n use parse::{new_sub_parser_from_file, ParseSess, Directory, DirectoryOwnership};\n use util::parser::{AssocOp, Fixity};\n use print::pprust;\n@@ -59,7 +58,6 @@ use symbol::{Symbol, keywords};\n use util::ThinVec;\n \n use std::cmp;\n-use std::collections::HashSet;\n use std::mem;\n use std::path::{self, Path, PathBuf};\n use std::slice;\n@@ -229,9 +227,6 @@ pub struct Parser<'a> {\n     /// the previous token kind\n     prev_token_kind: PrevTokenKind,\n     pub restrictions: Restrictions,\n-    /// The set of seen errors about obsolete syntax. Used to suppress\n-    /// extra detail when the same error is seen twice\n-    pub obsolete_set: HashSet<ObsoleteSyntax>,\n     /// Used to determine the path to externally loaded source files\n     pub directory: Directory,\n     /// Whether to parse sub-modules in other files.\n@@ -555,7 +550,6 @@ impl<'a> Parser<'a> {\n             meta_var_span: None,\n             prev_token_kind: PrevTokenKind::Other,\n             restrictions: Restrictions::empty(),\n-            obsolete_set: HashSet::new(),\n             recurse_into_file_modules,\n             directory: Directory {\n                 path: PathBuf::new(),"}, {"sha": "e2dfca5d10a3c51a189718372b95bb076f6acd35", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -142,6 +142,13 @@ pub fn is_path_segment_keyword(id: ast::Ident) -> bool {\n     id.name == keywords::DollarCrate.name()\n }\n \n+// We see this identifier in a normal identifier position, like variable name or a type.\n+// How was it written originally? Did it use the raw form? Let's try to guess.\n+pub fn is_raw_guess(ident: ast::Ident) -> bool {\n+    ident.name != keywords::Invalid.name() &&\n+    is_reserved_ident(ident) && !is_path_segment_keyword(ident)\n+}\n+\n // Returns true for reserved identifiers used internally for elided lifetimes,\n // unnamed method parameters, crate root module, error recovery etc.\n pub fn is_special_ident(id: ast::Ident) -> bool {\n@@ -236,7 +243,7 @@ impl Token {\n \n     /// Recovers a `Token` from an `ast::Ident`. This creates a raw identifier if necessary.\n     pub fn from_ast_ident(ident: ast::Ident) -> Token {\n-        Ident(ident, is_reserved_ident(ident) && !is_path_segment_keyword(ident))\n+        Ident(ident, is_raw_guess(ident))\n     }\n \n     /// Returns `true` if the token starts with '>'."}, {"sha": "ae045fc095a5067bb1331fd65da16580433b3f61", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -2373,7 +2373,11 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_ident(&mut self, ident: ast::Ident) -> io::Result<()> {\n-        self.s.word(&ident.name.as_str())?;\n+        if token::is_raw_guess(ident) {\n+            self.s.word(&format!(\"r#{}\", ident))?;\n+        } else {\n+            self.s.word(&ident.name.as_str())?;\n+        }\n         self.ann.post(self, NodeIdent(&ident))\n     }\n "}, {"sha": "6cea75cf1d11e9a83daa59481c62a90d8f60d9cf", "filename": "src/test/run-pass/rfc-2151-raw-identifiers/attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fattr.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty\n-\n #![feature(raw_identifiers)]\n \n use std::mem;"}, {"sha": "5d495c4e9e557eca33006318ca3ffd6af05b9bd7", "filename": "src/test/run-pass/rfc-2151-raw-identifiers/basic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fbasic.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty\n-\n #![feature(raw_identifiers)]\n \n fn r#fn(r#match: u32) -> u32 {"}, {"sha": "256bd263d38d42c1d5c182310ccbdf50c48e4518", "filename": "src/test/run-pass/rfc-2151-raw-identifiers/items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fitems.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty\n-\n #![feature(raw_identifiers)]\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "4bd16ded52fbdf6b39ba4e5d86aaa8deadd7207f", "filename": "src/test/run-pass/rfc-2151-raw-identifiers/macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2151-raw-identifiers%2Fmacros.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty\n-\n #![feature(decl_macro)]\n #![feature(raw_identifiers)]\n "}, {"sha": "aa7ef07d5c0c305cc24aa7474e7f5604c00bfda7", "filename": "src/test/rustdoc/link-assoc-const.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frustdoc%2Flink-assoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Frustdoc%2Flink-assoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flink-assoc-const.rs?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/index.html '//a[@href=\"../foo/foo/constant.FIRSTCONST.html\"]' 'foo::FIRSTCONST'\n+// @has foo/index.html '//a[@href=\"../foo/struct.Bar.html#associatedconstant.CONST\"]' 'Bar::CONST'\n+\n+//! We have here [`foo::FIRSTCONST`] and [`Bar::CONST`].\n+\n+pub mod foo {\n+    pub const FIRSTCONST: u32 = 42;\n+}\n+\n+pub struct Bar;\n+\n+impl Bar {\n+    pub const CONST: u32 = 42;\n+}"}, {"sha": "d542a10e9b605ac9378a6f888d4b7643d824ef9a", "filename": "src/test/ui/issue-23217.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Fui%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Fui%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23217.stderr?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -5,6 +5,8 @@ LL | pub enum SomeEnum {\n    | ----------------- variant `A` not found here\n LL |     B = SomeEnum::A,\n    |         ^^^^^^^^^^^ variant not found in `SomeEnum`\n+   |\n+   = note: did you mean `variant::B`?\n \n error: aborting due to previous error\n "}, {"sha": "df114351ff571213af5d2e96751a62c01628bdae", "filename": "src/test/ui/issue-28971.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Fui%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59ec9bfc66b86f04b50f00bb32839315f59252ec/src%2Ftest%2Fui%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28971.stderr?ref=59ec9bfc66b86f04b50f00bb32839315f59252ec", "patch": "@@ -6,6 +6,8 @@ LL | enum Foo {\n ...\n LL |             Foo::Baz(..) => (),\n    |             ^^^^^^^^^^^^ variant not found in `Foo`\n+   |\n+   = note: did you mean `variant::Bar`?\n \n error: aborting due to previous error\n "}]}