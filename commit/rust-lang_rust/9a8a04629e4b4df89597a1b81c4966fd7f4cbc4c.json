{"sha": "9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOGEwNDYyOWU0YjRkZjg5NTk3YTFiODFjNDk2NmZkN2Y0Y2JjNGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-18T06:34:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-18T17:50:50Z"}, "message": "syntax: Put the main parser interface in mod parse", "tree": {"sha": "598f63b0e6c6a79ef068d05053393675fe8102c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598f63b0e6c6a79ef068d05053393675fe8102c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "html_url": "https://github.com/rust-lang/rust/commit/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7", "html_url": "https://github.com/rust-lang/rust/commit/2c0cb901c8ee464b9d5d4e069b98c692678b2ee7"}], "stats": {"total": 413, "additions": 214, "deletions": 199}, "files": [{"sha": "f926500ac6080c5a5506115741ac7bb91008d19e", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -1,7 +1,7 @@\n // cargo.rs - Rust package manager\n \n import rustc::syntax::{ast, codemap};\n-import rustc::syntax::parse::parser;\n+import rustc::syntax::parse;\n import rustc::util::filesearch::{get_cargo_root, get_cargo_root_nearest,\n                                  get_cargo_sysroot, libdir};\n import rustc::driver::diagnostic;\n@@ -119,7 +119,7 @@ fn load_pkg(filename: str) -> option<pkg> {\n         mut chpos: 0u,\n         mut byte_pos: 0u\n     };\n-    let c = parser::parse_crate_from_crate_file(filename, [], sess);\n+    let c = parse::parse_crate_from_crate_file(filename, [], sess);\n \n     let mut name = none;\n     let mut vers = none;"}, {"sha": "47c6371ad16fd8b7180f99a3920d879f18f537cf", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -1,7 +1,7 @@\n import io::writer_util;\n \n import rustc::syntax::{ast, ast_util, fold, visit, codemap};\n-import rustc::syntax::parse::parser;\n+import rustc::syntax::parse;\n import rustc::syntax::print::pprust;\n import rustc::driver::diagnostic;\n \n@@ -429,7 +429,7 @@ fn parse_and_print(code: @str) -> str {\n         mut byte_pos: 0u\n     };\n     write_file(filename, *code);\n-    let crate = parser::parse_crate_from_source_str(\n+    let crate = parse::parse_crate_from_source_str(\n         filename, code, [], sess);\n     io::with_str_reader(*code) { |rdr|\n         as_str(bind pprust::print_crate(sess.cm,\n@@ -579,7 +579,7 @@ fn check_variants(files: [str], cx: context) {\n             mut byte_pos: 0u\n         };\n         let crate =\n-            parser::parse_crate_from_source_str(\n+            parse::parse_crate_from_source_str(\n                 file,\n                 s, [], sess);\n         io::with_str_reader(*s) { |rdr|"}, {"sha": "125fb99b8dfa251944083d17bace7457d7ab7bd0", "filename": "src/librustsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fbase.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -46,7 +46,7 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n \n iface ext_ctxt {\n     fn codemap() -> codemap;\n-    fn parse_sess() -> parser::parse_sess;\n+    fn parse_sess() -> parse::parse_sess;\n     fn cfg() -> ast::crate_cfg;\n     fn print_backtrace();\n     fn backtrace() -> expn_info;\n@@ -60,14 +60,14 @@ iface ext_ctxt {\n     fn next_id() -> ast::node_id;\n }\n \n-fn mk_ctxt(parse_sess: parser::parse_sess,\n+fn mk_ctxt(parse_sess: parse::parse_sess,\n            cfg: ast::crate_cfg) -> ext_ctxt {\n-    type ctxt_repr = {parse_sess: parser::parse_sess,\n+    type ctxt_repr = {parse_sess: parse::parse_sess,\n                       cfg: ast::crate_cfg,\n                       mut backtrace: expn_info};\n     impl of ext_ctxt for ctxt_repr {\n         fn codemap() -> codemap { self.parse_sess.cm }\n-        fn parse_sess() -> parser::parse_sess { self.parse_sess }\n+        fn parse_sess() -> parse::parse_sess { self.parse_sess }\n         fn cfg() -> ast::crate_cfg { self.cfg }\n         fn print_backtrace() { }\n         fn backtrace() -> expn_info { self.backtrace }\n@@ -111,7 +111,7 @@ fn mk_ctxt(parse_sess: parser::parse_sess,\n             self.parse_sess.span_diagnostic.handler().bug(msg);\n         }\n         fn next_id() -> ast::node_id {\n-            ret parser::next_node_id(self.parse_sess);\n+            ret parse::next_node_id(self.parse_sess);\n         }\n     }\n     let imp : ctxt_repr = {"}, {"sha": "65f593c52500d7127758db6f7fc93ad3ee22f1a7", "filename": "src/librustsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fexpand.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -5,7 +5,7 @@ import fold::*;\n import ext::base::*;\n import ext::qquote::{qq_helper};\n import parse::parser;\n-import parse::parser::parse_expr_from_source_str;\n+import parse::parse_expr_from_source_str;\n \n \n import codemap::{span, expanded_from};\n@@ -110,7 +110,7 @@ fn core_macros() -> str {\n }\";\n }\n \n-fn expand_crate(parse_sess: parser::parse_sess,\n+fn expand_crate(parse_sess: parse::parse_sess,\n                 cfg: ast::crate_cfg, c: @crate) -> @crate {\n     let exts = syntax_expander_table();\n     let afp = default_ast_fold();"}, {"sha": "f95c902cb6d164dd66557fb13eded65fce6cb586", "filename": "src/librustsyntax/ext/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fqquote.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -5,7 +5,7 @@ import visit::*;\n import ext::base::*;\n import ext::build::*;\n import parse::parser;\n-import parse::parser::{parser, parse_from_source_str};\n+import parse::parser::parse_from_source_str;\n \n import print::*;\n import io::*;"}, {"sha": "747775ebaa682942651622189afee7cd6eebfceb", "filename": "src/librustsyntax/parse.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -0,0 +1,166 @@\n+export parse_sess;\n+export next_node_id;\n+export new_parser_from_file;\n+export new_parser_from_source_str;\n+export parse_crate_from_file;\n+export parse_crate_from_crate_file;\n+export parse_crate_from_source_str;\n+export parse_expr_from_source_str;\n+export parse_from_source_str;\n+\n+import parser::parser;\n+import ast::node_id;\n+import util::interner;\n+import lexer::reader;\n+\n+type parse_sess = @{\n+    cm: codemap::codemap,\n+    mut next_id: node_id,\n+    span_diagnostic: diagnostic::span_handler,\n+    // these two must be kept up to date\n+    mut chpos: uint,\n+    mut byte_pos: uint\n+};\n+\n+fn next_node_id(sess: parse_sess) -> node_id {\n+    let rv = sess.next_id;\n+    sess.next_id += 1;\n+    // ID 0 is reserved for the crate and doesn't actually exist in the AST\n+    assert rv != 0;\n+    ret rv;\n+}\n+\n+fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n+                        ftype: parser::file_type) ->\n+   parser {\n+    let src = alt io::read_whole_file_str(path) {\n+      result::ok(src) {\n+        // FIXME: This copy is unfortunate\n+        @src\n+      }\n+      result::err(e) {\n+        sess.span_diagnostic.handler().fatal(e)\n+      }\n+    };\n+    let filemap = codemap::new_filemap(path, src,\n+                                       sess.chpos, sess.byte_pos);\n+    sess.cm.files += [filemap];\n+    let itr = @interner::mk(str::hash, str::eq);\n+    let rdr = lexer::new_reader(sess.span_diagnostic, filemap, itr);\n+    ret new_parser(sess, cfg, rdr, ftype);\n+}\n+\n+fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n+                              name: str, ss: codemap::file_substr,\n+                              source: @str) -> parser {\n+    let ftype = parser::SOURCE_FILE;\n+    let filemap = codemap::new_filemap_w_substr\n+        (name, ss, source, sess.chpos, sess.byte_pos);\n+    sess.cm.files += [filemap];\n+    let itr = @interner::mk(str::hash, str::eq);\n+    let rdr = lexer::new_reader(sess.span_diagnostic,\n+                                filemap, itr);\n+    ret new_parser(sess, cfg, rdr, ftype);\n+}\n+\n+fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: lexer::reader,\n+              ftype: parser::file_type) -> parser {\n+    let tok0 = lexer::next_token(rdr);\n+    let span0 = ast_util::mk_sp(tok0.chpos, rdr.chpos);\n+    @{sess: sess,\n+      cfg: cfg,\n+      file_type: ftype,\n+      mut token: tok0.tok,\n+      mut span: span0,\n+      mut last_span: span0,\n+      mut buffer: [],\n+      mut restriction: parser::UNRESTRICTED,\n+      reader: rdr,\n+      binop_precs: prec::binop_prec_table(),\n+      bad_expr_words: token::bad_expr_word_table()}\n+}\n+\n+fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n+                               sess: parse_sess) -> @ast::crate {\n+    let p = new_parser_from_file(sess, cfg, input, parser::CRATE_FILE);\n+    let lo = p.span.lo;\n+    let prefix = path::dirname(p.reader.filemap.name);\n+    let leading_attrs = parser::parse_inner_attrs_and_next(p);\n+    let crate_attrs = leading_attrs.inner;\n+    let first_cdir_attr = leading_attrs.next;\n+    let cdirs = parser::parse_crate_directives(\n+        p, token::EOF, first_cdir_attr);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n+    let cx =\n+        @{p: p,\n+          sess: sess,\n+          cfg: p.cfg};\n+    let (companionmod, _) = path::splitext(path::basename(input));\n+    let (m, attrs) = eval::eval_crate_directives_to_mod(\n+        cx, cdirs, prefix, option::some(companionmod));\n+    let mut hi = p.span.hi;\n+    parser::expect(p, token::EOF);\n+    ret @ast_util::respan(ast_util::mk_sp(lo, hi),\n+                          {directives: cdirs,\n+                           module: m,\n+                           attrs: crate_attrs + attrs,\n+                           config: p.cfg});\n+}\n+\n+fn parse_crate_from_file(input: str, cfg: ast::crate_cfg, sess: parse_sess) ->\n+   @ast::crate {\n+    if str::ends_with(input, \".rc\") {\n+        parse_crate_from_crate_file(input, cfg, sess)\n+    } else if str::ends_with(input, \".rs\") {\n+        parse_crate_from_source_file(input, cfg, sess)\n+    } else {\n+        sess.span_diagnostic.handler().fatal(\"unknown input file type: \" +\n+                                             input)\n+    }\n+}\n+\n+fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n+                                sess: parse_sess) -> @ast::crate {\n+    let p = new_parser_from_file(sess, cfg, input, parser::SOURCE_FILE);\n+    let r = parser::parse_crate_mod(p, cfg);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n+    ret r;\n+}\n+\n+fn parse_expr_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n+                              sess: parse_sess) -> @ast::expr {\n+    let p = new_parser_from_source_str(\n+        sess, cfg, name, codemap::fss_none, source);\n+    let r = parser::parse_expr(p);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n+    ret r;\n+}\n+\n+fn parse_crate_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n+                               sess: parse_sess) -> @ast::crate {\n+    let p = new_parser_from_source_str(\n+        sess, cfg, name, codemap::fss_none, source);\n+    let r = parser::parse_crate_mod(p, cfg);\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n+    ret r;\n+}\n+\n+fn parse_from_source_str<T>(f: fn (p: parser) -> T,\n+                            name: str, ss: codemap::file_substr,\n+                            source: @str, cfg: ast::crate_cfg,\n+                            sess: parse_sess)\n+    -> T\n+{\n+    let p = new_parser_from_source_str(sess, cfg, name, ss, source);\n+    let r = f(p);\n+    if !p.reader.is_eof() {\n+        p.reader.fatal(\"expected end-of-string\");\n+    }\n+    sess.chpos = p.reader.chpos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n+    ret r;\n+}"}, {"sha": "d518c93a8ba80985b28b37e9fd623a812ea21fc3", "filename": "src/librustsyntax/parse/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Feval.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -1,13 +1,13 @@\n import attr;\n-import parser::{parser, new_parser_from_file,\n+import parser::{parser,\n                 parse_inner_attrs_and_next,\n                 parse_mod_items, SOURCE_FILE};\n \n export eval_crate_directives_to_mod;\n \n type ctx =\n     @{p: parser,\n-      sess: parser::parse_sess,\n+      sess: parse::parse_sess,\n       cfg: ast::crate_cfg};\n \n fn eval_crate_directives(cx: ctx, cdirs: [@ast::crate_directive], prefix: str,"}, {"sha": "73ec8236fa511b6961eba048d2f7c73203ff5aee", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 161, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -4,33 +4,31 @@ import std::map::{hashmap, str_hash};\n import token::{can_begin_expr, is_ident, is_plain_ident};\n import codemap::{span,fss_none};\n import util::interner;\n-import ast::{node_id, spanned};\n+import ast::spanned;\n import ast_util::{mk_sp, ident_to_path};\n import lexer::reader;\n-import prec::{op_spec, binop_prec_table, as_prec};\n+import prec::{op_spec, as_prec};\n \n+export expect;\n export file_type;\n export mk_item;\n-export next_node_id;\n-export new_parser_from_file;\n-export new_parser_from_source_str;\n+export restriction;\n export parser;\n-export parse_crate_from_file;\n-export parse_crate_from_crate_file;\n-export parse_crate_from_source_str;\n+export parse_crate_directives;\n export parse_crate_mod;\n export parse_expr;\n-export parse_expr_from_source_str;\n-export parse_from_source_str;\n export parse_inner_attrs_and_next;\n export parse_item;\n export parse_mod_items;\n export parse_outer_attributes;\n export parse_pat;\n-export parse_sess;\n export parse_stmt;\n export parse_ty;\n \n+// FIXME: #ast expects to find this here but it's actually defined in `parse`\n+import parse_from_source_str;\n+export parse_from_source_str;\n+\n enum restriction {\n     UNRESTRICTED,\n     RESTRICT_STMT_EXPR,\n@@ -40,23 +38,6 @@ enum restriction {\n \n enum file_type { CRATE_FILE, SOURCE_FILE, }\n \n-type parse_sess = @{\n-    cm: codemap::codemap,\n-    mut next_id: node_id,\n-    span_diagnostic: diagnostic::span_handler,\n-    // these two must be kept up to date\n-    mut chpos: uint,\n-    mut byte_pos: uint\n-};\n-\n-fn next_node_id(sess: parse_sess) -> node_id {\n-    let rv = sess.next_id;\n-    sess.next_id += 1;\n-    // ID 0 is reserved for the crate and doesn't actually exist in the AST\n-    assert rv != 0;\n-    ret rv;\n-}\n-\n type parser = @{\n     sess: parse_sess,\n     cfg: ast::crate_cfg,\n@@ -111,56 +92,6 @@ impl parser for parser {\n     fn get_id() -> node_id { next_node_id(self.sess) }\n }\n \n-fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n-                        ftype: file_type) ->\n-   parser {\n-    let src = alt io::read_whole_file_str(path) {\n-      result::ok(src) {\n-        // FIXME: This copy is unfortunate\n-        @src\n-      }\n-      result::err(e) {\n-        sess.span_diagnostic.handler().fatal(e)\n-      }\n-    };\n-    let filemap = codemap::new_filemap(path, src,\n-                                       sess.chpos, sess.byte_pos);\n-    sess.cm.files += [filemap];\n-    let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.span_diagnostic, filemap, itr);\n-    ret new_parser(sess, cfg, rdr, ftype);\n-}\n-\n-fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n-                              name: str, ss: codemap::file_substr,\n-                              source: @str) -> parser {\n-    let ftype = SOURCE_FILE;\n-    let filemap = codemap::new_filemap_w_substr\n-        (name, ss, source, sess.chpos, sess.byte_pos);\n-    sess.cm.files += [filemap];\n-    let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.span_diagnostic,\n-                                filemap, itr);\n-    ret new_parser(sess, cfg, rdr, ftype);\n-}\n-\n-fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader,\n-              ftype: file_type) -> parser {\n-    let tok0 = lexer::next_token(rdr);\n-    let span0 = ast_util::mk_sp(tok0.chpos, rdr.chpos);\n-    @{sess: sess,\n-      cfg: cfg,\n-      file_type: ftype,\n-      mut token: tok0.tok,\n-      mut span: span0,\n-      mut last_span: span0,\n-      mut buffer: [],\n-      mut restriction: UNRESTRICTED,\n-      reader: rdr,\n-      binop_precs: binop_prec_table(),\n-      bad_expr_words: token::bad_expr_word_table()}\n-}\n-\n fn token_to_str(reader: reader, token: token::token) -> str {\n     token::to_str(*reader.interner, token)\n }\n@@ -2690,50 +2621,6 @@ fn parse_native_view(p: parser) -> [@ast::view_item] {\n     maybe_parse_view_while(p, [], is_view_item)\n }\n \n-fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n-                                sess: parse_sess) -> @ast::crate {\n-    let p = new_parser_from_file(sess, cfg, input, SOURCE_FILE);\n-    let r = parse_crate_mod(p, cfg);\n-    sess.chpos = p.reader.chpos;\n-    sess.byte_pos = sess.byte_pos + p.reader.pos;\n-    ret r;\n-}\n-\n-\n-fn parse_expr_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n-                              sess: parse_sess) -> @ast::expr {\n-    let p = new_parser_from_source_str(sess, cfg, name, fss_none, source);\n-    let r = parse_expr(p);\n-    sess.chpos = p.reader.chpos;\n-    sess.byte_pos = sess.byte_pos + p.reader.pos;\n-    ret r;\n-}\n-\n-fn parse_from_source_str<T>(f: fn (p: parser) -> T,\n-                            name: str, ss: codemap::file_substr,\n-                            source: @str, cfg: ast::crate_cfg,\n-                            sess: parse_sess)\n-    -> T\n-{\n-    let p = new_parser_from_source_str(sess, cfg, name, ss, source);\n-    let r = f(p);\n-    if !p.reader.is_eof() {\n-        p.reader.fatal(\"expected end-of-string\");\n-    }\n-    sess.chpos = p.reader.chpos;\n-    sess.byte_pos = sess.byte_pos + p.reader.pos;\n-    ret r;\n-}\n-\n-fn parse_crate_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n-                               sess: parse_sess) -> @ast::crate {\n-    let p = new_parser_from_source_str(sess, cfg, name, fss_none, source);\n-    let r = parse_crate_mod(p, cfg);\n-    sess.chpos = p.reader.chpos;\n-    sess.byte_pos = sess.byte_pos + p.reader.pos;\n-    ret r;\n-}\n-\n // Parses a source module as a crate\n fn parse_crate_mod(p: parser, _cfg: ast::crate_cfg) -> @ast::crate {\n     let lo = p.span.lo;\n@@ -2822,45 +2709,6 @@ fn parse_crate_directives(p: parser, term: token::token,\n     ret cdirs;\n }\n \n-fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n-                               sess: parse_sess) -> @ast::crate {\n-    let p = new_parser_from_file(sess, cfg, input, CRATE_FILE);\n-    let lo = p.span.lo;\n-    let prefix = path::dirname(p.reader.filemap.name);\n-    let leading_attrs = parse_inner_attrs_and_next(p);\n-    let crate_attrs = leading_attrs.inner;\n-    let first_cdir_attr = leading_attrs.next;\n-    let cdirs = parse_crate_directives(p, token::EOF, first_cdir_attr);\n-    sess.chpos = p.reader.chpos;\n-    sess.byte_pos = sess.byte_pos + p.reader.pos;\n-    let cx =\n-        @{p: p,\n-          sess: sess,\n-          cfg: p.cfg};\n-    let (companionmod, _) = path::splitext(path::basename(input));\n-    let (m, attrs) = eval::eval_crate_directives_to_mod(\n-        cx, cdirs, prefix, option::some(companionmod));\n-    let mut hi = p.span.hi;\n-    expect(p, token::EOF);\n-    ret @spanned(lo, hi,\n-                 {directives: cdirs,\n-                  module: m,\n-                  attrs: crate_attrs + attrs,\n-                  config: p.cfg});\n-}\n-\n-fn parse_crate_from_file(input: str, cfg: ast::crate_cfg, sess: parse_sess) ->\n-   @ast::crate {\n-    if str::ends_with(input, \".rc\") {\n-        parse_crate_from_crate_file(input, cfg, sess)\n-    } else if str::ends_with(input, \".rs\") {\n-        parse_crate_from_source_file(input, cfg, sess)\n-    } else {\n-        sess.span_diagnostic.handler().fatal(\"unknown input file type: \" +\n-                                             input)\n-    }\n-}\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "3b8889d672edce2a85ef52210c3f0dff9ebb9d5d", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -1,7 +1,7 @@\n // -*- rust -*-\n import metadata::{creader, cstore};\n import session::session;\n-import syntax::parse::{parser};\n+import syntax::parse;\n import syntax::{ast, codemap};\n import syntax::attr;\n import middle::{trans, resolve, freevars, kind, ty, typeck, fn_usage,\n@@ -76,10 +76,10 @@ fn input_is_stdin(filename: str) -> bool { filename == \"-\" }\n fn parse_input(sess: session, cfg: ast::crate_cfg, input: str)\n     -> @ast::crate {\n     if !input_is_stdin(input) {\n-        parser::parse_crate_from_file(input, cfg, sess.parse_sess)\n+        parse::parse_crate_from_file(input, cfg, sess.parse_sess)\n     } else {\n         let src = @str::from_bytes(io::stdin().read_whole_stream());\n-        parser::parse_crate_from_source_str(input, src, cfg, sess.parse_sess)\n+        parse::parse_crate_from_source_str(input, src, cfg, sess.parse_sess)\n     }\n }\n "}, {"sha": "fbc1b9981f5a7b50809ebbba3fe811e19f8e1bd9", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -3,7 +3,7 @@ import syntax::{ast, codemap};\n import syntax::ast::node_id;\n import codemap::span;\n import syntax::ast::{int_ty, uint_ty, float_ty};\n-import syntax::parse::parser::parse_sess;\n+import syntax::parse::parse_sess;\n import util::filesearch;\n import back::target_strs;\n import middle::lint;\n@@ -106,7 +106,7 @@ impl session for session {\n         self.span_diagnostic.handler().unimpl(msg)\n     }\n     fn next_node_id() -> ast::node_id {\n-        ret syntax::parse::parser::next_node_id(self.parse_sess);\n+        ret syntax::parse::next_node_id(self.parse_sess);\n     }\n     fn diagnostic() -> diagnostic::span_handler {\n         self.span_diagnostic"}, {"sha": "c845eb6c03aad8bc780593a45994aead32d9113d", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -34,7 +34,7 @@ import e = encoder;\n // used in testing:\n import driver::diagnostic;\n import syntax::codemap;\n-import syntax::parse::parser;\n+import syntax::parse;\n import syntax::print::pprust;\n \n export encode_inlined_item;\n@@ -956,7 +956,7 @@ fn decode_item_ast(par_doc: ebml::doc) -> @ast::item {\n }\n \n #[cfg(test)]\n-fn new_parse_sess() -> parser::parse_sess {\n+fn new_parse_sess() -> parse::parse_sess {\n     let cm = codemap::new_codemap();\n     let handler = diagnostic::mk_handler(option::none);\n     let sess = @{\n@@ -972,7 +972,7 @@ fn new_parse_sess() -> parser::parse_sess {\n #[cfg(test)]\n iface fake_ext_ctxt {\n     fn cfg() -> ast::crate_cfg;\n-    fn parse_sess() -> parser::parse_sess;\n+    fn parse_sess() -> parse::parse_sess;\n }\n \n #[cfg(test)]\n@@ -981,7 +981,7 @@ type fake_session = ();\n #[cfg(test)]\n impl of fake_ext_ctxt for fake_session {\n     fn cfg() -> ast::crate_cfg { [] }\n-    fn parse_sess() -> parser::parse_sess { new_parse_sess() }\n+    fn parse_sess() -> parse::parse_sess { new_parse_sess() }\n }\n \n #[cfg(test)]"}, {"sha": "aa3b8c550dd221d0bcf085c785a6ef8d6d5b66ae", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -21,6 +21,7 @@ type crate_attrs = {\n mod test {\n \n     fn parse_attributes(source: str) -> [ast::attribute] {\n+        import rustc::syntax::parse;\n         import rustc::syntax::parse::parser;\n         import rustc::syntax::codemap;\n         import rustc::driver::diagnostic;\n@@ -34,7 +35,7 @@ mod test {\n             mut chpos: 0u,\n             mut byte_pos: 0u\n         };\n-        let parser = parser::new_parser_from_source_str(\n+        let parser = parse::new_parser_from_source_str(\n             parse_sess, [], \"-\", codemap::fss_none, @source);\n \n         parser::parse_outer_attributes(parser)"}, {"sha": "3ad8f51e8db0a2044c085b7c7fb92580768c894c", "filename": "src/rustdoc/parse.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Frustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fparse.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -5,11 +5,11 @@ import rustc::driver::session;\n import rustc::driver::diagnostic;\n import rustc::syntax::ast;\n import rustc::syntax::codemap;\n-import rustc::syntax::parse::parser;\n+import rustc::syntax::parse;\n \n export from_file, from_str, from_file_sess, from_str_sess;\n \n-fn new_parse_sess() -> parser::parse_sess {\n+fn new_parse_sess() -> parse::parse_sess {\n     let cm = codemap::new_codemap();\n     let handler = diagnostic::mk_handler(none);\n     let sess = @{\n@@ -23,21 +23,21 @@ fn new_parse_sess() -> parser::parse_sess {\n }\n \n fn from_file(file: str) -> @ast::crate {\n-    parser::parse_crate_from_file(\n+    parse::parse_crate_from_file(\n         file, [], new_parse_sess())\n }\n \n fn from_str(source: str) -> @ast::crate {\n-    parser::parse_crate_from_source_str(\n+    parse::parse_crate_from_source_str(\n         \"-\", @source, [], new_parse_sess())\n }\n \n fn from_file_sess(sess: session::session, file: str) -> @ast::crate {\n-    parser::parse_crate_from_file(file, cfg(sess), sess.parse_sess)\n+    parse::parse_crate_from_file(file, cfg(sess), sess.parse_sess)\n }\n \n fn from_str_sess(sess: session::session, source: str) -> @ast::crate {\n-    parser::parse_crate_from_source_str(\n+    parse::parse_crate_from_source_str(\n         \"-\", @source, cfg(sess), sess.parse_sess)\n }\n "}, {"sha": "d22b33846c665250d47a25ba99ce179c23e9edf4", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -9,10 +9,10 @@ import io::*;\n import rustc::driver::diagnostic;\n import rustc::syntax::ast;\n import rustc::syntax::codemap;\n-import rustc::syntax::parse::parser;\n+import rustc::syntax::parse;\n import rustc::syntax::print::*;\n \n-fn new_parse_sess() -> parser::parse_sess {\n+fn new_parse_sess() -> parse::parse_sess {\n   fail;\n }\n \n@@ -23,7 +23,7 @@ iface fake_ext_ctxt {\n type fake_options = {cfg: ast::crate_cfg};\n \n type fake_session = {opts: @fake_options,\n-                     parse_sess: parser::parse_sess};\n+                     parse_sess: parse::parse_sess};\n \n impl of fake_ext_ctxt for fake_session {\n     fn session() -> fake_session {self}"}, {"sha": "7a4bf00f0ae42befe90d1a5e480655c00db82081", "filename": "src/test/run-pass/qquote.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Ftest%2Frun-pass%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c/src%2Ftest%2Frun-pass%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fqquote.rs?ref=9a8a04629e4b4df89597a1b81c4966fd7f4cbc4c", "patch": "@@ -9,10 +9,10 @@ import io::*;\n import rustc::driver::diagnostic;\n import rustc::syntax::ast;\n import rustc::syntax::codemap;\n-import rustc::syntax::parse::parser;\n+import rustc::syntax::parse;\n import rustc::syntax::print::*;\n \n-fn new_parse_sess() -> parser::parse_sess {\n+fn new_parse_sess() -> parse::parse_sess {\n     let cm = codemap::new_codemap();\n     let handler = diagnostic::mk_handler(option::none);\n     let sess = @{\n@@ -27,14 +27,14 @@ fn new_parse_sess() -> parser::parse_sess {\n \n iface fake_ext_ctxt {\n     fn cfg() -> ast::crate_cfg;\n-    fn parse_sess() -> parser::parse_sess;\n+    fn parse_sess() -> parse::parse_sess;\n }\n \n type fake_session = ();\n \n impl of fake_ext_ctxt for fake_session {\n     fn cfg() -> ast::crate_cfg { [] }\n-    fn parse_sess() -> parser::parse_sess { new_parse_sess() }\n+    fn parse_sess() -> parse::parse_sess { new_parse_sess() }\n }\n \n fn mk_ctxt() -> fake_ext_ctxt {"}]}