{"sha": "7065239da55420e26adb7cb647fc7eb4e9c8798e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNjUyMzlkYTU1NDIwZTI2YWRiN2NiNjQ3ZmM3ZWI0ZTljODc5OGU=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-08-15T03:53:11Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-08-19T03:54:40Z"}, "message": "Add option_and_then_some lint", "tree": {"sha": "9dfb12798a488e266c1cd7e52ea6ebd35fcb9972", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dfb12798a488e266c1cd7e52ea6ebd35fcb9972"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7065239da55420e26adb7cb647fc7eb4e9c8798e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7065239da55420e26adb7cb647fc7eb4e9c8798e", "html_url": "https://github.com/rust-lang/rust/commit/7065239da55420e26adb7cb647fc7eb4e9c8798e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7065239da55420e26adb7cb647fc7eb4e9c8798e/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f01a0c0e08b5905f174d30201b0cb927f5cad500", "url": "https://api.github.com/repos/rust-lang/rust/commits/f01a0c0e08b5905f174d30201b0cb927f5cad500", "html_url": "https://github.com/rust-lang/rust/commit/f01a0c0e08b5905f174d30201b0cb927f5cad500"}], "stats": {"total": 211, "additions": 201, "deletions": 10}, "files": [{"sha": "59dfde0b6f4c7c26888d569bb272b22ed34b58fb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -1088,6 +1088,7 @@ Released 2018-09-13\n [`not_unsafe_ptr_arg_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n [`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref\n+[`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n [`option_map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or"}, {"sha": "e5da763607bdfea5362756749ff6128d21f02461", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 310 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 311 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "b53a557997130c6847d364646fc70762f15397a1", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -123,13 +123,13 @@ pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n     lints\n         .iter()\n         .filter_map(|l| {\n-            l.clone().deprecation.and_then(|depr_text| {\n-                Some(vec![\n+            l.clone().deprecation.map(|depr_text| {\n+                vec![\n                     \"    store.register_removed(\".to_string(),\n                     format!(\"        \\\"clippy::{}\\\",\", l.name),\n                     format!(\"        \\\"{}\\\",\", depr_text),\n                     \"    );\".to_string(),\n-                ])\n+                ]\n             })\n         })\n         .flatten()"}, {"sha": "4d568a8a8b0930b99d522f425c36c37310a23f3f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -795,6 +795,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         methods::ITER_SKIP_NEXT,\n         methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n+        methods::OPTION_AND_THEN_SOME,\n         methods::OPTION_MAP_OR_NONE,\n         methods::OR_FUN_CALL,\n         methods::SEARCH_IS_SOME,\n@@ -1033,6 +1034,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         methods::CLONE_ON_COPY,\n         methods::FILTER_NEXT,\n         methods::FLAT_MAP_IDENTITY,\n+        methods::OPTION_AND_THEN_SOME,\n         methods::SEARCH_IS_SOME,\n         methods::SUSPICIOUS_MAP,\n         methods::UNNECESSARY_FILTER_MAP,"}, {"sha": "8d062bd897cbea29a5d71141220b44dc1cc4453f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 124, "deletions": 5, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -21,11 +21,11 @@ use syntax::symbol::LocalInternedString;\n use crate::utils::sugg;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n-    is_ctor_function, is_expn_of, iter_input_pats, last_path_segment, match_def_path, match_qpath, match_trait_method,\n-    match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys, single_segment_path,\n-    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n+    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, in_macro_or_desugar,\n+    is_copy, is_ctor_function, is_expn_of, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n+    match_trait_method, match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys,\n+    single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n+    span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n use crate::utils::{paths, span_help_and_lint};\n \n@@ -264,6 +264,32 @@ declare_clippy_lint! {\n     \"using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.and_then(|x| Some(y))`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// `_.map(|x| y)`.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let x = Some(\"foo\");\n+    /// let _ = x.and_then(|s| Some(s.len()));\n+    /// ```\n+    ///\n+    /// The correct use would be:\n+    ///\n+    /// ```rust\n+    /// let x = Some(\"foo\");\n+    /// let _ = x.map(|s| s.len());\n+    /// ```\n+    pub OPTION_AND_THEN_SOME,\n+    complexity,\n+    \"using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.filter(_).next()`.\n     ///\n@@ -918,6 +944,7 @@ declare_lint_pass!(Methods => [\n     OPTION_MAP_UNWRAP_OR_ELSE,\n     RESULT_MAP_UNWRAP_OR_ELSE,\n     OPTION_MAP_OR_NONE,\n+    OPTION_AND_THEN_SOME,\n     OR_FUN_CALL,\n     EXPECT_FUN_CALL,\n     CHARS_NEXT_CMP,\n@@ -967,6 +994,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"unwrap_or\", \"map\"] => option_map_unwrap_or::lint(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"unwrap_or_else\", \"map\"] => lint_map_unwrap_or_else(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map_or\", ..] => lint_map_or_none(cx, expr, arg_lists[0]),\n+            [\"and_then\", ..] => lint_option_and_then_some(cx, expr, arg_lists[0]),\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n             [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n@@ -2072,6 +2100,97 @@ fn lint_map_or_none<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr,\n     }\n }\n \n+/// Lint use of `_.and_then(|x| Some(y))` for `Option`s\n+fn lint_option_and_then_some(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr]) {\n+    const LINT_MSG: &str = \"using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\";\n+    const NO_OP_MSG: &str = \"using `Option.and_then(Some)`, which is a no-op\";\n+\n+    // Searches an return expressions in `y` in `_.and_then(|x| Some(y))`, which we don't lint\n+    struct RetCallFinder {\n+        found: bool,\n+    }\n+\n+    impl<'tcx> intravisit::Visitor<'tcx> for RetCallFinder {\n+        fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n+            if self.found {\n+                return;\n+            }\n+            if let hir::ExprKind::Ret(..) = &expr.node {\n+                self.found = true;\n+            } else {\n+                intravisit::walk_expr(self, expr);\n+            }\n+        }\n+\n+        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+            intravisit::NestedVisitorMap::None\n+        }\n+    }\n+\n+    let ty = cx.tables.expr_ty(&args[0]);\n+    if !match_type(cx, ty, &paths::OPTION) {\n+        return;\n+    }\n+\n+    match args[1].node {\n+        hir::ExprKind::Closure(_, _, body_id, closure_args_span, _) => {\n+            let closure_body = cx.tcx.hir().body(body_id);\n+            let closure_expr = remove_blocks(&closure_body.value);\n+            if_chain! {\n+                if let hir::ExprKind::Call(ref some_expr, ref some_args) = closure_expr.node;\n+                if let hir::ExprKind::Path(ref qpath) = some_expr.node;\n+                if match_qpath(qpath, &paths::OPTION_SOME);\n+                if some_args.len() == 1;\n+                then {\n+                    let inner_expr = &some_args[0];\n+\n+                    let mut finder = RetCallFinder { found: false };\n+                    finder.visit_expr(inner_expr);\n+                    if finder.found {\n+                        return;\n+                    }\n+\n+                    let some_inner_snip = if in_macro_or_desugar(inner_expr.span) {\n+                        snippet_with_macro_callsite(cx, inner_expr.span, \"_\")\n+                    } else {\n+                        snippet(cx, inner_expr.span, \"_\")\n+                    };\n+\n+                    let closure_args_snip = snippet(cx, closure_args_span, \"..\");\n+                    let option_snip = snippet(cx, args[0].span, \"..\");\n+                    let note = format!(\"{}.map({} {})\", option_snip, closure_args_snip, some_inner_snip);\n+                    span_lint_and_sugg(\n+                        cx,\n+                        OPTION_AND_THEN_SOME,\n+                        expr.span,\n+                        LINT_MSG,\n+                        \"try this\",\n+                        note,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+        },\n+        // `_.and_then(Some)` case, which is no-op.\n+        hir::ExprKind::Path(ref qpath) => {\n+            if match_qpath(qpath, &paths::OPTION_SOME) {\n+                let option_snip = snippet(cx, args[0].span, \"..\");\n+                let note = format!(\"{}\", option_snip);\n+                span_lint_and_sugg(\n+                    cx,\n+                    OPTION_AND_THEN_SOME,\n+                    expr.span,\n+                    NO_OP_MSG,\n+                    \"use the expression directly\",\n+                    note,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        },\n+        _ => {},\n+    }\n+}\n+\n /// lint use of `filter().next()` for `Iterators`\n fn lint_filter_next<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, filter_args: &'tcx [hir::Expr]) {\n     // lint if caller of `.filter().next()` is an Iterator"}, {"sha": "9abe4558bb912ece2d99f8d63a41bbbb06cd8d0b", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 310] = [\n+pub const ALL_LINTS: [Lint; 311] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1316,6 +1316,13 @@ pub const ALL_LINTS: [Lint; 310] = [\n         deprecation: None,\n         module: \"eq_op\",\n     },\n+    Lint {\n+        name: \"option_and_then_some\",\n+        group: \"complexity\",\n+        desc: \"using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"option_map_or_none\",\n         group: \"style\","}, {"sha": "852f48879a358fe99f168471d62b0d27c3f01f11", "filename": "tests/ui/option_and_then_some.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/tests%2Fui%2Foption_and_then_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/tests%2Fui%2Foption_and_then_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_and_then_some.fixed?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![deny(clippy::option_and_then_some)]\n+\n+// need a main anyway, use it get rid of unused warnings too\n+pub fn main() {\n+    let x = Some(5);\n+    // the easiest cases\n+    let _ = x;\n+    let _ = x.map(|o| o + 1);\n+    // and an easy counter-example\n+    let _ = x.and_then(|o| if o < 32 { Some(o) } else { None });\n+\n+    // Different type\n+    let x: Result<u32, &str> = Ok(1);\n+    let _ = x.and_then(Ok);\n+}\n+\n+pub fn foo() -> Option<String> {\n+    let x = Some(String::from(\"hello\"));\n+    Some(\"hello\".to_owned()).and_then(|s| Some(format!(\"{}{}\", s, x?)))\n+}"}, {"sha": "aebc66374a51383c80736dd97f3d91f5e57f372a", "filename": "tests/ui/option_and_then_some.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/tests%2Fui%2Foption_and_then_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/tests%2Fui%2Foption_and_then_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_and_then_some.rs?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![deny(clippy::option_and_then_some)]\n+\n+// need a main anyway, use it get rid of unused warnings too\n+pub fn main() {\n+    let x = Some(5);\n+    // the easiest cases\n+    let _ = x.and_then(Some);\n+    let _ = x.and_then(|o| Some(o + 1));\n+    // and an easy counter-example\n+    let _ = x.and_then(|o| if o < 32 { Some(o) } else { None });\n+\n+    // Different type\n+    let x: Result<u32, &str> = Ok(1);\n+    let _ = x.and_then(Ok);\n+}\n+\n+pub fn foo() -> Option<String> {\n+    let x = Some(String::from(\"hello\"));\n+    Some(\"hello\".to_owned()).and_then(|s| Some(format!(\"{}{}\", s, x?)))\n+}"}, {"sha": "a3b0a26149e1b1c1e40e2b0ad3388f474c94502d", "filename": "tests/ui/option_and_then_some.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7065239da55420e26adb7cb647fc7eb4e9c8798e/tests%2Fui%2Foption_and_then_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7065239da55420e26adb7cb647fc7eb4e9c8798e/tests%2Fui%2Foption_and_then_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_and_then_some.stderr?ref=7065239da55420e26adb7cb647fc7eb4e9c8798e", "patch": "@@ -0,0 +1,20 @@\n+error: using `Option.and_then(Some)`, which is a no-op\n+  --> $DIR/option_and_then_some.rs:8:13\n+   |\n+LL |     let _ = x.and_then(Some);\n+   |             ^^^^^^^^^^^^^^^^ help: use the expression directly: `x`\n+   |\n+note: lint level defined here\n+  --> $DIR/option_and_then_some.rs:2:9\n+   |\n+LL | #![deny(clippy::option_and_then_some)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n+  --> $DIR/option_and_then_some.rs:9:13\n+   |\n+LL |     let _ = x.and_then(|o| Some(o + 1));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `x.map(|o| o + 1)`\n+\n+error: aborting due to 2 previous errors\n+"}]}