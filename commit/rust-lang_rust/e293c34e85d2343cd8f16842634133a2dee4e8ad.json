{"sha": "e293c34e85d2343cd8f16842634133a2dee4e8ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOTNjMzRlODVkMjM0M2NkOGYxNjg0MjYzNDEzM2EyZGVlNGU4YWQ=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-29T18:14:19Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-29T18:16:59Z"}, "message": "feat(assists): Keep only one version of make_raw_string", "tree": {"sha": "60a9a14ce8f8801aeb1454e1506edcad5996ca4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60a9a14ce8f8801aeb1454e1506edcad5996ca4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e293c34e85d2343cd8f16842634133a2dee4e8ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e293c34e85d2343cd8f16842634133a2dee4e8ad", "html_url": "https://github.com/rust-lang/rust/commit/e293c34e85d2343cd8f16842634133a2dee4e8ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e293c34e85d2343cd8f16842634133a2dee4e8ad/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "281e1071558dff3138805de49dfbb0ad91b3acd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/281e1071558dff3138805de49dfbb0ad91b3acd3", "html_url": "https://github.com/rust-lang/rust/commit/281e1071558dff3138805de49dfbb0ad91b3acd3"}], "stats": {"total": 114, "additions": 15, "deletions": 99}, "files": [{"sha": "e57f24e7c8d161d6aadc20f2b1b9081a98095dc5", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 13, "deletions": 82, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/e293c34e85d2343cd8f16842634133a2dee4e8ad/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e293c34e85d2343cd8f16842634133a2dee4e8ad/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=e293c34e85d2343cd8f16842634133a2dee4e8ad", "patch": "@@ -5,27 +5,12 @@ use rustc_lexer;\n use crate::{Assist, AssistCtx, AssistId};\n \n pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let literal = ctx.node_at_offset::<Literal>()?;\n-    if literal.token().kind() != ra_syntax::SyntaxKind::STRING {\n-        return None;\n-    }\n-    ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n-        edit.target(literal.syntax().text_range());\n-        edit.insert(literal.syntax().text_range().start(), \"r\");\n-    });\n-    ctx.build()\n-}\n-\n-pub(crate) fn make_raw_string_unescaped(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let literal = ctx.node_at_offset::<Literal>()?;\n     if literal.token().kind() != ra_syntax::SyntaxKind::STRING {\n         return None;\n     }\n     let token = literal.token();\n     let text = token.text().as_str();\n-    if !text.contains(&['\\\\', '\\r'][..]) {\n-        return None;\n-    }\n     let usual_string_range = find_usual_string_range(text)?;\n     ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n         edit.target(literal.syntax().text_range());\n@@ -43,7 +28,7 @@ pub(crate) fn make_raw_string_unescaped(mut ctx: AssistCtx<impl HirDatabase>) ->\n         if error.is_err() {\n             eprintln!(\"Error unescaping string\");\n         } else {\n-            edit.replace(literal.syntax().text_range(), format!(\"r\\\"{}\\\"\", unescaped));\n+            edit.replace(literal.syntax().text_range(), format!(\"r#\\\"{}\\\"#\", unescaped));\n         }\n     });\n     ctx.build()\n@@ -126,99 +111,45 @@ mod test {\n             make_raw_string,\n             r#\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = <|>\"random\\nstring\";\n             }\n             \"#,\n-            r#\"\"random string\"\"#,\n+            r#\"\"random\\nstring\"\"#,\n         );\n     }\n \n     #[test]\n     fn make_raw_string_works() {\n-        check_assist(\n-            make_raw_string,\n-            r#\"\n-            fn f() {\n-                let s = <|>\"random string\";\n-            }\n-            \"#,\n-            r#\"\n-            fn f() {\n-                let s = <|>r\"random string\";\n-            }\n-            \"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn make_raw_string_with_escaped_works() {\n         check_assist(\n             make_raw_string,\n             r#\"\n             fn f() {\n                 let s = <|>\"random\\nstring\";\n             }\n             \"#,\n-            r#\"\n+            r##\"\n             fn f() {\n-                let s = <|>r\"random\\nstring\";\n+                let s = <|>r#\"random\n+string\"#;\n             }\n-            \"#,\n+            \"##,\n         )\n     }\n \n     #[test]\n-    fn make_raw_string_not_works() {\n-        check_assist_not_applicable(\n-            make_raw_string,\n-            r#\"\n-            fn f() {\n-                let s = <|>r\"random string\";\n-            }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn make_raw_string_unescaped_target() {\n-        check_assist_target(\n-            make_raw_string_unescaped,\n-            r#\"\n-            fn f() {\n-                let s = <|>\"random\\nstring\";\n-            }\n-            \"#,\n-            r#\"\"random\\nstring\"\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn make_raw_string_unescaped_works() {\n+    fn make_raw_string_nothing_to_unescape_works() {\n         check_assist(\n-            make_raw_string_unescaped,\n-            r#\"\n-            fn f() {\n-                let s = <|>\"random\\nstring\";\n-            }\n-            \"#,\n+            make_raw_string,\n             r#\"\n             fn f() {\n-                let s = <|>r\"random\n-string\";\n+                let s = <|>\"random string\";\n             }\n             \"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn make_raw_string_unescaped_dont_works() {\n-        check_assist_not_applicable(\n-            make_raw_string_unescaped,\n-            r#\"\n+            r##\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = <|>r#\"random string\"#;\n             }\n-            \"#,\n+            \"##,\n         )\n     }\n "}, {"sha": "3ca3320f7aa2ddf26082fc3c3daad002b9678a97", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e293c34e85d2343cd8f16842634133a2dee4e8ad/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e293c34e85d2343cd8f16842634133a2dee4e8ad/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=e293c34e85d2343cd8f16842634133a2dee4e8ad", "patch": "@@ -132,7 +132,6 @@ mod assists {\n             move_bounds::move_bounds_to_where_clause,\n             raw_string::add_hash,\n             raw_string::make_raw_string,\n-            raw_string::make_raw_string_unescaped,\n             raw_string::make_usual_string,\n             raw_string::remove_hash,\n         ]"}, {"sha": "23842f40929d5c6ac91734185c7ccf31b638e26d", "filename": "docs/user/features.md", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e293c34e85d2343cd8f16842634133a2dee4e8ad/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/e293c34e85d2343cd8f16842634133a2dee4e8ad/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=e293c34e85d2343cd8f16842634133a2dee4e8ad", "patch": "@@ -445,20 +445,6 @@ fn foo<T: u32, F: FnOnce(T) -> T>() {}\n fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n ```\n \n-- Make raw string\n-\n-```rust\n-// before:\n-fn f() {\n-    let s = <|>\"abcd\";\n-}\n-\n-// after:\n-fn f() {\n-    let s = <|>r\"abcd\";\n-}\n-```\n-\n - Make raw string unescaped\n \n ```rust\n@@ -469,8 +455,8 @@ fn f() {\n \n // after:\n fn f() {\n-    let s = <|>r\"ab\n-cd\";\n+    let s = <|>r#\"ab\n+cd\"#;\n }\n ```\n "}]}