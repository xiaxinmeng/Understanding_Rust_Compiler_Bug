{"sha": "756e8781584fb28af208218615bafbbd9164dfbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NmU4NzgxNTg0ZmIyOGFmMjA4MjE4NjE1YmFmYmJkOTE2NGRmYmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T18:52:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T19:15:35Z"}, "message": "add items from macros to modules", "tree": {"sha": "3dd70c1707ccc2c16b65b6ff3396c3b3a25e526f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dd70c1707ccc2c16b65b6ff3396c3b3a25e526f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756e8781584fb28af208218615bafbbd9164dfbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756e8781584fb28af208218615bafbbd9164dfbc", "html_url": "https://github.com/rust-lang/rust/commit/756e8781584fb28af208218615bafbbd9164dfbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756e8781584fb28af208218615bafbbd9164dfbc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b", "html_url": "https://github.com/rust-lang/rust/commit/4a3f76d3bb6cf75ab5a9ba3384c312a76c70564b"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "adfec56d85296cfc324fa491dfe091241c4b28d3", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/756e8781584fb28af208218615bafbbd9164dfbc/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e8781584fb28af208218615bafbbd9164dfbc/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=756e8781584fb28af208218615bafbbd9164dfbc", "patch": "@@ -91,6 +91,7 @@ salsa::database_storage! {\n             fn library_symbols() for symbol_index::LibrarySymbolsQuery;\n         }\n         impl hir::db::HirDatabase {\n+            fn m_source_file() for hir::db::MSourceFileQuery;\n             fn expand_macro_invocation() for hir::db::ExpandMacroCallQuery;\n             fn module_tree() for hir::db::ModuleTreeQuery;\n             fn fn_scopes() for hir::db::FnScopesQuery;"}, {"sha": "3b73208e6e0be51b2a734cfe0afb173e0dc1dfaf", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/756e8781584fb28af208218615bafbbd9164dfbc/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e8781584fb28af208218615bafbbd9164dfbc/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=756e8781584fb28af208218615bafbbd9164dfbc", "patch": "@@ -12,6 +12,7 @@ use ra_db::{SourceRootId, FileId, Cancelable,};\n \n use crate::{\n     SourceFileItems, SourceItemId, DefKind, Function, DefId, Name, AsName, MFileId,\n+    macros::MacroCallLoc,\n     db::HirDatabase,\n     function::FnScopes,\n     module::{\n@@ -123,25 +124,48 @@ pub(crate) fn modules<'a>(\n \n pub(super) fn input_module_items(\n     db: &impl HirDatabase,\n-    source_root: SourceRootId,\n+    source_root_id: SourceRootId,\n     module_id: ModuleId,\n ) -> Cancelable<Arc<InputModuleItems>> {\n-    let module_tree = db.module_tree(source_root)?;\n+    let module_tree = db.module_tree(source_root_id)?;\n     let source = module_id.source(&module_tree);\n     let mfile_id = source.file_id().into();\n     let file_items = db.file_items(mfile_id);\n-    let res = match source.resolve(db) {\n-        ModuleSourceNode::SourceFile(it) => {\n-            let items = it.borrowed().items();\n-            InputModuleItems::new(mfile_id, &file_items, items)\n+    let fill = |acc: &mut InputModuleItems, items: &mut Iterator<Item = ast::ItemOrMacro>| {\n+        for item in items {\n+            match item {\n+                ast::ItemOrMacro::Item(it) => {\n+                    acc.add_item(mfile_id, &file_items, it);\n+                }\n+                ast::ItemOrMacro::Macro(macro_call) => {\n+                    let item_id = file_items.id_of_unchecked(macro_call.syntax());\n+                    let loc = MacroCallLoc {\n+                        source_root_id,\n+                        module_id,\n+                        source_item_id: SourceItemId {\n+                            mfile_id,\n+                            item_id: Some(item_id),\n+                        },\n+                    };\n+                    let id = loc.id(db);\n+                    let mfile_id = MFileId::Macro(id);\n+                    let file_items = db.file_items(mfile_id);\n+                    //FIXME: expand recursively\n+                    for item in db.m_source_file(mfile_id).borrowed().items() {\n+                        acc.add_item(mfile_id, &file_items, item);\n+                    }\n+                }\n+            }\n         }\n+    };\n+\n+    let mut res = InputModuleItems::default();\n+    match source.resolve(db) {\n+        ModuleSourceNode::SourceFile(it) => fill(&mut res, &mut it.borrowed().items_with_macros()),\n         ModuleSourceNode::Module(it) => {\n-            let items = it\n-                .borrowed()\n-                .item_list()\n-                .into_iter()\n-                .flat_map(|it| it.items());\n-            InputModuleItems::new(mfile_id, &file_items, items)\n+            if let Some(item_list) = it.borrowed().item_list() {\n+                fill(&mut res, &mut item_list.items_with_macros())\n+            }\n         }\n     };\n     Ok(Arc::new(res))"}, {"sha": "3e948800ede9a9f8c9e8b2a8e63ff19b40c57db6", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/756e8781584fb28af208218615bafbbd9164dfbc/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756e8781584fb28af208218615bafbbd9164dfbc/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=756e8781584fb28af208218615bafbbd9164dfbc", "patch": "@@ -48,10 +48,40 @@ pub trait FnDefOwner<'a>: AstNode<'a> {\n     }\n }\n \n+// ModuleItem\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum ItemOrMacro<'a> {\n+    Item(ModuleItem<'a>),\n+    Macro(MacroCall<'a>),\n+}\n+\n+impl<'a> AstNode<'a> for ItemOrMacro<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        let res = if let Some(item) = ModuleItem::cast(syntax) {\n+            ItemOrMacro::Item(item)\n+        } else if let Some(macro_call) = MacroCall::cast(syntax) {\n+            ItemOrMacro::Macro(macro_call)\n+        } else {\n+            return None;\n+        };\n+        Some(res)\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> {\n+        match self {\n+            ItemOrMacro::Item(it) => it.syntax(),\n+            ItemOrMacro::Macro(it) => it.syntax(),\n+        }\n+    }\n+}\n+\n pub trait ModuleItemOwner<'a>: AstNode<'a> {\n     fn items(self) -> AstChildren<'a, ModuleItem<'a>> {\n         children(self)\n     }\n+\n+    fn items_with_macros(self) -> AstChildren<'a, ItemOrMacro<'a>> {\n+        children(self)\n+    }\n }\n \n pub trait TypeParamsOwner<'a>: AstNode<'a> {"}]}