{"sha": "f598091c055100daa1dc0d9c3f0f0a10209a0a84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OTgwOTFjMDU1MTAwZGFhMWRjMGQ5YzNmMGYwYTEwMjA5YTBhODQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-09T07:39:48Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-15T05:23:04Z"}, "message": "Use colon for keyword defs", "tree": {"sha": "68f4e5d997129a52bf12a3854b1cfca629ba17a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f4e5d997129a52bf12a3854b1cfca629ba17a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f598091c055100daa1dc0d9c3f0f0a10209a0a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f598091c055100daa1dc0d9c3f0f0a10209a0a84", "html_url": "https://github.com/rust-lang/rust/commit/f598091c055100daa1dc0d9c3f0f0a10209a0a84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f598091c055100daa1dc0d9c3f0f0a10209a0a84/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baebf79057fba32c27c3353aacbd389692a54a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/baebf79057fba32c27c3353aacbd389692a54a0c", "html_url": "https://github.com/rust-lang/rust/commit/baebf79057fba32c27c3353aacbd389692a54a0c"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "169c5e13718335fac55b758eb6889ba296bb0ef0", "filename": "src/librustc_macros/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f598091c055100daa1dc0d9c3f0f0a10209a0a84/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f598091c055100daa1dc0d9c3f0f0a10209a0a84/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs?ref=f598091c055100daa1dc0d9c3f0f0a10209a0a84", "patch": "@@ -22,7 +22,7 @@ struct Keyword {\n impl Parse for Keyword {\n     fn parse(input: ParseStream<'_>) -> Result<Self> {\n         let name = input.parse()?;\n-        input.parse::<Token![,]>()?;\n+        input.parse::<Token![:]>()?;\n         let value = input.parse()?;\n         input.parse::<Token![,]>()?;\n "}, {"sha": "c89bccd5afbf8140ae7bcafa007f9466e9e4c784", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/f598091c055100daa1dc0d9c3f0f0a10209a0a84/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f598091c055100daa1dc0d9c3f0f0a10209a0a84/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=f598091c055100daa1dc0d9c3f0f0a10209a0a84", "patch": "@@ -23,79 +23,79 @@ symbols! {\n     Keywords {\n         // Special reserved identifiers used internally for elided lifetimes,\n         // unnamed method parameters, crate root module, error recovery etc.\n-        Invalid,            \"\",\n-        PathRoot,           \"{{root}}\",\n-        DollarCrate,        \"$crate\",\n-        Underscore,         \"_\",\n+        Invalid:            \"\",\n+        PathRoot:           \"{{root}}\",\n+        DollarCrate:        \"$crate\",\n+        Underscore:         \"_\",\n \n         // Keywords that are used in stable Rust.\n-        As,                 \"as\",\n-        Box,                \"box\",\n-        Break,              \"break\",\n-        Const,              \"const\",\n-        Continue,           \"continue\",\n-        Crate,              \"crate\",\n-        Else,               \"else\",\n-        Enum,               \"enum\",\n-        Extern,             \"extern\",\n-        False,              \"false\",\n-        Fn,                 \"fn\",\n-        For,                \"for\",\n-        If,                 \"if\",\n-        Impl,               \"impl\",\n-        In,                 \"in\",\n-        Let,                \"let\",\n-        Loop,               \"loop\",\n-        Match,              \"match\",\n-        Mod,                \"mod\",\n-        Move,               \"move\",\n-        Mut,                \"mut\",\n-        Pub,                \"pub\",\n-        Ref,                \"ref\",\n-        Return,             \"return\",\n-        SelfLower,          \"self\",\n-        SelfUpper,          \"Self\",\n-        Static,             \"static\",\n-        Struct,             \"struct\",\n-        Super,              \"super\",\n-        Trait,              \"trait\",\n-        True,               \"true\",\n-        Type,               \"type\",\n-        Unsafe,             \"unsafe\",\n-        Use,                \"use\",\n-        Where,              \"where\",\n-        While,              \"while\",\n+        As:                 \"as\",\n+        Box:                \"box\",\n+        Break:              \"break\",\n+        Const:              \"const\",\n+        Continue:           \"continue\",\n+        Crate:              \"crate\",\n+        Else:               \"else\",\n+        Enum:               \"enum\",\n+        Extern:             \"extern\",\n+        False:              \"false\",\n+        Fn:                 \"fn\",\n+        For:                \"for\",\n+        If:                 \"if\",\n+        Impl:               \"impl\",\n+        In:                 \"in\",\n+        Let:                \"let\",\n+        Loop:               \"loop\",\n+        Match:              \"match\",\n+        Mod:                \"mod\",\n+        Move:               \"move\",\n+        Mut:                \"mut\",\n+        Pub:                \"pub\",\n+        Ref:                \"ref\",\n+        Return:             \"return\",\n+        SelfLower:          \"self\",\n+        SelfUpper:          \"Self\",\n+        Static:             \"static\",\n+        Struct:             \"struct\",\n+        Super:              \"super\",\n+        Trait:              \"trait\",\n+        True:               \"true\",\n+        Type:               \"type\",\n+        Unsafe:             \"unsafe\",\n+        Use:                \"use\",\n+        Where:              \"where\",\n+        While:              \"while\",\n \n         // Keywords that are used in unstable Rust or reserved for future use.\n-        Abstract,           \"abstract\",\n-        Become,             \"become\",\n-        Do,                 \"do\",\n-        Final,              \"final\",\n-        Macro,              \"macro\",\n-        Override,           \"override\",\n-        Priv,               \"priv\",\n-        Typeof,             \"typeof\",\n-        Unsized,            \"unsized\",\n-        Virtual,            \"virtual\",\n-        Yield,              \"yield\",\n+        Abstract:           \"abstract\",\n+        Become:             \"become\",\n+        Do:                 \"do\",\n+        Final:              \"final\",\n+        Macro:              \"macro\",\n+        Override:           \"override\",\n+        Priv:               \"priv\",\n+        Typeof:             \"typeof\",\n+        Unsized:            \"unsized\",\n+        Virtual:            \"virtual\",\n+        Yield:              \"yield\",\n \n         // Edition-specific keywords that are used in stable Rust.\n-        Dyn,                \"dyn\", // >= 2018 Edition only\n+        Dyn:                \"dyn\", // >= 2018 Edition only\n \n         // Edition-specific keywords that are used in unstable Rust or reserved for future use.\n-        Async,              \"async\", // >= 2018 Edition only\n-        Try,                \"try\", // >= 2018 Edition only\n+        Async:              \"async\", // >= 2018 Edition only\n+        Try:                \"try\", // >= 2018 Edition only\n \n         // Special lifetime names\n-        UnderscoreLifetime, \"'_\",\n-        StaticLifetime,     \"'static\",\n+        UnderscoreLifetime: \"'_\",\n+        StaticLifetime:     \"'static\",\n \n         // Weak keywords, have special meaning only in specific contexts.\n-        Auto,               \"auto\",\n-        Catch,              \"catch\",\n-        Default,            \"default\",\n-        Existential,        \"existential\",\n-        Union,              \"union\",\n+        Auto:               \"auto\",\n+        Catch:              \"catch\",\n+        Default:            \"default\",\n+        Existential:        \"existential\",\n+        Union:              \"union\",\n     }\n \n     // Other symbols that can be referred to with syntax_pos::symbols::*"}]}