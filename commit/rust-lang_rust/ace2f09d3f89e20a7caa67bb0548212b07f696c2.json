{"sha": "ace2f09d3f89e20a7caa67bb0548212b07f696c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZTJmMDlkM2Y4OWUyMGE3Y2FhNjdiYjA1NDgyMTJiMDdmNjk2YzI=", "commit": {"author": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2015-01-20T20:57:56Z"}, "committer": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2015-01-20T20:57:56Z"}, "message": "alloc::boxed: enable test\n\nPreviously test was disabled due to `#[cfg(test)]` before `mod boxed`.", "tree": {"sha": "edc6911e50aff1b31c9fb2c0828835b82d816685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc6911e50aff1b31c9fb2c0828835b82d816685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ace2f09d3f89e20a7caa67bb0548212b07f696c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ace2f09d3f89e20a7caa67bb0548212b07f696c2", "html_url": "https://github.com/rust-lang/rust/commit/ace2f09d3f89e20a7caa67bb0548212b07f696c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ace2f09d3f89e20a7caa67bb0548212b07f696c2/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f86de49748b472d4d189d9688b0d856c000914", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f86de49748b472d4d189d9688b0d856c000914", "html_url": "https://github.com/rust-lang/rust/commit/a0f86de49748b472d4d189d9688b0d856c000914"}], "stats": {"total": 130, "additions": 77, "deletions": 53}, "files": [{"sha": "de18d7a4a01ae3c916191be17610febfd6d63035", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ace2f09d3f89e20a7caa67bb0548212b07f696c2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace2f09d3f89e20a7caa67bb0548212b07f696c2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ace2f09d3f89e20a7caa67bb0548212b07f696c2", "patch": "@@ -187,56 +187,3 @@ impl<T: ?Sized> DerefMut for Box<T> {\n     fn deref_mut(&mut self) -> &mut T { &mut **self }\n }\n \n-#[cfg(test)]\n-mod test {\n-    #[test]\n-    fn test_owned_clone() {\n-        let a = Box::new(5i);\n-        let b: Box<int> = a.clone();\n-        assert!(a == b);\n-    }\n-\n-    #[test]\n-    fn any_move() {\n-        let a = Box::new(8u) as Box<Any>;\n-        let b = Box::new(Test) as Box<Any>;\n-\n-        match a.downcast::<uint>() {\n-            Ok(a) => { assert!(a == Box::new(8u)); }\n-            Err(..) => panic!()\n-        }\n-        match b.downcast::<Test>() {\n-            Ok(a) => { assert!(a == Box::new(Test)); }\n-            Err(..) => panic!()\n-        }\n-\n-        let a = Box::new(8u) as Box<Any>;\n-        let b = Box::new(Test) as Box<Any>;\n-\n-        assert!(a.downcast::<Box<Test>>().is_err());\n-        assert!(b.downcast::<Box<uint>>().is_err());\n-    }\n-\n-    #[test]\n-    fn test_show() {\n-        let a = Box::new(8u) as Box<Any>;\n-        let b = Box::new(Test) as Box<Any>;\n-        let a_str = a.to_str();\n-        let b_str = b.to_str();\n-        assert_eq!(a_str, \"Box<Any>\");\n-        assert_eq!(b_str, \"Box<Any>\");\n-\n-        let a = &8u as &Any;\n-        let b = &Test as &Any;\n-        let s = format!(\"{}\", a);\n-        assert_eq!(s, \"&Any\");\n-        let s = format!(\"{}\", b);\n-        assert_eq!(s, \"&Any\");\n-    }\n-\n-    #[test]\n-    fn deref() {\n-        fn homura<T: Deref<Target=i32>>(_: T) { }\n-        homura(Box::new(765i32));\n-    }\n-}"}, {"sha": "c47a771f60d09ceb2ad74fed5a754413f396a34a", "filename": "src/liballoc/boxed_test.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ace2f09d3f89e20a7caa67bb0548212b07f696c2/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace2f09d3f89e20a7caa67bb0548212b07f696c2/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=ace2f09d3f89e20a7caa67bb0548212b07f696c2", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Test for `boxed` mod.\n+\n+use core::any::Any;\n+use core::ops::Deref;\n+use core::result::Result::{Ok, Err};\n+use core::clone::Clone;\n+\n+use std::boxed::Box;\n+use std::boxed::BoxAny;\n+\n+#[test]\n+fn test_owned_clone() {\n+    let a = Box::new(5i);\n+    let b: Box<int> = a.clone();\n+    assert!(a == b);\n+}\n+\n+#[derive(PartialEq, Eq)]\n+struct Test;\n+\n+#[test]\n+fn any_move() {\n+    let a = Box::new(8u) as Box<Any>;\n+    let b = Box::new(Test) as Box<Any>;\n+\n+    match a.downcast::<uint>() {\n+        Ok(a) => { assert!(a == Box::new(8u)); }\n+        Err(..) => panic!()\n+    }\n+    match b.downcast::<Test>() {\n+        Ok(a) => { assert!(a == Box::new(Test)); }\n+        Err(..) => panic!()\n+    }\n+\n+    let a = Box::new(8u) as Box<Any>;\n+    let b = Box::new(Test) as Box<Any>;\n+\n+    assert!(a.downcast::<Box<Test>>().is_err());\n+    assert!(b.downcast::<Box<uint>>().is_err());\n+}\n+\n+#[test]\n+fn test_show() {\n+    let a = Box::new(8u) as Box<Any>;\n+    let b = Box::new(Test) as Box<Any>;\n+    let a_str = format!(\"{:?}\", a);\n+    let b_str = format!(\"{:?}\", b);\n+    assert_eq!(a_str, \"Box<Any>\");\n+    assert_eq!(b_str, \"Box<Any>\");\n+\n+    static EIGHT: usize = 8us;\n+    static TEST: Test = Test;\n+    let a = &EIGHT as &Any;\n+    let b = &TEST as &Any;\n+    let s = format!(\"{:?}\", a);\n+    assert_eq!(s, \"&Any\");\n+    let s = format!(\"{:?}\", b);\n+    assert_eq!(s, \"&Any\");\n+}\n+\n+#[test]\n+fn deref() {\n+    fn homura<T: Deref<Target=i32>>(_: T) { }\n+    homura(Box::new(765i32));\n+}"}, {"sha": "be45429aa1aa8c7830568cf6d7e3f8c79f7f9900", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ace2f09d3f89e20a7caa67bb0548212b07f696c2/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace2f09d3f89e20a7caa67bb0548212b07f696c2/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ace2f09d3f89e20a7caa67bb0548212b07f696c2", "patch": "@@ -91,6 +91,8 @@ pub mod heap;\n \n #[cfg(not(test))]\n pub mod boxed;\n+#[cfg(test)]\n+mod boxed_test;\n pub mod arc;\n pub mod rc;\n "}]}