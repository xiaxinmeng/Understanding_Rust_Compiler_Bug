{"sha": "9c837c0450b60c6e84d6c343613d3505352007d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljODM3YzA0NTBiNjBjNmU4NGQ2YzM0MzYxM2QzNTA1MzUyMDA3ZDc=", "commit": {"author": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-05-31T14:02:45Z"}, "committer": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-06-01T08:38:29Z"}, "message": "Return an iterator from enum_variant_ids.", "tree": {"sha": "9306d2be3a6895a727cb2b7303a06687a4e41838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9306d2be3a6895a727cb2b7303a06687a4e41838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c837c0450b60c6e84d6c343613d3505352007d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c837c0450b60c6e84d6c343613d3505352007d7", "html_url": "https://github.com/rust-lang/rust/commit/9c837c0450b60c6e84d6c343613d3505352007d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c837c0450b60c6e84d6c343613d3505352007d7/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243e85f393a9e4527d814ecc9dfe23d2e3f9c737", "url": "https://api.github.com/repos/rust-lang/rust/commits/243e85f393a9e4527d814ecc9dfe23d2e3f9c737", "html_url": "https://github.com/rust-lang/rust/commit/243e85f393a9e4527d814ecc9dfe23d2e3f9c737"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "be285d975b81df68933dfbad4b3e08c1b62b0414", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c837c0450b60c6e84d6c343613d3505352007d7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c837c0450b60c6e84d6c343613d3505352007d7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=9c837c0450b60c6e84d6c343613d3505352007d7", "patch": "@@ -268,10 +268,28 @@ fn item_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)\n     doc_trait_ref(tp, tcx, cdata)\n }\n \n-fn enum_variant_ids(item: rbml::Doc, cdata: Cmd) -> Vec<ast::DefId> {\n-    reader::tagged_docs(item, tag_items_data_item_variant)\n-        .map(|p| translated_def_id(cdata, p))\n-        .collect()\n+struct EnumVariantIds<'a> {\n+    iter: reader::TaggedDocsIterator<'a>,\n+    cdata: Cmd<'a>,\n+}\n+\n+impl<'a> Iterator for EnumVariantIds<'a> {\n+    type Item = ast::DefId;\n+\n+    fn next(&mut self) -> Option<ast::DefId> {\n+        self.iter.next().map(|p| translated_def_id(self.cdata, p))\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+fn enum_variant_ids<'a>(item: rbml::Doc<'a>, cdata: Cmd<'a>) -> EnumVariantIds<'a> {\n+    EnumVariantIds {\n+        iter: reader::tagged_docs(item, tag_items_data_item_variant),\n+        cdata: cdata,\n+    }\n }\n \n fn item_path(item_doc: rbml::Doc) -> Vec<ast_map::PathElem> {\n@@ -719,11 +737,11 @@ pub fn get_enum_variant_defs(intr: &IdentInterner,\n     let data = cdata.data();\n     let items = reader::get_doc(rbml::Doc::new(data), tag_items);\n     let item = find_item(id, items);\n-    enum_variant_ids(item, cdata).iter().map(|did| {\n+    enum_variant_ids(item, cdata).map(|did| {\n         let item = find_item(did.node, items);\n         let name = item_name(intr, item);\n         let visibility = item_visibility(item);\n-        match item_to_def_like(cdata, item, *did) {\n+        match item_to_def_like(cdata, item, did) {\n             DlDef(def @ def::DefVariant(..)) => (def, name, visibility),\n             _ => unreachable!()\n         }\n@@ -736,7 +754,7 @@ pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::Nod\n     let items = reader::get_doc(rbml::Doc::new(data), tag_items);\n     let item = find_item(id, items);\n     let mut disr_val = 0;\n-    enum_variant_ids(item, cdata).iter().map(|did| {\n+    enum_variant_ids(item, cdata).map(|did| {\n         let item = find_item(did.node, items);\n         let ctor_ty = item_type(ast::DefId { krate: cdata.cnum, node: id},\n                                 item, tcx, cdata);\n@@ -771,7 +789,7 @@ pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::Nod\n             name: name,\n             // I'm not even sure if we encode visibility\n             // for variants -- TEST -- tjc\n-            id: *did,\n+            id: did,\n             disr_val: old_disr_val,\n             vis: ast::Inherited\n         })"}]}