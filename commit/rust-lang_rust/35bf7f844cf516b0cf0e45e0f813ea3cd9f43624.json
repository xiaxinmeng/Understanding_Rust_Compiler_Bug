{"sha": "35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YmY3Zjg0NGNmNTE2YjBjZjBlNDVlMGY4MTNlYTNjZDlmNDM2MjQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-17T17:57:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-17T17:57:25Z"}, "message": "Rollup merge of #47481 - estebank:unused-args, r=arielb1\n\nPoint at unused arguments for format string\n\nAvoid overlapping spans by only pointing at the arguments that are not\nbeing used in the argument string. Enable libsyntax to have diagnostics\nwith multiple primary spans by accepting `Into<MultiSpan>` instead of\n`Span`.\n\nPartially addresses #41850.", "tree": {"sha": "78f32e6664be74a0a4092ef7f2693cf1b991a24c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f32e6664be74a0a4092ef7f2693cf1b991a24c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "html_url": "https://github.com/rust-lang/rust/commit/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c5484c1790844059a6b42554cb574b671b5189", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c5484c1790844059a6b42554cb574b671b5189", "html_url": "https://github.com/rust-lang/rust/commit/b2c5484c1790844059a6b42554cb574b671b5189"}, {"sha": "eb3da09333870e94b122d863402d993fb7ecd78f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3da09333870e94b122d863402d993fb7ecd78f", "html_url": "https://github.com/rust-lang/rust/commit/eb3da09333870e94b122d863402d993fb7ecd78f"}], "stats": {"total": 146, "additions": 69, "deletions": 77}, "files": [{"sha": "612d8501fb2afcf49f176a357076f6dfa25ea93d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "patch": "@@ -13,7 +13,7 @@ pub use self::SyntaxExtension::*;\n use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n use codemap::{self, CodeMap, Spanned, respan};\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n use errors::DiagnosticBuilder;\n use ext::expand::{self, Expansion, Invocation};\n use ext::hygiene::{Mark, SyntaxContext};\n@@ -754,22 +754,22 @@ impl<'a> ExtCtxt<'a> {\n         last_macro\n     }\n \n-    pub fn struct_span_warn(&self,\n-                            sp: Span,\n-                            msg: &str)\n-                            -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(&self,\n+                                                sp: S,\n+                                                msg: &str)\n+                                                -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.struct_span_warn(sp, msg)\n     }\n-    pub fn struct_span_err(&self,\n-                           sp: Span,\n-                           msg: &str)\n-                           -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(&self,\n+                                               sp: S,\n+                                               msg: &str)\n+                                               -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n-    pub fn struct_span_fatal(&self,\n-                             sp: Span,\n-                             msg: &str)\n-                             -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(&self,\n+                                                 sp: S,\n+                                                 msg: &str)\n+                                                 -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.struct_span_fatal(sp, msg)\n     }\n \n@@ -785,7 +785,7 @@ impl<'a> ExtCtxt<'a> {\n     ///   in most cases one can construct a dummy expression/item to\n     ///   substitute; we never hit resolve/type-checking so the dummy\n     ///   value doesn't have to match anything)\n-    pub fn span_fatal(&self, sp: Span, msg: &str) -> ! {\n+    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         panic!(self.parse_sess.span_diagnostic.span_fatal(sp, msg));\n     }\n \n@@ -794,20 +794,20 @@ impl<'a> ExtCtxt<'a> {\n     ///\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n-    pub fn span_err(&self, sp: Span, msg: &str) {\n+    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n-    pub fn mut_span_err(&self, sp: Span, msg: &str)\n+    pub fn mut_span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str)\n                         -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.mut_span_err(sp, msg)\n     }\n-    pub fn span_warn(&self, sp: Span, msg: &str) {\n+    pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }\n-    pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! {\n+    pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_unimpl(sp, msg);\n     }\n-    pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n+    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n     pub fn trace_macros_diag(&mut self) {"}, {"sha": "3d58104260f9a506e75daa8143db921847aa9113", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "patch": "@@ -42,7 +42,7 @@ use ast::{BinOpKind, UnOp};\n use ast::{RangeEnd, RangeSyntax};\n use {ast, attr};\n use codemap::{self, CodeMap, Spanned, respan};\n-use syntax_pos::{self, Span, BytePos, FileName, DUMMY_SP};\n+use syntax_pos::{self, Span, MultiSpan, BytePos, FileName, DUMMY_SP};\n use errors::{self, DiagnosticBuilder};\n use parse::{self, classify, token};\n use parse::common::SeqSep;\n@@ -447,7 +447,9 @@ pub enum Error {\n }\n \n impl Error {\n-    pub fn span_err(self, sp: Span, handler: &errors::Handler) -> DiagnosticBuilder {\n+    pub fn span_err<S: Into<MultiSpan>>(self,\n+                                        sp: S,\n+                                        handler: &errors::Handler) -> DiagnosticBuilder {\n         match self {\n             Error::FileNotFoundForModule { ref mod_name,\n                                            ref default_path,\n@@ -1266,13 +1268,16 @@ impl<'a> Parser<'a> {\n     pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_fatal(self.span, m)\n     }\n-    pub fn span_fatal(&self, sp: Span, m: &str) -> DiagnosticBuilder<'a> {\n+    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_fatal(sp, m)\n     }\n-    pub fn span_fatal_err(&self, sp: Span, err: Error) -> DiagnosticBuilder<'a> {\n+    pub fn span_fatal_err<S: Into<MultiSpan>>(&self, sp: S, err: Error) -> DiagnosticBuilder<'a> {\n         err.span_err(sp, self.diagnostic())\n     }\n-    pub fn span_fatal_help(&self, sp: Span, m: &str, help: &str) -> DiagnosticBuilder<'a> {\n+    pub fn span_fatal_help<S: Into<MultiSpan>>(&self,\n+                                            sp: S,\n+                                            m: &str,\n+                                            help: &str) -> DiagnosticBuilder<'a> {\n         let mut err = self.sess.span_diagnostic.struct_span_fatal(sp, m);\n         err.help(help);\n         err\n@@ -1283,21 +1288,21 @@ impl<'a> Parser<'a> {\n     pub fn warn(&self, m: &str) {\n         self.sess.span_diagnostic.span_warn(self.span, m)\n     }\n-    pub fn span_warn(&self, sp: Span, m: &str) {\n+    pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, m: &str) {\n         self.sess.span_diagnostic.span_warn(sp, m)\n     }\n-    pub fn span_err(&self, sp: Span, m: &str) {\n+    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, m: &str) {\n         self.sess.span_diagnostic.span_err(sp, m)\n     }\n-    pub fn struct_span_err(&self, sp: Span, m: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_err(sp, m)\n     }\n-    pub fn span_err_help(&self, sp: Span, m: &str, h: &str) {\n+    pub fn span_err_help<S: Into<MultiSpan>>(&self, sp: S, m: &str, h: &str) {\n         let mut err = self.sess.span_diagnostic.mut_span_err(sp, m);\n         err.help(h);\n         err.emit();\n     }\n-    pub fn span_bug(&self, sp: Span, m: &str) -> ! {\n+    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(sp, m)\n     }\n     pub fn abort_if_errors(&self) {"}, {"sha": "a7822414c6959472e856064557b3ac65e47d7b07", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "patch": "@@ -814,15 +814,11 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                 let (sp, msg) = errs.into_iter().next().unwrap();\n                 cx.ecx.struct_span_err(sp, msg)\n             } else {\n-                let mut diag = cx.ecx.struct_span_err(cx.fmtsp,\n-                    \"multiple unused formatting arguments\");\n-\n-                // Ignoring message, as it gets repetitive\n-                // Then use MultiSpan to not clutter up errors\n-                for (sp, _) in errs {\n-                    diag.span_label(sp, \"unused\");\n-                }\n-\n+                let mut diag = cx.ecx.struct_span_err(\n+                    errs.iter().map(|&(sp, _)| sp).collect::<Vec<Span>>(),\n+                    \"multiple unused formatting arguments\"\n+                );\n+                diag.span_label(cx.fmtsp, \"multiple unused arguments in this statement\");\n                 diag\n             }\n         };"}, {"sha": "ec0eaed43aea650c3cde1f89c108152a3ce452ca", "filename": "src/test/ui/macros/format-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs?ref=35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4);\n+    println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n     println!(\"%1$*2$.*3$f\", 123.456); //~ ERROR never used\n \n     // This should *not* produce hints, on the basis that there's equally as"}, {"sha": "f9852c5477332f89eb683e93dddf0debcaeea74a", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "patch": "@@ -1,12 +1,8 @@\n error: multiple unused formatting arguments\n-  --> $DIR/format-foreign.rs:12:5\n+  --> $DIR/format-foreign.rs:12:30\n    |\n-12 |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^--------^^-------^^-^^\n-   |                              |         |        |\n-   |                              |         |        unused\n-   |                              |         unused\n-   |                              unused\n+12 |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n+   |     -------------------------^^^^^^^^--^^^^^^^--^-- multiple unused arguments in this statement\n    |\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`"}, {"sha": "3347a1215cede357b131ecf2d4e5b3a9b2e17388", "filename": "src/test/ui/macros/format-unused-lables.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.rs?ref=35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "patch": "@@ -10,17 +10,18 @@\n \n fn main() {\n     println!(\"Test\", 123, 456, 789);\n+    //~^ ERROR multiple unused formatting arguments\n \n     println!(\"Test2\",\n-        123,\n+        123,  //~ ERROR multiple unused formatting arguments\n         456,\n         789\n     );\n \n     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n \n     println!(\"Some more $STUFF\",\n-        \"woo!\",\n+        \"woo!\",  //~ ERROR multiple unused formatting arguments\n             STUFF=\n        \"things\"\n              , UNUSED=\"args\");"}, {"sha": "64ea5626c1d62776bbd2146becb7af161228410e", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf7f844cf516b0cf0e45e0f813ea3cd9f43624/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=35bf7f844cf516b0cf0e45e0f813ea3cd9f43624", "patch": "@@ -1,49 +1,43 @@\n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:12:5\n+  --> $DIR/format-unused-lables.rs:12:22\n    |\n 12 |     println!(\"Test\", 123, 456, 789);\n-   |     ^^^^^^^^^^^^^^^^^---^^---^^---^^\n-   |                      |    |    |\n-   |                      |    |    unused\n-   |                      |    unused\n-   |                      unused\n+   |     -----------------^^^--^^^--^^^-- multiple unused arguments in this statement\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:14:5\n+  --> $DIR/format-unused-lables.rs:16:9\n    |\n-14 | /     println!(\"Test2\",\n-15 | |         123,\n-   | |         --- unused\n-16 | |         456,\n-   | |         --- unused\n-17 | |         789\n-   | |         --- unused\n-18 | |     );\n-   | |______^\n+15 | /     println!(\"Test2\",\n+16 | |         123,  //~ ERROR multiple unused formatting arguments\n+   | |         ^^^\n+17 | |         456,\n+   | |         ^^^\n+18 | |         789\n+   | |         ^^^\n+19 | |     );\n+   | |______- multiple unused arguments in this statement\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: named argument never used\n-  --> $DIR/format-unused-lables.rs:20:35\n+  --> $DIR/format-unused-lables.rs:21:35\n    |\n-20 |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n+21 |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n    |                                   ^^^^^^\n \n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:22:5\n+  --> $DIR/format-unused-lables.rs:24:9\n    |\n-22 | /     println!(\"Some more $STUFF\",\n-23 | |         \"woo!\",\n-   | |         ------ unused\n-24 | |             STUFF=\n-25 | |        \"things\"\n-   | |        -------- unused\n-26 | |              , UNUSED=\"args\");\n-   | |_______________________------_^\n-   |                         |\n-   |                         unused\n+23 | /     println!(\"Some more $STUFF\",\n+24 | |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n+   | |         ^^^^^^\n+25 | |             STUFF=\n+26 | |        \"things\"\n+   | |        ^^^^^^^^\n+27 | |              , UNUSED=\"args\");\n+   | |_______________________^^^^^^_- multiple unused arguments in this statement\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`"}]}