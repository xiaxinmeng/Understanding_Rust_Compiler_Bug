{"sha": "61b67d0c199e4f93d227d7303fab0270ec1a68d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYjY3ZDBjMTk5ZTRmOTNkMjI3ZDczMDNmYWIwMjcwZWMxYTY4ZDA=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-13T00:55:36Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-02T11:43:07Z"}, "message": "Fix cross-DLL panics under MSVC", "tree": {"sha": "ec8d00243c01cdd2c46f05a15be4b6fec2f7dfd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec8d00243c01cdd2c46f05a15be4b6fec2f7dfd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61b67d0c199e4f93d227d7303fab0270ec1a68d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61b67d0c199e4f93d227d7303fab0270ec1a68d0", "html_url": "https://github.com/rust-lang/rust/commit/61b67d0c199e4f93d227d7303fab0270ec1a68d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61b67d0c199e4f93d227d7303fab0270ec1a68d0/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d04944cefc61cd684e3554e48068926a5f30ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d04944cefc61cd684e3554e48068926a5f30ab", "html_url": "https://github.com/rust-lang/rust/commit/01d04944cefc61cd684e3554e48068926a5f30ab"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "b6e61e7050ceaaedccaaa58f6391d7f7df1ea66d", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61b67d0c199e4f93d227d7303fab0270ec1a68d0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/61b67d0c199e4f93d227d7303fab0270ec1a68d0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=61b67d0c199e4f93d227d7303fab0270ec1a68d0", "patch": "@@ -248,7 +248,6 @@ the source code.\n   - `eh_personality`: `libpanic_unwind/gcc.rs` (GNU)\n   - `eh_personality`: `libpanic_unwind/seh.rs` (SEH)\n   - `eh_unwind_resume`: `libpanic_unwind/gcc.rs` (GCC)\n-  - `eh_catch_typeinfo`: `libpanic_unwind/seh.rs` (SEH)\n   - `eh_catch_typeinfo`: `libpanic_unwind/emcc.rs` (EMCC)\n   - `panic`: `libcore/panicking.rs`\n   - `panic_bounds_check`: `libcore/panicking.rs`"}, {"sha": "f599f9815a62ce0ece14db42afcb6560433d509f", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/61b67d0c199e4f93d227d7303fab0270ec1a68d0/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b67d0c199e4f93d227d7303fab0270ec1a68d0/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=61b67d0c199e4f93d227d7303fab0270ec1a68d0", "patch": "@@ -167,6 +167,9 @@ pub struct _TypeDescriptor {\n \n // Note that we intentionally ignore name mangling rules here: we don't want C++\n // to be able to catch Rust panics by simply declaring a `struct rust_panic`.\n+//\n+// When modifying, make sure that the type name string exactly matches\n+// the one used in src/librustc_codegen_llvm/intrinsic.rs.\n const TYPE_NAME: [u8; 11] = *b\"rust_panic\\0\";\n \n static mut THROW_INFO: _ThrowInfo = _ThrowInfo {\n@@ -199,12 +202,12 @@ extern \"C\" {\n     static TYPE_INFO_VTABLE: *const u8;\n }\n \n-// We use #[lang = \"eh_catch_typeinfo\"] here as this is the type descriptor which\n-// we'll use in LLVM's `catchpad` instruction which ends up also being passed as\n-// an argument to the C++ personality function.\n+// This type descriptor is only used when throwing an exception. The catch part\n+// is handled by the try intrinsic, which generates its own TypeDescriptor.\n //\n-// Again, I'm not entirely sure what this is describing, it just seems to work.\n-#[cfg_attr(not(test), lang = \"eh_catch_typeinfo\")]\n+// This is fine since the MSVC runtime uses string comparison on the type name\n+// to match TypeDescriptors rather than pointer equality.\n+#[cfg_attr(bootstrap, lang = \"eh_catch_typeinfo\")]\n static mut TYPE_DESCRIPTOR: _TypeDescriptor = _TypeDescriptor {\n     pVFTable: unsafe { &TYPE_INFO_VTABLE } as *const _ as *const _,\n     spare: core::ptr::null_mut(),"}, {"sha": "fa7e7e6e4a211fd4ae07b353764c0891b2f77e9f", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/61b67d0c199e4f93d227d7303fab0270ec1a68d0/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b67d0c199e4f93d227d7303fab0270ec1a68d0/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=61b67d0c199e4f93d227d7303fab0270ec1a68d0", "patch": "@@ -954,19 +954,39 @@ fn codegen_msvc_try(\n         let cs = catchswitch.catch_switch(None, None, 1);\n         catchswitch.add_handler(cs, catchpad.llbb());\n \n+        // We can't use the TypeDescriptor defined in libpanic_unwind because it\n+        // might be in another DLL and the SEH encoding only supports specifying\n+        // a TypeDescriptor from the current module.\n+        //\n+        // However this isn't an issue since the MSVC runtime uses string\n+        // comparison on the type name to match TypeDescriptors rather than\n+        // pointer equality.\n+        //\n+        // So instead we generate a new TypeDescriptor in each module that uses\n+        // `try` and let the linker merge duplicate definitions in the same\n+        // module.\n+        //\n+        // When modifying, make sure that the type_name string exactly matches\n+        // the one used in src/libpanic_unwind/seh.rs.\n+        let type_info_vtable = bx.declare_global(\"??_7type_info@@6B@\", bx.type_i8p());\n+        let type_name = bx.const_bytes(b\"rust_panic\\0\");\n+        let type_info =\n+            bx.const_struct(&[type_info_vtable, bx.const_null(bx.type_i8p()), type_name], false);\n+        let tydesc = bx.declare_global(\"__rust_panic_type_info\", bx.val_ty(type_info));\n+        unsafe {\n+            llvm::LLVMRustSetLinkage(tydesc, llvm::Linkage::LinkOnceODRLinkage);\n+            llvm::SetUniqueComdat(bx.llmod, tydesc);\n+            llvm::LLVMSetInitializer(tydesc, type_info);\n+        }\n+\n         // The flag value of 8 indicates that we are catching the exception by\n         // reference instead of by value. We can't use catch by value because\n         // that requires copying the exception object, which we don't support\n         // since our exception object effectively contains a Box.\n         //\n         // Source: MicrosoftCXXABI::getAddrOfCXXCatchHandlerType in clang\n         let flags = bx.const_i32(8);\n-        let tydesc = match bx.tcx().lang_items().eh_catch_typeinfo() {\n-            Some(did) => bx.get_static(did),\n-            None => bug!(\"eh_catch_typeinfo not defined, but needed for SEH unwinding\"),\n-        };\n         let funclet = catchpad.catch_pad(cs, &[tydesc, flags, slot]);\n-\n         let i64_align = bx.tcx().data_layout.i64_align.abi;\n         let payload_ptr = catchpad.load(slot, ptr_align);\n         let payload = catchpad.load(payload_ptr, i64_align);"}]}